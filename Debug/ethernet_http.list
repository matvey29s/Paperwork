
ethernet_http.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e28c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014188  0801e48c  0801e48c  0001f48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08032614  08032614  000342cc  2**0
                  CONTENTS
  4 .ARM          00000008  08032614  08032614  00033614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803261c  0803261c  000342cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803261c  0803261c  0003361c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08032620  08032620  00033620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  08032624  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000018c  080327b0  0003418c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000022c  08032850  0003422c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000fdf8  200002cc  080328f0  000342cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200100c4  080328f0  000350c4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000342cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003e05a  00000000  00000000  000342fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009e14  00000000  00000000  00072354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002ca0  00000000  00000000  0007c168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000022f1  00000000  00000000  0007ee08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d627  00000000  00000000  000810f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00047cc1  00000000  00000000  000be720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001216dc  00000000  00000000  001063e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00227abd  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c244  00000000  00000000  00227b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000050  00000000  00000000  00233d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002cc 	.word	0x200002cc
 800021c:	00000000 	.word	0x00000000
 8000220:	0801e474 	.word	0x0801e474

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002d0 	.word	0x200002d0
 800023c:	0801e474 	.word	0x0801e474

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08c      	sub	sp, #48	@ 0x30
 80006a4:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	9302      	str	r3, [sp, #8]
 80006ac:	2319      	movs	r3, #25
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	463b      	mov	r3, r7
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	2301      	movs	r3, #1
 80006b6:	2288      	movs	r2, #136	@ 0x88
 80006b8:	21ec      	movs	r1, #236	@ 0xec
 80006ba:	4857      	ldr	r0, [pc, #348]	@ (8000818 <TrimRead+0x178>)
 80006bc:	f003 fd5a 	bl	8004174 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80006c0:	463b      	mov	r3, r7
 80006c2:	3319      	adds	r3, #25
 80006c4:	f04f 32ff 	mov.w	r2, #4294967295
 80006c8:	9202      	str	r2, [sp, #8]
 80006ca:	2207      	movs	r2, #7
 80006cc:	9201      	str	r2, [sp, #4]
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2301      	movs	r3, #1
 80006d2:	22e1      	movs	r2, #225	@ 0xe1
 80006d4:	21ec      	movs	r1, #236	@ 0xec
 80006d6:	4850      	ldr	r0, [pc, #320]	@ (8000818 <TrimRead+0x178>)
 80006d8:	f003 fd4c 	bl	8004174 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80006dc:	787b      	ldrb	r3, [r7, #1]
 80006de:	021b      	lsls	r3, r3, #8
 80006e0:	b21a      	sxth	r2, r3
 80006e2:	783b      	ldrb	r3, [r7, #0]
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b21b      	sxth	r3, r3
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	4b4b      	ldr	r3, [pc, #300]	@ (800081c <TrimRead+0x17c>)
 80006ee:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80006f0:	78fb      	ldrb	r3, [r7, #3]
 80006f2:	021b      	lsls	r3, r3, #8
 80006f4:	b21a      	sxth	r2, r3
 80006f6:	78bb      	ldrb	r3, [r7, #2]
 80006f8:	b21b      	sxth	r3, r3
 80006fa:	4313      	orrs	r3, r2
 80006fc:	b21a      	sxth	r2, r3
 80006fe:	4b48      	ldr	r3, [pc, #288]	@ (8000820 <TrimRead+0x180>)
 8000700:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8000702:	797b      	ldrb	r3, [r7, #5]
 8000704:	021b      	lsls	r3, r3, #8
 8000706:	b21a      	sxth	r2, r3
 8000708:	793b      	ldrb	r3, [r7, #4]
 800070a:	b21b      	sxth	r3, r3
 800070c:	4313      	orrs	r3, r2
 800070e:	b21a      	sxth	r2, r3
 8000710:	4b44      	ldr	r3, [pc, #272]	@ (8000824 <TrimRead+0x184>)
 8000712:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	b21a      	sxth	r2, r3
 800071a:	797b      	ldrb	r3, [r7, #5]
 800071c:	b21b      	sxth	r3, r3
 800071e:	4313      	orrs	r3, r2
 8000720:	b21b      	sxth	r3, r3
 8000722:	b29a      	uxth	r2, r3
 8000724:	4b40      	ldr	r3, [pc, #256]	@ (8000828 <TrimRead+0x188>)
 8000726:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8000728:	7a7b      	ldrb	r3, [r7, #9]
 800072a:	021b      	lsls	r3, r3, #8
 800072c:	b21a      	sxth	r2, r3
 800072e:	79bb      	ldrb	r3, [r7, #6]
 8000730:	b21b      	sxth	r3, r3
 8000732:	4313      	orrs	r3, r2
 8000734:	b21a      	sxth	r2, r3
 8000736:	4b3d      	ldr	r3, [pc, #244]	@ (800082c <TrimRead+0x18c>)
 8000738:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800073a:	7afb      	ldrb	r3, [r7, #11]
 800073c:	021b      	lsls	r3, r3, #8
 800073e:	b21a      	sxth	r2, r3
 8000740:	7abb      	ldrb	r3, [r7, #10]
 8000742:	b21b      	sxth	r3, r3
 8000744:	4313      	orrs	r3, r2
 8000746:	b21a      	sxth	r2, r3
 8000748:	4b39      	ldr	r3, [pc, #228]	@ (8000830 <TrimRead+0x190>)
 800074a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 800074c:	7b7b      	ldrb	r3, [r7, #13]
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	b21a      	sxth	r2, r3
 8000752:	7b3b      	ldrb	r3, [r7, #12]
 8000754:	b21b      	sxth	r3, r3
 8000756:	4313      	orrs	r3, r2
 8000758:	b21a      	sxth	r2, r3
 800075a:	4b36      	ldr	r3, [pc, #216]	@ (8000834 <TrimRead+0x194>)
 800075c:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	021b      	lsls	r3, r3, #8
 8000762:	b21a      	sxth	r2, r3
 8000764:	7bbb      	ldrb	r3, [r7, #14]
 8000766:	b21b      	sxth	r3, r3
 8000768:	4313      	orrs	r3, r2
 800076a:	b21a      	sxth	r2, r3
 800076c:	4b32      	ldr	r3, [pc, #200]	@ (8000838 <TrimRead+0x198>)
 800076e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8000770:	7c7b      	ldrb	r3, [r7, #17]
 8000772:	021b      	lsls	r3, r3, #8
 8000774:	b21a      	sxth	r2, r3
 8000776:	7c3b      	ldrb	r3, [r7, #16]
 8000778:	b21b      	sxth	r3, r3
 800077a:	4313      	orrs	r3, r2
 800077c:	b21a      	sxth	r2, r3
 800077e:	4b2f      	ldr	r3, [pc, #188]	@ (800083c <TrimRead+0x19c>)
 8000780:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8000782:	7cfb      	ldrb	r3, [r7, #19]
 8000784:	021b      	lsls	r3, r3, #8
 8000786:	b21a      	sxth	r2, r3
 8000788:	7cbb      	ldrb	r3, [r7, #18]
 800078a:	b21b      	sxth	r3, r3
 800078c:	4313      	orrs	r3, r2
 800078e:	b21a      	sxth	r2, r3
 8000790:	4b2b      	ldr	r3, [pc, #172]	@ (8000840 <TrimRead+0x1a0>)
 8000792:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8000794:	7d7b      	ldrb	r3, [r7, #21]
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	b21a      	sxth	r2, r3
 800079a:	7d3b      	ldrb	r3, [r7, #20]
 800079c:	b21b      	sxth	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b21a      	sxth	r2, r3
 80007a2:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <TrimRead+0x1a4>)
 80007a4:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80007a6:	7dfb      	ldrb	r3, [r7, #23]
 80007a8:	021b      	lsls	r3, r3, #8
 80007aa:	b21a      	sxth	r2, r3
 80007ac:	7dbb      	ldrb	r3, [r7, #22]
 80007ae:	b21b      	sxth	r3, r3
 80007b0:	4313      	orrs	r3, r2
 80007b2:	b21a      	sxth	r2, r3
 80007b4:	4b24      	ldr	r3, [pc, #144]	@ (8000848 <TrimRead+0x1a8>)
 80007b6:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80007b8:	7e3b      	ldrb	r3, [r7, #24]
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b23      	ldr	r3, [pc, #140]	@ (800084c <TrimRead+0x1ac>)
 80007be:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80007c0:	7ebb      	ldrb	r3, [r7, #26]
 80007c2:	021b      	lsls	r3, r3, #8
 80007c4:	b21a      	sxth	r2, r3
 80007c6:	7e7b      	ldrb	r3, [r7, #25]
 80007c8:	b21b      	sxth	r3, r3
 80007ca:	4313      	orrs	r3, r2
 80007cc:	b21a      	sxth	r2, r3
 80007ce:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <TrimRead+0x1b0>)
 80007d0:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80007d2:	7efb      	ldrb	r3, [r7, #27]
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000854 <TrimRead+0x1b4>)
 80007d8:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80007da:	7f3b      	ldrb	r3, [r7, #28]
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	b21a      	sxth	r2, r3
 80007e0:	7f7b      	ldrb	r3, [r7, #29]
 80007e2:	b21b      	sxth	r3, r3
 80007e4:	f003 030f 	and.w	r3, r3, #15
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	4313      	orrs	r3, r2
 80007ec:	b21a      	sxth	r2, r3
 80007ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000858 <TrimRead+0x1b8>)
 80007f0:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80007f2:	7fbb      	ldrb	r3, [r7, #30]
 80007f4:	011b      	lsls	r3, r3, #4
 80007f6:	b21a      	sxth	r2, r3
 80007f8:	7f7b      	ldrb	r3, [r7, #29]
 80007fa:	091b      	lsrs	r3, r3, #4
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	b21a      	sxth	r2, r3
 8000804:	4b15      	ldr	r3, [pc, #84]	@ (800085c <TrimRead+0x1bc>)
 8000806:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8000808:	7ffb      	ldrb	r3, [r7, #31]
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <TrimRead+0x1c0>)
 800080e:	801a      	strh	r2, [r3, #0]
}
 8000810:	bf00      	nop
 8000812:	3720      	adds	r7, #32
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200005d0 	.word	0x200005d0
 800081c:	200002f8 	.word	0x200002f8
 8000820:	20000300 	.word	0x20000300
 8000824:	20000302 	.word	0x20000302
 8000828:	200002fa 	.word	0x200002fa
 800082c:	20000304 	.word	0x20000304
 8000830:	20000306 	.word	0x20000306
 8000834:	20000308 	.word	0x20000308
 8000838:	2000030a 	.word	0x2000030a
 800083c:	2000030c 	.word	0x2000030c
 8000840:	2000030e 	.word	0x2000030e
 8000844:	20000310 	.word	0x20000310
 8000848:	20000312 	.word	0x20000312
 800084c:	200002fc 	.word	0x200002fc
 8000850:	20000314 	.word	0x20000314
 8000854:	200002fe 	.word	0x200002fe
 8000858:	20000316 	.word	0x20000316
 800085c:	20000318 	.word	0x20000318
 8000860:	2000031a 	.word	0x2000031a

08000864 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b089      	sub	sp, #36	@ 0x24
 8000868:	af04      	add	r7, sp, #16
 800086a:	4604      	mov	r4, r0
 800086c:	4608      	mov	r0, r1
 800086e:	4611      	mov	r1, r2
 8000870:	461a      	mov	r2, r3
 8000872:	4623      	mov	r3, r4
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	4603      	mov	r3, r0
 8000878:	71bb      	strb	r3, [r7, #6]
 800087a:	460b      	mov	r3, r1
 800087c:	717b      	strb	r3, [r7, #5]
 800087e:	4613      	mov	r3, r2
 8000880:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8000882:	f7ff ff0d 	bl	80006a0 <TrimRead>


	uint8_t datatowrite = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 800088e:	23b6      	movs	r3, #182	@ 0xb6
 8000890:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000892:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000896:	9302      	str	r3, [sp, #8]
 8000898:	2301      	movs	r3, #1
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	f107 030f 	add.w	r3, r7, #15
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	2301      	movs	r3, #1
 80008a4:	22e0      	movs	r2, #224	@ 0xe0
 80008a6:	21ec      	movs	r1, #236	@ 0xec
 80008a8:	4858      	ldr	r0, [pc, #352]	@ (8000a0c <BME280_Config+0x1a8>)
 80008aa:	f003 fb4f 	bl	8003f4c <HAL_I2C_Mem_Write>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d002      	beq.n	80008ba <BME280_Config+0x56>
	{
		return -1;
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	e0a3      	b.n	8000a02 <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 80008ba:	2064      	movs	r0, #100	@ 0x64
 80008bc:	f001 fcca 	bl	8002254 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80008c0:	797b      	ldrb	r3, [r7, #5]
 80008c2:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80008c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	2301      	movs	r3, #1
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	f107 030f 	add.w	r3, r7, #15
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2301      	movs	r3, #1
 80008d6:	22f2      	movs	r2, #242	@ 0xf2
 80008d8:	21ec      	movs	r1, #236	@ 0xec
 80008da:	484c      	ldr	r0, [pc, #304]	@ (8000a0c <BME280_Config+0x1a8>)
 80008dc:	f003 fb36 	bl	8003f4c <HAL_I2C_Mem_Write>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d002      	beq.n	80008ec <BME280_Config+0x88>
	{
		return -1;
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ea:	e08a      	b.n	8000a02 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80008ec:	2064      	movs	r0, #100	@ 0x64
 80008ee:	f001 fcb1 	bl	8002254 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 80008f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f6:	9302      	str	r3, [sp, #8]
 80008f8:	2301      	movs	r3, #1
 80008fa:	9301      	str	r3, [sp, #4]
 80008fc:	f107 030e 	add.w	r3, r7, #14
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	2301      	movs	r3, #1
 8000904:	22f2      	movs	r2, #242	@ 0xf2
 8000906:	21ec      	movs	r1, #236	@ 0xec
 8000908:	4840      	ldr	r0, [pc, #256]	@ (8000a0c <BME280_Config+0x1a8>)
 800090a:	f003 fc33 	bl	8004174 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800090e:	7bba      	ldrb	r2, [r7, #14]
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	429a      	cmp	r2, r3
 8000914:	d002      	beq.n	800091c <BME280_Config+0xb8>
	{
		return -1;
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	e072      	b.n	8000a02 <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 800091c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000920:	015b      	lsls	r3, r3, #5
 8000922:	b25a      	sxtb	r2, r3
 8000924:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	b25b      	sxtb	r3, r3
 800092c:	4313      	orrs	r3, r2
 800092e:	b25b      	sxtb	r3, r3
 8000930:	b2db      	uxtb	r3, r3
 8000932:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000934:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000938:	9302      	str	r3, [sp, #8]
 800093a:	2301      	movs	r3, #1
 800093c:	9301      	str	r3, [sp, #4]
 800093e:	f107 030f 	add.w	r3, r7, #15
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2301      	movs	r3, #1
 8000946:	22f5      	movs	r2, #245	@ 0xf5
 8000948:	21ec      	movs	r1, #236	@ 0xec
 800094a:	4830      	ldr	r0, [pc, #192]	@ (8000a0c <BME280_Config+0x1a8>)
 800094c:	f003 fafe 	bl	8003f4c <HAL_I2C_Mem_Write>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d002      	beq.n	800095c <BME280_Config+0xf8>
	{
		return -1;
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	e052      	b.n	8000a02 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 800095c:	2064      	movs	r0, #100	@ 0x64
 800095e:	f001 fc79 	bl	8002254 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8000962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000966:	9302      	str	r3, [sp, #8]
 8000968:	2301      	movs	r3, #1
 800096a:	9301      	str	r3, [sp, #4]
 800096c:	f107 030e 	add.w	r3, r7, #14
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2301      	movs	r3, #1
 8000974:	22f5      	movs	r2, #245	@ 0xf5
 8000976:	21ec      	movs	r1, #236	@ 0xec
 8000978:	4824      	ldr	r0, [pc, #144]	@ (8000a0c <BME280_Config+0x1a8>)
 800097a:	f003 fbfb 	bl	8004174 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800097e:	7bba      	ldrb	r2, [r7, #14]
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	429a      	cmp	r2, r3
 8000984:	d002      	beq.n	800098c <BME280_Config+0x128>
	{
		return -1;
 8000986:	f04f 33ff 	mov.w	r3, #4294967295
 800098a:	e03a      	b.n	8000a02 <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	015b      	lsls	r3, r3, #5
 8000990:	b25a      	sxtb	r2, r3
 8000992:	79bb      	ldrb	r3, [r7, #6]
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	b25b      	sxtb	r3, r3
 8000998:	4313      	orrs	r3, r2
 800099a:	b25a      	sxtb	r2, r3
 800099c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	b25b      	sxtb	r3, r3
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80009a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ac:	9302      	str	r3, [sp, #8]
 80009ae:	2301      	movs	r3, #1
 80009b0:	9301      	str	r3, [sp, #4]
 80009b2:	f107 030f 	add.w	r3, r7, #15
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2301      	movs	r3, #1
 80009ba:	22f4      	movs	r2, #244	@ 0xf4
 80009bc:	21ec      	movs	r1, #236	@ 0xec
 80009be:	4813      	ldr	r0, [pc, #76]	@ (8000a0c <BME280_Config+0x1a8>)
 80009c0:	f003 fac4 	bl	8003f4c <HAL_I2C_Mem_Write>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d002      	beq.n	80009d0 <BME280_Config+0x16c>
	{
		return -1;
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295
 80009ce:	e018      	b.n	8000a02 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80009d0:	2064      	movs	r0, #100	@ 0x64
 80009d2:	f001 fc3f 	bl	8002254 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80009d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009da:	9302      	str	r3, [sp, #8]
 80009dc:	2301      	movs	r3, #1
 80009de:	9301      	str	r3, [sp, #4]
 80009e0:	f107 030e 	add.w	r3, r7, #14
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	2301      	movs	r3, #1
 80009e8:	22f4      	movs	r2, #244	@ 0xf4
 80009ea:	21ec      	movs	r1, #236	@ 0xec
 80009ec:	4807      	ldr	r0, [pc, #28]	@ (8000a0c <BME280_Config+0x1a8>)
 80009ee:	f003 fbc1 	bl	8004174 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80009f2:	7bba      	ldrb	r2, [r7, #14]
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d002      	beq.n	8000a00 <BME280_Config+0x19c>
	{
		return -1;
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	e000      	b.n	8000a02 <BME280_Config+0x19e>
	}

	return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200005d0 	.word	0x200005d0

08000a10 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c2, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8000a16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a1a:	9302      	str	r3, [sp, #8]
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	4b1e      	ldr	r3, [pc, #120]	@ (8000a9c <BMEReadRaw+0x8c>)
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2301      	movs	r3, #1
 8000a26:	22d0      	movs	r2, #208	@ 0xd0
 8000a28:	21ec      	movs	r1, #236	@ 0xec
 8000a2a:	481d      	ldr	r0, [pc, #116]	@ (8000aa0 <BMEReadRaw+0x90>)
 8000a2c:	f003 fba2 	bl	8004174 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8000a30:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <BMEReadRaw+0x8c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b60      	cmp	r3, #96	@ 0x60
 8000a36:	d12a      	bne.n	8000a8e <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3c:	9302      	str	r3, [sp, #8]
 8000a3e:	2308      	movs	r3, #8
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	463b      	mov	r3, r7
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2301      	movs	r3, #1
 8000a48:	22f7      	movs	r2, #247	@ 0xf7
 8000a4a:	21ec      	movs	r1, #236	@ 0xec
 8000a4c:	4814      	ldr	r0, [pc, #80]	@ (8000aa0 <BMEReadRaw+0x90>)
 8000a4e:	f003 fb91 	bl	8004174 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8000a52:	783b      	ldrb	r3, [r7, #0]
 8000a54:	031a      	lsls	r2, r3, #12
 8000a56:	787b      	ldrb	r3, [r7, #1]
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	78ba      	ldrb	r2, [r7, #2]
 8000a5e:	0912      	lsrs	r2, r2, #4
 8000a60:	b2d2      	uxtb	r2, r2
 8000a62:	4313      	orrs	r3, r2
 8000a64:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa4 <BMEReadRaw+0x94>)
 8000a66:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8000a68:	78fb      	ldrb	r3, [r7, #3]
 8000a6a:	031a      	lsls	r2, r3, #12
 8000a6c:	793b      	ldrb	r3, [r7, #4]
 8000a6e:	011b      	lsls	r3, r3, #4
 8000a70:	4313      	orrs	r3, r2
 8000a72:	797a      	ldrb	r2, [r7, #5]
 8000a74:	0912      	lsrs	r2, r2, #4
 8000a76:	b2d2      	uxtb	r2, r2
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa8 <BMEReadRaw+0x98>)
 8000a7c:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8000a7e:	79bb      	ldrb	r3, [r7, #6]
 8000a80:	021b      	lsls	r3, r3, #8
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	4a09      	ldr	r2, [pc, #36]	@ (8000aac <BMEReadRaw+0x9c>)
 8000a88:	6013      	str	r3, [r2, #0]

		return 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e001      	b.n	8000a92 <BMEReadRaw+0x82>
	}

	else return -1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200002e8 	.word	0x200002e8
 8000aa0:	200005d0 	.word	0x200005d0
 8000aa4:	200002f0 	.word	0x200002f0
 8000aa8:	200002ec 	.word	0x200002ec
 8000aac:	200002f4 	.word	0x200002f4

08000ab0 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b087      	sub	sp, #28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	10da      	asrs	r2, r3, #3
 8000abc:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <BME280_compensate_T_int32+0x74>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	4a18      	ldr	r2, [pc, #96]	@ (8000b28 <BME280_compensate_T_int32+0x78>)
 8000ac6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000aca:	fb02 f303 	mul.w	r3, r2, r3
 8000ace:	12db      	asrs	r3, r3, #11
 8000ad0:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	111b      	asrs	r3, r3, #4
 8000ad6:	4a13      	ldr	r2, [pc, #76]	@ (8000b24 <BME280_compensate_T_int32+0x74>)
 8000ad8:	8812      	ldrh	r2, [r2, #0]
 8000ada:	1a9b      	subs	r3, r3, r2
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	1112      	asrs	r2, r2, #4
 8000ae0:	4910      	ldr	r1, [pc, #64]	@ (8000b24 <BME280_compensate_T_int32+0x74>)
 8000ae2:	8809      	ldrh	r1, [r1, #0]
 8000ae4:	1a52      	subs	r2, r2, r1
 8000ae6:	fb02 f303 	mul.w	r3, r2, r3
 8000aea:	131b      	asrs	r3, r3, #12
 8000aec:	4a0f      	ldr	r2, [pc, #60]	@ (8000b2c <BME280_compensate_T_int32+0x7c>)
 8000aee:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000af2:	fb02 f303 	mul.w	r3, r2, r3
 8000af6:	139b      	asrs	r3, r3, #14
 8000af8:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a0b      	ldr	r2, [pc, #44]	@ (8000b30 <BME280_compensate_T_int32+0x80>)
 8000b02:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	@ (8000b30 <BME280_compensate_T_int32+0x80>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	4413      	add	r3, r2
 8000b0e:	3380      	adds	r3, #128	@ 0x80
 8000b10:	121b      	asrs	r3, r3, #8
 8000b12:	60fb      	str	r3, [r7, #12]
	return T;
 8000b14:	68fb      	ldr	r3, [r7, #12]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	371c      	adds	r7, #28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	200002f8 	.word	0x200002f8
 8000b28:	20000300 	.word	0x20000300
 8000b2c:	20000302 	.word	0x20000302
 8000b30:	2000031c 	.word	0x2000031c

08000b34 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8000b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b38:	b0ca      	sub	sp, #296	@ 0x128
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8000b40:	4baf      	ldr	r3, [pc, #700]	@ (8000e00 <BME280_compensate_P_int64+0x2cc>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	17da      	asrs	r2, r3, #31
 8000b46:	461c      	mov	r4, r3
 8000b48:	4615      	mov	r5, r2
 8000b4a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000b4e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000b52:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8000b56:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b5e:	fb03 f102 	mul.w	r1, r3, r2
 8000b62:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b66:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b6a:	fb02 f303 	mul.w	r3, r2, r3
 8000b6e:	18ca      	adds	r2, r1, r3
 8000b70:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b74:	fba3 8903 	umull	r8, r9, r3, r3
 8000b78:	eb02 0309 	add.w	r3, r2, r9
 8000b7c:	4699      	mov	r9, r3
 8000b7e:	4ba1      	ldr	r3, [pc, #644]	@ (8000e04 <BME280_compensate_P_int64+0x2d0>)
 8000b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	17da      	asrs	r2, r3, #31
 8000b88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000b8c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000b90:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000b94:	4603      	mov	r3, r0
 8000b96:	fb03 f209 	mul.w	r2, r3, r9
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	fb08 f303 	mul.w	r3, r8, r3
 8000ba0:	4413      	add	r3, r2
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	fba8 1202 	umull	r1, r2, r8, r2
 8000ba8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000bac:	460a      	mov	r2, r1
 8000bae:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000bb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000bb6:	4413      	add	r3, r2
 8000bb8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000bbc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000bc0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000bc4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000bc8:	4b8f      	ldr	r3, [pc, #572]	@ (8000e08 <BME280_compensate_P_int64+0x2d4>)
 8000bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bce:	b21b      	sxth	r3, r3
 8000bd0:	17da      	asrs	r2, r3, #31
 8000bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000bd6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000bda:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bde:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000be2:	462a      	mov	r2, r5
 8000be4:	fb02 f203 	mul.w	r2, r2, r3
 8000be8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bec:	4621      	mov	r1, r4
 8000bee:	fb01 f303 	mul.w	r3, r1, r3
 8000bf2:	441a      	add	r2, r3
 8000bf4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bf8:	4621      	mov	r1, r4
 8000bfa:	fba3 1301 	umull	r1, r3, r3, r1
 8000bfe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000c02:	460b      	mov	r3, r1
 8000c04:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000c0c:	18d3      	adds	r3, r2, r3
 8000c0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	f04f 0100 	mov.w	r1, #0
 8000c1a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000c1e:	462b      	mov	r3, r5
 8000c20:	0459      	lsls	r1, r3, #17
 8000c22:	4623      	mov	r3, r4
 8000c24:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000c28:	4623      	mov	r3, r4
 8000c2a:	0458      	lsls	r0, r3, #17
 8000c2c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000c30:	1814      	adds	r4, r2, r0
 8000c32:	643c      	str	r4, [r7, #64]	@ 0x40
 8000c34:	414b      	adcs	r3, r1
 8000c36:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c38:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000c3c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000c40:	4b72      	ldr	r3, [pc, #456]	@ (8000e0c <BME280_compensate_P_int64+0x2d8>)
 8000c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c46:	b21b      	sxth	r3, r3
 8000c48:	17da      	asrs	r2, r3, #31
 8000c4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000c4e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	f04f 0100 	mov.w	r1, #0
 8000c5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000c5e:	00d9      	lsls	r1, r3, #3
 8000c60:	2000      	movs	r0, #0
 8000c62:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000c66:	1814      	adds	r4, r2, r0
 8000c68:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000c6a:	414b      	adcs	r3, r1
 8000c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000c6e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000c72:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000c76:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000c7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000c7e:	fb03 f102 	mul.w	r1, r3, r2
 8000c82:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000c86:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000c8a:	fb02 f303 	mul.w	r3, r2, r3
 8000c8e:	18ca      	adds	r2, r1, r3
 8000c90:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000c94:	fba3 1303 	umull	r1, r3, r3, r3
 8000c98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000ca6:	18d3      	adds	r3, r2, r3
 8000ca8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000cac:	4b58      	ldr	r3, [pc, #352]	@ (8000e10 <BME280_compensate_P_int64+0x2dc>)
 8000cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	17da      	asrs	r2, r3, #31
 8000cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000cba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000cbe:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000cc2:	462b      	mov	r3, r5
 8000cc4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000cc8:	4642      	mov	r2, r8
 8000cca:	fb02 f203 	mul.w	r2, r2, r3
 8000cce:	464b      	mov	r3, r9
 8000cd0:	4621      	mov	r1, r4
 8000cd2:	fb01 f303 	mul.w	r3, r1, r3
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4622      	mov	r2, r4
 8000cda:	4641      	mov	r1, r8
 8000cdc:	fba2 1201 	umull	r1, r2, r2, r1
 8000ce0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000ce4:	460a      	mov	r2, r1
 8000ce6:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000cea:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000cee:	4413      	add	r3, r2
 8000cf0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000cf4:	f04f 0000 	mov.w	r0, #0
 8000cf8:	f04f 0100 	mov.w	r1, #0
 8000cfc:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000d00:	4623      	mov	r3, r4
 8000d02:	0a18      	lsrs	r0, r3, #8
 8000d04:	462b      	mov	r3, r5
 8000d06:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000d0a:	462b      	mov	r3, r5
 8000d0c:	1219      	asrs	r1, r3, #8
 8000d0e:	4b41      	ldr	r3, [pc, #260]	@ (8000e14 <BME280_compensate_P_int64+0x2e0>)
 8000d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d14:	b21b      	sxth	r3, r3
 8000d16:	17da      	asrs	r2, r3, #31
 8000d18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000d1c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000d20:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000d24:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000d28:	464a      	mov	r2, r9
 8000d2a:	fb02 f203 	mul.w	r2, r2, r3
 8000d2e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000d32:	4644      	mov	r4, r8
 8000d34:	fb04 f303 	mul.w	r3, r4, r3
 8000d38:	441a      	add	r2, r3
 8000d3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000d3e:	4644      	mov	r4, r8
 8000d40:	fba3 4304 	umull	r4, r3, r3, r4
 8000d44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000d48:	4623      	mov	r3, r4
 8000d4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000d4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000d52:	18d3      	adds	r3, r2, r3
 8000d54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000d58:	f04f 0200 	mov.w	r2, #0
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000d64:	464c      	mov	r4, r9
 8000d66:	0323      	lsls	r3, r4, #12
 8000d68:	4644      	mov	r4, r8
 8000d6a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000d6e:	4644      	mov	r4, r8
 8000d70:	0322      	lsls	r2, r4, #12
 8000d72:	1884      	adds	r4, r0, r2
 8000d74:	633c      	str	r4, [r7, #48]	@ 0x30
 8000d76:	eb41 0303 	adc.w	r3, r1, r3
 8000d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d7c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000d80:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000d84:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000d88:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000d8c:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000d90:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000d94:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <BME280_compensate_P_int64+0x2e4>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000da0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000da4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000da8:	462b      	mov	r3, r5
 8000daa:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000dae:	4642      	mov	r2, r8
 8000db0:	fb02 f203 	mul.w	r2, r2, r3
 8000db4:	464b      	mov	r3, r9
 8000db6:	4621      	mov	r1, r4
 8000db8:	fb01 f303 	mul.w	r3, r1, r3
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4622      	mov	r2, r4
 8000dc0:	4641      	mov	r1, r8
 8000dc2:	fba2 1201 	umull	r1, r2, r2, r1
 8000dc6:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000dca:	460a      	mov	r2, r1
 8000dcc:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000dd0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000dd4:	4413      	add	r3, r2
 8000dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000dda:	f04f 0200 	mov.w	r2, #0
 8000dde:	f04f 0300 	mov.w	r3, #0
 8000de2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000de6:	4629      	mov	r1, r5
 8000de8:	104a      	asrs	r2, r1, #1
 8000dea:	4629      	mov	r1, r5
 8000dec:	17cb      	asrs	r3, r1, #31
 8000dee:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000df2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000df6:	4313      	orrs	r3, r2
 8000df8:	d110      	bne.n	8000e1c <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e154      	b.n	80010a8 <BME280_compensate_P_int64+0x574>
 8000dfe:	bf00      	nop
 8000e00:	2000031c 	.word	0x2000031c
 8000e04:	2000030c 	.word	0x2000030c
 8000e08:	2000030a 	.word	0x2000030a
 8000e0c:	20000308 	.word	0x20000308
 8000e10:	20000306 	.word	0x20000306
 8000e14:	20000304 	.word	0x20000304
 8000e18:	200002fa 	.word	0x200002fa
	}
	p = 1048576-adc_P;
 8000e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000e20:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000e24:	17da      	asrs	r2, r3, #31
 8000e26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000e2a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000e2e:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000e32:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e36:	105b      	asrs	r3, r3, #1
 8000e38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000e3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e40:	07db      	lsls	r3, r3, #31
 8000e42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000e46:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000e4a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000e4e:	4621      	mov	r1, r4
 8000e50:	1a89      	subs	r1, r1, r2
 8000e52:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000e54:	4629      	mov	r1, r5
 8000e56:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000e5c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000e60:	4622      	mov	r2, r4
 8000e62:	462b      	mov	r3, r5
 8000e64:	1891      	adds	r1, r2, r2
 8000e66:	6239      	str	r1, [r7, #32]
 8000e68:	415b      	adcs	r3, r3
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e6c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e70:	4621      	mov	r1, r4
 8000e72:	1851      	adds	r1, r2, r1
 8000e74:	61b9      	str	r1, [r7, #24]
 8000e76:	4629      	mov	r1, r5
 8000e78:	414b      	adcs	r3, r1
 8000e7a:	61fb      	str	r3, [r7, #28]
 8000e7c:	f04f 0200 	mov.w	r2, #0
 8000e80:	f04f 0300 	mov.w	r3, #0
 8000e84:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000e88:	4649      	mov	r1, r9
 8000e8a:	018b      	lsls	r3, r1, #6
 8000e8c:	4641      	mov	r1, r8
 8000e8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000e92:	4641      	mov	r1, r8
 8000e94:	018a      	lsls	r2, r1, #6
 8000e96:	4641      	mov	r1, r8
 8000e98:	1889      	adds	r1, r1, r2
 8000e9a:	6139      	str	r1, [r7, #16]
 8000e9c:	4649      	mov	r1, r9
 8000e9e:	eb43 0101 	adc.w	r1, r3, r1
 8000ea2:	6179      	str	r1, [r7, #20]
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000eb0:	4649      	mov	r1, r9
 8000eb2:	008b      	lsls	r3, r1, #2
 8000eb4:	4641      	mov	r1, r8
 8000eb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000eba:	4641      	mov	r1, r8
 8000ebc:	008a      	lsls	r2, r1, #2
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	4622      	mov	r2, r4
 8000ec6:	189b      	adds	r3, r3, r2
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	462a      	mov	r2, r5
 8000ece:	eb42 0303 	adc.w	r3, r2, r3
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	f04f 0200 	mov.w	r2, #0
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000ee0:	4649      	mov	r1, r9
 8000ee2:	008b      	lsls	r3, r1, #2
 8000ee4:	4641      	mov	r1, r8
 8000ee6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000eea:	4641      	mov	r1, r8
 8000eec:	008a      	lsls	r2, r1, #2
 8000eee:	4610      	mov	r0, r2
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4622      	mov	r2, r4
 8000ef6:	189b      	adds	r3, r3, r2
 8000ef8:	673b      	str	r3, [r7, #112]	@ 0x70
 8000efa:	462b      	mov	r3, r5
 8000efc:	460a      	mov	r2, r1
 8000efe:	eb42 0303 	adc.w	r3, r2, r3
 8000f02:	677b      	str	r3, [r7, #116]	@ 0x74
 8000f04:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000f08:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000f0c:	f7ff fa00 	bl	8000310 <__aeabi_ldivmod>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000f18:	4b66      	ldr	r3, [pc, #408]	@ (80010b4 <BME280_compensate_P_int64+0x580>)
 8000f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1e:	b21b      	sxth	r3, r3
 8000f20:	17da      	asrs	r2, r3, #31
 8000f22:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000f24:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000f26:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000f2a:	f04f 0000 	mov.w	r0, #0
 8000f2e:	f04f 0100 	mov.w	r1, #0
 8000f32:	0b50      	lsrs	r0, r2, #13
 8000f34:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000f38:	1359      	asrs	r1, r3, #13
 8000f3a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000f3e:	462b      	mov	r3, r5
 8000f40:	fb00 f203 	mul.w	r2, r0, r3
 8000f44:	4623      	mov	r3, r4
 8000f46:	fb03 f301 	mul.w	r3, r3, r1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4622      	mov	r2, r4
 8000f4e:	fba2 1200 	umull	r1, r2, r2, r0
 8000f52:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000f56:	460a      	mov	r2, r1
 8000f58:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000f5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000f60:	4413      	add	r3, r2
 8000f62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000f66:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000f6a:	f04f 0000 	mov.w	r0, #0
 8000f6e:	f04f 0100 	mov.w	r1, #0
 8000f72:	0b50      	lsrs	r0, r2, #13
 8000f74:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000f78:	1359      	asrs	r1, r3, #13
 8000f7a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000f7e:	462b      	mov	r3, r5
 8000f80:	fb00 f203 	mul.w	r2, r0, r3
 8000f84:	4623      	mov	r3, r4
 8000f86:	fb03 f301 	mul.w	r3, r3, r1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4622      	mov	r2, r4
 8000f8e:	fba2 1200 	umull	r1, r2, r2, r0
 8000f92:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000f96:	460a      	mov	r2, r1
 8000f98:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000f9c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000fa0:	4413      	add	r3, r2
 8000fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000fb2:	4621      	mov	r1, r4
 8000fb4:	0e4a      	lsrs	r2, r1, #25
 8000fb6:	4629      	mov	r1, r5
 8000fb8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000fbc:	4629      	mov	r1, r5
 8000fbe:	164b      	asrs	r3, r1, #25
 8000fc0:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000fc4:	4b3c      	ldr	r3, [pc, #240]	@ (80010b8 <BME280_compensate_P_int64+0x584>)
 8000fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	17da      	asrs	r2, r3, #31
 8000fce:	663b      	str	r3, [r7, #96]	@ 0x60
 8000fd0:	667a      	str	r2, [r7, #100]	@ 0x64
 8000fd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000fd6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000fda:	462a      	mov	r2, r5
 8000fdc:	fb02 f203 	mul.w	r2, r2, r3
 8000fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000fe4:	4621      	mov	r1, r4
 8000fe6:	fb01 f303 	mul.w	r3, r1, r3
 8000fea:	4413      	add	r3, r2
 8000fec:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	fba2 1201 	umull	r1, r2, r2, r1
 8000ff6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000ffa:	460a      	mov	r2, r1
 8000ffc:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001000:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001004:	4413      	add	r3, r2
 8001006:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	f04f 0300 	mov.w	r3, #0
 8001012:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001016:	4621      	mov	r1, r4
 8001018:	0cca      	lsrs	r2, r1, #19
 800101a:	4629      	mov	r1, r5
 800101c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001020:	4629      	mov	r1, r5
 8001022:	14cb      	asrs	r3, r1, #19
 8001024:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001028:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800102c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001030:	1884      	adds	r4, r0, r2
 8001032:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001034:	eb41 0303 	adc.w	r3, r1, r3
 8001038:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800103a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800103e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001042:	4621      	mov	r1, r4
 8001044:	1889      	adds	r1, r1, r2
 8001046:	6539      	str	r1, [r7, #80]	@ 0x50
 8001048:	4629      	mov	r1, r5
 800104a:	eb43 0101 	adc.w	r1, r3, r1
 800104e:	6579      	str	r1, [r7, #84]	@ 0x54
 8001050:	f04f 0000 	mov.w	r0, #0
 8001054:	f04f 0100 	mov.w	r1, #0
 8001058:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800105c:	4623      	mov	r3, r4
 800105e:	0a18      	lsrs	r0, r3, #8
 8001060:	462b      	mov	r3, r5
 8001062:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001066:	462b      	mov	r3, r5
 8001068:	1219      	asrs	r1, r3, #8
 800106a:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <BME280_compensate_P_int64+0x588>)
 800106c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001070:	b21b      	sxth	r3, r3
 8001072:	17da      	asrs	r2, r3, #31
 8001074:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001076:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001084:	464c      	mov	r4, r9
 8001086:	0123      	lsls	r3, r4, #4
 8001088:	4644      	mov	r4, r8
 800108a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800108e:	4644      	mov	r4, r8
 8001090:	0122      	lsls	r2, r4, #4
 8001092:	1884      	adds	r4, r0, r2
 8001094:	603c      	str	r4, [r7, #0]
 8001096:	eb41 0303 	adc.w	r3, r1, r3
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	e9d7 3400 	ldrd	r3, r4, [r7]
 80010a0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 80010a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80010ae:	46bd      	mov	sp, r7
 80010b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80010b4:	20000312 	.word	0x20000312
 80010b8:	20000310 	.word	0x20000310
 80010bc:	2000030e 	.word	0x2000030e

080010c0 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 80010c8:	4b2c      	ldr	r3, [pc, #176]	@ (800117c <bme280_compensate_H_int32+0xbc>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80010d0:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	039a      	lsls	r2, r3, #14
 80010d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001180 <bme280_compensate_H_int32+0xc0>)
 80010d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010dc:	051b      	lsls	r3, r3, #20
 80010de:	1ad2      	subs	r2, r2, r3
 80010e0:	4b28      	ldr	r3, [pc, #160]	@ (8001184 <bme280_compensate_H_int32+0xc4>)
 80010e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e6:	4619      	mov	r1, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	fb01 f303 	mul.w	r3, r1, r3
 80010ee:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80010f0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80010f4:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 80010f6:	4a24      	ldr	r2, [pc, #144]	@ (8001188 <bme280_compensate_H_int32+0xc8>)
 80010f8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010fc:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001104:	1292      	asrs	r2, r2, #10
 8001106:	4921      	ldr	r1, [pc, #132]	@ (800118c <bme280_compensate_H_int32+0xcc>)
 8001108:	8809      	ldrh	r1, [r1, #0]
 800110a:	4608      	mov	r0, r1
 800110c:	68f9      	ldr	r1, [r7, #12]
 800110e:	fb00 f101 	mul.w	r1, r0, r1
 8001112:	12c9      	asrs	r1, r1, #11
 8001114:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001118:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 800111c:	1292      	asrs	r2, r2, #10
 800111e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001122:	491b      	ldr	r1, [pc, #108]	@ (8001190 <bme280_compensate_H_int32+0xd0>)
 8001124:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001128:	fb01 f202 	mul.w	r2, r1, r2
 800112c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 8001130:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001132:	fb02 f303 	mul.w	r3, r2, r3
 8001136:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	13db      	asrs	r3, r3, #15
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	13d2      	asrs	r2, r2, #15
 8001140:	fb02 f303 	mul.w	r3, r2, r3
 8001144:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001146:	4a13      	ldr	r2, [pc, #76]	@ (8001194 <bme280_compensate_H_int32+0xd4>)
 8001148:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 800114a:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 800114e:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800115c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001164:	bfa8      	it	ge
 8001166:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800116a:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	131b      	asrs	r3, r3, #12
}
 8001170:	4618      	mov	r0, r3
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	2000031c 	.word	0x2000031c
 8001180:	20000316 	.word	0x20000316
 8001184:	20000318 	.word	0x20000318
 8001188:	2000031a 	.word	0x2000031a
 800118c:	200002fe 	.word	0x200002fe
 8001190:	20000314 	.word	0x20000314
 8001194:	200002fc 	.word	0x200002fc

08001198 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 800119c:	f7ff fc38 	bl	8000a10 <BMEReadRaw>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d154      	bne.n	8001250 <BME280_Measure+0xb8>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 80011a6:	4b38      	ldr	r3, [pc, #224]	@ (8001288 <BME280_Measure+0xf0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80011ae:	d104      	bne.n	80011ba <BME280_Measure+0x22>
 80011b0:	4b36      	ldr	r3, [pc, #216]	@ (800128c <BME280_Measure+0xf4>)
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	e011      	b.n	80011de <BME280_Measure+0x46>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 80011ba:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <BME280_Measure+0xf0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fc76 	bl	8000ab0 <BME280_compensate_T_int32>
 80011c4:	ee07 0a90 	vmov	s15, r0
 80011c8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80011cc:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001270 <BME280_Measure+0xd8>
 80011d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011d4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011d8:	4b2c      	ldr	r3, [pc, #176]	@ (800128c <BME280_Measure+0xf4>)
 80011da:	edc3 7a00 	vstr	s15, [r3]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 80011de:	4b2c      	ldr	r3, [pc, #176]	@ (8001290 <BME280_Measure+0xf8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80011e6:	d104      	bne.n	80011f2 <BME280_Measure+0x5a>
 80011e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001294 <BME280_Measure+0xfc>)
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	e011      	b.n	8001216 <BME280_Measure+0x7e>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 80011f2:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <BME280_Measure+0xf8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fc9c 	bl	8000b34 <BME280_compensate_P_int64>
 80011fc:	ee07 0a90 	vmov	s15, r0
 8001200:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001204:	ed9f 5b1c 	vldr	d5, [pc, #112]	@ 8001278 <BME280_Measure+0xe0>
 8001208:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800120c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001210:	4b20      	ldr	r3, [pc, #128]	@ (8001294 <BME280_Measure+0xfc>)
 8001212:	edc3 7a00 	vstr	s15, [r3]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001216:	4b20      	ldr	r3, [pc, #128]	@ (8001298 <BME280_Measure+0x100>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800121e:	d104      	bne.n	800122a <BME280_Measure+0x92>
 8001220:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <BME280_Measure+0x104>)
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001228:	e01e      	b.n	8001268 <BME280_Measure+0xd0>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 800122a:	4b1b      	ldr	r3, [pc, #108]	@ (8001298 <BME280_Measure+0x100>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff46 	bl	80010c0 <bme280_compensate_H_int32>
 8001234:	ee07 0a90 	vmov	s15, r0
 8001238:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800123c:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 8001280 <BME280_Measure+0xe8>
 8001240:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001244:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001248:	4b14      	ldr	r3, [pc, #80]	@ (800129c <BME280_Measure+0x104>)
 800124a:	edc3 7a00 	vstr	s15, [r3]
}
 800124e:	e00b      	b.n	8001268 <BME280_Measure+0xd0>
		Temperature = Pressure = Humidity = 0;
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <BME280_Measure+0x104>)
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	4b10      	ldr	r3, [pc, #64]	@ (800129c <BME280_Measure+0x104>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <BME280_Measure+0xfc>)
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <BME280_Measure+0xfc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a09      	ldr	r2, [pc, #36]	@ (800128c <BME280_Measure+0xf4>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	f3af 8000 	nop.w
 8001270:	00000000 	.word	0x00000000
 8001274:	40590000 	.word	0x40590000
 8001278:	00000000 	.word	0x00000000
 800127c:	40700000 	.word	0x40700000
 8001280:	00000000 	.word	0x00000000
 8001284:	40900000 	.word	0x40900000
 8001288:	200002ec 	.word	0x200002ec
 800128c:	200005c0 	.word	0x200005c0
 8001290:	200002f0 	.word	0x200002f0
 8001294:	200005c4 	.word	0x200005c4
 8001298:	200002f4 	.word	0x200002f4
 800129c:	200005c8 	.word	0x200005c8

080012a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4a07      	ldr	r2, [pc, #28]	@ (80012cc <vApplicationGetIdleTaskMemory+0x2c>)
 80012b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	4a06      	ldr	r2, [pc, #24]	@ (80012d0 <vApplicationGetIdleTaskMemory+0x30>)
 80012b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2280      	movs	r2, #128	@ 0x80
 80012bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000320 	.word	0x20000320
 80012d0:	200003c0 	.word	0x200003c0

080012d4 <http_server>:
#include "cmsis_os.h"

extern float Temperature, Pressure, Humidity;

static void http_server(struct netconn *conn)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b090      	sub	sp, #64	@ 0x40
 80012d8:	af02      	add	r7, sp, #8
 80012da:	6078      	str	r0, [r7, #4]
	char* buf;
	u16_t buflen;
	struct fs_file file;

	/* Read the data from the port, blocking if nothing yet there */
	recv_err = netconn_recv(conn, &inbuf);
 80012dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012e0:	4619      	mov	r1, r3
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f00e f8de 	bl	800f4a4 <netconn_recv>
 80012e8:	4603      	mov	r3, r0
 80012ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (recv_err == ERR_OK)
 80012ee:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f040 80cb 	bne.w	800148e <http_server+0x1ba>
	{
		if (netconn_err(conn) == ERR_OK)
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f00e fa5c 	bl	800f7b6 <netconn_err>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	f040 80c4 	bne.w	800148e <http_server+0x1ba>
		{
			/* Get the data pointer and length of the data inside a netbuf */
			netbuf_data(inbuf, (void**)&buf, &buflen);
 8001306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001308:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 800130c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001310:	4618      	mov	r0, r3
 8001312:	f00f fe61 	bl	8010fd8 <netbuf_data>

			/* Check if request to get the index.html */
			if (strncmp((char const *)buf,"GET /index.html",15)==0)
 8001316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001318:	220f      	movs	r2, #15
 800131a:	4962      	ldr	r1, [pc, #392]	@ (80014a4 <http_server+0x1d0>)
 800131c:	4618      	mov	r0, r3
 800131e:	f01c f8cc 	bl	801d4ba <strncmp>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d113      	bne.n	8001350 <http_server+0x7c>
			{
				fs_open(&file, "/index.html");
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	495e      	ldr	r1, [pc, #376]	@ (80014a8 <http_server+0x1d4>)
 800132e:	4618      	mov	r0, r3
 8001330:	f010 f854 	bl	80113dc <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001334:	68f9      	ldr	r1, [r7, #12]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	461a      	mov	r2, r3
 800133a:	2300      	movs	r3, #0
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2300      	movs	r3, #0
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f00e f929 	bl	800f598 <netconn_write_partly>
				fs_close(&file);
 8001346:	f107 030c 	add.w	r3, r7, #12
 800134a:	4618      	mov	r0, r3
 800134c:	f010 f884 	bl	8011458 <fs_close>
			}

			if (strncmp((char const *)buf,"GET /img/humidity.png",21)==0)
 8001350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001352:	2215      	movs	r2, #21
 8001354:	4955      	ldr	r1, [pc, #340]	@ (80014ac <http_server+0x1d8>)
 8001356:	4618      	mov	r0, r3
 8001358:	f01c f8af 	bl	801d4ba <strncmp>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d113      	bne.n	800138a <http_server+0xb6>
			{

				fs_open(&file, "/img/humidity.png");
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	4952      	ldr	r1, [pc, #328]	@ (80014b0 <http_server+0x1dc>)
 8001368:	4618      	mov	r0, r3
 800136a:	f010 f837 	bl	80113dc <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 800136e:	68f9      	ldr	r1, [r7, #12]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	461a      	mov	r2, r3
 8001374:	2300      	movs	r3, #0
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2300      	movs	r3, #0
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f00e f90c 	bl	800f598 <netconn_write_partly>
				fs_close(&file);
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	4618      	mov	r0, r3
 8001386:	f010 f867 	bl	8011458 <fs_close>

			}
			if (strncmp((char const *)buf,"GET /img/pressure.png",21)==0)
 800138a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138c:	2215      	movs	r2, #21
 800138e:	4949      	ldr	r1, [pc, #292]	@ (80014b4 <http_server+0x1e0>)
 8001390:	4618      	mov	r0, r3
 8001392:	f01c f892 	bl	801d4ba <strncmp>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d113      	bne.n	80013c4 <http_server+0xf0>
			{
				fs_open(&file, "/img/pressure.png");
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	4945      	ldr	r1, [pc, #276]	@ (80014b8 <http_server+0x1e4>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	f010 f81a 	bl	80113dc <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 80013a8:	68f9      	ldr	r1, [r7, #12]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	461a      	mov	r2, r3
 80013ae:	2300      	movs	r3, #0
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2300      	movs	r3, #0
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f00e f8ef 	bl	800f598 <netconn_write_partly>
				fs_close(&file);
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	4618      	mov	r0, r3
 80013c0:	f010 f84a 	bl	8011458 <fs_close>

			}
			if (strncmp((char const *)buf,"GET /img/temperature.png",24)==0)
 80013c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c6:	2218      	movs	r2, #24
 80013c8:	493c      	ldr	r1, [pc, #240]	@ (80014bc <http_server+0x1e8>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	f01c f875 	bl	801d4ba <strncmp>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d113      	bne.n	80013fe <http_server+0x12a>
			{
				fs_open(&file, "/img/temperature.png");
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	4939      	ldr	r1, [pc, #228]	@ (80014c0 <http_server+0x1ec>)
 80013dc:	4618      	mov	r0, r3
 80013de:	f00f fffd 	bl	80113dc <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 80013e2:	68f9      	ldr	r1, [r7, #12]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	461a      	mov	r2, r3
 80013e8:	2300      	movs	r3, #0
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2300      	movs	r3, #0
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f00e f8d2 	bl	800f598 <netconn_write_partly>
				fs_close(&file);
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	4618      	mov	r0, r3
 80013fa:	f010 f82d 	bl	8011458 <fs_close>
			}

			if (strncmp((char const *)buf,"GET /get_value",14)==0)
 80013fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001400:	220e      	movs	r2, #14
 8001402:	4930      	ldr	r1, [pc, #192]	@ (80014c4 <http_server+0x1f0>)
 8001404:	4618      	mov	r0, r3
 8001406:	f01c f858 	bl	801d4ba <strncmp>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d12a      	bne.n	8001466 <http_server+0x192>
			{
				char *pagedata;
				pagedata = pvPortMalloc(10);
 8001410:	200a      	movs	r0, #10
 8001412:	f00d fb19 	bl	800ea48 <pvPortMalloc>
 8001416:	6338      	str	r0, [r7, #48]	@ 0x30
				int len = sprintf (pagedata, "%d %d %d", (int)Temperature, (int)Pressure, (int)Humidity);
 8001418:	4b2b      	ldr	r3, [pc, #172]	@ (80014c8 <http_server+0x1f4>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001422:	4b2a      	ldr	r3, [pc, #168]	@ (80014cc <http_server+0x1f8>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800142c:	4b28      	ldr	r3, [pc, #160]	@ (80014d0 <http_server+0x1fc>)
 800142e:	edd3 7a00 	vldr	s15, [r3]
 8001432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001436:	ee17 3a90 	vmov	r3, s15
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	ee16 3a90 	vmov	r3, s13
 8001440:	ee17 2a10 	vmov	r2, s14
 8001444:	4923      	ldr	r1, [pc, #140]	@ (80014d4 <http_server+0x200>)
 8001446:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001448:	f01b ffa2 	bl	801d390 <siprintf>
 800144c:	62f8      	str	r0, [r7, #44]	@ 0x2c
				netconn_write(conn, (const unsigned char*)pagedata, (size_t)len, NETCONN_NOCOPY);
 800144e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001450:	2300      	movs	r3, #0
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2300      	movs	r3, #0
 8001456:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f00e f89d 	bl	800f598 <netconn_write_partly>
				vPortFree(pagedata);
 800145e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001460:	f00d fbc0 	bl	800ebe4 <vPortFree>
 8001464:	e013      	b.n	800148e <http_server+0x1ba>
			}
			else
			{
				fs_open(&file, "/404.html");
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	491b      	ldr	r1, [pc, #108]	@ (80014d8 <http_server+0x204>)
 800146c:	4618      	mov	r0, r3
 800146e:	f00f ffb5 	bl	80113dc <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001472:	68f9      	ldr	r1, [r7, #12]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	461a      	mov	r2, r3
 8001478:	2300      	movs	r3, #0
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2300      	movs	r3, #0
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f00e f88a 	bl	800f598 <netconn_write_partly>
				fs_close(&file);
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	4618      	mov	r0, r3
 800148a:	f00f ffe5 	bl	8011458 <fs_close>
			}
		}
	}
	/* Close the connection (server closes in HTTP) */
	netconn_close(conn);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f00e f984 	bl	800f79c <netconn_close>

	/* Delete the buffer (netconn_recv gives us ownership,
   so we have to make sure to deallocate the buffer) */
	netbuf_delete(inbuf);
 8001494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001496:	4618      	mov	r0, r3
 8001498:	f00f fd7e 	bl	8010f98 <netbuf_delete>
}
 800149c:	bf00      	nop
 800149e:	3738      	adds	r7, #56	@ 0x38
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	0801e48c 	.word	0x0801e48c
 80014a8:	0801e49c 	.word	0x0801e49c
 80014ac:	0801e4a8 	.word	0x0801e4a8
 80014b0:	0801e4c0 	.word	0x0801e4c0
 80014b4:	0801e4d4 	.word	0x0801e4d4
 80014b8:	0801e4ec 	.word	0x0801e4ec
 80014bc:	0801e500 	.word	0x0801e500
 80014c0:	0801e51c 	.word	0x0801e51c
 80014c4:	0801e534 	.word	0x0801e534
 80014c8:	200005c0 	.word	0x200005c0
 80014cc:	200005c4 	.word	0x200005c4
 80014d0:	200005c8 	.word	0x200005c8
 80014d4:	0801e544 	.word	0x0801e544
 80014d8:	0801e550 	.word	0x0801e550

080014dc <http_thread>:


static void http_thread(void *arg)
{ 
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  
  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2100      	movs	r1, #0
 80014e8:	2010      	movs	r0, #16
 80014ea:	f00d fcb5 	bl	800ee58 <netconn_new_with_proto_and_callback>
 80014ee:	6178      	str	r0, [r7, #20]
  
  if (conn!= NULL)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d023      	beq.n	800153e <http_thread+0x62>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, IP_ADDR_ANY, 80);
 80014f6:	2250      	movs	r2, #80	@ 0x50
 80014f8:	4913      	ldr	r1, [pc, #76]	@ (8001548 <http_thread+0x6c>)
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f00d fd66 	bl	800efcc <netconn_bind>
 8001500:	4603      	mov	r3, r0
 8001502:	74fb      	strb	r3, [r7, #19]
    
    if (err == ERR_OK)
 8001504:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d118      	bne.n	800153e <http_thread+0x62>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 800150c:	21ff      	movs	r1, #255	@ 0xff
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f00d fd94 	bl	800f03c <netconn_listen_with_backlog>
  
      while(1) 
      {
        /* accept any incoming connection */
        accept_err = netconn_accept(conn, &newconn);
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	4619      	mov	r1, r3
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f00d fdba 	bl	800f094 <netconn_accept>
 8001520:	4603      	mov	r3, r0
 8001522:	74bb      	strb	r3, [r7, #18]
        if(accept_err == ERR_OK)
 8001524:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f3      	bne.n	8001514 <http_thread+0x38>
        {
          /* serve connection */
          http_server(newconn);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fed0 	bl	80012d4 <http_server>

          /* delete connection */
          netconn_delete(newconn);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4618      	mov	r0, r3
 8001538:	f00d fd2c 	bl	800ef94 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
 800153c:	e7ea      	b.n	8001514 <http_thread+0x38>
        }
      }
    }
  }
}
 800153e:	bf00      	nop
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	08032518 	.word	0x08032518

0800154c <http_server_init>:



void http_server_init()
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af02      	add	r7, sp, #8
  sys_thread_new("http_thread", http_thread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
 8001552:	2300      	movs	r3, #0
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800155a:	2200      	movs	r2, #0
 800155c:	4903      	ldr	r1, [pc, #12]	@ (800156c <http_server_init+0x20>)
 800155e:	4804      	ldr	r0, [pc, #16]	@ (8001570 <http_server_init+0x24>)
 8001560:	f01a ff6c 	bl	801c43c <sys_thread_new>
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	080014dd 	.word	0x080014dd
 8001570:	0801e55c 	.word	0x0801e55c

08001574 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001578:	f3bf 8f4f 	dsb	sy
}
 800157c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800157e:	f3bf 8f6f 	isb	sy
}
 8001582:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001584:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <SCB_EnableICache+0x48>)
 8001586:	2200      	movs	r2, #0
 8001588:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800158c:	f3bf 8f4f 	dsb	sy
}
 8001590:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001592:	f3bf 8f6f 	isb	sy
}
 8001596:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001598:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <SCB_EnableICache+0x48>)
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	4a07      	ldr	r2, [pc, #28]	@ (80015bc <SCB_EnableICache+0x48>)
 800159e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015a2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80015a4:	f3bf 8f4f 	dsb	sy
}
 80015a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015aa:	f3bf 8f6f 	isb	sy
}
 80015ae:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80015c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001644 <SCB_EnableDCache+0x84>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <SCB_EnableDCache+0x84>)
 80015d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015da:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	0b5b      	lsrs	r3, r3, #13
 80015e0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015e4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	08db      	lsrs	r3, r3, #3
 80015ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015ee:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	015a      	lsls	r2, r3, #5
 80015f4:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80015f8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015fe:	4911      	ldr	r1, [pc, #68]	@ (8001644 <SCB_EnableDCache+0x84>)
 8001600:	4313      	orrs	r3, r2
 8001602:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1e5a      	subs	r2, r3, #1
 800160a:	60ba      	str	r2, [r7, #8]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1ef      	bne.n	80015f0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	1e5a      	subs	r2, r3, #1
 8001614:	60fa      	str	r2, [r7, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1e5      	bne.n	80015e6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800161a:	f3bf 8f4f 	dsb	sy
}
 800161e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001620:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <SCB_EnableDCache+0x84>)
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	4a07      	ldr	r2, [pc, #28]	@ (8001644 <SCB_EnableDCache+0x84>)
 8001626:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800162a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800162c:	f3bf 8f4f 	dsb	sy
}
 8001630:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001632:	f3bf 8f6f 	isb	sy
}
 8001636:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	b096      	sub	sp, #88	@ 0x58
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800164e:	f000 fa3b 	bl	8001ac8 <MPU_Config>

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001652:	f7ff ff8f 	bl	8001574 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001656:	f7ff ffb3 	bl	80015c0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800165a:	f000 fdce 	bl	80021fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165e:	f000 f84b 	bl	80016f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001662:	f000 f8f9 	bl	8001858 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001666:	f000 f8b7 	bl	80017d8 <MX_I2C2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 512);
 800166a:	4b1d      	ldr	r3, [pc, #116]	@ (80016e0 <main+0x98>)
 800166c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001670:	461d      	mov	r5, r3
 8001672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001676:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800167a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800167e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f00a fad0 	bl	800bc2a <osThreadCreate>
 800168a:	4603      	mov	r3, r0
 800168c:	4a15      	ldr	r2, [pc, #84]	@ (80016e4 <main+0x9c>)
 800168e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8001690:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <main+0xa0>)
 8001692:	f107 0420 	add.w	r4, r7, #32
 8001696:	461d      	mov	r5, r3
 8001698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80016a4:	f107 0320 	add.w	r3, r7, #32
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f00a fabd 	bl	800bc2a <osThreadCreate>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a0e      	ldr	r2, [pc, #56]	@ (80016ec <main+0xa4>)
 80016b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 80016b6:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <main+0xa8>)
 80016b8:	1d3c      	adds	r4, r7, #4
 80016ba:	461d      	mov	r5, r3
 80016bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f00a faac 	bl	800bc2a <osThreadCreate>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4a07      	ldr	r2, [pc, #28]	@ (80016f4 <main+0xac>)
 80016d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80016d8:	f00a fa90 	bl	800bbfc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <main+0x94>
 80016e0:	0801e574 	.word	0x0801e574
 80016e4:	20000624 	.word	0x20000624
 80016e8:	0801e59c 	.word	0x0801e59c
 80016ec:	20000628 	.word	0x20000628
 80016f0:	0801e5c4 	.word	0x0801e5c4
 80016f4:	2000062c 	.word	0x2000062c

080016f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b094      	sub	sp, #80	@ 0x50
 80016fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fe:	f107 031c 	add.w	r3, r7, #28
 8001702:	2234      	movs	r2, #52	@ 0x34
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f01b fecf 	bl	801d4aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800170c:	f107 0308 	add.w	r3, r7, #8
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800171c:	4b2c      	ldr	r3, [pc, #176]	@ (80017d0 <SystemClock_Config+0xd8>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001720:	4a2b      	ldr	r2, [pc, #172]	@ (80017d0 <SystemClock_Config+0xd8>)
 8001722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001726:	6413      	str	r3, [r2, #64]	@ 0x40
 8001728:	4b29      	ldr	r3, [pc, #164]	@ (80017d0 <SystemClock_Config+0xd8>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001734:	4b27      	ldr	r3, [pc, #156]	@ (80017d4 <SystemClock_Config+0xdc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800173c:	4a25      	ldr	r2, [pc, #148]	@ (80017d4 <SystemClock_Config+0xdc>)
 800173e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b23      	ldr	r3, [pc, #140]	@ (80017d4 <SystemClock_Config+0xdc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001750:	2301      	movs	r3, #1
 8001752:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001754:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001758:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800175a:	2302      	movs	r3, #2
 800175c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800175e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001762:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001764:	2304      	movs	r3, #4
 8001766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001768:	2360      	movs	r3, #96	@ 0x60
 800176a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800176c:	2302      	movs	r3, #2
 800176e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001770:	2304      	movs	r3, #4
 8001772:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001774:	2302      	movs	r3, #2
 8001776:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	4618      	mov	r0, r3
 800177e:	f004 fc45 	bl	800600c <HAL_RCC_OscConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001788:	f000 f9ec 	bl	8001b64 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800178c:	f004 fbee 	bl	8005f6c <HAL_PWREx_EnableOverDrive>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001796:	f000 f9e5 	bl	8001b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800179a:	230f      	movs	r3, #15
 800179c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179e:	2302      	movs	r3, #2
 80017a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017b0:	f107 0308 	add.w	r3, r7, #8
 80017b4:	2103      	movs	r1, #3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f004 fed6 	bl	8006568 <HAL_RCC_ClockConfig>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80017c2:	f000 f9cf 	bl	8001b64 <Error_Handler>
  }
}
 80017c6:	bf00      	nop
 80017c8:	3750      	adds	r7, #80	@ 0x50
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40007000 	.word	0x40007000

080017d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	@ (800184c <MX_I2C2_Init+0x74>)
 80017de:	4a1c      	ldr	r2, [pc, #112]	@ (8001850 <MX_I2C2_Init+0x78>)
 80017e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	@ (800184c <MX_I2C2_Init+0x74>)
 80017e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001854 <MX_I2C2_Init+0x7c>)
 80017e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017e8:	4b18      	ldr	r3, [pc, #96]	@ (800184c <MX_I2C2_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ee:	4b17      	ldr	r3, [pc, #92]	@ (800184c <MX_I2C2_Init+0x74>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f4:	4b15      	ldr	r3, [pc, #84]	@ (800184c <MX_I2C2_Init+0x74>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017fa:	4b14      	ldr	r3, [pc, #80]	@ (800184c <MX_I2C2_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <MX_I2C2_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001806:	4b11      	ldr	r3, [pc, #68]	@ (800184c <MX_I2C2_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800180c:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <MX_I2C2_Init+0x74>)
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001812:	480e      	ldr	r0, [pc, #56]	@ (800184c <MX_I2C2_Init+0x74>)
 8001814:	f002 fafe 	bl	8003e14 <HAL_I2C_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800181e:	f000 f9a1 	bl	8001b64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001822:	2100      	movs	r1, #0
 8001824:	4809      	ldr	r0, [pc, #36]	@ (800184c <MX_I2C2_Init+0x74>)
 8001826:	f003 f881 	bl	800492c <HAL_I2CEx_ConfigAnalogFilter>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001830:	f000 f998 	bl	8001b64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001834:	2100      	movs	r1, #0
 8001836:	4805      	ldr	r0, [pc, #20]	@ (800184c <MX_I2C2_Init+0x74>)
 8001838:	f003 f8c3 	bl	80049c2 <HAL_I2CEx_ConfigDigitalFilter>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001842:	f000 f98f 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200005d0 	.word	0x200005d0
 8001850:	40005800 	.word	0x40005800
 8001854:	20303e5d 	.word	0x20303e5d

08001858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08c      	sub	sp, #48	@ 0x30
 800185c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186e:	4b36      	ldr	r3, [pc, #216]	@ (8001948 <MX_GPIO_Init+0xf0>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a35      	ldr	r2, [pc, #212]	@ (8001948 <MX_GPIO_Init+0xf0>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b33      	ldr	r3, [pc, #204]	@ (8001948 <MX_GPIO_Init+0xf0>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	61bb      	str	r3, [r7, #24]
 8001884:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001886:	4b30      	ldr	r3, [pc, #192]	@ (8001948 <MX_GPIO_Init+0xf0>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	4a2f      	ldr	r2, [pc, #188]	@ (8001948 <MX_GPIO_Init+0xf0>)
 800188c:	f043 0320 	orr.w	r3, r3, #32
 8001890:	6313      	str	r3, [r2, #48]	@ 0x30
 8001892:	4b2d      	ldr	r3, [pc, #180]	@ (8001948 <MX_GPIO_Init+0xf0>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	f003 0320 	and.w	r3, r3, #32
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800189e:	4b2a      	ldr	r3, [pc, #168]	@ (8001948 <MX_GPIO_Init+0xf0>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	4a29      	ldr	r2, [pc, #164]	@ (8001948 <MX_GPIO_Init+0xf0>)
 80018a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018aa:	4b27      	ldr	r3, [pc, #156]	@ (8001948 <MX_GPIO_Init+0xf0>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	4b24      	ldr	r3, [pc, #144]	@ (8001948 <MX_GPIO_Init+0xf0>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4a23      	ldr	r2, [pc, #140]	@ (8001948 <MX_GPIO_Init+0xf0>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4b21      	ldr	r3, [pc, #132]	@ (8001948 <MX_GPIO_Init+0xf0>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001948 <MX_GPIO_Init+0xf0>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001948 <MX_GPIO_Init+0xf0>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018da:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <MX_GPIO_Init+0xf0>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018e6:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <MX_GPIO_Init+0xf0>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	4a17      	ldr	r2, [pc, #92]	@ (8001948 <MX_GPIO_Init+0xf0>)
 80018ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f2:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <MX_GPIO_Init+0xf0>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 80018fe:	2200      	movs	r2, #0
 8001900:	2181      	movs	r1, #129	@ 0x81
 8001902:	4812      	ldr	r0, [pc, #72]	@ (800194c <MX_GPIO_Init+0xf4>)
 8001904:	f002 fa52 	bl	8003dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001908:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800190c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800190e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	4619      	mov	r1, r3
 800191e:	480c      	ldr	r0, [pc, #48]	@ (8001950 <MX_GPIO_Init+0xf8>)
 8001920:	f002 f898 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8001924:	2381      	movs	r3, #129	@ 0x81
 8001926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001928:	2301      	movs	r3, #1
 800192a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	4619      	mov	r1, r3
 800193a:	4804      	ldr	r0, [pc, #16]	@ (800194c <MX_GPIO_Init+0xf4>)
 800193c:	f002 f88a 	bl	8003a54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001940:	bf00      	nop
 8001942:	3730      	adds	r7, #48	@ 0x30
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	40020400 	.word	0x40020400
 8001950:	40020800 	.word	0x40020800

08001954 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af02      	add	r7, sp, #8
 800195a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800195c:	f007 fa80 	bl	8008e60 <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001960:	f01a fdb0 	bl	801c4c4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  http_server_init();
 8001964:	f7ff fdf2 	bl	800154c <http_server_init>
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001968:	2304      	movs	r3, #4
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	2300      	movs	r3, #0
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2303      	movs	r3, #3
 8001972:	2201      	movs	r2, #1
 8001974:	2105      	movs	r1, #5
 8001976:	2002      	movs	r0, #2
 8001978:	f7fe ff74 	bl	8000864 <BME280_Config>
  //CDC_Transmit_FS(USB_secondMessage,strlen(USB_firstMessage));
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 800197c:	2001      	movs	r0, #1
 800197e:	f00a f9ac 	bl	800bcda <osDelay>
 8001982:	e7fb      	b.n	800197c <StartDefaultTask+0x28>

08001984 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	BME280_Measure();
 800198c:	f7ff fc04 	bl	8001198 <BME280_Measure>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001990:	2180      	movs	r1, #128	@ 0x80
 8001992:	4824      	ldr	r0, [pc, #144]	@ (8001a24 <StartTask02+0xa0>)
 8001994:	f002 fa23 	bl	8003dde <HAL_GPIO_TogglePin>
	int Temperature_rest = (int)((Temperature - (int)Temperature) * 100);
 8001998:	4b23      	ldr	r3, [pc, #140]	@ (8001a28 <StartTask02+0xa4>)
 800199a:	ed93 7a00 	vldr	s14, [r3]
 800199e:	4b22      	ldr	r3, [pc, #136]	@ (8001a28 <StartTask02+0xa4>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001a2c <StartTask02+0xa8>
 80019b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019bc:	ee17 3a90 	vmov	r3, s15
 80019c0:	617b      	str	r3, [r7, #20]
	int Pressure_rest = (int)((Pressure - (int)Pressure) * 100);
 80019c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a30 <StartTask02+0xac>)
 80019c4:	ed93 7a00 	vldr	s14, [r3]
 80019c8:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <StartTask02+0xac>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019da:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001a2c <StartTask02+0xa8>
 80019de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e6:	ee17 3a90 	vmov	r3, s15
 80019ea:	613b      	str	r3, [r7, #16]
	int Humidity_rest = (int)((Humidity - (int)Humidity) * 100);
 80019ec:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <StartTask02+0xb0>)
 80019ee:	ed93 7a00 	vldr	s14, [r3]
 80019f2:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <StartTask02+0xb0>)
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a04:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001a2c <StartTask02+0xa8>
 8001a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a10:	ee17 3a90 	vmov	r3, s15
 8001a14:	60fb      	str	r3, [r7, #12]
    osDelay(500);
 8001a16:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a1a:	f00a f95e 	bl	800bcda <osDelay>
  {
 8001a1e:	bf00      	nop
 8001a20:	e7b4      	b.n	800198c <StartTask02+0x8>
 8001a22:	bf00      	nop
 8001a24:	40020400 	.word	0x40020400
 8001a28:	200005c0 	.word	0x200005c0
 8001a2c:	42c80000 	.word	0x42c80000
 8001a30:	200005c4 	.word	0x200005c4
 8001a34:	200005c8 	.word	0x200005c8

08001a38 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af04      	add	r7, sp, #16
 8001a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	sprintf(USB_TxData,"Temperature- %d.%d,     Pressure- %d.%d,     Humidity- %d.%d\n\r", (int)Temperature, Temperature_rest, (int)Pressure, Pressure_rest, (int)Humidity, Humidity_rest);
 8001a40:	4b19      	ldr	r3, [pc, #100]	@ (8001aa8 <StartTask03+0x70>)
 8001a42:	edd3 7a00 	vldr	s15, [r3]
 8001a46:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001a4a:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <StartTask03+0x74>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <StartTask03+0x78>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a5a:	ee17 0a90 	vmov	r0, s15
 8001a5e:	4b15      	ldr	r3, [pc, #84]	@ (8001ab4 <StartTask03+0x7c>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <StartTask03+0x80>)
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a6e:	ee17 4a90 	vmov	r4, s15
 8001a72:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <StartTask03+0x84>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	9303      	str	r3, [sp, #12]
 8001a78:	9402      	str	r4, [sp, #8]
 8001a7a:	9201      	str	r2, [sp, #4]
 8001a7c:	9000      	str	r0, [sp, #0]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	ee17 2a10 	vmov	r2, s14
 8001a84:	490e      	ldr	r1, [pc, #56]	@ (8001ac0 <StartTask03+0x88>)
 8001a86:	480f      	ldr	r0, [pc, #60]	@ (8001ac4 <StartTask03+0x8c>)
 8001a88:	f01b fc82 	bl	801d390 <siprintf>
	CDC_Transmit_FS(USB_TxData, strlen(USB_TxData));
 8001a8c:	480d      	ldr	r0, [pc, #52]	@ (8001ac4 <StartTask03+0x8c>)
 8001a8e:	f7fe fbe1 	bl	8000254 <strlen>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4619      	mov	r1, r3
 8001a96:	480b      	ldr	r0, [pc, #44]	@ (8001ac4 <StartTask03+0x8c>)
 8001a98:	f01a fdd2 	bl	801c640 <CDC_Transmit_FS>
    osDelay(1000);
 8001a9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001aa0:	f00a f91b 	bl	800bcda <osDelay>
  {
 8001aa4:	bf00      	nop
 8001aa6:	e7cb      	b.n	8001a40 <StartTask03+0x8>
 8001aa8:	200005c0 	.word	0x200005c0
 8001aac:	200005cc 	.word	0x200005cc
 8001ab0:	200005c4 	.word	0x200005c4
 8001ab4:	200005cd 	.word	0x200005cd
 8001ab8:	200005c8 	.word	0x200005c8
 8001abc:	200005ce 	.word	0x200005ce
 8001ac0:	0801e5e0 	.word	0x0801e5e0
 8001ac4:	20000630 	.word	0x20000630

08001ac8 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001ace:	463b      	mov	r3, r7
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001ada:	f000 fccd 	bl	8002478 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20020000;
 8001ae6:	4b14      	ldr	r3, [pc, #80]	@ (8001b38 <MPU_Config+0x70>)
 8001ae8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001aea:	230d      	movs	r3, #13
 8001aec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001af2:	2301      	movs	r3, #1
 8001af4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001af6:	2303      	movs	r3, #3
 8001af8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001afa:	2301      	movs	r3, #1
 8001afc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 fceb 	bl	80024e8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001b12:	2301      	movs	r3, #1
 8001b14:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20040000;
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <MPU_Config+0x74>)
 8001b18:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001b1a:	230e      	movs	r3, #14
 8001b1c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001b22:	463b      	mov	r3, r7
 8001b24:	4618      	mov	r0, r3
 8001b26:	f000 fcdf 	bl	80024e8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001b2a:	2004      	movs	r0, #4
 8001b2c:	f000 fcbc 	bl	80024a8 <HAL_MPU_Enable>

}
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20020000 	.word	0x20020000
 8001b3c:	20040000 	.word	0x20040000

08001b40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a04      	ldr	r2, [pc, #16]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d101      	bne.n	8001b56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b52:	f000 fb5f 	bl	8002214 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40001000 	.word	0x40001000

08001b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <Error_Handler+0x8>

08001b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_MspInit+0x4c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	4a10      	ldr	r2, [pc, #64]	@ (8001bbc <HAL_MspInit+0x4c>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <HAL_MspInit+0x4c>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <HAL_MspInit+0x4c>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b92:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <HAL_MspInit+0x4c>)
 8001b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b9a:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <HAL_MspInit+0x4c>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	210f      	movs	r1, #15
 8001baa:	f06f 0001 	mvn.w	r0, #1
 8001bae:	f000 fc39 	bl	8002424 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b0ae      	sub	sp, #184	@ 0xb8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2290      	movs	r2, #144	@ 0x90
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f01b fc62 	bl	801d4aa <memset>
  if(hi2c->Instance==I2C2)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a21      	ldr	r2, [pc, #132]	@ (8001c70 <HAL_I2C_MspInit+0xb0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d13b      	bne.n	8001c68 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001bf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bf4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f004 fef6 	bl	80069f0 <HAL_RCCEx_PeriphCLKConfig>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c0a:	f7ff ffab 	bl	8001b64 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c0e:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <HAL_I2C_MspInit+0xb4>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	4a18      	ldr	r2, [pc, #96]	@ (8001c74 <HAL_I2C_MspInit+0xb4>)
 8001c14:	f043 0320 	orr.w	r3, r3, #32
 8001c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1a:	4b16      	ldr	r3, [pc, #88]	@ (8001c74 <HAL_I2C_MspInit+0xb4>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	f003 0320 	and.w	r3, r3, #32
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c26:	2303      	movs	r3, #3
 8001c28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c2c:	2312      	movs	r3, #18
 8001c2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c3e:	2304      	movs	r3, #4
 8001c40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c44:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	480b      	ldr	r0, [pc, #44]	@ (8001c78 <HAL_I2C_MspInit+0xb8>)
 8001c4c:	f001 ff02 	bl	8003a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c50:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <HAL_I2C_MspInit+0xb4>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	4a07      	ldr	r2, [pc, #28]	@ (8001c74 <HAL_I2C_MspInit+0xb4>)
 8001c56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_I2C_MspInit+0xb4>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001c68:	bf00      	nop
 8001c6a:	37b8      	adds	r7, #184	@ 0xb8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40005800 	.word	0x40005800
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40021400 	.word	0x40021400

08001c7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08e      	sub	sp, #56	@ 0x38
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c8c:	4b33      	ldr	r3, [pc, #204]	@ (8001d5c <HAL_InitTick+0xe0>)
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c90:	4a32      	ldr	r2, [pc, #200]	@ (8001d5c <HAL_InitTick+0xe0>)
 8001c92:	f043 0310 	orr.w	r3, r3, #16
 8001c96:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c98:	4b30      	ldr	r3, [pc, #192]	@ (8001d5c <HAL_InitTick+0xe0>)
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ca4:	f107 0210 	add.w	r2, r7, #16
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	4611      	mov	r1, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f004 fe6c 	bl	800698c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d103      	bne.n	8001cc6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cbe:	f004 fe51 	bl	8006964 <HAL_RCC_GetPCLK1Freq>
 8001cc2:	6378      	str	r0, [r7, #52]	@ 0x34
 8001cc4:	e004      	b.n	8001cd0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001cc6:	f004 fe4d 	bl	8006964 <HAL_RCC_GetPCLK1Freq>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cd2:	4a23      	ldr	r2, [pc, #140]	@ (8001d60 <HAL_InitTick+0xe4>)
 8001cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd8:	0c9b      	lsrs	r3, r3, #18
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001cde:	4b21      	ldr	r3, [pc, #132]	@ (8001d64 <HAL_InitTick+0xe8>)
 8001ce0:	4a21      	ldr	r2, [pc, #132]	@ (8001d68 <HAL_InitTick+0xec>)
 8001ce2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <HAL_InitTick+0xe8>)
 8001ce6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001cec:	4a1d      	ldr	r2, [pc, #116]	@ (8001d64 <HAL_InitTick+0xe8>)
 8001cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d64 <HAL_InitTick+0xe8>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d64 <HAL_InitTick+0xe8>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfe:	4b19      	ldr	r3, [pc, #100]	@ (8001d64 <HAL_InitTick+0xe8>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001d04:	4817      	ldr	r0, [pc, #92]	@ (8001d64 <HAL_InitTick+0xe8>)
 8001d06:	f005 fa9b 	bl	8007240 <HAL_TIM_Base_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001d10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d11b      	bne.n	8001d50 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001d18:	4812      	ldr	r0, [pc, #72]	@ (8001d64 <HAL_InitTick+0xe8>)
 8001d1a:	f005 faf3 	bl	8007304 <HAL_TIM_Base_Start_IT>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001d24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d111      	bne.n	8001d50 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d2c:	2036      	movs	r0, #54	@ 0x36
 8001d2e:	f000 fb95 	bl	800245c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b0f      	cmp	r3, #15
 8001d36:	d808      	bhi.n	8001d4a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	2036      	movs	r0, #54	@ 0x36
 8001d3e:	f000 fb71 	bl	8002424 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d42:	4a0a      	ldr	r2, [pc, #40]	@ (8001d6c <HAL_InitTick+0xf0>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	e002      	b.n	8001d50 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3738      	adds	r7, #56	@ 0x38
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	431bde83 	.word	0x431bde83
 8001d64:	20000680 	.word	0x20000680
 8001d68:	40001000 	.word	0x40001000
 8001d6c:	20000004 	.word	0x20000004

08001d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <NMI_Handler+0x4>

08001d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <HardFault_Handler+0x4>

08001d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <MemManage_Handler+0x4>

08001d88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <BusFault_Handler+0x4>

08001d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <UsageFault_Handler+0x4>

08001d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001dac:	4802      	ldr	r0, [pc, #8]	@ (8001db8 <TIM6_DAC_IRQHandler+0x10>)
 8001dae:	f005 fb21 	bl	80073f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000680 	.word	0x20000680

08001dbc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001dc0:	4802      	ldr	r0, [pc, #8]	@ (8001dcc <ETH_IRQHandler+0x10>)
 8001dc2:	f000 ff5f 	bl	8002c84 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200050b4 	.word	0x200050b4

08001dd0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001dd4:	4802      	ldr	r0, [pc, #8]	@ (8001de0 <OTG_FS_IRQHandler+0x10>)
 8001dd6:	f002 ff78 	bl	8004cca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	2000fa98 	.word	0x2000fa98

08001de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return 1;
 8001de8:	2301      	movs	r3, #1
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <_kill>:

int _kill(int pid, int sig)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dfe:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <_kill+0x20>)
 8001e00:	2216      	movs	r2, #22
 8001e02:	601a      	str	r2, [r3, #0]
  return -1;
 8001e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	200100bc 	.word	0x200100bc

08001e18 <_exit>:

void _exit (int status)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ffe5 	bl	8001df4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e2a:	bf00      	nop
 8001e2c:	e7fd      	b.n	8001e2a <_exit+0x12>

08001e2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	e00a      	b.n	8001e56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e40:	f3af 8000 	nop.w
 8001e44:	4601      	mov	r1, r0
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	60ba      	str	r2, [r7, #8]
 8001e4c:	b2ca      	uxtb	r2, r1
 8001e4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3301      	adds	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	dbf0      	blt.n	8001e40 <_read+0x12>
  }

  return len;
 8001e5e:	687b      	ldr	r3, [r7, #4]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	e009      	b.n	8001e8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	60ba      	str	r2, [r7, #8]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	dbf1      	blt.n	8001e7a <_write+0x12>
  }
  return len;
 8001e96:	687b      	ldr	r3, [r7, #4]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_close>:

int _close(int file)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ec8:	605a      	str	r2, [r3, #4]
  return 0;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <_isatty>:

int _isatty(int file)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ee0:	2301      	movs	r3, #1
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b085      	sub	sp, #20
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f10:	4a14      	ldr	r2, [pc, #80]	@ (8001f64 <_sbrk+0x5c>)
 8001f12:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <_sbrk+0x60>)
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f1c:	4b13      	ldr	r3, [pc, #76]	@ (8001f6c <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f24:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <_sbrk+0x64>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	@ (8001f70 <_sbrk+0x68>)
 8001f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2a:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d205      	bcs.n	8001f44 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001f38:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <_sbrk+0x6c>)
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	e009      	b.n	8001f58 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f44:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <_sbrk+0x64>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4a:	4b08      	ldr	r3, [pc, #32]	@ (8001f6c <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	4a06      	ldr	r2, [pc, #24]	@ (8001f6c <_sbrk+0x64>)
 8001f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f56:	68fb      	ldr	r3, [r7, #12]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	371c      	adds	r7, #28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	20080000 	.word	0x20080000
 8001f68:	00000400 	.word	0x00000400
 8001f6c:	200006cc 	.word	0x200006cc
 8001f70:	200100c8 	.word	0x200100c8
 8001f74:	200100bc 	.word	0x200100bc

08001f78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f7c:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <SystemInit+0x20>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f82:	4a05      	ldr	r2, [pc, #20]	@ (8001f98 <SystemInit+0x20>)
 8001f84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fd4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fa0:	f7ff ffea 	bl	8001f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fa4:	480c      	ldr	r0, [pc, #48]	@ (8001fd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fa6:	490d      	ldr	r1, [pc, #52]	@ (8001fdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fac:	e002      	b.n	8001fb4 <LoopCopyDataInit>

08001fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fae:	58d4      	ldr	r4, [r2, r3]

  str r4, [r0, r3]
 8001fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb2:	3304      	adds	r3, #4

08001fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb8:	d3f9      	bcc.n	8001fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fba:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001fe8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc0:	e001      	b.n	8001fc6 <LoopFillZerobss>

08001fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc4:	3204      	adds	r2, #4

08001fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc8:	d3fb      	bcc.n	8001fc2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001fca:	f01b fb35 	bl	801d638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fce:	f7ff fb3b 	bl	8001648 <main>
  bx  lr    
 8001fd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fd4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fdc:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8001fe0:	08032624 	.word	0x08032624
  ldr r2, =_sbss
 8001fe4:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8001fe8:	200100c4 	.word	0x200100c4

08001fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fec:	e7fe      	b.n	8001fec <ADC_IRQHandler>

08001fee <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <LAN8742_RegisterBusIO+0x28>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d007      	beq.n	8002016 <LAN8742_RegisterBusIO+0x28>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <LAN8742_RegisterBusIO+0x28>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
 800201a:	e014      	b.n	8002046 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d139      	bne.n	80020e2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2220      	movs	r2, #32
 8002080:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	e01c      	b.n	80020c2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	f107 020c 	add.w	r2, r7, #12
 8002090:	2112      	movs	r1, #18
 8002092:	6978      	ldr	r0, [r7, #20]
 8002094:	4798      	blx	r3
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	da03      	bge.n	80020a4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 800209c:	f06f 0304 	mvn.w	r3, #4
 80020a0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80020a2:	e00b      	b.n	80020bc <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d105      	bne.n	80020bc <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
         break;
 80020ba:	e005      	b.n	80020c8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	3301      	adds	r3, #1
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2b1f      	cmp	r3, #31
 80020c6:	d9df      	bls.n	8002088 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b1f      	cmp	r3, #31
 80020ce:	d902      	bls.n	80020d6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80020d0:	f06f 0302 	mvn.w	r3, #2
 80020d4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d102      	bne.n	80020e2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80020e2:	693b      	ldr	r3, [r7, #16]
 }
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6810      	ldr	r0, [r2, #0]
 8002100:	f107 020c 	add.w	r2, r7, #12
 8002104:	2101      	movs	r1, #1
 8002106:	4798      	blx	r3
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	da02      	bge.n	8002114 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800210e:	f06f 0304 	mvn.w	r3, #4
 8002112:	e06e      	b.n	80021f2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6810      	ldr	r0, [r2, #0]
 800211c:	f107 020c 	add.w	r2, r7, #12
 8002120:	2101      	movs	r1, #1
 8002122:	4798      	blx	r3
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	da02      	bge.n	8002130 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800212a:	f06f 0304 	mvn.w	r3, #4
 800212e:	e060      	b.n	80021f2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800213a:	2301      	movs	r3, #1
 800213c:	e059      	b.n	80021f2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6810      	ldr	r0, [r2, #0]
 8002146:	f107 020c 	add.w	r2, r7, #12
 800214a:	2100      	movs	r1, #0
 800214c:	4798      	blx	r3
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	da02      	bge.n	800215a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002154:	f06f 0304 	mvn.w	r3, #4
 8002158:	e04b      	b.n	80021f2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d11b      	bne.n	800219c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d006      	beq.n	800217c <LAN8742_GetLinkState+0x90>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002178:	2302      	movs	r3, #2
 800217a:	e03a      	b.n	80021f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002186:	2303      	movs	r3, #3
 8002188:	e033      	b.n	80021f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002194:	2304      	movs	r3, #4
 8002196:	e02c      	b.n	80021f2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002198:	2305      	movs	r3, #5
 800219a:	e02a      	b.n	80021f2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6810      	ldr	r0, [r2, #0]
 80021a4:	f107 020c 	add.w	r2, r7, #12
 80021a8:	211f      	movs	r1, #31
 80021aa:	4798      	blx	r3
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	da02      	bge.n	80021b8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80021b2:	f06f 0304 	mvn.w	r3, #4
 80021b6:	e01c      	b.n	80021f2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80021c2:	2306      	movs	r3, #6
 80021c4:	e015      	b.n	80021f2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 031c 	and.w	r3, r3, #28
 80021cc:	2b18      	cmp	r3, #24
 80021ce:	d101      	bne.n	80021d4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80021d0:	2302      	movs	r3, #2
 80021d2:	e00e      	b.n	80021f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 031c 	and.w	r3, r3, #28
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d101      	bne.n	80021e2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80021de:	2303      	movs	r3, #3
 80021e0:	e007      	b.n	80021f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f003 031c 	and.w	r3, r3, #28
 80021e8:	2b14      	cmp	r3, #20
 80021ea:	d101      	bne.n	80021f0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80021ec:	2304      	movs	r3, #4
 80021ee:	e000      	b.n	80021f2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80021f0:	2305      	movs	r3, #5
    }
  }
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021fe:	2003      	movs	r0, #3
 8002200:	f000 f905 	bl	800240e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002204:	200f      	movs	r0, #15
 8002206:	f7ff fd39 	bl	8001c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800220a:	f7ff fcb1 	bl	8001b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002218:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <HAL_IncTick+0x20>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_IncTick+0x24>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4413      	add	r3, r2
 8002224:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <HAL_IncTick+0x24>)
 8002226:	6013      	str	r3, [r2, #0]
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000008 	.word	0x20000008
 8002238:	200006d0 	.word	0x200006d0

0800223c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return uwTick;
 8002240:	4b03      	ldr	r3, [pc, #12]	@ (8002250 <HAL_GetTick+0x14>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	200006d0 	.word	0x200006d0

08002254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800225c:	f7ff ffee 	bl	800223c <HAL_GetTick>
 8002260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d005      	beq.n	800227a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800226e:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <HAL_Delay+0x44>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4413      	add	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800227a:	bf00      	nop
 800227c:	f7ff ffde 	bl	800223c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	429a      	cmp	r2, r3
 800228a:	d8f7      	bhi.n	800227c <HAL_Delay+0x28>
  {
  }
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000008 	.word	0x20000008

0800229c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 80022a0:	4b03      	ldr	r3, [pc, #12]	@ (80022b0 <HAL_GetREVID+0x14>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	0c1b      	lsrs	r3, r3, #16
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e0042000 	.word	0xe0042000

080022b4 <__NVIC_SetPriorityGrouping>:
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c4:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x40>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022d0:	4013      	ands	r3, r2
 80022d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022dc:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <__NVIC_SetPriorityGrouping+0x44>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e2:	4a04      	ldr	r2, [pc, #16]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x40>)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	60d3      	str	r3, [r2, #12]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000ed00 	.word	0xe000ed00
 80022f8:	05fa0000 	.word	0x05fa0000

080022fc <__NVIC_GetPriorityGrouping>:
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002300:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <__NVIC_GetPriorityGrouping+0x18>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	f003 0307 	and.w	r3, r3, #7
}
 800230a:	4618      	mov	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <__NVIC_EnableIRQ>:
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	2b00      	cmp	r3, #0
 8002328:	db0b      	blt.n	8002342 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	f003 021f 	and.w	r2, r3, #31
 8002330:	4907      	ldr	r1, [pc, #28]	@ (8002350 <__NVIC_EnableIRQ+0x38>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	2001      	movs	r0, #1
 800233a:	fa00 f202 	lsl.w	r2, r0, r2
 800233e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	e000e100 	.word	0xe000e100

08002354 <__NVIC_SetPriority>:
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	6039      	str	r1, [r7, #0]
 800235e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002364:	2b00      	cmp	r3, #0
 8002366:	db0a      	blt.n	800237e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	b2da      	uxtb	r2, r3
 800236c:	490c      	ldr	r1, [pc, #48]	@ (80023a0 <__NVIC_SetPriority+0x4c>)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	0112      	lsls	r2, r2, #4
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	440b      	add	r3, r1
 8002378:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800237c:	e00a      	b.n	8002394 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	4908      	ldr	r1, [pc, #32]	@ (80023a4 <__NVIC_SetPriority+0x50>)
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	3b04      	subs	r3, #4
 800238c:	0112      	lsls	r2, r2, #4
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	440b      	add	r3, r1
 8002392:	761a      	strb	r2, [r3, #24]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000e100 	.word	0xe000e100
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <NVIC_EncodePriority>:
{
 80023a8:	b480      	push	{r7}
 80023aa:	b089      	sub	sp, #36	@ 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f1c3 0307 	rsb	r3, r3, #7
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	bf28      	it	cs
 80023c6:	2304      	movcs	r3, #4
 80023c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3304      	adds	r3, #4
 80023ce:	2b06      	cmp	r3, #6
 80023d0:	d902      	bls.n	80023d8 <NVIC_EncodePriority+0x30>
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3b03      	subs	r3, #3
 80023d6:	e000      	b.n	80023da <NVIC_EncodePriority+0x32>
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023dc:	f04f 32ff 	mov.w	r2, #4294967295
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43da      	mvns	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	401a      	ands	r2, r3
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f0:	f04f 31ff 	mov.w	r1, #4294967295
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	fa01 f303 	lsl.w	r3, r1, r3
 80023fa:	43d9      	mvns	r1, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	4313      	orrs	r3, r2
}
 8002402:	4618      	mov	r0, r3
 8002404:	3724      	adds	r7, #36	@ 0x24
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff ff4c 	bl	80022b4 <__NVIC_SetPriorityGrouping>
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002436:	f7ff ff61 	bl	80022fc <__NVIC_GetPriorityGrouping>
 800243a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	6978      	ldr	r0, [r7, #20]
 8002442:	f7ff ffb1 	bl	80023a8 <NVIC_EncodePriority>
 8002446:	4602      	mov	r2, r0
 8002448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244c:	4611      	mov	r1, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ff80 	bl	8002354 <__NVIC_SetPriority>
}
 8002454:	bf00      	nop
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff ff54 	bl	8002318 <__NVIC_EnableIRQ>
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800247c:	f3bf 8f5f 	dmb	sy
}
 8002480:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002482:	4b07      	ldr	r3, [pc, #28]	@ (80024a0 <HAL_MPU_Disable+0x28>)
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	4a06      	ldr	r2, [pc, #24]	@ (80024a0 <HAL_MPU_Disable+0x28>)
 8002488:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800248c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800248e:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <HAL_MPU_Disable+0x2c>)
 8002490:	2200      	movs	r2, #0
 8002492:	605a      	str	r2, [r3, #4]
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000ed00 	.word	0xe000ed00
 80024a4:	e000ed90 	.word	0xe000ed90

080024a8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80024b0:	4a0b      	ldr	r2, [pc, #44]	@ (80024e0 <HAL_MPU_Enable+0x38>)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80024ba:	4b0a      	ldr	r3, [pc, #40]	@ (80024e4 <HAL_MPU_Enable+0x3c>)
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	4a09      	ldr	r2, [pc, #36]	@ (80024e4 <HAL_MPU_Enable+0x3c>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80024c6:	f3bf 8f4f 	dsb	sy
}
 80024ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80024cc:	f3bf 8f6f 	isb	sy
}
 80024d0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000ed90 	.word	0xe000ed90
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	785a      	ldrb	r2, [r3, #1]
 80024f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002564 <HAL_MPU_ConfigRegion+0x7c>)
 80024f6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80024f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002564 <HAL_MPU_ConfigRegion+0x7c>)
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	4a19      	ldr	r2, [pc, #100]	@ (8002564 <HAL_MPU_ConfigRegion+0x7c>)
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002504:	4a17      	ldr	r2, [pc, #92]	@ (8002564 <HAL_MPU_ConfigRegion+0x7c>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	7b1b      	ldrb	r3, [r3, #12]
 8002510:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	7adb      	ldrb	r3, [r3, #11]
 8002516:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002518:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	7a9b      	ldrb	r3, [r3, #10]
 800251e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002520:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	7b5b      	ldrb	r3, [r3, #13]
 8002526:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002528:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	7b9b      	ldrb	r3, [r3, #14]
 800252e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002530:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	7bdb      	ldrb	r3, [r3, #15]
 8002536:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002538:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	7a5b      	ldrb	r3, [r3, #9]
 800253e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002540:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	7a1b      	ldrb	r3, [r3, #8]
 8002546:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002548:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	7812      	ldrb	r2, [r2, #0]
 800254e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002550:	4a04      	ldr	r2, [pc, #16]	@ (8002564 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002552:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002554:	6113      	str	r3, [r2, #16]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000ed90 	.word	0xe000ed90

08002568 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e086      	b.n	8002688 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002580:	2b00      	cmp	r3, #0
 8002582:	d106      	bne.n	8002592 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2223      	movs	r2, #35	@ 0x23
 8002588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f007 f8c1 	bl	8009714 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002592:	4b3f      	ldr	r3, [pc, #252]	@ (8002690 <HAL_ETH_Init+0x128>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	4a3e      	ldr	r2, [pc, #248]	@ (8002690 <HAL_ETH_Init+0x128>)
 8002598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800259c:	6453      	str	r3, [r2, #68]	@ 0x44
 800259e:	4b3c      	ldr	r3, [pc, #240]	@ (8002690 <HAL_ETH_Init+0x128>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80025aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002694 <HAL_ETH_Init+0x12c>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4a39      	ldr	r2, [pc, #228]	@ (8002694 <HAL_ETH_Init+0x12c>)
 80025b0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80025b4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80025b6:	4b37      	ldr	r3, [pc, #220]	@ (8002694 <HAL_ETH_Init+0x12c>)
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	4935      	ldr	r1, [pc, #212]	@ (8002694 <HAL_ETH_Init+0x12c>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80025c4:	4b33      	ldr	r3, [pc, #204]	@ (8002694 <HAL_ETH_Init+0x12c>)
 80025c6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025e0:	f7ff fe2c 	bl	800223c <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025e6:	e011      	b.n	800260c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80025e8:	f7ff fe28 	bl	800223c <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80025f6:	d909      	bls.n	800260c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2204      	movs	r2, #4
 80025fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	22e0      	movs	r2, #224	@ 0xe0
 8002604:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e03d      	b.n	8002688 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1e4      	bne.n	80025e8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 ff5c 	bl	80034dc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f001 f807 	bl	8003638 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f001 f85d 	bl	80036ea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	461a      	mov	r2, r3
 8002636:	2100      	movs	r1, #0
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 ffc5 	bl	80035c8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800264c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4b0f      	ldr	r3, [pc, #60]	@ (8002698 <HAL_ETH_Init+0x130>)
 800265c:	430b      	orrs	r3, r1
 800265e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002672:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2210      	movs	r2, #16
 8002682:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40023800 	.word	0x40023800
 8002694:	40013800 	.word	0x40013800
 8002698:	00020060 	.word	0x00020060

0800269c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026aa:	2b10      	cmp	r3, #16
 80026ac:	d15f      	bne.n	800276e <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2223      	movs	r2, #35	@ 0x23
 80026b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2204      	movs	r2, #4
 80026c0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f9f6 	bl	8002ab4 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80026d0:	2001      	movs	r0, #1
 80026d2:	f7ff fdbf 	bl	8002254 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026f4:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	f043 0302 	orr.w	r3, r3, #2
 8002708:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800270c:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fd80 	bl	8003214 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0208 	orr.w	r2, r2, #8
 8002722:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800272c:	2001      	movs	r0, #1
 800272e:	f7ff fd91 	bl	8002254 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0204 	orr.w	r2, r2, #4
 8002748:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002752:	69d9      	ldr	r1, [r3, #28]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b07      	ldr	r3, [pc, #28]	@ (8002778 <HAL_ETH_Start_IT+0xdc>)
 800275a:	430b      	orrs	r3, r1
 800275c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002760:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2223      	movs	r2, #35	@ 0x23
 8002766:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	e000      	b.n	8002770 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
  }
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	0001a0c1 	.word	0x0001a0c1

0800277c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800278a:	2b23      	cmp	r3, #35	@ 0x23
 800278c:	d16e      	bne.n	800286c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2223      	movs	r2, #35	@ 0x23
 8002792:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800279e:	69d9      	ldr	r1, [r3, #28]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b34      	ldr	r3, [pc, #208]	@ (8002878 <HAL_ETH_Stop_IT+0xfc>)
 80027a6:	400b      	ands	r3, r1
 80027a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027ac:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80027c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027c4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	f023 0302 	bic.w	r3, r3, #2
 80027d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027dc:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0204 	bic.w	r2, r2, #4
 80027ec:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027f6:	2001      	movs	r0, #1
 80027f8:	f7ff fd2c 	bl	8002254 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fd05 	bl	8003214 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0208 	bic.w	r2, r2, #8
 8002818:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002822:	2001      	movs	r0, #1
 8002824:	f7ff fd16 	bl	8002254 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	e00e      	b.n	8002854 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	3212      	adds	r2, #18
 800283c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002840:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	3301      	adds	r3, #1
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2b03      	cmp	r3, #3
 8002858:	d9ed      	bls.n	8002836 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2210      	movs	r2, #16
 8002864:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	e000      	b.n	800286e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
  }
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	fffe5f3e 	.word	0xfffe5f3e

0800287c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002892:	f043 0201 	orr.w	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e045      	b.n	800292c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028a6:	2b23      	cmp	r3, #35	@ 0x23
 80028a8:	d13f      	bne.n	800292a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80028b2:	2201      	movs	r2, #1
 80028b4:	6839      	ldr	r1, [r7, #0]
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 ff86 	bl	80037c8 <ETH_Prepare_Tx_Descriptors>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d009      	beq.n	80028d6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c8:	f043 0202 	orr.w	r2, r3, #2
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e02a      	b.n	800292c <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80028d6:	f3bf 8f4f 	dsb	sy
}
 80028da:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d904      	bls.n	80028f8 <HAL_ETH_Transmit_IT+0x7c>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f2:	1f1a      	subs	r2, r3, #4
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00d      	beq.n	8002926 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002912:	461a      	mov	r2, r3
 8002914:	2304      	movs	r3, #4
 8002916:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002920:	461a      	mov	r2, r3
 8002922:	2300      	movs	r3, #0
 8002924:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	e000      	b.n	800292c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
  }
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002952:	f043 0201 	orr.w	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0a4      	b.n	8002aaa <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002966:	2b23      	cmp	r3, #35	@ 0x23
 8002968:	d001      	beq.n	800296e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e09d      	b.n	8002aaa <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002972:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	3212      	adds	r2, #18
 800297a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800297e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002984:	f1c3 0304 	rsb	r3, r3, #4
 8002988:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800298a:	e066      	b.n	8002a5a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d007      	beq.n	80029a8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	69da      	ldr	r2, [r3, #28]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	699a      	ldr	r2, [r3, #24]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d103      	bne.n	80029bc <HAL_ETH_ReadData+0x88>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d03c      	beq.n	8002a36 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	0c1b      	lsrs	r3, r3, #16
 80029da:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80029de:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80029f4:	2301      	movs	r3, #1
 80029f6:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002a10:	461a      	mov	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	f007 f849 	bl	8009aac <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	441a      	add	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2200      	movs	r2, #0
 8002a34:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	61fb      	str	r3, [r7, #28]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d902      	bls.n	8002a48 <HAL_ETH_ReadData+0x114>
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3b04      	subs	r3, #4
 8002a46:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	3212      	adds	r2, #18
 8002a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a52:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	3301      	adds	r3, #1
 8002a58:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	db06      	blt.n	8002a70 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d202      	bcs.n	8002a70 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002a6a:	7cfb      	ldrb	r3, [r7, #19]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d08d      	beq.n	800298c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	441a      	add	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f815 	bl	8002ab4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002a90:	7cfb      	ldrb	r3, [r7, #19]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d108      	bne.n	8002aa8 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e000      	b.n	8002aaa <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ac8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	3212      	adds	r2, #18
 8002ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ada:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002adc:	e042      	b.n	8002b64 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d112      	bne.n	8002b0c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002ae6:	f107 0308 	add.w	r3, r7, #8
 8002aea:	4618      	mov	r0, r3
 8002aec:	f006 ffae 	bl	8009a4c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d102      	bne.n	8002afc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	74fb      	strb	r3, [r7, #19]
 8002afa:	e007      	b.n	8002b0c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	461a      	mov	r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	461a      	mov	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002b0c:	7cfb      	ldrb	r3, [r7, #19]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d028      	beq.n	8002b64 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	4b26      	ldr	r3, [pc, #152]	@ (8002bb8 <ETH_UpdateDescriptor+0x104>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	6053      	str	r3, [r2, #4]
 8002b26:	e005      	b.n	8002b34 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	3301      	adds	r3, #1
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d902      	bls.n	8002b52 <ETH_UpdateDescriptor+0x9e>
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	3b04      	subs	r3, #4
 8002b50:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69fa      	ldr	r2, [r7, #28]
 8002b56:	3212      	adds	r2, #18
 8002b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b5c:	617b      	str	r3, [r7, #20]
      desccount--;
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <ETH_UpdateDescriptor+0xbc>
 8002b6a:	7cfb      	ldrb	r3, [r7, #19]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1b6      	bne.n	8002ade <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d01a      	beq.n	8002bb0 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b84:	f3bf 8f5f 	dmb	sy
}
 8002b88:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6919      	ldr	r1, [r3, #16]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	18ca      	adds	r2, r1, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ba2:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	3720      	adds	r7, #32
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	80004000 	.word	0x80004000

08002bbc <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3318      	adds	r3, #24
 8002bc8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bce:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002bda:	e047      	b.n	8002c6c <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	3304      	adds	r3, #4
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10a      	bne.n	8002c0c <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d902      	bls.n	8002c08 <HAL_ETH_ReleaseTxPacket+0x4c>
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	3b04      	subs	r3, #4
 8002c06:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002c0c:	7bbb      	ldrb	r3, [r7, #14]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d02c      	beq.n	8002c6c <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68d9      	ldr	r1, [r3, #12]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	440b      	add	r3, r1
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	db1f      	blt.n	8002c68 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f006 ff7b 	bl	8009b30 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	2200      	movs	r2, #0
 8002c46:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d902      	bls.n	8002c5a <HAL_ETH_ReleaseTxPacket+0x9e>
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	3b04      	subs	r3, #4
 8002c58:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002c66:	e001      	b.n	8002c6c <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <HAL_ETH_ReleaseTxPacket+0xbc>
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1b1      	bne.n	8002bdc <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c92:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002cac:	4b4b      	ldr	r3, [pc, #300]	@ (8002ddc <HAL_ETH_IRQHandler+0x158>)
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00e      	beq.n	8002cda <HAL_ETH_IRQHandler+0x56>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cce:	461a      	mov	r2, r3
 8002cd0:	4b43      	ldr	r3, [pc, #268]	@ (8002de0 <HAL_ETH_IRQHandler+0x15c>)
 8002cd2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f006 fa31 	bl	800913c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00f      	beq.n	8002d04 <HAL_ETH_IRQHandler+0x80>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002cfc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f006 fa2c 	bl	800915c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d042      	beq.n	8002d94 <HAL_ETH_IRQHandler+0x110>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d03d      	beq.n	8002d94 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1e:	f043 0208 	orr.w	r2, r3, #8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d01a      	beq.n	8002d68 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d3a:	695a      	ldr	r2, [r3, #20]
 8002d3c:	4b29      	ldr	r3, [pc, #164]	@ (8002de4 <HAL_ETH_IRQHandler+0x160>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002d58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d5c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	22e0      	movs	r2, #224	@ 0xe0
 8002d62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002d66:	e012      	b.n	8002d8e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002d76:	4013      	ands	r3, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d86:	461a      	mov	r2, r3
 8002d88:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002d8c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f006 f9f4 	bl	800917c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00e      	beq.n	8002dbc <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f81a 	bl	8002de8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d006      	beq.n	8002dd4 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002dc6:	4b05      	ldr	r3, [pc, #20]	@ (8002ddc <HAL_ETH_IRQHandler+0x158>)
 8002dc8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002dcc:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f814 	bl	8002dfc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40013c00 	.word	0x40013c00
 8002de0:	00010040 	.word	0x00010040
 8002de4:	007e2000 	.word	0x007e2000

08002de8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f003 031c 	and.w	r3, r3, #28
 8002e2c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	02db      	lsls	r3, r3, #11
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	019b      	lsls	r3, r3, #6
 8002e3e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f023 0302 	bic.w	r3, r3, #2
 8002e4e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002e60:	f7ff f9ec 	bl	800223c <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e66:	e00d      	b.n	8002e84 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002e68:	f7ff f9e8 	bl	800223c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e76:	d301      	bcc.n	8002e7c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e010      	b.n	8002e9e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1ec      	bne.n	8002e68 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b086      	sub	sp, #24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f003 031c 	and.w	r3, r3, #28
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	02db      	lsls	r3, r3, #11
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	019b      	lsls	r3, r3, #6
 8002ed4:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f00:	f7ff f99c 	bl	800223c <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f06:	e00d      	b.n	8002f24 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002f08:	f7ff f998 	bl	800223c <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f16:	d301      	bcc.n	8002f1c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e009      	b.n	8002f30 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1ec      	bne.n	8002f08 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0e6      	b.n	800311a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	bf14      	ite	ne
 8002f5a:	2301      	movne	r3, #1
 8002f5c:	2300      	moveq	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf14      	ite	ne
 8002fa0:	2301      	movne	r3, #1
 8002fa2:	2300      	moveq	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bf0c      	ite	eq
 8002fba:	2301      	moveq	r3, #1
 8002fbc:	2300      	movne	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bf14      	ite	ne
 8002fd4:	2301      	movne	r3, #1
 8002fd6:	2300      	moveq	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003006:	2b00      	cmp	r3, #0
 8003008:	bf0c      	ite	eq
 800300a:	2301      	moveq	r3, #1
 800300c:	2300      	movne	r3, #0
 800300e:	b2db      	uxtb	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800303a:	2b00      	cmp	r3, #0
 800303c:	bf14      	ite	ne
 800303e:	2301      	movne	r3, #1
 8003040:	2300      	moveq	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	461a      	mov	r2, r3
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003062:	2b00      	cmp	r3, #0
 8003064:	bf14      	ite	ne
 8003066:	2301      	movne	r3, #1
 8003068:	2300      	moveq	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	461a      	mov	r2, r3
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf14      	ite	ne
 8003080:	2301      	movne	r3, #1
 8003082:	2300      	moveq	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	bf14      	ite	ne
 800309a:	2301      	movne	r3, #1
 800309c:	2300      	moveq	r3, #0
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	bf0c      	ite	eq
 80030b6:	2301      	moveq	r3, #1
 80030b8:	2300      	movne	r3, #0
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	b29a      	uxth	r2, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	bf14      	ite	ne
 80030ee:	2301      	movne	r3, #1
 80030f0:	2300      	moveq	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	461a      	mov	r2, r3
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003106:	2b00      	cmp	r3, #0
 8003108:	bf14      	ite	ne
 800310a:	2301      	movne	r3, #1
 800310c:	2300      	moveq	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e00b      	b.n	8003152 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003140:	2b10      	cmp	r3, #16
 8003142:	d105      	bne.n	8003150 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003144:	6839      	ldr	r1, [r7, #0]
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f88a 	bl	8003260 <ETH_SetMACConfig>

    return HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	e000      	b.n	8003152 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
  }
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 031c 	bic.w	r3, r3, #28
 8003172:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003174:	f003 fbea 	bl	800694c <HAL_RCC_GetHCLKFreq>
 8003178:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	4a14      	ldr	r2, [pc, #80]	@ (80031d0 <HAL_ETH_SetMDIOClockRange+0x74>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d804      	bhi.n	800318c <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f043 0308 	orr.w	r3, r3, #8
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	e019      	b.n	80031c0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4a11      	ldr	r2, [pc, #68]	@ (80031d4 <HAL_ETH_SetMDIOClockRange+0x78>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d204      	bcs.n	800319e <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f043 030c 	orr.w	r3, r3, #12
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	e010      	b.n	80031c0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4a0d      	ldr	r2, [pc, #52]	@ (80031d8 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d90c      	bls.n	80031c0 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4a0c      	ldr	r2, [pc, #48]	@ (80031dc <HAL_ETH_SetMDIOClockRange+0x80>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d804      	bhi.n	80031b8 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f043 0304 	orr.w	r3, r3, #4
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	e003      	b.n	80031c0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f043 0310 	orr.w	r3, r3, #16
 80031be:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	611a      	str	r2, [r3, #16]
}
 80031c8:	bf00      	nop
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	02160ebf 	.word	0x02160ebf
 80031d4:	03938700 	.word	0x03938700
 80031d8:	05f5e0ff 	.word	0x05f5e0ff
 80031dc:	08f0d17f 	.word	0x08f0d17f

080031e0 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003232:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003236:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003244:	2001      	movs	r0, #1
 8003246:	f7ff f805 	bl	8002254 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003254:	6193      	str	r3, [r2, #24]
}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4b53      	ldr	r3, [pc, #332]	@ (80033c4 <ETH_SetMACConfig+0x164>)
 8003276:	4013      	ands	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	7b9b      	ldrb	r3, [r3, #14]
 800327e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	7c12      	ldrb	r2, [r2, #16]
 8003284:	2a00      	cmp	r2, #0
 8003286:	d102      	bne.n	800328e <ETH_SetMACConfig+0x2e>
 8003288:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800328c:	e000      	b.n	8003290 <ETH_SetMACConfig+0x30>
 800328e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003290:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	7c52      	ldrb	r2, [r2, #17]
 8003296:	2a00      	cmp	r2, #0
 8003298:	d102      	bne.n	80032a0 <ETH_SetMACConfig+0x40>
 800329a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800329e:	e000      	b.n	80032a2 <ETH_SetMACConfig+0x42>
 80032a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80032a2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80032a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	7fdb      	ldrb	r3, [r3, #31]
 80032ae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80032b0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80032b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	7f92      	ldrb	r2, [r2, #30]
 80032bc:	2a00      	cmp	r2, #0
 80032be:	d102      	bne.n	80032c6 <ETH_SetMACConfig+0x66>
 80032c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032c4:	e000      	b.n	80032c8 <ETH_SetMACConfig+0x68>
 80032c6:	2200      	movs	r2, #0
                        macconf->Speed |
 80032c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	7f1b      	ldrb	r3, [r3, #28]
 80032ce:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80032d0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80032d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	791b      	ldrb	r3, [r3, #4]
 80032dc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80032de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80032e6:	2a00      	cmp	r2, #0
 80032e8:	d102      	bne.n	80032f0 <ETH_SetMACConfig+0x90>
 80032ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032ee:	e000      	b.n	80032f2 <ETH_SetMACConfig+0x92>
 80032f0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80032f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	7bdb      	ldrb	r3, [r3, #15]
 80032f8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80032fa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003300:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003308:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800330a:	4313      	orrs	r3, r2
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003322:	2001      	movs	r0, #1
 8003324:	f7fe ff96 	bl	8002254 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800333e:	4013      	ands	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003346:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800334e:	2a00      	cmp	r2, #0
 8003350:	d101      	bne.n	8003356 <ETH_SetMACConfig+0xf6>
 8003352:	2280      	movs	r2, #128	@ 0x80
 8003354:	e000      	b.n	8003358 <ETH_SetMACConfig+0xf8>
 8003356:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003358:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800335e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003366:	2a01      	cmp	r2, #1
 8003368:	d101      	bne.n	800336e <ETH_SetMACConfig+0x10e>
 800336a:	2208      	movs	r2, #8
 800336c:	e000      	b.n	8003370 <ETH_SetMACConfig+0x110>
 800336e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003370:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003378:	2a01      	cmp	r2, #1
 800337a:	d101      	bne.n	8003380 <ETH_SetMACConfig+0x120>
 800337c:	2204      	movs	r2, #4
 800337e:	e000      	b.n	8003382 <ETH_SetMACConfig+0x122>
 8003380:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003382:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800338a:	2a01      	cmp	r2, #1
 800338c:	d101      	bne.n	8003392 <ETH_SetMACConfig+0x132>
 800338e:	2202      	movs	r2, #2
 8003390:	e000      	b.n	8003394 <ETH_SetMACConfig+0x134>
 8003392:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003394:	4313      	orrs	r3, r2
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033ac:	2001      	movs	r0, #1
 80033ae:	f7fe ff51 	bl	8002254 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	619a      	str	r2, [r3, #24]
}
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	fd20810f 	.word	0xfd20810f

080033c8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4b3d      	ldr	r3, [pc, #244]	@ (80034d8 <ETH_SetDMAConfig+0x110>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	7b1b      	ldrb	r3, [r3, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <ETH_SetDMAConfig+0x2c>
 80033ee:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80033f2:	e000      	b.n	80033f6 <ETH_SetDMAConfig+0x2e>
 80033f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	7b5b      	ldrb	r3, [r3, #13]
 80033fa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80033fc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	7f52      	ldrb	r2, [r2, #29]
 8003402:	2a00      	cmp	r2, #0
 8003404:	d102      	bne.n	800340c <ETH_SetDMAConfig+0x44>
 8003406:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800340a:	e000      	b.n	800340e <ETH_SetDMAConfig+0x46>
 800340c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800340e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	7b9b      	ldrb	r3, [r3, #14]
 8003414:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003416:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800341c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	7f1b      	ldrb	r3, [r3, #28]
 8003422:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003424:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	7f9b      	ldrb	r3, [r3, #30]
 800342a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800342c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003432:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800343a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800343c:	4313      	orrs	r3, r2
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800344c:	461a      	mov	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800345e:	2001      	movs	r0, #1
 8003460:	f7fe fef8 	bl	8002254 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800346c:	461a      	mov	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	791b      	ldrb	r3, [r3, #4]
 8003476:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800347c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003482:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003488:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003490:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003492:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003498:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800349a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80034a0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034ae:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034bc:	2001      	movs	r0, #1
 80034be:	f7fe fec9 	bl	8002254 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034ca:	461a      	mov	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6013      	str	r3, [r2, #0]
}
 80034d0:	bf00      	nop
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	f8de3f23 	.word	0xf8de3f23

080034dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b0a6      	sub	sp, #152	@ 0x98
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80034e4:	2301      	movs	r3, #1
 80034e6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80034f0:	2300      	movs	r3, #0
 80034f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80034f4:	2300      	movs	r3, #0
 80034f6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80034fa:	2301      	movs	r3, #1
 80034fc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003500:	2300      	movs	r3, #0
 8003502:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003506:	2301      	movs	r3, #1
 8003508:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800350c:	2301      	movs	r3, #1
 800350e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003512:	2300      	movs	r3, #0
 8003514:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003518:	2300      	movs	r3, #0
 800351a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800351e:	2300      	movs	r3, #0
 8003520:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003522:	2300      	movs	r3, #0
 8003524:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003528:	2300      	movs	r3, #0
 800352a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800352c:	2300      	movs	r3, #0
 800352e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003532:	2300      	movs	r3, #0
 8003534:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003538:	2300      	movs	r3, #0
 800353a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800353e:	2300      	movs	r3, #0
 8003540:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003544:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003548:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800354a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800354e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003550:	2300      	movs	r3, #0
 8003552:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003556:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800355a:	4619      	mov	r1, r3
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff fe7f 	bl	8003260 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003562:	2301      	movs	r3, #1
 8003564:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003566:	2301      	movs	r3, #1
 8003568:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003570:	2301      	movs	r3, #1
 8003572:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003574:	2300      	movs	r3, #0
 8003576:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003578:	2300      	movs	r3, #0
 800357a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800357e:	2300      	movs	r3, #0
 8003580:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003584:	2300      	movs	r3, #0
 8003586:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003588:	2301      	movs	r3, #1
 800358a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800358e:	2301      	movs	r3, #1
 8003590:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003592:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003596:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003598:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800359c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800359e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035a2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80035b2:	f107 0308 	add.w	r3, r7, #8
 80035b6:	4619      	mov	r1, r3
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff ff05 	bl	80033c8 <ETH_SetDMAConfig>
}
 80035be:	bf00      	nop
 80035c0:	3798      	adds	r7, #152	@ 0x98
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3305      	adds	r3, #5
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	021b      	lsls	r3, r3, #8
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	3204      	adds	r2, #4
 80035e0:	7812      	ldrb	r2, [r2, #0]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	4b11      	ldr	r3, [pc, #68]	@ (8003630 <ETH_MACAddressConfig+0x68>)
 80035ea:	4413      	add	r3, r2
 80035ec:	461a      	mov	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3303      	adds	r3, #3
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	061a      	lsls	r2, r3, #24
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3302      	adds	r3, #2
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3301      	adds	r3, #1
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	4313      	orrs	r3, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	7812      	ldrb	r2, [r2, #0]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <ETH_MACAddressConfig+0x6c>)
 800361a:	4413      	add	r3, r2
 800361c:	461a      	mov	r2, r3
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	6013      	str	r3, [r2, #0]
}
 8003622:	bf00      	nop
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40028040 	.word	0x40028040
 8003634:	40028044 	.word	0x40028044

08003638 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	e03e      	b.n	80036c4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68d9      	ldr	r1, [r3, #12]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	440b      	add	r3, r1
 8003656:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2200      	movs	r2, #0
 8003662:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2200      	movs	r2, #0
 8003668:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2200      	movs	r2, #0
 800366e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	3206      	adds	r2, #6
 8003678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d80c      	bhi.n	80036a8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68d9      	ldr	r1, [r3, #12]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	440b      	add	r3, r1
 80036a0:	461a      	mov	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	60da      	str	r2, [r3, #12]
 80036a6:	e004      	b.n	80036b2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	461a      	mov	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	3301      	adds	r3, #1
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d9bd      	bls.n	8003646 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036dc:	611a      	str	r2, [r3, #16]
}
 80036de:	bf00      	nop
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b085      	sub	sp, #20
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	e048      	b.n	800378a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6919      	ldr	r1, [r3, #16]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	440b      	add	r3, r1
 8003708:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2200      	movs	r2, #0
 8003714:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2200      	movs	r2, #0
 800371a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2200      	movs	r2, #0
 8003720:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2200      	movs	r2, #0
 8003726:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2200      	movs	r2, #0
 800372c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003734:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800374e:	68b9      	ldr	r1, [r7, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	3212      	adds	r2, #18
 8003756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d80c      	bhi.n	800377a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6919      	ldr	r1, [r3, #16]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	440b      	add	r3, r1
 8003772:	461a      	mov	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	60da      	str	r2, [r3, #12]
 8003778:	e004      	b.n	8003784 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	461a      	mov	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3301      	adds	r3, #1
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2b03      	cmp	r3, #3
 800378e:	d9b3      	bls.n	80036f8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037ba:	60da      	str	r2, [r3, #12]
}
 80037bc:	bf00      	nop
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b091      	sub	sp, #68	@ 0x44
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3318      	adds	r3, #24
 80037d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80037e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f2:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80037fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003806:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800380a:	d007      	beq.n	800381c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800380c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800380e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003810:	3304      	adds	r3, #4
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800381c:	2302      	movs	r3, #2
 800381e:	e111      	b.n	8003a44 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003822:	3301      	adds	r3, #1
 8003824:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	4b86      	ldr	r3, [pc, #536]	@ (8003a50 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003836:	4013      	ands	r3, r2
 8003838:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800383a:	6852      	ldr	r2, [r2, #4]
 800383c:	431a      	orrs	r2, r3
 800383e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003840:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800384e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	431a      	orrs	r2, r3
 800385c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800386c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	431a      	orrs	r2, r3
 800387a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	d005      	beq.n	8003896 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800388a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003894:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800389e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a0:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80038a2:	e082      	b.n	80039aa <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80038a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80038ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ae:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d006      	beq.n	80038c4 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80038b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80038be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	e005      	b.n	80038d0 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80038c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80038cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ce:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80038d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038d2:	3301      	adds	r3, #1
 80038d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d902      	bls.n	80038e2 <ETH_Prepare_Tx_Descriptors+0x11a>
 80038dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038de:	3b04      	subs	r3, #4
 80038e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ea:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80038ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038f8:	d007      	beq.n	800390a <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80038fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038fe:	3304      	adds	r3, #4
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d029      	beq.n	800395e <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800390e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003910:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003916:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003918:	2300      	movs	r3, #0
 800391a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800391c:	e019      	b.n	8003952 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800391e:	f3bf 8f5f 	dmb	sy
}
 8003922:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800392c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003932:	3301      	adds	r3, #1
 8003934:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003938:	2b03      	cmp	r3, #3
 800393a:	d902      	bls.n	8003942 <ETH_Prepare_Tx_Descriptors+0x17a>
 800393c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800393e:	3b04      	subs	r3, #4
 8003940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003944:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800394a:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 800394c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394e:	3301      	adds	r3, #1
 8003950:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003952:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003956:	429a      	cmp	r2, r3
 8003958:	d3e1      	bcc.n	800391e <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 800395a:	2302      	movs	r3, #2
 800395c:	e072      	b.n	8003a44 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800395e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003968:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800396a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800396c:	3301      	adds	r3, #1
 800396e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397e:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	4b32      	ldr	r3, [pc, #200]	@ (8003a50 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003986:	4013      	ands	r3, r2
 8003988:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800398a:	6852      	ldr	r2, [r2, #4]
 800398c:	431a      	orrs	r2, r3
 800398e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003990:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003994:	3301      	adds	r3, #1
 8003996:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003998:	f3bf 8f5f 	dmb	sy
}
 800399c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800399e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80039a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a8:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80039aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f47f af78 	bne.w	80038a4 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d006      	beq.n	80039c8 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80039ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80039c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	e005      	b.n	80039d4 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80039c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80039d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d2:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80039d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80039dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039de:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	6a3a      	ldr	r2, [r7, #32]
 80039e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80039ea:	f3bf 8f5f 	dmb	sy
}
 80039ee:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80039f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80039f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039fa:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80039fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a04:	3304      	adds	r3, #4
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a10:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a12:	f3ef 8310 	mrs	r3, PRIMASK
 8003a16:	613b      	str	r3, [r7, #16]
  return(result);
 8003a18:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f383 8810 	msr	PRIMASK, r3
}
 8003a26:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a2e:	4413      	add	r3, r2
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	f383 8810 	msr	PRIMASK, r3
}
 8003a40:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3744      	adds	r7, #68	@ 0x44
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	ffffe000 	.word	0xffffe000

08003a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b089      	sub	sp, #36	@ 0x24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	e175      	b.n	8003d60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003a74:	2201      	movs	r2, #1
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4013      	ands	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	f040 8164 	bne.w	8003d5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d005      	beq.n	8003aaa <HAL_GPIO_Init+0x56>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d130      	bne.n	8003b0c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 0201 	and.w	r2, r3, #1
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d017      	beq.n	8003b48 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	2203      	movs	r2, #3
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d123      	bne.n	8003b9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	08da      	lsrs	r2, r3, #3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3208      	adds	r2, #8
 8003b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	220f      	movs	r2, #15
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	08da      	lsrs	r2, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3208      	adds	r2, #8
 8003b96:	69b9      	ldr	r1, [r7, #24]
 8003b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0203 	and.w	r2, r3, #3
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80be 	beq.w	8003d5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bde:	4b66      	ldr	r3, [pc, #408]	@ (8003d78 <HAL_GPIO_Init+0x324>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be2:	4a65      	ldr	r2, [pc, #404]	@ (8003d78 <HAL_GPIO_Init+0x324>)
 8003be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bea:	4b63      	ldr	r3, [pc, #396]	@ (8003d78 <HAL_GPIO_Init+0x324>)
 8003bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003bf6:	4a61      	ldr	r2, [pc, #388]	@ (8003d7c <HAL_GPIO_Init+0x328>)
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	089b      	lsrs	r3, r3, #2
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	220f      	movs	r2, #15
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43db      	mvns	r3, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4013      	ands	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a58      	ldr	r2, [pc, #352]	@ (8003d80 <HAL_GPIO_Init+0x32c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d037      	beq.n	8003c92 <HAL_GPIO_Init+0x23e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a57      	ldr	r2, [pc, #348]	@ (8003d84 <HAL_GPIO_Init+0x330>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d031      	beq.n	8003c8e <HAL_GPIO_Init+0x23a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a56      	ldr	r2, [pc, #344]	@ (8003d88 <HAL_GPIO_Init+0x334>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d02b      	beq.n	8003c8a <HAL_GPIO_Init+0x236>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a55      	ldr	r2, [pc, #340]	@ (8003d8c <HAL_GPIO_Init+0x338>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d025      	beq.n	8003c86 <HAL_GPIO_Init+0x232>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a54      	ldr	r2, [pc, #336]	@ (8003d90 <HAL_GPIO_Init+0x33c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d01f      	beq.n	8003c82 <HAL_GPIO_Init+0x22e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a53      	ldr	r2, [pc, #332]	@ (8003d94 <HAL_GPIO_Init+0x340>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d019      	beq.n	8003c7e <HAL_GPIO_Init+0x22a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a52      	ldr	r2, [pc, #328]	@ (8003d98 <HAL_GPIO_Init+0x344>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <HAL_GPIO_Init+0x226>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a51      	ldr	r2, [pc, #324]	@ (8003d9c <HAL_GPIO_Init+0x348>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00d      	beq.n	8003c76 <HAL_GPIO_Init+0x222>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a50      	ldr	r2, [pc, #320]	@ (8003da0 <HAL_GPIO_Init+0x34c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d007      	beq.n	8003c72 <HAL_GPIO_Init+0x21e>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a4f      	ldr	r2, [pc, #316]	@ (8003da4 <HAL_GPIO_Init+0x350>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d101      	bne.n	8003c6e <HAL_GPIO_Init+0x21a>
 8003c6a:	2309      	movs	r3, #9
 8003c6c:	e012      	b.n	8003c94 <HAL_GPIO_Init+0x240>
 8003c6e:	230a      	movs	r3, #10
 8003c70:	e010      	b.n	8003c94 <HAL_GPIO_Init+0x240>
 8003c72:	2308      	movs	r3, #8
 8003c74:	e00e      	b.n	8003c94 <HAL_GPIO_Init+0x240>
 8003c76:	2307      	movs	r3, #7
 8003c78:	e00c      	b.n	8003c94 <HAL_GPIO_Init+0x240>
 8003c7a:	2306      	movs	r3, #6
 8003c7c:	e00a      	b.n	8003c94 <HAL_GPIO_Init+0x240>
 8003c7e:	2305      	movs	r3, #5
 8003c80:	e008      	b.n	8003c94 <HAL_GPIO_Init+0x240>
 8003c82:	2304      	movs	r3, #4
 8003c84:	e006      	b.n	8003c94 <HAL_GPIO_Init+0x240>
 8003c86:	2303      	movs	r3, #3
 8003c88:	e004      	b.n	8003c94 <HAL_GPIO_Init+0x240>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e002      	b.n	8003c94 <HAL_GPIO_Init+0x240>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <HAL_GPIO_Init+0x240>
 8003c92:	2300      	movs	r3, #0
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	f002 0203 	and.w	r2, r2, #3
 8003c9a:	0092      	lsls	r2, r2, #2
 8003c9c:	4093      	lsls	r3, r2
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ca4:	4935      	ldr	r1, [pc, #212]	@ (8003d7c <HAL_GPIO_Init+0x328>)
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	089b      	lsrs	r3, r3, #2
 8003caa:	3302      	adds	r3, #2
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cb2:	4b3d      	ldr	r3, [pc, #244]	@ (8003da8 <HAL_GPIO_Init+0x354>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cd6:	4a34      	ldr	r2, [pc, #208]	@ (8003da8 <HAL_GPIO_Init+0x354>)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cdc:	4b32      	ldr	r3, [pc, #200]	@ (8003da8 <HAL_GPIO_Init+0x354>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d00:	4a29      	ldr	r2, [pc, #164]	@ (8003da8 <HAL_GPIO_Init+0x354>)
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d06:	4b28      	ldr	r3, [pc, #160]	@ (8003da8 <HAL_GPIO_Init+0x354>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4013      	ands	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003da8 <HAL_GPIO_Init+0x354>)
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d30:	4b1d      	ldr	r3, [pc, #116]	@ (8003da8 <HAL_GPIO_Init+0x354>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d54:	4a14      	ldr	r2, [pc, #80]	@ (8003da8 <HAL_GPIO_Init+0x354>)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	61fb      	str	r3, [r7, #28]
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b0f      	cmp	r3, #15
 8003d64:	f67f ae86 	bls.w	8003a74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	3724      	adds	r7, #36	@ 0x24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40013800 	.word	0x40013800
 8003d80:	40020000 	.word	0x40020000
 8003d84:	40020400 	.word	0x40020400
 8003d88:	40020800 	.word	0x40020800
 8003d8c:	40020c00 	.word	0x40020c00
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40021400 	.word	0x40021400
 8003d98:	40021800 	.word	0x40021800
 8003d9c:	40021c00 	.word	0x40021c00
 8003da0:	40022000 	.word	0x40022000
 8003da4:	40022400 	.word	0x40022400
 8003da8:	40013c00 	.word	0x40013c00

08003dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	807b      	strh	r3, [r7, #2]
 8003db8:	4613      	mov	r3, r2
 8003dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dbc:	787b      	ldrb	r3, [r7, #1]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dc2:	887a      	ldrh	r2, [r7, #2]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003dc8:	e003      	b.n	8003dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003dca:	887b      	ldrh	r3, [r7, #2]
 8003dcc:	041a      	lsls	r2, r3, #16
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	619a      	str	r2, [r3, #24]
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b085      	sub	sp, #20
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	460b      	mov	r3, r1
 8003de8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003df0:	887a      	ldrh	r2, [r7, #2]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4013      	ands	r3, r2
 8003df6:	041a      	lsls	r2, r3, #16
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	43d9      	mvns	r1, r3
 8003dfc:	887b      	ldrh	r3, [r7, #2]
 8003dfe:	400b      	ands	r3, r1
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	619a      	str	r2, [r3, #24]
}
 8003e06:	bf00      	nop
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e08b      	b.n	8003f3e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d106      	bne.n	8003e40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fd fec0 	bl	8001bc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2224      	movs	r2, #36	@ 0x24
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0201 	bic.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d107      	bne.n	8003e8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	e006      	b.n	8003e9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003e9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d108      	bne.n	8003eb6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eb2:	605a      	str	r2, [r3, #4]
 8003eb4:	e007      	b.n	8003ec6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ec4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6859      	ldr	r1, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f48 <HAL_I2C_Init+0x134>)
 8003ed2:	430b      	orrs	r3, r1
 8003ed4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ee4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69d9      	ldr	r1, [r3, #28]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1a      	ldr	r2, [r3, #32]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0201 	orr.w	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	02008000 	.word	0x02008000

08003f4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	4608      	mov	r0, r1
 8003f56:	4611      	mov	r1, r2
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	817b      	strh	r3, [r7, #10]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	813b      	strh	r3, [r7, #8]
 8003f62:	4613      	mov	r3, r2
 8003f64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	f040 80f9 	bne.w	8004166 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <HAL_I2C_Mem_Write+0x34>
 8003f7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d105      	bne.n	8003f8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f86:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0ed      	b.n	8004168 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_I2C_Mem_Write+0x4e>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e0e6      	b.n	8004168 <HAL_I2C_Mem_Write+0x21c>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fa2:	f7fe f94b 	bl	800223c <HAL_GetTick>
 8003fa6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	2319      	movs	r3, #25
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 fac3 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0d1      	b.n	8004168 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2221      	movs	r2, #33	@ 0x21
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2240      	movs	r2, #64	@ 0x40
 8003fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a3a      	ldr	r2, [r7, #32]
 8003fde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fec:	88f8      	ldrh	r0, [r7, #6]
 8003fee:	893a      	ldrh	r2, [r7, #8]
 8003ff0:	8979      	ldrh	r1, [r7, #10]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f9d3 	bl	80043a8 <I2C_RequestMemoryWrite>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0a9      	b.n	8004168 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	2bff      	cmp	r3, #255	@ 0xff
 800401c:	d90e      	bls.n	800403c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	22ff      	movs	r2, #255	@ 0xff
 8004022:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004028:	b2da      	uxtb	r2, r3
 800402a:	8979      	ldrh	r1, [r7, #10]
 800402c:	2300      	movs	r3, #0
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fc47 	bl	80048c8 <I2C_TransferConfig>
 800403a:	e00f      	b.n	800405c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800404a:	b2da      	uxtb	r2, r3
 800404c:	8979      	ldrh	r1, [r7, #10]
 800404e:	2300      	movs	r3, #0
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 fc36 	bl	80048c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 fac6 	bl	80045f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e07b      	b.n	8004168 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	781a      	ldrb	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d034      	beq.n	8004114 <HAL_I2C_Mem_Write+0x1c8>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d130      	bne.n	8004114 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b8:	2200      	movs	r2, #0
 80040ba:	2180      	movs	r1, #128	@ 0x80
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fa3f 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e04d      	b.n	8004168 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2bff      	cmp	r3, #255	@ 0xff
 80040d4:	d90e      	bls.n	80040f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	22ff      	movs	r2, #255	@ 0xff
 80040da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	8979      	ldrh	r1, [r7, #10]
 80040e4:	2300      	movs	r3, #0
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 fbeb 	bl	80048c8 <I2C_TransferConfig>
 80040f2:	e00f      	b.n	8004114 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004102:	b2da      	uxtb	r2, r3
 8004104:	8979      	ldrh	r1, [r7, #10]
 8004106:	2300      	movs	r3, #0
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 fbda 	bl	80048c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d19e      	bne.n	800405c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 faac 	bl	8004680 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e01a      	b.n	8004168 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2220      	movs	r2, #32
 8004138:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6859      	ldr	r1, [r3, #4]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4b0a      	ldr	r3, [pc, #40]	@ (8004170 <HAL_I2C_Mem_Write+0x224>)
 8004146:	400b      	ands	r3, r1
 8004148:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2220      	movs	r2, #32
 800414e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	e000      	b.n	8004168 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004166:	2302      	movs	r3, #2
  }
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	fe00e800 	.word	0xfe00e800

08004174 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af02      	add	r7, sp, #8
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	4608      	mov	r0, r1
 800417e:	4611      	mov	r1, r2
 8004180:	461a      	mov	r2, r3
 8004182:	4603      	mov	r3, r0
 8004184:	817b      	strh	r3, [r7, #10]
 8004186:	460b      	mov	r3, r1
 8004188:	813b      	strh	r3, [r7, #8]
 800418a:	4613      	mov	r3, r2
 800418c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b20      	cmp	r3, #32
 8004198:	f040 80fd 	bne.w	8004396 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <HAL_I2C_Mem_Read+0x34>
 80041a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d105      	bne.n	80041b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0f1      	b.n	8004398 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_I2C_Mem_Read+0x4e>
 80041be:	2302      	movs	r3, #2
 80041c0:	e0ea      	b.n	8004398 <HAL_I2C_Mem_Read+0x224>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041ca:	f7fe f837 	bl	800223c <HAL_GetTick>
 80041ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	2319      	movs	r3, #25
 80041d6:	2201      	movs	r2, #1
 80041d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f9af 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0d5      	b.n	8004398 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2222      	movs	r2, #34	@ 0x22
 80041f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2240      	movs	r2, #64	@ 0x40
 80041f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a3a      	ldr	r2, [r7, #32]
 8004206:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800420c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004214:	88f8      	ldrh	r0, [r7, #6]
 8004216:	893a      	ldrh	r2, [r7, #8]
 8004218:	8979      	ldrh	r1, [r7, #10]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	9301      	str	r3, [sp, #4]
 800421e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	4603      	mov	r3, r0
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f913 	bl	8004450 <I2C_RequestMemoryRead>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e0ad      	b.n	8004398 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	2bff      	cmp	r3, #255	@ 0xff
 8004244:	d90e      	bls.n	8004264 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004250:	b2da      	uxtb	r2, r3
 8004252:	8979      	ldrh	r1, [r7, #10]
 8004254:	4b52      	ldr	r3, [pc, #328]	@ (80043a0 <HAL_I2C_Mem_Read+0x22c>)
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 fb33 	bl	80048c8 <I2C_TransferConfig>
 8004262:	e00f      	b.n	8004284 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004272:	b2da      	uxtb	r2, r3
 8004274:	8979      	ldrh	r1, [r7, #10]
 8004276:	4b4a      	ldr	r3, [pc, #296]	@ (80043a0 <HAL_I2C_Mem_Read+0x22c>)
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 fb22 	bl	80048c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428a:	2200      	movs	r2, #0
 800428c:	2104      	movs	r1, #4
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f956 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e07c      	b.n	8004398 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d034      	beq.n	8004344 <HAL_I2C_Mem_Read+0x1d0>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d130      	bne.n	8004344 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e8:	2200      	movs	r2, #0
 80042ea:	2180      	movs	r1, #128	@ 0x80
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f927 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e04d      	b.n	8004398 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	2bff      	cmp	r3, #255	@ 0xff
 8004304:	d90e      	bls.n	8004324 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004310:	b2da      	uxtb	r2, r3
 8004312:	8979      	ldrh	r1, [r7, #10]
 8004314:	2300      	movs	r3, #0
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 fad3 	bl	80048c8 <I2C_TransferConfig>
 8004322:	e00f      	b.n	8004344 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004332:	b2da      	uxtb	r2, r3
 8004334:	8979      	ldrh	r1, [r7, #10]
 8004336:	2300      	movs	r3, #0
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 fac2 	bl	80048c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d19a      	bne.n	8004284 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f994 	bl	8004680 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e01a      	b.n	8004398 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2220      	movs	r2, #32
 8004368:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6859      	ldr	r1, [r3, #4]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4b0b      	ldr	r3, [pc, #44]	@ (80043a4 <HAL_I2C_Mem_Read+0x230>)
 8004376:	400b      	ands	r3, r1
 8004378:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	e000      	b.n	8004398 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004396:	2302      	movs	r3, #2
  }
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	80002400 	.word	0x80002400
 80043a4:	fe00e800 	.word	0xfe00e800

080043a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	4608      	mov	r0, r1
 80043b2:	4611      	mov	r1, r2
 80043b4:	461a      	mov	r2, r3
 80043b6:	4603      	mov	r3, r0
 80043b8:	817b      	strh	r3, [r7, #10]
 80043ba:	460b      	mov	r3, r1
 80043bc:	813b      	strh	r3, [r7, #8]
 80043be:	4613      	mov	r3, r2
 80043c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	8979      	ldrh	r1, [r7, #10]
 80043c8:	4b20      	ldr	r3, [pc, #128]	@ (800444c <I2C_RequestMemoryWrite+0xa4>)
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 fa79 	bl	80048c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	69b9      	ldr	r1, [r7, #24]
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 f909 	bl	80045f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e02c      	b.n	8004444 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d105      	bne.n	80043fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043f0:	893b      	ldrh	r3, [r7, #8]
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80043fa:	e015      	b.n	8004428 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043fc:	893b      	ldrh	r3, [r7, #8]
 80043fe:	0a1b      	lsrs	r3, r3, #8
 8004400:	b29b      	uxth	r3, r3
 8004402:	b2da      	uxtb	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	69b9      	ldr	r1, [r7, #24]
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f8ef 	bl	80045f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e012      	b.n	8004444 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800441e:	893b      	ldrh	r3, [r7, #8]
 8004420:	b2da      	uxtb	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	2200      	movs	r2, #0
 8004430:	2180      	movs	r1, #128	@ 0x80
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f884 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	80002000 	.word	0x80002000

08004450 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af02      	add	r7, sp, #8
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	4608      	mov	r0, r1
 800445a:	4611      	mov	r1, r2
 800445c:	461a      	mov	r2, r3
 800445e:	4603      	mov	r3, r0
 8004460:	817b      	strh	r3, [r7, #10]
 8004462:	460b      	mov	r3, r1
 8004464:	813b      	strh	r3, [r7, #8]
 8004466:	4613      	mov	r3, r2
 8004468:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	b2da      	uxtb	r2, r3
 800446e:	8979      	ldrh	r1, [r7, #10]
 8004470:	4b20      	ldr	r3, [pc, #128]	@ (80044f4 <I2C_RequestMemoryRead+0xa4>)
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	2300      	movs	r3, #0
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fa26 	bl	80048c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800447c:	69fa      	ldr	r2, [r7, #28]
 800447e:	69b9      	ldr	r1, [r7, #24]
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f8b6 	bl	80045f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e02c      	b.n	80044ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004490:	88fb      	ldrh	r3, [r7, #6]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d105      	bne.n	80044a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004496:	893b      	ldrh	r3, [r7, #8]
 8004498:	b2da      	uxtb	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	629a      	str	r2, [r3, #40]	@ 0x28
 80044a0:	e015      	b.n	80044ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044a2:	893b      	ldrh	r3, [r7, #8]
 80044a4:	0a1b      	lsrs	r3, r3, #8
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044b0:	69fa      	ldr	r2, [r7, #28]
 80044b2:	69b9      	ldr	r1, [r7, #24]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f89c 	bl	80045f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e012      	b.n	80044ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044c4:	893b      	ldrh	r3, [r7, #8]
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	2200      	movs	r2, #0
 80044d6:	2140      	movs	r1, #64	@ 0x40
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f831 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	80002000 	.word	0x80002000

080044f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b02      	cmp	r3, #2
 800450c:	d103      	bne.n	8004516 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2200      	movs	r2, #0
 8004514:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b01      	cmp	r3, #1
 8004522:	d007      	beq.n	8004534 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	619a      	str	r2, [r3, #24]
  }
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004550:	e03b      	b.n	80045ca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	6839      	ldr	r1, [r7, #0]
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f8d6 	bl	8004708 <I2C_IsErrorOccurred>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e041      	b.n	80045ea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456c:	d02d      	beq.n	80045ca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456e:	f7fd fe65 	bl	800223c <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d302      	bcc.n	8004584 <I2C_WaitOnFlagUntilTimeout+0x44>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d122      	bne.n	80045ca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	4013      	ands	r3, r2
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	429a      	cmp	r2, r3
 8004592:	bf0c      	ite	eq
 8004594:	2301      	moveq	r3, #1
 8004596:	2300      	movne	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	461a      	mov	r2, r3
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d113      	bne.n	80045ca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a6:	f043 0220 	orr.w	r2, r3, #32
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e00f      	b.n	80045ea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699a      	ldr	r2, [r3, #24]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4013      	ands	r3, r2
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	bf0c      	ite	eq
 80045da:	2301      	moveq	r3, #1
 80045dc:	2300      	movne	r3, #0
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	461a      	mov	r2, r3
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d0b4      	beq.n	8004552 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045fe:	e033      	b.n	8004668 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 f87f 	bl	8004708 <I2C_IsErrorOccurred>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e031      	b.n	8004678 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461a:	d025      	beq.n	8004668 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800461c:	f7fd fe0e 	bl	800223c <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	429a      	cmp	r2, r3
 800462a:	d302      	bcc.n	8004632 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d11a      	bne.n	8004668 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b02      	cmp	r3, #2
 800463e:	d013      	beq.n	8004668 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004644:	f043 0220 	orr.w	r2, r3, #32
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e007      	b.n	8004678 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b02      	cmp	r3, #2
 8004674:	d1c4      	bne.n	8004600 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800468c:	e02f      	b.n	80046ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 f838 	bl	8004708 <I2C_IsErrorOccurred>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e02d      	b.n	80046fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a2:	f7fd fdcb 	bl	800223c <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d302      	bcc.n	80046b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d11a      	bne.n	80046ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	d013      	beq.n	80046ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ca:	f043 0220 	orr.w	r2, r3, #32
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e007      	b.n	80046fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	f003 0320 	and.w	r3, r3, #32
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d1c8      	bne.n	800468e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08a      	sub	sp, #40	@ 0x28
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004722:	2300      	movs	r3, #0
 8004724:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2b00      	cmp	r3, #0
 8004732:	d068      	beq.n	8004806 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2210      	movs	r2, #16
 800473a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800473c:	e049      	b.n	80047d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004744:	d045      	beq.n	80047d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004746:	f7fd fd79 	bl	800223c <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	429a      	cmp	r2, r3
 8004754:	d302      	bcc.n	800475c <I2C_IsErrorOccurred+0x54>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d13a      	bne.n	80047d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004766:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800476e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800477a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800477e:	d121      	bne.n	80047c4 <I2C_IsErrorOccurred+0xbc>
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004786:	d01d      	beq.n	80047c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004788:	7cfb      	ldrb	r3, [r7, #19]
 800478a:	2b20      	cmp	r3, #32
 800478c:	d01a      	beq.n	80047c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800479c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800479e:	f7fd fd4d 	bl	800223c <HAL_GetTick>
 80047a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047a4:	e00e      	b.n	80047c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80047a6:	f7fd fd49 	bl	800223c <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b19      	cmp	r3, #25
 80047b2:	d907      	bls.n	80047c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	f043 0320 	orr.w	r3, r3, #32
 80047ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80047c2:	e006      	b.n	80047d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	d1e9      	bne.n	80047a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d003      	beq.n	80047e8 <I2C_IsErrorOccurred+0xe0>
 80047e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0aa      	beq.n	800473e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d103      	bne.n	80047f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2220      	movs	r2, #32
 80047f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	f043 0304 	orr.w	r3, r3, #4
 80047fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00b      	beq.n	8004830 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004828:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	f043 0308 	orr.w	r3, r3, #8
 8004840:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800484a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00b      	beq.n	8004874 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	f043 0302 	orr.w	r3, r3, #2
 8004862:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800486c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004874:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01c      	beq.n	80048b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f7ff fe3b 	bl	80044f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6859      	ldr	r1, [r3, #4]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	4b0d      	ldr	r3, [pc, #52]	@ (80048c4 <I2C_IsErrorOccurred+0x1bc>)
 800488e:	400b      	ands	r3, r1
 8004890:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	431a      	orrs	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80048b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3728      	adds	r7, #40	@ 0x28
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	fe00e800 	.word	0xfe00e800

080048c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	607b      	str	r3, [r7, #4]
 80048d2:	460b      	mov	r3, r1
 80048d4:	817b      	strh	r3, [r7, #10]
 80048d6:	4613      	mov	r3, r2
 80048d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048da:	897b      	ldrh	r3, [r7, #10]
 80048dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048e0:	7a7b      	ldrb	r3, [r7, #9]
 80048e2:	041b      	lsls	r3, r3, #16
 80048e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80048f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	0d5b      	lsrs	r3, r3, #21
 8004902:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004906:	4b08      	ldr	r3, [pc, #32]	@ (8004928 <I2C_TransferConfig+0x60>)
 8004908:	430b      	orrs	r3, r1
 800490a:	43db      	mvns	r3, r3
 800490c:	ea02 0103 	and.w	r1, r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	430a      	orrs	r2, r1
 8004918:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	03ff63ff 	.word	0x03ff63ff

0800492c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b20      	cmp	r3, #32
 8004940:	d138      	bne.n	80049b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800494c:	2302      	movs	r3, #2
 800494e:	e032      	b.n	80049b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2224      	movs	r2, #36	@ 0x24
 800495c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0201 	bic.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800497e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6819      	ldr	r1, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	e000      	b.n	80049b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049b4:	2302      	movs	r3, #2
  }
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	d139      	bne.n	8004a4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e033      	b.n	8004a4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2224      	movs	r2, #36	@ 0x24
 80049f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0201 	bic.w	r2, r2, #1
 8004a04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004a14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	021b      	lsls	r3, r3, #8
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	e000      	b.n	8004a4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a4c:	2302      	movs	r3, #2
  }
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b086      	sub	sp, #24
 8004a5e:	af02      	add	r7, sp, #8
 8004a60:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e108      	b.n	8004c7e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f017 ff34 	bl	801c8f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2203      	movs	r2, #3
 8004a90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a9a:	d102      	bne.n	8004aa2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f002 ffab 	bl	8007a02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6818      	ldr	r0, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	7c1a      	ldrb	r2, [r3, #16]
 8004ab4:	f88d 2000 	strb.w	r2, [sp]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004abc:	f002 fe94 	bl	80077e8 <USB_CoreInit>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e0d5      	b.n	8004c7e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f002 ffa3 	bl	8007a24 <USB_SetCurrentMode>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e0c6      	b.n	8004c7e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004af0:	2300      	movs	r3, #0
 8004af2:	73fb      	strb	r3, [r7, #15]
 8004af4:	e04a      	b.n	8004b8c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004af6:	7bfa      	ldrb	r2, [r7, #15]
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	4613      	mov	r3, r2
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	440b      	add	r3, r1
 8004b04:	3315      	adds	r3, #21
 8004b06:	2201      	movs	r2, #1
 8004b08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b0a:	7bfa      	ldrb	r2, [r7, #15]
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	3314      	adds	r3, #20
 8004b1a:	7bfa      	ldrb	r2, [r7, #15]
 8004b1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b1e:	7bfa      	ldrb	r2, [r7, #15]
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	b298      	uxth	r0, r3
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	4613      	mov	r3, r2
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	4413      	add	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	440b      	add	r3, r1
 8004b30:	332e      	adds	r3, #46	@ 0x2e
 8004b32:	4602      	mov	r2, r0
 8004b34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b36:	7bfa      	ldrb	r2, [r7, #15]
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	4413      	add	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	440b      	add	r3, r1
 8004b44:	3318      	adds	r3, #24
 8004b46:	2200      	movs	r2, #0
 8004b48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b4a:	7bfa      	ldrb	r2, [r7, #15]
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	331c      	adds	r3, #28
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b5e:	7bfa      	ldrb	r2, [r7, #15]
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	4613      	mov	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	4413      	add	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	3320      	adds	r3, #32
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b72:	7bfa      	ldrb	r2, [r7, #15]
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	3324      	adds	r3, #36	@ 0x24
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b86:	7bfb      	ldrb	r3, [r7, #15]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	73fb      	strb	r3, [r7, #15]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	791b      	ldrb	r3, [r3, #4]
 8004b90:	7bfa      	ldrb	r2, [r7, #15]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d3af      	bcc.n	8004af6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]
 8004b9a:	e044      	b.n	8004c26 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b9c:	7bfa      	ldrb	r2, [r7, #15]
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004bae:	2200      	movs	r2, #0
 8004bb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004bb2:	7bfa      	ldrb	r2, [r7, #15]
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004bc4:	7bfa      	ldrb	r2, [r7, #15]
 8004bc6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004bc8:	7bfa      	ldrb	r2, [r7, #15]
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004bda:	2200      	movs	r2, #0
 8004bdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004bde:	7bfa      	ldrb	r2, [r7, #15]
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	4613      	mov	r3, r2
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	4413      	add	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	440b      	add	r3, r1
 8004bec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004bf4:	7bfa      	ldrb	r2, [r7, #15]
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c0a:	7bfa      	ldrb	r2, [r7, #15]
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	440b      	add	r3, r1
 8004c18:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	3301      	adds	r3, #1
 8004c24:	73fb      	strb	r3, [r7, #15]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	791b      	ldrb	r3, [r3, #4]
 8004c2a:	7bfa      	ldrb	r2, [r7, #15]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d3b5      	bcc.n	8004b9c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6818      	ldr	r0, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	7c1a      	ldrb	r2, [r3, #16]
 8004c38:	f88d 2000 	strb.w	r2, [sp]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c40:	f002 ff3c 	bl	8007abc <USB_DevInit>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d005      	beq.n	8004c56 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e013      	b.n	8004c7e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	7b1b      	ldrb	r3, [r3, #12]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d102      	bne.n	8004c72 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f001 f959 	bl	8005f24 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f003 ff7b 	bl	8008b72 <USB_DevDisconnect>

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b082      	sub	sp, #8
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_PCD_Start+0x16>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e012      	b.n	8004cc2 <HAL_PCD_Start+0x3c>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f002 fe99 	bl	80079e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f003 ff3c 	bl	8008b30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004cca:	b590      	push	{r4, r7, lr}
 8004ccc:	b08d      	sub	sp, #52	@ 0x34
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f003 fffa 	bl	8008cda <USB_GetMode>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f040 84b9 	bne.w	8005660 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f003 ff5e 	bl	8008bb4 <USB_ReadInterrupts>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 84af 	beq.w	800565e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	0a1b      	lsrs	r3, r3, #8
 8004d0a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f003 ff4b 	bl	8008bb4 <USB_ReadInterrupts>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d107      	bne.n	8004d38 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f002 0202 	and.w	r2, r2, #2
 8004d36:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f003 ff39 	bl	8008bb4 <USB_ReadInterrupts>
 8004d42:	4603      	mov	r3, r0
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	2b10      	cmp	r3, #16
 8004d4a:	d161      	bne.n	8004e10 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0210 	bic.w	r2, r2, #16
 8004d5a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	f003 020f 	and.w	r2, r3, #15
 8004d68:	4613      	mov	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	4413      	add	r3, r2
 8004d78:	3304      	adds	r3, #4
 8004d7a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	0c5b      	lsrs	r3, r3, #17
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d124      	bne.n	8004dd2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004d8e:	4013      	ands	r3, r2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d035      	beq.n	8004e00 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	091b      	lsrs	r3, r3, #4
 8004d9c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	461a      	mov	r2, r3
 8004da6:	6a38      	ldr	r0, [r7, #32]
 8004da8:	f003 fd70 	bl	800888c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	091b      	lsrs	r3, r3, #4
 8004db4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004db8:	441a      	add	r2, r3
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	695a      	ldr	r2, [r3, #20]
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	091b      	lsrs	r3, r3, #4
 8004dc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dca:	441a      	add	r2, r3
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	615a      	str	r2, [r3, #20]
 8004dd0:	e016      	b.n	8004e00 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	0c5b      	lsrs	r3, r3, #17
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	2b06      	cmp	r3, #6
 8004ddc:	d110      	bne.n	8004e00 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004de4:	2208      	movs	r2, #8
 8004de6:	4619      	mov	r1, r3
 8004de8:	6a38      	ldr	r0, [r7, #32]
 8004dea:	f003 fd4f 	bl	800888c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	695a      	ldr	r2, [r3, #20]
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	091b      	lsrs	r3, r3, #4
 8004df6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dfa:	441a      	add	r2, r3
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0210 	orr.w	r2, r2, #16
 8004e0e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f003 fecd 	bl	8008bb4 <USB_ReadInterrupts>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e20:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e24:	f040 80a7 	bne.w	8004f76 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f003 fed2 	bl	8008bda <USB_ReadDevAllOutEpInterrupt>
 8004e36:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004e38:	e099      	b.n	8004f6e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 808e 	beq.w	8004f62 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	4611      	mov	r1, r2
 8004e50:	4618      	mov	r0, r3
 8004e52:	f003 fef6 	bl	8008c42 <USB_ReadDevOutEPInterrupt>
 8004e56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00c      	beq.n	8004e7c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e6e:	461a      	mov	r2, r3
 8004e70:	2301      	movs	r3, #1
 8004e72:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004e74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fece 	bl	8005c18 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00c      	beq.n	8004ea0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e92:	461a      	mov	r2, r3
 8004e94:	2308      	movs	r3, #8
 8004e96:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004e98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 ffa4 	bl	8005de8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d008      	beq.n	8004ebc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	2310      	movs	r3, #16
 8004eba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d030      	beq.n	8004f28 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ece:	2b80      	cmp	r3, #128	@ 0x80
 8004ed0:	d109      	bne.n	8004ee6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	69fa      	ldr	r2, [r7, #28]
 8004edc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ee0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ee4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ee8:	4613      	mov	r3, r2
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	3304      	adds	r3, #4
 8004efa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	78db      	ldrb	r3, [r3, #3]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d108      	bne.n	8004f16 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2200      	movs	r2, #0
 8004f08:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f017 fe23 	bl	801cb5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f22:	461a      	mov	r2, r3
 8004f24:	2302      	movs	r3, #2
 8004f26:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d008      	beq.n	8004f44 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f3e:	461a      	mov	r2, r3
 8004f40:	2320      	movs	r3, #32
 8004f42:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f60:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	3301      	adds	r3, #1
 8004f66:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6a:	085b      	lsrs	r3, r3, #1
 8004f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f47f af62 	bne.w	8004e3a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f003 fe1a 	bl	8008bb4 <USB_ReadInterrupts>
 8004f80:	4603      	mov	r3, r0
 8004f82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f8a:	f040 80db 	bne.w	8005144 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f003 fe3b 	bl	8008c0e <USB_ReadDevAllInEpInterrupt>
 8004f98:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004f9e:	e0cd      	b.n	800513c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 80c2 	beq.w	8005130 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f003 fe61 	bl	8008c7e <USB_ReadDevInEPInterrupt>
 8004fbc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d057      	beq.n	8005078 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	2201      	movs	r2, #1
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	69f9      	ldr	r1, [r7, #28]
 8004fe4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fe8:	4013      	ands	r3, r2
 8004fea:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	799b      	ldrb	r3, [r3, #6]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d132      	bne.n	800506c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800500a:	4613      	mov	r3, r2
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	4413      	add	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	440b      	add	r3, r1
 8005014:	3320      	adds	r3, #32
 8005016:	6819      	ldr	r1, [r3, #0]
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800501c:	4613      	mov	r3, r2
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4403      	add	r3, r0
 8005026:	331c      	adds	r3, #28
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4419      	add	r1, r3
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005030:	4613      	mov	r3, r2
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4403      	add	r3, r0
 800503a:	3320      	adds	r3, #32
 800503c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	2b00      	cmp	r3, #0
 8005042:	d113      	bne.n	800506c <HAL_PCD_IRQHandler+0x3a2>
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005048:	4613      	mov	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	3324      	adds	r3, #36	@ 0x24
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d108      	bne.n	800506c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005064:	461a      	mov	r2, r3
 8005066:	2101      	movs	r1, #1
 8005068:	f003 fe6a 	bl	8008d40 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	b2db      	uxtb	r3, r3
 8005070:	4619      	mov	r1, r3
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f017 fced 	bl	801ca52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d008      	beq.n	8005094 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800508e:	461a      	mov	r2, r3
 8005090:	2308      	movs	r3, #8
 8005092:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f003 0310 	and.w	r3, r3, #16
 800509a:	2b00      	cmp	r3, #0
 800509c:	d008      	beq.n	80050b0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050aa:	461a      	mov	r2, r3
 80050ac:	2310      	movs	r3, #16
 80050ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d008      	beq.n	80050cc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80050ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050c6:	461a      	mov	r2, r3
 80050c8:	2340      	movs	r3, #64	@ 0x40
 80050ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d023      	beq.n	800511e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80050d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050d8:	6a38      	ldr	r0, [r7, #32]
 80050da:	f002 fe4d 	bl	8007d78 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80050de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e0:	4613      	mov	r3, r2
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	4413      	add	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	3310      	adds	r3, #16
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	4413      	add	r3, r2
 80050ee:	3304      	adds	r3, #4
 80050f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	78db      	ldrb	r3, [r3, #3]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d108      	bne.n	800510c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2200      	movs	r2, #0
 80050fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005102:	b2db      	uxtb	r3, r3
 8005104:	4619      	mov	r1, r3
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f017 fd3a 	bl	801cb80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800510c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005118:	461a      	mov	r2, r3
 800511a:	2302      	movs	r3, #2
 800511c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005128:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fce8 	bl	8005b00 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005132:	3301      	adds	r3, #1
 8005134:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005138:	085b      	lsrs	r3, r3, #1
 800513a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800513c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513e:	2b00      	cmp	r3, #0
 8005140:	f47f af2e 	bne.w	8004fa0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f003 fd33 	bl	8008bb4 <USB_ReadInterrupts>
 800514e:	4603      	mov	r3, r0
 8005150:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005154:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005158:	d122      	bne.n	80051a0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005168:	f023 0301 	bic.w	r3, r3, #1
 800516c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005174:	2b01      	cmp	r3, #1
 8005176:	d108      	bne.n	800518a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005180:	2100      	movs	r1, #0
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f017 feb4 	bl	801cef0 <HAL_PCDEx_LPM_Callback>
 8005188:	e002      	b.n	8005190 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f017 fcd8 	bl	801cb40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695a      	ldr	r2, [r3, #20]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800519e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f003 fd05 	bl	8008bb4 <USB_ReadInterrupts>
 80051aa:	4603      	mov	r3, r0
 80051ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051b4:	d112      	bne.n	80051dc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d102      	bne.n	80051cc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f017 fc94 	bl	801caf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695a      	ldr	r2, [r3, #20]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80051da:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f003 fce7 	bl	8008bb4 <USB_ReadInterrupts>
 80051e6:	4603      	mov	r3, r0
 80051e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051f0:	d121      	bne.n	8005236 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695a      	ldr	r2, [r3, #20]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005200:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005208:	2b00      	cmp	r3, #0
 800520a:	d111      	bne.n	8005230 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521a:	089b      	lsrs	r3, r3, #2
 800521c:	f003 020f 	and.w	r2, r3, #15
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005226:	2101      	movs	r1, #1
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f017 fe61 	bl	801cef0 <HAL_PCDEx_LPM_Callback>
 800522e:	e002      	b.n	8005236 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f017 fc5f 	bl	801caf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f003 fcba 	bl	8008bb4 <USB_ReadInterrupts>
 8005240:	4603      	mov	r3, r0
 8005242:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800524a:	f040 80b7 	bne.w	80053bc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800525c:	f023 0301 	bic.w	r3, r3, #1
 8005260:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2110      	movs	r1, #16
 8005268:	4618      	mov	r0, r3
 800526a:	f002 fd85 	bl	8007d78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800526e:	2300      	movs	r3, #0
 8005270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005272:	e046      	b.n	8005302 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005280:	461a      	mov	r2, r3
 8005282:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005286:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005298:	0151      	lsls	r1, r2, #5
 800529a:	69fa      	ldr	r2, [r7, #28]
 800529c:	440a      	add	r2, r1
 800529e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80052a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80052a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052b4:	461a      	mov	r2, r3
 80052b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80052ba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052cc:	0151      	lsls	r1, r2, #5
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	440a      	add	r2, r1
 80052d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80052da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052ec:	0151      	lsls	r1, r2, #5
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	440a      	add	r2, r1
 80052f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80052fa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fe:	3301      	adds	r3, #1
 8005300:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	791b      	ldrb	r3, [r3, #4]
 8005306:	461a      	mov	r2, r3
 8005308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800530a:	4293      	cmp	r3, r2
 800530c:	d3b2      	bcc.n	8005274 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800531c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005320:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	7bdb      	ldrb	r3, [r3, #15]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d016      	beq.n	8005358 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005330:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800533a:	f043 030b 	orr.w	r3, r3, #11
 800533e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005350:	f043 030b 	orr.w	r3, r3, #11
 8005354:	6453      	str	r3, [r2, #68]	@ 0x44
 8005356:	e015      	b.n	8005384 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800535e:	695a      	ldr	r2, [r3, #20]
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005366:	4619      	mov	r1, r3
 8005368:	f242 032b 	movw	r3, #8235	@ 0x202b
 800536c:	4313      	orrs	r3, r2
 800536e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	69fa      	ldr	r2, [r7, #28]
 800537a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800537e:	f043 030b 	orr.w	r3, r3, #11
 8005382:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005392:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005396:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6818      	ldr	r0, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80053a6:	461a      	mov	r2, r3
 80053a8:	f003 fcca 	bl	8008d40 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695a      	ldr	r2, [r3, #20]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80053ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f003 fbf7 	bl	8008bb4 <USB_ReadInterrupts>
 80053c6:	4603      	mov	r3, r0
 80053c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053d0:	d123      	bne.n	800541a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f003 fc8e 	bl	8008cf8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f002 fd42 	bl	8007e6a <USB_GetDevSpeed>
 80053e6:	4603      	mov	r3, r0
 80053e8:	461a      	mov	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681c      	ldr	r4, [r3, #0]
 80053f2:	f001 faab 	bl	800694c <HAL_RCC_GetHCLKFreq>
 80053f6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053fc:	461a      	mov	r2, r3
 80053fe:	4620      	mov	r0, r4
 8005400:	f002 fa4c 	bl	800789c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f017 fb4c 	bl	801caa2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695a      	ldr	r2, [r3, #20]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005418:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f003 fbc8 	bl	8008bb4 <USB_ReadInterrupts>
 8005424:	4603      	mov	r3, r0
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b08      	cmp	r3, #8
 800542c:	d10a      	bne.n	8005444 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f017 fb29 	bl	801ca86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695a      	ldr	r2, [r3, #20]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f002 0208 	and.w	r2, r2, #8
 8005442:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4618      	mov	r0, r3
 800544a:	f003 fbb3 	bl	8008bb4 <USB_ReadInterrupts>
 800544e:	4603      	mov	r3, r0
 8005450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005454:	2b80      	cmp	r3, #128	@ 0x80
 8005456:	d123      	bne.n	80054a0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005464:	2301      	movs	r3, #1
 8005466:	627b      	str	r3, [r7, #36]	@ 0x24
 8005468:	e014      	b.n	8005494 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800546e:	4613      	mov	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	440b      	add	r3, r1
 8005478:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d105      	bne.n	800548e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	b2db      	uxtb	r3, r3
 8005486:	4619      	mov	r1, r3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fb08 	bl	8005a9e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800548e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005490:	3301      	adds	r3, #1
 8005492:	627b      	str	r3, [r7, #36]	@ 0x24
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	791b      	ldrb	r3, [r3, #4]
 8005498:	461a      	mov	r2, r3
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	4293      	cmp	r3, r2
 800549e:	d3e4      	bcc.n	800546a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f003 fb85 	bl	8008bb4 <USB_ReadInterrupts>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054b4:	d13c      	bne.n	8005530 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054b6:	2301      	movs	r3, #1
 80054b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ba:	e02b      	b.n	8005514 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054d0:	4613      	mov	r3, r2
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	4413      	add	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	3318      	adds	r3, #24
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d115      	bne.n	800550e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80054e2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	da12      	bge.n	800550e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ec:	4613      	mov	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	3317      	adds	r3, #23
 80054f8:	2201      	movs	r2, #1
 80054fa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80054fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005504:	b2db      	uxtb	r3, r3
 8005506:	4619      	mov	r1, r3
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fac8 	bl	8005a9e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005510:	3301      	adds	r3, #1
 8005512:	627b      	str	r3, [r7, #36]	@ 0x24
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	791b      	ldrb	r3, [r3, #4]
 8005518:	461a      	mov	r2, r3
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551c:	4293      	cmp	r3, r2
 800551e:	d3cd      	bcc.n	80054bc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695a      	ldr	r2, [r3, #20]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800552e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4618      	mov	r0, r3
 8005536:	f003 fb3d 	bl	8008bb4 <USB_ReadInterrupts>
 800553a:	4603      	mov	r3, r0
 800553c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005540:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005544:	d156      	bne.n	80055f4 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005546:	2301      	movs	r3, #1
 8005548:	627b      	str	r3, [r7, #36]	@ 0x24
 800554a:	e045      	b.n	80055d8 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800554c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005560:	4613      	mov	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	4413      	add	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	440b      	add	r3, r1
 800556a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d12e      	bne.n	80055d2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005574:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005576:	2b00      	cmp	r3, #0
 8005578:	da2b      	bge.n	80055d2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005586:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800558a:	429a      	cmp	r2, r3
 800558c:	d121      	bne.n	80055d2 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005592:	4613      	mov	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80055a0:	2201      	movs	r2, #1
 80055a2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10a      	bne.n	80055d2 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80055ce:	6053      	str	r3, [r2, #4]
            break;
 80055d0:	e008      	b.n	80055e4 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	3301      	adds	r3, #1
 80055d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	791b      	ldrb	r3, [r3, #4]
 80055dc:	461a      	mov	r2, r3
 80055de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d3b3      	bcc.n	800554c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695a      	ldr	r2, [r3, #20]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80055f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f003 fadb 	bl	8008bb4 <USB_ReadInterrupts>
 80055fe:	4603      	mov	r3, r0
 8005600:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005608:	d10a      	bne.n	8005620 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f017 faca 	bl	801cba4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695a      	ldr	r2, [r3, #20]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800561e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4618      	mov	r0, r3
 8005626:	f003 fac5 	bl	8008bb4 <USB_ReadInterrupts>
 800562a:	4603      	mov	r3, r0
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b04      	cmp	r3, #4
 8005632:	d115      	bne.n	8005660 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	f003 0304 	and.w	r3, r3, #4
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f017 faba 	bl	801cbc0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6859      	ldr	r1, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	430a      	orrs	r2, r1
 800565a:	605a      	str	r2, [r3, #4]
 800565c:	e000      	b.n	8005660 <HAL_PCD_IRQHandler+0x996>
      return;
 800565e:	bf00      	nop
    }
  }
}
 8005660:	3734      	adds	r7, #52	@ 0x34
 8005662:	46bd      	mov	sp, r7
 8005664:	bd90      	pop	{r4, r7, pc}

08005666 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b082      	sub	sp, #8
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	460b      	mov	r3, r1
 8005670:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_PCD_SetAddress+0x1a>
 800567c:	2302      	movs	r3, #2
 800567e:	e012      	b.n	80056a6 <HAL_PCD_SetAddress+0x40>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	78fa      	ldrb	r2, [r7, #3]
 800568c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	78fa      	ldrb	r2, [r7, #3]
 8005694:	4611      	mov	r1, r2
 8005696:	4618      	mov	r0, r3
 8005698:	f003 fa24 	bl	8008ae4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b084      	sub	sp, #16
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	4608      	mov	r0, r1
 80056b8:	4611      	mov	r1, r2
 80056ba:	461a      	mov	r2, r3
 80056bc:	4603      	mov	r3, r0
 80056be:	70fb      	strb	r3, [r7, #3]
 80056c0:	460b      	mov	r3, r1
 80056c2:	803b      	strh	r3, [r7, #0]
 80056c4:	4613      	mov	r3, r2
 80056c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	da0f      	bge.n	80056f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	f003 020f 	and.w	r2, r3, #15
 80056da:	4613      	mov	r3, r2
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	3310      	adds	r3, #16
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	4413      	add	r3, r2
 80056e8:	3304      	adds	r3, #4
 80056ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2201      	movs	r2, #1
 80056f0:	705a      	strb	r2, [r3, #1]
 80056f2:	e00f      	b.n	8005714 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	f003 020f 	and.w	r2, r3, #15
 80056fa:	4613      	mov	r3, r2
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	4413      	add	r3, r2
 800570a:	3304      	adds	r3, #4
 800570c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005714:	78fb      	ldrb	r3, [r7, #3]
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	b2da      	uxtb	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005720:	883a      	ldrh	r2, [r7, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	78ba      	ldrb	r2, [r7, #2]
 800572a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	785b      	ldrb	r3, [r3, #1]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	461a      	mov	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800573e:	78bb      	ldrb	r3, [r7, #2]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d102      	bne.n	800574a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005750:	2b01      	cmp	r3, #1
 8005752:	d101      	bne.n	8005758 <HAL_PCD_EP_Open+0xaa>
 8005754:	2302      	movs	r3, #2
 8005756:	e00e      	b.n	8005776 <HAL_PCD_EP_Open+0xc8>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68f9      	ldr	r1, [r7, #12]
 8005766:	4618      	mov	r0, r3
 8005768:	f002 fba4 	bl	8007eb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005774:	7afb      	ldrb	r3, [r7, #11]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	460b      	mov	r3, r1
 8005788:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800578a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800578e:	2b00      	cmp	r3, #0
 8005790:	da0f      	bge.n	80057b2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005792:	78fb      	ldrb	r3, [r7, #3]
 8005794:	f003 020f 	and.w	r2, r3, #15
 8005798:	4613      	mov	r3, r2
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	4413      	add	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	3310      	adds	r3, #16
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	4413      	add	r3, r2
 80057a6:	3304      	adds	r3, #4
 80057a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	705a      	strb	r2, [r3, #1]
 80057b0:	e00f      	b.n	80057d2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057b2:	78fb      	ldrb	r3, [r7, #3]
 80057b4:	f003 020f 	and.w	r2, r3, #15
 80057b8:	4613      	mov	r3, r2
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	4413      	add	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	4413      	add	r3, r2
 80057c8:	3304      	adds	r3, #4
 80057ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80057d2:	78fb      	ldrb	r3, [r7, #3]
 80057d4:	f003 030f 	and.w	r3, r3, #15
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_PCD_EP_Close+0x6e>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e00e      	b.n	800580a <HAL_PCD_EP_Close+0x8c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68f9      	ldr	r1, [r7, #12]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f002 fbe2 	bl	8007fc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b086      	sub	sp, #24
 8005816:	af00      	add	r7, sp, #0
 8005818:	60f8      	str	r0, [r7, #12]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
 800581e:	460b      	mov	r3, r1
 8005820:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005822:	7afb      	ldrb	r3, [r7, #11]
 8005824:	f003 020f 	and.w	r2, r3, #15
 8005828:	4613      	mov	r3, r2
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4413      	add	r3, r2
 8005838:	3304      	adds	r3, #4
 800583a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2200      	movs	r2, #0
 800584c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2200      	movs	r2, #0
 8005852:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005854:	7afb      	ldrb	r3, [r7, #11]
 8005856:	f003 030f 	and.w	r3, r3, #15
 800585a:	b2da      	uxtb	r2, r3
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	799b      	ldrb	r3, [r3, #6]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d102      	bne.n	800586e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	799b      	ldrb	r3, [r3, #6]
 8005876:	461a      	mov	r2, r3
 8005878:	6979      	ldr	r1, [r7, #20]
 800587a:	f002 fc7f 	bl	800817c <USB_EPStartXfer>

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	f003 020f 	and.w	r2, r3, #15
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	440b      	add	r3, r1
 80058a6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80058aa:	681b      	ldr	r3, [r3, #0]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	607a      	str	r2, [r7, #4]
 80058c2:	603b      	str	r3, [r7, #0]
 80058c4:	460b      	mov	r3, r1
 80058c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058c8:	7afb      	ldrb	r3, [r7, #11]
 80058ca:	f003 020f 	and.w	r2, r3, #15
 80058ce:	4613      	mov	r3, r2
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	3310      	adds	r3, #16
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4413      	add	r3, r2
 80058dc:	3304      	adds	r3, #4
 80058de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	2200      	movs	r2, #0
 80058f0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2201      	movs	r2, #1
 80058f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058f8:	7afb      	ldrb	r3, [r7, #11]
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	799b      	ldrb	r3, [r3, #6]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d102      	bne.n	8005912 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	799b      	ldrb	r3, [r3, #6]
 800591a:	461a      	mov	r2, r3
 800591c:	6979      	ldr	r1, [r7, #20]
 800591e:	f002 fc2d 	bl	800817c <USB_EPStartXfer>

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	f003 030f 	and.w	r3, r3, #15
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	7912      	ldrb	r2, [r2, #4]
 8005942:	4293      	cmp	r3, r2
 8005944:	d901      	bls.n	800594a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e04f      	b.n	80059ea <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800594a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800594e:	2b00      	cmp	r3, #0
 8005950:	da0f      	bge.n	8005972 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005952:	78fb      	ldrb	r3, [r7, #3]
 8005954:	f003 020f 	and.w	r2, r3, #15
 8005958:	4613      	mov	r3, r2
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	3310      	adds	r3, #16
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	4413      	add	r3, r2
 8005966:	3304      	adds	r3, #4
 8005968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	705a      	strb	r2, [r3, #1]
 8005970:	e00d      	b.n	800598e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005972:	78fa      	ldrb	r2, [r7, #3]
 8005974:	4613      	mov	r3, r2
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	4413      	add	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	4413      	add	r3, r2
 8005984:	3304      	adds	r3, #4
 8005986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005994:	78fb      	ldrb	r3, [r7, #3]
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	b2da      	uxtb	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_PCD_EP_SetStall+0x82>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e01d      	b.n	80059ea <HAL_PCD_EP_SetStall+0xbe>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68f9      	ldr	r1, [r7, #12]
 80059bc:	4618      	mov	r0, r3
 80059be:	f002 ffbd 	bl	800893c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059c2:	78fb      	ldrb	r3, [r7, #3]
 80059c4:	f003 030f 	and.w	r3, r3, #15
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d109      	bne.n	80059e0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6818      	ldr	r0, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	7999      	ldrb	r1, [r3, #6]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80059da:	461a      	mov	r2, r3
 80059dc:	f003 f9b0 	bl	8008d40 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b084      	sub	sp, #16
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	460b      	mov	r3, r1
 80059fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80059fe:	78fb      	ldrb	r3, [r7, #3]
 8005a00:	f003 030f 	and.w	r3, r3, #15
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	7912      	ldrb	r2, [r2, #4]
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d901      	bls.n	8005a10 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e042      	b.n	8005a96 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	da0f      	bge.n	8005a38 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a18:	78fb      	ldrb	r3, [r7, #3]
 8005a1a:	f003 020f 	and.w	r2, r3, #15
 8005a1e:	4613      	mov	r3, r2
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	3310      	adds	r3, #16
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2201      	movs	r2, #1
 8005a34:	705a      	strb	r2, [r3, #1]
 8005a36:	e00f      	b.n	8005a58 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	f003 020f 	and.w	r2, r3, #15
 8005a3e:	4613      	mov	r3, r2
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	3304      	adds	r3, #4
 8005a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a5e:	78fb      	ldrb	r3, [r7, #3]
 8005a60:	f003 030f 	and.w	r3, r3, #15
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_PCD_EP_ClrStall+0x86>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e00e      	b.n	8005a96 <HAL_PCD_EP_ClrStall+0xa4>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68f9      	ldr	r1, [r7, #12]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f002 ffc6 	bl	8008a18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005aaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	da0c      	bge.n	8005acc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ab2:	78fb      	ldrb	r3, [r7, #3]
 8005ab4:	f003 020f 	and.w	r2, r3, #15
 8005ab8:	4613      	mov	r3, r2
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	4413      	add	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	3310      	adds	r3, #16
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	e00c      	b.n	8005ae6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	f003 020f 	and.w	r2, r3, #15
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68f9      	ldr	r1, [r7, #12]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f002 fde5 	bl	80086bc <USB_EPStopXfer>
 8005af2:	4603      	mov	r3, r0
 8005af4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005af6:	7afb      	ldrb	r3, [r7, #11]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08a      	sub	sp, #40	@ 0x28
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	4613      	mov	r3, r2
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	3310      	adds	r3, #16
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	4413      	add	r3, r2
 8005b24:	3304      	adds	r3, #4
 8005b26:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	695a      	ldr	r2, [r3, #20]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d901      	bls.n	8005b38 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e06b      	b.n	8005c10 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	69fa      	ldr	r2, [r7, #28]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d902      	bls.n	8005b54 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	3303      	adds	r3, #3
 8005b58:	089b      	lsrs	r3, r3, #2
 8005b5a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b5c:	e02a      	b.n	8005bb4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	691a      	ldr	r2, [r3, #16]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d902      	bls.n	8005b7a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	3303      	adds	r3, #3
 8005b7e:	089b      	lsrs	r3, r3, #2
 8005b80:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	68d9      	ldr	r1, [r3, #12]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	4603      	mov	r3, r0
 8005b96:	6978      	ldr	r0, [r7, #20]
 8005b98:	f002 fe3a 	bl	8008810 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	441a      	add	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	695a      	ldr	r2, [r3, #20]
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	441a      	add	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d809      	bhi.n	8005bde <PCD_WriteEmptyTxFifo+0xde>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	695a      	ldr	r2, [r3, #20]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d203      	bcs.n	8005bde <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1bf      	bne.n	8005b5e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	691a      	ldr	r2, [r3, #16]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d811      	bhi.n	8005c0e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	43db      	mvns	r3, r3
 8005c04:	6939      	ldr	r1, [r7, #16]
 8005c06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3720      	adds	r7, #32
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b088      	sub	sp, #32
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	333c      	adds	r3, #60	@ 0x3c
 8005c30:	3304      	adds	r3, #4
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	799b      	ldrb	r3, [r3, #6]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d17b      	bne.n	8005d46 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f003 0308 	and.w	r3, r3, #8
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d015      	beq.n	8005c84 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	4a61      	ldr	r2, [pc, #388]	@ (8005de0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	f240 80b9 	bls.w	8005dd4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 80b3 	beq.w	8005dd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c80:	6093      	str	r3, [r2, #8]
 8005c82:	e0a7      	b.n	8005dd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f003 0320 	and.w	r3, r3, #32
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d009      	beq.n	8005ca2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	2320      	movs	r3, #32
 8005c9e:	6093      	str	r3, [r2, #8]
 8005ca0:	e098      	b.n	8005dd4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f040 8093 	bne.w	8005dd4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	4a4b      	ldr	r2, [pc, #300]	@ (8005de0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d90f      	bls.n	8005cd6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00a      	beq.n	8005cd6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ccc:	461a      	mov	r2, r3
 8005cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cd2:	6093      	str	r3, [r2, #8]
 8005cd4:	e07e      	b.n	8005dd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	4413      	add	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	3304      	adds	r3, #4
 8005cea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a1a      	ldr	r2, [r3, #32]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	0159      	lsls	r1, r3, #5
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	440b      	add	r3, r1
 8005cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d02:	1ad2      	subs	r2, r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d114      	bne.n	8005d38 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d109      	bne.n	8005d2a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d20:	461a      	mov	r2, r3
 8005d22:	2101      	movs	r1, #1
 8005d24:	f003 f80c 	bl	8008d40 <USB_EP0_OutStart>
 8005d28:	e006      	b.n	8005d38 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	68da      	ldr	r2, [r3, #12]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	441a      	add	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f016 fe6c 	bl	801ca1c <HAL_PCD_DataOutStageCallback>
 8005d44:	e046      	b.n	8005dd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	4a26      	ldr	r2, [pc, #152]	@ (8005de4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d124      	bne.n	8005d98 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00a      	beq.n	8005d6e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d64:	461a      	mov	r2, r3
 8005d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d6a:	6093      	str	r3, [r2, #8]
 8005d6c:	e032      	b.n	8005dd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f003 0320 	and.w	r3, r3, #32
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d008      	beq.n	8005d8a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d84:	461a      	mov	r2, r3
 8005d86:	2320      	movs	r3, #32
 8005d88:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	4619      	mov	r1, r3
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f016 fe43 	bl	801ca1c <HAL_PCD_DataOutStageCallback>
 8005d96:	e01d      	b.n	8005dd4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d114      	bne.n	8005dc8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	4613      	mov	r3, r2
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	4413      	add	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	440b      	add	r3, r1
 8005dac:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d108      	bne.n	8005dc8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	f002 ffbc 	bl	8008d40 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	4619      	mov	r1, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f016 fe24 	bl	801ca1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3720      	adds	r7, #32
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	4f54300a 	.word	0x4f54300a
 8005de4:	4f54310a 	.word	0x4f54310a

08005de8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	333c      	adds	r3, #60	@ 0x3c
 8005e00:	3304      	adds	r3, #4
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4a15      	ldr	r2, [pc, #84]	@ (8005e70 <PCD_EP_OutSetupPacket_int+0x88>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d90e      	bls.n	8005e3c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d009      	beq.n	8005e3c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e34:	461a      	mov	r2, r3
 8005e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e3a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f016 fddb 	bl	801c9f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4a0a      	ldr	r2, [pc, #40]	@ (8005e70 <PCD_EP_OutSetupPacket_int+0x88>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d90c      	bls.n	8005e64 <PCD_EP_OutSetupPacket_int+0x7c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	799b      	ldrb	r3, [r3, #6]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d108      	bne.n	8005e64 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	2101      	movs	r1, #1
 8005e60:	f002 ff6e 	bl	8008d40 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	4f54300a 	.word	0x4f54300a

08005e74 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	70fb      	strb	r3, [r7, #3]
 8005e80:	4613      	mov	r3, r2
 8005e82:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005e8c:	78fb      	ldrb	r3, [r7, #3]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d107      	bne.n	8005ea2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005e92:	883b      	ldrh	r3, [r7, #0]
 8005e94:	0419      	lsls	r1, r3, #16
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ea0:	e028      	b.n	8005ef4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea8:	0c1b      	lsrs	r3, r3, #16
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	4413      	add	r3, r2
 8005eae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	73fb      	strb	r3, [r7, #15]
 8005eb4:	e00d      	b.n	8005ed2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
 8005ebc:	3340      	adds	r3, #64	@ 0x40
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	0c1b      	lsrs	r3, r3, #16
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	4413      	add	r3, r2
 8005eca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	73fb      	strb	r3, [r7, #15]
 8005ed2:	7bfa      	ldrb	r2, [r7, #15]
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d3ec      	bcc.n	8005eb6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005edc:	883b      	ldrh	r3, [r7, #0]
 8005ede:	0418      	lsls	r0, r3, #16
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6819      	ldr	r1, [r3, #0]
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	4302      	orrs	r2, r0
 8005eec:	3340      	adds	r3, #64	@ 0x40
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	887a      	ldrh	r2, [r7, #2]
 8005f14:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f52:	4b05      	ldr	r3, [pc, #20]	@ (8005f68 <HAL_PCDEx_ActivateLPM+0x44>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	10000003 	.word	0x10000003

08005f6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005f76:	4b23      	ldr	r3, [pc, #140]	@ (8006004 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7a:	4a22      	ldr	r2, [pc, #136]	@ (8006004 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f82:	4b20      	ldr	r3, [pc, #128]	@ (8006004 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8006008 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a1d      	ldr	r2, [pc, #116]	@ (8006008 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f98:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f9a:	f7fc f94f 	bl	800223c <HAL_GetTick>
 8005f9e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005fa0:	e009      	b.n	8005fb6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005fa2:	f7fc f94b 	bl	800223c <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fb0:	d901      	bls.n	8005fb6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e022      	b.n	8005ffc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005fb6:	4b14      	ldr	r3, [pc, #80]	@ (8006008 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fc2:	d1ee      	bne.n	8005fa2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005fc4:	4b10      	ldr	r3, [pc, #64]	@ (8006008 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a0f      	ldr	r2, [pc, #60]	@ (8006008 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005fca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fd0:	f7fc f934 	bl	800223c <HAL_GetTick>
 8005fd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005fd6:	e009      	b.n	8005fec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005fd8:	f7fc f930 	bl	800223c <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fe6:	d901      	bls.n	8005fec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e007      	b.n	8005ffc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005fec:	4b06      	ldr	r3, [pc, #24]	@ (8006008 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ff4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ff8:	d1ee      	bne.n	8005fd8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40023800 	.word	0x40023800
 8006008:	40007000 	.word	0x40007000

0800600c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006014:	2300      	movs	r3, #0
 8006016:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e29b      	b.n	800655a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 8087 	beq.w	800613e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006030:	4b96      	ldr	r3, [pc, #600]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f003 030c 	and.w	r3, r3, #12
 8006038:	2b04      	cmp	r3, #4
 800603a:	d00c      	beq.n	8006056 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800603c:	4b93      	ldr	r3, [pc, #588]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f003 030c 	and.w	r3, r3, #12
 8006044:	2b08      	cmp	r3, #8
 8006046:	d112      	bne.n	800606e <HAL_RCC_OscConfig+0x62>
 8006048:	4b90      	ldr	r3, [pc, #576]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006050:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006054:	d10b      	bne.n	800606e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006056:	4b8d      	ldr	r3, [pc, #564]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d06c      	beq.n	800613c <HAL_RCC_OscConfig+0x130>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d168      	bne.n	800613c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e275      	b.n	800655a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006076:	d106      	bne.n	8006086 <HAL_RCC_OscConfig+0x7a>
 8006078:	4b84      	ldr	r3, [pc, #528]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a83      	ldr	r2, [pc, #524]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 800607e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006082:	6013      	str	r3, [r2, #0]
 8006084:	e02e      	b.n	80060e4 <HAL_RCC_OscConfig+0xd8>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10c      	bne.n	80060a8 <HAL_RCC_OscConfig+0x9c>
 800608e:	4b7f      	ldr	r3, [pc, #508]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a7e      	ldr	r2, [pc, #504]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 8006094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	4b7c      	ldr	r3, [pc, #496]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a7b      	ldr	r2, [pc, #492]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 80060a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	e01d      	b.n	80060e4 <HAL_RCC_OscConfig+0xd8>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060b0:	d10c      	bne.n	80060cc <HAL_RCC_OscConfig+0xc0>
 80060b2:	4b76      	ldr	r3, [pc, #472]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a75      	ldr	r2, [pc, #468]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 80060b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	4b73      	ldr	r3, [pc, #460]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a72      	ldr	r2, [pc, #456]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 80060c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	e00b      	b.n	80060e4 <HAL_RCC_OscConfig+0xd8>
 80060cc:	4b6f      	ldr	r3, [pc, #444]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a6e      	ldr	r2, [pc, #440]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 80060d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060d6:	6013      	str	r3, [r2, #0]
 80060d8:	4b6c      	ldr	r3, [pc, #432]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a6b      	ldr	r2, [pc, #428]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 80060de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d013      	beq.n	8006114 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ec:	f7fc f8a6 	bl	800223c <HAL_GetTick>
 80060f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060f4:	f7fc f8a2 	bl	800223c <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b64      	cmp	r3, #100	@ 0x64
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e229      	b.n	800655a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006106:	4b61      	ldr	r3, [pc, #388]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0f0      	beq.n	80060f4 <HAL_RCC_OscConfig+0xe8>
 8006112:	e014      	b.n	800613e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006114:	f7fc f892 	bl	800223c <HAL_GetTick>
 8006118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800611a:	e008      	b.n	800612e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800611c:	f7fc f88e 	bl	800223c <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b64      	cmp	r3, #100	@ 0x64
 8006128:	d901      	bls.n	800612e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e215      	b.n	800655a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800612e:	4b57      	ldr	r3, [pc, #348]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1f0      	bne.n	800611c <HAL_RCC_OscConfig+0x110>
 800613a:	e000      	b.n	800613e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800613c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d069      	beq.n	800621e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800614a:	4b50      	ldr	r3, [pc, #320]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f003 030c 	and.w	r3, r3, #12
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00b      	beq.n	800616e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006156:	4b4d      	ldr	r3, [pc, #308]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 030c 	and.w	r3, r3, #12
 800615e:	2b08      	cmp	r3, #8
 8006160:	d11c      	bne.n	800619c <HAL_RCC_OscConfig+0x190>
 8006162:	4b4a      	ldr	r3, [pc, #296]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d116      	bne.n	800619c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800616e:	4b47      	ldr	r3, [pc, #284]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d005      	beq.n	8006186 <HAL_RCC_OscConfig+0x17a>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d001      	beq.n	8006186 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e1e9      	b.n	800655a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006186:	4b41      	ldr	r3, [pc, #260]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	493d      	ldr	r1, [pc, #244]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 8006196:	4313      	orrs	r3, r2
 8006198:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800619a:	e040      	b.n	800621e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d023      	beq.n	80061ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061a4:	4b39      	ldr	r3, [pc, #228]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a38      	ldr	r2, [pc, #224]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 80061aa:	f043 0301 	orr.w	r3, r3, #1
 80061ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b0:	f7fc f844 	bl	800223c <HAL_GetTick>
 80061b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061b8:	f7fc f840 	bl	800223c <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e1c7      	b.n	800655a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ca:	4b30      	ldr	r3, [pc, #192]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d0f0      	beq.n	80061b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061d6:	4b2d      	ldr	r3, [pc, #180]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	4929      	ldr	r1, [pc, #164]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	600b      	str	r3, [r1, #0]
 80061ea:	e018      	b.n	800621e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061ec:	4b27      	ldr	r3, [pc, #156]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a26      	ldr	r2, [pc, #152]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 80061f2:	f023 0301 	bic.w	r3, r3, #1
 80061f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f8:	f7fc f820 	bl	800223c <HAL_GetTick>
 80061fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061fe:	e008      	b.n	8006212 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006200:	f7fc f81c 	bl	800223c <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b02      	cmp	r3, #2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e1a3      	b.n	800655a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006212:	4b1e      	ldr	r3, [pc, #120]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1f0      	bne.n	8006200 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d038      	beq.n	800629c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d019      	beq.n	8006266 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006232:	4b16      	ldr	r3, [pc, #88]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 8006234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006236:	4a15      	ldr	r2, [pc, #84]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 8006238:	f043 0301 	orr.w	r3, r3, #1
 800623c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800623e:	f7fb fffd 	bl	800223c <HAL_GetTick>
 8006242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006244:	e008      	b.n	8006258 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006246:	f7fb fff9 	bl	800223c <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e180      	b.n	800655a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006258:	4b0c      	ldr	r3, [pc, #48]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 800625a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0f0      	beq.n	8006246 <HAL_RCC_OscConfig+0x23a>
 8006264:	e01a      	b.n	800629c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006266:	4b09      	ldr	r3, [pc, #36]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 8006268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800626a:	4a08      	ldr	r2, [pc, #32]	@ (800628c <HAL_RCC_OscConfig+0x280>)
 800626c:	f023 0301 	bic.w	r3, r3, #1
 8006270:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006272:	f7fb ffe3 	bl	800223c <HAL_GetTick>
 8006276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006278:	e00a      	b.n	8006290 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800627a:	f7fb ffdf 	bl	800223c <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d903      	bls.n	8006290 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e166      	b.n	800655a <HAL_RCC_OscConfig+0x54e>
 800628c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006290:	4b92      	ldr	r3, [pc, #584]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 8006292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1ee      	bne.n	800627a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 80a4 	beq.w	80063f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062aa:	4b8c      	ldr	r3, [pc, #560]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 80062ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10d      	bne.n	80062d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80062b6:	4b89      	ldr	r3, [pc, #548]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 80062b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ba:	4a88      	ldr	r2, [pc, #544]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 80062bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80062c2:	4b86      	ldr	r3, [pc, #536]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 80062c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ca:	60bb      	str	r3, [r7, #8]
 80062cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062ce:	2301      	movs	r3, #1
 80062d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062d2:	4b83      	ldr	r3, [pc, #524]	@ (80064e0 <HAL_RCC_OscConfig+0x4d4>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d118      	bne.n	8006310 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80062de:	4b80      	ldr	r3, [pc, #512]	@ (80064e0 <HAL_RCC_OscConfig+0x4d4>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a7f      	ldr	r2, [pc, #508]	@ (80064e0 <HAL_RCC_OscConfig+0x4d4>)
 80062e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062ea:	f7fb ffa7 	bl	800223c <HAL_GetTick>
 80062ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062f0:	e008      	b.n	8006304 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062f2:	f7fb ffa3 	bl	800223c <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b64      	cmp	r3, #100	@ 0x64
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e12a      	b.n	800655a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006304:	4b76      	ldr	r3, [pc, #472]	@ (80064e0 <HAL_RCC_OscConfig+0x4d4>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0f0      	beq.n	80062f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d106      	bne.n	8006326 <HAL_RCC_OscConfig+0x31a>
 8006318:	4b70      	ldr	r3, [pc, #448]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 800631a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800631c:	4a6f      	ldr	r2, [pc, #444]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 800631e:	f043 0301 	orr.w	r3, r3, #1
 8006322:	6713      	str	r3, [r2, #112]	@ 0x70
 8006324:	e02d      	b.n	8006382 <HAL_RCC_OscConfig+0x376>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10c      	bne.n	8006348 <HAL_RCC_OscConfig+0x33c>
 800632e:	4b6b      	ldr	r3, [pc, #428]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 8006330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006332:	4a6a      	ldr	r2, [pc, #424]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	6713      	str	r3, [r2, #112]	@ 0x70
 800633a:	4b68      	ldr	r3, [pc, #416]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 800633c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800633e:	4a67      	ldr	r2, [pc, #412]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 8006340:	f023 0304 	bic.w	r3, r3, #4
 8006344:	6713      	str	r3, [r2, #112]	@ 0x70
 8006346:	e01c      	b.n	8006382 <HAL_RCC_OscConfig+0x376>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	2b05      	cmp	r3, #5
 800634e:	d10c      	bne.n	800636a <HAL_RCC_OscConfig+0x35e>
 8006350:	4b62      	ldr	r3, [pc, #392]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 8006352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006354:	4a61      	ldr	r2, [pc, #388]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 8006356:	f043 0304 	orr.w	r3, r3, #4
 800635a:	6713      	str	r3, [r2, #112]	@ 0x70
 800635c:	4b5f      	ldr	r3, [pc, #380]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 800635e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006360:	4a5e      	ldr	r2, [pc, #376]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 8006362:	f043 0301 	orr.w	r3, r3, #1
 8006366:	6713      	str	r3, [r2, #112]	@ 0x70
 8006368:	e00b      	b.n	8006382 <HAL_RCC_OscConfig+0x376>
 800636a:	4b5c      	ldr	r3, [pc, #368]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 800636c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800636e:	4a5b      	ldr	r2, [pc, #364]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 8006370:	f023 0301 	bic.w	r3, r3, #1
 8006374:	6713      	str	r3, [r2, #112]	@ 0x70
 8006376:	4b59      	ldr	r3, [pc, #356]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 8006378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800637a:	4a58      	ldr	r2, [pc, #352]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 800637c:	f023 0304 	bic.w	r3, r3, #4
 8006380:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d015      	beq.n	80063b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800638a:	f7fb ff57 	bl	800223c <HAL_GetTick>
 800638e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006390:	e00a      	b.n	80063a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006392:	f7fb ff53 	bl	800223c <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d901      	bls.n	80063a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e0d8      	b.n	800655a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063a8:	4b4c      	ldr	r3, [pc, #304]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 80063aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d0ee      	beq.n	8006392 <HAL_RCC_OscConfig+0x386>
 80063b4:	e014      	b.n	80063e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b6:	f7fb ff41 	bl	800223c <HAL_GetTick>
 80063ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063bc:	e00a      	b.n	80063d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063be:	f7fb ff3d 	bl	800223c <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e0c2      	b.n	800655a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063d4:	4b41      	ldr	r3, [pc, #260]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 80063d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1ee      	bne.n	80063be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80063e0:	7dfb      	ldrb	r3, [r7, #23]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d105      	bne.n	80063f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063e6:	4b3d      	ldr	r3, [pc, #244]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 80063e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ea:	4a3c      	ldr	r2, [pc, #240]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 80063ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063f0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 80ae 	beq.w	8006558 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063fc:	4b37      	ldr	r3, [pc, #220]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f003 030c 	and.w	r3, r3, #12
 8006404:	2b08      	cmp	r3, #8
 8006406:	d06d      	beq.n	80064e4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	2b02      	cmp	r3, #2
 800640e:	d14b      	bne.n	80064a8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006410:	4b32      	ldr	r3, [pc, #200]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a31      	ldr	r2, [pc, #196]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 8006416:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800641a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800641c:	f7fb ff0e 	bl	800223c <HAL_GetTick>
 8006420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006422:	e008      	b.n	8006436 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006424:	f7fb ff0a 	bl	800223c <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d901      	bls.n	8006436 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e091      	b.n	800655a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006436:	4b29      	ldr	r3, [pc, #164]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1f0      	bne.n	8006424 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	69da      	ldr	r2, [r3, #28]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	431a      	orrs	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006450:	019b      	lsls	r3, r3, #6
 8006452:	431a      	orrs	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006458:	085b      	lsrs	r3, r3, #1
 800645a:	3b01      	subs	r3, #1
 800645c:	041b      	lsls	r3, r3, #16
 800645e:	431a      	orrs	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006464:	061b      	lsls	r3, r3, #24
 8006466:	431a      	orrs	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646c:	071b      	lsls	r3, r3, #28
 800646e:	491b      	ldr	r1, [pc, #108]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 8006470:	4313      	orrs	r3, r2
 8006472:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006474:	4b19      	ldr	r3, [pc, #100]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a18      	ldr	r2, [pc, #96]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 800647a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800647e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006480:	f7fb fedc 	bl	800223c <HAL_GetTick>
 8006484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006488:	f7fb fed8 	bl	800223c <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e05f      	b.n	800655a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800649a:	4b10      	ldr	r3, [pc, #64]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0f0      	beq.n	8006488 <HAL_RCC_OscConfig+0x47c>
 80064a6:	e057      	b.n	8006558 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064a8:	4b0c      	ldr	r3, [pc, #48]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a0b      	ldr	r2, [pc, #44]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 80064ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b4:	f7fb fec2 	bl	800223c <HAL_GetTick>
 80064b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064bc:	f7fb febe 	bl	800223c <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e045      	b.n	800655a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ce:	4b03      	ldr	r3, [pc, #12]	@ (80064dc <HAL_RCC_OscConfig+0x4d0>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1f0      	bne.n	80064bc <HAL_RCC_OscConfig+0x4b0>
 80064da:	e03d      	b.n	8006558 <HAL_RCC_OscConfig+0x54c>
 80064dc:	40023800 	.word	0x40023800
 80064e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80064e4:	4b1f      	ldr	r3, [pc, #124]	@ (8006564 <HAL_RCC_OscConfig+0x558>)
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d030      	beq.n	8006554 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d129      	bne.n	8006554 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800650a:	429a      	cmp	r2, r3
 800650c:	d122      	bne.n	8006554 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006514:	4013      	ands	r3, r2
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800651a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800651c:	4293      	cmp	r3, r2
 800651e:	d119      	bne.n	8006554 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800652a:	085b      	lsrs	r3, r3, #1
 800652c:	3b01      	subs	r3, #1
 800652e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006530:	429a      	cmp	r2, r3
 8006532:	d10f      	bne.n	8006554 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006540:	429a      	cmp	r2, r3
 8006542:	d107      	bne.n	8006554 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800654e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006550:	429a      	cmp	r2, r3
 8006552:	d001      	beq.n	8006558 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e000      	b.n	800655a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	40023800 	.word	0x40023800

08006568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e0d0      	b.n	8006722 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006580:	4b6a      	ldr	r3, [pc, #424]	@ (800672c <HAL_RCC_ClockConfig+0x1c4>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 030f 	and.w	r3, r3, #15
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	429a      	cmp	r2, r3
 800658c:	d910      	bls.n	80065b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800658e:	4b67      	ldr	r3, [pc, #412]	@ (800672c <HAL_RCC_ClockConfig+0x1c4>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f023 020f 	bic.w	r2, r3, #15
 8006596:	4965      	ldr	r1, [pc, #404]	@ (800672c <HAL_RCC_ClockConfig+0x1c4>)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	4313      	orrs	r3, r2
 800659c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800659e:	4b63      	ldr	r3, [pc, #396]	@ (800672c <HAL_RCC_ClockConfig+0x1c4>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 030f 	and.w	r3, r3, #15
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d001      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e0b8      	b.n	8006722 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d020      	beq.n	80065fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d005      	beq.n	80065d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065c8:	4b59      	ldr	r3, [pc, #356]	@ (8006730 <HAL_RCC_ClockConfig+0x1c8>)
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	4a58      	ldr	r2, [pc, #352]	@ (8006730 <HAL_RCC_ClockConfig+0x1c8>)
 80065ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80065d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0308 	and.w	r3, r3, #8
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d005      	beq.n	80065ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065e0:	4b53      	ldr	r3, [pc, #332]	@ (8006730 <HAL_RCC_ClockConfig+0x1c8>)
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	4a52      	ldr	r2, [pc, #328]	@ (8006730 <HAL_RCC_ClockConfig+0x1c8>)
 80065e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80065ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065ec:	4b50      	ldr	r3, [pc, #320]	@ (8006730 <HAL_RCC_ClockConfig+0x1c8>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	494d      	ldr	r1, [pc, #308]	@ (8006730 <HAL_RCC_ClockConfig+0x1c8>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d040      	beq.n	800668c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d107      	bne.n	8006622 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006612:	4b47      	ldr	r3, [pc, #284]	@ (8006730 <HAL_RCC_ClockConfig+0x1c8>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d115      	bne.n	800664a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e07f      	b.n	8006722 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2b02      	cmp	r3, #2
 8006628:	d107      	bne.n	800663a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800662a:	4b41      	ldr	r3, [pc, #260]	@ (8006730 <HAL_RCC_ClockConfig+0x1c8>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d109      	bne.n	800664a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e073      	b.n	8006722 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800663a:	4b3d      	ldr	r3, [pc, #244]	@ (8006730 <HAL_RCC_ClockConfig+0x1c8>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e06b      	b.n	8006722 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800664a:	4b39      	ldr	r3, [pc, #228]	@ (8006730 <HAL_RCC_ClockConfig+0x1c8>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f023 0203 	bic.w	r2, r3, #3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	4936      	ldr	r1, [pc, #216]	@ (8006730 <HAL_RCC_ClockConfig+0x1c8>)
 8006658:	4313      	orrs	r3, r2
 800665a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800665c:	f7fb fdee 	bl	800223c <HAL_GetTick>
 8006660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006662:	e00a      	b.n	800667a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006664:	f7fb fdea 	bl	800223c <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006672:	4293      	cmp	r3, r2
 8006674:	d901      	bls.n	800667a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e053      	b.n	8006722 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800667a:	4b2d      	ldr	r3, [pc, #180]	@ (8006730 <HAL_RCC_ClockConfig+0x1c8>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 020c 	and.w	r2, r3, #12
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	429a      	cmp	r2, r3
 800668a:	d1eb      	bne.n	8006664 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800668c:	4b27      	ldr	r3, [pc, #156]	@ (800672c <HAL_RCC_ClockConfig+0x1c4>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 030f 	and.w	r3, r3, #15
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	429a      	cmp	r2, r3
 8006698:	d210      	bcs.n	80066bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800669a:	4b24      	ldr	r3, [pc, #144]	@ (800672c <HAL_RCC_ClockConfig+0x1c4>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f023 020f 	bic.w	r2, r3, #15
 80066a2:	4922      	ldr	r1, [pc, #136]	@ (800672c <HAL_RCC_ClockConfig+0x1c4>)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066aa:	4b20      	ldr	r3, [pc, #128]	@ (800672c <HAL_RCC_ClockConfig+0x1c4>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 030f 	and.w	r3, r3, #15
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d001      	beq.n	80066bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e032      	b.n	8006722 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d008      	beq.n	80066da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066c8:	4b19      	ldr	r3, [pc, #100]	@ (8006730 <HAL_RCC_ClockConfig+0x1c8>)
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	4916      	ldr	r1, [pc, #88]	@ (8006730 <HAL_RCC_ClockConfig+0x1c8>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0308 	and.w	r3, r3, #8
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d009      	beq.n	80066fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80066e6:	4b12      	ldr	r3, [pc, #72]	@ (8006730 <HAL_RCC_ClockConfig+0x1c8>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	490e      	ldr	r1, [pc, #56]	@ (8006730 <HAL_RCC_ClockConfig+0x1c8>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80066fa:	f000 f821 	bl	8006740 <HAL_RCC_GetSysClockFreq>
 80066fe:	4602      	mov	r2, r0
 8006700:	4b0b      	ldr	r3, [pc, #44]	@ (8006730 <HAL_RCC_ClockConfig+0x1c8>)
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	091b      	lsrs	r3, r3, #4
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	490a      	ldr	r1, [pc, #40]	@ (8006734 <HAL_RCC_ClockConfig+0x1cc>)
 800670c:	5ccb      	ldrb	r3, [r1, r3]
 800670e:	fa22 f303 	lsr.w	r3, r2, r3
 8006712:	4a09      	ldr	r2, [pc, #36]	@ (8006738 <HAL_RCC_ClockConfig+0x1d0>)
 8006714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006716:	4b09      	ldr	r3, [pc, #36]	@ (800673c <HAL_RCC_ClockConfig+0x1d4>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4618      	mov	r0, r3
 800671c:	f7fb faae 	bl	8001c7c <HAL_InitTick>

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	40023c00 	.word	0x40023c00
 8006730:	40023800 	.word	0x40023800
 8006734:	08021c08 	.word	0x08021c08
 8006738:	20000000 	.word	0x20000000
 800673c:	20000004 	.word	0x20000004

08006740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006744:	b094      	sub	sp, #80	@ 0x50
 8006746:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006748:	2300      	movs	r3, #0
 800674a:	647b      	str	r3, [r7, #68]	@ 0x44
 800674c:	2300      	movs	r3, #0
 800674e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006750:	2300      	movs	r3, #0
 8006752:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8006754:	2300      	movs	r3, #0
 8006756:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006758:	4b79      	ldr	r3, [pc, #484]	@ (8006940 <HAL_RCC_GetSysClockFreq+0x200>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f003 030c 	and.w	r3, r3, #12
 8006760:	2b08      	cmp	r3, #8
 8006762:	d00d      	beq.n	8006780 <HAL_RCC_GetSysClockFreq+0x40>
 8006764:	2b08      	cmp	r3, #8
 8006766:	f200 80e1 	bhi.w	800692c <HAL_RCC_GetSysClockFreq+0x1ec>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <HAL_RCC_GetSysClockFreq+0x34>
 800676e:	2b04      	cmp	r3, #4
 8006770:	d003      	beq.n	800677a <HAL_RCC_GetSysClockFreq+0x3a>
 8006772:	e0db      	b.n	800692c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006774:	4b73      	ldr	r3, [pc, #460]	@ (8006944 <HAL_RCC_GetSysClockFreq+0x204>)
 8006776:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006778:	e0db      	b.n	8006932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800677a:	4b73      	ldr	r3, [pc, #460]	@ (8006948 <HAL_RCC_GetSysClockFreq+0x208>)
 800677c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800677e:	e0d8      	b.n	8006932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006780:	4b6f      	ldr	r3, [pc, #444]	@ (8006940 <HAL_RCC_GetSysClockFreq+0x200>)
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006788:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800678a:	4b6d      	ldr	r3, [pc, #436]	@ (8006940 <HAL_RCC_GetSysClockFreq+0x200>)
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d063      	beq.n	800685e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006796:	4b6a      	ldr	r3, [pc, #424]	@ (8006940 <HAL_RCC_GetSysClockFreq+0x200>)
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	099b      	lsrs	r3, r3, #6
 800679c:	2200      	movs	r2, #0
 800679e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80067a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80067aa:	2300      	movs	r3, #0
 80067ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80067b2:	4622      	mov	r2, r4
 80067b4:	462b      	mov	r3, r5
 80067b6:	f04f 0000 	mov.w	r0, #0
 80067ba:	f04f 0100 	mov.w	r1, #0
 80067be:	0159      	lsls	r1, r3, #5
 80067c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067c4:	0150      	lsls	r0, r2, #5
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	4621      	mov	r1, r4
 80067cc:	1a51      	subs	r1, r2, r1
 80067ce:	6139      	str	r1, [r7, #16]
 80067d0:	4629      	mov	r1, r5
 80067d2:	eb63 0301 	sbc.w	r3, r3, r1
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	f04f 0200 	mov.w	r2, #0
 80067dc:	f04f 0300 	mov.w	r3, #0
 80067e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067e4:	4659      	mov	r1, fp
 80067e6:	018b      	lsls	r3, r1, #6
 80067e8:	4651      	mov	r1, sl
 80067ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067ee:	4651      	mov	r1, sl
 80067f0:	018a      	lsls	r2, r1, #6
 80067f2:	4651      	mov	r1, sl
 80067f4:	ebb2 0801 	subs.w	r8, r2, r1
 80067f8:	4659      	mov	r1, fp
 80067fa:	eb63 0901 	sbc.w	r9, r3, r1
 80067fe:	f04f 0200 	mov.w	r2, #0
 8006802:	f04f 0300 	mov.w	r3, #0
 8006806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800680a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800680e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006812:	4690      	mov	r8, r2
 8006814:	4699      	mov	r9, r3
 8006816:	4623      	mov	r3, r4
 8006818:	eb18 0303 	adds.w	r3, r8, r3
 800681c:	60bb      	str	r3, [r7, #8]
 800681e:	462b      	mov	r3, r5
 8006820:	eb49 0303 	adc.w	r3, r9, r3
 8006824:	60fb      	str	r3, [r7, #12]
 8006826:	f04f 0200 	mov.w	r2, #0
 800682a:	f04f 0300 	mov.w	r3, #0
 800682e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006832:	4629      	mov	r1, r5
 8006834:	024b      	lsls	r3, r1, #9
 8006836:	4621      	mov	r1, r4
 8006838:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800683c:	4621      	mov	r1, r4
 800683e:	024a      	lsls	r2, r1, #9
 8006840:	4610      	mov	r0, r2
 8006842:	4619      	mov	r1, r3
 8006844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006846:	2200      	movs	r2, #0
 8006848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800684a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800684c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006850:	f7f9 fdae 	bl	80003b0 <__aeabi_uldivmod>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	4613      	mov	r3, r2
 800685a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800685c:	e058      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800685e:	4b38      	ldr	r3, [pc, #224]	@ (8006940 <HAL_RCC_GetSysClockFreq+0x200>)
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	099b      	lsrs	r3, r3, #6
 8006864:	2200      	movs	r2, #0
 8006866:	4618      	mov	r0, r3
 8006868:	4611      	mov	r1, r2
 800686a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800686e:	623b      	str	r3, [r7, #32]
 8006870:	2300      	movs	r3, #0
 8006872:	627b      	str	r3, [r7, #36]	@ 0x24
 8006874:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006878:	4642      	mov	r2, r8
 800687a:	464b      	mov	r3, r9
 800687c:	f04f 0000 	mov.w	r0, #0
 8006880:	f04f 0100 	mov.w	r1, #0
 8006884:	0159      	lsls	r1, r3, #5
 8006886:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800688a:	0150      	lsls	r0, r2, #5
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	4641      	mov	r1, r8
 8006892:	ebb2 0a01 	subs.w	sl, r2, r1
 8006896:	4649      	mov	r1, r9
 8006898:	eb63 0b01 	sbc.w	fp, r3, r1
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	f04f 0300 	mov.w	r3, #0
 80068a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80068a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80068ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80068b0:	ebb2 040a 	subs.w	r4, r2, sl
 80068b4:	eb63 050b 	sbc.w	r5, r3, fp
 80068b8:	f04f 0200 	mov.w	r2, #0
 80068bc:	f04f 0300 	mov.w	r3, #0
 80068c0:	00eb      	lsls	r3, r5, #3
 80068c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068c6:	00e2      	lsls	r2, r4, #3
 80068c8:	4614      	mov	r4, r2
 80068ca:	461d      	mov	r5, r3
 80068cc:	4643      	mov	r3, r8
 80068ce:	18e3      	adds	r3, r4, r3
 80068d0:	603b      	str	r3, [r7, #0]
 80068d2:	464b      	mov	r3, r9
 80068d4:	eb45 0303 	adc.w	r3, r5, r3
 80068d8:	607b      	str	r3, [r7, #4]
 80068da:	f04f 0200 	mov.w	r2, #0
 80068de:	f04f 0300 	mov.w	r3, #0
 80068e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068e6:	4629      	mov	r1, r5
 80068e8:	028b      	lsls	r3, r1, #10
 80068ea:	4621      	mov	r1, r4
 80068ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068f0:	4621      	mov	r1, r4
 80068f2:	028a      	lsls	r2, r1, #10
 80068f4:	4610      	mov	r0, r2
 80068f6:	4619      	mov	r1, r3
 80068f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068fa:	2200      	movs	r2, #0
 80068fc:	61bb      	str	r3, [r7, #24]
 80068fe:	61fa      	str	r2, [r7, #28]
 8006900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006904:	f7f9 fd54 	bl	80003b0 <__aeabi_uldivmod>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	4613      	mov	r3, r2
 800690e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006910:	4b0b      	ldr	r3, [pc, #44]	@ (8006940 <HAL_RCC_GetSysClockFreq+0x200>)
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	0c1b      	lsrs	r3, r3, #16
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	3301      	adds	r3, #1
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006920:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006924:	fbb2 f3f3 	udiv	r3, r2, r3
 8006928:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800692a:	e002      	b.n	8006932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800692c:	4b05      	ldr	r3, [pc, #20]	@ (8006944 <HAL_RCC_GetSysClockFreq+0x204>)
 800692e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006934:	4618      	mov	r0, r3
 8006936:	3750      	adds	r7, #80	@ 0x50
 8006938:	46bd      	mov	sp, r7
 800693a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800693e:	bf00      	nop
 8006940:	40023800 	.word	0x40023800
 8006944:	00f42400 	.word	0x00f42400
 8006948:	007a1200 	.word	0x007a1200

0800694c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006950:	4b03      	ldr	r3, [pc, #12]	@ (8006960 <HAL_RCC_GetHCLKFreq+0x14>)
 8006952:	681b      	ldr	r3, [r3, #0]
}
 8006954:	4618      	mov	r0, r3
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	20000000 	.word	0x20000000

08006964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006968:	f7ff fff0 	bl	800694c <HAL_RCC_GetHCLKFreq>
 800696c:	4602      	mov	r2, r0
 800696e:	4b05      	ldr	r3, [pc, #20]	@ (8006984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	0a9b      	lsrs	r3, r3, #10
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	4903      	ldr	r1, [pc, #12]	@ (8006988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800697a:	5ccb      	ldrb	r3, [r1, r3]
 800697c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006980:	4618      	mov	r0, r3
 8006982:	bd80      	pop	{r7, pc}
 8006984:	40023800 	.word	0x40023800
 8006988:	08021c18 	.word	0x08021c18

0800698c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	220f      	movs	r2, #15
 800699a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800699c:	4b12      	ldr	r3, [pc, #72]	@ (80069e8 <HAL_RCC_GetClockConfig+0x5c>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f003 0203 	and.w	r2, r3, #3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80069a8:	4b0f      	ldr	r3, [pc, #60]	@ (80069e8 <HAL_RCC_GetClockConfig+0x5c>)
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80069b4:	4b0c      	ldr	r3, [pc, #48]	@ (80069e8 <HAL_RCC_GetClockConfig+0x5c>)
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80069c0:	4b09      	ldr	r3, [pc, #36]	@ (80069e8 <HAL_RCC_GetClockConfig+0x5c>)
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	08db      	lsrs	r3, r3, #3
 80069c6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80069ce:	4b07      	ldr	r3, [pc, #28]	@ (80069ec <HAL_RCC_GetClockConfig+0x60>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 020f 	and.w	r2, r3, #15
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	601a      	str	r2, [r3, #0]
}
 80069da:	bf00      	nop
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	40023800 	.word	0x40023800
 80069ec:	40023c00 	.word	0x40023c00

080069f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b088      	sub	sp, #32
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006a04:	2300      	movs	r3, #0
 8006a06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d012      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a18:	4b69      	ldr	r3, [pc, #420]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	4a68      	ldr	r2, [pc, #416]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a1e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006a22:	6093      	str	r3, [r2, #8]
 8006a24:	4b66      	ldr	r3, [pc, #408]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a2c:	4964      	ldr	r1, [pc, #400]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d017      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a4a:	4b5d      	ldr	r3, [pc, #372]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a50:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a58:	4959      	ldr	r1, [pc, #356]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a68:	d101      	bne.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006a76:	2301      	movs	r3, #1
 8006a78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d017      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006a86:	4b4e      	ldr	r3, [pc, #312]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a8c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a94:	494a      	ldr	r1, [pc, #296]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006aa4:	d101      	bne.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0320 	and.w	r3, r3, #32
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 808b 	beq.w	8006bea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ad4:	4b3a      	ldr	r3, [pc, #232]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad8:	4a39      	ldr	r2, [pc, #228]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ade:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ae0:	4b37      	ldr	r3, [pc, #220]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ae8:	60bb      	str	r3, [r7, #8]
 8006aea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006aec:	4b35      	ldr	r3, [pc, #212]	@ (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a34      	ldr	r2, [pc, #208]	@ (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006af6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006af8:	f7fb fba0 	bl	800223c <HAL_GetTick>
 8006afc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006afe:	e008      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b00:	f7fb fb9c 	bl	800223c <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	2b64      	cmp	r3, #100	@ 0x64
 8006b0c:	d901      	bls.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e38f      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006b12:	4b2c      	ldr	r3, [pc, #176]	@ (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0f0      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b1e:	4b28      	ldr	r3, [pc, #160]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d035      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d02e      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b3c:	4b20      	ldr	r3, [pc, #128]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b46:	4b1e      	ldr	r3, [pc, #120]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b50:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b52:	4b1b      	ldr	r3, [pc, #108]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b56:	4a1a      	ldr	r2, [pc, #104]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b5c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006b5e:	4a18      	ldr	r2, [pc, #96]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b64:	4b16      	ldr	r3, [pc, #88]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d114      	bne.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b70:	f7fb fb64 	bl	800223c <HAL_GetTick>
 8006b74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b76:	e00a      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b78:	f7fb fb60 	bl	800223c <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e351      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0ee      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ba2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ba6:	d111      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006ba8:	4b05      	ldr	r3, [pc, #20]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006bb4:	4b04      	ldr	r3, [pc, #16]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006bb6:	400b      	ands	r3, r1
 8006bb8:	4901      	ldr	r1, [pc, #4]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	608b      	str	r3, [r1, #8]
 8006bbe:	e00b      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006bc0:	40023800 	.word	0x40023800
 8006bc4:	40007000 	.word	0x40007000
 8006bc8:	0ffffcff 	.word	0x0ffffcff
 8006bcc:	4bac      	ldr	r3, [pc, #688]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	4aab      	ldr	r2, [pc, #684]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006bd2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006bd6:	6093      	str	r3, [r2, #8]
 8006bd8:	4ba9      	ldr	r3, [pc, #676]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006bda:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006be4:	49a6      	ldr	r1, [pc, #664]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0310 	and.w	r3, r3, #16
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d010      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bf6:	4ba2      	ldr	r3, [pc, #648]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bfc:	4aa0      	ldr	r2, [pc, #640]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006bfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006c06:	4b9e      	ldr	r3, [pc, #632]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c08:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c10:	499b      	ldr	r1, [pc, #620]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00a      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c24:	4b96      	ldr	r3, [pc, #600]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c2a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c32:	4993      	ldr	r1, [pc, #588]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c46:	4b8e      	ldr	r3, [pc, #568]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c54:	498a      	ldr	r1, [pc, #552]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c68:	4b85      	ldr	r3, [pc, #532]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c76:	4982      	ldr	r1, [pc, #520]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c8a:	4b7d      	ldr	r3, [pc, #500]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c90:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c98:	4979      	ldr	r1, [pc, #484]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00a      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006cac:	4b74      	ldr	r3, [pc, #464]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cb2:	f023 0203 	bic.w	r2, r3, #3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cba:	4971      	ldr	r1, [pc, #452]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006cce:	4b6c      	ldr	r3, [pc, #432]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cd4:	f023 020c 	bic.w	r2, r3, #12
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cdc:	4968      	ldr	r1, [pc, #416]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00a      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006cf0:	4b63      	ldr	r3, [pc, #396]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cf6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cfe:	4960      	ldr	r1, [pc, #384]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00a      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006d12:	4b5b      	ldr	r3, [pc, #364]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d18:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d20:	4957      	ldr	r1, [pc, #348]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00a      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006d34:	4b52      	ldr	r3, [pc, #328]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d3a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d42:	494f      	ldr	r1, [pc, #316]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00a      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006d56:	4b4a      	ldr	r3, [pc, #296]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d5c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d64:	4946      	ldr	r1, [pc, #280]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00a      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006d78:	4b41      	ldr	r3, [pc, #260]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d7e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d86:	493e      	ldr	r1, [pc, #248]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006d9a:	4b39      	ldr	r3, [pc, #228]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006da0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006da8:	4935      	ldr	r1, [pc, #212]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006dbc:	4b30      	ldr	r3, [pc, #192]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dc2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006dca:	492d      	ldr	r1, [pc, #180]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d011      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006dde:	4b28      	ldr	r3, [pc, #160]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006de4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006dec:	4924      	ldr	r1, [pc, #144]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006df8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dfc:	d101      	bne.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0308 	and.w	r3, r3, #8
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e1e:	4b18      	ldr	r3, [pc, #96]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e24:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e2c:	4914      	ldr	r1, [pc, #80]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00b      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006e40:	4b0f      	ldr	r3, [pc, #60]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e46:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e50:	490b      	ldr	r1, [pc, #44]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00f      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006e64:	4b06      	ldr	r3, [pc, #24]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e6a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e74:	4902      	ldr	r1, [pc, #8]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006e7c:	e002      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006e7e:	bf00      	nop
 8006e80:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e90:	4b8a      	ldr	r3, [pc, #552]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e96:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea0:	4986      	ldr	r1, [pc, #536]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00b      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006eb4:	4b81      	ldr	r3, [pc, #516]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006eba:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ec4:	497d      	ldr	r1, [pc, #500]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d006      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 80d6 	beq.w	800708c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ee0:	4b76      	ldr	r3, [pc, #472]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a75      	ldr	r2, [pc, #468]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ee6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006eea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eec:	f7fb f9a6 	bl	800223c <HAL_GetTick>
 8006ef0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ef2:	e008      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ef4:	f7fb f9a2 	bl	800223c <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b64      	cmp	r3, #100	@ 0x64
 8006f00:	d901      	bls.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e195      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f06:	4b6d      	ldr	r3, [pc, #436]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f0      	bne.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d021      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d11d      	bne.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006f26:	4b65      	ldr	r3, [pc, #404]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f2c:	0c1b      	lsrs	r3, r3, #16
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006f34:	4b61      	ldr	r3, [pc, #388]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f3a:	0e1b      	lsrs	r3, r3, #24
 8006f3c:	f003 030f 	and.w	r3, r3, #15
 8006f40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	019a      	lsls	r2, r3, #6
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	041b      	lsls	r3, r3, #16
 8006f4c:	431a      	orrs	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	061b      	lsls	r3, r3, #24
 8006f52:	431a      	orrs	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	071b      	lsls	r3, r3, #28
 8006f5a:	4958      	ldr	r1, [pc, #352]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d004      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f76:	d00a      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d02e      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f8c:	d129      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006f8e:	4b4b      	ldr	r3, [pc, #300]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f94:	0c1b      	lsrs	r3, r3, #16
 8006f96:	f003 0303 	and.w	r3, r3, #3
 8006f9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f9c:	4b47      	ldr	r3, [pc, #284]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fa2:	0f1b      	lsrs	r3, r3, #28
 8006fa4:	f003 0307 	and.w	r3, r3, #7
 8006fa8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	019a      	lsls	r2, r3, #6
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	041b      	lsls	r3, r3, #16
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	061b      	lsls	r3, r3, #24
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	071b      	lsls	r3, r3, #28
 8006fc2:	493e      	ldr	r1, [pc, #248]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006fca:	4b3c      	ldr	r3, [pc, #240]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fd0:	f023 021f 	bic.w	r2, r3, #31
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	4938      	ldr	r1, [pc, #224]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d01d      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006fee:	4b33      	ldr	r3, [pc, #204]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ff4:	0e1b      	lsrs	r3, r3, #24
 8006ff6:	f003 030f 	and.w	r3, r3, #15
 8006ffa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ffc:	4b2f      	ldr	r3, [pc, #188]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007002:	0f1b      	lsrs	r3, r3, #28
 8007004:	f003 0307 	and.w	r3, r3, #7
 8007008:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	019a      	lsls	r2, r3, #6
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	041b      	lsls	r3, r3, #16
 8007016:	431a      	orrs	r2, r3
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	061b      	lsls	r3, r3, #24
 800701c:	431a      	orrs	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	071b      	lsls	r3, r3, #28
 8007022:	4926      	ldr	r1, [pc, #152]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007024:	4313      	orrs	r3, r2
 8007026:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d011      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	019a      	lsls	r2, r3, #6
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	041b      	lsls	r3, r3, #16
 8007042:	431a      	orrs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	061b      	lsls	r3, r3, #24
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	071b      	lsls	r3, r3, #28
 8007052:	491a      	ldr	r1, [pc, #104]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007054:	4313      	orrs	r3, r2
 8007056:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800705a:	4b18      	ldr	r3, [pc, #96]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a17      	ldr	r2, [pc, #92]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007060:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007066:	f7fb f8e9 	bl	800223c <HAL_GetTick>
 800706a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800706c:	e008      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800706e:	f7fb f8e5 	bl	800223c <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	2b64      	cmp	r3, #100	@ 0x64
 800707a:	d901      	bls.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e0d8      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007080:	4b0e      	ldr	r3, [pc, #56]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0f0      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	2b01      	cmp	r3, #1
 8007090:	f040 80ce 	bne.w	8007230 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007094:	4b09      	ldr	r3, [pc, #36]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a08      	ldr	r2, [pc, #32]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800709a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800709e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070a0:	f7fb f8cc 	bl	800223c <HAL_GetTick>
 80070a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070a6:	e00b      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80070a8:	f7fb f8c8 	bl	800223c <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b64      	cmp	r3, #100	@ 0x64
 80070b4:	d904      	bls.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e0bb      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80070ba:	bf00      	nop
 80070bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070c0:	4b5e      	ldr	r3, [pc, #376]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070cc:	d0ec      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d003      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d009      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d02e      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d12a      	bne.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80070f6:	4b51      	ldr	r3, [pc, #324]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80070f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070fc:	0c1b      	lsrs	r3, r3, #16
 80070fe:	f003 0303 	and.w	r3, r3, #3
 8007102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007104:	4b4d      	ldr	r3, [pc, #308]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800710a:	0f1b      	lsrs	r3, r3, #28
 800710c:	f003 0307 	and.w	r3, r3, #7
 8007110:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	019a      	lsls	r2, r3, #6
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	041b      	lsls	r3, r3, #16
 800711c:	431a      	orrs	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	061b      	lsls	r3, r3, #24
 8007124:	431a      	orrs	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	071b      	lsls	r3, r3, #28
 800712a:	4944      	ldr	r1, [pc, #272]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800712c:	4313      	orrs	r3, r2
 800712e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007132:	4b42      	ldr	r3, [pc, #264]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007138:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007140:	3b01      	subs	r3, #1
 8007142:	021b      	lsls	r3, r3, #8
 8007144:	493d      	ldr	r1, [pc, #244]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007146:	4313      	orrs	r3, r2
 8007148:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d022      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800715c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007160:	d11d      	bne.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007162:	4b36      	ldr	r3, [pc, #216]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007168:	0e1b      	lsrs	r3, r3, #24
 800716a:	f003 030f 	and.w	r3, r3, #15
 800716e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007170:	4b32      	ldr	r3, [pc, #200]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007176:	0f1b      	lsrs	r3, r3, #28
 8007178:	f003 0307 	and.w	r3, r3, #7
 800717c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	019a      	lsls	r2, r3, #6
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	041b      	lsls	r3, r3, #16
 800718a:	431a      	orrs	r2, r3
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	061b      	lsls	r3, r3, #24
 8007190:	431a      	orrs	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	071b      	lsls	r3, r3, #28
 8007196:	4929      	ldr	r1, [pc, #164]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007198:	4313      	orrs	r3, r2
 800719a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0308 	and.w	r3, r3, #8
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d028      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80071aa:	4b24      	ldr	r3, [pc, #144]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80071ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071b0:	0e1b      	lsrs	r3, r3, #24
 80071b2:	f003 030f 	and.w	r3, r3, #15
 80071b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80071b8:	4b20      	ldr	r3, [pc, #128]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80071ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071be:	0c1b      	lsrs	r3, r3, #16
 80071c0:	f003 0303 	and.w	r3, r3, #3
 80071c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	019a      	lsls	r2, r3, #6
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	041b      	lsls	r3, r3, #16
 80071d0:	431a      	orrs	r2, r3
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	061b      	lsls	r3, r3, #24
 80071d6:	431a      	orrs	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	071b      	lsls	r3, r3, #28
 80071de:	4917      	ldr	r1, [pc, #92]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80071e6:	4b15      	ldr	r3, [pc, #84]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80071e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f4:	4911      	ldr	r1, [pc, #68]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80071fc:	4b0f      	ldr	r3, [pc, #60]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a0e      	ldr	r2, [pc, #56]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007206:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007208:	f7fb f818 	bl	800223c <HAL_GetTick>
 800720c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800720e:	e008      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007210:	f7fb f814 	bl	800223c <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b64      	cmp	r3, #100	@ 0x64
 800721c:	d901      	bls.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e007      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007222:	4b06      	ldr	r3, [pc, #24]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800722a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800722e:	d1ef      	bne.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3720      	adds	r7, #32
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	40023800 	.word	0x40023800

08007240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e049      	b.n	80072e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d106      	bne.n	800726c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f841 	bl	80072ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3304      	adds	r3, #4
 800727c:	4619      	mov	r1, r3
 800727e:	4610      	mov	r0, r2
 8007280:	f000 f9e8 	bl	8007654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b083      	sub	sp, #12
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80072f6:	bf00      	nop
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
	...

08007304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b01      	cmp	r3, #1
 8007316:	d001      	beq.n	800731c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e054      	b.n	80073c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68da      	ldr	r2, [r3, #12]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f042 0201 	orr.w	r2, r2, #1
 8007332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a26      	ldr	r2, [pc, #152]	@ (80073d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d022      	beq.n	8007384 <HAL_TIM_Base_Start_IT+0x80>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007346:	d01d      	beq.n	8007384 <HAL_TIM_Base_Start_IT+0x80>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a22      	ldr	r2, [pc, #136]	@ (80073d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d018      	beq.n	8007384 <HAL_TIM_Base_Start_IT+0x80>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a21      	ldr	r2, [pc, #132]	@ (80073dc <HAL_TIM_Base_Start_IT+0xd8>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d013      	beq.n	8007384 <HAL_TIM_Base_Start_IT+0x80>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a1f      	ldr	r2, [pc, #124]	@ (80073e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d00e      	beq.n	8007384 <HAL_TIM_Base_Start_IT+0x80>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a1e      	ldr	r2, [pc, #120]	@ (80073e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d009      	beq.n	8007384 <HAL_TIM_Base_Start_IT+0x80>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a1c      	ldr	r2, [pc, #112]	@ (80073e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d004      	beq.n	8007384 <HAL_TIM_Base_Start_IT+0x80>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a1b      	ldr	r2, [pc, #108]	@ (80073ec <HAL_TIM_Base_Start_IT+0xe8>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d115      	bne.n	80073b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689a      	ldr	r2, [r3, #8]
 800738a:	4b19      	ldr	r3, [pc, #100]	@ (80073f0 <HAL_TIM_Base_Start_IT+0xec>)
 800738c:	4013      	ands	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2b06      	cmp	r3, #6
 8007394:	d015      	beq.n	80073c2 <HAL_TIM_Base_Start_IT+0xbe>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800739c:	d011      	beq.n	80073c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f042 0201 	orr.w	r2, r2, #1
 80073ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ae:	e008      	b.n	80073c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f042 0201 	orr.w	r2, r2, #1
 80073be:	601a      	str	r2, [r3, #0]
 80073c0:	e000      	b.n	80073c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	40010000 	.word	0x40010000
 80073d8:	40000400 	.word	0x40000400
 80073dc:	40000800 	.word	0x40000800
 80073e0:	40000c00 	.word	0x40000c00
 80073e4:	40010400 	.word	0x40010400
 80073e8:	40014000 	.word	0x40014000
 80073ec:	40001800 	.word	0x40001800
 80073f0:	00010007 	.word	0x00010007

080073f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f003 0302 	and.w	r3, r3, #2
 8007412:	2b00      	cmp	r3, #0
 8007414:	d020      	beq.n	8007458 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d01b      	beq.n	8007458 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f06f 0202 	mvn.w	r2, #2
 8007428:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d003      	beq.n	8007446 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f8e9 	bl	8007616 <HAL_TIM_IC_CaptureCallback>
 8007444:	e005      	b.n	8007452 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f8db 	bl	8007602 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f8ec 	bl	800762a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f003 0304 	and.w	r3, r3, #4
 800745e:	2b00      	cmp	r3, #0
 8007460:	d020      	beq.n	80074a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01b      	beq.n	80074a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f06f 0204 	mvn.w	r2, #4
 8007474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2202      	movs	r2, #2
 800747a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f8c3 	bl	8007616 <HAL_TIM_IC_CaptureCallback>
 8007490:	e005      	b.n	800749e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f8b5 	bl	8007602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f8c6 	bl	800762a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f003 0308 	and.w	r3, r3, #8
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d020      	beq.n	80074f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f003 0308 	and.w	r3, r3, #8
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d01b      	beq.n	80074f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f06f 0208 	mvn.w	r2, #8
 80074c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2204      	movs	r2, #4
 80074c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	f003 0303 	and.w	r3, r3, #3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f89d 	bl	8007616 <HAL_TIM_IC_CaptureCallback>
 80074dc:	e005      	b.n	80074ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f88f 	bl	8007602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f8a0 	bl	800762a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f003 0310 	and.w	r3, r3, #16
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d020      	beq.n	800753c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f003 0310 	and.w	r3, r3, #16
 8007500:	2b00      	cmp	r3, #0
 8007502:	d01b      	beq.n	800753c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f06f 0210 	mvn.w	r2, #16
 800750c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2208      	movs	r2, #8
 8007512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f877 	bl	8007616 <HAL_TIM_IC_CaptureCallback>
 8007528:	e005      	b.n	8007536 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f869 	bl	8007602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f87a 	bl	800762a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00c      	beq.n	8007560 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	2b00      	cmp	r3, #0
 800754e:	d007      	beq.n	8007560 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f06f 0201 	mvn.w	r2, #1
 8007558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7fa faf0 	bl	8001b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007566:	2b00      	cmp	r3, #0
 8007568:	d104      	bne.n	8007574 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00c      	beq.n	800758e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800757a:	2b00      	cmp	r3, #0
 800757c:	d007      	beq.n	800758e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f919 	bl	80077c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00c      	beq.n	80075b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d007      	beq.n	80075b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80075aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f911 	bl	80077d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00c      	beq.n	80075d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d007      	beq.n	80075d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80075ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f834 	bl	800763e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f003 0320 	and.w	r3, r3, #32
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00c      	beq.n	80075fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f003 0320 	and.w	r3, r3, #32
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d007      	beq.n	80075fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f06f 0220 	mvn.w	r2, #32
 80075f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f8d9 	bl	80077ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075fa:	bf00      	nop
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007602:	b480      	push	{r7}
 8007604:	b083      	sub	sp, #12
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800760a:	bf00      	nop
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007632:	bf00      	nop
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800763e:	b480      	push	{r7}
 8007640:	b083      	sub	sp, #12
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007646:	bf00      	nop
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
	...

08007654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a46      	ldr	r2, [pc, #280]	@ (8007780 <TIM_Base_SetConfig+0x12c>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d013      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007672:	d00f      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a43      	ldr	r2, [pc, #268]	@ (8007784 <TIM_Base_SetConfig+0x130>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00b      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a42      	ldr	r2, [pc, #264]	@ (8007788 <TIM_Base_SetConfig+0x134>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d007      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a41      	ldr	r2, [pc, #260]	@ (800778c <TIM_Base_SetConfig+0x138>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d003      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a40      	ldr	r2, [pc, #256]	@ (8007790 <TIM_Base_SetConfig+0x13c>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d108      	bne.n	80076a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800769a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a35      	ldr	r2, [pc, #212]	@ (8007780 <TIM_Base_SetConfig+0x12c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d02b      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076b4:	d027      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a32      	ldr	r2, [pc, #200]	@ (8007784 <TIM_Base_SetConfig+0x130>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d023      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a31      	ldr	r2, [pc, #196]	@ (8007788 <TIM_Base_SetConfig+0x134>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d01f      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a30      	ldr	r2, [pc, #192]	@ (800778c <TIM_Base_SetConfig+0x138>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d01b      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a2f      	ldr	r2, [pc, #188]	@ (8007790 <TIM_Base_SetConfig+0x13c>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d017      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a2e      	ldr	r2, [pc, #184]	@ (8007794 <TIM_Base_SetConfig+0x140>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d013      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007798 <TIM_Base_SetConfig+0x144>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d00f      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a2c      	ldr	r2, [pc, #176]	@ (800779c <TIM_Base_SetConfig+0x148>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00b      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a2b      	ldr	r2, [pc, #172]	@ (80077a0 <TIM_Base_SetConfig+0x14c>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d007      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a2a      	ldr	r2, [pc, #168]	@ (80077a4 <TIM_Base_SetConfig+0x150>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d003      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a29      	ldr	r2, [pc, #164]	@ (80077a8 <TIM_Base_SetConfig+0x154>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d108      	bne.n	8007718 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800770c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	4313      	orrs	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	689a      	ldr	r2, [r3, #8]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a10      	ldr	r2, [pc, #64]	@ (8007780 <TIM_Base_SetConfig+0x12c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d003      	beq.n	800774c <TIM_Base_SetConfig+0xf8>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a12      	ldr	r2, [pc, #72]	@ (8007790 <TIM_Base_SetConfig+0x13c>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d103      	bne.n	8007754 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	691a      	ldr	r2, [r3, #16]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b01      	cmp	r3, #1
 8007764:	d105      	bne.n	8007772 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f023 0201 	bic.w	r2, r3, #1
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	611a      	str	r2, [r3, #16]
  }
}
 8007772:	bf00      	nop
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	40010000 	.word	0x40010000
 8007784:	40000400 	.word	0x40000400
 8007788:	40000800 	.word	0x40000800
 800778c:	40000c00 	.word	0x40000c00
 8007790:	40010400 	.word	0x40010400
 8007794:	40014000 	.word	0x40014000
 8007798:	40014400 	.word	0x40014400
 800779c:	40014800 	.word	0x40014800
 80077a0:	40001800 	.word	0x40001800
 80077a4:	40001c00 	.word	0x40001c00
 80077a8:	40002000 	.word	0x40002000

080077ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077e8:	b084      	sub	sp, #16
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	f107 001c 	add.w	r0, r7, #28
 80077f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077fa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d121      	bne.n	8007846 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007806:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68da      	ldr	r2, [r3, #12]
 8007812:	4b21      	ldr	r3, [pc, #132]	@ (8007898 <USB_CoreInit+0xb0>)
 8007814:	4013      	ands	r3, r2
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007826:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800782a:	2b01      	cmp	r3, #1
 800782c:	d105      	bne.n	800783a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f001 fade 	bl	8008dfc <USB_CoreReset>
 8007840:	4603      	mov	r3, r0
 8007842:	73fb      	strb	r3, [r7, #15]
 8007844:	e010      	b.n	8007868 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f001 fad2 	bl	8008dfc <USB_CoreReset>
 8007858:	4603      	mov	r3, r0
 800785a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007860:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8007868:	7fbb      	ldrb	r3, [r7, #30]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d10b      	bne.n	8007886 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f043 0206 	orr.w	r2, r3, #6
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f043 0220 	orr.w	r2, r3, #32
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007886:	7bfb      	ldrb	r3, [r7, #15]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007892:	b004      	add	sp, #16
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	ffbdffbf 	.word	0xffbdffbf

0800789c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	4613      	mov	r3, r2
 80078a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80078aa:	79fb      	ldrb	r3, [r7, #7]
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d165      	bne.n	800797c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	4a41      	ldr	r2, [pc, #260]	@ (80079b8 <USB_SetTurnaroundTime+0x11c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d906      	bls.n	80078c6 <USB_SetTurnaroundTime+0x2a>
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	4a40      	ldr	r2, [pc, #256]	@ (80079bc <USB_SetTurnaroundTime+0x120>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d202      	bcs.n	80078c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80078c0:	230f      	movs	r3, #15
 80078c2:	617b      	str	r3, [r7, #20]
 80078c4:	e062      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	4a3c      	ldr	r2, [pc, #240]	@ (80079bc <USB_SetTurnaroundTime+0x120>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d306      	bcc.n	80078dc <USB_SetTurnaroundTime+0x40>
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	4a3b      	ldr	r2, [pc, #236]	@ (80079c0 <USB_SetTurnaroundTime+0x124>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d202      	bcs.n	80078dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80078d6:	230e      	movs	r3, #14
 80078d8:	617b      	str	r3, [r7, #20]
 80078da:	e057      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	4a38      	ldr	r2, [pc, #224]	@ (80079c0 <USB_SetTurnaroundTime+0x124>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d306      	bcc.n	80078f2 <USB_SetTurnaroundTime+0x56>
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	4a37      	ldr	r2, [pc, #220]	@ (80079c4 <USB_SetTurnaroundTime+0x128>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d202      	bcs.n	80078f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80078ec:	230d      	movs	r3, #13
 80078ee:	617b      	str	r3, [r7, #20]
 80078f0:	e04c      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	4a33      	ldr	r2, [pc, #204]	@ (80079c4 <USB_SetTurnaroundTime+0x128>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d306      	bcc.n	8007908 <USB_SetTurnaroundTime+0x6c>
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	4a32      	ldr	r2, [pc, #200]	@ (80079c8 <USB_SetTurnaroundTime+0x12c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d802      	bhi.n	8007908 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007902:	230c      	movs	r3, #12
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	e041      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	4a2f      	ldr	r2, [pc, #188]	@ (80079c8 <USB_SetTurnaroundTime+0x12c>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d906      	bls.n	800791e <USB_SetTurnaroundTime+0x82>
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	4a2e      	ldr	r2, [pc, #184]	@ (80079cc <USB_SetTurnaroundTime+0x130>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d802      	bhi.n	800791e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007918:	230b      	movs	r3, #11
 800791a:	617b      	str	r3, [r7, #20]
 800791c:	e036      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	4a2a      	ldr	r2, [pc, #168]	@ (80079cc <USB_SetTurnaroundTime+0x130>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d906      	bls.n	8007934 <USB_SetTurnaroundTime+0x98>
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	4a29      	ldr	r2, [pc, #164]	@ (80079d0 <USB_SetTurnaroundTime+0x134>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d802      	bhi.n	8007934 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800792e:	230a      	movs	r3, #10
 8007930:	617b      	str	r3, [r7, #20]
 8007932:	e02b      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	4a26      	ldr	r2, [pc, #152]	@ (80079d0 <USB_SetTurnaroundTime+0x134>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d906      	bls.n	800794a <USB_SetTurnaroundTime+0xae>
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	4a25      	ldr	r2, [pc, #148]	@ (80079d4 <USB_SetTurnaroundTime+0x138>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d202      	bcs.n	800794a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007944:	2309      	movs	r3, #9
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	e020      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	4a21      	ldr	r2, [pc, #132]	@ (80079d4 <USB_SetTurnaroundTime+0x138>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d306      	bcc.n	8007960 <USB_SetTurnaroundTime+0xc4>
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	4a20      	ldr	r2, [pc, #128]	@ (80079d8 <USB_SetTurnaroundTime+0x13c>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d802      	bhi.n	8007960 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800795a:	2308      	movs	r3, #8
 800795c:	617b      	str	r3, [r7, #20]
 800795e:	e015      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	4a1d      	ldr	r2, [pc, #116]	@ (80079d8 <USB_SetTurnaroundTime+0x13c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d906      	bls.n	8007976 <USB_SetTurnaroundTime+0xda>
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4a1c      	ldr	r2, [pc, #112]	@ (80079dc <USB_SetTurnaroundTime+0x140>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d202      	bcs.n	8007976 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007970:	2307      	movs	r3, #7
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	e00a      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007976:	2306      	movs	r3, #6
 8007978:	617b      	str	r3, [r7, #20]
 800797a:	e007      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800797c:	79fb      	ldrb	r3, [r7, #7]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d102      	bne.n	8007988 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007982:	2309      	movs	r3, #9
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	e001      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007988:	2309      	movs	r3, #9
 800798a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	68da      	ldr	r2, [r3, #12]
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	029b      	lsls	r3, r3, #10
 80079a0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80079a4:	431a      	orrs	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	371c      	adds	r7, #28
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	00d8acbf 	.word	0x00d8acbf
 80079bc:	00e4e1c0 	.word	0x00e4e1c0
 80079c0:	00f42400 	.word	0x00f42400
 80079c4:	01067380 	.word	0x01067380
 80079c8:	011a499f 	.word	0x011a499f
 80079cc:	01312cff 	.word	0x01312cff
 80079d0:	014ca43f 	.word	0x014ca43f
 80079d4:	016e3600 	.word	0x016e3600
 80079d8:	01a6ab1f 	.word	0x01a6ab1f
 80079dc:	01e84800 	.word	0x01e84800

080079e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f043 0201 	orr.w	r2, r3, #1
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f023 0201 	bic.w	r2, r3, #1
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d115      	bne.n	8007a72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007a52:	200a      	movs	r0, #10
 8007a54:	f7fa fbfe 	bl	8002254 <HAL_Delay>
      ms += 10U;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	330a      	adds	r3, #10
 8007a5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f001 f93b 	bl	8008cda <USB_GetMode>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d01e      	beq.n	8007aa8 <USB_SetCurrentMode+0x84>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2bc7      	cmp	r3, #199	@ 0xc7
 8007a6e:	d9f0      	bls.n	8007a52 <USB_SetCurrentMode+0x2e>
 8007a70:	e01a      	b.n	8007aa8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a72:	78fb      	ldrb	r3, [r7, #3]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d115      	bne.n	8007aa4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007a84:	200a      	movs	r0, #10
 8007a86:	f7fa fbe5 	bl	8002254 <HAL_Delay>
      ms += 10U;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	330a      	adds	r3, #10
 8007a8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 f922 	bl	8008cda <USB_GetMode>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <USB_SetCurrentMode+0x84>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007aa0:	d9f0      	bls.n	8007a84 <USB_SetCurrentMode+0x60>
 8007aa2:	e001      	b.n	8007aa8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e005      	b.n	8007ab4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2bc8      	cmp	r3, #200	@ 0xc8
 8007aac:	d101      	bne.n	8007ab2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e000      	b.n	8007ab4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007abc:	b084      	sub	sp, #16
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b086      	sub	sp, #24
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007aca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	613b      	str	r3, [r7, #16]
 8007ada:	e009      	b.n	8007af0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	3340      	adds	r3, #64	@ 0x40
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	3301      	adds	r3, #1
 8007aee:	613b      	str	r3, [r7, #16]
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	2b0e      	cmp	r3, #14
 8007af4:	d9f2      	bls.n	8007adc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007af6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d11c      	bne.n	8007b38 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b0c:	f043 0302 	orr.w	r3, r3, #2
 8007b10:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b16:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	e005      	b.n	8007b44 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b50:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d10d      	bne.n	8007b74 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007b58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d104      	bne.n	8007b6a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007b60:	2100      	movs	r1, #0
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f968 	bl	8007e38 <USB_SetDevSpeed>
 8007b68:	e008      	b.n	8007b7c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f963 	bl	8007e38 <USB_SetDevSpeed>
 8007b72:	e003      	b.n	8007b7c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b74:	2103      	movs	r1, #3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f95e 	bl	8007e38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b7c:	2110      	movs	r1, #16
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f8fa 	bl	8007d78 <USB_FlushTxFifo>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f924 	bl	8007ddc <USB_FlushRxFifo>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	613b      	str	r3, [r7, #16]
 8007bc6:	e043      	b.n	8007c50 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bde:	d118      	bne.n	8007c12 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10a      	bne.n	8007bfc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	e013      	b.n	8007c24 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	015a      	lsls	r2, r3, #5
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	4413      	add	r3, r2
 8007c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c08:	461a      	mov	r2, r3
 8007c0a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007c0e:	6013      	str	r3, [r2, #0]
 8007c10:	e008      	b.n	8007c24 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c1e:	461a      	mov	r2, r3
 8007c20:	2300      	movs	r3, #0
 8007c22:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	015a      	lsls	r2, r3, #5
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c30:	461a      	mov	r2, r3
 8007c32:	2300      	movs	r3, #0
 8007c34:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	015a      	lsls	r2, r3, #5
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c42:	461a      	mov	r2, r3
 8007c44:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007c48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	613b      	str	r3, [r7, #16]
 8007c50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007c54:	461a      	mov	r2, r3
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d3b5      	bcc.n	8007bc8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	613b      	str	r3, [r7, #16]
 8007c60:	e043      	b.n	8007cea <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c78:	d118      	bne.n	8007cac <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10a      	bne.n	8007c96 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007c92:	6013      	str	r3, [r2, #0]
 8007c94:	e013      	b.n	8007cbe <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007ca8:	6013      	str	r3, [r2, #0]
 8007caa:	e008      	b.n	8007cbe <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cb8:	461a      	mov	r2, r3
 8007cba:	2300      	movs	r3, #0
 8007cbc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cca:	461a      	mov	r2, r3
 8007ccc:	2300      	movs	r3, #0
 8007cce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cdc:	461a      	mov	r2, r3
 8007cde:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ce2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	613b      	str	r3, [r7, #16]
 8007cea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007cee:	461a      	mov	r2, r3
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d3b5      	bcc.n	8007c62 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d08:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007d16:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d105      	bne.n	8007d2c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	f043 0210 	orr.w	r2, r3, #16
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	699a      	ldr	r2, [r3, #24]
 8007d30:	4b0f      	ldr	r3, [pc, #60]	@ (8007d70 <USB_DevInit+0x2b4>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d38:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d005      	beq.n	8007d4c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	f043 0208 	orr.w	r2, r3, #8
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d4c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d105      	bne.n	8007d60 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	699a      	ldr	r2, [r3, #24]
 8007d58:	4b06      	ldr	r3, [pc, #24]	@ (8007d74 <USB_DevInit+0x2b8>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d6c:	b004      	add	sp, #16
 8007d6e:	4770      	bx	lr
 8007d70:	803c3800 	.word	0x803c3800
 8007d74:	40000004 	.word	0x40000004

08007d78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d92:	d901      	bls.n	8007d98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e01b      	b.n	8007dd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	daf2      	bge.n	8007d86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007da0:	2300      	movs	r3, #0
 8007da2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	019b      	lsls	r3, r3, #6
 8007da8:	f043 0220 	orr.w	r2, r3, #32
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	3301      	adds	r3, #1
 8007db4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007dbc:	d901      	bls.n	8007dc2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e006      	b.n	8007dd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	f003 0320 	and.w	r3, r3, #32
 8007dca:	2b20      	cmp	r3, #32
 8007dcc:	d0f0      	beq.n	8007db0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007de4:	2300      	movs	r3, #0
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3301      	adds	r3, #1
 8007dec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007df4:	d901      	bls.n	8007dfa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e018      	b.n	8007e2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	daf2      	bge.n	8007de8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2210      	movs	r2, #16
 8007e0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e18:	d901      	bls.n	8007e1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e006      	b.n	8007e2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	f003 0310 	and.w	r3, r3, #16
 8007e26:	2b10      	cmp	r3, #16
 8007e28:	d0f0      	beq.n	8007e0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	78fb      	ldrb	r3, [r7, #3]
 8007e52:	68f9      	ldr	r1, [r7, #12]
 8007e54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b087      	sub	sp, #28
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f003 0306 	and.w	r3, r3, #6
 8007e82:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d102      	bne.n	8007e90 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	75fb      	strb	r3, [r7, #23]
 8007e8e:	e00a      	b.n	8007ea6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d002      	beq.n	8007e9c <USB_GetDevSpeed+0x32>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b06      	cmp	r3, #6
 8007e9a:	d102      	bne.n	8007ea2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	75fb      	strb	r3, [r7, #23]
 8007ea0:	e001      	b.n	8007ea6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007ea2:	230f      	movs	r3, #15
 8007ea4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	371c      	adds	r7, #28
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	785b      	ldrb	r3, [r3, #1]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d139      	bne.n	8007f44 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ed6:	69da      	ldr	r2, [r3, #28]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	f003 030f 	and.w	r3, r3, #15
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	68f9      	ldr	r1, [r7, #12]
 8007eea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d153      	bne.n	8007fb0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	015a      	lsls	r2, r3, #5
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4413      	add	r3, r2
 8007f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	791b      	ldrb	r3, [r3, #4]
 8007f22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	059b      	lsls	r3, r3, #22
 8007f2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	0159      	lsls	r1, r3, #5
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	440b      	add	r3, r1
 8007f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	4b20      	ldr	r3, [pc, #128]	@ (8007fc0 <USB_ActivateEndpoint+0x10c>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	600b      	str	r3, [r1, #0]
 8007f42:	e035      	b.n	8007fb0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f4a:	69da      	ldr	r2, [r3, #28]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	f003 030f 	and.w	r3, r3, #15
 8007f54:	2101      	movs	r1, #1
 8007f56:	fa01 f303 	lsl.w	r3, r1, r3
 8007f5a:	041b      	lsls	r3, r3, #16
 8007f5c:	68f9      	ldr	r1, [r7, #12]
 8007f5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f62:	4313      	orrs	r3, r2
 8007f64:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	015a      	lsls	r2, r3, #5
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d119      	bne.n	8007fb0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	791b      	ldrb	r3, [r3, #4]
 8007f96:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f98:	430b      	orrs	r3, r1
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	0159      	lsls	r1, r3, #5
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	440b      	add	r3, r1
 8007fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fa8:	4619      	mov	r1, r3
 8007faa:	4b05      	ldr	r3, [pc, #20]	@ (8007fc0 <USB_ActivateEndpoint+0x10c>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	10008000 	.word	0x10008000

08007fc4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	785b      	ldrb	r3, [r3, #1]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d161      	bne.n	80080a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ff6:	d11f      	bne.n	8008038 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	0151      	lsls	r1, r2, #5
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	440a      	add	r2, r1
 800800e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008012:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008016:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	440a      	add	r2, r1
 800802e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008032:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008036:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800803e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	f003 030f 	and.w	r3, r3, #15
 8008048:	2101      	movs	r1, #1
 800804a:	fa01 f303 	lsl.w	r3, r1, r3
 800804e:	b29b      	uxth	r3, r3
 8008050:	43db      	mvns	r3, r3
 8008052:	68f9      	ldr	r1, [r7, #12]
 8008054:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008058:	4013      	ands	r3, r2
 800805a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008062:	69da      	ldr	r2, [r3, #28]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	f003 030f 	and.w	r3, r3, #15
 800806c:	2101      	movs	r1, #1
 800806e:	fa01 f303 	lsl.w	r3, r1, r3
 8008072:	b29b      	uxth	r3, r3
 8008074:	43db      	mvns	r3, r3
 8008076:	68f9      	ldr	r1, [r7, #12]
 8008078:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800807c:	4013      	ands	r3, r2
 800807e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	0159      	lsls	r1, r3, #5
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	440b      	add	r3, r1
 8008096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800809a:	4619      	mov	r1, r3
 800809c:	4b35      	ldr	r3, [pc, #212]	@ (8008174 <USB_DeactivateEndpoint+0x1b0>)
 800809e:	4013      	ands	r3, r2
 80080a0:	600b      	str	r3, [r1, #0]
 80080a2:	e060      	b.n	8008166 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080ba:	d11f      	bne.n	80080fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	0151      	lsls	r1, r2, #5
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	440a      	add	r2, r1
 80080d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80080da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	0151      	lsls	r1, r2, #5
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	440a      	add	r2, r1
 80080f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008102:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	f003 030f 	and.w	r3, r3, #15
 800810c:	2101      	movs	r1, #1
 800810e:	fa01 f303 	lsl.w	r3, r1, r3
 8008112:	041b      	lsls	r3, r3, #16
 8008114:	43db      	mvns	r3, r3
 8008116:	68f9      	ldr	r1, [r7, #12]
 8008118:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800811c:	4013      	ands	r3, r2
 800811e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008126:	69da      	ldr	r2, [r3, #28]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	f003 030f 	and.w	r3, r3, #15
 8008130:	2101      	movs	r1, #1
 8008132:	fa01 f303 	lsl.w	r3, r1, r3
 8008136:	041b      	lsls	r3, r3, #16
 8008138:	43db      	mvns	r3, r3
 800813a:	68f9      	ldr	r1, [r7, #12]
 800813c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008140:	4013      	ands	r3, r2
 8008142:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	015a      	lsls	r2, r3, #5
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4413      	add	r3, r2
 800814c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	0159      	lsls	r1, r3, #5
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	440b      	add	r3, r1
 800815a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800815e:	4619      	mov	r1, r3
 8008160:	4b05      	ldr	r3, [pc, #20]	@ (8008178 <USB_DeactivateEndpoint+0x1b4>)
 8008162:	4013      	ands	r3, r2
 8008164:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr
 8008174:	ec337800 	.word	0xec337800
 8008178:	eff37800 	.word	0xeff37800

0800817c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b08a      	sub	sp, #40	@ 0x28
 8008180:	af02      	add	r7, sp, #8
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	4613      	mov	r3, r2
 8008188:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	785b      	ldrb	r3, [r3, #1]
 8008198:	2b01      	cmp	r3, #1
 800819a:	f040 8181 	bne.w	80084a0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d132      	bne.n	800820c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081b2:	691a      	ldr	r2, [r3, #16]
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	0159      	lsls	r1, r3, #5
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	440b      	add	r3, r1
 80081bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081c0:	4619      	mov	r1, r3
 80081c2:	4ba5      	ldr	r3, [pc, #660]	@ (8008458 <USB_EPStartXfer+0x2dc>)
 80081c4:	4013      	ands	r3, r2
 80081c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	69ba      	ldr	r2, [r7, #24]
 80081d8:	0151      	lsls	r1, r2, #5
 80081da:	69fa      	ldr	r2, [r7, #28]
 80081dc:	440a      	add	r2, r1
 80081de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80081e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081f4:	691a      	ldr	r2, [r3, #16]
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	0159      	lsls	r1, r3, #5
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	440b      	add	r3, r1
 80081fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008202:	4619      	mov	r1, r3
 8008204:	4b95      	ldr	r3, [pc, #596]	@ (800845c <USB_EPStartXfer+0x2e0>)
 8008206:	4013      	ands	r3, r2
 8008208:	610b      	str	r3, [r1, #16]
 800820a:	e092      	b.n	8008332 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	015a      	lsls	r2, r3, #5
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	4413      	add	r3, r2
 8008214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008218:	691a      	ldr	r2, [r3, #16]
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	0159      	lsls	r1, r3, #5
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	440b      	add	r3, r1
 8008222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008226:	4619      	mov	r1, r3
 8008228:	4b8c      	ldr	r3, [pc, #560]	@ (800845c <USB_EPStartXfer+0x2e0>)
 800822a:	4013      	ands	r3, r2
 800822c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800823a:	691a      	ldr	r2, [r3, #16]
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	0159      	lsls	r1, r3, #5
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	440b      	add	r3, r1
 8008244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008248:	4619      	mov	r1, r3
 800824a:	4b83      	ldr	r3, [pc, #524]	@ (8008458 <USB_EPStartXfer+0x2dc>)
 800824c:	4013      	ands	r3, r2
 800824e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d11a      	bne.n	800828c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	691a      	ldr	r2, [r3, #16]
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	429a      	cmp	r2, r3
 8008260:	d903      	bls.n	800826a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	689a      	ldr	r2, [r3, #8]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	015a      	lsls	r2, r3, #5
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	4413      	add	r3, r2
 8008272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	69ba      	ldr	r2, [r7, #24]
 800827a:	0151      	lsls	r1, r2, #5
 800827c:	69fa      	ldr	r2, [r7, #28]
 800827e:	440a      	add	r2, r1
 8008280:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008284:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008288:	6113      	str	r3, [r2, #16]
 800828a:	e01b      	b.n	80082c4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	4413      	add	r3, r2
 8008294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008298:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	6919      	ldr	r1, [r3, #16]
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	440b      	add	r3, r1
 80082a4:	1e59      	subs	r1, r3, #1
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80082ae:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80082b0:	4b6b      	ldr	r3, [pc, #428]	@ (8008460 <USB_EPStartXfer+0x2e4>)
 80082b2:	400b      	ands	r3, r1
 80082b4:	69b9      	ldr	r1, [r7, #24]
 80082b6:	0148      	lsls	r0, r1, #5
 80082b8:	69f9      	ldr	r1, [r7, #28]
 80082ba:	4401      	add	r1, r0
 80082bc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80082c0:	4313      	orrs	r3, r2
 80082c2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082d0:	691a      	ldr	r2, [r3, #16]
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082da:	69b9      	ldr	r1, [r7, #24]
 80082dc:	0148      	lsls	r0, r1, #5
 80082de:	69f9      	ldr	r1, [r7, #28]
 80082e0:	4401      	add	r1, r0
 80082e2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80082e6:	4313      	orrs	r3, r2
 80082e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	791b      	ldrb	r3, [r3, #4]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d11f      	bne.n	8008332 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	0151      	lsls	r1, r2, #5
 8008304:	69fa      	ldr	r2, [r7, #28]
 8008306:	440a      	add	r2, r1
 8008308:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800830c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008310:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	015a      	lsls	r2, r3, #5
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	4413      	add	r3, r2
 800831a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	69ba      	ldr	r2, [r7, #24]
 8008322:	0151      	lsls	r1, r2, #5
 8008324:	69fa      	ldr	r2, [r7, #28]
 8008326:	440a      	add	r2, r1
 8008328:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800832c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008330:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008332:	79fb      	ldrb	r3, [r7, #7]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d14b      	bne.n	80083d0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	69db      	ldr	r3, [r3, #28]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d009      	beq.n	8008354 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	4413      	add	r3, r2
 8008348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800834c:	461a      	mov	r2, r3
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	791b      	ldrb	r3, [r3, #4]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d128      	bne.n	80083ae <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008368:	2b00      	cmp	r3, #0
 800836a:	d110      	bne.n	800838e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	69ba      	ldr	r2, [r7, #24]
 800837c:	0151      	lsls	r1, r2, #5
 800837e:	69fa      	ldr	r2, [r7, #28]
 8008380:	440a      	add	r2, r1
 8008382:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008386:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800838a:	6013      	str	r3, [r2, #0]
 800838c:	e00f      	b.n	80083ae <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	4413      	add	r3, r2
 8008396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	69ba      	ldr	r2, [r7, #24]
 800839e:	0151      	lsls	r1, r2, #5
 80083a0:	69fa      	ldr	r2, [r7, #28]
 80083a2:	440a      	add	r2, r1
 80083a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	69ba      	ldr	r2, [r7, #24]
 80083be:	0151      	lsls	r1, r2, #5
 80083c0:	69fa      	ldr	r2, [r7, #28]
 80083c2:	440a      	add	r2, r1
 80083c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	e16a      	b.n	80086a6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	69ba      	ldr	r2, [r7, #24]
 80083e0:	0151      	lsls	r1, r2, #5
 80083e2:	69fa      	ldr	r2, [r7, #28]
 80083e4:	440a      	add	r2, r1
 80083e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80083ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	791b      	ldrb	r3, [r3, #4]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d015      	beq.n	8008424 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f000 8152 	beq.w	80086a6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008408:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	f003 030f 	and.w	r3, r3, #15
 8008412:	2101      	movs	r1, #1
 8008414:	fa01 f303 	lsl.w	r3, r1, r3
 8008418:	69f9      	ldr	r1, [r7, #28]
 800841a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800841e:	4313      	orrs	r3, r2
 8008420:	634b      	str	r3, [r1, #52]	@ 0x34
 8008422:	e140      	b.n	80086a6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008430:	2b00      	cmp	r3, #0
 8008432:	d117      	bne.n	8008464 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	4413      	add	r3, r2
 800843c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	69ba      	ldr	r2, [r7, #24]
 8008444:	0151      	lsls	r1, r2, #5
 8008446:	69fa      	ldr	r2, [r7, #28]
 8008448:	440a      	add	r2, r1
 800844a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800844e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008452:	6013      	str	r3, [r2, #0]
 8008454:	e016      	b.n	8008484 <USB_EPStartXfer+0x308>
 8008456:	bf00      	nop
 8008458:	e007ffff 	.word	0xe007ffff
 800845c:	fff80000 	.word	0xfff80000
 8008460:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	015a      	lsls	r2, r3, #5
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	4413      	add	r3, r2
 800846c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	69ba      	ldr	r2, [r7, #24]
 8008474:	0151      	lsls	r1, r2, #5
 8008476:	69fa      	ldr	r2, [r7, #28]
 8008478:	440a      	add	r2, r1
 800847a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800847e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008482:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	68d9      	ldr	r1, [r3, #12]
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	781a      	ldrb	r2, [r3, #0]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	b298      	uxth	r0, r3
 8008492:	79fb      	ldrb	r3, [r7, #7]
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	4603      	mov	r3, r0
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f000 f9b9 	bl	8008810 <USB_WritePacket>
 800849e:	e102      	b.n	80086a6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	015a      	lsls	r2, r3, #5
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	4413      	add	r3, r2
 80084a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ac:	691a      	ldr	r2, [r3, #16]
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	0159      	lsls	r1, r3, #5
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	440b      	add	r3, r1
 80084b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ba:	4619      	mov	r1, r3
 80084bc:	4b7c      	ldr	r3, [pc, #496]	@ (80086b0 <USB_EPStartXfer+0x534>)
 80084be:	4013      	ands	r3, r2
 80084c0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ce:	691a      	ldr	r2, [r3, #16]
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	0159      	lsls	r1, r3, #5
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	440b      	add	r3, r1
 80084d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084dc:	4619      	mov	r1, r3
 80084de:	4b75      	ldr	r3, [pc, #468]	@ (80086b4 <USB_EPStartXfer+0x538>)
 80084e0:	4013      	ands	r3, r2
 80084e2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d12f      	bne.n	800854a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	689a      	ldr	r2, [r3, #8]
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	689a      	ldr	r2, [r3, #8]
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	4413      	add	r3, r2
 800850a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800850e:	691a      	ldr	r2, [r3, #16]
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	6a1b      	ldr	r3, [r3, #32]
 8008514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008518:	69b9      	ldr	r1, [r7, #24]
 800851a:	0148      	lsls	r0, r1, #5
 800851c:	69f9      	ldr	r1, [r7, #28]
 800851e:	4401      	add	r1, r0
 8008520:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008524:	4313      	orrs	r3, r2
 8008526:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	4413      	add	r3, r2
 8008530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	69ba      	ldr	r2, [r7, #24]
 8008538:	0151      	lsls	r1, r2, #5
 800853a:	69fa      	ldr	r2, [r7, #28]
 800853c:	440a      	add	r2, r1
 800853e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008542:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008546:	6113      	str	r3, [r2, #16]
 8008548:	e05f      	b.n	800860a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d123      	bne.n	800859a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	015a      	lsls	r2, r3, #5
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	4413      	add	r3, r2
 800855a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800855e:	691a      	ldr	r2, [r3, #16]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008568:	69b9      	ldr	r1, [r7, #24]
 800856a:	0148      	lsls	r0, r1, #5
 800856c:	69f9      	ldr	r1, [r7, #28]
 800856e:	4401      	add	r1, r0
 8008570:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008574:	4313      	orrs	r3, r2
 8008576:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	015a      	lsls	r2, r3, #5
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	4413      	add	r3, r2
 8008580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	0151      	lsls	r1, r2, #5
 800858a:	69fa      	ldr	r2, [r7, #28]
 800858c:	440a      	add	r2, r1
 800858e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008592:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008596:	6113      	str	r3, [r2, #16]
 8008598:	e037      	b.n	800860a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	691a      	ldr	r2, [r3, #16]
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	4413      	add	r3, r2
 80085a4:	1e5a      	subs	r2, r3, #1
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ae:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	8afa      	ldrh	r2, [r7, #22]
 80085b6:	fb03 f202 	mul.w	r2, r3, r2
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	015a      	lsls	r2, r3, #5
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	4413      	add	r3, r2
 80085c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ca:	691a      	ldr	r2, [r3, #16]
 80085cc:	8afb      	ldrh	r3, [r7, #22]
 80085ce:	04d9      	lsls	r1, r3, #19
 80085d0:	4b39      	ldr	r3, [pc, #228]	@ (80086b8 <USB_EPStartXfer+0x53c>)
 80085d2:	400b      	ands	r3, r1
 80085d4:	69b9      	ldr	r1, [r7, #24]
 80085d6:	0148      	lsls	r0, r1, #5
 80085d8:	69f9      	ldr	r1, [r7, #28]
 80085da:	4401      	add	r1, r0
 80085dc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80085e0:	4313      	orrs	r3, r2
 80085e2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	015a      	lsls	r2, r3, #5
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	4413      	add	r3, r2
 80085ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085f0:	691a      	ldr	r2, [r3, #16]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085fa:	69b9      	ldr	r1, [r7, #24]
 80085fc:	0148      	lsls	r0, r1, #5
 80085fe:	69f9      	ldr	r1, [r7, #28]
 8008600:	4401      	add	r1, r0
 8008602:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008606:	4313      	orrs	r3, r2
 8008608:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800860a:	79fb      	ldrb	r3, [r7, #7]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d10d      	bne.n	800862c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d009      	beq.n	800862c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	68d9      	ldr	r1, [r3, #12]
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	4413      	add	r3, r2
 8008624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008628:	460a      	mov	r2, r1
 800862a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	791b      	ldrb	r3, [r3, #4]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d128      	bne.n	8008686 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008640:	2b00      	cmp	r3, #0
 8008642:	d110      	bne.n	8008666 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	4413      	add	r3, r2
 800864c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	69ba      	ldr	r2, [r7, #24]
 8008654:	0151      	lsls	r1, r2, #5
 8008656:	69fa      	ldr	r2, [r7, #28]
 8008658:	440a      	add	r2, r1
 800865a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800865e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008662:	6013      	str	r3, [r2, #0]
 8008664:	e00f      	b.n	8008686 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	015a      	lsls	r2, r3, #5
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	4413      	add	r3, r2
 800866e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	69ba      	ldr	r2, [r7, #24]
 8008676:	0151      	lsls	r1, r2, #5
 8008678:	69fa      	ldr	r2, [r7, #28]
 800867a:	440a      	add	r2, r1
 800867c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008684:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	015a      	lsls	r2, r3, #5
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	4413      	add	r3, r2
 800868e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	69ba      	ldr	r2, [r7, #24]
 8008696:	0151      	lsls	r1, r2, #5
 8008698:	69fa      	ldr	r2, [r7, #28]
 800869a:	440a      	add	r2, r1
 800869c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80086a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3720      	adds	r7, #32
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	fff80000 	.word	0xfff80000
 80086b4:	e007ffff 	.word	0xe007ffff
 80086b8:	1ff80000 	.word	0x1ff80000

080086bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	785b      	ldrb	r3, [r3, #1]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d14a      	bne.n	8008770 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	015a      	lsls	r2, r3, #5
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086f2:	f040 8086 	bne.w	8008802 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	015a      	lsls	r2, r3, #5
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	4413      	add	r3, r2
 8008700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	7812      	ldrb	r2, [r2, #0]
 800870a:	0151      	lsls	r1, r2, #5
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	440a      	add	r2, r1
 8008710:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008714:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008718:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	015a      	lsls	r2, r3, #5
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	4413      	add	r3, r2
 8008724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	7812      	ldrb	r2, [r2, #0]
 800872e:	0151      	lsls	r1, r2, #5
 8008730:	693a      	ldr	r2, [r7, #16]
 8008732:	440a      	add	r2, r1
 8008734:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008738:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800873c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	3301      	adds	r3, #1
 8008742:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f242 7210 	movw	r2, #10000	@ 0x2710
 800874a:	4293      	cmp	r3, r2
 800874c:	d902      	bls.n	8008754 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	75fb      	strb	r3, [r7, #23]
          break;
 8008752:	e056      	b.n	8008802 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	015a      	lsls	r2, r3, #5
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	4413      	add	r3, r2
 800875e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008768:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800876c:	d0e7      	beq.n	800873e <USB_EPStopXfer+0x82>
 800876e:	e048      	b.n	8008802 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	4413      	add	r3, r2
 800877a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008784:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008788:	d13b      	bne.n	8008802 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	015a      	lsls	r2, r3, #5
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	4413      	add	r3, r2
 8008794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	683a      	ldr	r2, [r7, #0]
 800879c:	7812      	ldrb	r2, [r2, #0]
 800879e:	0151      	lsls	r1, r2, #5
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	440a      	add	r2, r1
 80087a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80087ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	7812      	ldrb	r2, [r2, #0]
 80087c2:	0151      	lsls	r1, r2, #5
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	440a      	add	r2, r1
 80087c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80087d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	3301      	adds	r3, #1
 80087d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80087de:	4293      	cmp	r3, r2
 80087e0:	d902      	bls.n	80087e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	75fb      	strb	r3, [r7, #23]
          break;
 80087e6:	e00c      	b.n	8008802 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	015a      	lsls	r2, r3, #5
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	4413      	add	r3, r2
 80087f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008800:	d0e7      	beq.n	80087d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008802:	7dfb      	ldrb	r3, [r7, #23]
}
 8008804:	4618      	mov	r0, r3
 8008806:	371c      	adds	r7, #28
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008810:	b480      	push	{r7}
 8008812:	b089      	sub	sp, #36	@ 0x24
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	4611      	mov	r1, r2
 800881c:	461a      	mov	r2, r3
 800881e:	460b      	mov	r3, r1
 8008820:	71fb      	strb	r3, [r7, #7]
 8008822:	4613      	mov	r3, r2
 8008824:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800882e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008832:	2b00      	cmp	r3, #0
 8008834:	d123      	bne.n	800887e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008836:	88bb      	ldrh	r3, [r7, #4]
 8008838:	3303      	adds	r3, #3
 800883a:	089b      	lsrs	r3, r3, #2
 800883c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800883e:	2300      	movs	r3, #0
 8008840:	61bb      	str	r3, [r7, #24]
 8008842:	e018      	b.n	8008876 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008844:	79fb      	ldrb	r3, [r7, #7]
 8008846:	031a      	lsls	r2, r3, #12
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	4413      	add	r3, r2
 800884c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008850:	461a      	mov	r2, r3
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	3301      	adds	r3, #1
 800885c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	3301      	adds	r3, #1
 8008862:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	3301      	adds	r3, #1
 8008868:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	3301      	adds	r3, #1
 800886e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	3301      	adds	r3, #1
 8008874:	61bb      	str	r3, [r7, #24]
 8008876:	69ba      	ldr	r2, [r7, #24]
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	429a      	cmp	r2, r3
 800887c:	d3e2      	bcc.n	8008844 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3724      	adds	r7, #36	@ 0x24
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800888c:	b480      	push	{r7}
 800888e:	b08b      	sub	sp, #44	@ 0x2c
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	4613      	mov	r3, r2
 8008898:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80088a2:	88fb      	ldrh	r3, [r7, #6]
 80088a4:	089b      	lsrs	r3, r3, #2
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80088aa:	88fb      	ldrh	r3, [r7, #6]
 80088ac:	f003 0303 	and.w	r3, r3, #3
 80088b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80088b2:	2300      	movs	r3, #0
 80088b4:	623b      	str	r3, [r7, #32]
 80088b6:	e014      	b.n	80088e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80088c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c6:	3301      	adds	r3, #1
 80088c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80088ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088cc:	3301      	adds	r3, #1
 80088ce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80088d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d2:	3301      	adds	r3, #1
 80088d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80088d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d8:	3301      	adds	r3, #1
 80088da:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	3301      	adds	r3, #1
 80088e0:	623b      	str	r3, [r7, #32]
 80088e2:	6a3a      	ldr	r2, [r7, #32]
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d3e6      	bcc.n	80088b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80088ea:	8bfb      	ldrh	r3, [r7, #30]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d01e      	beq.n	800892e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80088f0:	2300      	movs	r3, #0
 80088f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088fa:	461a      	mov	r2, r3
 80088fc:	f107 0310 	add.w	r3, r7, #16
 8008900:	6812      	ldr	r2, [r2, #0]
 8008902:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	b2db      	uxtb	r3, r3
 800890a:	00db      	lsls	r3, r3, #3
 800890c:	fa22 f303 	lsr.w	r3, r2, r3
 8008910:	b2da      	uxtb	r2, r3
 8008912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008914:	701a      	strb	r2, [r3, #0]
      i++;
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	3301      	adds	r3, #1
 800891a:	623b      	str	r3, [r7, #32]
      pDest++;
 800891c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891e:	3301      	adds	r3, #1
 8008920:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008922:	8bfb      	ldrh	r3, [r7, #30]
 8008924:	3b01      	subs	r3, #1
 8008926:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008928:	8bfb      	ldrh	r3, [r7, #30]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1ea      	bne.n	8008904 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800892e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008930:	4618      	mov	r0, r3
 8008932:	372c      	adds	r7, #44	@ 0x2c
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	785b      	ldrb	r3, [r3, #1]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d12c      	bne.n	80089b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	015a      	lsls	r2, r3, #5
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	4413      	add	r3, r2
 8008960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	db12      	blt.n	8008990 <USB_EPSetStall+0x54>
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00f      	beq.n	8008990 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	015a      	lsls	r2, r3, #5
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4413      	add	r3, r2
 8008978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	68ba      	ldr	r2, [r7, #8]
 8008980:	0151      	lsls	r1, r2, #5
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	440a      	add	r2, r1
 8008986:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800898a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800898e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	015a      	lsls	r2, r3, #5
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	4413      	add	r3, r2
 8008998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	0151      	lsls	r1, r2, #5
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	440a      	add	r2, r1
 80089a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80089ae:	6013      	str	r3, [r2, #0]
 80089b0:	e02b      	b.n	8008a0a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	015a      	lsls	r2, r3, #5
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	4413      	add	r3, r2
 80089ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	db12      	blt.n	80089ea <USB_EPSetStall+0xae>
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00f      	beq.n	80089ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	015a      	lsls	r2, r3, #5
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	4413      	add	r3, r2
 80089d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	0151      	lsls	r1, r2, #5
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	440a      	add	r2, r1
 80089e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80089e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	015a      	lsls	r2, r3, #5
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	4413      	add	r3, r2
 80089f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	0151      	lsls	r1, r2, #5
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	440a      	add	r2, r1
 8008a00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	785b      	ldrb	r3, [r3, #1]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d128      	bne.n	8008a86 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	015a      	lsls	r2, r3, #5
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	0151      	lsls	r1, r2, #5
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	440a      	add	r2, r1
 8008a4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008a52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	791b      	ldrb	r3, [r3, #4]
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d003      	beq.n	8008a64 <USB_EPClearStall+0x4c>
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	791b      	ldrb	r3, [r3, #4]
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d138      	bne.n	8008ad6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	015a      	lsls	r2, r3, #5
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	0151      	lsls	r1, r2, #5
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	440a      	add	r2, r1
 8008a7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	e027      	b.n	8008ad6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	0151      	lsls	r1, r2, #5
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	440a      	add	r2, r1
 8008a9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008aa0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008aa4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	791b      	ldrb	r3, [r3, #4]
 8008aaa:	2b03      	cmp	r3, #3
 8008aac:	d003      	beq.n	8008ab6 <USB_EPClearStall+0x9e>
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	791b      	ldrb	r3, [r3, #4]
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d10f      	bne.n	8008ad6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	015a      	lsls	r2, r3, #5
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	4413      	add	r3, r2
 8008abe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	0151      	lsls	r1, r2, #5
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	440a      	add	r2, r1
 8008acc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ad4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3714      	adds	r7, #20
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	460b      	mov	r3, r1
 8008aee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b02:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008b06:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	78fb      	ldrb	r3, [r7, #3]
 8008b12:	011b      	lsls	r3, r3, #4
 8008b14:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008b18:	68f9      	ldr	r1, [r7, #12]
 8008b1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008b4a:	f023 0303 	bic.w	r3, r3, #3
 8008b4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b5e:	f023 0302 	bic.w	r3, r3, #2
 8008b62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b085      	sub	sp, #20
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008b8c:	f023 0303 	bic.w	r3, r3, #3
 8008b90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ba0:	f043 0302 	orr.w	r3, r3, #2
 8008ba4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	695b      	ldr	r3, [r3, #20]
 8008bc0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	4013      	ands	r3, r2
 8008bca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr

08008bda <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bda:	b480      	push	{r7}
 8008bdc:	b085      	sub	sp, #20
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bf6:	69db      	ldr	r3, [r3, #28]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	0c1b      	lsrs	r3, r3, #16
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b085      	sub	sp, #20
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c2a:	69db      	ldr	r3, [r3, #28]
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	4013      	ands	r3, r2
 8008c30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	b29b      	uxth	r3, r3
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b085      	sub	sp, #20
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008c52:	78fb      	ldrb	r3, [r7, #3]
 8008c54:	015a      	lsls	r2, r3, #5
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4413      	add	r3, r2
 8008c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c68:	695b      	ldr	r3, [r3, #20]
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c70:	68bb      	ldr	r3, [r7, #8]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b087      	sub	sp, #28
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	460b      	mov	r3, r1
 8008c88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ca0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008ca2:	78fb      	ldrb	r3, [r7, #3]
 8008ca4:	f003 030f 	and.w	r3, r3, #15
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	fa22 f303 	lsr.w	r3, r2, r3
 8008cae:	01db      	lsls	r3, r3, #7
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	693a      	ldr	r2, [r7, #16]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008cb8:	78fb      	ldrb	r3, [r7, #3]
 8008cba:	015a      	lsls	r2, r3, #5
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	4013      	ands	r3, r2
 8008cca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ccc:	68bb      	ldr	r3, [r7, #8]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	371c      	adds	r7, #28
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008cda:	b480      	push	{r7}
 8008cdc:	b083      	sub	sp, #12
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	f003 0301 	and.w	r3, r3, #1
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	370c      	adds	r7, #12
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
	...

08008cf8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d12:	4619      	mov	r1, r3
 8008d14:	4b09      	ldr	r3, [pc, #36]	@ (8008d3c <USB_ActivateSetup+0x44>)
 8008d16:	4013      	ands	r3, r2
 8008d18:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	fffff800 	.word	0xfffff800

08008d40 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	607a      	str	r2, [r7, #4]
 8008d4c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	333c      	adds	r3, #60	@ 0x3c
 8008d56:	3304      	adds	r3, #4
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	4a26      	ldr	r2, [pc, #152]	@ (8008df8 <USB_EP0_OutStart+0xb8>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d90a      	bls.n	8008d7a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d74:	d101      	bne.n	8008d7a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	e037      	b.n	8008dea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d80:	461a      	mov	r2, r3
 8008d82:	2300      	movs	r3, #0
 8008d84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008da8:	f043 0318 	orr.w	r3, r3, #24
 8008dac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dbc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008dc0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008dc2:	7afb      	ldrb	r3, [r7, #11]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d10f      	bne.n	8008de8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dce:	461a      	mov	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	697a      	ldr	r2, [r7, #20]
 8008dde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008de2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008de6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	371c      	adds	r7, #28
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	4f54300a 	.word	0x4f54300a

08008dfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e14:	d901      	bls.n	8008e1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e01b      	b.n	8008e52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	daf2      	bge.n	8008e08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e22:	2300      	movs	r3, #0
 8008e24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	f043 0201 	orr.w	r2, r3, #1
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3301      	adds	r3, #1
 8008e36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e3e:	d901      	bls.n	8008e44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e006      	b.n	8008e52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	f003 0301 	and.w	r3, r3, #1
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d0f0      	beq.n	8008e32 <USB_CoreReset+0x36>

  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3714      	adds	r7, #20
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
	...

08008e60 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008e60:	b5b0      	push	{r4, r5, r7, lr}
 8008e62:	b08c      	sub	sp, #48	@ 0x30
 8008e64:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8008e66:	4b8f      	ldr	r3, [pc, #572]	@ (80090a4 <MX_LWIP_Init+0x244>)
 8008e68:	22c0      	movs	r2, #192	@ 0xc0
 8008e6a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008e6c:	4b8d      	ldr	r3, [pc, #564]	@ (80090a4 <MX_LWIP_Init+0x244>)
 8008e6e:	22a8      	movs	r2, #168	@ 0xa8
 8008e70:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8008e72:	4b8c      	ldr	r3, [pc, #560]	@ (80090a4 <MX_LWIP_Init+0x244>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8008e78:	4b8a      	ldr	r3, [pc, #552]	@ (80090a4 <MX_LWIP_Init+0x244>)
 8008e7a:	227b      	movs	r2, #123	@ 0x7b
 8008e7c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8008e7e:	4b8a      	ldr	r3, [pc, #552]	@ (80090a8 <MX_LWIP_Init+0x248>)
 8008e80:	22ff      	movs	r2, #255	@ 0xff
 8008e82:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008e84:	4b88      	ldr	r3, [pc, #544]	@ (80090a8 <MX_LWIP_Init+0x248>)
 8008e86:	22ff      	movs	r2, #255	@ 0xff
 8008e88:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8008e8a:	4b87      	ldr	r3, [pc, #540]	@ (80090a8 <MX_LWIP_Init+0x248>)
 8008e8c:	22ff      	movs	r2, #255	@ 0xff
 8008e8e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008e90:	4b85      	ldr	r3, [pc, #532]	@ (80090a8 <MX_LWIP_Init+0x248>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8008e96:	4b85      	ldr	r3, [pc, #532]	@ (80090ac <MX_LWIP_Init+0x24c>)
 8008e98:	22c0      	movs	r2, #192	@ 0xc0
 8008e9a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8008e9c:	4b83      	ldr	r3, [pc, #524]	@ (80090ac <MX_LWIP_Init+0x24c>)
 8008e9e:	22a8      	movs	r2, #168	@ 0xa8
 8008ea0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8008ea2:	4b82      	ldr	r3, [pc, #520]	@ (80090ac <MX_LWIP_Init+0x24c>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8008ea8:	4b80      	ldr	r3, [pc, #512]	@ (80090ac <MX_LWIP_Init+0x24c>)
 8008eaa:	2201      	movs	r2, #1
 8008eac:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8008eae:	2100      	movs	r1, #0
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	f008 fa49 	bl	8011348 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008eb6:	4b7b      	ldr	r3, [pc, #492]	@ (80090a4 <MX_LWIP_Init+0x244>)
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	061a      	lsls	r2, r3, #24
 8008ebc:	4b79      	ldr	r3, [pc, #484]	@ (80090a4 <MX_LWIP_Init+0x244>)
 8008ebe:	785b      	ldrb	r3, [r3, #1]
 8008ec0:	041b      	lsls	r3, r3, #16
 8008ec2:	431a      	orrs	r2, r3
 8008ec4:	4b77      	ldr	r3, [pc, #476]	@ (80090a4 <MX_LWIP_Init+0x244>)
 8008ec6:	789b      	ldrb	r3, [r3, #2]
 8008ec8:	021b      	lsls	r3, r3, #8
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	4a75      	ldr	r2, [pc, #468]	@ (80090a4 <MX_LWIP_Init+0x244>)
 8008ece:	78d2      	ldrb	r2, [r2, #3]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	061a      	lsls	r2, r3, #24
 8008ed4:	4b73      	ldr	r3, [pc, #460]	@ (80090a4 <MX_LWIP_Init+0x244>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	0619      	lsls	r1, r3, #24
 8008eda:	4b72      	ldr	r3, [pc, #456]	@ (80090a4 <MX_LWIP_Init+0x244>)
 8008edc:	785b      	ldrb	r3, [r3, #1]
 8008ede:	041b      	lsls	r3, r3, #16
 8008ee0:	4319      	orrs	r1, r3
 8008ee2:	4b70      	ldr	r3, [pc, #448]	@ (80090a4 <MX_LWIP_Init+0x244>)
 8008ee4:	789b      	ldrb	r3, [r3, #2]
 8008ee6:	021b      	lsls	r3, r3, #8
 8008ee8:	430b      	orrs	r3, r1
 8008eea:	496e      	ldr	r1, [pc, #440]	@ (80090a4 <MX_LWIP_Init+0x244>)
 8008eec:	78c9      	ldrb	r1, [r1, #3]
 8008eee:	430b      	orrs	r3, r1
 8008ef0:	021b      	lsls	r3, r3, #8
 8008ef2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	4b6a      	ldr	r3, [pc, #424]	@ (80090a4 <MX_LWIP_Init+0x244>)
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	0619      	lsls	r1, r3, #24
 8008efe:	4b69      	ldr	r3, [pc, #420]	@ (80090a4 <MX_LWIP_Init+0x244>)
 8008f00:	785b      	ldrb	r3, [r3, #1]
 8008f02:	041b      	lsls	r3, r3, #16
 8008f04:	4319      	orrs	r1, r3
 8008f06:	4b67      	ldr	r3, [pc, #412]	@ (80090a4 <MX_LWIP_Init+0x244>)
 8008f08:	789b      	ldrb	r3, [r3, #2]
 8008f0a:	021b      	lsls	r3, r3, #8
 8008f0c:	430b      	orrs	r3, r1
 8008f0e:	4965      	ldr	r1, [pc, #404]	@ (80090a4 <MX_LWIP_Init+0x244>)
 8008f10:	78c9      	ldrb	r1, [r1, #3]
 8008f12:	430b      	orrs	r3, r1
 8008f14:	0a1b      	lsrs	r3, r3, #8
 8008f16:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008f1a:	431a      	orrs	r2, r3
 8008f1c:	4b61      	ldr	r3, [pc, #388]	@ (80090a4 <MX_LWIP_Init+0x244>)
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	0619      	lsls	r1, r3, #24
 8008f22:	4b60      	ldr	r3, [pc, #384]	@ (80090a4 <MX_LWIP_Init+0x244>)
 8008f24:	785b      	ldrb	r3, [r3, #1]
 8008f26:	041b      	lsls	r3, r3, #16
 8008f28:	4319      	orrs	r1, r3
 8008f2a:	4b5e      	ldr	r3, [pc, #376]	@ (80090a4 <MX_LWIP_Init+0x244>)
 8008f2c:	789b      	ldrb	r3, [r3, #2]
 8008f2e:	021b      	lsls	r3, r3, #8
 8008f30:	430b      	orrs	r3, r1
 8008f32:	495c      	ldr	r1, [pc, #368]	@ (80090a4 <MX_LWIP_Init+0x244>)
 8008f34:	78c9      	ldrb	r1, [r1, #3]
 8008f36:	430b      	orrs	r3, r1
 8008f38:	0e1b      	lsrs	r3, r3, #24
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	4a5c      	ldr	r2, [pc, #368]	@ (80090b0 <MX_LWIP_Init+0x250>)
 8008f3e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008f40:	4b59      	ldr	r3, [pc, #356]	@ (80090a8 <MX_LWIP_Init+0x248>)
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	061a      	lsls	r2, r3, #24
 8008f46:	4b58      	ldr	r3, [pc, #352]	@ (80090a8 <MX_LWIP_Init+0x248>)
 8008f48:	785b      	ldrb	r3, [r3, #1]
 8008f4a:	041b      	lsls	r3, r3, #16
 8008f4c:	431a      	orrs	r2, r3
 8008f4e:	4b56      	ldr	r3, [pc, #344]	@ (80090a8 <MX_LWIP_Init+0x248>)
 8008f50:	789b      	ldrb	r3, [r3, #2]
 8008f52:	021b      	lsls	r3, r3, #8
 8008f54:	4313      	orrs	r3, r2
 8008f56:	4a54      	ldr	r2, [pc, #336]	@ (80090a8 <MX_LWIP_Init+0x248>)
 8008f58:	78d2      	ldrb	r2, [r2, #3]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	061a      	lsls	r2, r3, #24
 8008f5e:	4b52      	ldr	r3, [pc, #328]	@ (80090a8 <MX_LWIP_Init+0x248>)
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	0619      	lsls	r1, r3, #24
 8008f64:	4b50      	ldr	r3, [pc, #320]	@ (80090a8 <MX_LWIP_Init+0x248>)
 8008f66:	785b      	ldrb	r3, [r3, #1]
 8008f68:	041b      	lsls	r3, r3, #16
 8008f6a:	4319      	orrs	r1, r3
 8008f6c:	4b4e      	ldr	r3, [pc, #312]	@ (80090a8 <MX_LWIP_Init+0x248>)
 8008f6e:	789b      	ldrb	r3, [r3, #2]
 8008f70:	021b      	lsls	r3, r3, #8
 8008f72:	430b      	orrs	r3, r1
 8008f74:	494c      	ldr	r1, [pc, #304]	@ (80090a8 <MX_LWIP_Init+0x248>)
 8008f76:	78c9      	ldrb	r1, [r1, #3]
 8008f78:	430b      	orrs	r3, r1
 8008f7a:	021b      	lsls	r3, r3, #8
 8008f7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008f80:	431a      	orrs	r2, r3
 8008f82:	4b49      	ldr	r3, [pc, #292]	@ (80090a8 <MX_LWIP_Init+0x248>)
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	0619      	lsls	r1, r3, #24
 8008f88:	4b47      	ldr	r3, [pc, #284]	@ (80090a8 <MX_LWIP_Init+0x248>)
 8008f8a:	785b      	ldrb	r3, [r3, #1]
 8008f8c:	041b      	lsls	r3, r3, #16
 8008f8e:	4319      	orrs	r1, r3
 8008f90:	4b45      	ldr	r3, [pc, #276]	@ (80090a8 <MX_LWIP_Init+0x248>)
 8008f92:	789b      	ldrb	r3, [r3, #2]
 8008f94:	021b      	lsls	r3, r3, #8
 8008f96:	430b      	orrs	r3, r1
 8008f98:	4943      	ldr	r1, [pc, #268]	@ (80090a8 <MX_LWIP_Init+0x248>)
 8008f9a:	78c9      	ldrb	r1, [r1, #3]
 8008f9c:	430b      	orrs	r3, r1
 8008f9e:	0a1b      	lsrs	r3, r3, #8
 8008fa0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008fa4:	431a      	orrs	r2, r3
 8008fa6:	4b40      	ldr	r3, [pc, #256]	@ (80090a8 <MX_LWIP_Init+0x248>)
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	0619      	lsls	r1, r3, #24
 8008fac:	4b3e      	ldr	r3, [pc, #248]	@ (80090a8 <MX_LWIP_Init+0x248>)
 8008fae:	785b      	ldrb	r3, [r3, #1]
 8008fb0:	041b      	lsls	r3, r3, #16
 8008fb2:	4319      	orrs	r1, r3
 8008fb4:	4b3c      	ldr	r3, [pc, #240]	@ (80090a8 <MX_LWIP_Init+0x248>)
 8008fb6:	789b      	ldrb	r3, [r3, #2]
 8008fb8:	021b      	lsls	r3, r3, #8
 8008fba:	430b      	orrs	r3, r1
 8008fbc:	493a      	ldr	r1, [pc, #232]	@ (80090a8 <MX_LWIP_Init+0x248>)
 8008fbe:	78c9      	ldrb	r1, [r1, #3]
 8008fc0:	430b      	orrs	r3, r1
 8008fc2:	0e1b      	lsrs	r3, r3, #24
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	4a3b      	ldr	r2, [pc, #236]	@ (80090b4 <MX_LWIP_Init+0x254>)
 8008fc8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008fca:	4b38      	ldr	r3, [pc, #224]	@ (80090ac <MX_LWIP_Init+0x24c>)
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	061a      	lsls	r2, r3, #24
 8008fd0:	4b36      	ldr	r3, [pc, #216]	@ (80090ac <MX_LWIP_Init+0x24c>)
 8008fd2:	785b      	ldrb	r3, [r3, #1]
 8008fd4:	041b      	lsls	r3, r3, #16
 8008fd6:	431a      	orrs	r2, r3
 8008fd8:	4b34      	ldr	r3, [pc, #208]	@ (80090ac <MX_LWIP_Init+0x24c>)
 8008fda:	789b      	ldrb	r3, [r3, #2]
 8008fdc:	021b      	lsls	r3, r3, #8
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	4a32      	ldr	r2, [pc, #200]	@ (80090ac <MX_LWIP_Init+0x24c>)
 8008fe2:	78d2      	ldrb	r2, [r2, #3]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	061a      	lsls	r2, r3, #24
 8008fe8:	4b30      	ldr	r3, [pc, #192]	@ (80090ac <MX_LWIP_Init+0x24c>)
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	0619      	lsls	r1, r3, #24
 8008fee:	4b2f      	ldr	r3, [pc, #188]	@ (80090ac <MX_LWIP_Init+0x24c>)
 8008ff0:	785b      	ldrb	r3, [r3, #1]
 8008ff2:	041b      	lsls	r3, r3, #16
 8008ff4:	4319      	orrs	r1, r3
 8008ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80090ac <MX_LWIP_Init+0x24c>)
 8008ff8:	789b      	ldrb	r3, [r3, #2]
 8008ffa:	021b      	lsls	r3, r3, #8
 8008ffc:	430b      	orrs	r3, r1
 8008ffe:	492b      	ldr	r1, [pc, #172]	@ (80090ac <MX_LWIP_Init+0x24c>)
 8009000:	78c9      	ldrb	r1, [r1, #3]
 8009002:	430b      	orrs	r3, r1
 8009004:	021b      	lsls	r3, r3, #8
 8009006:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800900a:	431a      	orrs	r2, r3
 800900c:	4b27      	ldr	r3, [pc, #156]	@ (80090ac <MX_LWIP_Init+0x24c>)
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	0619      	lsls	r1, r3, #24
 8009012:	4b26      	ldr	r3, [pc, #152]	@ (80090ac <MX_LWIP_Init+0x24c>)
 8009014:	785b      	ldrb	r3, [r3, #1]
 8009016:	041b      	lsls	r3, r3, #16
 8009018:	4319      	orrs	r1, r3
 800901a:	4b24      	ldr	r3, [pc, #144]	@ (80090ac <MX_LWIP_Init+0x24c>)
 800901c:	789b      	ldrb	r3, [r3, #2]
 800901e:	021b      	lsls	r3, r3, #8
 8009020:	430b      	orrs	r3, r1
 8009022:	4922      	ldr	r1, [pc, #136]	@ (80090ac <MX_LWIP_Init+0x24c>)
 8009024:	78c9      	ldrb	r1, [r1, #3]
 8009026:	430b      	orrs	r3, r1
 8009028:	0a1b      	lsrs	r3, r3, #8
 800902a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800902e:	431a      	orrs	r2, r3
 8009030:	4b1e      	ldr	r3, [pc, #120]	@ (80090ac <MX_LWIP_Init+0x24c>)
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	0619      	lsls	r1, r3, #24
 8009036:	4b1d      	ldr	r3, [pc, #116]	@ (80090ac <MX_LWIP_Init+0x24c>)
 8009038:	785b      	ldrb	r3, [r3, #1]
 800903a:	041b      	lsls	r3, r3, #16
 800903c:	4319      	orrs	r1, r3
 800903e:	4b1b      	ldr	r3, [pc, #108]	@ (80090ac <MX_LWIP_Init+0x24c>)
 8009040:	789b      	ldrb	r3, [r3, #2]
 8009042:	021b      	lsls	r3, r3, #8
 8009044:	430b      	orrs	r3, r1
 8009046:	4919      	ldr	r1, [pc, #100]	@ (80090ac <MX_LWIP_Init+0x24c>)
 8009048:	78c9      	ldrb	r1, [r1, #3]
 800904a:	430b      	orrs	r3, r1
 800904c:	0e1b      	lsrs	r3, r3, #24
 800904e:	4313      	orrs	r3, r2
 8009050:	4a19      	ldr	r2, [pc, #100]	@ (80090b8 <MX_LWIP_Init+0x258>)
 8009052:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009054:	4b19      	ldr	r3, [pc, #100]	@ (80090bc <MX_LWIP_Init+0x25c>)
 8009056:	9302      	str	r3, [sp, #8]
 8009058:	4b19      	ldr	r3, [pc, #100]	@ (80090c0 <MX_LWIP_Init+0x260>)
 800905a:	9301      	str	r3, [sp, #4]
 800905c:	2300      	movs	r3, #0
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	4b15      	ldr	r3, [pc, #84]	@ (80090b8 <MX_LWIP_Init+0x258>)
 8009062:	4a14      	ldr	r2, [pc, #80]	@ (80090b4 <MX_LWIP_Init+0x254>)
 8009064:	4912      	ldr	r1, [pc, #72]	@ (80090b0 <MX_LWIP_Init+0x250>)
 8009066:	4817      	ldr	r0, [pc, #92]	@ (80090c4 <MX_LWIP_Init+0x264>)
 8009068:	f008 ff7c 	bl	8011f64 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800906c:	4815      	ldr	r0, [pc, #84]	@ (80090c4 <MX_LWIP_Init+0x264>)
 800906e:	f009 f92b 	bl	80122c8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8009072:	4814      	ldr	r0, [pc, #80]	@ (80090c4 <MX_LWIP_Init+0x264>)
 8009074:	f009 f938 	bl	80122e8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009078:	4913      	ldr	r1, [pc, #76]	@ (80090c8 <MX_LWIP_Init+0x268>)
 800907a:	4812      	ldr	r0, [pc, #72]	@ (80090c4 <MX_LWIP_Init+0x264>)
 800907c:	f009 fa36 	bl	80124ec <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8009080:	4b12      	ldr	r3, [pc, #72]	@ (80090cc <MX_LWIP_Init+0x26c>)
 8009082:	1d3c      	adds	r4, r7, #4
 8009084:	461d      	mov	r5, r3
 8009086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800908a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800908e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8009092:	1d3b      	adds	r3, r7, #4
 8009094:	490b      	ldr	r1, [pc, #44]	@ (80090c4 <MX_LWIP_Init+0x264>)
 8009096:	4618      	mov	r0, r3
 8009098:	f002 fdc7 	bl	800bc2a <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800909c:	bf00      	nop
 800909e:	3720      	adds	r7, #32
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bdb0      	pop	{r4, r5, r7, pc}
 80090a4:	20000714 	.word	0x20000714
 80090a8:	20000718 	.word	0x20000718
 80090ac:	2000071c 	.word	0x2000071c
 80090b0:	20000708 	.word	0x20000708
 80090b4:	2000070c 	.word	0x2000070c
 80090b8:	20000710 	.word	0x20000710
 80090bc:	08011259 	.word	0x08011259
 80090c0:	08009669 	.word	0x08009669
 80090c4:	200006d4 	.word	0x200006d4
 80090c8:	080090d1 	.word	0x080090d1
 80090cc:	0801e628 	.word	0x0801e628

080090d0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b087      	sub	sp, #28
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80090f6:	2320      	movs	r3, #32
 80090f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80090fa:	f3bf 8f4f 	dsb	sy
}
 80090fe:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8009100:	e00b      	b.n	800911a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8009102:	4a0d      	ldr	r2, [pc, #52]	@ (8009138 <SCB_InvalidateDCache_by_Addr+0x54>)
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	693a      	ldr	r2, [r7, #16]
 800910e:	4413      	add	r3, r2
 8009110:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8009112:	697a      	ldr	r2, [r7, #20]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	1ad3      	subs	r3, r2, r3
 8009118:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2b00      	cmp	r3, #0
 800911e:	dcf0      	bgt.n	8009102 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8009120:	f3bf 8f4f 	dsb	sy
}
 8009124:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009126:	f3bf 8f6f 	isb	sy
}
 800912a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800912c:	bf00      	nop
 800912e:	371c      	adds	r7, #28
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	e000ed00 	.word	0xe000ed00

0800913c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8009144:	4b04      	ldr	r3, [pc, #16]	@ (8009158 <HAL_ETH_RxCpltCallback+0x1c>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4618      	mov	r0, r3
 800914a:	f002 fef7 	bl	800bf3c <osSemaphoreRelease>
}
 800914e:	bf00      	nop
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	200050ac 	.word	0x200050ac

0800915c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8009164:	4b04      	ldr	r3, [pc, #16]	@ (8009178 <HAL_ETH_TxCpltCallback+0x1c>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4618      	mov	r0, r3
 800916a:	f002 fee7 	bl	800bf3c <osSemaphoreRelease>
}
 800916e:	bf00      	nop
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	200050b0 	.word	0x200050b0

0800917c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f7fa f838 	bl	80031fa <HAL_ETH_GetDMAError>
 800918a:	4603      	mov	r3, r0
 800918c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009190:	2b80      	cmp	r3, #128	@ 0x80
 8009192:	d104      	bne.n	800919e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8009194:	4b04      	ldr	r3, [pc, #16]	@ (80091a8 <HAL_ETH_ErrorCallback+0x2c>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4618      	mov	r0, r3
 800919a:	f002 fecf 	bl	800bf3c <osSemaphoreRelease>
  }
}
 800919e:	bf00      	nop
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	200050ac 	.word	0x200050ac

080091ac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80091ac:	b5b0      	push	{r4, r5, r7, lr}
 80091ae:	b0b4      	sub	sp, #208	@ 0xd0
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 80091ba:	2300      	movs	r3, #0
 80091bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 80091c0:	2300      	movs	r3, #0
 80091c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 80091c6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80091ca:	2264      	movs	r2, #100	@ 0x64
 80091cc:	2100      	movs	r1, #0
 80091ce:	4618      	mov	r0, r3
 80091d0:	f014 f96b 	bl	801d4aa <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80091d4:	4b9f      	ldr	r3, [pc, #636]	@ (8009454 <low_level_init+0x2a8>)
 80091d6:	4aa0      	ldr	r2, [pc, #640]	@ (8009458 <low_level_init+0x2ac>)
 80091d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80091da:	2300      	movs	r3, #0
 80091dc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x80;
 80091e0:	2380      	movs	r3, #128	@ 0x80
 80091e2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0xE1;
 80091e6:	23e1      	movs	r3, #225	@ 0xe1
 80091e8:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x00;
 80091ec:	2300      	movs	r3, #0
 80091ee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0x00;
 80091f2:	2300      	movs	r3, #0
 80091f4:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0x00;
 80091f8:	2300      	movs	r3, #0
 80091fa:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 80091fe:	4a95      	ldr	r2, [pc, #596]	@ (8009454 <low_level_init+0x2a8>)
 8009200:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009204:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009206:	4b93      	ldr	r3, [pc, #588]	@ (8009454 <low_level_init+0x2a8>)
 8009208:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800920c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800920e:	4b91      	ldr	r3, [pc, #580]	@ (8009454 <low_level_init+0x2a8>)
 8009210:	4a92      	ldr	r2, [pc, #584]	@ (800945c <low_level_init+0x2b0>)
 8009212:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009214:	4b8f      	ldr	r3, [pc, #572]	@ (8009454 <low_level_init+0x2a8>)
 8009216:	4a92      	ldr	r2, [pc, #584]	@ (8009460 <low_level_init+0x2b4>)
 8009218:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800921a:	4b8e      	ldr	r3, [pc, #568]	@ (8009454 <low_level_init+0x2a8>)
 800921c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8009220:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009222:	488c      	ldr	r0, [pc, #560]	@ (8009454 <low_level_init+0x2a8>)
 8009224:	f7f9 f9a0 	bl	8002568 <HAL_ETH_Init>
 8009228:	4603      	mov	r3, r0
 800922a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800922e:	2238      	movs	r2, #56	@ 0x38
 8009230:	2100      	movs	r1, #0
 8009232:	488c      	ldr	r0, [pc, #560]	@ (8009464 <low_level_init+0x2b8>)
 8009234:	f014 f939 	bl	801d4aa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009238:	4b8a      	ldr	r3, [pc, #552]	@ (8009464 <low_level_init+0x2b8>)
 800923a:	2221      	movs	r2, #33	@ 0x21
 800923c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800923e:	4b89      	ldr	r3, [pc, #548]	@ (8009464 <low_level_init+0x2b8>)
 8009240:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8009244:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009246:	4b87      	ldr	r3, [pc, #540]	@ (8009464 <low_level_init+0x2b8>)
 8009248:	2200      	movs	r2, #0
 800924a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800924c:	4886      	ldr	r0, [pc, #536]	@ (8009468 <low_level_init+0x2bc>)
 800924e:	f008 fd43 	bl	8011cd8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2206      	movs	r2, #6
 8009256:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800925a:	4b7e      	ldr	r3, [pc, #504]	@ (8009454 <low_level_init+0x2a8>)
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	781a      	ldrb	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009266:	4b7b      	ldr	r3, [pc, #492]	@ (8009454 <low_level_init+0x2a8>)
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	785a      	ldrb	r2, [r3, #1]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009272:	4b78      	ldr	r3, [pc, #480]	@ (8009454 <low_level_init+0x2a8>)
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	789a      	ldrb	r2, [r3, #2]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800927e:	4b75      	ldr	r3, [pc, #468]	@ (8009454 <low_level_init+0x2a8>)
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	78da      	ldrb	r2, [r3, #3]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800928a:	4b72      	ldr	r3, [pc, #456]	@ (8009454 <low_level_init+0x2a8>)
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	791a      	ldrb	r2, [r3, #4]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009296:	4b6f      	ldr	r3, [pc, #444]	@ (8009454 <low_level_init+0x2a8>)
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	795a      	ldrb	r2, [r3, #5]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80092a8:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80092b0:	f043 030a 	orr.w	r3, r3, #10
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 80092bc:	2300      	movs	r3, #0
 80092be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092c0:	2300      	movs	r3, #0
 80092c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 80092c4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80092c8:	2101      	movs	r1, #1
 80092ca:	4618      	mov	r0, r3
 80092cc:	f002 fdb6 	bl	800be3c <osSemaphoreCreate>
 80092d0:	4603      	mov	r3, r0
 80092d2:	4a66      	ldr	r2, [pc, #408]	@ (800946c <low_level_init+0x2c0>)
 80092d4:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 80092d6:	2300      	movs	r3, #0
 80092d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80092da:	2300      	movs	r3, #0
 80092dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 80092de:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80092e2:	2101      	movs	r1, #1
 80092e4:	4618      	mov	r0, r3
 80092e6:	f002 fda9 	bl	800be3c <osSemaphoreCreate>
 80092ea:	4603      	mov	r3, r0
 80092ec:	4a60      	ldr	r2, [pc, #384]	@ (8009470 <low_level_init+0x2c4>)
 80092ee:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 80092f0:	4b5e      	ldr	r3, [pc, #376]	@ (800946c <low_level_init+0x2c0>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2100      	movs	r1, #0
 80092f6:	4618      	mov	r0, r3
 80092f8:	f002 fdd2 	bl	800bea0 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 80092fc:	4b5c      	ldr	r3, [pc, #368]	@ (8009470 <low_level_init+0x2c4>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2100      	movs	r1, #0
 8009302:	4618      	mov	r0, r3
 8009304:	f002 fdcc 	bl	800bea0 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8009308:	4b5a      	ldr	r3, [pc, #360]	@ (8009474 <low_level_init+0x2c8>)
 800930a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800930e:	461d      	mov	r5, r3
 8009310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009314:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009318:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800931c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009320:	6879      	ldr	r1, [r7, #4]
 8009322:	4618      	mov	r0, r3
 8009324:	f002 fc81 	bl	800bc2a <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009328:	4953      	ldr	r1, [pc, #332]	@ (8009478 <low_level_init+0x2cc>)
 800932a:	4854      	ldr	r0, [pc, #336]	@ (800947c <low_level_init+0x2d0>)
 800932c:	f7f8 fe5f 	bl	8001fee <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8009330:	4852      	ldr	r0, [pc, #328]	@ (800947c <low_level_init+0x2d0>)
 8009332:	f7f8 fe8e 	bl	8002052 <LAN8742_Init>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d006      	beq.n	800934a <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f009 f8a5 	bl	801248c <netif_set_link_down>
    netif_set_down(netif);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f009 f83c 	bl	80123c0 <netif_set_down>
 8009348:	e081      	b.n	800944e <low_level_init+0x2a2>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800934a:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800934e:	2b00      	cmp	r3, #0
 8009350:	d165      	bne.n	800941e <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009352:	484a      	ldr	r0, [pc, #296]	@ (800947c <low_level_init+0x2d0>)
 8009354:	f7f8 feca 	bl	80020ec <LAN8742_GetLinkState>
 8009358:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800935c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009360:	2b01      	cmp	r3, #1
 8009362:	dc06      	bgt.n	8009372 <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f009 f891 	bl	801248c <netif_set_link_down>
      netif_set_down(netif);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f009 f828 	bl	80123c0 <netif_set_down>
 8009370:	e057      	b.n	8009422 <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 8009372:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009376:	3b02      	subs	r3, #2
 8009378:	2b03      	cmp	r3, #3
 800937a:	d82b      	bhi.n	80093d4 <low_level_init+0x228>
 800937c:	a201      	add	r2, pc, #4	@ (adr r2, 8009384 <low_level_init+0x1d8>)
 800937e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009382:	bf00      	nop
 8009384:	08009395 	.word	0x08009395
 8009388:	080093a7 	.word	0x080093a7
 800938c:	080093b7 	.word	0x080093b7
 8009390:	080093c7 	.word	0x080093c7
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8009394:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009398:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 800939c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80093a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80093a4:	e01f      	b.n	80093e6 <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80093a6:	2300      	movs	r3, #0
 80093a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 80093ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80093b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80093b4:	e017      	b.n	80093e6 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80093b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80093ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 80093be:	2300      	movs	r3, #0
 80093c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80093c4:	e00f      	b.n	80093e6 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80093c6:	2300      	movs	r3, #0
 80093c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 80093cc:	2300      	movs	r3, #0
 80093ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80093d2:	e008      	b.n	80093e6 <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 80093d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80093d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 80093dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80093e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80093e4:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80093e6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80093ea:	4619      	mov	r1, r3
 80093ec:	4819      	ldr	r0, [pc, #100]	@ (8009454 <low_level_init+0x2a8>)
 80093ee:	f7f9 fda3 	bl	8002f38 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80093f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80093f6:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 80093f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80093fc:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80093fe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009402:	4619      	mov	r1, r3
 8009404:	4813      	ldr	r0, [pc, #76]	@ (8009454 <low_level_init+0x2a8>)
 8009406:	f7f9 fe8e 	bl	8003126 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800940a:	4812      	ldr	r0, [pc, #72]	@ (8009454 <low_level_init+0x2a8>)
 800940c:	f7f9 f946 	bl	800269c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f008 ff69 	bl	80122e8 <netif_set_up>
    netif_set_link_up(netif);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f009 f804 	bl	8012424 <netif_set_link_up>
 800941c:	e001      	b.n	8009422 <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 800941e:	f7f8 fba1 	bl	8001b64 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 8009422:	f7f8 ff3b 	bl	800229c <HAL_GetREVID>
 8009426:	4603      	mov	r3, r0
 8009428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800942c:	d10f      	bne.n	800944e <low_level_init+0x2a2>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 800942e:	4b14      	ldr	r3, [pc, #80]	@ (8009480 <low_level_init+0x2d4>)
 8009430:	f107 040c 	add.w	r4, r7, #12
 8009434:	461d      	mov	r5, r3
 8009436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800943a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800943e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8009442:	f107 030c 	add.w	r3, r7, #12
 8009446:	2100      	movs	r1, #0
 8009448:	4618      	mov	r0, r3
 800944a:	f002 fbee 	bl	800bc2a <osThreadCreate>
  }
}
 800944e:	37d0      	adds	r7, #208	@ 0xd0
 8009450:	46bd      	mov	sp, r7
 8009452:	bdb0      	pop	{r4, r5, r7, pc}
 8009454:	200050b4 	.word	0x200050b4
 8009458:	40028000 	.word	0x40028000
 800945c:	2000022c 	.word	0x2000022c
 8009460:	2000018c 	.word	0x2000018c
 8009464:	20005164 	.word	0x20005164
 8009468:	08021c20 	.word	0x08021c20
 800946c:	200050ac 	.word	0x200050ac
 8009470:	200050b0 	.word	0x200050b0
 8009474:	0801e64c 	.word	0x0801e64c
 8009478:	2000000c 	.word	0x2000000c
 800947c:	2000519c 	.word	0x2000519c
 8009480:	0801e678 	.word	0x0801e678

08009484 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b092      	sub	sp, #72	@ 0x48
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800948e:	2300      	movs	r3, #0
 8009490:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8009492:	2300      	movs	r3, #0
 8009494:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8009496:	2300      	movs	r3, #0
 8009498:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800949c:	f107 030c 	add.w	r3, r7, #12
 80094a0:	2230      	movs	r2, #48	@ 0x30
 80094a2:	2100      	movs	r1, #0
 80094a4:	4618      	mov	r0, r3
 80094a6:	f014 f800 	bl	801d4aa <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80094aa:	f107 030c 	add.w	r3, r7, #12
 80094ae:	2230      	movs	r2, #48	@ 0x30
 80094b0:	2100      	movs	r1, #0
 80094b2:	4618      	mov	r0, r3
 80094b4:	f013 fff9 	bl	801d4aa <memset>

  for(q = p; q != NULL; q = q->next)
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80094bc:	e045      	b.n	800954a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80094be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094c0:	2b03      	cmp	r3, #3
 80094c2:	d902      	bls.n	80094ca <low_level_output+0x46>
      return ERR_IF;
 80094c4:	f06f 030b 	mvn.w	r3, #11
 80094c8:	e07f      	b.n	80095ca <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 80094ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094cc:	6859      	ldr	r1, [r3, #4]
 80094ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094d0:	4613      	mov	r3, r2
 80094d2:	005b      	lsls	r3, r3, #1
 80094d4:	4413      	add	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	3348      	adds	r3, #72	@ 0x48
 80094da:	443b      	add	r3, r7
 80094dc:	3b3c      	subs	r3, #60	@ 0x3c
 80094de:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80094e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094e2:	895b      	ldrh	r3, [r3, #10]
 80094e4:	4619      	mov	r1, r3
 80094e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094e8:	4613      	mov	r3, r2
 80094ea:	005b      	lsls	r3, r3, #1
 80094ec:	4413      	add	r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	3348      	adds	r3, #72	@ 0x48
 80094f2:	443b      	add	r3, r7
 80094f4:	3b38      	subs	r3, #56	@ 0x38
 80094f6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80094f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d011      	beq.n	8009522 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80094fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009500:	1e5a      	subs	r2, r3, #1
 8009502:	f107 000c 	add.w	r0, r7, #12
 8009506:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009508:	460b      	mov	r3, r1
 800950a:	005b      	lsls	r3, r3, #1
 800950c:	440b      	add	r3, r1
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	18c1      	adds	r1, r0, r3
 8009512:	4613      	mov	r3, r2
 8009514:	005b      	lsls	r3, r3, #1
 8009516:	4413      	add	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	3348      	adds	r3, #72	@ 0x48
 800951c:	443b      	add	r3, r7
 800951e:	3b34      	subs	r3, #52	@ 0x34
 8009520:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d109      	bne.n	800953e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800952a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800952c:	4613      	mov	r3, r2
 800952e:	005b      	lsls	r3, r3, #1
 8009530:	4413      	add	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	3348      	adds	r3, #72	@ 0x48
 8009536:	443b      	add	r3, r7
 8009538:	3b34      	subs	r3, #52	@ 0x34
 800953a:	2200      	movs	r2, #0
 800953c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800953e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009540:	3301      	adds	r3, #1
 8009542:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8009544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	643b      	str	r3, [r7, #64]	@ 0x40
 800954a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800954c:	2b00      	cmp	r3, #0
 800954e:	d1b6      	bne.n	80094be <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	891b      	ldrh	r3, [r3, #8]
 8009554:	461a      	mov	r2, r3
 8009556:	4b1f      	ldr	r3, [pc, #124]	@ (80095d4 <low_level_output+0x150>)
 8009558:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800955a:	4a1e      	ldr	r2, [pc, #120]	@ (80095d4 <low_level_output+0x150>)
 800955c:	f107 030c 	add.w	r3, r7, #12
 8009560:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8009562:	4a1c      	ldr	r2, [pc, #112]	@ (80095d4 <low_level_output+0x150>)
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8009568:	6838      	ldr	r0, [r7, #0]
 800956a:	f009 fc13 	bl	8012d94 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800956e:	4919      	ldr	r1, [pc, #100]	@ (80095d4 <low_level_output+0x150>)
 8009570:	4819      	ldr	r0, [pc, #100]	@ (80095d8 <low_level_output+0x154>)
 8009572:	f7f9 f983 	bl	800287c <HAL_ETH_Transmit_IT>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d103      	bne.n	8009584 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009582:	e01b      	b.n	80095bc <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8009584:	4814      	ldr	r0, [pc, #80]	@ (80095d8 <low_level_output+0x154>)
 8009586:	f7f9 fe2b 	bl	80031e0 <HAL_ETH_GetError>
 800958a:	4603      	mov	r3, r0
 800958c:	f003 0302 	and.w	r3, r3, #2
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00d      	beq.n	80095b0 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8009594:	4b11      	ldr	r3, [pc, #68]	@ (80095dc <low_level_output+0x158>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800959c:	4618      	mov	r0, r3
 800959e:	f002 fc7f 	bl	800bea0 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 80095a2:	480d      	ldr	r0, [pc, #52]	@ (80095d8 <low_level_output+0x154>)
 80095a4:	f7f9 fb0a 	bl	8002bbc <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 80095a8:	23fe      	movs	r3, #254	@ 0xfe
 80095aa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80095ae:	e005      	b.n	80095bc <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 80095b0:	6838      	ldr	r0, [r7, #0]
 80095b2:	f009 fb49 	bl	8012c48 <pbuf_free>
        errval =  ERR_IF;
 80095b6:	23f4      	movs	r3, #244	@ 0xf4
 80095b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 80095bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80095c0:	f113 0f02 	cmn.w	r3, #2
 80095c4:	d0d3      	beq.n	800956e <low_level_output+0xea>

  return errval;
 80095c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3748      	adds	r7, #72	@ 0x48
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	20005164 	.word	0x20005164
 80095d8:	200050b4 	.word	0x200050b4
 80095dc:	200050b0 	.word	0x200050b0

080095e0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80095e8:	2300      	movs	r3, #0
 80095ea:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80095ec:	4b07      	ldr	r3, [pc, #28]	@ (800960c <low_level_input+0x2c>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d105      	bne.n	8009600 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80095f4:	f107 030c 	add.w	r3, r7, #12
 80095f8:	4619      	mov	r1, r3
 80095fa:	4805      	ldr	r0, [pc, #20]	@ (8009610 <low_level_input+0x30>)
 80095fc:	f7f9 f99a 	bl	8002934 <HAL_ETH_ReadData>
  }

  return p;
 8009600:	68fb      	ldr	r3, [r7, #12]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	200050a8 	.word	0x200050a8
 8009610:	200050b4 	.word	0x200050b4

08009614 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800961c:	2300      	movs	r3, #0
 800961e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009624:	4b0f      	ldr	r3, [pc, #60]	@ (8009664 <ethernetif_input+0x50>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f04f 31ff 	mov.w	r1, #4294967295
 800962c:	4618      	mov	r0, r3
 800962e:	f002 fc37 	bl	800bea0 <osSemaphoreWait>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1f5      	bne.n	8009624 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8009638:	68b8      	ldr	r0, [r7, #8]
 800963a:	f7ff ffd1 	bl	80095e0 <low_level_input>
 800963e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00a      	beq.n	800965c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	68b9      	ldr	r1, [r7, #8]
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	4798      	blx	r3
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d002      	beq.n	800965c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f009 faf6 	bl	8012c48 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1ea      	bne.n	8009638 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009662:	e7df      	b.n	8009624 <ethernetif_input+0x10>
 8009664:	200050ac 	.word	0x200050ac

08009668 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d106      	bne.n	8009684 <ethernetif_init+0x1c>
 8009676:	4b0e      	ldr	r3, [pc, #56]	@ (80096b0 <ethernetif_init+0x48>)
 8009678:	f240 2217 	movw	r2, #535	@ 0x217
 800967c:	490d      	ldr	r1, [pc, #52]	@ (80096b4 <ethernetif_init+0x4c>)
 800967e:	480e      	ldr	r0, [pc, #56]	@ (80096b8 <ethernetif_init+0x50>)
 8009680:	f013 fe74 	bl	801d36c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2273      	movs	r2, #115	@ 0x73
 8009688:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2274      	movs	r2, #116	@ 0x74
 8009690:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a09      	ldr	r2, [pc, #36]	@ (80096bc <ethernetif_init+0x54>)
 8009698:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a08      	ldr	r2, [pc, #32]	@ (80096c0 <ethernetif_init+0x58>)
 800969e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f7ff fd83 	bl	80091ac <low_level_init>

  return ERR_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	0801e694 	.word	0x0801e694
 80096b4:	0801e6b0 	.word	0x0801e6b0
 80096b8:	0801e6c0 	.word	0x0801e6c0
 80096bc:	0801a40d 	.word	0x0801a40d
 80096c0:	08009485 	.word	0x08009485

080096c4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80096d0:	68f9      	ldr	r1, [r7, #12]
 80096d2:	4809      	ldr	r0, [pc, #36]	@ (80096f8 <pbuf_free_custom+0x34>)
 80096d4:	f008 fbf0 	bl	8011eb8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80096d8:	4b08      	ldr	r3, [pc, #32]	@ (80096fc <pbuf_free_custom+0x38>)
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d107      	bne.n	80096f0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80096e0:	4b06      	ldr	r3, [pc, #24]	@ (80096fc <pbuf_free_custom+0x38>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80096e6:	4b06      	ldr	r3, [pc, #24]	@ (8009700 <pbuf_free_custom+0x3c>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f002 fc26 	bl	800bf3c <osSemaphoreRelease>
  }
}
 80096f0:	bf00      	nop
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	08021c20 	.word	0x08021c20
 80096fc:	200050a8 	.word	0x200050a8
 8009700:	200050ac 	.word	0x200050ac

08009704 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009708:	f7f8 fd98 	bl	800223c <HAL_GetTick>
 800970c:	4603      	mov	r3, r0
}
 800970e:	4618      	mov	r0, r3
 8009710:	bd80      	pop	{r7, pc}
	...

08009714 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b08e      	sub	sp, #56	@ 0x38
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800971c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009720:	2200      	movs	r2, #0
 8009722:	601a      	str	r2, [r3, #0]
 8009724:	605a      	str	r2, [r3, #4]
 8009726:	609a      	str	r2, [r3, #8]
 8009728:	60da      	str	r2, [r3, #12]
 800972a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a52      	ldr	r2, [pc, #328]	@ (800987c <HAL_ETH_MspInit+0x168>)
 8009732:	4293      	cmp	r3, r2
 8009734:	f040 809e 	bne.w	8009874 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009738:	4b51      	ldr	r3, [pc, #324]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 800973a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800973c:	4a50      	ldr	r2, [pc, #320]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 800973e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009742:	6313      	str	r3, [r2, #48]	@ 0x30
 8009744:	4b4e      	ldr	r3, [pc, #312]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 8009746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800974c:	623b      	str	r3, [r7, #32]
 800974e:	6a3b      	ldr	r3, [r7, #32]
 8009750:	4b4b      	ldr	r3, [pc, #300]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 8009752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009754:	4a4a      	ldr	r2, [pc, #296]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 8009756:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800975a:	6313      	str	r3, [r2, #48]	@ 0x30
 800975c:	4b48      	ldr	r3, [pc, #288]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 800975e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009760:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009764:	61fb      	str	r3, [r7, #28]
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	4b45      	ldr	r3, [pc, #276]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 800976a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800976c:	4a44      	ldr	r2, [pc, #272]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 800976e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009772:	6313      	str	r3, [r2, #48]	@ 0x30
 8009774:	4b42      	ldr	r3, [pc, #264]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 8009776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009778:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800977c:	61bb      	str	r3, [r7, #24]
 800977e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009780:	4b3f      	ldr	r3, [pc, #252]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 8009782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009784:	4a3e      	ldr	r2, [pc, #248]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 8009786:	f043 0304 	orr.w	r3, r3, #4
 800978a:	6313      	str	r3, [r2, #48]	@ 0x30
 800978c:	4b3c      	ldr	r3, [pc, #240]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 800978e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009790:	f003 0304 	and.w	r3, r3, #4
 8009794:	617b      	str	r3, [r7, #20]
 8009796:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009798:	4b39      	ldr	r3, [pc, #228]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 800979a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800979c:	4a38      	ldr	r2, [pc, #224]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 800979e:	f043 0301 	orr.w	r3, r3, #1
 80097a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80097a4:	4b36      	ldr	r3, [pc, #216]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 80097a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097a8:	f003 0301 	and.w	r3, r3, #1
 80097ac:	613b      	str	r3, [r7, #16]
 80097ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80097b0:	4b33      	ldr	r3, [pc, #204]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 80097b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097b4:	4a32      	ldr	r2, [pc, #200]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 80097b6:	f043 0302 	orr.w	r3, r3, #2
 80097ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80097bc:	4b30      	ldr	r3, [pc, #192]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 80097be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097c0:	f003 0302 	and.w	r3, r3, #2
 80097c4:	60fb      	str	r3, [r7, #12]
 80097c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80097c8:	4b2d      	ldr	r3, [pc, #180]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 80097ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097cc:	4a2c      	ldr	r2, [pc, #176]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 80097ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80097d4:	4b2a      	ldr	r3, [pc, #168]	@ (8009880 <HAL_ETH_MspInit+0x16c>)
 80097d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097dc:	60bb      	str	r3, [r7, #8]
 80097de:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80097e0:	2332      	movs	r3, #50	@ 0x32
 80097e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097e4:	2302      	movs	r3, #2
 80097e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097e8:	2300      	movs	r3, #0
 80097ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097ec:	2303      	movs	r3, #3
 80097ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80097f0:	230b      	movs	r3, #11
 80097f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80097f8:	4619      	mov	r1, r3
 80097fa:	4822      	ldr	r0, [pc, #136]	@ (8009884 <HAL_ETH_MspInit+0x170>)
 80097fc:	f7fa f92a 	bl	8003a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009800:	2386      	movs	r3, #134	@ 0x86
 8009802:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009804:	2302      	movs	r3, #2
 8009806:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009808:	2300      	movs	r3, #0
 800980a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800980c:	2303      	movs	r3, #3
 800980e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009810:	230b      	movs	r3, #11
 8009812:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009814:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009818:	4619      	mov	r1, r3
 800981a:	481b      	ldr	r0, [pc, #108]	@ (8009888 <HAL_ETH_MspInit+0x174>)
 800981c:	f7fa f91a 	bl	8003a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009820:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009824:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009826:	2302      	movs	r3, #2
 8009828:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800982a:	2300      	movs	r3, #0
 800982c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800982e:	2303      	movs	r3, #3
 8009830:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009832:	230b      	movs	r3, #11
 8009834:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800983a:	4619      	mov	r1, r3
 800983c:	4813      	ldr	r0, [pc, #76]	@ (800988c <HAL_ETH_MspInit+0x178>)
 800983e:	f7fa f909 	bl	8003a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8009842:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8009846:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009848:	2302      	movs	r3, #2
 800984a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800984c:	2300      	movs	r3, #0
 800984e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009850:	2303      	movs	r3, #3
 8009852:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009854:	230b      	movs	r3, #11
 8009856:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800985c:	4619      	mov	r1, r3
 800985e:	480c      	ldr	r0, [pc, #48]	@ (8009890 <HAL_ETH_MspInit+0x17c>)
 8009860:	f7fa f8f8 	bl	8003a54 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009864:	2200      	movs	r2, #0
 8009866:	2105      	movs	r1, #5
 8009868:	203d      	movs	r0, #61	@ 0x3d
 800986a:	f7f8 fddb 	bl	8002424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800986e:	203d      	movs	r0, #61	@ 0x3d
 8009870:	f7f8 fdf4 	bl	800245c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009874:	bf00      	nop
 8009876:	3738      	adds	r7, #56	@ 0x38
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	40028000 	.word	0x40028000
 8009880:	40023800 	.word	0x40023800
 8009884:	40020800 	.word	0x40020800
 8009888:	40020000 	.word	0x40020000
 800988c:	40020400 	.word	0x40020400
 8009890:	40021800 	.word	0x40021800

08009894 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8009898:	4802      	ldr	r0, [pc, #8]	@ (80098a4 <ETH_PHY_IO_Init+0x10>)
 800989a:	f7f9 fc5f 	bl	800315c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	200050b4 	.word	0x200050b4

080098a8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80098a8:	b480      	push	{r7}
 80098aa:	af00      	add	r7, sp, #0
  return 0;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	68f9      	ldr	r1, [r7, #12]
 80098ca:	4807      	ldr	r0, [pc, #28]	@ (80098e8 <ETH_PHY_IO_ReadReg+0x30>)
 80098cc:	f7f9 faa0 	bl	8002e10 <HAL_ETH_ReadPHYRegister>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d002      	beq.n	80098dc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80098d6:	f04f 33ff 	mov.w	r3, #4294967295
 80098da:	e000      	b.n	80098de <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	200050b4 	.word	0x200050b4

080098ec <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	68f9      	ldr	r1, [r7, #12]
 80098fe:	4807      	ldr	r0, [pc, #28]	@ (800991c <ETH_PHY_IO_WriteReg+0x30>)
 8009900:	f7f9 fad1 	bl	8002ea6 <HAL_ETH_WritePHYRegister>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d002      	beq.n	8009910 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800990a:	f04f 33ff 	mov.w	r3, #4294967295
 800990e:	e000      	b.n	8009912 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	200050b4 	.word	0x200050b4

08009920 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009924:	f7f8 fc8a 	bl	800223c <HAL_GetTick>
 8009928:	4603      	mov	r3, r0
}
 800992a:	4618      	mov	r0, r3
 800992c:	bd80      	pop	{r7, pc}
	...

08009930 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b0a0      	sub	sp, #128	@ 0x80
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009938:	f107 0308 	add.w	r3, r7, #8
 800993c:	2264      	movs	r2, #100	@ 0x64
 800993e:	2100      	movs	r1, #0
 8009940:	4618      	mov	r0, r3
 8009942:	f013 fdb2 	bl	801d4aa <memset>
  int32_t PHYLinkState = 0;
 8009946:	2300      	movs	r3, #0
 8009948:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800994a:	2300      	movs	r3, #0
 800994c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800994e:	2300      	movs	r3, #0
 8009950:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009952:	2300      	movs	r3, #0
 8009954:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800995a:	483a      	ldr	r0, [pc, #232]	@ (8009a44 <ethernet_link_thread+0x114>)
 800995c:	f7f8 fbc6 	bl	80020ec <LAN8742_GetLinkState>
 8009960:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8009962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009964:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009968:	089b      	lsrs	r3, r3, #2
 800996a:	f003 0301 	and.w	r3, r3, #1
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00c      	beq.n	800998e <ethernet_link_thread+0x5e>
 8009974:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009976:	2b01      	cmp	r3, #1
 8009978:	dc09      	bgt.n	800998e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800997a:	4833      	ldr	r0, [pc, #204]	@ (8009a48 <ethernet_link_thread+0x118>)
 800997c:	f7f8 fefe 	bl	800277c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8009980:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009982:	f008 fd1d 	bl	80123c0 <netif_set_down>
    netif_set_link_down(netif);
 8009986:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009988:	f008 fd80 	bl	801248c <netif_set_link_down>
 800998c:	e055      	b.n	8009a3a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800998e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009990:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009994:	f003 0304 	and.w	r3, r3, #4
 8009998:	2b00      	cmp	r3, #0
 800999a:	d14e      	bne.n	8009a3a <ethernet_link_thread+0x10a>
 800999c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800999e:	2b01      	cmp	r3, #1
 80099a0:	dd4b      	ble.n	8009a3a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80099a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80099a4:	3b02      	subs	r3, #2
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	d82a      	bhi.n	8009a00 <ethernet_link_thread+0xd0>
 80099aa:	a201      	add	r2, pc, #4	@ (adr r2, 80099b0 <ethernet_link_thread+0x80>)
 80099ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b0:	080099c1 	.word	0x080099c1
 80099b4:	080099d3 	.word	0x080099d3
 80099b8:	080099e3 	.word	0x080099e3
 80099bc:	080099f3 	.word	0x080099f3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80099c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80099c4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80099c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80099ca:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80099cc:	2301      	movs	r3, #1
 80099ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80099d0:	e017      	b.n	8009a02 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80099d2:	2300      	movs	r3, #0
 80099d4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80099d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80099da:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80099dc:	2301      	movs	r3, #1
 80099de:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80099e0:	e00f      	b.n	8009a02 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80099e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80099e6:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80099e8:	2300      	movs	r3, #0
 80099ea:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80099ec:	2301      	movs	r3, #1
 80099ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80099f0:	e007      	b.n	8009a02 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80099f2:	2300      	movs	r3, #0
 80099f4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80099f6:	2300      	movs	r3, #0
 80099f8:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80099fa:	2301      	movs	r3, #1
 80099fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80099fe:	e000      	b.n	8009a02 <ethernet_link_thread+0xd2>
    default:
      break;
 8009a00:	bf00      	nop
    }

    if(linkchanged)
 8009a02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d018      	beq.n	8009a3a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009a08:	f107 0308 	add.w	r3, r7, #8
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	480e      	ldr	r0, [pc, #56]	@ (8009a48 <ethernet_link_thread+0x118>)
 8009a10:	f7f9 fa92 	bl	8002f38 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009a14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a16:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8009a18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a1a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009a1c:	f107 0308 	add.w	r3, r7, #8
 8009a20:	4619      	mov	r1, r3
 8009a22:	4809      	ldr	r0, [pc, #36]	@ (8009a48 <ethernet_link_thread+0x118>)
 8009a24:	f7f9 fb7f 	bl	8003126 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8009a28:	4807      	ldr	r0, [pc, #28]	@ (8009a48 <ethernet_link_thread+0x118>)
 8009a2a:	f7f8 fe37 	bl	800269c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8009a2e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009a30:	f008 fc5a 	bl	80122e8 <netif_set_up>
      netif_set_link_up(netif);
 8009a34:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009a36:	f008 fcf5 	bl	8012424 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8009a3a:	2064      	movs	r0, #100	@ 0x64
 8009a3c:	f002 f94d 	bl	800bcda <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009a40:	e78b      	b.n	800995a <ethernet_link_thread+0x2a>
 8009a42:	bf00      	nop
 8009a44:	2000519c 	.word	0x2000519c
 8009a48:	200050b4 	.word	0x200050b4

08009a4c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af02      	add	r7, sp, #8
 8009a52:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009a54:	4812      	ldr	r0, [pc, #72]	@ (8009aa0 <HAL_ETH_RxAllocateCallback+0x54>)
 8009a56:	f008 f9bb 	bl	8011dd0 <memp_malloc_pool>
 8009a5a:	60f8      	str	r0, [r7, #12]
  if (p)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d014      	beq.n	8009a8c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f103 0220 	add.w	r2, r3, #32
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	4a0d      	ldr	r2, [pc, #52]	@ (8009aa4 <HAL_ETH_RxAllocateCallback+0x58>)
 8009a70:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8009a7a:	9201      	str	r2, [sp, #4]
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2241      	movs	r2, #65	@ 0x41
 8009a82:	2100      	movs	r1, #0
 8009a84:	2000      	movs	r0, #0
 8009a86:	f008 ff25 	bl	80128d4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8009a8a:	e005      	b.n	8009a98 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8009a8c:	4b06      	ldr	r3, [pc, #24]	@ (8009aa8 <HAL_ETH_RxAllocateCallback+0x5c>)
 8009a8e:	2201      	movs	r2, #1
 8009a90:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	601a      	str	r2, [r3, #0]
}
 8009a98:	bf00      	nop
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	08021c20 	.word	0x08021c20
 8009aa4:	080096c5 	.word	0x080096c5
 8009aa8:	200050a8 	.word	0x200050a8

08009aac <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b088      	sub	sp, #32
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
 8009ab8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	3b20      	subs	r3, #32
 8009aca:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	887a      	ldrh	r2, [r7, #2]
 8009adc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d103      	bne.n	8009aee <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	69fa      	ldr	r2, [r7, #28]
 8009aea:	601a      	str	r2, [r3, #0]
 8009aec:	e003      	b.n	8009af6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	69fa      	ldr	r2, [r7, #28]
 8009af4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	69fa      	ldr	r2, [r7, #28]
 8009afa:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	61fb      	str	r3, [r7, #28]
 8009b02:	e009      	b.n	8009b18 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	891a      	ldrh	r2, [r3, #8]
 8009b08:	887b      	ldrh	r3, [r7, #2]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	61fb      	str	r3, [r7, #28]
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d1f2      	bne.n	8009b04 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8009b1e:	887b      	ldrh	r3, [r7, #2]
 8009b20:	4619      	mov	r1, r3
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7ff fade 	bl	80090e4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009b28:	bf00      	nop
 8009b2a:	3720      	adds	r7, #32
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f009 f885 	bl	8012c48 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8009b3e:	bf00      	nop
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
	...

08009b48 <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 8009b50:	4b15      	ldr	r3, [pc, #84]	@ (8009ba8 <RMII_Thread+0x60>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d003      	beq.n	8009b64 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	f002 f8b0 	bl	800bcc2 <osThreadTerminate>
 8009b62:	e7f5      	b.n	8009b50 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 8009b64:	4b10      	ldr	r3, [pc, #64]	@ (8009ba8 <RMII_Thread+0x60>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8009b6c:	2b0a      	cmp	r3, #10
 8009b6e:	d916      	bls.n	8009b9e <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 8009b70:	4b0e      	ldr	r3, [pc, #56]	@ (8009bac <RMII_Thread+0x64>)
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	4a0d      	ldr	r2, [pc, #52]	@ (8009bac <RMII_Thread+0x64>)
 8009b76:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009b7a:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 8009b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8009bac <RMII_Thread+0x64>)
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	4a0a      	ldr	r2, [pc, #40]	@ (8009bac <RMII_Thread+0x64>)
 8009b82:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009b86:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 8009b88:	4b07      	ldr	r3, [pc, #28]	@ (8009ba8 <RMII_Thread+0x60>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8009b90:	4b05      	ldr	r3, [pc, #20]	@ (8009ba8 <RMII_Thread+0x60>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f042 0201 	orr.w	r2, r2, #1
 8009b98:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8009b9c:	e7d8      	b.n	8009b50 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 8009b9e:	20c8      	movs	r0, #200	@ 0xc8
 8009ba0:	f002 f89b 	bl	800bcda <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 8009ba4:	e7d4      	b.n	8009b50 <RMII_Thread+0x8>
 8009ba6:	bf00      	nop
 8009ba8:	200050b4 	.word	0x200050b4
 8009bac:	40013800 	.word	0x40013800

08009bb0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009bbc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009bc0:	f013 fa16 	bl	801cff0 <malloc>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d109      	bne.n	8009be2 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	32b0      	adds	r2, #176	@ 0xb0
 8009bd8:	2100      	movs	r1, #0
 8009bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009bde:	2302      	movs	r3, #2
 8009be0:	e0d4      	b.n	8009d8c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009be2:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009be6:	2100      	movs	r1, #0
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f013 fc5e 	bl	801d4aa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	32b0      	adds	r2, #176	@ 0xb0
 8009bf8:	68f9      	ldr	r1, [r7, #12]
 8009bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	32b0      	adds	r2, #176	@ 0xb0
 8009c08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	7c1b      	ldrb	r3, [r3, #16]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d138      	bne.n	8009c8c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c1a:	4b5e      	ldr	r3, [pc, #376]	@ (8009d94 <USBD_CDC_Init+0x1e4>)
 8009c1c:	7819      	ldrb	r1, [r3, #0]
 8009c1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c22:	2202      	movs	r2, #2
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f013 f840 	bl	801ccaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c2a:	4b5a      	ldr	r3, [pc, #360]	@ (8009d94 <USBD_CDC_Init+0x1e4>)
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	f003 020f 	and.w	r2, r3, #15
 8009c32:	6879      	ldr	r1, [r7, #4]
 8009c34:	4613      	mov	r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	4413      	add	r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	440b      	add	r3, r1
 8009c3e:	3324      	adds	r3, #36	@ 0x24
 8009c40:	2201      	movs	r2, #1
 8009c42:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c44:	4b54      	ldr	r3, [pc, #336]	@ (8009d98 <USBD_CDC_Init+0x1e8>)
 8009c46:	7819      	ldrb	r1, [r3, #0]
 8009c48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f013 f82b 	bl	801ccaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c54:	4b50      	ldr	r3, [pc, #320]	@ (8009d98 <USBD_CDC_Init+0x1e8>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	f003 020f 	and.w	r2, r3, #15
 8009c5c:	6879      	ldr	r1, [r7, #4]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	4413      	add	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	440b      	add	r3, r1
 8009c68:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009c70:	4b4a      	ldr	r3, [pc, #296]	@ (8009d9c <USBD_CDC_Init+0x1ec>)
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	f003 020f 	and.w	r2, r3, #15
 8009c78:	6879      	ldr	r1, [r7, #4]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	440b      	add	r3, r1
 8009c84:	3326      	adds	r3, #38	@ 0x26
 8009c86:	2210      	movs	r2, #16
 8009c88:	801a      	strh	r2, [r3, #0]
 8009c8a:	e035      	b.n	8009cf8 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c8c:	4b41      	ldr	r3, [pc, #260]	@ (8009d94 <USBD_CDC_Init+0x1e4>)
 8009c8e:	7819      	ldrb	r1, [r3, #0]
 8009c90:	2340      	movs	r3, #64	@ 0x40
 8009c92:	2202      	movs	r2, #2
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f013 f808 	bl	801ccaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c9a:	4b3e      	ldr	r3, [pc, #248]	@ (8009d94 <USBD_CDC_Init+0x1e4>)
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	f003 020f 	and.w	r2, r3, #15
 8009ca2:	6879      	ldr	r1, [r7, #4]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	440b      	add	r3, r1
 8009cae:	3324      	adds	r3, #36	@ 0x24
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009cb4:	4b38      	ldr	r3, [pc, #224]	@ (8009d98 <USBD_CDC_Init+0x1e8>)
 8009cb6:	7819      	ldrb	r1, [r3, #0]
 8009cb8:	2340      	movs	r3, #64	@ 0x40
 8009cba:	2202      	movs	r2, #2
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f012 fff4 	bl	801ccaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009cc2:	4b35      	ldr	r3, [pc, #212]	@ (8009d98 <USBD_CDC_Init+0x1e8>)
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	f003 020f 	and.w	r2, r3, #15
 8009cca:	6879      	ldr	r1, [r7, #4]
 8009ccc:	4613      	mov	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4413      	add	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	440b      	add	r3, r1
 8009cd6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009cda:	2201      	movs	r2, #1
 8009cdc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009cde:	4b2f      	ldr	r3, [pc, #188]	@ (8009d9c <USBD_CDC_Init+0x1ec>)
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	f003 020f 	and.w	r2, r3, #15
 8009ce6:	6879      	ldr	r1, [r7, #4]
 8009ce8:	4613      	mov	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4413      	add	r3, r2
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	440b      	add	r3, r1
 8009cf2:	3326      	adds	r3, #38	@ 0x26
 8009cf4:	2210      	movs	r2, #16
 8009cf6:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009cf8:	4b28      	ldr	r3, [pc, #160]	@ (8009d9c <USBD_CDC_Init+0x1ec>)
 8009cfa:	7819      	ldrb	r1, [r3, #0]
 8009cfc:	2308      	movs	r3, #8
 8009cfe:	2203      	movs	r2, #3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f012 ffd2 	bl	801ccaa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009d06:	4b25      	ldr	r3, [pc, #148]	@ (8009d9c <USBD_CDC_Init+0x1ec>)
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	f003 020f 	and.w	r2, r3, #15
 8009d0e:	6879      	ldr	r1, [r7, #4]
 8009d10:	4613      	mov	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4413      	add	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	440b      	add	r3, r1
 8009d1a:	3324      	adds	r3, #36	@ 0x24
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	33b0      	adds	r3, #176	@ 0xb0
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8009d56:	2302      	movs	r3, #2
 8009d58:	e018      	b.n	8009d8c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	7c1b      	ldrb	r3, [r3, #16]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d10a      	bne.n	8009d78 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d62:	4b0d      	ldr	r3, [pc, #52]	@ (8009d98 <USBD_CDC_Init+0x1e8>)
 8009d64:	7819      	ldrb	r1, [r3, #0]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f013 f889 	bl	801ce88 <USBD_LL_PrepareReceive>
 8009d76:	e008      	b.n	8009d8a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d78:	4b07      	ldr	r3, [pc, #28]	@ (8009d98 <USBD_CDC_Init+0x1e8>)
 8009d7a:	7819      	ldrb	r1, [r3, #0]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d82:	2340      	movs	r3, #64	@ 0x40
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f013 f87f 	bl	801ce88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	200000a7 	.word	0x200000a7
 8009d98:	200000a8 	.word	0x200000a8
 8009d9c:	200000a9 	.word	0x200000a9

08009da0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	460b      	mov	r3, r1
 8009daa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009dac:	4b3a      	ldr	r3, [pc, #232]	@ (8009e98 <USBD_CDC_DeInit+0xf8>)
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	4619      	mov	r1, r3
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f012 ff9f 	bl	801ccf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009db8:	4b37      	ldr	r3, [pc, #220]	@ (8009e98 <USBD_CDC_DeInit+0xf8>)
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	f003 020f 	and.w	r2, r3, #15
 8009dc0:	6879      	ldr	r1, [r7, #4]
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	4413      	add	r3, r2
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	440b      	add	r3, r1
 8009dcc:	3324      	adds	r3, #36	@ 0x24
 8009dce:	2200      	movs	r2, #0
 8009dd0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009dd2:	4b32      	ldr	r3, [pc, #200]	@ (8009e9c <USBD_CDC_DeInit+0xfc>)
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f012 ff8c 	bl	801ccf6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009dde:	4b2f      	ldr	r3, [pc, #188]	@ (8009e9c <USBD_CDC_DeInit+0xfc>)
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	f003 020f 	and.w	r2, r3, #15
 8009de6:	6879      	ldr	r1, [r7, #4]
 8009de8:	4613      	mov	r3, r2
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	4413      	add	r3, r2
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	440b      	add	r3, r1
 8009df2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009df6:	2200      	movs	r2, #0
 8009df8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009dfa:	4b29      	ldr	r3, [pc, #164]	@ (8009ea0 <USBD_CDC_DeInit+0x100>)
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f012 ff78 	bl	801ccf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009e06:	4b26      	ldr	r3, [pc, #152]	@ (8009ea0 <USBD_CDC_DeInit+0x100>)
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	f003 020f 	and.w	r2, r3, #15
 8009e0e:	6879      	ldr	r1, [r7, #4]
 8009e10:	4613      	mov	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4413      	add	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	440b      	add	r3, r1
 8009e1a:	3324      	adds	r3, #36	@ 0x24
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009e20:	4b1f      	ldr	r3, [pc, #124]	@ (8009ea0 <USBD_CDC_DeInit+0x100>)
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	f003 020f 	and.w	r2, r3, #15
 8009e28:	6879      	ldr	r1, [r7, #4]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	440b      	add	r3, r1
 8009e34:	3326      	adds	r3, #38	@ 0x26
 8009e36:	2200      	movs	r2, #0
 8009e38:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	32b0      	adds	r2, #176	@ 0xb0
 8009e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d01f      	beq.n	8009e8c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	33b0      	adds	r3, #176	@ 0xb0
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	4413      	add	r3, r2
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	32b0      	adds	r2, #176	@ 0xb0
 8009e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f013 f8c6 	bl	801d000 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	32b0      	adds	r2, #176	@ 0xb0
 8009e7e:	2100      	movs	r1, #0
 8009e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	200000a7 	.word	0x200000a7
 8009e9c:	200000a8 	.word	0x200000a8
 8009ea0:	200000a9 	.word	0x200000a9

08009ea4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b086      	sub	sp, #24
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	32b0      	adds	r2, #176	@ 0xb0
 8009eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ebc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d101      	bne.n	8009ed4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	e0bf      	b.n	800a054 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d050      	beq.n	8009f82 <USBD_CDC_Setup+0xde>
 8009ee0:	2b20      	cmp	r3, #32
 8009ee2:	f040 80af 	bne.w	800a044 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	88db      	ldrh	r3, [r3, #6]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d03a      	beq.n	8009f64 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	b25b      	sxtb	r3, r3
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	da1b      	bge.n	8009f30 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	33b0      	adds	r3, #176	@ 0xb0
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	4413      	add	r3, r2
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	683a      	ldr	r2, [r7, #0]
 8009f0c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009f0e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	88d2      	ldrh	r2, [r2, #6]
 8009f14:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	88db      	ldrh	r3, [r3, #6]
 8009f1a:	2b07      	cmp	r3, #7
 8009f1c:	bf28      	it	cs
 8009f1e:	2307      	movcs	r3, #7
 8009f20:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	89fa      	ldrh	r2, [r7, #14]
 8009f26:	4619      	mov	r1, r3
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f001 fdbd 	bl	800baa8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009f2e:	e090      	b.n	800a052 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	785a      	ldrb	r2, [r3, #1]
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	88db      	ldrh	r3, [r3, #6]
 8009f3e:	2b3f      	cmp	r3, #63	@ 0x3f
 8009f40:	d803      	bhi.n	8009f4a <USBD_CDC_Setup+0xa6>
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	88db      	ldrh	r3, [r3, #6]
 8009f46:	b2da      	uxtb	r2, r3
 8009f48:	e000      	b.n	8009f4c <USBD_CDC_Setup+0xa8>
 8009f4a:	2240      	movs	r2, #64	@ 0x40
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009f52:	6939      	ldr	r1, [r7, #16]
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f001 fdcf 	bl	800bb00 <USBD_CtlPrepareRx>
      break;
 8009f62:	e076      	b.n	800a052 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	33b0      	adds	r3, #176	@ 0xb0
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4413      	add	r3, r2
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	683a      	ldr	r2, [r7, #0]
 8009f78:	7850      	ldrb	r0, [r2, #1]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	6839      	ldr	r1, [r7, #0]
 8009f7e:	4798      	blx	r3
      break;
 8009f80:	e067      	b.n	800a052 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	785b      	ldrb	r3, [r3, #1]
 8009f86:	2b0b      	cmp	r3, #11
 8009f88:	d851      	bhi.n	800a02e <USBD_CDC_Setup+0x18a>
 8009f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f90 <USBD_CDC_Setup+0xec>)
 8009f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f90:	08009fc1 	.word	0x08009fc1
 8009f94:	0800a03d 	.word	0x0800a03d
 8009f98:	0800a02f 	.word	0x0800a02f
 8009f9c:	0800a02f 	.word	0x0800a02f
 8009fa0:	0800a02f 	.word	0x0800a02f
 8009fa4:	0800a02f 	.word	0x0800a02f
 8009fa8:	0800a02f 	.word	0x0800a02f
 8009fac:	0800a02f 	.word	0x0800a02f
 8009fb0:	0800a02f 	.word	0x0800a02f
 8009fb4:	0800a02f 	.word	0x0800a02f
 8009fb8:	08009feb 	.word	0x08009feb
 8009fbc:	0800a015 	.word	0x0800a015
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	2b03      	cmp	r3, #3
 8009fca:	d107      	bne.n	8009fdc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009fcc:	f107 030a 	add.w	r3, r7, #10
 8009fd0:	2202      	movs	r2, #2
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f001 fd67 	bl	800baa8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009fda:	e032      	b.n	800a042 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009fdc:	6839      	ldr	r1, [r7, #0]
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f001 fce5 	bl	800b9ae <USBD_CtlError>
            ret = USBD_FAIL;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	75fb      	strb	r3, [r7, #23]
          break;
 8009fe8:	e02b      	b.n	800a042 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	2b03      	cmp	r3, #3
 8009ff4:	d107      	bne.n	800a006 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009ff6:	f107 030d 	add.w	r3, r7, #13
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f001 fd52 	bl	800baa8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a004:	e01d      	b.n	800a042 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a006:	6839      	ldr	r1, [r7, #0]
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f001 fcd0 	bl	800b9ae <USBD_CtlError>
            ret = USBD_FAIL;
 800a00e:	2303      	movs	r3, #3
 800a010:	75fb      	strb	r3, [r7, #23]
          break;
 800a012:	e016      	b.n	800a042 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b03      	cmp	r3, #3
 800a01e:	d00f      	beq.n	800a040 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a020:	6839      	ldr	r1, [r7, #0]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f001 fcc3 	bl	800b9ae <USBD_CtlError>
            ret = USBD_FAIL;
 800a028:	2303      	movs	r3, #3
 800a02a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a02c:	e008      	b.n	800a040 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a02e:	6839      	ldr	r1, [r7, #0]
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f001 fcbc 	bl	800b9ae <USBD_CtlError>
          ret = USBD_FAIL;
 800a036:	2303      	movs	r3, #3
 800a038:	75fb      	strb	r3, [r7, #23]
          break;
 800a03a:	e002      	b.n	800a042 <USBD_CDC_Setup+0x19e>
          break;
 800a03c:	bf00      	nop
 800a03e:	e008      	b.n	800a052 <USBD_CDC_Setup+0x1ae>
          break;
 800a040:	bf00      	nop
      }
      break;
 800a042:	e006      	b.n	800a052 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f001 fcb1 	bl	800b9ae <USBD_CtlError>
      ret = USBD_FAIL;
 800a04c:	2303      	movs	r3, #3
 800a04e:	75fb      	strb	r3, [r7, #23]
      break;
 800a050:	bf00      	nop
  }

  return (uint8_t)ret;
 800a052:	7dfb      	ldrb	r3, [r7, #23]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3718      	adds	r7, #24
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	460b      	mov	r3, r1
 800a066:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a06e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	32b0      	adds	r2, #176	@ 0xb0
 800a07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d101      	bne.n	800a086 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a082:	2303      	movs	r3, #3
 800a084:	e065      	b.n	800a152 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	32b0      	adds	r2, #176	@ 0xb0
 800a090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a094:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a096:	78fb      	ldrb	r3, [r7, #3]
 800a098:	f003 020f 	and.w	r2, r3, #15
 800a09c:	6879      	ldr	r1, [r7, #4]
 800a09e:	4613      	mov	r3, r2
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	4413      	add	r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	440b      	add	r3, r1
 800a0a8:	3318      	adds	r3, #24
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d02f      	beq.n	800a110 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a0b0:	78fb      	ldrb	r3, [r7, #3]
 800a0b2:	f003 020f 	and.w	r2, r3, #15
 800a0b6:	6879      	ldr	r1, [r7, #4]
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	4413      	add	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	440b      	add	r3, r1
 800a0c2:	3318      	adds	r3, #24
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	78fb      	ldrb	r3, [r7, #3]
 800a0c8:	f003 010f 	and.w	r1, r3, #15
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	00db      	lsls	r3, r3, #3
 800a0d2:	440b      	add	r3, r1
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4403      	add	r3, r0
 800a0d8:	331c      	adds	r3, #28
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	fbb2 f1f3 	udiv	r1, r2, r3
 800a0e0:	fb01 f303 	mul.w	r3, r1, r3
 800a0e4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d112      	bne.n	800a110 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a0ea:	78fb      	ldrb	r3, [r7, #3]
 800a0ec:	f003 020f 	and.w	r2, r3, #15
 800a0f0:	6879      	ldr	r1, [r7, #4]
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4413      	add	r3, r2
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	440b      	add	r3, r1
 800a0fc:	3318      	adds	r3, #24
 800a0fe:	2200      	movs	r2, #0
 800a100:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a102:	78f9      	ldrb	r1, [r7, #3]
 800a104:	2300      	movs	r3, #0
 800a106:	2200      	movs	r2, #0
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f012 fe9c 	bl	801ce46 <USBD_LL_Transmit>
 800a10e:	e01f      	b.n	800a150 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	2200      	movs	r2, #0
 800a114:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	33b0      	adds	r3, #176	@ 0xb0
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	4413      	add	r3, r2
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d010      	beq.n	800a150 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	33b0      	adds	r3, #176	@ 0xb0
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4413      	add	r3, r2
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a146:	68ba      	ldr	r2, [r7, #8]
 800a148:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a14c:	78fa      	ldrb	r2, [r7, #3]
 800a14e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b084      	sub	sp, #16
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	460b      	mov	r3, r1
 800a164:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	32b0      	adds	r2, #176	@ 0xb0
 800a170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a174:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	32b0      	adds	r2, #176	@ 0xb0
 800a180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d101      	bne.n	800a18c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a188:	2303      	movs	r3, #3
 800a18a:	e01a      	b.n	800a1c2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a18c:	78fb      	ldrb	r3, [r7, #3]
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f012 fe9a 	bl	801ceca <USBD_LL_GetRxDataSize>
 800a196:	4602      	mov	r2, r0
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	33b0      	adds	r3, #176	@ 0xb0
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	4413      	add	r3, r2
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a1bc:	4611      	mov	r1, r2
 800a1be:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b084      	sub	sp, #16
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	32b0      	adds	r2, #176	@ 0xb0
 800a1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d101      	bne.n	800a1ec <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	e024      	b.n	800a236 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	33b0      	adds	r3, #176	@ 0xb0
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4413      	add	r3, r2
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d019      	beq.n	800a234 <USBD_CDC_EP0_RxReady+0x6a>
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a206:	2bff      	cmp	r3, #255	@ 0xff
 800a208:	d014      	beq.n	800a234 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	33b0      	adds	r3, #176	@ 0xb0
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4413      	add	r3, r2
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a222:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a22a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	22ff      	movs	r2, #255	@ 0xff
 800a230:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
	...

0800a240 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a248:	2182      	movs	r1, #130	@ 0x82
 800a24a:	4818      	ldr	r0, [pc, #96]	@ (800a2ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a24c:	f000 fd4f 	bl	800acee <USBD_GetEpDesc>
 800a250:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a252:	2101      	movs	r1, #1
 800a254:	4815      	ldr	r0, [pc, #84]	@ (800a2ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a256:	f000 fd4a 	bl	800acee <USBD_GetEpDesc>
 800a25a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a25c:	2181      	movs	r1, #129	@ 0x81
 800a25e:	4813      	ldr	r0, [pc, #76]	@ (800a2ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a260:	f000 fd45 	bl	800acee <USBD_GetEpDesc>
 800a264:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d002      	beq.n	800a272 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	2210      	movs	r2, #16
 800a270:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d006      	beq.n	800a286 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a280:	711a      	strb	r2, [r3, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d006      	beq.n	800a29a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2200      	movs	r2, #0
 800a290:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a294:	711a      	strb	r2, [r3, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2243      	movs	r2, #67	@ 0x43
 800a29e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2a0:	4b02      	ldr	r3, [pc, #8]	@ (800a2ac <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3718      	adds	r7, #24
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	20000064 	.word	0x20000064

0800a2b0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2b8:	2182      	movs	r1, #130	@ 0x82
 800a2ba:	4818      	ldr	r0, [pc, #96]	@ (800a31c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2bc:	f000 fd17 	bl	800acee <USBD_GetEpDesc>
 800a2c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a2c2:	2101      	movs	r1, #1
 800a2c4:	4815      	ldr	r0, [pc, #84]	@ (800a31c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2c6:	f000 fd12 	bl	800acee <USBD_GetEpDesc>
 800a2ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a2cc:	2181      	movs	r1, #129	@ 0x81
 800a2ce:	4813      	ldr	r0, [pc, #76]	@ (800a31c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2d0:	f000 fd0d 	bl	800acee <USBD_GetEpDesc>
 800a2d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d002      	beq.n	800a2e2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	2210      	movs	r2, #16
 800a2e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d006      	beq.n	800a2f6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	711a      	strb	r2, [r3, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f042 0202 	orr.w	r2, r2, #2
 800a2f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d006      	beq.n	800a30a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	711a      	strb	r2, [r3, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	f042 0202 	orr.w	r2, r2, #2
 800a308:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2243      	movs	r2, #67	@ 0x43
 800a30e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a310:	4b02      	ldr	r3, [pc, #8]	@ (800a31c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a312:	4618      	mov	r0, r3
 800a314:	3718      	adds	r7, #24
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	20000064 	.word	0x20000064

0800a320 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b086      	sub	sp, #24
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a328:	2182      	movs	r1, #130	@ 0x82
 800a32a:	4818      	ldr	r0, [pc, #96]	@ (800a38c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a32c:	f000 fcdf 	bl	800acee <USBD_GetEpDesc>
 800a330:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a332:	2101      	movs	r1, #1
 800a334:	4815      	ldr	r0, [pc, #84]	@ (800a38c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a336:	f000 fcda 	bl	800acee <USBD_GetEpDesc>
 800a33a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a33c:	2181      	movs	r1, #129	@ 0x81
 800a33e:	4813      	ldr	r0, [pc, #76]	@ (800a38c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a340:	f000 fcd5 	bl	800acee <USBD_GetEpDesc>
 800a344:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d002      	beq.n	800a352 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	2210      	movs	r2, #16
 800a350:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d006      	beq.n	800a366 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	2200      	movs	r2, #0
 800a35c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a360:	711a      	strb	r2, [r3, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d006      	beq.n	800a37a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2200      	movs	r2, #0
 800a370:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a374:	711a      	strb	r2, [r3, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2243      	movs	r2, #67	@ 0x43
 800a37e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a380:	4b02      	ldr	r3, [pc, #8]	@ (800a38c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a382:	4618      	mov	r0, r3
 800a384:	3718      	adds	r7, #24
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	20000064 	.word	0x20000064

0800a390 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	220a      	movs	r2, #10
 800a39c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a39e:	4b03      	ldr	r3, [pc, #12]	@ (800a3ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr
 800a3ac:	20000020 	.word	0x20000020

0800a3b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d101      	bne.n	800a3c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a3c0:	2303      	movs	r3, #3
 800a3c2:	e009      	b.n	800a3d8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	33b0      	adds	r3, #176	@ 0xb0
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	4413      	add	r3, r2
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b087      	sub	sp, #28
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	32b0      	adds	r2, #176	@ 0xb0
 800a3fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3fe:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d101      	bne.n	800a40a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a406:	2303      	movs	r3, #3
 800a408:	e008      	b.n	800a41c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	68ba      	ldr	r2, [r7, #8]
 800a40e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	371c      	adds	r7, #28
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	32b0      	adds	r2, #176	@ 0xb0
 800a43c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a440:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d101      	bne.n	800a44c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a448:	2303      	movs	r3, #3
 800a44a:	e004      	b.n	800a456 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	3714      	adds	r7, #20
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr
	...

0800a464 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	32b0      	adds	r2, #176	@ 0xb0
 800a476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a47a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a47c:	2301      	movs	r3, #1
 800a47e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d101      	bne.n	800a48a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a486:	2303      	movs	r3, #3
 800a488:	e025      	b.n	800a4d6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a490:	2b00      	cmp	r3, #0
 800a492:	d11f      	bne.n	800a4d4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	2201      	movs	r2, #1
 800a498:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a49c:	4b10      	ldr	r3, [pc, #64]	@ (800a4e0 <USBD_CDC_TransmitPacket+0x7c>)
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	f003 020f 	and.w	r2, r3, #15
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	4413      	add	r3, r2
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4403      	add	r3, r0
 800a4b6:	3318      	adds	r3, #24
 800a4b8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a4ba:	4b09      	ldr	r3, [pc, #36]	@ (800a4e0 <USBD_CDC_TransmitPacket+0x7c>)
 800a4bc:	7819      	ldrb	r1, [r3, #0]
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f012 fcbb 	bl	801ce46 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	200000a7 	.word	0x200000a7

0800a4e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	32b0      	adds	r2, #176	@ 0xb0
 800a4f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4fa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	32b0      	adds	r2, #176	@ 0xb0
 800a506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a50e:	2303      	movs	r3, #3
 800a510:	e018      	b.n	800a544 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	7c1b      	ldrb	r3, [r3, #16]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10a      	bne.n	800a530 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a51a:	4b0c      	ldr	r3, [pc, #48]	@ (800a54c <USBD_CDC_ReceivePacket+0x68>)
 800a51c:	7819      	ldrb	r1, [r3, #0]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a524:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f012 fcad 	bl	801ce88 <USBD_LL_PrepareReceive>
 800a52e:	e008      	b.n	800a542 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a530:	4b06      	ldr	r3, [pc, #24]	@ (800a54c <USBD_CDC_ReceivePacket+0x68>)
 800a532:	7819      	ldrb	r1, [r3, #0]
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a53a:	2340      	movs	r3, #64	@ 0x40
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f012 fca3 	bl	801ce88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	200000a8 	.word	0x200000a8

0800a550 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	4613      	mov	r3, r2
 800a55c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d101      	bne.n	800a568 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a564:	2303      	movs	r3, #3
 800a566:	e01f      	b.n	800a5a8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2200      	movs	r2, #0
 800a574:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d003      	beq.n	800a58e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2201      	movs	r2, #1
 800a592:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	79fa      	ldrb	r2, [r7, #7]
 800a59a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a59c:	68f8      	ldr	r0, [r7, #12]
 800a59e:	f012 fb1d 	bl	801cbdc <USBD_LL_Init>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a5a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3718      	adds	r7, #24
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d101      	bne.n	800a5c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	e025      	b.n	800a614 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	683a      	ldr	r2, [r7, #0]
 800a5cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	32ae      	adds	r2, #174	@ 0xae
 800a5da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00f      	beq.n	800a604 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	32ae      	adds	r2, #174	@ 0xae
 800a5ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f4:	f107 020e 	add.w	r2, r7, #14
 800a5f8:	4610      	mov	r0, r2
 800a5fa:	4798      	blx	r3
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a60a:	1c5a      	adds	r2, r3, #1
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f012 fb25 	bl	801cc74 <USBD_LL_Start>
 800a62a:	4603      	mov	r3, r0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3708      	adds	r7, #8
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a63c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a63e:	4618      	mov	r0, r3
 800a640:	370c      	adds	r7, #12
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr

0800a64a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b084      	sub	sp, #16
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	460b      	mov	r3, r1
 800a654:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a656:	2300      	movs	r3, #0
 800a658:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a660:	2b00      	cmp	r3, #0
 800a662:	d009      	beq.n	800a678 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	78fa      	ldrb	r2, [r7, #3]
 800a66e:	4611      	mov	r1, r2
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	4798      	blx	r3
 800a674:	4603      	mov	r3, r0
 800a676:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a678:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b084      	sub	sp, #16
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	460b      	mov	r3, r1
 800a68c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	78fa      	ldrb	r2, [r7, #3]
 800a69c:	4611      	mov	r1, r2
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	4798      	blx	r3
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d001      	beq.n	800a6ac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b084      	sub	sp, #16
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a6c6:	6839      	ldr	r1, [r7, #0]
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f001 f936 	bl	800b93a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a6dc:	461a      	mov	r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a6ea:	f003 031f 	and.w	r3, r3, #31
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	d01a      	beq.n	800a728 <USBD_LL_SetupStage+0x72>
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d822      	bhi.n	800a73c <USBD_LL_SetupStage+0x86>
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d002      	beq.n	800a700 <USBD_LL_SetupStage+0x4a>
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d00a      	beq.n	800a714 <USBD_LL_SetupStage+0x5e>
 800a6fe:	e01d      	b.n	800a73c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a706:	4619      	mov	r1, r3
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 fb63 	bl	800add4 <USBD_StdDevReq>
 800a70e:	4603      	mov	r3, r0
 800a710:	73fb      	strb	r3, [r7, #15]
      break;
 800a712:	e020      	b.n	800a756 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a71a:	4619      	mov	r1, r3
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 fbcb 	bl	800aeb8 <USBD_StdItfReq>
 800a722:	4603      	mov	r3, r0
 800a724:	73fb      	strb	r3, [r7, #15]
      break;
 800a726:	e016      	b.n	800a756 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a72e:	4619      	mov	r1, r3
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 fc2d 	bl	800af90 <USBD_StdEPReq>
 800a736:	4603      	mov	r3, r0
 800a738:	73fb      	strb	r3, [r7, #15]
      break;
 800a73a:	e00c      	b.n	800a756 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a742:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a746:	b2db      	uxtb	r3, r3
 800a748:	4619      	mov	r1, r3
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f012 faf2 	bl	801cd34 <USBD_LL_StallEP>
 800a750:	4603      	mov	r3, r0
 800a752:	73fb      	strb	r3, [r7, #15]
      break;
 800a754:	bf00      	nop
  }

  return ret;
 800a756:	7bfb      	ldrb	r3, [r7, #15]
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3710      	adds	r7, #16
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	460b      	mov	r3, r1
 800a76a:	607a      	str	r2, [r7, #4]
 800a76c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a76e:	2300      	movs	r3, #0
 800a770:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a772:	7afb      	ldrb	r3, [r7, #11]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d16e      	bne.n	800a856 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a77e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a786:	2b03      	cmp	r3, #3
 800a788:	f040 8098 	bne.w	800a8bc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	689a      	ldr	r2, [r3, #8]
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	429a      	cmp	r2, r3
 800a796:	d913      	bls.n	800a7c0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	689a      	ldr	r2, [r3, #8]
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	1ad2      	subs	r2, r2, r3
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	68da      	ldr	r2, [r3, #12]
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	bf28      	it	cs
 800a7b2:	4613      	movcs	r3, r2
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	6879      	ldr	r1, [r7, #4]
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f001 f9be 	bl	800bb3a <USBD_CtlContinueRx>
 800a7be:	e07d      	b.n	800a8bc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a7c6:	f003 031f 	and.w	r3, r3, #31
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d014      	beq.n	800a7f8 <USBD_LL_DataOutStage+0x98>
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d81d      	bhi.n	800a80e <USBD_LL_DataOutStage+0xae>
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d002      	beq.n	800a7dc <USBD_LL_DataOutStage+0x7c>
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d003      	beq.n	800a7e2 <USBD_LL_DataOutStage+0x82>
 800a7da:	e018      	b.n	800a80e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	75bb      	strb	r3, [r7, #22]
            break;
 800a7e0:	e018      	b.n	800a814 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f000 fa64 	bl	800acba <USBD_CoreFindIF>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	75bb      	strb	r3, [r7, #22]
            break;
 800a7f6:	e00d      	b.n	800a814 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	4619      	mov	r1, r3
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f000 fa66 	bl	800acd4 <USBD_CoreFindEP>
 800a808:	4603      	mov	r3, r0
 800a80a:	75bb      	strb	r3, [r7, #22]
            break;
 800a80c:	e002      	b.n	800a814 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a80e:	2300      	movs	r3, #0
 800a810:	75bb      	strb	r3, [r7, #22]
            break;
 800a812:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a814:	7dbb      	ldrb	r3, [r7, #22]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d119      	bne.n	800a84e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a820:	b2db      	uxtb	r3, r3
 800a822:	2b03      	cmp	r3, #3
 800a824:	d113      	bne.n	800a84e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a826:	7dba      	ldrb	r2, [r7, #22]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	32ae      	adds	r2, #174	@ 0xae
 800a82c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00b      	beq.n	800a84e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a836:	7dba      	ldrb	r2, [r7, #22]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a83e:	7dba      	ldrb	r2, [r7, #22]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	32ae      	adds	r2, #174	@ 0xae
 800a844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f001 f984 	bl	800bb5c <USBD_CtlSendStatus>
 800a854:	e032      	b.n	800a8bc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a856:	7afb      	ldrb	r3, [r7, #11]
 800a858:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	4619      	mov	r1, r3
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f000 fa37 	bl	800acd4 <USBD_CoreFindEP>
 800a866:	4603      	mov	r3, r0
 800a868:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a86a:	7dbb      	ldrb	r3, [r7, #22]
 800a86c:	2bff      	cmp	r3, #255	@ 0xff
 800a86e:	d025      	beq.n	800a8bc <USBD_LL_DataOutStage+0x15c>
 800a870:	7dbb      	ldrb	r3, [r7, #22]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d122      	bne.n	800a8bc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	2b03      	cmp	r3, #3
 800a880:	d117      	bne.n	800a8b2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a882:	7dba      	ldrb	r2, [r7, #22]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	32ae      	adds	r2, #174	@ 0xae
 800a888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00f      	beq.n	800a8b2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a892:	7dba      	ldrb	r2, [r7, #22]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a89a:	7dba      	ldrb	r2, [r7, #22]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	32ae      	adds	r2, #174	@ 0xae
 800a8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	7afa      	ldrb	r2, [r7, #11]
 800a8a8:	4611      	mov	r1, r2
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	4798      	blx	r3
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a8b2:	7dfb      	ldrb	r3, [r7, #23]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d001      	beq.n	800a8bc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a8b8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ba:	e000      	b.n	800a8be <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3718      	adds	r7, #24
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b086      	sub	sp, #24
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	60f8      	str	r0, [r7, #12]
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	607a      	str	r2, [r7, #4]
 800a8d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a8d4:	7afb      	ldrb	r3, [r7, #11]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d16f      	bne.n	800a9ba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	3314      	adds	r3, #20
 800a8de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a8e6:	2b02      	cmp	r3, #2
 800a8e8:	d15a      	bne.n	800a9a0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	689a      	ldr	r2, [r3, #8]
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d914      	bls.n	800a920 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	689a      	ldr	r2, [r3, #8]
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	1ad2      	subs	r2, r2, r3
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	461a      	mov	r2, r3
 800a90a:	6879      	ldr	r1, [r7, #4]
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f001 f8e6 	bl	800bade <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a912:	2300      	movs	r3, #0
 800a914:	2200      	movs	r2, #0
 800a916:	2100      	movs	r1, #0
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f012 fab5 	bl	801ce88 <USBD_LL_PrepareReceive>
 800a91e:	e03f      	b.n	800a9a0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	68da      	ldr	r2, [r3, #12]
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d11c      	bne.n	800a966 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	685a      	ldr	r2, [r3, #4]
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a934:	429a      	cmp	r2, r3
 800a936:	d316      	bcc.n	800a966 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	685a      	ldr	r2, [r3, #4]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a942:	429a      	cmp	r2, r3
 800a944:	d20f      	bcs.n	800a966 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a946:	2200      	movs	r2, #0
 800a948:	2100      	movs	r1, #0
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f001 f8c7 	bl	800bade <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2200      	movs	r2, #0
 800a954:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a958:	2300      	movs	r3, #0
 800a95a:	2200      	movs	r2, #0
 800a95c:	2100      	movs	r1, #0
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f012 fa92 	bl	801ce88 <USBD_LL_PrepareReceive>
 800a964:	e01c      	b.n	800a9a0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	2b03      	cmp	r3, #3
 800a970:	d10f      	bne.n	800a992 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d009      	beq.n	800a992 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2200      	movs	r2, #0
 800a982:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a992:	2180      	movs	r1, #128	@ 0x80
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f012 f9cd 	bl	801cd34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f001 f8f1 	bl	800bb82 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d03a      	beq.n	800aa20 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	f7ff fe42 	bl	800a634 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a9b8:	e032      	b.n	800aa20 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a9ba:	7afb      	ldrb	r3, [r7, #11]
 800a9bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	f000 f985 	bl	800acd4 <USBD_CoreFindEP>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9ce:	7dfb      	ldrb	r3, [r7, #23]
 800a9d0:	2bff      	cmp	r3, #255	@ 0xff
 800a9d2:	d025      	beq.n	800aa20 <USBD_LL_DataInStage+0x15a>
 800a9d4:	7dfb      	ldrb	r3, [r7, #23]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d122      	bne.n	800aa20 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d11c      	bne.n	800aa20 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a9e6:	7dfa      	ldrb	r2, [r7, #23]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	32ae      	adds	r2, #174	@ 0xae
 800a9ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9f0:	695b      	ldr	r3, [r3, #20]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d014      	beq.n	800aa20 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a9f6:	7dfa      	ldrb	r2, [r7, #23]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a9fe:	7dfa      	ldrb	r2, [r7, #23]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	32ae      	adds	r2, #174	@ 0xae
 800aa04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa08:	695b      	ldr	r3, [r3, #20]
 800aa0a:	7afa      	ldrb	r2, [r7, #11]
 800aa0c:	4611      	mov	r1, r2
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	4798      	blx	r3
 800aa12:	4603      	mov	r3, r0
 800aa14:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aa16:	7dbb      	ldrb	r3, [r7, #22]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d001      	beq.n	800aa20 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800aa1c:	7dbb      	ldrb	r3, [r7, #22]
 800aa1e:	e000      	b.n	800aa22 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3718      	adds	r7, #24
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b084      	sub	sp, #16
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa32:	2300      	movs	r3, #0
 800aa34:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d014      	beq.n	800aa90 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00e      	beq.n	800aa90 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	6852      	ldr	r2, [r2, #4]
 800aa7e:	b2d2      	uxtb	r2, r2
 800aa80:	4611      	mov	r1, r2
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	4798      	blx	r3
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d001      	beq.n	800aa90 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aa8c:	2303      	movs	r3, #3
 800aa8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa90:	2340      	movs	r3, #64	@ 0x40
 800aa92:	2200      	movs	r2, #0
 800aa94:	2100      	movs	r1, #0
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f012 f907 	bl	801ccaa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2240      	movs	r2, #64	@ 0x40
 800aaa8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aaac:	2340      	movs	r3, #64	@ 0x40
 800aaae:	2200      	movs	r2, #0
 800aab0:	2180      	movs	r1, #128	@ 0x80
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f012 f8f9 	bl	801ccaa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2240      	movs	r2, #64	@ 0x40
 800aac2:	621a      	str	r2, [r3, #32]

  return ret;
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aace:	b480      	push	{r7}
 800aad0:	b083      	sub	sp, #12
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
 800aad6:	460b      	mov	r3, r1
 800aad8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	78fa      	ldrb	r2, [r7, #3]
 800aade:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aae0:	2300      	movs	r3, #0
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	370c      	adds	r7, #12
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aaee:	b480      	push	{r7}
 800aaf0:	b083      	sub	sp, #12
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	2b04      	cmp	r3, #4
 800ab00:	d006      	beq.n	800ab10 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2204      	movs	r2, #4
 800ab14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ab18:	2300      	movs	r3, #0
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	370c      	adds	r7, #12
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr

0800ab26 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab26:	b480      	push	{r7}
 800ab28:	b083      	sub	sp, #12
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	2b04      	cmp	r3, #4
 800ab38:	d106      	bne.n	800ab48 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ab40:	b2da      	uxtb	r2, r3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	370c      	adds	r7, #12
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b082      	sub	sp, #8
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	2b03      	cmp	r3, #3
 800ab68:	d110      	bne.n	800ab8c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00b      	beq.n	800ab8c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab7a:	69db      	ldr	r3, [r3, #28]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d005      	beq.n	800ab8c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab86:	69db      	ldr	r3, [r3, #28]
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3708      	adds	r7, #8
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b082      	sub	sp, #8
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	460b      	mov	r3, r1
 800aba0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	32ae      	adds	r2, #174	@ 0xae
 800abac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800abb4:	2303      	movs	r3, #3
 800abb6:	e01c      	b.n	800abf2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	2b03      	cmp	r3, #3
 800abc2:	d115      	bne.n	800abf0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	32ae      	adds	r2, #174	@ 0xae
 800abce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abd2:	6a1b      	ldr	r3, [r3, #32]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d00b      	beq.n	800abf0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	32ae      	adds	r2, #174	@ 0xae
 800abe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abe6:	6a1b      	ldr	r3, [r3, #32]
 800abe8:	78fa      	ldrb	r2, [r7, #3]
 800abea:	4611      	mov	r1, r2
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3708      	adds	r7, #8
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b082      	sub	sp, #8
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	460b      	mov	r3, r1
 800ac04:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	32ae      	adds	r2, #174	@ 0xae
 800ac10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d101      	bne.n	800ac1c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ac18:	2303      	movs	r3, #3
 800ac1a:	e01c      	b.n	800ac56 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	2b03      	cmp	r3, #3
 800ac26:	d115      	bne.n	800ac54 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	32ae      	adds	r2, #174	@ 0xae
 800ac32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00b      	beq.n	800ac54 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	32ae      	adds	r2, #174	@ 0xae
 800ac46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac4c:	78fa      	ldrb	r2, [r7, #3]
 800ac4e:	4611      	mov	r1, r2
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3708      	adds	r7, #8
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ac5e:	b480      	push	{r7}
 800ac60:	b083      	sub	sp, #12
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac66:	2300      	movs	r3, #0
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d00e      	beq.n	800acb0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	6852      	ldr	r2, [r2, #4]
 800ac9e:	b2d2      	uxtb	r2, r2
 800aca0:	4611      	mov	r1, r2
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	4798      	blx	r3
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d001      	beq.n	800acb0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800acac:	2303      	movs	r3, #3
 800acae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800acb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800acba:	b480      	push	{r7}
 800acbc:	b083      	sub	sp, #12
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
 800acc2:	460b      	mov	r3, r1
 800acc4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800acc6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800acc8:	4618      	mov	r0, r3
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	460b      	mov	r3, r1
 800acde:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ace0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	370c      	adds	r7, #12
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr

0800acee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b086      	sub	sp, #24
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
 800acf6:	460b      	mov	r3, r1
 800acf8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ad02:	2300      	movs	r3, #0
 800ad04:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	885b      	ldrh	r3, [r3, #2]
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	7812      	ldrb	r2, [r2, #0]
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d91f      	bls.n	800ad54 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ad1a:	e013      	b.n	800ad44 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ad1c:	f107 030a 	add.w	r3, r7, #10
 800ad20:	4619      	mov	r1, r3
 800ad22:	6978      	ldr	r0, [r7, #20]
 800ad24:	f000 f81b 	bl	800ad5e <USBD_GetNextDesc>
 800ad28:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	785b      	ldrb	r3, [r3, #1]
 800ad2e:	2b05      	cmp	r3, #5
 800ad30:	d108      	bne.n	800ad44 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	789b      	ldrb	r3, [r3, #2]
 800ad3a:	78fa      	ldrb	r2, [r7, #3]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d008      	beq.n	800ad52 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ad40:	2300      	movs	r3, #0
 800ad42:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	885b      	ldrh	r3, [r3, #2]
 800ad48:	b29a      	uxth	r2, r3
 800ad4a:	897b      	ldrh	r3, [r7, #10]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d8e5      	bhi.n	800ad1c <USBD_GetEpDesc+0x2e>
 800ad50:	e000      	b.n	800ad54 <USBD_GetEpDesc+0x66>
          break;
 800ad52:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ad54:	693b      	ldr	r3, [r7, #16]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3718      	adds	r7, #24
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ad5e:	b480      	push	{r7}
 800ad60:	b085      	sub	sp, #20
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
 800ad66:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	881b      	ldrh	r3, [r3, #0]
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	7812      	ldrb	r2, [r2, #0]
 800ad74:	4413      	add	r3, r2
 800ad76:	b29a      	uxth	r2, r3
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	461a      	mov	r2, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4413      	add	r3, r2
 800ad86:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ad88:	68fb      	ldr	r3, [r7, #12]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3714      	adds	r7, #20
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr

0800ad96 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ad96:	b480      	push	{r7}
 800ad98:	b087      	sub	sp, #28
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	3301      	adds	r3, #1
 800adac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800adb4:	8a3b      	ldrh	r3, [r7, #16]
 800adb6:	021b      	lsls	r3, r3, #8
 800adb8:	b21a      	sxth	r2, r3
 800adba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	b21b      	sxth	r3, r3
 800adc2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800adc4:	89fb      	ldrh	r3, [r7, #14]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	371c      	adds	r7, #28
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
	...

0800add4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adde:	2300      	movs	r3, #0
 800ade0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800adea:	2b40      	cmp	r3, #64	@ 0x40
 800adec:	d005      	beq.n	800adfa <USBD_StdDevReq+0x26>
 800adee:	2b40      	cmp	r3, #64	@ 0x40
 800adf0:	d857      	bhi.n	800aea2 <USBD_StdDevReq+0xce>
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00f      	beq.n	800ae16 <USBD_StdDevReq+0x42>
 800adf6:	2b20      	cmp	r3, #32
 800adf8:	d153      	bne.n	800aea2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	32ae      	adds	r2, #174	@ 0xae
 800ae04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	6839      	ldr	r1, [r7, #0]
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	4798      	blx	r3
 800ae10:	4603      	mov	r3, r0
 800ae12:	73fb      	strb	r3, [r7, #15]
      break;
 800ae14:	e04a      	b.n	800aeac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	785b      	ldrb	r3, [r3, #1]
 800ae1a:	2b09      	cmp	r3, #9
 800ae1c:	d83b      	bhi.n	800ae96 <USBD_StdDevReq+0xc2>
 800ae1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ae24 <USBD_StdDevReq+0x50>)
 800ae20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae24:	0800ae79 	.word	0x0800ae79
 800ae28:	0800ae8d 	.word	0x0800ae8d
 800ae2c:	0800ae97 	.word	0x0800ae97
 800ae30:	0800ae83 	.word	0x0800ae83
 800ae34:	0800ae97 	.word	0x0800ae97
 800ae38:	0800ae57 	.word	0x0800ae57
 800ae3c:	0800ae4d 	.word	0x0800ae4d
 800ae40:	0800ae97 	.word	0x0800ae97
 800ae44:	0800ae6f 	.word	0x0800ae6f
 800ae48:	0800ae61 	.word	0x0800ae61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ae4c:	6839      	ldr	r1, [r7, #0]
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 fa3c 	bl	800b2cc <USBD_GetDescriptor>
          break;
 800ae54:	e024      	b.n	800aea0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 fbcb 	bl	800b5f4 <USBD_SetAddress>
          break;
 800ae5e:	e01f      	b.n	800aea0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ae60:	6839      	ldr	r1, [r7, #0]
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 fc0a 	bl	800b67c <USBD_SetConfig>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	73fb      	strb	r3, [r7, #15]
          break;
 800ae6c:	e018      	b.n	800aea0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae6e:	6839      	ldr	r1, [r7, #0]
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 fcad 	bl	800b7d0 <USBD_GetConfig>
          break;
 800ae76:	e013      	b.n	800aea0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae78:	6839      	ldr	r1, [r7, #0]
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 fcde 	bl	800b83c <USBD_GetStatus>
          break;
 800ae80:	e00e      	b.n	800aea0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae82:	6839      	ldr	r1, [r7, #0]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 fd0d 	bl	800b8a4 <USBD_SetFeature>
          break;
 800ae8a:	e009      	b.n	800aea0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ae8c:	6839      	ldr	r1, [r7, #0]
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fd31 	bl	800b8f6 <USBD_ClrFeature>
          break;
 800ae94:	e004      	b.n	800aea0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ae96:	6839      	ldr	r1, [r7, #0]
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 fd88 	bl	800b9ae <USBD_CtlError>
          break;
 800ae9e:	bf00      	nop
      }
      break;
 800aea0:	e004      	b.n	800aeac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 fd82 	bl	800b9ae <USBD_CtlError>
      break;
 800aeaa:	bf00      	nop
  }

  return ret;
 800aeac:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop

0800aeb8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aec2:	2300      	movs	r3, #0
 800aec4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aece:	2b40      	cmp	r3, #64	@ 0x40
 800aed0:	d005      	beq.n	800aede <USBD_StdItfReq+0x26>
 800aed2:	2b40      	cmp	r3, #64	@ 0x40
 800aed4:	d852      	bhi.n	800af7c <USBD_StdItfReq+0xc4>
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d001      	beq.n	800aede <USBD_StdItfReq+0x26>
 800aeda:	2b20      	cmp	r3, #32
 800aedc:	d14e      	bne.n	800af7c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	3b01      	subs	r3, #1
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d840      	bhi.n	800af6e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	889b      	ldrh	r3, [r3, #4]
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d836      	bhi.n	800af64 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	889b      	ldrh	r3, [r3, #4]
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	4619      	mov	r1, r3
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f7ff fedb 	bl	800acba <USBD_CoreFindIF>
 800af04:	4603      	mov	r3, r0
 800af06:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af08:	7bbb      	ldrb	r3, [r7, #14]
 800af0a:	2bff      	cmp	r3, #255	@ 0xff
 800af0c:	d01d      	beq.n	800af4a <USBD_StdItfReq+0x92>
 800af0e:	7bbb      	ldrb	r3, [r7, #14]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d11a      	bne.n	800af4a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800af14:	7bba      	ldrb	r2, [r7, #14]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	32ae      	adds	r2, #174	@ 0xae
 800af1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00f      	beq.n	800af44 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800af24:	7bba      	ldrb	r2, [r7, #14]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800af2c:	7bba      	ldrb	r2, [r7, #14]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	32ae      	adds	r2, #174	@ 0xae
 800af32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	6839      	ldr	r1, [r7, #0]
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	4798      	blx	r3
 800af3e:	4603      	mov	r3, r0
 800af40:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af42:	e004      	b.n	800af4e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800af44:	2303      	movs	r3, #3
 800af46:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af48:	e001      	b.n	800af4e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800af4a:	2303      	movs	r3, #3
 800af4c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	88db      	ldrh	r3, [r3, #6]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d110      	bne.n	800af78 <USBD_StdItfReq+0xc0>
 800af56:	7bfb      	ldrb	r3, [r7, #15]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d10d      	bne.n	800af78 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 fdfd 	bl	800bb5c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af62:	e009      	b.n	800af78 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800af64:	6839      	ldr	r1, [r7, #0]
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 fd21 	bl	800b9ae <USBD_CtlError>
          break;
 800af6c:	e004      	b.n	800af78 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800af6e:	6839      	ldr	r1, [r7, #0]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fd1c 	bl	800b9ae <USBD_CtlError>
          break;
 800af76:	e000      	b.n	800af7a <USBD_StdItfReq+0xc2>
          break;
 800af78:	bf00      	nop
      }
      break;
 800af7a:	e004      	b.n	800af86 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800af7c:	6839      	ldr	r1, [r7, #0]
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 fd15 	bl	800b9ae <USBD_CtlError>
      break;
 800af84:	bf00      	nop
  }

  return ret;
 800af86:	7bfb      	ldrb	r3, [r7, #15]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800af9a:	2300      	movs	r3, #0
 800af9c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	889b      	ldrh	r3, [r3, #4]
 800afa2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800afac:	2b40      	cmp	r3, #64	@ 0x40
 800afae:	d007      	beq.n	800afc0 <USBD_StdEPReq+0x30>
 800afb0:	2b40      	cmp	r3, #64	@ 0x40
 800afb2:	f200 817f 	bhi.w	800b2b4 <USBD_StdEPReq+0x324>
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d02a      	beq.n	800b010 <USBD_StdEPReq+0x80>
 800afba:	2b20      	cmp	r3, #32
 800afbc:	f040 817a 	bne.w	800b2b4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800afc0:	7bbb      	ldrb	r3, [r7, #14]
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f7ff fe85 	bl	800acd4 <USBD_CoreFindEP>
 800afca:	4603      	mov	r3, r0
 800afcc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800afce:	7b7b      	ldrb	r3, [r7, #13]
 800afd0:	2bff      	cmp	r3, #255	@ 0xff
 800afd2:	f000 8174 	beq.w	800b2be <USBD_StdEPReq+0x32e>
 800afd6:	7b7b      	ldrb	r3, [r7, #13]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	f040 8170 	bne.w	800b2be <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800afde:	7b7a      	ldrb	r2, [r7, #13]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800afe6:	7b7a      	ldrb	r2, [r7, #13]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	32ae      	adds	r2, #174	@ 0xae
 800afec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	f000 8163 	beq.w	800b2be <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aff8:	7b7a      	ldrb	r2, [r7, #13]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	32ae      	adds	r2, #174	@ 0xae
 800affe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	6839      	ldr	r1, [r7, #0]
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	4798      	blx	r3
 800b00a:	4603      	mov	r3, r0
 800b00c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b00e:	e156      	b.n	800b2be <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	785b      	ldrb	r3, [r3, #1]
 800b014:	2b03      	cmp	r3, #3
 800b016:	d008      	beq.n	800b02a <USBD_StdEPReq+0x9a>
 800b018:	2b03      	cmp	r3, #3
 800b01a:	f300 8145 	bgt.w	800b2a8 <USBD_StdEPReq+0x318>
 800b01e:	2b00      	cmp	r3, #0
 800b020:	f000 809b 	beq.w	800b15a <USBD_StdEPReq+0x1ca>
 800b024:	2b01      	cmp	r3, #1
 800b026:	d03c      	beq.n	800b0a2 <USBD_StdEPReq+0x112>
 800b028:	e13e      	b.n	800b2a8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b030:	b2db      	uxtb	r3, r3
 800b032:	2b02      	cmp	r3, #2
 800b034:	d002      	beq.n	800b03c <USBD_StdEPReq+0xac>
 800b036:	2b03      	cmp	r3, #3
 800b038:	d016      	beq.n	800b068 <USBD_StdEPReq+0xd8>
 800b03a:	e02c      	b.n	800b096 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b03c:	7bbb      	ldrb	r3, [r7, #14]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d00d      	beq.n	800b05e <USBD_StdEPReq+0xce>
 800b042:	7bbb      	ldrb	r3, [r7, #14]
 800b044:	2b80      	cmp	r3, #128	@ 0x80
 800b046:	d00a      	beq.n	800b05e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b048:	7bbb      	ldrb	r3, [r7, #14]
 800b04a:	4619      	mov	r1, r3
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f011 fe71 	bl	801cd34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b052:	2180      	movs	r1, #128	@ 0x80
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f011 fe6d 	bl	801cd34 <USBD_LL_StallEP>
 800b05a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b05c:	e020      	b.n	800b0a0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b05e:	6839      	ldr	r1, [r7, #0]
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 fca4 	bl	800b9ae <USBD_CtlError>
              break;
 800b066:	e01b      	b.n	800b0a0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	885b      	ldrh	r3, [r3, #2]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d10e      	bne.n	800b08e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b070:	7bbb      	ldrb	r3, [r7, #14]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d00b      	beq.n	800b08e <USBD_StdEPReq+0xfe>
 800b076:	7bbb      	ldrb	r3, [r7, #14]
 800b078:	2b80      	cmp	r3, #128	@ 0x80
 800b07a:	d008      	beq.n	800b08e <USBD_StdEPReq+0xfe>
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	88db      	ldrh	r3, [r3, #6]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d104      	bne.n	800b08e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b084:	7bbb      	ldrb	r3, [r7, #14]
 800b086:	4619      	mov	r1, r3
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f011 fe53 	bl	801cd34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 fd64 	bl	800bb5c <USBD_CtlSendStatus>

              break;
 800b094:	e004      	b.n	800b0a0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b096:	6839      	ldr	r1, [r7, #0]
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 fc88 	bl	800b9ae <USBD_CtlError>
              break;
 800b09e:	bf00      	nop
          }
          break;
 800b0a0:	e107      	b.n	800b2b2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	d002      	beq.n	800b0b4 <USBD_StdEPReq+0x124>
 800b0ae:	2b03      	cmp	r3, #3
 800b0b0:	d016      	beq.n	800b0e0 <USBD_StdEPReq+0x150>
 800b0b2:	e04b      	b.n	800b14c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0b4:	7bbb      	ldrb	r3, [r7, #14]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d00d      	beq.n	800b0d6 <USBD_StdEPReq+0x146>
 800b0ba:	7bbb      	ldrb	r3, [r7, #14]
 800b0bc:	2b80      	cmp	r3, #128	@ 0x80
 800b0be:	d00a      	beq.n	800b0d6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0c0:	7bbb      	ldrb	r3, [r7, #14]
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f011 fe35 	bl	801cd34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0ca:	2180      	movs	r1, #128	@ 0x80
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f011 fe31 	bl	801cd34 <USBD_LL_StallEP>
 800b0d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0d4:	e040      	b.n	800b158 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b0d6:	6839      	ldr	r1, [r7, #0]
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 fc68 	bl	800b9ae <USBD_CtlError>
              break;
 800b0de:	e03b      	b.n	800b158 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	885b      	ldrh	r3, [r3, #2]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d136      	bne.n	800b156 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b0e8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d004      	beq.n	800b0fc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b0f2:	7bbb      	ldrb	r3, [r7, #14]
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f011 fe3b 	bl	801cd72 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 fd2d 	bl	800bb5c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b102:	7bbb      	ldrb	r3, [r7, #14]
 800b104:	4619      	mov	r1, r3
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f7ff fde4 	bl	800acd4 <USBD_CoreFindEP>
 800b10c:	4603      	mov	r3, r0
 800b10e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b110:	7b7b      	ldrb	r3, [r7, #13]
 800b112:	2bff      	cmp	r3, #255	@ 0xff
 800b114:	d01f      	beq.n	800b156 <USBD_StdEPReq+0x1c6>
 800b116:	7b7b      	ldrb	r3, [r7, #13]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d11c      	bne.n	800b156 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b11c:	7b7a      	ldrb	r2, [r7, #13]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b124:	7b7a      	ldrb	r2, [r7, #13]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	32ae      	adds	r2, #174	@ 0xae
 800b12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d010      	beq.n	800b156 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b134:	7b7a      	ldrb	r2, [r7, #13]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	32ae      	adds	r2, #174	@ 0xae
 800b13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	6839      	ldr	r1, [r7, #0]
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	4798      	blx	r3
 800b146:	4603      	mov	r3, r0
 800b148:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b14a:	e004      	b.n	800b156 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b14c:	6839      	ldr	r1, [r7, #0]
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 fc2d 	bl	800b9ae <USBD_CtlError>
              break;
 800b154:	e000      	b.n	800b158 <USBD_StdEPReq+0x1c8>
              break;
 800b156:	bf00      	nop
          }
          break;
 800b158:	e0ab      	b.n	800b2b2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b160:	b2db      	uxtb	r3, r3
 800b162:	2b02      	cmp	r3, #2
 800b164:	d002      	beq.n	800b16c <USBD_StdEPReq+0x1dc>
 800b166:	2b03      	cmp	r3, #3
 800b168:	d032      	beq.n	800b1d0 <USBD_StdEPReq+0x240>
 800b16a:	e097      	b.n	800b29c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b16c:	7bbb      	ldrb	r3, [r7, #14]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d007      	beq.n	800b182 <USBD_StdEPReq+0x1f2>
 800b172:	7bbb      	ldrb	r3, [r7, #14]
 800b174:	2b80      	cmp	r3, #128	@ 0x80
 800b176:	d004      	beq.n	800b182 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b178:	6839      	ldr	r1, [r7, #0]
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 fc17 	bl	800b9ae <USBD_CtlError>
                break;
 800b180:	e091      	b.n	800b2a6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b182:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b186:	2b00      	cmp	r3, #0
 800b188:	da0b      	bge.n	800b1a2 <USBD_StdEPReq+0x212>
 800b18a:	7bbb      	ldrb	r3, [r7, #14]
 800b18c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b190:	4613      	mov	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4413      	add	r3, r2
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	3310      	adds	r3, #16
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	4413      	add	r3, r2
 800b19e:	3304      	adds	r3, #4
 800b1a0:	e00b      	b.n	800b1ba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1a2:	7bbb      	ldrb	r3, [r7, #14]
 800b1a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1a8:	4613      	mov	r3, r2
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	4413      	add	r3, r2
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	3304      	adds	r3, #4
 800b1ba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	2202      	movs	r2, #2
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 fc6d 	bl	800baa8 <USBD_CtlSendData>
              break;
 800b1ce:	e06a      	b.n	800b2a6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b1d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	da11      	bge.n	800b1fc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b1d8:	7bbb      	ldrb	r3, [r7, #14]
 800b1da:	f003 020f 	and.w	r2, r3, #15
 800b1de:	6879      	ldr	r1, [r7, #4]
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	4413      	add	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	440b      	add	r3, r1
 800b1ea:	3324      	adds	r3, #36	@ 0x24
 800b1ec:	881b      	ldrh	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d117      	bne.n	800b222 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b1f2:	6839      	ldr	r1, [r7, #0]
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 fbda 	bl	800b9ae <USBD_CtlError>
                  break;
 800b1fa:	e054      	b.n	800b2a6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b1fc:	7bbb      	ldrb	r3, [r7, #14]
 800b1fe:	f003 020f 	and.w	r2, r3, #15
 800b202:	6879      	ldr	r1, [r7, #4]
 800b204:	4613      	mov	r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4413      	add	r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	440b      	add	r3, r1
 800b20e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b212:	881b      	ldrh	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d104      	bne.n	800b222 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b218:	6839      	ldr	r1, [r7, #0]
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 fbc7 	bl	800b9ae <USBD_CtlError>
                  break;
 800b220:	e041      	b.n	800b2a6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b222:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b226:	2b00      	cmp	r3, #0
 800b228:	da0b      	bge.n	800b242 <USBD_StdEPReq+0x2b2>
 800b22a:	7bbb      	ldrb	r3, [r7, #14]
 800b22c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b230:	4613      	mov	r3, r2
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	4413      	add	r3, r2
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	3310      	adds	r3, #16
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	4413      	add	r3, r2
 800b23e:	3304      	adds	r3, #4
 800b240:	e00b      	b.n	800b25a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b242:	7bbb      	ldrb	r3, [r7, #14]
 800b244:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b248:	4613      	mov	r3, r2
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	4413      	add	r3, r2
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	4413      	add	r3, r2
 800b258:	3304      	adds	r3, #4
 800b25a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b25c:	7bbb      	ldrb	r3, [r7, #14]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d002      	beq.n	800b268 <USBD_StdEPReq+0x2d8>
 800b262:	7bbb      	ldrb	r3, [r7, #14]
 800b264:	2b80      	cmp	r3, #128	@ 0x80
 800b266:	d103      	bne.n	800b270 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	2200      	movs	r2, #0
 800b26c:	601a      	str	r2, [r3, #0]
 800b26e:	e00e      	b.n	800b28e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b270:	7bbb      	ldrb	r3, [r7, #14]
 800b272:	4619      	mov	r1, r3
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f011 fd9b 	bl	801cdb0 <USBD_LL_IsStallEP>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d003      	beq.n	800b288 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	2201      	movs	r2, #1
 800b284:	601a      	str	r2, [r3, #0]
 800b286:	e002      	b.n	800b28e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	2200      	movs	r2, #0
 800b28c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	2202      	movs	r2, #2
 800b292:	4619      	mov	r1, r3
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 fc07 	bl	800baa8 <USBD_CtlSendData>
              break;
 800b29a:	e004      	b.n	800b2a6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b29c:	6839      	ldr	r1, [r7, #0]
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 fb85 	bl	800b9ae <USBD_CtlError>
              break;
 800b2a4:	bf00      	nop
          }
          break;
 800b2a6:	e004      	b.n	800b2b2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b2a8:	6839      	ldr	r1, [r7, #0]
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 fb7f 	bl	800b9ae <USBD_CtlError>
          break;
 800b2b0:	bf00      	nop
      }
      break;
 800b2b2:	e005      	b.n	800b2c0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b2b4:	6839      	ldr	r1, [r7, #0]
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 fb79 	bl	800b9ae <USBD_CtlError>
      break;
 800b2bc:	e000      	b.n	800b2c0 <USBD_StdEPReq+0x330>
      break;
 800b2be:	bf00      	nop
  }

  return ret;
 800b2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
	...

0800b2cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	885b      	ldrh	r3, [r3, #2]
 800b2e6:	0a1b      	lsrs	r3, r3, #8
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	2b0e      	cmp	r3, #14
 800b2ee:	f200 8152 	bhi.w	800b596 <USBD_GetDescriptor+0x2ca>
 800b2f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b2f8 <USBD_GetDescriptor+0x2c>)
 800b2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f8:	0800b369 	.word	0x0800b369
 800b2fc:	0800b381 	.word	0x0800b381
 800b300:	0800b3c1 	.word	0x0800b3c1
 800b304:	0800b597 	.word	0x0800b597
 800b308:	0800b597 	.word	0x0800b597
 800b30c:	0800b537 	.word	0x0800b537
 800b310:	0800b563 	.word	0x0800b563
 800b314:	0800b597 	.word	0x0800b597
 800b318:	0800b597 	.word	0x0800b597
 800b31c:	0800b597 	.word	0x0800b597
 800b320:	0800b597 	.word	0x0800b597
 800b324:	0800b597 	.word	0x0800b597
 800b328:	0800b597 	.word	0x0800b597
 800b32c:	0800b597 	.word	0x0800b597
 800b330:	0800b335 	.word	0x0800b335
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b33a:	69db      	ldr	r3, [r3, #28]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00b      	beq.n	800b358 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b346:	69db      	ldr	r3, [r3, #28]
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	7c12      	ldrb	r2, [r2, #16]
 800b34c:	f107 0108 	add.w	r1, r7, #8
 800b350:	4610      	mov	r0, r2
 800b352:	4798      	blx	r3
 800b354:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b356:	e126      	b.n	800b5a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b358:	6839      	ldr	r1, [r7, #0]
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 fb27 	bl	800b9ae <USBD_CtlError>
        err++;
 800b360:	7afb      	ldrb	r3, [r7, #11]
 800b362:	3301      	adds	r3, #1
 800b364:	72fb      	strb	r3, [r7, #11]
      break;
 800b366:	e11e      	b.n	800b5a6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	7c12      	ldrb	r2, [r2, #16]
 800b374:	f107 0108 	add.w	r1, r7, #8
 800b378:	4610      	mov	r0, r2
 800b37a:	4798      	blx	r3
 800b37c:	60f8      	str	r0, [r7, #12]
      break;
 800b37e:	e112      	b.n	800b5a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	7c1b      	ldrb	r3, [r3, #16]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d10d      	bne.n	800b3a4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b38e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b390:	f107 0208 	add.w	r2, r7, #8
 800b394:	4610      	mov	r0, r2
 800b396:	4798      	blx	r3
 800b398:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3301      	adds	r3, #1
 800b39e:	2202      	movs	r2, #2
 800b3a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b3a2:	e100      	b.n	800b5a6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ac:	f107 0208 	add.w	r2, r7, #8
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	4798      	blx	r3
 800b3b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	2202      	movs	r2, #2
 800b3bc:	701a      	strb	r2, [r3, #0]
      break;
 800b3be:	e0f2      	b.n	800b5a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	885b      	ldrh	r3, [r3, #2]
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	2b05      	cmp	r3, #5
 800b3c8:	f200 80ac 	bhi.w	800b524 <USBD_GetDescriptor+0x258>
 800b3cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b3d4 <USBD_GetDescriptor+0x108>)
 800b3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d2:	bf00      	nop
 800b3d4:	0800b3ed 	.word	0x0800b3ed
 800b3d8:	0800b421 	.word	0x0800b421
 800b3dc:	0800b455 	.word	0x0800b455
 800b3e0:	0800b489 	.word	0x0800b489
 800b3e4:	0800b4bd 	.word	0x0800b4bd
 800b3e8:	0800b4f1 	.word	0x0800b4f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d00b      	beq.n	800b410 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	7c12      	ldrb	r2, [r2, #16]
 800b404:	f107 0108 	add.w	r1, r7, #8
 800b408:	4610      	mov	r0, r2
 800b40a:	4798      	blx	r3
 800b40c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b40e:	e091      	b.n	800b534 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b410:	6839      	ldr	r1, [r7, #0]
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 facb 	bl	800b9ae <USBD_CtlError>
            err++;
 800b418:	7afb      	ldrb	r3, [r7, #11]
 800b41a:	3301      	adds	r3, #1
 800b41c:	72fb      	strb	r3, [r7, #11]
          break;
 800b41e:	e089      	b.n	800b534 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b426:	689b      	ldr	r3, [r3, #8]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d00b      	beq.n	800b444 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	7c12      	ldrb	r2, [r2, #16]
 800b438:	f107 0108 	add.w	r1, r7, #8
 800b43c:	4610      	mov	r0, r2
 800b43e:	4798      	blx	r3
 800b440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b442:	e077      	b.n	800b534 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b444:	6839      	ldr	r1, [r7, #0]
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 fab1 	bl	800b9ae <USBD_CtlError>
            err++;
 800b44c:	7afb      	ldrb	r3, [r7, #11]
 800b44e:	3301      	adds	r3, #1
 800b450:	72fb      	strb	r3, [r7, #11]
          break;
 800b452:	e06f      	b.n	800b534 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00b      	beq.n	800b478 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	7c12      	ldrb	r2, [r2, #16]
 800b46c:	f107 0108 	add.w	r1, r7, #8
 800b470:	4610      	mov	r0, r2
 800b472:	4798      	blx	r3
 800b474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b476:	e05d      	b.n	800b534 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b478:	6839      	ldr	r1, [r7, #0]
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 fa97 	bl	800b9ae <USBD_CtlError>
            err++;
 800b480:	7afb      	ldrb	r3, [r7, #11]
 800b482:	3301      	adds	r3, #1
 800b484:	72fb      	strb	r3, [r7, #11]
          break;
 800b486:	e055      	b.n	800b534 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b48e:	691b      	ldr	r3, [r3, #16]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d00b      	beq.n	800b4ac <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b49a:	691b      	ldr	r3, [r3, #16]
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	7c12      	ldrb	r2, [r2, #16]
 800b4a0:	f107 0108 	add.w	r1, r7, #8
 800b4a4:	4610      	mov	r0, r2
 800b4a6:	4798      	blx	r3
 800b4a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4aa:	e043      	b.n	800b534 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4ac:	6839      	ldr	r1, [r7, #0]
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 fa7d 	bl	800b9ae <USBD_CtlError>
            err++;
 800b4b4:	7afb      	ldrb	r3, [r7, #11]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b4ba:	e03b      	b.n	800b534 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4c2:	695b      	ldr	r3, [r3, #20]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d00b      	beq.n	800b4e0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4ce:	695b      	ldr	r3, [r3, #20]
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	7c12      	ldrb	r2, [r2, #16]
 800b4d4:	f107 0108 	add.w	r1, r7, #8
 800b4d8:	4610      	mov	r0, r2
 800b4da:	4798      	blx	r3
 800b4dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4de:	e029      	b.n	800b534 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4e0:	6839      	ldr	r1, [r7, #0]
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 fa63 	bl	800b9ae <USBD_CtlError>
            err++;
 800b4e8:	7afb      	ldrb	r3, [r7, #11]
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b4ee:	e021      	b.n	800b534 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4f6:	699b      	ldr	r3, [r3, #24]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d00b      	beq.n	800b514 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b502:	699b      	ldr	r3, [r3, #24]
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	7c12      	ldrb	r2, [r2, #16]
 800b508:	f107 0108 	add.w	r1, r7, #8
 800b50c:	4610      	mov	r0, r2
 800b50e:	4798      	blx	r3
 800b510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b512:	e00f      	b.n	800b534 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b514:	6839      	ldr	r1, [r7, #0]
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 fa49 	bl	800b9ae <USBD_CtlError>
            err++;
 800b51c:	7afb      	ldrb	r3, [r7, #11]
 800b51e:	3301      	adds	r3, #1
 800b520:	72fb      	strb	r3, [r7, #11]
          break;
 800b522:	e007      	b.n	800b534 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b524:	6839      	ldr	r1, [r7, #0]
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 fa41 	bl	800b9ae <USBD_CtlError>
          err++;
 800b52c:	7afb      	ldrb	r3, [r7, #11]
 800b52e:	3301      	adds	r3, #1
 800b530:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b532:	bf00      	nop
      }
      break;
 800b534:	e037      	b.n	800b5a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	7c1b      	ldrb	r3, [r3, #16]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d109      	bne.n	800b552 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b546:	f107 0208 	add.w	r2, r7, #8
 800b54a:	4610      	mov	r0, r2
 800b54c:	4798      	blx	r3
 800b54e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b550:	e029      	b.n	800b5a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b552:	6839      	ldr	r1, [r7, #0]
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 fa2a 	bl	800b9ae <USBD_CtlError>
        err++;
 800b55a:	7afb      	ldrb	r3, [r7, #11]
 800b55c:	3301      	adds	r3, #1
 800b55e:	72fb      	strb	r3, [r7, #11]
      break;
 800b560:	e021      	b.n	800b5a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	7c1b      	ldrb	r3, [r3, #16]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d10d      	bne.n	800b586 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b572:	f107 0208 	add.w	r2, r7, #8
 800b576:	4610      	mov	r0, r2
 800b578:	4798      	blx	r3
 800b57a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	3301      	adds	r3, #1
 800b580:	2207      	movs	r2, #7
 800b582:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b584:	e00f      	b.n	800b5a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b586:	6839      	ldr	r1, [r7, #0]
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 fa10 	bl	800b9ae <USBD_CtlError>
        err++;
 800b58e:	7afb      	ldrb	r3, [r7, #11]
 800b590:	3301      	adds	r3, #1
 800b592:	72fb      	strb	r3, [r7, #11]
      break;
 800b594:	e007      	b.n	800b5a6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b596:	6839      	ldr	r1, [r7, #0]
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 fa08 	bl	800b9ae <USBD_CtlError>
      err++;
 800b59e:	7afb      	ldrb	r3, [r7, #11]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	72fb      	strb	r3, [r7, #11]
      break;
 800b5a4:	bf00      	nop
  }

  if (err != 0U)
 800b5a6:	7afb      	ldrb	r3, [r7, #11]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d11e      	bne.n	800b5ea <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	88db      	ldrh	r3, [r3, #6]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d016      	beq.n	800b5e2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b5b4:	893b      	ldrh	r3, [r7, #8]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00e      	beq.n	800b5d8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	88da      	ldrh	r2, [r3, #6]
 800b5be:	893b      	ldrh	r3, [r7, #8]
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	bf28      	it	cs
 800b5c4:	4613      	movcs	r3, r2
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b5ca:	893b      	ldrh	r3, [r7, #8]
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	68f9      	ldr	r1, [r7, #12]
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 fa69 	bl	800baa8 <USBD_CtlSendData>
 800b5d6:	e009      	b.n	800b5ec <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b5d8:	6839      	ldr	r1, [r7, #0]
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f9e7 	bl	800b9ae <USBD_CtlError>
 800b5e0:	e004      	b.n	800b5ec <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 faba 	bl	800bb5c <USBD_CtlSendStatus>
 800b5e8:	e000      	b.n	800b5ec <USBD_GetDescriptor+0x320>
    return;
 800b5ea:	bf00      	nop
  }
}
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop

0800b5f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	889b      	ldrh	r3, [r3, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d131      	bne.n	800b66a <USBD_SetAddress+0x76>
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	88db      	ldrh	r3, [r3, #6]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d12d      	bne.n	800b66a <USBD_SetAddress+0x76>
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	885b      	ldrh	r3, [r3, #2]
 800b612:	2b7f      	cmp	r3, #127	@ 0x7f
 800b614:	d829      	bhi.n	800b66a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	885b      	ldrh	r3, [r3, #2]
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b620:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	2b03      	cmp	r3, #3
 800b62c:	d104      	bne.n	800b638 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b62e:	6839      	ldr	r1, [r7, #0]
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f9bc 	bl	800b9ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b636:	e01d      	b.n	800b674 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	7bfa      	ldrb	r2, [r7, #15]
 800b63c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b640:	7bfb      	ldrb	r3, [r7, #15]
 800b642:	4619      	mov	r1, r3
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f011 fbdf 	bl	801ce08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 fa86 	bl	800bb5c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b650:	7bfb      	ldrb	r3, [r7, #15]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d004      	beq.n	800b660 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2202      	movs	r2, #2
 800b65a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b65e:	e009      	b.n	800b674 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2201      	movs	r2, #1
 800b664:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b668:	e004      	b.n	800b674 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b66a:	6839      	ldr	r1, [r7, #0]
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 f99e 	bl	800b9ae <USBD_CtlError>
  }
}
 800b672:	bf00      	nop
 800b674:	bf00      	nop
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b686:	2300      	movs	r3, #0
 800b688:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	885b      	ldrh	r3, [r3, #2]
 800b68e:	b2da      	uxtb	r2, r3
 800b690:	4b4e      	ldr	r3, [pc, #312]	@ (800b7cc <USBD_SetConfig+0x150>)
 800b692:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b694:	4b4d      	ldr	r3, [pc, #308]	@ (800b7cc <USBD_SetConfig+0x150>)
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d905      	bls.n	800b6a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b69c:	6839      	ldr	r1, [r7, #0]
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 f985 	bl	800b9ae <USBD_CtlError>
    return USBD_FAIL;
 800b6a4:	2303      	movs	r3, #3
 800b6a6:	e08c      	b.n	800b7c2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	d002      	beq.n	800b6ba <USBD_SetConfig+0x3e>
 800b6b4:	2b03      	cmp	r3, #3
 800b6b6:	d029      	beq.n	800b70c <USBD_SetConfig+0x90>
 800b6b8:	e075      	b.n	800b7a6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b6ba:	4b44      	ldr	r3, [pc, #272]	@ (800b7cc <USBD_SetConfig+0x150>)
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d020      	beq.n	800b704 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b6c2:	4b42      	ldr	r3, [pc, #264]	@ (800b7cc <USBD_SetConfig+0x150>)
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b6cc:	4b3f      	ldr	r3, [pc, #252]	@ (800b7cc <USBD_SetConfig+0x150>)
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f7fe ffb9 	bl	800a64a <USBD_SetClassConfig>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b6dc:	7bfb      	ldrb	r3, [r7, #15]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d008      	beq.n	800b6f4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b6e2:	6839      	ldr	r1, [r7, #0]
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f000 f962 	bl	800b9ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2202      	movs	r2, #2
 800b6ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b6f2:	e065      	b.n	800b7c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 fa31 	bl	800bb5c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2203      	movs	r2, #3
 800b6fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b702:	e05d      	b.n	800b7c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 fa29 	bl	800bb5c <USBD_CtlSendStatus>
      break;
 800b70a:	e059      	b.n	800b7c0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b70c:	4b2f      	ldr	r3, [pc, #188]	@ (800b7cc <USBD_SetConfig+0x150>)
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d112      	bne.n	800b73a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2202      	movs	r2, #2
 800b718:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b71c:	4b2b      	ldr	r3, [pc, #172]	@ (800b7cc <USBD_SetConfig+0x150>)
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	461a      	mov	r2, r3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b726:	4b29      	ldr	r3, [pc, #164]	@ (800b7cc <USBD_SetConfig+0x150>)
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	4619      	mov	r1, r3
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f7fe ffa8 	bl	800a682 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 fa12 	bl	800bb5c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b738:	e042      	b.n	800b7c0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b73a:	4b24      	ldr	r3, [pc, #144]	@ (800b7cc <USBD_SetConfig+0x150>)
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	461a      	mov	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	429a      	cmp	r2, r3
 800b746:	d02a      	beq.n	800b79e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	4619      	mov	r1, r3
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f7fe ff96 	bl	800a682 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b756:	4b1d      	ldr	r3, [pc, #116]	@ (800b7cc <USBD_SetConfig+0x150>)
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	461a      	mov	r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b760:	4b1a      	ldr	r3, [pc, #104]	@ (800b7cc <USBD_SetConfig+0x150>)
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	4619      	mov	r1, r3
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7fe ff6f 	bl	800a64a <USBD_SetClassConfig>
 800b76c:	4603      	mov	r3, r0
 800b76e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b770:	7bfb      	ldrb	r3, [r7, #15]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d00f      	beq.n	800b796 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b776:	6839      	ldr	r1, [r7, #0]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 f918 	bl	800b9ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	b2db      	uxtb	r3, r3
 800b784:	4619      	mov	r1, r3
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7fe ff7b 	bl	800a682 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2202      	movs	r2, #2
 800b790:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b794:	e014      	b.n	800b7c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 f9e0 	bl	800bb5c <USBD_CtlSendStatus>
      break;
 800b79c:	e010      	b.n	800b7c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 f9dc 	bl	800bb5c <USBD_CtlSendStatus>
      break;
 800b7a4:	e00c      	b.n	800b7c0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b7a6:	6839      	ldr	r1, [r7, #0]
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 f900 	bl	800b9ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b7ae:	4b07      	ldr	r3, [pc, #28]	@ (800b7cc <USBD_SetConfig+0x150>)
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f7fe ff64 	bl	800a682 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b7ba:	2303      	movs	r3, #3
 800b7bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b7be:	bf00      	nop
  }

  return ret;
 800b7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	200051bc 	.word	0x200051bc

0800b7d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	88db      	ldrh	r3, [r3, #6]
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d004      	beq.n	800b7ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b7e2:	6839      	ldr	r1, [r7, #0]
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 f8e2 	bl	800b9ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b7ea:	e023      	b.n	800b834 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	2b02      	cmp	r3, #2
 800b7f6:	dc02      	bgt.n	800b7fe <USBD_GetConfig+0x2e>
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	dc03      	bgt.n	800b804 <USBD_GetConfig+0x34>
 800b7fc:	e015      	b.n	800b82a <USBD_GetConfig+0x5a>
 800b7fe:	2b03      	cmp	r3, #3
 800b800:	d00b      	beq.n	800b81a <USBD_GetConfig+0x4a>
 800b802:	e012      	b.n	800b82a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	3308      	adds	r3, #8
 800b80e:	2201      	movs	r2, #1
 800b810:	4619      	mov	r1, r3
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 f948 	bl	800baa8 <USBD_CtlSendData>
        break;
 800b818:	e00c      	b.n	800b834 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	3304      	adds	r3, #4
 800b81e:	2201      	movs	r2, #1
 800b820:	4619      	mov	r1, r3
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 f940 	bl	800baa8 <USBD_CtlSendData>
        break;
 800b828:	e004      	b.n	800b834 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b82a:	6839      	ldr	r1, [r7, #0]
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 f8be 	bl	800b9ae <USBD_CtlError>
        break;
 800b832:	bf00      	nop
}
 800b834:	bf00      	nop
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	3b01      	subs	r3, #1
 800b850:	2b02      	cmp	r3, #2
 800b852:	d81e      	bhi.n	800b892 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	88db      	ldrh	r3, [r3, #6]
 800b858:	2b02      	cmp	r3, #2
 800b85a:	d004      	beq.n	800b866 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b85c:	6839      	ldr	r1, [r7, #0]
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 f8a5 	bl	800b9ae <USBD_CtlError>
        break;
 800b864:	e01a      	b.n	800b89c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2201      	movs	r2, #1
 800b86a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b872:	2b00      	cmp	r3, #0
 800b874:	d005      	beq.n	800b882 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	f043 0202 	orr.w	r2, r3, #2
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	330c      	adds	r3, #12
 800b886:	2202      	movs	r2, #2
 800b888:	4619      	mov	r1, r3
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 f90c 	bl	800baa8 <USBD_CtlSendData>
      break;
 800b890:	e004      	b.n	800b89c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b892:	6839      	ldr	r1, [r7, #0]
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f000 f88a 	bl	800b9ae <USBD_CtlError>
      break;
 800b89a:	bf00      	nop
  }
}
 800b89c:	bf00      	nop
 800b89e:	3708      	adds	r7, #8
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	885b      	ldrh	r3, [r3, #2]
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d107      	bne.n	800b8c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f94c 	bl	800bb5c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b8c4:	e013      	b.n	800b8ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	885b      	ldrh	r3, [r3, #2]
 800b8ca:	2b02      	cmp	r3, #2
 800b8cc:	d10b      	bne.n	800b8e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	889b      	ldrh	r3, [r3, #4]
 800b8d2:	0a1b      	lsrs	r3, r3, #8
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	b2da      	uxtb	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 f93c 	bl	800bb5c <USBD_CtlSendStatus>
}
 800b8e4:	e003      	b.n	800b8ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b8e6:	6839      	ldr	r1, [r7, #0]
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f000 f860 	bl	800b9ae <USBD_CtlError>
}
 800b8ee:	bf00      	nop
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b082      	sub	sp, #8
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
 800b8fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b906:	b2db      	uxtb	r3, r3
 800b908:	3b01      	subs	r3, #1
 800b90a:	2b02      	cmp	r3, #2
 800b90c:	d80b      	bhi.n	800b926 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	885b      	ldrh	r3, [r3, #2]
 800b912:	2b01      	cmp	r3, #1
 800b914:	d10c      	bne.n	800b930 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 f91c 	bl	800bb5c <USBD_CtlSendStatus>
      }
      break;
 800b924:	e004      	b.n	800b930 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b926:	6839      	ldr	r1, [r7, #0]
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 f840 	bl	800b9ae <USBD_CtlError>
      break;
 800b92e:	e000      	b.n	800b932 <USBD_ClrFeature+0x3c>
      break;
 800b930:	bf00      	nop
  }
}
 800b932:	bf00      	nop
 800b934:	3708      	adds	r7, #8
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b084      	sub	sp, #16
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
 800b942:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	781a      	ldrb	r2, [r3, #0]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	3301      	adds	r3, #1
 800b954:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	781a      	ldrb	r2, [r3, #0]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	3301      	adds	r3, #1
 800b962:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f7ff fa16 	bl	800ad96 <SWAPBYTE>
 800b96a:	4603      	mov	r3, r0
 800b96c:	461a      	mov	r2, r3
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	3301      	adds	r3, #1
 800b976:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	3301      	adds	r3, #1
 800b97c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f7ff fa09 	bl	800ad96 <SWAPBYTE>
 800b984:	4603      	mov	r3, r0
 800b986:	461a      	mov	r2, r3
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	3301      	adds	r3, #1
 800b990:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	3301      	adds	r3, #1
 800b996:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	f7ff f9fc 	bl	800ad96 <SWAPBYTE>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	80da      	strh	r2, [r3, #6]
}
 800b9a6:	bf00      	nop
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b082      	sub	sp, #8
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9b8:	2180      	movs	r1, #128	@ 0x80
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f011 f9ba 	bl	801cd34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f011 f9b6 	bl	801cd34 <USBD_LL_StallEP>
}
 800b9c8:	bf00      	nop
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b086      	sub	sp, #24
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d042      	beq.n	800ba6c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b9ea:	6938      	ldr	r0, [r7, #16]
 800b9ec:	f000 f842 	bl	800ba74 <USBD_GetLen>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	005b      	lsls	r3, r3, #1
 800b9f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9fa:	d808      	bhi.n	800ba0e <USBD_GetString+0x3e>
 800b9fc:	6938      	ldr	r0, [r7, #16]
 800b9fe:	f000 f839 	bl	800ba74 <USBD_GetLen>
 800ba02:	4603      	mov	r3, r0
 800ba04:	3301      	adds	r3, #1
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	005b      	lsls	r3, r3, #1
 800ba0a:	b29a      	uxth	r2, r3
 800ba0c:	e001      	b.n	800ba12 <USBD_GetString+0x42>
 800ba0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ba16:	7dfb      	ldrb	r3, [r7, #23]
 800ba18:	68ba      	ldr	r2, [r7, #8]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	7812      	ldrb	r2, [r2, #0]
 800ba20:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba22:	7dfb      	ldrb	r3, [r7, #23]
 800ba24:	3301      	adds	r3, #1
 800ba26:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ba28:	7dfb      	ldrb	r3, [r7, #23]
 800ba2a:	68ba      	ldr	r2, [r7, #8]
 800ba2c:	4413      	add	r3, r2
 800ba2e:	2203      	movs	r2, #3
 800ba30:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba32:	7dfb      	ldrb	r3, [r7, #23]
 800ba34:	3301      	adds	r3, #1
 800ba36:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ba38:	e013      	b.n	800ba62 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ba3a:	7dfb      	ldrb	r3, [r7, #23]
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	4413      	add	r3, r2
 800ba40:	693a      	ldr	r2, [r7, #16]
 800ba42:	7812      	ldrb	r2, [r2, #0]
 800ba44:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	613b      	str	r3, [r7, #16]
    idx++;
 800ba4c:	7dfb      	ldrb	r3, [r7, #23]
 800ba4e:	3301      	adds	r3, #1
 800ba50:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ba52:	7dfb      	ldrb	r3, [r7, #23]
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	4413      	add	r3, r2
 800ba58:	2200      	movs	r2, #0
 800ba5a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ba5c:	7dfb      	ldrb	r3, [r7, #23]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d1e7      	bne.n	800ba3a <USBD_GetString+0x6a>
 800ba6a:	e000      	b.n	800ba6e <USBD_GetString+0x9e>
    return;
 800ba6c:	bf00      	nop
  }
}
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b085      	sub	sp, #20
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ba84:	e005      	b.n	800ba92 <USBD_GetLen+0x1e>
  {
    len++;
 800ba86:	7bfb      	ldrb	r3, [r7, #15]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d1f5      	bne.n	800ba86 <USBD_GetLen+0x12>
  }

  return len;
 800ba9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3714      	adds	r7, #20
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2202      	movs	r2, #2
 800bab8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	68ba      	ldr	r2, [r7, #8]
 800bacc:	2100      	movs	r1, #0
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	f011 f9b9 	bl	801ce46 <USBD_LL_Transmit>

  return USBD_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b084      	sub	sp, #16
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	60f8      	str	r0, [r7, #12]
 800bae6:	60b9      	str	r1, [r7, #8]
 800bae8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	68ba      	ldr	r2, [r7, #8]
 800baee:	2100      	movs	r1, #0
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	f011 f9a8 	bl	801ce46 <USBD_LL_Transmit>

  return USBD_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3710      	adds	r7, #16
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2203      	movs	r2, #3
 800bb10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	2100      	movs	r1, #0
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f011 f9ac 	bl	801ce88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb30:	2300      	movs	r3, #0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b084      	sub	sp, #16
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	60f8      	str	r0, [r7, #12]
 800bb42:	60b9      	str	r1, [r7, #8]
 800bb44:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	f011 f99b 	bl	801ce88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb52:	2300      	movs	r3, #0
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2204      	movs	r2, #4
 800bb68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	2200      	movs	r2, #0
 800bb70:	2100      	movs	r1, #0
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f011 f967 	bl	801ce46 <USBD_LL_Transmit>

  return USBD_OK;
 800bb78:	2300      	movs	r3, #0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3708      	adds	r7, #8
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b082      	sub	sp, #8
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2205      	movs	r2, #5
 800bb8e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb92:	2300      	movs	r3, #0
 800bb94:	2200      	movs	r2, #0
 800bb96:	2100      	movs	r1, #0
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f011 f975 	bl	801ce88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3708      	adds	r7, #8
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b085      	sub	sp, #20
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	4603      	mov	r3, r0
 800bbb0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bbb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bbba:	2b84      	cmp	r3, #132	@ 0x84
 800bbbc:	d005      	beq.n	800bbca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bbbe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	3303      	adds	r3, #3
 800bbc8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bbca:	68fb      	ldr	r3, [r7, #12]
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3714      	adds	r7, #20
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr

0800bbd8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbde:	f3ef 8305 	mrs	r3, IPSR
 800bbe2:	607b      	str	r3, [r7, #4]
  return(result);
 800bbe4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	bf14      	ite	ne
 800bbea:	2301      	movne	r3, #1
 800bbec:	2300      	moveq	r3, #0
 800bbee:	b2db      	uxtb	r3, r3
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bc00:	f001 fe4c 	bl	800d89c <vTaskStartScheduler>
  
  return osOK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bc0e:	f7ff ffe3 	bl	800bbd8 <inHandlerMode>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d003      	beq.n	800bc20 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bc18:	f001 ff6c 	bl	800daf4 <xTaskGetTickCountFromISR>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	e002      	b.n	800bc26 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bc20:	f001 ff58 	bl	800dad4 <xTaskGetTickCount>
 800bc24:	4603      	mov	r3, r0
  }
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bc2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc2c:	b089      	sub	sp, #36	@ 0x24
 800bc2e:	af04      	add	r7, sp, #16
 800bc30:	6078      	str	r0, [r7, #4]
 800bc32:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	695b      	ldr	r3, [r3, #20]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d020      	beq.n	800bc7e <osThreadCreate+0x54>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	699b      	ldr	r3, [r3, #24]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d01c      	beq.n	800bc7e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	685c      	ldr	r4, [r3, #4]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	691e      	ldr	r6, [r3, #16]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7ff ffa6 	bl	800bba8 <makeFreeRtosPriority>
 800bc5c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	695b      	ldr	r3, [r3, #20]
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc66:	9202      	str	r2, [sp, #8]
 800bc68:	9301      	str	r3, [sp, #4]
 800bc6a:	9100      	str	r1, [sp, #0]
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	4632      	mov	r2, r6
 800bc70:	4629      	mov	r1, r5
 800bc72:	4620      	mov	r0, r4
 800bc74:	f001 fb90 	bl	800d398 <xTaskCreateStatic>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	60fb      	str	r3, [r7, #12]
 800bc7c:	e01c      	b.n	800bcb8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	685c      	ldr	r4, [r3, #4]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc8a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7ff ff88 	bl	800bba8 <makeFreeRtosPriority>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	f107 030c 	add.w	r3, r7, #12
 800bc9e:	9301      	str	r3, [sp, #4]
 800bca0:	9200      	str	r2, [sp, #0]
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	4632      	mov	r2, r6
 800bca6:	4629      	mov	r1, r5
 800bca8:	4620      	mov	r0, r4
 800bcaa:	f001 fbdb 	bl	800d464 <xTaskCreate>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d001      	beq.n	800bcb8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	e000      	b.n	800bcba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3714      	adds	r7, #20
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bcc2 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800bcc2:	b580      	push	{r7, lr}
 800bcc4:	b082      	sub	sp, #8
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f001 fd1c 	bl	800d708 <vTaskDelete>
  return osOK;
 800bcd0:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b084      	sub	sp, #16
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d001      	beq.n	800bcf0 <osDelay+0x16>
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	e000      	b.n	800bcf2 <osDelay+0x18>
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f001 fd9a 	bl	800d82c <vTaskDelay>
  
  return osOK;
 800bcf8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3710      	adds	r7, #16
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b082      	sub	sp, #8
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d007      	beq.n	800bd22 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	4619      	mov	r1, r3
 800bd18:	2001      	movs	r0, #1
 800bd1a:	f000 fc9a 	bl	800c652 <xQueueCreateMutexStatic>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	e003      	b.n	800bd2a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800bd22:	2001      	movs	r0, #1
 800bd24:	f000 fc7d 	bl	800c622 <xQueueCreateMutex>
 800bd28:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3708      	adds	r7, #8
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
	...

0800bd34 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b084      	sub	sp, #16
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bd3e:	2300      	movs	r3, #0
 800bd40:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d101      	bne.n	800bd4c <osMutexWait+0x18>
    return osErrorParameter;
 800bd48:	2380      	movs	r3, #128	@ 0x80
 800bd4a:	e03a      	b.n	800bdc2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd56:	d103      	bne.n	800bd60 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800bd58:	f04f 33ff 	mov.w	r3, #4294967295
 800bd5c:	60fb      	str	r3, [r7, #12]
 800bd5e:	e009      	b.n	800bd74 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d006      	beq.n	800bd74 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d101      	bne.n	800bd74 <osMutexWait+0x40>
      ticks = 1;
 800bd70:	2301      	movs	r3, #1
 800bd72:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bd74:	f7ff ff30 	bl	800bbd8 <inHandlerMode>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d017      	beq.n	800bdae <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800bd7e:	f107 0308 	add.w	r3, r7, #8
 800bd82:	461a      	mov	r2, r3
 800bd84:	2100      	movs	r1, #0
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f001 f8c4 	bl	800cf14 <xQueueReceiveFromISR>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d001      	beq.n	800bd96 <osMutexWait+0x62>
      return osErrorOS;
 800bd92:	23ff      	movs	r3, #255	@ 0xff
 800bd94:	e015      	b.n	800bdc2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d011      	beq.n	800bdc0 <osMutexWait+0x8c>
 800bd9c:	4b0b      	ldr	r3, [pc, #44]	@ (800bdcc <osMutexWait+0x98>)
 800bd9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bda2:	601a      	str	r2, [r3, #0]
 800bda4:	f3bf 8f4f 	dsb	sy
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	e008      	b.n	800bdc0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800bdae:	68f9      	ldr	r1, [r7, #12]
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 ff97 	bl	800cce4 <xQueueSemaphoreTake>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d001      	beq.n	800bdc0 <osMutexWait+0x8c>
    return osErrorOS;
 800bdbc:	23ff      	movs	r3, #255	@ 0xff
 800bdbe:	e000      	b.n	800bdc2 <osMutexWait+0x8e>
  }
  
  return osOK;
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	e000ed04 	.word	0xe000ed04

0800bdd0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bddc:	2300      	movs	r3, #0
 800bdde:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800bde0:	f7ff fefa 	bl	800bbd8 <inHandlerMode>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d016      	beq.n	800be18 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800bdea:	f107 0308 	add.w	r3, r7, #8
 800bdee:	4619      	mov	r1, r3
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 fdf6 	bl	800c9e2 <xQueueGiveFromISR>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d001      	beq.n	800be00 <osMutexRelease+0x30>
      return osErrorOS;
 800bdfc:	23ff      	movs	r3, #255	@ 0xff
 800bdfe:	e017      	b.n	800be30 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d013      	beq.n	800be2e <osMutexRelease+0x5e>
 800be06:	4b0c      	ldr	r3, [pc, #48]	@ (800be38 <osMutexRelease+0x68>)
 800be08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be0c:	601a      	str	r2, [r3, #0]
 800be0e:	f3bf 8f4f 	dsb	sy
 800be12:	f3bf 8f6f 	isb	sy
 800be16:	e00a      	b.n	800be2e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800be18:	2300      	movs	r3, #0
 800be1a:	2200      	movs	r2, #0
 800be1c:	2100      	movs	r1, #0
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 fc32 	bl	800c688 <xQueueGenericSend>
 800be24:	4603      	mov	r3, r0
 800be26:	2b01      	cmp	r3, #1
 800be28:	d001      	beq.n	800be2e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800be2a:	23ff      	movs	r3, #255	@ 0xff
 800be2c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800be2e:	68fb      	ldr	r3, [r7, #12]
}
 800be30:	4618      	mov	r0, r3
 800be32:	3710      	adds	r7, #16
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}
 800be38:	e000ed04 	.word	0xe000ed04

0800be3c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b086      	sub	sp, #24
 800be40:	af02      	add	r7, sp, #8
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d00f      	beq.n	800be6e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	2b01      	cmp	r3, #1
 800be52:	d10a      	bne.n	800be6a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	2203      	movs	r2, #3
 800be5a:	9200      	str	r2, [sp, #0]
 800be5c:	2200      	movs	r2, #0
 800be5e:	2100      	movs	r1, #0
 800be60:	2001      	movs	r0, #1
 800be62:	f000 fadb 	bl	800c41c <xQueueGenericCreateStatic>
 800be66:	4603      	mov	r3, r0
 800be68:	e016      	b.n	800be98 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800be6a:	2300      	movs	r3, #0
 800be6c:	e014      	b.n	800be98 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	2b01      	cmp	r3, #1
 800be72:	d110      	bne.n	800be96 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800be74:	2203      	movs	r2, #3
 800be76:	2100      	movs	r1, #0
 800be78:	2001      	movs	r0, #1
 800be7a:	f000 fb56 	bl	800c52a <xQueueGenericCreate>
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d005      	beq.n	800be92 <osSemaphoreCreate+0x56>
 800be86:	2300      	movs	r3, #0
 800be88:	2200      	movs	r2, #0
 800be8a:	2100      	movs	r1, #0
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f000 fbfb 	bl	800c688 <xQueueGenericSend>
      return sema;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	e000      	b.n	800be98 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800be96:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800beaa:	2300      	movs	r3, #0
 800beac:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d101      	bne.n	800beb8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800beb4:	2380      	movs	r3, #128	@ 0x80
 800beb6:	e03a      	b.n	800bf2e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800beb8:	2300      	movs	r3, #0
 800beba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec2:	d103      	bne.n	800becc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800bec4:	f04f 33ff 	mov.w	r3, #4294967295
 800bec8:	60fb      	str	r3, [r7, #12]
 800beca:	e009      	b.n	800bee0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d006      	beq.n	800bee0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d101      	bne.n	800bee0 <osSemaphoreWait+0x40>
      ticks = 1;
 800bedc:	2301      	movs	r3, #1
 800bede:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bee0:	f7ff fe7a 	bl	800bbd8 <inHandlerMode>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d017      	beq.n	800bf1a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800beea:	f107 0308 	add.w	r3, r7, #8
 800beee:	461a      	mov	r2, r3
 800bef0:	2100      	movs	r1, #0
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f001 f80e 	bl	800cf14 <xQueueReceiveFromISR>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b01      	cmp	r3, #1
 800befc:	d001      	beq.n	800bf02 <osSemaphoreWait+0x62>
      return osErrorOS;
 800befe:	23ff      	movs	r3, #255	@ 0xff
 800bf00:	e015      	b.n	800bf2e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d011      	beq.n	800bf2c <osSemaphoreWait+0x8c>
 800bf08:	4b0b      	ldr	r3, [pc, #44]	@ (800bf38 <osSemaphoreWait+0x98>)
 800bf0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf0e:	601a      	str	r2, [r3, #0]
 800bf10:	f3bf 8f4f 	dsb	sy
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	e008      	b.n	800bf2c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bf1a:	68f9      	ldr	r1, [r7, #12]
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 fee1 	bl	800cce4 <xQueueSemaphoreTake>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d001      	beq.n	800bf2c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800bf28:	23ff      	movs	r3, #255	@ 0xff
 800bf2a:	e000      	b.n	800bf2e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800bf2c:	2300      	movs	r3, #0
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	e000ed04 	.word	0xe000ed04

0800bf3c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bf44:	2300      	movs	r3, #0
 800bf46:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800bf4c:	f7ff fe44 	bl	800bbd8 <inHandlerMode>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d016      	beq.n	800bf84 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bf56:	f107 0308 	add.w	r3, r7, #8
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 fd40 	bl	800c9e2 <xQueueGiveFromISR>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d001      	beq.n	800bf6c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800bf68:	23ff      	movs	r3, #255	@ 0xff
 800bf6a:	e017      	b.n	800bf9c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d013      	beq.n	800bf9a <osSemaphoreRelease+0x5e>
 800bf72:	4b0c      	ldr	r3, [pc, #48]	@ (800bfa4 <osSemaphoreRelease+0x68>)
 800bf74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf78:	601a      	str	r2, [r3, #0]
 800bf7a:	f3bf 8f4f 	dsb	sy
 800bf7e:	f3bf 8f6f 	isb	sy
 800bf82:	e00a      	b.n	800bf9a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800bf84:	2300      	movs	r3, #0
 800bf86:	2200      	movs	r2, #0
 800bf88:	2100      	movs	r1, #0
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fb7c 	bl	800c688 <xQueueGenericSend>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d001      	beq.n	800bf9a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800bf96:	23ff      	movs	r3, #255	@ 0xff
 800bf98:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	e000ed04 	.word	0xe000ed04

0800bfa8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800bfb0:	f7ff fe12 	bl	800bbd8 <inHandlerMode>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d001      	beq.n	800bfbe <osSemaphoreDelete+0x16>
    return osErrorISR;
 800bfba:	2382      	movs	r3, #130	@ 0x82
 800bfbc:	e003      	b.n	800bfc6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f001 f872 	bl	800d0a8 <vQueueDelete>

  return osOK; 
 800bfc4:	2300      	movs	r3, #0
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}

0800bfce <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800bfce:	b590      	push	{r4, r7, lr}
 800bfd0:	b085      	sub	sp, #20
 800bfd2:	af02      	add	r7, sp, #8
 800bfd4:	6078      	str	r0, [r7, #4]
 800bfd6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d011      	beq.n	800c004 <osMessageCreate+0x36>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	68db      	ldr	r3, [r3, #12]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00d      	beq.n	800c004 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6818      	ldr	r0, [r3, #0]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6859      	ldr	r1, [r3, #4]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	689a      	ldr	r2, [r3, #8]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	2400      	movs	r4, #0
 800bffa:	9400      	str	r4, [sp, #0]
 800bffc:	f000 fa0e 	bl	800c41c <xQueueGenericCreateStatic>
 800c000:	4603      	mov	r3, r0
 800c002:	e008      	b.n	800c016 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6818      	ldr	r0, [r3, #0]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	4619      	mov	r1, r3
 800c010:	f000 fa8b 	bl	800c52a <xQueueGenericCreate>
 800c014:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c016:	4618      	mov	r0, r3
 800c018:	370c      	adds	r7, #12
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd90      	pop	{r4, r7, pc}
	...

0800c020 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b086      	sub	sp, #24
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c02c:	2300      	movs	r3, #0
 800c02e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d101      	bne.n	800c03e <osMessagePut+0x1e>
    ticks = 1;
 800c03a:	2301      	movs	r3, #1
 800c03c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c03e:	f7ff fdcb 	bl	800bbd8 <inHandlerMode>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d018      	beq.n	800c07a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c048:	f107 0210 	add.w	r2, r7, #16
 800c04c:	f107 0108 	add.w	r1, r7, #8
 800c050:	2300      	movs	r3, #0
 800c052:	68f8      	ldr	r0, [r7, #12]
 800c054:	f000 fc22 	bl	800c89c <xQueueGenericSendFromISR>
 800c058:	4603      	mov	r3, r0
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d001      	beq.n	800c062 <osMessagePut+0x42>
      return osErrorOS;
 800c05e:	23ff      	movs	r3, #255	@ 0xff
 800c060:	e018      	b.n	800c094 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d014      	beq.n	800c092 <osMessagePut+0x72>
 800c068:	4b0c      	ldr	r3, [pc, #48]	@ (800c09c <osMessagePut+0x7c>)
 800c06a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c06e:	601a      	str	r2, [r3, #0]
 800c070:	f3bf 8f4f 	dsb	sy
 800c074:	f3bf 8f6f 	isb	sy
 800c078:	e00b      	b.n	800c092 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c07a:	f107 0108 	add.w	r1, r7, #8
 800c07e:	2300      	movs	r3, #0
 800c080:	697a      	ldr	r2, [r7, #20]
 800c082:	68f8      	ldr	r0, [r7, #12]
 800c084:	f000 fb00 	bl	800c688 <xQueueGenericSend>
 800c088:	4603      	mov	r3, r0
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d001      	beq.n	800c092 <osMessagePut+0x72>
      return osErrorOS;
 800c08e:	23ff      	movs	r3, #255	@ 0xff
 800c090:	e000      	b.n	800c094 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c092:	2300      	movs	r3, #0
}
 800c094:	4618      	mov	r0, r3
 800c096:	3718      	adds	r7, #24
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	e000ed04 	.word	0xe000ed04

0800c0a0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c0a0:	b590      	push	{r4, r7, lr}
 800c0a2:	b08b      	sub	sp, #44	@ 0x2c
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	60b9      	str	r1, [r7, #8]
 800c0aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d10a      	bne.n	800c0d0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c0ba:	2380      	movs	r3, #128	@ 0x80
 800c0bc:	617b      	str	r3, [r7, #20]
    return event;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	461c      	mov	r4, r3
 800c0c2:	f107 0314 	add.w	r3, r7, #20
 800c0c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c0ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c0ce:	e054      	b.n	800c17a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0de:	d103      	bne.n	800c0e8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0e6:	e009      	b.n	800c0fc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d006      	beq.n	800c0fc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800c0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d101      	bne.n	800c0fc <osMessageGet+0x5c>
      ticks = 1;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c0fc:	f7ff fd6c 	bl	800bbd8 <inHandlerMode>
 800c100:	4603      	mov	r3, r0
 800c102:	2b00      	cmp	r3, #0
 800c104:	d01c      	beq.n	800c140 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c106:	f107 0220 	add.w	r2, r7, #32
 800c10a:	f107 0314 	add.w	r3, r7, #20
 800c10e:	3304      	adds	r3, #4
 800c110:	4619      	mov	r1, r3
 800c112:	68b8      	ldr	r0, [r7, #8]
 800c114:	f000 fefe 	bl	800cf14 <xQueueReceiveFromISR>
 800c118:	4603      	mov	r3, r0
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d102      	bne.n	800c124 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c11e:	2310      	movs	r3, #16
 800c120:	617b      	str	r3, [r7, #20]
 800c122:	e001      	b.n	800c128 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c124:	2300      	movs	r3, #0
 800c126:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c128:	6a3b      	ldr	r3, [r7, #32]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d01d      	beq.n	800c16a <osMessageGet+0xca>
 800c12e:	4b15      	ldr	r3, [pc, #84]	@ (800c184 <osMessageGet+0xe4>)
 800c130:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c134:	601a      	str	r2, [r3, #0]
 800c136:	f3bf 8f4f 	dsb	sy
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	e014      	b.n	800c16a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c140:	f107 0314 	add.w	r3, r7, #20
 800c144:	3304      	adds	r3, #4
 800c146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c148:	4619      	mov	r1, r3
 800c14a:	68b8      	ldr	r0, [r7, #8]
 800c14c:	f000 fce2 	bl	800cb14 <xQueueReceive>
 800c150:	4603      	mov	r3, r0
 800c152:	2b01      	cmp	r3, #1
 800c154:	d102      	bne.n	800c15c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c156:	2310      	movs	r3, #16
 800c158:	617b      	str	r3, [r7, #20]
 800c15a:	e006      	b.n	800c16a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d101      	bne.n	800c166 <osMessageGet+0xc6>
 800c162:	2300      	movs	r3, #0
 800c164:	e000      	b.n	800c168 <osMessageGet+0xc8>
 800c166:	2340      	movs	r3, #64	@ 0x40
 800c168:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	461c      	mov	r4, r3
 800c16e:	f107 0314 	add.w	r3, r7, #20
 800c172:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c176:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	372c      	adds	r7, #44	@ 0x2c
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd90      	pop	{r4, r7, pc}
 800c182:	bf00      	nop
 800c184:	e000ed04 	.word	0xe000ed04

0800c188 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c190:	f7ff fd22 	bl	800bbd8 <inHandlerMode>
 800c194:	4603      	mov	r3, r0
 800c196:	2b00      	cmp	r3, #0
 800c198:	d004      	beq.n	800c1a4 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 ff63 	bl	800d066 <uxQueueMessagesWaitingFromISR>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	e003      	b.n	800c1ac <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 ff3d 	bl	800d024 <uxQueueMessagesWaiting>
 800c1aa:	4603      	mov	r3, r0
  }
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3708      	adds	r7, #8
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c1bc:	f7ff fd0c 	bl	800bbd8 <inHandlerMode>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d001      	beq.n	800c1ca <osMessageDelete+0x16>
    return osErrorISR;
 800c1c6:	2382      	movs	r3, #130	@ 0x82
 800c1c8:	e003      	b.n	800c1d2 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 ff6c 	bl	800d0a8 <vQueueDelete>

  return osOK; 
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3708      	adds	r7, #8
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c1da:	b480      	push	{r7}
 800c1dc:	b083      	sub	sp, #12
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f103 0208 	add.w	r2, r3, #8
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c1f2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f103 0208 	add.w	r2, r3, #8
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f103 0208 	add.w	r2, r3, #8
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c20e:	bf00      	nop
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr

0800c21a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c21a:	b480      	push	{r7}
 800c21c:	b083      	sub	sp, #12
 800c21e:	af00      	add	r7, sp, #0
 800c220:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c228:	bf00      	nop
 800c22a:	370c      	adds	r7, #12
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c234:	b480      	push	{r7}
 800c236:	b085      	sub	sp, #20
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	685b      	ldr	r3, [r3, #4]
 800c242:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	68fa      	ldr	r2, [r7, #12]
 800c248:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	689a      	ldr	r2, [r3, #8]
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	683a      	ldr	r2, [r7, #0]
 800c258:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	683a      	ldr	r2, [r7, #0]
 800c25e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	1c5a      	adds	r2, r3, #1
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	601a      	str	r2, [r3, #0]
}
 800c270:	bf00      	nop
 800c272:	3714      	adds	r7, #20
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c27c:	b480      	push	{r7}
 800c27e:	b085      	sub	sp, #20
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c292:	d103      	bne.n	800c29c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	691b      	ldr	r3, [r3, #16]
 800c298:	60fb      	str	r3, [r7, #12]
 800c29a:	e00c      	b.n	800c2b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	3308      	adds	r3, #8
 800c2a0:	60fb      	str	r3, [r7, #12]
 800c2a2:	e002      	b.n	800c2aa <vListInsert+0x2e>
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	60fb      	str	r3, [r7, #12]
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	68ba      	ldr	r2, [r7, #8]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d2f6      	bcs.n	800c2a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	685a      	ldr	r2, [r3, #4]
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	683a      	ldr	r2, [r7, #0]
 800c2c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	68fa      	ldr	r2, [r7, #12]
 800c2ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	683a      	ldr	r2, [r7, #0]
 800c2d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	1c5a      	adds	r2, r3, #1
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	601a      	str	r2, [r3, #0]
}
 800c2e2:	bf00      	nop
 800c2e4:	3714      	adds	r7, #20
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c2ee:	b480      	push	{r7}
 800c2f0:	b085      	sub	sp, #20
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	691b      	ldr	r3, [r3, #16]
 800c2fa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	6892      	ldr	r2, [r2, #8]
 800c304:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	6852      	ldr	r2, [r2, #4]
 800c30e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	429a      	cmp	r2, r3
 800c318:	d103      	bne.n	800c322 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	689a      	ldr	r2, [r3, #8]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	1e5a      	subs	r2, r3, #1
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
}
 800c336:	4618      	mov	r0, r3
 800c338:	3714      	adds	r7, #20
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr
	...

0800c344 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d10d      	bne.n	800c374 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c35c:	b672      	cpsid	i
 800c35e:	f383 8811 	msr	BASEPRI, r3
 800c362:	f3bf 8f6f 	isb	sy
 800c366:	f3bf 8f4f 	dsb	sy
 800c36a:	b662      	cpsie	i
 800c36c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c36e:	bf00      	nop
 800c370:	bf00      	nop
 800c372:	e7fd      	b.n	800c370 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800c374:	f002 fa3a 	bl	800e7ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c380:	68f9      	ldr	r1, [r7, #12]
 800c382:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c384:	fb01 f303 	mul.w	r3, r1, r3
 800c388:	441a      	add	r2, r3
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2200      	movs	r2, #0
 800c392:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	68f9      	ldr	r1, [r7, #12]
 800c3a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c3aa:	fb01 f303 	mul.w	r3, r1, r3
 800c3ae:	441a      	add	r2, r3
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	22ff      	movs	r2, #255	@ 0xff
 800c3b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	22ff      	movs	r2, #255	@ 0xff
 800c3c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d114      	bne.n	800c3f4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d01a      	beq.n	800c408 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	3310      	adds	r3, #16
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f001 fce8 	bl	800ddac <xTaskRemoveFromEventList>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d012      	beq.n	800c408 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c3e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c418 <xQueueGenericReset+0xd4>)
 800c3e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3e8:	601a      	str	r2, [r3, #0]
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	e009      	b.n	800c408 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	3310      	adds	r3, #16
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7ff feee 	bl	800c1da <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	3324      	adds	r3, #36	@ 0x24
 800c402:	4618      	mov	r0, r3
 800c404:	f7ff fee9 	bl	800c1da <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c408:	f002 fa26 	bl	800e858 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c40c:	2301      	movs	r3, #1
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	e000ed04 	.word	0xe000ed04

0800c41c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b08e      	sub	sp, #56	@ 0x38
 800c420:	af02      	add	r7, sp, #8
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
 800c428:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d10d      	bne.n	800c44c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800c430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c434:	b672      	cpsid	i
 800c436:	f383 8811 	msr	BASEPRI, r3
 800c43a:	f3bf 8f6f 	isb	sy
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	b662      	cpsie	i
 800c444:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c446:	bf00      	nop
 800c448:	bf00      	nop
 800c44a:	e7fd      	b.n	800c448 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d10d      	bne.n	800c46e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800c452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c456:	b672      	cpsid	i
 800c458:	f383 8811 	msr	BASEPRI, r3
 800c45c:	f3bf 8f6f 	isb	sy
 800c460:	f3bf 8f4f 	dsb	sy
 800c464:	b662      	cpsie	i
 800c466:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c468:	bf00      	nop
 800c46a:	bf00      	nop
 800c46c:	e7fd      	b.n	800c46a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d002      	beq.n	800c47a <xQueueGenericCreateStatic+0x5e>
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d001      	beq.n	800c47e <xQueueGenericCreateStatic+0x62>
 800c47a:	2301      	movs	r3, #1
 800c47c:	e000      	b.n	800c480 <xQueueGenericCreateStatic+0x64>
 800c47e:	2300      	movs	r3, #0
 800c480:	2b00      	cmp	r3, #0
 800c482:	d10d      	bne.n	800c4a0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800c484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c488:	b672      	cpsid	i
 800c48a:	f383 8811 	msr	BASEPRI, r3
 800c48e:	f3bf 8f6f 	isb	sy
 800c492:	f3bf 8f4f 	dsb	sy
 800c496:	b662      	cpsie	i
 800c498:	623b      	str	r3, [r7, #32]
}
 800c49a:	bf00      	nop
 800c49c:	bf00      	nop
 800c49e:	e7fd      	b.n	800c49c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d102      	bne.n	800c4ac <xQueueGenericCreateStatic+0x90>
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d101      	bne.n	800c4b0 <xQueueGenericCreateStatic+0x94>
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	e000      	b.n	800c4b2 <xQueueGenericCreateStatic+0x96>
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d10d      	bne.n	800c4d2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800c4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ba:	b672      	cpsid	i
 800c4bc:	f383 8811 	msr	BASEPRI, r3
 800c4c0:	f3bf 8f6f 	isb	sy
 800c4c4:	f3bf 8f4f 	dsb	sy
 800c4c8:	b662      	cpsie	i
 800c4ca:	61fb      	str	r3, [r7, #28]
}
 800c4cc:	bf00      	nop
 800c4ce:	bf00      	nop
 800c4d0:	e7fd      	b.n	800c4ce <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c4d2:	2348      	movs	r3, #72	@ 0x48
 800c4d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	2b48      	cmp	r3, #72	@ 0x48
 800c4da:	d00d      	beq.n	800c4f8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800c4dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e0:	b672      	cpsid	i
 800c4e2:	f383 8811 	msr	BASEPRI, r3
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	f3bf 8f4f 	dsb	sy
 800c4ee:	b662      	cpsie	i
 800c4f0:	61bb      	str	r3, [r7, #24]
}
 800c4f2:	bf00      	nop
 800c4f4:	bf00      	nop
 800c4f6:	e7fd      	b.n	800c4f4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c4f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c500:	2b00      	cmp	r3, #0
 800c502:	d00d      	beq.n	800c520 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c506:	2201      	movs	r2, #1
 800c508:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c50c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c512:	9300      	str	r3, [sp, #0]
 800c514:	4613      	mov	r3, r2
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	68b9      	ldr	r1, [r7, #8]
 800c51a:	68f8      	ldr	r0, [r7, #12]
 800c51c:	f000 f848 	bl	800c5b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c522:	4618      	mov	r0, r3
 800c524:	3730      	adds	r7, #48	@ 0x30
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b08a      	sub	sp, #40	@ 0x28
 800c52e:	af02      	add	r7, sp, #8
 800c530:	60f8      	str	r0, [r7, #12]
 800c532:	60b9      	str	r1, [r7, #8]
 800c534:	4613      	mov	r3, r2
 800c536:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d10d      	bne.n	800c55a <xQueueGenericCreate+0x30>
	__asm volatile
 800c53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c542:	b672      	cpsid	i
 800c544:	f383 8811 	msr	BASEPRI, r3
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	b662      	cpsie	i
 800c552:	613b      	str	r3, [r7, #16]
}
 800c554:	bf00      	nop
 800c556:	bf00      	nop
 800c558:	e7fd      	b.n	800c556 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d102      	bne.n	800c566 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c560:	2300      	movs	r3, #0
 800c562:	61fb      	str	r3, [r7, #28]
 800c564:	e004      	b.n	800c570 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	68ba      	ldr	r2, [r7, #8]
 800c56a:	fb02 f303 	mul.w	r3, r2, r3
 800c56e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	3348      	adds	r3, #72	@ 0x48
 800c574:	4618      	mov	r0, r3
 800c576:	f002 fa67 	bl	800ea48 <pvPortMalloc>
 800c57a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d011      	beq.n	800c5a6 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c582:	69bb      	ldr	r3, [r7, #24]
 800c584:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	3348      	adds	r3, #72	@ 0x48
 800c58a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c58c:	69bb      	ldr	r3, [r7, #24]
 800c58e:	2200      	movs	r2, #0
 800c590:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c594:	79fa      	ldrb	r2, [r7, #7]
 800c596:	69bb      	ldr	r3, [r7, #24]
 800c598:	9300      	str	r3, [sp, #0]
 800c59a:	4613      	mov	r3, r2
 800c59c:	697a      	ldr	r2, [r7, #20]
 800c59e:	68b9      	ldr	r1, [r7, #8]
 800c5a0:	68f8      	ldr	r0, [r7, #12]
 800c5a2:	f000 f805 	bl	800c5b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c5a6:	69bb      	ldr	r3, [r7, #24]
	}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3720      	adds	r7, #32
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	607a      	str	r2, [r7, #4]
 800c5bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d103      	bne.n	800c5cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c5c4:	69bb      	ldr	r3, [r7, #24]
 800c5c6:	69ba      	ldr	r2, [r7, #24]
 800c5c8:	601a      	str	r2, [r3, #0]
 800c5ca:	e002      	b.n	800c5d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c5cc:	69bb      	ldr	r3, [r7, #24]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	68fa      	ldr	r2, [r7, #12]
 800c5d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c5d8:	69bb      	ldr	r3, [r7, #24]
 800c5da:	68ba      	ldr	r2, [r7, #8]
 800c5dc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c5de:	2101      	movs	r1, #1
 800c5e0:	69b8      	ldr	r0, [r7, #24]
 800c5e2:	f7ff feaf 	bl	800c344 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c5e6:	bf00      	nop
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b082      	sub	sp, #8
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00e      	beq.n	800c61a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2200      	movs	r2, #0
 800c606:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2200      	movs	r2, #0
 800c60c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c60e:	2300      	movs	r3, #0
 800c610:	2200      	movs	r2, #0
 800c612:	2100      	movs	r1, #0
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 f837 	bl	800c688 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c61a:	bf00      	nop
 800c61c:	3708      	adds	r7, #8
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c622:	b580      	push	{r7, lr}
 800c624:	b086      	sub	sp, #24
 800c626:	af00      	add	r7, sp, #0
 800c628:	4603      	mov	r3, r0
 800c62a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c62c:	2301      	movs	r3, #1
 800c62e:	617b      	str	r3, [r7, #20]
 800c630:	2300      	movs	r3, #0
 800c632:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c634:	79fb      	ldrb	r3, [r7, #7]
 800c636:	461a      	mov	r2, r3
 800c638:	6939      	ldr	r1, [r7, #16]
 800c63a:	6978      	ldr	r0, [r7, #20]
 800c63c:	f7ff ff75 	bl	800c52a <xQueueGenericCreate>
 800c640:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	f7ff ffd3 	bl	800c5ee <prvInitialiseMutex>

		return xNewQueue;
 800c648:	68fb      	ldr	r3, [r7, #12]
	}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3718      	adds	r7, #24
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}

0800c652 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c652:	b580      	push	{r7, lr}
 800c654:	b088      	sub	sp, #32
 800c656:	af02      	add	r7, sp, #8
 800c658:	4603      	mov	r3, r0
 800c65a:	6039      	str	r1, [r7, #0]
 800c65c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c65e:	2301      	movs	r3, #1
 800c660:	617b      	str	r3, [r7, #20]
 800c662:	2300      	movs	r3, #0
 800c664:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c666:	79fb      	ldrb	r3, [r7, #7]
 800c668:	9300      	str	r3, [sp, #0]
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	2200      	movs	r2, #0
 800c66e:	6939      	ldr	r1, [r7, #16]
 800c670:	6978      	ldr	r0, [r7, #20]
 800c672:	f7ff fed3 	bl	800c41c <xQueueGenericCreateStatic>
 800c676:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f7ff ffb8 	bl	800c5ee <prvInitialiseMutex>

		return xNewQueue;
 800c67e:	68fb      	ldr	r3, [r7, #12]
	}
 800c680:	4618      	mov	r0, r3
 800c682:	3718      	adds	r7, #24
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b08e      	sub	sp, #56	@ 0x38
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	607a      	str	r2, [r7, #4]
 800c694:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c696:	2300      	movs	r3, #0
 800c698:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d10d      	bne.n	800c6c0 <xQueueGenericSend+0x38>
	__asm volatile
 800c6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a8:	b672      	cpsid	i
 800c6aa:	f383 8811 	msr	BASEPRI, r3
 800c6ae:	f3bf 8f6f 	isb	sy
 800c6b2:	f3bf 8f4f 	dsb	sy
 800c6b6:	b662      	cpsie	i
 800c6b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c6ba:	bf00      	nop
 800c6bc:	bf00      	nop
 800c6be:	e7fd      	b.n	800c6bc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d103      	bne.n	800c6ce <xQueueGenericSend+0x46>
 800c6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d101      	bne.n	800c6d2 <xQueueGenericSend+0x4a>
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e000      	b.n	800c6d4 <xQueueGenericSend+0x4c>
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10d      	bne.n	800c6f4 <xQueueGenericSend+0x6c>
	__asm volatile
 800c6d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6dc:	b672      	cpsid	i
 800c6de:	f383 8811 	msr	BASEPRI, r3
 800c6e2:	f3bf 8f6f 	isb	sy
 800c6e6:	f3bf 8f4f 	dsb	sy
 800c6ea:	b662      	cpsie	i
 800c6ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c6ee:	bf00      	nop
 800c6f0:	bf00      	nop
 800c6f2:	e7fd      	b.n	800c6f0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	2b02      	cmp	r3, #2
 800c6f8:	d103      	bne.n	800c702 <xQueueGenericSend+0x7a>
 800c6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d101      	bne.n	800c706 <xQueueGenericSend+0x7e>
 800c702:	2301      	movs	r3, #1
 800c704:	e000      	b.n	800c708 <xQueueGenericSend+0x80>
 800c706:	2300      	movs	r3, #0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d10d      	bne.n	800c728 <xQueueGenericSend+0xa0>
	__asm volatile
 800c70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c710:	b672      	cpsid	i
 800c712:	f383 8811 	msr	BASEPRI, r3
 800c716:	f3bf 8f6f 	isb	sy
 800c71a:	f3bf 8f4f 	dsb	sy
 800c71e:	b662      	cpsie	i
 800c720:	623b      	str	r3, [r7, #32]
}
 800c722:	bf00      	nop
 800c724:	bf00      	nop
 800c726:	e7fd      	b.n	800c724 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c728:	f001 fd0e 	bl	800e148 <xTaskGetSchedulerState>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d102      	bne.n	800c738 <xQueueGenericSend+0xb0>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d101      	bne.n	800c73c <xQueueGenericSend+0xb4>
 800c738:	2301      	movs	r3, #1
 800c73a:	e000      	b.n	800c73e <xQueueGenericSend+0xb6>
 800c73c:	2300      	movs	r3, #0
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d10d      	bne.n	800c75e <xQueueGenericSend+0xd6>
	__asm volatile
 800c742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c746:	b672      	cpsid	i
 800c748:	f383 8811 	msr	BASEPRI, r3
 800c74c:	f3bf 8f6f 	isb	sy
 800c750:	f3bf 8f4f 	dsb	sy
 800c754:	b662      	cpsie	i
 800c756:	61fb      	str	r3, [r7, #28]
}
 800c758:	bf00      	nop
 800c75a:	bf00      	nop
 800c75c:	e7fd      	b.n	800c75a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c75e:	f002 f845 	bl	800e7ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c764:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d302      	bcc.n	800c774 <xQueueGenericSend+0xec>
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	2b02      	cmp	r3, #2
 800c772:	d129      	bne.n	800c7c8 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c774:	683a      	ldr	r2, [r7, #0]
 800c776:	68b9      	ldr	r1, [r7, #8]
 800c778:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c77a:	f000 fcd3 	bl	800d124 <prvCopyDataToQueue>
 800c77e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c784:	2b00      	cmp	r3, #0
 800c786:	d010      	beq.n	800c7aa <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c78a:	3324      	adds	r3, #36	@ 0x24
 800c78c:	4618      	mov	r0, r3
 800c78e:	f001 fb0d 	bl	800ddac <xTaskRemoveFromEventList>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d013      	beq.n	800c7c0 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c798:	4b3f      	ldr	r3, [pc, #252]	@ (800c898 <xQueueGenericSend+0x210>)
 800c79a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c79e:	601a      	str	r2, [r3, #0]
 800c7a0:	f3bf 8f4f 	dsb	sy
 800c7a4:	f3bf 8f6f 	isb	sy
 800c7a8:	e00a      	b.n	800c7c0 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d007      	beq.n	800c7c0 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c7b0:	4b39      	ldr	r3, [pc, #228]	@ (800c898 <xQueueGenericSend+0x210>)
 800c7b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7b6:	601a      	str	r2, [r3, #0]
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c7c0:	f002 f84a 	bl	800e858 <vPortExitCritical>
				return pdPASS;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	e063      	b.n	800c890 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d103      	bne.n	800c7d6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c7ce:	f002 f843 	bl	800e858 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	e05c      	b.n	800c890 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c7d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d106      	bne.n	800c7ea <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c7dc:	f107 0314 	add.w	r3, r7, #20
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f001 fb49 	bl	800de78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c7ea:	f002 f835 	bl	800e858 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c7ee:	f001 f8c3 	bl	800d978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c7f2:	f001 fffb 	bl	800e7ec <vPortEnterCritical>
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c7fc:	b25b      	sxtb	r3, r3
 800c7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c802:	d103      	bne.n	800c80c <xQueueGenericSend+0x184>
 800c804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c806:	2200      	movs	r2, #0
 800c808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c80e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c812:	b25b      	sxtb	r3, r3
 800c814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c818:	d103      	bne.n	800c822 <xQueueGenericSend+0x19a>
 800c81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c81c:	2200      	movs	r2, #0
 800c81e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c822:	f002 f819 	bl	800e858 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c826:	1d3a      	adds	r2, r7, #4
 800c828:	f107 0314 	add.w	r3, r7, #20
 800c82c:	4611      	mov	r1, r2
 800c82e:	4618      	mov	r0, r3
 800c830:	f001 fb38 	bl	800dea4 <xTaskCheckForTimeOut>
 800c834:	4603      	mov	r3, r0
 800c836:	2b00      	cmp	r3, #0
 800c838:	d124      	bne.n	800c884 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c83a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c83c:	f000 fd6a 	bl	800d314 <prvIsQueueFull>
 800c840:	4603      	mov	r3, r0
 800c842:	2b00      	cmp	r3, #0
 800c844:	d018      	beq.n	800c878 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c848:	3310      	adds	r3, #16
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	4611      	mov	r1, r2
 800c84e:	4618      	mov	r0, r3
 800c850:	f001 fa84 	bl	800dd5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c854:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c856:	f000 fcf5 	bl	800d244 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c85a:	f001 f89b 	bl	800d994 <xTaskResumeAll>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	f47f af7c 	bne.w	800c75e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800c866:	4b0c      	ldr	r3, [pc, #48]	@ (800c898 <xQueueGenericSend+0x210>)
 800c868:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c86c:	601a      	str	r2, [r3, #0]
 800c86e:	f3bf 8f4f 	dsb	sy
 800c872:	f3bf 8f6f 	isb	sy
 800c876:	e772      	b.n	800c75e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c878:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c87a:	f000 fce3 	bl	800d244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c87e:	f001 f889 	bl	800d994 <xTaskResumeAll>
 800c882:	e76c      	b.n	800c75e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c884:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c886:	f000 fcdd 	bl	800d244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c88a:	f001 f883 	bl	800d994 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c88e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c890:	4618      	mov	r0, r3
 800c892:	3738      	adds	r7, #56	@ 0x38
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}
 800c898:	e000ed04 	.word	0xe000ed04

0800c89c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b08e      	sub	sp, #56	@ 0x38
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	607a      	str	r2, [r7, #4]
 800c8a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d10d      	bne.n	800c8d0 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800c8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8b8:	b672      	cpsid	i
 800c8ba:	f383 8811 	msr	BASEPRI, r3
 800c8be:	f3bf 8f6f 	isb	sy
 800c8c2:	f3bf 8f4f 	dsb	sy
 800c8c6:	b662      	cpsie	i
 800c8c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c8ca:	bf00      	nop
 800c8cc:	bf00      	nop
 800c8ce:	e7fd      	b.n	800c8cc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d103      	bne.n	800c8de <xQueueGenericSendFromISR+0x42>
 800c8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d101      	bne.n	800c8e2 <xQueueGenericSendFromISR+0x46>
 800c8de:	2301      	movs	r3, #1
 800c8e0:	e000      	b.n	800c8e4 <xQueueGenericSendFromISR+0x48>
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d10d      	bne.n	800c904 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800c8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ec:	b672      	cpsid	i
 800c8ee:	f383 8811 	msr	BASEPRI, r3
 800c8f2:	f3bf 8f6f 	isb	sy
 800c8f6:	f3bf 8f4f 	dsb	sy
 800c8fa:	b662      	cpsie	i
 800c8fc:	623b      	str	r3, [r7, #32]
}
 800c8fe:	bf00      	nop
 800c900:	bf00      	nop
 800c902:	e7fd      	b.n	800c900 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	2b02      	cmp	r3, #2
 800c908:	d103      	bne.n	800c912 <xQueueGenericSendFromISR+0x76>
 800c90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c90c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d101      	bne.n	800c916 <xQueueGenericSendFromISR+0x7a>
 800c912:	2301      	movs	r3, #1
 800c914:	e000      	b.n	800c918 <xQueueGenericSendFromISR+0x7c>
 800c916:	2300      	movs	r3, #0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d10d      	bne.n	800c938 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800c91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c920:	b672      	cpsid	i
 800c922:	f383 8811 	msr	BASEPRI, r3
 800c926:	f3bf 8f6f 	isb	sy
 800c92a:	f3bf 8f4f 	dsb	sy
 800c92e:	b662      	cpsie	i
 800c930:	61fb      	str	r3, [r7, #28]
}
 800c932:	bf00      	nop
 800c934:	bf00      	nop
 800c936:	e7fd      	b.n	800c934 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c938:	f002 f840 	bl	800e9bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c93c:	f3ef 8211 	mrs	r2, BASEPRI
 800c940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c944:	b672      	cpsid	i
 800c946:	f383 8811 	msr	BASEPRI, r3
 800c94a:	f3bf 8f6f 	isb	sy
 800c94e:	f3bf 8f4f 	dsb	sy
 800c952:	b662      	cpsie	i
 800c954:	61ba      	str	r2, [r7, #24]
 800c956:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c958:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c95a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c95e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c964:	429a      	cmp	r2, r3
 800c966:	d302      	bcc.n	800c96e <xQueueGenericSendFromISR+0xd2>
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	2b02      	cmp	r3, #2
 800c96c:	d12c      	bne.n	800c9c8 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c970:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c974:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c978:	683a      	ldr	r2, [r7, #0]
 800c97a:	68b9      	ldr	r1, [r7, #8]
 800c97c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c97e:	f000 fbd1 	bl	800d124 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c982:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800c986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c98a:	d112      	bne.n	800c9b2 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c98e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c990:	2b00      	cmp	r3, #0
 800c992:	d016      	beq.n	800c9c2 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c996:	3324      	adds	r3, #36	@ 0x24
 800c998:	4618      	mov	r0, r3
 800c99a:	f001 fa07 	bl	800ddac <xTaskRemoveFromEventList>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d00e      	beq.n	800c9c2 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d00b      	beq.n	800c9c2 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	601a      	str	r2, [r3, #0]
 800c9b0:	e007      	b.n	800c9c2 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c9b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	b25a      	sxtb	r2, r3
 800c9bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800c9c6:	e001      	b.n	800c9cc <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c9d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c9d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3738      	adds	r7, #56	@ 0x38
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b08e      	sub	sp, #56	@ 0x38
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c9f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d10d      	bne.n	800ca12 <xQueueGiveFromISR+0x30>
	__asm volatile
 800c9f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9fa:	b672      	cpsid	i
 800c9fc:	f383 8811 	msr	BASEPRI, r3
 800ca00:	f3bf 8f6f 	isb	sy
 800ca04:	f3bf 8f4f 	dsb	sy
 800ca08:	b662      	cpsie	i
 800ca0a:	623b      	str	r3, [r7, #32]
}
 800ca0c:	bf00      	nop
 800ca0e:	bf00      	nop
 800ca10:	e7fd      	b.n	800ca0e <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ca12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00d      	beq.n	800ca36 <xQueueGiveFromISR+0x54>
	__asm volatile
 800ca1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca1e:	b672      	cpsid	i
 800ca20:	f383 8811 	msr	BASEPRI, r3
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	b662      	cpsie	i
 800ca2e:	61fb      	str	r3, [r7, #28]
}
 800ca30:	bf00      	nop
 800ca32:	bf00      	nop
 800ca34:	e7fd      	b.n	800ca32 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ca36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d103      	bne.n	800ca46 <xQueueGiveFromISR+0x64>
 800ca3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca40:	689b      	ldr	r3, [r3, #8]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d101      	bne.n	800ca4a <xQueueGiveFromISR+0x68>
 800ca46:	2301      	movs	r3, #1
 800ca48:	e000      	b.n	800ca4c <xQueueGiveFromISR+0x6a>
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d10d      	bne.n	800ca6c <xQueueGiveFromISR+0x8a>
	__asm volatile
 800ca50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca54:	b672      	cpsid	i
 800ca56:	f383 8811 	msr	BASEPRI, r3
 800ca5a:	f3bf 8f6f 	isb	sy
 800ca5e:	f3bf 8f4f 	dsb	sy
 800ca62:	b662      	cpsie	i
 800ca64:	61bb      	str	r3, [r7, #24]
}
 800ca66:	bf00      	nop
 800ca68:	bf00      	nop
 800ca6a:	e7fd      	b.n	800ca68 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca6c:	f001 ffa6 	bl	800e9bc <vPortValidateInterruptPriority>
	__asm volatile
 800ca70:	f3ef 8211 	mrs	r2, BASEPRI
 800ca74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca78:	b672      	cpsid	i
 800ca7a:	f383 8811 	msr	BASEPRI, r3
 800ca7e:	f3bf 8f6f 	isb	sy
 800ca82:	f3bf 8f4f 	dsb	sy
 800ca86:	b662      	cpsie	i
 800ca88:	617a      	str	r2, [r7, #20]
 800ca8a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ca8c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca94:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ca96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d22b      	bcs.n	800caf8 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800caa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800caa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800caaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caac:	1c5a      	adds	r2, r3, #1
 800caae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab0:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cab2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caba:	d112      	bne.n	800cae2 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cabc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cabe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d016      	beq.n	800caf2 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cac6:	3324      	adds	r3, #36	@ 0x24
 800cac8:	4618      	mov	r0, r3
 800caca:	f001 f96f 	bl	800ddac <xTaskRemoveFromEventList>
 800cace:	4603      	mov	r3, r0
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00e      	beq.n	800caf2 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d00b      	beq.n	800caf2 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	2201      	movs	r2, #1
 800cade:	601a      	str	r2, [r3, #0]
 800cae0:	e007      	b.n	800caf2 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cae2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cae6:	3301      	adds	r3, #1
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	b25a      	sxtb	r2, r3
 800caec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800caf2:	2301      	movs	r3, #1
 800caf4:	637b      	str	r3, [r7, #52]	@ 0x34
 800caf6:	e001      	b.n	800cafc <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800caf8:	2300      	movs	r3, #0
 800cafa:	637b      	str	r3, [r7, #52]	@ 0x34
 800cafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cafe:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f383 8811 	msr	BASEPRI, r3
}
 800cb06:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3738      	adds	r7, #56	@ 0x38
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
	...

0800cb14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b08c      	sub	sp, #48	@ 0x30
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	60f8      	str	r0, [r7, #12]
 800cb1c:	60b9      	str	r1, [r7, #8]
 800cb1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cb20:	2300      	movs	r3, #0
 800cb22:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cb28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d10d      	bne.n	800cb4a <xQueueReceive+0x36>
	__asm volatile
 800cb2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb32:	b672      	cpsid	i
 800cb34:	f383 8811 	msr	BASEPRI, r3
 800cb38:	f3bf 8f6f 	isb	sy
 800cb3c:	f3bf 8f4f 	dsb	sy
 800cb40:	b662      	cpsie	i
 800cb42:	623b      	str	r3, [r7, #32]
}
 800cb44:	bf00      	nop
 800cb46:	bf00      	nop
 800cb48:	e7fd      	b.n	800cb46 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d103      	bne.n	800cb58 <xQueueReceive+0x44>
 800cb50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d101      	bne.n	800cb5c <xQueueReceive+0x48>
 800cb58:	2301      	movs	r3, #1
 800cb5a:	e000      	b.n	800cb5e <xQueueReceive+0x4a>
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d10d      	bne.n	800cb7e <xQueueReceive+0x6a>
	__asm volatile
 800cb62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb66:	b672      	cpsid	i
 800cb68:	f383 8811 	msr	BASEPRI, r3
 800cb6c:	f3bf 8f6f 	isb	sy
 800cb70:	f3bf 8f4f 	dsb	sy
 800cb74:	b662      	cpsie	i
 800cb76:	61fb      	str	r3, [r7, #28]
}
 800cb78:	bf00      	nop
 800cb7a:	bf00      	nop
 800cb7c:	e7fd      	b.n	800cb7a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb7e:	f001 fae3 	bl	800e148 <xTaskGetSchedulerState>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d102      	bne.n	800cb8e <xQueueReceive+0x7a>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d101      	bne.n	800cb92 <xQueueReceive+0x7e>
 800cb8e:	2301      	movs	r3, #1
 800cb90:	e000      	b.n	800cb94 <xQueueReceive+0x80>
 800cb92:	2300      	movs	r3, #0
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10d      	bne.n	800cbb4 <xQueueReceive+0xa0>
	__asm volatile
 800cb98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb9c:	b672      	cpsid	i
 800cb9e:	f383 8811 	msr	BASEPRI, r3
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	b662      	cpsie	i
 800cbac:	61bb      	str	r3, [r7, #24]
}
 800cbae:	bf00      	nop
 800cbb0:	bf00      	nop
 800cbb2:	e7fd      	b.n	800cbb0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbb4:	f001 fe1a 	bl	800e7ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbbc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d01f      	beq.n	800cc04 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cbc4:	68b9      	ldr	r1, [r7, #8]
 800cbc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbc8:	f000 fb16 	bl	800d1f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbce:	1e5a      	subs	r2, r3, #1
 800cbd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd6:	691b      	ldr	r3, [r3, #16]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d00f      	beq.n	800cbfc <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbde:	3310      	adds	r3, #16
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f001 f8e3 	bl	800ddac <xTaskRemoveFromEventList>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d007      	beq.n	800cbfc <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cbec:	4b3c      	ldr	r3, [pc, #240]	@ (800cce0 <xQueueReceive+0x1cc>)
 800cbee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbf2:	601a      	str	r2, [r3, #0]
 800cbf4:	f3bf 8f4f 	dsb	sy
 800cbf8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cbfc:	f001 fe2c 	bl	800e858 <vPortExitCritical>
				return pdPASS;
 800cc00:	2301      	movs	r3, #1
 800cc02:	e069      	b.n	800ccd8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d103      	bne.n	800cc12 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc0a:	f001 fe25 	bl	800e858 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	e062      	b.n	800ccd8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d106      	bne.n	800cc26 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc18:	f107 0310 	add.w	r3, r7, #16
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f001 f92b 	bl	800de78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc22:	2301      	movs	r3, #1
 800cc24:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc26:	f001 fe17 	bl	800e858 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc2a:	f000 fea5 	bl	800d978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc2e:	f001 fddd 	bl	800e7ec <vPortEnterCritical>
 800cc32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc38:	b25b      	sxtb	r3, r3
 800cc3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc3e:	d103      	bne.n	800cc48 <xQueueReceive+0x134>
 800cc40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc42:	2200      	movs	r2, #0
 800cc44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc4e:	b25b      	sxtb	r3, r3
 800cc50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc54:	d103      	bne.n	800cc5e <xQueueReceive+0x14a>
 800cc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc5e:	f001 fdfb 	bl	800e858 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc62:	1d3a      	adds	r2, r7, #4
 800cc64:	f107 0310 	add.w	r3, r7, #16
 800cc68:	4611      	mov	r1, r2
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f001 f91a 	bl	800dea4 <xTaskCheckForTimeOut>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d123      	bne.n	800ccbe <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc78:	f000 fb36 	bl	800d2e8 <prvIsQueueEmpty>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d017      	beq.n	800ccb2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc84:	3324      	adds	r3, #36	@ 0x24
 800cc86:	687a      	ldr	r2, [r7, #4]
 800cc88:	4611      	mov	r1, r2
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f001 f866 	bl	800dd5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cc90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc92:	f000 fad7 	bl	800d244 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cc96:	f000 fe7d 	bl	800d994 <xTaskResumeAll>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d189      	bne.n	800cbb4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800cca0:	4b0f      	ldr	r3, [pc, #60]	@ (800cce0 <xQueueReceive+0x1cc>)
 800cca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cca6:	601a      	str	r2, [r3, #0]
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	f3bf 8f6f 	isb	sy
 800ccb0:	e780      	b.n	800cbb4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ccb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccb4:	f000 fac6 	bl	800d244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ccb8:	f000 fe6c 	bl	800d994 <xTaskResumeAll>
 800ccbc:	e77a      	b.n	800cbb4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ccbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccc0:	f000 fac0 	bl	800d244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ccc4:	f000 fe66 	bl	800d994 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ccc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccca:	f000 fb0d 	bl	800d2e8 <prvIsQueueEmpty>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	f43f af6f 	beq.w	800cbb4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ccd6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3730      	adds	r7, #48	@ 0x30
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	e000ed04 	.word	0xe000ed04

0800cce4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b08e      	sub	sp, #56	@ 0x38
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ccfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d10d      	bne.n	800cd1c <xQueueSemaphoreTake+0x38>
	__asm volatile
 800cd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd04:	b672      	cpsid	i
 800cd06:	f383 8811 	msr	BASEPRI, r3
 800cd0a:	f3bf 8f6f 	isb	sy
 800cd0e:	f3bf 8f4f 	dsb	sy
 800cd12:	b662      	cpsie	i
 800cd14:	623b      	str	r3, [r7, #32]
}
 800cd16:	bf00      	nop
 800cd18:	bf00      	nop
 800cd1a:	e7fd      	b.n	800cd18 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cd1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d00d      	beq.n	800cd40 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800cd24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd28:	b672      	cpsid	i
 800cd2a:	f383 8811 	msr	BASEPRI, r3
 800cd2e:	f3bf 8f6f 	isb	sy
 800cd32:	f3bf 8f4f 	dsb	sy
 800cd36:	b662      	cpsie	i
 800cd38:	61fb      	str	r3, [r7, #28]
}
 800cd3a:	bf00      	nop
 800cd3c:	bf00      	nop
 800cd3e:	e7fd      	b.n	800cd3c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd40:	f001 fa02 	bl	800e148 <xTaskGetSchedulerState>
 800cd44:	4603      	mov	r3, r0
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d102      	bne.n	800cd50 <xQueueSemaphoreTake+0x6c>
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d101      	bne.n	800cd54 <xQueueSemaphoreTake+0x70>
 800cd50:	2301      	movs	r3, #1
 800cd52:	e000      	b.n	800cd56 <xQueueSemaphoreTake+0x72>
 800cd54:	2300      	movs	r3, #0
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d10d      	bne.n	800cd76 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800cd5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd5e:	b672      	cpsid	i
 800cd60:	f383 8811 	msr	BASEPRI, r3
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	b662      	cpsie	i
 800cd6e:	61bb      	str	r3, [r7, #24]
}
 800cd70:	bf00      	nop
 800cd72:	bf00      	nop
 800cd74:	e7fd      	b.n	800cd72 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd76:	f001 fd39 	bl	800e7ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cd7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd7e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cd80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d024      	beq.n	800cdd0 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cd86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd88:	1e5a      	subs	r2, r3, #1
 800cd8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd8c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d104      	bne.n	800cda0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cd96:	f001 fba1 	bl	800e4dc <pvTaskIncrementMutexHeldCount>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd9e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cda2:	691b      	ldr	r3, [r3, #16]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d00f      	beq.n	800cdc8 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdaa:	3310      	adds	r3, #16
 800cdac:	4618      	mov	r0, r3
 800cdae:	f000 fffd 	bl	800ddac <xTaskRemoveFromEventList>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d007      	beq.n	800cdc8 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cdb8:	4b55      	ldr	r3, [pc, #340]	@ (800cf10 <xQueueSemaphoreTake+0x22c>)
 800cdba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdbe:	601a      	str	r2, [r3, #0]
 800cdc0:	f3bf 8f4f 	dsb	sy
 800cdc4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cdc8:	f001 fd46 	bl	800e858 <vPortExitCritical>
				return pdPASS;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	e09a      	b.n	800cf06 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d114      	bne.n	800ce00 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cdd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d00d      	beq.n	800cdf8 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800cddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cde0:	b672      	cpsid	i
 800cde2:	f383 8811 	msr	BASEPRI, r3
 800cde6:	f3bf 8f6f 	isb	sy
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	b662      	cpsie	i
 800cdf0:	617b      	str	r3, [r7, #20]
}
 800cdf2:	bf00      	nop
 800cdf4:	bf00      	nop
 800cdf6:	e7fd      	b.n	800cdf4 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cdf8:	f001 fd2e 	bl	800e858 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	e082      	b.n	800cf06 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d106      	bne.n	800ce14 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce06:	f107 030c 	add.w	r3, r7, #12
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f001 f834 	bl	800de78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce10:	2301      	movs	r3, #1
 800ce12:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce14:	f001 fd20 	bl	800e858 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce18:	f000 fdae 	bl	800d978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce1c:	f001 fce6 	bl	800e7ec <vPortEnterCritical>
 800ce20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ce26:	b25b      	sxtb	r3, r3
 800ce28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce2c:	d103      	bne.n	800ce36 <xQueueSemaphoreTake+0x152>
 800ce2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce30:	2200      	movs	r2, #0
 800ce32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ce36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce3c:	b25b      	sxtb	r3, r3
 800ce3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce42:	d103      	bne.n	800ce4c <xQueueSemaphoreTake+0x168>
 800ce44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce46:	2200      	movs	r2, #0
 800ce48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ce4c:	f001 fd04 	bl	800e858 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce50:	463a      	mov	r2, r7
 800ce52:	f107 030c 	add.w	r3, r7, #12
 800ce56:	4611      	mov	r1, r2
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f001 f823 	bl	800dea4 <xTaskCheckForTimeOut>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d132      	bne.n	800ceca <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ce66:	f000 fa3f 	bl	800d2e8 <prvIsQueueEmpty>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d026      	beq.n	800cebe <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d109      	bne.n	800ce8c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800ce78:	f001 fcb8 	bl	800e7ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ce7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce7e:	689b      	ldr	r3, [r3, #8]
 800ce80:	4618      	mov	r0, r3
 800ce82:	f001 f97f 	bl	800e184 <xTaskPriorityInherit>
 800ce86:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ce88:	f001 fce6 	bl	800e858 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce8e:	3324      	adds	r3, #36	@ 0x24
 800ce90:	683a      	ldr	r2, [r7, #0]
 800ce92:	4611      	mov	r1, r2
 800ce94:	4618      	mov	r0, r3
 800ce96:	f000 ff61 	bl	800dd5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ce9c:	f000 f9d2 	bl	800d244 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cea0:	f000 fd78 	bl	800d994 <xTaskResumeAll>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	f47f af65 	bne.w	800cd76 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800ceac:	4b18      	ldr	r3, [pc, #96]	@ (800cf10 <xQueueSemaphoreTake+0x22c>)
 800ceae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ceb2:	601a      	str	r2, [r3, #0]
 800ceb4:	f3bf 8f4f 	dsb	sy
 800ceb8:	f3bf 8f6f 	isb	sy
 800cebc:	e75b      	b.n	800cd76 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cebe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cec0:	f000 f9c0 	bl	800d244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cec4:	f000 fd66 	bl	800d994 <xTaskResumeAll>
 800cec8:	e755      	b.n	800cd76 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ceca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cecc:	f000 f9ba 	bl	800d244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ced0:	f000 fd60 	bl	800d994 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ced4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ced6:	f000 fa07 	bl	800d2e8 <prvIsQueueEmpty>
 800ceda:	4603      	mov	r3, r0
 800cedc:	2b00      	cmp	r3, #0
 800cede:	f43f af4a 	beq.w	800cd76 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d00d      	beq.n	800cf04 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800cee8:	f001 fc80 	bl	800e7ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ceec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ceee:	f000 f901 	bl	800d0f4 <prvGetDisinheritPriorityAfterTimeout>
 800cef2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cef6:	689b      	ldr	r3, [r3, #8]
 800cef8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cefa:	4618      	mov	r0, r3
 800cefc:	f001 fa4e 	bl	800e39c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cf00:	f001 fcaa 	bl	800e858 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cf04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3738      	adds	r7, #56	@ 0x38
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	e000ed04 	.word	0xe000ed04

0800cf14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b08e      	sub	sp, #56	@ 0x38
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	60f8      	str	r0, [r7, #12]
 800cf1c:	60b9      	str	r1, [r7, #8]
 800cf1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cf24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d10d      	bne.n	800cf46 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800cf2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf2e:	b672      	cpsid	i
 800cf30:	f383 8811 	msr	BASEPRI, r3
 800cf34:	f3bf 8f6f 	isb	sy
 800cf38:	f3bf 8f4f 	dsb	sy
 800cf3c:	b662      	cpsie	i
 800cf3e:	623b      	str	r3, [r7, #32]
}
 800cf40:	bf00      	nop
 800cf42:	bf00      	nop
 800cf44:	e7fd      	b.n	800cf42 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d103      	bne.n	800cf54 <xQueueReceiveFromISR+0x40>
 800cf4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d101      	bne.n	800cf58 <xQueueReceiveFromISR+0x44>
 800cf54:	2301      	movs	r3, #1
 800cf56:	e000      	b.n	800cf5a <xQueueReceiveFromISR+0x46>
 800cf58:	2300      	movs	r3, #0
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d10d      	bne.n	800cf7a <xQueueReceiveFromISR+0x66>
	__asm volatile
 800cf5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf62:	b672      	cpsid	i
 800cf64:	f383 8811 	msr	BASEPRI, r3
 800cf68:	f3bf 8f6f 	isb	sy
 800cf6c:	f3bf 8f4f 	dsb	sy
 800cf70:	b662      	cpsie	i
 800cf72:	61fb      	str	r3, [r7, #28]
}
 800cf74:	bf00      	nop
 800cf76:	bf00      	nop
 800cf78:	e7fd      	b.n	800cf76 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf7a:	f001 fd1f 	bl	800e9bc <vPortValidateInterruptPriority>
	__asm volatile
 800cf7e:	f3ef 8211 	mrs	r2, BASEPRI
 800cf82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf86:	b672      	cpsid	i
 800cf88:	f383 8811 	msr	BASEPRI, r3
 800cf8c:	f3bf 8f6f 	isb	sy
 800cf90:	f3bf 8f4f 	dsb	sy
 800cf94:	b662      	cpsie	i
 800cf96:	61ba      	str	r2, [r7, #24]
 800cf98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cf9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfa2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cfa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d02f      	beq.n	800d00a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cfaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cfb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cfb4:	68b9      	ldr	r1, [r7, #8]
 800cfb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cfb8:	f000 f91e 	bl	800d1f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cfbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfbe:	1e5a      	subs	r2, r3, #1
 800cfc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cfc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cfc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfcc:	d112      	bne.n	800cff4 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd0:	691b      	ldr	r3, [r3, #16]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d016      	beq.n	800d004 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd8:	3310      	adds	r3, #16
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 fee6 	bl	800ddac <xTaskRemoveFromEventList>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d00e      	beq.n	800d004 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d00b      	beq.n	800d004 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2201      	movs	r2, #1
 800cff0:	601a      	str	r2, [r3, #0]
 800cff2:	e007      	b.n	800d004 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cff4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cff8:	3301      	adds	r3, #1
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	b25a      	sxtb	r2, r3
 800cffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d004:	2301      	movs	r3, #1
 800d006:	637b      	str	r3, [r7, #52]	@ 0x34
 800d008:	e001      	b.n	800d00e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800d00a:	2300      	movs	r3, #0
 800d00c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d010:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	f383 8811 	msr	BASEPRI, r3
}
 800d018:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d01a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3738      	adds	r7, #56	@ 0x38
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d10d      	bne.n	800d04e <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800d032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d036:	b672      	cpsid	i
 800d038:	f383 8811 	msr	BASEPRI, r3
 800d03c:	f3bf 8f6f 	isb	sy
 800d040:	f3bf 8f4f 	dsb	sy
 800d044:	b662      	cpsie	i
 800d046:	60bb      	str	r3, [r7, #8]
}
 800d048:	bf00      	nop
 800d04a:	bf00      	nop
 800d04c:	e7fd      	b.n	800d04a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800d04e:	f001 fbcd 	bl	800e7ec <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d056:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d058:	f001 fbfe 	bl	800e858 <vPortExitCritical>

	return uxReturn;
 800d05c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d05e:	4618      	mov	r0, r3
 800d060:	3710      	adds	r7, #16
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}

0800d066 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800d066:	b480      	push	{r7}
 800d068:	b087      	sub	sp, #28
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d10d      	bne.n	800d094 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800d078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d07c:	b672      	cpsid	i
 800d07e:	f383 8811 	msr	BASEPRI, r3
 800d082:	f3bf 8f6f 	isb	sy
 800d086:	f3bf 8f4f 	dsb	sy
 800d08a:	b662      	cpsie	i
 800d08c:	60fb      	str	r3, [r7, #12]
}
 800d08e:	bf00      	nop
 800d090:	bf00      	nop
 800d092:	e7fd      	b.n	800d090 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d098:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800d09a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d09c:	4618      	mov	r0, r3
 800d09e:	371c      	adds	r7, #28
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d10d      	bne.n	800d0d6 <vQueueDelete+0x2e>
	__asm volatile
 800d0ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0be:	b672      	cpsid	i
 800d0c0:	f383 8811 	msr	BASEPRI, r3
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	b662      	cpsie	i
 800d0ce:	60bb      	str	r3, [r7, #8]
}
 800d0d0:	bf00      	nop
 800d0d2:	bf00      	nop
 800d0d4:	e7fd      	b.n	800d0d2 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d0d6:	68f8      	ldr	r0, [r7, #12]
 800d0d8:	f000 f934 	bl	800d344 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d102      	bne.n	800d0ec <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800d0e6:	68f8      	ldr	r0, [r7, #12]
 800d0e8:	f001 fd7c 	bl	800ebe4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d0ec:	bf00      	nop
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b085      	sub	sp, #20
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d100:	2b00      	cmp	r3, #0
 800d102:	d006      	beq.n	800d112 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f1c3 0307 	rsb	r3, r3, #7
 800d10e:	60fb      	str	r3, [r7, #12]
 800d110:	e001      	b.n	800d116 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d112:	2300      	movs	r3, #0
 800d114:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d116:	68fb      	ldr	r3, [r7, #12]
	}
 800d118:	4618      	mov	r0, r3
 800d11a:	3714      	adds	r7, #20
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b086      	sub	sp, #24
 800d128:	af00      	add	r7, sp, #0
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d130:	2300      	movs	r3, #0
 800d132:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d138:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d10d      	bne.n	800d15e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d14d      	bne.n	800d1e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	689b      	ldr	r3, [r3, #8]
 800d14e:	4618      	mov	r0, r3
 800d150:	f001 f898 	bl	800e284 <xTaskPriorityDisinherit>
 800d154:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2200      	movs	r2, #0
 800d15a:	609a      	str	r2, [r3, #8]
 800d15c:	e043      	b.n	800d1e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d119      	bne.n	800d198 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	6858      	ldr	r0, [r3, #4]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d16c:	461a      	mov	r2, r3
 800d16e:	68b9      	ldr	r1, [r7, #8]
 800d170:	f010 fa89 	bl	801d686 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	685a      	ldr	r2, [r3, #4]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d17c:	441a      	add	r2, r3
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	685a      	ldr	r2, [r3, #4]
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	689b      	ldr	r3, [r3, #8]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d32b      	bcc.n	800d1e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681a      	ldr	r2, [r3, #0]
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	605a      	str	r2, [r3, #4]
 800d196:	e026      	b.n	800d1e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	68d8      	ldr	r0, [r3, #12]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	68b9      	ldr	r1, [r7, #8]
 800d1a4:	f010 fa6f 	bl	801d686 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	68da      	ldr	r2, [r3, #12]
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1b0:	425b      	negs	r3, r3
 800d1b2:	441a      	add	r2, r3
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	68da      	ldr	r2, [r3, #12]
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d207      	bcs.n	800d1d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	689a      	ldr	r2, [r3, #8]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1cc:	425b      	negs	r3, r3
 800d1ce:	441a      	add	r2, r3
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2b02      	cmp	r3, #2
 800d1d8:	d105      	bne.n	800d1e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d002      	beq.n	800d1e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	3b01      	subs	r3, #1
 800d1e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	1c5a      	adds	r2, r3, #1
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d1ee:	697b      	ldr	r3, [r7, #20]
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3718      	adds	r7, #24
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d206:	2b00      	cmp	r3, #0
 800d208:	d018      	beq.n	800d23c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	68da      	ldr	r2, [r3, #12]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d212:	441a      	add	r2, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	68da      	ldr	r2, [r3, #12]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	689b      	ldr	r3, [r3, #8]
 800d220:	429a      	cmp	r2, r3
 800d222:	d303      	bcc.n	800d22c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	68d9      	ldr	r1, [r3, #12]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d234:	461a      	mov	r2, r3
 800d236:	6838      	ldr	r0, [r7, #0]
 800d238:	f010 fa25 	bl	801d686 <memcpy>
	}
}
 800d23c:	bf00      	nop
 800d23e:	3708      	adds	r7, #8
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d24c:	f001 face 	bl	800e7ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d256:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d258:	e011      	b.n	800d27e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d012      	beq.n	800d288 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	3324      	adds	r3, #36	@ 0x24
 800d266:	4618      	mov	r0, r3
 800d268:	f000 fda0 	bl	800ddac <xTaskRemoveFromEventList>
 800d26c:	4603      	mov	r3, r0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d001      	beq.n	800d276 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d272:	f000 fe7f 	bl	800df74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d276:	7bfb      	ldrb	r3, [r7, #15]
 800d278:	3b01      	subs	r3, #1
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d27e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d282:	2b00      	cmp	r3, #0
 800d284:	dce9      	bgt.n	800d25a <prvUnlockQueue+0x16>
 800d286:	e000      	b.n	800d28a <prvUnlockQueue+0x46>
					break;
 800d288:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	22ff      	movs	r2, #255	@ 0xff
 800d28e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d292:	f001 fae1 	bl	800e858 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d296:	f001 faa9 	bl	800e7ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d2a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d2a2:	e011      	b.n	800d2c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	691b      	ldr	r3, [r3, #16]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d012      	beq.n	800d2d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	3310      	adds	r3, #16
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f000 fd7b 	bl	800ddac <xTaskRemoveFromEventList>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d001      	beq.n	800d2c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d2bc:	f000 fe5a 	bl	800df74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d2c0:	7bbb      	ldrb	r3, [r7, #14]
 800d2c2:	3b01      	subs	r3, #1
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d2c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	dce9      	bgt.n	800d2a4 <prvUnlockQueue+0x60>
 800d2d0:	e000      	b.n	800d2d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d2d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	22ff      	movs	r2, #255	@ 0xff
 800d2d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d2dc:	f001 fabc 	bl	800e858 <vPortExitCritical>
}
 800d2e0:	bf00      	nop
 800d2e2:	3710      	adds	r7, #16
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d2f0:	f001 fa7c 	bl	800e7ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d102      	bne.n	800d302 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	60fb      	str	r3, [r7, #12]
 800d300:	e001      	b.n	800d306 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d302:	2300      	movs	r3, #0
 800d304:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d306:	f001 faa7 	bl	800e858 <vPortExitCritical>

	return xReturn;
 800d30a:	68fb      	ldr	r3, [r7, #12]
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3710      	adds	r7, #16
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d31c:	f001 fa66 	bl	800e7ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d328:	429a      	cmp	r2, r3
 800d32a:	d102      	bne.n	800d332 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d32c:	2301      	movs	r3, #1
 800d32e:	60fb      	str	r3, [r7, #12]
 800d330:	e001      	b.n	800d336 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d332:	2300      	movs	r3, #0
 800d334:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d336:	f001 fa8f 	bl	800e858 <vPortExitCritical>

	return xReturn;
 800d33a:	68fb      	ldr	r3, [r7, #12]
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3710      	adds	r7, #16
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d34c:	2300      	movs	r3, #0
 800d34e:	60fb      	str	r3, [r7, #12]
 800d350:	e016      	b.n	800d380 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d352:	4a10      	ldr	r2, [pc, #64]	@ (800d394 <vQueueUnregisterQueue+0x50>)
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	00db      	lsls	r3, r3, #3
 800d358:	4413      	add	r3, r2
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	429a      	cmp	r2, r3
 800d360:	d10b      	bne.n	800d37a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d362:	4a0c      	ldr	r2, [pc, #48]	@ (800d394 <vQueueUnregisterQueue+0x50>)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2100      	movs	r1, #0
 800d368:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d36c:	4a09      	ldr	r2, [pc, #36]	@ (800d394 <vQueueUnregisterQueue+0x50>)
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	00db      	lsls	r3, r3, #3
 800d372:	4413      	add	r3, r2
 800d374:	2200      	movs	r2, #0
 800d376:	605a      	str	r2, [r3, #4]
				break;
 800d378:	e006      	b.n	800d388 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	3301      	adds	r3, #1
 800d37e:	60fb      	str	r3, [r7, #12]
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2b07      	cmp	r3, #7
 800d384:	d9e5      	bls.n	800d352 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d386:	bf00      	nop
 800d388:	bf00      	nop
 800d38a:	3714      	adds	r7, #20
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr
 800d394:	200051c0 	.word	0x200051c0

0800d398 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b08e      	sub	sp, #56	@ 0x38
 800d39c:	af04      	add	r7, sp, #16
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	60b9      	str	r1, [r7, #8]
 800d3a2:	607a      	str	r2, [r7, #4]
 800d3a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d3a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d10d      	bne.n	800d3c8 <xTaskCreateStatic+0x30>
	__asm volatile
 800d3ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b0:	b672      	cpsid	i
 800d3b2:	f383 8811 	msr	BASEPRI, r3
 800d3b6:	f3bf 8f6f 	isb	sy
 800d3ba:	f3bf 8f4f 	dsb	sy
 800d3be:	b662      	cpsie	i
 800d3c0:	623b      	str	r3, [r7, #32]
}
 800d3c2:	bf00      	nop
 800d3c4:	bf00      	nop
 800d3c6:	e7fd      	b.n	800d3c4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800d3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d10d      	bne.n	800d3ea <xTaskCreateStatic+0x52>
	__asm volatile
 800d3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d2:	b672      	cpsid	i
 800d3d4:	f383 8811 	msr	BASEPRI, r3
 800d3d8:	f3bf 8f6f 	isb	sy
 800d3dc:	f3bf 8f4f 	dsb	sy
 800d3e0:	b662      	cpsie	i
 800d3e2:	61fb      	str	r3, [r7, #28]
}
 800d3e4:	bf00      	nop
 800d3e6:	bf00      	nop
 800d3e8:	e7fd      	b.n	800d3e6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d3ea:	23a0      	movs	r3, #160	@ 0xa0
 800d3ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	2ba0      	cmp	r3, #160	@ 0xa0
 800d3f2:	d00d      	beq.n	800d410 <xTaskCreateStatic+0x78>
	__asm volatile
 800d3f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3f8:	b672      	cpsid	i
 800d3fa:	f383 8811 	msr	BASEPRI, r3
 800d3fe:	f3bf 8f6f 	isb	sy
 800d402:	f3bf 8f4f 	dsb	sy
 800d406:	b662      	cpsie	i
 800d408:	61bb      	str	r3, [r7, #24]
}
 800d40a:	bf00      	nop
 800d40c:	bf00      	nop
 800d40e:	e7fd      	b.n	800d40c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d410:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d414:	2b00      	cmp	r3, #0
 800d416:	d01e      	beq.n	800d456 <xTaskCreateStatic+0xbe>
 800d418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d01b      	beq.n	800d456 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d420:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d424:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d426:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d42a:	2202      	movs	r2, #2
 800d42c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d430:	2300      	movs	r3, #0
 800d432:	9303      	str	r3, [sp, #12]
 800d434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d436:	9302      	str	r3, [sp, #8]
 800d438:	f107 0314 	add.w	r3, r7, #20
 800d43c:	9301      	str	r3, [sp, #4]
 800d43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	687a      	ldr	r2, [r7, #4]
 800d446:	68b9      	ldr	r1, [r7, #8]
 800d448:	68f8      	ldr	r0, [r7, #12]
 800d44a:	f000 f851 	bl	800d4f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d44e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d450:	f000 f8f0 	bl	800d634 <prvAddNewTaskToReadyList>
 800d454:	e001      	b.n	800d45a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800d456:	2300      	movs	r3, #0
 800d458:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d45a:	697b      	ldr	r3, [r7, #20]
	}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3728      	adds	r7, #40	@ 0x28
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d464:	b580      	push	{r7, lr}
 800d466:	b08c      	sub	sp, #48	@ 0x30
 800d468:	af04      	add	r7, sp, #16
 800d46a:	60f8      	str	r0, [r7, #12]
 800d46c:	60b9      	str	r1, [r7, #8]
 800d46e:	603b      	str	r3, [r7, #0]
 800d470:	4613      	mov	r3, r2
 800d472:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d474:	88fb      	ldrh	r3, [r7, #6]
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	4618      	mov	r0, r3
 800d47a:	f001 fae5 	bl	800ea48 <pvPortMalloc>
 800d47e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d00e      	beq.n	800d4a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d486:	20a0      	movs	r0, #160	@ 0xa0
 800d488:	f001 fade 	bl	800ea48 <pvPortMalloc>
 800d48c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d48e:	69fb      	ldr	r3, [r7, #28]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d003      	beq.n	800d49c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	697a      	ldr	r2, [r7, #20]
 800d498:	631a      	str	r2, [r3, #48]	@ 0x30
 800d49a:	e005      	b.n	800d4a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d49c:	6978      	ldr	r0, [r7, #20]
 800d49e:	f001 fba1 	bl	800ebe4 <vPortFree>
 800d4a2:	e001      	b.n	800d4a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d017      	beq.n	800d4de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d4b6:	88fa      	ldrh	r2, [r7, #6]
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	9303      	str	r3, [sp, #12]
 800d4bc:	69fb      	ldr	r3, [r7, #28]
 800d4be:	9302      	str	r3, [sp, #8]
 800d4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4c2:	9301      	str	r3, [sp, #4]
 800d4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4c6:	9300      	str	r3, [sp, #0]
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	68b9      	ldr	r1, [r7, #8]
 800d4cc:	68f8      	ldr	r0, [r7, #12]
 800d4ce:	f000 f80f 	bl	800d4f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d4d2:	69f8      	ldr	r0, [r7, #28]
 800d4d4:	f000 f8ae 	bl	800d634 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	61bb      	str	r3, [r7, #24]
 800d4dc:	e002      	b.n	800d4e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d4de:	f04f 33ff 	mov.w	r3, #4294967295
 800d4e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d4e4:	69bb      	ldr	r3, [r7, #24]
	}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3720      	adds	r7, #32
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}
	...

0800d4f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b088      	sub	sp, #32
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	607a      	str	r2, [r7, #4]
 800d4fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d500:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d502:	6879      	ldr	r1, [r7, #4]
 800d504:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d508:	440b      	add	r3, r1
 800d50a:	009b      	lsls	r3, r3, #2
 800d50c:	4413      	add	r3, r2
 800d50e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d510:	69bb      	ldr	r3, [r7, #24]
 800d512:	f023 0307 	bic.w	r3, r3, #7
 800d516:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d518:	69bb      	ldr	r3, [r7, #24]
 800d51a:	f003 0307 	and.w	r3, r3, #7
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d00d      	beq.n	800d53e <prvInitialiseNewTask+0x4e>
	__asm volatile
 800d522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d526:	b672      	cpsid	i
 800d528:	f383 8811 	msr	BASEPRI, r3
 800d52c:	f3bf 8f6f 	isb	sy
 800d530:	f3bf 8f4f 	dsb	sy
 800d534:	b662      	cpsie	i
 800d536:	617b      	str	r3, [r7, #20]
}
 800d538:	bf00      	nop
 800d53a:	bf00      	nop
 800d53c:	e7fd      	b.n	800d53a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d01f      	beq.n	800d584 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d544:	2300      	movs	r3, #0
 800d546:	61fb      	str	r3, [r7, #28]
 800d548:	e012      	b.n	800d570 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d54a:	68ba      	ldr	r2, [r7, #8]
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	4413      	add	r3, r2
 800d550:	7819      	ldrb	r1, [r3, #0]
 800d552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d554:	69fb      	ldr	r3, [r7, #28]
 800d556:	4413      	add	r3, r2
 800d558:	3334      	adds	r3, #52	@ 0x34
 800d55a:	460a      	mov	r2, r1
 800d55c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d55e:	68ba      	ldr	r2, [r7, #8]
 800d560:	69fb      	ldr	r3, [r7, #28]
 800d562:	4413      	add	r3, r2
 800d564:	781b      	ldrb	r3, [r3, #0]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d006      	beq.n	800d578 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d56a:	69fb      	ldr	r3, [r7, #28]
 800d56c:	3301      	adds	r3, #1
 800d56e:	61fb      	str	r3, [r7, #28]
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	2b0f      	cmp	r3, #15
 800d574:	d9e9      	bls.n	800d54a <prvInitialiseNewTask+0x5a>
 800d576:	e000      	b.n	800d57a <prvInitialiseNewTask+0x8a>
			{
				break;
 800d578:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d57c:	2200      	movs	r2, #0
 800d57e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d582:	e003      	b.n	800d58c <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d586:	2200      	movs	r2, #0
 800d588:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d58e:	2b06      	cmp	r3, #6
 800d590:	d901      	bls.n	800d596 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d592:	2306      	movs	r3, #6
 800d594:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d598:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d59a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d59e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d5a0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5aa:	3304      	adds	r3, #4
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7fe fe34 	bl	800c21a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b4:	3318      	adds	r3, #24
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7fe fe2f 	bl	800c21a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c4:	f1c3 0207 	rsb	r2, r3, #7
 800d5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d5cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5dc:	2200      	movs	r2, #0
 800d5de:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e4:	334c      	adds	r3, #76	@ 0x4c
 800d5e6:	224c      	movs	r2, #76	@ 0x4c
 800d5e8:	2100      	movs	r1, #0
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f00f ff5d 	bl	801d4aa <memset>
 800d5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f2:	4a0d      	ldr	r2, [pc, #52]	@ (800d628 <prvInitialiseNewTask+0x138>)
 800d5f4:	651a      	str	r2, [r3, #80]	@ 0x50
 800d5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f8:	4a0c      	ldr	r2, [pc, #48]	@ (800d62c <prvInitialiseNewTask+0x13c>)
 800d5fa:	655a      	str	r2, [r3, #84]	@ 0x54
 800d5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5fe:	4a0c      	ldr	r2, [pc, #48]	@ (800d630 <prvInitialiseNewTask+0x140>)
 800d600:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d602:	683a      	ldr	r2, [r7, #0]
 800d604:	68f9      	ldr	r1, [r7, #12]
 800d606:	69b8      	ldr	r0, [r7, #24]
 800d608:	f000 ffe2 	bl	800e5d0 <pxPortInitialiseStack>
 800d60c:	4602      	mov	r2, r0
 800d60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d610:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d614:	2b00      	cmp	r3, #0
 800d616:	d002      	beq.n	800d61e <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d61a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d61c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d61e:	bf00      	nop
 800d620:	3720      	adds	r7, #32
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	2000ff80 	.word	0x2000ff80
 800d62c:	2000ffe8 	.word	0x2000ffe8
 800d630:	20010050 	.word	0x20010050

0800d634 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d63c:	f001 f8d6 	bl	800e7ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d640:	4b2a      	ldr	r3, [pc, #168]	@ (800d6ec <prvAddNewTaskToReadyList+0xb8>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	3301      	adds	r3, #1
 800d646:	4a29      	ldr	r2, [pc, #164]	@ (800d6ec <prvAddNewTaskToReadyList+0xb8>)
 800d648:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d64a:	4b29      	ldr	r3, [pc, #164]	@ (800d6f0 <prvAddNewTaskToReadyList+0xbc>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d109      	bne.n	800d666 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d652:	4a27      	ldr	r2, [pc, #156]	@ (800d6f0 <prvAddNewTaskToReadyList+0xbc>)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d658:	4b24      	ldr	r3, [pc, #144]	@ (800d6ec <prvAddNewTaskToReadyList+0xb8>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d110      	bne.n	800d682 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d660:	f000 fcac 	bl	800dfbc <prvInitialiseTaskLists>
 800d664:	e00d      	b.n	800d682 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d666:	4b23      	ldr	r3, [pc, #140]	@ (800d6f4 <prvAddNewTaskToReadyList+0xc0>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d109      	bne.n	800d682 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d66e:	4b20      	ldr	r3, [pc, #128]	@ (800d6f0 <prvAddNewTaskToReadyList+0xbc>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d678:	429a      	cmp	r2, r3
 800d67a:	d802      	bhi.n	800d682 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d67c:	4a1c      	ldr	r2, [pc, #112]	@ (800d6f0 <prvAddNewTaskToReadyList+0xbc>)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d682:	4b1d      	ldr	r3, [pc, #116]	@ (800d6f8 <prvAddNewTaskToReadyList+0xc4>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	3301      	adds	r3, #1
 800d688:	4a1b      	ldr	r2, [pc, #108]	@ (800d6f8 <prvAddNewTaskToReadyList+0xc4>)
 800d68a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d690:	2201      	movs	r2, #1
 800d692:	409a      	lsls	r2, r3
 800d694:	4b19      	ldr	r3, [pc, #100]	@ (800d6fc <prvAddNewTaskToReadyList+0xc8>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	4313      	orrs	r3, r2
 800d69a:	4a18      	ldr	r2, [pc, #96]	@ (800d6fc <prvAddNewTaskToReadyList+0xc8>)
 800d69c:	6013      	str	r3, [r2, #0]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6a2:	4613      	mov	r3, r2
 800d6a4:	009b      	lsls	r3, r3, #2
 800d6a6:	4413      	add	r3, r2
 800d6a8:	009b      	lsls	r3, r3, #2
 800d6aa:	4a15      	ldr	r2, [pc, #84]	@ (800d700 <prvAddNewTaskToReadyList+0xcc>)
 800d6ac:	441a      	add	r2, r3
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	3304      	adds	r3, #4
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	4610      	mov	r0, r2
 800d6b6:	f7fe fdbd 	bl	800c234 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d6ba:	f001 f8cd 	bl	800e858 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d6be:	4b0d      	ldr	r3, [pc, #52]	@ (800d6f4 <prvAddNewTaskToReadyList+0xc0>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d00e      	beq.n	800d6e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d6c6:	4b0a      	ldr	r3, [pc, #40]	@ (800d6f0 <prvAddNewTaskToReadyList+0xbc>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d207      	bcs.n	800d6e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d6d4:	4b0b      	ldr	r3, [pc, #44]	@ (800d704 <prvAddNewTaskToReadyList+0xd0>)
 800d6d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6da:	601a      	str	r2, [r3, #0]
 800d6dc:	f3bf 8f4f 	dsb	sy
 800d6e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d6e4:	bf00      	nop
 800d6e6:	3708      	adds	r7, #8
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	20005300 	.word	0x20005300
 800d6f0:	20005200 	.word	0x20005200
 800d6f4:	2000530c 	.word	0x2000530c
 800d6f8:	2000531c 	.word	0x2000531c
 800d6fc:	20005308 	.word	0x20005308
 800d700:	20005204 	.word	0x20005204
 800d704:	e000ed04 	.word	0xe000ed04

0800d708 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d710:	f001 f86c 	bl	800e7ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d102      	bne.n	800d720 <vTaskDelete+0x18>
 800d71a:	4b3a      	ldr	r3, [pc, #232]	@ (800d804 <vTaskDelete+0xfc>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	e000      	b.n	800d722 <vTaskDelete+0x1a>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	3304      	adds	r3, #4
 800d728:	4618      	mov	r0, r3
 800d72a:	f7fe fde0 	bl	800c2ee <uxListRemove>
 800d72e:	4603      	mov	r3, r0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d115      	bne.n	800d760 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d738:	4933      	ldr	r1, [pc, #204]	@ (800d808 <vTaskDelete+0x100>)
 800d73a:	4613      	mov	r3, r2
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	4413      	add	r3, r2
 800d740:	009b      	lsls	r3, r3, #2
 800d742:	440b      	add	r3, r1
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d10a      	bne.n	800d760 <vTaskDelete+0x58>
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d74e:	2201      	movs	r2, #1
 800d750:	fa02 f303 	lsl.w	r3, r2, r3
 800d754:	43da      	mvns	r2, r3
 800d756:	4b2d      	ldr	r3, [pc, #180]	@ (800d80c <vTaskDelete+0x104>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4013      	ands	r3, r2
 800d75c:	4a2b      	ldr	r2, [pc, #172]	@ (800d80c <vTaskDelete+0x104>)
 800d75e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d764:	2b00      	cmp	r3, #0
 800d766:	d004      	beq.n	800d772 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	3318      	adds	r3, #24
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7fe fdbe 	bl	800c2ee <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800d772:	4b27      	ldr	r3, [pc, #156]	@ (800d810 <vTaskDelete+0x108>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	3301      	adds	r3, #1
 800d778:	4a25      	ldr	r2, [pc, #148]	@ (800d810 <vTaskDelete+0x108>)
 800d77a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800d77c:	4b21      	ldr	r3, [pc, #132]	@ (800d804 <vTaskDelete+0xfc>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	68fa      	ldr	r2, [r7, #12]
 800d782:	429a      	cmp	r2, r3
 800d784:	d10b      	bne.n	800d79e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	3304      	adds	r3, #4
 800d78a:	4619      	mov	r1, r3
 800d78c:	4821      	ldr	r0, [pc, #132]	@ (800d814 <vTaskDelete+0x10c>)
 800d78e:	f7fe fd51 	bl	800c234 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800d792:	4b21      	ldr	r3, [pc, #132]	@ (800d818 <vTaskDelete+0x110>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	3301      	adds	r3, #1
 800d798:	4a1f      	ldr	r2, [pc, #124]	@ (800d818 <vTaskDelete+0x110>)
 800d79a:	6013      	str	r3, [r2, #0]
 800d79c:	e009      	b.n	800d7b2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800d79e:	4b1f      	ldr	r3, [pc, #124]	@ (800d81c <vTaskDelete+0x114>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	3b01      	subs	r3, #1
 800d7a4:	4a1d      	ldr	r2, [pc, #116]	@ (800d81c <vTaskDelete+0x114>)
 800d7a6:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800d7a8:	68f8      	ldr	r0, [r7, #12]
 800d7aa:	f000 fc75 	bl	800e098 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800d7ae:	f000 fcab 	bl	800e108 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800d7b2:	f001 f851 	bl	800e858 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800d7b6:	4b1a      	ldr	r3, [pc, #104]	@ (800d820 <vTaskDelete+0x118>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d01e      	beq.n	800d7fc <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 800d7be:	4b11      	ldr	r3, [pc, #68]	@ (800d804 <vTaskDelete+0xfc>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d119      	bne.n	800d7fc <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800d7c8:	4b16      	ldr	r3, [pc, #88]	@ (800d824 <vTaskDelete+0x11c>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d00d      	beq.n	800d7ec <vTaskDelete+0xe4>
	__asm volatile
 800d7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d4:	b672      	cpsid	i
 800d7d6:	f383 8811 	msr	BASEPRI, r3
 800d7da:	f3bf 8f6f 	isb	sy
 800d7de:	f3bf 8f4f 	dsb	sy
 800d7e2:	b662      	cpsie	i
 800d7e4:	60bb      	str	r3, [r7, #8]
}
 800d7e6:	bf00      	nop
 800d7e8:	bf00      	nop
 800d7ea:	e7fd      	b.n	800d7e8 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800d7ec:	4b0e      	ldr	r3, [pc, #56]	@ (800d828 <vTaskDelete+0x120>)
 800d7ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7f2:	601a      	str	r2, [r3, #0]
 800d7f4:	f3bf 8f4f 	dsb	sy
 800d7f8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d7fc:	bf00      	nop
 800d7fe:	3710      	adds	r7, #16
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}
 800d804:	20005200 	.word	0x20005200
 800d808:	20005204 	.word	0x20005204
 800d80c:	20005308 	.word	0x20005308
 800d810:	2000531c 	.word	0x2000531c
 800d814:	200052d4 	.word	0x200052d4
 800d818:	200052e8 	.word	0x200052e8
 800d81c:	20005300 	.word	0x20005300
 800d820:	2000530c 	.word	0x2000530c
 800d824:	20005328 	.word	0x20005328
 800d828:	e000ed04 	.word	0xe000ed04

0800d82c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d834:	2300      	movs	r3, #0
 800d836:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d01a      	beq.n	800d874 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d83e:	4b15      	ldr	r3, [pc, #84]	@ (800d894 <vTaskDelay+0x68>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d00d      	beq.n	800d862 <vTaskDelay+0x36>
	__asm volatile
 800d846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d84a:	b672      	cpsid	i
 800d84c:	f383 8811 	msr	BASEPRI, r3
 800d850:	f3bf 8f6f 	isb	sy
 800d854:	f3bf 8f4f 	dsb	sy
 800d858:	b662      	cpsie	i
 800d85a:	60bb      	str	r3, [r7, #8]
}
 800d85c:	bf00      	nop
 800d85e:	bf00      	nop
 800d860:	e7fd      	b.n	800d85e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800d862:	f000 f889 	bl	800d978 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d866:	2100      	movs	r1, #0
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f000 fe4b 	bl	800e504 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d86e:	f000 f891 	bl	800d994 <xTaskResumeAll>
 800d872:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d107      	bne.n	800d88a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800d87a:	4b07      	ldr	r3, [pc, #28]	@ (800d898 <vTaskDelay+0x6c>)
 800d87c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d880:	601a      	str	r2, [r3, #0]
 800d882:	f3bf 8f4f 	dsb	sy
 800d886:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d88a:	bf00      	nop
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	20005328 	.word	0x20005328
 800d898:	e000ed04 	.word	0xe000ed04

0800d89c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b08a      	sub	sp, #40	@ 0x28
 800d8a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d8aa:	463a      	mov	r2, r7
 800d8ac:	1d39      	adds	r1, r7, #4
 800d8ae:	f107 0308 	add.w	r3, r7, #8
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7f3 fcf4 	bl	80012a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d8b8:	6839      	ldr	r1, [r7, #0]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	68ba      	ldr	r2, [r7, #8]
 800d8be:	9202      	str	r2, [sp, #8]
 800d8c0:	9301      	str	r3, [sp, #4]
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	9300      	str	r3, [sp, #0]
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	460a      	mov	r2, r1
 800d8ca:	4923      	ldr	r1, [pc, #140]	@ (800d958 <vTaskStartScheduler+0xbc>)
 800d8cc:	4823      	ldr	r0, [pc, #140]	@ (800d95c <vTaskStartScheduler+0xc0>)
 800d8ce:	f7ff fd63 	bl	800d398 <xTaskCreateStatic>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	4a22      	ldr	r2, [pc, #136]	@ (800d960 <vTaskStartScheduler+0xc4>)
 800d8d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d8d8:	4b21      	ldr	r3, [pc, #132]	@ (800d960 <vTaskStartScheduler+0xc4>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d002      	beq.n	800d8e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	617b      	str	r3, [r7, #20]
 800d8e4:	e001      	b.n	800d8ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d11d      	bne.n	800d92c <vTaskStartScheduler+0x90>
	__asm volatile
 800d8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8f4:	b672      	cpsid	i
 800d8f6:	f383 8811 	msr	BASEPRI, r3
 800d8fa:	f3bf 8f6f 	isb	sy
 800d8fe:	f3bf 8f4f 	dsb	sy
 800d902:	b662      	cpsie	i
 800d904:	613b      	str	r3, [r7, #16]
}
 800d906:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d908:	4b16      	ldr	r3, [pc, #88]	@ (800d964 <vTaskStartScheduler+0xc8>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	334c      	adds	r3, #76	@ 0x4c
 800d90e:	4a16      	ldr	r2, [pc, #88]	@ (800d968 <vTaskStartScheduler+0xcc>)
 800d910:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d912:	4b16      	ldr	r3, [pc, #88]	@ (800d96c <vTaskStartScheduler+0xd0>)
 800d914:	f04f 32ff 	mov.w	r2, #4294967295
 800d918:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d91a:	4b15      	ldr	r3, [pc, #84]	@ (800d970 <vTaskStartScheduler+0xd4>)
 800d91c:	2201      	movs	r2, #1
 800d91e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d920:	4b14      	ldr	r3, [pc, #80]	@ (800d974 <vTaskStartScheduler+0xd8>)
 800d922:	2200      	movs	r2, #0
 800d924:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d926:	f000 fee3 	bl	800e6f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d92a:	e011      	b.n	800d950 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d932:	d10d      	bne.n	800d950 <vTaskStartScheduler+0xb4>
	__asm volatile
 800d934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d938:	b672      	cpsid	i
 800d93a:	f383 8811 	msr	BASEPRI, r3
 800d93e:	f3bf 8f6f 	isb	sy
 800d942:	f3bf 8f4f 	dsb	sy
 800d946:	b662      	cpsie	i
 800d948:	60fb      	str	r3, [r7, #12]
}
 800d94a:	bf00      	nop
 800d94c:	bf00      	nop
 800d94e:	e7fd      	b.n	800d94c <vTaskStartScheduler+0xb0>
}
 800d950:	bf00      	nop
 800d952:	3718      	adds	r7, #24
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	0801e6e8 	.word	0x0801e6e8
 800d95c:	0800df8d 	.word	0x0800df8d
 800d960:	20005324 	.word	0x20005324
 800d964:	20005200 	.word	0x20005200
 800d968:	2000013c 	.word	0x2000013c
 800d96c:	20005320 	.word	0x20005320
 800d970:	2000530c 	.word	0x2000530c
 800d974:	20005304 	.word	0x20005304

0800d978 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d978:	b480      	push	{r7}
 800d97a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d97c:	4b04      	ldr	r3, [pc, #16]	@ (800d990 <vTaskSuspendAll+0x18>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	3301      	adds	r3, #1
 800d982:	4a03      	ldr	r2, [pc, #12]	@ (800d990 <vTaskSuspendAll+0x18>)
 800d984:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d986:	bf00      	nop
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr
 800d990:	20005328 	.word	0x20005328

0800d994 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d99a:	2300      	movs	r3, #0
 800d99c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d9a2:	4b43      	ldr	r3, [pc, #268]	@ (800dab0 <xTaskResumeAll+0x11c>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d10d      	bne.n	800d9c6 <xTaskResumeAll+0x32>
	__asm volatile
 800d9aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ae:	b672      	cpsid	i
 800d9b0:	f383 8811 	msr	BASEPRI, r3
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	b662      	cpsie	i
 800d9be:	603b      	str	r3, [r7, #0]
}
 800d9c0:	bf00      	nop
 800d9c2:	bf00      	nop
 800d9c4:	e7fd      	b.n	800d9c2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d9c6:	f000 ff11 	bl	800e7ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d9ca:	4b39      	ldr	r3, [pc, #228]	@ (800dab0 <xTaskResumeAll+0x11c>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	3b01      	subs	r3, #1
 800d9d0:	4a37      	ldr	r2, [pc, #220]	@ (800dab0 <xTaskResumeAll+0x11c>)
 800d9d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9d4:	4b36      	ldr	r3, [pc, #216]	@ (800dab0 <xTaskResumeAll+0x11c>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d161      	bne.n	800daa0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d9dc:	4b35      	ldr	r3, [pc, #212]	@ (800dab4 <xTaskResumeAll+0x120>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d05d      	beq.n	800daa0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d9e4:	e02e      	b.n	800da44 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9e6:	4b34      	ldr	r3, [pc, #208]	@ (800dab8 <xTaskResumeAll+0x124>)
 800d9e8:	68db      	ldr	r3, [r3, #12]
 800d9ea:	68db      	ldr	r3, [r3, #12]
 800d9ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	3318      	adds	r3, #24
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7fe fc7b 	bl	800c2ee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	3304      	adds	r3, #4
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7fe fc76 	bl	800c2ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da06:	2201      	movs	r2, #1
 800da08:	409a      	lsls	r2, r3
 800da0a:	4b2c      	ldr	r3, [pc, #176]	@ (800dabc <xTaskResumeAll+0x128>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	4313      	orrs	r3, r2
 800da10:	4a2a      	ldr	r2, [pc, #168]	@ (800dabc <xTaskResumeAll+0x128>)
 800da12:	6013      	str	r3, [r2, #0]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da18:	4613      	mov	r3, r2
 800da1a:	009b      	lsls	r3, r3, #2
 800da1c:	4413      	add	r3, r2
 800da1e:	009b      	lsls	r3, r3, #2
 800da20:	4a27      	ldr	r2, [pc, #156]	@ (800dac0 <xTaskResumeAll+0x12c>)
 800da22:	441a      	add	r2, r3
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	3304      	adds	r3, #4
 800da28:	4619      	mov	r1, r3
 800da2a:	4610      	mov	r0, r2
 800da2c:	f7fe fc02 	bl	800c234 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da34:	4b23      	ldr	r3, [pc, #140]	@ (800dac4 <xTaskResumeAll+0x130>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d302      	bcc.n	800da44 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800da3e:	4b22      	ldr	r3, [pc, #136]	@ (800dac8 <xTaskResumeAll+0x134>)
 800da40:	2201      	movs	r2, #1
 800da42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da44:	4b1c      	ldr	r3, [pc, #112]	@ (800dab8 <xTaskResumeAll+0x124>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d1cc      	bne.n	800d9e6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d001      	beq.n	800da56 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800da52:	f000 fb59 	bl	800e108 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800da56:	4b1d      	ldr	r3, [pc, #116]	@ (800dacc <xTaskResumeAll+0x138>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d010      	beq.n	800da84 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800da62:	f000 f859 	bl	800db18 <xTaskIncrementTick>
 800da66:	4603      	mov	r3, r0
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d002      	beq.n	800da72 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800da6c:	4b16      	ldr	r3, [pc, #88]	@ (800dac8 <xTaskResumeAll+0x134>)
 800da6e:	2201      	movs	r2, #1
 800da70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	3b01      	subs	r3, #1
 800da76:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d1f1      	bne.n	800da62 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800da7e:	4b13      	ldr	r3, [pc, #76]	@ (800dacc <xTaskResumeAll+0x138>)
 800da80:	2200      	movs	r2, #0
 800da82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800da84:	4b10      	ldr	r3, [pc, #64]	@ (800dac8 <xTaskResumeAll+0x134>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d009      	beq.n	800daa0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800da8c:	2301      	movs	r3, #1
 800da8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800da90:	4b0f      	ldr	r3, [pc, #60]	@ (800dad0 <xTaskResumeAll+0x13c>)
 800da92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da96:	601a      	str	r2, [r3, #0]
 800da98:	f3bf 8f4f 	dsb	sy
 800da9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800daa0:	f000 feda 	bl	800e858 <vPortExitCritical>

	return xAlreadyYielded;
 800daa4:	68bb      	ldr	r3, [r7, #8]
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3710      	adds	r7, #16
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	20005328 	.word	0x20005328
 800dab4:	20005300 	.word	0x20005300
 800dab8:	200052c0 	.word	0x200052c0
 800dabc:	20005308 	.word	0x20005308
 800dac0:	20005204 	.word	0x20005204
 800dac4:	20005200 	.word	0x20005200
 800dac8:	20005314 	.word	0x20005314
 800dacc:	20005310 	.word	0x20005310
 800dad0:	e000ed04 	.word	0xe000ed04

0800dad4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dad4:	b480      	push	{r7}
 800dad6:	b083      	sub	sp, #12
 800dad8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dada:	4b05      	ldr	r3, [pc, #20]	@ (800daf0 <xTaskGetTickCount+0x1c>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dae0:	687b      	ldr	r3, [r7, #4]
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	370c      	adds	r7, #12
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr
 800daee:	bf00      	nop
 800daf0:	20005304 	.word	0x20005304

0800daf4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b082      	sub	sp, #8
 800daf8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dafa:	f000 ff5f 	bl	800e9bc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800dafe:	2300      	movs	r3, #0
 800db00:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800db02:	4b04      	ldr	r3, [pc, #16]	@ (800db14 <xTaskGetTickCountFromISR+0x20>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db08:	683b      	ldr	r3, [r7, #0]
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3708      	adds	r7, #8
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop
 800db14:	20005304 	.word	0x20005304

0800db18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b086      	sub	sp, #24
 800db1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800db1e:	2300      	movs	r3, #0
 800db20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db22:	4b50      	ldr	r3, [pc, #320]	@ (800dc64 <xTaskIncrementTick+0x14c>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	f040 808b 	bne.w	800dc42 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800db2c:	4b4e      	ldr	r3, [pc, #312]	@ (800dc68 <xTaskIncrementTick+0x150>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	3301      	adds	r3, #1
 800db32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800db34:	4a4c      	ldr	r2, [pc, #304]	@ (800dc68 <xTaskIncrementTick+0x150>)
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d123      	bne.n	800db88 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800db40:	4b4a      	ldr	r3, [pc, #296]	@ (800dc6c <xTaskIncrementTick+0x154>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d00d      	beq.n	800db66 <xTaskIncrementTick+0x4e>
	__asm volatile
 800db4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db4e:	b672      	cpsid	i
 800db50:	f383 8811 	msr	BASEPRI, r3
 800db54:	f3bf 8f6f 	isb	sy
 800db58:	f3bf 8f4f 	dsb	sy
 800db5c:	b662      	cpsie	i
 800db5e:	603b      	str	r3, [r7, #0]
}
 800db60:	bf00      	nop
 800db62:	bf00      	nop
 800db64:	e7fd      	b.n	800db62 <xTaskIncrementTick+0x4a>
 800db66:	4b41      	ldr	r3, [pc, #260]	@ (800dc6c <xTaskIncrementTick+0x154>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	60fb      	str	r3, [r7, #12]
 800db6c:	4b40      	ldr	r3, [pc, #256]	@ (800dc70 <xTaskIncrementTick+0x158>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4a3e      	ldr	r2, [pc, #248]	@ (800dc6c <xTaskIncrementTick+0x154>)
 800db72:	6013      	str	r3, [r2, #0]
 800db74:	4a3e      	ldr	r2, [pc, #248]	@ (800dc70 <xTaskIncrementTick+0x158>)
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	6013      	str	r3, [r2, #0]
 800db7a:	4b3e      	ldr	r3, [pc, #248]	@ (800dc74 <xTaskIncrementTick+0x15c>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	3301      	adds	r3, #1
 800db80:	4a3c      	ldr	r2, [pc, #240]	@ (800dc74 <xTaskIncrementTick+0x15c>)
 800db82:	6013      	str	r3, [r2, #0]
 800db84:	f000 fac0 	bl	800e108 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800db88:	4b3b      	ldr	r3, [pc, #236]	@ (800dc78 <xTaskIncrementTick+0x160>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	693a      	ldr	r2, [r7, #16]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d348      	bcc.n	800dc24 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db92:	4b36      	ldr	r3, [pc, #216]	@ (800dc6c <xTaskIncrementTick+0x154>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d104      	bne.n	800dba6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db9c:	4b36      	ldr	r3, [pc, #216]	@ (800dc78 <xTaskIncrementTick+0x160>)
 800db9e:	f04f 32ff 	mov.w	r2, #4294967295
 800dba2:	601a      	str	r2, [r3, #0]
					break;
 800dba4:	e03e      	b.n	800dc24 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dba6:	4b31      	ldr	r3, [pc, #196]	@ (800dc6c <xTaskIncrementTick+0x154>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	68db      	ldr	r3, [r3, #12]
 800dbac:	68db      	ldr	r3, [r3, #12]
 800dbae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dbb6:	693a      	ldr	r2, [r7, #16]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d203      	bcs.n	800dbc6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dbbe:	4a2e      	ldr	r2, [pc, #184]	@ (800dc78 <xTaskIncrementTick+0x160>)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dbc4:	e02e      	b.n	800dc24 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	3304      	adds	r3, #4
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7fe fb8f 	bl	800c2ee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d004      	beq.n	800dbe2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	3318      	adds	r3, #24
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f7fe fb86 	bl	800c2ee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	409a      	lsls	r2, r3
 800dbea:	4b24      	ldr	r3, [pc, #144]	@ (800dc7c <xTaskIncrementTick+0x164>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	4a22      	ldr	r2, [pc, #136]	@ (800dc7c <xTaskIncrementTick+0x164>)
 800dbf2:	6013      	str	r3, [r2, #0]
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbf8:	4613      	mov	r3, r2
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	4413      	add	r3, r2
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	4a1f      	ldr	r2, [pc, #124]	@ (800dc80 <xTaskIncrementTick+0x168>)
 800dc02:	441a      	add	r2, r3
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	3304      	adds	r3, #4
 800dc08:	4619      	mov	r1, r3
 800dc0a:	4610      	mov	r0, r2
 800dc0c:	f7fe fb12 	bl	800c234 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc14:	4b1b      	ldr	r3, [pc, #108]	@ (800dc84 <xTaskIncrementTick+0x16c>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d3b9      	bcc.n	800db92 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc22:	e7b6      	b.n	800db92 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dc24:	4b17      	ldr	r3, [pc, #92]	@ (800dc84 <xTaskIncrementTick+0x16c>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc2a:	4915      	ldr	r1, [pc, #84]	@ (800dc80 <xTaskIncrementTick+0x168>)
 800dc2c:	4613      	mov	r3, r2
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	4413      	add	r3, r2
 800dc32:	009b      	lsls	r3, r3, #2
 800dc34:	440b      	add	r3, r1
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d907      	bls.n	800dc4c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	617b      	str	r3, [r7, #20]
 800dc40:	e004      	b.n	800dc4c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800dc42:	4b11      	ldr	r3, [pc, #68]	@ (800dc88 <xTaskIncrementTick+0x170>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	3301      	adds	r3, #1
 800dc48:	4a0f      	ldr	r2, [pc, #60]	@ (800dc88 <xTaskIncrementTick+0x170>)
 800dc4a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800dc4c:	4b0f      	ldr	r3, [pc, #60]	@ (800dc8c <xTaskIncrementTick+0x174>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d001      	beq.n	800dc58 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800dc54:	2301      	movs	r3, #1
 800dc56:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800dc58:	697b      	ldr	r3, [r7, #20]
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3718      	adds	r7, #24
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	20005328 	.word	0x20005328
 800dc68:	20005304 	.word	0x20005304
 800dc6c:	200052b8 	.word	0x200052b8
 800dc70:	200052bc 	.word	0x200052bc
 800dc74:	20005318 	.word	0x20005318
 800dc78:	20005320 	.word	0x20005320
 800dc7c:	20005308 	.word	0x20005308
 800dc80:	20005204 	.word	0x20005204
 800dc84:	20005200 	.word	0x20005200
 800dc88:	20005310 	.word	0x20005310
 800dc8c:	20005314 	.word	0x20005314

0800dc90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dc90:	b480      	push	{r7}
 800dc92:	b087      	sub	sp, #28
 800dc94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dc96:	4b2b      	ldr	r3, [pc, #172]	@ (800dd44 <vTaskSwitchContext+0xb4>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d003      	beq.n	800dca6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dc9e:	4b2a      	ldr	r3, [pc, #168]	@ (800dd48 <vTaskSwitchContext+0xb8>)
 800dca0:	2201      	movs	r2, #1
 800dca2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dca4:	e047      	b.n	800dd36 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800dca6:	4b28      	ldr	r3, [pc, #160]	@ (800dd48 <vTaskSwitchContext+0xb8>)
 800dca8:	2200      	movs	r2, #0
 800dcaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcac:	4b27      	ldr	r3, [pc, #156]	@ (800dd4c <vTaskSwitchContext+0xbc>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	fab3 f383 	clz	r3, r3
 800dcb8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dcba:	7afb      	ldrb	r3, [r7, #11]
 800dcbc:	f1c3 031f 	rsb	r3, r3, #31
 800dcc0:	617b      	str	r3, [r7, #20]
 800dcc2:	4923      	ldr	r1, [pc, #140]	@ (800dd50 <vTaskSwitchContext+0xc0>)
 800dcc4:	697a      	ldr	r2, [r7, #20]
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	009b      	lsls	r3, r3, #2
 800dcca:	4413      	add	r3, r2
 800dccc:	009b      	lsls	r3, r3, #2
 800dcce:	440b      	add	r3, r1
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d10d      	bne.n	800dcf2 <vTaskSwitchContext+0x62>
	__asm volatile
 800dcd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcda:	b672      	cpsid	i
 800dcdc:	f383 8811 	msr	BASEPRI, r3
 800dce0:	f3bf 8f6f 	isb	sy
 800dce4:	f3bf 8f4f 	dsb	sy
 800dce8:	b662      	cpsie	i
 800dcea:	607b      	str	r3, [r7, #4]
}
 800dcec:	bf00      	nop
 800dcee:	bf00      	nop
 800dcf0:	e7fd      	b.n	800dcee <vTaskSwitchContext+0x5e>
 800dcf2:	697a      	ldr	r2, [r7, #20]
 800dcf4:	4613      	mov	r3, r2
 800dcf6:	009b      	lsls	r3, r3, #2
 800dcf8:	4413      	add	r3, r2
 800dcfa:	009b      	lsls	r3, r3, #2
 800dcfc:	4a14      	ldr	r2, [pc, #80]	@ (800dd50 <vTaskSwitchContext+0xc0>)
 800dcfe:	4413      	add	r3, r2
 800dd00:	613b      	str	r3, [r7, #16]
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	685a      	ldr	r2, [r3, #4]
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	605a      	str	r2, [r3, #4]
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	685a      	ldr	r2, [r3, #4]
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	3308      	adds	r3, #8
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d104      	bne.n	800dd22 <vTaskSwitchContext+0x92>
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	685a      	ldr	r2, [r3, #4]
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	605a      	str	r2, [r3, #4]
 800dd22:	693b      	ldr	r3, [r7, #16]
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	68db      	ldr	r3, [r3, #12]
 800dd28:	4a0a      	ldr	r2, [pc, #40]	@ (800dd54 <vTaskSwitchContext+0xc4>)
 800dd2a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dd2c:	4b09      	ldr	r3, [pc, #36]	@ (800dd54 <vTaskSwitchContext+0xc4>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	334c      	adds	r3, #76	@ 0x4c
 800dd32:	4a09      	ldr	r2, [pc, #36]	@ (800dd58 <vTaskSwitchContext+0xc8>)
 800dd34:	6013      	str	r3, [r2, #0]
}
 800dd36:	bf00      	nop
 800dd38:	371c      	adds	r7, #28
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd40:	4770      	bx	lr
 800dd42:	bf00      	nop
 800dd44:	20005328 	.word	0x20005328
 800dd48:	20005314 	.word	0x20005314
 800dd4c:	20005308 	.word	0x20005308
 800dd50:	20005204 	.word	0x20005204
 800dd54:	20005200 	.word	0x20005200
 800dd58:	2000013c 	.word	0x2000013c

0800dd5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d10d      	bne.n	800dd88 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800dd6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd70:	b672      	cpsid	i
 800dd72:	f383 8811 	msr	BASEPRI, r3
 800dd76:	f3bf 8f6f 	isb	sy
 800dd7a:	f3bf 8f4f 	dsb	sy
 800dd7e:	b662      	cpsie	i
 800dd80:	60fb      	str	r3, [r7, #12]
}
 800dd82:	bf00      	nop
 800dd84:	bf00      	nop
 800dd86:	e7fd      	b.n	800dd84 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dd88:	4b07      	ldr	r3, [pc, #28]	@ (800dda8 <vTaskPlaceOnEventList+0x4c>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	3318      	adds	r3, #24
 800dd8e:	4619      	mov	r1, r3
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7fe fa73 	bl	800c27c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dd96:	2101      	movs	r1, #1
 800dd98:	6838      	ldr	r0, [r7, #0]
 800dd9a:	f000 fbb3 	bl	800e504 <prvAddCurrentTaskToDelayedList>
}
 800dd9e:	bf00      	nop
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	20005200 	.word	0x20005200

0800ddac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b086      	sub	sp, #24
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	68db      	ldr	r3, [r3, #12]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d10d      	bne.n	800ddde <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800ddc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddc6:	b672      	cpsid	i
 800ddc8:	f383 8811 	msr	BASEPRI, r3
 800ddcc:	f3bf 8f6f 	isb	sy
 800ddd0:	f3bf 8f4f 	dsb	sy
 800ddd4:	b662      	cpsie	i
 800ddd6:	60fb      	str	r3, [r7, #12]
}
 800ddd8:	bf00      	nop
 800ddda:	bf00      	nop
 800dddc:	e7fd      	b.n	800ddda <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	3318      	adds	r3, #24
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7fe fa83 	bl	800c2ee <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dde8:	4b1d      	ldr	r3, [pc, #116]	@ (800de60 <xTaskRemoveFromEventList+0xb4>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d11c      	bne.n	800de2a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	3304      	adds	r3, #4
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fe fa7a 	bl	800c2ee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddfe:	2201      	movs	r2, #1
 800de00:	409a      	lsls	r2, r3
 800de02:	4b18      	ldr	r3, [pc, #96]	@ (800de64 <xTaskRemoveFromEventList+0xb8>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	4313      	orrs	r3, r2
 800de08:	4a16      	ldr	r2, [pc, #88]	@ (800de64 <xTaskRemoveFromEventList+0xb8>)
 800de0a:	6013      	str	r3, [r2, #0]
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de10:	4613      	mov	r3, r2
 800de12:	009b      	lsls	r3, r3, #2
 800de14:	4413      	add	r3, r2
 800de16:	009b      	lsls	r3, r3, #2
 800de18:	4a13      	ldr	r2, [pc, #76]	@ (800de68 <xTaskRemoveFromEventList+0xbc>)
 800de1a:	441a      	add	r2, r3
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	3304      	adds	r3, #4
 800de20:	4619      	mov	r1, r3
 800de22:	4610      	mov	r0, r2
 800de24:	f7fe fa06 	bl	800c234 <vListInsertEnd>
 800de28:	e005      	b.n	800de36 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	3318      	adds	r3, #24
 800de2e:	4619      	mov	r1, r3
 800de30:	480e      	ldr	r0, [pc, #56]	@ (800de6c <xTaskRemoveFromEventList+0xc0>)
 800de32:	f7fe f9ff 	bl	800c234 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de3a:	4b0d      	ldr	r3, [pc, #52]	@ (800de70 <xTaskRemoveFromEventList+0xc4>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de40:	429a      	cmp	r2, r3
 800de42:	d905      	bls.n	800de50 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800de44:	2301      	movs	r3, #1
 800de46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800de48:	4b0a      	ldr	r3, [pc, #40]	@ (800de74 <xTaskRemoveFromEventList+0xc8>)
 800de4a:	2201      	movs	r2, #1
 800de4c:	601a      	str	r2, [r3, #0]
 800de4e:	e001      	b.n	800de54 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800de50:	2300      	movs	r3, #0
 800de52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800de54:	697b      	ldr	r3, [r7, #20]
}
 800de56:	4618      	mov	r0, r3
 800de58:	3718      	adds	r7, #24
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	20005328 	.word	0x20005328
 800de64:	20005308 	.word	0x20005308
 800de68:	20005204 	.word	0x20005204
 800de6c:	200052c0 	.word	0x200052c0
 800de70:	20005200 	.word	0x20005200
 800de74:	20005314 	.word	0x20005314

0800de78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800de78:	b480      	push	{r7}
 800de7a:	b083      	sub	sp, #12
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800de80:	4b06      	ldr	r3, [pc, #24]	@ (800de9c <vTaskInternalSetTimeOutState+0x24>)
 800de82:	681a      	ldr	r2, [r3, #0]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800de88:	4b05      	ldr	r3, [pc, #20]	@ (800dea0 <vTaskInternalSetTimeOutState+0x28>)
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	605a      	str	r2, [r3, #4]
}
 800de90:	bf00      	nop
 800de92:	370c      	adds	r7, #12
 800de94:	46bd      	mov	sp, r7
 800de96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9a:	4770      	bx	lr
 800de9c:	20005318 	.word	0x20005318
 800dea0:	20005304 	.word	0x20005304

0800dea4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b088      	sub	sp, #32
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d10d      	bne.n	800ded0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800deb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb8:	b672      	cpsid	i
 800deba:	f383 8811 	msr	BASEPRI, r3
 800debe:	f3bf 8f6f 	isb	sy
 800dec2:	f3bf 8f4f 	dsb	sy
 800dec6:	b662      	cpsie	i
 800dec8:	613b      	str	r3, [r7, #16]
}
 800deca:	bf00      	nop
 800decc:	bf00      	nop
 800dece:	e7fd      	b.n	800decc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d10d      	bne.n	800def2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800ded6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deda:	b672      	cpsid	i
 800dedc:	f383 8811 	msr	BASEPRI, r3
 800dee0:	f3bf 8f6f 	isb	sy
 800dee4:	f3bf 8f4f 	dsb	sy
 800dee8:	b662      	cpsie	i
 800deea:	60fb      	str	r3, [r7, #12]
}
 800deec:	bf00      	nop
 800deee:	bf00      	nop
 800def0:	e7fd      	b.n	800deee <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800def2:	f000 fc7b 	bl	800e7ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800def6:	4b1d      	ldr	r3, [pc, #116]	@ (800df6c <xTaskCheckForTimeOut+0xc8>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	69ba      	ldr	r2, [r7, #24]
 800df02:	1ad3      	subs	r3, r2, r3
 800df04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df0e:	d102      	bne.n	800df16 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800df10:	2300      	movs	r3, #0
 800df12:	61fb      	str	r3, [r7, #28]
 800df14:	e023      	b.n	800df5e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	4b15      	ldr	r3, [pc, #84]	@ (800df70 <xTaskCheckForTimeOut+0xcc>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	429a      	cmp	r2, r3
 800df20:	d007      	beq.n	800df32 <xTaskCheckForTimeOut+0x8e>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	69ba      	ldr	r2, [r7, #24]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d302      	bcc.n	800df32 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800df2c:	2301      	movs	r3, #1
 800df2e:	61fb      	str	r3, [r7, #28]
 800df30:	e015      	b.n	800df5e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	697a      	ldr	r2, [r7, #20]
 800df38:	429a      	cmp	r2, r3
 800df3a:	d20b      	bcs.n	800df54 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	1ad2      	subs	r2, r2, r3
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f7ff ff95 	bl	800de78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800df4e:	2300      	movs	r3, #0
 800df50:	61fb      	str	r3, [r7, #28]
 800df52:	e004      	b.n	800df5e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	2200      	movs	r2, #0
 800df58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800df5a:	2301      	movs	r3, #1
 800df5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800df5e:	f000 fc7b 	bl	800e858 <vPortExitCritical>

	return xReturn;
 800df62:	69fb      	ldr	r3, [r7, #28]
}
 800df64:	4618      	mov	r0, r3
 800df66:	3720      	adds	r7, #32
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	20005304 	.word	0x20005304
 800df70:	20005318 	.word	0x20005318

0800df74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800df74:	b480      	push	{r7}
 800df76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800df78:	4b03      	ldr	r3, [pc, #12]	@ (800df88 <vTaskMissedYield+0x14>)
 800df7a:	2201      	movs	r2, #1
 800df7c:	601a      	str	r2, [r3, #0]
}
 800df7e:	bf00      	nop
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr
 800df88:	20005314 	.word	0x20005314

0800df8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800df94:	f000 f852 	bl	800e03c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800df98:	4b06      	ldr	r3, [pc, #24]	@ (800dfb4 <prvIdleTask+0x28>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	2b01      	cmp	r3, #1
 800df9e:	d9f9      	bls.n	800df94 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dfa0:	4b05      	ldr	r3, [pc, #20]	@ (800dfb8 <prvIdleTask+0x2c>)
 800dfa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfa6:	601a      	str	r2, [r3, #0]
 800dfa8:	f3bf 8f4f 	dsb	sy
 800dfac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dfb0:	e7f0      	b.n	800df94 <prvIdleTask+0x8>
 800dfb2:	bf00      	nop
 800dfb4:	20005204 	.word	0x20005204
 800dfb8:	e000ed04 	.word	0xe000ed04

0800dfbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b082      	sub	sp, #8
 800dfc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	607b      	str	r3, [r7, #4]
 800dfc6:	e00c      	b.n	800dfe2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	4613      	mov	r3, r2
 800dfcc:	009b      	lsls	r3, r3, #2
 800dfce:	4413      	add	r3, r2
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	4a12      	ldr	r2, [pc, #72]	@ (800e01c <prvInitialiseTaskLists+0x60>)
 800dfd4:	4413      	add	r3, r2
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7fe f8ff 	bl	800c1da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	3301      	adds	r3, #1
 800dfe0:	607b      	str	r3, [r7, #4]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2b06      	cmp	r3, #6
 800dfe6:	d9ef      	bls.n	800dfc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dfe8:	480d      	ldr	r0, [pc, #52]	@ (800e020 <prvInitialiseTaskLists+0x64>)
 800dfea:	f7fe f8f6 	bl	800c1da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dfee:	480d      	ldr	r0, [pc, #52]	@ (800e024 <prvInitialiseTaskLists+0x68>)
 800dff0:	f7fe f8f3 	bl	800c1da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dff4:	480c      	ldr	r0, [pc, #48]	@ (800e028 <prvInitialiseTaskLists+0x6c>)
 800dff6:	f7fe f8f0 	bl	800c1da <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dffa:	480c      	ldr	r0, [pc, #48]	@ (800e02c <prvInitialiseTaskLists+0x70>)
 800dffc:	f7fe f8ed 	bl	800c1da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e000:	480b      	ldr	r0, [pc, #44]	@ (800e030 <prvInitialiseTaskLists+0x74>)
 800e002:	f7fe f8ea 	bl	800c1da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e006:	4b0b      	ldr	r3, [pc, #44]	@ (800e034 <prvInitialiseTaskLists+0x78>)
 800e008:	4a05      	ldr	r2, [pc, #20]	@ (800e020 <prvInitialiseTaskLists+0x64>)
 800e00a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e00c:	4b0a      	ldr	r3, [pc, #40]	@ (800e038 <prvInitialiseTaskLists+0x7c>)
 800e00e:	4a05      	ldr	r2, [pc, #20]	@ (800e024 <prvInitialiseTaskLists+0x68>)
 800e010:	601a      	str	r2, [r3, #0]
}
 800e012:	bf00      	nop
 800e014:	3708      	adds	r7, #8
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}
 800e01a:	bf00      	nop
 800e01c:	20005204 	.word	0x20005204
 800e020:	20005290 	.word	0x20005290
 800e024:	200052a4 	.word	0x200052a4
 800e028:	200052c0 	.word	0x200052c0
 800e02c:	200052d4 	.word	0x200052d4
 800e030:	200052ec 	.word	0x200052ec
 800e034:	200052b8 	.word	0x200052b8
 800e038:	200052bc 	.word	0x200052bc

0800e03c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b082      	sub	sp, #8
 800e040:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e042:	e019      	b.n	800e078 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e044:	f000 fbd2 	bl	800e7ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e048:	4b10      	ldr	r3, [pc, #64]	@ (800e08c <prvCheckTasksWaitingTermination+0x50>)
 800e04a:	68db      	ldr	r3, [r3, #12]
 800e04c:	68db      	ldr	r3, [r3, #12]
 800e04e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	3304      	adds	r3, #4
 800e054:	4618      	mov	r0, r3
 800e056:	f7fe f94a 	bl	800c2ee <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e05a:	4b0d      	ldr	r3, [pc, #52]	@ (800e090 <prvCheckTasksWaitingTermination+0x54>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	3b01      	subs	r3, #1
 800e060:	4a0b      	ldr	r2, [pc, #44]	@ (800e090 <prvCheckTasksWaitingTermination+0x54>)
 800e062:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e064:	4b0b      	ldr	r3, [pc, #44]	@ (800e094 <prvCheckTasksWaitingTermination+0x58>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	3b01      	subs	r3, #1
 800e06a:	4a0a      	ldr	r2, [pc, #40]	@ (800e094 <prvCheckTasksWaitingTermination+0x58>)
 800e06c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e06e:	f000 fbf3 	bl	800e858 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f000 f810 	bl	800e098 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e078:	4b06      	ldr	r3, [pc, #24]	@ (800e094 <prvCheckTasksWaitingTermination+0x58>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d1e1      	bne.n	800e044 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e080:	bf00      	nop
 800e082:	bf00      	nop
 800e084:	3708      	adds	r7, #8
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	200052d4 	.word	0x200052d4
 800e090:	20005300 	.word	0x20005300
 800e094:	200052e8 	.word	0x200052e8

0800e098 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b084      	sub	sp, #16
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	334c      	adds	r3, #76	@ 0x4c
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f00f fa2b 	bl	801d500 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d108      	bne.n	800e0c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f000 fd93 	bl	800ebe4 <vPortFree>
				vPortFree( pxTCB );
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 fd90 	bl	800ebe4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e0c4:	e01b      	b.n	800e0fe <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d103      	bne.n	800e0d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f000 fd87 	bl	800ebe4 <vPortFree>
	}
 800e0d6:	e012      	b.n	800e0fe <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e0de:	2b02      	cmp	r3, #2
 800e0e0:	d00d      	beq.n	800e0fe <prvDeleteTCB+0x66>
	__asm volatile
 800e0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0e6:	b672      	cpsid	i
 800e0e8:	f383 8811 	msr	BASEPRI, r3
 800e0ec:	f3bf 8f6f 	isb	sy
 800e0f0:	f3bf 8f4f 	dsb	sy
 800e0f4:	b662      	cpsie	i
 800e0f6:	60fb      	str	r3, [r7, #12]
}
 800e0f8:	bf00      	nop
 800e0fa:	bf00      	nop
 800e0fc:	e7fd      	b.n	800e0fa <prvDeleteTCB+0x62>
	}
 800e0fe:	bf00      	nop
 800e100:	3710      	adds	r7, #16
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
	...

0800e108 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e108:	b480      	push	{r7}
 800e10a:	b083      	sub	sp, #12
 800e10c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e10e:	4b0c      	ldr	r3, [pc, #48]	@ (800e140 <prvResetNextTaskUnblockTime+0x38>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d104      	bne.n	800e122 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e118:	4b0a      	ldr	r3, [pc, #40]	@ (800e144 <prvResetNextTaskUnblockTime+0x3c>)
 800e11a:	f04f 32ff 	mov.w	r2, #4294967295
 800e11e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e120:	e008      	b.n	800e134 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e122:	4b07      	ldr	r3, [pc, #28]	@ (800e140 <prvResetNextTaskUnblockTime+0x38>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	68db      	ldr	r3, [r3, #12]
 800e12a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	4a04      	ldr	r2, [pc, #16]	@ (800e144 <prvResetNextTaskUnblockTime+0x3c>)
 800e132:	6013      	str	r3, [r2, #0]
}
 800e134:	bf00      	nop
 800e136:	370c      	adds	r7, #12
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr
 800e140:	200052b8 	.word	0x200052b8
 800e144:	20005320 	.word	0x20005320

0800e148 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e14e:	4b0b      	ldr	r3, [pc, #44]	@ (800e17c <xTaskGetSchedulerState+0x34>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d102      	bne.n	800e15c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e156:	2301      	movs	r3, #1
 800e158:	607b      	str	r3, [r7, #4]
 800e15a:	e008      	b.n	800e16e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e15c:	4b08      	ldr	r3, [pc, #32]	@ (800e180 <xTaskGetSchedulerState+0x38>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d102      	bne.n	800e16a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e164:	2302      	movs	r3, #2
 800e166:	607b      	str	r3, [r7, #4]
 800e168:	e001      	b.n	800e16e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e16a:	2300      	movs	r3, #0
 800e16c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e16e:	687b      	ldr	r3, [r7, #4]
	}
 800e170:	4618      	mov	r0, r3
 800e172:	370c      	adds	r7, #12
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr
 800e17c:	2000530c 	.word	0x2000530c
 800e180:	20005328 	.word	0x20005328

0800e184 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e184:	b580      	push	{r7, lr}
 800e186:	b084      	sub	sp, #16
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e190:	2300      	movs	r3, #0
 800e192:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d069      	beq.n	800e26e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e19e:	4b36      	ldr	r3, [pc, #216]	@ (800e278 <xTaskPriorityInherit+0xf4>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d259      	bcs.n	800e25c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	699b      	ldr	r3, [r3, #24]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	db06      	blt.n	800e1be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1b0:	4b31      	ldr	r3, [pc, #196]	@ (800e278 <xTaskPriorityInherit+0xf4>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1b6:	f1c3 0207 	rsb	r2, r3, #7
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	6959      	ldr	r1, [r3, #20]
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1c6:	4613      	mov	r3, r2
 800e1c8:	009b      	lsls	r3, r3, #2
 800e1ca:	4413      	add	r3, r2
 800e1cc:	009b      	lsls	r3, r3, #2
 800e1ce:	4a2b      	ldr	r2, [pc, #172]	@ (800e27c <xTaskPriorityInherit+0xf8>)
 800e1d0:	4413      	add	r3, r2
 800e1d2:	4299      	cmp	r1, r3
 800e1d4:	d13a      	bne.n	800e24c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	3304      	adds	r3, #4
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7fe f887 	bl	800c2ee <uxListRemove>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d115      	bne.n	800e212 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1ea:	4924      	ldr	r1, [pc, #144]	@ (800e27c <xTaskPriorityInherit+0xf8>)
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	009b      	lsls	r3, r3, #2
 800e1f0:	4413      	add	r3, r2
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	440b      	add	r3, r1
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d10a      	bne.n	800e212 <xTaskPriorityInherit+0x8e>
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e200:	2201      	movs	r2, #1
 800e202:	fa02 f303 	lsl.w	r3, r2, r3
 800e206:	43da      	mvns	r2, r3
 800e208:	4b1d      	ldr	r3, [pc, #116]	@ (800e280 <xTaskPriorityInherit+0xfc>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	4013      	ands	r3, r2
 800e20e:	4a1c      	ldr	r2, [pc, #112]	@ (800e280 <xTaskPriorityInherit+0xfc>)
 800e210:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e212:	4b19      	ldr	r3, [pc, #100]	@ (800e278 <xTaskPriorityInherit+0xf4>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e220:	2201      	movs	r2, #1
 800e222:	409a      	lsls	r2, r3
 800e224:	4b16      	ldr	r3, [pc, #88]	@ (800e280 <xTaskPriorityInherit+0xfc>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4313      	orrs	r3, r2
 800e22a:	4a15      	ldr	r2, [pc, #84]	@ (800e280 <xTaskPriorityInherit+0xfc>)
 800e22c:	6013      	str	r3, [r2, #0]
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e232:	4613      	mov	r3, r2
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	4413      	add	r3, r2
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	4a10      	ldr	r2, [pc, #64]	@ (800e27c <xTaskPriorityInherit+0xf8>)
 800e23c:	441a      	add	r2, r3
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	3304      	adds	r3, #4
 800e242:	4619      	mov	r1, r3
 800e244:	4610      	mov	r0, r2
 800e246:	f7fd fff5 	bl	800c234 <vListInsertEnd>
 800e24a:	e004      	b.n	800e256 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e24c:	4b0a      	ldr	r3, [pc, #40]	@ (800e278 <xTaskPriorityInherit+0xf4>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e256:	2301      	movs	r3, #1
 800e258:	60fb      	str	r3, [r7, #12]
 800e25a:	e008      	b.n	800e26e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e260:	4b05      	ldr	r3, [pc, #20]	@ (800e278 <xTaskPriorityInherit+0xf4>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e266:	429a      	cmp	r2, r3
 800e268:	d201      	bcs.n	800e26e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e26a:	2301      	movs	r3, #1
 800e26c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e26e:	68fb      	ldr	r3, [r7, #12]
	}
 800e270:	4618      	mov	r0, r3
 800e272:	3710      	adds	r7, #16
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}
 800e278:	20005200 	.word	0x20005200
 800e27c:	20005204 	.word	0x20005204
 800e280:	20005308 	.word	0x20005308

0800e284 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e284:	b580      	push	{r7, lr}
 800e286:	b086      	sub	sp, #24
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e290:	2300      	movs	r3, #0
 800e292:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d074      	beq.n	800e384 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e29a:	4b3d      	ldr	r3, [pc, #244]	@ (800e390 <xTaskPriorityDisinherit+0x10c>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	693a      	ldr	r2, [r7, #16]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d00d      	beq.n	800e2c0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800e2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2a8:	b672      	cpsid	i
 800e2aa:	f383 8811 	msr	BASEPRI, r3
 800e2ae:	f3bf 8f6f 	isb	sy
 800e2b2:	f3bf 8f4f 	dsb	sy
 800e2b6:	b662      	cpsie	i
 800e2b8:	60fb      	str	r3, [r7, #12]
}
 800e2ba:	bf00      	nop
 800e2bc:	bf00      	nop
 800e2be:	e7fd      	b.n	800e2bc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d10d      	bne.n	800e2e4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800e2c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2cc:	b672      	cpsid	i
 800e2ce:	f383 8811 	msr	BASEPRI, r3
 800e2d2:	f3bf 8f6f 	isb	sy
 800e2d6:	f3bf 8f4f 	dsb	sy
 800e2da:	b662      	cpsie	i
 800e2dc:	60bb      	str	r3, [r7, #8]
}
 800e2de:	bf00      	nop
 800e2e0:	bf00      	nop
 800e2e2:	e7fd      	b.n	800e2e0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e2e8:	1e5a      	subs	r2, r3, #1
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2f2:	693b      	ldr	r3, [r7, #16]
 800e2f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d044      	beq.n	800e384 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d140      	bne.n	800e384 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	3304      	adds	r3, #4
 800e306:	4618      	mov	r0, r3
 800e308:	f7fd fff1 	bl	800c2ee <uxListRemove>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d115      	bne.n	800e33e <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e316:	491f      	ldr	r1, [pc, #124]	@ (800e394 <xTaskPriorityDisinherit+0x110>)
 800e318:	4613      	mov	r3, r2
 800e31a:	009b      	lsls	r3, r3, #2
 800e31c:	4413      	add	r3, r2
 800e31e:	009b      	lsls	r3, r3, #2
 800e320:	440b      	add	r3, r1
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d10a      	bne.n	800e33e <xTaskPriorityDisinherit+0xba>
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e32c:	2201      	movs	r2, #1
 800e32e:	fa02 f303 	lsl.w	r3, r2, r3
 800e332:	43da      	mvns	r2, r3
 800e334:	4b18      	ldr	r3, [pc, #96]	@ (800e398 <xTaskPriorityDisinherit+0x114>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4013      	ands	r3, r2
 800e33a:	4a17      	ldr	r2, [pc, #92]	@ (800e398 <xTaskPriorityDisinherit+0x114>)
 800e33c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e34a:	f1c3 0207 	rsb	r2, r3, #7
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e356:	2201      	movs	r2, #1
 800e358:	409a      	lsls	r2, r3
 800e35a:	4b0f      	ldr	r3, [pc, #60]	@ (800e398 <xTaskPriorityDisinherit+0x114>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4313      	orrs	r3, r2
 800e360:	4a0d      	ldr	r2, [pc, #52]	@ (800e398 <xTaskPriorityDisinherit+0x114>)
 800e362:	6013      	str	r3, [r2, #0]
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e368:	4613      	mov	r3, r2
 800e36a:	009b      	lsls	r3, r3, #2
 800e36c:	4413      	add	r3, r2
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	4a08      	ldr	r2, [pc, #32]	@ (800e394 <xTaskPriorityDisinherit+0x110>)
 800e372:	441a      	add	r2, r3
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	3304      	adds	r3, #4
 800e378:	4619      	mov	r1, r3
 800e37a:	4610      	mov	r0, r2
 800e37c:	f7fd ff5a 	bl	800c234 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e380:	2301      	movs	r3, #1
 800e382:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e384:	697b      	ldr	r3, [r7, #20]
	}
 800e386:	4618      	mov	r0, r3
 800e388:	3718      	adds	r7, #24
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	20005200 	.word	0x20005200
 800e394:	20005204 	.word	0x20005204
 800e398:	20005308 	.word	0x20005308

0800e39c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b088      	sub	sp, #32
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	f000 8089 	beq.w	800e4c8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e3b6:	69bb      	ldr	r3, [r7, #24]
 800e3b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d10d      	bne.n	800e3da <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800e3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3c2:	b672      	cpsid	i
 800e3c4:	f383 8811 	msr	BASEPRI, r3
 800e3c8:	f3bf 8f6f 	isb	sy
 800e3cc:	f3bf 8f4f 	dsb	sy
 800e3d0:	b662      	cpsie	i
 800e3d2:	60fb      	str	r3, [r7, #12]
}
 800e3d4:	bf00      	nop
 800e3d6:	bf00      	nop
 800e3d8:	e7fd      	b.n	800e3d6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e3da:	69bb      	ldr	r3, [r7, #24]
 800e3dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3de:	683a      	ldr	r2, [r7, #0]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d902      	bls.n	800e3ea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	61fb      	str	r3, [r7, #28]
 800e3e8:	e002      	b.n	800e3f0 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e3ea:	69bb      	ldr	r3, [r7, #24]
 800e3ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3ee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e3f0:	69bb      	ldr	r3, [r7, #24]
 800e3f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3f4:	69fa      	ldr	r2, [r7, #28]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d066      	beq.n	800e4c8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e3fa:	69bb      	ldr	r3, [r7, #24]
 800e3fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e3fe:	697a      	ldr	r2, [r7, #20]
 800e400:	429a      	cmp	r2, r3
 800e402:	d161      	bne.n	800e4c8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e404:	4b32      	ldr	r3, [pc, #200]	@ (800e4d0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	69ba      	ldr	r2, [r7, #24]
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d10d      	bne.n	800e42a <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800e40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e412:	b672      	cpsid	i
 800e414:	f383 8811 	msr	BASEPRI, r3
 800e418:	f3bf 8f6f 	isb	sy
 800e41c:	f3bf 8f4f 	dsb	sy
 800e420:	b662      	cpsie	i
 800e422:	60bb      	str	r3, [r7, #8]
}
 800e424:	bf00      	nop
 800e426:	bf00      	nop
 800e428:	e7fd      	b.n	800e426 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e42a:	69bb      	ldr	r3, [r7, #24]
 800e42c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e42e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e430:	69bb      	ldr	r3, [r7, #24]
 800e432:	69fa      	ldr	r2, [r7, #28]
 800e434:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e436:	69bb      	ldr	r3, [r7, #24]
 800e438:	699b      	ldr	r3, [r3, #24]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	db04      	blt.n	800e448 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e43e:	69fb      	ldr	r3, [r7, #28]
 800e440:	f1c3 0207 	rsb	r2, r3, #7
 800e444:	69bb      	ldr	r3, [r7, #24]
 800e446:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	6959      	ldr	r1, [r3, #20]
 800e44c:	693a      	ldr	r2, [r7, #16]
 800e44e:	4613      	mov	r3, r2
 800e450:	009b      	lsls	r3, r3, #2
 800e452:	4413      	add	r3, r2
 800e454:	009b      	lsls	r3, r3, #2
 800e456:	4a1f      	ldr	r2, [pc, #124]	@ (800e4d4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e458:	4413      	add	r3, r2
 800e45a:	4299      	cmp	r1, r3
 800e45c:	d134      	bne.n	800e4c8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e45e:	69bb      	ldr	r3, [r7, #24]
 800e460:	3304      	adds	r3, #4
 800e462:	4618      	mov	r0, r3
 800e464:	f7fd ff43 	bl	800c2ee <uxListRemove>
 800e468:	4603      	mov	r3, r0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d115      	bne.n	800e49a <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e46e:	69bb      	ldr	r3, [r7, #24]
 800e470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e472:	4918      	ldr	r1, [pc, #96]	@ (800e4d4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e474:	4613      	mov	r3, r2
 800e476:	009b      	lsls	r3, r3, #2
 800e478:	4413      	add	r3, r2
 800e47a:	009b      	lsls	r3, r3, #2
 800e47c:	440b      	add	r3, r1
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d10a      	bne.n	800e49a <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800e484:	69bb      	ldr	r3, [r7, #24]
 800e486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e488:	2201      	movs	r2, #1
 800e48a:	fa02 f303 	lsl.w	r3, r2, r3
 800e48e:	43da      	mvns	r2, r3
 800e490:	4b11      	ldr	r3, [pc, #68]	@ (800e4d8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	4013      	ands	r3, r2
 800e496:	4a10      	ldr	r2, [pc, #64]	@ (800e4d8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800e498:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e49a:	69bb      	ldr	r3, [r7, #24]
 800e49c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e49e:	2201      	movs	r2, #1
 800e4a0:	409a      	lsls	r2, r3
 800e4a2:	4b0d      	ldr	r3, [pc, #52]	@ (800e4d8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	4313      	orrs	r3, r2
 800e4a8:	4a0b      	ldr	r2, [pc, #44]	@ (800e4d8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800e4aa:	6013      	str	r3, [r2, #0]
 800e4ac:	69bb      	ldr	r3, [r7, #24]
 800e4ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4b0:	4613      	mov	r3, r2
 800e4b2:	009b      	lsls	r3, r3, #2
 800e4b4:	4413      	add	r3, r2
 800e4b6:	009b      	lsls	r3, r3, #2
 800e4b8:	4a06      	ldr	r2, [pc, #24]	@ (800e4d4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e4ba:	441a      	add	r2, r3
 800e4bc:	69bb      	ldr	r3, [r7, #24]
 800e4be:	3304      	adds	r3, #4
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	4610      	mov	r0, r2
 800e4c4:	f7fd feb6 	bl	800c234 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e4c8:	bf00      	nop
 800e4ca:	3720      	adds	r7, #32
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}
 800e4d0:	20005200 	.word	0x20005200
 800e4d4:	20005204 	.word	0x20005204
 800e4d8:	20005308 	.word	0x20005308

0800e4dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e4dc:	b480      	push	{r7}
 800e4de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e4e0:	4b07      	ldr	r3, [pc, #28]	@ (800e500 <pvTaskIncrementMutexHeldCount+0x24>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d004      	beq.n	800e4f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e4e8:	4b05      	ldr	r3, [pc, #20]	@ (800e500 <pvTaskIncrementMutexHeldCount+0x24>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e4ee:	3201      	adds	r2, #1
 800e4f0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800e4f2:	4b03      	ldr	r3, [pc, #12]	@ (800e500 <pvTaskIncrementMutexHeldCount+0x24>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
	}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr
 800e500:	20005200 	.word	0x20005200

0800e504 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e50e:	4b29      	ldr	r3, [pc, #164]	@ (800e5b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e514:	4b28      	ldr	r3, [pc, #160]	@ (800e5b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	3304      	adds	r3, #4
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7fd fee7 	bl	800c2ee <uxListRemove>
 800e520:	4603      	mov	r3, r0
 800e522:	2b00      	cmp	r3, #0
 800e524:	d10b      	bne.n	800e53e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e526:	4b24      	ldr	r3, [pc, #144]	@ (800e5b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e52c:	2201      	movs	r2, #1
 800e52e:	fa02 f303 	lsl.w	r3, r2, r3
 800e532:	43da      	mvns	r2, r3
 800e534:	4b21      	ldr	r3, [pc, #132]	@ (800e5bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4013      	ands	r3, r2
 800e53a:	4a20      	ldr	r2, [pc, #128]	@ (800e5bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800e53c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e544:	d10a      	bne.n	800e55c <prvAddCurrentTaskToDelayedList+0x58>
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d007      	beq.n	800e55c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e54c:	4b1a      	ldr	r3, [pc, #104]	@ (800e5b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	3304      	adds	r3, #4
 800e552:	4619      	mov	r1, r3
 800e554:	481a      	ldr	r0, [pc, #104]	@ (800e5c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e556:	f7fd fe6d 	bl	800c234 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e55a:	e026      	b.n	800e5aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e55c:	68fa      	ldr	r2, [r7, #12]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	4413      	add	r3, r2
 800e562:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e564:	4b14      	ldr	r3, [pc, #80]	@ (800e5b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	68ba      	ldr	r2, [r7, #8]
 800e56a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e56c:	68ba      	ldr	r2, [r7, #8]
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	429a      	cmp	r2, r3
 800e572:	d209      	bcs.n	800e588 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e574:	4b13      	ldr	r3, [pc, #76]	@ (800e5c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e576:	681a      	ldr	r2, [r3, #0]
 800e578:	4b0f      	ldr	r3, [pc, #60]	@ (800e5b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	3304      	adds	r3, #4
 800e57e:	4619      	mov	r1, r3
 800e580:	4610      	mov	r0, r2
 800e582:	f7fd fe7b 	bl	800c27c <vListInsert>
}
 800e586:	e010      	b.n	800e5aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e588:	4b0f      	ldr	r3, [pc, #60]	@ (800e5c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e58a:	681a      	ldr	r2, [r3, #0]
 800e58c:	4b0a      	ldr	r3, [pc, #40]	@ (800e5b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	3304      	adds	r3, #4
 800e592:	4619      	mov	r1, r3
 800e594:	4610      	mov	r0, r2
 800e596:	f7fd fe71 	bl	800c27c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e59a:	4b0c      	ldr	r3, [pc, #48]	@ (800e5cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	68ba      	ldr	r2, [r7, #8]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d202      	bcs.n	800e5aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e5a4:	4a09      	ldr	r2, [pc, #36]	@ (800e5cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	6013      	str	r3, [r2, #0]
}
 800e5aa:	bf00      	nop
 800e5ac:	3710      	adds	r7, #16
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}
 800e5b2:	bf00      	nop
 800e5b4:	20005304 	.word	0x20005304
 800e5b8:	20005200 	.word	0x20005200
 800e5bc:	20005308 	.word	0x20005308
 800e5c0:	200052ec 	.word	0x200052ec
 800e5c4:	200052bc 	.word	0x200052bc
 800e5c8:	200052b8 	.word	0x200052b8
 800e5cc:	20005320 	.word	0x20005320

0800e5d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	b085      	sub	sp, #20
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	60f8      	str	r0, [r7, #12]
 800e5d8:	60b9      	str	r1, [r7, #8]
 800e5da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	3b04      	subs	r3, #4
 800e5e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e5e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	3b04      	subs	r3, #4
 800e5ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	f023 0201 	bic.w	r2, r3, #1
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	3b04      	subs	r3, #4
 800e5fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e600:	4a0c      	ldr	r2, [pc, #48]	@ (800e634 <pxPortInitialiseStack+0x64>)
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	3b14      	subs	r3, #20
 800e60a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	3b04      	subs	r3, #4
 800e616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f06f 0202 	mvn.w	r2, #2
 800e61e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	3b20      	subs	r3, #32
 800e624:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e626:	68fb      	ldr	r3, [r7, #12]
}
 800e628:	4618      	mov	r0, r3
 800e62a:	3714      	adds	r7, #20
 800e62c:	46bd      	mov	sp, r7
 800e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e632:	4770      	bx	lr
 800e634:	0800e639 	.word	0x0800e639

0800e638 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e638:	b480      	push	{r7}
 800e63a:	b085      	sub	sp, #20
 800e63c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e63e:	2300      	movs	r3, #0
 800e640:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e642:	4b15      	ldr	r3, [pc, #84]	@ (800e698 <prvTaskExitError+0x60>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e64a:	d00d      	beq.n	800e668 <prvTaskExitError+0x30>
	__asm volatile
 800e64c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e650:	b672      	cpsid	i
 800e652:	f383 8811 	msr	BASEPRI, r3
 800e656:	f3bf 8f6f 	isb	sy
 800e65a:	f3bf 8f4f 	dsb	sy
 800e65e:	b662      	cpsie	i
 800e660:	60fb      	str	r3, [r7, #12]
}
 800e662:	bf00      	nop
 800e664:	bf00      	nop
 800e666:	e7fd      	b.n	800e664 <prvTaskExitError+0x2c>
	__asm volatile
 800e668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e66c:	b672      	cpsid	i
 800e66e:	f383 8811 	msr	BASEPRI, r3
 800e672:	f3bf 8f6f 	isb	sy
 800e676:	f3bf 8f4f 	dsb	sy
 800e67a:	b662      	cpsie	i
 800e67c:	60bb      	str	r3, [r7, #8]
}
 800e67e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e680:	bf00      	nop
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d0fc      	beq.n	800e682 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e688:	bf00      	nop
 800e68a:	bf00      	nop
 800e68c:	3714      	adds	r7, #20
 800e68e:	46bd      	mov	sp, r7
 800e690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e694:	4770      	bx	lr
 800e696:	bf00      	nop
 800e698:	200000ac 	.word	0x200000ac
 800e69c:	00000000 	.word	0x00000000

0800e6a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e6a0:	4b07      	ldr	r3, [pc, #28]	@ (800e6c0 <pxCurrentTCBConst2>)
 800e6a2:	6819      	ldr	r1, [r3, #0]
 800e6a4:	6808      	ldr	r0, [r1, #0]
 800e6a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6aa:	f380 8809 	msr	PSP, r0
 800e6ae:	f3bf 8f6f 	isb	sy
 800e6b2:	f04f 0000 	mov.w	r0, #0
 800e6b6:	f380 8811 	msr	BASEPRI, r0
 800e6ba:	4770      	bx	lr
 800e6bc:	f3af 8000 	nop.w

0800e6c0 <pxCurrentTCBConst2>:
 800e6c0:	20005200 	.word	0x20005200
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e6c4:	bf00      	nop
 800e6c6:	bf00      	nop

0800e6c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e6c8:	4808      	ldr	r0, [pc, #32]	@ (800e6ec <prvPortStartFirstTask+0x24>)
 800e6ca:	6800      	ldr	r0, [r0, #0]
 800e6cc:	6800      	ldr	r0, [r0, #0]
 800e6ce:	f380 8808 	msr	MSP, r0
 800e6d2:	f04f 0000 	mov.w	r0, #0
 800e6d6:	f380 8814 	msr	CONTROL, r0
 800e6da:	b662      	cpsie	i
 800e6dc:	b661      	cpsie	f
 800e6de:	f3bf 8f4f 	dsb	sy
 800e6e2:	f3bf 8f6f 	isb	sy
 800e6e6:	df00      	svc	0
 800e6e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e6ea:	bf00      	nop
 800e6ec:	e000ed08 	.word	0xe000ed08

0800e6f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e6f6:	4b37      	ldr	r3, [pc, #220]	@ (800e7d4 <xPortStartScheduler+0xe4>)
 800e6f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	781b      	ldrb	r3, [r3, #0]
 800e6fe:	b2db      	uxtb	r3, r3
 800e700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	22ff      	movs	r2, #255	@ 0xff
 800e706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e710:	78fb      	ldrb	r3, [r7, #3]
 800e712:	b2db      	uxtb	r3, r3
 800e714:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e718:	b2da      	uxtb	r2, r3
 800e71a:	4b2f      	ldr	r3, [pc, #188]	@ (800e7d8 <xPortStartScheduler+0xe8>)
 800e71c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e71e:	4b2f      	ldr	r3, [pc, #188]	@ (800e7dc <xPortStartScheduler+0xec>)
 800e720:	2207      	movs	r2, #7
 800e722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e724:	e009      	b.n	800e73a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e726:	4b2d      	ldr	r3, [pc, #180]	@ (800e7dc <xPortStartScheduler+0xec>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	3b01      	subs	r3, #1
 800e72c:	4a2b      	ldr	r2, [pc, #172]	@ (800e7dc <xPortStartScheduler+0xec>)
 800e72e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e730:	78fb      	ldrb	r3, [r7, #3]
 800e732:	b2db      	uxtb	r3, r3
 800e734:	005b      	lsls	r3, r3, #1
 800e736:	b2db      	uxtb	r3, r3
 800e738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e73a:	78fb      	ldrb	r3, [r7, #3]
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e742:	2b80      	cmp	r3, #128	@ 0x80
 800e744:	d0ef      	beq.n	800e726 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e746:	4b25      	ldr	r3, [pc, #148]	@ (800e7dc <xPortStartScheduler+0xec>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f1c3 0307 	rsb	r3, r3, #7
 800e74e:	2b04      	cmp	r3, #4
 800e750:	d00d      	beq.n	800e76e <xPortStartScheduler+0x7e>
	__asm volatile
 800e752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e756:	b672      	cpsid	i
 800e758:	f383 8811 	msr	BASEPRI, r3
 800e75c:	f3bf 8f6f 	isb	sy
 800e760:	f3bf 8f4f 	dsb	sy
 800e764:	b662      	cpsie	i
 800e766:	60bb      	str	r3, [r7, #8]
}
 800e768:	bf00      	nop
 800e76a:	bf00      	nop
 800e76c:	e7fd      	b.n	800e76a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e76e:	4b1b      	ldr	r3, [pc, #108]	@ (800e7dc <xPortStartScheduler+0xec>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	021b      	lsls	r3, r3, #8
 800e774:	4a19      	ldr	r2, [pc, #100]	@ (800e7dc <xPortStartScheduler+0xec>)
 800e776:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e778:	4b18      	ldr	r3, [pc, #96]	@ (800e7dc <xPortStartScheduler+0xec>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e780:	4a16      	ldr	r2, [pc, #88]	@ (800e7dc <xPortStartScheduler+0xec>)
 800e782:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	b2da      	uxtb	r2, r3
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e78c:	4b14      	ldr	r3, [pc, #80]	@ (800e7e0 <xPortStartScheduler+0xf0>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4a13      	ldr	r2, [pc, #76]	@ (800e7e0 <xPortStartScheduler+0xf0>)
 800e792:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e796:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e798:	4b11      	ldr	r3, [pc, #68]	@ (800e7e0 <xPortStartScheduler+0xf0>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4a10      	ldr	r2, [pc, #64]	@ (800e7e0 <xPortStartScheduler+0xf0>)
 800e79e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e7a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e7a4:	f000 f8dc 	bl	800e960 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e7a8:	4b0e      	ldr	r3, [pc, #56]	@ (800e7e4 <xPortStartScheduler+0xf4>)
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e7ae:	f000 f8fb 	bl	800e9a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e7b2:	4b0d      	ldr	r3, [pc, #52]	@ (800e7e8 <xPortStartScheduler+0xf8>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	4a0c      	ldr	r2, [pc, #48]	@ (800e7e8 <xPortStartScheduler+0xf8>)
 800e7b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e7bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e7be:	f7ff ff83 	bl	800e6c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e7c2:	f7ff fa65 	bl	800dc90 <vTaskSwitchContext>
	prvTaskExitError();
 800e7c6:	f7ff ff37 	bl	800e638 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e7ca:	2300      	movs	r3, #0
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3710      	adds	r7, #16
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	e000e400 	.word	0xe000e400
 800e7d8:	2000532c 	.word	0x2000532c
 800e7dc:	20005330 	.word	0x20005330
 800e7e0:	e000ed20 	.word	0xe000ed20
 800e7e4:	200000ac 	.word	0x200000ac
 800e7e8:	e000ef34 	.word	0xe000ef34

0800e7ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b083      	sub	sp, #12
 800e7f0:	af00      	add	r7, sp, #0
	__asm volatile
 800e7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7f6:	b672      	cpsid	i
 800e7f8:	f383 8811 	msr	BASEPRI, r3
 800e7fc:	f3bf 8f6f 	isb	sy
 800e800:	f3bf 8f4f 	dsb	sy
 800e804:	b662      	cpsie	i
 800e806:	607b      	str	r3, [r7, #4]
}
 800e808:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e80a:	4b11      	ldr	r3, [pc, #68]	@ (800e850 <vPortEnterCritical+0x64>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	3301      	adds	r3, #1
 800e810:	4a0f      	ldr	r2, [pc, #60]	@ (800e850 <vPortEnterCritical+0x64>)
 800e812:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e814:	4b0e      	ldr	r3, [pc, #56]	@ (800e850 <vPortEnterCritical+0x64>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	2b01      	cmp	r3, #1
 800e81a:	d112      	bne.n	800e842 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e81c:	4b0d      	ldr	r3, [pc, #52]	@ (800e854 <vPortEnterCritical+0x68>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	b2db      	uxtb	r3, r3
 800e822:	2b00      	cmp	r3, #0
 800e824:	d00d      	beq.n	800e842 <vPortEnterCritical+0x56>
	__asm volatile
 800e826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e82a:	b672      	cpsid	i
 800e82c:	f383 8811 	msr	BASEPRI, r3
 800e830:	f3bf 8f6f 	isb	sy
 800e834:	f3bf 8f4f 	dsb	sy
 800e838:	b662      	cpsie	i
 800e83a:	603b      	str	r3, [r7, #0]
}
 800e83c:	bf00      	nop
 800e83e:	bf00      	nop
 800e840:	e7fd      	b.n	800e83e <vPortEnterCritical+0x52>
	}
}
 800e842:	bf00      	nop
 800e844:	370c      	adds	r7, #12
 800e846:	46bd      	mov	sp, r7
 800e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84c:	4770      	bx	lr
 800e84e:	bf00      	nop
 800e850:	200000ac 	.word	0x200000ac
 800e854:	e000ed04 	.word	0xe000ed04

0800e858 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e858:	b480      	push	{r7}
 800e85a:	b083      	sub	sp, #12
 800e85c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e85e:	4b13      	ldr	r3, [pc, #76]	@ (800e8ac <vPortExitCritical+0x54>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d10d      	bne.n	800e882 <vPortExitCritical+0x2a>
	__asm volatile
 800e866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e86a:	b672      	cpsid	i
 800e86c:	f383 8811 	msr	BASEPRI, r3
 800e870:	f3bf 8f6f 	isb	sy
 800e874:	f3bf 8f4f 	dsb	sy
 800e878:	b662      	cpsie	i
 800e87a:	607b      	str	r3, [r7, #4]
}
 800e87c:	bf00      	nop
 800e87e:	bf00      	nop
 800e880:	e7fd      	b.n	800e87e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800e882:	4b0a      	ldr	r3, [pc, #40]	@ (800e8ac <vPortExitCritical+0x54>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	3b01      	subs	r3, #1
 800e888:	4a08      	ldr	r2, [pc, #32]	@ (800e8ac <vPortExitCritical+0x54>)
 800e88a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e88c:	4b07      	ldr	r3, [pc, #28]	@ (800e8ac <vPortExitCritical+0x54>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d105      	bne.n	800e8a0 <vPortExitCritical+0x48>
 800e894:	2300      	movs	r3, #0
 800e896:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	f383 8811 	msr	BASEPRI, r3
}
 800e89e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e8a0:	bf00      	nop
 800e8a2:	370c      	adds	r7, #12
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr
 800e8ac:	200000ac 	.word	0x200000ac

0800e8b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e8b0:	f3ef 8009 	mrs	r0, PSP
 800e8b4:	f3bf 8f6f 	isb	sy
 800e8b8:	4b15      	ldr	r3, [pc, #84]	@ (800e910 <pxCurrentTCBConst>)
 800e8ba:	681a      	ldr	r2, [r3, #0]
 800e8bc:	f01e 0f10 	tst.w	lr, #16
 800e8c0:	bf08      	it	eq
 800e8c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e8c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ca:	6010      	str	r0, [r2, #0]
 800e8cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e8d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e8d4:	b672      	cpsid	i
 800e8d6:	f380 8811 	msr	BASEPRI, r0
 800e8da:	f3bf 8f4f 	dsb	sy
 800e8de:	f3bf 8f6f 	isb	sy
 800e8e2:	b662      	cpsie	i
 800e8e4:	f7ff f9d4 	bl	800dc90 <vTaskSwitchContext>
 800e8e8:	f04f 0000 	mov.w	r0, #0
 800e8ec:	f380 8811 	msr	BASEPRI, r0
 800e8f0:	bc09      	pop	{r0, r3}
 800e8f2:	6819      	ldr	r1, [r3, #0]
 800e8f4:	6808      	ldr	r0, [r1, #0]
 800e8f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8fa:	f01e 0f10 	tst.w	lr, #16
 800e8fe:	bf08      	it	eq
 800e900:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e904:	f380 8809 	msr	PSP, r0
 800e908:	f3bf 8f6f 	isb	sy
 800e90c:	4770      	bx	lr
 800e90e:	bf00      	nop

0800e910 <pxCurrentTCBConst>:
 800e910:	20005200 	.word	0x20005200
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e914:	bf00      	nop
 800e916:	bf00      	nop

0800e918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b082      	sub	sp, #8
 800e91c:	af00      	add	r7, sp, #0
	__asm volatile
 800e91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e922:	b672      	cpsid	i
 800e924:	f383 8811 	msr	BASEPRI, r3
 800e928:	f3bf 8f6f 	isb	sy
 800e92c:	f3bf 8f4f 	dsb	sy
 800e930:	b662      	cpsie	i
 800e932:	607b      	str	r3, [r7, #4]
}
 800e934:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e936:	f7ff f8ef 	bl	800db18 <xTaskIncrementTick>
 800e93a:	4603      	mov	r3, r0
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d003      	beq.n	800e948 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e940:	4b06      	ldr	r3, [pc, #24]	@ (800e95c <SysTick_Handler+0x44>)
 800e942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e946:	601a      	str	r2, [r3, #0]
 800e948:	2300      	movs	r3, #0
 800e94a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	f383 8811 	msr	BASEPRI, r3
}
 800e952:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e954:	bf00      	nop
 800e956:	3708      	adds	r7, #8
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	e000ed04 	.word	0xe000ed04

0800e960 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e960:	b480      	push	{r7}
 800e962:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e964:	4b0b      	ldr	r3, [pc, #44]	@ (800e994 <vPortSetupTimerInterrupt+0x34>)
 800e966:	2200      	movs	r2, #0
 800e968:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e96a:	4b0b      	ldr	r3, [pc, #44]	@ (800e998 <vPortSetupTimerInterrupt+0x38>)
 800e96c:	2200      	movs	r2, #0
 800e96e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e970:	4b0a      	ldr	r3, [pc, #40]	@ (800e99c <vPortSetupTimerInterrupt+0x3c>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	4a0a      	ldr	r2, [pc, #40]	@ (800e9a0 <vPortSetupTimerInterrupt+0x40>)
 800e976:	fba2 2303 	umull	r2, r3, r2, r3
 800e97a:	099b      	lsrs	r3, r3, #6
 800e97c:	4a09      	ldr	r2, [pc, #36]	@ (800e9a4 <vPortSetupTimerInterrupt+0x44>)
 800e97e:	3b01      	subs	r3, #1
 800e980:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e982:	4b04      	ldr	r3, [pc, #16]	@ (800e994 <vPortSetupTimerInterrupt+0x34>)
 800e984:	2207      	movs	r2, #7
 800e986:	601a      	str	r2, [r3, #0]
}
 800e988:	bf00      	nop
 800e98a:	46bd      	mov	sp, r7
 800e98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e990:	4770      	bx	lr
 800e992:	bf00      	nop
 800e994:	e000e010 	.word	0xe000e010
 800e998:	e000e018 	.word	0xe000e018
 800e99c:	20000000 	.word	0x20000000
 800e9a0:	10624dd3 	.word	0x10624dd3
 800e9a4:	e000e014 	.word	0xe000e014

0800e9a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e9a8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e9b8 <vPortEnableVFP+0x10>
 800e9ac:	6801      	ldr	r1, [r0, #0]
 800e9ae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e9b2:	6001      	str	r1, [r0, #0]
 800e9b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e9b6:	bf00      	nop
 800e9b8:	e000ed88 	.word	0xe000ed88

0800e9bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e9bc:	b480      	push	{r7}
 800e9be:	b085      	sub	sp, #20
 800e9c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e9c2:	f3ef 8305 	mrs	r3, IPSR
 800e9c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2b0f      	cmp	r3, #15
 800e9cc:	d917      	bls.n	800e9fe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e9ce:	4a1a      	ldr	r2, [pc, #104]	@ (800ea38 <vPortValidateInterruptPriority+0x7c>)
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e9d8:	4b18      	ldr	r3, [pc, #96]	@ (800ea3c <vPortValidateInterruptPriority+0x80>)
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	7afa      	ldrb	r2, [r7, #11]
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d20d      	bcs.n	800e9fe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800e9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9e6:	b672      	cpsid	i
 800e9e8:	f383 8811 	msr	BASEPRI, r3
 800e9ec:	f3bf 8f6f 	isb	sy
 800e9f0:	f3bf 8f4f 	dsb	sy
 800e9f4:	b662      	cpsie	i
 800e9f6:	607b      	str	r3, [r7, #4]
}
 800e9f8:	bf00      	nop
 800e9fa:	bf00      	nop
 800e9fc:	e7fd      	b.n	800e9fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e9fe:	4b10      	ldr	r3, [pc, #64]	@ (800ea40 <vPortValidateInterruptPriority+0x84>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ea06:	4b0f      	ldr	r3, [pc, #60]	@ (800ea44 <vPortValidateInterruptPriority+0x88>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d90d      	bls.n	800ea2a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800ea0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea12:	b672      	cpsid	i
 800ea14:	f383 8811 	msr	BASEPRI, r3
 800ea18:	f3bf 8f6f 	isb	sy
 800ea1c:	f3bf 8f4f 	dsb	sy
 800ea20:	b662      	cpsie	i
 800ea22:	603b      	str	r3, [r7, #0]
}
 800ea24:	bf00      	nop
 800ea26:	bf00      	nop
 800ea28:	e7fd      	b.n	800ea26 <vPortValidateInterruptPriority+0x6a>
	}
 800ea2a:	bf00      	nop
 800ea2c:	3714      	adds	r7, #20
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr
 800ea36:	bf00      	nop
 800ea38:	e000e3f0 	.word	0xe000e3f0
 800ea3c:	2000532c 	.word	0x2000532c
 800ea40:	e000ed0c 	.word	0xe000ed0c
 800ea44:	20005330 	.word	0x20005330

0800ea48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b08a      	sub	sp, #40	@ 0x28
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ea50:	2300      	movs	r3, #0
 800ea52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ea54:	f7fe ff90 	bl	800d978 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ea58:	4b5d      	ldr	r3, [pc, #372]	@ (800ebd0 <pvPortMalloc+0x188>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d101      	bne.n	800ea64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ea60:	f000 f920 	bl	800eca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ea64:	4b5b      	ldr	r3, [pc, #364]	@ (800ebd4 <pvPortMalloc+0x18c>)
 800ea66:	681a      	ldr	r2, [r3, #0]
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	4013      	ands	r3, r2
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	f040 8094 	bne.w	800eb9a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d020      	beq.n	800eaba <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800ea78:	2208      	movs	r2, #8
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	4413      	add	r3, r2
 800ea7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f003 0307 	and.w	r3, r3, #7
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d017      	beq.n	800eaba <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f023 0307 	bic.w	r3, r3, #7
 800ea90:	3308      	adds	r3, #8
 800ea92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f003 0307 	and.w	r3, r3, #7
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d00d      	beq.n	800eaba <pvPortMalloc+0x72>
	__asm volatile
 800ea9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaa2:	b672      	cpsid	i
 800eaa4:	f383 8811 	msr	BASEPRI, r3
 800eaa8:	f3bf 8f6f 	isb	sy
 800eaac:	f3bf 8f4f 	dsb	sy
 800eab0:	b662      	cpsie	i
 800eab2:	617b      	str	r3, [r7, #20]
}
 800eab4:	bf00      	nop
 800eab6:	bf00      	nop
 800eab8:	e7fd      	b.n	800eab6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d06c      	beq.n	800eb9a <pvPortMalloc+0x152>
 800eac0:	4b45      	ldr	r3, [pc, #276]	@ (800ebd8 <pvPortMalloc+0x190>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	687a      	ldr	r2, [r7, #4]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d867      	bhi.n	800eb9a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eaca:	4b44      	ldr	r3, [pc, #272]	@ (800ebdc <pvPortMalloc+0x194>)
 800eacc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eace:	4b43      	ldr	r3, [pc, #268]	@ (800ebdc <pvPortMalloc+0x194>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ead4:	e004      	b.n	800eae0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800ead6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ead8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	687a      	ldr	r2, [r7, #4]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d903      	bls.n	800eaf2 <pvPortMalloc+0xaa>
 800eaea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d1f1      	bne.n	800ead6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eaf2:	4b37      	ldr	r3, [pc, #220]	@ (800ebd0 <pvPortMalloc+0x188>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d04e      	beq.n	800eb9a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eafc:	6a3b      	ldr	r3, [r7, #32]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	2208      	movs	r2, #8
 800eb02:	4413      	add	r3, r2
 800eb04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb08:	681a      	ldr	r2, [r3, #0]
 800eb0a:	6a3b      	ldr	r3, [r7, #32]
 800eb0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb10:	685a      	ldr	r2, [r3, #4]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	1ad2      	subs	r2, r2, r3
 800eb16:	2308      	movs	r3, #8
 800eb18:	005b      	lsls	r3, r3, #1
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d922      	bls.n	800eb64 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eb1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	4413      	add	r3, r2
 800eb24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb26:	69bb      	ldr	r3, [r7, #24]
 800eb28:	f003 0307 	and.w	r3, r3, #7
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d00d      	beq.n	800eb4c <pvPortMalloc+0x104>
	__asm volatile
 800eb30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb34:	b672      	cpsid	i
 800eb36:	f383 8811 	msr	BASEPRI, r3
 800eb3a:	f3bf 8f6f 	isb	sy
 800eb3e:	f3bf 8f4f 	dsb	sy
 800eb42:	b662      	cpsie	i
 800eb44:	613b      	str	r3, [r7, #16]
}
 800eb46:	bf00      	nop
 800eb48:	bf00      	nop
 800eb4a:	e7fd      	b.n	800eb48 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb4e:	685a      	ldr	r2, [r3, #4]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	1ad2      	subs	r2, r2, r3
 800eb54:	69bb      	ldr	r3, [r7, #24]
 800eb56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eb58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb5a:	687a      	ldr	r2, [r7, #4]
 800eb5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eb5e:	69b8      	ldr	r0, [r7, #24]
 800eb60:	f000 f902 	bl	800ed68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eb64:	4b1c      	ldr	r3, [pc, #112]	@ (800ebd8 <pvPortMalloc+0x190>)
 800eb66:	681a      	ldr	r2, [r3, #0]
 800eb68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	1ad3      	subs	r3, r2, r3
 800eb6e:	4a1a      	ldr	r2, [pc, #104]	@ (800ebd8 <pvPortMalloc+0x190>)
 800eb70:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eb72:	4b19      	ldr	r3, [pc, #100]	@ (800ebd8 <pvPortMalloc+0x190>)
 800eb74:	681a      	ldr	r2, [r3, #0]
 800eb76:	4b1a      	ldr	r3, [pc, #104]	@ (800ebe0 <pvPortMalloc+0x198>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d203      	bcs.n	800eb86 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eb7e:	4b16      	ldr	r3, [pc, #88]	@ (800ebd8 <pvPortMalloc+0x190>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	4a17      	ldr	r2, [pc, #92]	@ (800ebe0 <pvPortMalloc+0x198>)
 800eb84:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb88:	685a      	ldr	r2, [r3, #4]
 800eb8a:	4b12      	ldr	r3, [pc, #72]	@ (800ebd4 <pvPortMalloc+0x18c>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	431a      	orrs	r2, r3
 800eb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb92:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb96:	2200      	movs	r2, #0
 800eb98:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eb9a:	f7fe fefb 	bl	800d994 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb9e:	69fb      	ldr	r3, [r7, #28]
 800eba0:	f003 0307 	and.w	r3, r3, #7
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d00d      	beq.n	800ebc4 <pvPortMalloc+0x17c>
	__asm volatile
 800eba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebac:	b672      	cpsid	i
 800ebae:	f383 8811 	msr	BASEPRI, r3
 800ebb2:	f3bf 8f6f 	isb	sy
 800ebb6:	f3bf 8f4f 	dsb	sy
 800ebba:	b662      	cpsie	i
 800ebbc:	60fb      	str	r3, [r7, #12]
}
 800ebbe:	bf00      	nop
 800ebc0:	bf00      	nop
 800ebc2:	e7fd      	b.n	800ebc0 <pvPortMalloc+0x178>
	return pvReturn;
 800ebc4:	69fb      	ldr	r3, [r7, #28]
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3728      	adds	r7, #40	@ 0x28
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	bf00      	nop
 800ebd0:	2000b33c 	.word	0x2000b33c
 800ebd4:	2000b348 	.word	0x2000b348
 800ebd8:	2000b340 	.word	0x2000b340
 800ebdc:	2000b334 	.word	0x2000b334
 800ebe0:	2000b344 	.word	0x2000b344

0800ebe4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b086      	sub	sp, #24
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d04e      	beq.n	800ec94 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ebf6:	2308      	movs	r3, #8
 800ebf8:	425b      	negs	r3, r3
 800ebfa:	697a      	ldr	r2, [r7, #20]
 800ebfc:	4413      	add	r3, r2
 800ebfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	685a      	ldr	r2, [r3, #4]
 800ec08:	4b24      	ldr	r3, [pc, #144]	@ (800ec9c <vPortFree+0xb8>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4013      	ands	r3, r2
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d10d      	bne.n	800ec2e <vPortFree+0x4a>
	__asm volatile
 800ec12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec16:	b672      	cpsid	i
 800ec18:	f383 8811 	msr	BASEPRI, r3
 800ec1c:	f3bf 8f6f 	isb	sy
 800ec20:	f3bf 8f4f 	dsb	sy
 800ec24:	b662      	cpsie	i
 800ec26:	60fb      	str	r3, [r7, #12]
}
 800ec28:	bf00      	nop
 800ec2a:	bf00      	nop
 800ec2c:	e7fd      	b.n	800ec2a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d00d      	beq.n	800ec52 <vPortFree+0x6e>
	__asm volatile
 800ec36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec3a:	b672      	cpsid	i
 800ec3c:	f383 8811 	msr	BASEPRI, r3
 800ec40:	f3bf 8f6f 	isb	sy
 800ec44:	f3bf 8f4f 	dsb	sy
 800ec48:	b662      	cpsie	i
 800ec4a:	60bb      	str	r3, [r7, #8]
}
 800ec4c:	bf00      	nop
 800ec4e:	bf00      	nop
 800ec50:	e7fd      	b.n	800ec4e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ec52:	693b      	ldr	r3, [r7, #16]
 800ec54:	685a      	ldr	r2, [r3, #4]
 800ec56:	4b11      	ldr	r3, [pc, #68]	@ (800ec9c <vPortFree+0xb8>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	4013      	ands	r3, r2
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d019      	beq.n	800ec94 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d115      	bne.n	800ec94 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	685a      	ldr	r2, [r3, #4]
 800ec6c:	4b0b      	ldr	r3, [pc, #44]	@ (800ec9c <vPortFree+0xb8>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	43db      	mvns	r3, r3
 800ec72:	401a      	ands	r2, r3
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ec78:	f7fe fe7e 	bl	800d978 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	685a      	ldr	r2, [r3, #4]
 800ec80:	4b07      	ldr	r3, [pc, #28]	@ (800eca0 <vPortFree+0xbc>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	4413      	add	r3, r2
 800ec86:	4a06      	ldr	r2, [pc, #24]	@ (800eca0 <vPortFree+0xbc>)
 800ec88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ec8a:	6938      	ldr	r0, [r7, #16]
 800ec8c:	f000 f86c 	bl	800ed68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ec90:	f7fe fe80 	bl	800d994 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ec94:	bf00      	nop
 800ec96:	3718      	adds	r7, #24
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}
 800ec9c:	2000b348 	.word	0x2000b348
 800eca0:	2000b340 	.word	0x2000b340

0800eca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eca4:	b480      	push	{r7}
 800eca6:	b085      	sub	sp, #20
 800eca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ecaa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800ecae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ecb0:	4b27      	ldr	r3, [pc, #156]	@ (800ed50 <prvHeapInit+0xac>)
 800ecb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f003 0307 	and.w	r3, r3, #7
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d00c      	beq.n	800ecd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	3307      	adds	r3, #7
 800ecc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	f023 0307 	bic.w	r3, r3, #7
 800ecca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eccc:	68ba      	ldr	r2, [r7, #8]
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	1ad3      	subs	r3, r2, r3
 800ecd2:	4a1f      	ldr	r2, [pc, #124]	@ (800ed50 <prvHeapInit+0xac>)
 800ecd4:	4413      	add	r3, r2
 800ecd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ecdc:	4a1d      	ldr	r2, [pc, #116]	@ (800ed54 <prvHeapInit+0xb0>)
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ece2:	4b1c      	ldr	r3, [pc, #112]	@ (800ed54 <prvHeapInit+0xb0>)
 800ece4:	2200      	movs	r2, #0
 800ece6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	68ba      	ldr	r2, [r7, #8]
 800ecec:	4413      	add	r3, r2
 800ecee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ecf0:	2208      	movs	r2, #8
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	1a9b      	subs	r3, r3, r2
 800ecf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	f023 0307 	bic.w	r3, r3, #7
 800ecfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	4a15      	ldr	r2, [pc, #84]	@ (800ed58 <prvHeapInit+0xb4>)
 800ed04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ed06:	4b14      	ldr	r3, [pc, #80]	@ (800ed58 <prvHeapInit+0xb4>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ed0e:	4b12      	ldr	r3, [pc, #72]	@ (800ed58 <prvHeapInit+0xb4>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	2200      	movs	r2, #0
 800ed14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	68fa      	ldr	r2, [r7, #12]
 800ed1e:	1ad2      	subs	r2, r2, r3
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ed24:	4b0c      	ldr	r3, [pc, #48]	@ (800ed58 <prvHeapInit+0xb4>)
 800ed26:	681a      	ldr	r2, [r3, #0]
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	4a0a      	ldr	r2, [pc, #40]	@ (800ed5c <prvHeapInit+0xb8>)
 800ed32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	4a09      	ldr	r2, [pc, #36]	@ (800ed60 <prvHeapInit+0xbc>)
 800ed3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ed3c:	4b09      	ldr	r3, [pc, #36]	@ (800ed64 <prvHeapInit+0xc0>)
 800ed3e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ed42:	601a      	str	r2, [r3, #0]
}
 800ed44:	bf00      	nop
 800ed46:	3714      	adds	r7, #20
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr
 800ed50:	20005334 	.word	0x20005334
 800ed54:	2000b334 	.word	0x2000b334
 800ed58:	2000b33c 	.word	0x2000b33c
 800ed5c:	2000b344 	.word	0x2000b344
 800ed60:	2000b340 	.word	0x2000b340
 800ed64:	2000b348 	.word	0x2000b348

0800ed68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ed68:	b480      	push	{r7}
 800ed6a:	b085      	sub	sp, #20
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ed70:	4b28      	ldr	r3, [pc, #160]	@ (800ee14 <prvInsertBlockIntoFreeList+0xac>)
 800ed72:	60fb      	str	r3, [r7, #12]
 800ed74:	e002      	b.n	800ed7c <prvInsertBlockIntoFreeList+0x14>
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	60fb      	str	r3, [r7, #12]
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d8f7      	bhi.n	800ed76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	68ba      	ldr	r2, [r7, #8]
 800ed90:	4413      	add	r3, r2
 800ed92:	687a      	ldr	r2, [r7, #4]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d108      	bne.n	800edaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	685a      	ldr	r2, [r3, #4]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	441a      	add	r2, r3
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	685b      	ldr	r3, [r3, #4]
 800edb2:	68ba      	ldr	r2, [r7, #8]
 800edb4:	441a      	add	r2, r3
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	429a      	cmp	r2, r3
 800edbc:	d118      	bne.n	800edf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	4b15      	ldr	r3, [pc, #84]	@ (800ee18 <prvInsertBlockIntoFreeList+0xb0>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d00d      	beq.n	800ede6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	685a      	ldr	r2, [r3, #4]
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	685b      	ldr	r3, [r3, #4]
 800edd4:	441a      	add	r2, r3
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	681a      	ldr	r2, [r3, #0]
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	601a      	str	r2, [r3, #0]
 800ede4:	e008      	b.n	800edf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ede6:	4b0c      	ldr	r3, [pc, #48]	@ (800ee18 <prvInsertBlockIntoFreeList+0xb0>)
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	601a      	str	r2, [r3, #0]
 800edee:	e003      	b.n	800edf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	681a      	ldr	r2, [r3, #0]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800edf8:	68fa      	ldr	r2, [r7, #12]
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d002      	beq.n	800ee06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	687a      	ldr	r2, [r7, #4]
 800ee04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee06:	bf00      	nop
 800ee08:	3714      	adds	r7, #20
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee10:	4770      	bx	lr
 800ee12:	bf00      	nop
 800ee14:	2000b334 	.word	0x2000b334
 800ee18:	2000b33c 	.word	0x2000b33c

0800ee1c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b084      	sub	sp, #16
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	330c      	adds	r3, #12
 800ee2c:	461a      	mov	r2, r3
 800ee2e:	6839      	ldr	r1, [r7, #0]
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f002 fa73 	bl	801131c <tcpip_send_msg_wait_sem>
 800ee36:	4603      	mov	r3, r0
 800ee38:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ee3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d103      	bne.n	800ee4a <netconn_apimsg+0x2e>
    return apimsg->err;
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ee48:	e001      	b.n	800ee4e <netconn_apimsg+0x32>
  }
  return err;
 800ee4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3710      	adds	r7, #16
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
	...

0800ee58 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b08c      	sub	sp, #48	@ 0x30
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	4603      	mov	r3, r0
 800ee60:	603a      	str	r2, [r7, #0]
 800ee62:	71fb      	strb	r3, [r7, #7]
 800ee64:	460b      	mov	r3, r1
 800ee66:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800ee68:	79fb      	ldrb	r3, [r7, #7]
 800ee6a:	6839      	ldr	r1, [r7, #0]
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f001 f923 	bl	80100b8 <netconn_alloc>
 800ee72:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800ee74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d054      	beq.n	800ef24 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800ee7a:	79bb      	ldrb	r3, [r7, #6]
 800ee7c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800ee7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee80:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800ee82:	f107 0308 	add.w	r3, r7, #8
 800ee86:	4619      	mov	r1, r3
 800ee88:	4829      	ldr	r0, [pc, #164]	@ (800ef30 <netconn_new_with_proto_and_callback+0xd8>)
 800ee8a:	f7ff ffc7 	bl	800ee1c <netconn_apimsg>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800ee94:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d043      	beq.n	800ef24 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800ee9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee9e:	685b      	ldr	r3, [r3, #4]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d005      	beq.n	800eeb0 <netconn_new_with_proto_and_callback+0x58>
 800eea4:	4b23      	ldr	r3, [pc, #140]	@ (800ef34 <netconn_new_with_proto_and_callback+0xdc>)
 800eea6:	22a3      	movs	r2, #163	@ 0xa3
 800eea8:	4923      	ldr	r1, [pc, #140]	@ (800ef38 <netconn_new_with_proto_and_callback+0xe0>)
 800eeaa:	4824      	ldr	r0, [pc, #144]	@ (800ef3c <netconn_new_with_proto_and_callback+0xe4>)
 800eeac:	f00e fa5e 	bl	801d36c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800eeb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeb2:	3310      	adds	r3, #16
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f00d f9cc 	bl	801c252 <sys_mbox_valid>
 800eeba:	4603      	mov	r3, r0
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d105      	bne.n	800eecc <netconn_new_with_proto_and_callback+0x74>
 800eec0:	4b1c      	ldr	r3, [pc, #112]	@ (800ef34 <netconn_new_with_proto_and_callback+0xdc>)
 800eec2:	22a4      	movs	r2, #164	@ 0xa4
 800eec4:	491e      	ldr	r1, [pc, #120]	@ (800ef40 <netconn_new_with_proto_and_callback+0xe8>)
 800eec6:	481d      	ldr	r0, [pc, #116]	@ (800ef3c <netconn_new_with_proto_and_callback+0xe4>)
 800eec8:	f00e fa50 	bl	801d36c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800eecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eece:	3314      	adds	r3, #20
 800eed0:	4618      	mov	r0, r3
 800eed2:	f00d f9be 	bl	801c252 <sys_mbox_valid>
 800eed6:	4603      	mov	r3, r0
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d005      	beq.n	800eee8 <netconn_new_with_proto_and_callback+0x90>
 800eedc:	4b15      	ldr	r3, [pc, #84]	@ (800ef34 <netconn_new_with_proto_and_callback+0xdc>)
 800eede:	22a6      	movs	r2, #166	@ 0xa6
 800eee0:	4918      	ldr	r1, [pc, #96]	@ (800ef44 <netconn_new_with_proto_and_callback+0xec>)
 800eee2:	4816      	ldr	r0, [pc, #88]	@ (800ef3c <netconn_new_with_proto_and_callback+0xe4>)
 800eee4:	f00e fa42 	bl	801d36c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800eee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeea:	330c      	adds	r3, #12
 800eeec:	4618      	mov	r0, r3
 800eeee:	f00d fa41 	bl	801c374 <sys_sem_valid>
 800eef2:	4603      	mov	r3, r0
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d105      	bne.n	800ef04 <netconn_new_with_proto_and_callback+0xac>
 800eef8:	4b0e      	ldr	r3, [pc, #56]	@ (800ef34 <netconn_new_with_proto_and_callback+0xdc>)
 800eefa:	22a9      	movs	r2, #169	@ 0xa9
 800eefc:	4912      	ldr	r1, [pc, #72]	@ (800ef48 <netconn_new_with_proto_and_callback+0xf0>)
 800eefe:	480f      	ldr	r0, [pc, #60]	@ (800ef3c <netconn_new_with_proto_and_callback+0xe4>)
 800ef00:	f00e fa34 	bl	801d36c <iprintf>
      sys_sem_free(&conn->op_completed);
 800ef04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef06:	330c      	adds	r3, #12
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f00d fa26 	bl	801c35a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800ef0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef10:	3310      	adds	r3, #16
 800ef12:	4618      	mov	r0, r3
 800ef14:	f00d f916 	bl	801c144 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800ef18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ef1a:	2007      	movs	r0, #7
 800ef1c:	f002 fff0 	bl	8011f00 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800ef20:	2300      	movs	r3, #0
 800ef22:	e000      	b.n	800ef26 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800ef24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3730      	adds	r7, #48	@ 0x30
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}
 800ef2e:	bf00      	nop
 800ef30:	0801008d 	.word	0x0801008d
 800ef34:	0801e6f0 	.word	0x0801e6f0
 800ef38:	0801e724 	.word	0x0801e724
 800ef3c:	0801e748 	.word	0x0801e748
 800ef40:	0801e770 	.word	0x0801e770
 800ef44:	0801e788 	.word	0x0801e788
 800ef48:	0801e7ac 	.word	0x0801e7ac

0800ef4c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b08c      	sub	sp, #48	@ 0x30
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d101      	bne.n	800ef5e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	e014      	b.n	800ef88 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ef62:	2329      	movs	r3, #41	@ 0x29
 800ef64:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800ef66:	f107 030c 	add.w	r3, r7, #12
 800ef6a:	4619      	mov	r1, r3
 800ef6c:	4808      	ldr	r0, [pc, #32]	@ (800ef90 <netconn_prepare_delete+0x44>)
 800ef6e:	f7ff ff55 	bl	800ee1c <netconn_apimsg>
 800ef72:	4603      	mov	r3, r0
 800ef74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800ef78:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d002      	beq.n	800ef86 <netconn_prepare_delete+0x3a>
    return err;
 800ef80:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800ef84:	e000      	b.n	800ef88 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800ef86:	2300      	movs	r3, #0
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3730      	adds	r7, #48	@ 0x30
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}
 800ef90:	080105f9 	.word	0x080105f9

0800ef94 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b084      	sub	sp, #16
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d101      	bne.n	800efa6 <netconn_delete+0x12>
    return ERR_OK;
 800efa2:	2300      	movs	r3, #0
 800efa4:	e00d      	b.n	800efc2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f7ff ffd0 	bl	800ef4c <netconn_prepare_delete>
 800efac:	4603      	mov	r3, r0
 800efae:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800efb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d102      	bne.n	800efbe <netconn_delete+0x2a>
    netconn_free(conn);
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f001 f8eb 	bl	8010194 <netconn_free>
  }
  return err;
 800efbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3710      	adds	r7, #16
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
	...

0800efcc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b08e      	sub	sp, #56	@ 0x38
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	60f8      	str	r0, [r7, #12]
 800efd4:	60b9      	str	r1, [r7, #8]
 800efd6:	4613      	mov	r3, r2
 800efd8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d109      	bne.n	800eff4 <netconn_bind+0x28>
 800efe0:	4b11      	ldr	r3, [pc, #68]	@ (800f028 <netconn_bind+0x5c>)
 800efe2:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800efe6:	4911      	ldr	r1, [pc, #68]	@ (800f02c <netconn_bind+0x60>)
 800efe8:	4811      	ldr	r0, [pc, #68]	@ (800f030 <netconn_bind+0x64>)
 800efea:	f00e f9bf 	bl	801d36c <iprintf>
 800efee:	f06f 030f 	mvn.w	r3, #15
 800eff2:	e015      	b.n	800f020 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d101      	bne.n	800effe <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800effa:	4b0e      	ldr	r3, [pc, #56]	@ (800f034 <netconn_bind+0x68>)
 800effc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800f006:	88fb      	ldrh	r3, [r7, #6]
 800f008:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800f00a:	f107 0314 	add.w	r3, r7, #20
 800f00e:	4619      	mov	r1, r3
 800f010:	4809      	ldr	r0, [pc, #36]	@ (800f038 <netconn_bind+0x6c>)
 800f012:	f7ff ff03 	bl	800ee1c <netconn_apimsg>
 800f016:	4603      	mov	r3, r0
 800f018:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800f01c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800f020:	4618      	mov	r0, r3
 800f022:	3738      	adds	r7, #56	@ 0x38
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}
 800f028:	0801e6f0 	.word	0x0801e6f0
 800f02c:	0801e828 	.word	0x0801e828
 800f030:	0801e748 	.word	0x0801e748
 800f034:	08032518 	.word	0x08032518
 800f038:	080107c1 	.word	0x080107c1

0800f03c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b08c      	sub	sp, #48	@ 0x30
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	460b      	mov	r3, r1
 800f046:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d109      	bne.n	800f062 <netconn_listen_with_backlog+0x26>
 800f04e:	4b0d      	ldr	r3, [pc, #52]	@ (800f084 <netconn_listen_with_backlog+0x48>)
 800f050:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800f054:	490c      	ldr	r1, [pc, #48]	@ (800f088 <netconn_listen_with_backlog+0x4c>)
 800f056:	480d      	ldr	r0, [pc, #52]	@ (800f08c <netconn_listen_with_backlog+0x50>)
 800f058:	f00e f988 	bl	801d36c <iprintf>
 800f05c:	f06f 030f 	mvn.w	r3, #15
 800f060:	e00c      	b.n	800f07c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800f066:	f107 030c 	add.w	r3, r7, #12
 800f06a:	4619      	mov	r1, r3
 800f06c:	4808      	ldr	r0, [pc, #32]	@ (800f090 <netconn_listen_with_backlog+0x54>)
 800f06e:	f7ff fed5 	bl	800ee1c <netconn_apimsg>
 800f072:	4603      	mov	r3, r0
 800f074:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800f078:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3730      	adds	r7, #48	@ 0x30
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}
 800f084:	0801e6f0 	.word	0x0801e6f0
 800f088:	0801e8a8 	.word	0x0801e8a8
 800f08c:	0801e748 	.word	0x0801e748
 800f090:	08010835 	.word	0x08010835

0800f094 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b086      	sub	sp, #24
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d109      	bne.n	800f0b8 <netconn_accept+0x24>
 800f0a4:	4b3d      	ldr	r3, [pc, #244]	@ (800f19c <netconn_accept+0x108>)
 800f0a6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800f0aa:	493d      	ldr	r1, [pc, #244]	@ (800f1a0 <netconn_accept+0x10c>)
 800f0ac:	483d      	ldr	r0, [pc, #244]	@ (800f1a4 <netconn_accept+0x110>)
 800f0ae:	f00e f95d 	bl	801d36c <iprintf>
 800f0b2:	f06f 030f 	mvn.w	r3, #15
 800f0b6:	e06c      	b.n	800f192 <netconn_accept+0xfe>
  *new_conn = NULL;
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d109      	bne.n	800f0d8 <netconn_accept+0x44>
 800f0c4:	4b35      	ldr	r3, [pc, #212]	@ (800f19c <netconn_accept+0x108>)
 800f0c6:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800f0ca:	4937      	ldr	r1, [pc, #220]	@ (800f1a8 <netconn_accept+0x114>)
 800f0cc:	4835      	ldr	r0, [pc, #212]	@ (800f1a4 <netconn_accept+0x110>)
 800f0ce:	f00e f94d 	bl	801d36c <iprintf>
 800f0d2:	f06f 030f 	mvn.w	r3, #15
 800f0d6:	e05c      	b.n	800f192 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f000 fb6c 	bl	800f7b6 <netconn_err>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800f0e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d002      	beq.n	800f0f0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800f0ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f0ee:	e050      	b.n	800f192 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	3314      	adds	r3, #20
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f00d f8ac 	bl	801c252 <sys_mbox_valid>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d005      	beq.n	800f10c <netconn_accept+0x78>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	7f1b      	ldrb	r3, [r3, #28]
 800f104:	f003 0301 	and.w	r3, r3, #1
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d002      	beq.n	800f112 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800f10c:	f06f 030e 	mvn.w	r3, #14
 800f110:	e03f      	b.n	800f192 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	7f1b      	ldrb	r3, [r3, #28]
 800f116:	f003 0302 	and.w	r3, r3, #2
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d00e      	beq.n	800f13c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	3314      	adds	r3, #20
 800f122:	f107 020c 	add.w	r2, r7, #12
 800f126:	4611      	mov	r1, r2
 800f128:	4618      	mov	r0, r3
 800f12a:	f00d f876 	bl	801c21a <sys_arch_mbox_tryfetch>
 800f12e:	4603      	mov	r3, r0
 800f130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f134:	d10a      	bne.n	800f14c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800f136:	f06f 0306 	mvn.w	r3, #6
 800f13a:	e02a      	b.n	800f192 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	3314      	adds	r3, #20
 800f140:	f107 010c 	add.w	r1, r7, #12
 800f144:	2200      	movs	r2, #0
 800f146:	4618      	mov	r0, r3
 800f148:	f00d f828 	bl	801c19c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f150:	2b00      	cmp	r3, #0
 800f152:	d005      	beq.n	800f160 <netconn_accept+0xcc>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f158:	2200      	movs	r2, #0
 800f15a:	2101      	movs	r1, #1
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f107 0213 	add.w	r2, r7, #19
 800f166:	4611      	mov	r1, r2
 800f168:	4618      	mov	r0, r3
 800f16a:	f000 fb75 	bl	800f858 <lwip_netconn_is_err_msg>
 800f16e:	4603      	mov	r3, r0
 800f170:	2b00      	cmp	r3, #0
 800f172:	d002      	beq.n	800f17a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800f174:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f178:	e00b      	b.n	800f192 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d102      	bne.n	800f186 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800f180:	f06f 030e 	mvn.w	r3, #14
 800f184:	e005      	b.n	800f192 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	697a      	ldr	r2, [r7, #20]
 800f18e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800f190:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800f192:	4618      	mov	r0, r3
 800f194:	3718      	adds	r7, #24
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	0801e6f0 	.word	0x0801e6f0
 800f1a0:	0801e8c8 	.word	0x0801e8c8
 800f1a4:	0801e748 	.word	0x0801e748
 800f1a8:	0801e8e8 	.word	0x0801e8e8

0800f1ac <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b088      	sub	sp, #32
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	4613      	mov	r3, r2
 800f1b8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d109      	bne.n	800f1d8 <netconn_recv_data+0x2c>
 800f1c4:	4b58      	ldr	r3, [pc, #352]	@ (800f328 <netconn_recv_data+0x17c>)
 800f1c6:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800f1ca:	4958      	ldr	r1, [pc, #352]	@ (800f32c <netconn_recv_data+0x180>)
 800f1cc:	4858      	ldr	r0, [pc, #352]	@ (800f330 <netconn_recv_data+0x184>)
 800f1ce:	f00e f8cd 	bl	801d36c <iprintf>
 800f1d2:	f06f 030f 	mvn.w	r3, #15
 800f1d6:	e0a2      	b.n	800f31e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d109      	bne.n	800f1f8 <netconn_recv_data+0x4c>
 800f1e4:	4b50      	ldr	r3, [pc, #320]	@ (800f328 <netconn_recv_data+0x17c>)
 800f1e6:	f240 224a 	movw	r2, #586	@ 0x24a
 800f1ea:	4952      	ldr	r1, [pc, #328]	@ (800f334 <netconn_recv_data+0x188>)
 800f1ec:	4850      	ldr	r0, [pc, #320]	@ (800f330 <netconn_recv_data+0x184>)
 800f1ee:	f00e f8bd 	bl	801d36c <iprintf>
 800f1f2:	f06f 030f 	mvn.w	r3, #15
 800f1f6:	e092      	b.n	800f31e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	3310      	adds	r3, #16
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f00d f828 	bl	801c252 <sys_mbox_valid>
 800f202:	4603      	mov	r3, r0
 800f204:	2b00      	cmp	r3, #0
 800f206:	d10e      	bne.n	800f226 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800f208:	68f8      	ldr	r0, [r7, #12]
 800f20a:	f000 fad4 	bl	800f7b6 <netconn_err>
 800f20e:	4603      	mov	r3, r0
 800f210:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800f212:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d002      	beq.n	800f220 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800f21a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800f21e:	e07e      	b.n	800f31e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800f220:	f06f 030a 	mvn.w	r3, #10
 800f224:	e07b      	b.n	800f31e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	7f1b      	ldrb	r3, [r3, #28]
 800f22a:	f003 0302 	and.w	r3, r3, #2
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d10f      	bne.n	800f252 <netconn_recv_data+0xa6>
 800f232:	79fb      	ldrb	r3, [r7, #7]
 800f234:	f003 0304 	and.w	r3, r3, #4
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d10a      	bne.n	800f252 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	7f1b      	ldrb	r3, [r3, #28]
 800f240:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800f244:	2b00      	cmp	r3, #0
 800f246:	d104      	bne.n	800f252 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d023      	beq.n	800f29a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	3310      	adds	r3, #16
 800f256:	f107 0218 	add.w	r2, r7, #24
 800f25a:	4611      	mov	r1, r2
 800f25c:	4618      	mov	r0, r3
 800f25e:	f00c ffdc 	bl	801c21a <sys_arch_mbox_tryfetch>
 800f262:	4603      	mov	r3, r0
 800f264:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f268:	d11f      	bne.n	800f2aa <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800f26a:	68f8      	ldr	r0, [r7, #12]
 800f26c:	f000 faa3 	bl	800f7b6 <netconn_err>
 800f270:	4603      	mov	r3, r0
 800f272:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800f274:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d002      	beq.n	800f282 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800f27c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f280:	e04d      	b.n	800f31e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	7f1b      	ldrb	r3, [r3, #28]
 800f286:	f003 0301 	and.w	r3, r3, #1
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d002      	beq.n	800f294 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800f28e:	f06f 030a 	mvn.w	r3, #10
 800f292:	e044      	b.n	800f31e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800f294:	f06f 0306 	mvn.w	r3, #6
 800f298:	e041      	b.n	800f31e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	3310      	adds	r3, #16
 800f29e:	f107 0118 	add.w	r1, r7, #24
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f00c ff79 	bl	801c19c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f2b2:	2b10      	cmp	r3, #16
 800f2b4:	d117      	bne.n	800f2e6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800f2b6:	69bb      	ldr	r3, [r7, #24]
 800f2b8:	f107 0217 	add.w	r2, r7, #23
 800f2bc:	4611      	mov	r1, r2
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f000 faca 	bl	800f858 <lwip_netconn_is_err_msg>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d009      	beq.n	800f2de <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800f2ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2ce:	f113 0f0f 	cmn.w	r3, #15
 800f2d2:	d101      	bne.n	800f2d8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	e022      	b.n	800f31e <netconn_recv_data+0x172>
      }
      return err;
 800f2d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2dc:	e01f      	b.n	800f31e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800f2de:	69bb      	ldr	r3, [r7, #24]
 800f2e0:	891b      	ldrh	r3, [r3, #8]
 800f2e2:	83fb      	strh	r3, [r7, #30]
 800f2e4:	e00d      	b.n	800f302 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800f2e6:	69bb      	ldr	r3, [r7, #24]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d106      	bne.n	800f2fa <netconn_recv_data+0x14e>
 800f2ec:	4b0e      	ldr	r3, [pc, #56]	@ (800f328 <netconn_recv_data+0x17c>)
 800f2ee:	f240 2291 	movw	r2, #657	@ 0x291
 800f2f2:	4911      	ldr	r1, [pc, #68]	@ (800f338 <netconn_recv_data+0x18c>)
 800f2f4:	480e      	ldr	r0, [pc, #56]	@ (800f330 <netconn_recv_data+0x184>)
 800f2f6:	f00e f839 	bl	801d36c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800f2fa:	69bb      	ldr	r3, [r7, #24]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	891b      	ldrh	r3, [r3, #8]
 800f300:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f306:	2b00      	cmp	r3, #0
 800f308:	d005      	beq.n	800f316 <netconn_recv_data+0x16a>
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f30e:	8bfa      	ldrh	r2, [r7, #30]
 800f310:	2101      	movs	r1, #1
 800f312:	68f8      	ldr	r0, [r7, #12]
 800f314:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800f316:	69ba      	ldr	r2, [r7, #24]
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800f31c:	2300      	movs	r3, #0
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3720      	adds	r7, #32
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
 800f326:	bf00      	nop
 800f328:	0801e6f0 	.word	0x0801e6f0
 800f32c:	0801e908 	.word	0x0801e908
 800f330:	0801e748 	.word	0x0801e748
 800f334:	0801e928 	.word	0x0801e928
 800f338:	0801e944 	.word	0x0801e944

0800f33c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	60f8      	str	r0, [r7, #12]
 800f344:	60b9      	str	r1, [r7, #8]
 800f346:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d005      	beq.n	800f35a <netconn_tcp_recvd_msg+0x1e>
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f356:	2b10      	cmp	r3, #16
 800f358:	d009      	beq.n	800f36e <netconn_tcp_recvd_msg+0x32>
 800f35a:	4b0c      	ldr	r3, [pc, #48]	@ (800f38c <netconn_tcp_recvd_msg+0x50>)
 800f35c:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800f360:	490b      	ldr	r1, [pc, #44]	@ (800f390 <netconn_tcp_recvd_msg+0x54>)
 800f362:	480c      	ldr	r0, [pc, #48]	@ (800f394 <netconn_tcp_recvd_msg+0x58>)
 800f364:	f00e f802 	bl	801d36c <iprintf>
 800f368:	f06f 030f 	mvn.w	r3, #15
 800f36c:	e00a      	b.n	800f384 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	68fa      	ldr	r2, [r7, #12]
 800f372:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	68ba      	ldr	r2, [r7, #8]
 800f378:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800f37a:	6879      	ldr	r1, [r7, #4]
 800f37c:	4806      	ldr	r0, [pc, #24]	@ (800f398 <netconn_tcp_recvd_msg+0x5c>)
 800f37e:	f7ff fd4d 	bl	800ee1c <netconn_apimsg>
 800f382:	4603      	mov	r3, r0
}
 800f384:	4618      	mov	r0, r3
 800f386:	3710      	adds	r7, #16
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}
 800f38c:	0801e6f0 	.word	0x0801e6f0
 800f390:	0801e950 	.word	0x0801e950
 800f394:	0801e748 	.word	0x0801e748
 800f398:	08010965 	.word	0x08010965

0800f39c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b090      	sub	sp, #64	@ 0x40
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	60f8      	str	r0, [r7, #12]
 800f3a4:	60b9      	str	r1, [r7, #8]
 800f3a6:	4613      	mov	r3, r2
 800f3a8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	3310      	adds	r3, #16
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f00c ff4f 	bl	801c252 <sys_mbox_valid>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d102      	bne.n	800f3c0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800f3ba:	f06f 030a 	mvn.w	r3, #10
 800f3be:	e06d      	b.n	800f49c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	7f1b      	ldrb	r3, [r3, #28]
 800f3c4:	b25b      	sxtb	r3, r3
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	da07      	bge.n	800f3da <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	7f1b      	ldrb	r3, [r3, #28]
 800f3ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3d2:	b2da      	uxtb	r2, r3
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800f3d8:	e039      	b.n	800f44e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800f3da:	79fb      	ldrb	r3, [r7, #7]
 800f3dc:	461a      	mov	r2, r3
 800f3de:	68b9      	ldr	r1, [r7, #8]
 800f3e0:	68f8      	ldr	r0, [r7, #12]
 800f3e2:	f7ff fee3 	bl	800f1ac <netconn_recv_data>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800f3ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d002      	beq.n	800f3fa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800f3f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f3f8:	e050      	b.n	800f49c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800f400:	79fb      	ldrb	r3, [r7, #7]
 800f402:	f003 0308 	and.w	r3, r3, #8
 800f406:	2b00      	cmp	r3, #0
 800f408:	d10e      	bne.n	800f428 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800f40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d002      	beq.n	800f416 <netconn_recv_data_tcp+0x7a>
 800f410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f412:	891b      	ldrh	r3, [r3, #8]
 800f414:	e000      	b.n	800f418 <netconn_recv_data_tcp+0x7c>
 800f416:	2301      	movs	r3, #1
 800f418:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800f41a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f41c:	f107 0214 	add.w	r2, r7, #20
 800f420:	4619      	mov	r1, r3
 800f422:	68f8      	ldr	r0, [r7, #12]
 800f424:	f7ff ff8a 	bl	800f33c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800f428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d134      	bne.n	800f498 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800f42e:	79fb      	ldrb	r3, [r7, #7]
 800f430:	f003 0310 	and.w	r3, r3, #16
 800f434:	2b00      	cmp	r3, #0
 800f436:	d009      	beq.n	800f44c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	7f1b      	ldrb	r3, [r3, #28]
 800f43c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f440:	b2da      	uxtb	r2, r3
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800f446:	f06f 0306 	mvn.w	r3, #6
 800f44a:	e027      	b.n	800f49c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800f44c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f452:	2b00      	cmp	r3, #0
 800f454:	d005      	beq.n	800f462 <netconn_recv_data_tcp+0xc6>
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f45a:	2200      	movs	r2, #0
 800f45c:	2101      	movs	r1, #1
 800f45e:	68f8      	ldr	r0, [r7, #12]
 800f460:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	685b      	ldr	r3, [r3, #4]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d10f      	bne.n	800f48a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800f46a:	68f8      	ldr	r0, [r7, #12]
 800f46c:	f000 f9a3 	bl	800f7b6 <netconn_err>
 800f470:	4603      	mov	r3, r0
 800f472:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800f476:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d002      	beq.n	800f484 <netconn_recv_data_tcp+0xe8>
          return err;
 800f47e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f482:	e00b      	b.n	800f49c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800f484:	f06f 030d 	mvn.w	r3, #13
 800f488:	e008      	b.n	800f49c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800f48a:	2101      	movs	r1, #1
 800f48c:	68f8      	ldr	r0, [r7, #12]
 800f48e:	f000 f955 	bl	800f73c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800f492:	f06f 030e 	mvn.w	r3, #14
 800f496:	e001      	b.n	800f49c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800f498:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3740      	adds	r7, #64	@ 0x40
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b086      	sub	sp, #24
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d109      	bne.n	800f4cc <netconn_recv+0x28>
 800f4b8:	4b32      	ldr	r3, [pc, #200]	@ (800f584 <netconn_recv+0xe0>)
 800f4ba:	f240 3263 	movw	r2, #867	@ 0x363
 800f4be:	4932      	ldr	r1, [pc, #200]	@ (800f588 <netconn_recv+0xe4>)
 800f4c0:	4832      	ldr	r0, [pc, #200]	@ (800f58c <netconn_recv+0xe8>)
 800f4c2:	f00d ff53 	bl	801d36c <iprintf>
 800f4c6:	f06f 030f 	mvn.w	r3, #15
 800f4ca:	e056      	b.n	800f57a <netconn_recv+0xd6>
  *new_buf = NULL;
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d109      	bne.n	800f4ec <netconn_recv+0x48>
 800f4d8:	4b2a      	ldr	r3, [pc, #168]	@ (800f584 <netconn_recv+0xe0>)
 800f4da:	f240 3265 	movw	r2, #869	@ 0x365
 800f4de:	492c      	ldr	r1, [pc, #176]	@ (800f590 <netconn_recv+0xec>)
 800f4e0:	482a      	ldr	r0, [pc, #168]	@ (800f58c <netconn_recv+0xe8>)
 800f4e2:	f00d ff43 	bl	801d36c <iprintf>
 800f4e6:	f06f 030f 	mvn.w	r3, #15
 800f4ea:	e046      	b.n	800f57a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	781b      	ldrb	r3, [r3, #0]
 800f4f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f4f4:	2b10      	cmp	r3, #16
 800f4f6:	d13a      	bne.n	800f56e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800f4fc:	2006      	movs	r0, #6
 800f4fe:	f002 fc89 	bl	8011e14 <memp_malloc>
 800f502:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d102      	bne.n	800f510 <netconn_recv+0x6c>
      return ERR_MEM;
 800f50a:	f04f 33ff 	mov.w	r3, #4294967295
 800f50e:	e034      	b.n	800f57a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800f510:	f107 030c 	add.w	r3, r7, #12
 800f514:	2200      	movs	r2, #0
 800f516:	4619      	mov	r1, r3
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	f7ff ff3f 	bl	800f39c <netconn_recv_data_tcp>
 800f51e:	4603      	mov	r3, r0
 800f520:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f522:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d006      	beq.n	800f538 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800f52a:	6979      	ldr	r1, [r7, #20]
 800f52c:	2006      	movs	r0, #6
 800f52e:	f002 fce7 	bl	8011f00 <memp_free>
      return err;
 800f532:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f536:	e020      	b.n	800f57a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d106      	bne.n	800f54c <netconn_recv+0xa8>
 800f53e:	4b11      	ldr	r3, [pc, #68]	@ (800f584 <netconn_recv+0xe0>)
 800f540:	f240 3279 	movw	r2, #889	@ 0x379
 800f544:	4913      	ldr	r1, [pc, #76]	@ (800f594 <netconn_recv+0xf0>)
 800f546:	4811      	ldr	r0, [pc, #68]	@ (800f58c <netconn_recv+0xe8>)
 800f548:	f00d ff10 	bl	801d36c <iprintf>

    buf->p = p;
 800f54c:	68fa      	ldr	r2, [r7, #12]
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800f552:	68fa      	ldr	r2, [r7, #12]
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	2200      	movs	r2, #0
 800f55c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	2200      	movs	r2, #0
 800f562:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	697a      	ldr	r2, [r7, #20]
 800f568:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800f56a:	2300      	movs	r3, #0
 800f56c:	e005      	b.n	800f57a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800f56e:	2200      	movs	r2, #0
 800f570:	6839      	ldr	r1, [r7, #0]
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f7ff fe1a 	bl	800f1ac <netconn_recv_data>
 800f578:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3718      	adds	r7, #24
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	0801e6f0 	.word	0x0801e6f0
 800f588:	0801e908 	.word	0x0801e908
 800f58c:	0801e748 	.word	0x0801e748
 800f590:	0801e928 	.word	0x0801e928
 800f594:	0801e9a0 	.word	0x0801e9a0

0800f598 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b088      	sub	sp, #32
 800f59c:	af02      	add	r7, sp, #8
 800f59e:	60f8      	str	r0, [r7, #12]
 800f5a0:	60b9      	str	r1, [r7, #8]
 800f5a2:	607a      	str	r2, [r7, #4]
 800f5a4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800f5ae:	78fa      	ldrb	r2, [r7, #3]
 800f5b0:	f107 0110 	add.w	r1, r7, #16
 800f5b4:	6a3b      	ldr	r3, [r7, #32]
 800f5b6:	9300      	str	r3, [sp, #0]
 800f5b8:	4613      	mov	r3, r2
 800f5ba:	2201      	movs	r2, #1
 800f5bc:	68f8      	ldr	r0, [r7, #12]
 800f5be:	f000 f805 	bl	800f5cc <netconn_write_vectors_partly>
 800f5c2:	4603      	mov	r3, r0
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3718      	adds	r7, #24
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}

0800f5cc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b092      	sub	sp, #72	@ 0x48
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	60f8      	str	r0, [r7, #12]
 800f5d4:	60b9      	str	r1, [r7, #8]
 800f5d6:	4611      	mov	r1, r2
 800f5d8:	461a      	mov	r2, r3
 800f5da:	460b      	mov	r3, r1
 800f5dc:	80fb      	strh	r3, [r7, #6]
 800f5de:	4613      	mov	r3, r2
 800f5e0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d109      	bne.n	800f5fc <netconn_write_vectors_partly+0x30>
 800f5e8:	4b4e      	ldr	r3, [pc, #312]	@ (800f724 <netconn_write_vectors_partly+0x158>)
 800f5ea:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800f5ee:	494e      	ldr	r1, [pc, #312]	@ (800f728 <netconn_write_vectors_partly+0x15c>)
 800f5f0:	484e      	ldr	r0, [pc, #312]	@ (800f72c <netconn_write_vectors_partly+0x160>)
 800f5f2:	f00d febb 	bl	801d36c <iprintf>
 800f5f6:	f06f 030f 	mvn.w	r3, #15
 800f5fa:	e08e      	b.n	800f71a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f604:	2b10      	cmp	r3, #16
 800f606:	d009      	beq.n	800f61c <netconn_write_vectors_partly+0x50>
 800f608:	4b46      	ldr	r3, [pc, #280]	@ (800f724 <netconn_write_vectors_partly+0x158>)
 800f60a:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800f60e:	4948      	ldr	r1, [pc, #288]	@ (800f730 <netconn_write_vectors_partly+0x164>)
 800f610:	4846      	ldr	r0, [pc, #280]	@ (800f72c <netconn_write_vectors_partly+0x160>)
 800f612:	f00d feab 	bl	801d36c <iprintf>
 800f616:	f06f 0305 	mvn.w	r3, #5
 800f61a:	e07e      	b.n	800f71a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	7f1b      	ldrb	r3, [r3, #28]
 800f620:	f003 0302 	and.w	r3, r3, #2
 800f624:	2b00      	cmp	r3, #0
 800f626:	d104      	bne.n	800f632 <netconn_write_vectors_partly+0x66>
 800f628:	797b      	ldrb	r3, [r7, #5]
 800f62a:	f003 0304 	and.w	r3, r3, #4
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d001      	beq.n	800f636 <netconn_write_vectors_partly+0x6a>
 800f632:	2301      	movs	r3, #1
 800f634:	e000      	b.n	800f638 <netconn_write_vectors_partly+0x6c>
 800f636:	2300      	movs	r3, #0
 800f638:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800f63c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f640:	2b00      	cmp	r3, #0
 800f642:	d005      	beq.n	800f650 <netconn_write_vectors_partly+0x84>
 800f644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f646:	2b00      	cmp	r3, #0
 800f648:	d102      	bne.n	800f650 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800f64a:	f06f 0305 	mvn.w	r3, #5
 800f64e:	e064      	b.n	800f71a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800f650:	2300      	movs	r3, #0
 800f652:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800f654:	2300      	movs	r3, #0
 800f656:	643b      	str	r3, [r7, #64]	@ 0x40
 800f658:	e015      	b.n	800f686 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800f65a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f65c:	00db      	lsls	r3, r3, #3
 800f65e:	68ba      	ldr	r2, [r7, #8]
 800f660:	4413      	add	r3, r2
 800f662:	685b      	ldr	r3, [r3, #4]
 800f664:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f666:	4413      	add	r3, r2
 800f668:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800f66a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f66c:	00db      	lsls	r3, r3, #3
 800f66e:	68ba      	ldr	r2, [r7, #8]
 800f670:	4413      	add	r3, r2
 800f672:	685b      	ldr	r3, [r3, #4]
 800f674:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f676:	429a      	cmp	r2, r3
 800f678:	d202      	bcs.n	800f680 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800f67a:	f06f 0305 	mvn.w	r3, #5
 800f67e:	e04c      	b.n	800f71a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800f680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f682:	3301      	adds	r3, #1
 800f684:	643b      	str	r3, [r7, #64]	@ 0x40
 800f686:	88fb      	ldrh	r3, [r7, #6]
 800f688:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f68a:	429a      	cmp	r2, r3
 800f68c:	dbe5      	blt.n	800f65a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800f68e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f690:	2b00      	cmp	r3, #0
 800f692:	d101      	bne.n	800f698 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800f694:	2300      	movs	r3, #0
 800f696:	e040      	b.n	800f71a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800f698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	da0a      	bge.n	800f6b4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800f69e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d102      	bne.n	800f6aa <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800f6a4:	f06f 0305 	mvn.w	r3, #5
 800f6a8:	e037      	b.n	800f71a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800f6aa:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f6ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800f6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6b2:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800f6bc:	88fb      	ldrh	r3, [r7, #6]
 800f6be:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800f6c4:	797b      	ldrb	r3, [r7, #5]
 800f6c6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800f6ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f6cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800f6d2:	f107 0314 	add.w	r3, r7, #20
 800f6d6:	4619      	mov	r1, r3
 800f6d8:	4816      	ldr	r0, [pc, #88]	@ (800f734 <netconn_write_vectors_partly+0x168>)
 800f6da:	f7ff fb9f 	bl	800ee1c <netconn_apimsg>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800f6e4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d114      	bne.n	800f716 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800f6ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d002      	beq.n	800f6f8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800f6f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f6f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6f6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800f6f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d10a      	bne.n	800f716 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800f700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f702:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f704:	429a      	cmp	r2, r3
 800f706:	d006      	beq.n	800f716 <netconn_write_vectors_partly+0x14a>
 800f708:	4b06      	ldr	r3, [pc, #24]	@ (800f724 <netconn_write_vectors_partly+0x158>)
 800f70a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f70e:	490a      	ldr	r1, [pc, #40]	@ (800f738 <netconn_write_vectors_partly+0x16c>)
 800f710:	4806      	ldr	r0, [pc, #24]	@ (800f72c <netconn_write_vectors_partly+0x160>)
 800f712:	f00d fe2b 	bl	801d36c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800f716:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	3748      	adds	r7, #72	@ 0x48
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}
 800f722:	bf00      	nop
 800f724:	0801e6f0 	.word	0x0801e6f0
 800f728:	0801e9c8 	.word	0x0801e9c8
 800f72c:	0801e748 	.word	0x0801e748
 800f730:	0801e9e4 	.word	0x0801e9e4
 800f734:	08010d69 	.word	0x08010d69
 800f738:	0801ea08 	.word	0x0801ea08

0800f73c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b08c      	sub	sp, #48	@ 0x30
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	460b      	mov	r3, r1
 800f746:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d109      	bne.n	800f762 <netconn_close_shutdown+0x26>
 800f74e:	4b0f      	ldr	r3, [pc, #60]	@ (800f78c <netconn_close_shutdown+0x50>)
 800f750:	f240 4247 	movw	r2, #1095	@ 0x447
 800f754:	490e      	ldr	r1, [pc, #56]	@ (800f790 <netconn_close_shutdown+0x54>)
 800f756:	480f      	ldr	r0, [pc, #60]	@ (800f794 <netconn_close_shutdown+0x58>)
 800f758:	f00d fe08 	bl	801d36c <iprintf>
 800f75c:	f06f 030f 	mvn.w	r3, #15
 800f760:	e010      	b.n	800f784 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800f766:	78fb      	ldrb	r3, [r7, #3]
 800f768:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800f76a:	2329      	movs	r3, #41	@ 0x29
 800f76c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800f76e:	f107 030c 	add.w	r3, r7, #12
 800f772:	4619      	mov	r1, r3
 800f774:	4808      	ldr	r0, [pc, #32]	@ (800f798 <netconn_close_shutdown+0x5c>)
 800f776:	f7ff fb51 	bl	800ee1c <netconn_apimsg>
 800f77a:	4603      	mov	r3, r0
 800f77c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800f780:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800f784:	4618      	mov	r0, r3
 800f786:	3730      	adds	r7, #48	@ 0x30
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}
 800f78c:	0801e6f0 	.word	0x0801e6f0
 800f790:	0801ea2c 	.word	0x0801ea2c
 800f794:	0801e748 	.word	0x0801e748
 800f798:	08010e81 	.word	0x08010e81

0800f79c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b082      	sub	sp, #8
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800f7a4:	2103      	movs	r1, #3
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f7ff ffc8 	bl	800f73c <netconn_close_shutdown>
 800f7ac:	4603      	mov	r3, r0
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3708      	adds	r7, #8
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}

0800f7b6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800f7b6:	b580      	push	{r7, lr}
 800f7b8:	b084      	sub	sp, #16
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d101      	bne.n	800f7c8 <netconn_err+0x12>
    return ERR_OK;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	e00d      	b.n	800f7e4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800f7c8:	f00c fe5e 	bl	801c488 <sys_arch_protect>
 800f7cc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	7a1b      	ldrb	r3, [r3, #8]
 800f7d2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800f7da:	68f8      	ldr	r0, [r7, #12]
 800f7dc:	f00c fe62 	bl	801c4a4 <sys_arch_unprotect>
  return err;
 800f7e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3710      	adds	r7, #16
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}

0800f7ec <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b082      	sub	sp, #8
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800f7f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7fa:	f113 0f0d 	cmn.w	r3, #13
 800f7fe:	d009      	beq.n	800f814 <lwip_netconn_err_to_msg+0x28>
 800f800:	f113 0f0d 	cmn.w	r3, #13
 800f804:	dc0c      	bgt.n	800f820 <lwip_netconn_err_to_msg+0x34>
 800f806:	f113 0f0f 	cmn.w	r3, #15
 800f80a:	d007      	beq.n	800f81c <lwip_netconn_err_to_msg+0x30>
 800f80c:	f113 0f0e 	cmn.w	r3, #14
 800f810:	d002      	beq.n	800f818 <lwip_netconn_err_to_msg+0x2c>
 800f812:	e005      	b.n	800f820 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800f814:	4b0a      	ldr	r3, [pc, #40]	@ (800f840 <lwip_netconn_err_to_msg+0x54>)
 800f816:	e00e      	b.n	800f836 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800f818:	4b0a      	ldr	r3, [pc, #40]	@ (800f844 <lwip_netconn_err_to_msg+0x58>)
 800f81a:	e00c      	b.n	800f836 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800f81c:	4b0a      	ldr	r3, [pc, #40]	@ (800f848 <lwip_netconn_err_to_msg+0x5c>)
 800f81e:	e00a      	b.n	800f836 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800f820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d005      	beq.n	800f834 <lwip_netconn_err_to_msg+0x48>
 800f828:	4b08      	ldr	r3, [pc, #32]	@ (800f84c <lwip_netconn_err_to_msg+0x60>)
 800f82a:	227d      	movs	r2, #125	@ 0x7d
 800f82c:	4908      	ldr	r1, [pc, #32]	@ (800f850 <lwip_netconn_err_to_msg+0x64>)
 800f82e:	4809      	ldr	r0, [pc, #36]	@ (800f854 <lwip_netconn_err_to_msg+0x68>)
 800f830:	f00d fd9c 	bl	801d36c <iprintf>
      return NULL;
 800f834:	2300      	movs	r3, #0
  }
}
 800f836:	4618      	mov	r0, r3
 800f838:	3708      	adds	r7, #8
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
 800f83e:	bf00      	nop
 800f840:	08021c2c 	.word	0x08021c2c
 800f844:	08021c2d 	.word	0x08021c2d
 800f848:	08021c2e 	.word	0x08021c2e
 800f84c:	0801ea48 	.word	0x0801ea48
 800f850:	0801ea7c 	.word	0x0801ea7c
 800f854:	0801ea8c 	.word	0x0801ea8c

0800f858 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b082      	sub	sp, #8
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d105      	bne.n	800f874 <lwip_netconn_is_err_msg+0x1c>
 800f868:	4b12      	ldr	r3, [pc, #72]	@ (800f8b4 <lwip_netconn_is_err_msg+0x5c>)
 800f86a:	2285      	movs	r2, #133	@ 0x85
 800f86c:	4912      	ldr	r1, [pc, #72]	@ (800f8b8 <lwip_netconn_is_err_msg+0x60>)
 800f86e:	4813      	ldr	r0, [pc, #76]	@ (800f8bc <lwip_netconn_is_err_msg+0x64>)
 800f870:	f00d fd7c 	bl	801d36c <iprintf>

  if (msg == &netconn_aborted) {
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	4a12      	ldr	r2, [pc, #72]	@ (800f8c0 <lwip_netconn_is_err_msg+0x68>)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d104      	bne.n	800f886 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	22f3      	movs	r2, #243	@ 0xf3
 800f880:	701a      	strb	r2, [r3, #0]
    return 1;
 800f882:	2301      	movs	r3, #1
 800f884:	e012      	b.n	800f8ac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	4a0e      	ldr	r2, [pc, #56]	@ (800f8c4 <lwip_netconn_is_err_msg+0x6c>)
 800f88a:	4293      	cmp	r3, r2
 800f88c:	d104      	bne.n	800f898 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	22f2      	movs	r2, #242	@ 0xf2
 800f892:	701a      	strb	r2, [r3, #0]
    return 1;
 800f894:	2301      	movs	r3, #1
 800f896:	e009      	b.n	800f8ac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	4a0b      	ldr	r2, [pc, #44]	@ (800f8c8 <lwip_netconn_is_err_msg+0x70>)
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d104      	bne.n	800f8aa <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	22f1      	movs	r2, #241	@ 0xf1
 800f8a4:	701a      	strb	r2, [r3, #0]
    return 1;
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	e000      	b.n	800f8ac <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800f8aa:	2300      	movs	r3, #0
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3708      	adds	r7, #8
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}
 800f8b4:	0801ea48 	.word	0x0801ea48
 800f8b8:	0801eab4 	.word	0x0801eab4
 800f8bc:	0801ea8c 	.word	0x0801ea8c
 800f8c0:	08021c2c 	.word	0x08021c2c
 800f8c4:	08021c2d 	.word	0x08021c2d
 800f8c8:	08021c2e 	.word	0x08021c2e

0800f8cc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b088      	sub	sp, #32
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	60f8      	str	r0, [r7, #12]
 800f8d4:	60b9      	str	r1, [r7, #8]
 800f8d6:	607a      	str	r2, [r7, #4]
 800f8d8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d105      	bne.n	800f8ec <recv_udp+0x20>
 800f8e0:	4b34      	ldr	r3, [pc, #208]	@ (800f9b4 <recv_udp+0xe8>)
 800f8e2:	22e5      	movs	r2, #229	@ 0xe5
 800f8e4:	4934      	ldr	r1, [pc, #208]	@ (800f9b8 <recv_udp+0xec>)
 800f8e6:	4835      	ldr	r0, [pc, #212]	@ (800f9bc <recv_udp+0xf0>)
 800f8e8:	f00d fd40 	bl	801d36c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d105      	bne.n	800f8fe <recv_udp+0x32>
 800f8f2:	4b30      	ldr	r3, [pc, #192]	@ (800f9b4 <recv_udp+0xe8>)
 800f8f4:	22e6      	movs	r2, #230	@ 0xe6
 800f8f6:	4932      	ldr	r1, [pc, #200]	@ (800f9c0 <recv_udp+0xf4>)
 800f8f8:	4830      	ldr	r0, [pc, #192]	@ (800f9bc <recv_udp+0xf0>)
 800f8fa:	f00d fd37 	bl	801d36c <iprintf>
  conn = (struct netconn *)arg;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f902:	69fb      	ldr	r3, [r7, #28]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d103      	bne.n	800f910 <recv_udp+0x44>
    pbuf_free(p);
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f003 f99d 	bl	8012c48 <pbuf_free>
    return;
 800f90e:	e04d      	b.n	800f9ac <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800f910:	69fb      	ldr	r3, [r7, #28]
 800f912:	685b      	ldr	r3, [r3, #4]
 800f914:	68ba      	ldr	r2, [r7, #8]
 800f916:	429a      	cmp	r2, r3
 800f918:	d005      	beq.n	800f926 <recv_udp+0x5a>
 800f91a:	4b26      	ldr	r3, [pc, #152]	@ (800f9b4 <recv_udp+0xe8>)
 800f91c:	22ee      	movs	r2, #238	@ 0xee
 800f91e:	4929      	ldr	r1, [pc, #164]	@ (800f9c4 <recv_udp+0xf8>)
 800f920:	4826      	ldr	r0, [pc, #152]	@ (800f9bc <recv_udp+0xf0>)
 800f922:	f00d fd23 	bl	801d36c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f926:	69fb      	ldr	r3, [r7, #28]
 800f928:	3310      	adds	r3, #16
 800f92a:	4618      	mov	r0, r3
 800f92c:	f00c fc91 	bl	801c252 <sys_mbox_valid>
 800f930:	4603      	mov	r3, r0
 800f932:	2b00      	cmp	r3, #0
 800f934:	d103      	bne.n	800f93e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f003 f986 	bl	8012c48 <pbuf_free>
    return;
 800f93c:	e036      	b.n	800f9ac <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800f93e:	2006      	movs	r0, #6
 800f940:	f002 fa68 	bl	8011e14 <memp_malloc>
 800f944:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800f946:	69bb      	ldr	r3, [r7, #24]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d103      	bne.n	800f954 <recv_udp+0x88>
    pbuf_free(p);
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f003 f97b 	bl	8012c48 <pbuf_free>
    return;
 800f952:	e02b      	b.n	800f9ac <recv_udp+0xe0>
  } else {
    buf->p = p;
 800f954:	69bb      	ldr	r3, [r7, #24]
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800f95a:	69bb      	ldr	r3, [r7, #24]
 800f95c:	687a      	ldr	r2, [r7, #4]
 800f95e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d002      	beq.n	800f96c <recv_udp+0xa0>
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	e000      	b.n	800f96e <recv_udp+0xa2>
 800f96c:	2300      	movs	r3, #0
 800f96e:	69ba      	ldr	r2, [r7, #24]
 800f970:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800f972:	69bb      	ldr	r3, [r7, #24]
 800f974:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800f976:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	891b      	ldrh	r3, [r3, #8]
 800f97c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800f97e:	69fb      	ldr	r3, [r7, #28]
 800f980:	3310      	adds	r3, #16
 800f982:	69b9      	ldr	r1, [r7, #24]
 800f984:	4618      	mov	r0, r3
 800f986:	f00c fbef 	bl	801c168 <sys_mbox_trypost>
 800f98a:	4603      	mov	r3, r0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d003      	beq.n	800f998 <recv_udp+0xcc>
    netbuf_delete(buf);
 800f990:	69b8      	ldr	r0, [r7, #24]
 800f992:	f001 fb01 	bl	8010f98 <netbuf_delete>
    return;
 800f996:	e009      	b.n	800f9ac <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f998:	69fb      	ldr	r3, [r7, #28]
 800f99a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d005      	beq.n	800f9ac <recv_udp+0xe0>
 800f9a0:	69fb      	ldr	r3, [r7, #28]
 800f9a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9a4:	8afa      	ldrh	r2, [r7, #22]
 800f9a6:	2100      	movs	r1, #0
 800f9a8:	69f8      	ldr	r0, [r7, #28]
 800f9aa:	4798      	blx	r3
  }
}
 800f9ac:	3720      	adds	r7, #32
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}
 800f9b2:	bf00      	nop
 800f9b4:	0801ea48 	.word	0x0801ea48
 800f9b8:	0801eac0 	.word	0x0801eac0
 800f9bc:	0801ea8c 	.word	0x0801ea8c
 800f9c0:	0801eae4 	.word	0x0801eae4
 800f9c4:	0801eb04 	.word	0x0801eb04

0800f9c8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b088      	sub	sp, #32
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	60f8      	str	r0, [r7, #12]
 800f9d0:	60b9      	str	r1, [r7, #8]
 800f9d2:	607a      	str	r2, [r7, #4]
 800f9d4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d106      	bne.n	800f9ea <recv_tcp+0x22>
 800f9dc:	4b36      	ldr	r3, [pc, #216]	@ (800fab8 <recv_tcp+0xf0>)
 800f9de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800f9e2:	4936      	ldr	r1, [pc, #216]	@ (800fabc <recv_tcp+0xf4>)
 800f9e4:	4836      	ldr	r0, [pc, #216]	@ (800fac0 <recv_tcp+0xf8>)
 800f9e6:	f00d fcc1 	bl	801d36c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d106      	bne.n	800f9fe <recv_tcp+0x36>
 800f9f0:	4b31      	ldr	r3, [pc, #196]	@ (800fab8 <recv_tcp+0xf0>)
 800f9f2:	f240 122d 	movw	r2, #301	@ 0x12d
 800f9f6:	4933      	ldr	r1, [pc, #204]	@ (800fac4 <recv_tcp+0xfc>)
 800f9f8:	4831      	ldr	r0, [pc, #196]	@ (800fac0 <recv_tcp+0xf8>)
 800f9fa:	f00d fcb7 	bl	801d36c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800f9fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d006      	beq.n	800fa14 <recv_tcp+0x4c>
 800fa06:	4b2c      	ldr	r3, [pc, #176]	@ (800fab8 <recv_tcp+0xf0>)
 800fa08:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800fa0c:	492e      	ldr	r1, [pc, #184]	@ (800fac8 <recv_tcp+0x100>)
 800fa0e:	482c      	ldr	r0, [pc, #176]	@ (800fac0 <recv_tcp+0xf8>)
 800fa10:	f00d fcac 	bl	801d36c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d102      	bne.n	800fa24 <recv_tcp+0x5c>
    return ERR_VAL;
 800fa1e:	f06f 0305 	mvn.w	r3, #5
 800fa22:	e045      	b.n	800fab0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	685b      	ldr	r3, [r3, #4]
 800fa28:	68ba      	ldr	r2, [r7, #8]
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d006      	beq.n	800fa3c <recv_tcp+0x74>
 800fa2e:	4b22      	ldr	r3, [pc, #136]	@ (800fab8 <recv_tcp+0xf0>)
 800fa30:	f240 1235 	movw	r2, #309	@ 0x135
 800fa34:	4925      	ldr	r1, [pc, #148]	@ (800facc <recv_tcp+0x104>)
 800fa36:	4822      	ldr	r0, [pc, #136]	@ (800fac0 <recv_tcp+0xf8>)
 800fa38:	f00d fc98 	bl	801d36c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	3310      	adds	r3, #16
 800fa40:	4618      	mov	r0, r3
 800fa42:	f00c fc06 	bl	801c252 <sys_mbox_valid>
 800fa46:	4603      	mov	r3, r0
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d10d      	bne.n	800fa68 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d008      	beq.n	800fa64 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	891b      	ldrh	r3, [r3, #8]
 800fa56:	4619      	mov	r1, r3
 800fa58:	68b8      	ldr	r0, [r7, #8]
 800fa5a:	f004 f8ad 	bl	8013bb8 <tcp_recved>
      pbuf_free(p);
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f003 f8f2 	bl	8012c48 <pbuf_free>
    }
    return ERR_OK;
 800fa64:	2300      	movs	r3, #0
 800fa66:	e023      	b.n	800fab0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d005      	beq.n	800fa7a <recv_tcp+0xb2>
    msg = p;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	891b      	ldrh	r3, [r3, #8]
 800fa76:	83fb      	strh	r3, [r7, #30]
 800fa78:	e003      	b.n	800fa82 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800fa7a:	4b15      	ldr	r3, [pc, #84]	@ (800fad0 <recv_tcp+0x108>)
 800fa7c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	3310      	adds	r3, #16
 800fa86:	69b9      	ldr	r1, [r7, #24]
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f00c fb6d 	bl	801c168 <sys_mbox_trypost>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d002      	beq.n	800fa9a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800fa94:	f04f 33ff 	mov.w	r3, #4294967295
 800fa98:	e00a      	b.n	800fab0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d005      	beq.n	800faae <recv_tcp+0xe6>
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faa6:	8bfa      	ldrh	r2, [r7, #30]
 800faa8:	2100      	movs	r1, #0
 800faaa:	6978      	ldr	r0, [r7, #20]
 800faac:	4798      	blx	r3
  }

  return ERR_OK;
 800faae:	2300      	movs	r3, #0
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3720      	adds	r7, #32
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}
 800fab8:	0801ea48 	.word	0x0801ea48
 800fabc:	0801eb24 	.word	0x0801eb24
 800fac0:	0801ea8c 	.word	0x0801ea8c
 800fac4:	0801eb48 	.word	0x0801eb48
 800fac8:	0801eb68 	.word	0x0801eb68
 800facc:	0801eb80 	.word	0x0801eb80
 800fad0:	08021c2e 	.word	0x08021c2e

0800fad4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b084      	sub	sp, #16
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
 800fadc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d106      	bne.n	800faf6 <poll_tcp+0x22>
 800fae8:	4b29      	ldr	r3, [pc, #164]	@ (800fb90 <poll_tcp+0xbc>)
 800faea:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800faee:	4929      	ldr	r1, [pc, #164]	@ (800fb94 <poll_tcp+0xc0>)
 800faf0:	4829      	ldr	r0, [pc, #164]	@ (800fb98 <poll_tcp+0xc4>)
 800faf2:	f00d fc3b 	bl	801d36c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	785b      	ldrb	r3, [r3, #1]
 800fafa:	2b01      	cmp	r3, #1
 800fafc:	d104      	bne.n	800fb08 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800fafe:	2101      	movs	r1, #1
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	f000 ff65 	bl	80109d0 <lwip_netconn_do_writemore>
 800fb06:	e016      	b.n	800fb36 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	785b      	ldrb	r3, [r3, #1]
 800fb0c:	2b04      	cmp	r3, #4
 800fb0e:	d112      	bne.n	800fb36 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	6a1b      	ldr	r3, [r3, #32]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d00a      	beq.n	800fb2e <poll_tcp+0x5a>
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	6a1b      	ldr	r3, [r3, #32]
 800fb1c:	7a5b      	ldrb	r3, [r3, #9]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d005      	beq.n	800fb2e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	6a1b      	ldr	r3, [r3, #32]
 800fb26:	7a5a      	ldrb	r2, [r3, #9]
 800fb28:	3a01      	subs	r2, #1
 800fb2a:	b2d2      	uxtb	r2, r2
 800fb2c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800fb2e:	2101      	movs	r1, #1
 800fb30:	68f8      	ldr	r0, [r7, #12]
 800fb32:	f000 fbf7 	bl	8010324 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	7f1b      	ldrb	r3, [r3, #28]
 800fb3a:	f003 0310 	and.w	r3, r3, #16
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d021      	beq.n	800fb86 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	685b      	ldr	r3, [r3, #4]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d01d      	beq.n	800fb86 <poll_tcp+0xb2>
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fb52:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800fb56:	d316      	bcc.n	800fb86 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	685b      	ldr	r3, [r3, #4]
 800fb5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800fb60:	2b04      	cmp	r3, #4
 800fb62:	d810      	bhi.n	800fb86 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	7f1b      	ldrb	r3, [r3, #28]
 800fb68:	f023 0310 	bic.w	r3, r3, #16
 800fb6c:	b2da      	uxtb	r2, r3
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d005      	beq.n	800fb86 <poll_tcp+0xb2>
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb7e:	2200      	movs	r2, #0
 800fb80:	2102      	movs	r1, #2
 800fb82:	68f8      	ldr	r0, [r7, #12]
 800fb84:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800fb86:	2300      	movs	r3, #0
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3710      	adds	r7, #16
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}
 800fb90:	0801ea48 	.word	0x0801ea48
 800fb94:	0801eba0 	.word	0x0801eba0
 800fb98:	0801ea8c 	.word	0x0801ea8c

0800fb9c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b086      	sub	sp, #24
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	60f8      	str	r0, [r7, #12]
 800fba4:	60b9      	str	r1, [r7, #8]
 800fba6:	4613      	mov	r3, r2
 800fba8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d106      	bne.n	800fbc2 <sent_tcp+0x26>
 800fbb4:	4b20      	ldr	r3, [pc, #128]	@ (800fc38 <sent_tcp+0x9c>)
 800fbb6:	f240 1293 	movw	r2, #403	@ 0x193
 800fbba:	4920      	ldr	r1, [pc, #128]	@ (800fc3c <sent_tcp+0xa0>)
 800fbbc:	4820      	ldr	r0, [pc, #128]	@ (800fc40 <sent_tcp+0xa4>)
 800fbbe:	f00d fbd5 	bl	801d36c <iprintf>

  if (conn) {
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d032      	beq.n	800fc2e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	785b      	ldrb	r3, [r3, #1]
 800fbcc:	2b01      	cmp	r3, #1
 800fbce:	d104      	bne.n	800fbda <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800fbd0:	2101      	movs	r1, #1
 800fbd2:	6978      	ldr	r0, [r7, #20]
 800fbd4:	f000 fefc 	bl	80109d0 <lwip_netconn_do_writemore>
 800fbd8:	e007      	b.n	800fbea <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	785b      	ldrb	r3, [r3, #1]
 800fbde:	2b04      	cmp	r3, #4
 800fbe0:	d103      	bne.n	800fbea <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800fbe2:	2101      	movs	r1, #1
 800fbe4:	6978      	ldr	r0, [r7, #20]
 800fbe6:	f000 fb9d 	bl	8010324 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	685b      	ldr	r3, [r3, #4]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d01d      	beq.n	800fc2e <sent_tcp+0x92>
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fbfa:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800fbfe:	d316      	bcc.n	800fc2e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	685b      	ldr	r3, [r3, #4]
 800fc04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800fc08:	2b04      	cmp	r3, #4
 800fc0a:	d810      	bhi.n	800fc2e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	7f1b      	ldrb	r3, [r3, #28]
 800fc10:	f023 0310 	bic.w	r3, r3, #16
 800fc14:	b2da      	uxtb	r2, r3
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d005      	beq.n	800fc2e <sent_tcp+0x92>
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc26:	88fa      	ldrh	r2, [r7, #6]
 800fc28:	2102      	movs	r1, #2
 800fc2a:	6978      	ldr	r0, [r7, #20]
 800fc2c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800fc2e:	2300      	movs	r3, #0
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	3718      	adds	r7, #24
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}
 800fc38:	0801ea48 	.word	0x0801ea48
 800fc3c:	0801eba0 	.word	0x0801eba0
 800fc40:	0801ea8c 	.word	0x0801ea8c

0800fc44 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b088      	sub	sp, #32
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	460b      	mov	r3, r1
 800fc4e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d106      	bne.n	800fc68 <err_tcp+0x24>
 800fc5a:	4b5f      	ldr	r3, [pc, #380]	@ (800fdd8 <err_tcp+0x194>)
 800fc5c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800fc60:	495e      	ldr	r1, [pc, #376]	@ (800fddc <err_tcp+0x198>)
 800fc62:	485f      	ldr	r0, [pc, #380]	@ (800fde0 <err_tcp+0x19c>)
 800fc64:	f00d fb82 	bl	801d36c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800fc68:	f00c fc0e 	bl	801c488 <sys_arch_protect>
 800fc6c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800fc6e:	69fb      	ldr	r3, [r7, #28]
 800fc70:	2200      	movs	r2, #0
 800fc72:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800fc74:	69fb      	ldr	r3, [r7, #28]
 800fc76:	78fa      	ldrb	r2, [r7, #3]
 800fc78:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800fc7a:	69fb      	ldr	r3, [r7, #28]
 800fc7c:	7f1b      	ldrb	r3, [r3, #28]
 800fc7e:	f043 0301 	orr.w	r3, r3, #1
 800fc82:	b2da      	uxtb	r2, r3
 800fc84:	69fb      	ldr	r3, [r7, #28]
 800fc86:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800fc88:	69fb      	ldr	r3, [r7, #28]
 800fc8a:	785b      	ldrb	r3, [r3, #1]
 800fc8c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800fc8e:	69fb      	ldr	r3, [r7, #28]
 800fc90:	2200      	movs	r2, #0
 800fc92:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800fc94:	69b8      	ldr	r0, [r7, #24]
 800fc96:	f00c fc05 	bl	801c4a4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800fc9a:	69fb      	ldr	r3, [r7, #28]
 800fc9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d005      	beq.n	800fcae <err_tcp+0x6a>
 800fca2:	69fb      	ldr	r3, [r7, #28]
 800fca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fca6:	2200      	movs	r2, #0
 800fca8:	2104      	movs	r1, #4
 800fcaa:	69f8      	ldr	r0, [r7, #28]
 800fcac:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fcae:	69fb      	ldr	r3, [r7, #28]
 800fcb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d005      	beq.n	800fcc2 <err_tcp+0x7e>
 800fcb6:	69fb      	ldr	r3, [r7, #28]
 800fcb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcba:	2200      	movs	r2, #0
 800fcbc:	2100      	movs	r1, #0
 800fcbe:	69f8      	ldr	r0, [r7, #28]
 800fcc0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800fcc2:	69fb      	ldr	r3, [r7, #28]
 800fcc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d005      	beq.n	800fcd6 <err_tcp+0x92>
 800fcca:	69fb      	ldr	r3, [r7, #28]
 800fccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcce:	2200      	movs	r2, #0
 800fcd0:	2102      	movs	r1, #2
 800fcd2:	69f8      	ldr	r0, [r7, #28]
 800fcd4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800fcd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7ff fd86 	bl	800f7ec <lwip_netconn_err_to_msg>
 800fce0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800fce2:	69fb      	ldr	r3, [r7, #28]
 800fce4:	3310      	adds	r3, #16
 800fce6:	4618      	mov	r0, r3
 800fce8:	f00c fab3 	bl	801c252 <sys_mbox_valid>
 800fcec:	4603      	mov	r3, r0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d005      	beq.n	800fcfe <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800fcf2:	69fb      	ldr	r3, [r7, #28]
 800fcf4:	3310      	adds	r3, #16
 800fcf6:	6939      	ldr	r1, [r7, #16]
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f00c fa35 	bl	801c168 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800fcfe:	69fb      	ldr	r3, [r7, #28]
 800fd00:	3314      	adds	r3, #20
 800fd02:	4618      	mov	r0, r3
 800fd04:	f00c faa5 	bl	801c252 <sys_mbox_valid>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d005      	beq.n	800fd1a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800fd0e:	69fb      	ldr	r3, [r7, #28]
 800fd10:	3314      	adds	r3, #20
 800fd12:	6939      	ldr	r1, [r7, #16]
 800fd14:	4618      	mov	r0, r3
 800fd16:	f00c fa27 	bl	801c168 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800fd1a:	7dfb      	ldrb	r3, [r7, #23]
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	d005      	beq.n	800fd2c <err_tcp+0xe8>
 800fd20:	7dfb      	ldrb	r3, [r7, #23]
 800fd22:	2b04      	cmp	r3, #4
 800fd24:	d002      	beq.n	800fd2c <err_tcp+0xe8>
 800fd26:	7dfb      	ldrb	r3, [r7, #23]
 800fd28:	2b03      	cmp	r3, #3
 800fd2a:	d143      	bne.n	800fdb4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800fd2c:	69fb      	ldr	r3, [r7, #28]
 800fd2e:	7f1b      	ldrb	r3, [r3, #28]
 800fd30:	f003 0304 	and.w	r3, r3, #4
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	bf14      	ite	ne
 800fd38:	2301      	movne	r3, #1
 800fd3a:	2300      	moveq	r3, #0
 800fd3c:	b2db      	uxtb	r3, r3
 800fd3e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800fd40:	69fb      	ldr	r3, [r7, #28]
 800fd42:	7f1b      	ldrb	r3, [r3, #28]
 800fd44:	f023 0304 	bic.w	r3, r3, #4
 800fd48:	b2da      	uxtb	r2, r3
 800fd4a:	69fb      	ldr	r3, [r7, #28]
 800fd4c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d13b      	bne.n	800fdcc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800fd54:	69fb      	ldr	r3, [r7, #28]
 800fd56:	6a1b      	ldr	r3, [r3, #32]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d106      	bne.n	800fd6a <err_tcp+0x126>
 800fd5c:	4b1e      	ldr	r3, [pc, #120]	@ (800fdd8 <err_tcp+0x194>)
 800fd5e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800fd62:	4920      	ldr	r1, [pc, #128]	@ (800fde4 <err_tcp+0x1a0>)
 800fd64:	481e      	ldr	r0, [pc, #120]	@ (800fde0 <err_tcp+0x19c>)
 800fd66:	f00d fb01 	bl	801d36c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800fd6a:	7dfb      	ldrb	r3, [r7, #23]
 800fd6c:	2b04      	cmp	r3, #4
 800fd6e:	d104      	bne.n	800fd7a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800fd70:	69fb      	ldr	r3, [r7, #28]
 800fd72:	6a1b      	ldr	r3, [r3, #32]
 800fd74:	2200      	movs	r2, #0
 800fd76:	711a      	strb	r2, [r3, #4]
 800fd78:	e003      	b.n	800fd82 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800fd7a:	69fb      	ldr	r3, [r7, #28]
 800fd7c:	6a1b      	ldr	r3, [r3, #32]
 800fd7e:	78fa      	ldrb	r2, [r7, #3]
 800fd80:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800fd82:	69fb      	ldr	r3, [r7, #28]
 800fd84:	6a1b      	ldr	r3, [r3, #32]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	330c      	adds	r3, #12
 800fd8a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800fd8c:	68b8      	ldr	r0, [r7, #8]
 800fd8e:	f00c faf1 	bl	801c374 <sys_sem_valid>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d106      	bne.n	800fda6 <err_tcp+0x162>
 800fd98:	4b0f      	ldr	r3, [pc, #60]	@ (800fdd8 <err_tcp+0x194>)
 800fd9a:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800fd9e:	4912      	ldr	r1, [pc, #72]	@ (800fde8 <err_tcp+0x1a4>)
 800fda0:	480f      	ldr	r0, [pc, #60]	@ (800fde0 <err_tcp+0x19c>)
 800fda2:	f00d fae3 	bl	801d36c <iprintf>
      conn->current_msg = NULL;
 800fda6:	69fb      	ldr	r3, [r7, #28]
 800fda8:	2200      	movs	r2, #0
 800fdaa:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800fdac:	68b8      	ldr	r0, [r7, #8]
 800fdae:	f00c fac7 	bl	801c340 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800fdb2:	e00b      	b.n	800fdcc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	6a1b      	ldr	r3, [r3, #32]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d008      	beq.n	800fdce <err_tcp+0x18a>
 800fdbc:	4b06      	ldr	r3, [pc, #24]	@ (800fdd8 <err_tcp+0x194>)
 800fdbe:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800fdc2:	490a      	ldr	r1, [pc, #40]	@ (800fdec <err_tcp+0x1a8>)
 800fdc4:	4806      	ldr	r0, [pc, #24]	@ (800fde0 <err_tcp+0x19c>)
 800fdc6:	f00d fad1 	bl	801d36c <iprintf>
  }
}
 800fdca:	e000      	b.n	800fdce <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800fdcc:	bf00      	nop
}
 800fdce:	bf00      	nop
 800fdd0:	3720      	adds	r7, #32
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	bd80      	pop	{r7, pc}
 800fdd6:	bf00      	nop
 800fdd8:	0801ea48 	.word	0x0801ea48
 800fddc:	0801eba0 	.word	0x0801eba0
 800fde0:	0801ea8c 	.word	0x0801ea8c
 800fde4:	0801ebb0 	.word	0x0801ebb0
 800fde8:	0801ebcc 	.word	0x0801ebcc
 800fdec:	0801ebe8 	.word	0x0801ebe8

0800fdf0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b084      	sub	sp, #16
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	685b      	ldr	r3, [r3, #4]
 800fdfc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800fdfe:	6879      	ldr	r1, [r7, #4]
 800fe00:	68f8      	ldr	r0, [r7, #12]
 800fe02:	f004 fda1 	bl	8014948 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800fe06:	490a      	ldr	r1, [pc, #40]	@ (800fe30 <setup_tcp+0x40>)
 800fe08:	68f8      	ldr	r0, [r7, #12]
 800fe0a:	f004 fdaf 	bl	801496c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800fe0e:	4909      	ldr	r1, [pc, #36]	@ (800fe34 <setup_tcp+0x44>)
 800fe10:	68f8      	ldr	r0, [r7, #12]
 800fe12:	f004 fdcd 	bl	80149b0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800fe16:	2202      	movs	r2, #2
 800fe18:	4907      	ldr	r1, [pc, #28]	@ (800fe38 <setup_tcp+0x48>)
 800fe1a:	68f8      	ldr	r0, [r7, #12]
 800fe1c:	f004 fe24 	bl	8014a68 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800fe20:	4906      	ldr	r1, [pc, #24]	@ (800fe3c <setup_tcp+0x4c>)
 800fe22:	68f8      	ldr	r0, [r7, #12]
 800fe24:	f004 fde6 	bl	80149f4 <tcp_err>
}
 800fe28:	bf00      	nop
 800fe2a:	3710      	adds	r7, #16
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	0800f9c9 	.word	0x0800f9c9
 800fe34:	0800fb9d 	.word	0x0800fb9d
 800fe38:	0800fad5 	.word	0x0800fad5
 800fe3c:	0800fc45 	.word	0x0800fc45

0800fe40 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800fe40:	b590      	push	{r4, r7, lr}
 800fe42:	b089      	sub	sp, #36	@ 0x24
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	60f8      	str	r0, [r7, #12]
 800fe48:	60b9      	str	r1, [r7, #8]
 800fe4a:	4613      	mov	r3, r2
 800fe4c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800fe52:	69fb      	ldr	r3, [r7, #28]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d102      	bne.n	800fe5e <accept_function+0x1e>
    return ERR_VAL;
 800fe58:	f06f 0305 	mvn.w	r3, #5
 800fe5c:	e0a1      	b.n	800ffa2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800fe5e:	69fb      	ldr	r3, [r7, #28]
 800fe60:	3314      	adds	r3, #20
 800fe62:	4618      	mov	r0, r3
 800fe64:	f00c f9f5 	bl	801c252 <sys_mbox_valid>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d102      	bne.n	800fe74 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800fe6e:	f06f 0305 	mvn.w	r3, #5
 800fe72:	e096      	b.n	800ffa2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d11b      	bne.n	800feb2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800fe7a:	69fb      	ldr	r3, [r7, #28]
 800fe7c:	f103 0414 	add.w	r4, r3, #20
 800fe80:	f06f 000c 	mvn.w	r0, #12
 800fe84:	f7ff fcb2 	bl	800f7ec <lwip_netconn_err_to_msg>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	4619      	mov	r1, r3
 800fe8c:	4620      	mov	r0, r4
 800fe8e:	f00c f96b 	bl	801c168 <sys_mbox_trypost>
 800fe92:	4603      	mov	r3, r0
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d109      	bne.n	800feac <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fe98:	69fb      	ldr	r3, [r7, #28]
 800fe9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d005      	beq.n	800feac <accept_function+0x6c>
 800fea0:	69fb      	ldr	r3, [r7, #28]
 800fea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fea4:	2200      	movs	r2, #0
 800fea6:	2100      	movs	r1, #0
 800fea8:	69f8      	ldr	r0, [r7, #28]
 800feaa:	4798      	blx	r3
    }
    return ERR_VAL;
 800feac:	f06f 0305 	mvn.w	r3, #5
 800feb0:	e077      	b.n	800ffa2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800feb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d006      	beq.n	800fec8 <accept_function+0x88>
 800feba:	4b3c      	ldr	r3, [pc, #240]	@ (800ffac <accept_function+0x16c>)
 800febc:	f240 222a 	movw	r2, #554	@ 0x22a
 800fec0:	493b      	ldr	r1, [pc, #236]	@ (800ffb0 <accept_function+0x170>)
 800fec2:	483c      	ldr	r0, [pc, #240]	@ (800ffb4 <accept_function+0x174>)
 800fec4:	f00d fa52 	bl	801d36c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800fec8:	69fb      	ldr	r3, [r7, #28]
 800feca:	781a      	ldrb	r2, [r3, #0]
 800fecc:	69fb      	ldr	r3, [r7, #28]
 800fece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fed0:	4619      	mov	r1, r3
 800fed2:	4610      	mov	r0, r2
 800fed4:	f000 f8f0 	bl	80100b8 <netconn_alloc>
 800fed8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800feda:	69bb      	ldr	r3, [r7, #24]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d11b      	bne.n	800ff18 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800fee0:	69fb      	ldr	r3, [r7, #28]
 800fee2:	f103 0414 	add.w	r4, r3, #20
 800fee6:	f06f 000c 	mvn.w	r0, #12
 800feea:	f7ff fc7f 	bl	800f7ec <lwip_netconn_err_to_msg>
 800feee:	4603      	mov	r3, r0
 800fef0:	4619      	mov	r1, r3
 800fef2:	4620      	mov	r0, r4
 800fef4:	f00c f938 	bl	801c168 <sys_mbox_trypost>
 800fef8:	4603      	mov	r3, r0
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d109      	bne.n	800ff12 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fefe:	69fb      	ldr	r3, [r7, #28]
 800ff00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d005      	beq.n	800ff12 <accept_function+0xd2>
 800ff06:	69fb      	ldr	r3, [r7, #28]
 800ff08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	2100      	movs	r1, #0
 800ff0e:	69f8      	ldr	r0, [r7, #28]
 800ff10:	4798      	blx	r3
    }
    return ERR_MEM;
 800ff12:	f04f 33ff 	mov.w	r3, #4294967295
 800ff16:	e044      	b.n	800ffa2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800ff18:	69bb      	ldr	r3, [r7, #24]
 800ff1a:	68ba      	ldr	r2, [r7, #8]
 800ff1c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800ff1e:	69b8      	ldr	r0, [r7, #24]
 800ff20:	f7ff ff66 	bl	800fdf0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800ff24:	69fb      	ldr	r3, [r7, #28]
 800ff26:	3314      	adds	r3, #20
 800ff28:	69b9      	ldr	r1, [r7, #24]
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f00c f91c 	bl	801c168 <sys_mbox_trypost>
 800ff30:	4603      	mov	r3, r0
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d02a      	beq.n	800ff8c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800ff36:	69bb      	ldr	r3, [r7, #24]
 800ff38:	685b      	ldr	r3, [r3, #4]
 800ff3a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800ff3c:	2100      	movs	r1, #0
 800ff3e:	6978      	ldr	r0, [r7, #20]
 800ff40:	f004 fd02 	bl	8014948 <tcp_arg>
    tcp_recv(pcb, NULL);
 800ff44:	2100      	movs	r1, #0
 800ff46:	6978      	ldr	r0, [r7, #20]
 800ff48:	f004 fd10 	bl	801496c <tcp_recv>
    tcp_sent(pcb, NULL);
 800ff4c:	2100      	movs	r1, #0
 800ff4e:	6978      	ldr	r0, [r7, #20]
 800ff50:	f004 fd2e 	bl	80149b0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800ff54:	2200      	movs	r2, #0
 800ff56:	2100      	movs	r1, #0
 800ff58:	6978      	ldr	r0, [r7, #20]
 800ff5a:	f004 fd85 	bl	8014a68 <tcp_poll>
    tcp_err(pcb, NULL);
 800ff5e:	2100      	movs	r1, #0
 800ff60:	6978      	ldr	r0, [r7, #20]
 800ff62:	f004 fd47 	bl	80149f4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800ff66:	69bb      	ldr	r3, [r7, #24]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800ff6c:	69bb      	ldr	r3, [r7, #24]
 800ff6e:	3310      	adds	r3, #16
 800ff70:	4618      	mov	r0, r3
 800ff72:	f00c f8e7 	bl	801c144 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800ff76:	69bb      	ldr	r3, [r7, #24]
 800ff78:	3310      	adds	r3, #16
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f00c f97a 	bl	801c274 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800ff80:	69b8      	ldr	r0, [r7, #24]
 800ff82:	f000 f907 	bl	8010194 <netconn_free>
    return ERR_MEM;
 800ff86:	f04f 33ff 	mov.w	r3, #4294967295
 800ff8a:	e00a      	b.n	800ffa2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ff8c:	69fb      	ldr	r3, [r7, #28]
 800ff8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d005      	beq.n	800ffa0 <accept_function+0x160>
 800ff94:	69fb      	ldr	r3, [r7, #28]
 800ff96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff98:	2200      	movs	r2, #0
 800ff9a:	2100      	movs	r1, #0
 800ff9c:	69f8      	ldr	r0, [r7, #28]
 800ff9e:	4798      	blx	r3
  }

  return ERR_OK;
 800ffa0:	2300      	movs	r3, #0
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3724      	adds	r7, #36	@ 0x24
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd90      	pop	{r4, r7, pc}
 800ffaa:	bf00      	nop
 800ffac:	0801ea48 	.word	0x0801ea48
 800ffb0:	0801ec04 	.word	0x0801ec04
 800ffb4:	0801ea8c 	.word	0x0801ea8c

0800ffb8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800ffb8:	b590      	push	{r4, r7, lr}
 800ffba:	b085      	sub	sp, #20
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	685b      	ldr	r3, [r3, #4]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d006      	beq.n	800ffdc <pcb_new+0x24>
 800ffce:	4b2b      	ldr	r3, [pc, #172]	@ (801007c <pcb_new+0xc4>)
 800ffd0:	f240 2265 	movw	r2, #613	@ 0x265
 800ffd4:	492a      	ldr	r1, [pc, #168]	@ (8010080 <pcb_new+0xc8>)
 800ffd6:	482b      	ldr	r0, [pc, #172]	@ (8010084 <pcb_new+0xcc>)
 800ffd8:	f00d f9c8 	bl	801d36c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ffe6:	2b10      	cmp	r3, #16
 800ffe8:	d022      	beq.n	8010030 <pcb_new+0x78>
 800ffea:	2b20      	cmp	r3, #32
 800ffec:	d133      	bne.n	8010056 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681c      	ldr	r4, [r3, #0]
 800fff2:	7bfb      	ldrb	r3, [r7, #15]
 800fff4:	4618      	mov	r0, r3
 800fff6:	f009 fd80 	bl	8019afa <udp_new_ip_type>
 800fffa:	4603      	mov	r3, r0
 800fffc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	685b      	ldr	r3, [r3, #4]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d02a      	beq.n	801005e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	781b      	ldrb	r3, [r3, #0]
 801000e:	2b22      	cmp	r3, #34	@ 0x22
 8010010:	d104      	bne.n	801001c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	2201      	movs	r2, #1
 801001a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	6858      	ldr	r0, [r3, #4]
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	461a      	mov	r2, r3
 8010028:	4917      	ldr	r1, [pc, #92]	@ (8010088 <pcb_new+0xd0>)
 801002a:	f009 fced 	bl	8019a08 <udp_recv>
      }
      break;
 801002e:	e016      	b.n	801005e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681c      	ldr	r4, [r3, #0]
 8010034:	7bfb      	ldrb	r3, [r7, #15]
 8010036:	4618      	mov	r0, r3
 8010038:	f004 fc78 	bl	801492c <tcp_new_ip_type>
 801003c:	4603      	mov	r3, r0
 801003e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	685b      	ldr	r3, [r3, #4]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d00b      	beq.n	8010062 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	4618      	mov	r0, r3
 8010050:	f7ff fece 	bl	800fdf0 <setup_tcp>
      }
      break;
 8010054:	e005      	b.n	8010062 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	22fa      	movs	r2, #250	@ 0xfa
 801005a:	711a      	strb	r2, [r3, #4]
      return;
 801005c:	e00a      	b.n	8010074 <pcb_new+0xbc>
      break;
 801005e:	bf00      	nop
 8010060:	e000      	b.n	8010064 <pcb_new+0xac>
      break;
 8010062:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	685b      	ldr	r3, [r3, #4]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d102      	bne.n	8010074 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	22ff      	movs	r2, #255	@ 0xff
 8010072:	711a      	strb	r2, [r3, #4]
  }
}
 8010074:	3714      	adds	r7, #20
 8010076:	46bd      	mov	sp, r7
 8010078:	bd90      	pop	{r4, r7, pc}
 801007a:	bf00      	nop
 801007c:	0801ea48 	.word	0x0801ea48
 8010080:	0801ec2c 	.word	0x0801ec2c
 8010084:	0801ea8c 	.word	0x0801ea8c
 8010088:	0800f8cd 	.word	0x0800f8cd

0801008c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b084      	sub	sp, #16
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	2200      	movs	r2, #0
 801009c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	685b      	ldr	r3, [r3, #4]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d102      	bne.n	80100ae <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80100a8:	68f8      	ldr	r0, [r7, #12]
 80100aa:	f7ff ff85 	bl	800ffb8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80100ae:	bf00      	nop
 80100b0:	3710      	adds	r7, #16
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}
	...

080100b8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b086      	sub	sp, #24
 80100bc:	af00      	add	r7, sp, #0
 80100be:	4603      	mov	r3, r0
 80100c0:	6039      	str	r1, [r7, #0]
 80100c2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80100c4:	2300      	movs	r3, #0
 80100c6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80100c8:	2007      	movs	r0, #7
 80100ca:	f001 fea3 	bl	8011e14 <memp_malloc>
 80100ce:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d101      	bne.n	80100da <netconn_alloc+0x22>
    return NULL;
 80100d6:	2300      	movs	r3, #0
 80100d8:	e052      	b.n	8010180 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	2200      	movs	r2, #0
 80100de:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	79fa      	ldrb	r2, [r7, #7]
 80100e4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	2200      	movs	r2, #0
 80100ea:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80100ec:	79fb      	ldrb	r3, [r7, #7]
 80100ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80100f2:	2b10      	cmp	r3, #16
 80100f4:	d004      	beq.n	8010100 <netconn_alloc+0x48>
 80100f6:	2b20      	cmp	r3, #32
 80100f8:	d105      	bne.n	8010106 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80100fa:	2306      	movs	r3, #6
 80100fc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80100fe:	e00a      	b.n	8010116 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8010100:	2306      	movs	r3, #6
 8010102:	617b      	str	r3, [r7, #20]
      break;
 8010104:	e007      	b.n	8010116 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8010106:	4b20      	ldr	r3, [pc, #128]	@ (8010188 <netconn_alloc+0xd0>)
 8010108:	f240 22e5 	movw	r2, #741	@ 0x2e5
 801010c:	491f      	ldr	r1, [pc, #124]	@ (801018c <netconn_alloc+0xd4>)
 801010e:	4820      	ldr	r0, [pc, #128]	@ (8010190 <netconn_alloc+0xd8>)
 8010110:	f00d f92c 	bl	801d36c <iprintf>
      goto free_and_return;
 8010114:	e02f      	b.n	8010176 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	3310      	adds	r3, #16
 801011a:	6979      	ldr	r1, [r7, #20]
 801011c:	4618      	mov	r0, r3
 801011e:	f00b ffef 	bl	801c100 <sys_mbox_new>
 8010122:	4603      	mov	r3, r0
 8010124:	2b00      	cmp	r3, #0
 8010126:	d125      	bne.n	8010174 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	330c      	adds	r3, #12
 801012c:	2100      	movs	r1, #0
 801012e:	4618      	mov	r0, r3
 8010130:	f00c f8ad 	bl	801c28e <sys_sem_new>
 8010134:	4603      	mov	r3, r0
 8010136:	2b00      	cmp	r3, #0
 8010138:	d005      	beq.n	8010146 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	3310      	adds	r3, #16
 801013e:	4618      	mov	r0, r3
 8010140:	f00c f800 	bl	801c144 <sys_mbox_free>
    goto free_and_return;
 8010144:	e017      	b.n	8010176 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	3314      	adds	r3, #20
 801014a:	4618      	mov	r0, r3
 801014c:	f00c f892 	bl	801c274 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	2200      	movs	r2, #0
 8010154:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	f04f 32ff 	mov.w	r2, #4294967295
 801015c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	683a      	ldr	r2, [r7, #0]
 8010162:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	2200      	movs	r2, #0
 8010168:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	7cfa      	ldrb	r2, [r7, #19]
 801016e:	771a      	strb	r2, [r3, #28]
  return conn;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	e005      	b.n	8010180 <netconn_alloc+0xc8>
    goto free_and_return;
 8010174:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8010176:	68f9      	ldr	r1, [r7, #12]
 8010178:	2007      	movs	r0, #7
 801017a:	f001 fec1 	bl	8011f00 <memp_free>
  return NULL;
 801017e:	2300      	movs	r3, #0
}
 8010180:	4618      	mov	r0, r3
 8010182:	3718      	adds	r7, #24
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}
 8010188:	0801ea48 	.word	0x0801ea48
 801018c:	0801ec4c 	.word	0x0801ec4c
 8010190:	0801ea8c 	.word	0x0801ea8c

08010194 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	685b      	ldr	r3, [r3, #4]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d006      	beq.n	80101b2 <netconn_free+0x1e>
 80101a4:	4b1b      	ldr	r3, [pc, #108]	@ (8010214 <netconn_free+0x80>)
 80101a6:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80101aa:	491b      	ldr	r1, [pc, #108]	@ (8010218 <netconn_free+0x84>)
 80101ac:	481b      	ldr	r0, [pc, #108]	@ (801021c <netconn_free+0x88>)
 80101ae:	f00d f8dd 	bl	801d36c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	3310      	adds	r3, #16
 80101b6:	4618      	mov	r0, r3
 80101b8:	f00c f84b 	bl	801c252 <sys_mbox_valid>
 80101bc:	4603      	mov	r3, r0
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d006      	beq.n	80101d0 <netconn_free+0x3c>
 80101c2:	4b14      	ldr	r3, [pc, #80]	@ (8010214 <netconn_free+0x80>)
 80101c4:	f240 3223 	movw	r2, #803	@ 0x323
 80101c8:	4915      	ldr	r1, [pc, #84]	@ (8010220 <netconn_free+0x8c>)
 80101ca:	4814      	ldr	r0, [pc, #80]	@ (801021c <netconn_free+0x88>)
 80101cc:	f00d f8ce 	bl	801d36c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	3314      	adds	r3, #20
 80101d4:	4618      	mov	r0, r3
 80101d6:	f00c f83c 	bl	801c252 <sys_mbox_valid>
 80101da:	4603      	mov	r3, r0
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d006      	beq.n	80101ee <netconn_free+0x5a>
 80101e0:	4b0c      	ldr	r3, [pc, #48]	@ (8010214 <netconn_free+0x80>)
 80101e2:	f240 3226 	movw	r2, #806	@ 0x326
 80101e6:	490f      	ldr	r1, [pc, #60]	@ (8010224 <netconn_free+0x90>)
 80101e8:	480c      	ldr	r0, [pc, #48]	@ (801021c <netconn_free+0x88>)
 80101ea:	f00d f8bf 	bl	801d36c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	330c      	adds	r3, #12
 80101f2:	4618      	mov	r0, r3
 80101f4:	f00c f8b1 	bl	801c35a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	330c      	adds	r3, #12
 80101fc:	4618      	mov	r0, r3
 80101fe:	f00c f8ca 	bl	801c396 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8010202:	6879      	ldr	r1, [r7, #4]
 8010204:	2007      	movs	r0, #7
 8010206:	f001 fe7b 	bl	8011f00 <memp_free>
}
 801020a:	bf00      	nop
 801020c:	3708      	adds	r7, #8
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}
 8010212:	bf00      	nop
 8010214:	0801ea48 	.word	0x0801ea48
 8010218:	0801ec74 	.word	0x0801ec74
 801021c:	0801ea8c 	.word	0x0801ea8c
 8010220:	0801eca4 	.word	0x0801eca4
 8010224:	0801ece0 	.word	0x0801ece0

08010228 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b086      	sub	sp, #24
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	3310      	adds	r3, #16
 8010234:	4618      	mov	r0, r3
 8010236:	f00c f80c 	bl	801c252 <sys_mbox_valid>
 801023a:	4603      	mov	r3, r0
 801023c:	2b00      	cmp	r3, #0
 801023e:	d02f      	beq.n	80102a0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010240:	e018      	b.n	8010274 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	781b      	ldrb	r3, [r3, #0]
 8010246:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801024a:	2b10      	cmp	r3, #16
 801024c:	d10e      	bne.n	801026c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 801024e:	693b      	ldr	r3, [r7, #16]
 8010250:	f107 020f 	add.w	r2, r7, #15
 8010254:	4611      	mov	r1, r2
 8010256:	4618      	mov	r0, r3
 8010258:	f7ff fafe 	bl	800f858 <lwip_netconn_is_err_msg>
 801025c:	4603      	mov	r3, r0
 801025e:	2b00      	cmp	r3, #0
 8010260:	d108      	bne.n	8010274 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	4618      	mov	r0, r3
 8010266:	f002 fcef 	bl	8012c48 <pbuf_free>
 801026a:	e003      	b.n	8010274 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 801026c:	693b      	ldr	r3, [r7, #16]
 801026e:	4618      	mov	r0, r3
 8010270:	f000 fe92 	bl	8010f98 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	3310      	adds	r3, #16
 8010278:	f107 0210 	add.w	r2, r7, #16
 801027c:	4611      	mov	r1, r2
 801027e:	4618      	mov	r0, r3
 8010280:	f00b ffcb 	bl	801c21a <sys_arch_mbox_tryfetch>
 8010284:	4603      	mov	r3, r0
 8010286:	f1b3 3fff 	cmp.w	r3, #4294967295
 801028a:	d1da      	bne.n	8010242 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	3310      	adds	r3, #16
 8010290:	4618      	mov	r0, r3
 8010292:	f00b ff57 	bl	801c144 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	3310      	adds	r3, #16
 801029a:	4618      	mov	r0, r3
 801029c:	f00b ffea 	bl	801c274 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	3314      	adds	r3, #20
 80102a4:	4618      	mov	r0, r3
 80102a6:	f00b ffd4 	bl	801c252 <sys_mbox_valid>
 80102aa:	4603      	mov	r3, r0
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d034      	beq.n	801031a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80102b0:	e01d      	b.n	80102ee <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80102b2:	693b      	ldr	r3, [r7, #16]
 80102b4:	f107 020e 	add.w	r2, r7, #14
 80102b8:	4611      	mov	r1, r2
 80102ba:	4618      	mov	r0, r3
 80102bc:	f7ff facc 	bl	800f858 <lwip_netconn_is_err_msg>
 80102c0:	4603      	mov	r3, r0
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d113      	bne.n	80102ee <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80102ca:	6978      	ldr	r0, [r7, #20]
 80102cc:	f7ff ffac 	bl	8010228 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	685b      	ldr	r3, [r3, #4]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d007      	beq.n	80102e8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	4618      	mov	r0, r3
 80102de:	f003 faa3 	bl	8013828 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	2200      	movs	r2, #0
 80102e6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80102e8:	6978      	ldr	r0, [r7, #20]
 80102ea:	f7ff ff53 	bl	8010194 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	3314      	adds	r3, #20
 80102f2:	f107 0210 	add.w	r2, r7, #16
 80102f6:	4611      	mov	r1, r2
 80102f8:	4618      	mov	r0, r3
 80102fa:	f00b ff8e 	bl	801c21a <sys_arch_mbox_tryfetch>
 80102fe:	4603      	mov	r3, r0
 8010300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010304:	d1d5      	bne.n	80102b2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	3314      	adds	r3, #20
 801030a:	4618      	mov	r0, r3
 801030c:	f00b ff1a 	bl	801c144 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	3314      	adds	r3, #20
 8010314:	4618      	mov	r0, r3
 8010316:	f00b ffad 	bl	801c274 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 801031a:	bf00      	nop
 801031c:	3718      	adds	r7, #24
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}
	...

08010324 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b086      	sub	sp, #24
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
 801032c:	460b      	mov	r3, r1
 801032e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8010330:	2300      	movs	r3, #0
 8010332:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d106      	bne.n	8010348 <lwip_netconn_do_close_internal+0x24>
 801033a:	4b87      	ldr	r3, [pc, #540]	@ (8010558 <lwip_netconn_do_close_internal+0x234>)
 801033c:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8010340:	4986      	ldr	r1, [pc, #536]	@ (801055c <lwip_netconn_do_close_internal+0x238>)
 8010342:	4887      	ldr	r0, [pc, #540]	@ (8010560 <lwip_netconn_do_close_internal+0x23c>)
 8010344:	f00d f812 	bl	801d36c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010350:	2b10      	cmp	r3, #16
 8010352:	d006      	beq.n	8010362 <lwip_netconn_do_close_internal+0x3e>
 8010354:	4b80      	ldr	r3, [pc, #512]	@ (8010558 <lwip_netconn_do_close_internal+0x234>)
 8010356:	f240 32a3 	movw	r2, #931	@ 0x3a3
 801035a:	4982      	ldr	r1, [pc, #520]	@ (8010564 <lwip_netconn_do_close_internal+0x240>)
 801035c:	4880      	ldr	r0, [pc, #512]	@ (8010560 <lwip_netconn_do_close_internal+0x23c>)
 801035e:	f00d f805 	bl	801d36c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	785b      	ldrb	r3, [r3, #1]
 8010366:	2b04      	cmp	r3, #4
 8010368:	d006      	beq.n	8010378 <lwip_netconn_do_close_internal+0x54>
 801036a:	4b7b      	ldr	r3, [pc, #492]	@ (8010558 <lwip_netconn_do_close_internal+0x234>)
 801036c:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8010370:	497d      	ldr	r1, [pc, #500]	@ (8010568 <lwip_netconn_do_close_internal+0x244>)
 8010372:	487b      	ldr	r0, [pc, #492]	@ (8010560 <lwip_netconn_do_close_internal+0x23c>)
 8010374:	f00c fffa 	bl	801d36c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d106      	bne.n	801038e <lwip_netconn_do_close_internal+0x6a>
 8010380:	4b75      	ldr	r3, [pc, #468]	@ (8010558 <lwip_netconn_do_close_internal+0x234>)
 8010382:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8010386:	4979      	ldr	r1, [pc, #484]	@ (801056c <lwip_netconn_do_close_internal+0x248>)
 8010388:	4875      	ldr	r0, [pc, #468]	@ (8010560 <lwip_netconn_do_close_internal+0x23c>)
 801038a:	f00c ffef 	bl	801d36c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6a1b      	ldr	r3, [r3, #32]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d106      	bne.n	80103a4 <lwip_netconn_do_close_internal+0x80>
 8010396:	4b70      	ldr	r3, [pc, #448]	@ (8010558 <lwip_netconn_do_close_internal+0x234>)
 8010398:	f240 32a6 	movw	r2, #934	@ 0x3a6
 801039c:	4974      	ldr	r1, [pc, #464]	@ (8010570 <lwip_netconn_do_close_internal+0x24c>)
 801039e:	4870      	ldr	r0, [pc, #448]	@ (8010560 <lwip_netconn_do_close_internal+0x23c>)
 80103a0:	f00c ffe4 	bl	801d36c <iprintf>

  tpcb = conn->pcb.tcp;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	685b      	ldr	r3, [r3, #4]
 80103a8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6a1b      	ldr	r3, [r3, #32]
 80103ae:	7a1b      	ldrb	r3, [r3, #8]
 80103b0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80103b2:	7bfb      	ldrb	r3, [r7, #15]
 80103b4:	f003 0301 	and.w	r3, r3, #1
 80103b8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80103ba:	7bfb      	ldrb	r3, [r7, #15]
 80103bc:	f003 0302 	and.w	r3, r3, #2
 80103c0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80103c2:	7bfb      	ldrb	r3, [r7, #15]
 80103c4:	2b03      	cmp	r3, #3
 80103c6:	d102      	bne.n	80103ce <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80103c8:	2301      	movs	r3, #1
 80103ca:	75bb      	strb	r3, [r7, #22]
 80103cc:	e01f      	b.n	801040e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80103ce:	7bbb      	ldrb	r3, [r7, #14]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d00e      	beq.n	80103f2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80103d8:	2b05      	cmp	r3, #5
 80103da:	d007      	beq.n	80103ec <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80103e0:	2b06      	cmp	r3, #6
 80103e2:	d003      	beq.n	80103ec <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80103e8:	2b08      	cmp	r3, #8
 80103ea:	d102      	bne.n	80103f2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80103ec:	2301      	movs	r3, #1
 80103ee:	75bb      	strb	r3, [r7, #22]
 80103f0:	e00d      	b.n	801040e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80103f2:	7b7b      	ldrb	r3, [r7, #13]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d008      	beq.n	801040a <lwip_netconn_do_close_internal+0xe6>
 80103f8:	693b      	ldr	r3, [r7, #16]
 80103fa:	8b5b      	ldrh	r3, [r3, #26]
 80103fc:	f003 0310 	and.w	r3, r3, #16
 8010400:	2b00      	cmp	r3, #0
 8010402:	d002      	beq.n	801040a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8010404:	2301      	movs	r3, #1
 8010406:	75bb      	strb	r3, [r7, #22]
 8010408:	e001      	b.n	801040e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 801040a:	2300      	movs	r3, #0
 801040c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 801040e:	7dbb      	ldrb	r3, [r7, #22]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d003      	beq.n	801041c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8010414:	2100      	movs	r1, #0
 8010416:	6938      	ldr	r0, [r7, #16]
 8010418:	f004 fa96 	bl	8014948 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 801041c:	693b      	ldr	r3, [r7, #16]
 801041e:	7d1b      	ldrb	r3, [r3, #20]
 8010420:	2b01      	cmp	r3, #1
 8010422:	d104      	bne.n	801042e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8010424:	2100      	movs	r1, #0
 8010426:	6938      	ldr	r0, [r7, #16]
 8010428:	f004 fb06 	bl	8014a38 <tcp_accept>
 801042c:	e01d      	b.n	801046a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 801042e:	7bbb      	ldrb	r3, [r7, #14]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d007      	beq.n	8010444 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8010434:	2100      	movs	r1, #0
 8010436:	6938      	ldr	r0, [r7, #16]
 8010438:	f004 fa98 	bl	801496c <tcp_recv>
      tcp_accept(tpcb, NULL);
 801043c:	2100      	movs	r1, #0
 801043e:	6938      	ldr	r0, [r7, #16]
 8010440:	f004 fafa 	bl	8014a38 <tcp_accept>
    }
    if (shut_tx) {
 8010444:	7b7b      	ldrb	r3, [r7, #13]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d003      	beq.n	8010452 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 801044a:	2100      	movs	r1, #0
 801044c:	6938      	ldr	r0, [r7, #16]
 801044e:	f004 faaf 	bl	80149b0 <tcp_sent>
    }
    if (shut_close) {
 8010452:	7dbb      	ldrb	r3, [r7, #22]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d008      	beq.n	801046a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8010458:	2200      	movs	r2, #0
 801045a:	2100      	movs	r1, #0
 801045c:	6938      	ldr	r0, [r7, #16]
 801045e:	f004 fb03 	bl	8014a68 <tcp_poll>
      tcp_err(tpcb, NULL);
 8010462:	2100      	movs	r1, #0
 8010464:	6938      	ldr	r0, [r7, #16]
 8010466:	f004 fac5 	bl	80149f4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 801046a:	7dbb      	ldrb	r3, [r7, #22]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d005      	beq.n	801047c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8010470:	6938      	ldr	r0, [r7, #16]
 8010472:	f003 f893 	bl	801359c <tcp_close>
 8010476:	4603      	mov	r3, r0
 8010478:	75fb      	strb	r3, [r7, #23]
 801047a:	e007      	b.n	801048c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 801047c:	7bbb      	ldrb	r3, [r7, #14]
 801047e:	7b7a      	ldrb	r2, [r7, #13]
 8010480:	4619      	mov	r1, r3
 8010482:	6938      	ldr	r0, [r7, #16]
 8010484:	f003 f8b6 	bl	80135f4 <tcp_shutdown>
 8010488:	4603      	mov	r3, r0
 801048a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 801048c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d102      	bne.n	801049a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8010494:	2301      	movs	r3, #1
 8010496:	757b      	strb	r3, [r7, #21]
 8010498:	e016      	b.n	80104c8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 801049a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801049e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104a2:	d10f      	bne.n	80104c4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	6a1b      	ldr	r3, [r3, #32]
 80104a8:	7a5b      	ldrb	r3, [r3, #9]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d10c      	bne.n	80104c8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80104ae:	2301      	movs	r3, #1
 80104b0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80104b2:	7dbb      	ldrb	r3, [r7, #22]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d007      	beq.n	80104c8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80104b8:	6938      	ldr	r0, [r7, #16]
 80104ba:	f003 f9b5 	bl	8013828 <tcp_abort>
          err = ERR_OK;
 80104be:	2300      	movs	r3, #0
 80104c0:	75fb      	strb	r3, [r7, #23]
 80104c2:	e001      	b.n	80104c8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80104c4:	2301      	movs	r3, #1
 80104c6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80104c8:	7d7b      	ldrb	r3, [r7, #21]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d052      	beq.n	8010574 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6a1b      	ldr	r3, [r3, #32]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	330c      	adds	r3, #12
 80104d6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	6a1b      	ldr	r3, [r3, #32]
 80104dc:	7dfa      	ldrb	r2, [r7, #23]
 80104de:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2200      	movs	r2, #0
 80104e4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	2200      	movs	r2, #0
 80104ea:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80104ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d129      	bne.n	8010548 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80104f4:	7dbb      	ldrb	r3, [r7, #22]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d00c      	beq.n	8010514 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2200      	movs	r2, #0
 80104fe:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010504:	2b00      	cmp	r3, #0
 8010506:	d005      	beq.n	8010514 <lwip_netconn_do_close_internal+0x1f0>
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801050c:	2200      	movs	r2, #0
 801050e:	2104      	movs	r1, #4
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	4798      	blx	r3
      }
      if (shut_rx) {
 8010514:	7bbb      	ldrb	r3, [r7, #14]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d009      	beq.n	801052e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801051e:	2b00      	cmp	r3, #0
 8010520:	d005      	beq.n	801052e <lwip_netconn_do_close_internal+0x20a>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010526:	2200      	movs	r2, #0
 8010528:	2100      	movs	r1, #0
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	4798      	blx	r3
      }
      if (shut_tx) {
 801052e:	7b7b      	ldrb	r3, [r7, #13]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d009      	beq.n	8010548 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010538:	2b00      	cmp	r3, #0
 801053a:	d005      	beq.n	8010548 <lwip_netconn_do_close_internal+0x224>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010540:	2200      	movs	r2, #0
 8010542:	2102      	movs	r1, #2
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8010548:	78fb      	ldrb	r3, [r7, #3]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d002      	beq.n	8010554 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 801054e:	68b8      	ldr	r0, [r7, #8]
 8010550:	f00b fef6 	bl	801c340 <sys_sem_signal>
    }
    return ERR_OK;
 8010554:	2300      	movs	r3, #0
 8010556:	e03c      	b.n	80105d2 <lwip_netconn_do_close_internal+0x2ae>
 8010558:	0801ea48 	.word	0x0801ea48
 801055c:	0801ed1c 	.word	0x0801ed1c
 8010560:	0801ea8c 	.word	0x0801ea8c
 8010564:	0801ed2c 	.word	0x0801ed2c
 8010568:	0801ed4c 	.word	0x0801ed4c
 801056c:	0801ed70 	.word	0x0801ed70
 8010570:	0801ebb0 	.word	0x0801ebb0
  }
  if (!close_finished) {
 8010574:	7d7b      	ldrb	r3, [r7, #21]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d11e      	bne.n	80105b8 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	7d1b      	ldrb	r3, [r3, #20]
 801057e:	2b01      	cmp	r3, #1
 8010580:	d106      	bne.n	8010590 <lwip_netconn_do_close_internal+0x26c>
 8010582:	4b16      	ldr	r3, [pc, #88]	@ (80105dc <lwip_netconn_do_close_internal+0x2b8>)
 8010584:	f240 4241 	movw	r2, #1089	@ 0x441
 8010588:	4915      	ldr	r1, [pc, #84]	@ (80105e0 <lwip_netconn_do_close_internal+0x2bc>)
 801058a:	4816      	ldr	r0, [pc, #88]	@ (80105e4 <lwip_netconn_do_close_internal+0x2c0>)
 801058c:	f00c feee 	bl	801d36c <iprintf>
    if (shut_tx) {
 8010590:	7b7b      	ldrb	r3, [r7, #13]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d003      	beq.n	801059e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8010596:	4914      	ldr	r1, [pc, #80]	@ (80105e8 <lwip_netconn_do_close_internal+0x2c4>)
 8010598:	6938      	ldr	r0, [r7, #16]
 801059a:	f004 fa09 	bl	80149b0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 801059e:	2201      	movs	r2, #1
 80105a0:	4912      	ldr	r1, [pc, #72]	@ (80105ec <lwip_netconn_do_close_internal+0x2c8>)
 80105a2:	6938      	ldr	r0, [r7, #16]
 80105a4:	f004 fa60 	bl	8014a68 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80105a8:	4911      	ldr	r1, [pc, #68]	@ (80105f0 <lwip_netconn_do_close_internal+0x2cc>)
 80105aa:	6938      	ldr	r0, [r7, #16]
 80105ac:	f004 fa22 	bl	80149f4 <tcp_err>
    tcp_arg(tpcb, conn);
 80105b0:	6879      	ldr	r1, [r7, #4]
 80105b2:	6938      	ldr	r0, [r7, #16]
 80105b4:	f004 f9c8 	bl	8014948 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80105b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d106      	bne.n	80105ce <lwip_netconn_do_close_internal+0x2aa>
 80105c0:	4b06      	ldr	r3, [pc, #24]	@ (80105dc <lwip_netconn_do_close_internal+0x2b8>)
 80105c2:	f240 424d 	movw	r2, #1101	@ 0x44d
 80105c6:	490b      	ldr	r1, [pc, #44]	@ (80105f4 <lwip_netconn_do_close_internal+0x2d0>)
 80105c8:	4806      	ldr	r0, [pc, #24]	@ (80105e4 <lwip_netconn_do_close_internal+0x2c0>)
 80105ca:	f00c fecf 	bl	801d36c <iprintf>
  return err;
 80105ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3718      	adds	r7, #24
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}
 80105da:	bf00      	nop
 80105dc:	0801ea48 	.word	0x0801ea48
 80105e0:	0801ed84 	.word	0x0801ed84
 80105e4:	0801ea8c 	.word	0x0801ea8c
 80105e8:	0800fb9d 	.word	0x0800fb9d
 80105ec:	0800fad5 	.word	0x0800fad5
 80105f0:	0800fc45 	.word	0x0800fc45
 80105f4:	0801eda8 	.word	0x0801eda8

080105f8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b084      	sub	sp, #16
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	785b      	ldrb	r3, [r3, #1]
 801060a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 801060c:	7afb      	ldrb	r3, [r7, #11]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d00d      	beq.n	801062e <lwip_netconn_do_delconn+0x36>
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	781b      	ldrb	r3, [r3, #0]
 8010618:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801061c:	2b10      	cmp	r3, #16
 801061e:	d006      	beq.n	801062e <lwip_netconn_do_delconn+0x36>
 8010620:	4b60      	ldr	r3, [pc, #384]	@ (80107a4 <lwip_netconn_do_delconn+0x1ac>)
 8010622:	f240 425e 	movw	r2, #1118	@ 0x45e
 8010626:	4960      	ldr	r1, [pc, #384]	@ (80107a8 <lwip_netconn_do_delconn+0x1b0>)
 8010628:	4860      	ldr	r0, [pc, #384]	@ (80107ac <lwip_netconn_do_delconn+0x1b4>)
 801062a:	f00c fe9f 	bl	801d36c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 801062e:	7afb      	ldrb	r3, [r7, #11]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d005      	beq.n	8010640 <lwip_netconn_do_delconn+0x48>
 8010634:	7afb      	ldrb	r3, [r7, #11]
 8010636:	2b02      	cmp	r3, #2
 8010638:	d002      	beq.n	8010640 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 801063a:	7afb      	ldrb	r3, [r7, #11]
 801063c:	2b03      	cmp	r3, #3
 801063e:	d109      	bne.n	8010654 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8010640:	7afb      	ldrb	r3, [r7, #11]
 8010642:	2b03      	cmp	r3, #3
 8010644:	d10a      	bne.n	801065c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	7f1b      	ldrb	r3, [r3, #28]
 801064c:	f003 0304 	and.w	r3, r3, #4
 8010650:	2b00      	cmp	r3, #0
 8010652:	d103      	bne.n	801065c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	22fb      	movs	r2, #251	@ 0xfb
 8010658:	711a      	strb	r2, [r3, #4]
 801065a:	e097      	b.n	801078c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 801065c:	7afb      	ldrb	r3, [r7, #11]
 801065e:	2b03      	cmp	r3, #3
 8010660:	d10d      	bne.n	801067e <lwip_netconn_do_delconn+0x86>
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	7f1b      	ldrb	r3, [r3, #28]
 8010668:	f003 0304 	and.w	r3, r3, #4
 801066c:	2b00      	cmp	r3, #0
 801066e:	d106      	bne.n	801067e <lwip_netconn_do_delconn+0x86>
 8010670:	4b4c      	ldr	r3, [pc, #304]	@ (80107a4 <lwip_netconn_do_delconn+0x1ac>)
 8010672:	f240 427a 	movw	r2, #1146	@ 0x47a
 8010676:	494e      	ldr	r1, [pc, #312]	@ (80107b0 <lwip_netconn_do_delconn+0x1b8>)
 8010678:	484c      	ldr	r0, [pc, #304]	@ (80107ac <lwip_netconn_do_delconn+0x1b4>)
 801067a:	f00c fe77 	bl	801d36c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	2200      	movs	r2, #0
 8010682:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	4618      	mov	r0, r3
 801068a:	f7ff fdcd 	bl	8010228 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	685b      	ldr	r3, [r3, #4]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d05f      	beq.n	8010758 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	781b      	ldrb	r3, [r3, #0]
 801069e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80106a2:	2b10      	cmp	r3, #16
 80106a4:	d00d      	beq.n	80106c2 <lwip_netconn_do_delconn+0xca>
 80106a6:	2b20      	cmp	r3, #32
 80106a8:	d151      	bne.n	801074e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	685b      	ldr	r3, [r3, #4]
 80106b0:	2200      	movs	r2, #0
 80106b2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	685b      	ldr	r3, [r3, #4]
 80106ba:	4618      	mov	r0, r3
 80106bc:	f009 f9c4 	bl	8019a48 <udp_remove>
          break;
 80106c0:	e046      	b.n	8010750 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	6a1b      	ldr	r3, [r3, #32]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d006      	beq.n	80106da <lwip_netconn_do_delconn+0xe2>
 80106cc:	4b35      	ldr	r3, [pc, #212]	@ (80107a4 <lwip_netconn_do_delconn+0x1ac>)
 80106ce:	f240 4294 	movw	r2, #1172	@ 0x494
 80106d2:	4938      	ldr	r1, [pc, #224]	@ (80107b4 <lwip_netconn_do_delconn+0x1bc>)
 80106d4:	4835      	ldr	r0, [pc, #212]	@ (80107ac <lwip_netconn_do_delconn+0x1b4>)
 80106d6:	f00c fe49 	bl	801d36c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	2204      	movs	r2, #4
 80106e0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	2203      	movs	r2, #3
 80106e6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	68fa      	ldr	r2, [r7, #12]
 80106ee:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	2100      	movs	r1, #0
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7ff fe14 	bl	8010324 <lwip_netconn_do_close_internal>
 80106fc:	4603      	mov	r3, r0
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d04b      	beq.n	801079a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	785b      	ldrb	r3, [r3, #1]
 8010708:	2b04      	cmp	r3, #4
 801070a:	d006      	beq.n	801071a <lwip_netconn_do_delconn+0x122>
 801070c:	4b25      	ldr	r3, [pc, #148]	@ (80107a4 <lwip_netconn_do_delconn+0x1ac>)
 801070e:	f240 429a 	movw	r2, #1178	@ 0x49a
 8010712:	4929      	ldr	r1, [pc, #164]	@ (80107b8 <lwip_netconn_do_delconn+0x1c0>)
 8010714:	4825      	ldr	r0, [pc, #148]	@ (80107ac <lwip_netconn_do_delconn+0x1b4>)
 8010716:	f00c fe29 	bl	801d36c <iprintf>
            UNLOCK_TCPIP_CORE();
 801071a:	4828      	ldr	r0, [pc, #160]	@ (80107bc <lwip_netconn_do_delconn+0x1c4>)
 801071c:	f00b fe81 	bl	801c422 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	330c      	adds	r3, #12
 8010726:	2100      	movs	r1, #0
 8010728:	4618      	mov	r0, r3
 801072a:	f00b fdd8 	bl	801c2de <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 801072e:	4823      	ldr	r0, [pc, #140]	@ (80107bc <lwip_netconn_do_delconn+0x1c4>)
 8010730:	f00b fe68 	bl	801c404 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	785b      	ldrb	r3, [r3, #1]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d02d      	beq.n	801079a <lwip_netconn_do_delconn+0x1a2>
 801073e:	4b19      	ldr	r3, [pc, #100]	@ (80107a4 <lwip_netconn_do_delconn+0x1ac>)
 8010740:	f240 429e 	movw	r2, #1182	@ 0x49e
 8010744:	491c      	ldr	r1, [pc, #112]	@ (80107b8 <lwip_netconn_do_delconn+0x1c0>)
 8010746:	4819      	ldr	r0, [pc, #100]	@ (80107ac <lwip_netconn_do_delconn+0x1b4>)
 8010748:	f00c fe10 	bl	801d36c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 801074c:	e025      	b.n	801079a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 801074e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	2200      	movs	r2, #0
 8010756:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801075e:	2b00      	cmp	r3, #0
 8010760:	d007      	beq.n	8010772 <lwip_netconn_do_delconn+0x17a>
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010768:	68fa      	ldr	r2, [r7, #12]
 801076a:	6810      	ldr	r0, [r2, #0]
 801076c:	2200      	movs	r2, #0
 801076e:	2100      	movs	r1, #0
 8010770:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010778:	2b00      	cmp	r3, #0
 801077a:	d007      	beq.n	801078c <lwip_netconn_do_delconn+0x194>
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010782:	68fa      	ldr	r2, [r7, #12]
 8010784:	6810      	ldr	r0, [r2, #0]
 8010786:	2200      	movs	r2, #0
 8010788:	2102      	movs	r1, #2
 801078a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	330c      	adds	r3, #12
 8010792:	4618      	mov	r0, r3
 8010794:	f00b fdee 	bl	801c374 <sys_sem_valid>
 8010798:	e000      	b.n	801079c <lwip_netconn_do_delconn+0x1a4>
          return;
 801079a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 801079c:	3710      	adds	r7, #16
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	bf00      	nop
 80107a4:	0801ea48 	.word	0x0801ea48
 80107a8:	0801edb8 	.word	0x0801edb8
 80107ac:	0801ea8c 	.word	0x0801ea8c
 80107b0:	0801edcc 	.word	0x0801edcc
 80107b4:	0801edec 	.word	0x0801edec
 80107b8:	0801ee08 	.word	0x0801ee08
 80107bc:	2000b358 	.word	0x2000b358

080107c0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b084      	sub	sp, #16
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	685b      	ldr	r3, [r3, #4]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d025      	beq.n	8010822 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	781b      	ldrb	r3, [r3, #0]
 80107dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80107e0:	2b10      	cmp	r3, #16
 80107e2:	d00e      	beq.n	8010802 <lwip_netconn_do_bind+0x42>
 80107e4:	2b20      	cmp	r3, #32
 80107e6:	d119      	bne.n	801081c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	6858      	ldr	r0, [r3, #4]
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	6899      	ldr	r1, [r3, #8]
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	899b      	ldrh	r3, [r3, #12]
 80107f6:	461a      	mov	r2, r3
 80107f8:	f009 f87e 	bl	80198f8 <udp_bind>
 80107fc:	4603      	mov	r3, r0
 80107fe:	73fb      	strb	r3, [r7, #15]
        break;
 8010800:	e011      	b.n	8010826 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	6858      	ldr	r0, [r3, #4]
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	6899      	ldr	r1, [r3, #8]
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	899b      	ldrh	r3, [r3, #12]
 8010810:	461a      	mov	r2, r3
 8010812:	f003 f815 	bl	8013840 <tcp_bind>
 8010816:	4603      	mov	r3, r0
 8010818:	73fb      	strb	r3, [r7, #15]
        break;
 801081a:	e004      	b.n	8010826 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 801081c:	23fa      	movs	r3, #250	@ 0xfa
 801081e:	73fb      	strb	r3, [r7, #15]
        break;
 8010820:	e001      	b.n	8010826 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8010822:	23fa      	movs	r3, #250	@ 0xfa
 8010824:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8010826:	68bb      	ldr	r3, [r7, #8]
 8010828:	7bfa      	ldrb	r2, [r7, #15]
 801082a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801082c:	bf00      	nop
 801082e:	3710      	adds	r7, #16
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b086      	sub	sp, #24
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d07f      	beq.n	801094a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	781b      	ldrb	r3, [r3, #0]
 8010850:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010854:	2b10      	cmp	r3, #16
 8010856:	d175      	bne.n	8010944 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8010858:	697b      	ldr	r3, [r7, #20]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	785b      	ldrb	r3, [r3, #1]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d165      	bne.n	801092e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8010862:	697b      	ldr	r3, [r7, #20]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	685b      	ldr	r3, [r3, #4]
 8010868:	7d1b      	ldrb	r3, [r3, #20]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d002      	beq.n	8010874 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 801086e:	23fa      	movs	r3, #250	@ 0xfa
 8010870:	72fb      	strb	r3, [r7, #11]
 8010872:	e06c      	b.n	801094e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8010874:	23ff      	movs	r3, #255	@ 0xff
 8010876:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	f107 020b 	add.w	r2, r7, #11
 8010882:	7cf9      	ldrb	r1, [r7, #19]
 8010884:	4618      	mov	r0, r3
 8010886:	f003 f893 	bl	80139b0 <tcp_listen_with_backlog_and_err>
 801088a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d05d      	beq.n	801094e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	3310      	adds	r3, #16
 8010898:	4618      	mov	r0, r3
 801089a:	f00b fcda 	bl	801c252 <sys_mbox_valid>
 801089e:	4603      	mov	r3, r0
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d00b      	beq.n	80108bc <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	3310      	adds	r3, #16
 80108aa:	4618      	mov	r0, r3
 80108ac:	f00b fc4a 	bl	801c144 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	3310      	adds	r3, #16
 80108b6:	4618      	mov	r0, r3
 80108b8:	f00b fcdc 	bl	801c274 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80108bc:	2300      	movs	r3, #0
 80108be:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	3314      	adds	r3, #20
 80108c6:	4618      	mov	r0, r3
 80108c8:	f00b fcc3 	bl	801c252 <sys_mbox_valid>
 80108cc:	4603      	mov	r3, r0
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d108      	bne.n	80108e4 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	3314      	adds	r3, #20
 80108d8:	2106      	movs	r1, #6
 80108da:	4618      	mov	r0, r3
 80108dc:	f00b fc10 	bl	801c100 <sys_mbox_new>
 80108e0:	4603      	mov	r3, r0
 80108e2:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 80108e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d118      	bne.n	801091e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	2202      	movs	r2, #2
 80108f2:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	68fa      	ldr	r2, [r7, #12]
 80108fa:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	685a      	ldr	r2, [r3, #4]
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	4619      	mov	r1, r3
 8010908:	4610      	mov	r0, r2
 801090a:	f004 f81d 	bl	8014948 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	685b      	ldr	r3, [r3, #4]
 8010914:	4912      	ldr	r1, [pc, #72]	@ (8010960 <lwip_netconn_do_listen+0x12c>)
 8010916:	4618      	mov	r0, r3
 8010918:	f004 f88e 	bl	8014a38 <tcp_accept>
 801091c:	e017      	b.n	801094e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 801091e:	68f8      	ldr	r0, [r7, #12]
 8010920:	f002 fe3c 	bl	801359c <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8010924:	697b      	ldr	r3, [r7, #20]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	2200      	movs	r2, #0
 801092a:	605a      	str	r2, [r3, #4]
 801092c:	e00f      	b.n	801094e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	785b      	ldrb	r3, [r3, #1]
 8010934:	2b02      	cmp	r3, #2
 8010936:	d102      	bne.n	801093e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8010938:	2300      	movs	r3, #0
 801093a:	72fb      	strb	r3, [r7, #11]
 801093c:	e007      	b.n	801094e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 801093e:	23f5      	movs	r3, #245	@ 0xf5
 8010940:	72fb      	strb	r3, [r7, #11]
 8010942:	e004      	b.n	801094e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8010944:	23f0      	movs	r3, #240	@ 0xf0
 8010946:	72fb      	strb	r3, [r7, #11]
 8010948:	e001      	b.n	801094e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 801094a:	23f5      	movs	r3, #245	@ 0xf5
 801094c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 801094e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8010956:	bf00      	nop
 8010958:	3718      	adds	r7, #24
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}
 801095e:	bf00      	nop
 8010960:	0800fe41 	.word	0x0800fe41

08010964 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b086      	sub	sp, #24
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8010970:	693b      	ldr	r3, [r7, #16]
 8010972:	2200      	movs	r2, #0
 8010974:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8010976:	693b      	ldr	r3, [r7, #16]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	685b      	ldr	r3, [r3, #4]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d022      	beq.n	80109c6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	781b      	ldrb	r3, [r3, #0]
 8010986:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801098a:	2b10      	cmp	r3, #16
 801098c:	d11b      	bne.n	80109c6 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 801098e:	693b      	ldr	r3, [r7, #16]
 8010990:	689b      	ldr	r3, [r3, #8]
 8010992:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801099a:	d202      	bcs.n	80109a2 <lwip_netconn_do_recv+0x3e>
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	b29b      	uxth	r3, r3
 80109a0:	e001      	b.n	80109a6 <lwip_netconn_do_recv+0x42>
 80109a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80109a6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80109a8:	693b      	ldr	r3, [r7, #16]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	685b      	ldr	r3, [r3, #4]
 80109ae:	89fa      	ldrh	r2, [r7, #14]
 80109b0:	4611      	mov	r1, r2
 80109b2:	4618      	mov	r0, r3
 80109b4:	f003 f900 	bl	8013bb8 <tcp_recved>
        remaining -= recved;
 80109b8:	89fb      	ldrh	r3, [r7, #14]
 80109ba:	697a      	ldr	r2, [r7, #20]
 80109bc:	1ad3      	subs	r3, r2, r3
 80109be:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d1e6      	bne.n	8010994 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 80109c6:	bf00      	nop
 80109c8:	3718      	adds	r7, #24
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
	...

080109d0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b088      	sub	sp, #32
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	460b      	mov	r3, r1
 80109da:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80109dc:	2300      	movs	r3, #0
 80109de:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d106      	bne.n	80109f4 <lwip_netconn_do_writemore+0x24>
 80109e6:	4b96      	ldr	r3, [pc, #600]	@ (8010c40 <lwip_netconn_do_writemore+0x270>)
 80109e8:	f240 6273 	movw	r2, #1651	@ 0x673
 80109ec:	4995      	ldr	r1, [pc, #596]	@ (8010c44 <lwip_netconn_do_writemore+0x274>)
 80109ee:	4896      	ldr	r0, [pc, #600]	@ (8010c48 <lwip_netconn_do_writemore+0x278>)
 80109f0:	f00c fcbc 	bl	801d36c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	785b      	ldrb	r3, [r3, #1]
 80109f8:	2b01      	cmp	r3, #1
 80109fa:	d006      	beq.n	8010a0a <lwip_netconn_do_writemore+0x3a>
 80109fc:	4b90      	ldr	r3, [pc, #576]	@ (8010c40 <lwip_netconn_do_writemore+0x270>)
 80109fe:	f240 6274 	movw	r2, #1652	@ 0x674
 8010a02:	4992      	ldr	r1, [pc, #584]	@ (8010c4c <lwip_netconn_do_writemore+0x27c>)
 8010a04:	4890      	ldr	r0, [pc, #576]	@ (8010c48 <lwip_netconn_do_writemore+0x278>)
 8010a06:	f00c fcb1 	bl	801d36c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6a1b      	ldr	r3, [r3, #32]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d106      	bne.n	8010a20 <lwip_netconn_do_writemore+0x50>
 8010a12:	4b8b      	ldr	r3, [pc, #556]	@ (8010c40 <lwip_netconn_do_writemore+0x270>)
 8010a14:	f240 6275 	movw	r2, #1653	@ 0x675
 8010a18:	498d      	ldr	r1, [pc, #564]	@ (8010c50 <lwip_netconn_do_writemore+0x280>)
 8010a1a:	488b      	ldr	r0, [pc, #556]	@ (8010c48 <lwip_netconn_do_writemore+0x278>)
 8010a1c:	f00c fca6 	bl	801d36c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	685b      	ldr	r3, [r3, #4]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d106      	bne.n	8010a36 <lwip_netconn_do_writemore+0x66>
 8010a28:	4b85      	ldr	r3, [pc, #532]	@ (8010c40 <lwip_netconn_do_writemore+0x270>)
 8010a2a:	f240 6276 	movw	r2, #1654	@ 0x676
 8010a2e:	4989      	ldr	r1, [pc, #548]	@ (8010c54 <lwip_netconn_do_writemore+0x284>)
 8010a30:	4885      	ldr	r0, [pc, #532]	@ (8010c48 <lwip_netconn_do_writemore+0x278>)
 8010a32:	f00c fc9b 	bl	801d36c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6a1b      	ldr	r3, [r3, #32]
 8010a3a:	699a      	ldr	r2, [r3, #24]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6a1b      	ldr	r3, [r3, #32]
 8010a40:	695b      	ldr	r3, [r3, #20]
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d306      	bcc.n	8010a54 <lwip_netconn_do_writemore+0x84>
 8010a46:	4b7e      	ldr	r3, [pc, #504]	@ (8010c40 <lwip_netconn_do_writemore+0x270>)
 8010a48:	f240 6277 	movw	r2, #1655	@ 0x677
 8010a4c:	4982      	ldr	r1, [pc, #520]	@ (8010c58 <lwip_netconn_do_writemore+0x288>)
 8010a4e:	487e      	ldr	r0, [pc, #504]	@ (8010c48 <lwip_netconn_do_writemore+0x278>)
 8010a50:	f00c fc8c 	bl	801d36c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	6a1b      	ldr	r3, [r3, #32]
 8010a58:	899b      	ldrh	r3, [r3, #12]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d106      	bne.n	8010a6c <lwip_netconn_do_writemore+0x9c>
 8010a5e:	4b78      	ldr	r3, [pc, #480]	@ (8010c40 <lwip_netconn_do_writemore+0x270>)
 8010a60:	f240 6279 	movw	r2, #1657	@ 0x679
 8010a64:	497d      	ldr	r1, [pc, #500]	@ (8010c5c <lwip_netconn_do_writemore+0x28c>)
 8010a66:	4878      	ldr	r0, [pc, #480]	@ (8010c48 <lwip_netconn_do_writemore+0x278>)
 8010a68:	f00c fc80 	bl	801d36c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6a1b      	ldr	r3, [r3, #32]
 8010a70:	7f1b      	ldrb	r3, [r3, #28]
 8010a72:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	7f1b      	ldrb	r3, [r3, #28]
 8010a78:	f003 0302 	and.w	r3, r3, #2
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d104      	bne.n	8010a8a <lwip_netconn_do_writemore+0xba>
 8010a80:	7ebb      	ldrb	r3, [r7, #26]
 8010a82:	f003 0304 	and.w	r3, r3, #4
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d001      	beq.n	8010a8e <lwip_netconn_do_writemore+0xbe>
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	e000      	b.n	8010a90 <lwip_netconn_do_writemore+0xc0>
 8010a8e:	2300      	movs	r3, #0
 8010a90:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	6a1b      	ldr	r3, [r3, #32]
 8010a96:	689b      	ldr	r3, [r3, #8]
 8010a98:	681a      	ldr	r2, [r3, #0]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6a1b      	ldr	r3, [r3, #32]
 8010a9e:	691b      	ldr	r3, [r3, #16]
 8010aa0:	4413      	add	r3, r2
 8010aa2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6a1b      	ldr	r3, [r3, #32]
 8010aa8:	689b      	ldr	r3, [r3, #8]
 8010aaa:	685a      	ldr	r2, [r3, #4]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	6a1b      	ldr	r3, [r3, #32]
 8010ab0:	691b      	ldr	r3, [r3, #16]
 8010ab2:	1ad3      	subs	r3, r2, r3
 8010ab4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8010ab6:	693b      	ldr	r3, [r7, #16]
 8010ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010abc:	d307      	bcc.n	8010ace <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8010abe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010ac2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010ac4:	7ebb      	ldrb	r3, [r7, #26]
 8010ac6:	f043 0302 	orr.w	r3, r3, #2
 8010aca:	76bb      	strb	r3, [r7, #26]
 8010acc:	e001      	b.n	8010ad2 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8010ace:	693b      	ldr	r3, [r7, #16]
 8010ad0:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	685b      	ldr	r3, [r3, #4]
 8010ad6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010ada:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8010adc:	89fa      	ldrh	r2, [r7, #14]
 8010ade:	8bbb      	ldrh	r3, [r7, #28]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d216      	bcs.n	8010b12 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8010ae4:	89fb      	ldrh	r3, [r7, #14]
 8010ae6:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8010ae8:	7e3b      	ldrb	r3, [r7, #24]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d00d      	beq.n	8010b0a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8010aee:	8bbb      	ldrh	r3, [r7, #28]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d10e      	bne.n	8010b12 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	6a1b      	ldr	r3, [r3, #32]
 8010af8:	699b      	ldr	r3, [r3, #24]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d102      	bne.n	8010b04 <lwip_netconn_do_writemore+0x134>
 8010afe:	f06f 0306 	mvn.w	r3, #6
 8010b02:	e000      	b.n	8010b06 <lwip_netconn_do_writemore+0x136>
 8010b04:	2300      	movs	r3, #0
 8010b06:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8010b08:	e07d      	b.n	8010c06 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8010b0a:	7ebb      	ldrb	r3, [r7, #26]
 8010b0c:	f043 0302 	orr.w	r3, r3, #2
 8010b10:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	6a1b      	ldr	r3, [r3, #32]
 8010b16:	691a      	ldr	r2, [r3, #16]
 8010b18:	8bbb      	ldrh	r3, [r7, #28]
 8010b1a:	441a      	add	r2, r3
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6a1b      	ldr	r3, [r3, #32]
 8010b20:	689b      	ldr	r3, [r3, #8]
 8010b22:	685b      	ldr	r3, [r3, #4]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d906      	bls.n	8010b36 <lwip_netconn_do_writemore+0x166>
 8010b28:	4b45      	ldr	r3, [pc, #276]	@ (8010c40 <lwip_netconn_do_writemore+0x270>)
 8010b2a:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8010b2e:	494c      	ldr	r1, [pc, #304]	@ (8010c60 <lwip_netconn_do_writemore+0x290>)
 8010b30:	4845      	ldr	r0, [pc, #276]	@ (8010c48 <lwip_netconn_do_writemore+0x278>)
 8010b32:	f00c fc1b 	bl	801d36c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8010b36:	8bbb      	ldrh	r3, [r7, #28]
 8010b38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010b3c:	4293      	cmp	r3, r2
 8010b3e:	d103      	bne.n	8010b48 <lwip_netconn_do_writemore+0x178>
 8010b40:	693b      	ldr	r3, [r7, #16]
 8010b42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010b46:	d209      	bcs.n	8010b5c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8010b48:	693b      	ldr	r3, [r7, #16]
 8010b4a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8010b4c:	8bba      	ldrh	r2, [r7, #28]
 8010b4e:	429a      	cmp	r2, r3
 8010b50:	d10b      	bne.n	8010b6a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	6a1b      	ldr	r3, [r3, #32]
 8010b56:	899b      	ldrh	r3, [r3, #12]
 8010b58:	2b01      	cmp	r3, #1
 8010b5a:	d906      	bls.n	8010b6a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010b60:	7ebb      	ldrb	r3, [r7, #26]
 8010b62:	f043 0302 	orr.w	r3, r3, #2
 8010b66:	76bb      	strb	r3, [r7, #26]
 8010b68:	e001      	b.n	8010b6e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6858      	ldr	r0, [r3, #4]
 8010b72:	7ebb      	ldrb	r3, [r7, #26]
 8010b74:	8bba      	ldrh	r2, [r7, #28]
 8010b76:	6979      	ldr	r1, [r7, #20]
 8010b78:	f006 fe22 	bl	80177c0 <tcp_write>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8010b80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d12c      	bne.n	8010be2 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	6a1b      	ldr	r3, [r3, #32]
 8010b8c:	6999      	ldr	r1, [r3, #24]
 8010b8e:	8bba      	ldrh	r2, [r7, #28]
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	6a1b      	ldr	r3, [r3, #32]
 8010b94:	440a      	add	r2, r1
 8010b96:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6a1b      	ldr	r3, [r3, #32]
 8010b9c:	6919      	ldr	r1, [r3, #16]
 8010b9e:	8bba      	ldrh	r2, [r7, #28]
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	6a1b      	ldr	r3, [r3, #32]
 8010ba4:	440a      	add	r2, r1
 8010ba6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6a1b      	ldr	r3, [r3, #32]
 8010bac:	691a      	ldr	r2, [r3, #16]
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6a1b      	ldr	r3, [r3, #32]
 8010bb2:	689b      	ldr	r3, [r3, #8]
 8010bb4:	685b      	ldr	r3, [r3, #4]
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	d113      	bne.n	8010be2 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6a1b      	ldr	r3, [r3, #32]
 8010bbe:	899a      	ldrh	r2, [r3, #12]
 8010bc0:	3a01      	subs	r2, #1
 8010bc2:	b292      	uxth	r2, r2
 8010bc4:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6a1b      	ldr	r3, [r3, #32]
 8010bca:	899b      	ldrh	r3, [r3, #12]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d008      	beq.n	8010be2 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6a1b      	ldr	r3, [r3, #32]
 8010bd4:	689a      	ldr	r2, [r3, #8]
 8010bd6:	3208      	adds	r2, #8
 8010bd8:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6a1b      	ldr	r3, [r3, #32]
 8010bde:	2200      	movs	r2, #0
 8010be0:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8010be2:	7e7b      	ldrb	r3, [r7, #25]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d004      	beq.n	8010bf2 <lwip_netconn_do_writemore+0x222>
 8010be8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	f43f af50 	beq.w	8010a92 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8010bf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d004      	beq.n	8010c04 <lwip_netconn_do_writemore+0x234>
 8010bfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c02:	d146      	bne.n	8010c92 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8010c04:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8010c06:	7e3b      	ldrb	r3, [r7, #24]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d02b      	beq.n	8010c64 <lwip_netconn_do_writemore+0x294>
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	6a1b      	ldr	r3, [r3, #32]
 8010c10:	699a      	ldr	r2, [r3, #24]
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6a1b      	ldr	r3, [r3, #32]
 8010c16:	695b      	ldr	r3, [r3, #20]
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d223      	bcs.n	8010c64 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d005      	beq.n	8010c30 <lwip_netconn_do_writemore+0x260>
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c28:	2200      	movs	r2, #0
 8010c2a:	2103      	movs	r1, #3
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	7f1b      	ldrb	r3, [r3, #28]
 8010c34:	f043 0310 	orr.w	r3, r3, #16
 8010c38:	b2da      	uxtb	r2, r3
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	771a      	strb	r2, [r3, #28]
 8010c3e:	e028      	b.n	8010c92 <lwip_netconn_do_writemore+0x2c2>
 8010c40:	0801ea48 	.word	0x0801ea48
 8010c44:	0801eba0 	.word	0x0801eba0
 8010c48:	0801ea8c 	.word	0x0801ea8c
 8010c4c:	0801eea8 	.word	0x0801eea8
 8010c50:	0801ebb0 	.word	0x0801ebb0
 8010c54:	0801eec8 	.word	0x0801eec8
 8010c58:	0801eee0 	.word	0x0801eee0
 8010c5c:	0801ef20 	.word	0x0801ef20
 8010c60:	0801ef48 	.word	0x0801ef48
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	685b      	ldr	r3, [r3, #4]
 8010c68:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010c6c:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8010c70:	d305      	bcc.n	8010c7e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010c7a:	2b04      	cmp	r3, #4
 8010c7c:	d909      	bls.n	8010c92 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d005      	beq.n	8010c92 <lwip_netconn_do_writemore+0x2c2>
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	2103      	movs	r1, #3
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8010c92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d11d      	bne.n	8010cd6 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6a1b      	ldr	r3, [r3, #32]
 8010c9e:	699a      	ldr	r2, [r3, #24]
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	6a1b      	ldr	r3, [r3, #32]
 8010ca4:	695b      	ldr	r3, [r3, #20]
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	d002      	beq.n	8010cb0 <lwip_netconn_do_writemore+0x2e0>
 8010caa:	7e3b      	ldrb	r3, [r7, #24]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d001      	beq.n	8010cb4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	685b      	ldr	r3, [r3, #4]
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f007 fb6b 	bl	8018394 <tcp_output>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8010cc2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010cc6:	f113 0f04 	cmn.w	r3, #4
 8010cca:	d12c      	bne.n	8010d26 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010ccc:	7b3b      	ldrb	r3, [r7, #12]
 8010cce:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010cd0:	2301      	movs	r3, #1
 8010cd2:	76fb      	strb	r3, [r7, #27]
 8010cd4:	e027      	b.n	8010d26 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8010cd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cde:	d120      	bne.n	8010d22 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f007 fb55 	bl	8018394 <tcp_output>
 8010cea:	4603      	mov	r3, r0
 8010cec:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8010cee:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010cf2:	f113 0f04 	cmn.w	r3, #4
 8010cf6:	d104      	bne.n	8010d02 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010cf8:	7b7b      	ldrb	r3, [r7, #13]
 8010cfa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	76fb      	strb	r3, [r7, #27]
 8010d00:	e011      	b.n	8010d26 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8010d02:	7e3b      	ldrb	r3, [r7, #24]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d00e      	beq.n	8010d26 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6a1b      	ldr	r3, [r3, #32]
 8010d0c:	699b      	ldr	r3, [r3, #24]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d102      	bne.n	8010d18 <lwip_netconn_do_writemore+0x348>
 8010d12:	f06f 0306 	mvn.w	r3, #6
 8010d16:	e000      	b.n	8010d1a <lwip_netconn_do_writemore+0x34a>
 8010d18:	2300      	movs	r3, #0
 8010d1a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	76fb      	strb	r3, [r7, #27]
 8010d20:	e001      	b.n	8010d26 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8010d22:	2301      	movs	r3, #1
 8010d24:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8010d26:	7efb      	ldrb	r3, [r7, #27]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d015      	beq.n	8010d58 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6a1b      	ldr	r3, [r3, #32]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	330c      	adds	r3, #12
 8010d34:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	6a1b      	ldr	r3, [r3, #32]
 8010d3a:	7ffa      	ldrb	r2, [r7, #31]
 8010d3c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	2200      	movs	r2, #0
 8010d42:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2200      	movs	r2, #0
 8010d48:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8010d4a:	78fb      	ldrb	r3, [r7, #3]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d006      	beq.n	8010d5e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8010d50:	68b8      	ldr	r0, [r7, #8]
 8010d52:	f00b faf5 	bl	801c340 <sys_sem_signal>
 8010d56:	e002      	b.n	8010d5e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8010d58:	f04f 33ff 	mov.w	r3, #4294967295
 8010d5c:	e000      	b.n	8010d60 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8010d5e:	2300      	movs	r3, #0
}
 8010d60:	4618      	mov	r0, r3
 8010d62:	3720      	adds	r7, #32
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}

08010d68 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b084      	sub	sp, #16
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7fe fd1c 	bl	800f7b6 <netconn_err>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d166      	bne.n	8010e58 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8010d8a:	68bb      	ldr	r3, [r7, #8]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	781b      	ldrb	r3, [r3, #0]
 8010d90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010d94:	2b10      	cmp	r3, #16
 8010d96:	d15d      	bne.n	8010e54 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	785b      	ldrb	r3, [r3, #1]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d002      	beq.n	8010da8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8010da2:	23fb      	movs	r3, #251	@ 0xfb
 8010da4:	73fb      	strb	r3, [r7, #15]
 8010da6:	e057      	b.n	8010e58 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d04d      	beq.n	8010e4e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	2201      	movs	r2, #1
 8010db8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	6a1b      	ldr	r3, [r3, #32]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d006      	beq.n	8010dd2 <lwip_netconn_do_write+0x6a>
 8010dc4:	4b28      	ldr	r3, [pc, #160]	@ (8010e68 <lwip_netconn_do_write+0x100>)
 8010dc6:	f240 7223 	movw	r2, #1827	@ 0x723
 8010dca:	4928      	ldr	r1, [pc, #160]	@ (8010e6c <lwip_netconn_do_write+0x104>)
 8010dcc:	4828      	ldr	r0, [pc, #160]	@ (8010e70 <lwip_netconn_do_write+0x108>)
 8010dce:	f00c facd 	bl	801d36c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	695b      	ldr	r3, [r3, #20]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d106      	bne.n	8010de8 <lwip_netconn_do_write+0x80>
 8010dda:	4b23      	ldr	r3, [pc, #140]	@ (8010e68 <lwip_netconn_do_write+0x100>)
 8010ddc:	f240 7224 	movw	r2, #1828	@ 0x724
 8010de0:	4924      	ldr	r1, [pc, #144]	@ (8010e74 <lwip_netconn_do_write+0x10c>)
 8010de2:	4823      	ldr	r0, [pc, #140]	@ (8010e70 <lwip_netconn_do_write+0x108>)
 8010de4:	f00c fac2 	bl	801d36c <iprintf>
        msg->conn->current_msg = msg;
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	68ba      	ldr	r2, [r7, #8]
 8010dee:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	2100      	movs	r1, #0
 8010df6:	4618      	mov	r0, r3
 8010df8:	f7ff fdea 	bl	80109d0 <lwip_netconn_do_writemore>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d02e      	beq.n	8010e60 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8010e02:	68bb      	ldr	r3, [r7, #8]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	785b      	ldrb	r3, [r3, #1]
 8010e08:	2b01      	cmp	r3, #1
 8010e0a:	d006      	beq.n	8010e1a <lwip_netconn_do_write+0xb2>
 8010e0c:	4b16      	ldr	r3, [pc, #88]	@ (8010e68 <lwip_netconn_do_write+0x100>)
 8010e0e:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 8010e12:	4919      	ldr	r1, [pc, #100]	@ (8010e78 <lwip_netconn_do_write+0x110>)
 8010e14:	4816      	ldr	r0, [pc, #88]	@ (8010e70 <lwip_netconn_do_write+0x108>)
 8010e16:	f00c faa9 	bl	801d36c <iprintf>
          UNLOCK_TCPIP_CORE();
 8010e1a:	4818      	ldr	r0, [pc, #96]	@ (8010e7c <lwip_netconn_do_write+0x114>)
 8010e1c:	f00b fb01 	bl	801c422 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	330c      	adds	r3, #12
 8010e26:	2100      	movs	r1, #0
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f00b fa58 	bl	801c2de <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8010e2e:	4813      	ldr	r0, [pc, #76]	@ (8010e7c <lwip_netconn_do_write+0x114>)
 8010e30:	f00b fae8 	bl	801c404 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	785b      	ldrb	r3, [r3, #1]
 8010e3a:	2b01      	cmp	r3, #1
 8010e3c:	d110      	bne.n	8010e60 <lwip_netconn_do_write+0xf8>
 8010e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8010e68 <lwip_netconn_do_write+0x100>)
 8010e40:	f240 722c 	movw	r2, #1836	@ 0x72c
 8010e44:	490c      	ldr	r1, [pc, #48]	@ (8010e78 <lwip_netconn_do_write+0x110>)
 8010e46:	480a      	ldr	r0, [pc, #40]	@ (8010e70 <lwip_netconn_do_write+0x108>)
 8010e48:	f00c fa90 	bl	801d36c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8010e4c:	e008      	b.n	8010e60 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8010e4e:	23f5      	movs	r3, #245	@ 0xf5
 8010e50:	73fb      	strb	r3, [r7, #15]
 8010e52:	e001      	b.n	8010e58 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8010e54:	23fa      	movs	r3, #250	@ 0xfa
 8010e56:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8010e58:	68bb      	ldr	r3, [r7, #8]
 8010e5a:	7bfa      	ldrb	r2, [r7, #15]
 8010e5c:	711a      	strb	r2, [r3, #4]
 8010e5e:	e000      	b.n	8010e62 <lwip_netconn_do_write+0xfa>
        return;
 8010e60:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8010e62:	3710      	adds	r7, #16
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}
 8010e68:	0801ea48 	.word	0x0801ea48
 8010e6c:	0801edec 	.word	0x0801edec
 8010e70:	0801ea8c 	.word	0x0801ea8c
 8010e74:	0801ef74 	.word	0x0801ef74
 8010e78:	0801ee08 	.word	0x0801ee08
 8010e7c:	2000b358 	.word	0x2000b358

08010e80 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b084      	sub	sp, #16
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	785b      	ldrb	r3, [r3, #1]
 8010e92:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d069      	beq.n	8010f72 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	781b      	ldrb	r3, [r3, #0]
 8010ea4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8010ea8:	2b10      	cmp	r3, #16
 8010eaa:	d162      	bne.n	8010f72 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010eb0:	2b03      	cmp	r3, #3
 8010eb2:	d002      	beq.n	8010eba <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010eb4:	7afb      	ldrb	r3, [r7, #11]
 8010eb6:	2b02      	cmp	r3, #2
 8010eb8:	d05b      	beq.n	8010f72 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8010eba:	7afb      	ldrb	r3, [r7, #11]
 8010ebc:	2b03      	cmp	r3, #3
 8010ebe:	d103      	bne.n	8010ec8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	22f5      	movs	r2, #245	@ 0xf5
 8010ec4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010ec6:	e059      	b.n	8010f7c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8010ec8:	7afb      	ldrb	r3, [r7, #11]
 8010eca:	2b01      	cmp	r3, #1
 8010ecc:	d103      	bne.n	8010ed6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	22fb      	movs	r2, #251	@ 0xfb
 8010ed2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010ed4:	e052      	b.n	8010f7c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	7a1b      	ldrb	r3, [r3, #8]
 8010eda:	f003 0301 	and.w	r3, r3, #1
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d004      	beq.n	8010eec <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7ff f99e 	bl	8010228 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	6a1b      	ldr	r3, [r3, #32]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d006      	beq.n	8010f04 <lwip_netconn_do_close+0x84>
 8010ef6:	4b23      	ldr	r3, [pc, #140]	@ (8010f84 <lwip_netconn_do_close+0x104>)
 8010ef8:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8010efc:	4922      	ldr	r1, [pc, #136]	@ (8010f88 <lwip_netconn_do_close+0x108>)
 8010efe:	4823      	ldr	r0, [pc, #140]	@ (8010f8c <lwip_netconn_do_close+0x10c>)
 8010f00:	f00c fa34 	bl	801d36c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	2204      	movs	r2, #4
 8010f0a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	68fa      	ldr	r2, [r7, #12]
 8010f12:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	2100      	movs	r1, #0
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7ff fa02 	bl	8010324 <lwip_netconn_do_close_internal>
 8010f20:	4603      	mov	r3, r0
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d029      	beq.n	8010f7a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	785b      	ldrb	r3, [r3, #1]
 8010f2c:	2b04      	cmp	r3, #4
 8010f2e:	d006      	beq.n	8010f3e <lwip_netconn_do_close+0xbe>
 8010f30:	4b14      	ldr	r3, [pc, #80]	@ (8010f84 <lwip_netconn_do_close+0x104>)
 8010f32:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 8010f36:	4916      	ldr	r1, [pc, #88]	@ (8010f90 <lwip_netconn_do_close+0x110>)
 8010f38:	4814      	ldr	r0, [pc, #80]	@ (8010f8c <lwip_netconn_do_close+0x10c>)
 8010f3a:	f00c fa17 	bl	801d36c <iprintf>
        UNLOCK_TCPIP_CORE();
 8010f3e:	4815      	ldr	r0, [pc, #84]	@ (8010f94 <lwip_netconn_do_close+0x114>)
 8010f40:	f00b fa6f 	bl	801c422 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	330c      	adds	r3, #12
 8010f4a:	2100      	movs	r1, #0
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f00b f9c6 	bl	801c2de <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8010f52:	4810      	ldr	r0, [pc, #64]	@ (8010f94 <lwip_netconn_do_close+0x114>)
 8010f54:	f00b fa56 	bl	801c404 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	785b      	ldrb	r3, [r3, #1]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d00b      	beq.n	8010f7a <lwip_netconn_do_close+0xfa>
 8010f62:	4b08      	ldr	r3, [pc, #32]	@ (8010f84 <lwip_netconn_do_close+0x104>)
 8010f64:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8010f68:	4909      	ldr	r1, [pc, #36]	@ (8010f90 <lwip_netconn_do_close+0x110>)
 8010f6a:	4808      	ldr	r0, [pc, #32]	@ (8010f8c <lwip_netconn_do_close+0x10c>)
 8010f6c:	f00c f9fe 	bl	801d36c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8010f70:	e003      	b.n	8010f7a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	22f5      	movs	r2, #245	@ 0xf5
 8010f76:	711a      	strb	r2, [r3, #4]
 8010f78:	e000      	b.n	8010f7c <lwip_netconn_do_close+0xfc>
      return;
 8010f7a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010f7c:	3710      	adds	r7, #16
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}
 8010f82:	bf00      	nop
 8010f84:	0801ea48 	.word	0x0801ea48
 8010f88:	0801edec 	.word	0x0801edec
 8010f8c:	0801ea8c 	.word	0x0801ea8c
 8010f90:	0801ee08 	.word	0x0801ee08
 8010f94:	2000b358 	.word	0x2000b358

08010f98 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d013      	beq.n	8010fce <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d00b      	beq.n	8010fc6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f001 fe48 	bl	8012c48 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2200      	movs	r2, #0
 8010fbc:	605a      	str	r2, [r3, #4]
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	685a      	ldr	r2, [r3, #4]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8010fc6:	6879      	ldr	r1, [r7, #4]
 8010fc8:	2006      	movs	r0, #6
 8010fca:	f000 ff99 	bl	8011f00 <memp_free>
  }
}
 8010fce:	bf00      	nop
 8010fd0:	3708      	adds	r7, #8
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
	...

08010fd8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b084      	sub	sp, #16
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	60f8      	str	r0, [r7, #12]
 8010fe0:	60b9      	str	r1, [r7, #8]
 8010fe2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d108      	bne.n	8010ffc <netbuf_data+0x24>
 8010fea:	4b1b      	ldr	r3, [pc, #108]	@ (8011058 <netbuf_data+0x80>)
 8010fec:	22c6      	movs	r2, #198	@ 0xc6
 8010fee:	491b      	ldr	r1, [pc, #108]	@ (801105c <netbuf_data+0x84>)
 8010ff0:	481b      	ldr	r0, [pc, #108]	@ (8011060 <netbuf_data+0x88>)
 8010ff2:	f00c f9bb 	bl	801d36c <iprintf>
 8010ff6:	f06f 030f 	mvn.w	r3, #15
 8010ffa:	e029      	b.n	8011050 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d108      	bne.n	8011014 <netbuf_data+0x3c>
 8011002:	4b15      	ldr	r3, [pc, #84]	@ (8011058 <netbuf_data+0x80>)
 8011004:	22c7      	movs	r2, #199	@ 0xc7
 8011006:	4917      	ldr	r1, [pc, #92]	@ (8011064 <netbuf_data+0x8c>)
 8011008:	4815      	ldr	r0, [pc, #84]	@ (8011060 <netbuf_data+0x88>)
 801100a:	f00c f9af 	bl	801d36c <iprintf>
 801100e:	f06f 030f 	mvn.w	r3, #15
 8011012:	e01d      	b.n	8011050 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d108      	bne.n	801102c <netbuf_data+0x54>
 801101a:	4b0f      	ldr	r3, [pc, #60]	@ (8011058 <netbuf_data+0x80>)
 801101c:	22c8      	movs	r2, #200	@ 0xc8
 801101e:	4912      	ldr	r1, [pc, #72]	@ (8011068 <netbuf_data+0x90>)
 8011020:	480f      	ldr	r0, [pc, #60]	@ (8011060 <netbuf_data+0x88>)
 8011022:	f00c f9a3 	bl	801d36c <iprintf>
 8011026:	f06f 030f 	mvn.w	r3, #15
 801102a:	e011      	b.n	8011050 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	685b      	ldr	r3, [r3, #4]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d102      	bne.n	801103a <netbuf_data+0x62>
    return ERR_BUF;
 8011034:	f06f 0301 	mvn.w	r3, #1
 8011038:	e00a      	b.n	8011050 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	685b      	ldr	r3, [r3, #4]
 801103e:	685a      	ldr	r2, [r3, #4]
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	685b      	ldr	r3, [r3, #4]
 8011048:	895a      	ldrh	r2, [r3, #10]
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 801104e:	2300      	movs	r3, #0
}
 8011050:	4618      	mov	r0, r3
 8011052:	3710      	adds	r7, #16
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}
 8011058:	0801efa0 	.word	0x0801efa0
 801105c:	0801f0a8 	.word	0x0801f0a8
 8011060:	0801eff0 	.word	0x0801eff0
 8011064:	0801f0c4 	.word	0x0801f0c4
 8011068:	0801f0e4 	.word	0x0801f0e4

0801106c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b084      	sub	sp, #16
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8011076:	f008 fa45 	bl	8019504 <sys_timeouts_sleeptime>
 801107a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011082:	d10b      	bne.n	801109c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8011084:	4813      	ldr	r0, [pc, #76]	@ (80110d4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011086:	f00b f9cc 	bl	801c422 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801108a:	2200      	movs	r2, #0
 801108c:	6839      	ldr	r1, [r7, #0]
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	f00b f884 	bl	801c19c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8011094:	480f      	ldr	r0, [pc, #60]	@ (80110d4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011096:	f00b f9b5 	bl	801c404 <sys_mutex_lock>
    return;
 801109a:	e018      	b.n	80110ce <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d102      	bne.n	80110a8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80110a2:	f008 f9f5 	bl	8019490 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80110a6:	e7e6      	b.n	8011076 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80110a8:	480a      	ldr	r0, [pc, #40]	@ (80110d4 <tcpip_timeouts_mbox_fetch+0x68>)
 80110aa:	f00b f9ba 	bl	801c422 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80110ae:	68fa      	ldr	r2, [r7, #12]
 80110b0:	6839      	ldr	r1, [r7, #0]
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f00b f872 	bl	801c19c <sys_arch_mbox_fetch>
 80110b8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80110ba:	4806      	ldr	r0, [pc, #24]	@ (80110d4 <tcpip_timeouts_mbox_fetch+0x68>)
 80110bc:	f00b f9a2 	bl	801c404 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110c6:	d102      	bne.n	80110ce <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80110c8:	f008 f9e2 	bl	8019490 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80110cc:	e7d3      	b.n	8011076 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80110ce:	3710      	adds	r7, #16
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}
 80110d4:	2000b358 	.word	0x2000b358

080110d8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b084      	sub	sp, #16
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80110e0:	4810      	ldr	r0, [pc, #64]	@ (8011124 <tcpip_thread+0x4c>)
 80110e2:	f00b f98f 	bl	801c404 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80110e6:	4b10      	ldr	r3, [pc, #64]	@ (8011128 <tcpip_thread+0x50>)
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d005      	beq.n	80110fa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80110ee:	4b0e      	ldr	r3, [pc, #56]	@ (8011128 <tcpip_thread+0x50>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	4a0e      	ldr	r2, [pc, #56]	@ (801112c <tcpip_thread+0x54>)
 80110f4:	6812      	ldr	r2, [r2, #0]
 80110f6:	4610      	mov	r0, r2
 80110f8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80110fa:	f107 030c 	add.w	r3, r7, #12
 80110fe:	4619      	mov	r1, r3
 8011100:	480b      	ldr	r0, [pc, #44]	@ (8011130 <tcpip_thread+0x58>)
 8011102:	f7ff ffb3 	bl	801106c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d106      	bne.n	801111a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801110c:	4b09      	ldr	r3, [pc, #36]	@ (8011134 <tcpip_thread+0x5c>)
 801110e:	2291      	movs	r2, #145	@ 0x91
 8011110:	4909      	ldr	r1, [pc, #36]	@ (8011138 <tcpip_thread+0x60>)
 8011112:	480a      	ldr	r0, [pc, #40]	@ (801113c <tcpip_thread+0x64>)
 8011114:	f00c f92a 	bl	801d36c <iprintf>
      continue;
 8011118:	e003      	b.n	8011122 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	4618      	mov	r0, r3
 801111e:	f000 f80f 	bl	8011140 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011122:	e7ea      	b.n	80110fa <tcpip_thread+0x22>
 8011124:	2000b358 	.word	0x2000b358
 8011128:	2000b34c 	.word	0x2000b34c
 801112c:	2000b350 	.word	0x2000b350
 8011130:	2000b354 	.word	0x2000b354
 8011134:	0801f138 	.word	0x0801f138
 8011138:	0801f168 	.word	0x0801f168
 801113c:	0801f188 	.word	0x0801f188

08011140 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b082      	sub	sp, #8
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	781b      	ldrb	r3, [r3, #0]
 801114c:	2b02      	cmp	r3, #2
 801114e:	d026      	beq.n	801119e <tcpip_thread_handle_msg+0x5e>
 8011150:	2b02      	cmp	r3, #2
 8011152:	dc2b      	bgt.n	80111ac <tcpip_thread_handle_msg+0x6c>
 8011154:	2b00      	cmp	r3, #0
 8011156:	d002      	beq.n	801115e <tcpip_thread_handle_msg+0x1e>
 8011158:	2b01      	cmp	r3, #1
 801115a:	d015      	beq.n	8011188 <tcpip_thread_handle_msg+0x48>
 801115c:	e026      	b.n	80111ac <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	68db      	ldr	r3, [r3, #12]
 8011162:	687a      	ldr	r2, [r7, #4]
 8011164:	6850      	ldr	r0, [r2, #4]
 8011166:	687a      	ldr	r2, [r7, #4]
 8011168:	6892      	ldr	r2, [r2, #8]
 801116a:	4611      	mov	r1, r2
 801116c:	4798      	blx	r3
 801116e:	4603      	mov	r3, r0
 8011170:	2b00      	cmp	r3, #0
 8011172:	d004      	beq.n	801117e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	685b      	ldr	r3, [r3, #4]
 8011178:	4618      	mov	r0, r3
 801117a:	f001 fd65 	bl	8012c48 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801117e:	6879      	ldr	r1, [r7, #4]
 8011180:	2009      	movs	r0, #9
 8011182:	f000 febd 	bl	8011f00 <memp_free>
      break;
 8011186:	e018      	b.n	80111ba <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	685b      	ldr	r3, [r3, #4]
 801118c:	687a      	ldr	r2, [r7, #4]
 801118e:	6892      	ldr	r2, [r2, #8]
 8011190:	4610      	mov	r0, r2
 8011192:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8011194:	6879      	ldr	r1, [r7, #4]
 8011196:	2008      	movs	r0, #8
 8011198:	f000 feb2 	bl	8011f00 <memp_free>
      break;
 801119c:	e00d      	b.n	80111ba <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	685b      	ldr	r3, [r3, #4]
 80111a2:	687a      	ldr	r2, [r7, #4]
 80111a4:	6892      	ldr	r2, [r2, #8]
 80111a6:	4610      	mov	r0, r2
 80111a8:	4798      	blx	r3
      break;
 80111aa:	e006      	b.n	80111ba <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80111ac:	4b05      	ldr	r3, [pc, #20]	@ (80111c4 <tcpip_thread_handle_msg+0x84>)
 80111ae:	22cf      	movs	r2, #207	@ 0xcf
 80111b0:	4905      	ldr	r1, [pc, #20]	@ (80111c8 <tcpip_thread_handle_msg+0x88>)
 80111b2:	4806      	ldr	r0, [pc, #24]	@ (80111cc <tcpip_thread_handle_msg+0x8c>)
 80111b4:	f00c f8da 	bl	801d36c <iprintf>
      break;
 80111b8:	bf00      	nop
  }
}
 80111ba:	bf00      	nop
 80111bc:	3708      	adds	r7, #8
 80111be:	46bd      	mov	sp, r7
 80111c0:	bd80      	pop	{r7, pc}
 80111c2:	bf00      	nop
 80111c4:	0801f138 	.word	0x0801f138
 80111c8:	0801f168 	.word	0x0801f168
 80111cc:	0801f188 	.word	0x0801f188

080111d0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b086      	sub	sp, #24
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	60f8      	str	r0, [r7, #12]
 80111d8:	60b9      	str	r1, [r7, #8]
 80111da:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80111dc:	481a      	ldr	r0, [pc, #104]	@ (8011248 <tcpip_inpkt+0x78>)
 80111de:	f00b f838 	bl	801c252 <sys_mbox_valid>
 80111e2:	4603      	mov	r3, r0
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d105      	bne.n	80111f4 <tcpip_inpkt+0x24>
 80111e8:	4b18      	ldr	r3, [pc, #96]	@ (801124c <tcpip_inpkt+0x7c>)
 80111ea:	22fc      	movs	r2, #252	@ 0xfc
 80111ec:	4918      	ldr	r1, [pc, #96]	@ (8011250 <tcpip_inpkt+0x80>)
 80111ee:	4819      	ldr	r0, [pc, #100]	@ (8011254 <tcpip_inpkt+0x84>)
 80111f0:	f00c f8bc 	bl	801d36c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80111f4:	2009      	movs	r0, #9
 80111f6:	f000 fe0d 	bl	8011e14 <memp_malloc>
 80111fa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80111fc:	697b      	ldr	r3, [r7, #20]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d102      	bne.n	8011208 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8011202:	f04f 33ff 	mov.w	r3, #4294967295
 8011206:	e01a      	b.n	801123e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8011208:	697b      	ldr	r3, [r7, #20]
 801120a:	2200      	movs	r2, #0
 801120c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801120e:	697b      	ldr	r3, [r7, #20]
 8011210:	68fa      	ldr	r2, [r7, #12]
 8011212:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8011214:	697b      	ldr	r3, [r7, #20]
 8011216:	68ba      	ldr	r2, [r7, #8]
 8011218:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	687a      	ldr	r2, [r7, #4]
 801121e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011220:	6979      	ldr	r1, [r7, #20]
 8011222:	4809      	ldr	r0, [pc, #36]	@ (8011248 <tcpip_inpkt+0x78>)
 8011224:	f00a ffa0 	bl	801c168 <sys_mbox_trypost>
 8011228:	4603      	mov	r3, r0
 801122a:	2b00      	cmp	r3, #0
 801122c:	d006      	beq.n	801123c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801122e:	6979      	ldr	r1, [r7, #20]
 8011230:	2009      	movs	r0, #9
 8011232:	f000 fe65 	bl	8011f00 <memp_free>
    return ERR_MEM;
 8011236:	f04f 33ff 	mov.w	r3, #4294967295
 801123a:	e000      	b.n	801123e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801123c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801123e:	4618      	mov	r0, r3
 8011240:	3718      	adds	r7, #24
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}
 8011246:	bf00      	nop
 8011248:	2000b354 	.word	0x2000b354
 801124c:	0801f138 	.word	0x0801f138
 8011250:	0801f1b0 	.word	0x0801f1b0
 8011254:	0801f188 	.word	0x0801f188

08011258 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b082      	sub	sp, #8
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011268:	f003 0318 	and.w	r3, r3, #24
 801126c:	2b00      	cmp	r3, #0
 801126e:	d006      	beq.n	801127e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8011270:	4a08      	ldr	r2, [pc, #32]	@ (8011294 <tcpip_input+0x3c>)
 8011272:	6839      	ldr	r1, [r7, #0]
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f7ff ffab 	bl	80111d0 <tcpip_inpkt>
 801127a:	4603      	mov	r3, r0
 801127c:	e005      	b.n	801128a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801127e:	4a06      	ldr	r2, [pc, #24]	@ (8011298 <tcpip_input+0x40>)
 8011280:	6839      	ldr	r1, [r7, #0]
 8011282:	6878      	ldr	r0, [r7, #4]
 8011284:	f7ff ffa4 	bl	80111d0 <tcpip_inpkt>
 8011288:	4603      	mov	r3, r0
}
 801128a:	4618      	mov	r0, r3
 801128c:	3708      	adds	r7, #8
 801128e:	46bd      	mov	sp, r7
 8011290:	bd80      	pop	{r7, pc}
 8011292:	bf00      	nop
 8011294:	0801bf55 	.word	0x0801bf55
 8011298:	0801ae5d 	.word	0x0801ae5d

0801129c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b084      	sub	sp, #16
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
 80112a4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80112a6:	4819      	ldr	r0, [pc, #100]	@ (801130c <tcpip_try_callback+0x70>)
 80112a8:	f00a ffd3 	bl	801c252 <sys_mbox_valid>
 80112ac:	4603      	mov	r3, r0
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d106      	bne.n	80112c0 <tcpip_try_callback+0x24>
 80112b2:	4b17      	ldr	r3, [pc, #92]	@ (8011310 <tcpip_try_callback+0x74>)
 80112b4:	f240 125d 	movw	r2, #349	@ 0x15d
 80112b8:	4916      	ldr	r1, [pc, #88]	@ (8011314 <tcpip_try_callback+0x78>)
 80112ba:	4817      	ldr	r0, [pc, #92]	@ (8011318 <tcpip_try_callback+0x7c>)
 80112bc:	f00c f856 	bl	801d36c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80112c0:	2008      	movs	r0, #8
 80112c2:	f000 fda7 	bl	8011e14 <memp_malloc>
 80112c6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d102      	bne.n	80112d4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80112ce:	f04f 33ff 	mov.w	r3, #4294967295
 80112d2:	e017      	b.n	8011304 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	2201      	movs	r2, #1
 80112d8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	687a      	ldr	r2, [r7, #4]
 80112de:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	683a      	ldr	r2, [r7, #0]
 80112e4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80112e6:	68f9      	ldr	r1, [r7, #12]
 80112e8:	4808      	ldr	r0, [pc, #32]	@ (801130c <tcpip_try_callback+0x70>)
 80112ea:	f00a ff3d 	bl	801c168 <sys_mbox_trypost>
 80112ee:	4603      	mov	r3, r0
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d006      	beq.n	8011302 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80112f4:	68f9      	ldr	r1, [r7, #12]
 80112f6:	2008      	movs	r0, #8
 80112f8:	f000 fe02 	bl	8011f00 <memp_free>
    return ERR_MEM;
 80112fc:	f04f 33ff 	mov.w	r3, #4294967295
 8011300:	e000      	b.n	8011304 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8011302:	2300      	movs	r3, #0
}
 8011304:	4618      	mov	r0, r3
 8011306:	3710      	adds	r7, #16
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}
 801130c:	2000b354 	.word	0x2000b354
 8011310:	0801f138 	.word	0x0801f138
 8011314:	0801f1b0 	.word	0x0801f1b0
 8011318:	0801f188 	.word	0x0801f188

0801131c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b084      	sub	sp, #16
 8011320:	af00      	add	r7, sp, #0
 8011322:	60f8      	str	r0, [r7, #12]
 8011324:	60b9      	str	r1, [r7, #8]
 8011326:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8011328:	4806      	ldr	r0, [pc, #24]	@ (8011344 <tcpip_send_msg_wait_sem+0x28>)
 801132a:	f00b f86b 	bl	801c404 <sys_mutex_lock>
  fn(apimsg);
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	68b8      	ldr	r0, [r7, #8]
 8011332:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8011334:	4803      	ldr	r0, [pc, #12]	@ (8011344 <tcpip_send_msg_wait_sem+0x28>)
 8011336:	f00b f874 	bl	801c422 <sys_mutex_unlock>
  return ERR_OK;
 801133a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801133c:	4618      	mov	r0, r3
 801133e:	3710      	adds	r7, #16
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}
 8011344:	2000b358 	.word	0x2000b358

08011348 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b084      	sub	sp, #16
 801134c:	af02      	add	r7, sp, #8
 801134e:	6078      	str	r0, [r7, #4]
 8011350:	6039      	str	r1, [r7, #0]
  lwip_init();
 8011352:	f000 f8b9 	bl	80114c8 <lwip_init>

  tcpip_init_done = initfunc;
 8011356:	4a17      	ldr	r2, [pc, #92]	@ (80113b4 <tcpip_init+0x6c>)
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801135c:	4a16      	ldr	r2, [pc, #88]	@ (80113b8 <tcpip_init+0x70>)
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8011362:	2106      	movs	r1, #6
 8011364:	4815      	ldr	r0, [pc, #84]	@ (80113bc <tcpip_init+0x74>)
 8011366:	f00a fecb 	bl	801c100 <sys_mbox_new>
 801136a:	4603      	mov	r3, r0
 801136c:	2b00      	cmp	r3, #0
 801136e:	d006      	beq.n	801137e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8011370:	4b13      	ldr	r3, [pc, #76]	@ (80113c0 <tcpip_init+0x78>)
 8011372:	f240 2261 	movw	r2, #609	@ 0x261
 8011376:	4913      	ldr	r1, [pc, #76]	@ (80113c4 <tcpip_init+0x7c>)
 8011378:	4813      	ldr	r0, [pc, #76]	@ (80113c8 <tcpip_init+0x80>)
 801137a:	f00b fff7 	bl	801d36c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801137e:	4813      	ldr	r0, [pc, #76]	@ (80113cc <tcpip_init+0x84>)
 8011380:	f00b f824 	bl	801c3cc <sys_mutex_new>
 8011384:	4603      	mov	r3, r0
 8011386:	2b00      	cmp	r3, #0
 8011388:	d006      	beq.n	8011398 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801138a:	4b0d      	ldr	r3, [pc, #52]	@ (80113c0 <tcpip_init+0x78>)
 801138c:	f240 2265 	movw	r2, #613	@ 0x265
 8011390:	490f      	ldr	r1, [pc, #60]	@ (80113d0 <tcpip_init+0x88>)
 8011392:	480d      	ldr	r0, [pc, #52]	@ (80113c8 <tcpip_init+0x80>)
 8011394:	f00b ffea 	bl	801d36c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8011398:	2300      	movs	r3, #0
 801139a:	9300      	str	r3, [sp, #0]
 801139c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80113a0:	2200      	movs	r2, #0
 80113a2:	490c      	ldr	r1, [pc, #48]	@ (80113d4 <tcpip_init+0x8c>)
 80113a4:	480c      	ldr	r0, [pc, #48]	@ (80113d8 <tcpip_init+0x90>)
 80113a6:	f00b f849 	bl	801c43c <sys_thread_new>
}
 80113aa:	bf00      	nop
 80113ac:	3708      	adds	r7, #8
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}
 80113b2:	bf00      	nop
 80113b4:	2000b34c 	.word	0x2000b34c
 80113b8:	2000b350 	.word	0x2000b350
 80113bc:	2000b354 	.word	0x2000b354
 80113c0:	0801f138 	.word	0x0801f138
 80113c4:	0801f1c0 	.word	0x0801f1c0
 80113c8:	0801f188 	.word	0x0801f188
 80113cc:	2000b358 	.word	0x2000b358
 80113d0:	0801f1e4 	.word	0x0801f1e4
 80113d4:	080110d9 	.word	0x080110d9
 80113d8:	0801f208 	.word	0x0801f208

080113dc <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b084      	sub	sp, #16
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d002      	beq.n	80113f2 <fs_open+0x16>
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d102      	bne.n	80113f8 <fs_open+0x1c>
    return ERR_ARG;
 80113f2:	f06f 030f 	mvn.w	r3, #15
 80113f6:	e028      	b.n	801144a <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80113f8:	4b16      	ldr	r3, [pc, #88]	@ (8011454 <fs_open+0x78>)
 80113fa:	60fb      	str	r3, [r7, #12]
 80113fc:	e020      	b.n	8011440 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	685b      	ldr	r3, [r3, #4]
 8011402:	4619      	mov	r1, r3
 8011404:	6838      	ldr	r0, [r7, #0]
 8011406:	f7ee ff1b 	bl	8000240 <strcmp>
 801140a:	4603      	mov	r3, r0
 801140c:	2b00      	cmp	r3, #0
 801140e:	d114      	bne.n	801143a <fs_open+0x5e>
      file->data = (const char *)f->data;
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	689a      	ldr	r2, [r3, #8]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	68da      	ldr	r2, [r3, #12]
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	68da      	ldr	r2, [r3, #12]
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2200      	movs	r2, #0
 801142c:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	7c1a      	ldrb	r2, [r3, #16]
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8011436:	2300      	movs	r3, #0
 8011438:	e007      	b.n	801144a <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	60fb      	str	r3, [r7, #12]
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d1db      	bne.n	80113fe <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8011446:	f06f 0305 	mvn.w	r3, #5
}
 801144a:	4618      	mov	r0, r3
 801144c:	3710      	adds	r7, #16
 801144e:	46bd      	mov	sp, r7
 8011450:	bd80      	pop	{r7, pc}
 8011452:	bf00      	nop
 8011454:	080323f4 	.word	0x080323f4

08011458 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8011458:	b480      	push	{r7}
 801145a:	b083      	sub	sp, #12
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8011460:	bf00      	nop
 8011462:	370c      	adds	r7, #12
 8011464:	46bd      	mov	sp, r7
 8011466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146a:	4770      	bx	lr

0801146c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801146c:	b480      	push	{r7}
 801146e:	b083      	sub	sp, #12
 8011470:	af00      	add	r7, sp, #0
 8011472:	4603      	mov	r3, r0
 8011474:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8011476:	88fb      	ldrh	r3, [r7, #6]
 8011478:	021b      	lsls	r3, r3, #8
 801147a:	b21a      	sxth	r2, r3
 801147c:	88fb      	ldrh	r3, [r7, #6]
 801147e:	0a1b      	lsrs	r3, r3, #8
 8011480:	b29b      	uxth	r3, r3
 8011482:	b21b      	sxth	r3, r3
 8011484:	4313      	orrs	r3, r2
 8011486:	b21b      	sxth	r3, r3
 8011488:	b29b      	uxth	r3, r3
}
 801148a:	4618      	mov	r0, r3
 801148c:	370c      	adds	r7, #12
 801148e:	46bd      	mov	sp, r7
 8011490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011494:	4770      	bx	lr

08011496 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8011496:	b480      	push	{r7}
 8011498:	b083      	sub	sp, #12
 801149a:	af00      	add	r7, sp, #0
 801149c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	061a      	lsls	r2, r3, #24
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	021b      	lsls	r3, r3, #8
 80114a6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80114aa:	431a      	orrs	r2, r3
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	0a1b      	lsrs	r3, r3, #8
 80114b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80114b4:	431a      	orrs	r2, r3
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	0e1b      	lsrs	r3, r3, #24
 80114ba:	4313      	orrs	r3, r2
}
 80114bc:	4618      	mov	r0, r3
 80114be:	370c      	adds	r7, #12
 80114c0:	46bd      	mov	sp, r7
 80114c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c6:	4770      	bx	lr

080114c8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b082      	sub	sp, #8
 80114cc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80114ce:	2300      	movs	r3, #0
 80114d0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80114d2:	f00a ff6d 	bl	801c3b0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80114d6:	f000 f8d5 	bl	8011684 <mem_init>
  memp_init();
 80114da:	f000 fc2d 	bl	8011d38 <memp_init>
  pbuf_init();
  netif_init();
 80114de:	f000 fd39 	bl	8011f54 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80114e2:	f008 f847 	bl	8019574 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80114e6:	f001 fe49 	bl	801317c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80114ea:	f007 ff89 	bl	8019400 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80114ee:	bf00      	nop
 80114f0:	3708      	adds	r7, #8
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd80      	pop	{r7, pc}
	...

080114f8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80114f8:	b480      	push	{r7}
 80114fa:	b083      	sub	sp, #12
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	4603      	mov	r3, r0
 8011500:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8011502:	4b05      	ldr	r3, [pc, #20]	@ (8011518 <ptr_to_mem+0x20>)
 8011504:	681a      	ldr	r2, [r3, #0]
 8011506:	88fb      	ldrh	r3, [r7, #6]
 8011508:	4413      	add	r3, r2
}
 801150a:	4618      	mov	r0, r3
 801150c:	370c      	adds	r7, #12
 801150e:	46bd      	mov	sp, r7
 8011510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011514:	4770      	bx	lr
 8011516:	bf00      	nop
 8011518:	2000b374 	.word	0x2000b374

0801151c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801151c:	b480      	push	{r7}
 801151e:	b083      	sub	sp, #12
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8011524:	4b05      	ldr	r3, [pc, #20]	@ (801153c <mem_to_ptr+0x20>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	687a      	ldr	r2, [r7, #4]
 801152a:	1ad3      	subs	r3, r2, r3
 801152c:	b29b      	uxth	r3, r3
}
 801152e:	4618      	mov	r0, r3
 8011530:	370c      	adds	r7, #12
 8011532:	46bd      	mov	sp, r7
 8011534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011538:	4770      	bx	lr
 801153a:	bf00      	nop
 801153c:	2000b374 	.word	0x2000b374

08011540 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8011540:	b590      	push	{r4, r7, lr}
 8011542:	b085      	sub	sp, #20
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8011548:	4b45      	ldr	r3, [pc, #276]	@ (8011660 <plug_holes+0x120>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	687a      	ldr	r2, [r7, #4]
 801154e:	429a      	cmp	r2, r3
 8011550:	d206      	bcs.n	8011560 <plug_holes+0x20>
 8011552:	4b44      	ldr	r3, [pc, #272]	@ (8011664 <plug_holes+0x124>)
 8011554:	f240 12df 	movw	r2, #479	@ 0x1df
 8011558:	4943      	ldr	r1, [pc, #268]	@ (8011668 <plug_holes+0x128>)
 801155a:	4844      	ldr	r0, [pc, #272]	@ (801166c <plug_holes+0x12c>)
 801155c:	f00b ff06 	bl	801d36c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8011560:	4b43      	ldr	r3, [pc, #268]	@ (8011670 <plug_holes+0x130>)
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	687a      	ldr	r2, [r7, #4]
 8011566:	429a      	cmp	r2, r3
 8011568:	d306      	bcc.n	8011578 <plug_holes+0x38>
 801156a:	4b3e      	ldr	r3, [pc, #248]	@ (8011664 <plug_holes+0x124>)
 801156c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8011570:	4940      	ldr	r1, [pc, #256]	@ (8011674 <plug_holes+0x134>)
 8011572:	483e      	ldr	r0, [pc, #248]	@ (801166c <plug_holes+0x12c>)
 8011574:	f00b fefa 	bl	801d36c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	791b      	ldrb	r3, [r3, #4]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d006      	beq.n	801158e <plug_holes+0x4e>
 8011580:	4b38      	ldr	r3, [pc, #224]	@ (8011664 <plug_holes+0x124>)
 8011582:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8011586:	493c      	ldr	r1, [pc, #240]	@ (8011678 <plug_holes+0x138>)
 8011588:	4838      	ldr	r0, [pc, #224]	@ (801166c <plug_holes+0x12c>)
 801158a:	f00b feef 	bl	801d36c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	881b      	ldrh	r3, [r3, #0]
 8011592:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011596:	d906      	bls.n	80115a6 <plug_holes+0x66>
 8011598:	4b32      	ldr	r3, [pc, #200]	@ (8011664 <plug_holes+0x124>)
 801159a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 801159e:	4937      	ldr	r1, [pc, #220]	@ (801167c <plug_holes+0x13c>)
 80115a0:	4832      	ldr	r0, [pc, #200]	@ (801166c <plug_holes+0x12c>)
 80115a2:	f00b fee3 	bl	801d36c <iprintf>

  nmem = ptr_to_mem(mem->next);
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	881b      	ldrh	r3, [r3, #0]
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7ff ffa4 	bl	80114f8 <ptr_to_mem>
 80115b0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80115b2:	687a      	ldr	r2, [r7, #4]
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d024      	beq.n	8011604 <plug_holes+0xc4>
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	791b      	ldrb	r3, [r3, #4]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d120      	bne.n	8011604 <plug_holes+0xc4>
 80115c2:	4b2b      	ldr	r3, [pc, #172]	@ (8011670 <plug_holes+0x130>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	68fa      	ldr	r2, [r7, #12]
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d01b      	beq.n	8011604 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80115cc:	4b2c      	ldr	r3, [pc, #176]	@ (8011680 <plug_holes+0x140>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	68fa      	ldr	r2, [r7, #12]
 80115d2:	429a      	cmp	r2, r3
 80115d4:	d102      	bne.n	80115dc <plug_holes+0x9c>
      lfree = mem;
 80115d6:	4a2a      	ldr	r2, [pc, #168]	@ (8011680 <plug_holes+0x140>)
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	881a      	ldrh	r2, [r3, #0]
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	881b      	ldrh	r3, [r3, #0]
 80115e8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80115ec:	d00a      	beq.n	8011604 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	881b      	ldrh	r3, [r3, #0]
 80115f2:	4618      	mov	r0, r3
 80115f4:	f7ff ff80 	bl	80114f8 <ptr_to_mem>
 80115f8:	4604      	mov	r4, r0
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f7ff ff8e 	bl	801151c <mem_to_ptr>
 8011600:	4603      	mov	r3, r0
 8011602:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	885b      	ldrh	r3, [r3, #2]
 8011608:	4618      	mov	r0, r3
 801160a:	f7ff ff75 	bl	80114f8 <ptr_to_mem>
 801160e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011610:	68ba      	ldr	r2, [r7, #8]
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	429a      	cmp	r2, r3
 8011616:	d01f      	beq.n	8011658 <plug_holes+0x118>
 8011618:	68bb      	ldr	r3, [r7, #8]
 801161a:	791b      	ldrb	r3, [r3, #4]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d11b      	bne.n	8011658 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011620:	4b17      	ldr	r3, [pc, #92]	@ (8011680 <plug_holes+0x140>)
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	687a      	ldr	r2, [r7, #4]
 8011626:	429a      	cmp	r2, r3
 8011628:	d102      	bne.n	8011630 <plug_holes+0xf0>
      lfree = pmem;
 801162a:	4a15      	ldr	r2, [pc, #84]	@ (8011680 <plug_holes+0x140>)
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	881a      	ldrh	r2, [r3, #0]
 8011634:	68bb      	ldr	r3, [r7, #8]
 8011636:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	881b      	ldrh	r3, [r3, #0]
 801163c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011640:	d00a      	beq.n	8011658 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	881b      	ldrh	r3, [r3, #0]
 8011646:	4618      	mov	r0, r3
 8011648:	f7ff ff56 	bl	80114f8 <ptr_to_mem>
 801164c:	4604      	mov	r4, r0
 801164e:	68b8      	ldr	r0, [r7, #8]
 8011650:	f7ff ff64 	bl	801151c <mem_to_ptr>
 8011654:	4603      	mov	r3, r0
 8011656:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8011658:	bf00      	nop
 801165a:	3714      	adds	r7, #20
 801165c:	46bd      	mov	sp, r7
 801165e:	bd90      	pop	{r4, r7, pc}
 8011660:	2000b374 	.word	0x2000b374
 8011664:	0801f218 	.word	0x0801f218
 8011668:	0801f248 	.word	0x0801f248
 801166c:	0801f260 	.word	0x0801f260
 8011670:	2000b378 	.word	0x2000b378
 8011674:	0801f288 	.word	0x0801f288
 8011678:	0801f2a4 	.word	0x0801f2a4
 801167c:	0801f2c0 	.word	0x0801f2c0
 8011680:	2000b380 	.word	0x2000b380

08011684 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801168a:	4b1d      	ldr	r3, [pc, #116]	@ (8011700 <mem_init+0x7c>)
 801168c:	4a1d      	ldr	r2, [pc, #116]	@ (8011704 <mem_init+0x80>)
 801168e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8011690:	4b1b      	ldr	r3, [pc, #108]	@ (8011700 <mem_init+0x7c>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 801169c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2200      	movs	r2, #0
 80116a2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	2200      	movs	r2, #0
 80116a8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80116aa:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 80116ae:	f7ff ff23 	bl	80114f8 <ptr_to_mem>
 80116b2:	4603      	mov	r3, r0
 80116b4:	4a14      	ldr	r2, [pc, #80]	@ (8011708 <mem_init+0x84>)
 80116b6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80116b8:	4b13      	ldr	r3, [pc, #76]	@ (8011708 <mem_init+0x84>)
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	2201      	movs	r2, #1
 80116be:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80116c0:	4b11      	ldr	r3, [pc, #68]	@ (8011708 <mem_init+0x84>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 80116c8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80116ca:	4b0f      	ldr	r3, [pc, #60]	@ (8011708 <mem_init+0x84>)
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 80116d2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80116d4:	4b0a      	ldr	r3, [pc, #40]	@ (8011700 <mem_init+0x7c>)
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	4a0c      	ldr	r2, [pc, #48]	@ (801170c <mem_init+0x88>)
 80116da:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80116dc:	480c      	ldr	r0, [pc, #48]	@ (8011710 <mem_init+0x8c>)
 80116de:	f00a fe75 	bl	801c3cc <sys_mutex_new>
 80116e2:	4603      	mov	r3, r0
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d006      	beq.n	80116f6 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80116e8:	4b0a      	ldr	r3, [pc, #40]	@ (8011714 <mem_init+0x90>)
 80116ea:	f240 221f 	movw	r2, #543	@ 0x21f
 80116ee:	490a      	ldr	r1, [pc, #40]	@ (8011718 <mem_init+0x94>)
 80116f0:	480a      	ldr	r0, [pc, #40]	@ (801171c <mem_init+0x98>)
 80116f2:	f00b fe3b 	bl	801d36c <iprintf>
  }
}
 80116f6:	bf00      	nop
 80116f8:	3708      	adds	r7, #8
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}
 80116fe:	bf00      	nop
 8011700:	2000b374 	.word	0x2000b374
 8011704:	20020000 	.word	0x20020000
 8011708:	2000b378 	.word	0x2000b378
 801170c:	2000b380 	.word	0x2000b380
 8011710:	2000b37c 	.word	0x2000b37c
 8011714:	0801f218 	.word	0x0801f218
 8011718:	0801f2ec 	.word	0x0801f2ec
 801171c:	0801f260 	.word	0x0801f260

08011720 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b086      	sub	sp, #24
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f7ff fef7 	bl	801151c <mem_to_ptr>
 801172e:	4603      	mov	r3, r0
 8011730:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	881b      	ldrh	r3, [r3, #0]
 8011736:	4618      	mov	r0, r3
 8011738:	f7ff fede 	bl	80114f8 <ptr_to_mem>
 801173c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	885b      	ldrh	r3, [r3, #2]
 8011742:	4618      	mov	r0, r3
 8011744:	f7ff fed8 	bl	80114f8 <ptr_to_mem>
 8011748:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	881b      	ldrh	r3, [r3, #0]
 801174e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011752:	d818      	bhi.n	8011786 <mem_link_valid+0x66>
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	885b      	ldrh	r3, [r3, #2]
 8011758:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801175c:	d813      	bhi.n	8011786 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011762:	8afa      	ldrh	r2, [r7, #22]
 8011764:	429a      	cmp	r2, r3
 8011766:	d004      	beq.n	8011772 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	881b      	ldrh	r3, [r3, #0]
 801176c:	8afa      	ldrh	r2, [r7, #22]
 801176e:	429a      	cmp	r2, r3
 8011770:	d109      	bne.n	8011786 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011772:	4b08      	ldr	r3, [pc, #32]	@ (8011794 <mem_link_valid+0x74>)
 8011774:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011776:	693a      	ldr	r2, [r7, #16]
 8011778:	429a      	cmp	r2, r3
 801177a:	d006      	beq.n	801178a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801177c:	693b      	ldr	r3, [r7, #16]
 801177e:	885b      	ldrh	r3, [r3, #2]
 8011780:	8afa      	ldrh	r2, [r7, #22]
 8011782:	429a      	cmp	r2, r3
 8011784:	d001      	beq.n	801178a <mem_link_valid+0x6a>
    return 0;
 8011786:	2300      	movs	r3, #0
 8011788:	e000      	b.n	801178c <mem_link_valid+0x6c>
  }
  return 1;
 801178a:	2301      	movs	r3, #1
}
 801178c:	4618      	mov	r0, r3
 801178e:	3718      	adds	r7, #24
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}
 8011794:	2000b378 	.word	0x2000b378

08011798 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b088      	sub	sp, #32
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d070      	beq.n	8011888 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f003 0303 	and.w	r3, r3, #3
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d00d      	beq.n	80117cc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80117b0:	4b37      	ldr	r3, [pc, #220]	@ (8011890 <mem_free+0xf8>)
 80117b2:	f240 2273 	movw	r2, #627	@ 0x273
 80117b6:	4937      	ldr	r1, [pc, #220]	@ (8011894 <mem_free+0xfc>)
 80117b8:	4837      	ldr	r0, [pc, #220]	@ (8011898 <mem_free+0x100>)
 80117ba:	f00b fdd7 	bl	801d36c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80117be:	f00a fe63 	bl	801c488 <sys_arch_protect>
 80117c2:	60f8      	str	r0, [r7, #12]
 80117c4:	68f8      	ldr	r0, [r7, #12]
 80117c6:	f00a fe6d 	bl	801c4a4 <sys_arch_unprotect>
    return;
 80117ca:	e05e      	b.n	801188a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	3b08      	subs	r3, #8
 80117d0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80117d2:	4b32      	ldr	r3, [pc, #200]	@ (801189c <mem_free+0x104>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	69fa      	ldr	r2, [r7, #28]
 80117d8:	429a      	cmp	r2, r3
 80117da:	d306      	bcc.n	80117ea <mem_free+0x52>
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f103 020c 	add.w	r2, r3, #12
 80117e2:	4b2f      	ldr	r3, [pc, #188]	@ (80118a0 <mem_free+0x108>)
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	429a      	cmp	r2, r3
 80117e8:	d90d      	bls.n	8011806 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80117ea:	4b29      	ldr	r3, [pc, #164]	@ (8011890 <mem_free+0xf8>)
 80117ec:	f240 227f 	movw	r2, #639	@ 0x27f
 80117f0:	492c      	ldr	r1, [pc, #176]	@ (80118a4 <mem_free+0x10c>)
 80117f2:	4829      	ldr	r0, [pc, #164]	@ (8011898 <mem_free+0x100>)
 80117f4:	f00b fdba 	bl	801d36c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80117f8:	f00a fe46 	bl	801c488 <sys_arch_protect>
 80117fc:	6138      	str	r0, [r7, #16]
 80117fe:	6938      	ldr	r0, [r7, #16]
 8011800:	f00a fe50 	bl	801c4a4 <sys_arch_unprotect>
    return;
 8011804:	e041      	b.n	801188a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011806:	4828      	ldr	r0, [pc, #160]	@ (80118a8 <mem_free+0x110>)
 8011808:	f00a fdfc 	bl	801c404 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	791b      	ldrb	r3, [r3, #4]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d110      	bne.n	8011836 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011814:	4b1e      	ldr	r3, [pc, #120]	@ (8011890 <mem_free+0xf8>)
 8011816:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 801181a:	4924      	ldr	r1, [pc, #144]	@ (80118ac <mem_free+0x114>)
 801181c:	481e      	ldr	r0, [pc, #120]	@ (8011898 <mem_free+0x100>)
 801181e:	f00b fda5 	bl	801d36c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011822:	4821      	ldr	r0, [pc, #132]	@ (80118a8 <mem_free+0x110>)
 8011824:	f00a fdfd 	bl	801c422 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011828:	f00a fe2e 	bl	801c488 <sys_arch_protect>
 801182c:	6178      	str	r0, [r7, #20]
 801182e:	6978      	ldr	r0, [r7, #20]
 8011830:	f00a fe38 	bl	801c4a4 <sys_arch_unprotect>
    return;
 8011834:	e029      	b.n	801188a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8011836:	69f8      	ldr	r0, [r7, #28]
 8011838:	f7ff ff72 	bl	8011720 <mem_link_valid>
 801183c:	4603      	mov	r3, r0
 801183e:	2b00      	cmp	r3, #0
 8011840:	d110      	bne.n	8011864 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8011842:	4b13      	ldr	r3, [pc, #76]	@ (8011890 <mem_free+0xf8>)
 8011844:	f240 2295 	movw	r2, #661	@ 0x295
 8011848:	4919      	ldr	r1, [pc, #100]	@ (80118b0 <mem_free+0x118>)
 801184a:	4813      	ldr	r0, [pc, #76]	@ (8011898 <mem_free+0x100>)
 801184c:	f00b fd8e 	bl	801d36c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011850:	4815      	ldr	r0, [pc, #84]	@ (80118a8 <mem_free+0x110>)
 8011852:	f00a fde6 	bl	801c422 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011856:	f00a fe17 	bl	801c488 <sys_arch_protect>
 801185a:	61b8      	str	r0, [r7, #24]
 801185c:	69b8      	ldr	r0, [r7, #24]
 801185e:	f00a fe21 	bl	801c4a4 <sys_arch_unprotect>
    return;
 8011862:	e012      	b.n	801188a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8011864:	69fb      	ldr	r3, [r7, #28]
 8011866:	2200      	movs	r2, #0
 8011868:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801186a:	4b12      	ldr	r3, [pc, #72]	@ (80118b4 <mem_free+0x11c>)
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	69fa      	ldr	r2, [r7, #28]
 8011870:	429a      	cmp	r2, r3
 8011872:	d202      	bcs.n	801187a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8011874:	4a0f      	ldr	r2, [pc, #60]	@ (80118b4 <mem_free+0x11c>)
 8011876:	69fb      	ldr	r3, [r7, #28]
 8011878:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801187a:	69f8      	ldr	r0, [r7, #28]
 801187c:	f7ff fe60 	bl	8011540 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011880:	4809      	ldr	r0, [pc, #36]	@ (80118a8 <mem_free+0x110>)
 8011882:	f00a fdce 	bl	801c422 <sys_mutex_unlock>
 8011886:	e000      	b.n	801188a <mem_free+0xf2>
    return;
 8011888:	bf00      	nop
}
 801188a:	3720      	adds	r7, #32
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}
 8011890:	0801f218 	.word	0x0801f218
 8011894:	0801f308 	.word	0x0801f308
 8011898:	0801f260 	.word	0x0801f260
 801189c:	2000b374 	.word	0x2000b374
 80118a0:	2000b378 	.word	0x2000b378
 80118a4:	0801f32c 	.word	0x0801f32c
 80118a8:	2000b37c 	.word	0x2000b37c
 80118ac:	0801f348 	.word	0x0801f348
 80118b0:	0801f370 	.word	0x0801f370
 80118b4:	2000b380 	.word	0x2000b380

080118b8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b088      	sub	sp, #32
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
 80118c0:	460b      	mov	r3, r1
 80118c2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80118c4:	887b      	ldrh	r3, [r7, #2]
 80118c6:	3303      	adds	r3, #3
 80118c8:	b29b      	uxth	r3, r3
 80118ca:	f023 0303 	bic.w	r3, r3, #3
 80118ce:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80118d0:	8bfb      	ldrh	r3, [r7, #30]
 80118d2:	2b0b      	cmp	r3, #11
 80118d4:	d801      	bhi.n	80118da <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80118d6:	230c      	movs	r3, #12
 80118d8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80118da:	8bfb      	ldrh	r3, [r7, #30]
 80118dc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80118e0:	d803      	bhi.n	80118ea <mem_trim+0x32>
 80118e2:	8bfa      	ldrh	r2, [r7, #30]
 80118e4:	887b      	ldrh	r3, [r7, #2]
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d201      	bcs.n	80118ee <mem_trim+0x36>
    return NULL;
 80118ea:	2300      	movs	r3, #0
 80118ec:	e0d8      	b.n	8011aa0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80118ee:	4b6e      	ldr	r3, [pc, #440]	@ (8011aa8 <mem_trim+0x1f0>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	687a      	ldr	r2, [r7, #4]
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d304      	bcc.n	8011902 <mem_trim+0x4a>
 80118f8:	4b6c      	ldr	r3, [pc, #432]	@ (8011aac <mem_trim+0x1f4>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	687a      	ldr	r2, [r7, #4]
 80118fe:	429a      	cmp	r2, r3
 8011900:	d306      	bcc.n	8011910 <mem_trim+0x58>
 8011902:	4b6b      	ldr	r3, [pc, #428]	@ (8011ab0 <mem_trim+0x1f8>)
 8011904:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8011908:	496a      	ldr	r1, [pc, #424]	@ (8011ab4 <mem_trim+0x1fc>)
 801190a:	486b      	ldr	r0, [pc, #428]	@ (8011ab8 <mem_trim+0x200>)
 801190c:	f00b fd2e 	bl	801d36c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011910:	4b65      	ldr	r3, [pc, #404]	@ (8011aa8 <mem_trim+0x1f0>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	687a      	ldr	r2, [r7, #4]
 8011916:	429a      	cmp	r2, r3
 8011918:	d304      	bcc.n	8011924 <mem_trim+0x6c>
 801191a:	4b64      	ldr	r3, [pc, #400]	@ (8011aac <mem_trim+0x1f4>)
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	687a      	ldr	r2, [r7, #4]
 8011920:	429a      	cmp	r2, r3
 8011922:	d307      	bcc.n	8011934 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011924:	f00a fdb0 	bl	801c488 <sys_arch_protect>
 8011928:	60b8      	str	r0, [r7, #8]
 801192a:	68b8      	ldr	r0, [r7, #8]
 801192c:	f00a fdba 	bl	801c4a4 <sys_arch_unprotect>
    return rmem;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	e0b5      	b.n	8011aa0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	3b08      	subs	r3, #8
 8011938:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801193a:	69b8      	ldr	r0, [r7, #24]
 801193c:	f7ff fdee 	bl	801151c <mem_to_ptr>
 8011940:	4603      	mov	r3, r0
 8011942:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011944:	69bb      	ldr	r3, [r7, #24]
 8011946:	881a      	ldrh	r2, [r3, #0]
 8011948:	8afb      	ldrh	r3, [r7, #22]
 801194a:	1ad3      	subs	r3, r2, r3
 801194c:	b29b      	uxth	r3, r3
 801194e:	3b08      	subs	r3, #8
 8011950:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8011952:	8bfa      	ldrh	r2, [r7, #30]
 8011954:	8abb      	ldrh	r3, [r7, #20]
 8011956:	429a      	cmp	r2, r3
 8011958:	d906      	bls.n	8011968 <mem_trim+0xb0>
 801195a:	4b55      	ldr	r3, [pc, #340]	@ (8011ab0 <mem_trim+0x1f8>)
 801195c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8011960:	4956      	ldr	r1, [pc, #344]	@ (8011abc <mem_trim+0x204>)
 8011962:	4855      	ldr	r0, [pc, #340]	@ (8011ab8 <mem_trim+0x200>)
 8011964:	f00b fd02 	bl	801d36c <iprintf>
  if (newsize > size) {
 8011968:	8bfa      	ldrh	r2, [r7, #30]
 801196a:	8abb      	ldrh	r3, [r7, #20]
 801196c:	429a      	cmp	r2, r3
 801196e:	d901      	bls.n	8011974 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8011970:	2300      	movs	r3, #0
 8011972:	e095      	b.n	8011aa0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8011974:	8bfa      	ldrh	r2, [r7, #30]
 8011976:	8abb      	ldrh	r3, [r7, #20]
 8011978:	429a      	cmp	r2, r3
 801197a:	d101      	bne.n	8011980 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	e08f      	b.n	8011aa0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011980:	484f      	ldr	r0, [pc, #316]	@ (8011ac0 <mem_trim+0x208>)
 8011982:	f00a fd3f 	bl	801c404 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8011986:	69bb      	ldr	r3, [r7, #24]
 8011988:	881b      	ldrh	r3, [r3, #0]
 801198a:	4618      	mov	r0, r3
 801198c:	f7ff fdb4 	bl	80114f8 <ptr_to_mem>
 8011990:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8011992:	693b      	ldr	r3, [r7, #16]
 8011994:	791b      	ldrb	r3, [r3, #4]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d13f      	bne.n	8011a1a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801199a:	69bb      	ldr	r3, [r7, #24]
 801199c:	881b      	ldrh	r3, [r3, #0]
 801199e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80119a2:	d106      	bne.n	80119b2 <mem_trim+0xfa>
 80119a4:	4b42      	ldr	r3, [pc, #264]	@ (8011ab0 <mem_trim+0x1f8>)
 80119a6:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80119aa:	4946      	ldr	r1, [pc, #280]	@ (8011ac4 <mem_trim+0x20c>)
 80119ac:	4842      	ldr	r0, [pc, #264]	@ (8011ab8 <mem_trim+0x200>)
 80119ae:	f00b fcdd 	bl	801d36c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80119b2:	693b      	ldr	r3, [r7, #16]
 80119b4:	881b      	ldrh	r3, [r3, #0]
 80119b6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80119b8:	8afa      	ldrh	r2, [r7, #22]
 80119ba:	8bfb      	ldrh	r3, [r7, #30]
 80119bc:	4413      	add	r3, r2
 80119be:	b29b      	uxth	r3, r3
 80119c0:	3308      	adds	r3, #8
 80119c2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80119c4:	4b40      	ldr	r3, [pc, #256]	@ (8011ac8 <mem_trim+0x210>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	693a      	ldr	r2, [r7, #16]
 80119ca:	429a      	cmp	r2, r3
 80119cc:	d106      	bne.n	80119dc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80119ce:	89fb      	ldrh	r3, [r7, #14]
 80119d0:	4618      	mov	r0, r3
 80119d2:	f7ff fd91 	bl	80114f8 <ptr_to_mem>
 80119d6:	4603      	mov	r3, r0
 80119d8:	4a3b      	ldr	r2, [pc, #236]	@ (8011ac8 <mem_trim+0x210>)
 80119da:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80119dc:	89fb      	ldrh	r3, [r7, #14]
 80119de:	4618      	mov	r0, r3
 80119e0:	f7ff fd8a 	bl	80114f8 <ptr_to_mem>
 80119e4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80119e6:	693b      	ldr	r3, [r7, #16]
 80119e8:	2200      	movs	r2, #0
 80119ea:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80119ec:	693b      	ldr	r3, [r7, #16]
 80119ee:	89ba      	ldrh	r2, [r7, #12]
 80119f0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	8afa      	ldrh	r2, [r7, #22]
 80119f6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80119f8:	69bb      	ldr	r3, [r7, #24]
 80119fa:	89fa      	ldrh	r2, [r7, #14]
 80119fc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80119fe:	693b      	ldr	r3, [r7, #16]
 8011a00:	881b      	ldrh	r3, [r3, #0]
 8011a02:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011a06:	d047      	beq.n	8011a98 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	881b      	ldrh	r3, [r3, #0]
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7ff fd73 	bl	80114f8 <ptr_to_mem>
 8011a12:	4602      	mov	r2, r0
 8011a14:	89fb      	ldrh	r3, [r7, #14]
 8011a16:	8053      	strh	r3, [r2, #2]
 8011a18:	e03e      	b.n	8011a98 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011a1a:	8bfb      	ldrh	r3, [r7, #30]
 8011a1c:	f103 0214 	add.w	r2, r3, #20
 8011a20:	8abb      	ldrh	r3, [r7, #20]
 8011a22:	429a      	cmp	r2, r3
 8011a24:	d838      	bhi.n	8011a98 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011a26:	8afa      	ldrh	r2, [r7, #22]
 8011a28:	8bfb      	ldrh	r3, [r7, #30]
 8011a2a:	4413      	add	r3, r2
 8011a2c:	b29b      	uxth	r3, r3
 8011a2e:	3308      	adds	r3, #8
 8011a30:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011a32:	69bb      	ldr	r3, [r7, #24]
 8011a34:	881b      	ldrh	r3, [r3, #0]
 8011a36:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011a3a:	d106      	bne.n	8011a4a <mem_trim+0x192>
 8011a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8011ab0 <mem_trim+0x1f8>)
 8011a3e:	f240 3216 	movw	r2, #790	@ 0x316
 8011a42:	4920      	ldr	r1, [pc, #128]	@ (8011ac4 <mem_trim+0x20c>)
 8011a44:	481c      	ldr	r0, [pc, #112]	@ (8011ab8 <mem_trim+0x200>)
 8011a46:	f00b fc91 	bl	801d36c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011a4a:	89fb      	ldrh	r3, [r7, #14]
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f7ff fd53 	bl	80114f8 <ptr_to_mem>
 8011a52:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011a54:	4b1c      	ldr	r3, [pc, #112]	@ (8011ac8 <mem_trim+0x210>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	693a      	ldr	r2, [r7, #16]
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d202      	bcs.n	8011a64 <mem_trim+0x1ac>
      lfree = mem2;
 8011a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8011ac8 <mem_trim+0x210>)
 8011a60:	693b      	ldr	r3, [r7, #16]
 8011a62:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011a64:	693b      	ldr	r3, [r7, #16]
 8011a66:	2200      	movs	r2, #0
 8011a68:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011a6a:	69bb      	ldr	r3, [r7, #24]
 8011a6c:	881a      	ldrh	r2, [r3, #0]
 8011a6e:	693b      	ldr	r3, [r7, #16]
 8011a70:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	8afa      	ldrh	r2, [r7, #22]
 8011a76:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011a78:	69bb      	ldr	r3, [r7, #24]
 8011a7a:	89fa      	ldrh	r2, [r7, #14]
 8011a7c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011a7e:	693b      	ldr	r3, [r7, #16]
 8011a80:	881b      	ldrh	r3, [r3, #0]
 8011a82:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011a86:	d007      	beq.n	8011a98 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	881b      	ldrh	r3, [r3, #0]
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f7ff fd33 	bl	80114f8 <ptr_to_mem>
 8011a92:	4602      	mov	r2, r0
 8011a94:	89fb      	ldrh	r3, [r7, #14]
 8011a96:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011a98:	4809      	ldr	r0, [pc, #36]	@ (8011ac0 <mem_trim+0x208>)
 8011a9a:	f00a fcc2 	bl	801c422 <sys_mutex_unlock>
  return rmem;
 8011a9e:	687b      	ldr	r3, [r7, #4]
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	3720      	adds	r7, #32
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}
 8011aa8:	2000b374 	.word	0x2000b374
 8011aac:	2000b378 	.word	0x2000b378
 8011ab0:	0801f218 	.word	0x0801f218
 8011ab4:	0801f3a4 	.word	0x0801f3a4
 8011ab8:	0801f260 	.word	0x0801f260
 8011abc:	0801f3bc 	.word	0x0801f3bc
 8011ac0:	2000b37c 	.word	0x2000b37c
 8011ac4:	0801f3dc 	.word	0x0801f3dc
 8011ac8:	2000b380 	.word	0x2000b380

08011acc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b088      	sub	sp, #32
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011ad6:	88fb      	ldrh	r3, [r7, #6]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d101      	bne.n	8011ae0 <mem_malloc+0x14>
    return NULL;
 8011adc:	2300      	movs	r3, #0
 8011ade:	e0e2      	b.n	8011ca6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011ae0:	88fb      	ldrh	r3, [r7, #6]
 8011ae2:	3303      	adds	r3, #3
 8011ae4:	b29b      	uxth	r3, r3
 8011ae6:	f023 0303 	bic.w	r3, r3, #3
 8011aea:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011aec:	8bbb      	ldrh	r3, [r7, #28]
 8011aee:	2b0b      	cmp	r3, #11
 8011af0:	d801      	bhi.n	8011af6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8011af2:	230c      	movs	r3, #12
 8011af4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8011af6:	8bbb      	ldrh	r3, [r7, #28]
 8011af8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011afc:	d803      	bhi.n	8011b06 <mem_malloc+0x3a>
 8011afe:	8bba      	ldrh	r2, [r7, #28]
 8011b00:	88fb      	ldrh	r3, [r7, #6]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d201      	bcs.n	8011b0a <mem_malloc+0x3e>
    return NULL;
 8011b06:	2300      	movs	r3, #0
 8011b08:	e0cd      	b.n	8011ca6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8011b0a:	4869      	ldr	r0, [pc, #420]	@ (8011cb0 <mem_malloc+0x1e4>)
 8011b0c:	f00a fc7a 	bl	801c404 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011b10:	4b68      	ldr	r3, [pc, #416]	@ (8011cb4 <mem_malloc+0x1e8>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	4618      	mov	r0, r3
 8011b16:	f7ff fd01 	bl	801151c <mem_to_ptr>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	83fb      	strh	r3, [r7, #30]
 8011b1e:	e0b7      	b.n	8011c90 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011b20:	8bfb      	ldrh	r3, [r7, #30]
 8011b22:	4618      	mov	r0, r3
 8011b24:	f7ff fce8 	bl	80114f8 <ptr_to_mem>
 8011b28:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011b2a:	697b      	ldr	r3, [r7, #20]
 8011b2c:	791b      	ldrb	r3, [r3, #4]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	f040 80a7 	bne.w	8011c82 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	881b      	ldrh	r3, [r3, #0]
 8011b38:	461a      	mov	r2, r3
 8011b3a:	8bfb      	ldrh	r3, [r7, #30]
 8011b3c:	1ad3      	subs	r3, r2, r3
 8011b3e:	f1a3 0208 	sub.w	r2, r3, #8
 8011b42:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011b44:	429a      	cmp	r2, r3
 8011b46:	f0c0 809c 	bcc.w	8011c82 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011b4a:	697b      	ldr	r3, [r7, #20]
 8011b4c:	881b      	ldrh	r3, [r3, #0]
 8011b4e:	461a      	mov	r2, r3
 8011b50:	8bfb      	ldrh	r3, [r7, #30]
 8011b52:	1ad3      	subs	r3, r2, r3
 8011b54:	f1a3 0208 	sub.w	r2, r3, #8
 8011b58:	8bbb      	ldrh	r3, [r7, #28]
 8011b5a:	3314      	adds	r3, #20
 8011b5c:	429a      	cmp	r2, r3
 8011b5e:	d333      	bcc.n	8011bc8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011b60:	8bfa      	ldrh	r2, [r7, #30]
 8011b62:	8bbb      	ldrh	r3, [r7, #28]
 8011b64:	4413      	add	r3, r2
 8011b66:	b29b      	uxth	r3, r3
 8011b68:	3308      	adds	r3, #8
 8011b6a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011b6c:	8a7b      	ldrh	r3, [r7, #18]
 8011b6e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011b72:	d106      	bne.n	8011b82 <mem_malloc+0xb6>
 8011b74:	4b50      	ldr	r3, [pc, #320]	@ (8011cb8 <mem_malloc+0x1ec>)
 8011b76:	f240 3287 	movw	r2, #903	@ 0x387
 8011b7a:	4950      	ldr	r1, [pc, #320]	@ (8011cbc <mem_malloc+0x1f0>)
 8011b7c:	4850      	ldr	r0, [pc, #320]	@ (8011cc0 <mem_malloc+0x1f4>)
 8011b7e:	f00b fbf5 	bl	801d36c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8011b82:	8a7b      	ldrh	r3, [r7, #18]
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7ff fcb7 	bl	80114f8 <ptr_to_mem>
 8011b8a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	2200      	movs	r2, #0
 8011b90:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	881a      	ldrh	r2, [r3, #0]
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	8bfa      	ldrh	r2, [r7, #30]
 8011b9e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	8a7a      	ldrh	r2, [r7, #18]
 8011ba4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	2201      	movs	r2, #1
 8011baa:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	881b      	ldrh	r3, [r3, #0]
 8011bb0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011bb4:	d00b      	beq.n	8011bce <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	881b      	ldrh	r3, [r3, #0]
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7ff fc9c 	bl	80114f8 <ptr_to_mem>
 8011bc0:	4602      	mov	r2, r0
 8011bc2:	8a7b      	ldrh	r3, [r7, #18]
 8011bc4:	8053      	strh	r3, [r2, #2]
 8011bc6:	e002      	b.n	8011bce <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011bc8:	697b      	ldr	r3, [r7, #20]
 8011bca:	2201      	movs	r2, #1
 8011bcc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011bce:	4b39      	ldr	r3, [pc, #228]	@ (8011cb4 <mem_malloc+0x1e8>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	697a      	ldr	r2, [r7, #20]
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d127      	bne.n	8011c28 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011bd8:	4b36      	ldr	r3, [pc, #216]	@ (8011cb4 <mem_malloc+0x1e8>)
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011bde:	e005      	b.n	8011bec <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011be0:	69bb      	ldr	r3, [r7, #24]
 8011be2:	881b      	ldrh	r3, [r3, #0]
 8011be4:	4618      	mov	r0, r3
 8011be6:	f7ff fc87 	bl	80114f8 <ptr_to_mem>
 8011bea:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011bec:	69bb      	ldr	r3, [r7, #24]
 8011bee:	791b      	ldrb	r3, [r3, #4]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d004      	beq.n	8011bfe <mem_malloc+0x132>
 8011bf4:	4b33      	ldr	r3, [pc, #204]	@ (8011cc4 <mem_malloc+0x1f8>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	69ba      	ldr	r2, [r7, #24]
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	d1f0      	bne.n	8011be0 <mem_malloc+0x114>
          }
          lfree = cur;
 8011bfe:	4a2d      	ldr	r2, [pc, #180]	@ (8011cb4 <mem_malloc+0x1e8>)
 8011c00:	69bb      	ldr	r3, [r7, #24]
 8011c02:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8011c04:	4b2b      	ldr	r3, [pc, #172]	@ (8011cb4 <mem_malloc+0x1e8>)
 8011c06:	681a      	ldr	r2, [r3, #0]
 8011c08:	4b2e      	ldr	r3, [pc, #184]	@ (8011cc4 <mem_malloc+0x1f8>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d00b      	beq.n	8011c28 <mem_malloc+0x15c>
 8011c10:	4b28      	ldr	r3, [pc, #160]	@ (8011cb4 <mem_malloc+0x1e8>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	791b      	ldrb	r3, [r3, #4]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d006      	beq.n	8011c28 <mem_malloc+0x15c>
 8011c1a:	4b27      	ldr	r3, [pc, #156]	@ (8011cb8 <mem_malloc+0x1ec>)
 8011c1c:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8011c20:	4929      	ldr	r1, [pc, #164]	@ (8011cc8 <mem_malloc+0x1fc>)
 8011c22:	4827      	ldr	r0, [pc, #156]	@ (8011cc0 <mem_malloc+0x1f4>)
 8011c24:	f00b fba2 	bl	801d36c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8011c28:	4821      	ldr	r0, [pc, #132]	@ (8011cb0 <mem_malloc+0x1e4>)
 8011c2a:	f00a fbfa 	bl	801c422 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8011c2e:	8bba      	ldrh	r2, [r7, #28]
 8011c30:	697b      	ldr	r3, [r7, #20]
 8011c32:	4413      	add	r3, r2
 8011c34:	3308      	adds	r3, #8
 8011c36:	4a23      	ldr	r2, [pc, #140]	@ (8011cc4 <mem_malloc+0x1f8>)
 8011c38:	6812      	ldr	r2, [r2, #0]
 8011c3a:	4293      	cmp	r3, r2
 8011c3c:	d906      	bls.n	8011c4c <mem_malloc+0x180>
 8011c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8011cb8 <mem_malloc+0x1ec>)
 8011c40:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8011c44:	4921      	ldr	r1, [pc, #132]	@ (8011ccc <mem_malloc+0x200>)
 8011c46:	481e      	ldr	r0, [pc, #120]	@ (8011cc0 <mem_malloc+0x1f4>)
 8011c48:	f00b fb90 	bl	801d36c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011c4c:	697b      	ldr	r3, [r7, #20]
 8011c4e:	f003 0303 	and.w	r3, r3, #3
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d006      	beq.n	8011c64 <mem_malloc+0x198>
 8011c56:	4b18      	ldr	r3, [pc, #96]	@ (8011cb8 <mem_malloc+0x1ec>)
 8011c58:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8011c5c:	491c      	ldr	r1, [pc, #112]	@ (8011cd0 <mem_malloc+0x204>)
 8011c5e:	4818      	ldr	r0, [pc, #96]	@ (8011cc0 <mem_malloc+0x1f4>)
 8011c60:	f00b fb84 	bl	801d36c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	f003 0303 	and.w	r3, r3, #3
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d006      	beq.n	8011c7c <mem_malloc+0x1b0>
 8011c6e:	4b12      	ldr	r3, [pc, #72]	@ (8011cb8 <mem_malloc+0x1ec>)
 8011c70:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8011c74:	4917      	ldr	r1, [pc, #92]	@ (8011cd4 <mem_malloc+0x208>)
 8011c76:	4812      	ldr	r0, [pc, #72]	@ (8011cc0 <mem_malloc+0x1f4>)
 8011c78:	f00b fb78 	bl	801d36c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	3308      	adds	r3, #8
 8011c80:	e011      	b.n	8011ca6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8011c82:	8bfb      	ldrh	r3, [r7, #30]
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7ff fc37 	bl	80114f8 <ptr_to_mem>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	881b      	ldrh	r3, [r3, #0]
 8011c8e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011c90:	8bfa      	ldrh	r2, [r7, #30]
 8011c92:	8bbb      	ldrh	r3, [r7, #28]
 8011c94:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 8011c98:	429a      	cmp	r2, r3
 8011c9a:	f4ff af41 	bcc.w	8011b20 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8011c9e:	4804      	ldr	r0, [pc, #16]	@ (8011cb0 <mem_malloc+0x1e4>)
 8011ca0:	f00a fbbf 	bl	801c422 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011ca4:	2300      	movs	r3, #0
}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	3720      	adds	r7, #32
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd80      	pop	{r7, pc}
 8011cae:	bf00      	nop
 8011cb0:	2000b37c 	.word	0x2000b37c
 8011cb4:	2000b380 	.word	0x2000b380
 8011cb8:	0801f218 	.word	0x0801f218
 8011cbc:	0801f3dc 	.word	0x0801f3dc
 8011cc0:	0801f260 	.word	0x0801f260
 8011cc4:	2000b378 	.word	0x2000b378
 8011cc8:	0801f3f0 	.word	0x0801f3f0
 8011ccc:	0801f40c 	.word	0x0801f40c
 8011cd0:	0801f43c 	.word	0x0801f43c
 8011cd4:	0801f46c 	.word	0x0801f46c

08011cd8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011cd8:	b480      	push	{r7}
 8011cda:	b085      	sub	sp, #20
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	689b      	ldr	r3, [r3, #8]
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	685b      	ldr	r3, [r3, #4]
 8011cec:	3303      	adds	r3, #3
 8011cee:	f023 0303 	bic.w	r3, r3, #3
 8011cf2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	60fb      	str	r3, [r7, #12]
 8011cf8:	e011      	b.n	8011d1e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	689b      	ldr	r3, [r3, #8]
 8011cfe:	681a      	ldr	r2, [r3, #0]
 8011d00:	68bb      	ldr	r3, [r7, #8]
 8011d02:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	689b      	ldr	r3, [r3, #8]
 8011d08:	68ba      	ldr	r2, [r7, #8]
 8011d0a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	881b      	ldrh	r3, [r3, #0]
 8011d10:	461a      	mov	r2, r3
 8011d12:	68bb      	ldr	r3, [r7, #8]
 8011d14:	4413      	add	r3, r2
 8011d16:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	3301      	adds	r3, #1
 8011d1c:	60fb      	str	r3, [r7, #12]
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	885b      	ldrh	r3, [r3, #2]
 8011d22:	461a      	mov	r2, r3
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	4293      	cmp	r3, r2
 8011d28:	dbe7      	blt.n	8011cfa <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011d2a:	bf00      	nop
 8011d2c:	bf00      	nop
 8011d2e:	3714      	adds	r7, #20
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr

08011d38 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b082      	sub	sp, #8
 8011d3c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011d3e:	2300      	movs	r3, #0
 8011d40:	80fb      	strh	r3, [r7, #6]
 8011d42:	e009      	b.n	8011d58 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011d44:	88fb      	ldrh	r3, [r7, #6]
 8011d46:	4a08      	ldr	r2, [pc, #32]	@ (8011d68 <memp_init+0x30>)
 8011d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7ff ffc3 	bl	8011cd8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011d52:	88fb      	ldrh	r3, [r7, #6]
 8011d54:	3301      	adds	r3, #1
 8011d56:	80fb      	strh	r3, [r7, #6]
 8011d58:	88fb      	ldrh	r3, [r7, #6]
 8011d5a:	2b0c      	cmp	r3, #12
 8011d5c:	d9f2      	bls.n	8011d44 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8011d5e:	bf00      	nop
 8011d60:	bf00      	nop
 8011d62:	3708      	adds	r7, #8
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}
 8011d68:	080324a4 	.word	0x080324a4

08011d6c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b084      	sub	sp, #16
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8011d74:	f00a fb88 	bl	801c488 <sys_arch_protect>
 8011d78:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	689b      	ldr	r3, [r3, #8]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d015      	beq.n	8011db4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	689b      	ldr	r3, [r3, #8]
 8011d8c:	68ba      	ldr	r2, [r7, #8]
 8011d8e:	6812      	ldr	r2, [r2, #0]
 8011d90:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	f003 0303 	and.w	r3, r3, #3
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d006      	beq.n	8011daa <do_memp_malloc_pool+0x3e>
 8011d9c:	4b09      	ldr	r3, [pc, #36]	@ (8011dc4 <do_memp_malloc_pool+0x58>)
 8011d9e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8011da2:	4909      	ldr	r1, [pc, #36]	@ (8011dc8 <do_memp_malloc_pool+0x5c>)
 8011da4:	4809      	ldr	r0, [pc, #36]	@ (8011dcc <do_memp_malloc_pool+0x60>)
 8011da6:	f00b fae1 	bl	801d36c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011daa:	68f8      	ldr	r0, [r7, #12]
 8011dac:	f00a fb7a 	bl	801c4a4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	e003      	b.n	8011dbc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011db4:	68f8      	ldr	r0, [r7, #12]
 8011db6:	f00a fb75 	bl	801c4a4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011dba:	2300      	movs	r3, #0
}
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	3710      	adds	r7, #16
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}
 8011dc4:	0801f490 	.word	0x0801f490
 8011dc8:	0801f4c0 	.word	0x0801f4c0
 8011dcc:	0801f4e4 	.word	0x0801f4e4

08011dd0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b082      	sub	sp, #8
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d106      	bne.n	8011dec <memp_malloc_pool+0x1c>
 8011dde:	4b0a      	ldr	r3, [pc, #40]	@ (8011e08 <memp_malloc_pool+0x38>)
 8011de0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8011de4:	4909      	ldr	r1, [pc, #36]	@ (8011e0c <memp_malloc_pool+0x3c>)
 8011de6:	480a      	ldr	r0, [pc, #40]	@ (8011e10 <memp_malloc_pool+0x40>)
 8011de8:	f00b fac0 	bl	801d36c <iprintf>
  if (desc == NULL) {
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d101      	bne.n	8011df6 <memp_malloc_pool+0x26>
    return NULL;
 8011df2:	2300      	movs	r3, #0
 8011df4:	e003      	b.n	8011dfe <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8011df6:	6878      	ldr	r0, [r7, #4]
 8011df8:	f7ff ffb8 	bl	8011d6c <do_memp_malloc_pool>
 8011dfc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	3708      	adds	r7, #8
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}
 8011e06:	bf00      	nop
 8011e08:	0801f490 	.word	0x0801f490
 8011e0c:	0801f50c 	.word	0x0801f50c
 8011e10:	0801f4e4 	.word	0x0801f4e4

08011e14 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b084      	sub	sp, #16
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011e1e:	79fb      	ldrb	r3, [r7, #7]
 8011e20:	2b0c      	cmp	r3, #12
 8011e22:	d908      	bls.n	8011e36 <memp_malloc+0x22>
 8011e24:	4b0a      	ldr	r3, [pc, #40]	@ (8011e50 <memp_malloc+0x3c>)
 8011e26:	f240 1257 	movw	r2, #343	@ 0x157
 8011e2a:	490a      	ldr	r1, [pc, #40]	@ (8011e54 <memp_malloc+0x40>)
 8011e2c:	480a      	ldr	r0, [pc, #40]	@ (8011e58 <memp_malloc+0x44>)
 8011e2e:	f00b fa9d 	bl	801d36c <iprintf>
 8011e32:	2300      	movs	r3, #0
 8011e34:	e008      	b.n	8011e48 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8011e36:	79fb      	ldrb	r3, [r7, #7]
 8011e38:	4a08      	ldr	r2, [pc, #32]	@ (8011e5c <memp_malloc+0x48>)
 8011e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7ff ff94 	bl	8011d6c <do_memp_malloc_pool>
 8011e44:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8011e46:	68fb      	ldr	r3, [r7, #12]
}
 8011e48:	4618      	mov	r0, r3
 8011e4a:	3710      	adds	r7, #16
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}
 8011e50:	0801f490 	.word	0x0801f490
 8011e54:	0801f520 	.word	0x0801f520
 8011e58:	0801f4e4 	.word	0x0801f4e4
 8011e5c:	080324a4 	.word	0x080324a4

08011e60 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b084      	sub	sp, #16
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	f003 0303 	and.w	r3, r3, #3
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d006      	beq.n	8011e82 <do_memp_free_pool+0x22>
 8011e74:	4b0d      	ldr	r3, [pc, #52]	@ (8011eac <do_memp_free_pool+0x4c>)
 8011e76:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8011e7a:	490d      	ldr	r1, [pc, #52]	@ (8011eb0 <do_memp_free_pool+0x50>)
 8011e7c:	480d      	ldr	r0, [pc, #52]	@ (8011eb4 <do_memp_free_pool+0x54>)
 8011e7e:	f00b fa75 	bl	801d36c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8011e86:	f00a faff 	bl	801c488 <sys_arch_protect>
 8011e8a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	689b      	ldr	r3, [r3, #8]
 8011e90:	681a      	ldr	r2, [r3, #0]
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	689b      	ldr	r3, [r3, #8]
 8011e9a:	68fa      	ldr	r2, [r7, #12]
 8011e9c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8011e9e:	68b8      	ldr	r0, [r7, #8]
 8011ea0:	f00a fb00 	bl	801c4a4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8011ea4:	bf00      	nop
 8011ea6:	3710      	adds	r7, #16
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}
 8011eac:	0801f490 	.word	0x0801f490
 8011eb0:	0801f540 	.word	0x0801f540
 8011eb4:	0801f4e4 	.word	0x0801f4e4

08011eb8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b082      	sub	sp, #8
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
 8011ec0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d106      	bne.n	8011ed6 <memp_free_pool+0x1e>
 8011ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8011ef4 <memp_free_pool+0x3c>)
 8011eca:	f240 1295 	movw	r2, #405	@ 0x195
 8011ece:	490a      	ldr	r1, [pc, #40]	@ (8011ef8 <memp_free_pool+0x40>)
 8011ed0:	480a      	ldr	r0, [pc, #40]	@ (8011efc <memp_free_pool+0x44>)
 8011ed2:	f00b fa4b 	bl	801d36c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d007      	beq.n	8011eec <memp_free_pool+0x34>
 8011edc:	683b      	ldr	r3, [r7, #0]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d004      	beq.n	8011eec <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8011ee2:	6839      	ldr	r1, [r7, #0]
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f7ff ffbb 	bl	8011e60 <do_memp_free_pool>
 8011eea:	e000      	b.n	8011eee <memp_free_pool+0x36>
    return;
 8011eec:	bf00      	nop
}
 8011eee:	3708      	adds	r7, #8
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd80      	pop	{r7, pc}
 8011ef4:	0801f490 	.word	0x0801f490
 8011ef8:	0801f50c 	.word	0x0801f50c
 8011efc:	0801f4e4 	.word	0x0801f4e4

08011f00 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b082      	sub	sp, #8
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	4603      	mov	r3, r0
 8011f08:	6039      	str	r1, [r7, #0]
 8011f0a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011f0c:	79fb      	ldrb	r3, [r7, #7]
 8011f0e:	2b0c      	cmp	r3, #12
 8011f10:	d907      	bls.n	8011f22 <memp_free+0x22>
 8011f12:	4b0c      	ldr	r3, [pc, #48]	@ (8011f44 <memp_free+0x44>)
 8011f14:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8011f18:	490b      	ldr	r1, [pc, #44]	@ (8011f48 <memp_free+0x48>)
 8011f1a:	480c      	ldr	r0, [pc, #48]	@ (8011f4c <memp_free+0x4c>)
 8011f1c:	f00b fa26 	bl	801d36c <iprintf>
 8011f20:	e00c      	b.n	8011f3c <memp_free+0x3c>

  if (mem == NULL) {
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d008      	beq.n	8011f3a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8011f28:	79fb      	ldrb	r3, [r7, #7]
 8011f2a:	4a09      	ldr	r2, [pc, #36]	@ (8011f50 <memp_free+0x50>)
 8011f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f30:	6839      	ldr	r1, [r7, #0]
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7ff ff94 	bl	8011e60 <do_memp_free_pool>
 8011f38:	e000      	b.n	8011f3c <memp_free+0x3c>
    return;
 8011f3a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8011f3c:	3708      	adds	r7, #8
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}
 8011f42:	bf00      	nop
 8011f44:	0801f490 	.word	0x0801f490
 8011f48:	0801f560 	.word	0x0801f560
 8011f4c:	0801f4e4 	.word	0x0801f4e4
 8011f50:	080324a4 	.word	0x080324a4

08011f54 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8011f54:	b480      	push	{r7}
 8011f56:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011f58:	bf00      	nop
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f60:	4770      	bx	lr
	...

08011f64 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b086      	sub	sp, #24
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	60f8      	str	r0, [r7, #12]
 8011f6c:	60b9      	str	r1, [r7, #8]
 8011f6e:	607a      	str	r2, [r7, #4]
 8011f70:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d108      	bne.n	8011f8a <netif_add+0x26>
 8011f78:	4b57      	ldr	r3, [pc, #348]	@ (80120d8 <netif_add+0x174>)
 8011f7a:	f240 1227 	movw	r2, #295	@ 0x127
 8011f7e:	4957      	ldr	r1, [pc, #348]	@ (80120dc <netif_add+0x178>)
 8011f80:	4857      	ldr	r0, [pc, #348]	@ (80120e0 <netif_add+0x17c>)
 8011f82:	f00b f9f3 	bl	801d36c <iprintf>
 8011f86:	2300      	movs	r3, #0
 8011f88:	e0a2      	b.n	80120d0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8011f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d108      	bne.n	8011fa2 <netif_add+0x3e>
 8011f90:	4b51      	ldr	r3, [pc, #324]	@ (80120d8 <netif_add+0x174>)
 8011f92:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8011f96:	4953      	ldr	r1, [pc, #332]	@ (80120e4 <netif_add+0x180>)
 8011f98:	4851      	ldr	r0, [pc, #324]	@ (80120e0 <netif_add+0x17c>)
 8011f9a:	f00b f9e7 	bl	801d36c <iprintf>
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	e096      	b.n	80120d0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8011fa2:	68bb      	ldr	r3, [r7, #8]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d101      	bne.n	8011fac <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8011fa8:	4b4f      	ldr	r3, [pc, #316]	@ (80120e8 <netif_add+0x184>)
 8011faa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d101      	bne.n	8011fb6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8011fb2:	4b4d      	ldr	r3, [pc, #308]	@ (80120e8 <netif_add+0x184>)
 8011fb4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d101      	bne.n	8011fc0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8011fbc:	4b4a      	ldr	r3, [pc, #296]	@ (80120e8 <netif_add+0x184>)
 8011fbe:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	2200      	movs	r2, #0
 8011fd0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	4a45      	ldr	r2, [pc, #276]	@ (80120ec <netif_add+0x188>)
 8011fd6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	2200      	movs	r2, #0
 8011fdc:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	2200      	movs	r2, #0
 8011fea:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	6a3a      	ldr	r2, [r7, #32]
 8011ff0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8011ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80120f0 <netif_add+0x18c>)
 8011ff4:	781a      	ldrb	r2, [r3, #0]
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012000:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	687a      	ldr	r2, [r7, #4]
 8012006:	68b9      	ldr	r1, [r7, #8]
 8012008:	68f8      	ldr	r0, [r7, #12]
 801200a:	f000 f913 	bl	8012234 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012010:	68f8      	ldr	r0, [r7, #12]
 8012012:	4798      	blx	r3
 8012014:	4603      	mov	r3, r0
 8012016:	2b00      	cmp	r3, #0
 8012018:	d001      	beq.n	801201e <netif_add+0xba>
    return NULL;
 801201a:	2300      	movs	r3, #0
 801201c:	e058      	b.n	80120d0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012024:	2bff      	cmp	r3, #255	@ 0xff
 8012026:	d103      	bne.n	8012030 <netif_add+0xcc>
        netif->num = 0;
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	2200      	movs	r2, #0
 801202c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8012030:	2300      	movs	r3, #0
 8012032:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012034:	4b2f      	ldr	r3, [pc, #188]	@ (80120f4 <netif_add+0x190>)
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	617b      	str	r3, [r7, #20]
 801203a:	e02b      	b.n	8012094 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801203c:	697a      	ldr	r2, [r7, #20]
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	429a      	cmp	r2, r3
 8012042:	d106      	bne.n	8012052 <netif_add+0xee>
 8012044:	4b24      	ldr	r3, [pc, #144]	@ (80120d8 <netif_add+0x174>)
 8012046:	f240 128b 	movw	r2, #395	@ 0x18b
 801204a:	492b      	ldr	r1, [pc, #172]	@ (80120f8 <netif_add+0x194>)
 801204c:	4824      	ldr	r0, [pc, #144]	@ (80120e0 <netif_add+0x17c>)
 801204e:	f00b f98d 	bl	801d36c <iprintf>
        num_netifs++;
 8012052:	693b      	ldr	r3, [r7, #16]
 8012054:	3301      	adds	r3, #1
 8012056:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8012058:	693b      	ldr	r3, [r7, #16]
 801205a:	2bff      	cmp	r3, #255	@ 0xff
 801205c:	dd06      	ble.n	801206c <netif_add+0x108>
 801205e:	4b1e      	ldr	r3, [pc, #120]	@ (80120d8 <netif_add+0x174>)
 8012060:	f240 128d 	movw	r2, #397	@ 0x18d
 8012064:	4925      	ldr	r1, [pc, #148]	@ (80120fc <netif_add+0x198>)
 8012066:	481e      	ldr	r0, [pc, #120]	@ (80120e0 <netif_add+0x17c>)
 8012068:	f00b f980 	bl	801d36c <iprintf>
        if (netif2->num == netif->num) {
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012078:	429a      	cmp	r2, r3
 801207a:	d108      	bne.n	801208e <netif_add+0x12a>
          netif->num++;
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012082:	3301      	adds	r3, #1
 8012084:	b2da      	uxtb	r2, r3
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 801208c:	e005      	b.n	801209a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801208e:	697b      	ldr	r3, [r7, #20]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	617b      	str	r3, [r7, #20]
 8012094:	697b      	ldr	r3, [r7, #20]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d1d0      	bne.n	801203c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801209a:	697b      	ldr	r3, [r7, #20]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d1be      	bne.n	801201e <netif_add+0xba>
  }
  if (netif->num == 254) {
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80120a6:	2bfe      	cmp	r3, #254	@ 0xfe
 80120a8:	d103      	bne.n	80120b2 <netif_add+0x14e>
    netif_num = 0;
 80120aa:	4b11      	ldr	r3, [pc, #68]	@ (80120f0 <netif_add+0x18c>)
 80120ac:	2200      	movs	r2, #0
 80120ae:	701a      	strb	r2, [r3, #0]
 80120b0:	e006      	b.n	80120c0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80120b8:	3301      	adds	r3, #1
 80120ba:	b2da      	uxtb	r2, r3
 80120bc:	4b0c      	ldr	r3, [pc, #48]	@ (80120f0 <netif_add+0x18c>)
 80120be:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80120c0:	4b0c      	ldr	r3, [pc, #48]	@ (80120f4 <netif_add+0x190>)
 80120c2:	681a      	ldr	r2, [r3, #0]
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80120c8:	4a0a      	ldr	r2, [pc, #40]	@ (80120f4 <netif_add+0x190>)
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80120ce:	68fb      	ldr	r3, [r7, #12]
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	3718      	adds	r7, #24
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}
 80120d8:	0801f57c 	.word	0x0801f57c
 80120dc:	0801f610 	.word	0x0801f610
 80120e0:	0801f5cc 	.word	0x0801f5cc
 80120e4:	0801f62c 	.word	0x0801f62c
 80120e8:	08032518 	.word	0x08032518
 80120ec:	0801250f 	.word	0x0801250f
 80120f0:	2000e458 	.word	0x2000e458
 80120f4:	2000e450 	.word	0x2000e450
 80120f8:	0801f650 	.word	0x0801f650
 80120fc:	0801f664 	.word	0x0801f664

08012100 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b082      	sub	sp, #8
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
 8012108:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801210a:	6839      	ldr	r1, [r7, #0]
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	f002 fe51 	bl	8014db4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8012112:	6839      	ldr	r1, [r7, #0]
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f007 fcfd 	bl	8019b14 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801211a:	bf00      	nop
 801211c:	3708      	adds	r7, #8
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}
	...

08012124 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b086      	sub	sp, #24
 8012128:	af00      	add	r7, sp, #0
 801212a:	60f8      	str	r0, [r7, #12]
 801212c:	60b9      	str	r1, [r7, #8]
 801212e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d106      	bne.n	8012144 <netif_do_set_ipaddr+0x20>
 8012136:	4b1d      	ldr	r3, [pc, #116]	@ (80121ac <netif_do_set_ipaddr+0x88>)
 8012138:	f240 12cb 	movw	r2, #459	@ 0x1cb
 801213c:	491c      	ldr	r1, [pc, #112]	@ (80121b0 <netif_do_set_ipaddr+0x8c>)
 801213e:	481d      	ldr	r0, [pc, #116]	@ (80121b4 <netif_do_set_ipaddr+0x90>)
 8012140:	f00b f914 	bl	801d36c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d106      	bne.n	8012158 <netif_do_set_ipaddr+0x34>
 801214a:	4b18      	ldr	r3, [pc, #96]	@ (80121ac <netif_do_set_ipaddr+0x88>)
 801214c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8012150:	4917      	ldr	r1, [pc, #92]	@ (80121b0 <netif_do_set_ipaddr+0x8c>)
 8012152:	4818      	ldr	r0, [pc, #96]	@ (80121b4 <netif_do_set_ipaddr+0x90>)
 8012154:	f00b f90a 	bl	801d36c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8012158:	68bb      	ldr	r3, [r7, #8]
 801215a:	681a      	ldr	r2, [r3, #0]
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	3304      	adds	r3, #4
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	429a      	cmp	r2, r3
 8012164:	d01c      	beq.n	80121a0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	3304      	adds	r3, #4
 8012170:	681a      	ldr	r2, [r3, #0]
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8012176:	f107 0314 	add.w	r3, r7, #20
 801217a:	4619      	mov	r1, r3
 801217c:	6878      	ldr	r0, [r7, #4]
 801217e:	f7ff ffbf 	bl	8012100 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d002      	beq.n	801218e <netif_do_set_ipaddr+0x6a>
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	e000      	b.n	8012190 <netif_do_set_ipaddr+0x6c>
 801218e:	2300      	movs	r3, #0
 8012190:	68fa      	ldr	r2, [r7, #12]
 8012192:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8012194:	2101      	movs	r1, #1
 8012196:	68f8      	ldr	r0, [r7, #12]
 8012198:	f000 f8d2 	bl	8012340 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801219c:	2301      	movs	r3, #1
 801219e:	e000      	b.n	80121a2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80121a0:	2300      	movs	r3, #0
}
 80121a2:	4618      	mov	r0, r3
 80121a4:	3718      	adds	r7, #24
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}
 80121aa:	bf00      	nop
 80121ac:	0801f57c 	.word	0x0801f57c
 80121b0:	0801f694 	.word	0x0801f694
 80121b4:	0801f5cc 	.word	0x0801f5cc

080121b8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80121b8:	b480      	push	{r7}
 80121ba:	b085      	sub	sp, #20
 80121bc:	af00      	add	r7, sp, #0
 80121be:	60f8      	str	r0, [r7, #12]
 80121c0:	60b9      	str	r1, [r7, #8]
 80121c2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80121c4:	68bb      	ldr	r3, [r7, #8]
 80121c6:	681a      	ldr	r2, [r3, #0]
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	3308      	adds	r3, #8
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	429a      	cmp	r2, r3
 80121d0:	d00a      	beq.n	80121e8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80121d2:	68bb      	ldr	r3, [r7, #8]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d002      	beq.n	80121de <netif_do_set_netmask+0x26>
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	e000      	b.n	80121e0 <netif_do_set_netmask+0x28>
 80121de:	2300      	movs	r3, #0
 80121e0:	68fa      	ldr	r2, [r7, #12]
 80121e2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80121e4:	2301      	movs	r3, #1
 80121e6:	e000      	b.n	80121ea <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80121e8:	2300      	movs	r3, #0
}
 80121ea:	4618      	mov	r0, r3
 80121ec:	3714      	adds	r7, #20
 80121ee:	46bd      	mov	sp, r7
 80121f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f4:	4770      	bx	lr

080121f6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80121f6:	b480      	push	{r7}
 80121f8:	b085      	sub	sp, #20
 80121fa:	af00      	add	r7, sp, #0
 80121fc:	60f8      	str	r0, [r7, #12]
 80121fe:	60b9      	str	r1, [r7, #8]
 8012200:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	681a      	ldr	r2, [r3, #0]
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	330c      	adds	r3, #12
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	429a      	cmp	r2, r3
 801220e:	d00a      	beq.n	8012226 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d002      	beq.n	801221c <netif_do_set_gw+0x26>
 8012216:	68bb      	ldr	r3, [r7, #8]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	e000      	b.n	801221e <netif_do_set_gw+0x28>
 801221c:	2300      	movs	r3, #0
 801221e:	68fa      	ldr	r2, [r7, #12]
 8012220:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8012222:	2301      	movs	r3, #1
 8012224:	e000      	b.n	8012228 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8012226:	2300      	movs	r3, #0
}
 8012228:	4618      	mov	r0, r3
 801222a:	3714      	adds	r7, #20
 801222c:	46bd      	mov	sp, r7
 801222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012232:	4770      	bx	lr

08012234 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b088      	sub	sp, #32
 8012238:	af00      	add	r7, sp, #0
 801223a:	60f8      	str	r0, [r7, #12]
 801223c:	60b9      	str	r1, [r7, #8]
 801223e:	607a      	str	r2, [r7, #4]
 8012240:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8012242:	2300      	movs	r3, #0
 8012244:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8012246:	2300      	movs	r3, #0
 8012248:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d101      	bne.n	8012254 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8012250:	4b1c      	ldr	r3, [pc, #112]	@ (80122c4 <netif_set_addr+0x90>)
 8012252:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d101      	bne.n	801225e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801225a:	4b1a      	ldr	r3, [pc, #104]	@ (80122c4 <netif_set_addr+0x90>)
 801225c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d101      	bne.n	8012268 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8012264:	4b17      	ldr	r3, [pc, #92]	@ (80122c4 <netif_set_addr+0x90>)
 8012266:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8012268:	68bb      	ldr	r3, [r7, #8]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d003      	beq.n	8012276 <netif_set_addr+0x42>
 801226e:	68bb      	ldr	r3, [r7, #8]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d101      	bne.n	801227a <netif_set_addr+0x46>
 8012276:	2301      	movs	r3, #1
 8012278:	e000      	b.n	801227c <netif_set_addr+0x48>
 801227a:	2300      	movs	r3, #0
 801227c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801227e:	697b      	ldr	r3, [r7, #20]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d006      	beq.n	8012292 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012284:	f107 0310 	add.w	r3, r7, #16
 8012288:	461a      	mov	r2, r3
 801228a:	68b9      	ldr	r1, [r7, #8]
 801228c:	68f8      	ldr	r0, [r7, #12]
 801228e:	f7ff ff49 	bl	8012124 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8012292:	69fa      	ldr	r2, [r7, #28]
 8012294:	6879      	ldr	r1, [r7, #4]
 8012296:	68f8      	ldr	r0, [r7, #12]
 8012298:	f7ff ff8e 	bl	80121b8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801229c:	69ba      	ldr	r2, [r7, #24]
 801229e:	6839      	ldr	r1, [r7, #0]
 80122a0:	68f8      	ldr	r0, [r7, #12]
 80122a2:	f7ff ffa8 	bl	80121f6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d106      	bne.n	80122ba <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80122ac:	f107 0310 	add.w	r3, r7, #16
 80122b0:	461a      	mov	r2, r3
 80122b2:	68b9      	ldr	r1, [r7, #8]
 80122b4:	68f8      	ldr	r0, [r7, #12]
 80122b6:	f7ff ff35 	bl	8012124 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80122ba:	bf00      	nop
 80122bc:	3720      	adds	r7, #32
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}
 80122c2:	bf00      	nop
 80122c4:	08032518 	.word	0x08032518

080122c8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80122c8:	b480      	push	{r7}
 80122ca:	b083      	sub	sp, #12
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80122d0:	4a04      	ldr	r2, [pc, #16]	@ (80122e4 <netif_set_default+0x1c>)
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80122d6:	bf00      	nop
 80122d8:	370c      	adds	r7, #12
 80122da:	46bd      	mov	sp, r7
 80122dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e0:	4770      	bx	lr
 80122e2:	bf00      	nop
 80122e4:	2000e454 	.word	0x2000e454

080122e8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b082      	sub	sp, #8
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d107      	bne.n	8012306 <netif_set_up+0x1e>
 80122f6:	4b0f      	ldr	r3, [pc, #60]	@ (8012334 <netif_set_up+0x4c>)
 80122f8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80122fc:	490e      	ldr	r1, [pc, #56]	@ (8012338 <netif_set_up+0x50>)
 80122fe:	480f      	ldr	r0, [pc, #60]	@ (801233c <netif_set_up+0x54>)
 8012300:	f00b f834 	bl	801d36c <iprintf>
 8012304:	e013      	b.n	801232e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801230c:	f003 0301 	and.w	r3, r3, #1
 8012310:	2b00      	cmp	r3, #0
 8012312:	d10c      	bne.n	801232e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801231a:	f043 0301 	orr.w	r3, r3, #1
 801231e:	b2da      	uxtb	r2, r3
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012326:	2103      	movs	r1, #3
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f000 f809 	bl	8012340 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801232e:	3708      	adds	r7, #8
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}
 8012334:	0801f57c 	.word	0x0801f57c
 8012338:	0801f704 	.word	0x0801f704
 801233c:	0801f5cc 	.word	0x0801f5cc

08012340 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b082      	sub	sp, #8
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
 8012348:	460b      	mov	r3, r1
 801234a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d106      	bne.n	8012360 <netif_issue_reports+0x20>
 8012352:	4b18      	ldr	r3, [pc, #96]	@ (80123b4 <netif_issue_reports+0x74>)
 8012354:	f240 326d 	movw	r2, #877	@ 0x36d
 8012358:	4917      	ldr	r1, [pc, #92]	@ (80123b8 <netif_issue_reports+0x78>)
 801235a:	4818      	ldr	r0, [pc, #96]	@ (80123bc <netif_issue_reports+0x7c>)
 801235c:	f00b f806 	bl	801d36c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012366:	f003 0304 	and.w	r3, r3, #4
 801236a:	2b00      	cmp	r3, #0
 801236c:	d01e      	beq.n	80123ac <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012374:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012378:	2b00      	cmp	r3, #0
 801237a:	d017      	beq.n	80123ac <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801237c:	78fb      	ldrb	r3, [r7, #3]
 801237e:	f003 0301 	and.w	r3, r3, #1
 8012382:	2b00      	cmp	r3, #0
 8012384:	d013      	beq.n	80123ae <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	3304      	adds	r3, #4
 801238a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801238c:	2b00      	cmp	r3, #0
 801238e:	d00e      	beq.n	80123ae <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012396:	f003 0308 	and.w	r3, r3, #8
 801239a:	2b00      	cmp	r3, #0
 801239c:	d007      	beq.n	80123ae <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	3304      	adds	r3, #4
 80123a2:	4619      	mov	r1, r3
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f008 fb1f 	bl	801a9e8 <etharp_request>
 80123aa:	e000      	b.n	80123ae <netif_issue_reports+0x6e>
    return;
 80123ac:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80123ae:	3708      	adds	r7, #8
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}
 80123b4:	0801f57c 	.word	0x0801f57c
 80123b8:	0801f720 	.word	0x0801f720
 80123bc:	0801f5cc 	.word	0x0801f5cc

080123c0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b082      	sub	sp, #8
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d107      	bne.n	80123de <netif_set_down+0x1e>
 80123ce:	4b12      	ldr	r3, [pc, #72]	@ (8012418 <netif_set_down+0x58>)
 80123d0:	f240 329b 	movw	r2, #923	@ 0x39b
 80123d4:	4911      	ldr	r1, [pc, #68]	@ (801241c <netif_set_down+0x5c>)
 80123d6:	4812      	ldr	r0, [pc, #72]	@ (8012420 <netif_set_down+0x60>)
 80123d8:	f00a ffc8 	bl	801d36c <iprintf>
 80123dc:	e019      	b.n	8012412 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80123e4:	f003 0301 	and.w	r3, r3, #1
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d012      	beq.n	8012412 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80123f2:	f023 0301 	bic.w	r3, r3, #1
 80123f6:	b2da      	uxtb	r2, r3
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012404:	f003 0308 	and.w	r3, r3, #8
 8012408:	2b00      	cmp	r3, #0
 801240a:	d002      	beq.n	8012412 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f007 fea9 	bl	801a164 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8012412:	3708      	adds	r7, #8
 8012414:	46bd      	mov	sp, r7
 8012416:	bd80      	pop	{r7, pc}
 8012418:	0801f57c 	.word	0x0801f57c
 801241c:	0801f744 	.word	0x0801f744
 8012420:	0801f5cc 	.word	0x0801f5cc

08012424 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b082      	sub	sp, #8
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d107      	bne.n	8012442 <netif_set_link_up+0x1e>
 8012432:	4b13      	ldr	r3, [pc, #76]	@ (8012480 <netif_set_link_up+0x5c>)
 8012434:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8012438:	4912      	ldr	r1, [pc, #72]	@ (8012484 <netif_set_link_up+0x60>)
 801243a:	4813      	ldr	r0, [pc, #76]	@ (8012488 <netif_set_link_up+0x64>)
 801243c:	f00a ff96 	bl	801d36c <iprintf>
 8012440:	e01b      	b.n	801247a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012448:	f003 0304 	and.w	r3, r3, #4
 801244c:	2b00      	cmp	r3, #0
 801244e:	d114      	bne.n	801247a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012456:	f043 0304 	orr.w	r3, r3, #4
 801245a:	b2da      	uxtb	r2, r3
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012462:	2103      	movs	r1, #3
 8012464:	6878      	ldr	r0, [r7, #4]
 8012466:	f7ff ff6b 	bl	8012340 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	69db      	ldr	r3, [r3, #28]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d003      	beq.n	801247a <netif_set_link_up+0x56>
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	69db      	ldr	r3, [r3, #28]
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801247a:	3708      	adds	r7, #8
 801247c:	46bd      	mov	sp, r7
 801247e:	bd80      	pop	{r7, pc}
 8012480:	0801f57c 	.word	0x0801f57c
 8012484:	0801f764 	.word	0x0801f764
 8012488:	0801f5cc 	.word	0x0801f5cc

0801248c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b082      	sub	sp, #8
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d107      	bne.n	80124aa <netif_set_link_down+0x1e>
 801249a:	4b11      	ldr	r3, [pc, #68]	@ (80124e0 <netif_set_link_down+0x54>)
 801249c:	f240 4206 	movw	r2, #1030	@ 0x406
 80124a0:	4910      	ldr	r1, [pc, #64]	@ (80124e4 <netif_set_link_down+0x58>)
 80124a2:	4811      	ldr	r0, [pc, #68]	@ (80124e8 <netif_set_link_down+0x5c>)
 80124a4:	f00a ff62 	bl	801d36c <iprintf>
 80124a8:	e017      	b.n	80124da <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80124b0:	f003 0304 	and.w	r3, r3, #4
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d010      	beq.n	80124da <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80124be:	f023 0304 	bic.w	r3, r3, #4
 80124c2:	b2da      	uxtb	r2, r3
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	69db      	ldr	r3, [r3, #28]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d003      	beq.n	80124da <netif_set_link_down+0x4e>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	69db      	ldr	r3, [r3, #28]
 80124d6:	6878      	ldr	r0, [r7, #4]
 80124d8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80124da:	3708      	adds	r7, #8
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}
 80124e0:	0801f57c 	.word	0x0801f57c
 80124e4:	0801f788 	.word	0x0801f788
 80124e8:	0801f5cc 	.word	0x0801f5cc

080124ec <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80124ec:	b480      	push	{r7}
 80124ee:	b083      	sub	sp, #12
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
 80124f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d002      	beq.n	8012502 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	683a      	ldr	r2, [r7, #0]
 8012500:	61da      	str	r2, [r3, #28]
  }
}
 8012502:	bf00      	nop
 8012504:	370c      	adds	r7, #12
 8012506:	46bd      	mov	sp, r7
 8012508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250c:	4770      	bx	lr

0801250e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801250e:	b480      	push	{r7}
 8012510:	b085      	sub	sp, #20
 8012512:	af00      	add	r7, sp, #0
 8012514:	60f8      	str	r0, [r7, #12]
 8012516:	60b9      	str	r1, [r7, #8]
 8012518:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801251a:	f06f 030b 	mvn.w	r3, #11
}
 801251e:	4618      	mov	r0, r3
 8012520:	3714      	adds	r7, #20
 8012522:	46bd      	mov	sp, r7
 8012524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012528:	4770      	bx	lr
	...

0801252c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801252c:	b480      	push	{r7}
 801252e:	b085      	sub	sp, #20
 8012530:	af00      	add	r7, sp, #0
 8012532:	4603      	mov	r3, r0
 8012534:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8012536:	79fb      	ldrb	r3, [r7, #7]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d013      	beq.n	8012564 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801253c:	4b0d      	ldr	r3, [pc, #52]	@ (8012574 <netif_get_by_index+0x48>)
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	60fb      	str	r3, [r7, #12]
 8012542:	e00c      	b.n	801255e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801254a:	3301      	adds	r3, #1
 801254c:	b2db      	uxtb	r3, r3
 801254e:	79fa      	ldrb	r2, [r7, #7]
 8012550:	429a      	cmp	r2, r3
 8012552:	d101      	bne.n	8012558 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	e006      	b.n	8012566 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	60fb      	str	r3, [r7, #12]
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d1ef      	bne.n	8012544 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8012564:	2300      	movs	r3, #0
}
 8012566:	4618      	mov	r0, r3
 8012568:	3714      	adds	r7, #20
 801256a:	46bd      	mov	sp, r7
 801256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012570:	4770      	bx	lr
 8012572:	bf00      	nop
 8012574:	2000e450 	.word	0x2000e450

08012578 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b082      	sub	sp, #8
 801257c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801257e:	f009 ff83 	bl	801c488 <sys_arch_protect>
 8012582:	6038      	str	r0, [r7, #0]
 8012584:	4b0d      	ldr	r3, [pc, #52]	@ (80125bc <pbuf_free_ooseq+0x44>)
 8012586:	2200      	movs	r2, #0
 8012588:	701a      	strb	r2, [r3, #0]
 801258a:	6838      	ldr	r0, [r7, #0]
 801258c:	f009 ff8a 	bl	801c4a4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012590:	4b0b      	ldr	r3, [pc, #44]	@ (80125c0 <pbuf_free_ooseq+0x48>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	607b      	str	r3, [r7, #4]
 8012596:	e00a      	b.n	80125ae <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801259c:	2b00      	cmp	r3, #0
 801259e:	d003      	beq.n	80125a8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f002 fc45 	bl	8014e30 <tcp_free_ooseq>
      return;
 80125a6:	e005      	b.n	80125b4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	68db      	ldr	r3, [r3, #12]
 80125ac:	607b      	str	r3, [r7, #4]
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d1f1      	bne.n	8012598 <pbuf_free_ooseq+0x20>
    }
  }
}
 80125b4:	3708      	adds	r7, #8
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bd80      	pop	{r7, pc}
 80125ba:	bf00      	nop
 80125bc:	2000e459 	.word	0x2000e459
 80125c0:	2000e468 	.word	0x2000e468

080125c4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b082      	sub	sp, #8
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80125cc:	f7ff ffd4 	bl	8012578 <pbuf_free_ooseq>
}
 80125d0:	bf00      	nop
 80125d2:	3708      	adds	r7, #8
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}

080125d8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b082      	sub	sp, #8
 80125dc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80125de:	f009 ff53 	bl	801c488 <sys_arch_protect>
 80125e2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80125e4:	4b0f      	ldr	r3, [pc, #60]	@ (8012624 <pbuf_pool_is_empty+0x4c>)
 80125e6:	781b      	ldrb	r3, [r3, #0]
 80125e8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80125ea:	4b0e      	ldr	r3, [pc, #56]	@ (8012624 <pbuf_pool_is_empty+0x4c>)
 80125ec:	2201      	movs	r2, #1
 80125ee:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f009 ff57 	bl	801c4a4 <sys_arch_unprotect>

  if (!queued) {
 80125f6:	78fb      	ldrb	r3, [r7, #3]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d10f      	bne.n	801261c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80125fc:	2100      	movs	r1, #0
 80125fe:	480a      	ldr	r0, [pc, #40]	@ (8012628 <pbuf_pool_is_empty+0x50>)
 8012600:	f7fe fe4c 	bl	801129c <tcpip_try_callback>
 8012604:	4603      	mov	r3, r0
 8012606:	2b00      	cmp	r3, #0
 8012608:	d008      	beq.n	801261c <pbuf_pool_is_empty+0x44>
 801260a:	f009 ff3d 	bl	801c488 <sys_arch_protect>
 801260e:	6078      	str	r0, [r7, #4]
 8012610:	4b04      	ldr	r3, [pc, #16]	@ (8012624 <pbuf_pool_is_empty+0x4c>)
 8012612:	2200      	movs	r2, #0
 8012614:	701a      	strb	r2, [r3, #0]
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f009 ff44 	bl	801c4a4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801261c:	bf00      	nop
 801261e:	3708      	adds	r7, #8
 8012620:	46bd      	mov	sp, r7
 8012622:	bd80      	pop	{r7, pc}
 8012624:	2000e459 	.word	0x2000e459
 8012628:	080125c5 	.word	0x080125c5

0801262c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801262c:	b480      	push	{r7}
 801262e:	b085      	sub	sp, #20
 8012630:	af00      	add	r7, sp, #0
 8012632:	60f8      	str	r0, [r7, #12]
 8012634:	60b9      	str	r1, [r7, #8]
 8012636:	4611      	mov	r1, r2
 8012638:	461a      	mov	r2, r3
 801263a:	460b      	mov	r3, r1
 801263c:	80fb      	strh	r3, [r7, #6]
 801263e:	4613      	mov	r3, r2
 8012640:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	2200      	movs	r2, #0
 8012646:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	68ba      	ldr	r2, [r7, #8]
 801264c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	88fa      	ldrh	r2, [r7, #6]
 8012652:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	88ba      	ldrh	r2, [r7, #4]
 8012658:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801265a:	8b3b      	ldrh	r3, [r7, #24]
 801265c:	b2da      	uxtb	r2, r3
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	7f3a      	ldrb	r2, [r7, #28]
 8012666:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	2201      	movs	r2, #1
 801266c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	2200      	movs	r2, #0
 8012672:	73da      	strb	r2, [r3, #15]
}
 8012674:	bf00      	nop
 8012676:	3714      	adds	r7, #20
 8012678:	46bd      	mov	sp, r7
 801267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267e:	4770      	bx	lr

08012680 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b08c      	sub	sp, #48	@ 0x30
 8012684:	af02      	add	r7, sp, #8
 8012686:	4603      	mov	r3, r0
 8012688:	71fb      	strb	r3, [r7, #7]
 801268a:	460b      	mov	r3, r1
 801268c:	80bb      	strh	r3, [r7, #4]
 801268e:	4613      	mov	r3, r2
 8012690:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8012692:	79fb      	ldrb	r3, [r7, #7]
 8012694:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8012696:	887b      	ldrh	r3, [r7, #2]
 8012698:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801269c:	d07f      	beq.n	801279e <pbuf_alloc+0x11e>
 801269e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80126a2:	f300 80c8 	bgt.w	8012836 <pbuf_alloc+0x1b6>
 80126a6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80126aa:	d010      	beq.n	80126ce <pbuf_alloc+0x4e>
 80126ac:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80126b0:	f300 80c1 	bgt.w	8012836 <pbuf_alloc+0x1b6>
 80126b4:	2b01      	cmp	r3, #1
 80126b6:	d002      	beq.n	80126be <pbuf_alloc+0x3e>
 80126b8:	2b41      	cmp	r3, #65	@ 0x41
 80126ba:	f040 80bc 	bne.w	8012836 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80126be:	887a      	ldrh	r2, [r7, #2]
 80126c0:	88bb      	ldrh	r3, [r7, #4]
 80126c2:	4619      	mov	r1, r3
 80126c4:	2000      	movs	r0, #0
 80126c6:	f000 f8d1 	bl	801286c <pbuf_alloc_reference>
 80126ca:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80126cc:	e0bd      	b.n	801284a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80126ce:	2300      	movs	r3, #0
 80126d0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80126d2:	2300      	movs	r3, #0
 80126d4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80126d6:	88bb      	ldrh	r3, [r7, #4]
 80126d8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80126da:	200c      	movs	r0, #12
 80126dc:	f7ff fb9a 	bl	8011e14 <memp_malloc>
 80126e0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80126e2:	693b      	ldr	r3, [r7, #16]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d109      	bne.n	80126fc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80126e8:	f7ff ff76 	bl	80125d8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80126ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d002      	beq.n	80126f8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80126f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80126f4:	f000 faa8 	bl	8012c48 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80126f8:	2300      	movs	r3, #0
 80126fa:	e0a7      	b.n	801284c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80126fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80126fe:	3303      	adds	r3, #3
 8012700:	b29b      	uxth	r3, r3
 8012702:	f023 0303 	bic.w	r3, r3, #3
 8012706:	b29b      	uxth	r3, r3
 8012708:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 801270c:	b29b      	uxth	r3, r3
 801270e:	8b7a      	ldrh	r2, [r7, #26]
 8012710:	4293      	cmp	r3, r2
 8012712:	bf28      	it	cs
 8012714:	4613      	movcs	r3, r2
 8012716:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012718:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801271a:	3310      	adds	r3, #16
 801271c:	693a      	ldr	r2, [r7, #16]
 801271e:	4413      	add	r3, r2
 8012720:	3303      	adds	r3, #3
 8012722:	f023 0303 	bic.w	r3, r3, #3
 8012726:	4618      	mov	r0, r3
 8012728:	89f9      	ldrh	r1, [r7, #14]
 801272a:	8b7a      	ldrh	r2, [r7, #26]
 801272c:	2300      	movs	r3, #0
 801272e:	9301      	str	r3, [sp, #4]
 8012730:	887b      	ldrh	r3, [r7, #2]
 8012732:	9300      	str	r3, [sp, #0]
 8012734:	460b      	mov	r3, r1
 8012736:	4601      	mov	r1, r0
 8012738:	6938      	ldr	r0, [r7, #16]
 801273a:	f7ff ff77 	bl	801262c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801273e:	693b      	ldr	r3, [r7, #16]
 8012740:	685b      	ldr	r3, [r3, #4]
 8012742:	f003 0303 	and.w	r3, r3, #3
 8012746:	2b00      	cmp	r3, #0
 8012748:	d006      	beq.n	8012758 <pbuf_alloc+0xd8>
 801274a:	4b42      	ldr	r3, [pc, #264]	@ (8012854 <pbuf_alloc+0x1d4>)
 801274c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012750:	4941      	ldr	r1, [pc, #260]	@ (8012858 <pbuf_alloc+0x1d8>)
 8012752:	4842      	ldr	r0, [pc, #264]	@ (801285c <pbuf_alloc+0x1dc>)
 8012754:	f00a fe0a 	bl	801d36c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8012758:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801275a:	3303      	adds	r3, #3
 801275c:	f023 0303 	bic.w	r3, r3, #3
 8012760:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8012764:	d106      	bne.n	8012774 <pbuf_alloc+0xf4>
 8012766:	4b3b      	ldr	r3, [pc, #236]	@ (8012854 <pbuf_alloc+0x1d4>)
 8012768:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801276c:	493c      	ldr	r1, [pc, #240]	@ (8012860 <pbuf_alloc+0x1e0>)
 801276e:	483b      	ldr	r0, [pc, #236]	@ (801285c <pbuf_alloc+0x1dc>)
 8012770:	f00a fdfc 	bl	801d36c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8012774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012776:	2b00      	cmp	r3, #0
 8012778:	d102      	bne.n	8012780 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801277a:	693b      	ldr	r3, [r7, #16]
 801277c:	627b      	str	r3, [r7, #36]	@ 0x24
 801277e:	e002      	b.n	8012786 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8012780:	69fb      	ldr	r3, [r7, #28]
 8012782:	693a      	ldr	r2, [r7, #16]
 8012784:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8012786:	693b      	ldr	r3, [r7, #16]
 8012788:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801278a:	8b7a      	ldrh	r2, [r7, #26]
 801278c:	89fb      	ldrh	r3, [r7, #14]
 801278e:	1ad3      	subs	r3, r2, r3
 8012790:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8012792:	2300      	movs	r3, #0
 8012794:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8012796:	8b7b      	ldrh	r3, [r7, #26]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d19e      	bne.n	80126da <pbuf_alloc+0x5a>
      break;
 801279c:	e055      	b.n	801284a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801279e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80127a0:	3303      	adds	r3, #3
 80127a2:	b29b      	uxth	r3, r3
 80127a4:	f023 0303 	bic.w	r3, r3, #3
 80127a8:	b29a      	uxth	r2, r3
 80127aa:	88bb      	ldrh	r3, [r7, #4]
 80127ac:	3303      	adds	r3, #3
 80127ae:	b29b      	uxth	r3, r3
 80127b0:	f023 0303 	bic.w	r3, r3, #3
 80127b4:	b29b      	uxth	r3, r3
 80127b6:	4413      	add	r3, r2
 80127b8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80127ba:	8b3b      	ldrh	r3, [r7, #24]
 80127bc:	3310      	adds	r3, #16
 80127be:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80127c0:	8b3a      	ldrh	r2, [r7, #24]
 80127c2:	88bb      	ldrh	r3, [r7, #4]
 80127c4:	3303      	adds	r3, #3
 80127c6:	f023 0303 	bic.w	r3, r3, #3
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d306      	bcc.n	80127dc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80127ce:	8afa      	ldrh	r2, [r7, #22]
 80127d0:	88bb      	ldrh	r3, [r7, #4]
 80127d2:	3303      	adds	r3, #3
 80127d4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80127d8:	429a      	cmp	r2, r3
 80127da:	d201      	bcs.n	80127e0 <pbuf_alloc+0x160>
        return NULL;
 80127dc:	2300      	movs	r3, #0
 80127de:	e035      	b.n	801284c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80127e0:	8afb      	ldrh	r3, [r7, #22]
 80127e2:	4618      	mov	r0, r3
 80127e4:	f7ff f972 	bl	8011acc <mem_malloc>
 80127e8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80127ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d101      	bne.n	80127f4 <pbuf_alloc+0x174>
        return NULL;
 80127f0:	2300      	movs	r3, #0
 80127f2:	e02b      	b.n	801284c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80127f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80127f6:	3310      	adds	r3, #16
 80127f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127fa:	4413      	add	r3, r2
 80127fc:	3303      	adds	r3, #3
 80127fe:	f023 0303 	bic.w	r3, r3, #3
 8012802:	4618      	mov	r0, r3
 8012804:	88b9      	ldrh	r1, [r7, #4]
 8012806:	88ba      	ldrh	r2, [r7, #4]
 8012808:	2300      	movs	r3, #0
 801280a:	9301      	str	r3, [sp, #4]
 801280c:	887b      	ldrh	r3, [r7, #2]
 801280e:	9300      	str	r3, [sp, #0]
 8012810:	460b      	mov	r3, r1
 8012812:	4601      	mov	r1, r0
 8012814:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012816:	f7ff ff09 	bl	801262c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801281c:	685b      	ldr	r3, [r3, #4]
 801281e:	f003 0303 	and.w	r3, r3, #3
 8012822:	2b00      	cmp	r3, #0
 8012824:	d010      	beq.n	8012848 <pbuf_alloc+0x1c8>
 8012826:	4b0b      	ldr	r3, [pc, #44]	@ (8012854 <pbuf_alloc+0x1d4>)
 8012828:	f44f 7291 	mov.w	r2, #290	@ 0x122
 801282c:	490d      	ldr	r1, [pc, #52]	@ (8012864 <pbuf_alloc+0x1e4>)
 801282e:	480b      	ldr	r0, [pc, #44]	@ (801285c <pbuf_alloc+0x1dc>)
 8012830:	f00a fd9c 	bl	801d36c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012834:	e008      	b.n	8012848 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8012836:	4b07      	ldr	r3, [pc, #28]	@ (8012854 <pbuf_alloc+0x1d4>)
 8012838:	f240 1227 	movw	r2, #295	@ 0x127
 801283c:	490a      	ldr	r1, [pc, #40]	@ (8012868 <pbuf_alloc+0x1e8>)
 801283e:	4807      	ldr	r0, [pc, #28]	@ (801285c <pbuf_alloc+0x1dc>)
 8012840:	f00a fd94 	bl	801d36c <iprintf>
      return NULL;
 8012844:	2300      	movs	r3, #0
 8012846:	e001      	b.n	801284c <pbuf_alloc+0x1cc>
      break;
 8012848:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801284c:	4618      	mov	r0, r3
 801284e:	3728      	adds	r7, #40	@ 0x28
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}
 8012854:	0801f7ac 	.word	0x0801f7ac
 8012858:	0801f7dc 	.word	0x0801f7dc
 801285c:	0801f80c 	.word	0x0801f80c
 8012860:	0801f834 	.word	0x0801f834
 8012864:	0801f868 	.word	0x0801f868
 8012868:	0801f894 	.word	0x0801f894

0801286c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b086      	sub	sp, #24
 8012870:	af02      	add	r7, sp, #8
 8012872:	6078      	str	r0, [r7, #4]
 8012874:	460b      	mov	r3, r1
 8012876:	807b      	strh	r3, [r7, #2]
 8012878:	4613      	mov	r3, r2
 801287a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801287c:	883b      	ldrh	r3, [r7, #0]
 801287e:	2b41      	cmp	r3, #65	@ 0x41
 8012880:	d009      	beq.n	8012896 <pbuf_alloc_reference+0x2a>
 8012882:	883b      	ldrh	r3, [r7, #0]
 8012884:	2b01      	cmp	r3, #1
 8012886:	d006      	beq.n	8012896 <pbuf_alloc_reference+0x2a>
 8012888:	4b0f      	ldr	r3, [pc, #60]	@ (80128c8 <pbuf_alloc_reference+0x5c>)
 801288a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 801288e:	490f      	ldr	r1, [pc, #60]	@ (80128cc <pbuf_alloc_reference+0x60>)
 8012890:	480f      	ldr	r0, [pc, #60]	@ (80128d0 <pbuf_alloc_reference+0x64>)
 8012892:	f00a fd6b 	bl	801d36c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8012896:	200b      	movs	r0, #11
 8012898:	f7ff fabc 	bl	8011e14 <memp_malloc>
 801289c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d101      	bne.n	80128a8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80128a4:	2300      	movs	r3, #0
 80128a6:	e00b      	b.n	80128c0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80128a8:	8879      	ldrh	r1, [r7, #2]
 80128aa:	887a      	ldrh	r2, [r7, #2]
 80128ac:	2300      	movs	r3, #0
 80128ae:	9301      	str	r3, [sp, #4]
 80128b0:	883b      	ldrh	r3, [r7, #0]
 80128b2:	9300      	str	r3, [sp, #0]
 80128b4:	460b      	mov	r3, r1
 80128b6:	6879      	ldr	r1, [r7, #4]
 80128b8:	68f8      	ldr	r0, [r7, #12]
 80128ba:	f7ff feb7 	bl	801262c <pbuf_init_alloced_pbuf>
  return p;
 80128be:	68fb      	ldr	r3, [r7, #12]
}
 80128c0:	4618      	mov	r0, r3
 80128c2:	3710      	adds	r7, #16
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}
 80128c8:	0801f7ac 	.word	0x0801f7ac
 80128cc:	0801f8b0 	.word	0x0801f8b0
 80128d0:	0801f80c 	.word	0x0801f80c

080128d4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b088      	sub	sp, #32
 80128d8:	af02      	add	r7, sp, #8
 80128da:	607b      	str	r3, [r7, #4]
 80128dc:	4603      	mov	r3, r0
 80128de:	73fb      	strb	r3, [r7, #15]
 80128e0:	460b      	mov	r3, r1
 80128e2:	81bb      	strh	r3, [r7, #12]
 80128e4:	4613      	mov	r3, r2
 80128e6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80128e8:	7bfb      	ldrb	r3, [r7, #15]
 80128ea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80128ec:	8a7b      	ldrh	r3, [r7, #18]
 80128ee:	3303      	adds	r3, #3
 80128f0:	f023 0203 	bic.w	r2, r3, #3
 80128f4:	89bb      	ldrh	r3, [r7, #12]
 80128f6:	441a      	add	r2, r3
 80128f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80128fa:	429a      	cmp	r2, r3
 80128fc:	d901      	bls.n	8012902 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80128fe:	2300      	movs	r3, #0
 8012900:	e018      	b.n	8012934 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012902:	6a3b      	ldr	r3, [r7, #32]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d007      	beq.n	8012918 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012908:	8a7b      	ldrh	r3, [r7, #18]
 801290a:	3303      	adds	r3, #3
 801290c:	f023 0303 	bic.w	r3, r3, #3
 8012910:	6a3a      	ldr	r2, [r7, #32]
 8012912:	4413      	add	r3, r2
 8012914:	617b      	str	r3, [r7, #20]
 8012916:	e001      	b.n	801291c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012918:	2300      	movs	r3, #0
 801291a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	89b9      	ldrh	r1, [r7, #12]
 8012920:	89ba      	ldrh	r2, [r7, #12]
 8012922:	2302      	movs	r3, #2
 8012924:	9301      	str	r3, [sp, #4]
 8012926:	897b      	ldrh	r3, [r7, #10]
 8012928:	9300      	str	r3, [sp, #0]
 801292a:	460b      	mov	r3, r1
 801292c:	6979      	ldr	r1, [r7, #20]
 801292e:	f7ff fe7d 	bl	801262c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012932:	687b      	ldr	r3, [r7, #4]
}
 8012934:	4618      	mov	r0, r3
 8012936:	3718      	adds	r7, #24
 8012938:	46bd      	mov	sp, r7
 801293a:	bd80      	pop	{r7, pc}

0801293c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b084      	sub	sp, #16
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
 8012944:	460b      	mov	r3, r1
 8012946:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d106      	bne.n	801295c <pbuf_realloc+0x20>
 801294e:	4b3a      	ldr	r3, [pc, #232]	@ (8012a38 <pbuf_realloc+0xfc>)
 8012950:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8012954:	4939      	ldr	r1, [pc, #228]	@ (8012a3c <pbuf_realloc+0x100>)
 8012956:	483a      	ldr	r0, [pc, #232]	@ (8012a40 <pbuf_realloc+0x104>)
 8012958:	f00a fd08 	bl	801d36c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	891b      	ldrh	r3, [r3, #8]
 8012960:	887a      	ldrh	r2, [r7, #2]
 8012962:	429a      	cmp	r2, r3
 8012964:	d263      	bcs.n	8012a2e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	891a      	ldrh	r2, [r3, #8]
 801296a:	887b      	ldrh	r3, [r7, #2]
 801296c:	1ad3      	subs	r3, r2, r3
 801296e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012970:	887b      	ldrh	r3, [r7, #2]
 8012972:	817b      	strh	r3, [r7, #10]
  q = p;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8012978:	e018      	b.n	80129ac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	895b      	ldrh	r3, [r3, #10]
 801297e:	897a      	ldrh	r2, [r7, #10]
 8012980:	1ad3      	subs	r3, r2, r3
 8012982:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	891a      	ldrh	r2, [r3, #8]
 8012988:	893b      	ldrh	r3, [r7, #8]
 801298a:	1ad3      	subs	r3, r2, r3
 801298c:	b29a      	uxth	r2, r3
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d106      	bne.n	80129ac <pbuf_realloc+0x70>
 801299e:	4b26      	ldr	r3, [pc, #152]	@ (8012a38 <pbuf_realloc+0xfc>)
 80129a0:	f240 12af 	movw	r2, #431	@ 0x1af
 80129a4:	4927      	ldr	r1, [pc, #156]	@ (8012a44 <pbuf_realloc+0x108>)
 80129a6:	4826      	ldr	r0, [pc, #152]	@ (8012a40 <pbuf_realloc+0x104>)
 80129a8:	f00a fce0 	bl	801d36c <iprintf>
  while (rem_len > q->len) {
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	895b      	ldrh	r3, [r3, #10]
 80129b0:	897a      	ldrh	r2, [r7, #10]
 80129b2:	429a      	cmp	r2, r3
 80129b4:	d8e1      	bhi.n	801297a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	7b1b      	ldrb	r3, [r3, #12]
 80129ba:	f003 030f 	and.w	r3, r3, #15
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d121      	bne.n	8012a06 <pbuf_realloc+0xca>
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	895b      	ldrh	r3, [r3, #10]
 80129c6:	897a      	ldrh	r2, [r7, #10]
 80129c8:	429a      	cmp	r2, r3
 80129ca:	d01c      	beq.n	8012a06 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	7b5b      	ldrb	r3, [r3, #13]
 80129d0:	f003 0302 	and.w	r3, r3, #2
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d116      	bne.n	8012a06 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	685a      	ldr	r2, [r3, #4]
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	1ad3      	subs	r3, r2, r3
 80129e0:	b29a      	uxth	r2, r3
 80129e2:	897b      	ldrh	r3, [r7, #10]
 80129e4:	4413      	add	r3, r2
 80129e6:	b29b      	uxth	r3, r3
 80129e8:	4619      	mov	r1, r3
 80129ea:	68f8      	ldr	r0, [r7, #12]
 80129ec:	f7fe ff64 	bl	80118b8 <mem_trim>
 80129f0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d106      	bne.n	8012a06 <pbuf_realloc+0xca>
 80129f8:	4b0f      	ldr	r3, [pc, #60]	@ (8012a38 <pbuf_realloc+0xfc>)
 80129fa:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80129fe:	4912      	ldr	r1, [pc, #72]	@ (8012a48 <pbuf_realloc+0x10c>)
 8012a00:	480f      	ldr	r0, [pc, #60]	@ (8012a40 <pbuf_realloc+0x104>)
 8012a02:	f00a fcb3 	bl	801d36c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	897a      	ldrh	r2, [r7, #10]
 8012a0a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	895a      	ldrh	r2, [r3, #10]
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d004      	beq.n	8012a26 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	4618      	mov	r0, r3
 8012a22:	f000 f911 	bl	8012c48 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	2200      	movs	r2, #0
 8012a2a:	601a      	str	r2, [r3, #0]
 8012a2c:	e000      	b.n	8012a30 <pbuf_realloc+0xf4>
    return;
 8012a2e:	bf00      	nop

}
 8012a30:	3710      	adds	r7, #16
 8012a32:	46bd      	mov	sp, r7
 8012a34:	bd80      	pop	{r7, pc}
 8012a36:	bf00      	nop
 8012a38:	0801f7ac 	.word	0x0801f7ac
 8012a3c:	0801f8c4 	.word	0x0801f8c4
 8012a40:	0801f80c 	.word	0x0801f80c
 8012a44:	0801f8dc 	.word	0x0801f8dc
 8012a48:	0801f8f4 	.word	0x0801f8f4

08012a4c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b086      	sub	sp, #24
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	60f8      	str	r0, [r7, #12]
 8012a54:	60b9      	str	r1, [r7, #8]
 8012a56:	4613      	mov	r3, r2
 8012a58:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d106      	bne.n	8012a6e <pbuf_add_header_impl+0x22>
 8012a60:	4b2b      	ldr	r3, [pc, #172]	@ (8012b10 <pbuf_add_header_impl+0xc4>)
 8012a62:	f240 12df 	movw	r2, #479	@ 0x1df
 8012a66:	492b      	ldr	r1, [pc, #172]	@ (8012b14 <pbuf_add_header_impl+0xc8>)
 8012a68:	482b      	ldr	r0, [pc, #172]	@ (8012b18 <pbuf_add_header_impl+0xcc>)
 8012a6a:	f00a fc7f 	bl	801d36c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d003      	beq.n	8012a7c <pbuf_add_header_impl+0x30>
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012a7a:	d301      	bcc.n	8012a80 <pbuf_add_header_impl+0x34>
    return 1;
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	e043      	b.n	8012b08 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d101      	bne.n	8012a8a <pbuf_add_header_impl+0x3e>
    return 0;
 8012a86:	2300      	movs	r3, #0
 8012a88:	e03e      	b.n	8012b08 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	891a      	ldrh	r2, [r3, #8]
 8012a92:	8a7b      	ldrh	r3, [r7, #18]
 8012a94:	4413      	add	r3, r2
 8012a96:	b29b      	uxth	r3, r3
 8012a98:	8a7a      	ldrh	r2, [r7, #18]
 8012a9a:	429a      	cmp	r2, r3
 8012a9c:	d901      	bls.n	8012aa2 <pbuf_add_header_impl+0x56>
    return 1;
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	e032      	b.n	8012b08 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	7b1b      	ldrb	r3, [r3, #12]
 8012aa6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012aa8:	8a3b      	ldrh	r3, [r7, #16]
 8012aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d00c      	beq.n	8012acc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	685a      	ldr	r2, [r3, #4]
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	425b      	negs	r3, r3
 8012aba:	4413      	add	r3, r2
 8012abc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	3310      	adds	r3, #16
 8012ac2:	697a      	ldr	r2, [r7, #20]
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d20d      	bcs.n	8012ae4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012ac8:	2301      	movs	r3, #1
 8012aca:	e01d      	b.n	8012b08 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012acc:	79fb      	ldrb	r3, [r7, #7]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d006      	beq.n	8012ae0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	685a      	ldr	r2, [r3, #4]
 8012ad6:	68bb      	ldr	r3, [r7, #8]
 8012ad8:	425b      	negs	r3, r3
 8012ada:	4413      	add	r3, r2
 8012adc:	617b      	str	r3, [r7, #20]
 8012ade:	e001      	b.n	8012ae4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012ae0:	2301      	movs	r3, #1
 8012ae2:	e011      	b.n	8012b08 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	697a      	ldr	r2, [r7, #20]
 8012ae8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	895a      	ldrh	r2, [r3, #10]
 8012aee:	8a7b      	ldrh	r3, [r7, #18]
 8012af0:	4413      	add	r3, r2
 8012af2:	b29a      	uxth	r2, r3
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	891a      	ldrh	r2, [r3, #8]
 8012afc:	8a7b      	ldrh	r3, [r7, #18]
 8012afe:	4413      	add	r3, r2
 8012b00:	b29a      	uxth	r2, r3
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	811a      	strh	r2, [r3, #8]


  return 0;
 8012b06:	2300      	movs	r3, #0
}
 8012b08:	4618      	mov	r0, r3
 8012b0a:	3718      	adds	r7, #24
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}
 8012b10:	0801f7ac 	.word	0x0801f7ac
 8012b14:	0801f910 	.word	0x0801f910
 8012b18:	0801f80c 	.word	0x0801f80c

08012b1c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b082      	sub	sp, #8
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
 8012b24:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012b26:	2200      	movs	r2, #0
 8012b28:	6839      	ldr	r1, [r7, #0]
 8012b2a:	6878      	ldr	r0, [r7, #4]
 8012b2c:	f7ff ff8e 	bl	8012a4c <pbuf_add_header_impl>
 8012b30:	4603      	mov	r3, r0
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	3708      	adds	r7, #8
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}
	...

08012b3c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b084      	sub	sp, #16
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
 8012b44:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d106      	bne.n	8012b5a <pbuf_remove_header+0x1e>
 8012b4c:	4b20      	ldr	r3, [pc, #128]	@ (8012bd0 <pbuf_remove_header+0x94>)
 8012b4e:	f240 224b 	movw	r2, #587	@ 0x24b
 8012b52:	4920      	ldr	r1, [pc, #128]	@ (8012bd4 <pbuf_remove_header+0x98>)
 8012b54:	4820      	ldr	r0, [pc, #128]	@ (8012bd8 <pbuf_remove_header+0x9c>)
 8012b56:	f00a fc09 	bl	801d36c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d003      	beq.n	8012b68 <pbuf_remove_header+0x2c>
 8012b60:	683b      	ldr	r3, [r7, #0]
 8012b62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012b66:	d301      	bcc.n	8012b6c <pbuf_remove_header+0x30>
    return 1;
 8012b68:	2301      	movs	r3, #1
 8012b6a:	e02c      	b.n	8012bc6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012b6c:	683b      	ldr	r3, [r7, #0]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d101      	bne.n	8012b76 <pbuf_remove_header+0x3a>
    return 0;
 8012b72:	2300      	movs	r3, #0
 8012b74:	e027      	b.n	8012bc6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	895b      	ldrh	r3, [r3, #10]
 8012b7e:	89fa      	ldrh	r2, [r7, #14]
 8012b80:	429a      	cmp	r2, r3
 8012b82:	d908      	bls.n	8012b96 <pbuf_remove_header+0x5a>
 8012b84:	4b12      	ldr	r3, [pc, #72]	@ (8012bd0 <pbuf_remove_header+0x94>)
 8012b86:	f240 2255 	movw	r2, #597	@ 0x255
 8012b8a:	4914      	ldr	r1, [pc, #80]	@ (8012bdc <pbuf_remove_header+0xa0>)
 8012b8c:	4812      	ldr	r0, [pc, #72]	@ (8012bd8 <pbuf_remove_header+0x9c>)
 8012b8e:	f00a fbed 	bl	801d36c <iprintf>
 8012b92:	2301      	movs	r3, #1
 8012b94:	e017      	b.n	8012bc6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	685b      	ldr	r3, [r3, #4]
 8012b9a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	685a      	ldr	r2, [r3, #4]
 8012ba0:	683b      	ldr	r3, [r7, #0]
 8012ba2:	441a      	add	r2, r3
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	895a      	ldrh	r2, [r3, #10]
 8012bac:	89fb      	ldrh	r3, [r7, #14]
 8012bae:	1ad3      	subs	r3, r2, r3
 8012bb0:	b29a      	uxth	r2, r3
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	891a      	ldrh	r2, [r3, #8]
 8012bba:	89fb      	ldrh	r3, [r7, #14]
 8012bbc:	1ad3      	subs	r3, r2, r3
 8012bbe:	b29a      	uxth	r2, r3
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012bc4:	2300      	movs	r3, #0
}
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	3710      	adds	r7, #16
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	bd80      	pop	{r7, pc}
 8012bce:	bf00      	nop
 8012bd0:	0801f7ac 	.word	0x0801f7ac
 8012bd4:	0801f910 	.word	0x0801f910
 8012bd8:	0801f80c 	.word	0x0801f80c
 8012bdc:	0801f91c 	.word	0x0801f91c

08012be0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b082      	sub	sp, #8
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
 8012be8:	460b      	mov	r3, r1
 8012bea:	807b      	strh	r3, [r7, #2]
 8012bec:	4613      	mov	r3, r2
 8012bee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012bf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	da08      	bge.n	8012c0a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012bf8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012bfc:	425b      	negs	r3, r3
 8012bfe:	4619      	mov	r1, r3
 8012c00:	6878      	ldr	r0, [r7, #4]
 8012c02:	f7ff ff9b 	bl	8012b3c <pbuf_remove_header>
 8012c06:	4603      	mov	r3, r0
 8012c08:	e007      	b.n	8012c1a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012c0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012c0e:	787a      	ldrb	r2, [r7, #1]
 8012c10:	4619      	mov	r1, r3
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f7ff ff1a 	bl	8012a4c <pbuf_add_header_impl>
 8012c18:	4603      	mov	r3, r0
  }
}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	3708      	adds	r7, #8
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}

08012c22 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012c22:	b580      	push	{r7, lr}
 8012c24:	b082      	sub	sp, #8
 8012c26:	af00      	add	r7, sp, #0
 8012c28:	6078      	str	r0, [r7, #4]
 8012c2a:	460b      	mov	r3, r1
 8012c2c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8012c2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012c32:	2201      	movs	r2, #1
 8012c34:	4619      	mov	r1, r3
 8012c36:	6878      	ldr	r0, [r7, #4]
 8012c38:	f7ff ffd2 	bl	8012be0 <pbuf_header_impl>
 8012c3c:	4603      	mov	r3, r0
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	3708      	adds	r7, #8
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bd80      	pop	{r7, pc}
	...

08012c48 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b088      	sub	sp, #32
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d10b      	bne.n	8012c6e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d106      	bne.n	8012c6a <pbuf_free+0x22>
 8012c5c:	4b3b      	ldr	r3, [pc, #236]	@ (8012d4c <pbuf_free+0x104>)
 8012c5e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8012c62:	493b      	ldr	r1, [pc, #236]	@ (8012d50 <pbuf_free+0x108>)
 8012c64:	483b      	ldr	r0, [pc, #236]	@ (8012d54 <pbuf_free+0x10c>)
 8012c66:	f00a fb81 	bl	801d36c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	e069      	b.n	8012d42 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8012c6e:	2300      	movs	r3, #0
 8012c70:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012c72:	e062      	b.n	8012d3a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012c74:	f009 fc08 	bl	801c488 <sys_arch_protect>
 8012c78:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	7b9b      	ldrb	r3, [r3, #14]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d106      	bne.n	8012c90 <pbuf_free+0x48>
 8012c82:	4b32      	ldr	r3, [pc, #200]	@ (8012d4c <pbuf_free+0x104>)
 8012c84:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8012c88:	4933      	ldr	r1, [pc, #204]	@ (8012d58 <pbuf_free+0x110>)
 8012c8a:	4832      	ldr	r0, [pc, #200]	@ (8012d54 <pbuf_free+0x10c>)
 8012c8c:	f00a fb6e 	bl	801d36c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	7b9b      	ldrb	r3, [r3, #14]
 8012c94:	3b01      	subs	r3, #1
 8012c96:	b2da      	uxtb	r2, r3
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	739a      	strb	r2, [r3, #14]
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	7b9b      	ldrb	r3, [r3, #14]
 8012ca0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012ca2:	69b8      	ldr	r0, [r7, #24]
 8012ca4:	f009 fbfe 	bl	801c4a4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012ca8:	7dfb      	ldrb	r3, [r7, #23]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d143      	bne.n	8012d36 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	7b1b      	ldrb	r3, [r3, #12]
 8012cb8:	f003 030f 	and.w	r3, r3, #15
 8012cbc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	7b5b      	ldrb	r3, [r3, #13]
 8012cc2:	f003 0302 	and.w	r3, r3, #2
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d011      	beq.n	8012cee <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012cce:	68bb      	ldr	r3, [r7, #8]
 8012cd0:	691b      	ldr	r3, [r3, #16]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d106      	bne.n	8012ce4 <pbuf_free+0x9c>
 8012cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8012d4c <pbuf_free+0x104>)
 8012cd8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8012cdc:	491f      	ldr	r1, [pc, #124]	@ (8012d5c <pbuf_free+0x114>)
 8012cde:	481d      	ldr	r0, [pc, #116]	@ (8012d54 <pbuf_free+0x10c>)
 8012ce0:	f00a fb44 	bl	801d36c <iprintf>
        pc->custom_free_function(p);
 8012ce4:	68bb      	ldr	r3, [r7, #8]
 8012ce6:	691b      	ldr	r3, [r3, #16]
 8012ce8:	6878      	ldr	r0, [r7, #4]
 8012cea:	4798      	blx	r3
 8012cec:	e01d      	b.n	8012d2a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012cee:	7bfb      	ldrb	r3, [r7, #15]
 8012cf0:	2b02      	cmp	r3, #2
 8012cf2:	d104      	bne.n	8012cfe <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012cf4:	6879      	ldr	r1, [r7, #4]
 8012cf6:	200c      	movs	r0, #12
 8012cf8:	f7ff f902 	bl	8011f00 <memp_free>
 8012cfc:	e015      	b.n	8012d2a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012cfe:	7bfb      	ldrb	r3, [r7, #15]
 8012d00:	2b01      	cmp	r3, #1
 8012d02:	d104      	bne.n	8012d0e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012d04:	6879      	ldr	r1, [r7, #4]
 8012d06:	200b      	movs	r0, #11
 8012d08:	f7ff f8fa 	bl	8011f00 <memp_free>
 8012d0c:	e00d      	b.n	8012d2a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012d0e:	7bfb      	ldrb	r3, [r7, #15]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d103      	bne.n	8012d1c <pbuf_free+0xd4>
          mem_free(p);
 8012d14:	6878      	ldr	r0, [r7, #4]
 8012d16:	f7fe fd3f 	bl	8011798 <mem_free>
 8012d1a:	e006      	b.n	8012d2a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8012d4c <pbuf_free+0x104>)
 8012d1e:	f240 320f 	movw	r2, #783	@ 0x30f
 8012d22:	490f      	ldr	r1, [pc, #60]	@ (8012d60 <pbuf_free+0x118>)
 8012d24:	480b      	ldr	r0, [pc, #44]	@ (8012d54 <pbuf_free+0x10c>)
 8012d26:	f00a fb21 	bl	801d36c <iprintf>
        }
      }
      count++;
 8012d2a:	7ffb      	ldrb	r3, [r7, #31]
 8012d2c:	3301      	adds	r3, #1
 8012d2e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012d30:	693b      	ldr	r3, [r7, #16]
 8012d32:	607b      	str	r3, [r7, #4]
 8012d34:	e001      	b.n	8012d3a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8012d36:	2300      	movs	r3, #0
 8012d38:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d199      	bne.n	8012c74 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012d40:	7ffb      	ldrb	r3, [r7, #31]
}
 8012d42:	4618      	mov	r0, r3
 8012d44:	3720      	adds	r7, #32
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}
 8012d4a:	bf00      	nop
 8012d4c:	0801f7ac 	.word	0x0801f7ac
 8012d50:	0801f910 	.word	0x0801f910
 8012d54:	0801f80c 	.word	0x0801f80c
 8012d58:	0801f93c 	.word	0x0801f93c
 8012d5c:	0801f954 	.word	0x0801f954
 8012d60:	0801f978 	.word	0x0801f978

08012d64 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012d64:	b480      	push	{r7}
 8012d66:	b085      	sub	sp, #20
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012d70:	e005      	b.n	8012d7e <pbuf_clen+0x1a>
    ++len;
 8012d72:	89fb      	ldrh	r3, [r7, #14]
 8012d74:	3301      	adds	r3, #1
 8012d76:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d1f6      	bne.n	8012d72 <pbuf_clen+0xe>
  }
  return len;
 8012d84:	89fb      	ldrh	r3, [r7, #14]
}
 8012d86:	4618      	mov	r0, r3
 8012d88:	3714      	adds	r7, #20
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d90:	4770      	bx	lr
	...

08012d94 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b084      	sub	sp, #16
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d016      	beq.n	8012dd0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8012da2:	f009 fb71 	bl	801c488 <sys_arch_protect>
 8012da6:	60f8      	str	r0, [r7, #12]
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	7b9b      	ldrb	r3, [r3, #14]
 8012dac:	3301      	adds	r3, #1
 8012dae:	b2da      	uxtb	r2, r3
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	739a      	strb	r2, [r3, #14]
 8012db4:	68f8      	ldr	r0, [r7, #12]
 8012db6:	f009 fb75 	bl	801c4a4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	7b9b      	ldrb	r3, [r3, #14]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d106      	bne.n	8012dd0 <pbuf_ref+0x3c>
 8012dc2:	4b05      	ldr	r3, [pc, #20]	@ (8012dd8 <pbuf_ref+0x44>)
 8012dc4:	f240 3242 	movw	r2, #834	@ 0x342
 8012dc8:	4904      	ldr	r1, [pc, #16]	@ (8012ddc <pbuf_ref+0x48>)
 8012dca:	4805      	ldr	r0, [pc, #20]	@ (8012de0 <pbuf_ref+0x4c>)
 8012dcc:	f00a face 	bl	801d36c <iprintf>
  }
}
 8012dd0:	bf00      	nop
 8012dd2:	3710      	adds	r7, #16
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	0801f7ac 	.word	0x0801f7ac
 8012ddc:	0801f98c 	.word	0x0801f98c
 8012de0:	0801f80c 	.word	0x0801f80c

08012de4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b084      	sub	sp, #16
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d002      	beq.n	8012dfa <pbuf_cat+0x16>
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d107      	bne.n	8012e0a <pbuf_cat+0x26>
 8012dfa:	4b20      	ldr	r3, [pc, #128]	@ (8012e7c <pbuf_cat+0x98>)
 8012dfc:	f240 3259 	movw	r2, #857	@ 0x359
 8012e00:	491f      	ldr	r1, [pc, #124]	@ (8012e80 <pbuf_cat+0x9c>)
 8012e02:	4820      	ldr	r0, [pc, #128]	@ (8012e84 <pbuf_cat+0xa0>)
 8012e04:	f00a fab2 	bl	801d36c <iprintf>
 8012e08:	e034      	b.n	8012e74 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	60fb      	str	r3, [r7, #12]
 8012e0e:	e00a      	b.n	8012e26 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	891a      	ldrh	r2, [r3, #8]
 8012e14:	683b      	ldr	r3, [r7, #0]
 8012e16:	891b      	ldrh	r3, [r3, #8]
 8012e18:	4413      	add	r3, r2
 8012e1a:	b29a      	uxth	r2, r3
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	60fb      	str	r3, [r7, #12]
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d1f0      	bne.n	8012e10 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	891a      	ldrh	r2, [r3, #8]
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	895b      	ldrh	r3, [r3, #10]
 8012e36:	429a      	cmp	r2, r3
 8012e38:	d006      	beq.n	8012e48 <pbuf_cat+0x64>
 8012e3a:	4b10      	ldr	r3, [pc, #64]	@ (8012e7c <pbuf_cat+0x98>)
 8012e3c:	f240 3262 	movw	r2, #866	@ 0x362
 8012e40:	4911      	ldr	r1, [pc, #68]	@ (8012e88 <pbuf_cat+0xa4>)
 8012e42:	4810      	ldr	r0, [pc, #64]	@ (8012e84 <pbuf_cat+0xa0>)
 8012e44:	f00a fa92 	bl	801d36c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d006      	beq.n	8012e5e <pbuf_cat+0x7a>
 8012e50:	4b0a      	ldr	r3, [pc, #40]	@ (8012e7c <pbuf_cat+0x98>)
 8012e52:	f240 3263 	movw	r2, #867	@ 0x363
 8012e56:	490d      	ldr	r1, [pc, #52]	@ (8012e8c <pbuf_cat+0xa8>)
 8012e58:	480a      	ldr	r0, [pc, #40]	@ (8012e84 <pbuf_cat+0xa0>)
 8012e5a:	f00a fa87 	bl	801d36c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	891a      	ldrh	r2, [r3, #8]
 8012e62:	683b      	ldr	r3, [r7, #0]
 8012e64:	891b      	ldrh	r3, [r3, #8]
 8012e66:	4413      	add	r3, r2
 8012e68:	b29a      	uxth	r2, r3
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	683a      	ldr	r2, [r7, #0]
 8012e72:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8012e74:	3710      	adds	r7, #16
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bd80      	pop	{r7, pc}
 8012e7a:	bf00      	nop
 8012e7c:	0801f7ac 	.word	0x0801f7ac
 8012e80:	0801f9a0 	.word	0x0801f9a0
 8012e84:	0801f80c 	.word	0x0801f80c
 8012e88:	0801f9d8 	.word	0x0801f9d8
 8012e8c:	0801fa08 	.word	0x0801fa08

08012e90 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b086      	sub	sp, #24
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
 8012e98:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	617b      	str	r3, [r7, #20]
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d008      	beq.n	8012eba <pbuf_copy+0x2a>
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d005      	beq.n	8012eba <pbuf_copy+0x2a>
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	891a      	ldrh	r2, [r3, #8]
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	891b      	ldrh	r3, [r3, #8]
 8012eb6:	429a      	cmp	r2, r3
 8012eb8:	d209      	bcs.n	8012ece <pbuf_copy+0x3e>
 8012eba:	4b57      	ldr	r3, [pc, #348]	@ (8013018 <pbuf_copy+0x188>)
 8012ebc:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8012ec0:	4956      	ldr	r1, [pc, #344]	@ (801301c <pbuf_copy+0x18c>)
 8012ec2:	4857      	ldr	r0, [pc, #348]	@ (8013020 <pbuf_copy+0x190>)
 8012ec4:	f00a fa52 	bl	801d36c <iprintf>
 8012ec8:	f06f 030f 	mvn.w	r3, #15
 8012ecc:	e09f      	b.n	801300e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	895b      	ldrh	r3, [r3, #10]
 8012ed2:	461a      	mov	r2, r3
 8012ed4:	697b      	ldr	r3, [r7, #20]
 8012ed6:	1ad2      	subs	r2, r2, r3
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	895b      	ldrh	r3, [r3, #10]
 8012edc:	4619      	mov	r1, r3
 8012ede:	693b      	ldr	r3, [r7, #16]
 8012ee0:	1acb      	subs	r3, r1, r3
 8012ee2:	429a      	cmp	r2, r3
 8012ee4:	d306      	bcc.n	8012ef4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	895b      	ldrh	r3, [r3, #10]
 8012eea:	461a      	mov	r2, r3
 8012eec:	693b      	ldr	r3, [r7, #16]
 8012eee:	1ad3      	subs	r3, r2, r3
 8012ef0:	60fb      	str	r3, [r7, #12]
 8012ef2:	e005      	b.n	8012f00 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	895b      	ldrh	r3, [r3, #10]
 8012ef8:	461a      	mov	r2, r3
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	1ad3      	subs	r3, r2, r3
 8012efe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	685a      	ldr	r2, [r3, #4]
 8012f04:	697b      	ldr	r3, [r7, #20]
 8012f06:	18d0      	adds	r0, r2, r3
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	685a      	ldr	r2, [r3, #4]
 8012f0c:	693b      	ldr	r3, [r7, #16]
 8012f0e:	4413      	add	r3, r2
 8012f10:	68fa      	ldr	r2, [r7, #12]
 8012f12:	4619      	mov	r1, r3
 8012f14:	f00a fbb7 	bl	801d686 <memcpy>
    offset_to += len;
 8012f18:	697a      	ldr	r2, [r7, #20]
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	4413      	add	r3, r2
 8012f1e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012f20:	693a      	ldr	r2, [r7, #16]
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	4413      	add	r3, r2
 8012f26:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	895b      	ldrh	r3, [r3, #10]
 8012f2c:	461a      	mov	r2, r3
 8012f2e:	697b      	ldr	r3, [r7, #20]
 8012f30:	4293      	cmp	r3, r2
 8012f32:	d906      	bls.n	8012f42 <pbuf_copy+0xb2>
 8012f34:	4b38      	ldr	r3, [pc, #224]	@ (8013018 <pbuf_copy+0x188>)
 8012f36:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8012f3a:	493a      	ldr	r1, [pc, #232]	@ (8013024 <pbuf_copy+0x194>)
 8012f3c:	4838      	ldr	r0, [pc, #224]	@ (8013020 <pbuf_copy+0x190>)
 8012f3e:	f00a fa15 	bl	801d36c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	895b      	ldrh	r3, [r3, #10]
 8012f46:	461a      	mov	r2, r3
 8012f48:	693b      	ldr	r3, [r7, #16]
 8012f4a:	4293      	cmp	r3, r2
 8012f4c:	d906      	bls.n	8012f5c <pbuf_copy+0xcc>
 8012f4e:	4b32      	ldr	r3, [pc, #200]	@ (8013018 <pbuf_copy+0x188>)
 8012f50:	f240 32da 	movw	r2, #986	@ 0x3da
 8012f54:	4934      	ldr	r1, [pc, #208]	@ (8013028 <pbuf_copy+0x198>)
 8012f56:	4832      	ldr	r0, [pc, #200]	@ (8013020 <pbuf_copy+0x190>)
 8012f58:	f00a fa08 	bl	801d36c <iprintf>
    if (offset_from >= p_from->len) {
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	895b      	ldrh	r3, [r3, #10]
 8012f60:	461a      	mov	r2, r3
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	4293      	cmp	r3, r2
 8012f66:	d304      	bcc.n	8012f72 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012f68:	2300      	movs	r3, #0
 8012f6a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	895b      	ldrh	r3, [r3, #10]
 8012f76:	461a      	mov	r2, r3
 8012f78:	697b      	ldr	r3, [r7, #20]
 8012f7a:	4293      	cmp	r3, r2
 8012f7c:	d114      	bne.n	8012fa8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8012f7e:	2300      	movs	r3, #0
 8012f80:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d10c      	bne.n	8012fa8 <pbuf_copy+0x118>
 8012f8e:	683b      	ldr	r3, [r7, #0]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d009      	beq.n	8012fa8 <pbuf_copy+0x118>
 8012f94:	4b20      	ldr	r3, [pc, #128]	@ (8013018 <pbuf_copy+0x188>)
 8012f96:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8012f9a:	4924      	ldr	r1, [pc, #144]	@ (801302c <pbuf_copy+0x19c>)
 8012f9c:	4820      	ldr	r0, [pc, #128]	@ (8013020 <pbuf_copy+0x190>)
 8012f9e:	f00a f9e5 	bl	801d36c <iprintf>
 8012fa2:	f06f 030f 	mvn.w	r3, #15
 8012fa6:	e032      	b.n	801300e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d013      	beq.n	8012fd6 <pbuf_copy+0x146>
 8012fae:	683b      	ldr	r3, [r7, #0]
 8012fb0:	895a      	ldrh	r2, [r3, #10]
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	891b      	ldrh	r3, [r3, #8]
 8012fb6:	429a      	cmp	r2, r3
 8012fb8:	d10d      	bne.n	8012fd6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d009      	beq.n	8012fd6 <pbuf_copy+0x146>
 8012fc2:	4b15      	ldr	r3, [pc, #84]	@ (8013018 <pbuf_copy+0x188>)
 8012fc4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8012fc8:	4919      	ldr	r1, [pc, #100]	@ (8013030 <pbuf_copy+0x1a0>)
 8012fca:	4815      	ldr	r0, [pc, #84]	@ (8013020 <pbuf_copy+0x190>)
 8012fcc:	f00a f9ce 	bl	801d36c <iprintf>
 8012fd0:	f06f 0305 	mvn.w	r3, #5
 8012fd4:	e01b      	b.n	801300e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d013      	beq.n	8013004 <pbuf_copy+0x174>
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	895a      	ldrh	r2, [r3, #10]
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	891b      	ldrh	r3, [r3, #8]
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d10d      	bne.n	8013004 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d009      	beq.n	8013004 <pbuf_copy+0x174>
 8012ff0:	4b09      	ldr	r3, [pc, #36]	@ (8013018 <pbuf_copy+0x188>)
 8012ff2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8012ff6:	490e      	ldr	r1, [pc, #56]	@ (8013030 <pbuf_copy+0x1a0>)
 8012ff8:	4809      	ldr	r0, [pc, #36]	@ (8013020 <pbuf_copy+0x190>)
 8012ffa:	f00a f9b7 	bl	801d36c <iprintf>
 8012ffe:	f06f 0305 	mvn.w	r3, #5
 8013002:	e004      	b.n	801300e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8013004:	683b      	ldr	r3, [r7, #0]
 8013006:	2b00      	cmp	r3, #0
 8013008:	f47f af61 	bne.w	8012ece <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801300c:	2300      	movs	r3, #0
}
 801300e:	4618      	mov	r0, r3
 8013010:	3718      	adds	r7, #24
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}
 8013016:	bf00      	nop
 8013018:	0801f7ac 	.word	0x0801f7ac
 801301c:	0801fa54 	.word	0x0801fa54
 8013020:	0801f80c 	.word	0x0801f80c
 8013024:	0801fa84 	.word	0x0801fa84
 8013028:	0801fa9c 	.word	0x0801fa9c
 801302c:	0801fab8 	.word	0x0801fab8
 8013030:	0801fac8 	.word	0x0801fac8

08013034 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b088      	sub	sp, #32
 8013038:	af00      	add	r7, sp, #0
 801303a:	60f8      	str	r0, [r7, #12]
 801303c:	60b9      	str	r1, [r7, #8]
 801303e:	4611      	mov	r1, r2
 8013040:	461a      	mov	r2, r3
 8013042:	460b      	mov	r3, r1
 8013044:	80fb      	strh	r3, [r7, #6]
 8013046:	4613      	mov	r3, r2
 8013048:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801304a:	2300      	movs	r3, #0
 801304c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801304e:	2300      	movs	r3, #0
 8013050:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d108      	bne.n	801306a <pbuf_copy_partial+0x36>
 8013058:	4b2b      	ldr	r3, [pc, #172]	@ (8013108 <pbuf_copy_partial+0xd4>)
 801305a:	f240 420a 	movw	r2, #1034	@ 0x40a
 801305e:	492b      	ldr	r1, [pc, #172]	@ (801310c <pbuf_copy_partial+0xd8>)
 8013060:	482b      	ldr	r0, [pc, #172]	@ (8013110 <pbuf_copy_partial+0xdc>)
 8013062:	f00a f983 	bl	801d36c <iprintf>
 8013066:	2300      	movs	r3, #0
 8013068:	e04a      	b.n	8013100 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801306a:	68bb      	ldr	r3, [r7, #8]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d108      	bne.n	8013082 <pbuf_copy_partial+0x4e>
 8013070:	4b25      	ldr	r3, [pc, #148]	@ (8013108 <pbuf_copy_partial+0xd4>)
 8013072:	f240 420b 	movw	r2, #1035	@ 0x40b
 8013076:	4927      	ldr	r1, [pc, #156]	@ (8013114 <pbuf_copy_partial+0xe0>)
 8013078:	4825      	ldr	r0, [pc, #148]	@ (8013110 <pbuf_copy_partial+0xdc>)
 801307a:	f00a f977 	bl	801d36c <iprintf>
 801307e:	2300      	movs	r3, #0
 8013080:	e03e      	b.n	8013100 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	61fb      	str	r3, [r7, #28]
 8013086:	e034      	b.n	80130f2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8013088:	88bb      	ldrh	r3, [r7, #4]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d00a      	beq.n	80130a4 <pbuf_copy_partial+0x70>
 801308e:	69fb      	ldr	r3, [r7, #28]
 8013090:	895b      	ldrh	r3, [r3, #10]
 8013092:	88ba      	ldrh	r2, [r7, #4]
 8013094:	429a      	cmp	r2, r3
 8013096:	d305      	bcc.n	80130a4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8013098:	69fb      	ldr	r3, [r7, #28]
 801309a:	895b      	ldrh	r3, [r3, #10]
 801309c:	88ba      	ldrh	r2, [r7, #4]
 801309e:	1ad3      	subs	r3, r2, r3
 80130a0:	80bb      	strh	r3, [r7, #4]
 80130a2:	e023      	b.n	80130ec <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80130a4:	69fb      	ldr	r3, [r7, #28]
 80130a6:	895a      	ldrh	r2, [r3, #10]
 80130a8:	88bb      	ldrh	r3, [r7, #4]
 80130aa:	1ad3      	subs	r3, r2, r3
 80130ac:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80130ae:	8b3a      	ldrh	r2, [r7, #24]
 80130b0:	88fb      	ldrh	r3, [r7, #6]
 80130b2:	429a      	cmp	r2, r3
 80130b4:	d901      	bls.n	80130ba <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80130b6:	88fb      	ldrh	r3, [r7, #6]
 80130b8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80130ba:	8b7b      	ldrh	r3, [r7, #26]
 80130bc:	68ba      	ldr	r2, [r7, #8]
 80130be:	18d0      	adds	r0, r2, r3
 80130c0:	69fb      	ldr	r3, [r7, #28]
 80130c2:	685a      	ldr	r2, [r3, #4]
 80130c4:	88bb      	ldrh	r3, [r7, #4]
 80130c6:	4413      	add	r3, r2
 80130c8:	8b3a      	ldrh	r2, [r7, #24]
 80130ca:	4619      	mov	r1, r3
 80130cc:	f00a fadb 	bl	801d686 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80130d0:	8afa      	ldrh	r2, [r7, #22]
 80130d2:	8b3b      	ldrh	r3, [r7, #24]
 80130d4:	4413      	add	r3, r2
 80130d6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80130d8:	8b7a      	ldrh	r2, [r7, #26]
 80130da:	8b3b      	ldrh	r3, [r7, #24]
 80130dc:	4413      	add	r3, r2
 80130de:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80130e0:	88fa      	ldrh	r2, [r7, #6]
 80130e2:	8b3b      	ldrh	r3, [r7, #24]
 80130e4:	1ad3      	subs	r3, r2, r3
 80130e6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80130e8:	2300      	movs	r3, #0
 80130ea:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80130ec:	69fb      	ldr	r3, [r7, #28]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	61fb      	str	r3, [r7, #28]
 80130f2:	88fb      	ldrh	r3, [r7, #6]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d002      	beq.n	80130fe <pbuf_copy_partial+0xca>
 80130f8:	69fb      	ldr	r3, [r7, #28]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d1c4      	bne.n	8013088 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80130fe:	8afb      	ldrh	r3, [r7, #22]
}
 8013100:	4618      	mov	r0, r3
 8013102:	3720      	adds	r7, #32
 8013104:	46bd      	mov	sp, r7
 8013106:	bd80      	pop	{r7, pc}
 8013108:	0801f7ac 	.word	0x0801f7ac
 801310c:	0801faf4 	.word	0x0801faf4
 8013110:	0801f80c 	.word	0x0801f80c
 8013114:	0801fb14 	.word	0x0801fb14

08013118 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b084      	sub	sp, #16
 801311c:	af00      	add	r7, sp, #0
 801311e:	4603      	mov	r3, r0
 8013120:	603a      	str	r2, [r7, #0]
 8013122:	71fb      	strb	r3, [r7, #7]
 8013124:	460b      	mov	r3, r1
 8013126:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	8919      	ldrh	r1, [r3, #8]
 801312c:	88ba      	ldrh	r2, [r7, #4]
 801312e:	79fb      	ldrb	r3, [r7, #7]
 8013130:	4618      	mov	r0, r3
 8013132:	f7ff faa5 	bl	8012680 <pbuf_alloc>
 8013136:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d101      	bne.n	8013142 <pbuf_clone+0x2a>
    return NULL;
 801313e:	2300      	movs	r3, #0
 8013140:	e011      	b.n	8013166 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8013142:	6839      	ldr	r1, [r7, #0]
 8013144:	68f8      	ldr	r0, [r7, #12]
 8013146:	f7ff fea3 	bl	8012e90 <pbuf_copy>
 801314a:	4603      	mov	r3, r0
 801314c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801314e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d006      	beq.n	8013164 <pbuf_clone+0x4c>
 8013156:	4b06      	ldr	r3, [pc, #24]	@ (8013170 <pbuf_clone+0x58>)
 8013158:	f240 5224 	movw	r2, #1316	@ 0x524
 801315c:	4905      	ldr	r1, [pc, #20]	@ (8013174 <pbuf_clone+0x5c>)
 801315e:	4806      	ldr	r0, [pc, #24]	@ (8013178 <pbuf_clone+0x60>)
 8013160:	f00a f904 	bl	801d36c <iprintf>
  return q;
 8013164:	68fb      	ldr	r3, [r7, #12]
}
 8013166:	4618      	mov	r0, r3
 8013168:	3710      	adds	r7, #16
 801316a:	46bd      	mov	sp, r7
 801316c:	bd80      	pop	{r7, pc}
 801316e:	bf00      	nop
 8013170:	0801f7ac 	.word	0x0801f7ac
 8013174:	0801fc20 	.word	0x0801fc20
 8013178:	0801f80c 	.word	0x0801f80c

0801317c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013180:	f009 fff4 	bl	801d16c <rand>
 8013184:	4603      	mov	r3, r0
 8013186:	b29b      	uxth	r3, r3
 8013188:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801318c:	b29b      	uxth	r3, r3
 801318e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013192:	b29a      	uxth	r2, r3
 8013194:	4b01      	ldr	r3, [pc, #4]	@ (801319c <tcp_init+0x20>)
 8013196:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013198:	bf00      	nop
 801319a:	bd80      	pop	{r7, pc}
 801319c:	200000b0 	.word	0x200000b0

080131a0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b082      	sub	sp, #8
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	7d1b      	ldrb	r3, [r3, #20]
 80131ac:	2b01      	cmp	r3, #1
 80131ae:	d105      	bne.n	80131bc <tcp_free+0x1c>
 80131b0:	4b06      	ldr	r3, [pc, #24]	@ (80131cc <tcp_free+0x2c>)
 80131b2:	22d4      	movs	r2, #212	@ 0xd4
 80131b4:	4906      	ldr	r1, [pc, #24]	@ (80131d0 <tcp_free+0x30>)
 80131b6:	4807      	ldr	r0, [pc, #28]	@ (80131d4 <tcp_free+0x34>)
 80131b8:	f00a f8d8 	bl	801d36c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80131bc:	6879      	ldr	r1, [r7, #4]
 80131be:	2001      	movs	r0, #1
 80131c0:	f7fe fe9e 	bl	8011f00 <memp_free>
}
 80131c4:	bf00      	nop
 80131c6:	3708      	adds	r7, #8
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}
 80131cc:	0801fcac 	.word	0x0801fcac
 80131d0:	0801fcdc 	.word	0x0801fcdc
 80131d4:	0801fcf0 	.word	0x0801fcf0

080131d8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b082      	sub	sp, #8
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	7d1b      	ldrb	r3, [r3, #20]
 80131e4:	2b01      	cmp	r3, #1
 80131e6:	d105      	bne.n	80131f4 <tcp_free_listen+0x1c>
 80131e8:	4b06      	ldr	r3, [pc, #24]	@ (8013204 <tcp_free_listen+0x2c>)
 80131ea:	22df      	movs	r2, #223	@ 0xdf
 80131ec:	4906      	ldr	r1, [pc, #24]	@ (8013208 <tcp_free_listen+0x30>)
 80131ee:	4807      	ldr	r0, [pc, #28]	@ (801320c <tcp_free_listen+0x34>)
 80131f0:	f00a f8bc 	bl	801d36c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80131f4:	6879      	ldr	r1, [r7, #4]
 80131f6:	2002      	movs	r0, #2
 80131f8:	f7fe fe82 	bl	8011f00 <memp_free>
}
 80131fc:	bf00      	nop
 80131fe:	3708      	adds	r7, #8
 8013200:	46bd      	mov	sp, r7
 8013202:	bd80      	pop	{r7, pc}
 8013204:	0801fcac 	.word	0x0801fcac
 8013208:	0801fd18 	.word	0x0801fd18
 801320c:	0801fcf0 	.word	0x0801fcf0

08013210 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8013210:	b580      	push	{r7, lr}
 8013212:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8013214:	f001 f8a8 	bl	8014368 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8013218:	4b07      	ldr	r3, [pc, #28]	@ (8013238 <tcp_tmr+0x28>)
 801321a:	781b      	ldrb	r3, [r3, #0]
 801321c:	3301      	adds	r3, #1
 801321e:	b2da      	uxtb	r2, r3
 8013220:	4b05      	ldr	r3, [pc, #20]	@ (8013238 <tcp_tmr+0x28>)
 8013222:	701a      	strb	r2, [r3, #0]
 8013224:	4b04      	ldr	r3, [pc, #16]	@ (8013238 <tcp_tmr+0x28>)
 8013226:	781b      	ldrb	r3, [r3, #0]
 8013228:	f003 0301 	and.w	r3, r3, #1
 801322c:	2b00      	cmp	r3, #0
 801322e:	d001      	beq.n	8013234 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8013230:	f000 fd58 	bl	8013ce4 <tcp_slowtmr>
  }
}
 8013234:	bf00      	nop
 8013236:	bd80      	pop	{r7, pc}
 8013238:	2000e471 	.word	0x2000e471

0801323c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b084      	sub	sp, #16
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
 8013244:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8013246:	683b      	ldr	r3, [r7, #0]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d105      	bne.n	8013258 <tcp_remove_listener+0x1c>
 801324c:	4b0d      	ldr	r3, [pc, #52]	@ (8013284 <tcp_remove_listener+0x48>)
 801324e:	22ff      	movs	r2, #255	@ 0xff
 8013250:	490d      	ldr	r1, [pc, #52]	@ (8013288 <tcp_remove_listener+0x4c>)
 8013252:	480e      	ldr	r0, [pc, #56]	@ (801328c <tcp_remove_listener+0x50>)
 8013254:	f00a f88a 	bl	801d36c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	60fb      	str	r3, [r7, #12]
 801325c:	e00a      	b.n	8013274 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013262:	683a      	ldr	r2, [r7, #0]
 8013264:	429a      	cmp	r2, r3
 8013266:	d102      	bne.n	801326e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	2200      	movs	r2, #0
 801326c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	68db      	ldr	r3, [r3, #12]
 8013272:	60fb      	str	r3, [r7, #12]
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d1f1      	bne.n	801325e <tcp_remove_listener+0x22>
    }
  }
}
 801327a:	bf00      	nop
 801327c:	bf00      	nop
 801327e:	3710      	adds	r7, #16
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}
 8013284:	0801fcac 	.word	0x0801fcac
 8013288:	0801fd34 	.word	0x0801fd34
 801328c:	0801fcf0 	.word	0x0801fcf0

08013290 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b084      	sub	sp, #16
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d106      	bne.n	80132ac <tcp_listen_closed+0x1c>
 801329e:	4b14      	ldr	r3, [pc, #80]	@ (80132f0 <tcp_listen_closed+0x60>)
 80132a0:	f240 1211 	movw	r2, #273	@ 0x111
 80132a4:	4913      	ldr	r1, [pc, #76]	@ (80132f4 <tcp_listen_closed+0x64>)
 80132a6:	4814      	ldr	r0, [pc, #80]	@ (80132f8 <tcp_listen_closed+0x68>)
 80132a8:	f00a f860 	bl	801d36c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	7d1b      	ldrb	r3, [r3, #20]
 80132b0:	2b01      	cmp	r3, #1
 80132b2:	d006      	beq.n	80132c2 <tcp_listen_closed+0x32>
 80132b4:	4b0e      	ldr	r3, [pc, #56]	@ (80132f0 <tcp_listen_closed+0x60>)
 80132b6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80132ba:	4910      	ldr	r1, [pc, #64]	@ (80132fc <tcp_listen_closed+0x6c>)
 80132bc:	480e      	ldr	r0, [pc, #56]	@ (80132f8 <tcp_listen_closed+0x68>)
 80132be:	f00a f855 	bl	801d36c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80132c2:	2301      	movs	r3, #1
 80132c4:	60fb      	str	r3, [r7, #12]
 80132c6:	e00b      	b.n	80132e0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80132c8:	4a0d      	ldr	r2, [pc, #52]	@ (8013300 <tcp_listen_closed+0x70>)
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	6879      	ldr	r1, [r7, #4]
 80132d4:	4618      	mov	r0, r3
 80132d6:	f7ff ffb1 	bl	801323c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	3301      	adds	r3, #1
 80132de:	60fb      	str	r3, [r7, #12]
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	2b03      	cmp	r3, #3
 80132e4:	d9f0      	bls.n	80132c8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80132e6:	bf00      	nop
 80132e8:	bf00      	nop
 80132ea:	3710      	adds	r7, #16
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bd80      	pop	{r7, pc}
 80132f0:	0801fcac 	.word	0x0801fcac
 80132f4:	0801fd5c 	.word	0x0801fd5c
 80132f8:	0801fcf0 	.word	0x0801fcf0
 80132fc:	0801fd68 	.word	0x0801fd68
 8013300:	080324f0 	.word	0x080324f0

08013304 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8013304:	b5b0      	push	{r4, r5, r7, lr}
 8013306:	b088      	sub	sp, #32
 8013308:	af04      	add	r7, sp, #16
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	460b      	mov	r3, r1
 801330e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d106      	bne.n	8013324 <tcp_close_shutdown+0x20>
 8013316:	4b63      	ldr	r3, [pc, #396]	@ (80134a4 <tcp_close_shutdown+0x1a0>)
 8013318:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 801331c:	4962      	ldr	r1, [pc, #392]	@ (80134a8 <tcp_close_shutdown+0x1a4>)
 801331e:	4863      	ldr	r0, [pc, #396]	@ (80134ac <tcp_close_shutdown+0x1a8>)
 8013320:	f00a f824 	bl	801d36c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8013324:	78fb      	ldrb	r3, [r7, #3]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d066      	beq.n	80133f8 <tcp_close_shutdown+0xf4>
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	7d1b      	ldrb	r3, [r3, #20]
 801332e:	2b04      	cmp	r3, #4
 8013330:	d003      	beq.n	801333a <tcp_close_shutdown+0x36>
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	7d1b      	ldrb	r3, [r3, #20]
 8013336:	2b07      	cmp	r3, #7
 8013338:	d15e      	bne.n	80133f8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801333e:	2b00      	cmp	r3, #0
 8013340:	d104      	bne.n	801334c <tcp_close_shutdown+0x48>
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013346:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801334a:	d055      	beq.n	80133f8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	8b5b      	ldrh	r3, [r3, #26]
 8013350:	f003 0310 	and.w	r3, r3, #16
 8013354:	2b00      	cmp	r3, #0
 8013356:	d106      	bne.n	8013366 <tcp_close_shutdown+0x62>
 8013358:	4b52      	ldr	r3, [pc, #328]	@ (80134a4 <tcp_close_shutdown+0x1a0>)
 801335a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801335e:	4954      	ldr	r1, [pc, #336]	@ (80134b0 <tcp_close_shutdown+0x1ac>)
 8013360:	4852      	ldr	r0, [pc, #328]	@ (80134ac <tcp_close_shutdown+0x1a8>)
 8013362:	f00a f803 	bl	801d36c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801336e:	687d      	ldr	r5, [r7, #4]
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	3304      	adds	r3, #4
 8013374:	687a      	ldr	r2, [r7, #4]
 8013376:	8ad2      	ldrh	r2, [r2, #22]
 8013378:	6879      	ldr	r1, [r7, #4]
 801337a:	8b09      	ldrh	r1, [r1, #24]
 801337c:	9102      	str	r1, [sp, #8]
 801337e:	9201      	str	r2, [sp, #4]
 8013380:	9300      	str	r3, [sp, #0]
 8013382:	462b      	mov	r3, r5
 8013384:	4622      	mov	r2, r4
 8013386:	4601      	mov	r1, r0
 8013388:	6878      	ldr	r0, [r7, #4]
 801338a:	f005 fdb7 	bl	8018efc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801338e:	6878      	ldr	r0, [r7, #4]
 8013390:	f001 fb9a 	bl	8014ac8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013394:	4b47      	ldr	r3, [pc, #284]	@ (80134b4 <tcp_close_shutdown+0x1b0>)
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	687a      	ldr	r2, [r7, #4]
 801339a:	429a      	cmp	r2, r3
 801339c:	d105      	bne.n	80133aa <tcp_close_shutdown+0xa6>
 801339e:	4b45      	ldr	r3, [pc, #276]	@ (80134b4 <tcp_close_shutdown+0x1b0>)
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	68db      	ldr	r3, [r3, #12]
 80133a4:	4a43      	ldr	r2, [pc, #268]	@ (80134b4 <tcp_close_shutdown+0x1b0>)
 80133a6:	6013      	str	r3, [r2, #0]
 80133a8:	e013      	b.n	80133d2 <tcp_close_shutdown+0xce>
 80133aa:	4b42      	ldr	r3, [pc, #264]	@ (80134b4 <tcp_close_shutdown+0x1b0>)
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	60fb      	str	r3, [r7, #12]
 80133b0:	e00c      	b.n	80133cc <tcp_close_shutdown+0xc8>
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	68db      	ldr	r3, [r3, #12]
 80133b6:	687a      	ldr	r2, [r7, #4]
 80133b8:	429a      	cmp	r2, r3
 80133ba:	d104      	bne.n	80133c6 <tcp_close_shutdown+0xc2>
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	68da      	ldr	r2, [r3, #12]
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	60da      	str	r2, [r3, #12]
 80133c4:	e005      	b.n	80133d2 <tcp_close_shutdown+0xce>
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	68db      	ldr	r3, [r3, #12]
 80133ca:	60fb      	str	r3, [r7, #12]
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d1ef      	bne.n	80133b2 <tcp_close_shutdown+0xae>
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	2200      	movs	r2, #0
 80133d6:	60da      	str	r2, [r3, #12]
 80133d8:	4b37      	ldr	r3, [pc, #220]	@ (80134b8 <tcp_close_shutdown+0x1b4>)
 80133da:	2201      	movs	r2, #1
 80133dc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80133de:	4b37      	ldr	r3, [pc, #220]	@ (80134bc <tcp_close_shutdown+0x1b8>)
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	687a      	ldr	r2, [r7, #4]
 80133e4:	429a      	cmp	r2, r3
 80133e6:	d102      	bne.n	80133ee <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80133e8:	f004 f82e 	bl	8017448 <tcp_trigger_input_pcb_close>
 80133ec:	e002      	b.n	80133f4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80133ee:	6878      	ldr	r0, [r7, #4]
 80133f0:	f7ff fed6 	bl	80131a0 <tcp_free>
      }
      return ERR_OK;
 80133f4:	2300      	movs	r3, #0
 80133f6:	e050      	b.n	801349a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	7d1b      	ldrb	r3, [r3, #20]
 80133fc:	2b02      	cmp	r3, #2
 80133fe:	d03b      	beq.n	8013478 <tcp_close_shutdown+0x174>
 8013400:	2b02      	cmp	r3, #2
 8013402:	dc44      	bgt.n	801348e <tcp_close_shutdown+0x18a>
 8013404:	2b00      	cmp	r3, #0
 8013406:	d002      	beq.n	801340e <tcp_close_shutdown+0x10a>
 8013408:	2b01      	cmp	r3, #1
 801340a:	d02a      	beq.n	8013462 <tcp_close_shutdown+0x15e>
 801340c:	e03f      	b.n	801348e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	8adb      	ldrh	r3, [r3, #22]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d021      	beq.n	801345a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013416:	4b2a      	ldr	r3, [pc, #168]	@ (80134c0 <tcp_close_shutdown+0x1bc>)
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	687a      	ldr	r2, [r7, #4]
 801341c:	429a      	cmp	r2, r3
 801341e:	d105      	bne.n	801342c <tcp_close_shutdown+0x128>
 8013420:	4b27      	ldr	r3, [pc, #156]	@ (80134c0 <tcp_close_shutdown+0x1bc>)
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	68db      	ldr	r3, [r3, #12]
 8013426:	4a26      	ldr	r2, [pc, #152]	@ (80134c0 <tcp_close_shutdown+0x1bc>)
 8013428:	6013      	str	r3, [r2, #0]
 801342a:	e013      	b.n	8013454 <tcp_close_shutdown+0x150>
 801342c:	4b24      	ldr	r3, [pc, #144]	@ (80134c0 <tcp_close_shutdown+0x1bc>)
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	60bb      	str	r3, [r7, #8]
 8013432:	e00c      	b.n	801344e <tcp_close_shutdown+0x14a>
 8013434:	68bb      	ldr	r3, [r7, #8]
 8013436:	68db      	ldr	r3, [r3, #12]
 8013438:	687a      	ldr	r2, [r7, #4]
 801343a:	429a      	cmp	r2, r3
 801343c:	d104      	bne.n	8013448 <tcp_close_shutdown+0x144>
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	68da      	ldr	r2, [r3, #12]
 8013442:	68bb      	ldr	r3, [r7, #8]
 8013444:	60da      	str	r2, [r3, #12]
 8013446:	e005      	b.n	8013454 <tcp_close_shutdown+0x150>
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	68db      	ldr	r3, [r3, #12]
 801344c:	60bb      	str	r3, [r7, #8]
 801344e:	68bb      	ldr	r3, [r7, #8]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d1ef      	bne.n	8013434 <tcp_close_shutdown+0x130>
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	2200      	movs	r2, #0
 8013458:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801345a:	6878      	ldr	r0, [r7, #4]
 801345c:	f7ff fea0 	bl	80131a0 <tcp_free>
      break;
 8013460:	e01a      	b.n	8013498 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8013462:	6878      	ldr	r0, [r7, #4]
 8013464:	f7ff ff14 	bl	8013290 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8013468:	6879      	ldr	r1, [r7, #4]
 801346a:	4816      	ldr	r0, [pc, #88]	@ (80134c4 <tcp_close_shutdown+0x1c0>)
 801346c:	f001 fb7c 	bl	8014b68 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8013470:	6878      	ldr	r0, [r7, #4]
 8013472:	f7ff feb1 	bl	80131d8 <tcp_free_listen>
      break;
 8013476:	e00f      	b.n	8013498 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013478:	6879      	ldr	r1, [r7, #4]
 801347a:	480e      	ldr	r0, [pc, #56]	@ (80134b4 <tcp_close_shutdown+0x1b0>)
 801347c:	f001 fb74 	bl	8014b68 <tcp_pcb_remove>
 8013480:	4b0d      	ldr	r3, [pc, #52]	@ (80134b8 <tcp_close_shutdown+0x1b4>)
 8013482:	2201      	movs	r2, #1
 8013484:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8013486:	6878      	ldr	r0, [r7, #4]
 8013488:	f7ff fe8a 	bl	80131a0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801348c:	e004      	b.n	8013498 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801348e:	6878      	ldr	r0, [r7, #4]
 8013490:	f000 f81a 	bl	80134c8 <tcp_close_shutdown_fin>
 8013494:	4603      	mov	r3, r0
 8013496:	e000      	b.n	801349a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8013498:	2300      	movs	r3, #0
}
 801349a:	4618      	mov	r0, r3
 801349c:	3710      	adds	r7, #16
 801349e:	46bd      	mov	sp, r7
 80134a0:	bdb0      	pop	{r4, r5, r7, pc}
 80134a2:	bf00      	nop
 80134a4:	0801fcac 	.word	0x0801fcac
 80134a8:	0801fd80 	.word	0x0801fd80
 80134ac:	0801fcf0 	.word	0x0801fcf0
 80134b0:	0801fda0 	.word	0x0801fda0
 80134b4:	2000e468 	.word	0x2000e468
 80134b8:	2000e470 	.word	0x2000e470
 80134bc:	2000e4a8 	.word	0x2000e4a8
 80134c0:	2000e460 	.word	0x2000e460
 80134c4:	2000e464 	.word	0x2000e464

080134c8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b084      	sub	sp, #16
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d106      	bne.n	80134e4 <tcp_close_shutdown_fin+0x1c>
 80134d6:	4b2e      	ldr	r3, [pc, #184]	@ (8013590 <tcp_close_shutdown_fin+0xc8>)
 80134d8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80134dc:	492d      	ldr	r1, [pc, #180]	@ (8013594 <tcp_close_shutdown_fin+0xcc>)
 80134de:	482e      	ldr	r0, [pc, #184]	@ (8013598 <tcp_close_shutdown_fin+0xd0>)
 80134e0:	f009 ff44 	bl	801d36c <iprintf>

  switch (pcb->state) {
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	7d1b      	ldrb	r3, [r3, #20]
 80134e8:	2b07      	cmp	r3, #7
 80134ea:	d020      	beq.n	801352e <tcp_close_shutdown_fin+0x66>
 80134ec:	2b07      	cmp	r3, #7
 80134ee:	dc2b      	bgt.n	8013548 <tcp_close_shutdown_fin+0x80>
 80134f0:	2b03      	cmp	r3, #3
 80134f2:	d002      	beq.n	80134fa <tcp_close_shutdown_fin+0x32>
 80134f4:	2b04      	cmp	r3, #4
 80134f6:	d00d      	beq.n	8013514 <tcp_close_shutdown_fin+0x4c>
 80134f8:	e026      	b.n	8013548 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f004 fe0c 	bl	8018118 <tcp_send_fin>
 8013500:	4603      	mov	r3, r0
 8013502:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d11f      	bne.n	801354c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	2205      	movs	r2, #5
 8013510:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013512:	e01b      	b.n	801354c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	f004 fdff 	bl	8018118 <tcp_send_fin>
 801351a:	4603      	mov	r3, r0
 801351c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801351e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d114      	bne.n	8013550 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	2205      	movs	r2, #5
 801352a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801352c:	e010      	b.n	8013550 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801352e:	6878      	ldr	r0, [r7, #4]
 8013530:	f004 fdf2 	bl	8018118 <tcp_send_fin>
 8013534:	4603      	mov	r3, r0
 8013536:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d109      	bne.n	8013554 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	2209      	movs	r2, #9
 8013544:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013546:	e005      	b.n	8013554 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8013548:	2300      	movs	r3, #0
 801354a:	e01c      	b.n	8013586 <tcp_close_shutdown_fin+0xbe>
      break;
 801354c:	bf00      	nop
 801354e:	e002      	b.n	8013556 <tcp_close_shutdown_fin+0x8e>
      break;
 8013550:	bf00      	nop
 8013552:	e000      	b.n	8013556 <tcp_close_shutdown_fin+0x8e>
      break;
 8013554:	bf00      	nop
  }

  if (err == ERR_OK) {
 8013556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d103      	bne.n	8013566 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801355e:	6878      	ldr	r0, [r7, #4]
 8013560:	f004 ff18 	bl	8018394 <tcp_output>
 8013564:	e00d      	b.n	8013582 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8013566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801356a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801356e:	d108      	bne.n	8013582 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	8b5b      	ldrh	r3, [r3, #26]
 8013574:	f043 0308 	orr.w	r3, r3, #8
 8013578:	b29a      	uxth	r2, r3
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801357e:	2300      	movs	r3, #0
 8013580:	e001      	b.n	8013586 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8013582:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013586:	4618      	mov	r0, r3
 8013588:	3710      	adds	r7, #16
 801358a:	46bd      	mov	sp, r7
 801358c:	bd80      	pop	{r7, pc}
 801358e:	bf00      	nop
 8013590:	0801fcac 	.word	0x0801fcac
 8013594:	0801fd5c 	.word	0x0801fd5c
 8013598:	0801fcf0 	.word	0x0801fcf0

0801359c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b082      	sub	sp, #8
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d109      	bne.n	80135be <tcp_close+0x22>
 80135aa:	4b0f      	ldr	r3, [pc, #60]	@ (80135e8 <tcp_close+0x4c>)
 80135ac:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80135b0:	490e      	ldr	r1, [pc, #56]	@ (80135ec <tcp_close+0x50>)
 80135b2:	480f      	ldr	r0, [pc, #60]	@ (80135f0 <tcp_close+0x54>)
 80135b4:	f009 feda 	bl	801d36c <iprintf>
 80135b8:	f06f 030f 	mvn.w	r3, #15
 80135bc:	e00f      	b.n	80135de <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	7d1b      	ldrb	r3, [r3, #20]
 80135c2:	2b01      	cmp	r3, #1
 80135c4:	d006      	beq.n	80135d4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	8b5b      	ldrh	r3, [r3, #26]
 80135ca:	f043 0310 	orr.w	r3, r3, #16
 80135ce:	b29a      	uxth	r2, r3
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80135d4:	2101      	movs	r1, #1
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	f7ff fe94 	bl	8013304 <tcp_close_shutdown>
 80135dc:	4603      	mov	r3, r0
}
 80135de:	4618      	mov	r0, r3
 80135e0:	3708      	adds	r7, #8
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}
 80135e6:	bf00      	nop
 80135e8:	0801fcac 	.word	0x0801fcac
 80135ec:	0801fdbc 	.word	0x0801fdbc
 80135f0:	0801fcf0 	.word	0x0801fcf0

080135f4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b084      	sub	sp, #16
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	60f8      	str	r0, [r7, #12]
 80135fc:	60b9      	str	r1, [r7, #8]
 80135fe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d109      	bne.n	801361a <tcp_shutdown+0x26>
 8013606:	4b26      	ldr	r3, [pc, #152]	@ (80136a0 <tcp_shutdown+0xac>)
 8013608:	f240 2207 	movw	r2, #519	@ 0x207
 801360c:	4925      	ldr	r1, [pc, #148]	@ (80136a4 <tcp_shutdown+0xb0>)
 801360e:	4826      	ldr	r0, [pc, #152]	@ (80136a8 <tcp_shutdown+0xb4>)
 8013610:	f009 feac 	bl	801d36c <iprintf>
 8013614:	f06f 030f 	mvn.w	r3, #15
 8013618:	e03d      	b.n	8013696 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	7d1b      	ldrb	r3, [r3, #20]
 801361e:	2b01      	cmp	r3, #1
 8013620:	d102      	bne.n	8013628 <tcp_shutdown+0x34>
    return ERR_CONN;
 8013622:	f06f 030a 	mvn.w	r3, #10
 8013626:	e036      	b.n	8013696 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8013628:	68bb      	ldr	r3, [r7, #8]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d01b      	beq.n	8013666 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	8b5b      	ldrh	r3, [r3, #26]
 8013632:	f043 0310 	orr.w	r3, r3, #16
 8013636:	b29a      	uxth	r2, r3
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d005      	beq.n	801364e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8013642:	2101      	movs	r1, #1
 8013644:	68f8      	ldr	r0, [r7, #12]
 8013646:	f7ff fe5d 	bl	8013304 <tcp_close_shutdown>
 801364a:	4603      	mov	r3, r0
 801364c:	e023      	b.n	8013696 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013652:	2b00      	cmp	r3, #0
 8013654:	d007      	beq.n	8013666 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801365a:	4618      	mov	r0, r3
 801365c:	f7ff faf4 	bl	8012c48 <pbuf_free>
      pcb->refused_data = NULL;
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	2200      	movs	r2, #0
 8013664:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d013      	beq.n	8013694 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	7d1b      	ldrb	r3, [r3, #20]
 8013670:	2b04      	cmp	r3, #4
 8013672:	dc02      	bgt.n	801367a <tcp_shutdown+0x86>
 8013674:	2b03      	cmp	r3, #3
 8013676:	da02      	bge.n	801367e <tcp_shutdown+0x8a>
 8013678:	e009      	b.n	801368e <tcp_shutdown+0x9a>
 801367a:	2b07      	cmp	r3, #7
 801367c:	d107      	bne.n	801368e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801367e:	68bb      	ldr	r3, [r7, #8]
 8013680:	b2db      	uxtb	r3, r3
 8013682:	4619      	mov	r1, r3
 8013684:	68f8      	ldr	r0, [r7, #12]
 8013686:	f7ff fe3d 	bl	8013304 <tcp_close_shutdown>
 801368a:	4603      	mov	r3, r0
 801368c:	e003      	b.n	8013696 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801368e:	f06f 030a 	mvn.w	r3, #10
 8013692:	e000      	b.n	8013696 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8013694:	2300      	movs	r3, #0
}
 8013696:	4618      	mov	r0, r3
 8013698:	3710      	adds	r7, #16
 801369a:	46bd      	mov	sp, r7
 801369c:	bd80      	pop	{r7, pc}
 801369e:	bf00      	nop
 80136a0:	0801fcac 	.word	0x0801fcac
 80136a4:	0801fdd4 	.word	0x0801fdd4
 80136a8:	0801fcf0 	.word	0x0801fcf0

080136ac <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b08e      	sub	sp, #56	@ 0x38
 80136b0:	af04      	add	r7, sp, #16
 80136b2:	6078      	str	r0, [r7, #4]
 80136b4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d107      	bne.n	80136cc <tcp_abandon+0x20>
 80136bc:	4b52      	ldr	r3, [pc, #328]	@ (8013808 <tcp_abandon+0x15c>)
 80136be:	f240 223d 	movw	r2, #573	@ 0x23d
 80136c2:	4952      	ldr	r1, [pc, #328]	@ (801380c <tcp_abandon+0x160>)
 80136c4:	4852      	ldr	r0, [pc, #328]	@ (8013810 <tcp_abandon+0x164>)
 80136c6:	f009 fe51 	bl	801d36c <iprintf>
 80136ca:	e099      	b.n	8013800 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	7d1b      	ldrb	r3, [r3, #20]
 80136d0:	2b01      	cmp	r3, #1
 80136d2:	d106      	bne.n	80136e2 <tcp_abandon+0x36>
 80136d4:	4b4c      	ldr	r3, [pc, #304]	@ (8013808 <tcp_abandon+0x15c>)
 80136d6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80136da:	494e      	ldr	r1, [pc, #312]	@ (8013814 <tcp_abandon+0x168>)
 80136dc:	484c      	ldr	r0, [pc, #304]	@ (8013810 <tcp_abandon+0x164>)
 80136de:	f009 fe45 	bl	801d36c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	7d1b      	ldrb	r3, [r3, #20]
 80136e6:	2b0a      	cmp	r3, #10
 80136e8:	d107      	bne.n	80136fa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80136ea:	6879      	ldr	r1, [r7, #4]
 80136ec:	484a      	ldr	r0, [pc, #296]	@ (8013818 <tcp_abandon+0x16c>)
 80136ee:	f001 fa3b 	bl	8014b68 <tcp_pcb_remove>
    tcp_free(pcb);
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f7ff fd54 	bl	80131a0 <tcp_free>
 80136f8:	e082      	b.n	8013800 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80136fa:	2300      	movs	r3, #0
 80136fc:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80136fe:	2300      	movs	r3, #0
 8013700:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013706:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801370c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013714:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	691b      	ldr	r3, [r3, #16]
 801371a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	7d1b      	ldrb	r3, [r3, #20]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d126      	bne.n	8013772 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	8adb      	ldrh	r3, [r3, #22]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d02e      	beq.n	801378a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801372c:	4b3b      	ldr	r3, [pc, #236]	@ (801381c <tcp_abandon+0x170>)
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	687a      	ldr	r2, [r7, #4]
 8013732:	429a      	cmp	r2, r3
 8013734:	d105      	bne.n	8013742 <tcp_abandon+0x96>
 8013736:	4b39      	ldr	r3, [pc, #228]	@ (801381c <tcp_abandon+0x170>)
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	68db      	ldr	r3, [r3, #12]
 801373c:	4a37      	ldr	r2, [pc, #220]	@ (801381c <tcp_abandon+0x170>)
 801373e:	6013      	str	r3, [r2, #0]
 8013740:	e013      	b.n	801376a <tcp_abandon+0xbe>
 8013742:	4b36      	ldr	r3, [pc, #216]	@ (801381c <tcp_abandon+0x170>)
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	61fb      	str	r3, [r7, #28]
 8013748:	e00c      	b.n	8013764 <tcp_abandon+0xb8>
 801374a:	69fb      	ldr	r3, [r7, #28]
 801374c:	68db      	ldr	r3, [r3, #12]
 801374e:	687a      	ldr	r2, [r7, #4]
 8013750:	429a      	cmp	r2, r3
 8013752:	d104      	bne.n	801375e <tcp_abandon+0xb2>
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	68da      	ldr	r2, [r3, #12]
 8013758:	69fb      	ldr	r3, [r7, #28]
 801375a:	60da      	str	r2, [r3, #12]
 801375c:	e005      	b.n	801376a <tcp_abandon+0xbe>
 801375e:	69fb      	ldr	r3, [r7, #28]
 8013760:	68db      	ldr	r3, [r3, #12]
 8013762:	61fb      	str	r3, [r7, #28]
 8013764:	69fb      	ldr	r3, [r7, #28]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d1ef      	bne.n	801374a <tcp_abandon+0x9e>
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2200      	movs	r2, #0
 801376e:	60da      	str	r2, [r3, #12]
 8013770:	e00b      	b.n	801378a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8013772:	683b      	ldr	r3, [r7, #0]
 8013774:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	8adb      	ldrh	r3, [r3, #22]
 801377a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801377c:	6879      	ldr	r1, [r7, #4]
 801377e:	4828      	ldr	r0, [pc, #160]	@ (8013820 <tcp_abandon+0x174>)
 8013780:	f001 f9f2 	bl	8014b68 <tcp_pcb_remove>
 8013784:	4b27      	ldr	r3, [pc, #156]	@ (8013824 <tcp_abandon+0x178>)
 8013786:	2201      	movs	r2, #1
 8013788:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801378e:	2b00      	cmp	r3, #0
 8013790:	d004      	beq.n	801379c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013796:	4618      	mov	r0, r3
 8013798:	f000 fec6 	bl	8014528 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d004      	beq.n	80137ae <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80137a8:	4618      	mov	r0, r3
 80137aa:	f000 febd 	bl	8014528 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d004      	beq.n	80137c0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80137ba:	4618      	mov	r0, r3
 80137bc:	f000 feb4 	bl	8014528 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80137c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d00e      	beq.n	80137e4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80137c6:	6879      	ldr	r1, [r7, #4]
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	3304      	adds	r3, #4
 80137cc:	687a      	ldr	r2, [r7, #4]
 80137ce:	8b12      	ldrh	r2, [r2, #24]
 80137d0:	9202      	str	r2, [sp, #8]
 80137d2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80137d4:	9201      	str	r2, [sp, #4]
 80137d6:	9300      	str	r3, [sp, #0]
 80137d8:	460b      	mov	r3, r1
 80137da:	697a      	ldr	r2, [r7, #20]
 80137dc:	69b9      	ldr	r1, [r7, #24]
 80137de:	6878      	ldr	r0, [r7, #4]
 80137e0:	f005 fb8c 	bl	8018efc <tcp_rst>
    }
    last_state = pcb->state;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	7d1b      	ldrb	r3, [r3, #20]
 80137e8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80137ea:	6878      	ldr	r0, [r7, #4]
 80137ec:	f7ff fcd8 	bl	80131a0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80137f0:	693b      	ldr	r3, [r7, #16]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d004      	beq.n	8013800 <tcp_abandon+0x154>
 80137f6:	693b      	ldr	r3, [r7, #16]
 80137f8:	f06f 010c 	mvn.w	r1, #12
 80137fc:	68f8      	ldr	r0, [r7, #12]
 80137fe:	4798      	blx	r3
  }
}
 8013800:	3728      	adds	r7, #40	@ 0x28
 8013802:	46bd      	mov	sp, r7
 8013804:	bd80      	pop	{r7, pc}
 8013806:	bf00      	nop
 8013808:	0801fcac 	.word	0x0801fcac
 801380c:	0801fdf0 	.word	0x0801fdf0
 8013810:	0801fcf0 	.word	0x0801fcf0
 8013814:	0801fe0c 	.word	0x0801fe0c
 8013818:	2000e46c 	.word	0x2000e46c
 801381c:	2000e460 	.word	0x2000e460
 8013820:	2000e468 	.word	0x2000e468
 8013824:	2000e470 	.word	0x2000e470

08013828 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b082      	sub	sp, #8
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8013830:	2101      	movs	r1, #1
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	f7ff ff3a 	bl	80136ac <tcp_abandon>
}
 8013838:	bf00      	nop
 801383a:	3708      	adds	r7, #8
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}

08013840 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013840:	b580      	push	{r7, lr}
 8013842:	b088      	sub	sp, #32
 8013844:	af00      	add	r7, sp, #0
 8013846:	60f8      	str	r0, [r7, #12]
 8013848:	60b9      	str	r1, [r7, #8]
 801384a:	4613      	mov	r3, r2
 801384c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801384e:	2304      	movs	r3, #4
 8013850:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d101      	bne.n	801385c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8013858:	4b3e      	ldr	r3, [pc, #248]	@ (8013954 <tcp_bind+0x114>)
 801385a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d109      	bne.n	8013876 <tcp_bind+0x36>
 8013862:	4b3d      	ldr	r3, [pc, #244]	@ (8013958 <tcp_bind+0x118>)
 8013864:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8013868:	493c      	ldr	r1, [pc, #240]	@ (801395c <tcp_bind+0x11c>)
 801386a:	483d      	ldr	r0, [pc, #244]	@ (8013960 <tcp_bind+0x120>)
 801386c:	f009 fd7e 	bl	801d36c <iprintf>
 8013870:	f06f 030f 	mvn.w	r3, #15
 8013874:	e06a      	b.n	801394c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	7d1b      	ldrb	r3, [r3, #20]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d009      	beq.n	8013892 <tcp_bind+0x52>
 801387e:	4b36      	ldr	r3, [pc, #216]	@ (8013958 <tcp_bind+0x118>)
 8013880:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8013884:	4937      	ldr	r1, [pc, #220]	@ (8013964 <tcp_bind+0x124>)
 8013886:	4836      	ldr	r0, [pc, #216]	@ (8013960 <tcp_bind+0x120>)
 8013888:	f009 fd70 	bl	801d36c <iprintf>
 801388c:	f06f 0305 	mvn.w	r3, #5
 8013890:	e05c      	b.n	801394c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8013892:	88fb      	ldrh	r3, [r7, #6]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d109      	bne.n	80138ac <tcp_bind+0x6c>
    port = tcp_new_port();
 8013898:	f000 f9de 	bl	8013c58 <tcp_new_port>
 801389c:	4603      	mov	r3, r0
 801389e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80138a0:	88fb      	ldrh	r3, [r7, #6]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d135      	bne.n	8013912 <tcp_bind+0xd2>
      return ERR_BUF;
 80138a6:	f06f 0301 	mvn.w	r3, #1
 80138aa:	e04f      	b.n	801394c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80138ac:	2300      	movs	r3, #0
 80138ae:	61fb      	str	r3, [r7, #28]
 80138b0:	e02b      	b.n	801390a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80138b2:	4a2d      	ldr	r2, [pc, #180]	@ (8013968 <tcp_bind+0x128>)
 80138b4:	69fb      	ldr	r3, [r7, #28]
 80138b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	61bb      	str	r3, [r7, #24]
 80138be:	e01e      	b.n	80138fe <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80138c0:	69bb      	ldr	r3, [r7, #24]
 80138c2:	8adb      	ldrh	r3, [r3, #22]
 80138c4:	88fa      	ldrh	r2, [r7, #6]
 80138c6:	429a      	cmp	r2, r3
 80138c8:	d116      	bne.n	80138f8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80138ca:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d010      	beq.n	80138f2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80138d0:	69bb      	ldr	r3, [r7, #24]
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d00c      	beq.n	80138f2 <tcp_bind+0xb2>
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d009      	beq.n	80138f2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80138de:	68bb      	ldr	r3, [r7, #8]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d005      	beq.n	80138f2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80138e6:	69bb      	ldr	r3, [r7, #24]
 80138e8:	681a      	ldr	r2, [r3, #0]
 80138ea:	68bb      	ldr	r3, [r7, #8]
 80138ec:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80138ee:	429a      	cmp	r2, r3
 80138f0:	d102      	bne.n	80138f8 <tcp_bind+0xb8>
              return ERR_USE;
 80138f2:	f06f 0307 	mvn.w	r3, #7
 80138f6:	e029      	b.n	801394c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80138f8:	69bb      	ldr	r3, [r7, #24]
 80138fa:	68db      	ldr	r3, [r3, #12]
 80138fc:	61bb      	str	r3, [r7, #24]
 80138fe:	69bb      	ldr	r3, [r7, #24]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d1dd      	bne.n	80138c0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8013904:	69fb      	ldr	r3, [r7, #28]
 8013906:	3301      	adds	r3, #1
 8013908:	61fb      	str	r3, [r7, #28]
 801390a:	69fa      	ldr	r2, [r7, #28]
 801390c:	697b      	ldr	r3, [r7, #20]
 801390e:	429a      	cmp	r2, r3
 8013910:	dbcf      	blt.n	80138b2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8013912:	68bb      	ldr	r3, [r7, #8]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d00c      	beq.n	8013932 <tcp_bind+0xf2>
 8013918:	68bb      	ldr	r3, [r7, #8]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d008      	beq.n	8013932 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d002      	beq.n	801392c <tcp_bind+0xec>
 8013926:	68bb      	ldr	r3, [r7, #8]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	e000      	b.n	801392e <tcp_bind+0xee>
 801392c:	2300      	movs	r3, #0
 801392e:	68fa      	ldr	r2, [r7, #12]
 8013930:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	88fa      	ldrh	r2, [r7, #6]
 8013936:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8013938:	4b0c      	ldr	r3, [pc, #48]	@ (801396c <tcp_bind+0x12c>)
 801393a:	681a      	ldr	r2, [r3, #0]
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	60da      	str	r2, [r3, #12]
 8013940:	4a0a      	ldr	r2, [pc, #40]	@ (801396c <tcp_bind+0x12c>)
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	6013      	str	r3, [r2, #0]
 8013946:	f005 fc9b 	bl	8019280 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801394a:	2300      	movs	r3, #0
}
 801394c:	4618      	mov	r0, r3
 801394e:	3720      	adds	r7, #32
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}
 8013954:	08032518 	.word	0x08032518
 8013958:	0801fcac 	.word	0x0801fcac
 801395c:	0801fe40 	.word	0x0801fe40
 8013960:	0801fcf0 	.word	0x0801fcf0
 8013964:	0801fe58 	.word	0x0801fe58
 8013968:	080324f0 	.word	0x080324f0
 801396c:	2000e460 	.word	0x2000e460

08013970 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8013970:	b580      	push	{r7, lr}
 8013972:	b084      	sub	sp, #16
 8013974:	af00      	add	r7, sp, #0
 8013976:	60f8      	str	r0, [r7, #12]
 8013978:	60b9      	str	r1, [r7, #8]
 801397a:	4613      	mov	r3, r2
 801397c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801397e:	68bb      	ldr	r3, [r7, #8]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d106      	bne.n	8013992 <tcp_accept_null+0x22>
 8013984:	4b07      	ldr	r3, [pc, #28]	@ (80139a4 <tcp_accept_null+0x34>)
 8013986:	f240 320f 	movw	r2, #783	@ 0x30f
 801398a:	4907      	ldr	r1, [pc, #28]	@ (80139a8 <tcp_accept_null+0x38>)
 801398c:	4807      	ldr	r0, [pc, #28]	@ (80139ac <tcp_accept_null+0x3c>)
 801398e:	f009 fced 	bl	801d36c <iprintf>

  tcp_abort(pcb);
 8013992:	68b8      	ldr	r0, [r7, #8]
 8013994:	f7ff ff48 	bl	8013828 <tcp_abort>

  return ERR_ABRT;
 8013998:	f06f 030c 	mvn.w	r3, #12
}
 801399c:	4618      	mov	r0, r3
 801399e:	3710      	adds	r7, #16
 80139a0:	46bd      	mov	sp, r7
 80139a2:	bd80      	pop	{r7, pc}
 80139a4:	0801fcac 	.word	0x0801fcac
 80139a8:	0801fe80 	.word	0x0801fe80
 80139ac:	0801fcf0 	.word	0x0801fcf0

080139b0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b088      	sub	sp, #32
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	60f8      	str	r0, [r7, #12]
 80139b8:	460b      	mov	r3, r1
 80139ba:	607a      	str	r2, [r7, #4]
 80139bc:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80139be:	2300      	movs	r3, #0
 80139c0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d109      	bne.n	80139dc <tcp_listen_with_backlog_and_err+0x2c>
 80139c8:	4b47      	ldr	r3, [pc, #284]	@ (8013ae8 <tcp_listen_with_backlog_and_err+0x138>)
 80139ca:	f240 3259 	movw	r2, #857	@ 0x359
 80139ce:	4947      	ldr	r1, [pc, #284]	@ (8013aec <tcp_listen_with_backlog_and_err+0x13c>)
 80139d0:	4847      	ldr	r0, [pc, #284]	@ (8013af0 <tcp_listen_with_backlog_and_err+0x140>)
 80139d2:	f009 fccb 	bl	801d36c <iprintf>
 80139d6:	23f0      	movs	r3, #240	@ 0xf0
 80139d8:	76fb      	strb	r3, [r7, #27]
 80139da:	e079      	b.n	8013ad0 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	7d1b      	ldrb	r3, [r3, #20]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d009      	beq.n	80139f8 <tcp_listen_with_backlog_and_err+0x48>
 80139e4:	4b40      	ldr	r3, [pc, #256]	@ (8013ae8 <tcp_listen_with_backlog_and_err+0x138>)
 80139e6:	f240 325a 	movw	r2, #858	@ 0x35a
 80139ea:	4942      	ldr	r1, [pc, #264]	@ (8013af4 <tcp_listen_with_backlog_and_err+0x144>)
 80139ec:	4840      	ldr	r0, [pc, #256]	@ (8013af0 <tcp_listen_with_backlog_and_err+0x140>)
 80139ee:	f009 fcbd 	bl	801d36c <iprintf>
 80139f2:	23f1      	movs	r3, #241	@ 0xf1
 80139f4:	76fb      	strb	r3, [r7, #27]
 80139f6:	e06b      	b.n	8013ad0 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	7d1b      	ldrb	r3, [r3, #20]
 80139fc:	2b01      	cmp	r3, #1
 80139fe:	d104      	bne.n	8013a0a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8013a04:	23f7      	movs	r3, #247	@ 0xf7
 8013a06:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013a08:	e062      	b.n	8013ad0 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8013a0a:	2002      	movs	r0, #2
 8013a0c:	f7fe fa02 	bl	8011e14 <memp_malloc>
 8013a10:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8013a12:	69fb      	ldr	r3, [r7, #28]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d102      	bne.n	8013a1e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8013a18:	23ff      	movs	r3, #255	@ 0xff
 8013a1a:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013a1c:	e058      	b.n	8013ad0 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	691a      	ldr	r2, [r3, #16]
 8013a22:	69fb      	ldr	r3, [r7, #28]
 8013a24:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	8ada      	ldrh	r2, [r3, #22]
 8013a2a:	69fb      	ldr	r3, [r7, #28]
 8013a2c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8013a2e:	69fb      	ldr	r3, [r7, #28]
 8013a30:	2201      	movs	r2, #1
 8013a32:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	7d5a      	ldrb	r2, [r3, #21]
 8013a38:	69fb      	ldr	r3, [r7, #28]
 8013a3a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	7a5a      	ldrb	r2, [r3, #9]
 8013a40:	69fb      	ldr	r3, [r7, #28]
 8013a42:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8013a44:	69fb      	ldr	r3, [r7, #28]
 8013a46:	2200      	movs	r2, #0
 8013a48:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	7ada      	ldrb	r2, [r3, #11]
 8013a4e:	69fb      	ldr	r3, [r7, #28]
 8013a50:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	7a9a      	ldrb	r2, [r3, #10]
 8013a56:	69fb      	ldr	r3, [r7, #28]
 8013a58:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	681a      	ldr	r2, [r3, #0]
 8013a5e:	69fb      	ldr	r3, [r7, #28]
 8013a60:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	8adb      	ldrh	r3, [r3, #22]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d021      	beq.n	8013aae <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8013a6a:	4b23      	ldr	r3, [pc, #140]	@ (8013af8 <tcp_listen_with_backlog_and_err+0x148>)
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	68fa      	ldr	r2, [r7, #12]
 8013a70:	429a      	cmp	r2, r3
 8013a72:	d105      	bne.n	8013a80 <tcp_listen_with_backlog_and_err+0xd0>
 8013a74:	4b20      	ldr	r3, [pc, #128]	@ (8013af8 <tcp_listen_with_backlog_and_err+0x148>)
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	68db      	ldr	r3, [r3, #12]
 8013a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8013af8 <tcp_listen_with_backlog_and_err+0x148>)
 8013a7c:	6013      	str	r3, [r2, #0]
 8013a7e:	e013      	b.n	8013aa8 <tcp_listen_with_backlog_and_err+0xf8>
 8013a80:	4b1d      	ldr	r3, [pc, #116]	@ (8013af8 <tcp_listen_with_backlog_and_err+0x148>)
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	617b      	str	r3, [r7, #20]
 8013a86:	e00c      	b.n	8013aa2 <tcp_listen_with_backlog_and_err+0xf2>
 8013a88:	697b      	ldr	r3, [r7, #20]
 8013a8a:	68db      	ldr	r3, [r3, #12]
 8013a8c:	68fa      	ldr	r2, [r7, #12]
 8013a8e:	429a      	cmp	r2, r3
 8013a90:	d104      	bne.n	8013a9c <tcp_listen_with_backlog_and_err+0xec>
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	68da      	ldr	r2, [r3, #12]
 8013a96:	697b      	ldr	r3, [r7, #20]
 8013a98:	60da      	str	r2, [r3, #12]
 8013a9a:	e005      	b.n	8013aa8 <tcp_listen_with_backlog_and_err+0xf8>
 8013a9c:	697b      	ldr	r3, [r7, #20]
 8013a9e:	68db      	ldr	r3, [r3, #12]
 8013aa0:	617b      	str	r3, [r7, #20]
 8013aa2:	697b      	ldr	r3, [r7, #20]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d1ef      	bne.n	8013a88 <tcp_listen_with_backlog_and_err+0xd8>
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	2200      	movs	r2, #0
 8013aac:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8013aae:	68f8      	ldr	r0, [r7, #12]
 8013ab0:	f7ff fb76 	bl	80131a0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8013ab4:	69fb      	ldr	r3, [r7, #28]
 8013ab6:	4a11      	ldr	r2, [pc, #68]	@ (8013afc <tcp_listen_with_backlog_and_err+0x14c>)
 8013ab8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8013aba:	4b11      	ldr	r3, [pc, #68]	@ (8013b00 <tcp_listen_with_backlog_and_err+0x150>)
 8013abc:	681a      	ldr	r2, [r3, #0]
 8013abe:	69fb      	ldr	r3, [r7, #28]
 8013ac0:	60da      	str	r2, [r3, #12]
 8013ac2:	4a0f      	ldr	r2, [pc, #60]	@ (8013b00 <tcp_listen_with_backlog_and_err+0x150>)
 8013ac4:	69fb      	ldr	r3, [r7, #28]
 8013ac6:	6013      	str	r3, [r2, #0]
 8013ac8:	f005 fbda 	bl	8019280 <tcp_timer_needed>
  res = ERR_OK;
 8013acc:	2300      	movs	r3, #0
 8013ace:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d002      	beq.n	8013adc <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	7efa      	ldrb	r2, [r7, #27]
 8013ada:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8013adc:	69fb      	ldr	r3, [r7, #28]
}
 8013ade:	4618      	mov	r0, r3
 8013ae0:	3720      	adds	r7, #32
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	bd80      	pop	{r7, pc}
 8013ae6:	bf00      	nop
 8013ae8:	0801fcac 	.word	0x0801fcac
 8013aec:	0801fea0 	.word	0x0801fea0
 8013af0:	0801fcf0 	.word	0x0801fcf0
 8013af4:	0801fed0 	.word	0x0801fed0
 8013af8:	2000e460 	.word	0x2000e460
 8013afc:	08013971 	.word	0x08013971
 8013b00:	2000e464 	.word	0x2000e464

08013b04 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b084      	sub	sp, #16
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d106      	bne.n	8013b20 <tcp_update_rcv_ann_wnd+0x1c>
 8013b12:	4b25      	ldr	r3, [pc, #148]	@ (8013ba8 <tcp_update_rcv_ann_wnd+0xa4>)
 8013b14:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8013b18:	4924      	ldr	r1, [pc, #144]	@ (8013bac <tcp_update_rcv_ann_wnd+0xa8>)
 8013b1a:	4825      	ldr	r0, [pc, #148]	@ (8013bb0 <tcp_update_rcv_ann_wnd+0xac>)
 8013b1c:	f009 fc26 	bl	801d36c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b24:	687a      	ldr	r2, [r7, #4]
 8013b26:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8013b28:	4413      	add	r3, r2
 8013b2a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b30:	687a      	ldr	r2, [r7, #4]
 8013b32:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8013b34:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8013b38:	bf28      	it	cs
 8013b3a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8013b3e:	b292      	uxth	r2, r2
 8013b40:	4413      	add	r3, r2
 8013b42:	68fa      	ldr	r2, [r7, #12]
 8013b44:	1ad3      	subs	r3, r2, r3
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	db08      	blt.n	8013b5c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b56:	68fa      	ldr	r2, [r7, #12]
 8013b58:	1ad3      	subs	r3, r2, r3
 8013b5a:	e020      	b.n	8013b9e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b64:	1ad3      	subs	r3, r2, r3
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	dd03      	ble.n	8013b72 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013b70:	e014      	b.n	8013b9c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b7a:	1ad3      	subs	r3, r2, r3
 8013b7c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8013b7e:	68bb      	ldr	r3, [r7, #8]
 8013b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013b84:	d306      	bcc.n	8013b94 <tcp_update_rcv_ann_wnd+0x90>
 8013b86:	4b08      	ldr	r3, [pc, #32]	@ (8013ba8 <tcp_update_rcv_ann_wnd+0xa4>)
 8013b88:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8013b8c:	4909      	ldr	r1, [pc, #36]	@ (8013bb4 <tcp_update_rcv_ann_wnd+0xb0>)
 8013b8e:	4808      	ldr	r0, [pc, #32]	@ (8013bb0 <tcp_update_rcv_ann_wnd+0xac>)
 8013b90:	f009 fbec 	bl	801d36c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013b94:	68bb      	ldr	r3, [r7, #8]
 8013b96:	b29a      	uxth	r2, r3
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8013b9c:	2300      	movs	r3, #0
  }
}
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	3710      	adds	r7, #16
 8013ba2:	46bd      	mov	sp, r7
 8013ba4:	bd80      	pop	{r7, pc}
 8013ba6:	bf00      	nop
 8013ba8:	0801fcac 	.word	0x0801fcac
 8013bac:	0801ff08 	.word	0x0801ff08
 8013bb0:	0801fcf0 	.word	0x0801fcf0
 8013bb4:	0801ff2c 	.word	0x0801ff2c

08013bb8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b084      	sub	sp, #16
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
 8013bc0:	460b      	mov	r3, r1
 8013bc2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d107      	bne.n	8013bda <tcp_recved+0x22>
 8013bca:	4b1f      	ldr	r3, [pc, #124]	@ (8013c48 <tcp_recved+0x90>)
 8013bcc:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8013bd0:	491e      	ldr	r1, [pc, #120]	@ (8013c4c <tcp_recved+0x94>)
 8013bd2:	481f      	ldr	r0, [pc, #124]	@ (8013c50 <tcp_recved+0x98>)
 8013bd4:	f009 fbca 	bl	801d36c <iprintf>
 8013bd8:	e032      	b.n	8013c40 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	7d1b      	ldrb	r3, [r3, #20]
 8013bde:	2b01      	cmp	r3, #1
 8013be0:	d106      	bne.n	8013bf0 <tcp_recved+0x38>
 8013be2:	4b19      	ldr	r3, [pc, #100]	@ (8013c48 <tcp_recved+0x90>)
 8013be4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8013be8:	491a      	ldr	r1, [pc, #104]	@ (8013c54 <tcp_recved+0x9c>)
 8013bea:	4819      	ldr	r0, [pc, #100]	@ (8013c50 <tcp_recved+0x98>)
 8013bec:	f009 fbbe 	bl	801d36c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013bf4:	887b      	ldrh	r3, [r7, #2]
 8013bf6:	4413      	add	r3, r2
 8013bf8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8013bfa:	89fb      	ldrh	r3, [r7, #14]
 8013bfc:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013c00:	d804      	bhi.n	8013c0c <tcp_recved+0x54>
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c06:	89fa      	ldrh	r2, [r7, #14]
 8013c08:	429a      	cmp	r2, r3
 8013c0a:	d204      	bcs.n	8013c16 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8013c12:	851a      	strh	r2, [r3, #40]	@ 0x28
 8013c14:	e002      	b.n	8013c1c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	89fa      	ldrh	r2, [r7, #14]
 8013c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013c1c:	6878      	ldr	r0, [r7, #4]
 8013c1e:	f7ff ff71 	bl	8013b04 <tcp_update_rcv_ann_wnd>
 8013c22:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8013c2a:	d309      	bcc.n	8013c40 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	8b5b      	ldrh	r3, [r3, #26]
 8013c30:	f043 0302 	orr.w	r3, r3, #2
 8013c34:	b29a      	uxth	r2, r3
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013c3a:	6878      	ldr	r0, [r7, #4]
 8013c3c:	f004 fbaa 	bl	8018394 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8013c40:	3710      	adds	r7, #16
 8013c42:	46bd      	mov	sp, r7
 8013c44:	bd80      	pop	{r7, pc}
 8013c46:	bf00      	nop
 8013c48:	0801fcac 	.word	0x0801fcac
 8013c4c:	0801ff48 	.word	0x0801ff48
 8013c50:	0801fcf0 	.word	0x0801fcf0
 8013c54:	0801ff60 	.word	0x0801ff60

08013c58 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8013c58:	b480      	push	{r7}
 8013c5a:	b083      	sub	sp, #12
 8013c5c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8013c5e:	2300      	movs	r3, #0
 8013c60:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8013c62:	4b1e      	ldr	r3, [pc, #120]	@ (8013cdc <tcp_new_port+0x84>)
 8013c64:	881b      	ldrh	r3, [r3, #0]
 8013c66:	3301      	adds	r3, #1
 8013c68:	b29a      	uxth	r2, r3
 8013c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8013cdc <tcp_new_port+0x84>)
 8013c6c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8013c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8013cdc <tcp_new_port+0x84>)
 8013c70:	881b      	ldrh	r3, [r3, #0]
 8013c72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013c76:	4293      	cmp	r3, r2
 8013c78:	d103      	bne.n	8013c82 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8013c7a:	4b18      	ldr	r3, [pc, #96]	@ (8013cdc <tcp_new_port+0x84>)
 8013c7c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013c80:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013c82:	2300      	movs	r3, #0
 8013c84:	71fb      	strb	r3, [r7, #7]
 8013c86:	e01e      	b.n	8013cc6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013c88:	79fb      	ldrb	r3, [r7, #7]
 8013c8a:	4a15      	ldr	r2, [pc, #84]	@ (8013ce0 <tcp_new_port+0x88>)
 8013c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	603b      	str	r3, [r7, #0]
 8013c94:	e011      	b.n	8013cba <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	8ada      	ldrh	r2, [r3, #22]
 8013c9a:	4b10      	ldr	r3, [pc, #64]	@ (8013cdc <tcp_new_port+0x84>)
 8013c9c:	881b      	ldrh	r3, [r3, #0]
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d108      	bne.n	8013cb4 <tcp_new_port+0x5c>
        n++;
 8013ca2:	88bb      	ldrh	r3, [r7, #4]
 8013ca4:	3301      	adds	r3, #1
 8013ca6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8013ca8:	88bb      	ldrh	r3, [r7, #4]
 8013caa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013cae:	d3d8      	bcc.n	8013c62 <tcp_new_port+0xa>
          return 0;
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	e00d      	b.n	8013cd0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013cb4:	683b      	ldr	r3, [r7, #0]
 8013cb6:	68db      	ldr	r3, [r3, #12]
 8013cb8:	603b      	str	r3, [r7, #0]
 8013cba:	683b      	ldr	r3, [r7, #0]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d1ea      	bne.n	8013c96 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013cc0:	79fb      	ldrb	r3, [r7, #7]
 8013cc2:	3301      	adds	r3, #1
 8013cc4:	71fb      	strb	r3, [r7, #7]
 8013cc6:	79fb      	ldrb	r3, [r7, #7]
 8013cc8:	2b03      	cmp	r3, #3
 8013cca:	d9dd      	bls.n	8013c88 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8013ccc:	4b03      	ldr	r3, [pc, #12]	@ (8013cdc <tcp_new_port+0x84>)
 8013cce:	881b      	ldrh	r3, [r3, #0]
}
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	370c      	adds	r7, #12
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cda:	4770      	bx	lr
 8013cdc:	200000b0 	.word	0x200000b0
 8013ce0:	080324f0 	.word	0x080324f0

08013ce4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8013ce4:	b5b0      	push	{r4, r5, r7, lr}
 8013ce6:	b090      	sub	sp, #64	@ 0x40
 8013ce8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8013cea:	2300      	movs	r3, #0
 8013cec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8013cf0:	4b95      	ldr	r3, [pc, #596]	@ (8013f48 <tcp_slowtmr+0x264>)
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	3301      	adds	r3, #1
 8013cf6:	4a94      	ldr	r2, [pc, #592]	@ (8013f48 <tcp_slowtmr+0x264>)
 8013cf8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8013cfa:	4b94      	ldr	r3, [pc, #592]	@ (8013f4c <tcp_slowtmr+0x268>)
 8013cfc:	781b      	ldrb	r3, [r3, #0]
 8013cfe:	3301      	adds	r3, #1
 8013d00:	b2da      	uxtb	r2, r3
 8013d02:	4b92      	ldr	r3, [pc, #584]	@ (8013f4c <tcp_slowtmr+0x268>)
 8013d04:	701a      	strb	r2, [r3, #0]
 8013d06:	e000      	b.n	8013d0a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8013d08:	bf00      	nop
  prev = NULL;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8013d0e:	4b90      	ldr	r3, [pc, #576]	@ (8013f50 <tcp_slowtmr+0x26c>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013d14:	e29d      	b.n	8014252 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d18:	7d1b      	ldrb	r3, [r3, #20]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d106      	bne.n	8013d2c <tcp_slowtmr+0x48>
 8013d1e:	4b8d      	ldr	r3, [pc, #564]	@ (8013f54 <tcp_slowtmr+0x270>)
 8013d20:	f240 42be 	movw	r2, #1214	@ 0x4be
 8013d24:	498c      	ldr	r1, [pc, #560]	@ (8013f58 <tcp_slowtmr+0x274>)
 8013d26:	488d      	ldr	r0, [pc, #564]	@ (8013f5c <tcp_slowtmr+0x278>)
 8013d28:	f009 fb20 	bl	801d36c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d2e:	7d1b      	ldrb	r3, [r3, #20]
 8013d30:	2b01      	cmp	r3, #1
 8013d32:	d106      	bne.n	8013d42 <tcp_slowtmr+0x5e>
 8013d34:	4b87      	ldr	r3, [pc, #540]	@ (8013f54 <tcp_slowtmr+0x270>)
 8013d36:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8013d3a:	4989      	ldr	r1, [pc, #548]	@ (8013f60 <tcp_slowtmr+0x27c>)
 8013d3c:	4887      	ldr	r0, [pc, #540]	@ (8013f5c <tcp_slowtmr+0x278>)
 8013d3e:	f009 fb15 	bl	801d36c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8013d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d44:	7d1b      	ldrb	r3, [r3, #20]
 8013d46:	2b0a      	cmp	r3, #10
 8013d48:	d106      	bne.n	8013d58 <tcp_slowtmr+0x74>
 8013d4a:	4b82      	ldr	r3, [pc, #520]	@ (8013f54 <tcp_slowtmr+0x270>)
 8013d4c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8013d50:	4984      	ldr	r1, [pc, #528]	@ (8013f64 <tcp_slowtmr+0x280>)
 8013d52:	4882      	ldr	r0, [pc, #520]	@ (8013f5c <tcp_slowtmr+0x278>)
 8013d54:	f009 fb0a 	bl	801d36c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d5a:	7f9a      	ldrb	r2, [r3, #30]
 8013d5c:	4b7b      	ldr	r3, [pc, #492]	@ (8013f4c <tcp_slowtmr+0x268>)
 8013d5e:	781b      	ldrb	r3, [r3, #0]
 8013d60:	429a      	cmp	r2, r3
 8013d62:	d105      	bne.n	8013d70 <tcp_slowtmr+0x8c>
      prev = pcb;
 8013d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d66:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d6a:	68db      	ldr	r3, [r3, #12]
 8013d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8013d6e:	e270      	b.n	8014252 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8013d70:	4b76      	ldr	r3, [pc, #472]	@ (8013f4c <tcp_slowtmr+0x268>)
 8013d72:	781a      	ldrb	r2, [r3, #0]
 8013d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d76:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8013d78:	2300      	movs	r3, #0
 8013d7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8013d7e:	2300      	movs	r3, #0
 8013d80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8013d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d86:	7d1b      	ldrb	r3, [r3, #20]
 8013d88:	2b02      	cmp	r3, #2
 8013d8a:	d10a      	bne.n	8013da2 <tcp_slowtmr+0xbe>
 8013d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013d92:	2b05      	cmp	r3, #5
 8013d94:	d905      	bls.n	8013da2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8013d96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013d9a:	3301      	adds	r3, #1
 8013d9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013da0:	e11e      	b.n	8013fe0 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8013da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013da4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013da8:	2b0b      	cmp	r3, #11
 8013daa:	d905      	bls.n	8013db8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8013dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013db0:	3301      	adds	r3, #1
 8013db2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013db6:	e113      	b.n	8013fe0 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8013db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dba:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d075      	beq.n	8013eae <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8013dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d006      	beq.n	8013dd8 <tcp_slowtmr+0xf4>
 8013dca:	4b62      	ldr	r3, [pc, #392]	@ (8013f54 <tcp_slowtmr+0x270>)
 8013dcc:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8013dd0:	4965      	ldr	r1, [pc, #404]	@ (8013f68 <tcp_slowtmr+0x284>)
 8013dd2:	4862      	ldr	r0, [pc, #392]	@ (8013f5c <tcp_slowtmr+0x278>)
 8013dd4:	f009 faca 	bl	801d36c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d106      	bne.n	8013dee <tcp_slowtmr+0x10a>
 8013de0:	4b5c      	ldr	r3, [pc, #368]	@ (8013f54 <tcp_slowtmr+0x270>)
 8013de2:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8013de6:	4961      	ldr	r1, [pc, #388]	@ (8013f6c <tcp_slowtmr+0x288>)
 8013de8:	485c      	ldr	r0, [pc, #368]	@ (8013f5c <tcp_slowtmr+0x278>)
 8013dea:	f009 fabf 	bl	801d36c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8013dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013df0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013df4:	2b0b      	cmp	r3, #11
 8013df6:	d905      	bls.n	8013e04 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8013df8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013dfc:	3301      	adds	r3, #1
 8013dfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013e02:	e0ed      	b.n	8013fe0 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e06:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013e0a:	3b01      	subs	r3, #1
 8013e0c:	4a58      	ldr	r2, [pc, #352]	@ (8013f70 <tcp_slowtmr+0x28c>)
 8013e0e:	5cd3      	ldrb	r3, [r2, r3]
 8013e10:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8013e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e14:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013e18:	7c7a      	ldrb	r2, [r7, #17]
 8013e1a:	429a      	cmp	r2, r3
 8013e1c:	d907      	bls.n	8013e2e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8013e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e20:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013e24:	3301      	adds	r3, #1
 8013e26:	b2da      	uxtb	r2, r3
 8013e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e2a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8013e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e30:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013e34:	7c7a      	ldrb	r2, [r7, #17]
 8013e36:	429a      	cmp	r2, r3
 8013e38:	f200 80d2 	bhi.w	8013fe0 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8013e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d108      	bne.n	8013e5c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013e4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013e4c:	f005 f94a 	bl	80190e4 <tcp_zero_window_probe>
 8013e50:	4603      	mov	r3, r0
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d014      	beq.n	8013e80 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8013e56:	2300      	movs	r3, #0
 8013e58:	623b      	str	r3, [r7, #32]
 8013e5a:	e011      	b.n	8013e80 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013e62:	4619      	mov	r1, r3
 8013e64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013e66:	f004 f80f 	bl	8017e88 <tcp_split_unsent_seg>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d107      	bne.n	8013e80 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8013e70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013e72:	f004 fa8f 	bl	8018394 <tcp_output>
 8013e76:	4603      	mov	r3, r0
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d101      	bne.n	8013e80 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8013e80:	6a3b      	ldr	r3, [r7, #32]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	f000 80ac 	beq.w	8013fe0 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8013e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8013e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e92:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013e96:	2b06      	cmp	r3, #6
 8013e98:	f200 80a2 	bhi.w	8013fe0 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8013e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e9e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013ea2:	3301      	adds	r3, #1
 8013ea4:	b2da      	uxtb	r2, r3
 8013ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ea8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8013eac:	e098      	b.n	8013fe0 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8013eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013eb0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	db0f      	blt.n	8013ed8 <tcp_slowtmr+0x1f4>
 8013eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013eba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013ebe:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013ec2:	4293      	cmp	r3, r2
 8013ec4:	d008      	beq.n	8013ed8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8013ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ec8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013ecc:	b29b      	uxth	r3, r3
 8013ece:	3301      	adds	r3, #1
 8013ed0:	b29b      	uxth	r3, r3
 8013ed2:	b21a      	sxth	r2, r3
 8013ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ed6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8013ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013eda:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8013ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ee0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8013ee4:	429a      	cmp	r2, r3
 8013ee6:	db7b      	blt.n	8013fe0 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8013ee8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013eea:	f004 fd47 	bl	801897c <tcp_rexmit_rto_prepare>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d007      	beq.n	8013f04 <tcp_slowtmr+0x220>
 8013ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d171      	bne.n	8013fe0 <tcp_slowtmr+0x2fc>
 8013efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d06d      	beq.n	8013fe0 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8013f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f06:	7d1b      	ldrb	r3, [r3, #20]
 8013f08:	2b02      	cmp	r3, #2
 8013f0a:	d03a      	beq.n	8013f82 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8013f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013f12:	2b0c      	cmp	r3, #12
 8013f14:	bf28      	it	cs
 8013f16:	230c      	movcs	r3, #12
 8013f18:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8013f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f1c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013f20:	10db      	asrs	r3, r3, #3
 8013f22:	b21b      	sxth	r3, r3
 8013f24:	461a      	mov	r2, r3
 8013f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f28:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013f2c:	4413      	add	r3, r2
 8013f2e:	7efa      	ldrb	r2, [r7, #27]
 8013f30:	4910      	ldr	r1, [pc, #64]	@ (8013f74 <tcp_slowtmr+0x290>)
 8013f32:	5c8a      	ldrb	r2, [r1, r2]
 8013f34:	4093      	lsls	r3, r2
 8013f36:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013f38:	697b      	ldr	r3, [r7, #20]
 8013f3a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8013f3e:	4293      	cmp	r3, r2
 8013f40:	dc1a      	bgt.n	8013f78 <tcp_slowtmr+0x294>
 8013f42:	697b      	ldr	r3, [r7, #20]
 8013f44:	b21a      	sxth	r2, r3
 8013f46:	e019      	b.n	8013f7c <tcp_slowtmr+0x298>
 8013f48:	2000e45c 	.word	0x2000e45c
 8013f4c:	2000e472 	.word	0x2000e472
 8013f50:	2000e468 	.word	0x2000e468
 8013f54:	0801fcac 	.word	0x0801fcac
 8013f58:	0801fff0 	.word	0x0801fff0
 8013f5c:	0801fcf0 	.word	0x0801fcf0
 8013f60:	0802001c 	.word	0x0802001c
 8013f64:	08020048 	.word	0x08020048
 8013f68:	08020078 	.word	0x08020078
 8013f6c:	080200ac 	.word	0x080200ac
 8013f70:	080324e8 	.word	0x080324e8
 8013f74:	080324d8 	.word	0x080324d8
 8013f78:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f7e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8013f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f84:	2200      	movs	r2, #0
 8013f86:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f90:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013f94:	4293      	cmp	r3, r2
 8013f96:	bf28      	it	cs
 8013f98:	4613      	movcs	r3, r2
 8013f9a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013f9c:	8a7b      	ldrh	r3, [r7, #18]
 8013f9e:	085b      	lsrs	r3, r3, #1
 8013fa0:	b29a      	uxth	r2, r3
 8013fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fa4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8013fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013faa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8013fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fb0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013fb2:	005b      	lsls	r3, r3, #1
 8013fb4:	b29b      	uxth	r3, r3
 8013fb6:	429a      	cmp	r2, r3
 8013fb8:	d206      	bcs.n	8013fc8 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8013fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013fbe:	005b      	lsls	r3, r3, #1
 8013fc0:	b29a      	uxth	r2, r3
 8013fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fc4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8013fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fca:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8013fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fce:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8013fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8013fda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013fdc:	f004 fd3e 	bl	8018a5c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8013fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fe2:	7d1b      	ldrb	r3, [r3, #20]
 8013fe4:	2b06      	cmp	r3, #6
 8013fe6:	d111      	bne.n	801400c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8013fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fea:	8b5b      	ldrh	r3, [r3, #26]
 8013fec:	f003 0310 	and.w	r3, r3, #16
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d00b      	beq.n	801400c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013ff4:	4b9c      	ldr	r3, [pc, #624]	@ (8014268 <tcp_slowtmr+0x584>)
 8013ff6:	681a      	ldr	r2, [r3, #0]
 8013ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ffa:	6a1b      	ldr	r3, [r3, #32]
 8013ffc:	1ad3      	subs	r3, r2, r3
 8013ffe:	2b28      	cmp	r3, #40	@ 0x28
 8014000:	d904      	bls.n	801400c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8014002:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014006:	3301      	adds	r3, #1
 8014008:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801400c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801400e:	7a5b      	ldrb	r3, [r3, #9]
 8014010:	f003 0308 	and.w	r3, r3, #8
 8014014:	2b00      	cmp	r3, #0
 8014016:	d04a      	beq.n	80140ae <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8014018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801401a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801401c:	2b04      	cmp	r3, #4
 801401e:	d003      	beq.n	8014028 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8014020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014022:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8014024:	2b07      	cmp	r3, #7
 8014026:	d142      	bne.n	80140ae <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014028:	4b8f      	ldr	r3, [pc, #572]	@ (8014268 <tcp_slowtmr+0x584>)
 801402a:	681a      	ldr	r2, [r3, #0]
 801402c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801402e:	6a1b      	ldr	r3, [r3, #32]
 8014030:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8014032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014034:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8014038:	4b8c      	ldr	r3, [pc, #560]	@ (801426c <tcp_slowtmr+0x588>)
 801403a:	440b      	add	r3, r1
 801403c:	498c      	ldr	r1, [pc, #560]	@ (8014270 <tcp_slowtmr+0x58c>)
 801403e:	fba1 1303 	umull	r1, r3, r1, r3
 8014042:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014044:	429a      	cmp	r2, r3
 8014046:	d90a      	bls.n	801405e <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8014048:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801404c:	3301      	adds	r3, #1
 801404e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8014052:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014056:	3301      	adds	r3, #1
 8014058:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801405c:	e027      	b.n	80140ae <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801405e:	4b82      	ldr	r3, [pc, #520]	@ (8014268 <tcp_slowtmr+0x584>)
 8014060:	681a      	ldr	r2, [r3, #0]
 8014062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014064:	6a1b      	ldr	r3, [r3, #32]
 8014066:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8014068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801406a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801406e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014070:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8014074:	4618      	mov	r0, r3
 8014076:	4b7f      	ldr	r3, [pc, #508]	@ (8014274 <tcp_slowtmr+0x590>)
 8014078:	fb00 f303 	mul.w	r3, r0, r3
 801407c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801407e:	497c      	ldr	r1, [pc, #496]	@ (8014270 <tcp_slowtmr+0x58c>)
 8014080:	fba1 1303 	umull	r1, r3, r1, r3
 8014084:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014086:	429a      	cmp	r2, r3
 8014088:	d911      	bls.n	80140ae <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801408a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801408c:	f004 ffea 	bl	8019064 <tcp_keepalive>
 8014090:	4603      	mov	r3, r0
 8014092:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8014096:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801409a:	2b00      	cmp	r3, #0
 801409c:	d107      	bne.n	80140ae <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801409e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140a0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80140a4:	3301      	adds	r3, #1
 80140a6:	b2da      	uxtb	r2, r3
 80140a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140aa:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80140ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d011      	beq.n	80140da <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80140b6:	4b6c      	ldr	r3, [pc, #432]	@ (8014268 <tcp_slowtmr+0x584>)
 80140b8:	681a      	ldr	r2, [r3, #0]
 80140ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140bc:	6a1b      	ldr	r3, [r3, #32]
 80140be:	1ad2      	subs	r2, r2, r3
 80140c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140c2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80140c6:	4619      	mov	r1, r3
 80140c8:	460b      	mov	r3, r1
 80140ca:	005b      	lsls	r3, r3, #1
 80140cc:	440b      	add	r3, r1
 80140ce:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80140d0:	429a      	cmp	r2, r3
 80140d2:	d302      	bcc.n	80140da <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80140d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80140d6:	f000 feab 	bl	8014e30 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80140da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140dc:	7d1b      	ldrb	r3, [r3, #20]
 80140de:	2b03      	cmp	r3, #3
 80140e0:	d10b      	bne.n	80140fa <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80140e2:	4b61      	ldr	r3, [pc, #388]	@ (8014268 <tcp_slowtmr+0x584>)
 80140e4:	681a      	ldr	r2, [r3, #0]
 80140e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140e8:	6a1b      	ldr	r3, [r3, #32]
 80140ea:	1ad3      	subs	r3, r2, r3
 80140ec:	2b28      	cmp	r3, #40	@ 0x28
 80140ee:	d904      	bls.n	80140fa <tcp_slowtmr+0x416>
        ++pcb_remove;
 80140f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80140f4:	3301      	adds	r3, #1
 80140f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80140fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140fc:	7d1b      	ldrb	r3, [r3, #20]
 80140fe:	2b09      	cmp	r3, #9
 8014100:	d10b      	bne.n	801411a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014102:	4b59      	ldr	r3, [pc, #356]	@ (8014268 <tcp_slowtmr+0x584>)
 8014104:	681a      	ldr	r2, [r3, #0]
 8014106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014108:	6a1b      	ldr	r3, [r3, #32]
 801410a:	1ad3      	subs	r3, r2, r3
 801410c:	2bf0      	cmp	r3, #240	@ 0xf0
 801410e:	d904      	bls.n	801411a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8014110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014114:	3301      	adds	r3, #1
 8014116:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801411a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801411e:	2b00      	cmp	r3, #0
 8014120:	d060      	beq.n	80141e4 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8014122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014128:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801412a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801412c:	f000 fccc 	bl	8014ac8 <tcp_pcb_purge>
      if (prev != NULL) {
 8014130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014132:	2b00      	cmp	r3, #0
 8014134:	d010      	beq.n	8014158 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8014136:	4b50      	ldr	r3, [pc, #320]	@ (8014278 <tcp_slowtmr+0x594>)
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801413c:	429a      	cmp	r2, r3
 801413e:	d106      	bne.n	801414e <tcp_slowtmr+0x46a>
 8014140:	4b4e      	ldr	r3, [pc, #312]	@ (801427c <tcp_slowtmr+0x598>)
 8014142:	f240 526d 	movw	r2, #1389	@ 0x56d
 8014146:	494e      	ldr	r1, [pc, #312]	@ (8014280 <tcp_slowtmr+0x59c>)
 8014148:	484e      	ldr	r0, [pc, #312]	@ (8014284 <tcp_slowtmr+0x5a0>)
 801414a:	f009 f90f 	bl	801d36c <iprintf>
        prev->next = pcb->next;
 801414e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014150:	68da      	ldr	r2, [r3, #12]
 8014152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014154:	60da      	str	r2, [r3, #12]
 8014156:	e00f      	b.n	8014178 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8014158:	4b47      	ldr	r3, [pc, #284]	@ (8014278 <tcp_slowtmr+0x594>)
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801415e:	429a      	cmp	r2, r3
 8014160:	d006      	beq.n	8014170 <tcp_slowtmr+0x48c>
 8014162:	4b46      	ldr	r3, [pc, #280]	@ (801427c <tcp_slowtmr+0x598>)
 8014164:	f240 5271 	movw	r2, #1393	@ 0x571
 8014168:	4947      	ldr	r1, [pc, #284]	@ (8014288 <tcp_slowtmr+0x5a4>)
 801416a:	4846      	ldr	r0, [pc, #280]	@ (8014284 <tcp_slowtmr+0x5a0>)
 801416c:	f009 f8fe 	bl	801d36c <iprintf>
        tcp_active_pcbs = pcb->next;
 8014170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014172:	68db      	ldr	r3, [r3, #12]
 8014174:	4a40      	ldr	r2, [pc, #256]	@ (8014278 <tcp_slowtmr+0x594>)
 8014176:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8014178:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801417c:	2b00      	cmp	r3, #0
 801417e:	d013      	beq.n	80141a8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014182:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8014184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014186:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014188:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801418a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801418c:	3304      	adds	r3, #4
 801418e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014190:	8ad2      	ldrh	r2, [r2, #22]
 8014192:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014194:	8b09      	ldrh	r1, [r1, #24]
 8014196:	9102      	str	r1, [sp, #8]
 8014198:	9201      	str	r2, [sp, #4]
 801419a:	9300      	str	r3, [sp, #0]
 801419c:	462b      	mov	r3, r5
 801419e:	4622      	mov	r2, r4
 80141a0:	4601      	mov	r1, r0
 80141a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80141a4:	f004 feaa 	bl	8018efc <tcp_rst>
      err_arg = pcb->callback_arg;
 80141a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141aa:	691b      	ldr	r3, [r3, #16]
 80141ac:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80141ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141b0:	7d1b      	ldrb	r3, [r3, #20]
 80141b2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80141b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141b6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80141b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141ba:	68db      	ldr	r3, [r3, #12]
 80141bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80141be:	6838      	ldr	r0, [r7, #0]
 80141c0:	f7fe ffee 	bl	80131a0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80141c4:	4b31      	ldr	r3, [pc, #196]	@ (801428c <tcp_slowtmr+0x5a8>)
 80141c6:	2200      	movs	r2, #0
 80141c8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d004      	beq.n	80141da <tcp_slowtmr+0x4f6>
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	f06f 010c 	mvn.w	r1, #12
 80141d6:	68b8      	ldr	r0, [r7, #8]
 80141d8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80141da:	4b2c      	ldr	r3, [pc, #176]	@ (801428c <tcp_slowtmr+0x5a8>)
 80141dc:	781b      	ldrb	r3, [r3, #0]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d037      	beq.n	8014252 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80141e2:	e592      	b.n	8013d0a <tcp_slowtmr+0x26>
      prev = pcb;
 80141e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80141e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141ea:	68db      	ldr	r3, [r3, #12]
 80141ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80141ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141f0:	7f1b      	ldrb	r3, [r3, #28]
 80141f2:	3301      	adds	r3, #1
 80141f4:	b2da      	uxtb	r2, r3
 80141f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141f8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80141fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141fc:	7f1a      	ldrb	r2, [r3, #28]
 80141fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014200:	7f5b      	ldrb	r3, [r3, #29]
 8014202:	429a      	cmp	r2, r3
 8014204:	d325      	bcc.n	8014252 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8014206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014208:	2200      	movs	r2, #0
 801420a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 801420c:	4b1f      	ldr	r3, [pc, #124]	@ (801428c <tcp_slowtmr+0x5a8>)
 801420e:	2200      	movs	r2, #0
 8014210:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8014212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014214:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014218:	2b00      	cmp	r3, #0
 801421a:	d00b      	beq.n	8014234 <tcp_slowtmr+0x550>
 801421c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801421e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014222:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014224:	6912      	ldr	r2, [r2, #16]
 8014226:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014228:	4610      	mov	r0, r2
 801422a:	4798      	blx	r3
 801422c:	4603      	mov	r3, r0
 801422e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8014232:	e002      	b.n	801423a <tcp_slowtmr+0x556>
 8014234:	2300      	movs	r3, #0
 8014236:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801423a:	4b14      	ldr	r3, [pc, #80]	@ (801428c <tcp_slowtmr+0x5a8>)
 801423c:	781b      	ldrb	r3, [r3, #0]
 801423e:	2b00      	cmp	r3, #0
 8014240:	f47f ad62 	bne.w	8013d08 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8014244:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8014248:	2b00      	cmp	r3, #0
 801424a:	d102      	bne.n	8014252 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801424c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801424e:	f004 f8a1 	bl	8018394 <tcp_output>
  while (pcb != NULL) {
 8014252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014254:	2b00      	cmp	r3, #0
 8014256:	f47f ad5e 	bne.w	8013d16 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801425a:	2300      	movs	r3, #0
 801425c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801425e:	4b0c      	ldr	r3, [pc, #48]	@ (8014290 <tcp_slowtmr+0x5ac>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8014264:	e069      	b.n	801433a <tcp_slowtmr+0x656>
 8014266:	bf00      	nop
 8014268:	2000e45c 	.word	0x2000e45c
 801426c:	000a4cb8 	.word	0x000a4cb8
 8014270:	10624dd3 	.word	0x10624dd3
 8014274:	000124f8 	.word	0x000124f8
 8014278:	2000e468 	.word	0x2000e468
 801427c:	0801fcac 	.word	0x0801fcac
 8014280:	080200e4 	.word	0x080200e4
 8014284:	0801fcf0 	.word	0x0801fcf0
 8014288:	08020110 	.word	0x08020110
 801428c:	2000e470 	.word	0x2000e470
 8014290:	2000e46c 	.word	0x2000e46c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014296:	7d1b      	ldrb	r3, [r3, #20]
 8014298:	2b0a      	cmp	r3, #10
 801429a:	d006      	beq.n	80142aa <tcp_slowtmr+0x5c6>
 801429c:	4b2b      	ldr	r3, [pc, #172]	@ (801434c <tcp_slowtmr+0x668>)
 801429e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80142a2:	492b      	ldr	r1, [pc, #172]	@ (8014350 <tcp_slowtmr+0x66c>)
 80142a4:	482b      	ldr	r0, [pc, #172]	@ (8014354 <tcp_slowtmr+0x670>)
 80142a6:	f009 f861 	bl	801d36c <iprintf>
    pcb_remove = 0;
 80142aa:	2300      	movs	r3, #0
 80142ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80142b0:	4b29      	ldr	r3, [pc, #164]	@ (8014358 <tcp_slowtmr+0x674>)
 80142b2:	681a      	ldr	r2, [r3, #0]
 80142b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142b6:	6a1b      	ldr	r3, [r3, #32]
 80142b8:	1ad3      	subs	r3, r2, r3
 80142ba:	2bf0      	cmp	r3, #240	@ 0xf0
 80142bc:	d904      	bls.n	80142c8 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80142be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80142c2:	3301      	adds	r3, #1
 80142c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80142c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d02f      	beq.n	8014330 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80142d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80142d2:	f000 fbf9 	bl	8014ac8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80142d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d010      	beq.n	80142fe <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80142dc:	4b1f      	ldr	r3, [pc, #124]	@ (801435c <tcp_slowtmr+0x678>)
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80142e2:	429a      	cmp	r2, r3
 80142e4:	d106      	bne.n	80142f4 <tcp_slowtmr+0x610>
 80142e6:	4b19      	ldr	r3, [pc, #100]	@ (801434c <tcp_slowtmr+0x668>)
 80142e8:	f240 52af 	movw	r2, #1455	@ 0x5af
 80142ec:	491c      	ldr	r1, [pc, #112]	@ (8014360 <tcp_slowtmr+0x67c>)
 80142ee:	4819      	ldr	r0, [pc, #100]	@ (8014354 <tcp_slowtmr+0x670>)
 80142f0:	f009 f83c 	bl	801d36c <iprintf>
        prev->next = pcb->next;
 80142f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142f6:	68da      	ldr	r2, [r3, #12]
 80142f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142fa:	60da      	str	r2, [r3, #12]
 80142fc:	e00f      	b.n	801431e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80142fe:	4b17      	ldr	r3, [pc, #92]	@ (801435c <tcp_slowtmr+0x678>)
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014304:	429a      	cmp	r2, r3
 8014306:	d006      	beq.n	8014316 <tcp_slowtmr+0x632>
 8014308:	4b10      	ldr	r3, [pc, #64]	@ (801434c <tcp_slowtmr+0x668>)
 801430a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801430e:	4915      	ldr	r1, [pc, #84]	@ (8014364 <tcp_slowtmr+0x680>)
 8014310:	4810      	ldr	r0, [pc, #64]	@ (8014354 <tcp_slowtmr+0x670>)
 8014312:	f009 f82b 	bl	801d36c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8014316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014318:	68db      	ldr	r3, [r3, #12]
 801431a:	4a10      	ldr	r2, [pc, #64]	@ (801435c <tcp_slowtmr+0x678>)
 801431c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801431e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014320:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8014322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014324:	68db      	ldr	r3, [r3, #12]
 8014326:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8014328:	69f8      	ldr	r0, [r7, #28]
 801432a:	f7fe ff39 	bl	80131a0 <tcp_free>
 801432e:	e004      	b.n	801433a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8014330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014332:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8014334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014336:	68db      	ldr	r3, [r3, #12]
 8014338:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801433a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801433c:	2b00      	cmp	r3, #0
 801433e:	d1a9      	bne.n	8014294 <tcp_slowtmr+0x5b0>
    }
  }
}
 8014340:	bf00      	nop
 8014342:	bf00      	nop
 8014344:	3730      	adds	r7, #48	@ 0x30
 8014346:	46bd      	mov	sp, r7
 8014348:	bdb0      	pop	{r4, r5, r7, pc}
 801434a:	bf00      	nop
 801434c:	0801fcac 	.word	0x0801fcac
 8014350:	0802013c 	.word	0x0802013c
 8014354:	0801fcf0 	.word	0x0801fcf0
 8014358:	2000e45c 	.word	0x2000e45c
 801435c:	2000e46c 	.word	0x2000e46c
 8014360:	0802016c 	.word	0x0802016c
 8014364:	08020194 	.word	0x08020194

08014368 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b082      	sub	sp, #8
 801436c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801436e:	4b2d      	ldr	r3, [pc, #180]	@ (8014424 <tcp_fasttmr+0xbc>)
 8014370:	781b      	ldrb	r3, [r3, #0]
 8014372:	3301      	adds	r3, #1
 8014374:	b2da      	uxtb	r2, r3
 8014376:	4b2b      	ldr	r3, [pc, #172]	@ (8014424 <tcp_fasttmr+0xbc>)
 8014378:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801437a:	4b2b      	ldr	r3, [pc, #172]	@ (8014428 <tcp_fasttmr+0xc0>)
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014380:	e048      	b.n	8014414 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	7f9a      	ldrb	r2, [r3, #30]
 8014386:	4b27      	ldr	r3, [pc, #156]	@ (8014424 <tcp_fasttmr+0xbc>)
 8014388:	781b      	ldrb	r3, [r3, #0]
 801438a:	429a      	cmp	r2, r3
 801438c:	d03f      	beq.n	801440e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801438e:	4b25      	ldr	r3, [pc, #148]	@ (8014424 <tcp_fasttmr+0xbc>)
 8014390:	781a      	ldrb	r2, [r3, #0]
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	8b5b      	ldrh	r3, [r3, #26]
 801439a:	f003 0301 	and.w	r3, r3, #1
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d010      	beq.n	80143c4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	8b5b      	ldrh	r3, [r3, #26]
 80143a6:	f043 0302 	orr.w	r3, r3, #2
 80143aa:	b29a      	uxth	r2, r3
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	f003 ffef 	bl	8018394 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	8b5b      	ldrh	r3, [r3, #26]
 80143ba:	f023 0303 	bic.w	r3, r3, #3
 80143be:	b29a      	uxth	r2, r3
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	8b5b      	ldrh	r3, [r3, #26]
 80143c8:	f003 0308 	and.w	r3, r3, #8
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d009      	beq.n	80143e4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	8b5b      	ldrh	r3, [r3, #26]
 80143d4:	f023 0308 	bic.w	r3, r3, #8
 80143d8:	b29a      	uxth	r2, r3
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80143de:	6878      	ldr	r0, [r7, #4]
 80143e0:	f7ff f872 	bl	80134c8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	68db      	ldr	r3, [r3, #12]
 80143e8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d00a      	beq.n	8014408 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80143f2:	4b0e      	ldr	r3, [pc, #56]	@ (801442c <tcp_fasttmr+0xc4>)
 80143f4:	2200      	movs	r2, #0
 80143f6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80143f8:	6878      	ldr	r0, [r7, #4]
 80143fa:	f000 f819 	bl	8014430 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80143fe:	4b0b      	ldr	r3, [pc, #44]	@ (801442c <tcp_fasttmr+0xc4>)
 8014400:	781b      	ldrb	r3, [r3, #0]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d000      	beq.n	8014408 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8014406:	e7b8      	b.n	801437a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	607b      	str	r3, [r7, #4]
 801440c:	e002      	b.n	8014414 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	68db      	ldr	r3, [r3, #12]
 8014412:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d1b3      	bne.n	8014382 <tcp_fasttmr+0x1a>
    }
  }
}
 801441a:	bf00      	nop
 801441c:	bf00      	nop
 801441e:	3708      	adds	r7, #8
 8014420:	46bd      	mov	sp, r7
 8014422:	bd80      	pop	{r7, pc}
 8014424:	2000e472 	.word	0x2000e472
 8014428:	2000e468 	.word	0x2000e468
 801442c:	2000e470 	.word	0x2000e470

08014430 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8014430:	b590      	push	{r4, r7, lr}
 8014432:	b085      	sub	sp, #20
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d109      	bne.n	8014452 <tcp_process_refused_data+0x22>
 801443e:	4b37      	ldr	r3, [pc, #220]	@ (801451c <tcp_process_refused_data+0xec>)
 8014440:	f240 6209 	movw	r2, #1545	@ 0x609
 8014444:	4936      	ldr	r1, [pc, #216]	@ (8014520 <tcp_process_refused_data+0xf0>)
 8014446:	4837      	ldr	r0, [pc, #220]	@ (8014524 <tcp_process_refused_data+0xf4>)
 8014448:	f008 ff90 	bl	801d36c <iprintf>
 801444c:	f06f 030f 	mvn.w	r3, #15
 8014450:	e060      	b.n	8014514 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014456:	7b5b      	ldrb	r3, [r3, #13]
 8014458:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801445e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2200      	movs	r2, #0
 8014464:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801446c:	2b00      	cmp	r3, #0
 801446e:	d00b      	beq.n	8014488 <tcp_process_refused_data+0x58>
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	6918      	ldr	r0, [r3, #16]
 801447a:	2300      	movs	r3, #0
 801447c:	68ba      	ldr	r2, [r7, #8]
 801447e:	6879      	ldr	r1, [r7, #4]
 8014480:	47a0      	blx	r4
 8014482:	4603      	mov	r3, r0
 8014484:	73fb      	strb	r3, [r7, #15]
 8014486:	e007      	b.n	8014498 <tcp_process_refused_data+0x68>
 8014488:	2300      	movs	r3, #0
 801448a:	68ba      	ldr	r2, [r7, #8]
 801448c:	6879      	ldr	r1, [r7, #4]
 801448e:	2000      	movs	r0, #0
 8014490:	f000 f8a4 	bl	80145dc <tcp_recv_null>
 8014494:	4603      	mov	r3, r0
 8014496:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8014498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d12a      	bne.n	80144f6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80144a0:	7bbb      	ldrb	r3, [r7, #14]
 80144a2:	f003 0320 	and.w	r3, r3, #32
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d033      	beq.n	8014512 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80144ae:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80144b2:	d005      	beq.n	80144c0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80144b8:	3301      	adds	r3, #1
 80144ba:	b29a      	uxth	r2, r3
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d00b      	beq.n	80144e2 <tcp_process_refused_data+0xb2>
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	6918      	ldr	r0, [r3, #16]
 80144d4:	2300      	movs	r3, #0
 80144d6:	2200      	movs	r2, #0
 80144d8:	6879      	ldr	r1, [r7, #4]
 80144da:	47a0      	blx	r4
 80144dc:	4603      	mov	r3, r0
 80144de:	73fb      	strb	r3, [r7, #15]
 80144e0:	e001      	b.n	80144e6 <tcp_process_refused_data+0xb6>
 80144e2:	2300      	movs	r3, #0
 80144e4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80144e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80144ea:	f113 0f0d 	cmn.w	r3, #13
 80144ee:	d110      	bne.n	8014512 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80144f0:	f06f 030c 	mvn.w	r3, #12
 80144f4:	e00e      	b.n	8014514 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80144f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80144fa:	f113 0f0d 	cmn.w	r3, #13
 80144fe:	d102      	bne.n	8014506 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8014500:	f06f 030c 	mvn.w	r3, #12
 8014504:	e006      	b.n	8014514 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	68ba      	ldr	r2, [r7, #8]
 801450a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801450c:	f06f 0304 	mvn.w	r3, #4
 8014510:	e000      	b.n	8014514 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8014512:	2300      	movs	r3, #0
}
 8014514:	4618      	mov	r0, r3
 8014516:	3714      	adds	r7, #20
 8014518:	46bd      	mov	sp, r7
 801451a:	bd90      	pop	{r4, r7, pc}
 801451c:	0801fcac 	.word	0x0801fcac
 8014520:	080201bc 	.word	0x080201bc
 8014524:	0801fcf0 	.word	0x0801fcf0

08014528 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8014528:	b580      	push	{r7, lr}
 801452a:	b084      	sub	sp, #16
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8014530:	e007      	b.n	8014542 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8014538:	6878      	ldr	r0, [r7, #4]
 801453a:	f000 f80a 	bl	8014552 <tcp_seg_free>
    seg = next;
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d1f4      	bne.n	8014532 <tcp_segs_free+0xa>
  }
}
 8014548:	bf00      	nop
 801454a:	bf00      	nop
 801454c:	3710      	adds	r7, #16
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}

08014552 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8014552:	b580      	push	{r7, lr}
 8014554:	b082      	sub	sp, #8
 8014556:	af00      	add	r7, sp, #0
 8014558:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d00c      	beq.n	801457a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	685b      	ldr	r3, [r3, #4]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d004      	beq.n	8014572 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	685b      	ldr	r3, [r3, #4]
 801456c:	4618      	mov	r0, r3
 801456e:	f7fe fb6b 	bl	8012c48 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8014572:	6879      	ldr	r1, [r7, #4]
 8014574:	2003      	movs	r0, #3
 8014576:	f7fd fcc3 	bl	8011f00 <memp_free>
  }
}
 801457a:	bf00      	nop
 801457c:	3708      	adds	r7, #8
 801457e:	46bd      	mov	sp, r7
 8014580:	bd80      	pop	{r7, pc}
	...

08014584 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b084      	sub	sp, #16
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d106      	bne.n	80145a0 <tcp_seg_copy+0x1c>
 8014592:	4b0f      	ldr	r3, [pc, #60]	@ (80145d0 <tcp_seg_copy+0x4c>)
 8014594:	f240 6282 	movw	r2, #1666	@ 0x682
 8014598:	490e      	ldr	r1, [pc, #56]	@ (80145d4 <tcp_seg_copy+0x50>)
 801459a:	480f      	ldr	r0, [pc, #60]	@ (80145d8 <tcp_seg_copy+0x54>)
 801459c:	f008 fee6 	bl	801d36c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80145a0:	2003      	movs	r0, #3
 80145a2:	f7fd fc37 	bl	8011e14 <memp_malloc>
 80145a6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d101      	bne.n	80145b2 <tcp_seg_copy+0x2e>
    return NULL;
 80145ae:	2300      	movs	r3, #0
 80145b0:	e00a      	b.n	80145c8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80145b2:	2210      	movs	r2, #16
 80145b4:	6879      	ldr	r1, [r7, #4]
 80145b6:	68f8      	ldr	r0, [r7, #12]
 80145b8:	f009 f865 	bl	801d686 <memcpy>
  pbuf_ref(cseg->p);
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	685b      	ldr	r3, [r3, #4]
 80145c0:	4618      	mov	r0, r3
 80145c2:	f7fe fbe7 	bl	8012d94 <pbuf_ref>
  return cseg;
 80145c6:	68fb      	ldr	r3, [r7, #12]
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	3710      	adds	r7, #16
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd80      	pop	{r7, pc}
 80145d0:	0801fcac 	.word	0x0801fcac
 80145d4:	08020200 	.word	0x08020200
 80145d8:	0801fcf0 	.word	0x0801fcf0

080145dc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b084      	sub	sp, #16
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	60f8      	str	r0, [r7, #12]
 80145e4:	60b9      	str	r1, [r7, #8]
 80145e6:	607a      	str	r2, [r7, #4]
 80145e8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80145ea:	68bb      	ldr	r3, [r7, #8]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d109      	bne.n	8014604 <tcp_recv_null+0x28>
 80145f0:	4b12      	ldr	r3, [pc, #72]	@ (801463c <tcp_recv_null+0x60>)
 80145f2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80145f6:	4912      	ldr	r1, [pc, #72]	@ (8014640 <tcp_recv_null+0x64>)
 80145f8:	4812      	ldr	r0, [pc, #72]	@ (8014644 <tcp_recv_null+0x68>)
 80145fa:	f008 feb7 	bl	801d36c <iprintf>
 80145fe:	f06f 030f 	mvn.w	r3, #15
 8014602:	e016      	b.n	8014632 <tcp_recv_null+0x56>

  if (p != NULL) {
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d009      	beq.n	801461e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	891b      	ldrh	r3, [r3, #8]
 801460e:	4619      	mov	r1, r3
 8014610:	68b8      	ldr	r0, [r7, #8]
 8014612:	f7ff fad1 	bl	8013bb8 <tcp_recved>
    pbuf_free(p);
 8014616:	6878      	ldr	r0, [r7, #4]
 8014618:	f7fe fb16 	bl	8012c48 <pbuf_free>
 801461c:	e008      	b.n	8014630 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801461e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d104      	bne.n	8014630 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8014626:	68b8      	ldr	r0, [r7, #8]
 8014628:	f7fe ffb8 	bl	801359c <tcp_close>
 801462c:	4603      	mov	r3, r0
 801462e:	e000      	b.n	8014632 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8014630:	2300      	movs	r3, #0
}
 8014632:	4618      	mov	r0, r3
 8014634:	3710      	adds	r7, #16
 8014636:	46bd      	mov	sp, r7
 8014638:	bd80      	pop	{r7, pc}
 801463a:	bf00      	nop
 801463c:	0801fcac 	.word	0x0801fcac
 8014640:	0802021c 	.word	0x0802021c
 8014644:	0801fcf0 	.word	0x0801fcf0

08014648 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8014648:	b580      	push	{r7, lr}
 801464a:	b086      	sub	sp, #24
 801464c:	af00      	add	r7, sp, #0
 801464e:	4603      	mov	r3, r0
 8014650:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8014652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014656:	2b00      	cmp	r3, #0
 8014658:	db01      	blt.n	801465e <tcp_kill_prio+0x16>
 801465a:	79fb      	ldrb	r3, [r7, #7]
 801465c:	e000      	b.n	8014660 <tcp_kill_prio+0x18>
 801465e:	237f      	movs	r3, #127	@ 0x7f
 8014660:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8014662:	7afb      	ldrb	r3, [r7, #11]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d034      	beq.n	80146d2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8014668:	7afb      	ldrb	r3, [r7, #11]
 801466a:	3b01      	subs	r3, #1
 801466c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801466e:	2300      	movs	r3, #0
 8014670:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014672:	2300      	movs	r3, #0
 8014674:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014676:	4b19      	ldr	r3, [pc, #100]	@ (80146dc <tcp_kill_prio+0x94>)
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	617b      	str	r3, [r7, #20]
 801467c:	e01f      	b.n	80146be <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801467e:	697b      	ldr	r3, [r7, #20]
 8014680:	7d5b      	ldrb	r3, [r3, #21]
 8014682:	7afa      	ldrb	r2, [r7, #11]
 8014684:	429a      	cmp	r2, r3
 8014686:	d80c      	bhi.n	80146a2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014688:	697b      	ldr	r3, [r7, #20]
 801468a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801468c:	7afa      	ldrb	r2, [r7, #11]
 801468e:	429a      	cmp	r2, r3
 8014690:	d112      	bne.n	80146b8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014692:	4b13      	ldr	r3, [pc, #76]	@ (80146e0 <tcp_kill_prio+0x98>)
 8014694:	681a      	ldr	r2, [r3, #0]
 8014696:	697b      	ldr	r3, [r7, #20]
 8014698:	6a1b      	ldr	r3, [r3, #32]
 801469a:	1ad3      	subs	r3, r2, r3
 801469c:	68fa      	ldr	r2, [r7, #12]
 801469e:	429a      	cmp	r2, r3
 80146a0:	d80a      	bhi.n	80146b8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80146a2:	4b0f      	ldr	r3, [pc, #60]	@ (80146e0 <tcp_kill_prio+0x98>)
 80146a4:	681a      	ldr	r2, [r3, #0]
 80146a6:	697b      	ldr	r3, [r7, #20]
 80146a8:	6a1b      	ldr	r3, [r3, #32]
 80146aa:	1ad3      	subs	r3, r2, r3
 80146ac:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80146ae:	697b      	ldr	r3, [r7, #20]
 80146b0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80146b2:	697b      	ldr	r3, [r7, #20]
 80146b4:	7d5b      	ldrb	r3, [r3, #21]
 80146b6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80146b8:	697b      	ldr	r3, [r7, #20]
 80146ba:	68db      	ldr	r3, [r3, #12]
 80146bc:	617b      	str	r3, [r7, #20]
 80146be:	697b      	ldr	r3, [r7, #20]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d1dc      	bne.n	801467e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80146c4:	693b      	ldr	r3, [r7, #16]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d004      	beq.n	80146d4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80146ca:	6938      	ldr	r0, [r7, #16]
 80146cc:	f7ff f8ac 	bl	8013828 <tcp_abort>
 80146d0:	e000      	b.n	80146d4 <tcp_kill_prio+0x8c>
    return;
 80146d2:	bf00      	nop
  }
}
 80146d4:	3718      	adds	r7, #24
 80146d6:	46bd      	mov	sp, r7
 80146d8:	bd80      	pop	{r7, pc}
 80146da:	bf00      	nop
 80146dc:	2000e468 	.word	0x2000e468
 80146e0:	2000e45c 	.word	0x2000e45c

080146e4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b086      	sub	sp, #24
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	4603      	mov	r3, r0
 80146ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80146ee:	79fb      	ldrb	r3, [r7, #7]
 80146f0:	2b08      	cmp	r3, #8
 80146f2:	d009      	beq.n	8014708 <tcp_kill_state+0x24>
 80146f4:	79fb      	ldrb	r3, [r7, #7]
 80146f6:	2b09      	cmp	r3, #9
 80146f8:	d006      	beq.n	8014708 <tcp_kill_state+0x24>
 80146fa:	4b1a      	ldr	r3, [pc, #104]	@ (8014764 <tcp_kill_state+0x80>)
 80146fc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8014700:	4919      	ldr	r1, [pc, #100]	@ (8014768 <tcp_kill_state+0x84>)
 8014702:	481a      	ldr	r0, [pc, #104]	@ (801476c <tcp_kill_state+0x88>)
 8014704:	f008 fe32 	bl	801d36c <iprintf>

  inactivity = 0;
 8014708:	2300      	movs	r3, #0
 801470a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801470c:	2300      	movs	r3, #0
 801470e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014710:	4b17      	ldr	r3, [pc, #92]	@ (8014770 <tcp_kill_state+0x8c>)
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	617b      	str	r3, [r7, #20]
 8014716:	e017      	b.n	8014748 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8014718:	697b      	ldr	r3, [r7, #20]
 801471a:	7d1b      	ldrb	r3, [r3, #20]
 801471c:	79fa      	ldrb	r2, [r7, #7]
 801471e:	429a      	cmp	r2, r3
 8014720:	d10f      	bne.n	8014742 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014722:	4b14      	ldr	r3, [pc, #80]	@ (8014774 <tcp_kill_state+0x90>)
 8014724:	681a      	ldr	r2, [r3, #0]
 8014726:	697b      	ldr	r3, [r7, #20]
 8014728:	6a1b      	ldr	r3, [r3, #32]
 801472a:	1ad3      	subs	r3, r2, r3
 801472c:	68fa      	ldr	r2, [r7, #12]
 801472e:	429a      	cmp	r2, r3
 8014730:	d807      	bhi.n	8014742 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8014732:	4b10      	ldr	r3, [pc, #64]	@ (8014774 <tcp_kill_state+0x90>)
 8014734:	681a      	ldr	r2, [r3, #0]
 8014736:	697b      	ldr	r3, [r7, #20]
 8014738:	6a1b      	ldr	r3, [r3, #32]
 801473a:	1ad3      	subs	r3, r2, r3
 801473c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801473e:	697b      	ldr	r3, [r7, #20]
 8014740:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014742:	697b      	ldr	r3, [r7, #20]
 8014744:	68db      	ldr	r3, [r3, #12]
 8014746:	617b      	str	r3, [r7, #20]
 8014748:	697b      	ldr	r3, [r7, #20]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d1e4      	bne.n	8014718 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801474e:	693b      	ldr	r3, [r7, #16]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d003      	beq.n	801475c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8014754:	2100      	movs	r1, #0
 8014756:	6938      	ldr	r0, [r7, #16]
 8014758:	f7fe ffa8 	bl	80136ac <tcp_abandon>
  }
}
 801475c:	bf00      	nop
 801475e:	3718      	adds	r7, #24
 8014760:	46bd      	mov	sp, r7
 8014762:	bd80      	pop	{r7, pc}
 8014764:	0801fcac 	.word	0x0801fcac
 8014768:	08020238 	.word	0x08020238
 801476c:	0801fcf0 	.word	0x0801fcf0
 8014770:	2000e468 	.word	0x2000e468
 8014774:	2000e45c 	.word	0x2000e45c

08014778 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b084      	sub	sp, #16
 801477c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801477e:	2300      	movs	r3, #0
 8014780:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8014782:	2300      	movs	r3, #0
 8014784:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014786:	4b12      	ldr	r3, [pc, #72]	@ (80147d0 <tcp_kill_timewait+0x58>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	60fb      	str	r3, [r7, #12]
 801478c:	e012      	b.n	80147b4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801478e:	4b11      	ldr	r3, [pc, #68]	@ (80147d4 <tcp_kill_timewait+0x5c>)
 8014790:	681a      	ldr	r2, [r3, #0]
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	6a1b      	ldr	r3, [r3, #32]
 8014796:	1ad3      	subs	r3, r2, r3
 8014798:	687a      	ldr	r2, [r7, #4]
 801479a:	429a      	cmp	r2, r3
 801479c:	d807      	bhi.n	80147ae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801479e:	4b0d      	ldr	r3, [pc, #52]	@ (80147d4 <tcp_kill_timewait+0x5c>)
 80147a0:	681a      	ldr	r2, [r3, #0]
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	6a1b      	ldr	r3, [r3, #32]
 80147a6:	1ad3      	subs	r3, r2, r3
 80147a8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	68db      	ldr	r3, [r3, #12]
 80147b2:	60fb      	str	r3, [r7, #12]
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d1e9      	bne.n	801478e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d002      	beq.n	80147c6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80147c0:	68b8      	ldr	r0, [r7, #8]
 80147c2:	f7ff f831 	bl	8013828 <tcp_abort>
  }
}
 80147c6:	bf00      	nop
 80147c8:	3710      	adds	r7, #16
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}
 80147ce:	bf00      	nop
 80147d0:	2000e46c 	.word	0x2000e46c
 80147d4:	2000e45c 	.word	0x2000e45c

080147d8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b082      	sub	sp, #8
 80147dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80147de:	4b10      	ldr	r3, [pc, #64]	@ (8014820 <tcp_handle_closepend+0x48>)
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80147e4:	e014      	b.n	8014810 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	68db      	ldr	r3, [r3, #12]
 80147ea:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	8b5b      	ldrh	r3, [r3, #26]
 80147f0:	f003 0308 	and.w	r3, r3, #8
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d009      	beq.n	801480c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	8b5b      	ldrh	r3, [r3, #26]
 80147fc:	f023 0308 	bic.w	r3, r3, #8
 8014800:	b29a      	uxth	r2, r3
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8014806:	6878      	ldr	r0, [r7, #4]
 8014808:	f7fe fe5e 	bl	80134c8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801480c:	683b      	ldr	r3, [r7, #0]
 801480e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d1e7      	bne.n	80147e6 <tcp_handle_closepend+0xe>
  }
}
 8014816:	bf00      	nop
 8014818:	bf00      	nop
 801481a:	3708      	adds	r7, #8
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}
 8014820:	2000e468 	.word	0x2000e468

08014824 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b084      	sub	sp, #16
 8014828:	af00      	add	r7, sp, #0
 801482a:	4603      	mov	r3, r0
 801482c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801482e:	2001      	movs	r0, #1
 8014830:	f7fd faf0 	bl	8011e14 <memp_malloc>
 8014834:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d126      	bne.n	801488a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801483c:	f7ff ffcc 	bl	80147d8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8014840:	f7ff ff9a 	bl	8014778 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014844:	2001      	movs	r0, #1
 8014846:	f7fd fae5 	bl	8011e14 <memp_malloc>
 801484a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d11b      	bne.n	801488a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8014852:	2009      	movs	r0, #9
 8014854:	f7ff ff46 	bl	80146e4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014858:	2001      	movs	r0, #1
 801485a:	f7fd fadb 	bl	8011e14 <memp_malloc>
 801485e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d111      	bne.n	801488a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8014866:	2008      	movs	r0, #8
 8014868:	f7ff ff3c 	bl	80146e4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801486c:	2001      	movs	r0, #1
 801486e:	f7fd fad1 	bl	8011e14 <memp_malloc>
 8014872:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d107      	bne.n	801488a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801487a:	79fb      	ldrb	r3, [r7, #7]
 801487c:	4618      	mov	r0, r3
 801487e:	f7ff fee3 	bl	8014648 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014882:	2001      	movs	r0, #1
 8014884:	f7fd fac6 	bl	8011e14 <memp_malloc>
 8014888:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d03f      	beq.n	8014910 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8014890:	229c      	movs	r2, #156	@ 0x9c
 8014892:	2100      	movs	r1, #0
 8014894:	68f8      	ldr	r0, [r7, #12]
 8014896:	f008 fe08 	bl	801d4aa <memset>
    pcb->prio = prio;
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	79fa      	ldrb	r2, [r7, #7]
 801489e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80148a6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80148b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	22ff      	movs	r2, #255	@ 0xff
 80148be:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80148c6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	2206      	movs	r2, #6
 80148cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	2206      	movs	r2, #6
 80148d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80148dc:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	2201      	movs	r2, #1
 80148e2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80148e6:	4b0d      	ldr	r3, [pc, #52]	@ (801491c <tcp_alloc+0xf8>)
 80148e8:	681a      	ldr	r2, [r3, #0]
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80148ee:	4b0c      	ldr	r3, [pc, #48]	@ (8014920 <tcp_alloc+0xfc>)
 80148f0:	781a      	ldrb	r2, [r3, #0]
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80148fc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	4a08      	ldr	r2, [pc, #32]	@ (8014924 <tcp_alloc+0x100>)
 8014904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	4a07      	ldr	r2, [pc, #28]	@ (8014928 <tcp_alloc+0x104>)
 801490c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014910:	68fb      	ldr	r3, [r7, #12]
}
 8014912:	4618      	mov	r0, r3
 8014914:	3710      	adds	r7, #16
 8014916:	46bd      	mov	sp, r7
 8014918:	bd80      	pop	{r7, pc}
 801491a:	bf00      	nop
 801491c:	2000e45c 	.word	0x2000e45c
 8014920:	2000e472 	.word	0x2000e472
 8014924:	080145dd 	.word	0x080145dd
 8014928:	006ddd00 	.word	0x006ddd00

0801492c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b084      	sub	sp, #16
 8014930:	af00      	add	r7, sp, #0
 8014932:	4603      	mov	r3, r0
 8014934:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8014936:	2040      	movs	r0, #64	@ 0x40
 8014938:	f7ff ff74 	bl	8014824 <tcp_alloc>
 801493c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801493e:	68fb      	ldr	r3, [r7, #12]
}
 8014940:	4618      	mov	r0, r3
 8014942:	3710      	adds	r7, #16
 8014944:	46bd      	mov	sp, r7
 8014946:	bd80      	pop	{r7, pc}

08014948 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8014948:	b480      	push	{r7}
 801494a:	b083      	sub	sp, #12
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
 8014950:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d002      	beq.n	801495e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	683a      	ldr	r2, [r7, #0]
 801495c:	611a      	str	r2, [r3, #16]
  }
}
 801495e:	bf00      	nop
 8014960:	370c      	adds	r7, #12
 8014962:	46bd      	mov	sp, r7
 8014964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014968:	4770      	bx	lr
	...

0801496c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801496c:	b580      	push	{r7, lr}
 801496e:	b082      	sub	sp, #8
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
 8014974:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d00e      	beq.n	801499a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	7d1b      	ldrb	r3, [r3, #20]
 8014980:	2b01      	cmp	r3, #1
 8014982:	d106      	bne.n	8014992 <tcp_recv+0x26>
 8014984:	4b07      	ldr	r3, [pc, #28]	@ (80149a4 <tcp_recv+0x38>)
 8014986:	f240 72df 	movw	r2, #2015	@ 0x7df
 801498a:	4907      	ldr	r1, [pc, #28]	@ (80149a8 <tcp_recv+0x3c>)
 801498c:	4807      	ldr	r0, [pc, #28]	@ (80149ac <tcp_recv+0x40>)
 801498e:	f008 fced 	bl	801d36c <iprintf>
    pcb->recv = recv;
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	683a      	ldr	r2, [r7, #0]
 8014996:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 801499a:	bf00      	nop
 801499c:	3708      	adds	r7, #8
 801499e:	46bd      	mov	sp, r7
 80149a0:	bd80      	pop	{r7, pc}
 80149a2:	bf00      	nop
 80149a4:	0801fcac 	.word	0x0801fcac
 80149a8:	08020248 	.word	0x08020248
 80149ac:	0801fcf0 	.word	0x0801fcf0

080149b0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b082      	sub	sp, #8
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
 80149b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d00e      	beq.n	80149de <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	7d1b      	ldrb	r3, [r3, #20]
 80149c4:	2b01      	cmp	r3, #1
 80149c6:	d106      	bne.n	80149d6 <tcp_sent+0x26>
 80149c8:	4b07      	ldr	r3, [pc, #28]	@ (80149e8 <tcp_sent+0x38>)
 80149ca:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 80149ce:	4907      	ldr	r1, [pc, #28]	@ (80149ec <tcp_sent+0x3c>)
 80149d0:	4807      	ldr	r0, [pc, #28]	@ (80149f0 <tcp_sent+0x40>)
 80149d2:	f008 fccb 	bl	801d36c <iprintf>
    pcb->sent = sent;
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	683a      	ldr	r2, [r7, #0]
 80149da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80149de:	bf00      	nop
 80149e0:	3708      	adds	r7, #8
 80149e2:	46bd      	mov	sp, r7
 80149e4:	bd80      	pop	{r7, pc}
 80149e6:	bf00      	nop
 80149e8:	0801fcac 	.word	0x0801fcac
 80149ec:	08020270 	.word	0x08020270
 80149f0:	0801fcf0 	.word	0x0801fcf0

080149f4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b082      	sub	sp, #8
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
 80149fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d00e      	beq.n	8014a22 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	7d1b      	ldrb	r3, [r3, #20]
 8014a08:	2b01      	cmp	r3, #1
 8014a0a:	d106      	bne.n	8014a1a <tcp_err+0x26>
 8014a0c:	4b07      	ldr	r3, [pc, #28]	@ (8014a2c <tcp_err+0x38>)
 8014a0e:	f640 020d 	movw	r2, #2061	@ 0x80d
 8014a12:	4907      	ldr	r1, [pc, #28]	@ (8014a30 <tcp_err+0x3c>)
 8014a14:	4807      	ldr	r0, [pc, #28]	@ (8014a34 <tcp_err+0x40>)
 8014a16:	f008 fca9 	bl	801d36c <iprintf>
    pcb->errf = err;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	683a      	ldr	r2, [r7, #0]
 8014a1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8014a22:	bf00      	nop
 8014a24:	3708      	adds	r7, #8
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bd80      	pop	{r7, pc}
 8014a2a:	bf00      	nop
 8014a2c:	0801fcac 	.word	0x0801fcac
 8014a30:	08020298 	.word	0x08020298
 8014a34:	0801fcf0 	.word	0x0801fcf0

08014a38 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8014a38:	b480      	push	{r7}
 8014a3a:	b085      	sub	sp, #20
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
 8014a40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d008      	beq.n	8014a5a <tcp_accept+0x22>
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	7d1b      	ldrb	r3, [r3, #20]
 8014a4c:	2b01      	cmp	r3, #1
 8014a4e:	d104      	bne.n	8014a5a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	683a      	ldr	r2, [r7, #0]
 8014a58:	619a      	str	r2, [r3, #24]
  }
}
 8014a5a:	bf00      	nop
 8014a5c:	3714      	adds	r7, #20
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a64:	4770      	bx	lr
	...

08014a68 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8014a68:	b580      	push	{r7, lr}
 8014a6a:	b084      	sub	sp, #16
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	60f8      	str	r0, [r7, #12]
 8014a70:	60b9      	str	r1, [r7, #8]
 8014a72:	4613      	mov	r3, r2
 8014a74:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d107      	bne.n	8014a8c <tcp_poll+0x24>
 8014a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8014ab8 <tcp_poll+0x50>)
 8014a7e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8014a82:	490e      	ldr	r1, [pc, #56]	@ (8014abc <tcp_poll+0x54>)
 8014a84:	480e      	ldr	r0, [pc, #56]	@ (8014ac0 <tcp_poll+0x58>)
 8014a86:	f008 fc71 	bl	801d36c <iprintf>
 8014a8a:	e011      	b.n	8014ab0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	7d1b      	ldrb	r3, [r3, #20]
 8014a90:	2b01      	cmp	r3, #1
 8014a92:	d106      	bne.n	8014aa2 <tcp_poll+0x3a>
 8014a94:	4b08      	ldr	r3, [pc, #32]	@ (8014ab8 <tcp_poll+0x50>)
 8014a96:	f640 023e 	movw	r2, #2110	@ 0x83e
 8014a9a:	490a      	ldr	r1, [pc, #40]	@ (8014ac4 <tcp_poll+0x5c>)
 8014a9c:	4808      	ldr	r0, [pc, #32]	@ (8014ac0 <tcp_poll+0x58>)
 8014a9e:	f008 fc65 	bl	801d36c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	68ba      	ldr	r2, [r7, #8]
 8014aa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	79fa      	ldrb	r2, [r7, #7]
 8014aae:	775a      	strb	r2, [r3, #29]
}
 8014ab0:	3710      	adds	r7, #16
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bd80      	pop	{r7, pc}
 8014ab6:	bf00      	nop
 8014ab8:	0801fcac 	.word	0x0801fcac
 8014abc:	080202c0 	.word	0x080202c0
 8014ac0:	0801fcf0 	.word	0x0801fcf0
 8014ac4:	080202d8 	.word	0x080202d8

08014ac8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b082      	sub	sp, #8
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d107      	bne.n	8014ae6 <tcp_pcb_purge+0x1e>
 8014ad6:	4b21      	ldr	r3, [pc, #132]	@ (8014b5c <tcp_pcb_purge+0x94>)
 8014ad8:	f640 0251 	movw	r2, #2129	@ 0x851
 8014adc:	4920      	ldr	r1, [pc, #128]	@ (8014b60 <tcp_pcb_purge+0x98>)
 8014ade:	4821      	ldr	r0, [pc, #132]	@ (8014b64 <tcp_pcb_purge+0x9c>)
 8014ae0:	f008 fc44 	bl	801d36c <iprintf>
 8014ae4:	e037      	b.n	8014b56 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	7d1b      	ldrb	r3, [r3, #20]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d033      	beq.n	8014b56 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014af2:	2b0a      	cmp	r3, #10
 8014af4:	d02f      	beq.n	8014b56 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014afa:	2b01      	cmp	r3, #1
 8014afc:	d02b      	beq.n	8014b56 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d007      	beq.n	8014b16 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f7fe f89c 	bl	8012c48 <pbuf_free>
      pcb->refused_data = NULL;
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	2200      	movs	r2, #0
 8014b14:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d002      	beq.n	8014b24 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014b1e:	6878      	ldr	r0, [r7, #4]
 8014b20:	f000 f986 	bl	8014e30 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014b2a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7ff fcf9 	bl	8014528 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f7ff fcf4 	bl	8014528 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	2200      	movs	r2, #0
 8014b44:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	2200      	movs	r2, #0
 8014b52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8014b56:	3708      	adds	r7, #8
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	bd80      	pop	{r7, pc}
 8014b5c:	0801fcac 	.word	0x0801fcac
 8014b60:	080202f8 	.word	0x080202f8
 8014b64:	0801fcf0 	.word	0x0801fcf0

08014b68 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b084      	sub	sp, #16
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
 8014b70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8014b72:	683b      	ldr	r3, [r7, #0]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d106      	bne.n	8014b86 <tcp_pcb_remove+0x1e>
 8014b78:	4b3e      	ldr	r3, [pc, #248]	@ (8014c74 <tcp_pcb_remove+0x10c>)
 8014b7a:	f640 0283 	movw	r2, #2179	@ 0x883
 8014b7e:	493e      	ldr	r1, [pc, #248]	@ (8014c78 <tcp_pcb_remove+0x110>)
 8014b80:	483e      	ldr	r0, [pc, #248]	@ (8014c7c <tcp_pcb_remove+0x114>)
 8014b82:	f008 fbf3 	bl	801d36c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d106      	bne.n	8014b9a <tcp_pcb_remove+0x32>
 8014b8c:	4b39      	ldr	r3, [pc, #228]	@ (8014c74 <tcp_pcb_remove+0x10c>)
 8014b8e:	f640 0284 	movw	r2, #2180	@ 0x884
 8014b92:	493b      	ldr	r1, [pc, #236]	@ (8014c80 <tcp_pcb_remove+0x118>)
 8014b94:	4839      	ldr	r0, [pc, #228]	@ (8014c7c <tcp_pcb_remove+0x114>)
 8014b96:	f008 fbe9 	bl	801d36c <iprintf>

  TCP_RMV(pcblist, pcb);
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	683a      	ldr	r2, [r7, #0]
 8014ba0:	429a      	cmp	r2, r3
 8014ba2:	d105      	bne.n	8014bb0 <tcp_pcb_remove+0x48>
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	68da      	ldr	r2, [r3, #12]
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	601a      	str	r2, [r3, #0]
 8014bae:	e013      	b.n	8014bd8 <tcp_pcb_remove+0x70>
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	60fb      	str	r3, [r7, #12]
 8014bb6:	e00c      	b.n	8014bd2 <tcp_pcb_remove+0x6a>
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	68db      	ldr	r3, [r3, #12]
 8014bbc:	683a      	ldr	r2, [r7, #0]
 8014bbe:	429a      	cmp	r2, r3
 8014bc0:	d104      	bne.n	8014bcc <tcp_pcb_remove+0x64>
 8014bc2:	683b      	ldr	r3, [r7, #0]
 8014bc4:	68da      	ldr	r2, [r3, #12]
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	60da      	str	r2, [r3, #12]
 8014bca:	e005      	b.n	8014bd8 <tcp_pcb_remove+0x70>
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	68db      	ldr	r3, [r3, #12]
 8014bd0:	60fb      	str	r3, [r7, #12]
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d1ef      	bne.n	8014bb8 <tcp_pcb_remove+0x50>
 8014bd8:	683b      	ldr	r3, [r7, #0]
 8014bda:	2200      	movs	r2, #0
 8014bdc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8014bde:	6838      	ldr	r0, [r7, #0]
 8014be0:	f7ff ff72 	bl	8014ac8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014be4:	683b      	ldr	r3, [r7, #0]
 8014be6:	7d1b      	ldrb	r3, [r3, #20]
 8014be8:	2b0a      	cmp	r3, #10
 8014bea:	d013      	beq.n	8014c14 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014bec:	683b      	ldr	r3, [r7, #0]
 8014bee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014bf0:	2b01      	cmp	r3, #1
 8014bf2:	d00f      	beq.n	8014c14 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014bf4:	683b      	ldr	r3, [r7, #0]
 8014bf6:	8b5b      	ldrh	r3, [r3, #26]
 8014bf8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d009      	beq.n	8014c14 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014c00:	683b      	ldr	r3, [r7, #0]
 8014c02:	8b5b      	ldrh	r3, [r3, #26]
 8014c04:	f043 0302 	orr.w	r3, r3, #2
 8014c08:	b29a      	uxth	r2, r3
 8014c0a:	683b      	ldr	r3, [r7, #0]
 8014c0c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014c0e:	6838      	ldr	r0, [r7, #0]
 8014c10:	f003 fbc0 	bl	8018394 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014c14:	683b      	ldr	r3, [r7, #0]
 8014c16:	7d1b      	ldrb	r3, [r3, #20]
 8014c18:	2b01      	cmp	r3, #1
 8014c1a:	d020      	beq.n	8014c5e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014c1c:	683b      	ldr	r3, [r7, #0]
 8014c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d006      	beq.n	8014c32 <tcp_pcb_remove+0xca>
 8014c24:	4b13      	ldr	r3, [pc, #76]	@ (8014c74 <tcp_pcb_remove+0x10c>)
 8014c26:	f640 0293 	movw	r2, #2195	@ 0x893
 8014c2a:	4916      	ldr	r1, [pc, #88]	@ (8014c84 <tcp_pcb_remove+0x11c>)
 8014c2c:	4813      	ldr	r0, [pc, #76]	@ (8014c7c <tcp_pcb_remove+0x114>)
 8014c2e:	f008 fb9d 	bl	801d36c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8014c32:	683b      	ldr	r3, [r7, #0]
 8014c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d006      	beq.n	8014c48 <tcp_pcb_remove+0xe0>
 8014c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8014c74 <tcp_pcb_remove+0x10c>)
 8014c3c:	f640 0294 	movw	r2, #2196	@ 0x894
 8014c40:	4911      	ldr	r1, [pc, #68]	@ (8014c88 <tcp_pcb_remove+0x120>)
 8014c42:	480e      	ldr	r0, [pc, #56]	@ (8014c7c <tcp_pcb_remove+0x114>)
 8014c44:	f008 fb92 	bl	801d36c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014c48:	683b      	ldr	r3, [r7, #0]
 8014c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d006      	beq.n	8014c5e <tcp_pcb_remove+0xf6>
 8014c50:	4b08      	ldr	r3, [pc, #32]	@ (8014c74 <tcp_pcb_remove+0x10c>)
 8014c52:	f640 0296 	movw	r2, #2198	@ 0x896
 8014c56:	490d      	ldr	r1, [pc, #52]	@ (8014c8c <tcp_pcb_remove+0x124>)
 8014c58:	4808      	ldr	r0, [pc, #32]	@ (8014c7c <tcp_pcb_remove+0x114>)
 8014c5a:	f008 fb87 	bl	801d36c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8014c5e:	683b      	ldr	r3, [r7, #0]
 8014c60:	2200      	movs	r2, #0
 8014c62:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014c64:	683b      	ldr	r3, [r7, #0]
 8014c66:	2200      	movs	r2, #0
 8014c68:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014c6a:	bf00      	nop
 8014c6c:	3710      	adds	r7, #16
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	bd80      	pop	{r7, pc}
 8014c72:	bf00      	nop
 8014c74:	0801fcac 	.word	0x0801fcac
 8014c78:	08020314 	.word	0x08020314
 8014c7c:	0801fcf0 	.word	0x0801fcf0
 8014c80:	08020330 	.word	0x08020330
 8014c84:	08020350 	.word	0x08020350
 8014c88:	08020368 	.word	0x08020368
 8014c8c:	08020384 	.word	0x08020384

08014c90 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b082      	sub	sp, #8
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d106      	bne.n	8014cac <tcp_next_iss+0x1c>
 8014c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8014cc8 <tcp_next_iss+0x38>)
 8014ca0:	f640 02af 	movw	r2, #2223	@ 0x8af
 8014ca4:	4909      	ldr	r1, [pc, #36]	@ (8014ccc <tcp_next_iss+0x3c>)
 8014ca6:	480a      	ldr	r0, [pc, #40]	@ (8014cd0 <tcp_next_iss+0x40>)
 8014ca8:	f008 fb60 	bl	801d36c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014cac:	4b09      	ldr	r3, [pc, #36]	@ (8014cd4 <tcp_next_iss+0x44>)
 8014cae:	681a      	ldr	r2, [r3, #0]
 8014cb0:	4b09      	ldr	r3, [pc, #36]	@ (8014cd8 <tcp_next_iss+0x48>)
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	4413      	add	r3, r2
 8014cb6:	4a07      	ldr	r2, [pc, #28]	@ (8014cd4 <tcp_next_iss+0x44>)
 8014cb8:	6013      	str	r3, [r2, #0]
  return iss;
 8014cba:	4b06      	ldr	r3, [pc, #24]	@ (8014cd4 <tcp_next_iss+0x44>)
 8014cbc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	3708      	adds	r7, #8
 8014cc2:	46bd      	mov	sp, r7
 8014cc4:	bd80      	pop	{r7, pc}
 8014cc6:	bf00      	nop
 8014cc8:	0801fcac 	.word	0x0801fcac
 8014ccc:	0802039c 	.word	0x0802039c
 8014cd0:	0801fcf0 	.word	0x0801fcf0
 8014cd4:	200000b4 	.word	0x200000b4
 8014cd8:	2000e45c 	.word	0x2000e45c

08014cdc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014cdc:	b580      	push	{r7, lr}
 8014cde:	b086      	sub	sp, #24
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	4603      	mov	r3, r0
 8014ce4:	60b9      	str	r1, [r7, #8]
 8014ce6:	607a      	str	r2, [r7, #4]
 8014ce8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d106      	bne.n	8014cfe <tcp_eff_send_mss_netif+0x22>
 8014cf0:	4b14      	ldr	r3, [pc, #80]	@ (8014d44 <tcp_eff_send_mss_netif+0x68>)
 8014cf2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8014cf6:	4914      	ldr	r1, [pc, #80]	@ (8014d48 <tcp_eff_send_mss_netif+0x6c>)
 8014cf8:	4814      	ldr	r0, [pc, #80]	@ (8014d4c <tcp_eff_send_mss_netif+0x70>)
 8014cfa:	f008 fb37 	bl	801d36c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014cfe:	68bb      	ldr	r3, [r7, #8]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d101      	bne.n	8014d08 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8014d04:	89fb      	ldrh	r3, [r7, #14]
 8014d06:	e019      	b.n	8014d3c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014d08:	68bb      	ldr	r3, [r7, #8]
 8014d0a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014d0c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8014d0e:	8afb      	ldrh	r3, [r7, #22]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d012      	beq.n	8014d3a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8014d14:	2328      	movs	r3, #40	@ 0x28
 8014d16:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014d18:	8afa      	ldrh	r2, [r7, #22]
 8014d1a:	8abb      	ldrh	r3, [r7, #20]
 8014d1c:	429a      	cmp	r2, r3
 8014d1e:	d904      	bls.n	8014d2a <tcp_eff_send_mss_netif+0x4e>
 8014d20:	8afa      	ldrh	r2, [r7, #22]
 8014d22:	8abb      	ldrh	r3, [r7, #20]
 8014d24:	1ad3      	subs	r3, r2, r3
 8014d26:	b29b      	uxth	r3, r3
 8014d28:	e000      	b.n	8014d2c <tcp_eff_send_mss_netif+0x50>
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8014d2e:	8a7a      	ldrh	r2, [r7, #18]
 8014d30:	89fb      	ldrh	r3, [r7, #14]
 8014d32:	4293      	cmp	r3, r2
 8014d34:	bf28      	it	cs
 8014d36:	4613      	movcs	r3, r2
 8014d38:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8014d3a:	89fb      	ldrh	r3, [r7, #14]
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	3718      	adds	r7, #24
 8014d40:	46bd      	mov	sp, r7
 8014d42:	bd80      	pop	{r7, pc}
 8014d44:	0801fcac 	.word	0x0801fcac
 8014d48:	080203b8 	.word	0x080203b8
 8014d4c:	0801fcf0 	.word	0x0801fcf0

08014d50 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b084      	sub	sp, #16
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
 8014d58:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8014d5a:	683b      	ldr	r3, [r7, #0]
 8014d5c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d119      	bne.n	8014d98 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8014d64:	4b10      	ldr	r3, [pc, #64]	@ (8014da8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8014d66:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8014d6a:	4910      	ldr	r1, [pc, #64]	@ (8014dac <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014d6c:	4810      	ldr	r0, [pc, #64]	@ (8014db0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8014d6e:	f008 fafd 	bl	801d36c <iprintf>

  while (pcb != NULL) {
 8014d72:	e011      	b.n	8014d98 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	681a      	ldr	r2, [r3, #0]
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	429a      	cmp	r2, r3
 8014d7e:	d108      	bne.n	8014d92 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	68db      	ldr	r3, [r3, #12]
 8014d84:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8014d86:	68f8      	ldr	r0, [r7, #12]
 8014d88:	f7fe fd4e 	bl	8013828 <tcp_abort>
      pcb = next;
 8014d8c:	68bb      	ldr	r3, [r7, #8]
 8014d8e:	60fb      	str	r3, [r7, #12]
 8014d90:	e002      	b.n	8014d98 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	68db      	ldr	r3, [r3, #12]
 8014d96:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d1ea      	bne.n	8014d74 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8014d9e:	bf00      	nop
 8014da0:	bf00      	nop
 8014da2:	3710      	adds	r7, #16
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bd80      	pop	{r7, pc}
 8014da8:	0801fcac 	.word	0x0801fcac
 8014dac:	080203e0 	.word	0x080203e0
 8014db0:	0801fcf0 	.word	0x0801fcf0

08014db4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b084      	sub	sp, #16
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	6078      	str	r0, [r7, #4]
 8014dbc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d02a      	beq.n	8014e1a <tcp_netif_ip_addr_changed+0x66>
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d026      	beq.n	8014e1a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014dcc:	4b15      	ldr	r3, [pc, #84]	@ (8014e24 <tcp_netif_ip_addr_changed+0x70>)
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	4619      	mov	r1, r3
 8014dd2:	6878      	ldr	r0, [r7, #4]
 8014dd4:	f7ff ffbc 	bl	8014d50 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014dd8:	4b13      	ldr	r3, [pc, #76]	@ (8014e28 <tcp_netif_ip_addr_changed+0x74>)
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	4619      	mov	r1, r3
 8014dde:	6878      	ldr	r0, [r7, #4]
 8014de0:	f7ff ffb6 	bl	8014d50 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014de4:	683b      	ldr	r3, [r7, #0]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d017      	beq.n	8014e1a <tcp_netif_ip_addr_changed+0x66>
 8014dea:	683b      	ldr	r3, [r7, #0]
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d013      	beq.n	8014e1a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014df2:	4b0e      	ldr	r3, [pc, #56]	@ (8014e2c <tcp_netif_ip_addr_changed+0x78>)
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	60fb      	str	r3, [r7, #12]
 8014df8:	e00c      	b.n	8014e14 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	681a      	ldr	r2, [r3, #0]
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	429a      	cmp	r2, r3
 8014e04:	d103      	bne.n	8014e0e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014e06:	683b      	ldr	r3, [r7, #0]
 8014e08:	681a      	ldr	r2, [r3, #0]
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	68db      	ldr	r3, [r3, #12]
 8014e12:	60fb      	str	r3, [r7, #12]
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d1ef      	bne.n	8014dfa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014e1a:	bf00      	nop
 8014e1c:	3710      	adds	r7, #16
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	bd80      	pop	{r7, pc}
 8014e22:	bf00      	nop
 8014e24:	2000e468 	.word	0x2000e468
 8014e28:	2000e460 	.word	0x2000e460
 8014e2c:	2000e464 	.word	0x2000e464

08014e30 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b082      	sub	sp, #8
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d007      	beq.n	8014e50 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014e44:	4618      	mov	r0, r3
 8014e46:	f7ff fb6f 	bl	8014528 <tcp_segs_free>
    pcb->ooseq = NULL;
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8014e50:	bf00      	nop
 8014e52:	3708      	adds	r7, #8
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}

08014e58 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8014e58:	b590      	push	{r4, r7, lr}
 8014e5a:	b08d      	sub	sp, #52	@ 0x34
 8014e5c:	af04      	add	r7, sp, #16
 8014e5e:	6078      	str	r0, [r7, #4]
 8014e60:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d105      	bne.n	8014e74 <tcp_input+0x1c>
 8014e68:	4b9b      	ldr	r3, [pc, #620]	@ (80150d8 <tcp_input+0x280>)
 8014e6a:	2283      	movs	r2, #131	@ 0x83
 8014e6c:	499b      	ldr	r1, [pc, #620]	@ (80150dc <tcp_input+0x284>)
 8014e6e:	489c      	ldr	r0, [pc, #624]	@ (80150e0 <tcp_input+0x288>)
 8014e70:	f008 fa7c 	bl	801d36c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	685b      	ldr	r3, [r3, #4]
 8014e78:	4a9a      	ldr	r2, [pc, #616]	@ (80150e4 <tcp_input+0x28c>)
 8014e7a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	895b      	ldrh	r3, [r3, #10]
 8014e80:	2b13      	cmp	r3, #19
 8014e82:	f240 83d1 	bls.w	8015628 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014e86:	4b98      	ldr	r3, [pc, #608]	@ (80150e8 <tcp_input+0x290>)
 8014e88:	695b      	ldr	r3, [r3, #20]
 8014e8a:	4a97      	ldr	r2, [pc, #604]	@ (80150e8 <tcp_input+0x290>)
 8014e8c:	6812      	ldr	r2, [r2, #0]
 8014e8e:	4611      	mov	r1, r2
 8014e90:	4618      	mov	r0, r3
 8014e92:	f006 f9df 	bl	801b254 <ip4_addr_isbroadcast_u32>
 8014e96:	4603      	mov	r3, r0
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	f040 83c7 	bne.w	801562c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8014e9e:	4b92      	ldr	r3, [pc, #584]	@ (80150e8 <tcp_input+0x290>)
 8014ea0:	695b      	ldr	r3, [r3, #20]
 8014ea2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014ea6:	2be0      	cmp	r3, #224	@ 0xe0
 8014ea8:	f000 83c0 	beq.w	801562c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8014eac:	4b8d      	ldr	r3, [pc, #564]	@ (80150e4 <tcp_input+0x28c>)
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	899b      	ldrh	r3, [r3, #12]
 8014eb2:	b29b      	uxth	r3, r3
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	f7fc fad9 	bl	801146c <lwip_htons>
 8014eba:	4603      	mov	r3, r0
 8014ebc:	0b1b      	lsrs	r3, r3, #12
 8014ebe:	b29b      	uxth	r3, r3
 8014ec0:	b2db      	uxtb	r3, r3
 8014ec2:	009b      	lsls	r3, r3, #2
 8014ec4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8014ec6:	7cbb      	ldrb	r3, [r7, #18]
 8014ec8:	2b13      	cmp	r3, #19
 8014eca:	f240 83b1 	bls.w	8015630 <tcp_input+0x7d8>
 8014ece:	7cbb      	ldrb	r3, [r7, #18]
 8014ed0:	b29a      	uxth	r2, r3
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	891b      	ldrh	r3, [r3, #8]
 8014ed6:	429a      	cmp	r2, r3
 8014ed8:	f200 83aa 	bhi.w	8015630 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8014edc:	7cbb      	ldrb	r3, [r7, #18]
 8014ede:	b29b      	uxth	r3, r3
 8014ee0:	3b14      	subs	r3, #20
 8014ee2:	b29a      	uxth	r2, r3
 8014ee4:	4b81      	ldr	r3, [pc, #516]	@ (80150ec <tcp_input+0x294>)
 8014ee6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8014ee8:	4b81      	ldr	r3, [pc, #516]	@ (80150f0 <tcp_input+0x298>)
 8014eea:	2200      	movs	r2, #0
 8014eec:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	895a      	ldrh	r2, [r3, #10]
 8014ef2:	7cbb      	ldrb	r3, [r7, #18]
 8014ef4:	b29b      	uxth	r3, r3
 8014ef6:	429a      	cmp	r2, r3
 8014ef8:	d309      	bcc.n	8014f0e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8014efa:	4b7c      	ldr	r3, [pc, #496]	@ (80150ec <tcp_input+0x294>)
 8014efc:	881a      	ldrh	r2, [r3, #0]
 8014efe:	4b7d      	ldr	r3, [pc, #500]	@ (80150f4 <tcp_input+0x29c>)
 8014f00:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8014f02:	7cbb      	ldrb	r3, [r7, #18]
 8014f04:	4619      	mov	r1, r3
 8014f06:	6878      	ldr	r0, [r7, #4]
 8014f08:	f7fd fe18 	bl	8012b3c <pbuf_remove_header>
 8014f0c:	e04e      	b.n	8014fac <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d105      	bne.n	8014f22 <tcp_input+0xca>
 8014f16:	4b70      	ldr	r3, [pc, #448]	@ (80150d8 <tcp_input+0x280>)
 8014f18:	22c2      	movs	r2, #194	@ 0xc2
 8014f1a:	4977      	ldr	r1, [pc, #476]	@ (80150f8 <tcp_input+0x2a0>)
 8014f1c:	4870      	ldr	r0, [pc, #448]	@ (80150e0 <tcp_input+0x288>)
 8014f1e:	f008 fa25 	bl	801d36c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8014f22:	2114      	movs	r1, #20
 8014f24:	6878      	ldr	r0, [r7, #4]
 8014f26:	f7fd fe09 	bl	8012b3c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	895a      	ldrh	r2, [r3, #10]
 8014f2e:	4b71      	ldr	r3, [pc, #452]	@ (80150f4 <tcp_input+0x29c>)
 8014f30:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8014f32:	4b6e      	ldr	r3, [pc, #440]	@ (80150ec <tcp_input+0x294>)
 8014f34:	881a      	ldrh	r2, [r3, #0]
 8014f36:	4b6f      	ldr	r3, [pc, #444]	@ (80150f4 <tcp_input+0x29c>)
 8014f38:	881b      	ldrh	r3, [r3, #0]
 8014f3a:	1ad3      	subs	r3, r2, r3
 8014f3c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8014f3e:	4b6d      	ldr	r3, [pc, #436]	@ (80150f4 <tcp_input+0x29c>)
 8014f40:	881b      	ldrh	r3, [r3, #0]
 8014f42:	4619      	mov	r1, r3
 8014f44:	6878      	ldr	r0, [r7, #4]
 8014f46:	f7fd fdf9 	bl	8012b3c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	895b      	ldrh	r3, [r3, #10]
 8014f50:	8a3a      	ldrh	r2, [r7, #16]
 8014f52:	429a      	cmp	r2, r3
 8014f54:	f200 836e 	bhi.w	8015634 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	685b      	ldr	r3, [r3, #4]
 8014f5e:	4a64      	ldr	r2, [pc, #400]	@ (80150f0 <tcp_input+0x298>)
 8014f60:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	8a3a      	ldrh	r2, [r7, #16]
 8014f68:	4611      	mov	r1, r2
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	f7fd fde6 	bl	8012b3c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	891a      	ldrh	r2, [r3, #8]
 8014f74:	8a3b      	ldrh	r3, [r7, #16]
 8014f76:	1ad3      	subs	r3, r2, r3
 8014f78:	b29a      	uxth	r2, r3
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	895b      	ldrh	r3, [r3, #10]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d005      	beq.n	8014f92 <tcp_input+0x13a>
 8014f86:	4b54      	ldr	r3, [pc, #336]	@ (80150d8 <tcp_input+0x280>)
 8014f88:	22df      	movs	r2, #223	@ 0xdf
 8014f8a:	495c      	ldr	r1, [pc, #368]	@ (80150fc <tcp_input+0x2a4>)
 8014f8c:	4854      	ldr	r0, [pc, #336]	@ (80150e0 <tcp_input+0x288>)
 8014f8e:	f008 f9ed 	bl	801d36c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	891a      	ldrh	r2, [r3, #8]
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	891b      	ldrh	r3, [r3, #8]
 8014f9c:	429a      	cmp	r2, r3
 8014f9e:	d005      	beq.n	8014fac <tcp_input+0x154>
 8014fa0:	4b4d      	ldr	r3, [pc, #308]	@ (80150d8 <tcp_input+0x280>)
 8014fa2:	22e0      	movs	r2, #224	@ 0xe0
 8014fa4:	4956      	ldr	r1, [pc, #344]	@ (8015100 <tcp_input+0x2a8>)
 8014fa6:	484e      	ldr	r0, [pc, #312]	@ (80150e0 <tcp_input+0x288>)
 8014fa8:	f008 f9e0 	bl	801d36c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8014fac:	4b4d      	ldr	r3, [pc, #308]	@ (80150e4 <tcp_input+0x28c>)
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	881b      	ldrh	r3, [r3, #0]
 8014fb2:	b29b      	uxth	r3, r3
 8014fb4:	4a4b      	ldr	r2, [pc, #300]	@ (80150e4 <tcp_input+0x28c>)
 8014fb6:	6814      	ldr	r4, [r2, #0]
 8014fb8:	4618      	mov	r0, r3
 8014fba:	f7fc fa57 	bl	801146c <lwip_htons>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8014fc2:	4b48      	ldr	r3, [pc, #288]	@ (80150e4 <tcp_input+0x28c>)
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	885b      	ldrh	r3, [r3, #2]
 8014fc8:	b29b      	uxth	r3, r3
 8014fca:	4a46      	ldr	r2, [pc, #280]	@ (80150e4 <tcp_input+0x28c>)
 8014fcc:	6814      	ldr	r4, [r2, #0]
 8014fce:	4618      	mov	r0, r3
 8014fd0:	f7fc fa4c 	bl	801146c <lwip_htons>
 8014fd4:	4603      	mov	r3, r0
 8014fd6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014fd8:	4b42      	ldr	r3, [pc, #264]	@ (80150e4 <tcp_input+0x28c>)
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	685b      	ldr	r3, [r3, #4]
 8014fde:	4a41      	ldr	r2, [pc, #260]	@ (80150e4 <tcp_input+0x28c>)
 8014fe0:	6814      	ldr	r4, [r2, #0]
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f7fc fa57 	bl	8011496 <lwip_htonl>
 8014fe8:	4603      	mov	r3, r0
 8014fea:	6063      	str	r3, [r4, #4]
 8014fec:	6863      	ldr	r3, [r4, #4]
 8014fee:	4a45      	ldr	r2, [pc, #276]	@ (8015104 <tcp_input+0x2ac>)
 8014ff0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8014ff2:	4b3c      	ldr	r3, [pc, #240]	@ (80150e4 <tcp_input+0x28c>)
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	689b      	ldr	r3, [r3, #8]
 8014ff8:	4a3a      	ldr	r2, [pc, #232]	@ (80150e4 <tcp_input+0x28c>)
 8014ffa:	6814      	ldr	r4, [r2, #0]
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	f7fc fa4a 	bl	8011496 <lwip_htonl>
 8015002:	4603      	mov	r3, r0
 8015004:	60a3      	str	r3, [r4, #8]
 8015006:	68a3      	ldr	r3, [r4, #8]
 8015008:	4a3f      	ldr	r2, [pc, #252]	@ (8015108 <tcp_input+0x2b0>)
 801500a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801500c:	4b35      	ldr	r3, [pc, #212]	@ (80150e4 <tcp_input+0x28c>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	89db      	ldrh	r3, [r3, #14]
 8015012:	b29b      	uxth	r3, r3
 8015014:	4a33      	ldr	r2, [pc, #204]	@ (80150e4 <tcp_input+0x28c>)
 8015016:	6814      	ldr	r4, [r2, #0]
 8015018:	4618      	mov	r0, r3
 801501a:	f7fc fa27 	bl	801146c <lwip_htons>
 801501e:	4603      	mov	r3, r0
 8015020:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8015022:	4b30      	ldr	r3, [pc, #192]	@ (80150e4 <tcp_input+0x28c>)
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	899b      	ldrh	r3, [r3, #12]
 8015028:	b29b      	uxth	r3, r3
 801502a:	4618      	mov	r0, r3
 801502c:	f7fc fa1e 	bl	801146c <lwip_htons>
 8015030:	4603      	mov	r3, r0
 8015032:	b2db      	uxtb	r3, r3
 8015034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015038:	b2da      	uxtb	r2, r3
 801503a:	4b34      	ldr	r3, [pc, #208]	@ (801510c <tcp_input+0x2b4>)
 801503c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	891a      	ldrh	r2, [r3, #8]
 8015042:	4b33      	ldr	r3, [pc, #204]	@ (8015110 <tcp_input+0x2b8>)
 8015044:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8015046:	4b31      	ldr	r3, [pc, #196]	@ (801510c <tcp_input+0x2b4>)
 8015048:	781b      	ldrb	r3, [r3, #0]
 801504a:	f003 0303 	and.w	r3, r3, #3
 801504e:	2b00      	cmp	r3, #0
 8015050:	d00c      	beq.n	801506c <tcp_input+0x214>
    tcplen++;
 8015052:	4b2f      	ldr	r3, [pc, #188]	@ (8015110 <tcp_input+0x2b8>)
 8015054:	881b      	ldrh	r3, [r3, #0]
 8015056:	3301      	adds	r3, #1
 8015058:	b29a      	uxth	r2, r3
 801505a:	4b2d      	ldr	r3, [pc, #180]	@ (8015110 <tcp_input+0x2b8>)
 801505c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	891a      	ldrh	r2, [r3, #8]
 8015062:	4b2b      	ldr	r3, [pc, #172]	@ (8015110 <tcp_input+0x2b8>)
 8015064:	881b      	ldrh	r3, [r3, #0]
 8015066:	429a      	cmp	r2, r3
 8015068:	f200 82e6 	bhi.w	8015638 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801506c:	2300      	movs	r3, #0
 801506e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015070:	4b28      	ldr	r3, [pc, #160]	@ (8015114 <tcp_input+0x2bc>)
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	61fb      	str	r3, [r7, #28]
 8015076:	e09d      	b.n	80151b4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8015078:	69fb      	ldr	r3, [r7, #28]
 801507a:	7d1b      	ldrb	r3, [r3, #20]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d105      	bne.n	801508c <tcp_input+0x234>
 8015080:	4b15      	ldr	r3, [pc, #84]	@ (80150d8 <tcp_input+0x280>)
 8015082:	22fb      	movs	r2, #251	@ 0xfb
 8015084:	4924      	ldr	r1, [pc, #144]	@ (8015118 <tcp_input+0x2c0>)
 8015086:	4816      	ldr	r0, [pc, #88]	@ (80150e0 <tcp_input+0x288>)
 8015088:	f008 f970 	bl	801d36c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801508c:	69fb      	ldr	r3, [r7, #28]
 801508e:	7d1b      	ldrb	r3, [r3, #20]
 8015090:	2b0a      	cmp	r3, #10
 8015092:	d105      	bne.n	80150a0 <tcp_input+0x248>
 8015094:	4b10      	ldr	r3, [pc, #64]	@ (80150d8 <tcp_input+0x280>)
 8015096:	22fc      	movs	r2, #252	@ 0xfc
 8015098:	4920      	ldr	r1, [pc, #128]	@ (801511c <tcp_input+0x2c4>)
 801509a:	4811      	ldr	r0, [pc, #68]	@ (80150e0 <tcp_input+0x288>)
 801509c:	f008 f966 	bl	801d36c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80150a0:	69fb      	ldr	r3, [r7, #28]
 80150a2:	7d1b      	ldrb	r3, [r3, #20]
 80150a4:	2b01      	cmp	r3, #1
 80150a6:	d105      	bne.n	80150b4 <tcp_input+0x25c>
 80150a8:	4b0b      	ldr	r3, [pc, #44]	@ (80150d8 <tcp_input+0x280>)
 80150aa:	22fd      	movs	r2, #253	@ 0xfd
 80150ac:	491c      	ldr	r1, [pc, #112]	@ (8015120 <tcp_input+0x2c8>)
 80150ae:	480c      	ldr	r0, [pc, #48]	@ (80150e0 <tcp_input+0x288>)
 80150b0:	f008 f95c 	bl	801d36c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80150b4:	69fb      	ldr	r3, [r7, #28]
 80150b6:	7a1b      	ldrb	r3, [r3, #8]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d033      	beq.n	8015124 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80150bc:	69fb      	ldr	r3, [r7, #28]
 80150be:	7a1a      	ldrb	r2, [r3, #8]
 80150c0:	4b09      	ldr	r3, [pc, #36]	@ (80150e8 <tcp_input+0x290>)
 80150c2:	685b      	ldr	r3, [r3, #4]
 80150c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80150c8:	3301      	adds	r3, #1
 80150ca:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80150cc:	429a      	cmp	r2, r3
 80150ce:	d029      	beq.n	8015124 <tcp_input+0x2cc>
      prev = pcb;
 80150d0:	69fb      	ldr	r3, [r7, #28]
 80150d2:	61bb      	str	r3, [r7, #24]
      continue;
 80150d4:	e06b      	b.n	80151ae <tcp_input+0x356>
 80150d6:	bf00      	nop
 80150d8:	08020414 	.word	0x08020414
 80150dc:	08020448 	.word	0x08020448
 80150e0:	08020460 	.word	0x08020460
 80150e4:	2000e484 	.word	0x2000e484
 80150e8:	2000b35c 	.word	0x2000b35c
 80150ec:	2000e488 	.word	0x2000e488
 80150f0:	2000e48c 	.word	0x2000e48c
 80150f4:	2000e48a 	.word	0x2000e48a
 80150f8:	08020488 	.word	0x08020488
 80150fc:	08020498 	.word	0x08020498
 8015100:	080204a4 	.word	0x080204a4
 8015104:	2000e494 	.word	0x2000e494
 8015108:	2000e498 	.word	0x2000e498
 801510c:	2000e4a0 	.word	0x2000e4a0
 8015110:	2000e49e 	.word	0x2000e49e
 8015114:	2000e468 	.word	0x2000e468
 8015118:	080204c4 	.word	0x080204c4
 801511c:	080204ec 	.word	0x080204ec
 8015120:	08020518 	.word	0x08020518
    }

    if (pcb->remote_port == tcphdr->src &&
 8015124:	69fb      	ldr	r3, [r7, #28]
 8015126:	8b1a      	ldrh	r2, [r3, #24]
 8015128:	4b72      	ldr	r3, [pc, #456]	@ (80152f4 <tcp_input+0x49c>)
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	881b      	ldrh	r3, [r3, #0]
 801512e:	b29b      	uxth	r3, r3
 8015130:	429a      	cmp	r2, r3
 8015132:	d13a      	bne.n	80151aa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8015134:	69fb      	ldr	r3, [r7, #28]
 8015136:	8ada      	ldrh	r2, [r3, #22]
 8015138:	4b6e      	ldr	r3, [pc, #440]	@ (80152f4 <tcp_input+0x49c>)
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	885b      	ldrh	r3, [r3, #2]
 801513e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8015140:	429a      	cmp	r2, r3
 8015142:	d132      	bne.n	80151aa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015144:	69fb      	ldr	r3, [r7, #28]
 8015146:	685a      	ldr	r2, [r3, #4]
 8015148:	4b6b      	ldr	r3, [pc, #428]	@ (80152f8 <tcp_input+0x4a0>)
 801514a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801514c:	429a      	cmp	r2, r3
 801514e:	d12c      	bne.n	80151aa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015150:	69fb      	ldr	r3, [r7, #28]
 8015152:	681a      	ldr	r2, [r3, #0]
 8015154:	4b68      	ldr	r3, [pc, #416]	@ (80152f8 <tcp_input+0x4a0>)
 8015156:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015158:	429a      	cmp	r2, r3
 801515a:	d126      	bne.n	80151aa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801515c:	69fb      	ldr	r3, [r7, #28]
 801515e:	68db      	ldr	r3, [r3, #12]
 8015160:	69fa      	ldr	r2, [r7, #28]
 8015162:	429a      	cmp	r2, r3
 8015164:	d106      	bne.n	8015174 <tcp_input+0x31c>
 8015166:	4b65      	ldr	r3, [pc, #404]	@ (80152fc <tcp_input+0x4a4>)
 8015168:	f240 120d 	movw	r2, #269	@ 0x10d
 801516c:	4964      	ldr	r1, [pc, #400]	@ (8015300 <tcp_input+0x4a8>)
 801516e:	4865      	ldr	r0, [pc, #404]	@ (8015304 <tcp_input+0x4ac>)
 8015170:	f008 f8fc 	bl	801d36c <iprintf>
      if (prev != NULL) {
 8015174:	69bb      	ldr	r3, [r7, #24]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d00a      	beq.n	8015190 <tcp_input+0x338>
        prev->next = pcb->next;
 801517a:	69fb      	ldr	r3, [r7, #28]
 801517c:	68da      	ldr	r2, [r3, #12]
 801517e:	69bb      	ldr	r3, [r7, #24]
 8015180:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8015182:	4b61      	ldr	r3, [pc, #388]	@ (8015308 <tcp_input+0x4b0>)
 8015184:	681a      	ldr	r2, [r3, #0]
 8015186:	69fb      	ldr	r3, [r7, #28]
 8015188:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801518a:	4a5f      	ldr	r2, [pc, #380]	@ (8015308 <tcp_input+0x4b0>)
 801518c:	69fb      	ldr	r3, [r7, #28]
 801518e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8015190:	69fb      	ldr	r3, [r7, #28]
 8015192:	68db      	ldr	r3, [r3, #12]
 8015194:	69fa      	ldr	r2, [r7, #28]
 8015196:	429a      	cmp	r2, r3
 8015198:	d111      	bne.n	80151be <tcp_input+0x366>
 801519a:	4b58      	ldr	r3, [pc, #352]	@ (80152fc <tcp_input+0x4a4>)
 801519c:	f240 1215 	movw	r2, #277	@ 0x115
 80151a0:	495a      	ldr	r1, [pc, #360]	@ (801530c <tcp_input+0x4b4>)
 80151a2:	4858      	ldr	r0, [pc, #352]	@ (8015304 <tcp_input+0x4ac>)
 80151a4:	f008 f8e2 	bl	801d36c <iprintf>
      break;
 80151a8:	e009      	b.n	80151be <tcp_input+0x366>
    }
    prev = pcb;
 80151aa:	69fb      	ldr	r3, [r7, #28]
 80151ac:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80151ae:	69fb      	ldr	r3, [r7, #28]
 80151b0:	68db      	ldr	r3, [r3, #12]
 80151b2:	61fb      	str	r3, [r7, #28]
 80151b4:	69fb      	ldr	r3, [r7, #28]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	f47f af5e 	bne.w	8015078 <tcp_input+0x220>
 80151bc:	e000      	b.n	80151c0 <tcp_input+0x368>
      break;
 80151be:	bf00      	nop
  }

  if (pcb == NULL) {
 80151c0:	69fb      	ldr	r3, [r7, #28]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	f040 80aa 	bne.w	801531c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80151c8:	4b51      	ldr	r3, [pc, #324]	@ (8015310 <tcp_input+0x4b8>)
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	61fb      	str	r3, [r7, #28]
 80151ce:	e03f      	b.n	8015250 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80151d0:	69fb      	ldr	r3, [r7, #28]
 80151d2:	7d1b      	ldrb	r3, [r3, #20]
 80151d4:	2b0a      	cmp	r3, #10
 80151d6:	d006      	beq.n	80151e6 <tcp_input+0x38e>
 80151d8:	4b48      	ldr	r3, [pc, #288]	@ (80152fc <tcp_input+0x4a4>)
 80151da:	f240 121f 	movw	r2, #287	@ 0x11f
 80151de:	494d      	ldr	r1, [pc, #308]	@ (8015314 <tcp_input+0x4bc>)
 80151e0:	4848      	ldr	r0, [pc, #288]	@ (8015304 <tcp_input+0x4ac>)
 80151e2:	f008 f8c3 	bl	801d36c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80151e6:	69fb      	ldr	r3, [r7, #28]
 80151e8:	7a1b      	ldrb	r3, [r3, #8]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d009      	beq.n	8015202 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80151ee:	69fb      	ldr	r3, [r7, #28]
 80151f0:	7a1a      	ldrb	r2, [r3, #8]
 80151f2:	4b41      	ldr	r3, [pc, #260]	@ (80152f8 <tcp_input+0x4a0>)
 80151f4:	685b      	ldr	r3, [r3, #4]
 80151f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80151fa:	3301      	adds	r3, #1
 80151fc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80151fe:	429a      	cmp	r2, r3
 8015200:	d122      	bne.n	8015248 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8015202:	69fb      	ldr	r3, [r7, #28]
 8015204:	8b1a      	ldrh	r2, [r3, #24]
 8015206:	4b3b      	ldr	r3, [pc, #236]	@ (80152f4 <tcp_input+0x49c>)
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	881b      	ldrh	r3, [r3, #0]
 801520c:	b29b      	uxth	r3, r3
 801520e:	429a      	cmp	r2, r3
 8015210:	d11b      	bne.n	801524a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8015212:	69fb      	ldr	r3, [r7, #28]
 8015214:	8ada      	ldrh	r2, [r3, #22]
 8015216:	4b37      	ldr	r3, [pc, #220]	@ (80152f4 <tcp_input+0x49c>)
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	885b      	ldrh	r3, [r3, #2]
 801521c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801521e:	429a      	cmp	r2, r3
 8015220:	d113      	bne.n	801524a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015222:	69fb      	ldr	r3, [r7, #28]
 8015224:	685a      	ldr	r2, [r3, #4]
 8015226:	4b34      	ldr	r3, [pc, #208]	@ (80152f8 <tcp_input+0x4a0>)
 8015228:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801522a:	429a      	cmp	r2, r3
 801522c:	d10d      	bne.n	801524a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801522e:	69fb      	ldr	r3, [r7, #28]
 8015230:	681a      	ldr	r2, [r3, #0]
 8015232:	4b31      	ldr	r3, [pc, #196]	@ (80152f8 <tcp_input+0x4a0>)
 8015234:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015236:	429a      	cmp	r2, r3
 8015238:	d107      	bne.n	801524a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801523a:	69f8      	ldr	r0, [r7, #28]
 801523c:	f000 fb56 	bl	80158ec <tcp_timewait_input>
        }
        pbuf_free(p);
 8015240:	6878      	ldr	r0, [r7, #4]
 8015242:	f7fd fd01 	bl	8012c48 <pbuf_free>
        return;
 8015246:	e1fd      	b.n	8015644 <tcp_input+0x7ec>
        continue;
 8015248:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801524a:	69fb      	ldr	r3, [r7, #28]
 801524c:	68db      	ldr	r3, [r3, #12]
 801524e:	61fb      	str	r3, [r7, #28]
 8015250:	69fb      	ldr	r3, [r7, #28]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d1bc      	bne.n	80151d0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8015256:	2300      	movs	r3, #0
 8015258:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801525a:	4b2f      	ldr	r3, [pc, #188]	@ (8015318 <tcp_input+0x4c0>)
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	617b      	str	r3, [r7, #20]
 8015260:	e02a      	b.n	80152b8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015262:	697b      	ldr	r3, [r7, #20]
 8015264:	7a1b      	ldrb	r3, [r3, #8]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d00c      	beq.n	8015284 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801526a:	697b      	ldr	r3, [r7, #20]
 801526c:	7a1a      	ldrb	r2, [r3, #8]
 801526e:	4b22      	ldr	r3, [pc, #136]	@ (80152f8 <tcp_input+0x4a0>)
 8015270:	685b      	ldr	r3, [r3, #4]
 8015272:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015276:	3301      	adds	r3, #1
 8015278:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801527a:	429a      	cmp	r2, r3
 801527c:	d002      	beq.n	8015284 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801527e:	697b      	ldr	r3, [r7, #20]
 8015280:	61bb      	str	r3, [r7, #24]
        continue;
 8015282:	e016      	b.n	80152b2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8015284:	697b      	ldr	r3, [r7, #20]
 8015286:	8ada      	ldrh	r2, [r3, #22]
 8015288:	4b1a      	ldr	r3, [pc, #104]	@ (80152f4 <tcp_input+0x49c>)
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	885b      	ldrh	r3, [r3, #2]
 801528e:	b29b      	uxth	r3, r3
 8015290:	429a      	cmp	r2, r3
 8015292:	d10c      	bne.n	80152ae <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8015294:	697b      	ldr	r3, [r7, #20]
 8015296:	681a      	ldr	r2, [r3, #0]
 8015298:	4b17      	ldr	r3, [pc, #92]	@ (80152f8 <tcp_input+0x4a0>)
 801529a:	695b      	ldr	r3, [r3, #20]
 801529c:	429a      	cmp	r2, r3
 801529e:	d00f      	beq.n	80152c0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80152a0:	697b      	ldr	r3, [r7, #20]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d00d      	beq.n	80152c2 <tcp_input+0x46a>
 80152a6:	697b      	ldr	r3, [r7, #20]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d009      	beq.n	80152c2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80152ae:	697b      	ldr	r3, [r7, #20]
 80152b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80152b2:	697b      	ldr	r3, [r7, #20]
 80152b4:	68db      	ldr	r3, [r3, #12]
 80152b6:	617b      	str	r3, [r7, #20]
 80152b8:	697b      	ldr	r3, [r7, #20]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d1d1      	bne.n	8015262 <tcp_input+0x40a>
 80152be:	e000      	b.n	80152c2 <tcp_input+0x46a>
            break;
 80152c0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80152c2:	697b      	ldr	r3, [r7, #20]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d029      	beq.n	801531c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80152c8:	69bb      	ldr	r3, [r7, #24]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d00a      	beq.n	80152e4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80152ce:	697b      	ldr	r3, [r7, #20]
 80152d0:	68da      	ldr	r2, [r3, #12]
 80152d2:	69bb      	ldr	r3, [r7, #24]
 80152d4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80152d6:	4b10      	ldr	r3, [pc, #64]	@ (8015318 <tcp_input+0x4c0>)
 80152d8:	681a      	ldr	r2, [r3, #0]
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80152de:	4a0e      	ldr	r2, [pc, #56]	@ (8015318 <tcp_input+0x4c0>)
 80152e0:	697b      	ldr	r3, [r7, #20]
 80152e2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80152e4:	6978      	ldr	r0, [r7, #20]
 80152e6:	f000 fa03 	bl	80156f0 <tcp_listen_input>
      }
      pbuf_free(p);
 80152ea:	6878      	ldr	r0, [r7, #4]
 80152ec:	f7fd fcac 	bl	8012c48 <pbuf_free>
      return;
 80152f0:	e1a8      	b.n	8015644 <tcp_input+0x7ec>
 80152f2:	bf00      	nop
 80152f4:	2000e484 	.word	0x2000e484
 80152f8:	2000b35c 	.word	0x2000b35c
 80152fc:	08020414 	.word	0x08020414
 8015300:	08020540 	.word	0x08020540
 8015304:	08020460 	.word	0x08020460
 8015308:	2000e468 	.word	0x2000e468
 801530c:	0802056c 	.word	0x0802056c
 8015310:	2000e46c 	.word	0x2000e46c
 8015314:	08020598 	.word	0x08020598
 8015318:	2000e464 	.word	0x2000e464
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801531c:	69fb      	ldr	r3, [r7, #28]
 801531e:	2b00      	cmp	r3, #0
 8015320:	f000 8158 	beq.w	80155d4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8015324:	4b95      	ldr	r3, [pc, #596]	@ (801557c <tcp_input+0x724>)
 8015326:	2200      	movs	r2, #0
 8015328:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	891a      	ldrh	r2, [r3, #8]
 801532e:	4b93      	ldr	r3, [pc, #588]	@ (801557c <tcp_input+0x724>)
 8015330:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8015332:	4a92      	ldr	r2, [pc, #584]	@ (801557c <tcp_input+0x724>)
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8015338:	4b91      	ldr	r3, [pc, #580]	@ (8015580 <tcp_input+0x728>)
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	4a8f      	ldr	r2, [pc, #572]	@ (801557c <tcp_input+0x724>)
 801533e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8015340:	4b90      	ldr	r3, [pc, #576]	@ (8015584 <tcp_input+0x72c>)
 8015342:	2200      	movs	r2, #0
 8015344:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8015346:	4b90      	ldr	r3, [pc, #576]	@ (8015588 <tcp_input+0x730>)
 8015348:	2200      	movs	r2, #0
 801534a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801534c:	4b8f      	ldr	r3, [pc, #572]	@ (801558c <tcp_input+0x734>)
 801534e:	2200      	movs	r2, #0
 8015350:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8015352:	4b8f      	ldr	r3, [pc, #572]	@ (8015590 <tcp_input+0x738>)
 8015354:	781b      	ldrb	r3, [r3, #0]
 8015356:	f003 0308 	and.w	r3, r3, #8
 801535a:	2b00      	cmp	r3, #0
 801535c:	d006      	beq.n	801536c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	7b5b      	ldrb	r3, [r3, #13]
 8015362:	f043 0301 	orr.w	r3, r3, #1
 8015366:	b2da      	uxtb	r2, r3
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801536c:	69fb      	ldr	r3, [r7, #28]
 801536e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015370:	2b00      	cmp	r3, #0
 8015372:	d017      	beq.n	80153a4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015374:	69f8      	ldr	r0, [r7, #28]
 8015376:	f7ff f85b 	bl	8014430 <tcp_process_refused_data>
 801537a:	4603      	mov	r3, r0
 801537c:	f113 0f0d 	cmn.w	r3, #13
 8015380:	d007      	beq.n	8015392 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015382:	69fb      	ldr	r3, [r7, #28]
 8015384:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015386:	2b00      	cmp	r3, #0
 8015388:	d00c      	beq.n	80153a4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801538a:	4b82      	ldr	r3, [pc, #520]	@ (8015594 <tcp_input+0x73c>)
 801538c:	881b      	ldrh	r3, [r3, #0]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d008      	beq.n	80153a4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8015392:	69fb      	ldr	r3, [r7, #28]
 8015394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015396:	2b00      	cmp	r3, #0
 8015398:	f040 80e3 	bne.w	8015562 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801539c:	69f8      	ldr	r0, [r7, #28]
 801539e:	f003 fdff 	bl	8018fa0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80153a2:	e0de      	b.n	8015562 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80153a4:	4a7c      	ldr	r2, [pc, #496]	@ (8015598 <tcp_input+0x740>)
 80153a6:	69fb      	ldr	r3, [r7, #28]
 80153a8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80153aa:	69f8      	ldr	r0, [r7, #28]
 80153ac:	f000 fb18 	bl	80159e0 <tcp_process>
 80153b0:	4603      	mov	r3, r0
 80153b2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80153b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80153b8:	f113 0f0d 	cmn.w	r3, #13
 80153bc:	f000 80d3 	beq.w	8015566 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80153c0:	4b71      	ldr	r3, [pc, #452]	@ (8015588 <tcp_input+0x730>)
 80153c2:	781b      	ldrb	r3, [r3, #0]
 80153c4:	f003 0308 	and.w	r3, r3, #8
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d015      	beq.n	80153f8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80153cc:	69fb      	ldr	r3, [r7, #28]
 80153ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d008      	beq.n	80153e8 <tcp_input+0x590>
 80153d6:	69fb      	ldr	r3, [r7, #28]
 80153d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80153dc:	69fa      	ldr	r2, [r7, #28]
 80153de:	6912      	ldr	r2, [r2, #16]
 80153e0:	f06f 010d 	mvn.w	r1, #13
 80153e4:	4610      	mov	r0, r2
 80153e6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80153e8:	69f9      	ldr	r1, [r7, #28]
 80153ea:	486c      	ldr	r0, [pc, #432]	@ (801559c <tcp_input+0x744>)
 80153ec:	f7ff fbbc 	bl	8014b68 <tcp_pcb_remove>
        tcp_free(pcb);
 80153f0:	69f8      	ldr	r0, [r7, #28]
 80153f2:	f7fd fed5 	bl	80131a0 <tcp_free>
 80153f6:	e0da      	b.n	80155ae <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80153f8:	2300      	movs	r3, #0
 80153fa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80153fc:	4b63      	ldr	r3, [pc, #396]	@ (801558c <tcp_input+0x734>)
 80153fe:	881b      	ldrh	r3, [r3, #0]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d01d      	beq.n	8015440 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8015404:	4b61      	ldr	r3, [pc, #388]	@ (801558c <tcp_input+0x734>)
 8015406:	881b      	ldrh	r3, [r3, #0]
 8015408:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801540a:	69fb      	ldr	r3, [r7, #28]
 801540c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015410:	2b00      	cmp	r3, #0
 8015412:	d00a      	beq.n	801542a <tcp_input+0x5d2>
 8015414:	69fb      	ldr	r3, [r7, #28]
 8015416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801541a:	69fa      	ldr	r2, [r7, #28]
 801541c:	6910      	ldr	r0, [r2, #16]
 801541e:	89fa      	ldrh	r2, [r7, #14]
 8015420:	69f9      	ldr	r1, [r7, #28]
 8015422:	4798      	blx	r3
 8015424:	4603      	mov	r3, r0
 8015426:	74fb      	strb	r3, [r7, #19]
 8015428:	e001      	b.n	801542e <tcp_input+0x5d6>
 801542a:	2300      	movs	r3, #0
 801542c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801542e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015432:	f113 0f0d 	cmn.w	r3, #13
 8015436:	f000 8098 	beq.w	801556a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801543a:	4b54      	ldr	r3, [pc, #336]	@ (801558c <tcp_input+0x734>)
 801543c:	2200      	movs	r2, #0
 801543e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8015440:	69f8      	ldr	r0, [r7, #28]
 8015442:	f000 f915 	bl	8015670 <tcp_input_delayed_close>
 8015446:	4603      	mov	r3, r0
 8015448:	2b00      	cmp	r3, #0
 801544a:	f040 8090 	bne.w	801556e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801544e:	4b4d      	ldr	r3, [pc, #308]	@ (8015584 <tcp_input+0x72c>)
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d041      	beq.n	80154da <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8015456:	69fb      	ldr	r3, [r7, #28]
 8015458:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801545a:	2b00      	cmp	r3, #0
 801545c:	d006      	beq.n	801546c <tcp_input+0x614>
 801545e:	4b50      	ldr	r3, [pc, #320]	@ (80155a0 <tcp_input+0x748>)
 8015460:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8015464:	494f      	ldr	r1, [pc, #316]	@ (80155a4 <tcp_input+0x74c>)
 8015466:	4850      	ldr	r0, [pc, #320]	@ (80155a8 <tcp_input+0x750>)
 8015468:	f007 ff80 	bl	801d36c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801546c:	69fb      	ldr	r3, [r7, #28]
 801546e:	8b5b      	ldrh	r3, [r3, #26]
 8015470:	f003 0310 	and.w	r3, r3, #16
 8015474:	2b00      	cmp	r3, #0
 8015476:	d008      	beq.n	801548a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8015478:	4b42      	ldr	r3, [pc, #264]	@ (8015584 <tcp_input+0x72c>)
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	4618      	mov	r0, r3
 801547e:	f7fd fbe3 	bl	8012c48 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8015482:	69f8      	ldr	r0, [r7, #28]
 8015484:	f7fe f9d0 	bl	8013828 <tcp_abort>
            goto aborted;
 8015488:	e091      	b.n	80155ae <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801548a:	69fb      	ldr	r3, [r7, #28]
 801548c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015490:	2b00      	cmp	r3, #0
 8015492:	d00c      	beq.n	80154ae <tcp_input+0x656>
 8015494:	69fb      	ldr	r3, [r7, #28]
 8015496:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801549a:	69fb      	ldr	r3, [r7, #28]
 801549c:	6918      	ldr	r0, [r3, #16]
 801549e:	4b39      	ldr	r3, [pc, #228]	@ (8015584 <tcp_input+0x72c>)
 80154a0:	681a      	ldr	r2, [r3, #0]
 80154a2:	2300      	movs	r3, #0
 80154a4:	69f9      	ldr	r1, [r7, #28]
 80154a6:	47a0      	blx	r4
 80154a8:	4603      	mov	r3, r0
 80154aa:	74fb      	strb	r3, [r7, #19]
 80154ac:	e008      	b.n	80154c0 <tcp_input+0x668>
 80154ae:	4b35      	ldr	r3, [pc, #212]	@ (8015584 <tcp_input+0x72c>)
 80154b0:	681a      	ldr	r2, [r3, #0]
 80154b2:	2300      	movs	r3, #0
 80154b4:	69f9      	ldr	r1, [r7, #28]
 80154b6:	2000      	movs	r0, #0
 80154b8:	f7ff f890 	bl	80145dc <tcp_recv_null>
 80154bc:	4603      	mov	r3, r0
 80154be:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80154c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80154c4:	f113 0f0d 	cmn.w	r3, #13
 80154c8:	d053      	beq.n	8015572 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80154ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d003      	beq.n	80154da <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80154d2:	4b2c      	ldr	r3, [pc, #176]	@ (8015584 <tcp_input+0x72c>)
 80154d4:	681a      	ldr	r2, [r3, #0]
 80154d6:	69fb      	ldr	r3, [r7, #28]
 80154d8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80154da:	4b2b      	ldr	r3, [pc, #172]	@ (8015588 <tcp_input+0x730>)
 80154dc:	781b      	ldrb	r3, [r3, #0]
 80154de:	f003 0320 	and.w	r3, r3, #32
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d030      	beq.n	8015548 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80154e6:	69fb      	ldr	r3, [r7, #28]
 80154e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d009      	beq.n	8015502 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80154ee:	69fb      	ldr	r3, [r7, #28]
 80154f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80154f2:	7b5a      	ldrb	r2, [r3, #13]
 80154f4:	69fb      	ldr	r3, [r7, #28]
 80154f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80154f8:	f042 0220 	orr.w	r2, r2, #32
 80154fc:	b2d2      	uxtb	r2, r2
 80154fe:	735a      	strb	r2, [r3, #13]
 8015500:	e022      	b.n	8015548 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015502:	69fb      	ldr	r3, [r7, #28]
 8015504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015506:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801550a:	d005      	beq.n	8015518 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801550c:	69fb      	ldr	r3, [r7, #28]
 801550e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015510:	3301      	adds	r3, #1
 8015512:	b29a      	uxth	r2, r3
 8015514:	69fb      	ldr	r3, [r7, #28]
 8015516:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8015518:	69fb      	ldr	r3, [r7, #28]
 801551a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801551e:	2b00      	cmp	r3, #0
 8015520:	d00b      	beq.n	801553a <tcp_input+0x6e2>
 8015522:	69fb      	ldr	r3, [r7, #28]
 8015524:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015528:	69fb      	ldr	r3, [r7, #28]
 801552a:	6918      	ldr	r0, [r3, #16]
 801552c:	2300      	movs	r3, #0
 801552e:	2200      	movs	r2, #0
 8015530:	69f9      	ldr	r1, [r7, #28]
 8015532:	47a0      	blx	r4
 8015534:	4603      	mov	r3, r0
 8015536:	74fb      	strb	r3, [r7, #19]
 8015538:	e001      	b.n	801553e <tcp_input+0x6e6>
 801553a:	2300      	movs	r3, #0
 801553c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801553e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015542:	f113 0f0d 	cmn.w	r3, #13
 8015546:	d016      	beq.n	8015576 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8015548:	4b13      	ldr	r3, [pc, #76]	@ (8015598 <tcp_input+0x740>)
 801554a:	2200      	movs	r2, #0
 801554c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801554e:	69f8      	ldr	r0, [r7, #28]
 8015550:	f000 f88e 	bl	8015670 <tcp_input_delayed_close>
 8015554:	4603      	mov	r3, r0
 8015556:	2b00      	cmp	r3, #0
 8015558:	d128      	bne.n	80155ac <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801555a:	69f8      	ldr	r0, [r7, #28]
 801555c:	f002 ff1a 	bl	8018394 <tcp_output>
 8015560:	e025      	b.n	80155ae <tcp_input+0x756>
        goto aborted;
 8015562:	bf00      	nop
 8015564:	e023      	b.n	80155ae <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8015566:	bf00      	nop
 8015568:	e021      	b.n	80155ae <tcp_input+0x756>
              goto aborted;
 801556a:	bf00      	nop
 801556c:	e01f      	b.n	80155ae <tcp_input+0x756>
          goto aborted;
 801556e:	bf00      	nop
 8015570:	e01d      	b.n	80155ae <tcp_input+0x756>
            goto aborted;
 8015572:	bf00      	nop
 8015574:	e01b      	b.n	80155ae <tcp_input+0x756>
              goto aborted;
 8015576:	bf00      	nop
 8015578:	e019      	b.n	80155ae <tcp_input+0x756>
 801557a:	bf00      	nop
 801557c:	2000e474 	.word	0x2000e474
 8015580:	2000e484 	.word	0x2000e484
 8015584:	2000e4a4 	.word	0x2000e4a4
 8015588:	2000e4a1 	.word	0x2000e4a1
 801558c:	2000e49c 	.word	0x2000e49c
 8015590:	2000e4a0 	.word	0x2000e4a0
 8015594:	2000e49e 	.word	0x2000e49e
 8015598:	2000e4a8 	.word	0x2000e4a8
 801559c:	2000e468 	.word	0x2000e468
 80155a0:	08020414 	.word	0x08020414
 80155a4:	080205c8 	.word	0x080205c8
 80155a8:	08020460 	.word	0x08020460
          goto aborted;
 80155ac:	bf00      	nop
    tcp_input_pcb = NULL;
 80155ae:	4b27      	ldr	r3, [pc, #156]	@ (801564c <tcp_input+0x7f4>)
 80155b0:	2200      	movs	r2, #0
 80155b2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80155b4:	4b26      	ldr	r3, [pc, #152]	@ (8015650 <tcp_input+0x7f8>)
 80155b6:	2200      	movs	r2, #0
 80155b8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80155ba:	4b26      	ldr	r3, [pc, #152]	@ (8015654 <tcp_input+0x7fc>)
 80155bc:	685b      	ldr	r3, [r3, #4]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d03f      	beq.n	8015642 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80155c2:	4b24      	ldr	r3, [pc, #144]	@ (8015654 <tcp_input+0x7fc>)
 80155c4:	685b      	ldr	r3, [r3, #4]
 80155c6:	4618      	mov	r0, r3
 80155c8:	f7fd fb3e 	bl	8012c48 <pbuf_free>
      inseg.p = NULL;
 80155cc:	4b21      	ldr	r3, [pc, #132]	@ (8015654 <tcp_input+0x7fc>)
 80155ce:	2200      	movs	r2, #0
 80155d0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80155d2:	e036      	b.n	8015642 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80155d4:	4b20      	ldr	r3, [pc, #128]	@ (8015658 <tcp_input+0x800>)
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	899b      	ldrh	r3, [r3, #12]
 80155da:	b29b      	uxth	r3, r3
 80155dc:	4618      	mov	r0, r3
 80155de:	f7fb ff45 	bl	801146c <lwip_htons>
 80155e2:	4603      	mov	r3, r0
 80155e4:	b2db      	uxtb	r3, r3
 80155e6:	f003 0304 	and.w	r3, r3, #4
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d118      	bne.n	8015620 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80155ee:	4b1b      	ldr	r3, [pc, #108]	@ (801565c <tcp_input+0x804>)
 80155f0:	6819      	ldr	r1, [r3, #0]
 80155f2:	4b1b      	ldr	r3, [pc, #108]	@ (8015660 <tcp_input+0x808>)
 80155f4:	881b      	ldrh	r3, [r3, #0]
 80155f6:	461a      	mov	r2, r3
 80155f8:	4b1a      	ldr	r3, [pc, #104]	@ (8015664 <tcp_input+0x80c>)
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80155fe:	4b16      	ldr	r3, [pc, #88]	@ (8015658 <tcp_input+0x800>)
 8015600:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015602:	885b      	ldrh	r3, [r3, #2]
 8015604:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015606:	4a14      	ldr	r2, [pc, #80]	@ (8015658 <tcp_input+0x800>)
 8015608:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801560a:	8812      	ldrh	r2, [r2, #0]
 801560c:	b292      	uxth	r2, r2
 801560e:	9202      	str	r2, [sp, #8]
 8015610:	9301      	str	r3, [sp, #4]
 8015612:	4b15      	ldr	r3, [pc, #84]	@ (8015668 <tcp_input+0x810>)
 8015614:	9300      	str	r3, [sp, #0]
 8015616:	4b15      	ldr	r3, [pc, #84]	@ (801566c <tcp_input+0x814>)
 8015618:	4602      	mov	r2, r0
 801561a:	2000      	movs	r0, #0
 801561c:	f003 fc6e 	bl	8018efc <tcp_rst>
    pbuf_free(p);
 8015620:	6878      	ldr	r0, [r7, #4]
 8015622:	f7fd fb11 	bl	8012c48 <pbuf_free>
  return;
 8015626:	e00c      	b.n	8015642 <tcp_input+0x7ea>
    goto dropped;
 8015628:	bf00      	nop
 801562a:	e006      	b.n	801563a <tcp_input+0x7e2>
    goto dropped;
 801562c:	bf00      	nop
 801562e:	e004      	b.n	801563a <tcp_input+0x7e2>
    goto dropped;
 8015630:	bf00      	nop
 8015632:	e002      	b.n	801563a <tcp_input+0x7e2>
      goto dropped;
 8015634:	bf00      	nop
 8015636:	e000      	b.n	801563a <tcp_input+0x7e2>
      goto dropped;
 8015638:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801563a:	6878      	ldr	r0, [r7, #4]
 801563c:	f7fd fb04 	bl	8012c48 <pbuf_free>
 8015640:	e000      	b.n	8015644 <tcp_input+0x7ec>
  return;
 8015642:	bf00      	nop
}
 8015644:	3724      	adds	r7, #36	@ 0x24
 8015646:	46bd      	mov	sp, r7
 8015648:	bd90      	pop	{r4, r7, pc}
 801564a:	bf00      	nop
 801564c:	2000e4a8 	.word	0x2000e4a8
 8015650:	2000e4a4 	.word	0x2000e4a4
 8015654:	2000e474 	.word	0x2000e474
 8015658:	2000e484 	.word	0x2000e484
 801565c:	2000e498 	.word	0x2000e498
 8015660:	2000e49e 	.word	0x2000e49e
 8015664:	2000e494 	.word	0x2000e494
 8015668:	2000b36c 	.word	0x2000b36c
 801566c:	2000b370 	.word	0x2000b370

08015670 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b082      	sub	sp, #8
 8015674:	af00      	add	r7, sp, #0
 8015676:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d106      	bne.n	801568c <tcp_input_delayed_close+0x1c>
 801567e:	4b17      	ldr	r3, [pc, #92]	@ (80156dc <tcp_input_delayed_close+0x6c>)
 8015680:	f240 225a 	movw	r2, #602	@ 0x25a
 8015684:	4916      	ldr	r1, [pc, #88]	@ (80156e0 <tcp_input_delayed_close+0x70>)
 8015686:	4817      	ldr	r0, [pc, #92]	@ (80156e4 <tcp_input_delayed_close+0x74>)
 8015688:	f007 fe70 	bl	801d36c <iprintf>

  if (recv_flags & TF_CLOSED) {
 801568c:	4b16      	ldr	r3, [pc, #88]	@ (80156e8 <tcp_input_delayed_close+0x78>)
 801568e:	781b      	ldrb	r3, [r3, #0]
 8015690:	f003 0310 	and.w	r3, r3, #16
 8015694:	2b00      	cmp	r3, #0
 8015696:	d01c      	beq.n	80156d2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	8b5b      	ldrh	r3, [r3, #26]
 801569c:	f003 0310 	and.w	r3, r3, #16
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d10d      	bne.n	80156c0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d008      	beq.n	80156c0 <tcp_input_delayed_close+0x50>
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80156b4:	687a      	ldr	r2, [r7, #4]
 80156b6:	6912      	ldr	r2, [r2, #16]
 80156b8:	f06f 010e 	mvn.w	r1, #14
 80156bc:	4610      	mov	r0, r2
 80156be:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80156c0:	6879      	ldr	r1, [r7, #4]
 80156c2:	480a      	ldr	r0, [pc, #40]	@ (80156ec <tcp_input_delayed_close+0x7c>)
 80156c4:	f7ff fa50 	bl	8014b68 <tcp_pcb_remove>
    tcp_free(pcb);
 80156c8:	6878      	ldr	r0, [r7, #4]
 80156ca:	f7fd fd69 	bl	80131a0 <tcp_free>
    return 1;
 80156ce:	2301      	movs	r3, #1
 80156d0:	e000      	b.n	80156d4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80156d2:	2300      	movs	r3, #0
}
 80156d4:	4618      	mov	r0, r3
 80156d6:	3708      	adds	r7, #8
 80156d8:	46bd      	mov	sp, r7
 80156da:	bd80      	pop	{r7, pc}
 80156dc:	08020414 	.word	0x08020414
 80156e0:	080205e4 	.word	0x080205e4
 80156e4:	08020460 	.word	0x08020460
 80156e8:	2000e4a1 	.word	0x2000e4a1
 80156ec:	2000e468 	.word	0x2000e468

080156f0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80156f0:	b590      	push	{r4, r7, lr}
 80156f2:	b08b      	sub	sp, #44	@ 0x2c
 80156f4:	af04      	add	r7, sp, #16
 80156f6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80156f8:	4b6f      	ldr	r3, [pc, #444]	@ (80158b8 <tcp_listen_input+0x1c8>)
 80156fa:	781b      	ldrb	r3, [r3, #0]
 80156fc:	f003 0304 	and.w	r3, r3, #4
 8015700:	2b00      	cmp	r3, #0
 8015702:	f040 80d2 	bne.w	80158aa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d106      	bne.n	801571a <tcp_listen_input+0x2a>
 801570c:	4b6b      	ldr	r3, [pc, #428]	@ (80158bc <tcp_listen_input+0x1cc>)
 801570e:	f240 2281 	movw	r2, #641	@ 0x281
 8015712:	496b      	ldr	r1, [pc, #428]	@ (80158c0 <tcp_listen_input+0x1d0>)
 8015714:	486b      	ldr	r0, [pc, #428]	@ (80158c4 <tcp_listen_input+0x1d4>)
 8015716:	f007 fe29 	bl	801d36c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801571a:	4b67      	ldr	r3, [pc, #412]	@ (80158b8 <tcp_listen_input+0x1c8>)
 801571c:	781b      	ldrb	r3, [r3, #0]
 801571e:	f003 0310 	and.w	r3, r3, #16
 8015722:	2b00      	cmp	r3, #0
 8015724:	d019      	beq.n	801575a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015726:	4b68      	ldr	r3, [pc, #416]	@ (80158c8 <tcp_listen_input+0x1d8>)
 8015728:	6819      	ldr	r1, [r3, #0]
 801572a:	4b68      	ldr	r3, [pc, #416]	@ (80158cc <tcp_listen_input+0x1dc>)
 801572c:	881b      	ldrh	r3, [r3, #0]
 801572e:	461a      	mov	r2, r3
 8015730:	4b67      	ldr	r3, [pc, #412]	@ (80158d0 <tcp_listen_input+0x1e0>)
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015736:	4b67      	ldr	r3, [pc, #412]	@ (80158d4 <tcp_listen_input+0x1e4>)
 8015738:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801573a:	885b      	ldrh	r3, [r3, #2]
 801573c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801573e:	4a65      	ldr	r2, [pc, #404]	@ (80158d4 <tcp_listen_input+0x1e4>)
 8015740:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015742:	8812      	ldrh	r2, [r2, #0]
 8015744:	b292      	uxth	r2, r2
 8015746:	9202      	str	r2, [sp, #8]
 8015748:	9301      	str	r3, [sp, #4]
 801574a:	4b63      	ldr	r3, [pc, #396]	@ (80158d8 <tcp_listen_input+0x1e8>)
 801574c:	9300      	str	r3, [sp, #0]
 801574e:	4b63      	ldr	r3, [pc, #396]	@ (80158dc <tcp_listen_input+0x1ec>)
 8015750:	4602      	mov	r2, r0
 8015752:	6878      	ldr	r0, [r7, #4]
 8015754:	f003 fbd2 	bl	8018efc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8015758:	e0a9      	b.n	80158ae <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801575a:	4b57      	ldr	r3, [pc, #348]	@ (80158b8 <tcp_listen_input+0x1c8>)
 801575c:	781b      	ldrb	r3, [r3, #0]
 801575e:	f003 0302 	and.w	r3, r3, #2
 8015762:	2b00      	cmp	r3, #0
 8015764:	f000 80a3 	beq.w	80158ae <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	7d5b      	ldrb	r3, [r3, #21]
 801576c:	4618      	mov	r0, r3
 801576e:	f7ff f859 	bl	8014824 <tcp_alloc>
 8015772:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8015774:	697b      	ldr	r3, [r7, #20]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d111      	bne.n	801579e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	699b      	ldr	r3, [r3, #24]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d00a      	beq.n	8015798 <tcp_listen_input+0xa8>
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	699b      	ldr	r3, [r3, #24]
 8015786:	687a      	ldr	r2, [r7, #4]
 8015788:	6910      	ldr	r0, [r2, #16]
 801578a:	f04f 32ff 	mov.w	r2, #4294967295
 801578e:	2100      	movs	r1, #0
 8015790:	4798      	blx	r3
 8015792:	4603      	mov	r3, r0
 8015794:	73bb      	strb	r3, [r7, #14]
      return;
 8015796:	e08b      	b.n	80158b0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015798:	23f0      	movs	r3, #240	@ 0xf0
 801579a:	73bb      	strb	r3, [r7, #14]
      return;
 801579c:	e088      	b.n	80158b0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801579e:	4b50      	ldr	r3, [pc, #320]	@ (80158e0 <tcp_listen_input+0x1f0>)
 80157a0:	695a      	ldr	r2, [r3, #20]
 80157a2:	697b      	ldr	r3, [r7, #20]
 80157a4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80157a6:	4b4e      	ldr	r3, [pc, #312]	@ (80158e0 <tcp_listen_input+0x1f0>)
 80157a8:	691a      	ldr	r2, [r3, #16]
 80157aa:	697b      	ldr	r3, [r7, #20]
 80157ac:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	8ada      	ldrh	r2, [r3, #22]
 80157b2:	697b      	ldr	r3, [r7, #20]
 80157b4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80157b6:	4b47      	ldr	r3, [pc, #284]	@ (80158d4 <tcp_listen_input+0x1e4>)
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	881b      	ldrh	r3, [r3, #0]
 80157bc:	b29a      	uxth	r2, r3
 80157be:	697b      	ldr	r3, [r7, #20]
 80157c0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80157c2:	697b      	ldr	r3, [r7, #20]
 80157c4:	2203      	movs	r2, #3
 80157c6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80157c8:	4b41      	ldr	r3, [pc, #260]	@ (80158d0 <tcp_listen_input+0x1e0>)
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	1c5a      	adds	r2, r3, #1
 80157ce:	697b      	ldr	r3, [r7, #20]
 80157d0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80157d2:	697b      	ldr	r3, [r7, #20]
 80157d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80157d6:	697b      	ldr	r3, [r7, #20]
 80157d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80157da:	6978      	ldr	r0, [r7, #20]
 80157dc:	f7ff fa58 	bl	8014c90 <tcp_next_iss>
 80157e0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80157e2:	697b      	ldr	r3, [r7, #20]
 80157e4:	693a      	ldr	r2, [r7, #16]
 80157e6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80157e8:	697b      	ldr	r3, [r7, #20]
 80157ea:	693a      	ldr	r2, [r7, #16]
 80157ec:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80157ee:	697b      	ldr	r3, [r7, #20]
 80157f0:	693a      	ldr	r2, [r7, #16]
 80157f2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80157f4:	697b      	ldr	r3, [r7, #20]
 80157f6:	693a      	ldr	r2, [r7, #16]
 80157f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80157fa:	4b35      	ldr	r3, [pc, #212]	@ (80158d0 <tcp_listen_input+0x1e0>)
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	1e5a      	subs	r2, r3, #1
 8015800:	697b      	ldr	r3, [r7, #20]
 8015802:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	691a      	ldr	r2, [r3, #16]
 8015808:	697b      	ldr	r3, [r7, #20]
 801580a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801580c:	697b      	ldr	r3, [r7, #20]
 801580e:	687a      	ldr	r2, [r7, #4]
 8015810:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	7a5b      	ldrb	r3, [r3, #9]
 8015816:	f003 030c 	and.w	r3, r3, #12
 801581a:	b2da      	uxtb	r2, r3
 801581c:	697b      	ldr	r3, [r7, #20]
 801581e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	7a1a      	ldrb	r2, [r3, #8]
 8015824:	697b      	ldr	r3, [r7, #20]
 8015826:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8015828:	4b2e      	ldr	r3, [pc, #184]	@ (80158e4 <tcp_listen_input+0x1f4>)
 801582a:	681a      	ldr	r2, [r3, #0]
 801582c:	697b      	ldr	r3, [r7, #20]
 801582e:	60da      	str	r2, [r3, #12]
 8015830:	4a2c      	ldr	r2, [pc, #176]	@ (80158e4 <tcp_listen_input+0x1f4>)
 8015832:	697b      	ldr	r3, [r7, #20]
 8015834:	6013      	str	r3, [r2, #0]
 8015836:	f003 fd23 	bl	8019280 <tcp_timer_needed>
 801583a:	4b2b      	ldr	r3, [pc, #172]	@ (80158e8 <tcp_listen_input+0x1f8>)
 801583c:	2201      	movs	r2, #1
 801583e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015840:	6978      	ldr	r0, [r7, #20]
 8015842:	f001 fd8b 	bl	801735c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8015846:	4b23      	ldr	r3, [pc, #140]	@ (80158d4 <tcp_listen_input+0x1e4>)
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	89db      	ldrh	r3, [r3, #14]
 801584c:	b29a      	uxth	r2, r3
 801584e:	697b      	ldr	r3, [r7, #20]
 8015850:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8015854:	697b      	ldr	r3, [r7, #20]
 8015856:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801585a:	697b      	ldr	r3, [r7, #20]
 801585c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8015860:	697b      	ldr	r3, [r7, #20]
 8015862:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8015864:	697b      	ldr	r3, [r7, #20]
 8015866:	3304      	adds	r3, #4
 8015868:	4618      	mov	r0, r3
 801586a:	f005 fa5d 	bl	801ad28 <ip4_route>
 801586e:	4601      	mov	r1, r0
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	3304      	adds	r3, #4
 8015874:	461a      	mov	r2, r3
 8015876:	4620      	mov	r0, r4
 8015878:	f7ff fa30 	bl	8014cdc <tcp_eff_send_mss_netif>
 801587c:	4603      	mov	r3, r0
 801587e:	461a      	mov	r2, r3
 8015880:	697b      	ldr	r3, [r7, #20]
 8015882:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8015884:	2112      	movs	r1, #18
 8015886:	6978      	ldr	r0, [r7, #20]
 8015888:	f002 fc96 	bl	80181b8 <tcp_enqueue_flags>
 801588c:	4603      	mov	r3, r0
 801588e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8015890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d004      	beq.n	80158a2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8015898:	2100      	movs	r1, #0
 801589a:	6978      	ldr	r0, [r7, #20]
 801589c:	f7fd ff06 	bl	80136ac <tcp_abandon>
      return;
 80158a0:	e006      	b.n	80158b0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80158a2:	6978      	ldr	r0, [r7, #20]
 80158a4:	f002 fd76 	bl	8018394 <tcp_output>
  return;
 80158a8:	e001      	b.n	80158ae <tcp_listen_input+0x1be>
    return;
 80158aa:	bf00      	nop
 80158ac:	e000      	b.n	80158b0 <tcp_listen_input+0x1c0>
  return;
 80158ae:	bf00      	nop
}
 80158b0:	371c      	adds	r7, #28
 80158b2:	46bd      	mov	sp, r7
 80158b4:	bd90      	pop	{r4, r7, pc}
 80158b6:	bf00      	nop
 80158b8:	2000e4a0 	.word	0x2000e4a0
 80158bc:	08020414 	.word	0x08020414
 80158c0:	0802060c 	.word	0x0802060c
 80158c4:	08020460 	.word	0x08020460
 80158c8:	2000e498 	.word	0x2000e498
 80158cc:	2000e49e 	.word	0x2000e49e
 80158d0:	2000e494 	.word	0x2000e494
 80158d4:	2000e484 	.word	0x2000e484
 80158d8:	2000b36c 	.word	0x2000b36c
 80158dc:	2000b370 	.word	0x2000b370
 80158e0:	2000b35c 	.word	0x2000b35c
 80158e4:	2000e468 	.word	0x2000e468
 80158e8:	2000e470 	.word	0x2000e470

080158ec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b086      	sub	sp, #24
 80158f0:	af04      	add	r7, sp, #16
 80158f2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80158f4:	4b2f      	ldr	r3, [pc, #188]	@ (80159b4 <tcp_timewait_input+0xc8>)
 80158f6:	781b      	ldrb	r3, [r3, #0]
 80158f8:	f003 0304 	and.w	r3, r3, #4
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d153      	bne.n	80159a8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d106      	bne.n	8015914 <tcp_timewait_input+0x28>
 8015906:	4b2c      	ldr	r3, [pc, #176]	@ (80159b8 <tcp_timewait_input+0xcc>)
 8015908:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801590c:	492b      	ldr	r1, [pc, #172]	@ (80159bc <tcp_timewait_input+0xd0>)
 801590e:	482c      	ldr	r0, [pc, #176]	@ (80159c0 <tcp_timewait_input+0xd4>)
 8015910:	f007 fd2c 	bl	801d36c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015914:	4b27      	ldr	r3, [pc, #156]	@ (80159b4 <tcp_timewait_input+0xc8>)
 8015916:	781b      	ldrb	r3, [r3, #0]
 8015918:	f003 0302 	and.w	r3, r3, #2
 801591c:	2b00      	cmp	r3, #0
 801591e:	d02a      	beq.n	8015976 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015920:	4b28      	ldr	r3, [pc, #160]	@ (80159c4 <tcp_timewait_input+0xd8>)
 8015922:	681a      	ldr	r2, [r3, #0]
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015928:	1ad3      	subs	r3, r2, r3
 801592a:	2b00      	cmp	r3, #0
 801592c:	db2d      	blt.n	801598a <tcp_timewait_input+0x9e>
 801592e:	4b25      	ldr	r3, [pc, #148]	@ (80159c4 <tcp_timewait_input+0xd8>)
 8015930:	681a      	ldr	r2, [r3, #0]
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015936:	6879      	ldr	r1, [r7, #4]
 8015938:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801593a:	440b      	add	r3, r1
 801593c:	1ad3      	subs	r3, r2, r3
 801593e:	2b00      	cmp	r3, #0
 8015940:	dc23      	bgt.n	801598a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015942:	4b21      	ldr	r3, [pc, #132]	@ (80159c8 <tcp_timewait_input+0xdc>)
 8015944:	6819      	ldr	r1, [r3, #0]
 8015946:	4b21      	ldr	r3, [pc, #132]	@ (80159cc <tcp_timewait_input+0xe0>)
 8015948:	881b      	ldrh	r3, [r3, #0]
 801594a:	461a      	mov	r2, r3
 801594c:	4b1d      	ldr	r3, [pc, #116]	@ (80159c4 <tcp_timewait_input+0xd8>)
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015952:	4b1f      	ldr	r3, [pc, #124]	@ (80159d0 <tcp_timewait_input+0xe4>)
 8015954:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015956:	885b      	ldrh	r3, [r3, #2]
 8015958:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801595a:	4a1d      	ldr	r2, [pc, #116]	@ (80159d0 <tcp_timewait_input+0xe4>)
 801595c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801595e:	8812      	ldrh	r2, [r2, #0]
 8015960:	b292      	uxth	r2, r2
 8015962:	9202      	str	r2, [sp, #8]
 8015964:	9301      	str	r3, [sp, #4]
 8015966:	4b1b      	ldr	r3, [pc, #108]	@ (80159d4 <tcp_timewait_input+0xe8>)
 8015968:	9300      	str	r3, [sp, #0]
 801596a:	4b1b      	ldr	r3, [pc, #108]	@ (80159d8 <tcp_timewait_input+0xec>)
 801596c:	4602      	mov	r2, r0
 801596e:	6878      	ldr	r0, [r7, #4]
 8015970:	f003 fac4 	bl	8018efc <tcp_rst>
      return;
 8015974:	e01b      	b.n	80159ae <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8015976:	4b0f      	ldr	r3, [pc, #60]	@ (80159b4 <tcp_timewait_input+0xc8>)
 8015978:	781b      	ldrb	r3, [r3, #0]
 801597a:	f003 0301 	and.w	r3, r3, #1
 801597e:	2b00      	cmp	r3, #0
 8015980:	d003      	beq.n	801598a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8015982:	4b16      	ldr	r3, [pc, #88]	@ (80159dc <tcp_timewait_input+0xf0>)
 8015984:	681a      	ldr	r2, [r3, #0]
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801598a:	4b10      	ldr	r3, [pc, #64]	@ (80159cc <tcp_timewait_input+0xe0>)
 801598c:	881b      	ldrh	r3, [r3, #0]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d00c      	beq.n	80159ac <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	8b5b      	ldrh	r3, [r3, #26]
 8015996:	f043 0302 	orr.w	r3, r3, #2
 801599a:	b29a      	uxth	r2, r3
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80159a0:	6878      	ldr	r0, [r7, #4]
 80159a2:	f002 fcf7 	bl	8018394 <tcp_output>
  }
  return;
 80159a6:	e001      	b.n	80159ac <tcp_timewait_input+0xc0>
    return;
 80159a8:	bf00      	nop
 80159aa:	e000      	b.n	80159ae <tcp_timewait_input+0xc2>
  return;
 80159ac:	bf00      	nop
}
 80159ae:	3708      	adds	r7, #8
 80159b0:	46bd      	mov	sp, r7
 80159b2:	bd80      	pop	{r7, pc}
 80159b4:	2000e4a0 	.word	0x2000e4a0
 80159b8:	08020414 	.word	0x08020414
 80159bc:	0802062c 	.word	0x0802062c
 80159c0:	08020460 	.word	0x08020460
 80159c4:	2000e494 	.word	0x2000e494
 80159c8:	2000e498 	.word	0x2000e498
 80159cc:	2000e49e 	.word	0x2000e49e
 80159d0:	2000e484 	.word	0x2000e484
 80159d4:	2000b36c 	.word	0x2000b36c
 80159d8:	2000b370 	.word	0x2000b370
 80159dc:	2000e45c 	.word	0x2000e45c

080159e0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80159e0:	b590      	push	{r4, r7, lr}
 80159e2:	b08d      	sub	sp, #52	@ 0x34
 80159e4:	af04      	add	r7, sp, #16
 80159e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80159e8:	2300      	movs	r3, #0
 80159ea:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80159ec:	2300      	movs	r3, #0
 80159ee:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d106      	bne.n	8015a04 <tcp_process+0x24>
 80159f6:	4b9d      	ldr	r3, [pc, #628]	@ (8015c6c <tcp_process+0x28c>)
 80159f8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80159fc:	499c      	ldr	r1, [pc, #624]	@ (8015c70 <tcp_process+0x290>)
 80159fe:	489d      	ldr	r0, [pc, #628]	@ (8015c74 <tcp_process+0x294>)
 8015a00:	f007 fcb4 	bl	801d36c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015a04:	4b9c      	ldr	r3, [pc, #624]	@ (8015c78 <tcp_process+0x298>)
 8015a06:	781b      	ldrb	r3, [r3, #0]
 8015a08:	f003 0304 	and.w	r3, r3, #4
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d04e      	beq.n	8015aae <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	7d1b      	ldrb	r3, [r3, #20]
 8015a14:	2b02      	cmp	r3, #2
 8015a16:	d108      	bne.n	8015a2a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015a1c:	4b97      	ldr	r3, [pc, #604]	@ (8015c7c <tcp_process+0x29c>)
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	429a      	cmp	r2, r3
 8015a22:	d123      	bne.n	8015a6c <tcp_process+0x8c>
        acceptable = 1;
 8015a24:	2301      	movs	r3, #1
 8015a26:	76fb      	strb	r3, [r7, #27]
 8015a28:	e020      	b.n	8015a6c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015a2e:	4b94      	ldr	r3, [pc, #592]	@ (8015c80 <tcp_process+0x2a0>)
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	429a      	cmp	r2, r3
 8015a34:	d102      	bne.n	8015a3c <tcp_process+0x5c>
        acceptable = 1;
 8015a36:	2301      	movs	r3, #1
 8015a38:	76fb      	strb	r3, [r7, #27]
 8015a3a:	e017      	b.n	8015a6c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015a3c:	4b90      	ldr	r3, [pc, #576]	@ (8015c80 <tcp_process+0x2a0>)
 8015a3e:	681a      	ldr	r2, [r3, #0]
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a44:	1ad3      	subs	r3, r2, r3
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	db10      	blt.n	8015a6c <tcp_process+0x8c>
 8015a4a:	4b8d      	ldr	r3, [pc, #564]	@ (8015c80 <tcp_process+0x2a0>)
 8015a4c:	681a      	ldr	r2, [r3, #0]
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a52:	6879      	ldr	r1, [r7, #4]
 8015a54:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015a56:	440b      	add	r3, r1
 8015a58:	1ad3      	subs	r3, r2, r3
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	dc06      	bgt.n	8015a6c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	8b5b      	ldrh	r3, [r3, #26]
 8015a62:	f043 0302 	orr.w	r3, r3, #2
 8015a66:	b29a      	uxth	r2, r3
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015a6c:	7efb      	ldrb	r3, [r7, #27]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d01b      	beq.n	8015aaa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	7d1b      	ldrb	r3, [r3, #20]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d106      	bne.n	8015a88 <tcp_process+0xa8>
 8015a7a:	4b7c      	ldr	r3, [pc, #496]	@ (8015c6c <tcp_process+0x28c>)
 8015a7c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8015a80:	4980      	ldr	r1, [pc, #512]	@ (8015c84 <tcp_process+0x2a4>)
 8015a82:	487c      	ldr	r0, [pc, #496]	@ (8015c74 <tcp_process+0x294>)
 8015a84:	f007 fc72 	bl	801d36c <iprintf>
      recv_flags |= TF_RESET;
 8015a88:	4b7f      	ldr	r3, [pc, #508]	@ (8015c88 <tcp_process+0x2a8>)
 8015a8a:	781b      	ldrb	r3, [r3, #0]
 8015a8c:	f043 0308 	orr.w	r3, r3, #8
 8015a90:	b2da      	uxtb	r2, r3
 8015a92:	4b7d      	ldr	r3, [pc, #500]	@ (8015c88 <tcp_process+0x2a8>)
 8015a94:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	8b5b      	ldrh	r3, [r3, #26]
 8015a9a:	f023 0301 	bic.w	r3, r3, #1
 8015a9e:	b29a      	uxth	r2, r3
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015aa4:	f06f 030d 	mvn.w	r3, #13
 8015aa8:	e37a      	b.n	80161a0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015aaa:	2300      	movs	r3, #0
 8015aac:	e378      	b.n	80161a0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8015aae:	4b72      	ldr	r3, [pc, #456]	@ (8015c78 <tcp_process+0x298>)
 8015ab0:	781b      	ldrb	r3, [r3, #0]
 8015ab2:	f003 0302 	and.w	r3, r3, #2
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d010      	beq.n	8015adc <tcp_process+0xfc>
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	7d1b      	ldrb	r3, [r3, #20]
 8015abe:	2b02      	cmp	r3, #2
 8015ac0:	d00c      	beq.n	8015adc <tcp_process+0xfc>
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	7d1b      	ldrb	r3, [r3, #20]
 8015ac6:	2b03      	cmp	r3, #3
 8015ac8:	d008      	beq.n	8015adc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	8b5b      	ldrh	r3, [r3, #26]
 8015ace:	f043 0302 	orr.w	r3, r3, #2
 8015ad2:	b29a      	uxth	r2, r3
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015ad8:	2300      	movs	r3, #0
 8015ada:	e361      	b.n	80161a0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	8b5b      	ldrh	r3, [r3, #26]
 8015ae0:	f003 0310 	and.w	r3, r3, #16
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d103      	bne.n	8015af0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015ae8:	4b68      	ldr	r3, [pc, #416]	@ (8015c8c <tcp_process+0x2ac>)
 8015aea:	681a      	ldr	r2, [r3, #0]
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	2200      	movs	r2, #0
 8015af4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	2200      	movs	r2, #0
 8015afc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f001 fc2b 	bl	801735c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	7d1b      	ldrb	r3, [r3, #20]
 8015b0a:	3b02      	subs	r3, #2
 8015b0c:	2b07      	cmp	r3, #7
 8015b0e:	f200 8337 	bhi.w	8016180 <tcp_process+0x7a0>
 8015b12:	a201      	add	r2, pc, #4	@ (adr r2, 8015b18 <tcp_process+0x138>)
 8015b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b18:	08015b39 	.word	0x08015b39
 8015b1c:	08015d69 	.word	0x08015d69
 8015b20:	08015ee1 	.word	0x08015ee1
 8015b24:	08015f0b 	.word	0x08015f0b
 8015b28:	0801602f 	.word	0x0801602f
 8015b2c:	08015ee1 	.word	0x08015ee1
 8015b30:	080160bb 	.word	0x080160bb
 8015b34:	0801614b 	.word	0x0801614b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015b38:	4b4f      	ldr	r3, [pc, #316]	@ (8015c78 <tcp_process+0x298>)
 8015b3a:	781b      	ldrb	r3, [r3, #0]
 8015b3c:	f003 0310 	and.w	r3, r3, #16
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	f000 80e4 	beq.w	8015d0e <tcp_process+0x32e>
 8015b46:	4b4c      	ldr	r3, [pc, #304]	@ (8015c78 <tcp_process+0x298>)
 8015b48:	781b      	ldrb	r3, [r3, #0]
 8015b4a:	f003 0302 	and.w	r3, r3, #2
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	f000 80dd 	beq.w	8015d0e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015b58:	1c5a      	adds	r2, r3, #1
 8015b5a:	4b48      	ldr	r3, [pc, #288]	@ (8015c7c <tcp_process+0x29c>)
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	429a      	cmp	r2, r3
 8015b60:	f040 80d5 	bne.w	8015d0e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015b64:	4b46      	ldr	r3, [pc, #280]	@ (8015c80 <tcp_process+0x2a0>)
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	1c5a      	adds	r2, r3, #1
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8015b76:	4b41      	ldr	r3, [pc, #260]	@ (8015c7c <tcp_process+0x29c>)
 8015b78:	681a      	ldr	r2, [r3, #0]
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8015b7e:	4b44      	ldr	r3, [pc, #272]	@ (8015c90 <tcp_process+0x2b0>)
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	89db      	ldrh	r3, [r3, #14]
 8015b84:	b29a      	uxth	r2, r3
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015b98:	4b39      	ldr	r3, [pc, #228]	@ (8015c80 <tcp_process+0x2a0>)
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	1e5a      	subs	r2, r3, #1
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	2204      	movs	r2, #4
 8015ba6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	3304      	adds	r3, #4
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f005 f8b9 	bl	801ad28 <ip4_route>
 8015bb6:	4601      	mov	r1, r0
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	3304      	adds	r3, #4
 8015bbc:	461a      	mov	r2, r3
 8015bbe:	4620      	mov	r0, r4
 8015bc0:	f7ff f88c 	bl	8014cdc <tcp_eff_send_mss_netif>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	461a      	mov	r2, r3
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015bd0:	009a      	lsls	r2, r3, #2
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015bd6:	005b      	lsls	r3, r3, #1
 8015bd8:	f241 111c 	movw	r1, #4380	@ 0x111c
 8015bdc:	428b      	cmp	r3, r1
 8015bde:	bf38      	it	cc
 8015be0:	460b      	movcc	r3, r1
 8015be2:	429a      	cmp	r2, r3
 8015be4:	d204      	bcs.n	8015bf0 <tcp_process+0x210>
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015bea:	009b      	lsls	r3, r3, #2
 8015bec:	b29b      	uxth	r3, r3
 8015bee:	e00d      	b.n	8015c0c <tcp_process+0x22c>
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015bf4:	005b      	lsls	r3, r3, #1
 8015bf6:	f241 121c 	movw	r2, #4380	@ 0x111c
 8015bfa:	4293      	cmp	r3, r2
 8015bfc:	d904      	bls.n	8015c08 <tcp_process+0x228>
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c02:	005b      	lsls	r3, r3, #1
 8015c04:	b29b      	uxth	r3, r3
 8015c06:	e001      	b.n	8015c0c <tcp_process+0x22c>
 8015c08:	f241 131c 	movw	r3, #4380	@ 0x111c
 8015c0c:	687a      	ldr	r2, [r7, #4]
 8015c0e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d106      	bne.n	8015c2a <tcp_process+0x24a>
 8015c1c:	4b13      	ldr	r3, [pc, #76]	@ (8015c6c <tcp_process+0x28c>)
 8015c1e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8015c22:	491c      	ldr	r1, [pc, #112]	@ (8015c94 <tcp_process+0x2b4>)
 8015c24:	4813      	ldr	r0, [pc, #76]	@ (8015c74 <tcp_process+0x294>)
 8015c26:	f007 fba1 	bl	801d36c <iprintf>
        --pcb->snd_queuelen;
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015c30:	3b01      	subs	r3, #1
 8015c32:	b29a      	uxth	r2, r3
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015c3e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015c40:	69fb      	ldr	r3, [r7, #28]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d12a      	bne.n	8015c9c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015c4a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015c4c:	69fb      	ldr	r3, [r7, #28]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d106      	bne.n	8015c60 <tcp_process+0x280>
 8015c52:	4b06      	ldr	r3, [pc, #24]	@ (8015c6c <tcp_process+0x28c>)
 8015c54:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8015c58:	490f      	ldr	r1, [pc, #60]	@ (8015c98 <tcp_process+0x2b8>)
 8015c5a:	4806      	ldr	r0, [pc, #24]	@ (8015c74 <tcp_process+0x294>)
 8015c5c:	f007 fb86 	bl	801d36c <iprintf>
          pcb->unsent = rseg->next;
 8015c60:	69fb      	ldr	r3, [r7, #28]
 8015c62:	681a      	ldr	r2, [r3, #0]
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015c68:	e01c      	b.n	8015ca4 <tcp_process+0x2c4>
 8015c6a:	bf00      	nop
 8015c6c:	08020414 	.word	0x08020414
 8015c70:	0802064c 	.word	0x0802064c
 8015c74:	08020460 	.word	0x08020460
 8015c78:	2000e4a0 	.word	0x2000e4a0
 8015c7c:	2000e498 	.word	0x2000e498
 8015c80:	2000e494 	.word	0x2000e494
 8015c84:	08020668 	.word	0x08020668
 8015c88:	2000e4a1 	.word	0x2000e4a1
 8015c8c:	2000e45c 	.word	0x2000e45c
 8015c90:	2000e484 	.word	0x2000e484
 8015c94:	08020688 	.word	0x08020688
 8015c98:	080206a0 	.word	0x080206a0
        } else {
          pcb->unacked = rseg->next;
 8015c9c:	69fb      	ldr	r3, [r7, #28]
 8015c9e:	681a      	ldr	r2, [r3, #0]
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8015ca4:	69f8      	ldr	r0, [r7, #28]
 8015ca6:	f7fe fc54 	bl	8014552 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d104      	bne.n	8015cbc <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015cb8:	861a      	strh	r2, [r3, #48]	@ 0x30
 8015cba:	e006      	b.n	8015cca <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	2200      	movs	r2, #0
 8015cc0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	2200      	movs	r2, #0
 8015cc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d00a      	beq.n	8015cea <tcp_process+0x30a>
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015cda:	687a      	ldr	r2, [r7, #4]
 8015cdc:	6910      	ldr	r0, [r2, #16]
 8015cde:	2200      	movs	r2, #0
 8015ce0:	6879      	ldr	r1, [r7, #4]
 8015ce2:	4798      	blx	r3
 8015ce4:	4603      	mov	r3, r0
 8015ce6:	76bb      	strb	r3, [r7, #26]
 8015ce8:	e001      	b.n	8015cee <tcp_process+0x30e>
 8015cea:	2300      	movs	r3, #0
 8015cec:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015cee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015cf2:	f113 0f0d 	cmn.w	r3, #13
 8015cf6:	d102      	bne.n	8015cfe <tcp_process+0x31e>
          return ERR_ABRT;
 8015cf8:	f06f 030c 	mvn.w	r3, #12
 8015cfc:	e250      	b.n	80161a0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	8b5b      	ldrh	r3, [r3, #26]
 8015d02:	f043 0302 	orr.w	r3, r3, #2
 8015d06:	b29a      	uxth	r2, r3
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015d0c:	e23a      	b.n	8016184 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8015d0e:	4b98      	ldr	r3, [pc, #608]	@ (8015f70 <tcp_process+0x590>)
 8015d10:	781b      	ldrb	r3, [r3, #0]
 8015d12:	f003 0310 	and.w	r3, r3, #16
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	f000 8234 	beq.w	8016184 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015d1c:	4b95      	ldr	r3, [pc, #596]	@ (8015f74 <tcp_process+0x594>)
 8015d1e:	6819      	ldr	r1, [r3, #0]
 8015d20:	4b95      	ldr	r3, [pc, #596]	@ (8015f78 <tcp_process+0x598>)
 8015d22:	881b      	ldrh	r3, [r3, #0]
 8015d24:	461a      	mov	r2, r3
 8015d26:	4b95      	ldr	r3, [pc, #596]	@ (8015f7c <tcp_process+0x59c>)
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015d2c:	4b94      	ldr	r3, [pc, #592]	@ (8015f80 <tcp_process+0x5a0>)
 8015d2e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015d30:	885b      	ldrh	r3, [r3, #2]
 8015d32:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015d34:	4a92      	ldr	r2, [pc, #584]	@ (8015f80 <tcp_process+0x5a0>)
 8015d36:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015d38:	8812      	ldrh	r2, [r2, #0]
 8015d3a:	b292      	uxth	r2, r2
 8015d3c:	9202      	str	r2, [sp, #8]
 8015d3e:	9301      	str	r3, [sp, #4]
 8015d40:	4b90      	ldr	r3, [pc, #576]	@ (8015f84 <tcp_process+0x5a4>)
 8015d42:	9300      	str	r3, [sp, #0]
 8015d44:	4b90      	ldr	r3, [pc, #576]	@ (8015f88 <tcp_process+0x5a8>)
 8015d46:	4602      	mov	r2, r0
 8015d48:	6878      	ldr	r0, [r7, #4]
 8015d4a:	f003 f8d7 	bl	8018efc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015d54:	2b05      	cmp	r3, #5
 8015d56:	f200 8215 	bhi.w	8016184 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	2200      	movs	r2, #0
 8015d5e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8015d60:	6878      	ldr	r0, [r7, #4]
 8015d62:	f002 fea3 	bl	8018aac <tcp_rexmit_rto>
      break;
 8015d66:	e20d      	b.n	8016184 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8015d68:	4b81      	ldr	r3, [pc, #516]	@ (8015f70 <tcp_process+0x590>)
 8015d6a:	781b      	ldrb	r3, [r3, #0]
 8015d6c:	f003 0310 	and.w	r3, r3, #16
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	f000 80a1 	beq.w	8015eb8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015d76:	4b7f      	ldr	r3, [pc, #508]	@ (8015f74 <tcp_process+0x594>)
 8015d78:	681a      	ldr	r2, [r3, #0]
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015d7e:	1ad3      	subs	r3, r2, r3
 8015d80:	3b01      	subs	r3, #1
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	db7e      	blt.n	8015e84 <tcp_process+0x4a4>
 8015d86:	4b7b      	ldr	r3, [pc, #492]	@ (8015f74 <tcp_process+0x594>)
 8015d88:	681a      	ldr	r2, [r3, #0]
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015d8e:	1ad3      	subs	r3, r2, r3
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	dc77      	bgt.n	8015e84 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	2204      	movs	r2, #4
 8015d98:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d102      	bne.n	8015da8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8015da2:	23fa      	movs	r3, #250	@ 0xfa
 8015da4:	76bb      	strb	r3, [r7, #26]
 8015da6:	e01d      	b.n	8015de4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015dac:	699b      	ldr	r3, [r3, #24]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d106      	bne.n	8015dc0 <tcp_process+0x3e0>
 8015db2:	4b76      	ldr	r3, [pc, #472]	@ (8015f8c <tcp_process+0x5ac>)
 8015db4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8015db8:	4975      	ldr	r1, [pc, #468]	@ (8015f90 <tcp_process+0x5b0>)
 8015dba:	4876      	ldr	r0, [pc, #472]	@ (8015f94 <tcp_process+0x5b4>)
 8015dbc:	f007 fad6 	bl	801d36c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015dc4:	699b      	ldr	r3, [r3, #24]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d00a      	beq.n	8015de0 <tcp_process+0x400>
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015dce:	699b      	ldr	r3, [r3, #24]
 8015dd0:	687a      	ldr	r2, [r7, #4]
 8015dd2:	6910      	ldr	r0, [r2, #16]
 8015dd4:	2200      	movs	r2, #0
 8015dd6:	6879      	ldr	r1, [r7, #4]
 8015dd8:	4798      	blx	r3
 8015dda:	4603      	mov	r3, r0
 8015ddc:	76bb      	strb	r3, [r7, #26]
 8015dde:	e001      	b.n	8015de4 <tcp_process+0x404>
 8015de0:	23f0      	movs	r3, #240	@ 0xf0
 8015de2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8015de4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d00a      	beq.n	8015e02 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015dec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015df0:	f113 0f0d 	cmn.w	r3, #13
 8015df4:	d002      	beq.n	8015dfc <tcp_process+0x41c>
              tcp_abort(pcb);
 8015df6:	6878      	ldr	r0, [r7, #4]
 8015df8:	f7fd fd16 	bl	8013828 <tcp_abort>
            }
            return ERR_ABRT;
 8015dfc:	f06f 030c 	mvn.w	r3, #12
 8015e00:	e1ce      	b.n	80161a0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8015e02:	6878      	ldr	r0, [r7, #4]
 8015e04:	f000 fae0 	bl	80163c8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015e08:	4b63      	ldr	r3, [pc, #396]	@ (8015f98 <tcp_process+0x5b8>)
 8015e0a:	881b      	ldrh	r3, [r3, #0]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d005      	beq.n	8015e1c <tcp_process+0x43c>
            recv_acked--;
 8015e10:	4b61      	ldr	r3, [pc, #388]	@ (8015f98 <tcp_process+0x5b8>)
 8015e12:	881b      	ldrh	r3, [r3, #0]
 8015e14:	3b01      	subs	r3, #1
 8015e16:	b29a      	uxth	r2, r3
 8015e18:	4b5f      	ldr	r3, [pc, #380]	@ (8015f98 <tcp_process+0x5b8>)
 8015e1a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015e20:	009a      	lsls	r2, r3, #2
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015e26:	005b      	lsls	r3, r3, #1
 8015e28:	f241 111c 	movw	r1, #4380	@ 0x111c
 8015e2c:	428b      	cmp	r3, r1
 8015e2e:	bf38      	it	cc
 8015e30:	460b      	movcc	r3, r1
 8015e32:	429a      	cmp	r2, r3
 8015e34:	d204      	bcs.n	8015e40 <tcp_process+0x460>
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015e3a:	009b      	lsls	r3, r3, #2
 8015e3c:	b29b      	uxth	r3, r3
 8015e3e:	e00d      	b.n	8015e5c <tcp_process+0x47c>
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015e44:	005b      	lsls	r3, r3, #1
 8015e46:	f241 121c 	movw	r2, #4380	@ 0x111c
 8015e4a:	4293      	cmp	r3, r2
 8015e4c:	d904      	bls.n	8015e58 <tcp_process+0x478>
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015e52:	005b      	lsls	r3, r3, #1
 8015e54:	b29b      	uxth	r3, r3
 8015e56:	e001      	b.n	8015e5c <tcp_process+0x47c>
 8015e58:	f241 131c 	movw	r3, #4380	@ 0x111c
 8015e5c:	687a      	ldr	r2, [r7, #4]
 8015e5e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8015e62:	4b4e      	ldr	r3, [pc, #312]	@ (8015f9c <tcp_process+0x5bc>)
 8015e64:	781b      	ldrb	r3, [r3, #0]
 8015e66:	f003 0320 	and.w	r3, r3, #32
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d037      	beq.n	8015ede <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	8b5b      	ldrh	r3, [r3, #26]
 8015e72:	f043 0302 	orr.w	r3, r3, #2
 8015e76:	b29a      	uxth	r2, r3
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	2207      	movs	r2, #7
 8015e80:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8015e82:	e02c      	b.n	8015ede <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e84:	4b3b      	ldr	r3, [pc, #236]	@ (8015f74 <tcp_process+0x594>)
 8015e86:	6819      	ldr	r1, [r3, #0]
 8015e88:	4b3b      	ldr	r3, [pc, #236]	@ (8015f78 <tcp_process+0x598>)
 8015e8a:	881b      	ldrh	r3, [r3, #0]
 8015e8c:	461a      	mov	r2, r3
 8015e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8015f7c <tcp_process+0x59c>)
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015e94:	4b3a      	ldr	r3, [pc, #232]	@ (8015f80 <tcp_process+0x5a0>)
 8015e96:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e98:	885b      	ldrh	r3, [r3, #2]
 8015e9a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015e9c:	4a38      	ldr	r2, [pc, #224]	@ (8015f80 <tcp_process+0x5a0>)
 8015e9e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ea0:	8812      	ldrh	r2, [r2, #0]
 8015ea2:	b292      	uxth	r2, r2
 8015ea4:	9202      	str	r2, [sp, #8]
 8015ea6:	9301      	str	r3, [sp, #4]
 8015ea8:	4b36      	ldr	r3, [pc, #216]	@ (8015f84 <tcp_process+0x5a4>)
 8015eaa:	9300      	str	r3, [sp, #0]
 8015eac:	4b36      	ldr	r3, [pc, #216]	@ (8015f88 <tcp_process+0x5a8>)
 8015eae:	4602      	mov	r2, r0
 8015eb0:	6878      	ldr	r0, [r7, #4]
 8015eb2:	f003 f823 	bl	8018efc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8015eb6:	e167      	b.n	8016188 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8015f70 <tcp_process+0x590>)
 8015eba:	781b      	ldrb	r3, [r3, #0]
 8015ebc:	f003 0302 	and.w	r3, r3, #2
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	f000 8161 	beq.w	8016188 <tcp_process+0x7a8>
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015eca:	1e5a      	subs	r2, r3, #1
 8015ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8015f7c <tcp_process+0x59c>)
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	429a      	cmp	r2, r3
 8015ed2:	f040 8159 	bne.w	8016188 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8015ed6:	6878      	ldr	r0, [r7, #4]
 8015ed8:	f002 fe0a 	bl	8018af0 <tcp_rexmit>
      break;
 8015edc:	e154      	b.n	8016188 <tcp_process+0x7a8>
 8015ede:	e153      	b.n	8016188 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8015ee0:	6878      	ldr	r0, [r7, #4]
 8015ee2:	f000 fa71 	bl	80163c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8015ee6:	4b2d      	ldr	r3, [pc, #180]	@ (8015f9c <tcp_process+0x5bc>)
 8015ee8:	781b      	ldrb	r3, [r3, #0]
 8015eea:	f003 0320 	and.w	r3, r3, #32
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	f000 814c 	beq.w	801618c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	8b5b      	ldrh	r3, [r3, #26]
 8015ef8:	f043 0302 	orr.w	r3, r3, #2
 8015efc:	b29a      	uxth	r2, r3
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	2207      	movs	r2, #7
 8015f06:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015f08:	e140      	b.n	801618c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8015f0a:	6878      	ldr	r0, [r7, #4]
 8015f0c:	f000 fa5c 	bl	80163c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015f10:	4b22      	ldr	r3, [pc, #136]	@ (8015f9c <tcp_process+0x5bc>)
 8015f12:	781b      	ldrb	r3, [r3, #0]
 8015f14:	f003 0320 	and.w	r3, r3, #32
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d071      	beq.n	8016000 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015f1c:	4b14      	ldr	r3, [pc, #80]	@ (8015f70 <tcp_process+0x590>)
 8015f1e:	781b      	ldrb	r3, [r3, #0]
 8015f20:	f003 0310 	and.w	r3, r3, #16
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d060      	beq.n	8015fea <tcp_process+0x60a>
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015f2c:	4b11      	ldr	r3, [pc, #68]	@ (8015f74 <tcp_process+0x594>)
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	429a      	cmp	r2, r3
 8015f32:	d15a      	bne.n	8015fea <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d156      	bne.n	8015fea <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	8b5b      	ldrh	r3, [r3, #26]
 8015f40:	f043 0302 	orr.w	r3, r3, #2
 8015f44:	b29a      	uxth	r2, r3
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8015f4a:	6878      	ldr	r0, [r7, #4]
 8015f4c:	f7fe fdbc 	bl	8014ac8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8015f50:	4b13      	ldr	r3, [pc, #76]	@ (8015fa0 <tcp_process+0x5c0>)
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	687a      	ldr	r2, [r7, #4]
 8015f56:	429a      	cmp	r2, r3
 8015f58:	d105      	bne.n	8015f66 <tcp_process+0x586>
 8015f5a:	4b11      	ldr	r3, [pc, #68]	@ (8015fa0 <tcp_process+0x5c0>)
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	68db      	ldr	r3, [r3, #12]
 8015f60:	4a0f      	ldr	r2, [pc, #60]	@ (8015fa0 <tcp_process+0x5c0>)
 8015f62:	6013      	str	r3, [r2, #0]
 8015f64:	e02e      	b.n	8015fc4 <tcp_process+0x5e4>
 8015f66:	4b0e      	ldr	r3, [pc, #56]	@ (8015fa0 <tcp_process+0x5c0>)
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	617b      	str	r3, [r7, #20]
 8015f6c:	e027      	b.n	8015fbe <tcp_process+0x5de>
 8015f6e:	bf00      	nop
 8015f70:	2000e4a0 	.word	0x2000e4a0
 8015f74:	2000e498 	.word	0x2000e498
 8015f78:	2000e49e 	.word	0x2000e49e
 8015f7c:	2000e494 	.word	0x2000e494
 8015f80:	2000e484 	.word	0x2000e484
 8015f84:	2000b36c 	.word	0x2000b36c
 8015f88:	2000b370 	.word	0x2000b370
 8015f8c:	08020414 	.word	0x08020414
 8015f90:	080206b4 	.word	0x080206b4
 8015f94:	08020460 	.word	0x08020460
 8015f98:	2000e49c 	.word	0x2000e49c
 8015f9c:	2000e4a1 	.word	0x2000e4a1
 8015fa0:	2000e468 	.word	0x2000e468
 8015fa4:	697b      	ldr	r3, [r7, #20]
 8015fa6:	68db      	ldr	r3, [r3, #12]
 8015fa8:	687a      	ldr	r2, [r7, #4]
 8015faa:	429a      	cmp	r2, r3
 8015fac:	d104      	bne.n	8015fb8 <tcp_process+0x5d8>
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	68da      	ldr	r2, [r3, #12]
 8015fb2:	697b      	ldr	r3, [r7, #20]
 8015fb4:	60da      	str	r2, [r3, #12]
 8015fb6:	e005      	b.n	8015fc4 <tcp_process+0x5e4>
 8015fb8:	697b      	ldr	r3, [r7, #20]
 8015fba:	68db      	ldr	r3, [r3, #12]
 8015fbc:	617b      	str	r3, [r7, #20]
 8015fbe:	697b      	ldr	r3, [r7, #20]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d1ef      	bne.n	8015fa4 <tcp_process+0x5c4>
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	60da      	str	r2, [r3, #12]
 8015fca:	4b77      	ldr	r3, [pc, #476]	@ (80161a8 <tcp_process+0x7c8>)
 8015fcc:	2201      	movs	r2, #1
 8015fce:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	220a      	movs	r2, #10
 8015fd4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8015fd6:	4b75      	ldr	r3, [pc, #468]	@ (80161ac <tcp_process+0x7cc>)
 8015fd8:	681a      	ldr	r2, [r3, #0]
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	60da      	str	r2, [r3, #12]
 8015fde:	4a73      	ldr	r2, [pc, #460]	@ (80161ac <tcp_process+0x7cc>)
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	6013      	str	r3, [r2, #0]
 8015fe4:	f003 f94c 	bl	8019280 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8015fe8:	e0d2      	b.n	8016190 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	8b5b      	ldrh	r3, [r3, #26]
 8015fee:	f043 0302 	orr.w	r3, r3, #2
 8015ff2:	b29a      	uxth	r2, r3
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	2208      	movs	r2, #8
 8015ffc:	751a      	strb	r2, [r3, #20]
      break;
 8015ffe:	e0c7      	b.n	8016190 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016000:	4b6b      	ldr	r3, [pc, #428]	@ (80161b0 <tcp_process+0x7d0>)
 8016002:	781b      	ldrb	r3, [r3, #0]
 8016004:	f003 0310 	and.w	r3, r3, #16
 8016008:	2b00      	cmp	r3, #0
 801600a:	f000 80c1 	beq.w	8016190 <tcp_process+0x7b0>
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016012:	4b68      	ldr	r3, [pc, #416]	@ (80161b4 <tcp_process+0x7d4>)
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	429a      	cmp	r2, r3
 8016018:	f040 80ba 	bne.w	8016190 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016020:	2b00      	cmp	r3, #0
 8016022:	f040 80b5 	bne.w	8016190 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	2206      	movs	r2, #6
 801602a:	751a      	strb	r2, [r3, #20]
      break;
 801602c:	e0b0      	b.n	8016190 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801602e:	6878      	ldr	r0, [r7, #4]
 8016030:	f000 f9ca 	bl	80163c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016034:	4b60      	ldr	r3, [pc, #384]	@ (80161b8 <tcp_process+0x7d8>)
 8016036:	781b      	ldrb	r3, [r3, #0]
 8016038:	f003 0320 	and.w	r3, r3, #32
 801603c:	2b00      	cmp	r3, #0
 801603e:	f000 80a9 	beq.w	8016194 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	8b5b      	ldrh	r3, [r3, #26]
 8016046:	f043 0302 	orr.w	r3, r3, #2
 801604a:	b29a      	uxth	r2, r3
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8016050:	6878      	ldr	r0, [r7, #4]
 8016052:	f7fe fd39 	bl	8014ac8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016056:	4b59      	ldr	r3, [pc, #356]	@ (80161bc <tcp_process+0x7dc>)
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	687a      	ldr	r2, [r7, #4]
 801605c:	429a      	cmp	r2, r3
 801605e:	d105      	bne.n	801606c <tcp_process+0x68c>
 8016060:	4b56      	ldr	r3, [pc, #344]	@ (80161bc <tcp_process+0x7dc>)
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	68db      	ldr	r3, [r3, #12]
 8016066:	4a55      	ldr	r2, [pc, #340]	@ (80161bc <tcp_process+0x7dc>)
 8016068:	6013      	str	r3, [r2, #0]
 801606a:	e013      	b.n	8016094 <tcp_process+0x6b4>
 801606c:	4b53      	ldr	r3, [pc, #332]	@ (80161bc <tcp_process+0x7dc>)
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	613b      	str	r3, [r7, #16]
 8016072:	e00c      	b.n	801608e <tcp_process+0x6ae>
 8016074:	693b      	ldr	r3, [r7, #16]
 8016076:	68db      	ldr	r3, [r3, #12]
 8016078:	687a      	ldr	r2, [r7, #4]
 801607a:	429a      	cmp	r2, r3
 801607c:	d104      	bne.n	8016088 <tcp_process+0x6a8>
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	68da      	ldr	r2, [r3, #12]
 8016082:	693b      	ldr	r3, [r7, #16]
 8016084:	60da      	str	r2, [r3, #12]
 8016086:	e005      	b.n	8016094 <tcp_process+0x6b4>
 8016088:	693b      	ldr	r3, [r7, #16]
 801608a:	68db      	ldr	r3, [r3, #12]
 801608c:	613b      	str	r3, [r7, #16]
 801608e:	693b      	ldr	r3, [r7, #16]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d1ef      	bne.n	8016074 <tcp_process+0x694>
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	2200      	movs	r2, #0
 8016098:	60da      	str	r2, [r3, #12]
 801609a:	4b43      	ldr	r3, [pc, #268]	@ (80161a8 <tcp_process+0x7c8>)
 801609c:	2201      	movs	r2, #1
 801609e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	220a      	movs	r2, #10
 80160a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80160a6:	4b41      	ldr	r3, [pc, #260]	@ (80161ac <tcp_process+0x7cc>)
 80160a8:	681a      	ldr	r2, [r3, #0]
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	60da      	str	r2, [r3, #12]
 80160ae:	4a3f      	ldr	r2, [pc, #252]	@ (80161ac <tcp_process+0x7cc>)
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	6013      	str	r3, [r2, #0]
 80160b4:	f003 f8e4 	bl	8019280 <tcp_timer_needed>
      }
      break;
 80160b8:	e06c      	b.n	8016194 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80160ba:	6878      	ldr	r0, [r7, #4]
 80160bc:	f000 f984 	bl	80163c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80160c0:	4b3b      	ldr	r3, [pc, #236]	@ (80161b0 <tcp_process+0x7d0>)
 80160c2:	781b      	ldrb	r3, [r3, #0]
 80160c4:	f003 0310 	and.w	r3, r3, #16
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d065      	beq.n	8016198 <tcp_process+0x7b8>
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80160d0:	4b38      	ldr	r3, [pc, #224]	@ (80161b4 <tcp_process+0x7d4>)
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	429a      	cmp	r2, r3
 80160d6:	d15f      	bne.n	8016198 <tcp_process+0x7b8>
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d15b      	bne.n	8016198 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80160e0:	6878      	ldr	r0, [r7, #4]
 80160e2:	f7fe fcf1 	bl	8014ac8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80160e6:	4b35      	ldr	r3, [pc, #212]	@ (80161bc <tcp_process+0x7dc>)
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	687a      	ldr	r2, [r7, #4]
 80160ec:	429a      	cmp	r2, r3
 80160ee:	d105      	bne.n	80160fc <tcp_process+0x71c>
 80160f0:	4b32      	ldr	r3, [pc, #200]	@ (80161bc <tcp_process+0x7dc>)
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	68db      	ldr	r3, [r3, #12]
 80160f6:	4a31      	ldr	r2, [pc, #196]	@ (80161bc <tcp_process+0x7dc>)
 80160f8:	6013      	str	r3, [r2, #0]
 80160fa:	e013      	b.n	8016124 <tcp_process+0x744>
 80160fc:	4b2f      	ldr	r3, [pc, #188]	@ (80161bc <tcp_process+0x7dc>)
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	60fb      	str	r3, [r7, #12]
 8016102:	e00c      	b.n	801611e <tcp_process+0x73e>
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	68db      	ldr	r3, [r3, #12]
 8016108:	687a      	ldr	r2, [r7, #4]
 801610a:	429a      	cmp	r2, r3
 801610c:	d104      	bne.n	8016118 <tcp_process+0x738>
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	68da      	ldr	r2, [r3, #12]
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	60da      	str	r2, [r3, #12]
 8016116:	e005      	b.n	8016124 <tcp_process+0x744>
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	68db      	ldr	r3, [r3, #12]
 801611c:	60fb      	str	r3, [r7, #12]
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d1ef      	bne.n	8016104 <tcp_process+0x724>
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	2200      	movs	r2, #0
 8016128:	60da      	str	r2, [r3, #12]
 801612a:	4b1f      	ldr	r3, [pc, #124]	@ (80161a8 <tcp_process+0x7c8>)
 801612c:	2201      	movs	r2, #1
 801612e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	220a      	movs	r2, #10
 8016134:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016136:	4b1d      	ldr	r3, [pc, #116]	@ (80161ac <tcp_process+0x7cc>)
 8016138:	681a      	ldr	r2, [r3, #0]
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	60da      	str	r2, [r3, #12]
 801613e:	4a1b      	ldr	r2, [pc, #108]	@ (80161ac <tcp_process+0x7cc>)
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	6013      	str	r3, [r2, #0]
 8016144:	f003 f89c 	bl	8019280 <tcp_timer_needed>
      }
      break;
 8016148:	e026      	b.n	8016198 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801614a:	6878      	ldr	r0, [r7, #4]
 801614c:	f000 f93c 	bl	80163c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016150:	4b17      	ldr	r3, [pc, #92]	@ (80161b0 <tcp_process+0x7d0>)
 8016152:	781b      	ldrb	r3, [r3, #0]
 8016154:	f003 0310 	and.w	r3, r3, #16
 8016158:	2b00      	cmp	r3, #0
 801615a:	d01f      	beq.n	801619c <tcp_process+0x7bc>
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016160:	4b14      	ldr	r3, [pc, #80]	@ (80161b4 <tcp_process+0x7d4>)
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	429a      	cmp	r2, r3
 8016166:	d119      	bne.n	801619c <tcp_process+0x7bc>
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801616c:	2b00      	cmp	r3, #0
 801616e:	d115      	bne.n	801619c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8016170:	4b11      	ldr	r3, [pc, #68]	@ (80161b8 <tcp_process+0x7d8>)
 8016172:	781b      	ldrb	r3, [r3, #0]
 8016174:	f043 0310 	orr.w	r3, r3, #16
 8016178:	b2da      	uxtb	r2, r3
 801617a:	4b0f      	ldr	r3, [pc, #60]	@ (80161b8 <tcp_process+0x7d8>)
 801617c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801617e:	e00d      	b.n	801619c <tcp_process+0x7bc>
    default:
      break;
 8016180:	bf00      	nop
 8016182:	e00c      	b.n	801619e <tcp_process+0x7be>
      break;
 8016184:	bf00      	nop
 8016186:	e00a      	b.n	801619e <tcp_process+0x7be>
      break;
 8016188:	bf00      	nop
 801618a:	e008      	b.n	801619e <tcp_process+0x7be>
      break;
 801618c:	bf00      	nop
 801618e:	e006      	b.n	801619e <tcp_process+0x7be>
      break;
 8016190:	bf00      	nop
 8016192:	e004      	b.n	801619e <tcp_process+0x7be>
      break;
 8016194:	bf00      	nop
 8016196:	e002      	b.n	801619e <tcp_process+0x7be>
      break;
 8016198:	bf00      	nop
 801619a:	e000      	b.n	801619e <tcp_process+0x7be>
      break;
 801619c:	bf00      	nop
  }
  return ERR_OK;
 801619e:	2300      	movs	r3, #0
}
 80161a0:	4618      	mov	r0, r3
 80161a2:	3724      	adds	r7, #36	@ 0x24
 80161a4:	46bd      	mov	sp, r7
 80161a6:	bd90      	pop	{r4, r7, pc}
 80161a8:	2000e470 	.word	0x2000e470
 80161ac:	2000e46c 	.word	0x2000e46c
 80161b0:	2000e4a0 	.word	0x2000e4a0
 80161b4:	2000e498 	.word	0x2000e498
 80161b8:	2000e4a1 	.word	0x2000e4a1
 80161bc:	2000e468 	.word	0x2000e468

080161c0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80161c0:	b590      	push	{r4, r7, lr}
 80161c2:	b085      	sub	sp, #20
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	6078      	str	r0, [r7, #4]
 80161c8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d106      	bne.n	80161de <tcp_oos_insert_segment+0x1e>
 80161d0:	4b3b      	ldr	r3, [pc, #236]	@ (80162c0 <tcp_oos_insert_segment+0x100>)
 80161d2:	f240 421f 	movw	r2, #1055	@ 0x41f
 80161d6:	493b      	ldr	r1, [pc, #236]	@ (80162c4 <tcp_oos_insert_segment+0x104>)
 80161d8:	483b      	ldr	r0, [pc, #236]	@ (80162c8 <tcp_oos_insert_segment+0x108>)
 80161da:	f007 f8c7 	bl	801d36c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	68db      	ldr	r3, [r3, #12]
 80161e2:	899b      	ldrh	r3, [r3, #12]
 80161e4:	b29b      	uxth	r3, r3
 80161e6:	4618      	mov	r0, r3
 80161e8:	f7fb f940 	bl	801146c <lwip_htons>
 80161ec:	4603      	mov	r3, r0
 80161ee:	b2db      	uxtb	r3, r3
 80161f0:	f003 0301 	and.w	r3, r3, #1
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d028      	beq.n	801624a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80161f8:	6838      	ldr	r0, [r7, #0]
 80161fa:	f7fe f995 	bl	8014528 <tcp_segs_free>
    next = NULL;
 80161fe:	2300      	movs	r3, #0
 8016200:	603b      	str	r3, [r7, #0]
 8016202:	e056      	b.n	80162b2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016204:	683b      	ldr	r3, [r7, #0]
 8016206:	68db      	ldr	r3, [r3, #12]
 8016208:	899b      	ldrh	r3, [r3, #12]
 801620a:	b29b      	uxth	r3, r3
 801620c:	4618      	mov	r0, r3
 801620e:	f7fb f92d 	bl	801146c <lwip_htons>
 8016212:	4603      	mov	r3, r0
 8016214:	b2db      	uxtb	r3, r3
 8016216:	f003 0301 	and.w	r3, r3, #1
 801621a:	2b00      	cmp	r3, #0
 801621c:	d00d      	beq.n	801623a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	68db      	ldr	r3, [r3, #12]
 8016222:	899b      	ldrh	r3, [r3, #12]
 8016224:	b29c      	uxth	r4, r3
 8016226:	2001      	movs	r0, #1
 8016228:	f7fb f920 	bl	801146c <lwip_htons>
 801622c:	4603      	mov	r3, r0
 801622e:	461a      	mov	r2, r3
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	68db      	ldr	r3, [r3, #12]
 8016234:	4322      	orrs	r2, r4
 8016236:	b292      	uxth	r2, r2
 8016238:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801623a:	683b      	ldr	r3, [r7, #0]
 801623c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801623e:	683b      	ldr	r3, [r7, #0]
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8016244:	68f8      	ldr	r0, [r7, #12]
 8016246:	f7fe f984 	bl	8014552 <tcp_seg_free>
    while (next &&
 801624a:	683b      	ldr	r3, [r7, #0]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d00e      	beq.n	801626e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	891b      	ldrh	r3, [r3, #8]
 8016254:	461a      	mov	r2, r3
 8016256:	4b1d      	ldr	r3, [pc, #116]	@ (80162cc <tcp_oos_insert_segment+0x10c>)
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	441a      	add	r2, r3
 801625c:	683b      	ldr	r3, [r7, #0]
 801625e:	68db      	ldr	r3, [r3, #12]
 8016260:	685b      	ldr	r3, [r3, #4]
 8016262:	6839      	ldr	r1, [r7, #0]
 8016264:	8909      	ldrh	r1, [r1, #8]
 8016266:	440b      	add	r3, r1
 8016268:	1ad3      	subs	r3, r2, r3
    while (next &&
 801626a:	2b00      	cmp	r3, #0
 801626c:	daca      	bge.n	8016204 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801626e:	683b      	ldr	r3, [r7, #0]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d01e      	beq.n	80162b2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	891b      	ldrh	r3, [r3, #8]
 8016278:	461a      	mov	r2, r3
 801627a:	4b14      	ldr	r3, [pc, #80]	@ (80162cc <tcp_oos_insert_segment+0x10c>)
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	441a      	add	r2, r3
 8016280:	683b      	ldr	r3, [r7, #0]
 8016282:	68db      	ldr	r3, [r3, #12]
 8016284:	685b      	ldr	r3, [r3, #4]
 8016286:	1ad3      	subs	r3, r2, r3
    if (next &&
 8016288:	2b00      	cmp	r3, #0
 801628a:	dd12      	ble.n	80162b2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801628c:	683b      	ldr	r3, [r7, #0]
 801628e:	68db      	ldr	r3, [r3, #12]
 8016290:	685b      	ldr	r3, [r3, #4]
 8016292:	b29a      	uxth	r2, r3
 8016294:	4b0d      	ldr	r3, [pc, #52]	@ (80162cc <tcp_oos_insert_segment+0x10c>)
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	b29b      	uxth	r3, r3
 801629a:	1ad3      	subs	r3, r2, r3
 801629c:	b29a      	uxth	r2, r3
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	685a      	ldr	r2, [r3, #4]
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	891b      	ldrh	r3, [r3, #8]
 80162aa:	4619      	mov	r1, r3
 80162ac:	4610      	mov	r0, r2
 80162ae:	f7fc fb45 	bl	801293c <pbuf_realloc>
    }
  }
  cseg->next = next;
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	683a      	ldr	r2, [r7, #0]
 80162b6:	601a      	str	r2, [r3, #0]
}
 80162b8:	bf00      	nop
 80162ba:	3714      	adds	r7, #20
 80162bc:	46bd      	mov	sp, r7
 80162be:	bd90      	pop	{r4, r7, pc}
 80162c0:	08020414 	.word	0x08020414
 80162c4:	080206d4 	.word	0x080206d4
 80162c8:	08020460 	.word	0x08020460
 80162cc:	2000e494 	.word	0x2000e494

080162d0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80162d0:	b5b0      	push	{r4, r5, r7, lr}
 80162d2:	b086      	sub	sp, #24
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	60f8      	str	r0, [r7, #12]
 80162d8:	60b9      	str	r1, [r7, #8]
 80162da:	607a      	str	r2, [r7, #4]
 80162dc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80162de:	e03e      	b.n	801635e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80162e0:	68bb      	ldr	r3, [r7, #8]
 80162e2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80162e4:	68bb      	ldr	r3, [r7, #8]
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80162ea:	697b      	ldr	r3, [r7, #20]
 80162ec:	685b      	ldr	r3, [r3, #4]
 80162ee:	4618      	mov	r0, r3
 80162f0:	f7fc fd38 	bl	8012d64 <pbuf_clen>
 80162f4:	4603      	mov	r3, r0
 80162f6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80162fe:	8a7a      	ldrh	r2, [r7, #18]
 8016300:	429a      	cmp	r2, r3
 8016302:	d906      	bls.n	8016312 <tcp_free_acked_segments+0x42>
 8016304:	4b2a      	ldr	r3, [pc, #168]	@ (80163b0 <tcp_free_acked_segments+0xe0>)
 8016306:	f240 4257 	movw	r2, #1111	@ 0x457
 801630a:	492a      	ldr	r1, [pc, #168]	@ (80163b4 <tcp_free_acked_segments+0xe4>)
 801630c:	482a      	ldr	r0, [pc, #168]	@ (80163b8 <tcp_free_acked_segments+0xe8>)
 801630e:	f007 f82d 	bl	801d36c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8016318:	8a7b      	ldrh	r3, [r7, #18]
 801631a:	1ad3      	subs	r3, r2, r3
 801631c:	b29a      	uxth	r2, r3
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8016324:	697b      	ldr	r3, [r7, #20]
 8016326:	891a      	ldrh	r2, [r3, #8]
 8016328:	4b24      	ldr	r3, [pc, #144]	@ (80163bc <tcp_free_acked_segments+0xec>)
 801632a:	881b      	ldrh	r3, [r3, #0]
 801632c:	4413      	add	r3, r2
 801632e:	b29a      	uxth	r2, r3
 8016330:	4b22      	ldr	r3, [pc, #136]	@ (80163bc <tcp_free_acked_segments+0xec>)
 8016332:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8016334:	6978      	ldr	r0, [r7, #20]
 8016336:	f7fe f90c 	bl	8014552 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016340:	2b00      	cmp	r3, #0
 8016342:	d00c      	beq.n	801635e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8016344:	68bb      	ldr	r3, [r7, #8]
 8016346:	2b00      	cmp	r3, #0
 8016348:	d109      	bne.n	801635e <tcp_free_acked_segments+0x8e>
 801634a:	683b      	ldr	r3, [r7, #0]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d106      	bne.n	801635e <tcp_free_acked_segments+0x8e>
 8016350:	4b17      	ldr	r3, [pc, #92]	@ (80163b0 <tcp_free_acked_segments+0xe0>)
 8016352:	f240 4261 	movw	r2, #1121	@ 0x461
 8016356:	491a      	ldr	r1, [pc, #104]	@ (80163c0 <tcp_free_acked_segments+0xf0>)
 8016358:	4817      	ldr	r0, [pc, #92]	@ (80163b8 <tcp_free_acked_segments+0xe8>)
 801635a:	f007 f807 	bl	801d36c <iprintf>
  while (seg_list != NULL &&
 801635e:	68bb      	ldr	r3, [r7, #8]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d020      	beq.n	80163a6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8016364:	68bb      	ldr	r3, [r7, #8]
 8016366:	68db      	ldr	r3, [r3, #12]
 8016368:	685b      	ldr	r3, [r3, #4]
 801636a:	4618      	mov	r0, r3
 801636c:	f7fb f893 	bl	8011496 <lwip_htonl>
 8016370:	4604      	mov	r4, r0
 8016372:	68bb      	ldr	r3, [r7, #8]
 8016374:	891b      	ldrh	r3, [r3, #8]
 8016376:	461d      	mov	r5, r3
 8016378:	68bb      	ldr	r3, [r7, #8]
 801637a:	68db      	ldr	r3, [r3, #12]
 801637c:	899b      	ldrh	r3, [r3, #12]
 801637e:	b29b      	uxth	r3, r3
 8016380:	4618      	mov	r0, r3
 8016382:	f7fb f873 	bl	801146c <lwip_htons>
 8016386:	4603      	mov	r3, r0
 8016388:	b2db      	uxtb	r3, r3
 801638a:	f003 0303 	and.w	r3, r3, #3
 801638e:	2b00      	cmp	r3, #0
 8016390:	d001      	beq.n	8016396 <tcp_free_acked_segments+0xc6>
 8016392:	2301      	movs	r3, #1
 8016394:	e000      	b.n	8016398 <tcp_free_acked_segments+0xc8>
 8016396:	2300      	movs	r3, #0
 8016398:	442b      	add	r3, r5
 801639a:	18e2      	adds	r2, r4, r3
 801639c:	4b09      	ldr	r3, [pc, #36]	@ (80163c4 <tcp_free_acked_segments+0xf4>)
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	dd9c      	ble.n	80162e0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80163a6:	68bb      	ldr	r3, [r7, #8]
}
 80163a8:	4618      	mov	r0, r3
 80163aa:	3718      	adds	r7, #24
 80163ac:	46bd      	mov	sp, r7
 80163ae:	bdb0      	pop	{r4, r5, r7, pc}
 80163b0:	08020414 	.word	0x08020414
 80163b4:	080206fc 	.word	0x080206fc
 80163b8:	08020460 	.word	0x08020460
 80163bc:	2000e49c 	.word	0x2000e49c
 80163c0:	08020724 	.word	0x08020724
 80163c4:	2000e498 	.word	0x2000e498

080163c8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80163c8:	b5b0      	push	{r4, r5, r7, lr}
 80163ca:	b094      	sub	sp, #80	@ 0x50
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80163d0:	2300      	movs	r3, #0
 80163d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d106      	bne.n	80163e8 <tcp_receive+0x20>
 80163da:	4b91      	ldr	r3, [pc, #580]	@ (8016620 <tcp_receive+0x258>)
 80163dc:	f240 427b 	movw	r2, #1147	@ 0x47b
 80163e0:	4990      	ldr	r1, [pc, #576]	@ (8016624 <tcp_receive+0x25c>)
 80163e2:	4891      	ldr	r0, [pc, #580]	@ (8016628 <tcp_receive+0x260>)
 80163e4:	f006 ffc2 	bl	801d36c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	7d1b      	ldrb	r3, [r3, #20]
 80163ec:	2b03      	cmp	r3, #3
 80163ee:	d806      	bhi.n	80163fe <tcp_receive+0x36>
 80163f0:	4b8b      	ldr	r3, [pc, #556]	@ (8016620 <tcp_receive+0x258>)
 80163f2:	f240 427c 	movw	r2, #1148	@ 0x47c
 80163f6:	498d      	ldr	r1, [pc, #564]	@ (801662c <tcp_receive+0x264>)
 80163f8:	488b      	ldr	r0, [pc, #556]	@ (8016628 <tcp_receive+0x260>)
 80163fa:	f006 ffb7 	bl	801d36c <iprintf>

  if (flags & TCP_ACK) {
 80163fe:	4b8c      	ldr	r3, [pc, #560]	@ (8016630 <tcp_receive+0x268>)
 8016400:	781b      	ldrb	r3, [r3, #0]
 8016402:	f003 0310 	and.w	r3, r3, #16
 8016406:	2b00      	cmp	r3, #0
 8016408:	f000 8264 	beq.w	80168d4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016412:	461a      	mov	r2, r3
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016418:	4413      	add	r3, r2
 801641a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016420:	4b84      	ldr	r3, [pc, #528]	@ (8016634 <tcp_receive+0x26c>)
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	1ad3      	subs	r3, r2, r3
 8016426:	2b00      	cmp	r3, #0
 8016428:	db1b      	blt.n	8016462 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801642e:	4b81      	ldr	r3, [pc, #516]	@ (8016634 <tcp_receive+0x26c>)
 8016430:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016432:	429a      	cmp	r2, r3
 8016434:	d106      	bne.n	8016444 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801643a:	4b7f      	ldr	r3, [pc, #508]	@ (8016638 <tcp_receive+0x270>)
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	1ad3      	subs	r3, r2, r3
 8016440:	2b00      	cmp	r3, #0
 8016442:	db0e      	blt.n	8016462 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016448:	4b7b      	ldr	r3, [pc, #492]	@ (8016638 <tcp_receive+0x270>)
 801644a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801644c:	429a      	cmp	r2, r3
 801644e:	d125      	bne.n	801649c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016450:	4b7a      	ldr	r3, [pc, #488]	@ (801663c <tcp_receive+0x274>)
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	89db      	ldrh	r3, [r3, #14]
 8016456:	b29a      	uxth	r2, r3
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801645e:	429a      	cmp	r2, r3
 8016460:	d91c      	bls.n	801649c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8016462:	4b76      	ldr	r3, [pc, #472]	@ (801663c <tcp_receive+0x274>)
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	89db      	ldrh	r3, [r3, #14]
 8016468:	b29a      	uxth	r2, r3
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801647c:	429a      	cmp	r2, r3
 801647e:	d205      	bcs.n	801648c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801648c:	4b69      	ldr	r3, [pc, #420]	@ (8016634 <tcp_receive+0x26c>)
 801648e:	681a      	ldr	r2, [r3, #0]
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8016494:	4b68      	ldr	r3, [pc, #416]	@ (8016638 <tcp_receive+0x270>)
 8016496:	681a      	ldr	r2, [r3, #0]
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801649c:	4b66      	ldr	r3, [pc, #408]	@ (8016638 <tcp_receive+0x270>)
 801649e:	681a      	ldr	r2, [r3, #0]
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80164a4:	1ad3      	subs	r3, r2, r3
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	dc58      	bgt.n	801655c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80164aa:	4b65      	ldr	r3, [pc, #404]	@ (8016640 <tcp_receive+0x278>)
 80164ac:	881b      	ldrh	r3, [r3, #0]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d14b      	bne.n	801654a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80164b6:	687a      	ldr	r2, [r7, #4]
 80164b8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80164bc:	4413      	add	r3, r2
 80164be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80164c0:	429a      	cmp	r2, r3
 80164c2:	d142      	bne.n	801654a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	db3d      	blt.n	801654a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80164d2:	4b59      	ldr	r3, [pc, #356]	@ (8016638 <tcp_receive+0x270>)
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	429a      	cmp	r2, r3
 80164d8:	d137      	bne.n	801654a <tcp_receive+0x182>
              found_dupack = 1;
 80164da:	2301      	movs	r3, #1
 80164dc:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80164e4:	2bff      	cmp	r3, #255	@ 0xff
 80164e6:	d007      	beq.n	80164f8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80164ee:	3301      	adds	r3, #1
 80164f0:	b2da      	uxtb	r2, r3
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80164fe:	2b03      	cmp	r3, #3
 8016500:	d91b      	bls.n	801653a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801650c:	4413      	add	r3, r2
 801650e:	b29a      	uxth	r2, r3
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016516:	429a      	cmp	r2, r3
 8016518:	d30a      	bcc.n	8016530 <tcp_receive+0x168>
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016524:	4413      	add	r3, r2
 8016526:	b29a      	uxth	r2, r3
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801652e:	e004      	b.n	801653a <tcp_receive+0x172>
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016536:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016540:	2b02      	cmp	r3, #2
 8016542:	d902      	bls.n	801654a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8016544:	6878      	ldr	r0, [r7, #4]
 8016546:	f002 fb3f 	bl	8018bc8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801654a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801654c:	2b00      	cmp	r3, #0
 801654e:	f040 8161 	bne.w	8016814 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	2200      	movs	r2, #0
 8016556:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801655a:	e15b      	b.n	8016814 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801655c:	4b36      	ldr	r3, [pc, #216]	@ (8016638 <tcp_receive+0x270>)
 801655e:	681a      	ldr	r2, [r3, #0]
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016564:	1ad3      	subs	r3, r2, r3
 8016566:	3b01      	subs	r3, #1
 8016568:	2b00      	cmp	r3, #0
 801656a:	f2c0 814e 	blt.w	801680a <tcp_receive+0x442>
 801656e:	4b32      	ldr	r3, [pc, #200]	@ (8016638 <tcp_receive+0x270>)
 8016570:	681a      	ldr	r2, [r3, #0]
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016576:	1ad3      	subs	r3, r2, r3
 8016578:	2b00      	cmp	r3, #0
 801657a:	f300 8146 	bgt.w	801680a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	8b5b      	ldrh	r3, [r3, #26]
 8016582:	f003 0304 	and.w	r3, r3, #4
 8016586:	2b00      	cmp	r3, #0
 8016588:	d010      	beq.n	80165ac <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	8b5b      	ldrh	r3, [r3, #26]
 801658e:	f023 0304 	bic.w	r3, r3, #4
 8016592:	b29a      	uxth	r2, r3
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	2200      	movs	r2, #0
 80165a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	2200      	movs	r2, #0
 80165b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80165ba:	10db      	asrs	r3, r3, #3
 80165bc:	b21b      	sxth	r3, r3
 80165be:	b29a      	uxth	r2, r3
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80165c6:	b29b      	uxth	r3, r3
 80165c8:	4413      	add	r3, r2
 80165ca:	b29b      	uxth	r3, r3
 80165cc:	b21a      	sxth	r2, r3
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80165d4:	4b18      	ldr	r3, [pc, #96]	@ (8016638 <tcp_receive+0x270>)
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	b29a      	uxth	r2, r3
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80165de:	b29b      	uxth	r3, r3
 80165e0:	1ad3      	subs	r3, r2, r3
 80165e2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	2200      	movs	r2, #0
 80165e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80165ec:	4b12      	ldr	r3, [pc, #72]	@ (8016638 <tcp_receive+0x270>)
 80165ee:	681a      	ldr	r2, [r3, #0]
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	7d1b      	ldrb	r3, [r3, #20]
 80165f8:	2b03      	cmp	r3, #3
 80165fa:	f240 8097 	bls.w	801672c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801660a:	429a      	cmp	r2, r3
 801660c:	d245      	bcs.n	801669a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	8b5b      	ldrh	r3, [r3, #26]
 8016612:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016616:	2b00      	cmp	r3, #0
 8016618:	d014      	beq.n	8016644 <tcp_receive+0x27c>
 801661a:	2301      	movs	r3, #1
 801661c:	e013      	b.n	8016646 <tcp_receive+0x27e>
 801661e:	bf00      	nop
 8016620:	08020414 	.word	0x08020414
 8016624:	08020744 	.word	0x08020744
 8016628:	08020460 	.word	0x08020460
 801662c:	08020760 	.word	0x08020760
 8016630:	2000e4a0 	.word	0x2000e4a0
 8016634:	2000e494 	.word	0x2000e494
 8016638:	2000e498 	.word	0x2000e498
 801663c:	2000e484 	.word	0x2000e484
 8016640:	2000e49e 	.word	0x2000e49e
 8016644:	2302      	movs	r3, #2
 8016646:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801664a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801664e:	b29a      	uxth	r2, r3
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016654:	fb12 f303 	smulbb	r3, r2, r3
 8016658:	b29b      	uxth	r3, r3
 801665a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801665c:	4293      	cmp	r3, r2
 801665e:	bf28      	it	cs
 8016660:	4613      	movcs	r3, r2
 8016662:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801666a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801666c:	4413      	add	r3, r2
 801666e:	b29a      	uxth	r2, r3
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016676:	429a      	cmp	r2, r3
 8016678:	d309      	bcc.n	801668e <tcp_receive+0x2c6>
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016680:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016682:	4413      	add	r3, r2
 8016684:	b29a      	uxth	r2, r3
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801668c:	e04e      	b.n	801672c <tcp_receive+0x364>
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016694:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016698:	e048      	b.n	801672c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80166a0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80166a2:	4413      	add	r3, r2
 80166a4:	b29a      	uxth	r2, r3
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80166ac:	429a      	cmp	r2, r3
 80166ae:	d309      	bcc.n	80166c4 <tcp_receive+0x2fc>
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80166b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80166b8:	4413      	add	r3, r2
 80166ba:	b29a      	uxth	r2, r3
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80166c2:	e004      	b.n	80166ce <tcp_receive+0x306>
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80166ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80166da:	429a      	cmp	r2, r3
 80166dc:	d326      	bcc.n	801672c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80166ea:	1ad3      	subs	r3, r2, r3
 80166ec:	b29a      	uxth	r2, r3
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80166fe:	4413      	add	r3, r2
 8016700:	b29a      	uxth	r2, r3
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016708:	429a      	cmp	r2, r3
 801670a:	d30a      	bcc.n	8016722 <tcp_receive+0x35a>
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016716:	4413      	add	r3, r2
 8016718:	b29a      	uxth	r2, r3
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016720:	e004      	b.n	801672c <tcp_receive+0x364>
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016728:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016734:	4a98      	ldr	r2, [pc, #608]	@ (8016998 <tcp_receive+0x5d0>)
 8016736:	6878      	ldr	r0, [r7, #4]
 8016738:	f7ff fdca 	bl	80162d0 <tcp_free_acked_segments>
 801673c:	4602      	mov	r2, r0
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801674a:	4a94      	ldr	r2, [pc, #592]	@ (801699c <tcp_receive+0x5d4>)
 801674c:	6878      	ldr	r0, [r7, #4]
 801674e:	f7ff fdbf 	bl	80162d0 <tcp_free_acked_segments>
 8016752:	4602      	mov	r2, r0
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801675c:	2b00      	cmp	r3, #0
 801675e:	d104      	bne.n	801676a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016766:	861a      	strh	r2, [r3, #48]	@ 0x30
 8016768:	e002      	b.n	8016770 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	2200      	movs	r2, #0
 801676e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	2200      	movs	r2, #0
 8016774:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801677a:	2b00      	cmp	r3, #0
 801677c:	d103      	bne.n	8016786 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	2200      	movs	r2, #0
 8016782:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801678c:	4b84      	ldr	r3, [pc, #528]	@ (80169a0 <tcp_receive+0x5d8>)
 801678e:	881b      	ldrh	r3, [r3, #0]
 8016790:	4413      	add	r3, r2
 8016792:	b29a      	uxth	r2, r3
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	8b5b      	ldrh	r3, [r3, #26]
 801679e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d035      	beq.n	8016812 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d118      	bne.n	80167e0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d00c      	beq.n	80167d0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80167be:	68db      	ldr	r3, [r3, #12]
 80167c0:	685b      	ldr	r3, [r3, #4]
 80167c2:	4618      	mov	r0, r3
 80167c4:	f7fa fe67 	bl	8011496 <lwip_htonl>
 80167c8:	4603      	mov	r3, r0
 80167ca:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	dc20      	bgt.n	8016812 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	8b5b      	ldrh	r3, [r3, #26]
 80167d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80167d8:	b29a      	uxth	r2, r3
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80167de:	e018      	b.n	8016812 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80167e8:	68db      	ldr	r3, [r3, #12]
 80167ea:	685b      	ldr	r3, [r3, #4]
 80167ec:	4618      	mov	r0, r3
 80167ee:	f7fa fe52 	bl	8011496 <lwip_htonl>
 80167f2:	4603      	mov	r3, r0
 80167f4:	1ae3      	subs	r3, r4, r3
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	dc0b      	bgt.n	8016812 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	8b5b      	ldrh	r3, [r3, #26]
 80167fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016802:	b29a      	uxth	r2, r3
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016808:	e003      	b.n	8016812 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801680a:	6878      	ldr	r0, [r7, #4]
 801680c:	f002 fbc8 	bl	8018fa0 <tcp_send_empty_ack>
 8016810:	e000      	b.n	8016814 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016812:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016818:	2b00      	cmp	r3, #0
 801681a:	d05b      	beq.n	80168d4 <tcp_receive+0x50c>
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016820:	4b60      	ldr	r3, [pc, #384]	@ (80169a4 <tcp_receive+0x5dc>)
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	1ad3      	subs	r3, r2, r3
 8016826:	2b00      	cmp	r3, #0
 8016828:	da54      	bge.n	80168d4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801682a:	4b5f      	ldr	r3, [pc, #380]	@ (80169a8 <tcp_receive+0x5e0>)
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	b29a      	uxth	r2, r3
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016834:	b29b      	uxth	r3, r3
 8016836:	1ad3      	subs	r3, r2, r3
 8016838:	b29b      	uxth	r3, r3
 801683a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801683e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016848:	10db      	asrs	r3, r3, #3
 801684a:	b21b      	sxth	r3, r3
 801684c:	b29b      	uxth	r3, r3
 801684e:	1ad3      	subs	r3, r2, r3
 8016850:	b29b      	uxth	r3, r3
 8016852:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801685c:	b29a      	uxth	r2, r3
 801685e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016862:	4413      	add	r3, r2
 8016864:	b29b      	uxth	r3, r3
 8016866:	b21a      	sxth	r2, r3
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 801686c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8016870:	2b00      	cmp	r3, #0
 8016872:	da05      	bge.n	8016880 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8016874:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016878:	425b      	negs	r3, r3
 801687a:	b29b      	uxth	r3, r3
 801687c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8016880:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801688a:	109b      	asrs	r3, r3, #2
 801688c:	b21b      	sxth	r3, r3
 801688e:	b29b      	uxth	r3, r3
 8016890:	1ad3      	subs	r3, r2, r3
 8016892:	b29b      	uxth	r3, r3
 8016894:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801689e:	b29a      	uxth	r2, r3
 80168a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80168a4:	4413      	add	r3, r2
 80168a6:	b29b      	uxth	r3, r3
 80168a8:	b21a      	sxth	r2, r3
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80168b4:	10db      	asrs	r3, r3, #3
 80168b6:	b21b      	sxth	r3, r3
 80168b8:	b29a      	uxth	r2, r3
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80168c0:	b29b      	uxth	r3, r3
 80168c2:	4413      	add	r3, r2
 80168c4:	b29b      	uxth	r3, r3
 80168c6:	b21a      	sxth	r2, r3
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	2200      	movs	r2, #0
 80168d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80168d4:	4b35      	ldr	r3, [pc, #212]	@ (80169ac <tcp_receive+0x5e4>)
 80168d6:	881b      	ldrh	r3, [r3, #0]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	f000 84df 	beq.w	801729c <tcp_receive+0xed4>
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	7d1b      	ldrb	r3, [r3, #20]
 80168e2:	2b06      	cmp	r3, #6
 80168e4:	f200 84da 	bhi.w	801729c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80168ec:	4b30      	ldr	r3, [pc, #192]	@ (80169b0 <tcp_receive+0x5e8>)
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	1ad3      	subs	r3, r2, r3
 80168f2:	3b01      	subs	r3, #1
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	f2c0 808f 	blt.w	8016a18 <tcp_receive+0x650>
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80168fe:	4b2b      	ldr	r3, [pc, #172]	@ (80169ac <tcp_receive+0x5e4>)
 8016900:	881b      	ldrh	r3, [r3, #0]
 8016902:	4619      	mov	r1, r3
 8016904:	4b2a      	ldr	r3, [pc, #168]	@ (80169b0 <tcp_receive+0x5e8>)
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	440b      	add	r3, r1
 801690a:	1ad3      	subs	r3, r2, r3
 801690c:	3301      	adds	r3, #1
 801690e:	2b00      	cmp	r3, #0
 8016910:	f300 8082 	bgt.w	8016a18 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8016914:	4b27      	ldr	r3, [pc, #156]	@ (80169b4 <tcp_receive+0x5ec>)
 8016916:	685b      	ldr	r3, [r3, #4]
 8016918:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801691e:	4b24      	ldr	r3, [pc, #144]	@ (80169b0 <tcp_receive+0x5e8>)
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	1ad3      	subs	r3, r2, r3
 8016924:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016926:	4b23      	ldr	r3, [pc, #140]	@ (80169b4 <tcp_receive+0x5ec>)
 8016928:	685b      	ldr	r3, [r3, #4]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d106      	bne.n	801693c <tcp_receive+0x574>
 801692e:	4b22      	ldr	r3, [pc, #136]	@ (80169b8 <tcp_receive+0x5f0>)
 8016930:	f240 5294 	movw	r2, #1428	@ 0x594
 8016934:	4921      	ldr	r1, [pc, #132]	@ (80169bc <tcp_receive+0x5f4>)
 8016936:	4822      	ldr	r0, [pc, #136]	@ (80169c0 <tcp_receive+0x5f8>)
 8016938:	f006 fd18 	bl	801d36c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801693c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801693e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8016942:	4293      	cmp	r3, r2
 8016944:	d906      	bls.n	8016954 <tcp_receive+0x58c>
 8016946:	4b1c      	ldr	r3, [pc, #112]	@ (80169b8 <tcp_receive+0x5f0>)
 8016948:	f240 5295 	movw	r2, #1429	@ 0x595
 801694c:	491d      	ldr	r1, [pc, #116]	@ (80169c4 <tcp_receive+0x5fc>)
 801694e:	481c      	ldr	r0, [pc, #112]	@ (80169c0 <tcp_receive+0x5f8>)
 8016950:	f006 fd0c 	bl	801d36c <iprintf>
      off = (u16_t)off32;
 8016954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016956:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801695a:	4b16      	ldr	r3, [pc, #88]	@ (80169b4 <tcp_receive+0x5ec>)
 801695c:	685b      	ldr	r3, [r3, #4]
 801695e:	891b      	ldrh	r3, [r3, #8]
 8016960:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016964:	429a      	cmp	r2, r3
 8016966:	d906      	bls.n	8016976 <tcp_receive+0x5ae>
 8016968:	4b13      	ldr	r3, [pc, #76]	@ (80169b8 <tcp_receive+0x5f0>)
 801696a:	f240 5297 	movw	r2, #1431	@ 0x597
 801696e:	4916      	ldr	r1, [pc, #88]	@ (80169c8 <tcp_receive+0x600>)
 8016970:	4813      	ldr	r0, [pc, #76]	@ (80169c0 <tcp_receive+0x5f8>)
 8016972:	f006 fcfb 	bl	801d36c <iprintf>
      inseg.len -= off;
 8016976:	4b0f      	ldr	r3, [pc, #60]	@ (80169b4 <tcp_receive+0x5ec>)
 8016978:	891a      	ldrh	r2, [r3, #8]
 801697a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801697e:	1ad3      	subs	r3, r2, r3
 8016980:	b29a      	uxth	r2, r3
 8016982:	4b0c      	ldr	r3, [pc, #48]	@ (80169b4 <tcp_receive+0x5ec>)
 8016984:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8016986:	4b0b      	ldr	r3, [pc, #44]	@ (80169b4 <tcp_receive+0x5ec>)
 8016988:	685b      	ldr	r3, [r3, #4]
 801698a:	891a      	ldrh	r2, [r3, #8]
 801698c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016990:	1ad3      	subs	r3, r2, r3
 8016992:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8016994:	e02a      	b.n	80169ec <tcp_receive+0x624>
 8016996:	bf00      	nop
 8016998:	0802077c 	.word	0x0802077c
 801699c:	08020784 	.word	0x08020784
 80169a0:	2000e49c 	.word	0x2000e49c
 80169a4:	2000e498 	.word	0x2000e498
 80169a8:	2000e45c 	.word	0x2000e45c
 80169ac:	2000e49e 	.word	0x2000e49e
 80169b0:	2000e494 	.word	0x2000e494
 80169b4:	2000e474 	.word	0x2000e474
 80169b8:	08020414 	.word	0x08020414
 80169bc:	0802078c 	.word	0x0802078c
 80169c0:	08020460 	.word	0x08020460
 80169c4:	0802079c 	.word	0x0802079c
 80169c8:	080207ac 	.word	0x080207ac
        off -= p->len;
 80169cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80169ce:	895b      	ldrh	r3, [r3, #10]
 80169d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80169d4:	1ad3      	subs	r3, r2, r3
 80169d6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80169da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80169dc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80169de:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80169e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80169e2:	2200      	movs	r2, #0
 80169e4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80169e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80169ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80169ee:	895b      	ldrh	r3, [r3, #10]
 80169f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80169f4:	429a      	cmp	r2, r3
 80169f6:	d8e9      	bhi.n	80169cc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80169f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80169fc:	4619      	mov	r1, r3
 80169fe:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8016a00:	f7fc f89c 	bl	8012b3c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a08:	4a90      	ldr	r2, [pc, #576]	@ (8016c4c <tcp_receive+0x884>)
 8016a0a:	6013      	str	r3, [r2, #0]
 8016a0c:	4b90      	ldr	r3, [pc, #576]	@ (8016c50 <tcp_receive+0x888>)
 8016a0e:	68db      	ldr	r3, [r3, #12]
 8016a10:	4a8e      	ldr	r2, [pc, #568]	@ (8016c4c <tcp_receive+0x884>)
 8016a12:	6812      	ldr	r2, [r2, #0]
 8016a14:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016a16:	e00d      	b.n	8016a34 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016a18:	4b8c      	ldr	r3, [pc, #560]	@ (8016c4c <tcp_receive+0x884>)
 8016a1a:	681a      	ldr	r2, [r3, #0]
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a20:	1ad3      	subs	r3, r2, r3
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	da06      	bge.n	8016a34 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	8b5b      	ldrh	r3, [r3, #26]
 8016a2a:	f043 0302 	orr.w	r3, r3, #2
 8016a2e:	b29a      	uxth	r2, r3
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016a34:	4b85      	ldr	r3, [pc, #532]	@ (8016c4c <tcp_receive+0x884>)
 8016a36:	681a      	ldr	r2, [r3, #0]
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a3c:	1ad3      	subs	r3, r2, r3
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	f2c0 8427 	blt.w	8017292 <tcp_receive+0xeca>
 8016a44:	4b81      	ldr	r3, [pc, #516]	@ (8016c4c <tcp_receive+0x884>)
 8016a46:	681a      	ldr	r2, [r3, #0]
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a4c:	6879      	ldr	r1, [r7, #4]
 8016a4e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016a50:	440b      	add	r3, r1
 8016a52:	1ad3      	subs	r3, r2, r3
 8016a54:	3301      	adds	r3, #1
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	f300 841b 	bgt.w	8017292 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016a60:	4b7a      	ldr	r3, [pc, #488]	@ (8016c4c <tcp_receive+0x884>)
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	429a      	cmp	r2, r3
 8016a66:	f040 8298 	bne.w	8016f9a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016a6a:	4b79      	ldr	r3, [pc, #484]	@ (8016c50 <tcp_receive+0x888>)
 8016a6c:	891c      	ldrh	r4, [r3, #8]
 8016a6e:	4b78      	ldr	r3, [pc, #480]	@ (8016c50 <tcp_receive+0x888>)
 8016a70:	68db      	ldr	r3, [r3, #12]
 8016a72:	899b      	ldrh	r3, [r3, #12]
 8016a74:	b29b      	uxth	r3, r3
 8016a76:	4618      	mov	r0, r3
 8016a78:	f7fa fcf8 	bl	801146c <lwip_htons>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	b2db      	uxtb	r3, r3
 8016a80:	f003 0303 	and.w	r3, r3, #3
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d001      	beq.n	8016a8c <tcp_receive+0x6c4>
 8016a88:	2301      	movs	r3, #1
 8016a8a:	e000      	b.n	8016a8e <tcp_receive+0x6c6>
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	4423      	add	r3, r4
 8016a90:	b29a      	uxth	r2, r3
 8016a92:	4b70      	ldr	r3, [pc, #448]	@ (8016c54 <tcp_receive+0x88c>)
 8016a94:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016a9a:	4b6e      	ldr	r3, [pc, #440]	@ (8016c54 <tcp_receive+0x88c>)
 8016a9c:	881b      	ldrh	r3, [r3, #0]
 8016a9e:	429a      	cmp	r2, r3
 8016aa0:	d274      	bcs.n	8016b8c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016aa2:	4b6b      	ldr	r3, [pc, #428]	@ (8016c50 <tcp_receive+0x888>)
 8016aa4:	68db      	ldr	r3, [r3, #12]
 8016aa6:	899b      	ldrh	r3, [r3, #12]
 8016aa8:	b29b      	uxth	r3, r3
 8016aaa:	4618      	mov	r0, r3
 8016aac:	f7fa fcde 	bl	801146c <lwip_htons>
 8016ab0:	4603      	mov	r3, r0
 8016ab2:	b2db      	uxtb	r3, r3
 8016ab4:	f003 0301 	and.w	r3, r3, #1
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d01e      	beq.n	8016afa <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016abc:	4b64      	ldr	r3, [pc, #400]	@ (8016c50 <tcp_receive+0x888>)
 8016abe:	68db      	ldr	r3, [r3, #12]
 8016ac0:	899b      	ldrh	r3, [r3, #12]
 8016ac2:	b29b      	uxth	r3, r3
 8016ac4:	b21b      	sxth	r3, r3
 8016ac6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8016aca:	b21c      	sxth	r4, r3
 8016acc:	4b60      	ldr	r3, [pc, #384]	@ (8016c50 <tcp_receive+0x888>)
 8016ace:	68db      	ldr	r3, [r3, #12]
 8016ad0:	899b      	ldrh	r3, [r3, #12]
 8016ad2:	b29b      	uxth	r3, r3
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	f7fa fcc9 	bl	801146c <lwip_htons>
 8016ada:	4603      	mov	r3, r0
 8016adc:	b2db      	uxtb	r3, r3
 8016ade:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8016ae2:	b29b      	uxth	r3, r3
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	f7fa fcc1 	bl	801146c <lwip_htons>
 8016aea:	4603      	mov	r3, r0
 8016aec:	b21b      	sxth	r3, r3
 8016aee:	4323      	orrs	r3, r4
 8016af0:	b21a      	sxth	r2, r3
 8016af2:	4b57      	ldr	r3, [pc, #348]	@ (8016c50 <tcp_receive+0x888>)
 8016af4:	68db      	ldr	r3, [r3, #12]
 8016af6:	b292      	uxth	r2, r2
 8016af8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016afe:	4b54      	ldr	r3, [pc, #336]	@ (8016c50 <tcp_receive+0x888>)
 8016b00:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016b02:	4b53      	ldr	r3, [pc, #332]	@ (8016c50 <tcp_receive+0x888>)
 8016b04:	68db      	ldr	r3, [r3, #12]
 8016b06:	899b      	ldrh	r3, [r3, #12]
 8016b08:	b29b      	uxth	r3, r3
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f7fa fcae 	bl	801146c <lwip_htons>
 8016b10:	4603      	mov	r3, r0
 8016b12:	b2db      	uxtb	r3, r3
 8016b14:	f003 0302 	and.w	r3, r3, #2
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d005      	beq.n	8016b28 <tcp_receive+0x760>
            inseg.len -= 1;
 8016b1c:	4b4c      	ldr	r3, [pc, #304]	@ (8016c50 <tcp_receive+0x888>)
 8016b1e:	891b      	ldrh	r3, [r3, #8]
 8016b20:	3b01      	subs	r3, #1
 8016b22:	b29a      	uxth	r2, r3
 8016b24:	4b4a      	ldr	r3, [pc, #296]	@ (8016c50 <tcp_receive+0x888>)
 8016b26:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016b28:	4b49      	ldr	r3, [pc, #292]	@ (8016c50 <tcp_receive+0x888>)
 8016b2a:	685b      	ldr	r3, [r3, #4]
 8016b2c:	4a48      	ldr	r2, [pc, #288]	@ (8016c50 <tcp_receive+0x888>)
 8016b2e:	8912      	ldrh	r2, [r2, #8]
 8016b30:	4611      	mov	r1, r2
 8016b32:	4618      	mov	r0, r3
 8016b34:	f7fb ff02 	bl	801293c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016b38:	4b45      	ldr	r3, [pc, #276]	@ (8016c50 <tcp_receive+0x888>)
 8016b3a:	891c      	ldrh	r4, [r3, #8]
 8016b3c:	4b44      	ldr	r3, [pc, #272]	@ (8016c50 <tcp_receive+0x888>)
 8016b3e:	68db      	ldr	r3, [r3, #12]
 8016b40:	899b      	ldrh	r3, [r3, #12]
 8016b42:	b29b      	uxth	r3, r3
 8016b44:	4618      	mov	r0, r3
 8016b46:	f7fa fc91 	bl	801146c <lwip_htons>
 8016b4a:	4603      	mov	r3, r0
 8016b4c:	b2db      	uxtb	r3, r3
 8016b4e:	f003 0303 	and.w	r3, r3, #3
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d001      	beq.n	8016b5a <tcp_receive+0x792>
 8016b56:	2301      	movs	r3, #1
 8016b58:	e000      	b.n	8016b5c <tcp_receive+0x794>
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	4423      	add	r3, r4
 8016b5e:	b29a      	uxth	r2, r3
 8016b60:	4b3c      	ldr	r3, [pc, #240]	@ (8016c54 <tcp_receive+0x88c>)
 8016b62:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016b64:	4b3b      	ldr	r3, [pc, #236]	@ (8016c54 <tcp_receive+0x88c>)
 8016b66:	881b      	ldrh	r3, [r3, #0]
 8016b68:	461a      	mov	r2, r3
 8016b6a:	4b38      	ldr	r3, [pc, #224]	@ (8016c4c <tcp_receive+0x884>)
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	441a      	add	r2, r3
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b74:	6879      	ldr	r1, [r7, #4]
 8016b76:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016b78:	440b      	add	r3, r1
 8016b7a:	429a      	cmp	r2, r3
 8016b7c:	d006      	beq.n	8016b8c <tcp_receive+0x7c4>
 8016b7e:	4b36      	ldr	r3, [pc, #216]	@ (8016c58 <tcp_receive+0x890>)
 8016b80:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8016b84:	4935      	ldr	r1, [pc, #212]	@ (8016c5c <tcp_receive+0x894>)
 8016b86:	4836      	ldr	r0, [pc, #216]	@ (8016c60 <tcp_receive+0x898>)
 8016b88:	f006 fbf0 	bl	801d36c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	f000 80e6 	beq.w	8016d62 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016b96:	4b2e      	ldr	r3, [pc, #184]	@ (8016c50 <tcp_receive+0x888>)
 8016b98:	68db      	ldr	r3, [r3, #12]
 8016b9a:	899b      	ldrh	r3, [r3, #12]
 8016b9c:	b29b      	uxth	r3, r3
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	f7fa fc64 	bl	801146c <lwip_htons>
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	b2db      	uxtb	r3, r3
 8016ba8:	f003 0301 	and.w	r3, r3, #1
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d010      	beq.n	8016bd2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8016bb0:	e00a      	b.n	8016bc8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016bb6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016bbc:	681a      	ldr	r2, [r3, #0]
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8016bc2:	68f8      	ldr	r0, [r7, #12]
 8016bc4:	f7fd fcc5 	bl	8014552 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d1f0      	bne.n	8016bb2 <tcp_receive+0x7ea>
 8016bd0:	e0c7      	b.n	8016d62 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016bd8:	e051      	b.n	8016c7e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016bdc:	68db      	ldr	r3, [r3, #12]
 8016bde:	899b      	ldrh	r3, [r3, #12]
 8016be0:	b29b      	uxth	r3, r3
 8016be2:	4618      	mov	r0, r3
 8016be4:	f7fa fc42 	bl	801146c <lwip_htons>
 8016be8:	4603      	mov	r3, r0
 8016bea:	b2db      	uxtb	r3, r3
 8016bec:	f003 0301 	and.w	r3, r3, #1
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d03c      	beq.n	8016c6e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016bf4:	4b16      	ldr	r3, [pc, #88]	@ (8016c50 <tcp_receive+0x888>)
 8016bf6:	68db      	ldr	r3, [r3, #12]
 8016bf8:	899b      	ldrh	r3, [r3, #12]
 8016bfa:	b29b      	uxth	r3, r3
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	f7fa fc35 	bl	801146c <lwip_htons>
 8016c02:	4603      	mov	r3, r0
 8016c04:	b2db      	uxtb	r3, r3
 8016c06:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d12f      	bne.n	8016c6e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016c0e:	4b10      	ldr	r3, [pc, #64]	@ (8016c50 <tcp_receive+0x888>)
 8016c10:	68db      	ldr	r3, [r3, #12]
 8016c12:	899b      	ldrh	r3, [r3, #12]
 8016c14:	b29c      	uxth	r4, r3
 8016c16:	2001      	movs	r0, #1
 8016c18:	f7fa fc28 	bl	801146c <lwip_htons>
 8016c1c:	4603      	mov	r3, r0
 8016c1e:	461a      	mov	r2, r3
 8016c20:	4b0b      	ldr	r3, [pc, #44]	@ (8016c50 <tcp_receive+0x888>)
 8016c22:	68db      	ldr	r3, [r3, #12]
 8016c24:	4322      	orrs	r2, r4
 8016c26:	b292      	uxth	r2, r2
 8016c28:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016c2a:	4b09      	ldr	r3, [pc, #36]	@ (8016c50 <tcp_receive+0x888>)
 8016c2c:	891c      	ldrh	r4, [r3, #8]
 8016c2e:	4b08      	ldr	r3, [pc, #32]	@ (8016c50 <tcp_receive+0x888>)
 8016c30:	68db      	ldr	r3, [r3, #12]
 8016c32:	899b      	ldrh	r3, [r3, #12]
 8016c34:	b29b      	uxth	r3, r3
 8016c36:	4618      	mov	r0, r3
 8016c38:	f7fa fc18 	bl	801146c <lwip_htons>
 8016c3c:	4603      	mov	r3, r0
 8016c3e:	b2db      	uxtb	r3, r3
 8016c40:	f003 0303 	and.w	r3, r3, #3
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d00d      	beq.n	8016c64 <tcp_receive+0x89c>
 8016c48:	2301      	movs	r3, #1
 8016c4a:	e00c      	b.n	8016c66 <tcp_receive+0x89e>
 8016c4c:	2000e494 	.word	0x2000e494
 8016c50:	2000e474 	.word	0x2000e474
 8016c54:	2000e49e 	.word	0x2000e49e
 8016c58:	08020414 	.word	0x08020414
 8016c5c:	080207bc 	.word	0x080207bc
 8016c60:	08020460 	.word	0x08020460
 8016c64:	2300      	movs	r3, #0
 8016c66:	4423      	add	r3, r4
 8016c68:	b29a      	uxth	r2, r3
 8016c6a:	4b98      	ldr	r3, [pc, #608]	@ (8016ecc <tcp_receive+0xb04>)
 8016c6c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8016c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c70:	613b      	str	r3, [r7, #16]
              next = next->next;
 8016c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8016c78:	6938      	ldr	r0, [r7, #16]
 8016c7a:	f7fd fc6a 	bl	8014552 <tcp_seg_free>
            while (next &&
 8016c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d00e      	beq.n	8016ca2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016c84:	4b91      	ldr	r3, [pc, #580]	@ (8016ecc <tcp_receive+0xb04>)
 8016c86:	881b      	ldrh	r3, [r3, #0]
 8016c88:	461a      	mov	r2, r3
 8016c8a:	4b91      	ldr	r3, [pc, #580]	@ (8016ed0 <tcp_receive+0xb08>)
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	441a      	add	r2, r3
 8016c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c92:	68db      	ldr	r3, [r3, #12]
 8016c94:	685b      	ldr	r3, [r3, #4]
 8016c96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016c98:	8909      	ldrh	r1, [r1, #8]
 8016c9a:	440b      	add	r3, r1
 8016c9c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	da9b      	bge.n	8016bda <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d059      	beq.n	8016d5c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8016ca8:	4b88      	ldr	r3, [pc, #544]	@ (8016ecc <tcp_receive+0xb04>)
 8016caa:	881b      	ldrh	r3, [r3, #0]
 8016cac:	461a      	mov	r2, r3
 8016cae:	4b88      	ldr	r3, [pc, #544]	@ (8016ed0 <tcp_receive+0xb08>)
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	441a      	add	r2, r3
 8016cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016cb6:	68db      	ldr	r3, [r3, #12]
 8016cb8:	685b      	ldr	r3, [r3, #4]
 8016cba:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	dd4d      	ble.n	8016d5c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016cc2:	68db      	ldr	r3, [r3, #12]
 8016cc4:	685b      	ldr	r3, [r3, #4]
 8016cc6:	b29a      	uxth	r2, r3
 8016cc8:	4b81      	ldr	r3, [pc, #516]	@ (8016ed0 <tcp_receive+0xb08>)
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	b29b      	uxth	r3, r3
 8016cce:	1ad3      	subs	r3, r2, r3
 8016cd0:	b29a      	uxth	r2, r3
 8016cd2:	4b80      	ldr	r3, [pc, #512]	@ (8016ed4 <tcp_receive+0xb0c>)
 8016cd4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016cd6:	4b7f      	ldr	r3, [pc, #508]	@ (8016ed4 <tcp_receive+0xb0c>)
 8016cd8:	68db      	ldr	r3, [r3, #12]
 8016cda:	899b      	ldrh	r3, [r3, #12]
 8016cdc:	b29b      	uxth	r3, r3
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f7fa fbc4 	bl	801146c <lwip_htons>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	b2db      	uxtb	r3, r3
 8016ce8:	f003 0302 	and.w	r3, r3, #2
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d005      	beq.n	8016cfc <tcp_receive+0x934>
                inseg.len -= 1;
 8016cf0:	4b78      	ldr	r3, [pc, #480]	@ (8016ed4 <tcp_receive+0xb0c>)
 8016cf2:	891b      	ldrh	r3, [r3, #8]
 8016cf4:	3b01      	subs	r3, #1
 8016cf6:	b29a      	uxth	r2, r3
 8016cf8:	4b76      	ldr	r3, [pc, #472]	@ (8016ed4 <tcp_receive+0xb0c>)
 8016cfa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016cfc:	4b75      	ldr	r3, [pc, #468]	@ (8016ed4 <tcp_receive+0xb0c>)
 8016cfe:	685b      	ldr	r3, [r3, #4]
 8016d00:	4a74      	ldr	r2, [pc, #464]	@ (8016ed4 <tcp_receive+0xb0c>)
 8016d02:	8912      	ldrh	r2, [r2, #8]
 8016d04:	4611      	mov	r1, r2
 8016d06:	4618      	mov	r0, r3
 8016d08:	f7fb fe18 	bl	801293c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016d0c:	4b71      	ldr	r3, [pc, #452]	@ (8016ed4 <tcp_receive+0xb0c>)
 8016d0e:	891c      	ldrh	r4, [r3, #8]
 8016d10:	4b70      	ldr	r3, [pc, #448]	@ (8016ed4 <tcp_receive+0xb0c>)
 8016d12:	68db      	ldr	r3, [r3, #12]
 8016d14:	899b      	ldrh	r3, [r3, #12]
 8016d16:	b29b      	uxth	r3, r3
 8016d18:	4618      	mov	r0, r3
 8016d1a:	f7fa fba7 	bl	801146c <lwip_htons>
 8016d1e:	4603      	mov	r3, r0
 8016d20:	b2db      	uxtb	r3, r3
 8016d22:	f003 0303 	and.w	r3, r3, #3
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d001      	beq.n	8016d2e <tcp_receive+0x966>
 8016d2a:	2301      	movs	r3, #1
 8016d2c:	e000      	b.n	8016d30 <tcp_receive+0x968>
 8016d2e:	2300      	movs	r3, #0
 8016d30:	4423      	add	r3, r4
 8016d32:	b29a      	uxth	r2, r3
 8016d34:	4b65      	ldr	r3, [pc, #404]	@ (8016ecc <tcp_receive+0xb04>)
 8016d36:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016d38:	4b64      	ldr	r3, [pc, #400]	@ (8016ecc <tcp_receive+0xb04>)
 8016d3a:	881b      	ldrh	r3, [r3, #0]
 8016d3c:	461a      	mov	r2, r3
 8016d3e:	4b64      	ldr	r3, [pc, #400]	@ (8016ed0 <tcp_receive+0xb08>)
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	441a      	add	r2, r3
 8016d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016d46:	68db      	ldr	r3, [r3, #12]
 8016d48:	685b      	ldr	r3, [r3, #4]
 8016d4a:	429a      	cmp	r2, r3
 8016d4c:	d006      	beq.n	8016d5c <tcp_receive+0x994>
 8016d4e:	4b62      	ldr	r3, [pc, #392]	@ (8016ed8 <tcp_receive+0xb10>)
 8016d50:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8016d54:	4961      	ldr	r1, [pc, #388]	@ (8016edc <tcp_receive+0xb14>)
 8016d56:	4862      	ldr	r0, [pc, #392]	@ (8016ee0 <tcp_receive+0xb18>)
 8016d58:	f006 fb08 	bl	801d36c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016d60:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8016d62:	4b5a      	ldr	r3, [pc, #360]	@ (8016ecc <tcp_receive+0xb04>)
 8016d64:	881b      	ldrh	r3, [r3, #0]
 8016d66:	461a      	mov	r2, r3
 8016d68:	4b59      	ldr	r3, [pc, #356]	@ (8016ed0 <tcp_receive+0xb08>)
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	441a      	add	r2, r3
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016d76:	4b55      	ldr	r3, [pc, #340]	@ (8016ecc <tcp_receive+0xb04>)
 8016d78:	881b      	ldrh	r3, [r3, #0]
 8016d7a:	429a      	cmp	r2, r3
 8016d7c:	d206      	bcs.n	8016d8c <tcp_receive+0x9c4>
 8016d7e:	4b56      	ldr	r3, [pc, #344]	@ (8016ed8 <tcp_receive+0xb10>)
 8016d80:	f240 6207 	movw	r2, #1543	@ 0x607
 8016d84:	4957      	ldr	r1, [pc, #348]	@ (8016ee4 <tcp_receive+0xb1c>)
 8016d86:	4856      	ldr	r0, [pc, #344]	@ (8016ee0 <tcp_receive+0xb18>)
 8016d88:	f006 faf0 	bl	801d36c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016d90:	4b4e      	ldr	r3, [pc, #312]	@ (8016ecc <tcp_receive+0xb04>)
 8016d92:	881b      	ldrh	r3, [r3, #0]
 8016d94:	1ad3      	subs	r3, r2, r3
 8016d96:	b29a      	uxth	r2, r3
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016d9c:	6878      	ldr	r0, [r7, #4]
 8016d9e:	f7fc feb1 	bl	8013b04 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8016da2:	4b4c      	ldr	r3, [pc, #304]	@ (8016ed4 <tcp_receive+0xb0c>)
 8016da4:	685b      	ldr	r3, [r3, #4]
 8016da6:	891b      	ldrh	r3, [r3, #8]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d006      	beq.n	8016dba <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8016dac:	4b49      	ldr	r3, [pc, #292]	@ (8016ed4 <tcp_receive+0xb0c>)
 8016dae:	685b      	ldr	r3, [r3, #4]
 8016db0:	4a4d      	ldr	r2, [pc, #308]	@ (8016ee8 <tcp_receive+0xb20>)
 8016db2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016db4:	4b47      	ldr	r3, [pc, #284]	@ (8016ed4 <tcp_receive+0xb0c>)
 8016db6:	2200      	movs	r2, #0
 8016db8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016dba:	4b46      	ldr	r3, [pc, #280]	@ (8016ed4 <tcp_receive+0xb0c>)
 8016dbc:	68db      	ldr	r3, [r3, #12]
 8016dbe:	899b      	ldrh	r3, [r3, #12]
 8016dc0:	b29b      	uxth	r3, r3
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	f7fa fb52 	bl	801146c <lwip_htons>
 8016dc8:	4603      	mov	r3, r0
 8016dca:	b2db      	uxtb	r3, r3
 8016dcc:	f003 0301 	and.w	r3, r3, #1
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	f000 80b8 	beq.w	8016f46 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016dd6:	4b45      	ldr	r3, [pc, #276]	@ (8016eec <tcp_receive+0xb24>)
 8016dd8:	781b      	ldrb	r3, [r3, #0]
 8016dda:	f043 0320 	orr.w	r3, r3, #32
 8016dde:	b2da      	uxtb	r2, r3
 8016de0:	4b42      	ldr	r3, [pc, #264]	@ (8016eec <tcp_receive+0xb24>)
 8016de2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016de4:	e0af      	b.n	8016f46 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016dea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016df0:	68db      	ldr	r3, [r3, #12]
 8016df2:	685b      	ldr	r3, [r3, #4]
 8016df4:	4a36      	ldr	r2, [pc, #216]	@ (8016ed0 <tcp_receive+0xb08>)
 8016df6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016df8:	68bb      	ldr	r3, [r7, #8]
 8016dfa:	891b      	ldrh	r3, [r3, #8]
 8016dfc:	461c      	mov	r4, r3
 8016dfe:	68bb      	ldr	r3, [r7, #8]
 8016e00:	68db      	ldr	r3, [r3, #12]
 8016e02:	899b      	ldrh	r3, [r3, #12]
 8016e04:	b29b      	uxth	r3, r3
 8016e06:	4618      	mov	r0, r3
 8016e08:	f7fa fb30 	bl	801146c <lwip_htons>
 8016e0c:	4603      	mov	r3, r0
 8016e0e:	b2db      	uxtb	r3, r3
 8016e10:	f003 0303 	and.w	r3, r3, #3
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d001      	beq.n	8016e1c <tcp_receive+0xa54>
 8016e18:	2301      	movs	r3, #1
 8016e1a:	e000      	b.n	8016e1e <tcp_receive+0xa56>
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	191a      	adds	r2, r3, r4
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e24:	441a      	add	r2, r3
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016e2e:	461c      	mov	r4, r3
 8016e30:	68bb      	ldr	r3, [r7, #8]
 8016e32:	891b      	ldrh	r3, [r3, #8]
 8016e34:	461d      	mov	r5, r3
 8016e36:	68bb      	ldr	r3, [r7, #8]
 8016e38:	68db      	ldr	r3, [r3, #12]
 8016e3a:	899b      	ldrh	r3, [r3, #12]
 8016e3c:	b29b      	uxth	r3, r3
 8016e3e:	4618      	mov	r0, r3
 8016e40:	f7fa fb14 	bl	801146c <lwip_htons>
 8016e44:	4603      	mov	r3, r0
 8016e46:	b2db      	uxtb	r3, r3
 8016e48:	f003 0303 	and.w	r3, r3, #3
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d001      	beq.n	8016e54 <tcp_receive+0xa8c>
 8016e50:	2301      	movs	r3, #1
 8016e52:	e000      	b.n	8016e56 <tcp_receive+0xa8e>
 8016e54:	2300      	movs	r3, #0
 8016e56:	442b      	add	r3, r5
 8016e58:	429c      	cmp	r4, r3
 8016e5a:	d206      	bcs.n	8016e6a <tcp_receive+0xaa2>
 8016e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8016ed8 <tcp_receive+0xb10>)
 8016e5e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8016e62:	4923      	ldr	r1, [pc, #140]	@ (8016ef0 <tcp_receive+0xb28>)
 8016e64:	481e      	ldr	r0, [pc, #120]	@ (8016ee0 <tcp_receive+0xb18>)
 8016e66:	f006 fa81 	bl	801d36c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016e6a:	68bb      	ldr	r3, [r7, #8]
 8016e6c:	891b      	ldrh	r3, [r3, #8]
 8016e6e:	461c      	mov	r4, r3
 8016e70:	68bb      	ldr	r3, [r7, #8]
 8016e72:	68db      	ldr	r3, [r3, #12]
 8016e74:	899b      	ldrh	r3, [r3, #12]
 8016e76:	b29b      	uxth	r3, r3
 8016e78:	4618      	mov	r0, r3
 8016e7a:	f7fa faf7 	bl	801146c <lwip_htons>
 8016e7e:	4603      	mov	r3, r0
 8016e80:	b2db      	uxtb	r3, r3
 8016e82:	f003 0303 	and.w	r3, r3, #3
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d001      	beq.n	8016e8e <tcp_receive+0xac6>
 8016e8a:	2301      	movs	r3, #1
 8016e8c:	e000      	b.n	8016e90 <tcp_receive+0xac8>
 8016e8e:	2300      	movs	r3, #0
 8016e90:	1919      	adds	r1, r3, r4
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016e96:	b28b      	uxth	r3, r1
 8016e98:	1ad3      	subs	r3, r2, r3
 8016e9a:	b29a      	uxth	r2, r3
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8016ea0:	6878      	ldr	r0, [r7, #4]
 8016ea2:	f7fc fe2f 	bl	8013b04 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8016ea6:	68bb      	ldr	r3, [r7, #8]
 8016ea8:	685b      	ldr	r3, [r3, #4]
 8016eaa:	891b      	ldrh	r3, [r3, #8]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d028      	beq.n	8016f02 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8016eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8016ee8 <tcp_receive+0xb20>)
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d01d      	beq.n	8016ef4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8016eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8016ee8 <tcp_receive+0xb20>)
 8016eba:	681a      	ldr	r2, [r3, #0]
 8016ebc:	68bb      	ldr	r3, [r7, #8]
 8016ebe:	685b      	ldr	r3, [r3, #4]
 8016ec0:	4619      	mov	r1, r3
 8016ec2:	4610      	mov	r0, r2
 8016ec4:	f7fb ff8e 	bl	8012de4 <pbuf_cat>
 8016ec8:	e018      	b.n	8016efc <tcp_receive+0xb34>
 8016eca:	bf00      	nop
 8016ecc:	2000e49e 	.word	0x2000e49e
 8016ed0:	2000e494 	.word	0x2000e494
 8016ed4:	2000e474 	.word	0x2000e474
 8016ed8:	08020414 	.word	0x08020414
 8016edc:	080207f4 	.word	0x080207f4
 8016ee0:	08020460 	.word	0x08020460
 8016ee4:	08020830 	.word	0x08020830
 8016ee8:	2000e4a4 	.word	0x2000e4a4
 8016eec:	2000e4a1 	.word	0x2000e4a1
 8016ef0:	08020850 	.word	0x08020850
            } else {
              recv_data = cseg->p;
 8016ef4:	68bb      	ldr	r3, [r7, #8]
 8016ef6:	685b      	ldr	r3, [r3, #4]
 8016ef8:	4a70      	ldr	r2, [pc, #448]	@ (80170bc <tcp_receive+0xcf4>)
 8016efa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016efc:	68bb      	ldr	r3, [r7, #8]
 8016efe:	2200      	movs	r2, #0
 8016f00:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016f02:	68bb      	ldr	r3, [r7, #8]
 8016f04:	68db      	ldr	r3, [r3, #12]
 8016f06:	899b      	ldrh	r3, [r3, #12]
 8016f08:	b29b      	uxth	r3, r3
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	f7fa faae 	bl	801146c <lwip_htons>
 8016f10:	4603      	mov	r3, r0
 8016f12:	b2db      	uxtb	r3, r3
 8016f14:	f003 0301 	and.w	r3, r3, #1
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d00d      	beq.n	8016f38 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8016f1c:	4b68      	ldr	r3, [pc, #416]	@ (80170c0 <tcp_receive+0xcf8>)
 8016f1e:	781b      	ldrb	r3, [r3, #0]
 8016f20:	f043 0320 	orr.w	r3, r3, #32
 8016f24:	b2da      	uxtb	r2, r3
 8016f26:	4b66      	ldr	r3, [pc, #408]	@ (80170c0 <tcp_receive+0xcf8>)
 8016f28:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	7d1b      	ldrb	r3, [r3, #20]
 8016f2e:	2b04      	cmp	r3, #4
 8016f30:	d102      	bne.n	8016f38 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	2207      	movs	r2, #7
 8016f36:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8016f38:	68bb      	ldr	r3, [r7, #8]
 8016f3a:	681a      	ldr	r2, [r3, #0]
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8016f40:	68b8      	ldr	r0, [r7, #8]
 8016f42:	f7fd fb06 	bl	8014552 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d008      	beq.n	8016f60 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016f52:	68db      	ldr	r3, [r3, #12]
 8016f54:	685a      	ldr	r2, [r3, #4]
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8016f5a:	429a      	cmp	r2, r3
 8016f5c:	f43f af43 	beq.w	8016de6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	8b5b      	ldrh	r3, [r3, #26]
 8016f64:	f003 0301 	and.w	r3, r3, #1
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d00e      	beq.n	8016f8a <tcp_receive+0xbc2>
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	8b5b      	ldrh	r3, [r3, #26]
 8016f70:	f023 0301 	bic.w	r3, r3, #1
 8016f74:	b29a      	uxth	r2, r3
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	835a      	strh	r2, [r3, #26]
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	8b5b      	ldrh	r3, [r3, #26]
 8016f7e:	f043 0302 	orr.w	r3, r3, #2
 8016f82:	b29a      	uxth	r2, r3
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016f88:	e187      	b.n	801729a <tcp_receive+0xed2>
        tcp_ack(pcb);
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	8b5b      	ldrh	r3, [r3, #26]
 8016f8e:	f043 0301 	orr.w	r3, r3, #1
 8016f92:	b29a      	uxth	r2, r3
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016f98:	e17f      	b.n	801729a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d106      	bne.n	8016fb0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8016fa2:	4848      	ldr	r0, [pc, #288]	@ (80170c4 <tcp_receive+0xcfc>)
 8016fa4:	f7fd faee 	bl	8014584 <tcp_seg_copy>
 8016fa8:	4602      	mov	r2, r0
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	675a      	str	r2, [r3, #116]	@ 0x74
 8016fae:	e16c      	b.n	801728a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016fba:	e156      	b.n	801726a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8016fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016fbe:	68db      	ldr	r3, [r3, #12]
 8016fc0:	685a      	ldr	r2, [r3, #4]
 8016fc2:	4b41      	ldr	r3, [pc, #260]	@ (80170c8 <tcp_receive+0xd00>)
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	429a      	cmp	r2, r3
 8016fc8:	d11d      	bne.n	8017006 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8016fca:	4b3e      	ldr	r3, [pc, #248]	@ (80170c4 <tcp_receive+0xcfc>)
 8016fcc:	891a      	ldrh	r2, [r3, #8]
 8016fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016fd0:	891b      	ldrh	r3, [r3, #8]
 8016fd2:	429a      	cmp	r2, r3
 8016fd4:	f240 814e 	bls.w	8017274 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016fd8:	483a      	ldr	r0, [pc, #232]	@ (80170c4 <tcp_receive+0xcfc>)
 8016fda:	f7fd fad3 	bl	8014584 <tcp_seg_copy>
 8016fde:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8016fe0:	697b      	ldr	r3, [r7, #20]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	f000 8148 	beq.w	8017278 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8016fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d003      	beq.n	8016ff6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8016fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016ff0:	697a      	ldr	r2, [r7, #20]
 8016ff2:	601a      	str	r2, [r3, #0]
 8016ff4:	e002      	b.n	8016ffc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	697a      	ldr	r2, [r7, #20]
 8016ffa:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8016ffc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016ffe:	6978      	ldr	r0, [r7, #20]
 8017000:	f7ff f8de 	bl	80161c0 <tcp_oos_insert_segment>
                }
                break;
 8017004:	e138      	b.n	8017278 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8017006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017008:	2b00      	cmp	r3, #0
 801700a:	d117      	bne.n	801703c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801700c:	4b2e      	ldr	r3, [pc, #184]	@ (80170c8 <tcp_receive+0xd00>)
 801700e:	681a      	ldr	r2, [r3, #0]
 8017010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017012:	68db      	ldr	r3, [r3, #12]
 8017014:	685b      	ldr	r3, [r3, #4]
 8017016:	1ad3      	subs	r3, r2, r3
 8017018:	2b00      	cmp	r3, #0
 801701a:	da57      	bge.n	80170cc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801701c:	4829      	ldr	r0, [pc, #164]	@ (80170c4 <tcp_receive+0xcfc>)
 801701e:	f7fd fab1 	bl	8014584 <tcp_seg_copy>
 8017022:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8017024:	69bb      	ldr	r3, [r7, #24]
 8017026:	2b00      	cmp	r3, #0
 8017028:	f000 8128 	beq.w	801727c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	69ba      	ldr	r2, [r7, #24]
 8017030:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8017032:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017034:	69b8      	ldr	r0, [r7, #24]
 8017036:	f7ff f8c3 	bl	80161c0 <tcp_oos_insert_segment>
                  }
                  break;
 801703a:	e11f      	b.n	801727c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801703c:	4b22      	ldr	r3, [pc, #136]	@ (80170c8 <tcp_receive+0xd00>)
 801703e:	681a      	ldr	r2, [r3, #0]
 8017040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017042:	68db      	ldr	r3, [r3, #12]
 8017044:	685b      	ldr	r3, [r3, #4]
 8017046:	1ad3      	subs	r3, r2, r3
 8017048:	3b01      	subs	r3, #1
 801704a:	2b00      	cmp	r3, #0
 801704c:	db3e      	blt.n	80170cc <tcp_receive+0xd04>
 801704e:	4b1e      	ldr	r3, [pc, #120]	@ (80170c8 <tcp_receive+0xd00>)
 8017050:	681a      	ldr	r2, [r3, #0]
 8017052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017054:	68db      	ldr	r3, [r3, #12]
 8017056:	685b      	ldr	r3, [r3, #4]
 8017058:	1ad3      	subs	r3, r2, r3
 801705a:	3301      	adds	r3, #1
 801705c:	2b00      	cmp	r3, #0
 801705e:	dc35      	bgt.n	80170cc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017060:	4818      	ldr	r0, [pc, #96]	@ (80170c4 <tcp_receive+0xcfc>)
 8017062:	f7fd fa8f 	bl	8014584 <tcp_seg_copy>
 8017066:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8017068:	69fb      	ldr	r3, [r7, #28]
 801706a:	2b00      	cmp	r3, #0
 801706c:	f000 8108 	beq.w	8017280 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8017070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017072:	68db      	ldr	r3, [r3, #12]
 8017074:	685b      	ldr	r3, [r3, #4]
 8017076:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017078:	8912      	ldrh	r2, [r2, #8]
 801707a:	441a      	add	r2, r3
 801707c:	4b12      	ldr	r3, [pc, #72]	@ (80170c8 <tcp_receive+0xd00>)
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	1ad3      	subs	r3, r2, r3
 8017082:	2b00      	cmp	r3, #0
 8017084:	dd12      	ble.n	80170ac <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8017086:	4b10      	ldr	r3, [pc, #64]	@ (80170c8 <tcp_receive+0xd00>)
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	b29a      	uxth	r2, r3
 801708c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801708e:	68db      	ldr	r3, [r3, #12]
 8017090:	685b      	ldr	r3, [r3, #4]
 8017092:	b29b      	uxth	r3, r3
 8017094:	1ad3      	subs	r3, r2, r3
 8017096:	b29a      	uxth	r2, r3
 8017098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801709a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801709c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801709e:	685a      	ldr	r2, [r3, #4]
 80170a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80170a2:	891b      	ldrh	r3, [r3, #8]
 80170a4:	4619      	mov	r1, r3
 80170a6:	4610      	mov	r0, r2
 80170a8:	f7fb fc48 	bl	801293c <pbuf_realloc>
                    }
                    prev->next = cseg;
 80170ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80170ae:	69fa      	ldr	r2, [r7, #28]
 80170b0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80170b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80170b4:	69f8      	ldr	r0, [r7, #28]
 80170b6:	f7ff f883 	bl	80161c0 <tcp_oos_insert_segment>
                  }
                  break;
 80170ba:	e0e1      	b.n	8017280 <tcp_receive+0xeb8>
 80170bc:	2000e4a4 	.word	0x2000e4a4
 80170c0:	2000e4a1 	.word	0x2000e4a1
 80170c4:	2000e474 	.word	0x2000e474
 80170c8:	2000e494 	.word	0x2000e494
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80170cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80170ce:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80170d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	f040 80c5 	bne.w	8017264 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80170da:	4b7f      	ldr	r3, [pc, #508]	@ (80172d8 <tcp_receive+0xf10>)
 80170dc:	681a      	ldr	r2, [r3, #0]
 80170de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80170e0:	68db      	ldr	r3, [r3, #12]
 80170e2:	685b      	ldr	r3, [r3, #4]
 80170e4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	f340 80bc 	ble.w	8017264 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80170ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80170ee:	68db      	ldr	r3, [r3, #12]
 80170f0:	899b      	ldrh	r3, [r3, #12]
 80170f2:	b29b      	uxth	r3, r3
 80170f4:	4618      	mov	r0, r3
 80170f6:	f7fa f9b9 	bl	801146c <lwip_htons>
 80170fa:	4603      	mov	r3, r0
 80170fc:	b2db      	uxtb	r3, r3
 80170fe:	f003 0301 	and.w	r3, r3, #1
 8017102:	2b00      	cmp	r3, #0
 8017104:	f040 80be 	bne.w	8017284 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8017108:	4874      	ldr	r0, [pc, #464]	@ (80172dc <tcp_receive+0xf14>)
 801710a:	f7fd fa3b 	bl	8014584 <tcp_seg_copy>
 801710e:	4602      	mov	r2, r0
 8017110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017112:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8017114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	2b00      	cmp	r3, #0
 801711a:	f000 80b5 	beq.w	8017288 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801711e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017120:	68db      	ldr	r3, [r3, #12]
 8017122:	685b      	ldr	r3, [r3, #4]
 8017124:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017126:	8912      	ldrh	r2, [r2, #8]
 8017128:	441a      	add	r2, r3
 801712a:	4b6b      	ldr	r3, [pc, #428]	@ (80172d8 <tcp_receive+0xf10>)
 801712c:	681b      	ldr	r3, [r3, #0]
 801712e:	1ad3      	subs	r3, r2, r3
 8017130:	2b00      	cmp	r3, #0
 8017132:	dd12      	ble.n	801715a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8017134:	4b68      	ldr	r3, [pc, #416]	@ (80172d8 <tcp_receive+0xf10>)
 8017136:	681b      	ldr	r3, [r3, #0]
 8017138:	b29a      	uxth	r2, r3
 801713a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801713c:	68db      	ldr	r3, [r3, #12]
 801713e:	685b      	ldr	r3, [r3, #4]
 8017140:	b29b      	uxth	r3, r3
 8017142:	1ad3      	subs	r3, r2, r3
 8017144:	b29a      	uxth	r2, r3
 8017146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017148:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801714a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801714c:	685a      	ldr	r2, [r3, #4]
 801714e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017150:	891b      	ldrh	r3, [r3, #8]
 8017152:	4619      	mov	r1, r3
 8017154:	4610      	mov	r0, r2
 8017156:	f7fb fbf1 	bl	801293c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801715a:	4b61      	ldr	r3, [pc, #388]	@ (80172e0 <tcp_receive+0xf18>)
 801715c:	881b      	ldrh	r3, [r3, #0]
 801715e:	461a      	mov	r2, r3
 8017160:	4b5d      	ldr	r3, [pc, #372]	@ (80172d8 <tcp_receive+0xf10>)
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	441a      	add	r2, r3
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801716a:	6879      	ldr	r1, [r7, #4]
 801716c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801716e:	440b      	add	r3, r1
 8017170:	1ad3      	subs	r3, r2, r3
 8017172:	2b00      	cmp	r3, #0
 8017174:	f340 8088 	ble.w	8017288 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8017178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	68db      	ldr	r3, [r3, #12]
 801717e:	899b      	ldrh	r3, [r3, #12]
 8017180:	b29b      	uxth	r3, r3
 8017182:	4618      	mov	r0, r3
 8017184:	f7fa f972 	bl	801146c <lwip_htons>
 8017188:	4603      	mov	r3, r0
 801718a:	b2db      	uxtb	r3, r3
 801718c:	f003 0301 	and.w	r3, r3, #1
 8017190:	2b00      	cmp	r3, #0
 8017192:	d021      	beq.n	80171d8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8017194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	68db      	ldr	r3, [r3, #12]
 801719a:	899b      	ldrh	r3, [r3, #12]
 801719c:	b29b      	uxth	r3, r3
 801719e:	b21b      	sxth	r3, r3
 80171a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80171a4:	b21c      	sxth	r4, r3
 80171a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	68db      	ldr	r3, [r3, #12]
 80171ac:	899b      	ldrh	r3, [r3, #12]
 80171ae:	b29b      	uxth	r3, r3
 80171b0:	4618      	mov	r0, r3
 80171b2:	f7fa f95b 	bl	801146c <lwip_htons>
 80171b6:	4603      	mov	r3, r0
 80171b8:	b2db      	uxtb	r3, r3
 80171ba:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80171be:	b29b      	uxth	r3, r3
 80171c0:	4618      	mov	r0, r3
 80171c2:	f7fa f953 	bl	801146c <lwip_htons>
 80171c6:	4603      	mov	r3, r0
 80171c8:	b21b      	sxth	r3, r3
 80171ca:	4323      	orrs	r3, r4
 80171cc:	b21a      	sxth	r2, r3
 80171ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	68db      	ldr	r3, [r3, #12]
 80171d4:	b292      	uxth	r2, r2
 80171d6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171dc:	b29a      	uxth	r2, r3
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80171e2:	4413      	add	r3, r2
 80171e4:	b299      	uxth	r1, r3
 80171e6:	4b3c      	ldr	r3, [pc, #240]	@ (80172d8 <tcp_receive+0xf10>)
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	b29a      	uxth	r2, r3
 80171ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	1a8a      	subs	r2, r1, r2
 80171f2:	b292      	uxth	r2, r2
 80171f4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80171f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	685a      	ldr	r2, [r3, #4]
 80171fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	891b      	ldrh	r3, [r3, #8]
 8017202:	4619      	mov	r1, r3
 8017204:	4610      	mov	r0, r2
 8017206:	f7fb fb99 	bl	801293c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801720a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	891c      	ldrh	r4, [r3, #8]
 8017210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	68db      	ldr	r3, [r3, #12]
 8017216:	899b      	ldrh	r3, [r3, #12]
 8017218:	b29b      	uxth	r3, r3
 801721a:	4618      	mov	r0, r3
 801721c:	f7fa f926 	bl	801146c <lwip_htons>
 8017220:	4603      	mov	r3, r0
 8017222:	b2db      	uxtb	r3, r3
 8017224:	f003 0303 	and.w	r3, r3, #3
 8017228:	2b00      	cmp	r3, #0
 801722a:	d001      	beq.n	8017230 <tcp_receive+0xe68>
 801722c:	2301      	movs	r3, #1
 801722e:	e000      	b.n	8017232 <tcp_receive+0xe6a>
 8017230:	2300      	movs	r3, #0
 8017232:	4423      	add	r3, r4
 8017234:	b29a      	uxth	r2, r3
 8017236:	4b2a      	ldr	r3, [pc, #168]	@ (80172e0 <tcp_receive+0xf18>)
 8017238:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801723a:	4b29      	ldr	r3, [pc, #164]	@ (80172e0 <tcp_receive+0xf18>)
 801723c:	881b      	ldrh	r3, [r3, #0]
 801723e:	461a      	mov	r2, r3
 8017240:	4b25      	ldr	r3, [pc, #148]	@ (80172d8 <tcp_receive+0xf10>)
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	441a      	add	r2, r3
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801724a:	6879      	ldr	r1, [r7, #4]
 801724c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801724e:	440b      	add	r3, r1
 8017250:	429a      	cmp	r2, r3
 8017252:	d019      	beq.n	8017288 <tcp_receive+0xec0>
 8017254:	4b23      	ldr	r3, [pc, #140]	@ (80172e4 <tcp_receive+0xf1c>)
 8017256:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801725a:	4923      	ldr	r1, [pc, #140]	@ (80172e8 <tcp_receive+0xf20>)
 801725c:	4823      	ldr	r0, [pc, #140]	@ (80172ec <tcp_receive+0xf24>)
 801725e:	f006 f885 	bl	801d36c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8017262:	e011      	b.n	8017288 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	63bb      	str	r3, [r7, #56]	@ 0x38
 801726a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801726c:	2b00      	cmp	r3, #0
 801726e:	f47f aea5 	bne.w	8016fbc <tcp_receive+0xbf4>
 8017272:	e00a      	b.n	801728a <tcp_receive+0xec2>
                break;
 8017274:	bf00      	nop
 8017276:	e008      	b.n	801728a <tcp_receive+0xec2>
                break;
 8017278:	bf00      	nop
 801727a:	e006      	b.n	801728a <tcp_receive+0xec2>
                  break;
 801727c:	bf00      	nop
 801727e:	e004      	b.n	801728a <tcp_receive+0xec2>
                  break;
 8017280:	bf00      	nop
 8017282:	e002      	b.n	801728a <tcp_receive+0xec2>
                  break;
 8017284:	bf00      	nop
 8017286:	e000      	b.n	801728a <tcp_receive+0xec2>
                break;
 8017288:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801728a:	6878      	ldr	r0, [r7, #4]
 801728c:	f001 fe88 	bl	8018fa0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8017290:	e003      	b.n	801729a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8017292:	6878      	ldr	r0, [r7, #4]
 8017294:	f001 fe84 	bl	8018fa0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017298:	e01a      	b.n	80172d0 <tcp_receive+0xf08>
 801729a:	e019      	b.n	80172d0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801729c:	4b0e      	ldr	r3, [pc, #56]	@ (80172d8 <tcp_receive+0xf10>)
 801729e:	681a      	ldr	r2, [r3, #0]
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172a4:	1ad3      	subs	r3, r2, r3
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	db0a      	blt.n	80172c0 <tcp_receive+0xef8>
 80172aa:	4b0b      	ldr	r3, [pc, #44]	@ (80172d8 <tcp_receive+0xf10>)
 80172ac:	681a      	ldr	r2, [r3, #0]
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172b2:	6879      	ldr	r1, [r7, #4]
 80172b4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80172b6:	440b      	add	r3, r1
 80172b8:	1ad3      	subs	r3, r2, r3
 80172ba:	3301      	adds	r3, #1
 80172bc:	2b00      	cmp	r3, #0
 80172be:	dd07      	ble.n	80172d0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	8b5b      	ldrh	r3, [r3, #26]
 80172c4:	f043 0302 	orr.w	r3, r3, #2
 80172c8:	b29a      	uxth	r2, r3
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80172ce:	e7ff      	b.n	80172d0 <tcp_receive+0xf08>
 80172d0:	bf00      	nop
 80172d2:	3750      	adds	r7, #80	@ 0x50
 80172d4:	46bd      	mov	sp, r7
 80172d6:	bdb0      	pop	{r4, r5, r7, pc}
 80172d8:	2000e494 	.word	0x2000e494
 80172dc:	2000e474 	.word	0x2000e474
 80172e0:	2000e49e 	.word	0x2000e49e
 80172e4:	08020414 	.word	0x08020414
 80172e8:	080207bc 	.word	0x080207bc
 80172ec:	08020460 	.word	0x08020460

080172f0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80172f0:	b480      	push	{r7}
 80172f2:	b083      	sub	sp, #12
 80172f4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80172f6:	4b15      	ldr	r3, [pc, #84]	@ (801734c <tcp_get_next_optbyte+0x5c>)
 80172f8:	881b      	ldrh	r3, [r3, #0]
 80172fa:	1c5a      	adds	r2, r3, #1
 80172fc:	b291      	uxth	r1, r2
 80172fe:	4a13      	ldr	r2, [pc, #76]	@ (801734c <tcp_get_next_optbyte+0x5c>)
 8017300:	8011      	strh	r1, [r2, #0]
 8017302:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8017304:	4b12      	ldr	r3, [pc, #72]	@ (8017350 <tcp_get_next_optbyte+0x60>)
 8017306:	681b      	ldr	r3, [r3, #0]
 8017308:	2b00      	cmp	r3, #0
 801730a:	d004      	beq.n	8017316 <tcp_get_next_optbyte+0x26>
 801730c:	4b11      	ldr	r3, [pc, #68]	@ (8017354 <tcp_get_next_optbyte+0x64>)
 801730e:	881b      	ldrh	r3, [r3, #0]
 8017310:	88fa      	ldrh	r2, [r7, #6]
 8017312:	429a      	cmp	r2, r3
 8017314:	d208      	bcs.n	8017328 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8017316:	4b10      	ldr	r3, [pc, #64]	@ (8017358 <tcp_get_next_optbyte+0x68>)
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	3314      	adds	r3, #20
 801731c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801731e:	88fb      	ldrh	r3, [r7, #6]
 8017320:	683a      	ldr	r2, [r7, #0]
 8017322:	4413      	add	r3, r2
 8017324:	781b      	ldrb	r3, [r3, #0]
 8017326:	e00b      	b.n	8017340 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8017328:	88fb      	ldrh	r3, [r7, #6]
 801732a:	b2da      	uxtb	r2, r3
 801732c:	4b09      	ldr	r3, [pc, #36]	@ (8017354 <tcp_get_next_optbyte+0x64>)
 801732e:	881b      	ldrh	r3, [r3, #0]
 8017330:	b2db      	uxtb	r3, r3
 8017332:	1ad3      	subs	r3, r2, r3
 8017334:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8017336:	4b06      	ldr	r3, [pc, #24]	@ (8017350 <tcp_get_next_optbyte+0x60>)
 8017338:	681a      	ldr	r2, [r3, #0]
 801733a:	797b      	ldrb	r3, [r7, #5]
 801733c:	4413      	add	r3, r2
 801733e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017340:	4618      	mov	r0, r3
 8017342:	370c      	adds	r7, #12
 8017344:	46bd      	mov	sp, r7
 8017346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801734a:	4770      	bx	lr
 801734c:	2000e490 	.word	0x2000e490
 8017350:	2000e48c 	.word	0x2000e48c
 8017354:	2000e48a 	.word	0x2000e48a
 8017358:	2000e484 	.word	0x2000e484

0801735c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b084      	sub	sp, #16
 8017360:	af00      	add	r7, sp, #0
 8017362:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d106      	bne.n	8017378 <tcp_parseopt+0x1c>
 801736a:	4b32      	ldr	r3, [pc, #200]	@ (8017434 <tcp_parseopt+0xd8>)
 801736c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8017370:	4931      	ldr	r1, [pc, #196]	@ (8017438 <tcp_parseopt+0xdc>)
 8017372:	4832      	ldr	r0, [pc, #200]	@ (801743c <tcp_parseopt+0xe0>)
 8017374:	f005 fffa 	bl	801d36c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8017378:	4b31      	ldr	r3, [pc, #196]	@ (8017440 <tcp_parseopt+0xe4>)
 801737a:	881b      	ldrh	r3, [r3, #0]
 801737c:	2b00      	cmp	r3, #0
 801737e:	d056      	beq.n	801742e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017380:	4b30      	ldr	r3, [pc, #192]	@ (8017444 <tcp_parseopt+0xe8>)
 8017382:	2200      	movs	r2, #0
 8017384:	801a      	strh	r2, [r3, #0]
 8017386:	e046      	b.n	8017416 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8017388:	f7ff ffb2 	bl	80172f0 <tcp_get_next_optbyte>
 801738c:	4603      	mov	r3, r0
 801738e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8017390:	7bfb      	ldrb	r3, [r7, #15]
 8017392:	2b02      	cmp	r3, #2
 8017394:	d006      	beq.n	80173a4 <tcp_parseopt+0x48>
 8017396:	2b02      	cmp	r3, #2
 8017398:	dc2a      	bgt.n	80173f0 <tcp_parseopt+0x94>
 801739a:	2b00      	cmp	r3, #0
 801739c:	d042      	beq.n	8017424 <tcp_parseopt+0xc8>
 801739e:	2b01      	cmp	r3, #1
 80173a0:	d038      	beq.n	8017414 <tcp_parseopt+0xb8>
 80173a2:	e025      	b.n	80173f0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80173a4:	f7ff ffa4 	bl	80172f0 <tcp_get_next_optbyte>
 80173a8:	4603      	mov	r3, r0
 80173aa:	2b04      	cmp	r3, #4
 80173ac:	d13c      	bne.n	8017428 <tcp_parseopt+0xcc>
 80173ae:	4b25      	ldr	r3, [pc, #148]	@ (8017444 <tcp_parseopt+0xe8>)
 80173b0:	881b      	ldrh	r3, [r3, #0]
 80173b2:	3301      	adds	r3, #1
 80173b4:	4a22      	ldr	r2, [pc, #136]	@ (8017440 <tcp_parseopt+0xe4>)
 80173b6:	8812      	ldrh	r2, [r2, #0]
 80173b8:	4293      	cmp	r3, r2
 80173ba:	da35      	bge.n	8017428 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80173bc:	f7ff ff98 	bl	80172f0 <tcp_get_next_optbyte>
 80173c0:	4603      	mov	r3, r0
 80173c2:	021b      	lsls	r3, r3, #8
 80173c4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80173c6:	f7ff ff93 	bl	80172f0 <tcp_get_next_optbyte>
 80173ca:	4603      	mov	r3, r0
 80173cc:	461a      	mov	r2, r3
 80173ce:	89bb      	ldrh	r3, [r7, #12]
 80173d0:	4313      	orrs	r3, r2
 80173d2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80173d4:	89bb      	ldrh	r3, [r7, #12]
 80173d6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80173da:	d804      	bhi.n	80173e6 <tcp_parseopt+0x8a>
 80173dc:	89bb      	ldrh	r3, [r7, #12]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d001      	beq.n	80173e6 <tcp_parseopt+0x8a>
 80173e2:	89ba      	ldrh	r2, [r7, #12]
 80173e4:	e001      	b.n	80173ea <tcp_parseopt+0x8e>
 80173e6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80173ee:	e012      	b.n	8017416 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80173f0:	f7ff ff7e 	bl	80172f0 <tcp_get_next_optbyte>
 80173f4:	4603      	mov	r3, r0
 80173f6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80173f8:	7afb      	ldrb	r3, [r7, #11]
 80173fa:	2b01      	cmp	r3, #1
 80173fc:	d916      	bls.n	801742c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80173fe:	7afb      	ldrb	r3, [r7, #11]
 8017400:	b29a      	uxth	r2, r3
 8017402:	4b10      	ldr	r3, [pc, #64]	@ (8017444 <tcp_parseopt+0xe8>)
 8017404:	881b      	ldrh	r3, [r3, #0]
 8017406:	4413      	add	r3, r2
 8017408:	b29b      	uxth	r3, r3
 801740a:	3b02      	subs	r3, #2
 801740c:	b29a      	uxth	r2, r3
 801740e:	4b0d      	ldr	r3, [pc, #52]	@ (8017444 <tcp_parseopt+0xe8>)
 8017410:	801a      	strh	r2, [r3, #0]
 8017412:	e000      	b.n	8017416 <tcp_parseopt+0xba>
          break;
 8017414:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017416:	4b0b      	ldr	r3, [pc, #44]	@ (8017444 <tcp_parseopt+0xe8>)
 8017418:	881a      	ldrh	r2, [r3, #0]
 801741a:	4b09      	ldr	r3, [pc, #36]	@ (8017440 <tcp_parseopt+0xe4>)
 801741c:	881b      	ldrh	r3, [r3, #0]
 801741e:	429a      	cmp	r2, r3
 8017420:	d3b2      	bcc.n	8017388 <tcp_parseopt+0x2c>
 8017422:	e004      	b.n	801742e <tcp_parseopt+0xd2>
          return;
 8017424:	bf00      	nop
 8017426:	e002      	b.n	801742e <tcp_parseopt+0xd2>
            return;
 8017428:	bf00      	nop
 801742a:	e000      	b.n	801742e <tcp_parseopt+0xd2>
            return;
 801742c:	bf00      	nop
      }
    }
  }
}
 801742e:	3710      	adds	r7, #16
 8017430:	46bd      	mov	sp, r7
 8017432:	bd80      	pop	{r7, pc}
 8017434:	08020414 	.word	0x08020414
 8017438:	08020878 	.word	0x08020878
 801743c:	08020460 	.word	0x08020460
 8017440:	2000e488 	.word	0x2000e488
 8017444:	2000e490 	.word	0x2000e490

08017448 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8017448:	b480      	push	{r7}
 801744a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801744c:	4b05      	ldr	r3, [pc, #20]	@ (8017464 <tcp_trigger_input_pcb_close+0x1c>)
 801744e:	781b      	ldrb	r3, [r3, #0]
 8017450:	f043 0310 	orr.w	r3, r3, #16
 8017454:	b2da      	uxtb	r2, r3
 8017456:	4b03      	ldr	r3, [pc, #12]	@ (8017464 <tcp_trigger_input_pcb_close+0x1c>)
 8017458:	701a      	strb	r2, [r3, #0]
}
 801745a:	bf00      	nop
 801745c:	46bd      	mov	sp, r7
 801745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017462:	4770      	bx	lr
 8017464:	2000e4a1 	.word	0x2000e4a1

08017468 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8017468:	b580      	push	{r7, lr}
 801746a:	b084      	sub	sp, #16
 801746c:	af00      	add	r7, sp, #0
 801746e:	60f8      	str	r0, [r7, #12]
 8017470:	60b9      	str	r1, [r7, #8]
 8017472:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	2b00      	cmp	r3, #0
 8017478:	d00a      	beq.n	8017490 <tcp_route+0x28>
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	7a1b      	ldrb	r3, [r3, #8]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d006      	beq.n	8017490 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	7a1b      	ldrb	r3, [r3, #8]
 8017486:	4618      	mov	r0, r3
 8017488:	f7fb f850 	bl	801252c <netif_get_by_index>
 801748c:	4603      	mov	r3, r0
 801748e:	e003      	b.n	8017498 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8017490:	6878      	ldr	r0, [r7, #4]
 8017492:	f003 fc49 	bl	801ad28 <ip4_route>
 8017496:	4603      	mov	r3, r0
  }
}
 8017498:	4618      	mov	r0, r3
 801749a:	3710      	adds	r7, #16
 801749c:	46bd      	mov	sp, r7
 801749e:	bd80      	pop	{r7, pc}

080174a0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80174a0:	b590      	push	{r4, r7, lr}
 80174a2:	b087      	sub	sp, #28
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	60f8      	str	r0, [r7, #12]
 80174a8:	60b9      	str	r1, [r7, #8]
 80174aa:	603b      	str	r3, [r7, #0]
 80174ac:	4613      	mov	r3, r2
 80174ae:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d105      	bne.n	80174c2 <tcp_create_segment+0x22>
 80174b6:	4b43      	ldr	r3, [pc, #268]	@ (80175c4 <tcp_create_segment+0x124>)
 80174b8:	22a3      	movs	r2, #163	@ 0xa3
 80174ba:	4943      	ldr	r1, [pc, #268]	@ (80175c8 <tcp_create_segment+0x128>)
 80174bc:	4843      	ldr	r0, [pc, #268]	@ (80175cc <tcp_create_segment+0x12c>)
 80174be:	f005 ff55 	bl	801d36c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80174c2:	68bb      	ldr	r3, [r7, #8]
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d105      	bne.n	80174d4 <tcp_create_segment+0x34>
 80174c8:	4b3e      	ldr	r3, [pc, #248]	@ (80175c4 <tcp_create_segment+0x124>)
 80174ca:	22a4      	movs	r2, #164	@ 0xa4
 80174cc:	4940      	ldr	r1, [pc, #256]	@ (80175d0 <tcp_create_segment+0x130>)
 80174ce:	483f      	ldr	r0, [pc, #252]	@ (80175cc <tcp_create_segment+0x12c>)
 80174d0:	f005 ff4c 	bl	801d36c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80174d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80174d8:	009b      	lsls	r3, r3, #2
 80174da:	b2db      	uxtb	r3, r3
 80174dc:	f003 0304 	and.w	r3, r3, #4
 80174e0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80174e2:	2003      	movs	r0, #3
 80174e4:	f7fa fc96 	bl	8011e14 <memp_malloc>
 80174e8:	6138      	str	r0, [r7, #16]
 80174ea:	693b      	ldr	r3, [r7, #16]
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d104      	bne.n	80174fa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80174f0:	68b8      	ldr	r0, [r7, #8]
 80174f2:	f7fb fba9 	bl	8012c48 <pbuf_free>
    return NULL;
 80174f6:	2300      	movs	r3, #0
 80174f8:	e060      	b.n	80175bc <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80174fa:	693b      	ldr	r3, [r7, #16]
 80174fc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017500:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8017502:	693b      	ldr	r3, [r7, #16]
 8017504:	2200      	movs	r2, #0
 8017506:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8017508:	693b      	ldr	r3, [r7, #16]
 801750a:	68ba      	ldr	r2, [r7, #8]
 801750c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801750e:	68bb      	ldr	r3, [r7, #8]
 8017510:	891a      	ldrh	r2, [r3, #8]
 8017512:	7dfb      	ldrb	r3, [r7, #23]
 8017514:	b29b      	uxth	r3, r3
 8017516:	429a      	cmp	r2, r3
 8017518:	d205      	bcs.n	8017526 <tcp_create_segment+0x86>
 801751a:	4b2a      	ldr	r3, [pc, #168]	@ (80175c4 <tcp_create_segment+0x124>)
 801751c:	22b0      	movs	r2, #176	@ 0xb0
 801751e:	492d      	ldr	r1, [pc, #180]	@ (80175d4 <tcp_create_segment+0x134>)
 8017520:	482a      	ldr	r0, [pc, #168]	@ (80175cc <tcp_create_segment+0x12c>)
 8017522:	f005 ff23 	bl	801d36c <iprintf>
  seg->len = p->tot_len - optlen;
 8017526:	68bb      	ldr	r3, [r7, #8]
 8017528:	891a      	ldrh	r2, [r3, #8]
 801752a:	7dfb      	ldrb	r3, [r7, #23]
 801752c:	b29b      	uxth	r3, r3
 801752e:	1ad3      	subs	r3, r2, r3
 8017530:	b29a      	uxth	r2, r3
 8017532:	693b      	ldr	r3, [r7, #16]
 8017534:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8017536:	2114      	movs	r1, #20
 8017538:	68b8      	ldr	r0, [r7, #8]
 801753a:	f7fb faef 	bl	8012b1c <pbuf_add_header>
 801753e:	4603      	mov	r3, r0
 8017540:	2b00      	cmp	r3, #0
 8017542:	d004      	beq.n	801754e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8017544:	6938      	ldr	r0, [r7, #16]
 8017546:	f7fd f804 	bl	8014552 <tcp_seg_free>
    return NULL;
 801754a:	2300      	movs	r3, #0
 801754c:	e036      	b.n	80175bc <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801754e:	693b      	ldr	r3, [r7, #16]
 8017550:	685b      	ldr	r3, [r3, #4]
 8017552:	685a      	ldr	r2, [r3, #4]
 8017554:	693b      	ldr	r3, [r7, #16]
 8017556:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	8ada      	ldrh	r2, [r3, #22]
 801755c:	693b      	ldr	r3, [r7, #16]
 801755e:	68dc      	ldr	r4, [r3, #12]
 8017560:	4610      	mov	r0, r2
 8017562:	f7f9 ff83 	bl	801146c <lwip_htons>
 8017566:	4603      	mov	r3, r0
 8017568:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	8b1a      	ldrh	r2, [r3, #24]
 801756e:	693b      	ldr	r3, [r7, #16]
 8017570:	68dc      	ldr	r4, [r3, #12]
 8017572:	4610      	mov	r0, r2
 8017574:	f7f9 ff7a 	bl	801146c <lwip_htons>
 8017578:	4603      	mov	r3, r0
 801757a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801757c:	693b      	ldr	r3, [r7, #16]
 801757e:	68dc      	ldr	r4, [r3, #12]
 8017580:	6838      	ldr	r0, [r7, #0]
 8017582:	f7f9 ff88 	bl	8011496 <lwip_htonl>
 8017586:	4603      	mov	r3, r0
 8017588:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801758a:	7dfb      	ldrb	r3, [r7, #23]
 801758c:	089b      	lsrs	r3, r3, #2
 801758e:	b2db      	uxtb	r3, r3
 8017590:	3305      	adds	r3, #5
 8017592:	b29b      	uxth	r3, r3
 8017594:	031b      	lsls	r3, r3, #12
 8017596:	b29a      	uxth	r2, r3
 8017598:	79fb      	ldrb	r3, [r7, #7]
 801759a:	b29b      	uxth	r3, r3
 801759c:	4313      	orrs	r3, r2
 801759e:	b29a      	uxth	r2, r3
 80175a0:	693b      	ldr	r3, [r7, #16]
 80175a2:	68dc      	ldr	r4, [r3, #12]
 80175a4:	4610      	mov	r0, r2
 80175a6:	f7f9 ff61 	bl	801146c <lwip_htons>
 80175aa:	4603      	mov	r3, r0
 80175ac:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80175ae:	693b      	ldr	r3, [r7, #16]
 80175b0:	68db      	ldr	r3, [r3, #12]
 80175b2:	2200      	movs	r2, #0
 80175b4:	749a      	strb	r2, [r3, #18]
 80175b6:	2200      	movs	r2, #0
 80175b8:	74da      	strb	r2, [r3, #19]
  return seg;
 80175ba:	693b      	ldr	r3, [r7, #16]
}
 80175bc:	4618      	mov	r0, r3
 80175be:	371c      	adds	r7, #28
 80175c0:	46bd      	mov	sp, r7
 80175c2:	bd90      	pop	{r4, r7, pc}
 80175c4:	08020894 	.word	0x08020894
 80175c8:	080208c8 	.word	0x080208c8
 80175cc:	080208e8 	.word	0x080208e8
 80175d0:	08020910 	.word	0x08020910
 80175d4:	08020934 	.word	0x08020934

080175d8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80175d8:	b580      	push	{r7, lr}
 80175da:	b086      	sub	sp, #24
 80175dc:	af00      	add	r7, sp, #0
 80175de:	607b      	str	r3, [r7, #4]
 80175e0:	4603      	mov	r3, r0
 80175e2:	73fb      	strb	r3, [r7, #15]
 80175e4:	460b      	mov	r3, r1
 80175e6:	81bb      	strh	r3, [r7, #12]
 80175e8:	4613      	mov	r3, r2
 80175ea:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80175ec:	89bb      	ldrh	r3, [r7, #12]
 80175ee:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d105      	bne.n	8017602 <tcp_pbuf_prealloc+0x2a>
 80175f6:	4b30      	ldr	r3, [pc, #192]	@ (80176b8 <tcp_pbuf_prealloc+0xe0>)
 80175f8:	22e8      	movs	r2, #232	@ 0xe8
 80175fa:	4930      	ldr	r1, [pc, #192]	@ (80176bc <tcp_pbuf_prealloc+0xe4>)
 80175fc:	4830      	ldr	r0, [pc, #192]	@ (80176c0 <tcp_pbuf_prealloc+0xe8>)
 80175fe:	f005 feb5 	bl	801d36c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8017602:	6a3b      	ldr	r3, [r7, #32]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d105      	bne.n	8017614 <tcp_pbuf_prealloc+0x3c>
 8017608:	4b2b      	ldr	r3, [pc, #172]	@ (80176b8 <tcp_pbuf_prealloc+0xe0>)
 801760a:	22e9      	movs	r2, #233	@ 0xe9
 801760c:	492d      	ldr	r1, [pc, #180]	@ (80176c4 <tcp_pbuf_prealloc+0xec>)
 801760e:	482c      	ldr	r0, [pc, #176]	@ (80176c0 <tcp_pbuf_prealloc+0xe8>)
 8017610:	f005 feac 	bl	801d36c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8017614:	89ba      	ldrh	r2, [r7, #12]
 8017616:	897b      	ldrh	r3, [r7, #10]
 8017618:	429a      	cmp	r2, r3
 801761a:	d221      	bcs.n	8017660 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801761c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017620:	f003 0302 	and.w	r3, r3, #2
 8017624:	2b00      	cmp	r3, #0
 8017626:	d111      	bne.n	801764c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8017628:	6a3b      	ldr	r3, [r7, #32]
 801762a:	8b5b      	ldrh	r3, [r3, #26]
 801762c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017630:	2b00      	cmp	r3, #0
 8017632:	d115      	bne.n	8017660 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8017634:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017638:	2b00      	cmp	r3, #0
 801763a:	d007      	beq.n	801764c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801763c:	6a3b      	ldr	r3, [r7, #32]
 801763e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8017640:	2b00      	cmp	r3, #0
 8017642:	d103      	bne.n	801764c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8017644:	6a3b      	ldr	r3, [r7, #32]
 8017646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8017648:	2b00      	cmp	r3, #0
 801764a:	d009      	beq.n	8017660 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801764c:	89bb      	ldrh	r3, [r7, #12]
 801764e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8017652:	f023 0203 	bic.w	r2, r3, #3
 8017656:	897b      	ldrh	r3, [r7, #10]
 8017658:	4293      	cmp	r3, r2
 801765a:	bf28      	it	cs
 801765c:	4613      	movcs	r3, r2
 801765e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8017660:	8af9      	ldrh	r1, [r7, #22]
 8017662:	7bfb      	ldrb	r3, [r7, #15]
 8017664:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017668:	4618      	mov	r0, r3
 801766a:	f7fb f809 	bl	8012680 <pbuf_alloc>
 801766e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017670:	693b      	ldr	r3, [r7, #16]
 8017672:	2b00      	cmp	r3, #0
 8017674:	d101      	bne.n	801767a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8017676:	2300      	movs	r3, #0
 8017678:	e019      	b.n	80176ae <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801767a:	693b      	ldr	r3, [r7, #16]
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	2b00      	cmp	r3, #0
 8017680:	d006      	beq.n	8017690 <tcp_pbuf_prealloc+0xb8>
 8017682:	4b0d      	ldr	r3, [pc, #52]	@ (80176b8 <tcp_pbuf_prealloc+0xe0>)
 8017684:	f240 120b 	movw	r2, #267	@ 0x10b
 8017688:	490f      	ldr	r1, [pc, #60]	@ (80176c8 <tcp_pbuf_prealloc+0xf0>)
 801768a:	480d      	ldr	r0, [pc, #52]	@ (80176c0 <tcp_pbuf_prealloc+0xe8>)
 801768c:	f005 fe6e 	bl	801d36c <iprintf>
  *oversize = p->len - length;
 8017690:	693b      	ldr	r3, [r7, #16]
 8017692:	895a      	ldrh	r2, [r3, #10]
 8017694:	89bb      	ldrh	r3, [r7, #12]
 8017696:	1ad3      	subs	r3, r2, r3
 8017698:	b29a      	uxth	r2, r3
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801769e:	693b      	ldr	r3, [r7, #16]
 80176a0:	89ba      	ldrh	r2, [r7, #12]
 80176a2:	811a      	strh	r2, [r3, #8]
 80176a4:	693b      	ldr	r3, [r7, #16]
 80176a6:	891a      	ldrh	r2, [r3, #8]
 80176a8:	693b      	ldr	r3, [r7, #16]
 80176aa:	815a      	strh	r2, [r3, #10]
  return p;
 80176ac:	693b      	ldr	r3, [r7, #16]
}
 80176ae:	4618      	mov	r0, r3
 80176b0:	3718      	adds	r7, #24
 80176b2:	46bd      	mov	sp, r7
 80176b4:	bd80      	pop	{r7, pc}
 80176b6:	bf00      	nop
 80176b8:	08020894 	.word	0x08020894
 80176bc:	0802094c 	.word	0x0802094c
 80176c0:	080208e8 	.word	0x080208e8
 80176c4:	08020970 	.word	0x08020970
 80176c8:	08020990 	.word	0x08020990

080176cc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b082      	sub	sp, #8
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	6078      	str	r0, [r7, #4]
 80176d4:	460b      	mov	r3, r1
 80176d6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d106      	bne.n	80176ec <tcp_write_checks+0x20>
 80176de:	4b33      	ldr	r3, [pc, #204]	@ (80177ac <tcp_write_checks+0xe0>)
 80176e0:	f240 1233 	movw	r2, #307	@ 0x133
 80176e4:	4932      	ldr	r1, [pc, #200]	@ (80177b0 <tcp_write_checks+0xe4>)
 80176e6:	4833      	ldr	r0, [pc, #204]	@ (80177b4 <tcp_write_checks+0xe8>)
 80176e8:	f005 fe40 	bl	801d36c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	7d1b      	ldrb	r3, [r3, #20]
 80176f0:	2b04      	cmp	r3, #4
 80176f2:	d00e      	beq.n	8017712 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80176f8:	2b07      	cmp	r3, #7
 80176fa:	d00a      	beq.n	8017712 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8017700:	2b02      	cmp	r3, #2
 8017702:	d006      	beq.n	8017712 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8017708:	2b03      	cmp	r3, #3
 801770a:	d002      	beq.n	8017712 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801770c:	f06f 030a 	mvn.w	r3, #10
 8017710:	e048      	b.n	80177a4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8017712:	887b      	ldrh	r3, [r7, #2]
 8017714:	2b00      	cmp	r3, #0
 8017716:	d101      	bne.n	801771c <tcp_write_checks+0x50>
    return ERR_OK;
 8017718:	2300      	movs	r3, #0
 801771a:	e043      	b.n	80177a4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017722:	887a      	ldrh	r2, [r7, #2]
 8017724:	429a      	cmp	r2, r3
 8017726:	d909      	bls.n	801773c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	8b5b      	ldrh	r3, [r3, #26]
 801772c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017730:	b29a      	uxth	r2, r3
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017736:	f04f 33ff 	mov.w	r3, #4294967295
 801773a:	e033      	b.n	80177a4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017742:	2b08      	cmp	r3, #8
 8017744:	d909      	bls.n	801775a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	8b5b      	ldrh	r3, [r3, #26]
 801774a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801774e:	b29a      	uxth	r2, r3
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017754:	f04f 33ff 	mov.w	r3, #4294967295
 8017758:	e024      	b.n	80177a4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017760:	2b00      	cmp	r3, #0
 8017762:	d00f      	beq.n	8017784 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017768:	2b00      	cmp	r3, #0
 801776a:	d11a      	bne.n	80177a2 <tcp_write_checks+0xd6>
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017770:	2b00      	cmp	r3, #0
 8017772:	d116      	bne.n	80177a2 <tcp_write_checks+0xd6>
 8017774:	4b0d      	ldr	r3, [pc, #52]	@ (80177ac <tcp_write_checks+0xe0>)
 8017776:	f240 1255 	movw	r2, #341	@ 0x155
 801777a:	490f      	ldr	r1, [pc, #60]	@ (80177b8 <tcp_write_checks+0xec>)
 801777c:	480d      	ldr	r0, [pc, #52]	@ (80177b4 <tcp_write_checks+0xe8>)
 801777e:	f005 fdf5 	bl	801d36c <iprintf>
 8017782:	e00e      	b.n	80177a2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017788:	2b00      	cmp	r3, #0
 801778a:	d103      	bne.n	8017794 <tcp_write_checks+0xc8>
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017790:	2b00      	cmp	r3, #0
 8017792:	d006      	beq.n	80177a2 <tcp_write_checks+0xd6>
 8017794:	4b05      	ldr	r3, [pc, #20]	@ (80177ac <tcp_write_checks+0xe0>)
 8017796:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801779a:	4908      	ldr	r1, [pc, #32]	@ (80177bc <tcp_write_checks+0xf0>)
 801779c:	4805      	ldr	r0, [pc, #20]	@ (80177b4 <tcp_write_checks+0xe8>)
 801779e:	f005 fde5 	bl	801d36c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80177a2:	2300      	movs	r3, #0
}
 80177a4:	4618      	mov	r0, r3
 80177a6:	3708      	adds	r7, #8
 80177a8:	46bd      	mov	sp, r7
 80177aa:	bd80      	pop	{r7, pc}
 80177ac:	08020894 	.word	0x08020894
 80177b0:	080209a4 	.word	0x080209a4
 80177b4:	080208e8 	.word	0x080208e8
 80177b8:	080209c4 	.word	0x080209c4
 80177bc:	08020a00 	.word	0x08020a00

080177c0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80177c0:	b590      	push	{r4, r7, lr}
 80177c2:	b09b      	sub	sp, #108	@ 0x6c
 80177c4:	af04      	add	r7, sp, #16
 80177c6:	60f8      	str	r0, [r7, #12]
 80177c8:	60b9      	str	r1, [r7, #8]
 80177ca:	4611      	mov	r1, r2
 80177cc:	461a      	mov	r2, r3
 80177ce:	460b      	mov	r3, r1
 80177d0:	80fb      	strh	r3, [r7, #6]
 80177d2:	4613      	mov	r3, r2
 80177d4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80177d6:	2300      	movs	r3, #0
 80177d8:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80177da:	2300      	movs	r3, #0
 80177dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80177de:	2300      	movs	r3, #0
 80177e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80177e2:	2300      	movs	r3, #0
 80177e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80177e6:	2300      	movs	r3, #0
 80177e8:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80177ea:	2300      	movs	r3, #0
 80177ec:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80177f0:	2300      	movs	r3, #0
 80177f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80177f6:	2300      	movs	r3, #0
 80177f8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80177fa:	2300      	movs	r3, #0
 80177fc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80177fe:	2300      	movs	r3, #0
 8017800:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	2b00      	cmp	r3, #0
 8017806:	d109      	bne.n	801781c <tcp_write+0x5c>
 8017808:	4ba4      	ldr	r3, [pc, #656]	@ (8017a9c <tcp_write+0x2dc>)
 801780a:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801780e:	49a4      	ldr	r1, [pc, #656]	@ (8017aa0 <tcp_write+0x2e0>)
 8017810:	48a4      	ldr	r0, [pc, #656]	@ (8017aa4 <tcp_write+0x2e4>)
 8017812:	f005 fdab 	bl	801d36c <iprintf>
 8017816:	f06f 030f 	mvn.w	r3, #15
 801781a:	e32a      	b.n	8017e72 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801781c:	68fb      	ldr	r3, [r7, #12]
 801781e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8017822:	085b      	lsrs	r3, r3, #1
 8017824:	b29a      	uxth	r2, r3
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801782a:	4293      	cmp	r3, r2
 801782c:	bf28      	it	cs
 801782e:	4613      	movcs	r3, r2
 8017830:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8017832:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017834:	2b00      	cmp	r3, #0
 8017836:	d102      	bne.n	801783e <tcp_write+0x7e>
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801783c:	e000      	b.n	8017840 <tcp_write+0x80>
 801783e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017840:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8017842:	68bb      	ldr	r3, [r7, #8]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d109      	bne.n	801785c <tcp_write+0x9c>
 8017848:	4b94      	ldr	r3, [pc, #592]	@ (8017a9c <tcp_write+0x2dc>)
 801784a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801784e:	4996      	ldr	r1, [pc, #600]	@ (8017aa8 <tcp_write+0x2e8>)
 8017850:	4894      	ldr	r0, [pc, #592]	@ (8017aa4 <tcp_write+0x2e4>)
 8017852:	f005 fd8b 	bl	801d36c <iprintf>
 8017856:	f06f 030f 	mvn.w	r3, #15
 801785a:	e30a      	b.n	8017e72 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801785c:	88fb      	ldrh	r3, [r7, #6]
 801785e:	4619      	mov	r1, r3
 8017860:	68f8      	ldr	r0, [r7, #12]
 8017862:	f7ff ff33 	bl	80176cc <tcp_write_checks>
 8017866:	4603      	mov	r3, r0
 8017868:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801786c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8017870:	2b00      	cmp	r3, #0
 8017872:	d002      	beq.n	801787a <tcp_write+0xba>
    return err;
 8017874:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8017878:	e2fb      	b.n	8017e72 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017880:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017884:	2300      	movs	r3, #0
 8017886:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801788e:	2b00      	cmp	r3, #0
 8017890:	f000 80f6 	beq.w	8017a80 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017898:	653b      	str	r3, [r7, #80]	@ 0x50
 801789a:	e002      	b.n	80178a2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801789c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80178a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d1f8      	bne.n	801789c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80178aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80178ac:	7a9b      	ldrb	r3, [r3, #10]
 80178ae:	009b      	lsls	r3, r3, #2
 80178b0:	b29b      	uxth	r3, r3
 80178b2:	f003 0304 	and.w	r3, r3, #4
 80178b6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80178b8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80178ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80178bc:	891b      	ldrh	r3, [r3, #8]
 80178be:	4619      	mov	r1, r3
 80178c0:	8c3b      	ldrh	r3, [r7, #32]
 80178c2:	440b      	add	r3, r1
 80178c4:	429a      	cmp	r2, r3
 80178c6:	da06      	bge.n	80178d6 <tcp_write+0x116>
 80178c8:	4b74      	ldr	r3, [pc, #464]	@ (8017a9c <tcp_write+0x2dc>)
 80178ca:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80178ce:	4977      	ldr	r1, [pc, #476]	@ (8017aac <tcp_write+0x2ec>)
 80178d0:	4874      	ldr	r0, [pc, #464]	@ (8017aa4 <tcp_write+0x2e4>)
 80178d2:	f005 fd4b 	bl	801d36c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80178d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80178d8:	891a      	ldrh	r2, [r3, #8]
 80178da:	8c3b      	ldrh	r3, [r7, #32]
 80178dc:	4413      	add	r3, r2
 80178de:	b29b      	uxth	r3, r3
 80178e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80178e2:	1ad3      	subs	r3, r2, r3
 80178e4:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80178ec:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80178ee:	8a7b      	ldrh	r3, [r7, #18]
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d026      	beq.n	8017942 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80178f4:	8a7b      	ldrh	r3, [r7, #18]
 80178f6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80178f8:	429a      	cmp	r2, r3
 80178fa:	d206      	bcs.n	801790a <tcp_write+0x14a>
 80178fc:	4b67      	ldr	r3, [pc, #412]	@ (8017a9c <tcp_write+0x2dc>)
 80178fe:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8017902:	496b      	ldr	r1, [pc, #428]	@ (8017ab0 <tcp_write+0x2f0>)
 8017904:	4867      	ldr	r0, [pc, #412]	@ (8017aa4 <tcp_write+0x2e4>)
 8017906:	f005 fd31 	bl	801d36c <iprintf>
      seg = last_unsent;
 801790a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801790c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801790e:	8a7b      	ldrh	r3, [r7, #18]
 8017910:	88fa      	ldrh	r2, [r7, #6]
 8017912:	4293      	cmp	r3, r2
 8017914:	bf28      	it	cs
 8017916:	4613      	movcs	r3, r2
 8017918:	b29b      	uxth	r3, r3
 801791a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801791c:	4293      	cmp	r3, r2
 801791e:	bf28      	it	cs
 8017920:	4613      	movcs	r3, r2
 8017922:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8017924:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017928:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801792a:	4413      	add	r3, r2
 801792c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8017930:	8a7a      	ldrh	r2, [r7, #18]
 8017932:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017934:	1ad3      	subs	r3, r2, r3
 8017936:	b29b      	uxth	r3, r3
 8017938:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801793a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801793c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801793e:	1ad3      	subs	r3, r2, r3
 8017940:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8017942:	8a7b      	ldrh	r3, [r7, #18]
 8017944:	2b00      	cmp	r3, #0
 8017946:	d00b      	beq.n	8017960 <tcp_write+0x1a0>
 8017948:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801794c:	88fb      	ldrh	r3, [r7, #6]
 801794e:	429a      	cmp	r2, r3
 8017950:	d006      	beq.n	8017960 <tcp_write+0x1a0>
 8017952:	4b52      	ldr	r3, [pc, #328]	@ (8017a9c <tcp_write+0x2dc>)
 8017954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017958:	4956      	ldr	r1, [pc, #344]	@ (8017ab4 <tcp_write+0x2f4>)
 801795a:	4852      	ldr	r0, [pc, #328]	@ (8017aa4 <tcp_write+0x2e4>)
 801795c:	f005 fd06 	bl	801d36c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8017960:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017964:	88fb      	ldrh	r3, [r7, #6]
 8017966:	429a      	cmp	r2, r3
 8017968:	f080 8167 	bcs.w	8017c3a <tcp_write+0x47a>
 801796c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801796e:	2b00      	cmp	r3, #0
 8017970:	f000 8163 	beq.w	8017c3a <tcp_write+0x47a>
 8017974:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017976:	891b      	ldrh	r3, [r3, #8]
 8017978:	2b00      	cmp	r3, #0
 801797a:	f000 815e 	beq.w	8017c3a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801797e:	88fa      	ldrh	r2, [r7, #6]
 8017980:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017984:	1ad2      	subs	r2, r2, r3
 8017986:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017988:	4293      	cmp	r3, r2
 801798a:	bfa8      	it	ge
 801798c:	4613      	movge	r3, r2
 801798e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8017990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017992:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017994:	797b      	ldrb	r3, [r7, #5]
 8017996:	f003 0301 	and.w	r3, r3, #1
 801799a:	2b00      	cmp	r3, #0
 801799c:	d027      	beq.n	80179ee <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801799e:	f107 0012 	add.w	r0, r7, #18
 80179a2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80179a4:	8bf9      	ldrh	r1, [r7, #30]
 80179a6:	2301      	movs	r3, #1
 80179a8:	9302      	str	r3, [sp, #8]
 80179aa:	797b      	ldrb	r3, [r7, #5]
 80179ac:	9301      	str	r3, [sp, #4]
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	9300      	str	r3, [sp, #0]
 80179b2:	4603      	mov	r3, r0
 80179b4:	2000      	movs	r0, #0
 80179b6:	f7ff fe0f 	bl	80175d8 <tcp_pbuf_prealloc>
 80179ba:	6578      	str	r0, [r7, #84]	@ 0x54
 80179bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80179be:	2b00      	cmp	r3, #0
 80179c0:	f000 8225 	beq.w	8017e0e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80179c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80179c6:	6858      	ldr	r0, [r3, #4]
 80179c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80179cc:	68ba      	ldr	r2, [r7, #8]
 80179ce:	4413      	add	r3, r2
 80179d0:	8bfa      	ldrh	r2, [r7, #30]
 80179d2:	4619      	mov	r1, r3
 80179d4:	f005 fe57 	bl	801d686 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80179d8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80179da:	f7fb f9c3 	bl	8012d64 <pbuf_clen>
 80179de:	4603      	mov	r3, r0
 80179e0:	461a      	mov	r2, r3
 80179e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80179e6:	4413      	add	r3, r2
 80179e8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80179ec:	e041      	b.n	8017a72 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80179ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80179f0:	685b      	ldr	r3, [r3, #4]
 80179f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80179f4:	e002      	b.n	80179fc <tcp_write+0x23c>
 80179f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80179fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d1f8      	bne.n	80179f6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017a06:	7b1b      	ldrb	r3, [r3, #12]
 8017a08:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d115      	bne.n	8017a3c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8017a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017a12:	685b      	ldr	r3, [r3, #4]
 8017a14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017a16:	8952      	ldrh	r2, [r2, #10]
 8017a18:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017a1a:	68ba      	ldr	r2, [r7, #8]
 8017a1c:	429a      	cmp	r2, r3
 8017a1e:	d10d      	bne.n	8017a3c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017a20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d006      	beq.n	8017a36 <tcp_write+0x276>
 8017a28:	4b1c      	ldr	r3, [pc, #112]	@ (8017a9c <tcp_write+0x2dc>)
 8017a2a:	f240 2231 	movw	r2, #561	@ 0x231
 8017a2e:	4922      	ldr	r1, [pc, #136]	@ (8017ab8 <tcp_write+0x2f8>)
 8017a30:	481c      	ldr	r0, [pc, #112]	@ (8017aa4 <tcp_write+0x2e4>)
 8017a32:	f005 fc9b 	bl	801d36c <iprintf>
          extendlen = seglen;
 8017a36:	8bfb      	ldrh	r3, [r7, #30]
 8017a38:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8017a3a:	e01a      	b.n	8017a72 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8017a3c:	8bfb      	ldrh	r3, [r7, #30]
 8017a3e:	2201      	movs	r2, #1
 8017a40:	4619      	mov	r1, r3
 8017a42:	2000      	movs	r0, #0
 8017a44:	f7fa fe1c 	bl	8012680 <pbuf_alloc>
 8017a48:	6578      	str	r0, [r7, #84]	@ 0x54
 8017a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	f000 81e0 	beq.w	8017e12 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8017a52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017a56:	68ba      	ldr	r2, [r7, #8]
 8017a58:	441a      	add	r2, r3
 8017a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a5c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8017a5e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017a60:	f7fb f980 	bl	8012d64 <pbuf_clen>
 8017a64:	4603      	mov	r3, r0
 8017a66:	461a      	mov	r2, r3
 8017a68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017a6c:	4413      	add	r3, r2
 8017a6e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8017a72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017a76:	8bfb      	ldrh	r3, [r7, #30]
 8017a78:	4413      	add	r3, r2
 8017a7a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8017a7e:	e0dc      	b.n	8017c3a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	f000 80d7 	beq.w	8017c3a <tcp_write+0x47a>
 8017a8c:	4b03      	ldr	r3, [pc, #12]	@ (8017a9c <tcp_write+0x2dc>)
 8017a8e:	f240 224a 	movw	r2, #586	@ 0x24a
 8017a92:	490a      	ldr	r1, [pc, #40]	@ (8017abc <tcp_write+0x2fc>)
 8017a94:	4803      	ldr	r0, [pc, #12]	@ (8017aa4 <tcp_write+0x2e4>)
 8017a96:	f005 fc69 	bl	801d36c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8017a9a:	e0ce      	b.n	8017c3a <tcp_write+0x47a>
 8017a9c:	08020894 	.word	0x08020894
 8017aa0:	08020a34 	.word	0x08020a34
 8017aa4:	080208e8 	.word	0x080208e8
 8017aa8:	08020a4c 	.word	0x08020a4c
 8017aac:	08020a80 	.word	0x08020a80
 8017ab0:	08020a98 	.word	0x08020a98
 8017ab4:	08020ab8 	.word	0x08020ab8
 8017ab8:	08020ad8 	.word	0x08020ad8
 8017abc:	08020b04 	.word	0x08020b04
    struct pbuf *p;
    u16_t left = len - pos;
 8017ac0:	88fa      	ldrh	r2, [r7, #6]
 8017ac2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017ac6:	1ad3      	subs	r3, r2, r3
 8017ac8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8017aca:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017ace:	b29b      	uxth	r3, r3
 8017ad0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017ad2:	1ad3      	subs	r3, r2, r3
 8017ad4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8017ad6:	8b7a      	ldrh	r2, [r7, #26]
 8017ad8:	8bbb      	ldrh	r3, [r7, #28]
 8017ada:	4293      	cmp	r3, r2
 8017adc:	bf28      	it	cs
 8017ade:	4613      	movcs	r3, r2
 8017ae0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017ae2:	797b      	ldrb	r3, [r7, #5]
 8017ae4:	f003 0301 	and.w	r3, r3, #1
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d036      	beq.n	8017b5a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017aec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017af0:	b29a      	uxth	r2, r3
 8017af2:	8b3b      	ldrh	r3, [r7, #24]
 8017af4:	4413      	add	r3, r2
 8017af6:	b299      	uxth	r1, r3
 8017af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	bf0c      	ite	eq
 8017afe:	2301      	moveq	r3, #1
 8017b00:	2300      	movne	r3, #0
 8017b02:	b2db      	uxtb	r3, r3
 8017b04:	f107 0012 	add.w	r0, r7, #18
 8017b08:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017b0a:	9302      	str	r3, [sp, #8]
 8017b0c:	797b      	ldrb	r3, [r7, #5]
 8017b0e:	9301      	str	r3, [sp, #4]
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	9300      	str	r3, [sp, #0]
 8017b14:	4603      	mov	r3, r0
 8017b16:	2036      	movs	r0, #54	@ 0x36
 8017b18:	f7ff fd5e 	bl	80175d8 <tcp_pbuf_prealloc>
 8017b1c:	6338      	str	r0, [r7, #48]	@ 0x30
 8017b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	f000 8178 	beq.w	8017e16 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8017b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b28:	895b      	ldrh	r3, [r3, #10]
 8017b2a:	8b3a      	ldrh	r2, [r7, #24]
 8017b2c:	429a      	cmp	r2, r3
 8017b2e:	d906      	bls.n	8017b3e <tcp_write+0x37e>
 8017b30:	4b8c      	ldr	r3, [pc, #560]	@ (8017d64 <tcp_write+0x5a4>)
 8017b32:	f240 2266 	movw	r2, #614	@ 0x266
 8017b36:	498c      	ldr	r1, [pc, #560]	@ (8017d68 <tcp_write+0x5a8>)
 8017b38:	488c      	ldr	r0, [pc, #560]	@ (8017d6c <tcp_write+0x5ac>)
 8017b3a:	f005 fc17 	bl	801d36c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8017b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b40:	685a      	ldr	r2, [r3, #4]
 8017b42:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017b46:	18d0      	adds	r0, r2, r3
 8017b48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017b4c:	68ba      	ldr	r2, [r7, #8]
 8017b4e:	4413      	add	r3, r2
 8017b50:	8b3a      	ldrh	r2, [r7, #24]
 8017b52:	4619      	mov	r1, r3
 8017b54:	f005 fd97 	bl	801d686 <memcpy>
 8017b58:	e02f      	b.n	8017bba <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8017b5a:	8a7b      	ldrh	r3, [r7, #18]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d006      	beq.n	8017b6e <tcp_write+0x3ae>
 8017b60:	4b80      	ldr	r3, [pc, #512]	@ (8017d64 <tcp_write+0x5a4>)
 8017b62:	f240 2271 	movw	r2, #625	@ 0x271
 8017b66:	4982      	ldr	r1, [pc, #520]	@ (8017d70 <tcp_write+0x5b0>)
 8017b68:	4880      	ldr	r0, [pc, #512]	@ (8017d6c <tcp_write+0x5ac>)
 8017b6a:	f005 fbff 	bl	801d36c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8017b6e:	8b3b      	ldrh	r3, [r7, #24]
 8017b70:	2201      	movs	r2, #1
 8017b72:	4619      	mov	r1, r3
 8017b74:	2036      	movs	r0, #54	@ 0x36
 8017b76:	f7fa fd83 	bl	8012680 <pbuf_alloc>
 8017b7a:	6178      	str	r0, [r7, #20]
 8017b7c:	697b      	ldr	r3, [r7, #20]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	f000 814b 	beq.w	8017e1a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8017b84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017b88:	68ba      	ldr	r2, [r7, #8]
 8017b8a:	441a      	add	r2, r3
 8017b8c:	697b      	ldr	r3, [r7, #20]
 8017b8e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017b90:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017b94:	b29b      	uxth	r3, r3
 8017b96:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017b9a:	4619      	mov	r1, r3
 8017b9c:	2036      	movs	r0, #54	@ 0x36
 8017b9e:	f7fa fd6f 	bl	8012680 <pbuf_alloc>
 8017ba2:	6338      	str	r0, [r7, #48]	@ 0x30
 8017ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d103      	bne.n	8017bb2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8017baa:	6978      	ldr	r0, [r7, #20]
 8017bac:	f7fb f84c 	bl	8012c48 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8017bb0:	e136      	b.n	8017e20 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8017bb2:	6979      	ldr	r1, [r7, #20]
 8017bb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017bb6:	f7fb f915 	bl	8012de4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8017bba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017bbc:	f7fb f8d2 	bl	8012d64 <pbuf_clen>
 8017bc0:	4603      	mov	r3, r0
 8017bc2:	461a      	mov	r2, r3
 8017bc4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017bc8:	4413      	add	r3, r2
 8017bca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8017bce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017bd2:	2b09      	cmp	r3, #9
 8017bd4:	d903      	bls.n	8017bde <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8017bd6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017bd8:	f7fb f836 	bl	8012c48 <pbuf_free>
      goto memerr;
 8017bdc:	e120      	b.n	8017e20 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8017be2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017be6:	441a      	add	r2, r3
 8017be8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017bec:	9300      	str	r3, [sp, #0]
 8017bee:	4613      	mov	r3, r2
 8017bf0:	2200      	movs	r2, #0
 8017bf2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017bf4:	68f8      	ldr	r0, [r7, #12]
 8017bf6:	f7ff fc53 	bl	80174a0 <tcp_create_segment>
 8017bfa:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8017bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	f000 810d 	beq.w	8017e1e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8017c04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d102      	bne.n	8017c10 <tcp_write+0x450>
      queue = seg;
 8017c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017c0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8017c0e:	e00c      	b.n	8017c2a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8017c10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d106      	bne.n	8017c24 <tcp_write+0x464>
 8017c16:	4b53      	ldr	r3, [pc, #332]	@ (8017d64 <tcp_write+0x5a4>)
 8017c18:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8017c1c:	4955      	ldr	r1, [pc, #340]	@ (8017d74 <tcp_write+0x5b4>)
 8017c1e:	4853      	ldr	r0, [pc, #332]	@ (8017d6c <tcp_write+0x5ac>)
 8017c20:	f005 fba4 	bl	801d36c <iprintf>
      prev_seg->next = seg;
 8017c24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017c26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017c28:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8017c2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017c2c:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8017c2e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017c32:	8b3b      	ldrh	r3, [r7, #24]
 8017c34:	4413      	add	r3, r2
 8017c36:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8017c3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017c3e:	88fb      	ldrh	r3, [r7, #6]
 8017c40:	429a      	cmp	r2, r3
 8017c42:	f4ff af3d 	bcc.w	8017ac0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8017c46:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d02c      	beq.n	8017ca6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8017c4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017c4e:	685b      	ldr	r3, [r3, #4]
 8017c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017c52:	e01e      	b.n	8017c92 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8017c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c56:	891a      	ldrh	r2, [r3, #8]
 8017c58:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017c5a:	4413      	add	r3, r2
 8017c5c:	b29a      	uxth	r2, r3
 8017c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c60:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8017c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d110      	bne.n	8017c8c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8017c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c6c:	685b      	ldr	r3, [r3, #4]
 8017c6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017c70:	8952      	ldrh	r2, [r2, #10]
 8017c72:	4413      	add	r3, r2
 8017c74:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017c76:	68b9      	ldr	r1, [r7, #8]
 8017c78:	4618      	mov	r0, r3
 8017c7a:	f005 fd04 	bl	801d686 <memcpy>
        p->len += oversize_used;
 8017c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c80:	895a      	ldrh	r2, [r3, #10]
 8017c82:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017c84:	4413      	add	r3, r2
 8017c86:	b29a      	uxth	r2, r3
 8017c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c8a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8017c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d1dd      	bne.n	8017c54 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8017c98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017c9a:	891a      	ldrh	r2, [r3, #8]
 8017c9c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017c9e:	4413      	add	r3, r2
 8017ca0:	b29a      	uxth	r2, r3
 8017ca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017ca4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8017ca6:	8a7a      	ldrh	r2, [r7, #18]
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8017cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d018      	beq.n	8017ce6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8017cb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d106      	bne.n	8017cc8 <tcp_write+0x508>
 8017cba:	4b2a      	ldr	r3, [pc, #168]	@ (8017d64 <tcp_write+0x5a4>)
 8017cbc:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8017cc0:	492d      	ldr	r1, [pc, #180]	@ (8017d78 <tcp_write+0x5b8>)
 8017cc2:	482a      	ldr	r0, [pc, #168]	@ (8017d6c <tcp_write+0x5ac>)
 8017cc4:	f005 fb52 	bl	801d36c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8017cc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017cca:	685b      	ldr	r3, [r3, #4]
 8017ccc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017cce:	4618      	mov	r0, r3
 8017cd0:	f7fb f888 	bl	8012de4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8017cd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017cd6:	891a      	ldrh	r2, [r3, #8]
 8017cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017cda:	891b      	ldrh	r3, [r3, #8]
 8017cdc:	4413      	add	r3, r2
 8017cde:	b29a      	uxth	r2, r3
 8017ce0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017ce2:	811a      	strh	r2, [r3, #8]
 8017ce4:	e037      	b.n	8017d56 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8017ce6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d034      	beq.n	8017d56 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8017cec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d003      	beq.n	8017cfa <tcp_write+0x53a>
 8017cf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017cf4:	685b      	ldr	r3, [r3, #4]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d106      	bne.n	8017d08 <tcp_write+0x548>
 8017cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8017d64 <tcp_write+0x5a4>)
 8017cfc:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8017d00:	491e      	ldr	r1, [pc, #120]	@ (8017d7c <tcp_write+0x5bc>)
 8017d02:	481a      	ldr	r0, [pc, #104]	@ (8017d6c <tcp_write+0x5ac>)
 8017d04:	f005 fb32 	bl	801d36c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017d08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017d0a:	685b      	ldr	r3, [r3, #4]
 8017d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017d0e:	e009      	b.n	8017d24 <tcp_write+0x564>
      p->tot_len += extendlen;
 8017d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d12:	891a      	ldrh	r2, [r3, #8]
 8017d14:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017d16:	4413      	add	r3, r2
 8017d18:	b29a      	uxth	r2, r3
 8017d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d1c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d1f1      	bne.n	8017d10 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8017d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d2e:	891a      	ldrh	r2, [r3, #8]
 8017d30:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017d32:	4413      	add	r3, r2
 8017d34:	b29a      	uxth	r2, r3
 8017d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d38:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8017d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d3c:	895a      	ldrh	r2, [r3, #10]
 8017d3e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017d40:	4413      	add	r3, r2
 8017d42:	b29a      	uxth	r2, r3
 8017d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d46:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8017d48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017d4a:	891a      	ldrh	r2, [r3, #8]
 8017d4c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017d4e:	4413      	add	r3, r2
 8017d50:	b29a      	uxth	r2, r3
 8017d52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017d54:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8017d56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d111      	bne.n	8017d80 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017d60:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017d62:	e010      	b.n	8017d86 <tcp_write+0x5c6>
 8017d64:	08020894 	.word	0x08020894
 8017d68:	08020b34 	.word	0x08020b34
 8017d6c:	080208e8 	.word	0x080208e8
 8017d70:	08020b74 	.word	0x08020b74
 8017d74:	08020b84 	.word	0x08020b84
 8017d78:	08020b98 	.word	0x08020b98
 8017d7c:	08020bd0 	.word	0x08020bd0
  } else {
    last_unsent->next = queue;
 8017d80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017d82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017d84:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8017d8a:	88fb      	ldrh	r3, [r7, #6]
 8017d8c:	441a      	add	r2, r3
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8017d98:	88fb      	ldrh	r3, [r7, #6]
 8017d9a:	1ad3      	subs	r3, r2, r3
 8017d9c:	b29a      	uxth	r2, r3
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8017daa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d00e      	beq.n	8017dd6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d10a      	bne.n	8017dd6 <tcp_write+0x616>
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d106      	bne.n	8017dd6 <tcp_write+0x616>
 8017dc8:	4b2c      	ldr	r3, [pc, #176]	@ (8017e7c <tcp_write+0x6bc>)
 8017dca:	f240 3212 	movw	r2, #786	@ 0x312
 8017dce:	492c      	ldr	r1, [pc, #176]	@ (8017e80 <tcp_write+0x6c0>)
 8017dd0:	482c      	ldr	r0, [pc, #176]	@ (8017e84 <tcp_write+0x6c4>)
 8017dd2:	f005 facb 	bl	801d36c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8017dd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d016      	beq.n	8017e0a <tcp_write+0x64a>
 8017ddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017dde:	68db      	ldr	r3, [r3, #12]
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d012      	beq.n	8017e0a <tcp_write+0x64a>
 8017de4:	797b      	ldrb	r3, [r7, #5]
 8017de6:	f003 0302 	and.w	r3, r3, #2
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d10d      	bne.n	8017e0a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8017dee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017df0:	68db      	ldr	r3, [r3, #12]
 8017df2:	899b      	ldrh	r3, [r3, #12]
 8017df4:	b29c      	uxth	r4, r3
 8017df6:	2008      	movs	r0, #8
 8017df8:	f7f9 fb38 	bl	801146c <lwip_htons>
 8017dfc:	4603      	mov	r3, r0
 8017dfe:	461a      	mov	r2, r3
 8017e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e02:	68db      	ldr	r3, [r3, #12]
 8017e04:	4322      	orrs	r2, r4
 8017e06:	b292      	uxth	r2, r2
 8017e08:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	e031      	b.n	8017e72 <tcp_write+0x6b2>
          goto memerr;
 8017e0e:	bf00      	nop
 8017e10:	e006      	b.n	8017e20 <tcp_write+0x660>
            goto memerr;
 8017e12:	bf00      	nop
 8017e14:	e004      	b.n	8017e20 <tcp_write+0x660>
        goto memerr;
 8017e16:	bf00      	nop
 8017e18:	e002      	b.n	8017e20 <tcp_write+0x660>
        goto memerr;
 8017e1a:	bf00      	nop
 8017e1c:	e000      	b.n	8017e20 <tcp_write+0x660>
      goto memerr;
 8017e1e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	8b5b      	ldrh	r3, [r3, #26]
 8017e24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017e28:	b29a      	uxth	r2, r3
 8017e2a:	68fb      	ldr	r3, [r7, #12]
 8017e2c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8017e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d002      	beq.n	8017e3a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8017e34:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017e36:	f7fa ff07 	bl	8012c48 <pbuf_free>
  }
  if (queue != NULL) {
 8017e3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d002      	beq.n	8017e46 <tcp_write+0x686>
    tcp_segs_free(queue);
 8017e40:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017e42:	f7fc fb71 	bl	8014528 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d00e      	beq.n	8017e6e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d10a      	bne.n	8017e6e <tcp_write+0x6ae>
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d106      	bne.n	8017e6e <tcp_write+0x6ae>
 8017e60:	4b06      	ldr	r3, [pc, #24]	@ (8017e7c <tcp_write+0x6bc>)
 8017e62:	f240 3227 	movw	r2, #807	@ 0x327
 8017e66:	4906      	ldr	r1, [pc, #24]	@ (8017e80 <tcp_write+0x6c0>)
 8017e68:	4806      	ldr	r0, [pc, #24]	@ (8017e84 <tcp_write+0x6c4>)
 8017e6a:	f005 fa7f 	bl	801d36c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8017e6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017e72:	4618      	mov	r0, r3
 8017e74:	375c      	adds	r7, #92	@ 0x5c
 8017e76:	46bd      	mov	sp, r7
 8017e78:	bd90      	pop	{r4, r7, pc}
 8017e7a:	bf00      	nop
 8017e7c:	08020894 	.word	0x08020894
 8017e80:	08020c08 	.word	0x08020c08
 8017e84:	080208e8 	.word	0x080208e8

08017e88 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8017e88:	b590      	push	{r4, r7, lr}
 8017e8a:	b08b      	sub	sp, #44	@ 0x2c
 8017e8c:	af02      	add	r7, sp, #8
 8017e8e:	6078      	str	r0, [r7, #4]
 8017e90:	460b      	mov	r3, r1
 8017e92:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8017e94:	2300      	movs	r3, #0
 8017e96:	61fb      	str	r3, [r7, #28]
 8017e98:	2300      	movs	r3, #0
 8017e9a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d106      	bne.n	8017eb4 <tcp_split_unsent_seg+0x2c>
 8017ea6:	4b95      	ldr	r3, [pc, #596]	@ (80180fc <tcp_split_unsent_seg+0x274>)
 8017ea8:	f240 324b 	movw	r2, #843	@ 0x34b
 8017eac:	4994      	ldr	r1, [pc, #592]	@ (8018100 <tcp_split_unsent_seg+0x278>)
 8017eae:	4895      	ldr	r0, [pc, #596]	@ (8018104 <tcp_split_unsent_seg+0x27c>)
 8017eb0:	f005 fa5c 	bl	801d36c <iprintf>

  useg = pcb->unsent;
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017eb8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8017eba:	697b      	ldr	r3, [r7, #20]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d102      	bne.n	8017ec6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8017ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8017ec4:	e116      	b.n	80180f4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8017ec6:	887b      	ldrh	r3, [r7, #2]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d109      	bne.n	8017ee0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8017ecc:	4b8b      	ldr	r3, [pc, #556]	@ (80180fc <tcp_split_unsent_seg+0x274>)
 8017ece:	f240 3253 	movw	r2, #851	@ 0x353
 8017ed2:	498d      	ldr	r1, [pc, #564]	@ (8018108 <tcp_split_unsent_seg+0x280>)
 8017ed4:	488b      	ldr	r0, [pc, #556]	@ (8018104 <tcp_split_unsent_seg+0x27c>)
 8017ed6:	f005 fa49 	bl	801d36c <iprintf>
    return ERR_VAL;
 8017eda:	f06f 0305 	mvn.w	r3, #5
 8017ede:	e109      	b.n	80180f4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8017ee0:	697b      	ldr	r3, [r7, #20]
 8017ee2:	891b      	ldrh	r3, [r3, #8]
 8017ee4:	887a      	ldrh	r2, [r7, #2]
 8017ee6:	429a      	cmp	r2, r3
 8017ee8:	d301      	bcc.n	8017eee <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8017eea:	2300      	movs	r3, #0
 8017eec:	e102      	b.n	80180f4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017ef2:	887a      	ldrh	r2, [r7, #2]
 8017ef4:	429a      	cmp	r2, r3
 8017ef6:	d906      	bls.n	8017f06 <tcp_split_unsent_seg+0x7e>
 8017ef8:	4b80      	ldr	r3, [pc, #512]	@ (80180fc <tcp_split_unsent_seg+0x274>)
 8017efa:	f240 325b 	movw	r2, #859	@ 0x35b
 8017efe:	4983      	ldr	r1, [pc, #524]	@ (801810c <tcp_split_unsent_seg+0x284>)
 8017f00:	4880      	ldr	r0, [pc, #512]	@ (8018104 <tcp_split_unsent_seg+0x27c>)
 8017f02:	f005 fa33 	bl	801d36c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8017f06:	697b      	ldr	r3, [r7, #20]
 8017f08:	891b      	ldrh	r3, [r3, #8]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d106      	bne.n	8017f1c <tcp_split_unsent_seg+0x94>
 8017f0e:	4b7b      	ldr	r3, [pc, #492]	@ (80180fc <tcp_split_unsent_seg+0x274>)
 8017f10:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8017f14:	497e      	ldr	r1, [pc, #504]	@ (8018110 <tcp_split_unsent_seg+0x288>)
 8017f16:	487b      	ldr	r0, [pc, #492]	@ (8018104 <tcp_split_unsent_seg+0x27c>)
 8017f18:	f005 fa28 	bl	801d36c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8017f1c:	697b      	ldr	r3, [r7, #20]
 8017f1e:	7a9b      	ldrb	r3, [r3, #10]
 8017f20:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8017f22:	7bfb      	ldrb	r3, [r7, #15]
 8017f24:	009b      	lsls	r3, r3, #2
 8017f26:	b2db      	uxtb	r3, r3
 8017f28:	f003 0304 	and.w	r3, r3, #4
 8017f2c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8017f2e:	697b      	ldr	r3, [r7, #20]
 8017f30:	891a      	ldrh	r2, [r3, #8]
 8017f32:	887b      	ldrh	r3, [r7, #2]
 8017f34:	1ad3      	subs	r3, r2, r3
 8017f36:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8017f38:	7bbb      	ldrb	r3, [r7, #14]
 8017f3a:	b29a      	uxth	r2, r3
 8017f3c:	89bb      	ldrh	r3, [r7, #12]
 8017f3e:	4413      	add	r3, r2
 8017f40:	b29b      	uxth	r3, r3
 8017f42:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017f46:	4619      	mov	r1, r3
 8017f48:	2036      	movs	r0, #54	@ 0x36
 8017f4a:	f7fa fb99 	bl	8012680 <pbuf_alloc>
 8017f4e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017f50:	693b      	ldr	r3, [r7, #16]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	f000 80b7 	beq.w	80180c6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8017f58:	697b      	ldr	r3, [r7, #20]
 8017f5a:	685b      	ldr	r3, [r3, #4]
 8017f5c:	891a      	ldrh	r2, [r3, #8]
 8017f5e:	697b      	ldr	r3, [r7, #20]
 8017f60:	891b      	ldrh	r3, [r3, #8]
 8017f62:	1ad3      	subs	r3, r2, r3
 8017f64:	b29a      	uxth	r2, r3
 8017f66:	887b      	ldrh	r3, [r7, #2]
 8017f68:	4413      	add	r3, r2
 8017f6a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8017f6c:	697b      	ldr	r3, [r7, #20]
 8017f6e:	6858      	ldr	r0, [r3, #4]
 8017f70:	693b      	ldr	r3, [r7, #16]
 8017f72:	685a      	ldr	r2, [r3, #4]
 8017f74:	7bbb      	ldrb	r3, [r7, #14]
 8017f76:	18d1      	adds	r1, r2, r3
 8017f78:	897b      	ldrh	r3, [r7, #10]
 8017f7a:	89ba      	ldrh	r2, [r7, #12]
 8017f7c:	f7fb f85a 	bl	8013034 <pbuf_copy_partial>
 8017f80:	4603      	mov	r3, r0
 8017f82:	461a      	mov	r2, r3
 8017f84:	89bb      	ldrh	r3, [r7, #12]
 8017f86:	4293      	cmp	r3, r2
 8017f88:	f040 809f 	bne.w	80180ca <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8017f8c:	697b      	ldr	r3, [r7, #20]
 8017f8e:	68db      	ldr	r3, [r3, #12]
 8017f90:	899b      	ldrh	r3, [r3, #12]
 8017f92:	b29b      	uxth	r3, r3
 8017f94:	4618      	mov	r0, r3
 8017f96:	f7f9 fa69 	bl	801146c <lwip_htons>
 8017f9a:	4603      	mov	r3, r0
 8017f9c:	b2db      	uxtb	r3, r3
 8017f9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017fa2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8017fa8:	7efb      	ldrb	r3, [r7, #27]
 8017faa:	f003 0308 	and.w	r3, r3, #8
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d007      	beq.n	8017fc2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8017fb2:	7efb      	ldrb	r3, [r7, #27]
 8017fb4:	f023 0308 	bic.w	r3, r3, #8
 8017fb8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8017fba:	7ebb      	ldrb	r3, [r7, #26]
 8017fbc:	f043 0308 	orr.w	r3, r3, #8
 8017fc0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8017fc2:	7efb      	ldrb	r3, [r7, #27]
 8017fc4:	f003 0301 	and.w	r3, r3, #1
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d007      	beq.n	8017fdc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8017fcc:	7efb      	ldrb	r3, [r7, #27]
 8017fce:	f023 0301 	bic.w	r3, r3, #1
 8017fd2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8017fd4:	7ebb      	ldrb	r3, [r7, #26]
 8017fd6:	f043 0301 	orr.w	r3, r3, #1
 8017fda:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8017fdc:	697b      	ldr	r3, [r7, #20]
 8017fde:	68db      	ldr	r3, [r3, #12]
 8017fe0:	685b      	ldr	r3, [r3, #4]
 8017fe2:	4618      	mov	r0, r3
 8017fe4:	f7f9 fa57 	bl	8011496 <lwip_htonl>
 8017fe8:	4602      	mov	r2, r0
 8017fea:	887b      	ldrh	r3, [r7, #2]
 8017fec:	18d1      	adds	r1, r2, r3
 8017fee:	7eba      	ldrb	r2, [r7, #26]
 8017ff0:	7bfb      	ldrb	r3, [r7, #15]
 8017ff2:	9300      	str	r3, [sp, #0]
 8017ff4:	460b      	mov	r3, r1
 8017ff6:	6939      	ldr	r1, [r7, #16]
 8017ff8:	6878      	ldr	r0, [r7, #4]
 8017ffa:	f7ff fa51 	bl	80174a0 <tcp_create_segment>
 8017ffe:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8018000:	69fb      	ldr	r3, [r7, #28]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d063      	beq.n	80180ce <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8018006:	697b      	ldr	r3, [r7, #20]
 8018008:	685b      	ldr	r3, [r3, #4]
 801800a:	4618      	mov	r0, r3
 801800c:	f7fa feaa 	bl	8012d64 <pbuf_clen>
 8018010:	4603      	mov	r3, r0
 8018012:	461a      	mov	r2, r3
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801801a:	1a9b      	subs	r3, r3, r2
 801801c:	b29a      	uxth	r2, r3
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8018024:	697b      	ldr	r3, [r7, #20]
 8018026:	6858      	ldr	r0, [r3, #4]
 8018028:	697b      	ldr	r3, [r7, #20]
 801802a:	685b      	ldr	r3, [r3, #4]
 801802c:	891a      	ldrh	r2, [r3, #8]
 801802e:	89bb      	ldrh	r3, [r7, #12]
 8018030:	1ad3      	subs	r3, r2, r3
 8018032:	b29b      	uxth	r3, r3
 8018034:	4619      	mov	r1, r3
 8018036:	f7fa fc81 	bl	801293c <pbuf_realloc>
  useg->len -= remainder;
 801803a:	697b      	ldr	r3, [r7, #20]
 801803c:	891a      	ldrh	r2, [r3, #8]
 801803e:	89bb      	ldrh	r3, [r7, #12]
 8018040:	1ad3      	subs	r3, r2, r3
 8018042:	b29a      	uxth	r2, r3
 8018044:	697b      	ldr	r3, [r7, #20]
 8018046:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8018048:	697b      	ldr	r3, [r7, #20]
 801804a:	68db      	ldr	r3, [r3, #12]
 801804c:	899b      	ldrh	r3, [r3, #12]
 801804e:	b29c      	uxth	r4, r3
 8018050:	7efb      	ldrb	r3, [r7, #27]
 8018052:	b29b      	uxth	r3, r3
 8018054:	4618      	mov	r0, r3
 8018056:	f7f9 fa09 	bl	801146c <lwip_htons>
 801805a:	4603      	mov	r3, r0
 801805c:	461a      	mov	r2, r3
 801805e:	697b      	ldr	r3, [r7, #20]
 8018060:	68db      	ldr	r3, [r3, #12]
 8018062:	4322      	orrs	r2, r4
 8018064:	b292      	uxth	r2, r2
 8018066:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8018068:	697b      	ldr	r3, [r7, #20]
 801806a:	685b      	ldr	r3, [r3, #4]
 801806c:	4618      	mov	r0, r3
 801806e:	f7fa fe79 	bl	8012d64 <pbuf_clen>
 8018072:	4603      	mov	r3, r0
 8018074:	461a      	mov	r2, r3
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801807c:	4413      	add	r3, r2
 801807e:	b29a      	uxth	r2, r3
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018086:	69fb      	ldr	r3, [r7, #28]
 8018088:	685b      	ldr	r3, [r3, #4]
 801808a:	4618      	mov	r0, r3
 801808c:	f7fa fe6a 	bl	8012d64 <pbuf_clen>
 8018090:	4603      	mov	r3, r0
 8018092:	461a      	mov	r2, r3
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801809a:	4413      	add	r3, r2
 801809c:	b29a      	uxth	r2, r3
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80180a4:	697b      	ldr	r3, [r7, #20]
 80180a6:	681a      	ldr	r2, [r3, #0]
 80180a8:	69fb      	ldr	r3, [r7, #28]
 80180aa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80180ac:	697b      	ldr	r3, [r7, #20]
 80180ae:	69fa      	ldr	r2, [r7, #28]
 80180b0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80180b2:	69fb      	ldr	r3, [r7, #28]
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d103      	bne.n	80180c2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	2200      	movs	r2, #0
 80180be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80180c2:	2300      	movs	r3, #0
 80180c4:	e016      	b.n	80180f4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80180c6:	bf00      	nop
 80180c8:	e002      	b.n	80180d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80180ca:	bf00      	nop
 80180cc:	e000      	b.n	80180d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80180ce:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80180d0:	69fb      	ldr	r3, [r7, #28]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d006      	beq.n	80180e4 <tcp_split_unsent_seg+0x25c>
 80180d6:	4b09      	ldr	r3, [pc, #36]	@ (80180fc <tcp_split_unsent_seg+0x274>)
 80180d8:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80180dc:	490d      	ldr	r1, [pc, #52]	@ (8018114 <tcp_split_unsent_seg+0x28c>)
 80180de:	4809      	ldr	r0, [pc, #36]	@ (8018104 <tcp_split_unsent_seg+0x27c>)
 80180e0:	f005 f944 	bl	801d36c <iprintf>
  if (p != NULL) {
 80180e4:	693b      	ldr	r3, [r7, #16]
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d002      	beq.n	80180f0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80180ea:	6938      	ldr	r0, [r7, #16]
 80180ec:	f7fa fdac 	bl	8012c48 <pbuf_free>
  }

  return ERR_MEM;
 80180f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80180f4:	4618      	mov	r0, r3
 80180f6:	3724      	adds	r7, #36	@ 0x24
 80180f8:	46bd      	mov	sp, r7
 80180fa:	bd90      	pop	{r4, r7, pc}
 80180fc:	08020894 	.word	0x08020894
 8018100:	08020c28 	.word	0x08020c28
 8018104:	080208e8 	.word	0x080208e8
 8018108:	08020c4c 	.word	0x08020c4c
 801810c:	08020c70 	.word	0x08020c70
 8018110:	08020c80 	.word	0x08020c80
 8018114:	08020c90 	.word	0x08020c90

08018118 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8018118:	b590      	push	{r4, r7, lr}
 801811a:	b085      	sub	sp, #20
 801811c:	af00      	add	r7, sp, #0
 801811e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	2b00      	cmp	r3, #0
 8018124:	d106      	bne.n	8018134 <tcp_send_fin+0x1c>
 8018126:	4b21      	ldr	r3, [pc, #132]	@ (80181ac <tcp_send_fin+0x94>)
 8018128:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801812c:	4920      	ldr	r1, [pc, #128]	@ (80181b0 <tcp_send_fin+0x98>)
 801812e:	4821      	ldr	r0, [pc, #132]	@ (80181b4 <tcp_send_fin+0x9c>)
 8018130:	f005 f91c 	bl	801d36c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018138:	2b00      	cmp	r3, #0
 801813a:	d02e      	beq.n	801819a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018140:	60fb      	str	r3, [r7, #12]
 8018142:	e002      	b.n	801814a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	2b00      	cmp	r3, #0
 8018150:	d1f8      	bne.n	8018144 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8018152:	68fb      	ldr	r3, [r7, #12]
 8018154:	68db      	ldr	r3, [r3, #12]
 8018156:	899b      	ldrh	r3, [r3, #12]
 8018158:	b29b      	uxth	r3, r3
 801815a:	4618      	mov	r0, r3
 801815c:	f7f9 f986 	bl	801146c <lwip_htons>
 8018160:	4603      	mov	r3, r0
 8018162:	b2db      	uxtb	r3, r3
 8018164:	f003 0307 	and.w	r3, r3, #7
 8018168:	2b00      	cmp	r3, #0
 801816a:	d116      	bne.n	801819a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	68db      	ldr	r3, [r3, #12]
 8018170:	899b      	ldrh	r3, [r3, #12]
 8018172:	b29c      	uxth	r4, r3
 8018174:	2001      	movs	r0, #1
 8018176:	f7f9 f979 	bl	801146c <lwip_htons>
 801817a:	4603      	mov	r3, r0
 801817c:	461a      	mov	r2, r3
 801817e:	68fb      	ldr	r3, [r7, #12]
 8018180:	68db      	ldr	r3, [r3, #12]
 8018182:	4322      	orrs	r2, r4
 8018184:	b292      	uxth	r2, r2
 8018186:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	8b5b      	ldrh	r3, [r3, #26]
 801818c:	f043 0320 	orr.w	r3, r3, #32
 8018190:	b29a      	uxth	r2, r3
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8018196:	2300      	movs	r3, #0
 8018198:	e004      	b.n	80181a4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801819a:	2101      	movs	r1, #1
 801819c:	6878      	ldr	r0, [r7, #4]
 801819e:	f000 f80b 	bl	80181b8 <tcp_enqueue_flags>
 80181a2:	4603      	mov	r3, r0
}
 80181a4:	4618      	mov	r0, r3
 80181a6:	3714      	adds	r7, #20
 80181a8:	46bd      	mov	sp, r7
 80181aa:	bd90      	pop	{r4, r7, pc}
 80181ac:	08020894 	.word	0x08020894
 80181b0:	08020c9c 	.word	0x08020c9c
 80181b4:	080208e8 	.word	0x080208e8

080181b8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80181b8:	b580      	push	{r7, lr}
 80181ba:	b08a      	sub	sp, #40	@ 0x28
 80181bc:	af02      	add	r7, sp, #8
 80181be:	6078      	str	r0, [r7, #4]
 80181c0:	460b      	mov	r3, r1
 80181c2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80181c4:	2300      	movs	r3, #0
 80181c6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80181c8:	2300      	movs	r3, #0
 80181ca:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80181cc:	78fb      	ldrb	r3, [r7, #3]
 80181ce:	f003 0303 	and.w	r3, r3, #3
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d106      	bne.n	80181e4 <tcp_enqueue_flags+0x2c>
 80181d6:	4b67      	ldr	r3, [pc, #412]	@ (8018374 <tcp_enqueue_flags+0x1bc>)
 80181d8:	f240 4211 	movw	r2, #1041	@ 0x411
 80181dc:	4966      	ldr	r1, [pc, #408]	@ (8018378 <tcp_enqueue_flags+0x1c0>)
 80181de:	4867      	ldr	r0, [pc, #412]	@ (801837c <tcp_enqueue_flags+0x1c4>)
 80181e0:	f005 f8c4 	bl	801d36c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d106      	bne.n	80181f8 <tcp_enqueue_flags+0x40>
 80181ea:	4b62      	ldr	r3, [pc, #392]	@ (8018374 <tcp_enqueue_flags+0x1bc>)
 80181ec:	f240 4213 	movw	r2, #1043	@ 0x413
 80181f0:	4963      	ldr	r1, [pc, #396]	@ (8018380 <tcp_enqueue_flags+0x1c8>)
 80181f2:	4862      	ldr	r0, [pc, #392]	@ (801837c <tcp_enqueue_flags+0x1c4>)
 80181f4:	f005 f8ba 	bl	801d36c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80181f8:	78fb      	ldrb	r3, [r7, #3]
 80181fa:	f003 0302 	and.w	r3, r3, #2
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d001      	beq.n	8018206 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8018202:	2301      	movs	r3, #1
 8018204:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018206:	7ffb      	ldrb	r3, [r7, #31]
 8018208:	009b      	lsls	r3, r3, #2
 801820a:	b2db      	uxtb	r3, r3
 801820c:	f003 0304 	and.w	r3, r3, #4
 8018210:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018212:	7dfb      	ldrb	r3, [r7, #23]
 8018214:	b29b      	uxth	r3, r3
 8018216:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801821a:	4619      	mov	r1, r3
 801821c:	2036      	movs	r0, #54	@ 0x36
 801821e:	f7fa fa2f 	bl	8012680 <pbuf_alloc>
 8018222:	6138      	str	r0, [r7, #16]
 8018224:	693b      	ldr	r3, [r7, #16]
 8018226:	2b00      	cmp	r3, #0
 8018228:	d109      	bne.n	801823e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	8b5b      	ldrh	r3, [r3, #26]
 801822e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018232:	b29a      	uxth	r2, r3
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018238:	f04f 33ff 	mov.w	r3, #4294967295
 801823c:	e095      	b.n	801836a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801823e:	693b      	ldr	r3, [r7, #16]
 8018240:	895a      	ldrh	r2, [r3, #10]
 8018242:	7dfb      	ldrb	r3, [r7, #23]
 8018244:	b29b      	uxth	r3, r3
 8018246:	429a      	cmp	r2, r3
 8018248:	d206      	bcs.n	8018258 <tcp_enqueue_flags+0xa0>
 801824a:	4b4a      	ldr	r3, [pc, #296]	@ (8018374 <tcp_enqueue_flags+0x1bc>)
 801824c:	f240 4239 	movw	r2, #1081	@ 0x439
 8018250:	494c      	ldr	r1, [pc, #304]	@ (8018384 <tcp_enqueue_flags+0x1cc>)
 8018252:	484a      	ldr	r0, [pc, #296]	@ (801837c <tcp_enqueue_flags+0x1c4>)
 8018254:	f005 f88a 	bl	801d36c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801825c:	78fa      	ldrb	r2, [r7, #3]
 801825e:	7ffb      	ldrb	r3, [r7, #31]
 8018260:	9300      	str	r3, [sp, #0]
 8018262:	460b      	mov	r3, r1
 8018264:	6939      	ldr	r1, [r7, #16]
 8018266:	6878      	ldr	r0, [r7, #4]
 8018268:	f7ff f91a 	bl	80174a0 <tcp_create_segment>
 801826c:	60f8      	str	r0, [r7, #12]
 801826e:	68fb      	ldr	r3, [r7, #12]
 8018270:	2b00      	cmp	r3, #0
 8018272:	d109      	bne.n	8018288 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	8b5b      	ldrh	r3, [r3, #26]
 8018278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801827c:	b29a      	uxth	r2, r3
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018282:	f04f 33ff 	mov.w	r3, #4294967295
 8018286:	e070      	b.n	801836a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	68db      	ldr	r3, [r3, #12]
 801828c:	f003 0303 	and.w	r3, r3, #3
 8018290:	2b00      	cmp	r3, #0
 8018292:	d006      	beq.n	80182a2 <tcp_enqueue_flags+0xea>
 8018294:	4b37      	ldr	r3, [pc, #220]	@ (8018374 <tcp_enqueue_flags+0x1bc>)
 8018296:	f240 4242 	movw	r2, #1090	@ 0x442
 801829a:	493b      	ldr	r1, [pc, #236]	@ (8018388 <tcp_enqueue_flags+0x1d0>)
 801829c:	4837      	ldr	r0, [pc, #220]	@ (801837c <tcp_enqueue_flags+0x1c4>)
 801829e:	f005 f865 	bl	801d36c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	891b      	ldrh	r3, [r3, #8]
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d006      	beq.n	80182b8 <tcp_enqueue_flags+0x100>
 80182aa:	4b32      	ldr	r3, [pc, #200]	@ (8018374 <tcp_enqueue_flags+0x1bc>)
 80182ac:	f240 4243 	movw	r2, #1091	@ 0x443
 80182b0:	4936      	ldr	r1, [pc, #216]	@ (801838c <tcp_enqueue_flags+0x1d4>)
 80182b2:	4832      	ldr	r0, [pc, #200]	@ (801837c <tcp_enqueue_flags+0x1c4>)
 80182b4:	f005 f85a 	bl	801d36c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d103      	bne.n	80182c8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	68fa      	ldr	r2, [r7, #12]
 80182c4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80182c6:	e00d      	b.n	80182e4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80182cc:	61bb      	str	r3, [r7, #24]
 80182ce:	e002      	b.n	80182d6 <tcp_enqueue_flags+0x11e>
 80182d0:	69bb      	ldr	r3, [r7, #24]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	61bb      	str	r3, [r7, #24]
 80182d6:	69bb      	ldr	r3, [r7, #24]
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d1f8      	bne.n	80182d0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80182de:	69bb      	ldr	r3, [r7, #24]
 80182e0:	68fa      	ldr	r2, [r7, #12]
 80182e2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	2200      	movs	r2, #0
 80182e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80182ec:	78fb      	ldrb	r3, [r7, #3]
 80182ee:	f003 0302 	and.w	r3, r3, #2
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d104      	bne.n	8018300 <tcp_enqueue_flags+0x148>
 80182f6:	78fb      	ldrb	r3, [r7, #3]
 80182f8:	f003 0301 	and.w	r3, r3, #1
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d004      	beq.n	801830a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018304:	1c5a      	adds	r2, r3, #1
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801830a:	78fb      	ldrb	r3, [r7, #3]
 801830c:	f003 0301 	and.w	r3, r3, #1
 8018310:	2b00      	cmp	r3, #0
 8018312:	d006      	beq.n	8018322 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	8b5b      	ldrh	r3, [r3, #26]
 8018318:	f043 0320 	orr.w	r3, r3, #32
 801831c:	b29a      	uxth	r2, r3
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	685b      	ldr	r3, [r3, #4]
 8018326:	4618      	mov	r0, r3
 8018328:	f7fa fd1c 	bl	8012d64 <pbuf_clen>
 801832c:	4603      	mov	r3, r0
 801832e:	461a      	mov	r2, r3
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018336:	4413      	add	r3, r2
 8018338:	b29a      	uxth	r2, r3
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018346:	2b00      	cmp	r3, #0
 8018348:	d00e      	beq.n	8018368 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801834e:	2b00      	cmp	r3, #0
 8018350:	d10a      	bne.n	8018368 <tcp_enqueue_flags+0x1b0>
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018356:	2b00      	cmp	r3, #0
 8018358:	d106      	bne.n	8018368 <tcp_enqueue_flags+0x1b0>
 801835a:	4b06      	ldr	r3, [pc, #24]	@ (8018374 <tcp_enqueue_flags+0x1bc>)
 801835c:	f240 4265 	movw	r2, #1125	@ 0x465
 8018360:	490b      	ldr	r1, [pc, #44]	@ (8018390 <tcp_enqueue_flags+0x1d8>)
 8018362:	4806      	ldr	r0, [pc, #24]	@ (801837c <tcp_enqueue_flags+0x1c4>)
 8018364:	f005 f802 	bl	801d36c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8018368:	2300      	movs	r3, #0
}
 801836a:	4618      	mov	r0, r3
 801836c:	3720      	adds	r7, #32
 801836e:	46bd      	mov	sp, r7
 8018370:	bd80      	pop	{r7, pc}
 8018372:	bf00      	nop
 8018374:	08020894 	.word	0x08020894
 8018378:	08020cb8 	.word	0x08020cb8
 801837c:	080208e8 	.word	0x080208e8
 8018380:	08020d10 	.word	0x08020d10
 8018384:	08020d30 	.word	0x08020d30
 8018388:	08020d6c 	.word	0x08020d6c
 801838c:	08020d84 	.word	0x08020d84
 8018390:	08020db0 	.word	0x08020db0

08018394 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8018394:	b5b0      	push	{r4, r5, r7, lr}
 8018396:	b08a      	sub	sp, #40	@ 0x28
 8018398:	af00      	add	r7, sp, #0
 801839a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d106      	bne.n	80183b0 <tcp_output+0x1c>
 80183a2:	4b8a      	ldr	r3, [pc, #552]	@ (80185cc <tcp_output+0x238>)
 80183a4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80183a8:	4989      	ldr	r1, [pc, #548]	@ (80185d0 <tcp_output+0x23c>)
 80183aa:	488a      	ldr	r0, [pc, #552]	@ (80185d4 <tcp_output+0x240>)
 80183ac:	f004 ffde 	bl	801d36c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	7d1b      	ldrb	r3, [r3, #20]
 80183b4:	2b01      	cmp	r3, #1
 80183b6:	d106      	bne.n	80183c6 <tcp_output+0x32>
 80183b8:	4b84      	ldr	r3, [pc, #528]	@ (80185cc <tcp_output+0x238>)
 80183ba:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80183be:	4986      	ldr	r1, [pc, #536]	@ (80185d8 <tcp_output+0x244>)
 80183c0:	4884      	ldr	r0, [pc, #528]	@ (80185d4 <tcp_output+0x240>)
 80183c2:	f004 ffd3 	bl	801d36c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80183c6:	4b85      	ldr	r3, [pc, #532]	@ (80185dc <tcp_output+0x248>)
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	687a      	ldr	r2, [r7, #4]
 80183cc:	429a      	cmp	r2, r3
 80183ce:	d101      	bne.n	80183d4 <tcp_output+0x40>
    return ERR_OK;
 80183d0:	2300      	movs	r3, #0
 80183d2:	e1ce      	b.n	8018772 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80183e0:	4293      	cmp	r3, r2
 80183e2:	bf28      	it	cs
 80183e4:	4613      	movcs	r3, r2
 80183e6:	b29b      	uxth	r3, r3
 80183e8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80183ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80183f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d10b      	bne.n	801840e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	8b5b      	ldrh	r3, [r3, #26]
 80183fa:	f003 0302 	and.w	r3, r3, #2
 80183fe:	2b00      	cmp	r3, #0
 8018400:	f000 81aa 	beq.w	8018758 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8018404:	6878      	ldr	r0, [r7, #4]
 8018406:	f000 fdcb 	bl	8018fa0 <tcp_send_empty_ack>
 801840a:	4603      	mov	r3, r0
 801840c:	e1b1      	b.n	8018772 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801840e:	6879      	ldr	r1, [r7, #4]
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	3304      	adds	r3, #4
 8018414:	461a      	mov	r2, r3
 8018416:	6878      	ldr	r0, [r7, #4]
 8018418:	f7ff f826 	bl	8017468 <tcp_route>
 801841c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801841e:	697b      	ldr	r3, [r7, #20]
 8018420:	2b00      	cmp	r3, #0
 8018422:	d102      	bne.n	801842a <tcp_output+0x96>
    return ERR_RTE;
 8018424:	f06f 0303 	mvn.w	r3, #3
 8018428:	e1a3      	b.n	8018772 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	2b00      	cmp	r3, #0
 801842e:	d003      	beq.n	8018438 <tcp_output+0xa4>
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d111      	bne.n	801845c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8018438:	697b      	ldr	r3, [r7, #20]
 801843a:	2b00      	cmp	r3, #0
 801843c:	d002      	beq.n	8018444 <tcp_output+0xb0>
 801843e:	697b      	ldr	r3, [r7, #20]
 8018440:	3304      	adds	r3, #4
 8018442:	e000      	b.n	8018446 <tcp_output+0xb2>
 8018444:	2300      	movs	r3, #0
 8018446:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8018448:	693b      	ldr	r3, [r7, #16]
 801844a:	2b00      	cmp	r3, #0
 801844c:	d102      	bne.n	8018454 <tcp_output+0xc0>
      return ERR_RTE;
 801844e:	f06f 0303 	mvn.w	r3, #3
 8018452:	e18e      	b.n	8018772 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018454:	693b      	ldr	r3, [r7, #16]
 8018456:	681a      	ldr	r2, [r3, #0]
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801845c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801845e:	68db      	ldr	r3, [r3, #12]
 8018460:	685b      	ldr	r3, [r3, #4]
 8018462:	4618      	mov	r0, r3
 8018464:	f7f9 f817 	bl	8011496 <lwip_htonl>
 8018468:	4602      	mov	r2, r0
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801846e:	1ad3      	subs	r3, r2, r3
 8018470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018472:	8912      	ldrh	r2, [r2, #8]
 8018474:	4413      	add	r3, r2
 8018476:	69ba      	ldr	r2, [r7, #24]
 8018478:	429a      	cmp	r2, r3
 801847a:	d227      	bcs.n	80184cc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018482:	461a      	mov	r2, r3
 8018484:	69bb      	ldr	r3, [r7, #24]
 8018486:	4293      	cmp	r3, r2
 8018488:	d114      	bne.n	80184b4 <tcp_output+0x120>
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801848e:	2b00      	cmp	r3, #0
 8018490:	d110      	bne.n	80184b4 <tcp_output+0x120>
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8018498:	2b00      	cmp	r3, #0
 801849a:	d10b      	bne.n	80184b4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	2200      	movs	r2, #0
 80184a0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	2201      	movs	r2, #1
 80184a8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	2200      	movs	r2, #0
 80184b0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	8b5b      	ldrh	r3, [r3, #26]
 80184b8:	f003 0302 	and.w	r3, r3, #2
 80184bc:	2b00      	cmp	r3, #0
 80184be:	f000 814d 	beq.w	801875c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80184c2:	6878      	ldr	r0, [r7, #4]
 80184c4:	f000 fd6c 	bl	8018fa0 <tcp_send_empty_ack>
 80184c8:	4603      	mov	r3, r0
 80184ca:	e152      	b.n	8018772 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	2200      	movs	r2, #0
 80184d0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80184d8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80184da:	6a3b      	ldr	r3, [r7, #32]
 80184dc:	2b00      	cmp	r3, #0
 80184de:	f000 811c 	beq.w	801871a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80184e2:	e002      	b.n	80184ea <tcp_output+0x156>
 80184e4:	6a3b      	ldr	r3, [r7, #32]
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	623b      	str	r3, [r7, #32]
 80184ea:	6a3b      	ldr	r3, [r7, #32]
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d1f8      	bne.n	80184e4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80184f2:	e112      	b.n	801871a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80184f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184f6:	68db      	ldr	r3, [r3, #12]
 80184f8:	899b      	ldrh	r3, [r3, #12]
 80184fa:	b29b      	uxth	r3, r3
 80184fc:	4618      	mov	r0, r3
 80184fe:	f7f8 ffb5 	bl	801146c <lwip_htons>
 8018502:	4603      	mov	r3, r0
 8018504:	b2db      	uxtb	r3, r3
 8018506:	f003 0304 	and.w	r3, r3, #4
 801850a:	2b00      	cmp	r3, #0
 801850c:	d006      	beq.n	801851c <tcp_output+0x188>
 801850e:	4b2f      	ldr	r3, [pc, #188]	@ (80185cc <tcp_output+0x238>)
 8018510:	f240 5236 	movw	r2, #1334	@ 0x536
 8018514:	4932      	ldr	r1, [pc, #200]	@ (80185e0 <tcp_output+0x24c>)
 8018516:	482f      	ldr	r0, [pc, #188]	@ (80185d4 <tcp_output+0x240>)
 8018518:	f004 ff28 	bl	801d36c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018520:	2b00      	cmp	r3, #0
 8018522:	d01f      	beq.n	8018564 <tcp_output+0x1d0>
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	8b5b      	ldrh	r3, [r3, #26]
 8018528:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801852c:	2b00      	cmp	r3, #0
 801852e:	d119      	bne.n	8018564 <tcp_output+0x1d0>
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018534:	2b00      	cmp	r3, #0
 8018536:	d00b      	beq.n	8018550 <tcp_output+0x1bc>
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	2b00      	cmp	r3, #0
 8018540:	d110      	bne.n	8018564 <tcp_output+0x1d0>
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018546:	891a      	ldrh	r2, [r3, #8]
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801854c:	429a      	cmp	r2, r3
 801854e:	d209      	bcs.n	8018564 <tcp_output+0x1d0>
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8018556:	2b00      	cmp	r3, #0
 8018558:	d004      	beq.n	8018564 <tcp_output+0x1d0>
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018560:	2b08      	cmp	r3, #8
 8018562:	d901      	bls.n	8018568 <tcp_output+0x1d4>
 8018564:	2301      	movs	r3, #1
 8018566:	e000      	b.n	801856a <tcp_output+0x1d6>
 8018568:	2300      	movs	r3, #0
 801856a:	2b00      	cmp	r3, #0
 801856c:	d106      	bne.n	801857c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	8b5b      	ldrh	r3, [r3, #26]
 8018572:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018576:	2b00      	cmp	r3, #0
 8018578:	f000 80e4 	beq.w	8018744 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	7d1b      	ldrb	r3, [r3, #20]
 8018580:	2b02      	cmp	r3, #2
 8018582:	d00d      	beq.n	80185a0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8018584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018586:	68db      	ldr	r3, [r3, #12]
 8018588:	899b      	ldrh	r3, [r3, #12]
 801858a:	b29c      	uxth	r4, r3
 801858c:	2010      	movs	r0, #16
 801858e:	f7f8 ff6d 	bl	801146c <lwip_htons>
 8018592:	4603      	mov	r3, r0
 8018594:	461a      	mov	r2, r3
 8018596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018598:	68db      	ldr	r3, [r3, #12]
 801859a:	4322      	orrs	r2, r4
 801859c:	b292      	uxth	r2, r2
 801859e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80185a0:	697a      	ldr	r2, [r7, #20]
 80185a2:	6879      	ldr	r1, [r7, #4]
 80185a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80185a6:	f000 f909 	bl	80187bc <tcp_output_segment>
 80185aa:	4603      	mov	r3, r0
 80185ac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80185ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d016      	beq.n	80185e4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	8b5b      	ldrh	r3, [r3, #26]
 80185ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80185be:	b29a      	uxth	r2, r3
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	835a      	strh	r2, [r3, #26]
      return err;
 80185c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80185c8:	e0d3      	b.n	8018772 <tcp_output+0x3de>
 80185ca:	bf00      	nop
 80185cc:	08020894 	.word	0x08020894
 80185d0:	08020dd8 	.word	0x08020dd8
 80185d4:	080208e8 	.word	0x080208e8
 80185d8:	08020df0 	.word	0x08020df0
 80185dc:	2000e4a8 	.word	0x2000e4a8
 80185e0:	08020e18 	.word	0x08020e18
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80185e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185e6:	681a      	ldr	r2, [r3, #0]
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	7d1b      	ldrb	r3, [r3, #20]
 80185f0:	2b02      	cmp	r3, #2
 80185f2:	d006      	beq.n	8018602 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	8b5b      	ldrh	r3, [r3, #26]
 80185f8:	f023 0303 	bic.w	r3, r3, #3
 80185fc:	b29a      	uxth	r2, r3
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018604:	68db      	ldr	r3, [r3, #12]
 8018606:	685b      	ldr	r3, [r3, #4]
 8018608:	4618      	mov	r0, r3
 801860a:	f7f8 ff44 	bl	8011496 <lwip_htonl>
 801860e:	4604      	mov	r4, r0
 8018610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018612:	891b      	ldrh	r3, [r3, #8]
 8018614:	461d      	mov	r5, r3
 8018616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018618:	68db      	ldr	r3, [r3, #12]
 801861a:	899b      	ldrh	r3, [r3, #12]
 801861c:	b29b      	uxth	r3, r3
 801861e:	4618      	mov	r0, r3
 8018620:	f7f8 ff24 	bl	801146c <lwip_htons>
 8018624:	4603      	mov	r3, r0
 8018626:	b2db      	uxtb	r3, r3
 8018628:	f003 0303 	and.w	r3, r3, #3
 801862c:	2b00      	cmp	r3, #0
 801862e:	d001      	beq.n	8018634 <tcp_output+0x2a0>
 8018630:	2301      	movs	r3, #1
 8018632:	e000      	b.n	8018636 <tcp_output+0x2a2>
 8018634:	2300      	movs	r3, #0
 8018636:	442b      	add	r3, r5
 8018638:	4423      	add	r3, r4
 801863a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018640:	68bb      	ldr	r3, [r7, #8]
 8018642:	1ad3      	subs	r3, r2, r3
 8018644:	2b00      	cmp	r3, #0
 8018646:	da02      	bge.n	801864e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	68ba      	ldr	r2, [r7, #8]
 801864c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018650:	891b      	ldrh	r3, [r3, #8]
 8018652:	461c      	mov	r4, r3
 8018654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018656:	68db      	ldr	r3, [r3, #12]
 8018658:	899b      	ldrh	r3, [r3, #12]
 801865a:	b29b      	uxth	r3, r3
 801865c:	4618      	mov	r0, r3
 801865e:	f7f8 ff05 	bl	801146c <lwip_htons>
 8018662:	4603      	mov	r3, r0
 8018664:	b2db      	uxtb	r3, r3
 8018666:	f003 0303 	and.w	r3, r3, #3
 801866a:	2b00      	cmp	r3, #0
 801866c:	d001      	beq.n	8018672 <tcp_output+0x2de>
 801866e:	2301      	movs	r3, #1
 8018670:	e000      	b.n	8018674 <tcp_output+0x2e0>
 8018672:	2300      	movs	r3, #0
 8018674:	4423      	add	r3, r4
 8018676:	2b00      	cmp	r3, #0
 8018678:	d049      	beq.n	801870e <tcp_output+0x37a>
      seg->next = NULL;
 801867a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801867c:	2200      	movs	r2, #0
 801867e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018684:	2b00      	cmp	r3, #0
 8018686:	d105      	bne.n	8018694 <tcp_output+0x300>
        pcb->unacked = seg;
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801868c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801868e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018690:	623b      	str	r3, [r7, #32]
 8018692:	e03f      	b.n	8018714 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8018694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018696:	68db      	ldr	r3, [r3, #12]
 8018698:	685b      	ldr	r3, [r3, #4]
 801869a:	4618      	mov	r0, r3
 801869c:	f7f8 fefb 	bl	8011496 <lwip_htonl>
 80186a0:	4604      	mov	r4, r0
 80186a2:	6a3b      	ldr	r3, [r7, #32]
 80186a4:	68db      	ldr	r3, [r3, #12]
 80186a6:	685b      	ldr	r3, [r3, #4]
 80186a8:	4618      	mov	r0, r3
 80186aa:	f7f8 fef4 	bl	8011496 <lwip_htonl>
 80186ae:	4603      	mov	r3, r0
 80186b0:	1ae3      	subs	r3, r4, r3
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	da24      	bge.n	8018700 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	3370      	adds	r3, #112	@ 0x70
 80186ba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80186bc:	e002      	b.n	80186c4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80186be:	69fb      	ldr	r3, [r7, #28]
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80186c4:	69fb      	ldr	r3, [r7, #28]
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	d011      	beq.n	80186f0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80186cc:	69fb      	ldr	r3, [r7, #28]
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	68db      	ldr	r3, [r3, #12]
 80186d2:	685b      	ldr	r3, [r3, #4]
 80186d4:	4618      	mov	r0, r3
 80186d6:	f7f8 fede 	bl	8011496 <lwip_htonl>
 80186da:	4604      	mov	r4, r0
 80186dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186de:	68db      	ldr	r3, [r3, #12]
 80186e0:	685b      	ldr	r3, [r3, #4]
 80186e2:	4618      	mov	r0, r3
 80186e4:	f7f8 fed7 	bl	8011496 <lwip_htonl>
 80186e8:	4603      	mov	r3, r0
 80186ea:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	dbe6      	blt.n	80186be <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80186f0:	69fb      	ldr	r3, [r7, #28]
 80186f2:	681a      	ldr	r2, [r3, #0]
 80186f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186f6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80186f8:	69fb      	ldr	r3, [r7, #28]
 80186fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80186fc:	601a      	str	r2, [r3, #0]
 80186fe:	e009      	b.n	8018714 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018700:	6a3b      	ldr	r3, [r7, #32]
 8018702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018704:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8018706:	6a3b      	ldr	r3, [r7, #32]
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	623b      	str	r3, [r7, #32]
 801870c:	e002      	b.n	8018714 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801870e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018710:	f7fb ff1f 	bl	8014552 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018718:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801871a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801871c:	2b00      	cmp	r3, #0
 801871e:	d012      	beq.n	8018746 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018722:	68db      	ldr	r3, [r3, #12]
 8018724:	685b      	ldr	r3, [r3, #4]
 8018726:	4618      	mov	r0, r3
 8018728:	f7f8 feb5 	bl	8011496 <lwip_htonl>
 801872c:	4602      	mov	r2, r0
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018732:	1ad3      	subs	r3, r2, r3
 8018734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018736:	8912      	ldrh	r2, [r2, #8]
 8018738:	4413      	add	r3, r2
  while (seg != NULL &&
 801873a:	69ba      	ldr	r2, [r7, #24]
 801873c:	429a      	cmp	r2, r3
 801873e:	f4bf aed9 	bcs.w	80184f4 <tcp_output+0x160>
 8018742:	e000      	b.n	8018746 <tcp_output+0x3b2>
      break;
 8018744:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801874a:	2b00      	cmp	r3, #0
 801874c:	d108      	bne.n	8018760 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	2200      	movs	r2, #0
 8018752:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8018756:	e004      	b.n	8018762 <tcp_output+0x3ce>
    goto output_done;
 8018758:	bf00      	nop
 801875a:	e002      	b.n	8018762 <tcp_output+0x3ce>
    goto output_done;
 801875c:	bf00      	nop
 801875e:	e000      	b.n	8018762 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8018760:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	8b5b      	ldrh	r3, [r3, #26]
 8018766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801876a:	b29a      	uxth	r2, r3
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8018770:	2300      	movs	r3, #0
}
 8018772:	4618      	mov	r0, r3
 8018774:	3728      	adds	r7, #40	@ 0x28
 8018776:	46bd      	mov	sp, r7
 8018778:	bdb0      	pop	{r4, r5, r7, pc}
 801877a:	bf00      	nop

0801877c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801877c:	b580      	push	{r7, lr}
 801877e:	b082      	sub	sp, #8
 8018780:	af00      	add	r7, sp, #0
 8018782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	2b00      	cmp	r3, #0
 8018788:	d106      	bne.n	8018798 <tcp_output_segment_busy+0x1c>
 801878a:	4b09      	ldr	r3, [pc, #36]	@ (80187b0 <tcp_output_segment_busy+0x34>)
 801878c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8018790:	4908      	ldr	r1, [pc, #32]	@ (80187b4 <tcp_output_segment_busy+0x38>)
 8018792:	4809      	ldr	r0, [pc, #36]	@ (80187b8 <tcp_output_segment_busy+0x3c>)
 8018794:	f004 fdea 	bl	801d36c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	685b      	ldr	r3, [r3, #4]
 801879c:	7b9b      	ldrb	r3, [r3, #14]
 801879e:	2b01      	cmp	r3, #1
 80187a0:	d001      	beq.n	80187a6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80187a2:	2301      	movs	r3, #1
 80187a4:	e000      	b.n	80187a8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80187a6:	2300      	movs	r3, #0
}
 80187a8:	4618      	mov	r0, r3
 80187aa:	3708      	adds	r7, #8
 80187ac:	46bd      	mov	sp, r7
 80187ae:	bd80      	pop	{r7, pc}
 80187b0:	08020894 	.word	0x08020894
 80187b4:	08020e30 	.word	0x08020e30
 80187b8:	080208e8 	.word	0x080208e8

080187bc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80187bc:	b5b0      	push	{r4, r5, r7, lr}
 80187be:	b08c      	sub	sp, #48	@ 0x30
 80187c0:	af04      	add	r7, sp, #16
 80187c2:	60f8      	str	r0, [r7, #12]
 80187c4:	60b9      	str	r1, [r7, #8]
 80187c6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d106      	bne.n	80187dc <tcp_output_segment+0x20>
 80187ce:	4b64      	ldr	r3, [pc, #400]	@ (8018960 <tcp_output_segment+0x1a4>)
 80187d0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80187d4:	4963      	ldr	r1, [pc, #396]	@ (8018964 <tcp_output_segment+0x1a8>)
 80187d6:	4864      	ldr	r0, [pc, #400]	@ (8018968 <tcp_output_segment+0x1ac>)
 80187d8:	f004 fdc8 	bl	801d36c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80187dc:	68bb      	ldr	r3, [r7, #8]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d106      	bne.n	80187f0 <tcp_output_segment+0x34>
 80187e2:	4b5f      	ldr	r3, [pc, #380]	@ (8018960 <tcp_output_segment+0x1a4>)
 80187e4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80187e8:	4960      	ldr	r1, [pc, #384]	@ (801896c <tcp_output_segment+0x1b0>)
 80187ea:	485f      	ldr	r0, [pc, #380]	@ (8018968 <tcp_output_segment+0x1ac>)
 80187ec:	f004 fdbe 	bl	801d36c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d106      	bne.n	8018804 <tcp_output_segment+0x48>
 80187f6:	4b5a      	ldr	r3, [pc, #360]	@ (8018960 <tcp_output_segment+0x1a4>)
 80187f8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80187fc:	495c      	ldr	r1, [pc, #368]	@ (8018970 <tcp_output_segment+0x1b4>)
 80187fe:	485a      	ldr	r0, [pc, #360]	@ (8018968 <tcp_output_segment+0x1ac>)
 8018800:	f004 fdb4 	bl	801d36c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8018804:	68f8      	ldr	r0, [r7, #12]
 8018806:	f7ff ffb9 	bl	801877c <tcp_output_segment_busy>
 801880a:	4603      	mov	r3, r0
 801880c:	2b00      	cmp	r3, #0
 801880e:	d001      	beq.n	8018814 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8018810:	2300      	movs	r3, #0
 8018812:	e0a1      	b.n	8018958 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018814:	68bb      	ldr	r3, [r7, #8]
 8018816:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	68dc      	ldr	r4, [r3, #12]
 801881c:	4610      	mov	r0, r2
 801881e:	f7f8 fe3a 	bl	8011496 <lwip_htonl>
 8018822:	4603      	mov	r3, r0
 8018824:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018826:	68bb      	ldr	r3, [r7, #8]
 8018828:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801882a:	68fb      	ldr	r3, [r7, #12]
 801882c:	68dc      	ldr	r4, [r3, #12]
 801882e:	4610      	mov	r0, r2
 8018830:	f7f8 fe1c 	bl	801146c <lwip_htons>
 8018834:	4603      	mov	r3, r0
 8018836:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018838:	68bb      	ldr	r3, [r7, #8]
 801883a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801883c:	68ba      	ldr	r2, [r7, #8]
 801883e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8018840:	441a      	add	r2, r3
 8018842:	68bb      	ldr	r3, [r7, #8]
 8018844:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	68db      	ldr	r3, [r3, #12]
 801884a:	3314      	adds	r3, #20
 801884c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	7a9b      	ldrb	r3, [r3, #10]
 8018852:	f003 0301 	and.w	r3, r3, #1
 8018856:	2b00      	cmp	r3, #0
 8018858:	d015      	beq.n	8018886 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801885a:	68bb      	ldr	r3, [r7, #8]
 801885c:	3304      	adds	r3, #4
 801885e:	461a      	mov	r2, r3
 8018860:	6879      	ldr	r1, [r7, #4]
 8018862:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8018866:	f7fc fa39 	bl	8014cdc <tcp_eff_send_mss_netif>
 801886a:	4603      	mov	r3, r0
 801886c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801886e:	8b7b      	ldrh	r3, [r7, #26]
 8018870:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8018874:	4618      	mov	r0, r3
 8018876:	f7f8 fe0e 	bl	8011496 <lwip_htonl>
 801887a:	4602      	mov	r2, r0
 801887c:	69fb      	ldr	r3, [r7, #28]
 801887e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8018880:	69fb      	ldr	r3, [r7, #28]
 8018882:	3304      	adds	r3, #4
 8018884:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8018886:	68bb      	ldr	r3, [r7, #8]
 8018888:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801888c:	2b00      	cmp	r3, #0
 801888e:	da02      	bge.n	8018896 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8018890:	68bb      	ldr	r3, [r7, #8]
 8018892:	2200      	movs	r2, #0
 8018894:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8018896:	68bb      	ldr	r3, [r7, #8]
 8018898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801889a:	2b00      	cmp	r3, #0
 801889c:	d10c      	bne.n	80188b8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801889e:	4b35      	ldr	r3, [pc, #212]	@ (8018974 <tcp_output_segment+0x1b8>)
 80188a0:	681a      	ldr	r2, [r3, #0]
 80188a2:	68bb      	ldr	r3, [r7, #8]
 80188a4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	68db      	ldr	r3, [r3, #12]
 80188aa:	685b      	ldr	r3, [r3, #4]
 80188ac:	4618      	mov	r0, r3
 80188ae:	f7f8 fdf2 	bl	8011496 <lwip_htonl>
 80188b2:	4602      	mov	r2, r0
 80188b4:	68bb      	ldr	r3, [r7, #8]
 80188b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	68da      	ldr	r2, [r3, #12]
 80188bc:	68fb      	ldr	r3, [r7, #12]
 80188be:	685b      	ldr	r3, [r3, #4]
 80188c0:	685b      	ldr	r3, [r3, #4]
 80188c2:	1ad3      	subs	r3, r2, r3
 80188c4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	685b      	ldr	r3, [r3, #4]
 80188ca:	8959      	ldrh	r1, [r3, #10]
 80188cc:	68fb      	ldr	r3, [r7, #12]
 80188ce:	685b      	ldr	r3, [r3, #4]
 80188d0:	8b3a      	ldrh	r2, [r7, #24]
 80188d2:	1a8a      	subs	r2, r1, r2
 80188d4:	b292      	uxth	r2, r2
 80188d6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80188d8:	68fb      	ldr	r3, [r7, #12]
 80188da:	685b      	ldr	r3, [r3, #4]
 80188dc:	8919      	ldrh	r1, [r3, #8]
 80188de:	68fb      	ldr	r3, [r7, #12]
 80188e0:	685b      	ldr	r3, [r3, #4]
 80188e2:	8b3a      	ldrh	r2, [r7, #24]
 80188e4:	1a8a      	subs	r2, r1, r2
 80188e6:	b292      	uxth	r2, r2
 80188e8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	685b      	ldr	r3, [r3, #4]
 80188ee:	68fa      	ldr	r2, [r7, #12]
 80188f0:	68d2      	ldr	r2, [r2, #12]
 80188f2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	68db      	ldr	r3, [r3, #12]
 80188f8:	2200      	movs	r2, #0
 80188fa:	741a      	strb	r2, [r3, #16]
 80188fc:	2200      	movs	r2, #0
 80188fe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	68da      	ldr	r2, [r3, #12]
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	7a9b      	ldrb	r3, [r3, #10]
 8018908:	f003 0301 	and.w	r3, r3, #1
 801890c:	2b00      	cmp	r3, #0
 801890e:	d001      	beq.n	8018914 <tcp_output_segment+0x158>
 8018910:	2318      	movs	r3, #24
 8018912:	e000      	b.n	8018916 <tcp_output_segment+0x15a>
 8018914:	2314      	movs	r3, #20
 8018916:	4413      	add	r3, r2
 8018918:	69fa      	ldr	r2, [r7, #28]
 801891a:	429a      	cmp	r2, r3
 801891c:	d006      	beq.n	801892c <tcp_output_segment+0x170>
 801891e:	4b10      	ldr	r3, [pc, #64]	@ (8018960 <tcp_output_segment+0x1a4>)
 8018920:	f240 621c 	movw	r2, #1564	@ 0x61c
 8018924:	4914      	ldr	r1, [pc, #80]	@ (8018978 <tcp_output_segment+0x1bc>)
 8018926:	4810      	ldr	r0, [pc, #64]	@ (8018968 <tcp_output_segment+0x1ac>)
 8018928:	f004 fd20 	bl	801d36c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	6858      	ldr	r0, [r3, #4]
 8018930:	68b9      	ldr	r1, [r7, #8]
 8018932:	68bb      	ldr	r3, [r7, #8]
 8018934:	1d1c      	adds	r4, r3, #4
 8018936:	68bb      	ldr	r3, [r7, #8]
 8018938:	7add      	ldrb	r5, [r3, #11]
 801893a:	68bb      	ldr	r3, [r7, #8]
 801893c:	7a9b      	ldrb	r3, [r3, #10]
 801893e:	687a      	ldr	r2, [r7, #4]
 8018940:	9202      	str	r2, [sp, #8]
 8018942:	2206      	movs	r2, #6
 8018944:	9201      	str	r2, [sp, #4]
 8018946:	9300      	str	r3, [sp, #0]
 8018948:	462b      	mov	r3, r5
 801894a:	4622      	mov	r2, r4
 801894c:	f002 fbaa 	bl	801b0a4 <ip4_output_if>
 8018950:	4603      	mov	r3, r0
 8018952:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8018954:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018958:	4618      	mov	r0, r3
 801895a:	3720      	adds	r7, #32
 801895c:	46bd      	mov	sp, r7
 801895e:	bdb0      	pop	{r4, r5, r7, pc}
 8018960:	08020894 	.word	0x08020894
 8018964:	08020e58 	.word	0x08020e58
 8018968:	080208e8 	.word	0x080208e8
 801896c:	08020e78 	.word	0x08020e78
 8018970:	08020e98 	.word	0x08020e98
 8018974:	2000e45c 	.word	0x2000e45c
 8018978:	08020ebc 	.word	0x08020ebc

0801897c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801897c:	b5b0      	push	{r4, r5, r7, lr}
 801897e:	b084      	sub	sp, #16
 8018980:	af00      	add	r7, sp, #0
 8018982:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	2b00      	cmp	r3, #0
 8018988:	d106      	bne.n	8018998 <tcp_rexmit_rto_prepare+0x1c>
 801898a:	4b31      	ldr	r3, [pc, #196]	@ (8018a50 <tcp_rexmit_rto_prepare+0xd4>)
 801898c:	f240 6263 	movw	r2, #1635	@ 0x663
 8018990:	4930      	ldr	r1, [pc, #192]	@ (8018a54 <tcp_rexmit_rto_prepare+0xd8>)
 8018992:	4831      	ldr	r0, [pc, #196]	@ (8018a58 <tcp_rexmit_rto_prepare+0xdc>)
 8018994:	f004 fcea 	bl	801d36c <iprintf>

  if (pcb->unacked == NULL) {
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801899c:	2b00      	cmp	r3, #0
 801899e:	d102      	bne.n	80189a6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80189a0:	f06f 0305 	mvn.w	r3, #5
 80189a4:	e050      	b.n	8018a48 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80189aa:	60fb      	str	r3, [r7, #12]
 80189ac:	e00b      	b.n	80189c6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80189ae:	68f8      	ldr	r0, [r7, #12]
 80189b0:	f7ff fee4 	bl	801877c <tcp_output_segment_busy>
 80189b4:	4603      	mov	r3, r0
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d002      	beq.n	80189c0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80189ba:	f06f 0305 	mvn.w	r3, #5
 80189be:	e043      	b.n	8018a48 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80189c0:	68fb      	ldr	r3, [r7, #12]
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	60fb      	str	r3, [r7, #12]
 80189c6:	68fb      	ldr	r3, [r7, #12]
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d1ef      	bne.n	80189ae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80189ce:	68f8      	ldr	r0, [r7, #12]
 80189d0:	f7ff fed4 	bl	801877c <tcp_output_segment_busy>
 80189d4:	4603      	mov	r3, r0
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d002      	beq.n	80189e0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80189da:	f06f 0305 	mvn.w	r3, #5
 80189de:	e033      	b.n	8018a48 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	2200      	movs	r2, #0
 80189f4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	8b5b      	ldrh	r3, [r3, #26]
 80189fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80189fe:	b29a      	uxth	r2, r3
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018a04:	68fb      	ldr	r3, [r7, #12]
 8018a06:	68db      	ldr	r3, [r3, #12]
 8018a08:	685b      	ldr	r3, [r3, #4]
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	f7f8 fd43 	bl	8011496 <lwip_htonl>
 8018a10:	4604      	mov	r4, r0
 8018a12:	68fb      	ldr	r3, [r7, #12]
 8018a14:	891b      	ldrh	r3, [r3, #8]
 8018a16:	461d      	mov	r5, r3
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	68db      	ldr	r3, [r3, #12]
 8018a1c:	899b      	ldrh	r3, [r3, #12]
 8018a1e:	b29b      	uxth	r3, r3
 8018a20:	4618      	mov	r0, r3
 8018a22:	f7f8 fd23 	bl	801146c <lwip_htons>
 8018a26:	4603      	mov	r3, r0
 8018a28:	b2db      	uxtb	r3, r3
 8018a2a:	f003 0303 	and.w	r3, r3, #3
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d001      	beq.n	8018a36 <tcp_rexmit_rto_prepare+0xba>
 8018a32:	2301      	movs	r3, #1
 8018a34:	e000      	b.n	8018a38 <tcp_rexmit_rto_prepare+0xbc>
 8018a36:	2300      	movs	r3, #0
 8018a38:	442b      	add	r3, r5
 8018a3a:	18e2      	adds	r2, r4, r3
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	2200      	movs	r2, #0
 8018a44:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8018a46:	2300      	movs	r3, #0
}
 8018a48:	4618      	mov	r0, r3
 8018a4a:	3710      	adds	r7, #16
 8018a4c:	46bd      	mov	sp, r7
 8018a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8018a50:	08020894 	.word	0x08020894
 8018a54:	08020ed0 	.word	0x08020ed0
 8018a58:	080208e8 	.word	0x080208e8

08018a5c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018a5c:	b580      	push	{r7, lr}
 8018a5e:	b082      	sub	sp, #8
 8018a60:	af00      	add	r7, sp, #0
 8018a62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d106      	bne.n	8018a78 <tcp_rexmit_rto_commit+0x1c>
 8018a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8018aa0 <tcp_rexmit_rto_commit+0x44>)
 8018a6c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8018a70:	490c      	ldr	r1, [pc, #48]	@ (8018aa4 <tcp_rexmit_rto_commit+0x48>)
 8018a72:	480d      	ldr	r0, [pc, #52]	@ (8018aa8 <tcp_rexmit_rto_commit+0x4c>)
 8018a74:	f004 fc7a 	bl	801d36c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018a7e:	2bff      	cmp	r3, #255	@ 0xff
 8018a80:	d007      	beq.n	8018a92 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018a88:	3301      	adds	r3, #1
 8018a8a:	b2da      	uxtb	r2, r3
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8018a92:	6878      	ldr	r0, [r7, #4]
 8018a94:	f7ff fc7e 	bl	8018394 <tcp_output>
}
 8018a98:	bf00      	nop
 8018a9a:	3708      	adds	r7, #8
 8018a9c:	46bd      	mov	sp, r7
 8018a9e:	bd80      	pop	{r7, pc}
 8018aa0:	08020894 	.word	0x08020894
 8018aa4:	08020ef4 	.word	0x08020ef4
 8018aa8:	080208e8 	.word	0x080208e8

08018aac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018aac:	b580      	push	{r7, lr}
 8018aae:	b082      	sub	sp, #8
 8018ab0:	af00      	add	r7, sp, #0
 8018ab2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d106      	bne.n	8018ac8 <tcp_rexmit_rto+0x1c>
 8018aba:	4b0a      	ldr	r3, [pc, #40]	@ (8018ae4 <tcp_rexmit_rto+0x38>)
 8018abc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8018ac0:	4909      	ldr	r1, [pc, #36]	@ (8018ae8 <tcp_rexmit_rto+0x3c>)
 8018ac2:	480a      	ldr	r0, [pc, #40]	@ (8018aec <tcp_rexmit_rto+0x40>)
 8018ac4:	f004 fc52 	bl	801d36c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8018ac8:	6878      	ldr	r0, [r7, #4]
 8018aca:	f7ff ff57 	bl	801897c <tcp_rexmit_rto_prepare>
 8018ace:	4603      	mov	r3, r0
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d102      	bne.n	8018ada <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018ad4:	6878      	ldr	r0, [r7, #4]
 8018ad6:	f7ff ffc1 	bl	8018a5c <tcp_rexmit_rto_commit>
  }
}
 8018ada:	bf00      	nop
 8018adc:	3708      	adds	r7, #8
 8018ade:	46bd      	mov	sp, r7
 8018ae0:	bd80      	pop	{r7, pc}
 8018ae2:	bf00      	nop
 8018ae4:	08020894 	.word	0x08020894
 8018ae8:	08020f18 	.word	0x08020f18
 8018aec:	080208e8 	.word	0x080208e8

08018af0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018af0:	b590      	push	{r4, r7, lr}
 8018af2:	b085      	sub	sp, #20
 8018af4:	af00      	add	r7, sp, #0
 8018af6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d106      	bne.n	8018b0c <tcp_rexmit+0x1c>
 8018afe:	4b2f      	ldr	r3, [pc, #188]	@ (8018bbc <tcp_rexmit+0xcc>)
 8018b00:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8018b04:	492e      	ldr	r1, [pc, #184]	@ (8018bc0 <tcp_rexmit+0xd0>)
 8018b06:	482f      	ldr	r0, [pc, #188]	@ (8018bc4 <tcp_rexmit+0xd4>)
 8018b08:	f004 fc30 	bl	801d36c <iprintf>

  if (pcb->unacked == NULL) {
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d102      	bne.n	8018b1a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018b14:	f06f 0305 	mvn.w	r3, #5
 8018b18:	e04c      	b.n	8018bb4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018b1e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018b20:	68b8      	ldr	r0, [r7, #8]
 8018b22:	f7ff fe2b 	bl	801877c <tcp_output_segment_busy>
 8018b26:	4603      	mov	r3, r0
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d002      	beq.n	8018b32 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018b2c:	f06f 0305 	mvn.w	r3, #5
 8018b30:	e040      	b.n	8018bb4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018b32:	68bb      	ldr	r3, [r7, #8]
 8018b34:	681a      	ldr	r2, [r3, #0]
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	336c      	adds	r3, #108	@ 0x6c
 8018b3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018b40:	e002      	b.n	8018b48 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d011      	beq.n	8018b74 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	68db      	ldr	r3, [r3, #12]
 8018b56:	685b      	ldr	r3, [r3, #4]
 8018b58:	4618      	mov	r0, r3
 8018b5a:	f7f8 fc9c 	bl	8011496 <lwip_htonl>
 8018b5e:	4604      	mov	r4, r0
 8018b60:	68bb      	ldr	r3, [r7, #8]
 8018b62:	68db      	ldr	r3, [r3, #12]
 8018b64:	685b      	ldr	r3, [r3, #4]
 8018b66:	4618      	mov	r0, r3
 8018b68:	f7f8 fc95 	bl	8011496 <lwip_htonl>
 8018b6c:	4603      	mov	r3, r0
 8018b6e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	dbe6      	blt.n	8018b42 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018b74:	68fb      	ldr	r3, [r7, #12]
 8018b76:	681a      	ldr	r2, [r3, #0]
 8018b78:	68bb      	ldr	r3, [r7, #8]
 8018b7a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	68ba      	ldr	r2, [r7, #8]
 8018b80:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018b82:	68bb      	ldr	r3, [r7, #8]
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d103      	bne.n	8018b92 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	2200      	movs	r2, #0
 8018b8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018b98:	2bff      	cmp	r3, #255	@ 0xff
 8018b9a:	d007      	beq.n	8018bac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018ba2:	3301      	adds	r3, #1
 8018ba4:	b2da      	uxtb	r2, r3
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	2200      	movs	r2, #0
 8018bb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018bb2:	2300      	movs	r3, #0
}
 8018bb4:	4618      	mov	r0, r3
 8018bb6:	3714      	adds	r7, #20
 8018bb8:	46bd      	mov	sp, r7
 8018bba:	bd90      	pop	{r4, r7, pc}
 8018bbc:	08020894 	.word	0x08020894
 8018bc0:	08020f34 	.word	0x08020f34
 8018bc4:	080208e8 	.word	0x080208e8

08018bc8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8018bc8:	b580      	push	{r7, lr}
 8018bca:	b082      	sub	sp, #8
 8018bcc:	af00      	add	r7, sp, #0
 8018bce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d106      	bne.n	8018be4 <tcp_rexmit_fast+0x1c>
 8018bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8018c80 <tcp_rexmit_fast+0xb8>)
 8018bd8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8018bdc:	4929      	ldr	r1, [pc, #164]	@ (8018c84 <tcp_rexmit_fast+0xbc>)
 8018bde:	482a      	ldr	r0, [pc, #168]	@ (8018c88 <tcp_rexmit_fast+0xc0>)
 8018be0:	f004 fbc4 	bl	801d36c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d045      	beq.n	8018c78 <tcp_rexmit_fast+0xb0>
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	8b5b      	ldrh	r3, [r3, #26]
 8018bf0:	f003 0304 	and.w	r3, r3, #4
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d13f      	bne.n	8018c78 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8018bf8:	6878      	ldr	r0, [r7, #4]
 8018bfa:	f7ff ff79 	bl	8018af0 <tcp_rexmit>
 8018bfe:	4603      	mov	r3, r0
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d139      	bne.n	8018c78 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018c10:	4293      	cmp	r3, r2
 8018c12:	bf28      	it	cs
 8018c14:	4613      	movcs	r3, r2
 8018c16:	b29b      	uxth	r3, r3
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	da00      	bge.n	8018c1e <tcp_rexmit_fast+0x56>
 8018c1c:	3301      	adds	r3, #1
 8018c1e:	105b      	asrs	r3, r3, #1
 8018c20:	b29a      	uxth	r2, r3
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8018c2e:	461a      	mov	r2, r3
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018c34:	005b      	lsls	r3, r3, #1
 8018c36:	429a      	cmp	r2, r3
 8018c38:	d206      	bcs.n	8018c48 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018c3e:	005b      	lsls	r3, r3, #1
 8018c40:	b29a      	uxth	r2, r3
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018c52:	4619      	mov	r1, r3
 8018c54:	0049      	lsls	r1, r1, #1
 8018c56:	440b      	add	r3, r1
 8018c58:	b29b      	uxth	r3, r3
 8018c5a:	4413      	add	r3, r2
 8018c5c:	b29a      	uxth	r2, r3
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	8b5b      	ldrh	r3, [r3, #26]
 8018c68:	f043 0304 	orr.w	r3, r3, #4
 8018c6c:	b29a      	uxth	r2, r3
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	2200      	movs	r2, #0
 8018c76:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8018c78:	bf00      	nop
 8018c7a:	3708      	adds	r7, #8
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	bd80      	pop	{r7, pc}
 8018c80:	08020894 	.word	0x08020894
 8018c84:	08020f4c 	.word	0x08020f4c
 8018c88:	080208e8 	.word	0x080208e8

08018c8c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8018c8c:	b580      	push	{r7, lr}
 8018c8e:	b086      	sub	sp, #24
 8018c90:	af00      	add	r7, sp, #0
 8018c92:	60f8      	str	r0, [r7, #12]
 8018c94:	607b      	str	r3, [r7, #4]
 8018c96:	460b      	mov	r3, r1
 8018c98:	817b      	strh	r3, [r7, #10]
 8018c9a:	4613      	mov	r3, r2
 8018c9c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018c9e:	897a      	ldrh	r2, [r7, #10]
 8018ca0:	893b      	ldrh	r3, [r7, #8]
 8018ca2:	4413      	add	r3, r2
 8018ca4:	b29b      	uxth	r3, r3
 8018ca6:	3314      	adds	r3, #20
 8018ca8:	b29b      	uxth	r3, r3
 8018caa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018cae:	4619      	mov	r1, r3
 8018cb0:	2022      	movs	r0, #34	@ 0x22
 8018cb2:	f7f9 fce5 	bl	8012680 <pbuf_alloc>
 8018cb6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018cb8:	697b      	ldr	r3, [r7, #20]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d04d      	beq.n	8018d5a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018cbe:	897b      	ldrh	r3, [r7, #10]
 8018cc0:	3313      	adds	r3, #19
 8018cc2:	697a      	ldr	r2, [r7, #20]
 8018cc4:	8952      	ldrh	r2, [r2, #10]
 8018cc6:	4293      	cmp	r3, r2
 8018cc8:	db06      	blt.n	8018cd8 <tcp_output_alloc_header_common+0x4c>
 8018cca:	4b26      	ldr	r3, [pc, #152]	@ (8018d64 <tcp_output_alloc_header_common+0xd8>)
 8018ccc:	f240 7223 	movw	r2, #1827	@ 0x723
 8018cd0:	4925      	ldr	r1, [pc, #148]	@ (8018d68 <tcp_output_alloc_header_common+0xdc>)
 8018cd2:	4826      	ldr	r0, [pc, #152]	@ (8018d6c <tcp_output_alloc_header_common+0xe0>)
 8018cd4:	f004 fb4a 	bl	801d36c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018cd8:	697b      	ldr	r3, [r7, #20]
 8018cda:	685b      	ldr	r3, [r3, #4]
 8018cdc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8018cde:	8c3b      	ldrh	r3, [r7, #32]
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f7f8 fbc3 	bl	801146c <lwip_htons>
 8018ce6:	4603      	mov	r3, r0
 8018ce8:	461a      	mov	r2, r3
 8018cea:	693b      	ldr	r3, [r7, #16]
 8018cec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8018cee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018cf0:	4618      	mov	r0, r3
 8018cf2:	f7f8 fbbb 	bl	801146c <lwip_htons>
 8018cf6:	4603      	mov	r3, r0
 8018cf8:	461a      	mov	r2, r3
 8018cfa:	693b      	ldr	r3, [r7, #16]
 8018cfc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8018cfe:	693b      	ldr	r3, [r7, #16]
 8018d00:	687a      	ldr	r2, [r7, #4]
 8018d02:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018d04:	68f8      	ldr	r0, [r7, #12]
 8018d06:	f7f8 fbc6 	bl	8011496 <lwip_htonl>
 8018d0a:	4602      	mov	r2, r0
 8018d0c:	693b      	ldr	r3, [r7, #16]
 8018d0e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018d10:	897b      	ldrh	r3, [r7, #10]
 8018d12:	089b      	lsrs	r3, r3, #2
 8018d14:	b29b      	uxth	r3, r3
 8018d16:	3305      	adds	r3, #5
 8018d18:	b29b      	uxth	r3, r3
 8018d1a:	031b      	lsls	r3, r3, #12
 8018d1c:	b29a      	uxth	r2, r3
 8018d1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018d22:	b29b      	uxth	r3, r3
 8018d24:	4313      	orrs	r3, r2
 8018d26:	b29b      	uxth	r3, r3
 8018d28:	4618      	mov	r0, r3
 8018d2a:	f7f8 fb9f 	bl	801146c <lwip_htons>
 8018d2e:	4603      	mov	r3, r0
 8018d30:	461a      	mov	r2, r3
 8018d32:	693b      	ldr	r3, [r7, #16]
 8018d34:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8018d36:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8018d38:	4618      	mov	r0, r3
 8018d3a:	f7f8 fb97 	bl	801146c <lwip_htons>
 8018d3e:	4603      	mov	r3, r0
 8018d40:	461a      	mov	r2, r3
 8018d42:	693b      	ldr	r3, [r7, #16]
 8018d44:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018d46:	693b      	ldr	r3, [r7, #16]
 8018d48:	2200      	movs	r2, #0
 8018d4a:	741a      	strb	r2, [r3, #16]
 8018d4c:	2200      	movs	r2, #0
 8018d4e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018d50:	693b      	ldr	r3, [r7, #16]
 8018d52:	2200      	movs	r2, #0
 8018d54:	749a      	strb	r2, [r3, #18]
 8018d56:	2200      	movs	r2, #0
 8018d58:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8018d5a:	697b      	ldr	r3, [r7, #20]
}
 8018d5c:	4618      	mov	r0, r3
 8018d5e:	3718      	adds	r7, #24
 8018d60:	46bd      	mov	sp, r7
 8018d62:	bd80      	pop	{r7, pc}
 8018d64:	08020894 	.word	0x08020894
 8018d68:	08020f6c 	.word	0x08020f6c
 8018d6c:	080208e8 	.word	0x080208e8

08018d70 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018d70:	b5b0      	push	{r4, r5, r7, lr}
 8018d72:	b08a      	sub	sp, #40	@ 0x28
 8018d74:	af04      	add	r7, sp, #16
 8018d76:	60f8      	str	r0, [r7, #12]
 8018d78:	607b      	str	r3, [r7, #4]
 8018d7a:	460b      	mov	r3, r1
 8018d7c:	817b      	strh	r3, [r7, #10]
 8018d7e:	4613      	mov	r3, r2
 8018d80:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	d106      	bne.n	8018d96 <tcp_output_alloc_header+0x26>
 8018d88:	4b15      	ldr	r3, [pc, #84]	@ (8018de0 <tcp_output_alloc_header+0x70>)
 8018d8a:	f240 7242 	movw	r2, #1858	@ 0x742
 8018d8e:	4915      	ldr	r1, [pc, #84]	@ (8018de4 <tcp_output_alloc_header+0x74>)
 8018d90:	4815      	ldr	r0, [pc, #84]	@ (8018de8 <tcp_output_alloc_header+0x78>)
 8018d92:	f004 faeb 	bl	801d36c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018d96:	68fb      	ldr	r3, [r7, #12]
 8018d98:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	8adb      	ldrh	r3, [r3, #22]
 8018d9e:	68fa      	ldr	r2, [r7, #12]
 8018da0:	8b12      	ldrh	r2, [r2, #24]
 8018da2:	68f9      	ldr	r1, [r7, #12]
 8018da4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8018da6:	893d      	ldrh	r5, [r7, #8]
 8018da8:	897c      	ldrh	r4, [r7, #10]
 8018daa:	9103      	str	r1, [sp, #12]
 8018dac:	2110      	movs	r1, #16
 8018dae:	9102      	str	r1, [sp, #8]
 8018db0:	9201      	str	r2, [sp, #4]
 8018db2:	9300      	str	r3, [sp, #0]
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	462a      	mov	r2, r5
 8018db8:	4621      	mov	r1, r4
 8018dba:	f7ff ff67 	bl	8018c8c <tcp_output_alloc_header_common>
 8018dbe:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018dc0:	697b      	ldr	r3, [r7, #20]
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d006      	beq.n	8018dd4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018dc6:	68fb      	ldr	r3, [r7, #12]
 8018dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018dca:	68fa      	ldr	r2, [r7, #12]
 8018dcc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8018dce:	441a      	add	r2, r3
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8018dd4:	697b      	ldr	r3, [r7, #20]
}
 8018dd6:	4618      	mov	r0, r3
 8018dd8:	3718      	adds	r7, #24
 8018dda:	46bd      	mov	sp, r7
 8018ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8018dde:	bf00      	nop
 8018de0:	08020894 	.word	0x08020894
 8018de4:	08020f9c 	.word	0x08020f9c
 8018de8:	080208e8 	.word	0x080208e8

08018dec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8018dec:	b580      	push	{r7, lr}
 8018dee:	b088      	sub	sp, #32
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	60f8      	str	r0, [r7, #12]
 8018df4:	60b9      	str	r1, [r7, #8]
 8018df6:	4611      	mov	r1, r2
 8018df8:	461a      	mov	r2, r3
 8018dfa:	460b      	mov	r3, r1
 8018dfc:	71fb      	strb	r3, [r7, #7]
 8018dfe:	4613      	mov	r3, r2
 8018e00:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018e02:	2300      	movs	r3, #0
 8018e04:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8018e06:	68bb      	ldr	r3, [r7, #8]
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d106      	bne.n	8018e1a <tcp_output_fill_options+0x2e>
 8018e0c:	4b12      	ldr	r3, [pc, #72]	@ (8018e58 <tcp_output_fill_options+0x6c>)
 8018e0e:	f240 7256 	movw	r2, #1878	@ 0x756
 8018e12:	4912      	ldr	r1, [pc, #72]	@ (8018e5c <tcp_output_fill_options+0x70>)
 8018e14:	4812      	ldr	r0, [pc, #72]	@ (8018e60 <tcp_output_fill_options+0x74>)
 8018e16:	f004 faa9 	bl	801d36c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8018e1a:	68bb      	ldr	r3, [r7, #8]
 8018e1c:	685b      	ldr	r3, [r3, #4]
 8018e1e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018e20:	69bb      	ldr	r3, [r7, #24]
 8018e22:	3314      	adds	r3, #20
 8018e24:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8018e26:	8bfb      	ldrh	r3, [r7, #30]
 8018e28:	009b      	lsls	r3, r3, #2
 8018e2a:	461a      	mov	r2, r3
 8018e2c:	79fb      	ldrb	r3, [r7, #7]
 8018e2e:	009b      	lsls	r3, r3, #2
 8018e30:	f003 0304 	and.w	r3, r3, #4
 8018e34:	4413      	add	r3, r2
 8018e36:	3314      	adds	r3, #20
 8018e38:	69ba      	ldr	r2, [r7, #24]
 8018e3a:	4413      	add	r3, r2
 8018e3c:	697a      	ldr	r2, [r7, #20]
 8018e3e:	429a      	cmp	r2, r3
 8018e40:	d006      	beq.n	8018e50 <tcp_output_fill_options+0x64>
 8018e42:	4b05      	ldr	r3, [pc, #20]	@ (8018e58 <tcp_output_fill_options+0x6c>)
 8018e44:	f240 7275 	movw	r2, #1909	@ 0x775
 8018e48:	4906      	ldr	r1, [pc, #24]	@ (8018e64 <tcp_output_fill_options+0x78>)
 8018e4a:	4805      	ldr	r0, [pc, #20]	@ (8018e60 <tcp_output_fill_options+0x74>)
 8018e4c:	f004 fa8e 	bl	801d36c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018e50:	bf00      	nop
 8018e52:	3720      	adds	r7, #32
 8018e54:	46bd      	mov	sp, r7
 8018e56:	bd80      	pop	{r7, pc}
 8018e58:	08020894 	.word	0x08020894
 8018e5c:	08020fc4 	.word	0x08020fc4
 8018e60:	080208e8 	.word	0x080208e8
 8018e64:	08020ebc 	.word	0x08020ebc

08018e68 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	b08a      	sub	sp, #40	@ 0x28
 8018e6c:	af04      	add	r7, sp, #16
 8018e6e:	60f8      	str	r0, [r7, #12]
 8018e70:	60b9      	str	r1, [r7, #8]
 8018e72:	607a      	str	r2, [r7, #4]
 8018e74:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8018e76:	68bb      	ldr	r3, [r7, #8]
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d106      	bne.n	8018e8a <tcp_output_control_segment+0x22>
 8018e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8018ef0 <tcp_output_control_segment+0x88>)
 8018e7e:	f240 7287 	movw	r2, #1927	@ 0x787
 8018e82:	491c      	ldr	r1, [pc, #112]	@ (8018ef4 <tcp_output_control_segment+0x8c>)
 8018e84:	481c      	ldr	r0, [pc, #112]	@ (8018ef8 <tcp_output_control_segment+0x90>)
 8018e86:	f004 fa71 	bl	801d36c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8018e8a:	683a      	ldr	r2, [r7, #0]
 8018e8c:	6879      	ldr	r1, [r7, #4]
 8018e8e:	68f8      	ldr	r0, [r7, #12]
 8018e90:	f7fe faea 	bl	8017468 <tcp_route>
 8018e94:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8018e96:	693b      	ldr	r3, [r7, #16]
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d102      	bne.n	8018ea2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8018e9c:	23fc      	movs	r3, #252	@ 0xfc
 8018e9e:	75fb      	strb	r3, [r7, #23]
 8018ea0:	e01c      	b.n	8018edc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8018ea2:	68fb      	ldr	r3, [r7, #12]
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d006      	beq.n	8018eb6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	7adb      	ldrb	r3, [r3, #11]
 8018eac:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	7a9b      	ldrb	r3, [r3, #10]
 8018eb2:	757b      	strb	r3, [r7, #21]
 8018eb4:	e003      	b.n	8018ebe <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8018eb6:	23ff      	movs	r3, #255	@ 0xff
 8018eb8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8018eba:	2300      	movs	r3, #0
 8018ebc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8018ebe:	7dba      	ldrb	r2, [r7, #22]
 8018ec0:	693b      	ldr	r3, [r7, #16]
 8018ec2:	9302      	str	r3, [sp, #8]
 8018ec4:	2306      	movs	r3, #6
 8018ec6:	9301      	str	r3, [sp, #4]
 8018ec8:	7d7b      	ldrb	r3, [r7, #21]
 8018eca:	9300      	str	r3, [sp, #0]
 8018ecc:	4613      	mov	r3, r2
 8018ece:	683a      	ldr	r2, [r7, #0]
 8018ed0:	6879      	ldr	r1, [r7, #4]
 8018ed2:	68b8      	ldr	r0, [r7, #8]
 8018ed4:	f002 f8e6 	bl	801b0a4 <ip4_output_if>
 8018ed8:	4603      	mov	r3, r0
 8018eda:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8018edc:	68b8      	ldr	r0, [r7, #8]
 8018ede:	f7f9 feb3 	bl	8012c48 <pbuf_free>
  return err;
 8018ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	3718      	adds	r7, #24
 8018eea:	46bd      	mov	sp, r7
 8018eec:	bd80      	pop	{r7, pc}
 8018eee:	bf00      	nop
 8018ef0:	08020894 	.word	0x08020894
 8018ef4:	08020fec 	.word	0x08020fec
 8018ef8:	080208e8 	.word	0x080208e8

08018efc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8018efc:	b590      	push	{r4, r7, lr}
 8018efe:	b08b      	sub	sp, #44	@ 0x2c
 8018f00:	af04      	add	r7, sp, #16
 8018f02:	60f8      	str	r0, [r7, #12]
 8018f04:	60b9      	str	r1, [r7, #8]
 8018f06:	607a      	str	r2, [r7, #4]
 8018f08:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8018f0a:	683b      	ldr	r3, [r7, #0]
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d106      	bne.n	8018f1e <tcp_rst+0x22>
 8018f10:	4b1f      	ldr	r3, [pc, #124]	@ (8018f90 <tcp_rst+0x94>)
 8018f12:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8018f16:	491f      	ldr	r1, [pc, #124]	@ (8018f94 <tcp_rst+0x98>)
 8018f18:	481f      	ldr	r0, [pc, #124]	@ (8018f98 <tcp_rst+0x9c>)
 8018f1a:	f004 fa27 	bl	801d36c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8018f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d106      	bne.n	8018f32 <tcp_rst+0x36>
 8018f24:	4b1a      	ldr	r3, [pc, #104]	@ (8018f90 <tcp_rst+0x94>)
 8018f26:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8018f2a:	491c      	ldr	r1, [pc, #112]	@ (8018f9c <tcp_rst+0xa0>)
 8018f2c:	481a      	ldr	r0, [pc, #104]	@ (8018f98 <tcp_rst+0x9c>)
 8018f2e:	f004 fa1d 	bl	801d36c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018f32:	2300      	movs	r3, #0
 8018f34:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8018f36:	f246 0308 	movw	r3, #24584	@ 0x6008
 8018f3a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8018f3c:	7dfb      	ldrb	r3, [r7, #23]
 8018f3e:	b29c      	uxth	r4, r3
 8018f40:	68b8      	ldr	r0, [r7, #8]
 8018f42:	f7f8 faa8 	bl	8011496 <lwip_htonl>
 8018f46:	4602      	mov	r2, r0
 8018f48:	8abb      	ldrh	r3, [r7, #20]
 8018f4a:	9303      	str	r3, [sp, #12]
 8018f4c:	2314      	movs	r3, #20
 8018f4e:	9302      	str	r3, [sp, #8]
 8018f50:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8018f52:	9301      	str	r3, [sp, #4]
 8018f54:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8018f56:	9300      	str	r3, [sp, #0]
 8018f58:	4613      	mov	r3, r2
 8018f5a:	2200      	movs	r2, #0
 8018f5c:	4621      	mov	r1, r4
 8018f5e:	6878      	ldr	r0, [r7, #4]
 8018f60:	f7ff fe94 	bl	8018c8c <tcp_output_alloc_header_common>
 8018f64:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8018f66:	693b      	ldr	r3, [r7, #16]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d00c      	beq.n	8018f86 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018f6c:	7dfb      	ldrb	r3, [r7, #23]
 8018f6e:	2200      	movs	r2, #0
 8018f70:	6939      	ldr	r1, [r7, #16]
 8018f72:	68f8      	ldr	r0, [r7, #12]
 8018f74:	f7ff ff3a 	bl	8018dec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8018f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f7a:	683a      	ldr	r2, [r7, #0]
 8018f7c:	6939      	ldr	r1, [r7, #16]
 8018f7e:	68f8      	ldr	r0, [r7, #12]
 8018f80:	f7ff ff72 	bl	8018e68 <tcp_output_control_segment>
 8018f84:	e000      	b.n	8018f88 <tcp_rst+0x8c>
    return;
 8018f86:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8018f88:	371c      	adds	r7, #28
 8018f8a:	46bd      	mov	sp, r7
 8018f8c:	bd90      	pop	{r4, r7, pc}
 8018f8e:	bf00      	nop
 8018f90:	08020894 	.word	0x08020894
 8018f94:	08021018 	.word	0x08021018
 8018f98:	080208e8 	.word	0x080208e8
 8018f9c:	08021034 	.word	0x08021034

08018fa0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8018fa0:	b590      	push	{r4, r7, lr}
 8018fa2:	b087      	sub	sp, #28
 8018fa4:	af00      	add	r7, sp, #0
 8018fa6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8018fa8:	2300      	movs	r3, #0
 8018faa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8018fac:	2300      	movs	r3, #0
 8018fae:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d106      	bne.n	8018fc4 <tcp_send_empty_ack+0x24>
 8018fb6:	4b28      	ldr	r3, [pc, #160]	@ (8019058 <tcp_send_empty_ack+0xb8>)
 8018fb8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8018fbc:	4927      	ldr	r1, [pc, #156]	@ (801905c <tcp_send_empty_ack+0xbc>)
 8018fbe:	4828      	ldr	r0, [pc, #160]	@ (8019060 <tcp_send_empty_ack+0xc0>)
 8018fc0:	f004 f9d4 	bl	801d36c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018fc4:	7dfb      	ldrb	r3, [r7, #23]
 8018fc6:	009b      	lsls	r3, r3, #2
 8018fc8:	b2db      	uxtb	r3, r3
 8018fca:	f003 0304 	and.w	r3, r3, #4
 8018fce:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8018fd0:	7d7b      	ldrb	r3, [r7, #21]
 8018fd2:	b29c      	uxth	r4, r3
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018fd8:	4618      	mov	r0, r3
 8018fda:	f7f8 fa5c 	bl	8011496 <lwip_htonl>
 8018fde:	4603      	mov	r3, r0
 8018fe0:	2200      	movs	r2, #0
 8018fe2:	4621      	mov	r1, r4
 8018fe4:	6878      	ldr	r0, [r7, #4]
 8018fe6:	f7ff fec3 	bl	8018d70 <tcp_output_alloc_header>
 8018fea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018fec:	693b      	ldr	r3, [r7, #16]
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	d109      	bne.n	8019006 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	8b5b      	ldrh	r3, [r3, #26]
 8018ff6:	f043 0303 	orr.w	r3, r3, #3
 8018ffa:	b29a      	uxth	r2, r3
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8019000:	f06f 0301 	mvn.w	r3, #1
 8019004:	e023      	b.n	801904e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8019006:	7dbb      	ldrb	r3, [r7, #22]
 8019008:	7dfa      	ldrb	r2, [r7, #23]
 801900a:	6939      	ldr	r1, [r7, #16]
 801900c:	6878      	ldr	r0, [r7, #4]
 801900e:	f7ff feed 	bl	8018dec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019012:	687a      	ldr	r2, [r7, #4]
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	3304      	adds	r3, #4
 8019018:	6939      	ldr	r1, [r7, #16]
 801901a:	6878      	ldr	r0, [r7, #4]
 801901c:	f7ff ff24 	bl	8018e68 <tcp_output_control_segment>
 8019020:	4603      	mov	r3, r0
 8019022:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8019024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d007      	beq.n	801903c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	8b5b      	ldrh	r3, [r3, #26]
 8019030:	f043 0303 	orr.w	r3, r3, #3
 8019034:	b29a      	uxth	r2, r3
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	835a      	strh	r2, [r3, #26]
 801903a:	e006      	b.n	801904a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	8b5b      	ldrh	r3, [r3, #26]
 8019040:	f023 0303 	bic.w	r3, r3, #3
 8019044:	b29a      	uxth	r2, r3
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801904a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801904e:	4618      	mov	r0, r3
 8019050:	371c      	adds	r7, #28
 8019052:	46bd      	mov	sp, r7
 8019054:	bd90      	pop	{r4, r7, pc}
 8019056:	bf00      	nop
 8019058:	08020894 	.word	0x08020894
 801905c:	08021050 	.word	0x08021050
 8019060:	080208e8 	.word	0x080208e8

08019064 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8019064:	b590      	push	{r4, r7, lr}
 8019066:	b087      	sub	sp, #28
 8019068:	af00      	add	r7, sp, #0
 801906a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801906c:	2300      	movs	r3, #0
 801906e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	2b00      	cmp	r3, #0
 8019074:	d106      	bne.n	8019084 <tcp_keepalive+0x20>
 8019076:	4b18      	ldr	r3, [pc, #96]	@ (80190d8 <tcp_keepalive+0x74>)
 8019078:	f640 0224 	movw	r2, #2084	@ 0x824
 801907c:	4917      	ldr	r1, [pc, #92]	@ (80190dc <tcp_keepalive+0x78>)
 801907e:	4818      	ldr	r0, [pc, #96]	@ (80190e0 <tcp_keepalive+0x7c>)
 8019080:	f004 f974 	bl	801d36c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8019084:	7dfb      	ldrb	r3, [r7, #23]
 8019086:	b29c      	uxth	r4, r3
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801908c:	3b01      	subs	r3, #1
 801908e:	4618      	mov	r0, r3
 8019090:	f7f8 fa01 	bl	8011496 <lwip_htonl>
 8019094:	4603      	mov	r3, r0
 8019096:	2200      	movs	r2, #0
 8019098:	4621      	mov	r1, r4
 801909a:	6878      	ldr	r0, [r7, #4]
 801909c:	f7ff fe68 	bl	8018d70 <tcp_output_alloc_header>
 80190a0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80190a2:	693b      	ldr	r3, [r7, #16]
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d102      	bne.n	80190ae <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80190a8:	f04f 33ff 	mov.w	r3, #4294967295
 80190ac:	e010      	b.n	80190d0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80190ae:	7dfb      	ldrb	r3, [r7, #23]
 80190b0:	2200      	movs	r2, #0
 80190b2:	6939      	ldr	r1, [r7, #16]
 80190b4:	6878      	ldr	r0, [r7, #4]
 80190b6:	f7ff fe99 	bl	8018dec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80190ba:	687a      	ldr	r2, [r7, #4]
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	3304      	adds	r3, #4
 80190c0:	6939      	ldr	r1, [r7, #16]
 80190c2:	6878      	ldr	r0, [r7, #4]
 80190c4:	f7ff fed0 	bl	8018e68 <tcp_output_control_segment>
 80190c8:	4603      	mov	r3, r0
 80190ca:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80190cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80190d0:	4618      	mov	r0, r3
 80190d2:	371c      	adds	r7, #28
 80190d4:	46bd      	mov	sp, r7
 80190d6:	bd90      	pop	{r4, r7, pc}
 80190d8:	08020894 	.word	0x08020894
 80190dc:	08021070 	.word	0x08021070
 80190e0:	080208e8 	.word	0x080208e8

080190e4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80190e4:	b590      	push	{r4, r7, lr}
 80190e6:	b08b      	sub	sp, #44	@ 0x2c
 80190e8:	af00      	add	r7, sp, #0
 80190ea:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80190ec:	2300      	movs	r3, #0
 80190ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d106      	bne.n	8019106 <tcp_zero_window_probe+0x22>
 80190f8:	4b4c      	ldr	r3, [pc, #304]	@ (801922c <tcp_zero_window_probe+0x148>)
 80190fa:	f640 024f 	movw	r2, #2127	@ 0x84f
 80190fe:	494c      	ldr	r1, [pc, #304]	@ (8019230 <tcp_zero_window_probe+0x14c>)
 8019100:	484c      	ldr	r0, [pc, #304]	@ (8019234 <tcp_zero_window_probe+0x150>)
 8019102:	f004 f933 	bl	801d36c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801910a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801910c:	6a3b      	ldr	r3, [r7, #32]
 801910e:	2b00      	cmp	r3, #0
 8019110:	d101      	bne.n	8019116 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8019112:	2300      	movs	r3, #0
 8019114:	e086      	b.n	8019224 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801911c:	2bff      	cmp	r3, #255	@ 0xff
 801911e:	d007      	beq.n	8019130 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8019126:	3301      	adds	r3, #1
 8019128:	b2da      	uxtb	r2, r3
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8019130:	6a3b      	ldr	r3, [r7, #32]
 8019132:	68db      	ldr	r3, [r3, #12]
 8019134:	899b      	ldrh	r3, [r3, #12]
 8019136:	b29b      	uxth	r3, r3
 8019138:	4618      	mov	r0, r3
 801913a:	f7f8 f997 	bl	801146c <lwip_htons>
 801913e:	4603      	mov	r3, r0
 8019140:	b2db      	uxtb	r3, r3
 8019142:	f003 0301 	and.w	r3, r3, #1
 8019146:	2b00      	cmp	r3, #0
 8019148:	d005      	beq.n	8019156 <tcp_zero_window_probe+0x72>
 801914a:	6a3b      	ldr	r3, [r7, #32]
 801914c:	891b      	ldrh	r3, [r3, #8]
 801914e:	2b00      	cmp	r3, #0
 8019150:	d101      	bne.n	8019156 <tcp_zero_window_probe+0x72>
 8019152:	2301      	movs	r3, #1
 8019154:	e000      	b.n	8019158 <tcp_zero_window_probe+0x74>
 8019156:	2300      	movs	r3, #0
 8019158:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801915a:	7ffb      	ldrb	r3, [r7, #31]
 801915c:	2b00      	cmp	r3, #0
 801915e:	bf0c      	ite	eq
 8019160:	2301      	moveq	r3, #1
 8019162:	2300      	movne	r3, #0
 8019164:	b2db      	uxtb	r3, r3
 8019166:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8019168:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801916c:	b299      	uxth	r1, r3
 801916e:	6a3b      	ldr	r3, [r7, #32]
 8019170:	68db      	ldr	r3, [r3, #12]
 8019172:	685b      	ldr	r3, [r3, #4]
 8019174:	8bba      	ldrh	r2, [r7, #28]
 8019176:	6878      	ldr	r0, [r7, #4]
 8019178:	f7ff fdfa 	bl	8018d70 <tcp_output_alloc_header>
 801917c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801917e:	69bb      	ldr	r3, [r7, #24]
 8019180:	2b00      	cmp	r3, #0
 8019182:	d102      	bne.n	801918a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8019184:	f04f 33ff 	mov.w	r3, #4294967295
 8019188:	e04c      	b.n	8019224 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801918a:	69bb      	ldr	r3, [r7, #24]
 801918c:	685b      	ldr	r3, [r3, #4]
 801918e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8019190:	7ffb      	ldrb	r3, [r7, #31]
 8019192:	2b00      	cmp	r3, #0
 8019194:	d011      	beq.n	80191ba <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8019196:	697b      	ldr	r3, [r7, #20]
 8019198:	899b      	ldrh	r3, [r3, #12]
 801919a:	b29b      	uxth	r3, r3
 801919c:	b21b      	sxth	r3, r3
 801919e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80191a2:	b21c      	sxth	r4, r3
 80191a4:	2011      	movs	r0, #17
 80191a6:	f7f8 f961 	bl	801146c <lwip_htons>
 80191aa:	4603      	mov	r3, r0
 80191ac:	b21b      	sxth	r3, r3
 80191ae:	4323      	orrs	r3, r4
 80191b0:	b21b      	sxth	r3, r3
 80191b2:	b29a      	uxth	r2, r3
 80191b4:	697b      	ldr	r3, [r7, #20]
 80191b6:	819a      	strh	r2, [r3, #12]
 80191b8:	e010      	b.n	80191dc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80191ba:	69bb      	ldr	r3, [r7, #24]
 80191bc:	685b      	ldr	r3, [r3, #4]
 80191be:	3314      	adds	r3, #20
 80191c0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80191c2:	6a3b      	ldr	r3, [r7, #32]
 80191c4:	6858      	ldr	r0, [r3, #4]
 80191c6:	6a3b      	ldr	r3, [r7, #32]
 80191c8:	685b      	ldr	r3, [r3, #4]
 80191ca:	891a      	ldrh	r2, [r3, #8]
 80191cc:	6a3b      	ldr	r3, [r7, #32]
 80191ce:	891b      	ldrh	r3, [r3, #8]
 80191d0:	1ad3      	subs	r3, r2, r3
 80191d2:	b29b      	uxth	r3, r3
 80191d4:	2201      	movs	r2, #1
 80191d6:	6939      	ldr	r1, [r7, #16]
 80191d8:	f7f9 ff2c 	bl	8013034 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80191dc:	6a3b      	ldr	r3, [r7, #32]
 80191de:	68db      	ldr	r3, [r3, #12]
 80191e0:	685b      	ldr	r3, [r3, #4]
 80191e2:	4618      	mov	r0, r3
 80191e4:	f7f8 f957 	bl	8011496 <lwip_htonl>
 80191e8:	4603      	mov	r3, r0
 80191ea:	3301      	adds	r3, #1
 80191ec:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	1ad3      	subs	r3, r2, r3
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	da02      	bge.n	8019200 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	68fa      	ldr	r2, [r7, #12]
 80191fe:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019204:	2200      	movs	r2, #0
 8019206:	69b9      	ldr	r1, [r7, #24]
 8019208:	6878      	ldr	r0, [r7, #4]
 801920a:	f7ff fdef 	bl	8018dec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801920e:	687a      	ldr	r2, [r7, #4]
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	3304      	adds	r3, #4
 8019214:	69b9      	ldr	r1, [r7, #24]
 8019216:	6878      	ldr	r0, [r7, #4]
 8019218:	f7ff fe26 	bl	8018e68 <tcp_output_control_segment>
 801921c:	4603      	mov	r3, r0
 801921e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019220:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019224:	4618      	mov	r0, r3
 8019226:	372c      	adds	r7, #44	@ 0x2c
 8019228:	46bd      	mov	sp, r7
 801922a:	bd90      	pop	{r4, r7, pc}
 801922c:	08020894 	.word	0x08020894
 8019230:	0802108c 	.word	0x0802108c
 8019234:	080208e8 	.word	0x080208e8

08019238 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019238:	b580      	push	{r7, lr}
 801923a:	b082      	sub	sp, #8
 801923c:	af00      	add	r7, sp, #0
 801923e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8019240:	f7f9 ffe6 	bl	8013210 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8019244:	4b0a      	ldr	r3, [pc, #40]	@ (8019270 <tcpip_tcp_timer+0x38>)
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	2b00      	cmp	r3, #0
 801924a:	d103      	bne.n	8019254 <tcpip_tcp_timer+0x1c>
 801924c:	4b09      	ldr	r3, [pc, #36]	@ (8019274 <tcpip_tcp_timer+0x3c>)
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	2b00      	cmp	r3, #0
 8019252:	d005      	beq.n	8019260 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019254:	2200      	movs	r2, #0
 8019256:	4908      	ldr	r1, [pc, #32]	@ (8019278 <tcpip_tcp_timer+0x40>)
 8019258:	20fa      	movs	r0, #250	@ 0xfa
 801925a:	f000 f8f3 	bl	8019444 <sys_timeout>
 801925e:	e003      	b.n	8019268 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8019260:	4b06      	ldr	r3, [pc, #24]	@ (801927c <tcpip_tcp_timer+0x44>)
 8019262:	2200      	movs	r2, #0
 8019264:	601a      	str	r2, [r3, #0]
  }
}
 8019266:	bf00      	nop
 8019268:	bf00      	nop
 801926a:	3708      	adds	r7, #8
 801926c:	46bd      	mov	sp, r7
 801926e:	bd80      	pop	{r7, pc}
 8019270:	2000e468 	.word	0x2000e468
 8019274:	2000e46c 	.word	0x2000e46c
 8019278:	08019239 	.word	0x08019239
 801927c:	2000e4b4 	.word	0x2000e4b4

08019280 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8019280:	b580      	push	{r7, lr}
 8019282:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8019284:	4b0a      	ldr	r3, [pc, #40]	@ (80192b0 <tcp_timer_needed+0x30>)
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	2b00      	cmp	r3, #0
 801928a:	d10f      	bne.n	80192ac <tcp_timer_needed+0x2c>
 801928c:	4b09      	ldr	r3, [pc, #36]	@ (80192b4 <tcp_timer_needed+0x34>)
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	2b00      	cmp	r3, #0
 8019292:	d103      	bne.n	801929c <tcp_timer_needed+0x1c>
 8019294:	4b08      	ldr	r3, [pc, #32]	@ (80192b8 <tcp_timer_needed+0x38>)
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	2b00      	cmp	r3, #0
 801929a:	d007      	beq.n	80192ac <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801929c:	4b04      	ldr	r3, [pc, #16]	@ (80192b0 <tcp_timer_needed+0x30>)
 801929e:	2201      	movs	r2, #1
 80192a0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80192a2:	2200      	movs	r2, #0
 80192a4:	4905      	ldr	r1, [pc, #20]	@ (80192bc <tcp_timer_needed+0x3c>)
 80192a6:	20fa      	movs	r0, #250	@ 0xfa
 80192a8:	f000 f8cc 	bl	8019444 <sys_timeout>
  }
}
 80192ac:	bf00      	nop
 80192ae:	bd80      	pop	{r7, pc}
 80192b0:	2000e4b4 	.word	0x2000e4b4
 80192b4:	2000e468 	.word	0x2000e468
 80192b8:	2000e46c 	.word	0x2000e46c
 80192bc:	08019239 	.word	0x08019239

080192c0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80192c0:	b580      	push	{r7, lr}
 80192c2:	b086      	sub	sp, #24
 80192c4:	af00      	add	r7, sp, #0
 80192c6:	60f8      	str	r0, [r7, #12]
 80192c8:	60b9      	str	r1, [r7, #8]
 80192ca:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80192cc:	200a      	movs	r0, #10
 80192ce:	f7f8 fda1 	bl	8011e14 <memp_malloc>
 80192d2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80192d4:	693b      	ldr	r3, [r7, #16]
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d109      	bne.n	80192ee <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80192da:	693b      	ldr	r3, [r7, #16]
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d151      	bne.n	8019384 <sys_timeout_abs+0xc4>
 80192e0:	4b2a      	ldr	r3, [pc, #168]	@ (801938c <sys_timeout_abs+0xcc>)
 80192e2:	22be      	movs	r2, #190	@ 0xbe
 80192e4:	492a      	ldr	r1, [pc, #168]	@ (8019390 <sys_timeout_abs+0xd0>)
 80192e6:	482b      	ldr	r0, [pc, #172]	@ (8019394 <sys_timeout_abs+0xd4>)
 80192e8:	f004 f840 	bl	801d36c <iprintf>
    return;
 80192ec:	e04a      	b.n	8019384 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80192ee:	693b      	ldr	r3, [r7, #16]
 80192f0:	2200      	movs	r2, #0
 80192f2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80192f4:	693b      	ldr	r3, [r7, #16]
 80192f6:	68ba      	ldr	r2, [r7, #8]
 80192f8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80192fa:	693b      	ldr	r3, [r7, #16]
 80192fc:	687a      	ldr	r2, [r7, #4]
 80192fe:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8019300:	693b      	ldr	r3, [r7, #16]
 8019302:	68fa      	ldr	r2, [r7, #12]
 8019304:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8019306:	4b24      	ldr	r3, [pc, #144]	@ (8019398 <sys_timeout_abs+0xd8>)
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	2b00      	cmp	r3, #0
 801930c:	d103      	bne.n	8019316 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801930e:	4a22      	ldr	r2, [pc, #136]	@ (8019398 <sys_timeout_abs+0xd8>)
 8019310:	693b      	ldr	r3, [r7, #16]
 8019312:	6013      	str	r3, [r2, #0]
    return;
 8019314:	e037      	b.n	8019386 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8019316:	693b      	ldr	r3, [r7, #16]
 8019318:	685a      	ldr	r2, [r3, #4]
 801931a:	4b1f      	ldr	r3, [pc, #124]	@ (8019398 <sys_timeout_abs+0xd8>)
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	685b      	ldr	r3, [r3, #4]
 8019320:	1ad3      	subs	r3, r2, r3
 8019322:	0fdb      	lsrs	r3, r3, #31
 8019324:	f003 0301 	and.w	r3, r3, #1
 8019328:	b2db      	uxtb	r3, r3
 801932a:	2b00      	cmp	r3, #0
 801932c:	d007      	beq.n	801933e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801932e:	4b1a      	ldr	r3, [pc, #104]	@ (8019398 <sys_timeout_abs+0xd8>)
 8019330:	681a      	ldr	r2, [r3, #0]
 8019332:	693b      	ldr	r3, [r7, #16]
 8019334:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8019336:	4a18      	ldr	r2, [pc, #96]	@ (8019398 <sys_timeout_abs+0xd8>)
 8019338:	693b      	ldr	r3, [r7, #16]
 801933a:	6013      	str	r3, [r2, #0]
 801933c:	e023      	b.n	8019386 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801933e:	4b16      	ldr	r3, [pc, #88]	@ (8019398 <sys_timeout_abs+0xd8>)
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	617b      	str	r3, [r7, #20]
 8019344:	e01a      	b.n	801937c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8019346:	697b      	ldr	r3, [r7, #20]
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	2b00      	cmp	r3, #0
 801934c:	d00b      	beq.n	8019366 <sys_timeout_abs+0xa6>
 801934e:	693b      	ldr	r3, [r7, #16]
 8019350:	685a      	ldr	r2, [r3, #4]
 8019352:	697b      	ldr	r3, [r7, #20]
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	685b      	ldr	r3, [r3, #4]
 8019358:	1ad3      	subs	r3, r2, r3
 801935a:	0fdb      	lsrs	r3, r3, #31
 801935c:	f003 0301 	and.w	r3, r3, #1
 8019360:	b2db      	uxtb	r3, r3
 8019362:	2b00      	cmp	r3, #0
 8019364:	d007      	beq.n	8019376 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8019366:	697b      	ldr	r3, [r7, #20]
 8019368:	681a      	ldr	r2, [r3, #0]
 801936a:	693b      	ldr	r3, [r7, #16]
 801936c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801936e:	697b      	ldr	r3, [r7, #20]
 8019370:	693a      	ldr	r2, [r7, #16]
 8019372:	601a      	str	r2, [r3, #0]
        break;
 8019374:	e007      	b.n	8019386 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8019376:	697b      	ldr	r3, [r7, #20]
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	617b      	str	r3, [r7, #20]
 801937c:	697b      	ldr	r3, [r7, #20]
 801937e:	2b00      	cmp	r3, #0
 8019380:	d1e1      	bne.n	8019346 <sys_timeout_abs+0x86>
 8019382:	e000      	b.n	8019386 <sys_timeout_abs+0xc6>
    return;
 8019384:	bf00      	nop
      }
    }
  }
}
 8019386:	3718      	adds	r7, #24
 8019388:	46bd      	mov	sp, r7
 801938a:	bd80      	pop	{r7, pc}
 801938c:	080210b0 	.word	0x080210b0
 8019390:	080210e4 	.word	0x080210e4
 8019394:	08021124 	.word	0x08021124
 8019398:	2000e4ac 	.word	0x2000e4ac

0801939c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801939c:	b580      	push	{r7, lr}
 801939e:	b086      	sub	sp, #24
 80193a0:	af00      	add	r7, sp, #0
 80193a2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80193a8:	697b      	ldr	r3, [r7, #20]
 80193aa:	685b      	ldr	r3, [r3, #4]
 80193ac:	4798      	blx	r3

  now = sys_now();
 80193ae:	f7f0 f9a9 	bl	8009704 <sys_now>
 80193b2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80193b4:	697b      	ldr	r3, [r7, #20]
 80193b6:	681a      	ldr	r2, [r3, #0]
 80193b8:	4b0f      	ldr	r3, [pc, #60]	@ (80193f8 <lwip_cyclic_timer+0x5c>)
 80193ba:	681b      	ldr	r3, [r3, #0]
 80193bc:	4413      	add	r3, r2
 80193be:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80193c0:	68fa      	ldr	r2, [r7, #12]
 80193c2:	693b      	ldr	r3, [r7, #16]
 80193c4:	1ad3      	subs	r3, r2, r3
 80193c6:	0fdb      	lsrs	r3, r3, #31
 80193c8:	f003 0301 	and.w	r3, r3, #1
 80193cc:	b2db      	uxtb	r3, r3
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	d009      	beq.n	80193e6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80193d2:	697b      	ldr	r3, [r7, #20]
 80193d4:	681a      	ldr	r2, [r3, #0]
 80193d6:	693b      	ldr	r3, [r7, #16]
 80193d8:	4413      	add	r3, r2
 80193da:	687a      	ldr	r2, [r7, #4]
 80193dc:	4907      	ldr	r1, [pc, #28]	@ (80193fc <lwip_cyclic_timer+0x60>)
 80193de:	4618      	mov	r0, r3
 80193e0:	f7ff ff6e 	bl	80192c0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80193e4:	e004      	b.n	80193f0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80193e6:	687a      	ldr	r2, [r7, #4]
 80193e8:	4904      	ldr	r1, [pc, #16]	@ (80193fc <lwip_cyclic_timer+0x60>)
 80193ea:	68f8      	ldr	r0, [r7, #12]
 80193ec:	f7ff ff68 	bl	80192c0 <sys_timeout_abs>
}
 80193f0:	bf00      	nop
 80193f2:	3718      	adds	r7, #24
 80193f4:	46bd      	mov	sp, r7
 80193f6:	bd80      	pop	{r7, pc}
 80193f8:	2000e4b0 	.word	0x2000e4b0
 80193fc:	0801939d 	.word	0x0801939d

08019400 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8019400:	b580      	push	{r7, lr}
 8019402:	b082      	sub	sp, #8
 8019404:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019406:	2301      	movs	r3, #1
 8019408:	607b      	str	r3, [r7, #4]
 801940a:	e00e      	b.n	801942a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801940c:	4a0b      	ldr	r2, [pc, #44]	@ (801943c <sys_timeouts_init+0x3c>)
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	00db      	lsls	r3, r3, #3
 8019418:	4a08      	ldr	r2, [pc, #32]	@ (801943c <sys_timeouts_init+0x3c>)
 801941a:	4413      	add	r3, r2
 801941c:	461a      	mov	r2, r3
 801941e:	4908      	ldr	r1, [pc, #32]	@ (8019440 <sys_timeouts_init+0x40>)
 8019420:	f000 f810 	bl	8019444 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	3301      	adds	r3, #1
 8019428:	607b      	str	r3, [r7, #4]
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	2b02      	cmp	r3, #2
 801942e:	d9ed      	bls.n	801940c <sys_timeouts_init+0xc>
  }
}
 8019430:	bf00      	nop
 8019432:	bf00      	nop
 8019434:	3708      	adds	r7, #8
 8019436:	46bd      	mov	sp, r7
 8019438:	bd80      	pop	{r7, pc}
 801943a:	bf00      	nop
 801943c:	08032500 	.word	0x08032500
 8019440:	0801939d 	.word	0x0801939d

08019444 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8019444:	b580      	push	{r7, lr}
 8019446:	b086      	sub	sp, #24
 8019448:	af00      	add	r7, sp, #0
 801944a:	60f8      	str	r0, [r7, #12]
 801944c:	60b9      	str	r1, [r7, #8]
 801944e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8019450:	68fb      	ldr	r3, [r7, #12]
 8019452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019456:	d306      	bcc.n	8019466 <sys_timeout+0x22>
 8019458:	4b0a      	ldr	r3, [pc, #40]	@ (8019484 <sys_timeout+0x40>)
 801945a:	f240 1229 	movw	r2, #297	@ 0x129
 801945e:	490a      	ldr	r1, [pc, #40]	@ (8019488 <sys_timeout+0x44>)
 8019460:	480a      	ldr	r0, [pc, #40]	@ (801948c <sys_timeout+0x48>)
 8019462:	f003 ff83 	bl	801d36c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8019466:	f7f0 f94d 	bl	8009704 <sys_now>
 801946a:	4602      	mov	r2, r0
 801946c:	68fb      	ldr	r3, [r7, #12]
 801946e:	4413      	add	r3, r2
 8019470:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8019472:	687a      	ldr	r2, [r7, #4]
 8019474:	68b9      	ldr	r1, [r7, #8]
 8019476:	6978      	ldr	r0, [r7, #20]
 8019478:	f7ff ff22 	bl	80192c0 <sys_timeout_abs>
#endif
}
 801947c:	bf00      	nop
 801947e:	3718      	adds	r7, #24
 8019480:	46bd      	mov	sp, r7
 8019482:	bd80      	pop	{r7, pc}
 8019484:	080210b0 	.word	0x080210b0
 8019488:	0802114c 	.word	0x0802114c
 801948c:	08021124 	.word	0x08021124

08019490 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8019490:	b580      	push	{r7, lr}
 8019492:	b084      	sub	sp, #16
 8019494:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8019496:	f7f0 f935 	bl	8009704 <sys_now>
 801949a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801949c:	4b17      	ldr	r3, [pc, #92]	@ (80194fc <sys_check_timeouts+0x6c>)
 801949e:	681b      	ldr	r3, [r3, #0]
 80194a0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80194a2:	68bb      	ldr	r3, [r7, #8]
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d022      	beq.n	80194ee <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80194a8:	68bb      	ldr	r3, [r7, #8]
 80194aa:	685b      	ldr	r3, [r3, #4]
 80194ac:	68fa      	ldr	r2, [r7, #12]
 80194ae:	1ad3      	subs	r3, r2, r3
 80194b0:	0fdb      	lsrs	r3, r3, #31
 80194b2:	f003 0301 	and.w	r3, r3, #1
 80194b6:	b2db      	uxtb	r3, r3
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d11a      	bne.n	80194f2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80194bc:	68bb      	ldr	r3, [r7, #8]
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	4a0e      	ldr	r2, [pc, #56]	@ (80194fc <sys_check_timeouts+0x6c>)
 80194c2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80194c4:	68bb      	ldr	r3, [r7, #8]
 80194c6:	689b      	ldr	r3, [r3, #8]
 80194c8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80194ca:	68bb      	ldr	r3, [r7, #8]
 80194cc:	68db      	ldr	r3, [r3, #12]
 80194ce:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80194d0:	68bb      	ldr	r3, [r7, #8]
 80194d2:	685b      	ldr	r3, [r3, #4]
 80194d4:	4a0a      	ldr	r2, [pc, #40]	@ (8019500 <sys_check_timeouts+0x70>)
 80194d6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80194d8:	68b9      	ldr	r1, [r7, #8]
 80194da:	200a      	movs	r0, #10
 80194dc:	f7f8 fd10 	bl	8011f00 <memp_free>
    if (handler != NULL) {
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d0da      	beq.n	801949c <sys_check_timeouts+0xc>
      handler(arg);
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	6838      	ldr	r0, [r7, #0]
 80194ea:	4798      	blx	r3
  do {
 80194ec:	e7d6      	b.n	801949c <sys_check_timeouts+0xc>
      return;
 80194ee:	bf00      	nop
 80194f0:	e000      	b.n	80194f4 <sys_check_timeouts+0x64>
      return;
 80194f2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80194f4:	3710      	adds	r7, #16
 80194f6:	46bd      	mov	sp, r7
 80194f8:	bd80      	pop	{r7, pc}
 80194fa:	bf00      	nop
 80194fc:	2000e4ac 	.word	0x2000e4ac
 8019500:	2000e4b0 	.word	0x2000e4b0

08019504 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019504:	b580      	push	{r7, lr}
 8019506:	b082      	sub	sp, #8
 8019508:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801950a:	4b16      	ldr	r3, [pc, #88]	@ (8019564 <sys_timeouts_sleeptime+0x60>)
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	2b00      	cmp	r3, #0
 8019510:	d102      	bne.n	8019518 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8019512:	f04f 33ff 	mov.w	r3, #4294967295
 8019516:	e020      	b.n	801955a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019518:	f7f0 f8f4 	bl	8009704 <sys_now>
 801951c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801951e:	4b11      	ldr	r3, [pc, #68]	@ (8019564 <sys_timeouts_sleeptime+0x60>)
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	685a      	ldr	r2, [r3, #4]
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	1ad3      	subs	r3, r2, r3
 8019528:	0fdb      	lsrs	r3, r3, #31
 801952a:	f003 0301 	and.w	r3, r3, #1
 801952e:	b2db      	uxtb	r3, r3
 8019530:	2b00      	cmp	r3, #0
 8019532:	d001      	beq.n	8019538 <sys_timeouts_sleeptime+0x34>
    return 0;
 8019534:	2300      	movs	r3, #0
 8019536:	e010      	b.n	801955a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019538:	4b0a      	ldr	r3, [pc, #40]	@ (8019564 <sys_timeouts_sleeptime+0x60>)
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	685a      	ldr	r2, [r3, #4]
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	1ad3      	subs	r3, r2, r3
 8019542:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8019544:	683b      	ldr	r3, [r7, #0]
 8019546:	2b00      	cmp	r3, #0
 8019548:	da06      	bge.n	8019558 <sys_timeouts_sleeptime+0x54>
 801954a:	4b07      	ldr	r3, [pc, #28]	@ (8019568 <sys_timeouts_sleeptime+0x64>)
 801954c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8019550:	4906      	ldr	r1, [pc, #24]	@ (801956c <sys_timeouts_sleeptime+0x68>)
 8019552:	4807      	ldr	r0, [pc, #28]	@ (8019570 <sys_timeouts_sleeptime+0x6c>)
 8019554:	f003 ff0a 	bl	801d36c <iprintf>
    return ret;
 8019558:	683b      	ldr	r3, [r7, #0]
  }
}
 801955a:	4618      	mov	r0, r3
 801955c:	3708      	adds	r7, #8
 801955e:	46bd      	mov	sp, r7
 8019560:	bd80      	pop	{r7, pc}
 8019562:	bf00      	nop
 8019564:	2000e4ac 	.word	0x2000e4ac
 8019568:	080210b0 	.word	0x080210b0
 801956c:	08021184 	.word	0x08021184
 8019570:	08021124 	.word	0x08021124

08019574 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8019574:	b580      	push	{r7, lr}
 8019576:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019578:	f003 fdf8 	bl	801d16c <rand>
 801957c:	4603      	mov	r3, r0
 801957e:	b29b      	uxth	r3, r3
 8019580:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019584:	b29b      	uxth	r3, r3
 8019586:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801958a:	b29a      	uxth	r2, r3
 801958c:	4b01      	ldr	r3, [pc, #4]	@ (8019594 <udp_init+0x20>)
 801958e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019590:	bf00      	nop
 8019592:	bd80      	pop	{r7, pc}
 8019594:	200000b8 	.word	0x200000b8

08019598 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8019598:	b480      	push	{r7}
 801959a:	b083      	sub	sp, #12
 801959c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801959e:	2300      	movs	r3, #0
 80195a0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80195a2:	4b17      	ldr	r3, [pc, #92]	@ (8019600 <udp_new_port+0x68>)
 80195a4:	881b      	ldrh	r3, [r3, #0]
 80195a6:	1c5a      	adds	r2, r3, #1
 80195a8:	b291      	uxth	r1, r2
 80195aa:	4a15      	ldr	r2, [pc, #84]	@ (8019600 <udp_new_port+0x68>)
 80195ac:	8011      	strh	r1, [r2, #0]
 80195ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80195b2:	4293      	cmp	r3, r2
 80195b4:	d103      	bne.n	80195be <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80195b6:	4b12      	ldr	r3, [pc, #72]	@ (8019600 <udp_new_port+0x68>)
 80195b8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80195bc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80195be:	4b11      	ldr	r3, [pc, #68]	@ (8019604 <udp_new_port+0x6c>)
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	603b      	str	r3, [r7, #0]
 80195c4:	e011      	b.n	80195ea <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80195c6:	683b      	ldr	r3, [r7, #0]
 80195c8:	8a5a      	ldrh	r2, [r3, #18]
 80195ca:	4b0d      	ldr	r3, [pc, #52]	@ (8019600 <udp_new_port+0x68>)
 80195cc:	881b      	ldrh	r3, [r3, #0]
 80195ce:	429a      	cmp	r2, r3
 80195d0:	d108      	bne.n	80195e4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80195d2:	88fb      	ldrh	r3, [r7, #6]
 80195d4:	3301      	adds	r3, #1
 80195d6:	80fb      	strh	r3, [r7, #6]
 80195d8:	88fb      	ldrh	r3, [r7, #6]
 80195da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80195de:	d3e0      	bcc.n	80195a2 <udp_new_port+0xa>
        return 0;
 80195e0:	2300      	movs	r3, #0
 80195e2:	e007      	b.n	80195f4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80195e4:	683b      	ldr	r3, [r7, #0]
 80195e6:	68db      	ldr	r3, [r3, #12]
 80195e8:	603b      	str	r3, [r7, #0]
 80195ea:	683b      	ldr	r3, [r7, #0]
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d1ea      	bne.n	80195c6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80195f0:	4b03      	ldr	r3, [pc, #12]	@ (8019600 <udp_new_port+0x68>)
 80195f2:	881b      	ldrh	r3, [r3, #0]
}
 80195f4:	4618      	mov	r0, r3
 80195f6:	370c      	adds	r7, #12
 80195f8:	46bd      	mov	sp, r7
 80195fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195fe:	4770      	bx	lr
 8019600:	200000b8 	.word	0x200000b8
 8019604:	2000e4b8 	.word	0x2000e4b8

08019608 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8019608:	b580      	push	{r7, lr}
 801960a:	b084      	sub	sp, #16
 801960c:	af00      	add	r7, sp, #0
 801960e:	60f8      	str	r0, [r7, #12]
 8019610:	60b9      	str	r1, [r7, #8]
 8019612:	4613      	mov	r3, r2
 8019614:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	2b00      	cmp	r3, #0
 801961a:	d105      	bne.n	8019628 <udp_input_local_match+0x20>
 801961c:	4b27      	ldr	r3, [pc, #156]	@ (80196bc <udp_input_local_match+0xb4>)
 801961e:	2287      	movs	r2, #135	@ 0x87
 8019620:	4927      	ldr	r1, [pc, #156]	@ (80196c0 <udp_input_local_match+0xb8>)
 8019622:	4828      	ldr	r0, [pc, #160]	@ (80196c4 <udp_input_local_match+0xbc>)
 8019624:	f003 fea2 	bl	801d36c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8019628:	68bb      	ldr	r3, [r7, #8]
 801962a:	2b00      	cmp	r3, #0
 801962c:	d105      	bne.n	801963a <udp_input_local_match+0x32>
 801962e:	4b23      	ldr	r3, [pc, #140]	@ (80196bc <udp_input_local_match+0xb4>)
 8019630:	2288      	movs	r2, #136	@ 0x88
 8019632:	4925      	ldr	r1, [pc, #148]	@ (80196c8 <udp_input_local_match+0xc0>)
 8019634:	4823      	ldr	r0, [pc, #140]	@ (80196c4 <udp_input_local_match+0xbc>)
 8019636:	f003 fe99 	bl	801d36c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801963a:	68fb      	ldr	r3, [r7, #12]
 801963c:	7a1b      	ldrb	r3, [r3, #8]
 801963e:	2b00      	cmp	r3, #0
 8019640:	d00b      	beq.n	801965a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019642:	68fb      	ldr	r3, [r7, #12]
 8019644:	7a1a      	ldrb	r2, [r3, #8]
 8019646:	4b21      	ldr	r3, [pc, #132]	@ (80196cc <udp_input_local_match+0xc4>)
 8019648:	685b      	ldr	r3, [r3, #4]
 801964a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801964e:	3301      	adds	r3, #1
 8019650:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019652:	429a      	cmp	r2, r3
 8019654:	d001      	beq.n	801965a <udp_input_local_match+0x52>
    return 0;
 8019656:	2300      	movs	r3, #0
 8019658:	e02b      	b.n	80196b2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801965a:	79fb      	ldrb	r3, [r7, #7]
 801965c:	2b00      	cmp	r3, #0
 801965e:	d018      	beq.n	8019692 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	2b00      	cmp	r3, #0
 8019664:	d013      	beq.n	801968e <udp_input_local_match+0x86>
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	2b00      	cmp	r3, #0
 801966c:	d00f      	beq.n	801968e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801966e:	4b17      	ldr	r3, [pc, #92]	@ (80196cc <udp_input_local_match+0xc4>)
 8019670:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019676:	d00a      	beq.n	801968e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8019678:	68fb      	ldr	r3, [r7, #12]
 801967a:	681a      	ldr	r2, [r3, #0]
 801967c:	4b13      	ldr	r3, [pc, #76]	@ (80196cc <udp_input_local_match+0xc4>)
 801967e:	695b      	ldr	r3, [r3, #20]
 8019680:	405a      	eors	r2, r3
 8019682:	68bb      	ldr	r3, [r7, #8]
 8019684:	3308      	adds	r3, #8
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801968a:	2b00      	cmp	r3, #0
 801968c:	d110      	bne.n	80196b0 <udp_input_local_match+0xa8>
          return 1;
 801968e:	2301      	movs	r3, #1
 8019690:	e00f      	b.n	80196b2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	2b00      	cmp	r3, #0
 8019696:	d009      	beq.n	80196ac <udp_input_local_match+0xa4>
 8019698:	68fb      	ldr	r3, [r7, #12]
 801969a:	681b      	ldr	r3, [r3, #0]
 801969c:	2b00      	cmp	r3, #0
 801969e:	d005      	beq.n	80196ac <udp_input_local_match+0xa4>
 80196a0:	68fb      	ldr	r3, [r7, #12]
 80196a2:	681a      	ldr	r2, [r3, #0]
 80196a4:	4b09      	ldr	r3, [pc, #36]	@ (80196cc <udp_input_local_match+0xc4>)
 80196a6:	695b      	ldr	r3, [r3, #20]
 80196a8:	429a      	cmp	r2, r3
 80196aa:	d101      	bne.n	80196b0 <udp_input_local_match+0xa8>
        return 1;
 80196ac:	2301      	movs	r3, #1
 80196ae:	e000      	b.n	80196b2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80196b0:	2300      	movs	r3, #0
}
 80196b2:	4618      	mov	r0, r3
 80196b4:	3710      	adds	r7, #16
 80196b6:	46bd      	mov	sp, r7
 80196b8:	bd80      	pop	{r7, pc}
 80196ba:	bf00      	nop
 80196bc:	08021198 	.word	0x08021198
 80196c0:	080211c8 	.word	0x080211c8
 80196c4:	080211ec 	.word	0x080211ec
 80196c8:	08021214 	.word	0x08021214
 80196cc:	2000b35c 	.word	0x2000b35c

080196d0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80196d0:	b590      	push	{r4, r7, lr}
 80196d2:	b08d      	sub	sp, #52	@ 0x34
 80196d4:	af02      	add	r7, sp, #8
 80196d6:	6078      	str	r0, [r7, #4]
 80196d8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80196da:	2300      	movs	r3, #0
 80196dc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	d105      	bne.n	80196f0 <udp_input+0x20>
 80196e4:	4b7c      	ldr	r3, [pc, #496]	@ (80198d8 <udp_input+0x208>)
 80196e6:	22cf      	movs	r2, #207	@ 0xcf
 80196e8:	497c      	ldr	r1, [pc, #496]	@ (80198dc <udp_input+0x20c>)
 80196ea:	487d      	ldr	r0, [pc, #500]	@ (80198e0 <udp_input+0x210>)
 80196ec:	f003 fe3e 	bl	801d36c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80196f0:	683b      	ldr	r3, [r7, #0]
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d105      	bne.n	8019702 <udp_input+0x32>
 80196f6:	4b78      	ldr	r3, [pc, #480]	@ (80198d8 <udp_input+0x208>)
 80196f8:	22d0      	movs	r2, #208	@ 0xd0
 80196fa:	497a      	ldr	r1, [pc, #488]	@ (80198e4 <udp_input+0x214>)
 80196fc:	4878      	ldr	r0, [pc, #480]	@ (80198e0 <udp_input+0x210>)
 80196fe:	f003 fe35 	bl	801d36c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	895b      	ldrh	r3, [r3, #10]
 8019706:	2b07      	cmp	r3, #7
 8019708:	d803      	bhi.n	8019712 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801970a:	6878      	ldr	r0, [r7, #4]
 801970c:	f7f9 fa9c 	bl	8012c48 <pbuf_free>
    goto end;
 8019710:	e0de      	b.n	80198d0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	685b      	ldr	r3, [r3, #4]
 8019716:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019718:	4b73      	ldr	r3, [pc, #460]	@ (80198e8 <udp_input+0x218>)
 801971a:	695b      	ldr	r3, [r3, #20]
 801971c:	4a72      	ldr	r2, [pc, #456]	@ (80198e8 <udp_input+0x218>)
 801971e:	6812      	ldr	r2, [r2, #0]
 8019720:	4611      	mov	r1, r2
 8019722:	4618      	mov	r0, r3
 8019724:	f001 fd96 	bl	801b254 <ip4_addr_isbroadcast_u32>
 8019728:	4603      	mov	r3, r0
 801972a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801972c:	697b      	ldr	r3, [r7, #20]
 801972e:	881b      	ldrh	r3, [r3, #0]
 8019730:	b29b      	uxth	r3, r3
 8019732:	4618      	mov	r0, r3
 8019734:	f7f7 fe9a 	bl	801146c <lwip_htons>
 8019738:	4603      	mov	r3, r0
 801973a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801973c:	697b      	ldr	r3, [r7, #20]
 801973e:	885b      	ldrh	r3, [r3, #2]
 8019740:	b29b      	uxth	r3, r3
 8019742:	4618      	mov	r0, r3
 8019744:	f7f7 fe92 	bl	801146c <lwip_htons>
 8019748:	4603      	mov	r3, r0
 801974a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801974c:	2300      	movs	r3, #0
 801974e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8019750:	2300      	movs	r3, #0
 8019752:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8019754:	2300      	movs	r3, #0
 8019756:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019758:	4b64      	ldr	r3, [pc, #400]	@ (80198ec <udp_input+0x21c>)
 801975a:	681b      	ldr	r3, [r3, #0]
 801975c:	627b      	str	r3, [r7, #36]	@ 0x24
 801975e:	e054      	b.n	801980a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8019760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019762:	8a5b      	ldrh	r3, [r3, #18]
 8019764:	89fa      	ldrh	r2, [r7, #14]
 8019766:	429a      	cmp	r2, r3
 8019768:	d14a      	bne.n	8019800 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801976a:	7cfb      	ldrb	r3, [r7, #19]
 801976c:	461a      	mov	r2, r3
 801976e:	6839      	ldr	r1, [r7, #0]
 8019770:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019772:	f7ff ff49 	bl	8019608 <udp_input_local_match>
 8019776:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8019778:	2b00      	cmp	r3, #0
 801977a:	d041      	beq.n	8019800 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801977c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801977e:	7c1b      	ldrb	r3, [r3, #16]
 8019780:	f003 0304 	and.w	r3, r3, #4
 8019784:	2b00      	cmp	r3, #0
 8019786:	d11d      	bne.n	80197c4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8019788:	69fb      	ldr	r3, [r7, #28]
 801978a:	2b00      	cmp	r3, #0
 801978c:	d102      	bne.n	8019794 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801978e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019790:	61fb      	str	r3, [r7, #28]
 8019792:	e017      	b.n	80197c4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8019794:	7cfb      	ldrb	r3, [r7, #19]
 8019796:	2b00      	cmp	r3, #0
 8019798:	d014      	beq.n	80197c4 <udp_input+0xf4>
 801979a:	4b53      	ldr	r3, [pc, #332]	@ (80198e8 <udp_input+0x218>)
 801979c:	695b      	ldr	r3, [r3, #20]
 801979e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80197a2:	d10f      	bne.n	80197c4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80197a4:	69fb      	ldr	r3, [r7, #28]
 80197a6:	681a      	ldr	r2, [r3, #0]
 80197a8:	683b      	ldr	r3, [r7, #0]
 80197aa:	3304      	adds	r3, #4
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	429a      	cmp	r2, r3
 80197b0:	d008      	beq.n	80197c4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80197b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197b4:	681a      	ldr	r2, [r3, #0]
 80197b6:	683b      	ldr	r3, [r7, #0]
 80197b8:	3304      	adds	r3, #4
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	429a      	cmp	r2, r3
 80197be:	d101      	bne.n	80197c4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80197c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197c2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80197c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197c6:	8a9b      	ldrh	r3, [r3, #20]
 80197c8:	8a3a      	ldrh	r2, [r7, #16]
 80197ca:	429a      	cmp	r2, r3
 80197cc:	d118      	bne.n	8019800 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80197ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197d0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d005      	beq.n	80197e2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80197d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197d8:	685a      	ldr	r2, [r3, #4]
 80197da:	4b43      	ldr	r3, [pc, #268]	@ (80198e8 <udp_input+0x218>)
 80197dc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80197de:	429a      	cmp	r2, r3
 80197e0:	d10e      	bne.n	8019800 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80197e2:	6a3b      	ldr	r3, [r7, #32]
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d014      	beq.n	8019812 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80197e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197ea:	68da      	ldr	r2, [r3, #12]
 80197ec:	6a3b      	ldr	r3, [r7, #32]
 80197ee:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80197f0:	4b3e      	ldr	r3, [pc, #248]	@ (80198ec <udp_input+0x21c>)
 80197f2:	681a      	ldr	r2, [r3, #0]
 80197f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197f6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80197f8:	4a3c      	ldr	r2, [pc, #240]	@ (80198ec <udp_input+0x21c>)
 80197fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197fc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80197fe:	e008      	b.n	8019812 <udp_input+0x142>
      }
    }

    prev = pcb;
 8019800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019802:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019806:	68db      	ldr	r3, [r3, #12]
 8019808:	627b      	str	r3, [r7, #36]	@ 0x24
 801980a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801980c:	2b00      	cmp	r3, #0
 801980e:	d1a7      	bne.n	8019760 <udp_input+0x90>
 8019810:	e000      	b.n	8019814 <udp_input+0x144>
        break;
 8019812:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8019814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019816:	2b00      	cmp	r3, #0
 8019818:	d101      	bne.n	801981e <udp_input+0x14e>
    pcb = uncon_pcb;
 801981a:	69fb      	ldr	r3, [r7, #28]
 801981c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801981e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019820:	2b00      	cmp	r3, #0
 8019822:	d002      	beq.n	801982a <udp_input+0x15a>
    for_us = 1;
 8019824:	2301      	movs	r3, #1
 8019826:	76fb      	strb	r3, [r7, #27]
 8019828:	e00a      	b.n	8019840 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801982a:	683b      	ldr	r3, [r7, #0]
 801982c:	3304      	adds	r3, #4
 801982e:	681a      	ldr	r2, [r3, #0]
 8019830:	4b2d      	ldr	r3, [pc, #180]	@ (80198e8 <udp_input+0x218>)
 8019832:	695b      	ldr	r3, [r3, #20]
 8019834:	429a      	cmp	r2, r3
 8019836:	bf0c      	ite	eq
 8019838:	2301      	moveq	r3, #1
 801983a:	2300      	movne	r3, #0
 801983c:	b2db      	uxtb	r3, r3
 801983e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019840:	7efb      	ldrb	r3, [r7, #27]
 8019842:	2b00      	cmp	r3, #0
 8019844:	d041      	beq.n	80198ca <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8019846:	2108      	movs	r1, #8
 8019848:	6878      	ldr	r0, [r7, #4]
 801984a:	f7f9 f977 	bl	8012b3c <pbuf_remove_header>
 801984e:	4603      	mov	r3, r0
 8019850:	2b00      	cmp	r3, #0
 8019852:	d00a      	beq.n	801986a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8019854:	4b20      	ldr	r3, [pc, #128]	@ (80198d8 <udp_input+0x208>)
 8019856:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801985a:	4925      	ldr	r1, [pc, #148]	@ (80198f0 <udp_input+0x220>)
 801985c:	4820      	ldr	r0, [pc, #128]	@ (80198e0 <udp_input+0x210>)
 801985e:	f003 fd85 	bl	801d36c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8019862:	6878      	ldr	r0, [r7, #4]
 8019864:	f7f9 f9f0 	bl	8012c48 <pbuf_free>
      goto end;
 8019868:	e032      	b.n	80198d0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801986a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801986c:	2b00      	cmp	r3, #0
 801986e:	d012      	beq.n	8019896 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8019870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019872:	699b      	ldr	r3, [r3, #24]
 8019874:	2b00      	cmp	r3, #0
 8019876:	d00a      	beq.n	801988e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8019878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801987a:	699c      	ldr	r4, [r3, #24]
 801987c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801987e:	69d8      	ldr	r0, [r3, #28]
 8019880:	8a3b      	ldrh	r3, [r7, #16]
 8019882:	9300      	str	r3, [sp, #0]
 8019884:	4b1b      	ldr	r3, [pc, #108]	@ (80198f4 <udp_input+0x224>)
 8019886:	687a      	ldr	r2, [r7, #4]
 8019888:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801988a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801988c:	e021      	b.n	80198d2 <udp_input+0x202>
        pbuf_free(p);
 801988e:	6878      	ldr	r0, [r7, #4]
 8019890:	f7f9 f9da 	bl	8012c48 <pbuf_free>
        goto end;
 8019894:	e01c      	b.n	80198d0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8019896:	7cfb      	ldrb	r3, [r7, #19]
 8019898:	2b00      	cmp	r3, #0
 801989a:	d112      	bne.n	80198c2 <udp_input+0x1f2>
 801989c:	4b12      	ldr	r3, [pc, #72]	@ (80198e8 <udp_input+0x218>)
 801989e:	695b      	ldr	r3, [r3, #20]
 80198a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80198a4:	2be0      	cmp	r3, #224	@ 0xe0
 80198a6:	d00c      	beq.n	80198c2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80198a8:	4b0f      	ldr	r3, [pc, #60]	@ (80198e8 <udp_input+0x218>)
 80198aa:	899b      	ldrh	r3, [r3, #12]
 80198ac:	3308      	adds	r3, #8
 80198ae:	b29b      	uxth	r3, r3
 80198b0:	b21b      	sxth	r3, r3
 80198b2:	4619      	mov	r1, r3
 80198b4:	6878      	ldr	r0, [r7, #4]
 80198b6:	f7f9 f9b4 	bl	8012c22 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80198ba:	2103      	movs	r1, #3
 80198bc:	6878      	ldr	r0, [r7, #4]
 80198be:	f001 f9a9 	bl	801ac14 <icmp_dest_unreach>
      pbuf_free(p);
 80198c2:	6878      	ldr	r0, [r7, #4]
 80198c4:	f7f9 f9c0 	bl	8012c48 <pbuf_free>
  return;
 80198c8:	e003      	b.n	80198d2 <udp_input+0x202>
    pbuf_free(p);
 80198ca:	6878      	ldr	r0, [r7, #4]
 80198cc:	f7f9 f9bc 	bl	8012c48 <pbuf_free>
  return;
 80198d0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80198d2:	372c      	adds	r7, #44	@ 0x2c
 80198d4:	46bd      	mov	sp, r7
 80198d6:	bd90      	pop	{r4, r7, pc}
 80198d8:	08021198 	.word	0x08021198
 80198dc:	0802123c 	.word	0x0802123c
 80198e0:	080211ec 	.word	0x080211ec
 80198e4:	08021254 	.word	0x08021254
 80198e8:	2000b35c 	.word	0x2000b35c
 80198ec:	2000e4b8 	.word	0x2000e4b8
 80198f0:	08021270 	.word	0x08021270
 80198f4:	2000b36c 	.word	0x2000b36c

080198f8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80198f8:	b580      	push	{r7, lr}
 80198fa:	b086      	sub	sp, #24
 80198fc:	af00      	add	r7, sp, #0
 80198fe:	60f8      	str	r0, [r7, #12]
 8019900:	60b9      	str	r1, [r7, #8]
 8019902:	4613      	mov	r3, r2
 8019904:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019906:	68bb      	ldr	r3, [r7, #8]
 8019908:	2b00      	cmp	r3, #0
 801990a:	d101      	bne.n	8019910 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801990c:	4b39      	ldr	r3, [pc, #228]	@ (80199f4 <udp_bind+0xfc>)
 801990e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019910:	68fb      	ldr	r3, [r7, #12]
 8019912:	2b00      	cmp	r3, #0
 8019914:	d109      	bne.n	801992a <udp_bind+0x32>
 8019916:	4b38      	ldr	r3, [pc, #224]	@ (80199f8 <udp_bind+0x100>)
 8019918:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801991c:	4937      	ldr	r1, [pc, #220]	@ (80199fc <udp_bind+0x104>)
 801991e:	4838      	ldr	r0, [pc, #224]	@ (8019a00 <udp_bind+0x108>)
 8019920:	f003 fd24 	bl	801d36c <iprintf>
 8019924:	f06f 030f 	mvn.w	r3, #15
 8019928:	e060      	b.n	80199ec <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801992a:	2300      	movs	r3, #0
 801992c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801992e:	4b35      	ldr	r3, [pc, #212]	@ (8019a04 <udp_bind+0x10c>)
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	617b      	str	r3, [r7, #20]
 8019934:	e009      	b.n	801994a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8019936:	68fa      	ldr	r2, [r7, #12]
 8019938:	697b      	ldr	r3, [r7, #20]
 801993a:	429a      	cmp	r2, r3
 801993c:	d102      	bne.n	8019944 <udp_bind+0x4c>
      rebind = 1;
 801993e:	2301      	movs	r3, #1
 8019940:	74fb      	strb	r3, [r7, #19]
      break;
 8019942:	e005      	b.n	8019950 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019944:	697b      	ldr	r3, [r7, #20]
 8019946:	68db      	ldr	r3, [r3, #12]
 8019948:	617b      	str	r3, [r7, #20]
 801994a:	697b      	ldr	r3, [r7, #20]
 801994c:	2b00      	cmp	r3, #0
 801994e:	d1f2      	bne.n	8019936 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8019950:	88fb      	ldrh	r3, [r7, #6]
 8019952:	2b00      	cmp	r3, #0
 8019954:	d109      	bne.n	801996a <udp_bind+0x72>
    port = udp_new_port();
 8019956:	f7ff fe1f 	bl	8019598 <udp_new_port>
 801995a:	4603      	mov	r3, r0
 801995c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801995e:	88fb      	ldrh	r3, [r7, #6]
 8019960:	2b00      	cmp	r3, #0
 8019962:	d12c      	bne.n	80199be <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8019964:	f06f 0307 	mvn.w	r3, #7
 8019968:	e040      	b.n	80199ec <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801996a:	4b26      	ldr	r3, [pc, #152]	@ (8019a04 <udp_bind+0x10c>)
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	617b      	str	r3, [r7, #20]
 8019970:	e022      	b.n	80199b8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8019972:	68fa      	ldr	r2, [r7, #12]
 8019974:	697b      	ldr	r3, [r7, #20]
 8019976:	429a      	cmp	r2, r3
 8019978:	d01b      	beq.n	80199b2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801997a:	697b      	ldr	r3, [r7, #20]
 801997c:	8a5b      	ldrh	r3, [r3, #18]
 801997e:	88fa      	ldrh	r2, [r7, #6]
 8019980:	429a      	cmp	r2, r3
 8019982:	d116      	bne.n	80199b2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019984:	697b      	ldr	r3, [r7, #20]
 8019986:	681a      	ldr	r2, [r3, #0]
 8019988:	68bb      	ldr	r3, [r7, #8]
 801998a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801998c:	429a      	cmp	r2, r3
 801998e:	d00d      	beq.n	80199ac <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019990:	68bb      	ldr	r3, [r7, #8]
 8019992:	2b00      	cmp	r3, #0
 8019994:	d00a      	beq.n	80199ac <udp_bind+0xb4>
 8019996:	68bb      	ldr	r3, [r7, #8]
 8019998:	681b      	ldr	r3, [r3, #0]
 801999a:	2b00      	cmp	r3, #0
 801999c:	d006      	beq.n	80199ac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801999e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80199a0:	2b00      	cmp	r3, #0
 80199a2:	d003      	beq.n	80199ac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80199a4:	697b      	ldr	r3, [r7, #20]
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d102      	bne.n	80199b2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80199ac:	f06f 0307 	mvn.w	r3, #7
 80199b0:	e01c      	b.n	80199ec <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80199b2:	697b      	ldr	r3, [r7, #20]
 80199b4:	68db      	ldr	r3, [r3, #12]
 80199b6:	617b      	str	r3, [r7, #20]
 80199b8:	697b      	ldr	r3, [r7, #20]
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d1d9      	bne.n	8019972 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80199be:	68bb      	ldr	r3, [r7, #8]
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d002      	beq.n	80199ca <udp_bind+0xd2>
 80199c4:	68bb      	ldr	r3, [r7, #8]
 80199c6:	681b      	ldr	r3, [r3, #0]
 80199c8:	e000      	b.n	80199cc <udp_bind+0xd4>
 80199ca:	2300      	movs	r3, #0
 80199cc:	68fa      	ldr	r2, [r7, #12]
 80199ce:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	88fa      	ldrh	r2, [r7, #6]
 80199d4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80199d6:	7cfb      	ldrb	r3, [r7, #19]
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d106      	bne.n	80199ea <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80199dc:	4b09      	ldr	r3, [pc, #36]	@ (8019a04 <udp_bind+0x10c>)
 80199de:	681a      	ldr	r2, [r3, #0]
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80199e4:	4a07      	ldr	r2, [pc, #28]	@ (8019a04 <udp_bind+0x10c>)
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80199ea:	2300      	movs	r3, #0
}
 80199ec:	4618      	mov	r0, r3
 80199ee:	3718      	adds	r7, #24
 80199f0:	46bd      	mov	sp, r7
 80199f2:	bd80      	pop	{r7, pc}
 80199f4:	08032518 	.word	0x08032518
 80199f8:	08021198 	.word	0x08021198
 80199fc:	08021460 	.word	0x08021460
 8019a00:	080211ec 	.word	0x080211ec
 8019a04:	2000e4b8 	.word	0x2000e4b8

08019a08 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8019a08:	b580      	push	{r7, lr}
 8019a0a:	b084      	sub	sp, #16
 8019a0c:	af00      	add	r7, sp, #0
 8019a0e:	60f8      	str	r0, [r7, #12]
 8019a10:	60b9      	str	r1, [r7, #8]
 8019a12:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d107      	bne.n	8019a2a <udp_recv+0x22>
 8019a1a:	4b08      	ldr	r3, [pc, #32]	@ (8019a3c <udp_recv+0x34>)
 8019a1c:	f240 428a 	movw	r2, #1162	@ 0x48a
 8019a20:	4907      	ldr	r1, [pc, #28]	@ (8019a40 <udp_recv+0x38>)
 8019a22:	4808      	ldr	r0, [pc, #32]	@ (8019a44 <udp_recv+0x3c>)
 8019a24:	f003 fca2 	bl	801d36c <iprintf>
 8019a28:	e005      	b.n	8019a36 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	68ba      	ldr	r2, [r7, #8]
 8019a2e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8019a30:	68fb      	ldr	r3, [r7, #12]
 8019a32:	687a      	ldr	r2, [r7, #4]
 8019a34:	61da      	str	r2, [r3, #28]
}
 8019a36:	3710      	adds	r7, #16
 8019a38:	46bd      	mov	sp, r7
 8019a3a:	bd80      	pop	{r7, pc}
 8019a3c:	08021198 	.word	0x08021198
 8019a40:	080214cc 	.word	0x080214cc
 8019a44:	080211ec 	.word	0x080211ec

08019a48 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8019a48:	b580      	push	{r7, lr}
 8019a4a:	b084      	sub	sp, #16
 8019a4c:	af00      	add	r7, sp, #0
 8019a4e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d107      	bne.n	8019a66 <udp_remove+0x1e>
 8019a56:	4b19      	ldr	r3, [pc, #100]	@ (8019abc <udp_remove+0x74>)
 8019a58:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8019a5c:	4918      	ldr	r1, [pc, #96]	@ (8019ac0 <udp_remove+0x78>)
 8019a5e:	4819      	ldr	r0, [pc, #100]	@ (8019ac4 <udp_remove+0x7c>)
 8019a60:	f003 fc84 	bl	801d36c <iprintf>
 8019a64:	e026      	b.n	8019ab4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8019a66:	4b18      	ldr	r3, [pc, #96]	@ (8019ac8 <udp_remove+0x80>)
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	687a      	ldr	r2, [r7, #4]
 8019a6c:	429a      	cmp	r2, r3
 8019a6e:	d105      	bne.n	8019a7c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8019a70:	4b15      	ldr	r3, [pc, #84]	@ (8019ac8 <udp_remove+0x80>)
 8019a72:	681b      	ldr	r3, [r3, #0]
 8019a74:	68db      	ldr	r3, [r3, #12]
 8019a76:	4a14      	ldr	r2, [pc, #80]	@ (8019ac8 <udp_remove+0x80>)
 8019a78:	6013      	str	r3, [r2, #0]
 8019a7a:	e017      	b.n	8019aac <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019a7c:	4b12      	ldr	r3, [pc, #72]	@ (8019ac8 <udp_remove+0x80>)
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	60fb      	str	r3, [r7, #12]
 8019a82:	e010      	b.n	8019aa6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	68db      	ldr	r3, [r3, #12]
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d009      	beq.n	8019aa0 <udp_remove+0x58>
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	68db      	ldr	r3, [r3, #12]
 8019a90:	687a      	ldr	r2, [r7, #4]
 8019a92:	429a      	cmp	r2, r3
 8019a94:	d104      	bne.n	8019aa0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	68da      	ldr	r2, [r3, #12]
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	60da      	str	r2, [r3, #12]
        break;
 8019a9e:	e005      	b.n	8019aac <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	68db      	ldr	r3, [r3, #12]
 8019aa4:	60fb      	str	r3, [r7, #12]
 8019aa6:	68fb      	ldr	r3, [r7, #12]
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d1eb      	bne.n	8019a84 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8019aac:	6879      	ldr	r1, [r7, #4]
 8019aae:	2000      	movs	r0, #0
 8019ab0:	f7f8 fa26 	bl	8011f00 <memp_free>
}
 8019ab4:	3710      	adds	r7, #16
 8019ab6:	46bd      	mov	sp, r7
 8019ab8:	bd80      	pop	{r7, pc}
 8019aba:	bf00      	nop
 8019abc:	08021198 	.word	0x08021198
 8019ac0:	080214e4 	.word	0x080214e4
 8019ac4:	080211ec 	.word	0x080211ec
 8019ac8:	2000e4b8 	.word	0x2000e4b8

08019acc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8019acc:	b580      	push	{r7, lr}
 8019ace:	b082      	sub	sp, #8
 8019ad0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8019ad2:	2000      	movs	r0, #0
 8019ad4:	f7f8 f99e 	bl	8011e14 <memp_malloc>
 8019ad8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d007      	beq.n	8019af0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8019ae0:	2220      	movs	r2, #32
 8019ae2:	2100      	movs	r1, #0
 8019ae4:	6878      	ldr	r0, [r7, #4]
 8019ae6:	f003 fce0 	bl	801d4aa <memset>
    pcb->ttl = UDP_TTL;
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	22ff      	movs	r2, #255	@ 0xff
 8019aee:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8019af0:	687b      	ldr	r3, [r7, #4]
}
 8019af2:	4618      	mov	r0, r3
 8019af4:	3708      	adds	r7, #8
 8019af6:	46bd      	mov	sp, r7
 8019af8:	bd80      	pop	{r7, pc}

08019afa <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8019afa:	b580      	push	{r7, lr}
 8019afc:	b084      	sub	sp, #16
 8019afe:	af00      	add	r7, sp, #0
 8019b00:	4603      	mov	r3, r0
 8019b02:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8019b04:	f7ff ffe2 	bl	8019acc <udp_new>
 8019b08:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8019b0a:	68fb      	ldr	r3, [r7, #12]
}
 8019b0c:	4618      	mov	r0, r3
 8019b0e:	3710      	adds	r7, #16
 8019b10:	46bd      	mov	sp, r7
 8019b12:	bd80      	pop	{r7, pc}

08019b14 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019b14:	b480      	push	{r7}
 8019b16:	b085      	sub	sp, #20
 8019b18:	af00      	add	r7, sp, #0
 8019b1a:	6078      	str	r0, [r7, #4]
 8019b1c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d01e      	beq.n	8019b62 <udp_netif_ip_addr_changed+0x4e>
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d01a      	beq.n	8019b62 <udp_netif_ip_addr_changed+0x4e>
 8019b2c:	683b      	ldr	r3, [r7, #0]
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d017      	beq.n	8019b62 <udp_netif_ip_addr_changed+0x4e>
 8019b32:	683b      	ldr	r3, [r7, #0]
 8019b34:	681b      	ldr	r3, [r3, #0]
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d013      	beq.n	8019b62 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8019b70 <udp_netif_ip_addr_changed+0x5c>)
 8019b3c:	681b      	ldr	r3, [r3, #0]
 8019b3e:	60fb      	str	r3, [r7, #12]
 8019b40:	e00c      	b.n	8019b5c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	681a      	ldr	r2, [r3, #0]
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	429a      	cmp	r2, r3
 8019b4c:	d103      	bne.n	8019b56 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8019b4e:	683b      	ldr	r3, [r7, #0]
 8019b50:	681a      	ldr	r2, [r3, #0]
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019b56:	68fb      	ldr	r3, [r7, #12]
 8019b58:	68db      	ldr	r3, [r3, #12]
 8019b5a:	60fb      	str	r3, [r7, #12]
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d1ef      	bne.n	8019b42 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8019b62:	bf00      	nop
 8019b64:	3714      	adds	r7, #20
 8019b66:	46bd      	mov	sp, r7
 8019b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b6c:	4770      	bx	lr
 8019b6e:	bf00      	nop
 8019b70:	2000e4b8 	.word	0x2000e4b8

08019b74 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8019b74:	b580      	push	{r7, lr}
 8019b76:	b082      	sub	sp, #8
 8019b78:	af00      	add	r7, sp, #0
 8019b7a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8019b7c:	4915      	ldr	r1, [pc, #84]	@ (8019bd4 <etharp_free_entry+0x60>)
 8019b7e:	687a      	ldr	r2, [r7, #4]
 8019b80:	4613      	mov	r3, r2
 8019b82:	005b      	lsls	r3, r3, #1
 8019b84:	4413      	add	r3, r2
 8019b86:	00db      	lsls	r3, r3, #3
 8019b88:	440b      	add	r3, r1
 8019b8a:	681b      	ldr	r3, [r3, #0]
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d013      	beq.n	8019bb8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8019b90:	4910      	ldr	r1, [pc, #64]	@ (8019bd4 <etharp_free_entry+0x60>)
 8019b92:	687a      	ldr	r2, [r7, #4]
 8019b94:	4613      	mov	r3, r2
 8019b96:	005b      	lsls	r3, r3, #1
 8019b98:	4413      	add	r3, r2
 8019b9a:	00db      	lsls	r3, r3, #3
 8019b9c:	440b      	add	r3, r1
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	f7f9 f851 	bl	8012c48 <pbuf_free>
    arp_table[i].q = NULL;
 8019ba6:	490b      	ldr	r1, [pc, #44]	@ (8019bd4 <etharp_free_entry+0x60>)
 8019ba8:	687a      	ldr	r2, [r7, #4]
 8019baa:	4613      	mov	r3, r2
 8019bac:	005b      	lsls	r3, r3, #1
 8019bae:	4413      	add	r3, r2
 8019bb0:	00db      	lsls	r3, r3, #3
 8019bb2:	440b      	add	r3, r1
 8019bb4:	2200      	movs	r2, #0
 8019bb6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8019bb8:	4906      	ldr	r1, [pc, #24]	@ (8019bd4 <etharp_free_entry+0x60>)
 8019bba:	687a      	ldr	r2, [r7, #4]
 8019bbc:	4613      	mov	r3, r2
 8019bbe:	005b      	lsls	r3, r3, #1
 8019bc0:	4413      	add	r3, r2
 8019bc2:	00db      	lsls	r3, r3, #3
 8019bc4:	440b      	add	r3, r1
 8019bc6:	3314      	adds	r3, #20
 8019bc8:	2200      	movs	r2, #0
 8019bca:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8019bcc:	bf00      	nop
 8019bce:	3708      	adds	r7, #8
 8019bd0:	46bd      	mov	sp, r7
 8019bd2:	bd80      	pop	{r7, pc}
 8019bd4:	2000e4bc 	.word	0x2000e4bc

08019bd8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8019bd8:	b580      	push	{r7, lr}
 8019bda:	b082      	sub	sp, #8
 8019bdc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019bde:	2300      	movs	r3, #0
 8019be0:	607b      	str	r3, [r7, #4]
 8019be2:	e096      	b.n	8019d12 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8019be4:	494f      	ldr	r1, [pc, #316]	@ (8019d24 <etharp_tmr+0x14c>)
 8019be6:	687a      	ldr	r2, [r7, #4]
 8019be8:	4613      	mov	r3, r2
 8019bea:	005b      	lsls	r3, r3, #1
 8019bec:	4413      	add	r3, r2
 8019bee:	00db      	lsls	r3, r3, #3
 8019bf0:	440b      	add	r3, r1
 8019bf2:	3314      	adds	r3, #20
 8019bf4:	781b      	ldrb	r3, [r3, #0]
 8019bf6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8019bf8:	78fb      	ldrb	r3, [r7, #3]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	f000 8086 	beq.w	8019d0c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8019c00:	4948      	ldr	r1, [pc, #288]	@ (8019d24 <etharp_tmr+0x14c>)
 8019c02:	687a      	ldr	r2, [r7, #4]
 8019c04:	4613      	mov	r3, r2
 8019c06:	005b      	lsls	r3, r3, #1
 8019c08:	4413      	add	r3, r2
 8019c0a:	00db      	lsls	r3, r3, #3
 8019c0c:	440b      	add	r3, r1
 8019c0e:	3312      	adds	r3, #18
 8019c10:	881b      	ldrh	r3, [r3, #0]
 8019c12:	3301      	adds	r3, #1
 8019c14:	b298      	uxth	r0, r3
 8019c16:	4943      	ldr	r1, [pc, #268]	@ (8019d24 <etharp_tmr+0x14c>)
 8019c18:	687a      	ldr	r2, [r7, #4]
 8019c1a:	4613      	mov	r3, r2
 8019c1c:	005b      	lsls	r3, r3, #1
 8019c1e:	4413      	add	r3, r2
 8019c20:	00db      	lsls	r3, r3, #3
 8019c22:	440b      	add	r3, r1
 8019c24:	3312      	adds	r3, #18
 8019c26:	4602      	mov	r2, r0
 8019c28:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019c2a:	493e      	ldr	r1, [pc, #248]	@ (8019d24 <etharp_tmr+0x14c>)
 8019c2c:	687a      	ldr	r2, [r7, #4]
 8019c2e:	4613      	mov	r3, r2
 8019c30:	005b      	lsls	r3, r3, #1
 8019c32:	4413      	add	r3, r2
 8019c34:	00db      	lsls	r3, r3, #3
 8019c36:	440b      	add	r3, r1
 8019c38:	3312      	adds	r3, #18
 8019c3a:	881b      	ldrh	r3, [r3, #0]
 8019c3c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8019c40:	d215      	bcs.n	8019c6e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019c42:	4938      	ldr	r1, [pc, #224]	@ (8019d24 <etharp_tmr+0x14c>)
 8019c44:	687a      	ldr	r2, [r7, #4]
 8019c46:	4613      	mov	r3, r2
 8019c48:	005b      	lsls	r3, r3, #1
 8019c4a:	4413      	add	r3, r2
 8019c4c:	00db      	lsls	r3, r3, #3
 8019c4e:	440b      	add	r3, r1
 8019c50:	3314      	adds	r3, #20
 8019c52:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019c54:	2b01      	cmp	r3, #1
 8019c56:	d10e      	bne.n	8019c76 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8019c58:	4932      	ldr	r1, [pc, #200]	@ (8019d24 <etharp_tmr+0x14c>)
 8019c5a:	687a      	ldr	r2, [r7, #4]
 8019c5c:	4613      	mov	r3, r2
 8019c5e:	005b      	lsls	r3, r3, #1
 8019c60:	4413      	add	r3, r2
 8019c62:	00db      	lsls	r3, r3, #3
 8019c64:	440b      	add	r3, r1
 8019c66:	3312      	adds	r3, #18
 8019c68:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019c6a:	2b04      	cmp	r3, #4
 8019c6c:	d903      	bls.n	8019c76 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8019c6e:	6878      	ldr	r0, [r7, #4]
 8019c70:	f7ff ff80 	bl	8019b74 <etharp_free_entry>
 8019c74:	e04a      	b.n	8019d0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8019c76:	492b      	ldr	r1, [pc, #172]	@ (8019d24 <etharp_tmr+0x14c>)
 8019c78:	687a      	ldr	r2, [r7, #4]
 8019c7a:	4613      	mov	r3, r2
 8019c7c:	005b      	lsls	r3, r3, #1
 8019c7e:	4413      	add	r3, r2
 8019c80:	00db      	lsls	r3, r3, #3
 8019c82:	440b      	add	r3, r1
 8019c84:	3314      	adds	r3, #20
 8019c86:	781b      	ldrb	r3, [r3, #0]
 8019c88:	2b03      	cmp	r3, #3
 8019c8a:	d10a      	bne.n	8019ca2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8019c8c:	4925      	ldr	r1, [pc, #148]	@ (8019d24 <etharp_tmr+0x14c>)
 8019c8e:	687a      	ldr	r2, [r7, #4]
 8019c90:	4613      	mov	r3, r2
 8019c92:	005b      	lsls	r3, r3, #1
 8019c94:	4413      	add	r3, r2
 8019c96:	00db      	lsls	r3, r3, #3
 8019c98:	440b      	add	r3, r1
 8019c9a:	3314      	adds	r3, #20
 8019c9c:	2204      	movs	r2, #4
 8019c9e:	701a      	strb	r2, [r3, #0]
 8019ca0:	e034      	b.n	8019d0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8019ca2:	4920      	ldr	r1, [pc, #128]	@ (8019d24 <etharp_tmr+0x14c>)
 8019ca4:	687a      	ldr	r2, [r7, #4]
 8019ca6:	4613      	mov	r3, r2
 8019ca8:	005b      	lsls	r3, r3, #1
 8019caa:	4413      	add	r3, r2
 8019cac:	00db      	lsls	r3, r3, #3
 8019cae:	440b      	add	r3, r1
 8019cb0:	3314      	adds	r3, #20
 8019cb2:	781b      	ldrb	r3, [r3, #0]
 8019cb4:	2b04      	cmp	r3, #4
 8019cb6:	d10a      	bne.n	8019cce <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8019cb8:	491a      	ldr	r1, [pc, #104]	@ (8019d24 <etharp_tmr+0x14c>)
 8019cba:	687a      	ldr	r2, [r7, #4]
 8019cbc:	4613      	mov	r3, r2
 8019cbe:	005b      	lsls	r3, r3, #1
 8019cc0:	4413      	add	r3, r2
 8019cc2:	00db      	lsls	r3, r3, #3
 8019cc4:	440b      	add	r3, r1
 8019cc6:	3314      	adds	r3, #20
 8019cc8:	2202      	movs	r2, #2
 8019cca:	701a      	strb	r2, [r3, #0]
 8019ccc:	e01e      	b.n	8019d0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019cce:	4915      	ldr	r1, [pc, #84]	@ (8019d24 <etharp_tmr+0x14c>)
 8019cd0:	687a      	ldr	r2, [r7, #4]
 8019cd2:	4613      	mov	r3, r2
 8019cd4:	005b      	lsls	r3, r3, #1
 8019cd6:	4413      	add	r3, r2
 8019cd8:	00db      	lsls	r3, r3, #3
 8019cda:	440b      	add	r3, r1
 8019cdc:	3314      	adds	r3, #20
 8019cde:	781b      	ldrb	r3, [r3, #0]
 8019ce0:	2b01      	cmp	r3, #1
 8019ce2:	d113      	bne.n	8019d0c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8019ce4:	490f      	ldr	r1, [pc, #60]	@ (8019d24 <etharp_tmr+0x14c>)
 8019ce6:	687a      	ldr	r2, [r7, #4]
 8019ce8:	4613      	mov	r3, r2
 8019cea:	005b      	lsls	r3, r3, #1
 8019cec:	4413      	add	r3, r2
 8019cee:	00db      	lsls	r3, r3, #3
 8019cf0:	440b      	add	r3, r1
 8019cf2:	3308      	adds	r3, #8
 8019cf4:	6818      	ldr	r0, [r3, #0]
 8019cf6:	687a      	ldr	r2, [r7, #4]
 8019cf8:	4613      	mov	r3, r2
 8019cfa:	005b      	lsls	r3, r3, #1
 8019cfc:	4413      	add	r3, r2
 8019cfe:	00db      	lsls	r3, r3, #3
 8019d00:	4a08      	ldr	r2, [pc, #32]	@ (8019d24 <etharp_tmr+0x14c>)
 8019d02:	4413      	add	r3, r2
 8019d04:	3304      	adds	r3, #4
 8019d06:	4619      	mov	r1, r3
 8019d08:	f000 fe6e 	bl	801a9e8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	3301      	adds	r3, #1
 8019d10:	607b      	str	r3, [r7, #4]
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	2b09      	cmp	r3, #9
 8019d16:	f77f af65 	ble.w	8019be4 <etharp_tmr+0xc>
      }
    }
  }
}
 8019d1a:	bf00      	nop
 8019d1c:	bf00      	nop
 8019d1e:	3708      	adds	r7, #8
 8019d20:	46bd      	mov	sp, r7
 8019d22:	bd80      	pop	{r7, pc}
 8019d24:	2000e4bc 	.word	0x2000e4bc

08019d28 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8019d28:	b580      	push	{r7, lr}
 8019d2a:	b08a      	sub	sp, #40	@ 0x28
 8019d2c:	af00      	add	r7, sp, #0
 8019d2e:	60f8      	str	r0, [r7, #12]
 8019d30:	460b      	mov	r3, r1
 8019d32:	607a      	str	r2, [r7, #4]
 8019d34:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8019d36:	230a      	movs	r3, #10
 8019d38:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8019d3a:	230a      	movs	r3, #10
 8019d3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8019d3e:	230a      	movs	r3, #10
 8019d40:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8019d42:	2300      	movs	r3, #0
 8019d44:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8019d46:	230a      	movs	r3, #10
 8019d48:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8019d4a:	2300      	movs	r3, #0
 8019d4c:	83bb      	strh	r3, [r7, #28]
 8019d4e:	2300      	movs	r3, #0
 8019d50:	837b      	strh	r3, [r7, #26]
 8019d52:	2300      	movs	r3, #0
 8019d54:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019d56:	2300      	movs	r3, #0
 8019d58:	843b      	strh	r3, [r7, #32]
 8019d5a:	e0ae      	b.n	8019eba <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8019d5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019d60:	49a6      	ldr	r1, [pc, #664]	@ (8019ffc <etharp_find_entry+0x2d4>)
 8019d62:	4613      	mov	r3, r2
 8019d64:	005b      	lsls	r3, r3, #1
 8019d66:	4413      	add	r3, r2
 8019d68:	00db      	lsls	r3, r3, #3
 8019d6a:	440b      	add	r3, r1
 8019d6c:	3314      	adds	r3, #20
 8019d6e:	781b      	ldrb	r3, [r3, #0]
 8019d70:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8019d72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8019d76:	2b0a      	cmp	r3, #10
 8019d78:	d105      	bne.n	8019d86 <etharp_find_entry+0x5e>
 8019d7a:	7dfb      	ldrb	r3, [r7, #23]
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d102      	bne.n	8019d86 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8019d80:	8c3b      	ldrh	r3, [r7, #32]
 8019d82:	847b      	strh	r3, [r7, #34]	@ 0x22
 8019d84:	e095      	b.n	8019eb2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8019d86:	7dfb      	ldrb	r3, [r7, #23]
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	f000 8092 	beq.w	8019eb2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8019d8e:	7dfb      	ldrb	r3, [r7, #23]
 8019d90:	2b01      	cmp	r3, #1
 8019d92:	d009      	beq.n	8019da8 <etharp_find_entry+0x80>
 8019d94:	7dfb      	ldrb	r3, [r7, #23]
 8019d96:	2b01      	cmp	r3, #1
 8019d98:	d806      	bhi.n	8019da8 <etharp_find_entry+0x80>
 8019d9a:	4b99      	ldr	r3, [pc, #612]	@ (801a000 <etharp_find_entry+0x2d8>)
 8019d9c:	f240 1223 	movw	r2, #291	@ 0x123
 8019da0:	4998      	ldr	r1, [pc, #608]	@ (801a004 <etharp_find_entry+0x2dc>)
 8019da2:	4899      	ldr	r0, [pc, #612]	@ (801a008 <etharp_find_entry+0x2e0>)
 8019da4:	f003 fae2 	bl	801d36c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8019da8:	68fb      	ldr	r3, [r7, #12]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d020      	beq.n	8019df0 <etharp_find_entry+0xc8>
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	6819      	ldr	r1, [r3, #0]
 8019db2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019db6:	4891      	ldr	r0, [pc, #580]	@ (8019ffc <etharp_find_entry+0x2d4>)
 8019db8:	4613      	mov	r3, r2
 8019dba:	005b      	lsls	r3, r3, #1
 8019dbc:	4413      	add	r3, r2
 8019dbe:	00db      	lsls	r3, r3, #3
 8019dc0:	4403      	add	r3, r0
 8019dc2:	3304      	adds	r3, #4
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	4299      	cmp	r1, r3
 8019dc8:	d112      	bne.n	8019df0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	d00c      	beq.n	8019dea <etharp_find_entry+0xc2>
 8019dd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019dd4:	4989      	ldr	r1, [pc, #548]	@ (8019ffc <etharp_find_entry+0x2d4>)
 8019dd6:	4613      	mov	r3, r2
 8019dd8:	005b      	lsls	r3, r3, #1
 8019dda:	4413      	add	r3, r2
 8019ddc:	00db      	lsls	r3, r3, #3
 8019dde:	440b      	add	r3, r1
 8019de0:	3308      	adds	r3, #8
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	687a      	ldr	r2, [r7, #4]
 8019de6:	429a      	cmp	r2, r3
 8019de8:	d102      	bne.n	8019df0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8019dea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019dee:	e100      	b.n	8019ff2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8019df0:	7dfb      	ldrb	r3, [r7, #23]
 8019df2:	2b01      	cmp	r3, #1
 8019df4:	d140      	bne.n	8019e78 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8019df6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019dfa:	4980      	ldr	r1, [pc, #512]	@ (8019ffc <etharp_find_entry+0x2d4>)
 8019dfc:	4613      	mov	r3, r2
 8019dfe:	005b      	lsls	r3, r3, #1
 8019e00:	4413      	add	r3, r2
 8019e02:	00db      	lsls	r3, r3, #3
 8019e04:	440b      	add	r3, r1
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d01a      	beq.n	8019e42 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8019e0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019e10:	497a      	ldr	r1, [pc, #488]	@ (8019ffc <etharp_find_entry+0x2d4>)
 8019e12:	4613      	mov	r3, r2
 8019e14:	005b      	lsls	r3, r3, #1
 8019e16:	4413      	add	r3, r2
 8019e18:	00db      	lsls	r3, r3, #3
 8019e1a:	440b      	add	r3, r1
 8019e1c:	3312      	adds	r3, #18
 8019e1e:	881b      	ldrh	r3, [r3, #0]
 8019e20:	8bba      	ldrh	r2, [r7, #28]
 8019e22:	429a      	cmp	r2, r3
 8019e24:	d845      	bhi.n	8019eb2 <etharp_find_entry+0x18a>
            old_queue = i;
 8019e26:	8c3b      	ldrh	r3, [r7, #32]
 8019e28:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8019e2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019e2e:	4973      	ldr	r1, [pc, #460]	@ (8019ffc <etharp_find_entry+0x2d4>)
 8019e30:	4613      	mov	r3, r2
 8019e32:	005b      	lsls	r3, r3, #1
 8019e34:	4413      	add	r3, r2
 8019e36:	00db      	lsls	r3, r3, #3
 8019e38:	440b      	add	r3, r1
 8019e3a:	3312      	adds	r3, #18
 8019e3c:	881b      	ldrh	r3, [r3, #0]
 8019e3e:	83bb      	strh	r3, [r7, #28]
 8019e40:	e037      	b.n	8019eb2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8019e42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019e46:	496d      	ldr	r1, [pc, #436]	@ (8019ffc <etharp_find_entry+0x2d4>)
 8019e48:	4613      	mov	r3, r2
 8019e4a:	005b      	lsls	r3, r3, #1
 8019e4c:	4413      	add	r3, r2
 8019e4e:	00db      	lsls	r3, r3, #3
 8019e50:	440b      	add	r3, r1
 8019e52:	3312      	adds	r3, #18
 8019e54:	881b      	ldrh	r3, [r3, #0]
 8019e56:	8b7a      	ldrh	r2, [r7, #26]
 8019e58:	429a      	cmp	r2, r3
 8019e5a:	d82a      	bhi.n	8019eb2 <etharp_find_entry+0x18a>
            old_pending = i;
 8019e5c:	8c3b      	ldrh	r3, [r7, #32]
 8019e5e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8019e60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019e64:	4965      	ldr	r1, [pc, #404]	@ (8019ffc <etharp_find_entry+0x2d4>)
 8019e66:	4613      	mov	r3, r2
 8019e68:	005b      	lsls	r3, r3, #1
 8019e6a:	4413      	add	r3, r2
 8019e6c:	00db      	lsls	r3, r3, #3
 8019e6e:	440b      	add	r3, r1
 8019e70:	3312      	adds	r3, #18
 8019e72:	881b      	ldrh	r3, [r3, #0]
 8019e74:	837b      	strh	r3, [r7, #26]
 8019e76:	e01c      	b.n	8019eb2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8019e78:	7dfb      	ldrb	r3, [r7, #23]
 8019e7a:	2b01      	cmp	r3, #1
 8019e7c:	d919      	bls.n	8019eb2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8019e7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019e82:	495e      	ldr	r1, [pc, #376]	@ (8019ffc <etharp_find_entry+0x2d4>)
 8019e84:	4613      	mov	r3, r2
 8019e86:	005b      	lsls	r3, r3, #1
 8019e88:	4413      	add	r3, r2
 8019e8a:	00db      	lsls	r3, r3, #3
 8019e8c:	440b      	add	r3, r1
 8019e8e:	3312      	adds	r3, #18
 8019e90:	881b      	ldrh	r3, [r3, #0]
 8019e92:	8b3a      	ldrh	r2, [r7, #24]
 8019e94:	429a      	cmp	r2, r3
 8019e96:	d80c      	bhi.n	8019eb2 <etharp_find_entry+0x18a>
            old_stable = i;
 8019e98:	8c3b      	ldrh	r3, [r7, #32]
 8019e9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8019e9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019ea0:	4956      	ldr	r1, [pc, #344]	@ (8019ffc <etharp_find_entry+0x2d4>)
 8019ea2:	4613      	mov	r3, r2
 8019ea4:	005b      	lsls	r3, r3, #1
 8019ea6:	4413      	add	r3, r2
 8019ea8:	00db      	lsls	r3, r3, #3
 8019eaa:	440b      	add	r3, r1
 8019eac:	3312      	adds	r3, #18
 8019eae:	881b      	ldrh	r3, [r3, #0]
 8019eb0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019eb2:	8c3b      	ldrh	r3, [r7, #32]
 8019eb4:	3301      	adds	r3, #1
 8019eb6:	b29b      	uxth	r3, r3
 8019eb8:	843b      	strh	r3, [r7, #32]
 8019eba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019ebe:	2b09      	cmp	r3, #9
 8019ec0:	f77f af4c 	ble.w	8019d5c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8019ec4:	7afb      	ldrb	r3, [r7, #11]
 8019ec6:	f003 0302 	and.w	r3, r3, #2
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	d108      	bne.n	8019ee0 <etharp_find_entry+0x1b8>
 8019ece:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8019ed2:	2b0a      	cmp	r3, #10
 8019ed4:	d107      	bne.n	8019ee6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8019ed6:	7afb      	ldrb	r3, [r7, #11]
 8019ed8:	f003 0301 	and.w	r3, r3, #1
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	d102      	bne.n	8019ee6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8019ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8019ee4:	e085      	b.n	8019ff2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8019ee6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8019eea:	2b09      	cmp	r3, #9
 8019eec:	dc02      	bgt.n	8019ef4 <etharp_find_entry+0x1cc>
    i = empty;
 8019eee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019ef0:	843b      	strh	r3, [r7, #32]
 8019ef2:	e039      	b.n	8019f68 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8019ef4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8019ef8:	2b09      	cmp	r3, #9
 8019efa:	dc14      	bgt.n	8019f26 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8019efc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019efe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8019f00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019f04:	493d      	ldr	r1, [pc, #244]	@ (8019ffc <etharp_find_entry+0x2d4>)
 8019f06:	4613      	mov	r3, r2
 8019f08:	005b      	lsls	r3, r3, #1
 8019f0a:	4413      	add	r3, r2
 8019f0c:	00db      	lsls	r3, r3, #3
 8019f0e:	440b      	add	r3, r1
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d018      	beq.n	8019f48 <etharp_find_entry+0x220>
 8019f16:	4b3a      	ldr	r3, [pc, #232]	@ (801a000 <etharp_find_entry+0x2d8>)
 8019f18:	f240 126d 	movw	r2, #365	@ 0x16d
 8019f1c:	493b      	ldr	r1, [pc, #236]	@ (801a00c <etharp_find_entry+0x2e4>)
 8019f1e:	483a      	ldr	r0, [pc, #232]	@ (801a008 <etharp_find_entry+0x2e0>)
 8019f20:	f003 fa24 	bl	801d36c <iprintf>
 8019f24:	e010      	b.n	8019f48 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8019f26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8019f2a:	2b09      	cmp	r3, #9
 8019f2c:	dc02      	bgt.n	8019f34 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8019f2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019f30:	843b      	strh	r3, [r7, #32]
 8019f32:	e009      	b.n	8019f48 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8019f34:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019f38:	2b09      	cmp	r3, #9
 8019f3a:	dc02      	bgt.n	8019f42 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8019f3c:	8bfb      	ldrh	r3, [r7, #30]
 8019f3e:	843b      	strh	r3, [r7, #32]
 8019f40:	e002      	b.n	8019f48 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8019f42:	f04f 33ff 	mov.w	r3, #4294967295
 8019f46:	e054      	b.n	8019ff2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019f48:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019f4c:	2b09      	cmp	r3, #9
 8019f4e:	dd06      	ble.n	8019f5e <etharp_find_entry+0x236>
 8019f50:	4b2b      	ldr	r3, [pc, #172]	@ (801a000 <etharp_find_entry+0x2d8>)
 8019f52:	f240 127f 	movw	r2, #383	@ 0x17f
 8019f56:	492e      	ldr	r1, [pc, #184]	@ (801a010 <etharp_find_entry+0x2e8>)
 8019f58:	482b      	ldr	r0, [pc, #172]	@ (801a008 <etharp_find_entry+0x2e0>)
 8019f5a:	f003 fa07 	bl	801d36c <iprintf>
    etharp_free_entry(i);
 8019f5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019f62:	4618      	mov	r0, r3
 8019f64:	f7ff fe06 	bl	8019b74 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019f68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019f6c:	2b09      	cmp	r3, #9
 8019f6e:	dd06      	ble.n	8019f7e <etharp_find_entry+0x256>
 8019f70:	4b23      	ldr	r3, [pc, #140]	@ (801a000 <etharp_find_entry+0x2d8>)
 8019f72:	f240 1283 	movw	r2, #387	@ 0x183
 8019f76:	4926      	ldr	r1, [pc, #152]	@ (801a010 <etharp_find_entry+0x2e8>)
 8019f78:	4823      	ldr	r0, [pc, #140]	@ (801a008 <etharp_find_entry+0x2e0>)
 8019f7a:	f003 f9f7 	bl	801d36c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8019f7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019f82:	491e      	ldr	r1, [pc, #120]	@ (8019ffc <etharp_find_entry+0x2d4>)
 8019f84:	4613      	mov	r3, r2
 8019f86:	005b      	lsls	r3, r3, #1
 8019f88:	4413      	add	r3, r2
 8019f8a:	00db      	lsls	r3, r3, #3
 8019f8c:	440b      	add	r3, r1
 8019f8e:	3314      	adds	r3, #20
 8019f90:	781b      	ldrb	r3, [r3, #0]
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d006      	beq.n	8019fa4 <etharp_find_entry+0x27c>
 8019f96:	4b1a      	ldr	r3, [pc, #104]	@ (801a000 <etharp_find_entry+0x2d8>)
 8019f98:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8019f9c:	491d      	ldr	r1, [pc, #116]	@ (801a014 <etharp_find_entry+0x2ec>)
 8019f9e:	481a      	ldr	r0, [pc, #104]	@ (801a008 <etharp_find_entry+0x2e0>)
 8019fa0:	f003 f9e4 	bl	801d36c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8019fa4:	68fb      	ldr	r3, [r7, #12]
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	d00b      	beq.n	8019fc2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8019faa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019fae:	68fb      	ldr	r3, [r7, #12]
 8019fb0:	6819      	ldr	r1, [r3, #0]
 8019fb2:	4812      	ldr	r0, [pc, #72]	@ (8019ffc <etharp_find_entry+0x2d4>)
 8019fb4:	4613      	mov	r3, r2
 8019fb6:	005b      	lsls	r3, r3, #1
 8019fb8:	4413      	add	r3, r2
 8019fba:	00db      	lsls	r3, r3, #3
 8019fbc:	4403      	add	r3, r0
 8019fbe:	3304      	adds	r3, #4
 8019fc0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8019fc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019fc6:	490d      	ldr	r1, [pc, #52]	@ (8019ffc <etharp_find_entry+0x2d4>)
 8019fc8:	4613      	mov	r3, r2
 8019fca:	005b      	lsls	r3, r3, #1
 8019fcc:	4413      	add	r3, r2
 8019fce:	00db      	lsls	r3, r3, #3
 8019fd0:	440b      	add	r3, r1
 8019fd2:	3312      	adds	r3, #18
 8019fd4:	2200      	movs	r2, #0
 8019fd6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8019fd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019fdc:	4907      	ldr	r1, [pc, #28]	@ (8019ffc <etharp_find_entry+0x2d4>)
 8019fde:	4613      	mov	r3, r2
 8019fe0:	005b      	lsls	r3, r3, #1
 8019fe2:	4413      	add	r3, r2
 8019fe4:	00db      	lsls	r3, r3, #3
 8019fe6:	440b      	add	r3, r1
 8019fe8:	3308      	adds	r3, #8
 8019fea:	687a      	ldr	r2, [r7, #4]
 8019fec:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8019fee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	3728      	adds	r7, #40	@ 0x28
 8019ff6:	46bd      	mov	sp, r7
 8019ff8:	bd80      	pop	{r7, pc}
 8019ffa:	bf00      	nop
 8019ffc:	2000e4bc 	.word	0x2000e4bc
 801a000:	080214fc 	.word	0x080214fc
 801a004:	08021534 	.word	0x08021534
 801a008:	08021574 	.word	0x08021574
 801a00c:	0802159c 	.word	0x0802159c
 801a010:	080215b4 	.word	0x080215b4
 801a014:	080215c8 	.word	0x080215c8

0801a018 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801a018:	b580      	push	{r7, lr}
 801a01a:	b088      	sub	sp, #32
 801a01c:	af02      	add	r7, sp, #8
 801a01e:	60f8      	str	r0, [r7, #12]
 801a020:	60b9      	str	r1, [r7, #8]
 801a022:	607a      	str	r2, [r7, #4]
 801a024:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a026:	68fb      	ldr	r3, [r7, #12]
 801a028:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a02c:	2b06      	cmp	r3, #6
 801a02e:	d006      	beq.n	801a03e <etharp_update_arp_entry+0x26>
 801a030:	4b48      	ldr	r3, [pc, #288]	@ (801a154 <etharp_update_arp_entry+0x13c>)
 801a032:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801a036:	4948      	ldr	r1, [pc, #288]	@ (801a158 <etharp_update_arp_entry+0x140>)
 801a038:	4848      	ldr	r0, [pc, #288]	@ (801a15c <etharp_update_arp_entry+0x144>)
 801a03a:	f003 f997 	bl	801d36c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801a03e:	68bb      	ldr	r3, [r7, #8]
 801a040:	2b00      	cmp	r3, #0
 801a042:	d012      	beq.n	801a06a <etharp_update_arp_entry+0x52>
 801a044:	68bb      	ldr	r3, [r7, #8]
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d00e      	beq.n	801a06a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a04c:	68bb      	ldr	r3, [r7, #8]
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	68f9      	ldr	r1, [r7, #12]
 801a052:	4618      	mov	r0, r3
 801a054:	f001 f8fe 	bl	801b254 <ip4_addr_isbroadcast_u32>
 801a058:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d105      	bne.n	801a06a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801a05e:	68bb      	ldr	r3, [r7, #8]
 801a060:	681b      	ldr	r3, [r3, #0]
 801a062:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a066:	2be0      	cmp	r3, #224	@ 0xe0
 801a068:	d102      	bne.n	801a070 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a06a:	f06f 030f 	mvn.w	r3, #15
 801a06e:	e06c      	b.n	801a14a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801a070:	78fb      	ldrb	r3, [r7, #3]
 801a072:	68fa      	ldr	r2, [r7, #12]
 801a074:	4619      	mov	r1, r3
 801a076:	68b8      	ldr	r0, [r7, #8]
 801a078:	f7ff fe56 	bl	8019d28 <etharp_find_entry>
 801a07c:	4603      	mov	r3, r0
 801a07e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801a080:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a084:	2b00      	cmp	r3, #0
 801a086:	da02      	bge.n	801a08e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801a088:	8afb      	ldrh	r3, [r7, #22]
 801a08a:	b25b      	sxtb	r3, r3
 801a08c:	e05d      	b.n	801a14a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801a08e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a092:	4933      	ldr	r1, [pc, #204]	@ (801a160 <etharp_update_arp_entry+0x148>)
 801a094:	4613      	mov	r3, r2
 801a096:	005b      	lsls	r3, r3, #1
 801a098:	4413      	add	r3, r2
 801a09a:	00db      	lsls	r3, r3, #3
 801a09c:	440b      	add	r3, r1
 801a09e:	3314      	adds	r3, #20
 801a0a0:	2202      	movs	r2, #2
 801a0a2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801a0a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a0a8:	492d      	ldr	r1, [pc, #180]	@ (801a160 <etharp_update_arp_entry+0x148>)
 801a0aa:	4613      	mov	r3, r2
 801a0ac:	005b      	lsls	r3, r3, #1
 801a0ae:	4413      	add	r3, r2
 801a0b0:	00db      	lsls	r3, r3, #3
 801a0b2:	440b      	add	r3, r1
 801a0b4:	3308      	adds	r3, #8
 801a0b6:	68fa      	ldr	r2, [r7, #12]
 801a0b8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801a0ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a0be:	4613      	mov	r3, r2
 801a0c0:	005b      	lsls	r3, r3, #1
 801a0c2:	4413      	add	r3, r2
 801a0c4:	00db      	lsls	r3, r3, #3
 801a0c6:	3308      	adds	r3, #8
 801a0c8:	4a25      	ldr	r2, [pc, #148]	@ (801a160 <etharp_update_arp_entry+0x148>)
 801a0ca:	4413      	add	r3, r2
 801a0cc:	3304      	adds	r3, #4
 801a0ce:	2206      	movs	r2, #6
 801a0d0:	6879      	ldr	r1, [r7, #4]
 801a0d2:	4618      	mov	r0, r3
 801a0d4:	f003 fad7 	bl	801d686 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801a0d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a0dc:	4920      	ldr	r1, [pc, #128]	@ (801a160 <etharp_update_arp_entry+0x148>)
 801a0de:	4613      	mov	r3, r2
 801a0e0:	005b      	lsls	r3, r3, #1
 801a0e2:	4413      	add	r3, r2
 801a0e4:	00db      	lsls	r3, r3, #3
 801a0e6:	440b      	add	r3, r1
 801a0e8:	3312      	adds	r3, #18
 801a0ea:	2200      	movs	r2, #0
 801a0ec:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801a0ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a0f2:	491b      	ldr	r1, [pc, #108]	@ (801a160 <etharp_update_arp_entry+0x148>)
 801a0f4:	4613      	mov	r3, r2
 801a0f6:	005b      	lsls	r3, r3, #1
 801a0f8:	4413      	add	r3, r2
 801a0fa:	00db      	lsls	r3, r3, #3
 801a0fc:	440b      	add	r3, r1
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	2b00      	cmp	r3, #0
 801a102:	d021      	beq.n	801a148 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801a104:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a108:	4915      	ldr	r1, [pc, #84]	@ (801a160 <etharp_update_arp_entry+0x148>)
 801a10a:	4613      	mov	r3, r2
 801a10c:	005b      	lsls	r3, r3, #1
 801a10e:	4413      	add	r3, r2
 801a110:	00db      	lsls	r3, r3, #3
 801a112:	440b      	add	r3, r1
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801a118:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a11c:	4910      	ldr	r1, [pc, #64]	@ (801a160 <etharp_update_arp_entry+0x148>)
 801a11e:	4613      	mov	r3, r2
 801a120:	005b      	lsls	r3, r3, #1
 801a122:	4413      	add	r3, r2
 801a124:	00db      	lsls	r3, r3, #3
 801a126:	440b      	add	r3, r1
 801a128:	2200      	movs	r2, #0
 801a12a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801a132:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a136:	9300      	str	r3, [sp, #0]
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	6939      	ldr	r1, [r7, #16]
 801a13c:	68f8      	ldr	r0, [r7, #12]
 801a13e:	f001 ff97 	bl	801c070 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801a142:	6938      	ldr	r0, [r7, #16]
 801a144:	f7f8 fd80 	bl	8012c48 <pbuf_free>
  }
  return ERR_OK;
 801a148:	2300      	movs	r3, #0
}
 801a14a:	4618      	mov	r0, r3
 801a14c:	3718      	adds	r7, #24
 801a14e:	46bd      	mov	sp, r7
 801a150:	bd80      	pop	{r7, pc}
 801a152:	bf00      	nop
 801a154:	080214fc 	.word	0x080214fc
 801a158:	080215f4 	.word	0x080215f4
 801a15c:	08021574 	.word	0x08021574
 801a160:	2000e4bc 	.word	0x2000e4bc

0801a164 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801a164:	b580      	push	{r7, lr}
 801a166:	b084      	sub	sp, #16
 801a168:	af00      	add	r7, sp, #0
 801a16a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a16c:	2300      	movs	r3, #0
 801a16e:	60fb      	str	r3, [r7, #12]
 801a170:	e01e      	b.n	801a1b0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801a172:	4913      	ldr	r1, [pc, #76]	@ (801a1c0 <etharp_cleanup_netif+0x5c>)
 801a174:	68fa      	ldr	r2, [r7, #12]
 801a176:	4613      	mov	r3, r2
 801a178:	005b      	lsls	r3, r3, #1
 801a17a:	4413      	add	r3, r2
 801a17c:	00db      	lsls	r3, r3, #3
 801a17e:	440b      	add	r3, r1
 801a180:	3314      	adds	r3, #20
 801a182:	781b      	ldrb	r3, [r3, #0]
 801a184:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801a186:	7afb      	ldrb	r3, [r7, #11]
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d00e      	beq.n	801a1aa <etharp_cleanup_netif+0x46>
 801a18c:	490c      	ldr	r1, [pc, #48]	@ (801a1c0 <etharp_cleanup_netif+0x5c>)
 801a18e:	68fa      	ldr	r2, [r7, #12]
 801a190:	4613      	mov	r3, r2
 801a192:	005b      	lsls	r3, r3, #1
 801a194:	4413      	add	r3, r2
 801a196:	00db      	lsls	r3, r3, #3
 801a198:	440b      	add	r3, r1
 801a19a:	3308      	adds	r3, #8
 801a19c:	681b      	ldr	r3, [r3, #0]
 801a19e:	687a      	ldr	r2, [r7, #4]
 801a1a0:	429a      	cmp	r2, r3
 801a1a2:	d102      	bne.n	801a1aa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801a1a4:	68f8      	ldr	r0, [r7, #12]
 801a1a6:	f7ff fce5 	bl	8019b74 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	3301      	adds	r3, #1
 801a1ae:	60fb      	str	r3, [r7, #12]
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	2b09      	cmp	r3, #9
 801a1b4:	dddd      	ble.n	801a172 <etharp_cleanup_netif+0xe>
    }
  }
}
 801a1b6:	bf00      	nop
 801a1b8:	bf00      	nop
 801a1ba:	3710      	adds	r7, #16
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	bd80      	pop	{r7, pc}
 801a1c0:	2000e4bc 	.word	0x2000e4bc

0801a1c4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801a1c4:	b5b0      	push	{r4, r5, r7, lr}
 801a1c6:	b08a      	sub	sp, #40	@ 0x28
 801a1c8:	af04      	add	r7, sp, #16
 801a1ca:	6078      	str	r0, [r7, #4]
 801a1cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a1ce:	683b      	ldr	r3, [r7, #0]
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d107      	bne.n	801a1e4 <etharp_input+0x20>
 801a1d4:	4b3d      	ldr	r3, [pc, #244]	@ (801a2cc <etharp_input+0x108>)
 801a1d6:	f240 228a 	movw	r2, #650	@ 0x28a
 801a1da:	493d      	ldr	r1, [pc, #244]	@ (801a2d0 <etharp_input+0x10c>)
 801a1dc:	483d      	ldr	r0, [pc, #244]	@ (801a2d4 <etharp_input+0x110>)
 801a1de:	f003 f8c5 	bl	801d36c <iprintf>
 801a1e2:	e06f      	b.n	801a2c4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	685b      	ldr	r3, [r3, #4]
 801a1e8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a1ea:	693b      	ldr	r3, [r7, #16]
 801a1ec:	881b      	ldrh	r3, [r3, #0]
 801a1ee:	b29b      	uxth	r3, r3
 801a1f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a1f4:	d10c      	bne.n	801a210 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a1f6:	693b      	ldr	r3, [r7, #16]
 801a1f8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a1fa:	2b06      	cmp	r3, #6
 801a1fc:	d108      	bne.n	801a210 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a1fe:	693b      	ldr	r3, [r7, #16]
 801a200:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a202:	2b04      	cmp	r3, #4
 801a204:	d104      	bne.n	801a210 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a206:	693b      	ldr	r3, [r7, #16]
 801a208:	885b      	ldrh	r3, [r3, #2]
 801a20a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a20c:	2b08      	cmp	r3, #8
 801a20e:	d003      	beq.n	801a218 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a210:	6878      	ldr	r0, [r7, #4]
 801a212:	f7f8 fd19 	bl	8012c48 <pbuf_free>
    return;
 801a216:	e055      	b.n	801a2c4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a218:	693b      	ldr	r3, [r7, #16]
 801a21a:	330e      	adds	r3, #14
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a220:	693b      	ldr	r3, [r7, #16]
 801a222:	3318      	adds	r3, #24
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a228:	683b      	ldr	r3, [r7, #0]
 801a22a:	3304      	adds	r3, #4
 801a22c:	681b      	ldr	r3, [r3, #0]
 801a22e:	2b00      	cmp	r3, #0
 801a230:	d102      	bne.n	801a238 <etharp_input+0x74>
    for_us = 0;
 801a232:	2300      	movs	r3, #0
 801a234:	75fb      	strb	r3, [r7, #23]
 801a236:	e009      	b.n	801a24c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a238:	68ba      	ldr	r2, [r7, #8]
 801a23a:	683b      	ldr	r3, [r7, #0]
 801a23c:	3304      	adds	r3, #4
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	429a      	cmp	r2, r3
 801a242:	bf0c      	ite	eq
 801a244:	2301      	moveq	r3, #1
 801a246:	2300      	movne	r3, #0
 801a248:	b2db      	uxtb	r3, r3
 801a24a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a24c:	693b      	ldr	r3, [r7, #16]
 801a24e:	f103 0208 	add.w	r2, r3, #8
 801a252:	7dfb      	ldrb	r3, [r7, #23]
 801a254:	2b00      	cmp	r3, #0
 801a256:	d001      	beq.n	801a25c <etharp_input+0x98>
 801a258:	2301      	movs	r3, #1
 801a25a:	e000      	b.n	801a25e <etharp_input+0x9a>
 801a25c:	2302      	movs	r3, #2
 801a25e:	f107 010c 	add.w	r1, r7, #12
 801a262:	6838      	ldr	r0, [r7, #0]
 801a264:	f7ff fed8 	bl	801a018 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a268:	693b      	ldr	r3, [r7, #16]
 801a26a:	88db      	ldrh	r3, [r3, #6]
 801a26c:	b29b      	uxth	r3, r3
 801a26e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a272:	d003      	beq.n	801a27c <etharp_input+0xb8>
 801a274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a278:	d01e      	beq.n	801a2b8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a27a:	e020      	b.n	801a2be <etharp_input+0xfa>
      if (for_us) {
 801a27c:	7dfb      	ldrb	r3, [r7, #23]
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d01c      	beq.n	801a2bc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a282:	683b      	ldr	r3, [r7, #0]
 801a284:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801a288:	693b      	ldr	r3, [r7, #16]
 801a28a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a28e:	683b      	ldr	r3, [r7, #0]
 801a290:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801a294:	683b      	ldr	r3, [r7, #0]
 801a296:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a298:	693a      	ldr	r2, [r7, #16]
 801a29a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a29c:	2102      	movs	r1, #2
 801a29e:	9103      	str	r1, [sp, #12]
 801a2a0:	f107 010c 	add.w	r1, r7, #12
 801a2a4:	9102      	str	r1, [sp, #8]
 801a2a6:	9201      	str	r2, [sp, #4]
 801a2a8:	9300      	str	r3, [sp, #0]
 801a2aa:	462b      	mov	r3, r5
 801a2ac:	4622      	mov	r2, r4
 801a2ae:	4601      	mov	r1, r0
 801a2b0:	6838      	ldr	r0, [r7, #0]
 801a2b2:	f000 faeb 	bl	801a88c <etharp_raw>
      break;
 801a2b6:	e001      	b.n	801a2bc <etharp_input+0xf8>
      break;
 801a2b8:	bf00      	nop
 801a2ba:	e000      	b.n	801a2be <etharp_input+0xfa>
      break;
 801a2bc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a2be:	6878      	ldr	r0, [r7, #4]
 801a2c0:	f7f8 fcc2 	bl	8012c48 <pbuf_free>
}
 801a2c4:	3718      	adds	r7, #24
 801a2c6:	46bd      	mov	sp, r7
 801a2c8:	bdb0      	pop	{r4, r5, r7, pc}
 801a2ca:	bf00      	nop
 801a2cc:	080214fc 	.word	0x080214fc
 801a2d0:	0802164c 	.word	0x0802164c
 801a2d4:	08021574 	.word	0x08021574

0801a2d8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a2d8:	b580      	push	{r7, lr}
 801a2da:	b086      	sub	sp, #24
 801a2dc:	af02      	add	r7, sp, #8
 801a2de:	60f8      	str	r0, [r7, #12]
 801a2e0:	60b9      	str	r1, [r7, #8]
 801a2e2:	4613      	mov	r3, r2
 801a2e4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a2e6:	79fa      	ldrb	r2, [r7, #7]
 801a2e8:	4944      	ldr	r1, [pc, #272]	@ (801a3fc <etharp_output_to_arp_index+0x124>)
 801a2ea:	4613      	mov	r3, r2
 801a2ec:	005b      	lsls	r3, r3, #1
 801a2ee:	4413      	add	r3, r2
 801a2f0:	00db      	lsls	r3, r3, #3
 801a2f2:	440b      	add	r3, r1
 801a2f4:	3314      	adds	r3, #20
 801a2f6:	781b      	ldrb	r3, [r3, #0]
 801a2f8:	2b01      	cmp	r3, #1
 801a2fa:	d806      	bhi.n	801a30a <etharp_output_to_arp_index+0x32>
 801a2fc:	4b40      	ldr	r3, [pc, #256]	@ (801a400 <etharp_output_to_arp_index+0x128>)
 801a2fe:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801a302:	4940      	ldr	r1, [pc, #256]	@ (801a404 <etharp_output_to_arp_index+0x12c>)
 801a304:	4840      	ldr	r0, [pc, #256]	@ (801a408 <etharp_output_to_arp_index+0x130>)
 801a306:	f003 f831 	bl	801d36c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a30a:	79fa      	ldrb	r2, [r7, #7]
 801a30c:	493b      	ldr	r1, [pc, #236]	@ (801a3fc <etharp_output_to_arp_index+0x124>)
 801a30e:	4613      	mov	r3, r2
 801a310:	005b      	lsls	r3, r3, #1
 801a312:	4413      	add	r3, r2
 801a314:	00db      	lsls	r3, r3, #3
 801a316:	440b      	add	r3, r1
 801a318:	3314      	adds	r3, #20
 801a31a:	781b      	ldrb	r3, [r3, #0]
 801a31c:	2b02      	cmp	r3, #2
 801a31e:	d153      	bne.n	801a3c8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a320:	79fa      	ldrb	r2, [r7, #7]
 801a322:	4936      	ldr	r1, [pc, #216]	@ (801a3fc <etharp_output_to_arp_index+0x124>)
 801a324:	4613      	mov	r3, r2
 801a326:	005b      	lsls	r3, r3, #1
 801a328:	4413      	add	r3, r2
 801a32a:	00db      	lsls	r3, r3, #3
 801a32c:	440b      	add	r3, r1
 801a32e:	3312      	adds	r3, #18
 801a330:	881b      	ldrh	r3, [r3, #0]
 801a332:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801a336:	d919      	bls.n	801a36c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a338:	79fa      	ldrb	r2, [r7, #7]
 801a33a:	4613      	mov	r3, r2
 801a33c:	005b      	lsls	r3, r3, #1
 801a33e:	4413      	add	r3, r2
 801a340:	00db      	lsls	r3, r3, #3
 801a342:	4a2e      	ldr	r2, [pc, #184]	@ (801a3fc <etharp_output_to_arp_index+0x124>)
 801a344:	4413      	add	r3, r2
 801a346:	3304      	adds	r3, #4
 801a348:	4619      	mov	r1, r3
 801a34a:	68f8      	ldr	r0, [r7, #12]
 801a34c:	f000 fb4c 	bl	801a9e8 <etharp_request>
 801a350:	4603      	mov	r3, r0
 801a352:	2b00      	cmp	r3, #0
 801a354:	d138      	bne.n	801a3c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a356:	79fa      	ldrb	r2, [r7, #7]
 801a358:	4928      	ldr	r1, [pc, #160]	@ (801a3fc <etharp_output_to_arp_index+0x124>)
 801a35a:	4613      	mov	r3, r2
 801a35c:	005b      	lsls	r3, r3, #1
 801a35e:	4413      	add	r3, r2
 801a360:	00db      	lsls	r3, r3, #3
 801a362:	440b      	add	r3, r1
 801a364:	3314      	adds	r3, #20
 801a366:	2203      	movs	r2, #3
 801a368:	701a      	strb	r2, [r3, #0]
 801a36a:	e02d      	b.n	801a3c8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a36c:	79fa      	ldrb	r2, [r7, #7]
 801a36e:	4923      	ldr	r1, [pc, #140]	@ (801a3fc <etharp_output_to_arp_index+0x124>)
 801a370:	4613      	mov	r3, r2
 801a372:	005b      	lsls	r3, r3, #1
 801a374:	4413      	add	r3, r2
 801a376:	00db      	lsls	r3, r3, #3
 801a378:	440b      	add	r3, r1
 801a37a:	3312      	adds	r3, #18
 801a37c:	881b      	ldrh	r3, [r3, #0]
 801a37e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801a382:	d321      	bcc.n	801a3c8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a384:	79fa      	ldrb	r2, [r7, #7]
 801a386:	4613      	mov	r3, r2
 801a388:	005b      	lsls	r3, r3, #1
 801a38a:	4413      	add	r3, r2
 801a38c:	00db      	lsls	r3, r3, #3
 801a38e:	4a1b      	ldr	r2, [pc, #108]	@ (801a3fc <etharp_output_to_arp_index+0x124>)
 801a390:	4413      	add	r3, r2
 801a392:	1d19      	adds	r1, r3, #4
 801a394:	79fa      	ldrb	r2, [r7, #7]
 801a396:	4613      	mov	r3, r2
 801a398:	005b      	lsls	r3, r3, #1
 801a39a:	4413      	add	r3, r2
 801a39c:	00db      	lsls	r3, r3, #3
 801a39e:	3308      	adds	r3, #8
 801a3a0:	4a16      	ldr	r2, [pc, #88]	@ (801a3fc <etharp_output_to_arp_index+0x124>)
 801a3a2:	4413      	add	r3, r2
 801a3a4:	3304      	adds	r3, #4
 801a3a6:	461a      	mov	r2, r3
 801a3a8:	68f8      	ldr	r0, [r7, #12]
 801a3aa:	f000 fafb 	bl	801a9a4 <etharp_request_dst>
 801a3ae:	4603      	mov	r3, r0
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d109      	bne.n	801a3c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a3b4:	79fa      	ldrb	r2, [r7, #7]
 801a3b6:	4911      	ldr	r1, [pc, #68]	@ (801a3fc <etharp_output_to_arp_index+0x124>)
 801a3b8:	4613      	mov	r3, r2
 801a3ba:	005b      	lsls	r3, r3, #1
 801a3bc:	4413      	add	r3, r2
 801a3be:	00db      	lsls	r3, r3, #3
 801a3c0:	440b      	add	r3, r1
 801a3c2:	3314      	adds	r3, #20
 801a3c4:	2203      	movs	r2, #3
 801a3c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a3c8:	68fb      	ldr	r3, [r7, #12]
 801a3ca:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801a3ce:	79fa      	ldrb	r2, [r7, #7]
 801a3d0:	4613      	mov	r3, r2
 801a3d2:	005b      	lsls	r3, r3, #1
 801a3d4:	4413      	add	r3, r2
 801a3d6:	00db      	lsls	r3, r3, #3
 801a3d8:	3308      	adds	r3, #8
 801a3da:	4a08      	ldr	r2, [pc, #32]	@ (801a3fc <etharp_output_to_arp_index+0x124>)
 801a3dc:	4413      	add	r3, r2
 801a3de:	3304      	adds	r3, #4
 801a3e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a3e4:	9200      	str	r2, [sp, #0]
 801a3e6:	460a      	mov	r2, r1
 801a3e8:	68b9      	ldr	r1, [r7, #8]
 801a3ea:	68f8      	ldr	r0, [r7, #12]
 801a3ec:	f001 fe40 	bl	801c070 <ethernet_output>
 801a3f0:	4603      	mov	r3, r0
}
 801a3f2:	4618      	mov	r0, r3
 801a3f4:	3710      	adds	r7, #16
 801a3f6:	46bd      	mov	sp, r7
 801a3f8:	bd80      	pop	{r7, pc}
 801a3fa:	bf00      	nop
 801a3fc:	2000e4bc 	.word	0x2000e4bc
 801a400:	080214fc 	.word	0x080214fc
 801a404:	0802166c 	.word	0x0802166c
 801a408:	08021574 	.word	0x08021574

0801a40c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801a40c:	b580      	push	{r7, lr}
 801a40e:	b08a      	sub	sp, #40	@ 0x28
 801a410:	af02      	add	r7, sp, #8
 801a412:	60f8      	str	r0, [r7, #12]
 801a414:	60b9      	str	r1, [r7, #8]
 801a416:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a41c:	68fb      	ldr	r3, [r7, #12]
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d106      	bne.n	801a430 <etharp_output+0x24>
 801a422:	4b73      	ldr	r3, [pc, #460]	@ (801a5f0 <etharp_output+0x1e4>)
 801a424:	f240 321e 	movw	r2, #798	@ 0x31e
 801a428:	4972      	ldr	r1, [pc, #456]	@ (801a5f4 <etharp_output+0x1e8>)
 801a42a:	4873      	ldr	r0, [pc, #460]	@ (801a5f8 <etharp_output+0x1ec>)
 801a42c:	f002 ff9e 	bl	801d36c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a430:	68bb      	ldr	r3, [r7, #8]
 801a432:	2b00      	cmp	r3, #0
 801a434:	d106      	bne.n	801a444 <etharp_output+0x38>
 801a436:	4b6e      	ldr	r3, [pc, #440]	@ (801a5f0 <etharp_output+0x1e4>)
 801a438:	f240 321f 	movw	r2, #799	@ 0x31f
 801a43c:	496f      	ldr	r1, [pc, #444]	@ (801a5fc <etharp_output+0x1f0>)
 801a43e:	486e      	ldr	r0, [pc, #440]	@ (801a5f8 <etharp_output+0x1ec>)
 801a440:	f002 ff94 	bl	801d36c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	2b00      	cmp	r3, #0
 801a448:	d106      	bne.n	801a458 <etharp_output+0x4c>
 801a44a:	4b69      	ldr	r3, [pc, #420]	@ (801a5f0 <etharp_output+0x1e4>)
 801a44c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801a450:	496b      	ldr	r1, [pc, #428]	@ (801a600 <etharp_output+0x1f4>)
 801a452:	4869      	ldr	r0, [pc, #420]	@ (801a5f8 <etharp_output+0x1ec>)
 801a454:	f002 ff8a 	bl	801d36c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	681b      	ldr	r3, [r3, #0]
 801a45c:	68f9      	ldr	r1, [r7, #12]
 801a45e:	4618      	mov	r0, r3
 801a460:	f000 fef8 	bl	801b254 <ip4_addr_isbroadcast_u32>
 801a464:	4603      	mov	r3, r0
 801a466:	2b00      	cmp	r3, #0
 801a468:	d002      	beq.n	801a470 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801a46a:	4b66      	ldr	r3, [pc, #408]	@ (801a604 <etharp_output+0x1f8>)
 801a46c:	61fb      	str	r3, [r7, #28]
 801a46e:	e0af      	b.n	801a5d0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	681b      	ldr	r3, [r3, #0]
 801a474:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a478:	2be0      	cmp	r3, #224	@ 0xe0
 801a47a:	d118      	bne.n	801a4ae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801a47c:	2301      	movs	r3, #1
 801a47e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801a480:	2300      	movs	r3, #0
 801a482:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801a484:	235e      	movs	r3, #94	@ 0x5e
 801a486:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	3301      	adds	r3, #1
 801a48c:	781b      	ldrb	r3, [r3, #0]
 801a48e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a492:	b2db      	uxtb	r3, r3
 801a494:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	3302      	adds	r3, #2
 801a49a:	781b      	ldrb	r3, [r3, #0]
 801a49c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	3303      	adds	r3, #3
 801a4a2:	781b      	ldrb	r3, [r3, #0]
 801a4a4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801a4a6:	f107 0310 	add.w	r3, r7, #16
 801a4aa:	61fb      	str	r3, [r7, #28]
 801a4ac:	e090      	b.n	801a5d0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	681a      	ldr	r2, [r3, #0]
 801a4b2:	68fb      	ldr	r3, [r7, #12]
 801a4b4:	3304      	adds	r3, #4
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	405a      	eors	r2, r3
 801a4ba:	68fb      	ldr	r3, [r7, #12]
 801a4bc:	3308      	adds	r3, #8
 801a4be:	681b      	ldr	r3, [r3, #0]
 801a4c0:	4013      	ands	r3, r2
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	d012      	beq.n	801a4ec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a4cc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801a4d0:	4293      	cmp	r3, r2
 801a4d2:	d00b      	beq.n	801a4ec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	330c      	adds	r3, #12
 801a4d8:	681b      	ldr	r3, [r3, #0]
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d003      	beq.n	801a4e6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801a4de:	68fb      	ldr	r3, [r7, #12]
 801a4e0:	330c      	adds	r3, #12
 801a4e2:	61bb      	str	r3, [r7, #24]
 801a4e4:	e002      	b.n	801a4ec <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801a4e6:	f06f 0303 	mvn.w	r3, #3
 801a4ea:	e07d      	b.n	801a5e8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a4ec:	4b46      	ldr	r3, [pc, #280]	@ (801a608 <etharp_output+0x1fc>)
 801a4ee:	781b      	ldrb	r3, [r3, #0]
 801a4f0:	4619      	mov	r1, r3
 801a4f2:	4a46      	ldr	r2, [pc, #280]	@ (801a60c <etharp_output+0x200>)
 801a4f4:	460b      	mov	r3, r1
 801a4f6:	005b      	lsls	r3, r3, #1
 801a4f8:	440b      	add	r3, r1
 801a4fa:	00db      	lsls	r3, r3, #3
 801a4fc:	4413      	add	r3, r2
 801a4fe:	3314      	adds	r3, #20
 801a500:	781b      	ldrb	r3, [r3, #0]
 801a502:	2b01      	cmp	r3, #1
 801a504:	d925      	bls.n	801a552 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a506:	4b40      	ldr	r3, [pc, #256]	@ (801a608 <etharp_output+0x1fc>)
 801a508:	781b      	ldrb	r3, [r3, #0]
 801a50a:	4619      	mov	r1, r3
 801a50c:	4a3f      	ldr	r2, [pc, #252]	@ (801a60c <etharp_output+0x200>)
 801a50e:	460b      	mov	r3, r1
 801a510:	005b      	lsls	r3, r3, #1
 801a512:	440b      	add	r3, r1
 801a514:	00db      	lsls	r3, r3, #3
 801a516:	4413      	add	r3, r2
 801a518:	3308      	adds	r3, #8
 801a51a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a51c:	68fa      	ldr	r2, [r7, #12]
 801a51e:	429a      	cmp	r2, r3
 801a520:	d117      	bne.n	801a552 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801a522:	69bb      	ldr	r3, [r7, #24]
 801a524:	681a      	ldr	r2, [r3, #0]
 801a526:	4b38      	ldr	r3, [pc, #224]	@ (801a608 <etharp_output+0x1fc>)
 801a528:	781b      	ldrb	r3, [r3, #0]
 801a52a:	4618      	mov	r0, r3
 801a52c:	4937      	ldr	r1, [pc, #220]	@ (801a60c <etharp_output+0x200>)
 801a52e:	4603      	mov	r3, r0
 801a530:	005b      	lsls	r3, r3, #1
 801a532:	4403      	add	r3, r0
 801a534:	00db      	lsls	r3, r3, #3
 801a536:	440b      	add	r3, r1
 801a538:	3304      	adds	r3, #4
 801a53a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a53c:	429a      	cmp	r2, r3
 801a53e:	d108      	bne.n	801a552 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801a540:	4b31      	ldr	r3, [pc, #196]	@ (801a608 <etharp_output+0x1fc>)
 801a542:	781b      	ldrb	r3, [r3, #0]
 801a544:	461a      	mov	r2, r3
 801a546:	68b9      	ldr	r1, [r7, #8]
 801a548:	68f8      	ldr	r0, [r7, #12]
 801a54a:	f7ff fec5 	bl	801a2d8 <etharp_output_to_arp_index>
 801a54e:	4603      	mov	r3, r0
 801a550:	e04a      	b.n	801a5e8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a552:	2300      	movs	r3, #0
 801a554:	75fb      	strb	r3, [r7, #23]
 801a556:	e031      	b.n	801a5bc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a558:	7dfa      	ldrb	r2, [r7, #23]
 801a55a:	492c      	ldr	r1, [pc, #176]	@ (801a60c <etharp_output+0x200>)
 801a55c:	4613      	mov	r3, r2
 801a55e:	005b      	lsls	r3, r3, #1
 801a560:	4413      	add	r3, r2
 801a562:	00db      	lsls	r3, r3, #3
 801a564:	440b      	add	r3, r1
 801a566:	3314      	adds	r3, #20
 801a568:	781b      	ldrb	r3, [r3, #0]
 801a56a:	2b01      	cmp	r3, #1
 801a56c:	d923      	bls.n	801a5b6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801a56e:	7dfa      	ldrb	r2, [r7, #23]
 801a570:	4926      	ldr	r1, [pc, #152]	@ (801a60c <etharp_output+0x200>)
 801a572:	4613      	mov	r3, r2
 801a574:	005b      	lsls	r3, r3, #1
 801a576:	4413      	add	r3, r2
 801a578:	00db      	lsls	r3, r3, #3
 801a57a:	440b      	add	r3, r1
 801a57c:	3308      	adds	r3, #8
 801a57e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a580:	68fa      	ldr	r2, [r7, #12]
 801a582:	429a      	cmp	r2, r3
 801a584:	d117      	bne.n	801a5b6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801a586:	69bb      	ldr	r3, [r7, #24]
 801a588:	6819      	ldr	r1, [r3, #0]
 801a58a:	7dfa      	ldrb	r2, [r7, #23]
 801a58c:	481f      	ldr	r0, [pc, #124]	@ (801a60c <etharp_output+0x200>)
 801a58e:	4613      	mov	r3, r2
 801a590:	005b      	lsls	r3, r3, #1
 801a592:	4413      	add	r3, r2
 801a594:	00db      	lsls	r3, r3, #3
 801a596:	4403      	add	r3, r0
 801a598:	3304      	adds	r3, #4
 801a59a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801a59c:	4299      	cmp	r1, r3
 801a59e:	d10a      	bne.n	801a5b6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801a5a0:	4a19      	ldr	r2, [pc, #100]	@ (801a608 <etharp_output+0x1fc>)
 801a5a2:	7dfb      	ldrb	r3, [r7, #23]
 801a5a4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801a5a6:	7dfb      	ldrb	r3, [r7, #23]
 801a5a8:	461a      	mov	r2, r3
 801a5aa:	68b9      	ldr	r1, [r7, #8]
 801a5ac:	68f8      	ldr	r0, [r7, #12]
 801a5ae:	f7ff fe93 	bl	801a2d8 <etharp_output_to_arp_index>
 801a5b2:	4603      	mov	r3, r0
 801a5b4:	e018      	b.n	801a5e8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a5b6:	7dfb      	ldrb	r3, [r7, #23]
 801a5b8:	3301      	adds	r3, #1
 801a5ba:	75fb      	strb	r3, [r7, #23]
 801a5bc:	7dfb      	ldrb	r3, [r7, #23]
 801a5be:	2b09      	cmp	r3, #9
 801a5c0:	d9ca      	bls.n	801a558 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801a5c2:	68ba      	ldr	r2, [r7, #8]
 801a5c4:	69b9      	ldr	r1, [r7, #24]
 801a5c6:	68f8      	ldr	r0, [r7, #12]
 801a5c8:	f000 f822 	bl	801a610 <etharp_query>
 801a5cc:	4603      	mov	r3, r0
 801a5ce:	e00b      	b.n	801a5e8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801a5d0:	68fb      	ldr	r3, [r7, #12]
 801a5d2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801a5d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a5da:	9300      	str	r3, [sp, #0]
 801a5dc:	69fb      	ldr	r3, [r7, #28]
 801a5de:	68b9      	ldr	r1, [r7, #8]
 801a5e0:	68f8      	ldr	r0, [r7, #12]
 801a5e2:	f001 fd45 	bl	801c070 <ethernet_output>
 801a5e6:	4603      	mov	r3, r0
}
 801a5e8:	4618      	mov	r0, r3
 801a5ea:	3720      	adds	r7, #32
 801a5ec:	46bd      	mov	sp, r7
 801a5ee:	bd80      	pop	{r7, pc}
 801a5f0:	080214fc 	.word	0x080214fc
 801a5f4:	0802164c 	.word	0x0802164c
 801a5f8:	08021574 	.word	0x08021574
 801a5fc:	0802169c 	.word	0x0802169c
 801a600:	0802163c 	.word	0x0802163c
 801a604:	0803251c 	.word	0x0803251c
 801a608:	2000e5ac 	.word	0x2000e5ac
 801a60c:	2000e4bc 	.word	0x2000e4bc

0801a610 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801a610:	b580      	push	{r7, lr}
 801a612:	b08c      	sub	sp, #48	@ 0x30
 801a614:	af02      	add	r7, sp, #8
 801a616:	60f8      	str	r0, [r7, #12]
 801a618:	60b9      	str	r1, [r7, #8]
 801a61a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801a61c:	68fb      	ldr	r3, [r7, #12]
 801a61e:	3326      	adds	r3, #38	@ 0x26
 801a620:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801a622:	23ff      	movs	r3, #255	@ 0xff
 801a624:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801a628:	2300      	movs	r3, #0
 801a62a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a62c:	68bb      	ldr	r3, [r7, #8]
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	68f9      	ldr	r1, [r7, #12]
 801a632:	4618      	mov	r0, r3
 801a634:	f000 fe0e 	bl	801b254 <ip4_addr_isbroadcast_u32>
 801a638:	4603      	mov	r3, r0
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d10c      	bne.n	801a658 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a63e:	68bb      	ldr	r3, [r7, #8]
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a646:	2be0      	cmp	r3, #224	@ 0xe0
 801a648:	d006      	beq.n	801a658 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a64a:	68bb      	ldr	r3, [r7, #8]
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d003      	beq.n	801a658 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801a650:	68bb      	ldr	r3, [r7, #8]
 801a652:	681b      	ldr	r3, [r3, #0]
 801a654:	2b00      	cmp	r3, #0
 801a656:	d102      	bne.n	801a65e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a658:	f06f 030f 	mvn.w	r3, #15
 801a65c:	e101      	b.n	801a862 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801a65e:	68fa      	ldr	r2, [r7, #12]
 801a660:	2101      	movs	r1, #1
 801a662:	68b8      	ldr	r0, [r7, #8]
 801a664:	f7ff fb60 	bl	8019d28 <etharp_find_entry>
 801a668:	4603      	mov	r3, r0
 801a66a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801a66c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a670:	2b00      	cmp	r3, #0
 801a672:	da02      	bge.n	801a67a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801a674:	8a7b      	ldrh	r3, [r7, #18]
 801a676:	b25b      	sxtb	r3, r3
 801a678:	e0f3      	b.n	801a862 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801a67a:	8a7b      	ldrh	r3, [r7, #18]
 801a67c:	2b7e      	cmp	r3, #126	@ 0x7e
 801a67e:	d906      	bls.n	801a68e <etharp_query+0x7e>
 801a680:	4b7a      	ldr	r3, [pc, #488]	@ (801a86c <etharp_query+0x25c>)
 801a682:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801a686:	497a      	ldr	r1, [pc, #488]	@ (801a870 <etharp_query+0x260>)
 801a688:	487a      	ldr	r0, [pc, #488]	@ (801a874 <etharp_query+0x264>)
 801a68a:	f002 fe6f 	bl	801d36c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801a68e:	8a7b      	ldrh	r3, [r7, #18]
 801a690:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801a692:	7c7a      	ldrb	r2, [r7, #17]
 801a694:	4978      	ldr	r1, [pc, #480]	@ (801a878 <etharp_query+0x268>)
 801a696:	4613      	mov	r3, r2
 801a698:	005b      	lsls	r3, r3, #1
 801a69a:	4413      	add	r3, r2
 801a69c:	00db      	lsls	r3, r3, #3
 801a69e:	440b      	add	r3, r1
 801a6a0:	3314      	adds	r3, #20
 801a6a2:	781b      	ldrb	r3, [r3, #0]
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	d115      	bne.n	801a6d4 <etharp_query+0xc4>
    is_new_entry = 1;
 801a6a8:	2301      	movs	r3, #1
 801a6aa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801a6ac:	7c7a      	ldrb	r2, [r7, #17]
 801a6ae:	4972      	ldr	r1, [pc, #456]	@ (801a878 <etharp_query+0x268>)
 801a6b0:	4613      	mov	r3, r2
 801a6b2:	005b      	lsls	r3, r3, #1
 801a6b4:	4413      	add	r3, r2
 801a6b6:	00db      	lsls	r3, r3, #3
 801a6b8:	440b      	add	r3, r1
 801a6ba:	3314      	adds	r3, #20
 801a6bc:	2201      	movs	r2, #1
 801a6be:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801a6c0:	7c7a      	ldrb	r2, [r7, #17]
 801a6c2:	496d      	ldr	r1, [pc, #436]	@ (801a878 <etharp_query+0x268>)
 801a6c4:	4613      	mov	r3, r2
 801a6c6:	005b      	lsls	r3, r3, #1
 801a6c8:	4413      	add	r3, r2
 801a6ca:	00db      	lsls	r3, r3, #3
 801a6cc:	440b      	add	r3, r1
 801a6ce:	3308      	adds	r3, #8
 801a6d0:	68fa      	ldr	r2, [r7, #12]
 801a6d2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801a6d4:	7c7a      	ldrb	r2, [r7, #17]
 801a6d6:	4968      	ldr	r1, [pc, #416]	@ (801a878 <etharp_query+0x268>)
 801a6d8:	4613      	mov	r3, r2
 801a6da:	005b      	lsls	r3, r3, #1
 801a6dc:	4413      	add	r3, r2
 801a6de:	00db      	lsls	r3, r3, #3
 801a6e0:	440b      	add	r3, r1
 801a6e2:	3314      	adds	r3, #20
 801a6e4:	781b      	ldrb	r3, [r3, #0]
 801a6e6:	2b01      	cmp	r3, #1
 801a6e8:	d011      	beq.n	801a70e <etharp_query+0xfe>
 801a6ea:	7c7a      	ldrb	r2, [r7, #17]
 801a6ec:	4962      	ldr	r1, [pc, #392]	@ (801a878 <etharp_query+0x268>)
 801a6ee:	4613      	mov	r3, r2
 801a6f0:	005b      	lsls	r3, r3, #1
 801a6f2:	4413      	add	r3, r2
 801a6f4:	00db      	lsls	r3, r3, #3
 801a6f6:	440b      	add	r3, r1
 801a6f8:	3314      	adds	r3, #20
 801a6fa:	781b      	ldrb	r3, [r3, #0]
 801a6fc:	2b01      	cmp	r3, #1
 801a6fe:	d806      	bhi.n	801a70e <etharp_query+0xfe>
 801a700:	4b5a      	ldr	r3, [pc, #360]	@ (801a86c <etharp_query+0x25c>)
 801a702:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801a706:	495d      	ldr	r1, [pc, #372]	@ (801a87c <etharp_query+0x26c>)
 801a708:	485a      	ldr	r0, [pc, #360]	@ (801a874 <etharp_query+0x264>)
 801a70a:	f002 fe2f 	bl	801d36c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801a70e:	6a3b      	ldr	r3, [r7, #32]
 801a710:	2b00      	cmp	r3, #0
 801a712:	d102      	bne.n	801a71a <etharp_query+0x10a>
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	2b00      	cmp	r3, #0
 801a718:	d10c      	bne.n	801a734 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801a71a:	68b9      	ldr	r1, [r7, #8]
 801a71c:	68f8      	ldr	r0, [r7, #12]
 801a71e:	f000 f963 	bl	801a9e8 <etharp_request>
 801a722:	4603      	mov	r3, r0
 801a724:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	d102      	bne.n	801a734 <etharp_query+0x124>
      return result;
 801a72e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801a732:	e096      	b.n	801a862 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	2b00      	cmp	r3, #0
 801a738:	d106      	bne.n	801a748 <etharp_query+0x138>
 801a73a:	4b4c      	ldr	r3, [pc, #304]	@ (801a86c <etharp_query+0x25c>)
 801a73c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801a740:	494f      	ldr	r1, [pc, #316]	@ (801a880 <etharp_query+0x270>)
 801a742:	484c      	ldr	r0, [pc, #304]	@ (801a874 <etharp_query+0x264>)
 801a744:	f002 fe12 	bl	801d36c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801a748:	7c7a      	ldrb	r2, [r7, #17]
 801a74a:	494b      	ldr	r1, [pc, #300]	@ (801a878 <etharp_query+0x268>)
 801a74c:	4613      	mov	r3, r2
 801a74e:	005b      	lsls	r3, r3, #1
 801a750:	4413      	add	r3, r2
 801a752:	00db      	lsls	r3, r3, #3
 801a754:	440b      	add	r3, r1
 801a756:	3314      	adds	r3, #20
 801a758:	781b      	ldrb	r3, [r3, #0]
 801a75a:	2b01      	cmp	r3, #1
 801a75c:	d917      	bls.n	801a78e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801a75e:	4a49      	ldr	r2, [pc, #292]	@ (801a884 <etharp_query+0x274>)
 801a760:	7c7b      	ldrb	r3, [r7, #17]
 801a762:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801a764:	7c7a      	ldrb	r2, [r7, #17]
 801a766:	4613      	mov	r3, r2
 801a768:	005b      	lsls	r3, r3, #1
 801a76a:	4413      	add	r3, r2
 801a76c:	00db      	lsls	r3, r3, #3
 801a76e:	3308      	adds	r3, #8
 801a770:	4a41      	ldr	r2, [pc, #260]	@ (801a878 <etharp_query+0x268>)
 801a772:	4413      	add	r3, r2
 801a774:	3304      	adds	r3, #4
 801a776:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a77a:	9200      	str	r2, [sp, #0]
 801a77c:	697a      	ldr	r2, [r7, #20]
 801a77e:	6879      	ldr	r1, [r7, #4]
 801a780:	68f8      	ldr	r0, [r7, #12]
 801a782:	f001 fc75 	bl	801c070 <ethernet_output>
 801a786:	4603      	mov	r3, r0
 801a788:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a78c:	e067      	b.n	801a85e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a78e:	7c7a      	ldrb	r2, [r7, #17]
 801a790:	4939      	ldr	r1, [pc, #228]	@ (801a878 <etharp_query+0x268>)
 801a792:	4613      	mov	r3, r2
 801a794:	005b      	lsls	r3, r3, #1
 801a796:	4413      	add	r3, r2
 801a798:	00db      	lsls	r3, r3, #3
 801a79a:	440b      	add	r3, r1
 801a79c:	3314      	adds	r3, #20
 801a79e:	781b      	ldrb	r3, [r3, #0]
 801a7a0:	2b01      	cmp	r3, #1
 801a7a2:	d15c      	bne.n	801a85e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801a7a4:	2300      	movs	r3, #0
 801a7a6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a7ac:	e01c      	b.n	801a7e8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801a7ae:	69fb      	ldr	r3, [r7, #28]
 801a7b0:	895a      	ldrh	r2, [r3, #10]
 801a7b2:	69fb      	ldr	r3, [r7, #28]
 801a7b4:	891b      	ldrh	r3, [r3, #8]
 801a7b6:	429a      	cmp	r2, r3
 801a7b8:	d10a      	bne.n	801a7d0 <etharp_query+0x1c0>
 801a7ba:	69fb      	ldr	r3, [r7, #28]
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d006      	beq.n	801a7d0 <etharp_query+0x1c0>
 801a7c2:	4b2a      	ldr	r3, [pc, #168]	@ (801a86c <etharp_query+0x25c>)
 801a7c4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801a7c8:	492f      	ldr	r1, [pc, #188]	@ (801a888 <etharp_query+0x278>)
 801a7ca:	482a      	ldr	r0, [pc, #168]	@ (801a874 <etharp_query+0x264>)
 801a7cc:	f002 fdce 	bl	801d36c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801a7d0:	69fb      	ldr	r3, [r7, #28]
 801a7d2:	7b1b      	ldrb	r3, [r3, #12]
 801a7d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d002      	beq.n	801a7e2 <etharp_query+0x1d2>
        copy_needed = 1;
 801a7dc:	2301      	movs	r3, #1
 801a7de:	61bb      	str	r3, [r7, #24]
        break;
 801a7e0:	e005      	b.n	801a7ee <etharp_query+0x1de>
      }
      p = p->next;
 801a7e2:	69fb      	ldr	r3, [r7, #28]
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a7e8:	69fb      	ldr	r3, [r7, #28]
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	d1df      	bne.n	801a7ae <etharp_query+0x19e>
    }
    if (copy_needed) {
 801a7ee:	69bb      	ldr	r3, [r7, #24]
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	d007      	beq.n	801a804 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801a7f4:	687a      	ldr	r2, [r7, #4]
 801a7f6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801a7fa:	200e      	movs	r0, #14
 801a7fc:	f7f8 fc8c 	bl	8013118 <pbuf_clone>
 801a800:	61f8      	str	r0, [r7, #28]
 801a802:	e004      	b.n	801a80e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801a808:	69f8      	ldr	r0, [r7, #28]
 801a80a:	f7f8 fac3 	bl	8012d94 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801a80e:	69fb      	ldr	r3, [r7, #28]
 801a810:	2b00      	cmp	r3, #0
 801a812:	d021      	beq.n	801a858 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801a814:	7c7a      	ldrb	r2, [r7, #17]
 801a816:	4918      	ldr	r1, [pc, #96]	@ (801a878 <etharp_query+0x268>)
 801a818:	4613      	mov	r3, r2
 801a81a:	005b      	lsls	r3, r3, #1
 801a81c:	4413      	add	r3, r2
 801a81e:	00db      	lsls	r3, r3, #3
 801a820:	440b      	add	r3, r1
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	2b00      	cmp	r3, #0
 801a826:	d00a      	beq.n	801a83e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801a828:	7c7a      	ldrb	r2, [r7, #17]
 801a82a:	4913      	ldr	r1, [pc, #76]	@ (801a878 <etharp_query+0x268>)
 801a82c:	4613      	mov	r3, r2
 801a82e:	005b      	lsls	r3, r3, #1
 801a830:	4413      	add	r3, r2
 801a832:	00db      	lsls	r3, r3, #3
 801a834:	440b      	add	r3, r1
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	4618      	mov	r0, r3
 801a83a:	f7f8 fa05 	bl	8012c48 <pbuf_free>
      }
      arp_table[i].q = p;
 801a83e:	7c7a      	ldrb	r2, [r7, #17]
 801a840:	490d      	ldr	r1, [pc, #52]	@ (801a878 <etharp_query+0x268>)
 801a842:	4613      	mov	r3, r2
 801a844:	005b      	lsls	r3, r3, #1
 801a846:	4413      	add	r3, r2
 801a848:	00db      	lsls	r3, r3, #3
 801a84a:	440b      	add	r3, r1
 801a84c:	69fa      	ldr	r2, [r7, #28]
 801a84e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801a850:	2300      	movs	r3, #0
 801a852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a856:	e002      	b.n	801a85e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801a858:	23ff      	movs	r3, #255	@ 0xff
 801a85a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801a85e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801a862:	4618      	mov	r0, r3
 801a864:	3728      	adds	r7, #40	@ 0x28
 801a866:	46bd      	mov	sp, r7
 801a868:	bd80      	pop	{r7, pc}
 801a86a:	bf00      	nop
 801a86c:	080214fc 	.word	0x080214fc
 801a870:	080216a8 	.word	0x080216a8
 801a874:	08021574 	.word	0x08021574
 801a878:	2000e4bc 	.word	0x2000e4bc
 801a87c:	080216b8 	.word	0x080216b8
 801a880:	0802169c 	.word	0x0802169c
 801a884:	2000e5ac 	.word	0x2000e5ac
 801a888:	080216e0 	.word	0x080216e0

0801a88c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801a88c:	b580      	push	{r7, lr}
 801a88e:	b08a      	sub	sp, #40	@ 0x28
 801a890:	af02      	add	r7, sp, #8
 801a892:	60f8      	str	r0, [r7, #12]
 801a894:	60b9      	str	r1, [r7, #8]
 801a896:	607a      	str	r2, [r7, #4]
 801a898:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801a89a:	2300      	movs	r3, #0
 801a89c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a89e:	68fb      	ldr	r3, [r7, #12]
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d106      	bne.n	801a8b2 <etharp_raw+0x26>
 801a8a4:	4b3a      	ldr	r3, [pc, #232]	@ (801a990 <etharp_raw+0x104>)
 801a8a6:	f240 4257 	movw	r2, #1111	@ 0x457
 801a8aa:	493a      	ldr	r1, [pc, #232]	@ (801a994 <etharp_raw+0x108>)
 801a8ac:	483a      	ldr	r0, [pc, #232]	@ (801a998 <etharp_raw+0x10c>)
 801a8ae:	f002 fd5d 	bl	801d36c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801a8b2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a8b6:	211c      	movs	r1, #28
 801a8b8:	200e      	movs	r0, #14
 801a8ba:	f7f7 fee1 	bl	8012680 <pbuf_alloc>
 801a8be:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801a8c0:	69bb      	ldr	r3, [r7, #24]
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d102      	bne.n	801a8cc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801a8c6:	f04f 33ff 	mov.w	r3, #4294967295
 801a8ca:	e05d      	b.n	801a988 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801a8cc:	69bb      	ldr	r3, [r7, #24]
 801a8ce:	895b      	ldrh	r3, [r3, #10]
 801a8d0:	2b1b      	cmp	r3, #27
 801a8d2:	d806      	bhi.n	801a8e2 <etharp_raw+0x56>
 801a8d4:	4b2e      	ldr	r3, [pc, #184]	@ (801a990 <etharp_raw+0x104>)
 801a8d6:	f240 4262 	movw	r2, #1122	@ 0x462
 801a8da:	4930      	ldr	r1, [pc, #192]	@ (801a99c <etharp_raw+0x110>)
 801a8dc:	482e      	ldr	r0, [pc, #184]	@ (801a998 <etharp_raw+0x10c>)
 801a8de:	f002 fd45 	bl	801d36c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801a8e2:	69bb      	ldr	r3, [r7, #24]
 801a8e4:	685b      	ldr	r3, [r3, #4]
 801a8e6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801a8e8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801a8ea:	4618      	mov	r0, r3
 801a8ec:	f7f6 fdbe 	bl	801146c <lwip_htons>
 801a8f0:	4603      	mov	r3, r0
 801a8f2:	461a      	mov	r2, r3
 801a8f4:	697b      	ldr	r3, [r7, #20]
 801a8f6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801a8f8:	68fb      	ldr	r3, [r7, #12]
 801a8fa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a8fe:	2b06      	cmp	r3, #6
 801a900:	d006      	beq.n	801a910 <etharp_raw+0x84>
 801a902:	4b23      	ldr	r3, [pc, #140]	@ (801a990 <etharp_raw+0x104>)
 801a904:	f240 4269 	movw	r2, #1129	@ 0x469
 801a908:	4925      	ldr	r1, [pc, #148]	@ (801a9a0 <etharp_raw+0x114>)
 801a90a:	4823      	ldr	r0, [pc, #140]	@ (801a998 <etharp_raw+0x10c>)
 801a90c:	f002 fd2e 	bl	801d36c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801a910:	697b      	ldr	r3, [r7, #20]
 801a912:	3308      	adds	r3, #8
 801a914:	2206      	movs	r2, #6
 801a916:	6839      	ldr	r1, [r7, #0]
 801a918:	4618      	mov	r0, r3
 801a91a:	f002 feb4 	bl	801d686 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801a91e:	697b      	ldr	r3, [r7, #20]
 801a920:	3312      	adds	r3, #18
 801a922:	2206      	movs	r2, #6
 801a924:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a926:	4618      	mov	r0, r3
 801a928:	f002 fead 	bl	801d686 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801a92c:	697b      	ldr	r3, [r7, #20]
 801a92e:	330e      	adds	r3, #14
 801a930:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a932:	6812      	ldr	r2, [r2, #0]
 801a934:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801a936:	697b      	ldr	r3, [r7, #20]
 801a938:	3318      	adds	r3, #24
 801a93a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a93c:	6812      	ldr	r2, [r2, #0]
 801a93e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801a940:	697b      	ldr	r3, [r7, #20]
 801a942:	2200      	movs	r2, #0
 801a944:	701a      	strb	r2, [r3, #0]
 801a946:	2200      	movs	r2, #0
 801a948:	f042 0201 	orr.w	r2, r2, #1
 801a94c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801a94e:	697b      	ldr	r3, [r7, #20]
 801a950:	2200      	movs	r2, #0
 801a952:	f042 0208 	orr.w	r2, r2, #8
 801a956:	709a      	strb	r2, [r3, #2]
 801a958:	2200      	movs	r2, #0
 801a95a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801a95c:	697b      	ldr	r3, [r7, #20]
 801a95e:	2206      	movs	r2, #6
 801a960:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801a962:	697b      	ldr	r3, [r7, #20]
 801a964:	2204      	movs	r2, #4
 801a966:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801a968:	f640 0306 	movw	r3, #2054	@ 0x806
 801a96c:	9300      	str	r3, [sp, #0]
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	68ba      	ldr	r2, [r7, #8]
 801a972:	69b9      	ldr	r1, [r7, #24]
 801a974:	68f8      	ldr	r0, [r7, #12]
 801a976:	f001 fb7b 	bl	801c070 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801a97a:	69b8      	ldr	r0, [r7, #24]
 801a97c:	f7f8 f964 	bl	8012c48 <pbuf_free>
  p = NULL;
 801a980:	2300      	movs	r3, #0
 801a982:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801a984:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a988:	4618      	mov	r0, r3
 801a98a:	3720      	adds	r7, #32
 801a98c:	46bd      	mov	sp, r7
 801a98e:	bd80      	pop	{r7, pc}
 801a990:	080214fc 	.word	0x080214fc
 801a994:	0802164c 	.word	0x0802164c
 801a998:	08021574 	.word	0x08021574
 801a99c:	080216fc 	.word	0x080216fc
 801a9a0:	08021730 	.word	0x08021730

0801a9a4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801a9a4:	b580      	push	{r7, lr}
 801a9a6:	b088      	sub	sp, #32
 801a9a8:	af04      	add	r7, sp, #16
 801a9aa:	60f8      	str	r0, [r7, #12]
 801a9ac:	60b9      	str	r1, [r7, #8]
 801a9ae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a9b0:	68fb      	ldr	r3, [r7, #12]
 801a9b2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a9c0:	2201      	movs	r2, #1
 801a9c2:	9203      	str	r2, [sp, #12]
 801a9c4:	68ba      	ldr	r2, [r7, #8]
 801a9c6:	9202      	str	r2, [sp, #8]
 801a9c8:	4a06      	ldr	r2, [pc, #24]	@ (801a9e4 <etharp_request_dst+0x40>)
 801a9ca:	9201      	str	r2, [sp, #4]
 801a9cc:	9300      	str	r3, [sp, #0]
 801a9ce:	4603      	mov	r3, r0
 801a9d0:	687a      	ldr	r2, [r7, #4]
 801a9d2:	68f8      	ldr	r0, [r7, #12]
 801a9d4:	f7ff ff5a 	bl	801a88c <etharp_raw>
 801a9d8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801a9da:	4618      	mov	r0, r3
 801a9dc:	3710      	adds	r7, #16
 801a9de:	46bd      	mov	sp, r7
 801a9e0:	bd80      	pop	{r7, pc}
 801a9e2:	bf00      	nop
 801a9e4:	08032524 	.word	0x08032524

0801a9e8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801a9e8:	b580      	push	{r7, lr}
 801a9ea:	b082      	sub	sp, #8
 801a9ec:	af00      	add	r7, sp, #0
 801a9ee:	6078      	str	r0, [r7, #4]
 801a9f0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801a9f2:	4a05      	ldr	r2, [pc, #20]	@ (801aa08 <etharp_request+0x20>)
 801a9f4:	6839      	ldr	r1, [r7, #0]
 801a9f6:	6878      	ldr	r0, [r7, #4]
 801a9f8:	f7ff ffd4 	bl	801a9a4 <etharp_request_dst>
 801a9fc:	4603      	mov	r3, r0
}
 801a9fe:	4618      	mov	r0, r3
 801aa00:	3708      	adds	r7, #8
 801aa02:	46bd      	mov	sp, r7
 801aa04:	bd80      	pop	{r7, pc}
 801aa06:	bf00      	nop
 801aa08:	0803251c 	.word	0x0803251c

0801aa0c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801aa0c:	b580      	push	{r7, lr}
 801aa0e:	b08e      	sub	sp, #56	@ 0x38
 801aa10:	af04      	add	r7, sp, #16
 801aa12:	6078      	str	r0, [r7, #4]
 801aa14:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801aa16:	4b79      	ldr	r3, [pc, #484]	@ (801abfc <icmp_input+0x1f0>)
 801aa18:	689b      	ldr	r3, [r3, #8]
 801aa1a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801aa1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa1e:	781b      	ldrb	r3, [r3, #0]
 801aa20:	f003 030f 	and.w	r3, r3, #15
 801aa24:	b2db      	uxtb	r3, r3
 801aa26:	009b      	lsls	r3, r3, #2
 801aa28:	b2db      	uxtb	r3, r3
 801aa2a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801aa2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801aa2e:	2b13      	cmp	r3, #19
 801aa30:	f240 80cd 	bls.w	801abce <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	895b      	ldrh	r3, [r3, #10]
 801aa38:	2b03      	cmp	r3, #3
 801aa3a:	f240 80ca 	bls.w	801abd2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	685b      	ldr	r3, [r3, #4]
 801aa42:	781b      	ldrb	r3, [r3, #0]
 801aa44:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801aa48:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801aa4c:	2b00      	cmp	r3, #0
 801aa4e:	f000 80b7 	beq.w	801abc0 <icmp_input+0x1b4>
 801aa52:	2b08      	cmp	r3, #8
 801aa54:	f040 80b7 	bne.w	801abc6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801aa58:	4b69      	ldr	r3, [pc, #420]	@ (801ac00 <icmp_input+0x1f4>)
 801aa5a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801aa5c:	4b67      	ldr	r3, [pc, #412]	@ (801abfc <icmp_input+0x1f0>)
 801aa5e:	695b      	ldr	r3, [r3, #20]
 801aa60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801aa64:	2be0      	cmp	r3, #224	@ 0xe0
 801aa66:	f000 80bb 	beq.w	801abe0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801aa6a:	4b64      	ldr	r3, [pc, #400]	@ (801abfc <icmp_input+0x1f0>)
 801aa6c:	695b      	ldr	r3, [r3, #20]
 801aa6e:	4a63      	ldr	r2, [pc, #396]	@ (801abfc <icmp_input+0x1f0>)
 801aa70:	6812      	ldr	r2, [r2, #0]
 801aa72:	4611      	mov	r1, r2
 801aa74:	4618      	mov	r0, r3
 801aa76:	f000 fbed 	bl	801b254 <ip4_addr_isbroadcast_u32>
 801aa7a:	4603      	mov	r3, r0
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	f040 80b1 	bne.w	801abe4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	891b      	ldrh	r3, [r3, #8]
 801aa86:	2b07      	cmp	r3, #7
 801aa88:	f240 80a5 	bls.w	801abd6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801aa8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801aa8e:	330e      	adds	r3, #14
 801aa90:	4619      	mov	r1, r3
 801aa92:	6878      	ldr	r0, [r7, #4]
 801aa94:	f7f8 f842 	bl	8012b1c <pbuf_add_header>
 801aa98:	4603      	mov	r3, r0
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d04b      	beq.n	801ab36 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	891a      	ldrh	r2, [r3, #8]
 801aaa2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801aaa4:	4413      	add	r3, r2
 801aaa6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	891b      	ldrh	r3, [r3, #8]
 801aaac:	8b7a      	ldrh	r2, [r7, #26]
 801aaae:	429a      	cmp	r2, r3
 801aab0:	f0c0 809a 	bcc.w	801abe8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801aab4:	8b7b      	ldrh	r3, [r7, #26]
 801aab6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801aaba:	4619      	mov	r1, r3
 801aabc:	200e      	movs	r0, #14
 801aabe:	f7f7 fddf 	bl	8012680 <pbuf_alloc>
 801aac2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801aac4:	697b      	ldr	r3, [r7, #20]
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	f000 8090 	beq.w	801abec <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801aacc:	697b      	ldr	r3, [r7, #20]
 801aace:	895b      	ldrh	r3, [r3, #10]
 801aad0:	461a      	mov	r2, r3
 801aad2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801aad4:	3308      	adds	r3, #8
 801aad6:	429a      	cmp	r2, r3
 801aad8:	d203      	bcs.n	801aae2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801aada:	6978      	ldr	r0, [r7, #20]
 801aadc:	f7f8 f8b4 	bl	8012c48 <pbuf_free>
          goto icmperr;
 801aae0:	e085      	b.n	801abee <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801aae2:	697b      	ldr	r3, [r7, #20]
 801aae4:	685b      	ldr	r3, [r3, #4]
 801aae6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801aae8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801aaea:	4618      	mov	r0, r3
 801aaec:	f002 fdcb 	bl	801d686 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801aaf0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801aaf2:	4619      	mov	r1, r3
 801aaf4:	6978      	ldr	r0, [r7, #20]
 801aaf6:	f7f8 f821 	bl	8012b3c <pbuf_remove_header>
 801aafa:	4603      	mov	r3, r0
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d009      	beq.n	801ab14 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801ab00:	4b40      	ldr	r3, [pc, #256]	@ (801ac04 <icmp_input+0x1f8>)
 801ab02:	22b6      	movs	r2, #182	@ 0xb6
 801ab04:	4940      	ldr	r1, [pc, #256]	@ (801ac08 <icmp_input+0x1fc>)
 801ab06:	4841      	ldr	r0, [pc, #260]	@ (801ac0c <icmp_input+0x200>)
 801ab08:	f002 fc30 	bl	801d36c <iprintf>
          pbuf_free(r);
 801ab0c:	6978      	ldr	r0, [r7, #20]
 801ab0e:	f7f8 f89b 	bl	8012c48 <pbuf_free>
          goto icmperr;
 801ab12:	e06c      	b.n	801abee <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801ab14:	6879      	ldr	r1, [r7, #4]
 801ab16:	6978      	ldr	r0, [r7, #20]
 801ab18:	f7f8 f9ba 	bl	8012e90 <pbuf_copy>
 801ab1c:	4603      	mov	r3, r0
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	d003      	beq.n	801ab2a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801ab22:	6978      	ldr	r0, [r7, #20]
 801ab24:	f7f8 f890 	bl	8012c48 <pbuf_free>
          goto icmperr;
 801ab28:	e061      	b.n	801abee <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801ab2a:	6878      	ldr	r0, [r7, #4]
 801ab2c:	f7f8 f88c 	bl	8012c48 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801ab30:	697b      	ldr	r3, [r7, #20]
 801ab32:	607b      	str	r3, [r7, #4]
 801ab34:	e00f      	b.n	801ab56 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ab36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ab38:	330e      	adds	r3, #14
 801ab3a:	4619      	mov	r1, r3
 801ab3c:	6878      	ldr	r0, [r7, #4]
 801ab3e:	f7f7 fffd 	bl	8012b3c <pbuf_remove_header>
 801ab42:	4603      	mov	r3, r0
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	d006      	beq.n	801ab56 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801ab48:	4b2e      	ldr	r3, [pc, #184]	@ (801ac04 <icmp_input+0x1f8>)
 801ab4a:	22c7      	movs	r2, #199	@ 0xc7
 801ab4c:	4930      	ldr	r1, [pc, #192]	@ (801ac10 <icmp_input+0x204>)
 801ab4e:	482f      	ldr	r0, [pc, #188]	@ (801ac0c <icmp_input+0x200>)
 801ab50:	f002 fc0c 	bl	801d36c <iprintf>
          goto icmperr;
 801ab54:	e04b      	b.n	801abee <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	685b      	ldr	r3, [r3, #4]
 801ab5a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801ab5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ab5e:	4619      	mov	r1, r3
 801ab60:	6878      	ldr	r0, [r7, #4]
 801ab62:	f7f7 ffdb 	bl	8012b1c <pbuf_add_header>
 801ab66:	4603      	mov	r3, r0
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d12b      	bne.n	801abc4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	685b      	ldr	r3, [r3, #4]
 801ab70:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801ab72:	69fb      	ldr	r3, [r7, #28]
 801ab74:	681a      	ldr	r2, [r3, #0]
 801ab76:	68fb      	ldr	r3, [r7, #12]
 801ab78:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801ab7a:	4b20      	ldr	r3, [pc, #128]	@ (801abfc <icmp_input+0x1f0>)
 801ab7c:	691a      	ldr	r2, [r3, #16]
 801ab7e:	68fb      	ldr	r3, [r7, #12]
 801ab80:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801ab82:	693b      	ldr	r3, [r7, #16]
 801ab84:	2200      	movs	r2, #0
 801ab86:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801ab88:	693b      	ldr	r3, [r7, #16]
 801ab8a:	2200      	movs	r2, #0
 801ab8c:	709a      	strb	r2, [r3, #2]
 801ab8e:	2200      	movs	r2, #0
 801ab90:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801ab92:	68fb      	ldr	r3, [r7, #12]
 801ab94:	22ff      	movs	r2, #255	@ 0xff
 801ab96:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801ab98:	68fb      	ldr	r3, [r7, #12]
 801ab9a:	2200      	movs	r2, #0
 801ab9c:	729a      	strb	r2, [r3, #10]
 801ab9e:	2200      	movs	r2, #0
 801aba0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801aba2:	683b      	ldr	r3, [r7, #0]
 801aba4:	9302      	str	r3, [sp, #8]
 801aba6:	2301      	movs	r3, #1
 801aba8:	9301      	str	r3, [sp, #4]
 801abaa:	2300      	movs	r3, #0
 801abac:	9300      	str	r3, [sp, #0]
 801abae:	23ff      	movs	r3, #255	@ 0xff
 801abb0:	2200      	movs	r2, #0
 801abb2:	69f9      	ldr	r1, [r7, #28]
 801abb4:	6878      	ldr	r0, [r7, #4]
 801abb6:	f000 fa75 	bl	801b0a4 <ip4_output_if>
 801abba:	4603      	mov	r3, r0
 801abbc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801abbe:	e001      	b.n	801abc4 <icmp_input+0x1b8>
      break;
 801abc0:	bf00      	nop
 801abc2:	e000      	b.n	801abc6 <icmp_input+0x1ba>
      break;
 801abc4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801abc6:	6878      	ldr	r0, [r7, #4]
 801abc8:	f7f8 f83e 	bl	8012c48 <pbuf_free>
  return;
 801abcc:	e013      	b.n	801abf6 <icmp_input+0x1ea>
    goto lenerr;
 801abce:	bf00      	nop
 801abd0:	e002      	b.n	801abd8 <icmp_input+0x1cc>
    goto lenerr;
 801abd2:	bf00      	nop
 801abd4:	e000      	b.n	801abd8 <icmp_input+0x1cc>
        goto lenerr;
 801abd6:	bf00      	nop
lenerr:
  pbuf_free(p);
 801abd8:	6878      	ldr	r0, [r7, #4]
 801abda:	f7f8 f835 	bl	8012c48 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801abde:	e00a      	b.n	801abf6 <icmp_input+0x1ea>
        goto icmperr;
 801abe0:	bf00      	nop
 801abe2:	e004      	b.n	801abee <icmp_input+0x1e2>
        goto icmperr;
 801abe4:	bf00      	nop
 801abe6:	e002      	b.n	801abee <icmp_input+0x1e2>
          goto icmperr;
 801abe8:	bf00      	nop
 801abea:	e000      	b.n	801abee <icmp_input+0x1e2>
          goto icmperr;
 801abec:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801abee:	6878      	ldr	r0, [r7, #4]
 801abf0:	f7f8 f82a 	bl	8012c48 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801abf4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801abf6:	3728      	adds	r7, #40	@ 0x28
 801abf8:	46bd      	mov	sp, r7
 801abfa:	bd80      	pop	{r7, pc}
 801abfc:	2000b35c 	.word	0x2000b35c
 801ac00:	2000b370 	.word	0x2000b370
 801ac04:	08021774 	.word	0x08021774
 801ac08:	080217ac 	.word	0x080217ac
 801ac0c:	080217e4 	.word	0x080217e4
 801ac10:	0802180c 	.word	0x0802180c

0801ac14 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801ac14:	b580      	push	{r7, lr}
 801ac16:	b082      	sub	sp, #8
 801ac18:	af00      	add	r7, sp, #0
 801ac1a:	6078      	str	r0, [r7, #4]
 801ac1c:	460b      	mov	r3, r1
 801ac1e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801ac20:	78fb      	ldrb	r3, [r7, #3]
 801ac22:	461a      	mov	r2, r3
 801ac24:	2103      	movs	r1, #3
 801ac26:	6878      	ldr	r0, [r7, #4]
 801ac28:	f000 f814 	bl	801ac54 <icmp_send_response>
}
 801ac2c:	bf00      	nop
 801ac2e:	3708      	adds	r7, #8
 801ac30:	46bd      	mov	sp, r7
 801ac32:	bd80      	pop	{r7, pc}

0801ac34 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801ac34:	b580      	push	{r7, lr}
 801ac36:	b082      	sub	sp, #8
 801ac38:	af00      	add	r7, sp, #0
 801ac3a:	6078      	str	r0, [r7, #4]
 801ac3c:	460b      	mov	r3, r1
 801ac3e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801ac40:	78fb      	ldrb	r3, [r7, #3]
 801ac42:	461a      	mov	r2, r3
 801ac44:	210b      	movs	r1, #11
 801ac46:	6878      	ldr	r0, [r7, #4]
 801ac48:	f000 f804 	bl	801ac54 <icmp_send_response>
}
 801ac4c:	bf00      	nop
 801ac4e:	3708      	adds	r7, #8
 801ac50:	46bd      	mov	sp, r7
 801ac52:	bd80      	pop	{r7, pc}

0801ac54 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801ac54:	b580      	push	{r7, lr}
 801ac56:	b08c      	sub	sp, #48	@ 0x30
 801ac58:	af04      	add	r7, sp, #16
 801ac5a:	6078      	str	r0, [r7, #4]
 801ac5c:	460b      	mov	r3, r1
 801ac5e:	70fb      	strb	r3, [r7, #3]
 801ac60:	4613      	mov	r3, r2
 801ac62:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801ac64:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ac68:	2124      	movs	r1, #36	@ 0x24
 801ac6a:	2022      	movs	r0, #34	@ 0x22
 801ac6c:	f7f7 fd08 	bl	8012680 <pbuf_alloc>
 801ac70:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801ac72:	69fb      	ldr	r3, [r7, #28]
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	d04c      	beq.n	801ad12 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801ac78:	69fb      	ldr	r3, [r7, #28]
 801ac7a:	895b      	ldrh	r3, [r3, #10]
 801ac7c:	2b23      	cmp	r3, #35	@ 0x23
 801ac7e:	d806      	bhi.n	801ac8e <icmp_send_response+0x3a>
 801ac80:	4b26      	ldr	r3, [pc, #152]	@ (801ad1c <icmp_send_response+0xc8>)
 801ac82:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801ac86:	4926      	ldr	r1, [pc, #152]	@ (801ad20 <icmp_send_response+0xcc>)
 801ac88:	4826      	ldr	r0, [pc, #152]	@ (801ad24 <icmp_send_response+0xd0>)
 801ac8a:	f002 fb6f 	bl	801d36c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	685b      	ldr	r3, [r3, #4]
 801ac92:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801ac94:	69fb      	ldr	r3, [r7, #28]
 801ac96:	685b      	ldr	r3, [r3, #4]
 801ac98:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801ac9a:	697b      	ldr	r3, [r7, #20]
 801ac9c:	78fa      	ldrb	r2, [r7, #3]
 801ac9e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801aca0:	697b      	ldr	r3, [r7, #20]
 801aca2:	78ba      	ldrb	r2, [r7, #2]
 801aca4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801aca6:	697b      	ldr	r3, [r7, #20]
 801aca8:	2200      	movs	r2, #0
 801acaa:	711a      	strb	r2, [r3, #4]
 801acac:	2200      	movs	r2, #0
 801acae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801acb0:	697b      	ldr	r3, [r7, #20]
 801acb2:	2200      	movs	r2, #0
 801acb4:	719a      	strb	r2, [r3, #6]
 801acb6:	2200      	movs	r2, #0
 801acb8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801acba:	69fb      	ldr	r3, [r7, #28]
 801acbc:	685b      	ldr	r3, [r3, #4]
 801acbe:	f103 0008 	add.w	r0, r3, #8
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	685b      	ldr	r3, [r3, #4]
 801acc6:	221c      	movs	r2, #28
 801acc8:	4619      	mov	r1, r3
 801acca:	f002 fcdc 	bl	801d686 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801acce:	69bb      	ldr	r3, [r7, #24]
 801acd0:	68db      	ldr	r3, [r3, #12]
 801acd2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801acd4:	f107 030c 	add.w	r3, r7, #12
 801acd8:	4618      	mov	r0, r3
 801acda:	f000 f825 	bl	801ad28 <ip4_route>
 801acde:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801ace0:	693b      	ldr	r3, [r7, #16]
 801ace2:	2b00      	cmp	r3, #0
 801ace4:	d011      	beq.n	801ad0a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801ace6:	697b      	ldr	r3, [r7, #20]
 801ace8:	2200      	movs	r2, #0
 801acea:	709a      	strb	r2, [r3, #2]
 801acec:	2200      	movs	r2, #0
 801acee:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801acf0:	f107 020c 	add.w	r2, r7, #12
 801acf4:	693b      	ldr	r3, [r7, #16]
 801acf6:	9302      	str	r3, [sp, #8]
 801acf8:	2301      	movs	r3, #1
 801acfa:	9301      	str	r3, [sp, #4]
 801acfc:	2300      	movs	r3, #0
 801acfe:	9300      	str	r3, [sp, #0]
 801ad00:	23ff      	movs	r3, #255	@ 0xff
 801ad02:	2100      	movs	r1, #0
 801ad04:	69f8      	ldr	r0, [r7, #28]
 801ad06:	f000 f9cd 	bl	801b0a4 <ip4_output_if>
  }
  pbuf_free(q);
 801ad0a:	69f8      	ldr	r0, [r7, #28]
 801ad0c:	f7f7 ff9c 	bl	8012c48 <pbuf_free>
 801ad10:	e000      	b.n	801ad14 <icmp_send_response+0xc0>
    return;
 801ad12:	bf00      	nop
}
 801ad14:	3720      	adds	r7, #32
 801ad16:	46bd      	mov	sp, r7
 801ad18:	bd80      	pop	{r7, pc}
 801ad1a:	bf00      	nop
 801ad1c:	08021774 	.word	0x08021774
 801ad20:	08021840 	.word	0x08021840
 801ad24:	080217e4 	.word	0x080217e4

0801ad28 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801ad28:	b480      	push	{r7}
 801ad2a:	b085      	sub	sp, #20
 801ad2c:	af00      	add	r7, sp, #0
 801ad2e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801ad30:	4b33      	ldr	r3, [pc, #204]	@ (801ae00 <ip4_route+0xd8>)
 801ad32:	681b      	ldr	r3, [r3, #0]
 801ad34:	60fb      	str	r3, [r7, #12]
 801ad36:	e036      	b.n	801ada6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ad3e:	f003 0301 	and.w	r3, r3, #1
 801ad42:	b2db      	uxtb	r3, r3
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	d02b      	beq.n	801ada0 <ip4_route+0x78>
 801ad48:	68fb      	ldr	r3, [r7, #12]
 801ad4a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ad4e:	089b      	lsrs	r3, r3, #2
 801ad50:	f003 0301 	and.w	r3, r3, #1
 801ad54:	b2db      	uxtb	r3, r3
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	d022      	beq.n	801ada0 <ip4_route+0x78>
 801ad5a:	68fb      	ldr	r3, [r7, #12]
 801ad5c:	3304      	adds	r3, #4
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	d01d      	beq.n	801ada0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	681a      	ldr	r2, [r3, #0]
 801ad68:	68fb      	ldr	r3, [r7, #12]
 801ad6a:	3304      	adds	r3, #4
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	405a      	eors	r2, r3
 801ad70:	68fb      	ldr	r3, [r7, #12]
 801ad72:	3308      	adds	r3, #8
 801ad74:	681b      	ldr	r3, [r3, #0]
 801ad76:	4013      	ands	r3, r2
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d101      	bne.n	801ad80 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801ad7c:	68fb      	ldr	r3, [r7, #12]
 801ad7e:	e038      	b.n	801adf2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801ad80:	68fb      	ldr	r3, [r7, #12]
 801ad82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ad86:	f003 0302 	and.w	r3, r3, #2
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d108      	bne.n	801ada0 <ip4_route+0x78>
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	681a      	ldr	r2, [r3, #0]
 801ad92:	68fb      	ldr	r3, [r7, #12]
 801ad94:	330c      	adds	r3, #12
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	429a      	cmp	r2, r3
 801ad9a:	d101      	bne.n	801ada0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801ad9c:	68fb      	ldr	r3, [r7, #12]
 801ad9e:	e028      	b.n	801adf2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801ada0:	68fb      	ldr	r3, [r7, #12]
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	60fb      	str	r3, [r7, #12]
 801ada6:	68fb      	ldr	r3, [r7, #12]
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	d1c5      	bne.n	801ad38 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801adac:	4b15      	ldr	r3, [pc, #84]	@ (801ae04 <ip4_route+0xdc>)
 801adae:	681b      	ldr	r3, [r3, #0]
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d01a      	beq.n	801adea <ip4_route+0xc2>
 801adb4:	4b13      	ldr	r3, [pc, #76]	@ (801ae04 <ip4_route+0xdc>)
 801adb6:	681b      	ldr	r3, [r3, #0]
 801adb8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801adbc:	f003 0301 	and.w	r3, r3, #1
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d012      	beq.n	801adea <ip4_route+0xc2>
 801adc4:	4b0f      	ldr	r3, [pc, #60]	@ (801ae04 <ip4_route+0xdc>)
 801adc6:	681b      	ldr	r3, [r3, #0]
 801adc8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801adcc:	f003 0304 	and.w	r3, r3, #4
 801add0:	2b00      	cmp	r3, #0
 801add2:	d00a      	beq.n	801adea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801add4:	4b0b      	ldr	r3, [pc, #44]	@ (801ae04 <ip4_route+0xdc>)
 801add6:	681b      	ldr	r3, [r3, #0]
 801add8:	3304      	adds	r3, #4
 801adda:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801addc:	2b00      	cmp	r3, #0
 801adde:	d004      	beq.n	801adea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	b2db      	uxtb	r3, r3
 801ade6:	2b7f      	cmp	r3, #127	@ 0x7f
 801ade8:	d101      	bne.n	801adee <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801adea:	2300      	movs	r3, #0
 801adec:	e001      	b.n	801adf2 <ip4_route+0xca>
  }

  return netif_default;
 801adee:	4b05      	ldr	r3, [pc, #20]	@ (801ae04 <ip4_route+0xdc>)
 801adf0:	681b      	ldr	r3, [r3, #0]
}
 801adf2:	4618      	mov	r0, r3
 801adf4:	3714      	adds	r7, #20
 801adf6:	46bd      	mov	sp, r7
 801adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adfc:	4770      	bx	lr
 801adfe:	bf00      	nop
 801ae00:	2000e450 	.word	0x2000e450
 801ae04:	2000e454 	.word	0x2000e454

0801ae08 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801ae08:	b580      	push	{r7, lr}
 801ae0a:	b082      	sub	sp, #8
 801ae0c:	af00      	add	r7, sp, #0
 801ae0e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ae16:	f003 0301 	and.w	r3, r3, #1
 801ae1a:	b2db      	uxtb	r3, r3
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	d016      	beq.n	801ae4e <ip4_input_accept+0x46>
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	3304      	adds	r3, #4
 801ae24:	681b      	ldr	r3, [r3, #0]
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	d011      	beq.n	801ae4e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ae2a:	4b0b      	ldr	r3, [pc, #44]	@ (801ae58 <ip4_input_accept+0x50>)
 801ae2c:	695a      	ldr	r2, [r3, #20]
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	3304      	adds	r3, #4
 801ae32:	681b      	ldr	r3, [r3, #0]
 801ae34:	429a      	cmp	r2, r3
 801ae36:	d008      	beq.n	801ae4a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801ae38:	4b07      	ldr	r3, [pc, #28]	@ (801ae58 <ip4_input_accept+0x50>)
 801ae3a:	695b      	ldr	r3, [r3, #20]
 801ae3c:	6879      	ldr	r1, [r7, #4]
 801ae3e:	4618      	mov	r0, r3
 801ae40:	f000 fa08 	bl	801b254 <ip4_addr_isbroadcast_u32>
 801ae44:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d001      	beq.n	801ae4e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801ae4a:	2301      	movs	r3, #1
 801ae4c:	e000      	b.n	801ae50 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801ae4e:	2300      	movs	r3, #0
}
 801ae50:	4618      	mov	r0, r3
 801ae52:	3708      	adds	r7, #8
 801ae54:	46bd      	mov	sp, r7
 801ae56:	bd80      	pop	{r7, pc}
 801ae58:	2000b35c 	.word	0x2000b35c

0801ae5c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b086      	sub	sp, #24
 801ae60:	af00      	add	r7, sp, #0
 801ae62:	6078      	str	r0, [r7, #4]
 801ae64:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	685b      	ldr	r3, [r3, #4]
 801ae6a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801ae6c:	697b      	ldr	r3, [r7, #20]
 801ae6e:	781b      	ldrb	r3, [r3, #0]
 801ae70:	091b      	lsrs	r3, r3, #4
 801ae72:	b2db      	uxtb	r3, r3
 801ae74:	2b04      	cmp	r3, #4
 801ae76:	d004      	beq.n	801ae82 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801ae78:	6878      	ldr	r0, [r7, #4]
 801ae7a:	f7f7 fee5 	bl	8012c48 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801ae7e:	2300      	movs	r3, #0
 801ae80:	e107      	b.n	801b092 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801ae82:	697b      	ldr	r3, [r7, #20]
 801ae84:	781b      	ldrb	r3, [r3, #0]
 801ae86:	f003 030f 	and.w	r3, r3, #15
 801ae8a:	b2db      	uxtb	r3, r3
 801ae8c:	009b      	lsls	r3, r3, #2
 801ae8e:	b2db      	uxtb	r3, r3
 801ae90:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801ae92:	697b      	ldr	r3, [r7, #20]
 801ae94:	885b      	ldrh	r3, [r3, #2]
 801ae96:	b29b      	uxth	r3, r3
 801ae98:	4618      	mov	r0, r3
 801ae9a:	f7f6 fae7 	bl	801146c <lwip_htons>
 801ae9e:	4603      	mov	r3, r0
 801aea0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	891b      	ldrh	r3, [r3, #8]
 801aea6:	89ba      	ldrh	r2, [r7, #12]
 801aea8:	429a      	cmp	r2, r3
 801aeaa:	d204      	bcs.n	801aeb6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801aeac:	89bb      	ldrh	r3, [r7, #12]
 801aeae:	4619      	mov	r1, r3
 801aeb0:	6878      	ldr	r0, [r7, #4]
 801aeb2:	f7f7 fd43 	bl	801293c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	895b      	ldrh	r3, [r3, #10]
 801aeba:	89fa      	ldrh	r2, [r7, #14]
 801aebc:	429a      	cmp	r2, r3
 801aebe:	d807      	bhi.n	801aed0 <ip4_input+0x74>
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	891b      	ldrh	r3, [r3, #8]
 801aec4:	89ba      	ldrh	r2, [r7, #12]
 801aec6:	429a      	cmp	r2, r3
 801aec8:	d802      	bhi.n	801aed0 <ip4_input+0x74>
 801aeca:	89fb      	ldrh	r3, [r7, #14]
 801aecc:	2b13      	cmp	r3, #19
 801aece:	d804      	bhi.n	801aeda <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801aed0:	6878      	ldr	r0, [r7, #4]
 801aed2:	f7f7 feb9 	bl	8012c48 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801aed6:	2300      	movs	r3, #0
 801aed8:	e0db      	b.n	801b092 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801aeda:	697b      	ldr	r3, [r7, #20]
 801aedc:	691b      	ldr	r3, [r3, #16]
 801aede:	4a6f      	ldr	r2, [pc, #444]	@ (801b09c <ip4_input+0x240>)
 801aee0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801aee2:	697b      	ldr	r3, [r7, #20]
 801aee4:	68db      	ldr	r3, [r3, #12]
 801aee6:	4a6d      	ldr	r2, [pc, #436]	@ (801b09c <ip4_input+0x240>)
 801aee8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801aeea:	4b6c      	ldr	r3, [pc, #432]	@ (801b09c <ip4_input+0x240>)
 801aeec:	695b      	ldr	r3, [r3, #20]
 801aeee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801aef2:	2be0      	cmp	r3, #224	@ 0xe0
 801aef4:	d112      	bne.n	801af1c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801aef6:	683b      	ldr	r3, [r7, #0]
 801aef8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801aefc:	f003 0301 	and.w	r3, r3, #1
 801af00:	b2db      	uxtb	r3, r3
 801af02:	2b00      	cmp	r3, #0
 801af04:	d007      	beq.n	801af16 <ip4_input+0xba>
 801af06:	683b      	ldr	r3, [r7, #0]
 801af08:	3304      	adds	r3, #4
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	d002      	beq.n	801af16 <ip4_input+0xba>
      netif = inp;
 801af10:	683b      	ldr	r3, [r7, #0]
 801af12:	613b      	str	r3, [r7, #16]
 801af14:	e02a      	b.n	801af6c <ip4_input+0x110>
    } else {
      netif = NULL;
 801af16:	2300      	movs	r3, #0
 801af18:	613b      	str	r3, [r7, #16]
 801af1a:	e027      	b.n	801af6c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801af1c:	6838      	ldr	r0, [r7, #0]
 801af1e:	f7ff ff73 	bl	801ae08 <ip4_input_accept>
 801af22:	4603      	mov	r3, r0
 801af24:	2b00      	cmp	r3, #0
 801af26:	d002      	beq.n	801af2e <ip4_input+0xd2>
      netif = inp;
 801af28:	683b      	ldr	r3, [r7, #0]
 801af2a:	613b      	str	r3, [r7, #16]
 801af2c:	e01e      	b.n	801af6c <ip4_input+0x110>
    } else {
      netif = NULL;
 801af2e:	2300      	movs	r3, #0
 801af30:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801af32:	4b5a      	ldr	r3, [pc, #360]	@ (801b09c <ip4_input+0x240>)
 801af34:	695b      	ldr	r3, [r3, #20]
 801af36:	b2db      	uxtb	r3, r3
 801af38:	2b7f      	cmp	r3, #127	@ 0x7f
 801af3a:	d017      	beq.n	801af6c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801af3c:	4b58      	ldr	r3, [pc, #352]	@ (801b0a0 <ip4_input+0x244>)
 801af3e:	681b      	ldr	r3, [r3, #0]
 801af40:	613b      	str	r3, [r7, #16]
 801af42:	e00e      	b.n	801af62 <ip4_input+0x106>
          if (netif == inp) {
 801af44:	693a      	ldr	r2, [r7, #16]
 801af46:	683b      	ldr	r3, [r7, #0]
 801af48:	429a      	cmp	r2, r3
 801af4a:	d006      	beq.n	801af5a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801af4c:	6938      	ldr	r0, [r7, #16]
 801af4e:	f7ff ff5b 	bl	801ae08 <ip4_input_accept>
 801af52:	4603      	mov	r3, r0
 801af54:	2b00      	cmp	r3, #0
 801af56:	d108      	bne.n	801af6a <ip4_input+0x10e>
 801af58:	e000      	b.n	801af5c <ip4_input+0x100>
            continue;
 801af5a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801af5c:	693b      	ldr	r3, [r7, #16]
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	613b      	str	r3, [r7, #16]
 801af62:	693b      	ldr	r3, [r7, #16]
 801af64:	2b00      	cmp	r3, #0
 801af66:	d1ed      	bne.n	801af44 <ip4_input+0xe8>
 801af68:	e000      	b.n	801af6c <ip4_input+0x110>
            break;
 801af6a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801af6c:	4b4b      	ldr	r3, [pc, #300]	@ (801b09c <ip4_input+0x240>)
 801af6e:	691b      	ldr	r3, [r3, #16]
 801af70:	6839      	ldr	r1, [r7, #0]
 801af72:	4618      	mov	r0, r3
 801af74:	f000 f96e 	bl	801b254 <ip4_addr_isbroadcast_u32>
 801af78:	4603      	mov	r3, r0
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	d105      	bne.n	801af8a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801af7e:	4b47      	ldr	r3, [pc, #284]	@ (801b09c <ip4_input+0x240>)
 801af80:	691b      	ldr	r3, [r3, #16]
 801af82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801af86:	2be0      	cmp	r3, #224	@ 0xe0
 801af88:	d104      	bne.n	801af94 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801af8a:	6878      	ldr	r0, [r7, #4]
 801af8c:	f7f7 fe5c 	bl	8012c48 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801af90:	2300      	movs	r3, #0
 801af92:	e07e      	b.n	801b092 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801af94:	693b      	ldr	r3, [r7, #16]
 801af96:	2b00      	cmp	r3, #0
 801af98:	d104      	bne.n	801afa4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801af9a:	6878      	ldr	r0, [r7, #4]
 801af9c:	f7f7 fe54 	bl	8012c48 <pbuf_free>
    return ERR_OK;
 801afa0:	2300      	movs	r3, #0
 801afa2:	e076      	b.n	801b092 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801afa4:	697b      	ldr	r3, [r7, #20]
 801afa6:	88db      	ldrh	r3, [r3, #6]
 801afa8:	b29b      	uxth	r3, r3
 801afaa:	461a      	mov	r2, r3
 801afac:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801afb0:	4013      	ands	r3, r2
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d00b      	beq.n	801afce <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801afb6:	6878      	ldr	r0, [r7, #4]
 801afb8:	f000 fc92 	bl	801b8e0 <ip4_reass>
 801afbc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d101      	bne.n	801afc8 <ip4_input+0x16c>
      return ERR_OK;
 801afc4:	2300      	movs	r3, #0
 801afc6:	e064      	b.n	801b092 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	685b      	ldr	r3, [r3, #4]
 801afcc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801afce:	4a33      	ldr	r2, [pc, #204]	@ (801b09c <ip4_input+0x240>)
 801afd0:	693b      	ldr	r3, [r7, #16]
 801afd2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801afd4:	4a31      	ldr	r2, [pc, #196]	@ (801b09c <ip4_input+0x240>)
 801afd6:	683b      	ldr	r3, [r7, #0]
 801afd8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801afda:	4a30      	ldr	r2, [pc, #192]	@ (801b09c <ip4_input+0x240>)
 801afdc:	697b      	ldr	r3, [r7, #20]
 801afde:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801afe0:	697b      	ldr	r3, [r7, #20]
 801afe2:	781b      	ldrb	r3, [r3, #0]
 801afe4:	f003 030f 	and.w	r3, r3, #15
 801afe8:	b2db      	uxtb	r3, r3
 801afea:	009b      	lsls	r3, r3, #2
 801afec:	b2db      	uxtb	r3, r3
 801afee:	461a      	mov	r2, r3
 801aff0:	4b2a      	ldr	r3, [pc, #168]	@ (801b09c <ip4_input+0x240>)
 801aff2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801aff4:	89fb      	ldrh	r3, [r7, #14]
 801aff6:	4619      	mov	r1, r3
 801aff8:	6878      	ldr	r0, [r7, #4]
 801affa:	f7f7 fd9f 	bl	8012b3c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801affe:	697b      	ldr	r3, [r7, #20]
 801b000:	7a5b      	ldrb	r3, [r3, #9]
 801b002:	2b11      	cmp	r3, #17
 801b004:	d006      	beq.n	801b014 <ip4_input+0x1b8>
 801b006:	2b11      	cmp	r3, #17
 801b008:	dc13      	bgt.n	801b032 <ip4_input+0x1d6>
 801b00a:	2b01      	cmp	r3, #1
 801b00c:	d00c      	beq.n	801b028 <ip4_input+0x1cc>
 801b00e:	2b06      	cmp	r3, #6
 801b010:	d005      	beq.n	801b01e <ip4_input+0x1c2>
 801b012:	e00e      	b.n	801b032 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801b014:	6839      	ldr	r1, [r7, #0]
 801b016:	6878      	ldr	r0, [r7, #4]
 801b018:	f7fe fb5a 	bl	80196d0 <udp_input>
        break;
 801b01c:	e026      	b.n	801b06c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801b01e:	6839      	ldr	r1, [r7, #0]
 801b020:	6878      	ldr	r0, [r7, #4]
 801b022:	f7f9 ff19 	bl	8014e58 <tcp_input>
        break;
 801b026:	e021      	b.n	801b06c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801b028:	6839      	ldr	r1, [r7, #0]
 801b02a:	6878      	ldr	r0, [r7, #4]
 801b02c:	f7ff fcee 	bl	801aa0c <icmp_input>
        break;
 801b030:	e01c      	b.n	801b06c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b032:	4b1a      	ldr	r3, [pc, #104]	@ (801b09c <ip4_input+0x240>)
 801b034:	695b      	ldr	r3, [r3, #20]
 801b036:	6939      	ldr	r1, [r7, #16]
 801b038:	4618      	mov	r0, r3
 801b03a:	f000 f90b 	bl	801b254 <ip4_addr_isbroadcast_u32>
 801b03e:	4603      	mov	r3, r0
 801b040:	2b00      	cmp	r3, #0
 801b042:	d10f      	bne.n	801b064 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b044:	4b15      	ldr	r3, [pc, #84]	@ (801b09c <ip4_input+0x240>)
 801b046:	695b      	ldr	r3, [r3, #20]
 801b048:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b04c:	2be0      	cmp	r3, #224	@ 0xe0
 801b04e:	d009      	beq.n	801b064 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801b050:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b054:	4619      	mov	r1, r3
 801b056:	6878      	ldr	r0, [r7, #4]
 801b058:	f7f7 fde3 	bl	8012c22 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801b05c:	2102      	movs	r1, #2
 801b05e:	6878      	ldr	r0, [r7, #4]
 801b060:	f7ff fdd8 	bl	801ac14 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801b064:	6878      	ldr	r0, [r7, #4]
 801b066:	f7f7 fdef 	bl	8012c48 <pbuf_free>
        break;
 801b06a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801b06c:	4b0b      	ldr	r3, [pc, #44]	@ (801b09c <ip4_input+0x240>)
 801b06e:	2200      	movs	r2, #0
 801b070:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801b072:	4b0a      	ldr	r3, [pc, #40]	@ (801b09c <ip4_input+0x240>)
 801b074:	2200      	movs	r2, #0
 801b076:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801b078:	4b08      	ldr	r3, [pc, #32]	@ (801b09c <ip4_input+0x240>)
 801b07a:	2200      	movs	r2, #0
 801b07c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801b07e:	4b07      	ldr	r3, [pc, #28]	@ (801b09c <ip4_input+0x240>)
 801b080:	2200      	movs	r2, #0
 801b082:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801b084:	4b05      	ldr	r3, [pc, #20]	@ (801b09c <ip4_input+0x240>)
 801b086:	2200      	movs	r2, #0
 801b088:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801b08a:	4b04      	ldr	r3, [pc, #16]	@ (801b09c <ip4_input+0x240>)
 801b08c:	2200      	movs	r2, #0
 801b08e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801b090:	2300      	movs	r3, #0
}
 801b092:	4618      	mov	r0, r3
 801b094:	3718      	adds	r7, #24
 801b096:	46bd      	mov	sp, r7
 801b098:	bd80      	pop	{r7, pc}
 801b09a:	bf00      	nop
 801b09c:	2000b35c 	.word	0x2000b35c
 801b0a0:	2000e450 	.word	0x2000e450

0801b0a4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801b0a4:	b580      	push	{r7, lr}
 801b0a6:	b08a      	sub	sp, #40	@ 0x28
 801b0a8:	af04      	add	r7, sp, #16
 801b0aa:	60f8      	str	r0, [r7, #12]
 801b0ac:	60b9      	str	r1, [r7, #8]
 801b0ae:	607a      	str	r2, [r7, #4]
 801b0b0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801b0b2:	68bb      	ldr	r3, [r7, #8]
 801b0b4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	d009      	beq.n	801b0d0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801b0bc:	68bb      	ldr	r3, [r7, #8]
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d003      	beq.n	801b0ca <ip4_output_if+0x26>
 801b0c2:	68bb      	ldr	r3, [r7, #8]
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	2b00      	cmp	r3, #0
 801b0c8:	d102      	bne.n	801b0d0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801b0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0cc:	3304      	adds	r3, #4
 801b0ce:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801b0d0:	78fa      	ldrb	r2, [r7, #3]
 801b0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0d4:	9302      	str	r3, [sp, #8]
 801b0d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801b0da:	9301      	str	r3, [sp, #4]
 801b0dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b0e0:	9300      	str	r3, [sp, #0]
 801b0e2:	4613      	mov	r3, r2
 801b0e4:	687a      	ldr	r2, [r7, #4]
 801b0e6:	6979      	ldr	r1, [r7, #20]
 801b0e8:	68f8      	ldr	r0, [r7, #12]
 801b0ea:	f000 f805 	bl	801b0f8 <ip4_output_if_src>
 801b0ee:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801b0f0:	4618      	mov	r0, r3
 801b0f2:	3718      	adds	r7, #24
 801b0f4:	46bd      	mov	sp, r7
 801b0f6:	bd80      	pop	{r7, pc}

0801b0f8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801b0f8:	b580      	push	{r7, lr}
 801b0fa:	b088      	sub	sp, #32
 801b0fc:	af00      	add	r7, sp, #0
 801b0fe:	60f8      	str	r0, [r7, #12]
 801b100:	60b9      	str	r1, [r7, #8]
 801b102:	607a      	str	r2, [r7, #4]
 801b104:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801b106:	68fb      	ldr	r3, [r7, #12]
 801b108:	7b9b      	ldrb	r3, [r3, #14]
 801b10a:	2b01      	cmp	r3, #1
 801b10c:	d006      	beq.n	801b11c <ip4_output_if_src+0x24>
 801b10e:	4b4b      	ldr	r3, [pc, #300]	@ (801b23c <ip4_output_if_src+0x144>)
 801b110:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801b114:	494a      	ldr	r1, [pc, #296]	@ (801b240 <ip4_output_if_src+0x148>)
 801b116:	484b      	ldr	r0, [pc, #300]	@ (801b244 <ip4_output_if_src+0x14c>)
 801b118:	f002 f928 	bl	801d36c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d060      	beq.n	801b1e4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801b122:	2314      	movs	r3, #20
 801b124:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801b126:	2114      	movs	r1, #20
 801b128:	68f8      	ldr	r0, [r7, #12]
 801b12a:	f7f7 fcf7 	bl	8012b1c <pbuf_add_header>
 801b12e:	4603      	mov	r3, r0
 801b130:	2b00      	cmp	r3, #0
 801b132:	d002      	beq.n	801b13a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b134:	f06f 0301 	mvn.w	r3, #1
 801b138:	e07c      	b.n	801b234 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801b13a:	68fb      	ldr	r3, [r7, #12]
 801b13c:	685b      	ldr	r3, [r3, #4]
 801b13e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801b140:	68fb      	ldr	r3, [r7, #12]
 801b142:	895b      	ldrh	r3, [r3, #10]
 801b144:	2b13      	cmp	r3, #19
 801b146:	d806      	bhi.n	801b156 <ip4_output_if_src+0x5e>
 801b148:	4b3c      	ldr	r3, [pc, #240]	@ (801b23c <ip4_output_if_src+0x144>)
 801b14a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801b14e:	493e      	ldr	r1, [pc, #248]	@ (801b248 <ip4_output_if_src+0x150>)
 801b150:	483c      	ldr	r0, [pc, #240]	@ (801b244 <ip4_output_if_src+0x14c>)
 801b152:	f002 f90b 	bl	801d36c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801b156:	69fb      	ldr	r3, [r7, #28]
 801b158:	78fa      	ldrb	r2, [r7, #3]
 801b15a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801b15c:	69fb      	ldr	r3, [r7, #28]
 801b15e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801b162:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	681a      	ldr	r2, [r3, #0]
 801b168:	69fb      	ldr	r3, [r7, #28]
 801b16a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801b16c:	8b7b      	ldrh	r3, [r7, #26]
 801b16e:	089b      	lsrs	r3, r3, #2
 801b170:	b29b      	uxth	r3, r3
 801b172:	b2db      	uxtb	r3, r3
 801b174:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b178:	b2da      	uxtb	r2, r3
 801b17a:	69fb      	ldr	r3, [r7, #28]
 801b17c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801b17e:	69fb      	ldr	r3, [r7, #28]
 801b180:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801b184:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801b186:	68fb      	ldr	r3, [r7, #12]
 801b188:	891b      	ldrh	r3, [r3, #8]
 801b18a:	4618      	mov	r0, r3
 801b18c:	f7f6 f96e 	bl	801146c <lwip_htons>
 801b190:	4603      	mov	r3, r0
 801b192:	461a      	mov	r2, r3
 801b194:	69fb      	ldr	r3, [r7, #28]
 801b196:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801b198:	69fb      	ldr	r3, [r7, #28]
 801b19a:	2200      	movs	r2, #0
 801b19c:	719a      	strb	r2, [r3, #6]
 801b19e:	2200      	movs	r2, #0
 801b1a0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801b1a2:	4b2a      	ldr	r3, [pc, #168]	@ (801b24c <ip4_output_if_src+0x154>)
 801b1a4:	881b      	ldrh	r3, [r3, #0]
 801b1a6:	4618      	mov	r0, r3
 801b1a8:	f7f6 f960 	bl	801146c <lwip_htons>
 801b1ac:	4603      	mov	r3, r0
 801b1ae:	461a      	mov	r2, r3
 801b1b0:	69fb      	ldr	r3, [r7, #28]
 801b1b2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801b1b4:	4b25      	ldr	r3, [pc, #148]	@ (801b24c <ip4_output_if_src+0x154>)
 801b1b6:	881b      	ldrh	r3, [r3, #0]
 801b1b8:	3301      	adds	r3, #1
 801b1ba:	b29a      	uxth	r2, r3
 801b1bc:	4b23      	ldr	r3, [pc, #140]	@ (801b24c <ip4_output_if_src+0x154>)
 801b1be:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801b1c0:	68bb      	ldr	r3, [r7, #8]
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d104      	bne.n	801b1d0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801b1c6:	4b22      	ldr	r3, [pc, #136]	@ (801b250 <ip4_output_if_src+0x158>)
 801b1c8:	681a      	ldr	r2, [r3, #0]
 801b1ca:	69fb      	ldr	r3, [r7, #28]
 801b1cc:	60da      	str	r2, [r3, #12]
 801b1ce:	e003      	b.n	801b1d8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b1d0:	68bb      	ldr	r3, [r7, #8]
 801b1d2:	681a      	ldr	r2, [r3, #0]
 801b1d4:	69fb      	ldr	r3, [r7, #28]
 801b1d6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b1d8:	69fb      	ldr	r3, [r7, #28]
 801b1da:	2200      	movs	r2, #0
 801b1dc:	729a      	strb	r2, [r3, #10]
 801b1de:	2200      	movs	r2, #0
 801b1e0:	72da      	strb	r2, [r3, #11]
 801b1e2:	e00f      	b.n	801b204 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b1e4:	68fb      	ldr	r3, [r7, #12]
 801b1e6:	895b      	ldrh	r3, [r3, #10]
 801b1e8:	2b13      	cmp	r3, #19
 801b1ea:	d802      	bhi.n	801b1f2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b1ec:	f06f 0301 	mvn.w	r3, #1
 801b1f0:	e020      	b.n	801b234 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b1f2:	68fb      	ldr	r3, [r7, #12]
 801b1f4:	685b      	ldr	r3, [r3, #4]
 801b1f6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b1f8:	69fb      	ldr	r3, [r7, #28]
 801b1fa:	691b      	ldr	r3, [r3, #16]
 801b1fc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b1fe:	f107 0314 	add.w	r3, r7, #20
 801b202:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b206:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801b208:	2b00      	cmp	r3, #0
 801b20a:	d00c      	beq.n	801b226 <ip4_output_if_src+0x12e>
 801b20c:	68fb      	ldr	r3, [r7, #12]
 801b20e:	891a      	ldrh	r2, [r3, #8]
 801b210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b212:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801b214:	429a      	cmp	r2, r3
 801b216:	d906      	bls.n	801b226 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b218:	687a      	ldr	r2, [r7, #4]
 801b21a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801b21c:	68f8      	ldr	r0, [r7, #12]
 801b21e:	f000 fd53 	bl	801bcc8 <ip4_frag>
 801b222:	4603      	mov	r3, r0
 801b224:	e006      	b.n	801b234 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b228:	695b      	ldr	r3, [r3, #20]
 801b22a:	687a      	ldr	r2, [r7, #4]
 801b22c:	68f9      	ldr	r1, [r7, #12]
 801b22e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b230:	4798      	blx	r3
 801b232:	4603      	mov	r3, r0
}
 801b234:	4618      	mov	r0, r3
 801b236:	3720      	adds	r7, #32
 801b238:	46bd      	mov	sp, r7
 801b23a:	bd80      	pop	{r7, pc}
 801b23c:	0802186c 	.word	0x0802186c
 801b240:	080218a0 	.word	0x080218a0
 801b244:	080218ac 	.word	0x080218ac
 801b248:	080218d4 	.word	0x080218d4
 801b24c:	2000e5ae 	.word	0x2000e5ae
 801b250:	08032518 	.word	0x08032518

0801b254 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b254:	b480      	push	{r7}
 801b256:	b085      	sub	sp, #20
 801b258:	af00      	add	r7, sp, #0
 801b25a:	6078      	str	r0, [r7, #4]
 801b25c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b268:	d002      	beq.n	801b270 <ip4_addr_isbroadcast_u32+0x1c>
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d101      	bne.n	801b274 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b270:	2301      	movs	r3, #1
 801b272:	e02a      	b.n	801b2ca <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b274:	683b      	ldr	r3, [r7, #0]
 801b276:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b27a:	f003 0302 	and.w	r3, r3, #2
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d101      	bne.n	801b286 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b282:	2300      	movs	r3, #0
 801b284:	e021      	b.n	801b2ca <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b286:	683b      	ldr	r3, [r7, #0]
 801b288:	3304      	adds	r3, #4
 801b28a:	681b      	ldr	r3, [r3, #0]
 801b28c:	687a      	ldr	r2, [r7, #4]
 801b28e:	429a      	cmp	r2, r3
 801b290:	d101      	bne.n	801b296 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b292:	2300      	movs	r3, #0
 801b294:	e019      	b.n	801b2ca <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b296:	68fa      	ldr	r2, [r7, #12]
 801b298:	683b      	ldr	r3, [r7, #0]
 801b29a:	3304      	adds	r3, #4
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	405a      	eors	r2, r3
 801b2a0:	683b      	ldr	r3, [r7, #0]
 801b2a2:	3308      	adds	r3, #8
 801b2a4:	681b      	ldr	r3, [r3, #0]
 801b2a6:	4013      	ands	r3, r2
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	d10d      	bne.n	801b2c8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b2ac:	683b      	ldr	r3, [r7, #0]
 801b2ae:	3308      	adds	r3, #8
 801b2b0:	681b      	ldr	r3, [r3, #0]
 801b2b2:	43da      	mvns	r2, r3
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b2b8:	683b      	ldr	r3, [r7, #0]
 801b2ba:	3308      	adds	r3, #8
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b2c0:	429a      	cmp	r2, r3
 801b2c2:	d101      	bne.n	801b2c8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b2c4:	2301      	movs	r3, #1
 801b2c6:	e000      	b.n	801b2ca <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b2c8:	2300      	movs	r3, #0
  }
}
 801b2ca:	4618      	mov	r0, r3
 801b2cc:	3714      	adds	r7, #20
 801b2ce:	46bd      	mov	sp, r7
 801b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2d4:	4770      	bx	lr
	...

0801b2d8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b2d8:	b580      	push	{r7, lr}
 801b2da:	b084      	sub	sp, #16
 801b2dc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b2de:	2300      	movs	r3, #0
 801b2e0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b2e2:	4b12      	ldr	r3, [pc, #72]	@ (801b32c <ip_reass_tmr+0x54>)
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b2e8:	e018      	b.n	801b31c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b2ea:	68fb      	ldr	r3, [r7, #12]
 801b2ec:	7fdb      	ldrb	r3, [r3, #31]
 801b2ee:	2b00      	cmp	r3, #0
 801b2f0:	d00b      	beq.n	801b30a <ip_reass_tmr+0x32>
      r->timer--;
 801b2f2:	68fb      	ldr	r3, [r7, #12]
 801b2f4:	7fdb      	ldrb	r3, [r3, #31]
 801b2f6:	3b01      	subs	r3, #1
 801b2f8:	b2da      	uxtb	r2, r3
 801b2fa:	68fb      	ldr	r3, [r7, #12]
 801b2fc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b2fe:	68fb      	ldr	r3, [r7, #12]
 801b300:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b302:	68fb      	ldr	r3, [r7, #12]
 801b304:	681b      	ldr	r3, [r3, #0]
 801b306:	60fb      	str	r3, [r7, #12]
 801b308:	e008      	b.n	801b31c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b30a:	68fb      	ldr	r3, [r7, #12]
 801b30c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b30e:	68fb      	ldr	r3, [r7, #12]
 801b310:	681b      	ldr	r3, [r3, #0]
 801b312:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b314:	68b9      	ldr	r1, [r7, #8]
 801b316:	6878      	ldr	r0, [r7, #4]
 801b318:	f000 f80a 	bl	801b330 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b31c:	68fb      	ldr	r3, [r7, #12]
 801b31e:	2b00      	cmp	r3, #0
 801b320:	d1e3      	bne.n	801b2ea <ip_reass_tmr+0x12>
    }
  }
}
 801b322:	bf00      	nop
 801b324:	bf00      	nop
 801b326:	3710      	adds	r7, #16
 801b328:	46bd      	mov	sp, r7
 801b32a:	bd80      	pop	{r7, pc}
 801b32c:	2000e5b0 	.word	0x2000e5b0

0801b330 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b330:	b580      	push	{r7, lr}
 801b332:	b088      	sub	sp, #32
 801b334:	af00      	add	r7, sp, #0
 801b336:	6078      	str	r0, [r7, #4]
 801b338:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801b33a:	2300      	movs	r3, #0
 801b33c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b33e:	683a      	ldr	r2, [r7, #0]
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	429a      	cmp	r2, r3
 801b344:	d105      	bne.n	801b352 <ip_reass_free_complete_datagram+0x22>
 801b346:	4b45      	ldr	r3, [pc, #276]	@ (801b45c <ip_reass_free_complete_datagram+0x12c>)
 801b348:	22ab      	movs	r2, #171	@ 0xab
 801b34a:	4945      	ldr	r1, [pc, #276]	@ (801b460 <ip_reass_free_complete_datagram+0x130>)
 801b34c:	4845      	ldr	r0, [pc, #276]	@ (801b464 <ip_reass_free_complete_datagram+0x134>)
 801b34e:	f002 f80d 	bl	801d36c <iprintf>
  if (prev != NULL) {
 801b352:	683b      	ldr	r3, [r7, #0]
 801b354:	2b00      	cmp	r3, #0
 801b356:	d00a      	beq.n	801b36e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b358:	683b      	ldr	r3, [r7, #0]
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	687a      	ldr	r2, [r7, #4]
 801b35e:	429a      	cmp	r2, r3
 801b360:	d005      	beq.n	801b36e <ip_reass_free_complete_datagram+0x3e>
 801b362:	4b3e      	ldr	r3, [pc, #248]	@ (801b45c <ip_reass_free_complete_datagram+0x12c>)
 801b364:	22ad      	movs	r2, #173	@ 0xad
 801b366:	4940      	ldr	r1, [pc, #256]	@ (801b468 <ip_reass_free_complete_datagram+0x138>)
 801b368:	483e      	ldr	r0, [pc, #248]	@ (801b464 <ip_reass_free_complete_datagram+0x134>)
 801b36a:	f001 ffff 	bl	801d36c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	685b      	ldr	r3, [r3, #4]
 801b372:	685b      	ldr	r3, [r3, #4]
 801b374:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801b376:	697b      	ldr	r3, [r7, #20]
 801b378:	889b      	ldrh	r3, [r3, #4]
 801b37a:	b29b      	uxth	r3, r3
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	d12a      	bne.n	801b3d6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	685b      	ldr	r3, [r3, #4]
 801b384:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801b386:	697b      	ldr	r3, [r7, #20]
 801b388:	681a      	ldr	r2, [r3, #0]
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b38e:	69bb      	ldr	r3, [r7, #24]
 801b390:	6858      	ldr	r0, [r3, #4]
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	3308      	adds	r3, #8
 801b396:	2214      	movs	r2, #20
 801b398:	4619      	mov	r1, r3
 801b39a:	f002 f974 	bl	801d686 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801b39e:	2101      	movs	r1, #1
 801b3a0:	69b8      	ldr	r0, [r7, #24]
 801b3a2:	f7ff fc47 	bl	801ac34 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801b3a6:	69b8      	ldr	r0, [r7, #24]
 801b3a8:	f7f7 fcdc 	bl	8012d64 <pbuf_clen>
 801b3ac:	4603      	mov	r3, r0
 801b3ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b3b0:	8bfa      	ldrh	r2, [r7, #30]
 801b3b2:	8a7b      	ldrh	r3, [r7, #18]
 801b3b4:	4413      	add	r3, r2
 801b3b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b3ba:	db05      	blt.n	801b3c8 <ip_reass_free_complete_datagram+0x98>
 801b3bc:	4b27      	ldr	r3, [pc, #156]	@ (801b45c <ip_reass_free_complete_datagram+0x12c>)
 801b3be:	22bc      	movs	r2, #188	@ 0xbc
 801b3c0:	492a      	ldr	r1, [pc, #168]	@ (801b46c <ip_reass_free_complete_datagram+0x13c>)
 801b3c2:	4828      	ldr	r0, [pc, #160]	@ (801b464 <ip_reass_free_complete_datagram+0x134>)
 801b3c4:	f001 ffd2 	bl	801d36c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b3c8:	8bfa      	ldrh	r2, [r7, #30]
 801b3ca:	8a7b      	ldrh	r3, [r7, #18]
 801b3cc:	4413      	add	r3, r2
 801b3ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801b3d0:	69b8      	ldr	r0, [r7, #24]
 801b3d2:	f7f7 fc39 	bl	8012c48 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	685b      	ldr	r3, [r3, #4]
 801b3da:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801b3dc:	e01f      	b.n	801b41e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801b3de:	69bb      	ldr	r3, [r7, #24]
 801b3e0:	685b      	ldr	r3, [r3, #4]
 801b3e2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801b3e4:	69bb      	ldr	r3, [r7, #24]
 801b3e6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801b3e8:	697b      	ldr	r3, [r7, #20]
 801b3ea:	681b      	ldr	r3, [r3, #0]
 801b3ec:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801b3ee:	68f8      	ldr	r0, [r7, #12]
 801b3f0:	f7f7 fcb8 	bl	8012d64 <pbuf_clen>
 801b3f4:	4603      	mov	r3, r0
 801b3f6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b3f8:	8bfa      	ldrh	r2, [r7, #30]
 801b3fa:	8a7b      	ldrh	r3, [r7, #18]
 801b3fc:	4413      	add	r3, r2
 801b3fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b402:	db05      	blt.n	801b410 <ip_reass_free_complete_datagram+0xe0>
 801b404:	4b15      	ldr	r3, [pc, #84]	@ (801b45c <ip_reass_free_complete_datagram+0x12c>)
 801b406:	22cc      	movs	r2, #204	@ 0xcc
 801b408:	4918      	ldr	r1, [pc, #96]	@ (801b46c <ip_reass_free_complete_datagram+0x13c>)
 801b40a:	4816      	ldr	r0, [pc, #88]	@ (801b464 <ip_reass_free_complete_datagram+0x134>)
 801b40c:	f001 ffae 	bl	801d36c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b410:	8bfa      	ldrh	r2, [r7, #30]
 801b412:	8a7b      	ldrh	r3, [r7, #18]
 801b414:	4413      	add	r3, r2
 801b416:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801b418:	68f8      	ldr	r0, [r7, #12]
 801b41a:	f7f7 fc15 	bl	8012c48 <pbuf_free>
  while (p != NULL) {
 801b41e:	69bb      	ldr	r3, [r7, #24]
 801b420:	2b00      	cmp	r3, #0
 801b422:	d1dc      	bne.n	801b3de <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801b424:	6839      	ldr	r1, [r7, #0]
 801b426:	6878      	ldr	r0, [r7, #4]
 801b428:	f000 f8c2 	bl	801b5b0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801b42c:	4b10      	ldr	r3, [pc, #64]	@ (801b470 <ip_reass_free_complete_datagram+0x140>)
 801b42e:	881b      	ldrh	r3, [r3, #0]
 801b430:	8bfa      	ldrh	r2, [r7, #30]
 801b432:	429a      	cmp	r2, r3
 801b434:	d905      	bls.n	801b442 <ip_reass_free_complete_datagram+0x112>
 801b436:	4b09      	ldr	r3, [pc, #36]	@ (801b45c <ip_reass_free_complete_datagram+0x12c>)
 801b438:	22d2      	movs	r2, #210	@ 0xd2
 801b43a:	490e      	ldr	r1, [pc, #56]	@ (801b474 <ip_reass_free_complete_datagram+0x144>)
 801b43c:	4809      	ldr	r0, [pc, #36]	@ (801b464 <ip_reass_free_complete_datagram+0x134>)
 801b43e:	f001 ff95 	bl	801d36c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801b442:	4b0b      	ldr	r3, [pc, #44]	@ (801b470 <ip_reass_free_complete_datagram+0x140>)
 801b444:	881a      	ldrh	r2, [r3, #0]
 801b446:	8bfb      	ldrh	r3, [r7, #30]
 801b448:	1ad3      	subs	r3, r2, r3
 801b44a:	b29a      	uxth	r2, r3
 801b44c:	4b08      	ldr	r3, [pc, #32]	@ (801b470 <ip_reass_free_complete_datagram+0x140>)
 801b44e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801b450:	8bfb      	ldrh	r3, [r7, #30]
}
 801b452:	4618      	mov	r0, r3
 801b454:	3720      	adds	r7, #32
 801b456:	46bd      	mov	sp, r7
 801b458:	bd80      	pop	{r7, pc}
 801b45a:	bf00      	nop
 801b45c:	08021904 	.word	0x08021904
 801b460:	08021940 	.word	0x08021940
 801b464:	0802194c 	.word	0x0802194c
 801b468:	08021974 	.word	0x08021974
 801b46c:	08021988 	.word	0x08021988
 801b470:	2000e5b4 	.word	0x2000e5b4
 801b474:	080219a8 	.word	0x080219a8

0801b478 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801b478:	b580      	push	{r7, lr}
 801b47a:	b08a      	sub	sp, #40	@ 0x28
 801b47c:	af00      	add	r7, sp, #0
 801b47e:	6078      	str	r0, [r7, #4]
 801b480:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801b482:	2300      	movs	r3, #0
 801b484:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801b486:	2300      	movs	r3, #0
 801b488:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801b48a:	2300      	movs	r3, #0
 801b48c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801b48e:	2300      	movs	r3, #0
 801b490:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801b492:	2300      	movs	r3, #0
 801b494:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801b496:	4b28      	ldr	r3, [pc, #160]	@ (801b538 <ip_reass_remove_oldest_datagram+0xc0>)
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801b49c:	e030      	b.n	801b500 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801b49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4a0:	695a      	ldr	r2, [r3, #20]
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	68db      	ldr	r3, [r3, #12]
 801b4a6:	429a      	cmp	r2, r3
 801b4a8:	d10c      	bne.n	801b4c4 <ip_reass_remove_oldest_datagram+0x4c>
 801b4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4ac:	699a      	ldr	r2, [r3, #24]
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	691b      	ldr	r3, [r3, #16]
 801b4b2:	429a      	cmp	r2, r3
 801b4b4:	d106      	bne.n	801b4c4 <ip_reass_remove_oldest_datagram+0x4c>
 801b4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4b8:	899a      	ldrh	r2, [r3, #12]
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	889b      	ldrh	r3, [r3, #4]
 801b4be:	b29b      	uxth	r3, r3
 801b4c0:	429a      	cmp	r2, r3
 801b4c2:	d014      	beq.n	801b4ee <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801b4c4:	693b      	ldr	r3, [r7, #16]
 801b4c6:	3301      	adds	r3, #1
 801b4c8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801b4ca:	6a3b      	ldr	r3, [r7, #32]
 801b4cc:	2b00      	cmp	r3, #0
 801b4ce:	d104      	bne.n	801b4da <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801b4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4d2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b4d4:	69fb      	ldr	r3, [r7, #28]
 801b4d6:	61bb      	str	r3, [r7, #24]
 801b4d8:	e009      	b.n	801b4ee <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801b4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4dc:	7fda      	ldrb	r2, [r3, #31]
 801b4de:	6a3b      	ldr	r3, [r7, #32]
 801b4e0:	7fdb      	ldrb	r3, [r3, #31]
 801b4e2:	429a      	cmp	r2, r3
 801b4e4:	d803      	bhi.n	801b4ee <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801b4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4e8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b4ea:	69fb      	ldr	r3, [r7, #28]
 801b4ec:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801b4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	d001      	beq.n	801b4fa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801b4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4f8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801b4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801b500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b502:	2b00      	cmp	r3, #0
 801b504:	d1cb      	bne.n	801b49e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801b506:	6a3b      	ldr	r3, [r7, #32]
 801b508:	2b00      	cmp	r3, #0
 801b50a:	d008      	beq.n	801b51e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801b50c:	69b9      	ldr	r1, [r7, #24]
 801b50e:	6a38      	ldr	r0, [r7, #32]
 801b510:	f7ff ff0e 	bl	801b330 <ip_reass_free_complete_datagram>
 801b514:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801b516:	697a      	ldr	r2, [r7, #20]
 801b518:	68fb      	ldr	r3, [r7, #12]
 801b51a:	4413      	add	r3, r2
 801b51c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801b51e:	697a      	ldr	r2, [r7, #20]
 801b520:	683b      	ldr	r3, [r7, #0]
 801b522:	429a      	cmp	r2, r3
 801b524:	da02      	bge.n	801b52c <ip_reass_remove_oldest_datagram+0xb4>
 801b526:	693b      	ldr	r3, [r7, #16]
 801b528:	2b01      	cmp	r3, #1
 801b52a:	dcac      	bgt.n	801b486 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801b52c:	697b      	ldr	r3, [r7, #20]
}
 801b52e:	4618      	mov	r0, r3
 801b530:	3728      	adds	r7, #40	@ 0x28
 801b532:	46bd      	mov	sp, r7
 801b534:	bd80      	pop	{r7, pc}
 801b536:	bf00      	nop
 801b538:	2000e5b0 	.word	0x2000e5b0

0801b53c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801b53c:	b580      	push	{r7, lr}
 801b53e:	b084      	sub	sp, #16
 801b540:	af00      	add	r7, sp, #0
 801b542:	6078      	str	r0, [r7, #4]
 801b544:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b546:	2004      	movs	r0, #4
 801b548:	f7f6 fc64 	bl	8011e14 <memp_malloc>
 801b54c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801b54e:	68fb      	ldr	r3, [r7, #12]
 801b550:	2b00      	cmp	r3, #0
 801b552:	d110      	bne.n	801b576 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801b554:	6839      	ldr	r1, [r7, #0]
 801b556:	6878      	ldr	r0, [r7, #4]
 801b558:	f7ff ff8e 	bl	801b478 <ip_reass_remove_oldest_datagram>
 801b55c:	4602      	mov	r2, r0
 801b55e:	683b      	ldr	r3, [r7, #0]
 801b560:	4293      	cmp	r3, r2
 801b562:	dc03      	bgt.n	801b56c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b564:	2004      	movs	r0, #4
 801b566:	f7f6 fc55 	bl	8011e14 <memp_malloc>
 801b56a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801b56c:	68fb      	ldr	r3, [r7, #12]
 801b56e:	2b00      	cmp	r3, #0
 801b570:	d101      	bne.n	801b576 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801b572:	2300      	movs	r3, #0
 801b574:	e016      	b.n	801b5a4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801b576:	2220      	movs	r2, #32
 801b578:	2100      	movs	r1, #0
 801b57a:	68f8      	ldr	r0, [r7, #12]
 801b57c:	f001 ff95 	bl	801d4aa <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801b580:	68fb      	ldr	r3, [r7, #12]
 801b582:	220f      	movs	r2, #15
 801b584:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801b586:	4b09      	ldr	r3, [pc, #36]	@ (801b5ac <ip_reass_enqueue_new_datagram+0x70>)
 801b588:	681a      	ldr	r2, [r3, #0]
 801b58a:	68fb      	ldr	r3, [r7, #12]
 801b58c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801b58e:	4a07      	ldr	r2, [pc, #28]	@ (801b5ac <ip_reass_enqueue_new_datagram+0x70>)
 801b590:	68fb      	ldr	r3, [r7, #12]
 801b592:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801b594:	68fb      	ldr	r3, [r7, #12]
 801b596:	3308      	adds	r3, #8
 801b598:	2214      	movs	r2, #20
 801b59a:	6879      	ldr	r1, [r7, #4]
 801b59c:	4618      	mov	r0, r3
 801b59e:	f002 f872 	bl	801d686 <memcpy>
  return ipr;
 801b5a2:	68fb      	ldr	r3, [r7, #12]
}
 801b5a4:	4618      	mov	r0, r3
 801b5a6:	3710      	adds	r7, #16
 801b5a8:	46bd      	mov	sp, r7
 801b5aa:	bd80      	pop	{r7, pc}
 801b5ac:	2000e5b0 	.word	0x2000e5b0

0801b5b0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b5b0:	b580      	push	{r7, lr}
 801b5b2:	b082      	sub	sp, #8
 801b5b4:	af00      	add	r7, sp, #0
 801b5b6:	6078      	str	r0, [r7, #4]
 801b5b8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801b5ba:	4b10      	ldr	r3, [pc, #64]	@ (801b5fc <ip_reass_dequeue_datagram+0x4c>)
 801b5bc:	681b      	ldr	r3, [r3, #0]
 801b5be:	687a      	ldr	r2, [r7, #4]
 801b5c0:	429a      	cmp	r2, r3
 801b5c2:	d104      	bne.n	801b5ce <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	681b      	ldr	r3, [r3, #0]
 801b5c8:	4a0c      	ldr	r2, [pc, #48]	@ (801b5fc <ip_reass_dequeue_datagram+0x4c>)
 801b5ca:	6013      	str	r3, [r2, #0]
 801b5cc:	e00d      	b.n	801b5ea <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801b5ce:	683b      	ldr	r3, [r7, #0]
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d106      	bne.n	801b5e2 <ip_reass_dequeue_datagram+0x32>
 801b5d4:	4b0a      	ldr	r3, [pc, #40]	@ (801b600 <ip_reass_dequeue_datagram+0x50>)
 801b5d6:	f240 1245 	movw	r2, #325	@ 0x145
 801b5da:	490a      	ldr	r1, [pc, #40]	@ (801b604 <ip_reass_dequeue_datagram+0x54>)
 801b5dc:	480a      	ldr	r0, [pc, #40]	@ (801b608 <ip_reass_dequeue_datagram+0x58>)
 801b5de:	f001 fec5 	bl	801d36c <iprintf>
    prev->next = ipr->next;
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	681a      	ldr	r2, [r3, #0]
 801b5e6:	683b      	ldr	r3, [r7, #0]
 801b5e8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801b5ea:	6879      	ldr	r1, [r7, #4]
 801b5ec:	2004      	movs	r0, #4
 801b5ee:	f7f6 fc87 	bl	8011f00 <memp_free>
}
 801b5f2:	bf00      	nop
 801b5f4:	3708      	adds	r7, #8
 801b5f6:	46bd      	mov	sp, r7
 801b5f8:	bd80      	pop	{r7, pc}
 801b5fa:	bf00      	nop
 801b5fc:	2000e5b0 	.word	0x2000e5b0
 801b600:	08021904 	.word	0x08021904
 801b604:	080219cc 	.word	0x080219cc
 801b608:	0802194c 	.word	0x0802194c

0801b60c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801b60c:	b580      	push	{r7, lr}
 801b60e:	b08c      	sub	sp, #48	@ 0x30
 801b610:	af00      	add	r7, sp, #0
 801b612:	60f8      	str	r0, [r7, #12]
 801b614:	60b9      	str	r1, [r7, #8]
 801b616:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801b618:	2300      	movs	r3, #0
 801b61a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801b61c:	2301      	movs	r3, #1
 801b61e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801b620:	68bb      	ldr	r3, [r7, #8]
 801b622:	685b      	ldr	r3, [r3, #4]
 801b624:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b626:	69fb      	ldr	r3, [r7, #28]
 801b628:	885b      	ldrh	r3, [r3, #2]
 801b62a:	b29b      	uxth	r3, r3
 801b62c:	4618      	mov	r0, r3
 801b62e:	f7f5 ff1d 	bl	801146c <lwip_htons>
 801b632:	4603      	mov	r3, r0
 801b634:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801b636:	69fb      	ldr	r3, [r7, #28]
 801b638:	781b      	ldrb	r3, [r3, #0]
 801b63a:	f003 030f 	and.w	r3, r3, #15
 801b63e:	b2db      	uxtb	r3, r3
 801b640:	009b      	lsls	r3, r3, #2
 801b642:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801b644:	7e7b      	ldrb	r3, [r7, #25]
 801b646:	b29b      	uxth	r3, r3
 801b648:	8b7a      	ldrh	r2, [r7, #26]
 801b64a:	429a      	cmp	r2, r3
 801b64c:	d202      	bcs.n	801b654 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b64e:	f04f 33ff 	mov.w	r3, #4294967295
 801b652:	e135      	b.n	801b8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801b654:	7e7b      	ldrb	r3, [r7, #25]
 801b656:	b29b      	uxth	r3, r3
 801b658:	8b7a      	ldrh	r2, [r7, #26]
 801b65a:	1ad3      	subs	r3, r2, r3
 801b65c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801b65e:	69fb      	ldr	r3, [r7, #28]
 801b660:	88db      	ldrh	r3, [r3, #6]
 801b662:	b29b      	uxth	r3, r3
 801b664:	4618      	mov	r0, r3
 801b666:	f7f5 ff01 	bl	801146c <lwip_htons>
 801b66a:	4603      	mov	r3, r0
 801b66c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b670:	b29b      	uxth	r3, r3
 801b672:	00db      	lsls	r3, r3, #3
 801b674:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801b676:	68bb      	ldr	r3, [r7, #8]
 801b678:	685b      	ldr	r3, [r3, #4]
 801b67a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801b67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b67e:	2200      	movs	r2, #0
 801b680:	701a      	strb	r2, [r3, #0]
 801b682:	2200      	movs	r2, #0
 801b684:	705a      	strb	r2, [r3, #1]
 801b686:	2200      	movs	r2, #0
 801b688:	709a      	strb	r2, [r3, #2]
 801b68a:	2200      	movs	r2, #0
 801b68c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801b68e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b690:	8afa      	ldrh	r2, [r7, #22]
 801b692:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801b694:	8afa      	ldrh	r2, [r7, #22]
 801b696:	8b7b      	ldrh	r3, [r7, #26]
 801b698:	4413      	add	r3, r2
 801b69a:	b29a      	uxth	r2, r3
 801b69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b69e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801b6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6a2:	88db      	ldrh	r3, [r3, #6]
 801b6a4:	b29b      	uxth	r3, r3
 801b6a6:	8afa      	ldrh	r2, [r7, #22]
 801b6a8:	429a      	cmp	r2, r3
 801b6aa:	d902      	bls.n	801b6b2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b6ac:	f04f 33ff 	mov.w	r3, #4294967295
 801b6b0:	e106      	b.n	801b8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	685b      	ldr	r3, [r3, #4]
 801b6b6:	627b      	str	r3, [r7, #36]	@ 0x24
 801b6b8:	e068      	b.n	801b78c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801b6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6bc:	685b      	ldr	r3, [r3, #4]
 801b6be:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801b6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6c2:	889b      	ldrh	r3, [r3, #4]
 801b6c4:	b29a      	uxth	r2, r3
 801b6c6:	693b      	ldr	r3, [r7, #16]
 801b6c8:	889b      	ldrh	r3, [r3, #4]
 801b6ca:	b29b      	uxth	r3, r3
 801b6cc:	429a      	cmp	r2, r3
 801b6ce:	d235      	bcs.n	801b73c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801b6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b6d4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801b6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	d020      	beq.n	801b71e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801b6dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6de:	889b      	ldrh	r3, [r3, #4]
 801b6e0:	b29a      	uxth	r2, r3
 801b6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b6e4:	88db      	ldrh	r3, [r3, #6]
 801b6e6:	b29b      	uxth	r3, r3
 801b6e8:	429a      	cmp	r2, r3
 801b6ea:	d307      	bcc.n	801b6fc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801b6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6ee:	88db      	ldrh	r3, [r3, #6]
 801b6f0:	b29a      	uxth	r2, r3
 801b6f2:	693b      	ldr	r3, [r7, #16]
 801b6f4:	889b      	ldrh	r3, [r3, #4]
 801b6f6:	b29b      	uxth	r3, r3
 801b6f8:	429a      	cmp	r2, r3
 801b6fa:	d902      	bls.n	801b702 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b6fc:	f04f 33ff 	mov.w	r3, #4294967295
 801b700:	e0de      	b.n	801b8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801b702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b704:	68ba      	ldr	r2, [r7, #8]
 801b706:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801b708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b70a:	88db      	ldrh	r3, [r3, #6]
 801b70c:	b29a      	uxth	r2, r3
 801b70e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b710:	889b      	ldrh	r3, [r3, #4]
 801b712:	b29b      	uxth	r3, r3
 801b714:	429a      	cmp	r2, r3
 801b716:	d03d      	beq.n	801b794 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b718:	2300      	movs	r3, #0
 801b71a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801b71c:	e03a      	b.n	801b794 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801b71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b720:	88db      	ldrh	r3, [r3, #6]
 801b722:	b29a      	uxth	r2, r3
 801b724:	693b      	ldr	r3, [r7, #16]
 801b726:	889b      	ldrh	r3, [r3, #4]
 801b728:	b29b      	uxth	r3, r3
 801b72a:	429a      	cmp	r2, r3
 801b72c:	d902      	bls.n	801b734 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b72e:	f04f 33ff 	mov.w	r3, #4294967295
 801b732:	e0c5      	b.n	801b8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801b734:	68fb      	ldr	r3, [r7, #12]
 801b736:	68ba      	ldr	r2, [r7, #8]
 801b738:	605a      	str	r2, [r3, #4]
      break;
 801b73a:	e02b      	b.n	801b794 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801b73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b73e:	889b      	ldrh	r3, [r3, #4]
 801b740:	b29a      	uxth	r2, r3
 801b742:	693b      	ldr	r3, [r7, #16]
 801b744:	889b      	ldrh	r3, [r3, #4]
 801b746:	b29b      	uxth	r3, r3
 801b748:	429a      	cmp	r2, r3
 801b74a:	d102      	bne.n	801b752 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b74c:	f04f 33ff 	mov.w	r3, #4294967295
 801b750:	e0b6      	b.n	801b8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801b752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b754:	889b      	ldrh	r3, [r3, #4]
 801b756:	b29a      	uxth	r2, r3
 801b758:	693b      	ldr	r3, [r7, #16]
 801b75a:	88db      	ldrh	r3, [r3, #6]
 801b75c:	b29b      	uxth	r3, r3
 801b75e:	429a      	cmp	r2, r3
 801b760:	d202      	bcs.n	801b768 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b762:	f04f 33ff 	mov.w	r3, #4294967295
 801b766:	e0ab      	b.n	801b8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801b768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b76a:	2b00      	cmp	r3, #0
 801b76c:	d009      	beq.n	801b782 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801b76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b770:	88db      	ldrh	r3, [r3, #6]
 801b772:	b29a      	uxth	r2, r3
 801b774:	693b      	ldr	r3, [r7, #16]
 801b776:	889b      	ldrh	r3, [r3, #4]
 801b778:	b29b      	uxth	r3, r3
 801b77a:	429a      	cmp	r2, r3
 801b77c:	d001      	beq.n	801b782 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b77e:	2300      	movs	r3, #0
 801b780:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801b782:	693b      	ldr	r3, [r7, #16]
 801b784:	681b      	ldr	r3, [r3, #0]
 801b786:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801b788:	693b      	ldr	r3, [r7, #16]
 801b78a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801b78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d193      	bne.n	801b6ba <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801b792:	e000      	b.n	801b796 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801b794:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801b796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b798:	2b00      	cmp	r3, #0
 801b79a:	d12d      	bne.n	801b7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801b79c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b79e:	2b00      	cmp	r3, #0
 801b7a0:	d01c      	beq.n	801b7dc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801b7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7a4:	88db      	ldrh	r3, [r3, #6]
 801b7a6:	b29a      	uxth	r2, r3
 801b7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7aa:	889b      	ldrh	r3, [r3, #4]
 801b7ac:	b29b      	uxth	r3, r3
 801b7ae:	429a      	cmp	r2, r3
 801b7b0:	d906      	bls.n	801b7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801b7b2:	4b45      	ldr	r3, [pc, #276]	@ (801b8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b7b4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801b7b8:	4944      	ldr	r1, [pc, #272]	@ (801b8cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801b7ba:	4845      	ldr	r0, [pc, #276]	@ (801b8d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b7bc:	f001 fdd6 	bl	801d36c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801b7c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7c2:	68ba      	ldr	r2, [r7, #8]
 801b7c4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801b7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7c8:	88db      	ldrh	r3, [r3, #6]
 801b7ca:	b29a      	uxth	r2, r3
 801b7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7ce:	889b      	ldrh	r3, [r3, #4]
 801b7d0:	b29b      	uxth	r3, r3
 801b7d2:	429a      	cmp	r2, r3
 801b7d4:	d010      	beq.n	801b7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801b7d6:	2300      	movs	r3, #0
 801b7d8:	623b      	str	r3, [r7, #32]
 801b7da:	e00d      	b.n	801b7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801b7dc:	68fb      	ldr	r3, [r7, #12]
 801b7de:	685b      	ldr	r3, [r3, #4]
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	d006      	beq.n	801b7f2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801b7e4:	4b38      	ldr	r3, [pc, #224]	@ (801b8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b7e6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801b7ea:	493a      	ldr	r1, [pc, #232]	@ (801b8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801b7ec:	4838      	ldr	r0, [pc, #224]	@ (801b8d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b7ee:	f001 fdbd 	bl	801d36c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801b7f2:	68fb      	ldr	r3, [r7, #12]
 801b7f4:	68ba      	ldr	r2, [r7, #8]
 801b7f6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	2b00      	cmp	r3, #0
 801b7fc:	d105      	bne.n	801b80a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801b7fe:	68fb      	ldr	r3, [r7, #12]
 801b800:	7f9b      	ldrb	r3, [r3, #30]
 801b802:	f003 0301 	and.w	r3, r3, #1
 801b806:	2b00      	cmp	r3, #0
 801b808:	d059      	beq.n	801b8be <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801b80a:	6a3b      	ldr	r3, [r7, #32]
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	d04f      	beq.n	801b8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	685b      	ldr	r3, [r3, #4]
 801b814:	2b00      	cmp	r3, #0
 801b816:	d006      	beq.n	801b826 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801b818:	68fb      	ldr	r3, [r7, #12]
 801b81a:	685b      	ldr	r3, [r3, #4]
 801b81c:	685b      	ldr	r3, [r3, #4]
 801b81e:	889b      	ldrh	r3, [r3, #4]
 801b820:	b29b      	uxth	r3, r3
 801b822:	2b00      	cmp	r3, #0
 801b824:	d002      	beq.n	801b82c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801b826:	2300      	movs	r3, #0
 801b828:	623b      	str	r3, [r7, #32]
 801b82a:	e041      	b.n	801b8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801b82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b82e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801b830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b832:	681b      	ldr	r3, [r3, #0]
 801b834:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801b836:	e012      	b.n	801b85e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801b838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b83a:	685b      	ldr	r3, [r3, #4]
 801b83c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801b83e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b840:	88db      	ldrh	r3, [r3, #6]
 801b842:	b29a      	uxth	r2, r3
 801b844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b846:	889b      	ldrh	r3, [r3, #4]
 801b848:	b29b      	uxth	r3, r3
 801b84a:	429a      	cmp	r2, r3
 801b84c:	d002      	beq.n	801b854 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801b84e:	2300      	movs	r3, #0
 801b850:	623b      	str	r3, [r7, #32]
            break;
 801b852:	e007      	b.n	801b864 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801b854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b856:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801b858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b85a:	681b      	ldr	r3, [r3, #0]
 801b85c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801b85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b860:	2b00      	cmp	r3, #0
 801b862:	d1e9      	bne.n	801b838 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801b864:	6a3b      	ldr	r3, [r7, #32]
 801b866:	2b00      	cmp	r3, #0
 801b868:	d022      	beq.n	801b8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801b86a:	68fb      	ldr	r3, [r7, #12]
 801b86c:	685b      	ldr	r3, [r3, #4]
 801b86e:	2b00      	cmp	r3, #0
 801b870:	d106      	bne.n	801b880 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801b872:	4b15      	ldr	r3, [pc, #84]	@ (801b8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b874:	f240 12df 	movw	r2, #479	@ 0x1df
 801b878:	4917      	ldr	r1, [pc, #92]	@ (801b8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b87a:	4815      	ldr	r0, [pc, #84]	@ (801b8d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b87c:	f001 fd76 	bl	801d36c <iprintf>
          LWIP_ASSERT("sanity check",
 801b880:	68fb      	ldr	r3, [r7, #12]
 801b882:	685b      	ldr	r3, [r3, #4]
 801b884:	685b      	ldr	r3, [r3, #4]
 801b886:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b888:	429a      	cmp	r2, r3
 801b88a:	d106      	bne.n	801b89a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801b88c:	4b0e      	ldr	r3, [pc, #56]	@ (801b8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b88e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801b892:	4911      	ldr	r1, [pc, #68]	@ (801b8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b894:	480e      	ldr	r0, [pc, #56]	@ (801b8d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b896:	f001 fd69 	bl	801d36c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801b89a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b89c:	681b      	ldr	r3, [r3, #0]
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	d006      	beq.n	801b8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801b8a2:	4b09      	ldr	r3, [pc, #36]	@ (801b8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b8a4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801b8a8:	490c      	ldr	r1, [pc, #48]	@ (801b8dc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801b8aa:	4809      	ldr	r0, [pc, #36]	@ (801b8d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b8ac:	f001 fd5e 	bl	801d36c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801b8b0:	6a3b      	ldr	r3, [r7, #32]
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	bf14      	ite	ne
 801b8b6:	2301      	movne	r3, #1
 801b8b8:	2300      	moveq	r3, #0
 801b8ba:	b2db      	uxtb	r3, r3
 801b8bc:	e000      	b.n	801b8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801b8be:	2300      	movs	r3, #0
}
 801b8c0:	4618      	mov	r0, r3
 801b8c2:	3730      	adds	r7, #48	@ 0x30
 801b8c4:	46bd      	mov	sp, r7
 801b8c6:	bd80      	pop	{r7, pc}
 801b8c8:	08021904 	.word	0x08021904
 801b8cc:	080219e8 	.word	0x080219e8
 801b8d0:	0802194c 	.word	0x0802194c
 801b8d4:	08021a08 	.word	0x08021a08
 801b8d8:	08021a40 	.word	0x08021a40
 801b8dc:	08021a50 	.word	0x08021a50

0801b8e0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801b8e0:	b580      	push	{r7, lr}
 801b8e2:	b08e      	sub	sp, #56	@ 0x38
 801b8e4:	af00      	add	r7, sp, #0
 801b8e6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801b8e8:	687b      	ldr	r3, [r7, #4]
 801b8ea:	685b      	ldr	r3, [r3, #4]
 801b8ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801b8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b8f0:	781b      	ldrb	r3, [r3, #0]
 801b8f2:	f003 030f 	and.w	r3, r3, #15
 801b8f6:	b2db      	uxtb	r3, r3
 801b8f8:	009b      	lsls	r3, r3, #2
 801b8fa:	b2db      	uxtb	r3, r3
 801b8fc:	2b14      	cmp	r3, #20
 801b8fe:	f040 8171 	bne.w	801bbe4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801b902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b904:	88db      	ldrh	r3, [r3, #6]
 801b906:	b29b      	uxth	r3, r3
 801b908:	4618      	mov	r0, r3
 801b90a:	f7f5 fdaf 	bl	801146c <lwip_htons>
 801b90e:	4603      	mov	r3, r0
 801b910:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b914:	b29b      	uxth	r3, r3
 801b916:	00db      	lsls	r3, r3, #3
 801b918:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b91a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b91c:	885b      	ldrh	r3, [r3, #2]
 801b91e:	b29b      	uxth	r3, r3
 801b920:	4618      	mov	r0, r3
 801b922:	f7f5 fda3 	bl	801146c <lwip_htons>
 801b926:	4603      	mov	r3, r0
 801b928:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801b92a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b92c:	781b      	ldrb	r3, [r3, #0]
 801b92e:	f003 030f 	and.w	r3, r3, #15
 801b932:	b2db      	uxtb	r3, r3
 801b934:	009b      	lsls	r3, r3, #2
 801b936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801b93a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b93e:	b29b      	uxth	r3, r3
 801b940:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801b942:	429a      	cmp	r2, r3
 801b944:	f0c0 8150 	bcc.w	801bbe8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801b948:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b94c:	b29b      	uxth	r3, r3
 801b94e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801b950:	1ad3      	subs	r3, r2, r3
 801b952:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801b954:	6878      	ldr	r0, [r7, #4]
 801b956:	f7f7 fa05 	bl	8012d64 <pbuf_clen>
 801b95a:	4603      	mov	r3, r0
 801b95c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801b95e:	4b8c      	ldr	r3, [pc, #560]	@ (801bb90 <ip4_reass+0x2b0>)
 801b960:	881b      	ldrh	r3, [r3, #0]
 801b962:	461a      	mov	r2, r3
 801b964:	8c3b      	ldrh	r3, [r7, #32]
 801b966:	4413      	add	r3, r2
 801b968:	2b0a      	cmp	r3, #10
 801b96a:	dd10      	ble.n	801b98e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b96c:	8c3b      	ldrh	r3, [r7, #32]
 801b96e:	4619      	mov	r1, r3
 801b970:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b972:	f7ff fd81 	bl	801b478 <ip_reass_remove_oldest_datagram>
 801b976:	4603      	mov	r3, r0
 801b978:	2b00      	cmp	r3, #0
 801b97a:	f000 8137 	beq.w	801bbec <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801b97e:	4b84      	ldr	r3, [pc, #528]	@ (801bb90 <ip4_reass+0x2b0>)
 801b980:	881b      	ldrh	r3, [r3, #0]
 801b982:	461a      	mov	r2, r3
 801b984:	8c3b      	ldrh	r3, [r7, #32]
 801b986:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b988:	2b0a      	cmp	r3, #10
 801b98a:	f300 812f 	bgt.w	801bbec <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b98e:	4b81      	ldr	r3, [pc, #516]	@ (801bb94 <ip4_reass+0x2b4>)
 801b990:	681b      	ldr	r3, [r3, #0]
 801b992:	633b      	str	r3, [r7, #48]	@ 0x30
 801b994:	e015      	b.n	801b9c2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801b996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b998:	695a      	ldr	r2, [r3, #20]
 801b99a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b99c:	68db      	ldr	r3, [r3, #12]
 801b99e:	429a      	cmp	r2, r3
 801b9a0:	d10c      	bne.n	801b9bc <ip4_reass+0xdc>
 801b9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b9a4:	699a      	ldr	r2, [r3, #24]
 801b9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b9a8:	691b      	ldr	r3, [r3, #16]
 801b9aa:	429a      	cmp	r2, r3
 801b9ac:	d106      	bne.n	801b9bc <ip4_reass+0xdc>
 801b9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b9b0:	899a      	ldrh	r2, [r3, #12]
 801b9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b9b4:	889b      	ldrh	r3, [r3, #4]
 801b9b6:	b29b      	uxth	r3, r3
 801b9b8:	429a      	cmp	r2, r3
 801b9ba:	d006      	beq.n	801b9ca <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b9bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b9be:	681b      	ldr	r3, [r3, #0]
 801b9c0:	633b      	str	r3, [r7, #48]	@ 0x30
 801b9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	d1e6      	bne.n	801b996 <ip4_reass+0xb6>
 801b9c8:	e000      	b.n	801b9cc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801b9ca:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801b9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d109      	bne.n	801b9e6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801b9d2:	8c3b      	ldrh	r3, [r7, #32]
 801b9d4:	4619      	mov	r1, r3
 801b9d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b9d8:	f7ff fdb0 	bl	801b53c <ip_reass_enqueue_new_datagram>
 801b9dc:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801b9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	d11c      	bne.n	801ba1e <ip4_reass+0x13e>
      goto nullreturn;
 801b9e4:	e105      	b.n	801bbf2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b9e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b9e8:	88db      	ldrh	r3, [r3, #6]
 801b9ea:	b29b      	uxth	r3, r3
 801b9ec:	4618      	mov	r0, r3
 801b9ee:	f7f5 fd3d 	bl	801146c <lwip_htons>
 801b9f2:	4603      	mov	r3, r0
 801b9f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	d110      	bne.n	801ba1e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801b9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b9fe:	89db      	ldrh	r3, [r3, #14]
 801ba00:	4618      	mov	r0, r3
 801ba02:	f7f5 fd33 	bl	801146c <lwip_htons>
 801ba06:	4603      	mov	r3, r0
 801ba08:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ba0c:	2b00      	cmp	r3, #0
 801ba0e:	d006      	beq.n	801ba1e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801ba10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba12:	3308      	adds	r3, #8
 801ba14:	2214      	movs	r2, #20
 801ba16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801ba18:	4618      	mov	r0, r3
 801ba1a:	f001 fe34 	bl	801d686 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801ba1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba20:	88db      	ldrh	r3, [r3, #6]
 801ba22:	b29b      	uxth	r3, r3
 801ba24:	f003 0320 	and.w	r3, r3, #32
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	bf0c      	ite	eq
 801ba2c:	2301      	moveq	r3, #1
 801ba2e:	2300      	movne	r3, #0
 801ba30:	b2db      	uxtb	r3, r3
 801ba32:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801ba34:	69fb      	ldr	r3, [r7, #28]
 801ba36:	2b00      	cmp	r3, #0
 801ba38:	d00e      	beq.n	801ba58 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801ba3a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801ba3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ba3e:	4413      	add	r3, r2
 801ba40:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801ba42:	8b7a      	ldrh	r2, [r7, #26]
 801ba44:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801ba46:	429a      	cmp	r2, r3
 801ba48:	f0c0 80a0 	bcc.w	801bb8c <ip4_reass+0x2ac>
 801ba4c:	8b7b      	ldrh	r3, [r7, #26]
 801ba4e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801ba52:	4293      	cmp	r3, r2
 801ba54:	f200 809a 	bhi.w	801bb8c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801ba58:	69fa      	ldr	r2, [r7, #28]
 801ba5a:	6879      	ldr	r1, [r7, #4]
 801ba5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801ba5e:	f7ff fdd5 	bl	801b60c <ip_reass_chain_frag_into_datagram_and_validate>
 801ba62:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801ba64:	697b      	ldr	r3, [r7, #20]
 801ba66:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba6a:	f000 809b 	beq.w	801bba4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ba6e:	4b48      	ldr	r3, [pc, #288]	@ (801bb90 <ip4_reass+0x2b0>)
 801ba70:	881a      	ldrh	r2, [r3, #0]
 801ba72:	8c3b      	ldrh	r3, [r7, #32]
 801ba74:	4413      	add	r3, r2
 801ba76:	b29a      	uxth	r2, r3
 801ba78:	4b45      	ldr	r3, [pc, #276]	@ (801bb90 <ip4_reass+0x2b0>)
 801ba7a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801ba7c:	69fb      	ldr	r3, [r7, #28]
 801ba7e:	2b00      	cmp	r3, #0
 801ba80:	d00d      	beq.n	801ba9e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801ba82:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801ba84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ba86:	4413      	add	r3, r2
 801ba88:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801ba8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba8c:	8a7a      	ldrh	r2, [r7, #18]
 801ba8e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801ba90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba92:	7f9b      	ldrb	r3, [r3, #30]
 801ba94:	f043 0301 	orr.w	r3, r3, #1
 801ba98:	b2da      	uxtb	r2, r3
 801ba9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba9c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801ba9e:	697b      	ldr	r3, [r7, #20]
 801baa0:	2b01      	cmp	r3, #1
 801baa2:	d171      	bne.n	801bb88 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801baa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801baa6:	8b9b      	ldrh	r3, [r3, #28]
 801baa8:	3314      	adds	r3, #20
 801baaa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801baac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801baae:	685b      	ldr	r3, [r3, #4]
 801bab0:	685b      	ldr	r3, [r3, #4]
 801bab2:	681b      	ldr	r3, [r3, #0]
 801bab4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801bab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bab8:	685b      	ldr	r3, [r3, #4]
 801baba:	685b      	ldr	r3, [r3, #4]
 801babc:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801babe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bac0:	3308      	adds	r3, #8
 801bac2:	2214      	movs	r2, #20
 801bac4:	4619      	mov	r1, r3
 801bac6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bac8:	f001 fddd 	bl	801d686 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801bacc:	8a3b      	ldrh	r3, [r7, #16]
 801bace:	4618      	mov	r0, r3
 801bad0:	f7f5 fccc 	bl	801146c <lwip_htons>
 801bad4:	4603      	mov	r3, r0
 801bad6:	461a      	mov	r2, r3
 801bad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bada:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801badc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bade:	2200      	movs	r2, #0
 801bae0:	719a      	strb	r2, [r3, #6]
 801bae2:	2200      	movs	r2, #0
 801bae4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801bae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bae8:	2200      	movs	r2, #0
 801baea:	729a      	strb	r2, [r3, #10]
 801baec:	2200      	movs	r2, #0
 801baee:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801baf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801baf2:	685b      	ldr	r3, [r3, #4]
 801baf4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801baf6:	e00d      	b.n	801bb14 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801baf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bafa:	685b      	ldr	r3, [r3, #4]
 801bafc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801bafe:	2114      	movs	r1, #20
 801bb00:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801bb02:	f7f7 f81b 	bl	8012b3c <pbuf_remove_header>
      pbuf_cat(p, r);
 801bb06:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801bb08:	6878      	ldr	r0, [r7, #4]
 801bb0a:	f7f7 f96b 	bl	8012de4 <pbuf_cat>
      r = iprh->next_pbuf;
 801bb0e:	68fb      	ldr	r3, [r7, #12]
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801bb14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	d1ee      	bne.n	801baf8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801bb1a:	4b1e      	ldr	r3, [pc, #120]	@ (801bb94 <ip4_reass+0x2b4>)
 801bb1c:	681b      	ldr	r3, [r3, #0]
 801bb1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bb20:	429a      	cmp	r2, r3
 801bb22:	d102      	bne.n	801bb2a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801bb24:	2300      	movs	r3, #0
 801bb26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801bb28:	e010      	b.n	801bb4c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801bb2a:	4b1a      	ldr	r3, [pc, #104]	@ (801bb94 <ip4_reass+0x2b4>)
 801bb2c:	681b      	ldr	r3, [r3, #0]
 801bb2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801bb30:	e007      	b.n	801bb42 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801bb32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb34:	681b      	ldr	r3, [r3, #0]
 801bb36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bb38:	429a      	cmp	r2, r3
 801bb3a:	d006      	beq.n	801bb4a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801bb3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb3e:	681b      	ldr	r3, [r3, #0]
 801bb40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801bb42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb44:	2b00      	cmp	r3, #0
 801bb46:	d1f4      	bne.n	801bb32 <ip4_reass+0x252>
 801bb48:	e000      	b.n	801bb4c <ip4_reass+0x26c>
          break;
 801bb4a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801bb4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801bb4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801bb50:	f7ff fd2e 	bl	801b5b0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801bb54:	6878      	ldr	r0, [r7, #4]
 801bb56:	f7f7 f905 	bl	8012d64 <pbuf_clen>
 801bb5a:	4603      	mov	r3, r0
 801bb5c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801bb5e:	4b0c      	ldr	r3, [pc, #48]	@ (801bb90 <ip4_reass+0x2b0>)
 801bb60:	881b      	ldrh	r3, [r3, #0]
 801bb62:	8c3a      	ldrh	r2, [r7, #32]
 801bb64:	429a      	cmp	r2, r3
 801bb66:	d906      	bls.n	801bb76 <ip4_reass+0x296>
 801bb68:	4b0b      	ldr	r3, [pc, #44]	@ (801bb98 <ip4_reass+0x2b8>)
 801bb6a:	f240 229b 	movw	r2, #667	@ 0x29b
 801bb6e:	490b      	ldr	r1, [pc, #44]	@ (801bb9c <ip4_reass+0x2bc>)
 801bb70:	480b      	ldr	r0, [pc, #44]	@ (801bba0 <ip4_reass+0x2c0>)
 801bb72:	f001 fbfb 	bl	801d36c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801bb76:	4b06      	ldr	r3, [pc, #24]	@ (801bb90 <ip4_reass+0x2b0>)
 801bb78:	881a      	ldrh	r2, [r3, #0]
 801bb7a:	8c3b      	ldrh	r3, [r7, #32]
 801bb7c:	1ad3      	subs	r3, r2, r3
 801bb7e:	b29a      	uxth	r2, r3
 801bb80:	4b03      	ldr	r3, [pc, #12]	@ (801bb90 <ip4_reass+0x2b0>)
 801bb82:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	e038      	b.n	801bbfa <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801bb88:	2300      	movs	r3, #0
 801bb8a:	e036      	b.n	801bbfa <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801bb8c:	bf00      	nop
 801bb8e:	e00a      	b.n	801bba6 <ip4_reass+0x2c6>
 801bb90:	2000e5b4 	.word	0x2000e5b4
 801bb94:	2000e5b0 	.word	0x2000e5b0
 801bb98:	08021904 	.word	0x08021904
 801bb9c:	08021a74 	.word	0x08021a74
 801bba0:	0802194c 	.word	0x0802194c
    goto nullreturn_ipr;
 801bba4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801bba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bba8:	2b00      	cmp	r3, #0
 801bbaa:	d106      	bne.n	801bbba <ip4_reass+0x2da>
 801bbac:	4b15      	ldr	r3, [pc, #84]	@ (801bc04 <ip4_reass+0x324>)
 801bbae:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801bbb2:	4915      	ldr	r1, [pc, #84]	@ (801bc08 <ip4_reass+0x328>)
 801bbb4:	4815      	ldr	r0, [pc, #84]	@ (801bc0c <ip4_reass+0x32c>)
 801bbb6:	f001 fbd9 	bl	801d36c <iprintf>
  if (ipr->p == NULL) {
 801bbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bbbc:	685b      	ldr	r3, [r3, #4]
 801bbbe:	2b00      	cmp	r3, #0
 801bbc0:	d116      	bne.n	801bbf0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801bbc2:	4b13      	ldr	r3, [pc, #76]	@ (801bc10 <ip4_reass+0x330>)
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bbc8:	429a      	cmp	r2, r3
 801bbca:	d006      	beq.n	801bbda <ip4_reass+0x2fa>
 801bbcc:	4b0d      	ldr	r3, [pc, #52]	@ (801bc04 <ip4_reass+0x324>)
 801bbce:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801bbd2:	4910      	ldr	r1, [pc, #64]	@ (801bc14 <ip4_reass+0x334>)
 801bbd4:	480d      	ldr	r0, [pc, #52]	@ (801bc0c <ip4_reass+0x32c>)
 801bbd6:	f001 fbc9 	bl	801d36c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801bbda:	2100      	movs	r1, #0
 801bbdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801bbde:	f7ff fce7 	bl	801b5b0 <ip_reass_dequeue_datagram>
 801bbe2:	e006      	b.n	801bbf2 <ip4_reass+0x312>
    goto nullreturn;
 801bbe4:	bf00      	nop
 801bbe6:	e004      	b.n	801bbf2 <ip4_reass+0x312>
    goto nullreturn;
 801bbe8:	bf00      	nop
 801bbea:	e002      	b.n	801bbf2 <ip4_reass+0x312>
      goto nullreturn;
 801bbec:	bf00      	nop
 801bbee:	e000      	b.n	801bbf2 <ip4_reass+0x312>
  }

nullreturn:
 801bbf0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801bbf2:	6878      	ldr	r0, [r7, #4]
 801bbf4:	f7f7 f828 	bl	8012c48 <pbuf_free>
  return NULL;
 801bbf8:	2300      	movs	r3, #0
}
 801bbfa:	4618      	mov	r0, r3
 801bbfc:	3738      	adds	r7, #56	@ 0x38
 801bbfe:	46bd      	mov	sp, r7
 801bc00:	bd80      	pop	{r7, pc}
 801bc02:	bf00      	nop
 801bc04:	08021904 	.word	0x08021904
 801bc08:	08021a90 	.word	0x08021a90
 801bc0c:	0802194c 	.word	0x0802194c
 801bc10:	2000e5b0 	.word	0x2000e5b0
 801bc14:	08021a9c 	.word	0x08021a9c

0801bc18 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801bc18:	b580      	push	{r7, lr}
 801bc1a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801bc1c:	2005      	movs	r0, #5
 801bc1e:	f7f6 f8f9 	bl	8011e14 <memp_malloc>
 801bc22:	4603      	mov	r3, r0
}
 801bc24:	4618      	mov	r0, r3
 801bc26:	bd80      	pop	{r7, pc}

0801bc28 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801bc28:	b580      	push	{r7, lr}
 801bc2a:	b082      	sub	sp, #8
 801bc2c:	af00      	add	r7, sp, #0
 801bc2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d106      	bne.n	801bc44 <ip_frag_free_pbuf_custom_ref+0x1c>
 801bc36:	4b07      	ldr	r3, [pc, #28]	@ (801bc54 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801bc38:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801bc3c:	4906      	ldr	r1, [pc, #24]	@ (801bc58 <ip_frag_free_pbuf_custom_ref+0x30>)
 801bc3e:	4807      	ldr	r0, [pc, #28]	@ (801bc5c <ip_frag_free_pbuf_custom_ref+0x34>)
 801bc40:	f001 fb94 	bl	801d36c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801bc44:	6879      	ldr	r1, [r7, #4]
 801bc46:	2005      	movs	r0, #5
 801bc48:	f7f6 f95a 	bl	8011f00 <memp_free>
}
 801bc4c:	bf00      	nop
 801bc4e:	3708      	adds	r7, #8
 801bc50:	46bd      	mov	sp, r7
 801bc52:	bd80      	pop	{r7, pc}
 801bc54:	08021904 	.word	0x08021904
 801bc58:	08021abc 	.word	0x08021abc
 801bc5c:	0802194c 	.word	0x0802194c

0801bc60 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801bc60:	b580      	push	{r7, lr}
 801bc62:	b084      	sub	sp, #16
 801bc64:	af00      	add	r7, sp, #0
 801bc66:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801bc68:	687b      	ldr	r3, [r7, #4]
 801bc6a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801bc6c:	68fb      	ldr	r3, [r7, #12]
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	d106      	bne.n	801bc80 <ipfrag_free_pbuf_custom+0x20>
 801bc72:	4b11      	ldr	r3, [pc, #68]	@ (801bcb8 <ipfrag_free_pbuf_custom+0x58>)
 801bc74:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801bc78:	4910      	ldr	r1, [pc, #64]	@ (801bcbc <ipfrag_free_pbuf_custom+0x5c>)
 801bc7a:	4811      	ldr	r0, [pc, #68]	@ (801bcc0 <ipfrag_free_pbuf_custom+0x60>)
 801bc7c:	f001 fb76 	bl	801d36c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801bc80:	68fa      	ldr	r2, [r7, #12]
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	429a      	cmp	r2, r3
 801bc86:	d006      	beq.n	801bc96 <ipfrag_free_pbuf_custom+0x36>
 801bc88:	4b0b      	ldr	r3, [pc, #44]	@ (801bcb8 <ipfrag_free_pbuf_custom+0x58>)
 801bc8a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801bc8e:	490d      	ldr	r1, [pc, #52]	@ (801bcc4 <ipfrag_free_pbuf_custom+0x64>)
 801bc90:	480b      	ldr	r0, [pc, #44]	@ (801bcc0 <ipfrag_free_pbuf_custom+0x60>)
 801bc92:	f001 fb6b 	bl	801d36c <iprintf>
  if (pcr->original != NULL) {
 801bc96:	68fb      	ldr	r3, [r7, #12]
 801bc98:	695b      	ldr	r3, [r3, #20]
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d004      	beq.n	801bca8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801bc9e:	68fb      	ldr	r3, [r7, #12]
 801bca0:	695b      	ldr	r3, [r3, #20]
 801bca2:	4618      	mov	r0, r3
 801bca4:	f7f6 ffd0 	bl	8012c48 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801bca8:	68f8      	ldr	r0, [r7, #12]
 801bcaa:	f7ff ffbd 	bl	801bc28 <ip_frag_free_pbuf_custom_ref>
}
 801bcae:	bf00      	nop
 801bcb0:	3710      	adds	r7, #16
 801bcb2:	46bd      	mov	sp, r7
 801bcb4:	bd80      	pop	{r7, pc}
 801bcb6:	bf00      	nop
 801bcb8:	08021904 	.word	0x08021904
 801bcbc:	08021ac8 	.word	0x08021ac8
 801bcc0:	0802194c 	.word	0x0802194c
 801bcc4:	08021ad4 	.word	0x08021ad4

0801bcc8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801bcc8:	b580      	push	{r7, lr}
 801bcca:	b094      	sub	sp, #80	@ 0x50
 801bccc:	af02      	add	r7, sp, #8
 801bcce:	60f8      	str	r0, [r7, #12]
 801bcd0:	60b9      	str	r1, [r7, #8]
 801bcd2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801bcd4:	2300      	movs	r3, #0
 801bcd6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801bcda:	68bb      	ldr	r3, [r7, #8]
 801bcdc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801bcde:	3b14      	subs	r3, #20
 801bce0:	2b00      	cmp	r3, #0
 801bce2:	da00      	bge.n	801bce6 <ip4_frag+0x1e>
 801bce4:	3307      	adds	r3, #7
 801bce6:	10db      	asrs	r3, r3, #3
 801bce8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801bcea:	2314      	movs	r3, #20
 801bcec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801bcee:	68fb      	ldr	r3, [r7, #12]
 801bcf0:	685b      	ldr	r3, [r3, #4]
 801bcf2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801bcf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bcf6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801bcf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bcfa:	781b      	ldrb	r3, [r3, #0]
 801bcfc:	f003 030f 	and.w	r3, r3, #15
 801bd00:	b2db      	uxtb	r3, r3
 801bd02:	009b      	lsls	r3, r3, #2
 801bd04:	b2db      	uxtb	r3, r3
 801bd06:	2b14      	cmp	r3, #20
 801bd08:	d002      	beq.n	801bd10 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801bd0a:	f06f 0305 	mvn.w	r3, #5
 801bd0e:	e110      	b.n	801bf32 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801bd10:	68fb      	ldr	r3, [r7, #12]
 801bd12:	895b      	ldrh	r3, [r3, #10]
 801bd14:	2b13      	cmp	r3, #19
 801bd16:	d809      	bhi.n	801bd2c <ip4_frag+0x64>
 801bd18:	4b88      	ldr	r3, [pc, #544]	@ (801bf3c <ip4_frag+0x274>)
 801bd1a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801bd1e:	4988      	ldr	r1, [pc, #544]	@ (801bf40 <ip4_frag+0x278>)
 801bd20:	4888      	ldr	r0, [pc, #544]	@ (801bf44 <ip4_frag+0x27c>)
 801bd22:	f001 fb23 	bl	801d36c <iprintf>
 801bd26:	f06f 0305 	mvn.w	r3, #5
 801bd2a:	e102      	b.n	801bf32 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801bd2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bd2e:	88db      	ldrh	r3, [r3, #6]
 801bd30:	b29b      	uxth	r3, r3
 801bd32:	4618      	mov	r0, r3
 801bd34:	f7f5 fb9a 	bl	801146c <lwip_htons>
 801bd38:	4603      	mov	r3, r0
 801bd3a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801bd3c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801bd3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bd42:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801bd46:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801bd48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801bd4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801bd4e:	68fb      	ldr	r3, [r7, #12]
 801bd50:	891b      	ldrh	r3, [r3, #8]
 801bd52:	3b14      	subs	r3, #20
 801bd54:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801bd58:	e0e1      	b.n	801bf1e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801bd5a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801bd5c:	00db      	lsls	r3, r3, #3
 801bd5e:	b29b      	uxth	r3, r3
 801bd60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801bd64:	4293      	cmp	r3, r2
 801bd66:	bf28      	it	cs
 801bd68:	4613      	movcs	r3, r2
 801bd6a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801bd6c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bd70:	2114      	movs	r1, #20
 801bd72:	200e      	movs	r0, #14
 801bd74:	f7f6 fc84 	bl	8012680 <pbuf_alloc>
 801bd78:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801bd7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	f000 80d5 	beq.w	801bf2c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801bd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd84:	895b      	ldrh	r3, [r3, #10]
 801bd86:	2b13      	cmp	r3, #19
 801bd88:	d806      	bhi.n	801bd98 <ip4_frag+0xd0>
 801bd8a:	4b6c      	ldr	r3, [pc, #432]	@ (801bf3c <ip4_frag+0x274>)
 801bd8c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801bd90:	496d      	ldr	r1, [pc, #436]	@ (801bf48 <ip4_frag+0x280>)
 801bd92:	486c      	ldr	r0, [pc, #432]	@ (801bf44 <ip4_frag+0x27c>)
 801bd94:	f001 faea 	bl	801d36c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801bd98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd9a:	685b      	ldr	r3, [r3, #4]
 801bd9c:	2214      	movs	r2, #20
 801bd9e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801bda0:	4618      	mov	r0, r3
 801bda2:	f001 fc70 	bl	801d686 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801bda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bda8:	685b      	ldr	r3, [r3, #4]
 801bdaa:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801bdac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801bdae:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801bdb2:	e064      	b.n	801be7e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801bdb4:	68fb      	ldr	r3, [r7, #12]
 801bdb6:	895a      	ldrh	r2, [r3, #10]
 801bdb8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801bdba:	1ad3      	subs	r3, r2, r3
 801bdbc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801bdbe:	68fb      	ldr	r3, [r7, #12]
 801bdc0:	895b      	ldrh	r3, [r3, #10]
 801bdc2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801bdc4:	429a      	cmp	r2, r3
 801bdc6:	d906      	bls.n	801bdd6 <ip4_frag+0x10e>
 801bdc8:	4b5c      	ldr	r3, [pc, #368]	@ (801bf3c <ip4_frag+0x274>)
 801bdca:	f240 322d 	movw	r2, #813	@ 0x32d
 801bdce:	495f      	ldr	r1, [pc, #380]	@ (801bf4c <ip4_frag+0x284>)
 801bdd0:	485c      	ldr	r0, [pc, #368]	@ (801bf44 <ip4_frag+0x27c>)
 801bdd2:	f001 facb 	bl	801d36c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801bdd6:	8bfa      	ldrh	r2, [r7, #30]
 801bdd8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801bddc:	4293      	cmp	r3, r2
 801bdde:	bf28      	it	cs
 801bde0:	4613      	movcs	r3, r2
 801bde2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801bde6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	d105      	bne.n	801bdfa <ip4_frag+0x132>
        poff = 0;
 801bdee:	2300      	movs	r3, #0
 801bdf0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801bdf2:	68fb      	ldr	r3, [r7, #12]
 801bdf4:	681b      	ldr	r3, [r3, #0]
 801bdf6:	60fb      	str	r3, [r7, #12]
        continue;
 801bdf8:	e041      	b.n	801be7e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801bdfa:	f7ff ff0d 	bl	801bc18 <ip_frag_alloc_pbuf_custom_ref>
 801bdfe:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801be00:	69bb      	ldr	r3, [r7, #24]
 801be02:	2b00      	cmp	r3, #0
 801be04:	d103      	bne.n	801be0e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801be06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801be08:	f7f6 ff1e 	bl	8012c48 <pbuf_free>
        goto memerr;
 801be0c:	e08f      	b.n	801bf2e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801be0e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801be10:	68fb      	ldr	r3, [r7, #12]
 801be12:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801be14:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801be16:	4413      	add	r3, r2
 801be18:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801be1c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801be20:	9201      	str	r2, [sp, #4]
 801be22:	9300      	str	r3, [sp, #0]
 801be24:	4603      	mov	r3, r0
 801be26:	2241      	movs	r2, #65	@ 0x41
 801be28:	2000      	movs	r0, #0
 801be2a:	f7f6 fd53 	bl	80128d4 <pbuf_alloced_custom>
 801be2e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801be30:	697b      	ldr	r3, [r7, #20]
 801be32:	2b00      	cmp	r3, #0
 801be34:	d106      	bne.n	801be44 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801be36:	69b8      	ldr	r0, [r7, #24]
 801be38:	f7ff fef6 	bl	801bc28 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801be3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801be3e:	f7f6 ff03 	bl	8012c48 <pbuf_free>
        goto memerr;
 801be42:	e074      	b.n	801bf2e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801be44:	68f8      	ldr	r0, [r7, #12]
 801be46:	f7f6 ffa5 	bl	8012d94 <pbuf_ref>
      pcr->original = p;
 801be4a:	69bb      	ldr	r3, [r7, #24]
 801be4c:	68fa      	ldr	r2, [r7, #12]
 801be4e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801be50:	69bb      	ldr	r3, [r7, #24]
 801be52:	4a3f      	ldr	r2, [pc, #252]	@ (801bf50 <ip4_frag+0x288>)
 801be54:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801be56:	6979      	ldr	r1, [r7, #20]
 801be58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801be5a:	f7f6 ffc3 	bl	8012de4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801be5e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801be62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801be66:	1ad3      	subs	r3, r2, r3
 801be68:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801be6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801be70:	2b00      	cmp	r3, #0
 801be72:	d004      	beq.n	801be7e <ip4_frag+0x1b6>
        poff = 0;
 801be74:	2300      	movs	r3, #0
 801be76:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801be78:	68fb      	ldr	r3, [r7, #12]
 801be7a:	681b      	ldr	r3, [r3, #0]
 801be7c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801be7e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801be82:	2b00      	cmp	r3, #0
 801be84:	d196      	bne.n	801bdb4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801be86:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801be88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801be8c:	4413      	add	r3, r2
 801be8e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801be90:	68bb      	ldr	r3, [r7, #8]
 801be92:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801be94:	f1a3 0213 	sub.w	r2, r3, #19
 801be98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801be9c:	429a      	cmp	r2, r3
 801be9e:	bfcc      	ite	gt
 801bea0:	2301      	movgt	r3, #1
 801bea2:	2300      	movle	r3, #0
 801bea4:	b2db      	uxtb	r3, r3
 801bea6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801bea8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801beac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801beb0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801beb2:	6a3b      	ldr	r3, [r7, #32]
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d002      	beq.n	801bebe <ip4_frag+0x1f6>
 801beb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801beba:	2b00      	cmp	r3, #0
 801bebc:	d003      	beq.n	801bec6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801bebe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801bec0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801bec4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801bec6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801bec8:	4618      	mov	r0, r3
 801beca:	f7f5 facf 	bl	801146c <lwip_htons>
 801bece:	4603      	mov	r3, r0
 801bed0:	461a      	mov	r2, r3
 801bed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bed4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801bed6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801bed8:	3314      	adds	r3, #20
 801beda:	b29b      	uxth	r3, r3
 801bedc:	4618      	mov	r0, r3
 801bede:	f7f5 fac5 	bl	801146c <lwip_htons>
 801bee2:	4603      	mov	r3, r0
 801bee4:	461a      	mov	r2, r3
 801bee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bee8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801beea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801beec:	2200      	movs	r2, #0
 801beee:	729a      	strb	r2, [r3, #10]
 801bef0:	2200      	movs	r2, #0
 801bef2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801bef4:	68bb      	ldr	r3, [r7, #8]
 801bef6:	695b      	ldr	r3, [r3, #20]
 801bef8:	687a      	ldr	r2, [r7, #4]
 801befa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801befc:	68b8      	ldr	r0, [r7, #8]
 801befe:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801bf00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bf02:	f7f6 fea1 	bl	8012c48 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801bf06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801bf0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801bf0c:	1ad3      	subs	r3, r2, r3
 801bf0e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801bf12:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801bf16:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801bf18:	4413      	add	r3, r2
 801bf1a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801bf1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	f47f af19 	bne.w	801bd5a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801bf28:	2300      	movs	r3, #0
 801bf2a:	e002      	b.n	801bf32 <ip4_frag+0x26a>
      goto memerr;
 801bf2c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801bf2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bf32:	4618      	mov	r0, r3
 801bf34:	3748      	adds	r7, #72	@ 0x48
 801bf36:	46bd      	mov	sp, r7
 801bf38:	bd80      	pop	{r7, pc}
 801bf3a:	bf00      	nop
 801bf3c:	08021904 	.word	0x08021904
 801bf40:	08021ae0 	.word	0x08021ae0
 801bf44:	0802194c 	.word	0x0802194c
 801bf48:	08021afc 	.word	0x08021afc
 801bf4c:	08021b1c 	.word	0x08021b1c
 801bf50:	0801bc61 	.word	0x0801bc61

0801bf54 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801bf54:	b580      	push	{r7, lr}
 801bf56:	b086      	sub	sp, #24
 801bf58:	af00      	add	r7, sp, #0
 801bf5a:	6078      	str	r0, [r7, #4]
 801bf5c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801bf5e:	230e      	movs	r3, #14
 801bf60:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	895b      	ldrh	r3, [r3, #10]
 801bf66:	2b0e      	cmp	r3, #14
 801bf68:	d96e      	bls.n	801c048 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801bf6a:	687b      	ldr	r3, [r7, #4]
 801bf6c:	7bdb      	ldrb	r3, [r3, #15]
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	d106      	bne.n	801bf80 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801bf72:	683b      	ldr	r3, [r7, #0]
 801bf74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801bf78:	3301      	adds	r3, #1
 801bf7a:	b2da      	uxtb	r2, r3
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	685b      	ldr	r3, [r3, #4]
 801bf84:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801bf86:	693b      	ldr	r3, [r7, #16]
 801bf88:	7b1a      	ldrb	r2, [r3, #12]
 801bf8a:	7b5b      	ldrb	r3, [r3, #13]
 801bf8c:	021b      	lsls	r3, r3, #8
 801bf8e:	4313      	orrs	r3, r2
 801bf90:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801bf92:	693b      	ldr	r3, [r7, #16]
 801bf94:	781b      	ldrb	r3, [r3, #0]
 801bf96:	f003 0301 	and.w	r3, r3, #1
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	d023      	beq.n	801bfe6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801bf9e:	693b      	ldr	r3, [r7, #16]
 801bfa0:	781b      	ldrb	r3, [r3, #0]
 801bfa2:	2b01      	cmp	r3, #1
 801bfa4:	d10f      	bne.n	801bfc6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801bfa6:	693b      	ldr	r3, [r7, #16]
 801bfa8:	785b      	ldrb	r3, [r3, #1]
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	d11b      	bne.n	801bfe6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801bfae:	693b      	ldr	r3, [r7, #16]
 801bfb0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801bfb2:	2b5e      	cmp	r3, #94	@ 0x5e
 801bfb4:	d117      	bne.n	801bfe6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	7b5b      	ldrb	r3, [r3, #13]
 801bfba:	f043 0310 	orr.w	r3, r3, #16
 801bfbe:	b2da      	uxtb	r2, r3
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	735a      	strb	r2, [r3, #13]
 801bfc4:	e00f      	b.n	801bfe6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801bfc6:	693b      	ldr	r3, [r7, #16]
 801bfc8:	2206      	movs	r2, #6
 801bfca:	4928      	ldr	r1, [pc, #160]	@ (801c06c <ethernet_input+0x118>)
 801bfcc:	4618      	mov	r0, r3
 801bfce:	f001 fa42 	bl	801d456 <memcmp>
 801bfd2:	4603      	mov	r3, r0
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	d106      	bne.n	801bfe6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	7b5b      	ldrb	r3, [r3, #13]
 801bfdc:	f043 0308 	orr.w	r3, r3, #8
 801bfe0:	b2da      	uxtb	r2, r3
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801bfe6:	89fb      	ldrh	r3, [r7, #14]
 801bfe8:	2b08      	cmp	r3, #8
 801bfea:	d003      	beq.n	801bff4 <ethernet_input+0xa0>
 801bfec:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801bff0:	d014      	beq.n	801c01c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801bff2:	e032      	b.n	801c05a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801bff4:	683b      	ldr	r3, [r7, #0]
 801bff6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bffa:	f003 0308 	and.w	r3, r3, #8
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d024      	beq.n	801c04c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c002:	8afb      	ldrh	r3, [r7, #22]
 801c004:	4619      	mov	r1, r3
 801c006:	6878      	ldr	r0, [r7, #4]
 801c008:	f7f6 fd98 	bl	8012b3c <pbuf_remove_header>
 801c00c:	4603      	mov	r3, r0
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d11e      	bne.n	801c050 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801c012:	6839      	ldr	r1, [r7, #0]
 801c014:	6878      	ldr	r0, [r7, #4]
 801c016:	f7fe ff21 	bl	801ae5c <ip4_input>
      break;
 801c01a:	e013      	b.n	801c044 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c01c:	683b      	ldr	r3, [r7, #0]
 801c01e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c022:	f003 0308 	and.w	r3, r3, #8
 801c026:	2b00      	cmp	r3, #0
 801c028:	d014      	beq.n	801c054 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c02a:	8afb      	ldrh	r3, [r7, #22]
 801c02c:	4619      	mov	r1, r3
 801c02e:	6878      	ldr	r0, [r7, #4]
 801c030:	f7f6 fd84 	bl	8012b3c <pbuf_remove_header>
 801c034:	4603      	mov	r3, r0
 801c036:	2b00      	cmp	r3, #0
 801c038:	d10e      	bne.n	801c058 <ethernet_input+0x104>
        etharp_input(p, netif);
 801c03a:	6839      	ldr	r1, [r7, #0]
 801c03c:	6878      	ldr	r0, [r7, #4]
 801c03e:	f7fe f8c1 	bl	801a1c4 <etharp_input>
      break;
 801c042:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801c044:	2300      	movs	r3, #0
 801c046:	e00c      	b.n	801c062 <ethernet_input+0x10e>
    goto free_and_return;
 801c048:	bf00      	nop
 801c04a:	e006      	b.n	801c05a <ethernet_input+0x106>
        goto free_and_return;
 801c04c:	bf00      	nop
 801c04e:	e004      	b.n	801c05a <ethernet_input+0x106>
        goto free_and_return;
 801c050:	bf00      	nop
 801c052:	e002      	b.n	801c05a <ethernet_input+0x106>
        goto free_and_return;
 801c054:	bf00      	nop
 801c056:	e000      	b.n	801c05a <ethernet_input+0x106>
        goto free_and_return;
 801c058:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801c05a:	6878      	ldr	r0, [r7, #4]
 801c05c:	f7f6 fdf4 	bl	8012c48 <pbuf_free>
  return ERR_OK;
 801c060:	2300      	movs	r3, #0
}
 801c062:	4618      	mov	r0, r3
 801c064:	3718      	adds	r7, #24
 801c066:	46bd      	mov	sp, r7
 801c068:	bd80      	pop	{r7, pc}
 801c06a:	bf00      	nop
 801c06c:	0803251c 	.word	0x0803251c

0801c070 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801c070:	b580      	push	{r7, lr}
 801c072:	b086      	sub	sp, #24
 801c074:	af00      	add	r7, sp, #0
 801c076:	60f8      	str	r0, [r7, #12]
 801c078:	60b9      	str	r1, [r7, #8]
 801c07a:	607a      	str	r2, [r7, #4]
 801c07c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c07e:	8c3b      	ldrh	r3, [r7, #32]
 801c080:	4618      	mov	r0, r3
 801c082:	f7f5 f9f3 	bl	801146c <lwip_htons>
 801c086:	4603      	mov	r3, r0
 801c088:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801c08a:	210e      	movs	r1, #14
 801c08c:	68b8      	ldr	r0, [r7, #8]
 801c08e:	f7f6 fd45 	bl	8012b1c <pbuf_add_header>
 801c092:	4603      	mov	r3, r0
 801c094:	2b00      	cmp	r3, #0
 801c096:	d125      	bne.n	801c0e4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801c098:	68bb      	ldr	r3, [r7, #8]
 801c09a:	685b      	ldr	r3, [r3, #4]
 801c09c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801c09e:	693b      	ldr	r3, [r7, #16]
 801c0a0:	8afa      	ldrh	r2, [r7, #22]
 801c0a2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801c0a4:	693b      	ldr	r3, [r7, #16]
 801c0a6:	2206      	movs	r2, #6
 801c0a8:	6839      	ldr	r1, [r7, #0]
 801c0aa:	4618      	mov	r0, r3
 801c0ac:	f001 faeb 	bl	801d686 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801c0b0:	693b      	ldr	r3, [r7, #16]
 801c0b2:	3306      	adds	r3, #6
 801c0b4:	2206      	movs	r2, #6
 801c0b6:	6879      	ldr	r1, [r7, #4]
 801c0b8:	4618      	mov	r0, r3
 801c0ba:	f001 fae4 	bl	801d686 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c0be:	68fb      	ldr	r3, [r7, #12]
 801c0c0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801c0c4:	2b06      	cmp	r3, #6
 801c0c6:	d006      	beq.n	801c0d6 <ethernet_output+0x66>
 801c0c8:	4b0a      	ldr	r3, [pc, #40]	@ (801c0f4 <ethernet_output+0x84>)
 801c0ca:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801c0ce:	490a      	ldr	r1, [pc, #40]	@ (801c0f8 <ethernet_output+0x88>)
 801c0d0:	480a      	ldr	r0, [pc, #40]	@ (801c0fc <ethernet_output+0x8c>)
 801c0d2:	f001 f94b 	bl	801d36c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c0d6:	68fb      	ldr	r3, [r7, #12]
 801c0d8:	699b      	ldr	r3, [r3, #24]
 801c0da:	68b9      	ldr	r1, [r7, #8]
 801c0dc:	68f8      	ldr	r0, [r7, #12]
 801c0de:	4798      	blx	r3
 801c0e0:	4603      	mov	r3, r0
 801c0e2:	e002      	b.n	801c0ea <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801c0e4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c0e6:	f06f 0301 	mvn.w	r3, #1
}
 801c0ea:	4618      	mov	r0, r3
 801c0ec:	3718      	adds	r7, #24
 801c0ee:	46bd      	mov	sp, r7
 801c0f0:	bd80      	pop	{r7, pc}
 801c0f2:	bf00      	nop
 801c0f4:	08021b2c 	.word	0x08021b2c
 801c0f8:	08021b64 	.word	0x08021b64
 801c0fc:	08021b98 	.word	0x08021b98

0801c100 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c100:	b580      	push	{r7, lr}
 801c102:	b086      	sub	sp, #24
 801c104:	af00      	add	r7, sp, #0
 801c106:	6078      	str	r0, [r7, #4]
 801c108:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801c10a:	683b      	ldr	r3, [r7, #0]
 801c10c:	60bb      	str	r3, [r7, #8]
 801c10e:	2304      	movs	r3, #4
 801c110:	60fb      	str	r3, [r7, #12]
 801c112:	2300      	movs	r3, #0
 801c114:	613b      	str	r3, [r7, #16]
 801c116:	2300      	movs	r3, #0
 801c118:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801c11a:	f107 0308 	add.w	r3, r7, #8
 801c11e:	2100      	movs	r1, #0
 801c120:	4618      	mov	r0, r3
 801c122:	f7ef ff54 	bl	800bfce <osMessageCreate>
 801c126:	4602      	mov	r2, r0
 801c128:	687b      	ldr	r3, [r7, #4]
 801c12a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	681b      	ldr	r3, [r3, #0]
 801c130:	2b00      	cmp	r3, #0
 801c132:	d102      	bne.n	801c13a <sys_mbox_new+0x3a>
    return ERR_MEM;
 801c134:	f04f 33ff 	mov.w	r3, #4294967295
 801c138:	e000      	b.n	801c13c <sys_mbox_new+0x3c>

  return ERR_OK;
 801c13a:	2300      	movs	r3, #0
}
 801c13c:	4618      	mov	r0, r3
 801c13e:	3718      	adds	r7, #24
 801c140:	46bd      	mov	sp, r7
 801c142:	bd80      	pop	{r7, pc}

0801c144 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801c144:	b580      	push	{r7, lr}
 801c146:	b082      	sub	sp, #8
 801c148:	af00      	add	r7, sp, #0
 801c14a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	681b      	ldr	r3, [r3, #0]
 801c150:	4618      	mov	r0, r3
 801c152:	f7f0 f819 	bl	800c188 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	681b      	ldr	r3, [r3, #0]
 801c15a:	4618      	mov	r0, r3
 801c15c:	f7f0 f82a 	bl	800c1b4 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801c160:	bf00      	nop
 801c162:	3708      	adds	r7, #8
 801c164:	46bd      	mov	sp, r7
 801c166:	bd80      	pop	{r7, pc}

0801c168 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c168:	b580      	push	{r7, lr}
 801c16a:	b084      	sub	sp, #16
 801c16c:	af00      	add	r7, sp, #0
 801c16e:	6078      	str	r0, [r7, #4]
 801c170:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	681b      	ldr	r3, [r3, #0]
 801c176:	6839      	ldr	r1, [r7, #0]
 801c178:	2200      	movs	r2, #0
 801c17a:	4618      	mov	r0, r3
 801c17c:	f7ef ff50 	bl	800c020 <osMessagePut>
 801c180:	4603      	mov	r3, r0
 801c182:	2b00      	cmp	r3, #0
 801c184:	d102      	bne.n	801c18c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801c186:	2300      	movs	r3, #0
 801c188:	73fb      	strb	r3, [r7, #15]
 801c18a:	e001      	b.n	801c190 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801c18c:	23ff      	movs	r3, #255	@ 0xff
 801c18e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801c190:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c194:	4618      	mov	r0, r3
 801c196:	3710      	adds	r7, #16
 801c198:	46bd      	mov	sp, r7
 801c19a:	bd80      	pop	{r7, pc}

0801c19c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c19c:	b580      	push	{r7, lr}
 801c19e:	b08c      	sub	sp, #48	@ 0x30
 801c1a0:	af00      	add	r7, sp, #0
 801c1a2:	61f8      	str	r0, [r7, #28]
 801c1a4:	61b9      	str	r1, [r7, #24]
 801c1a6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801c1a8:	f7ef fd2f 	bl	800bc0a <osKernelSysTick>
 801c1ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c1ae:	697b      	ldr	r3, [r7, #20]
 801c1b0:	2b00      	cmp	r3, #0
 801c1b2:	d017      	beq.n	801c1e4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801c1b4:	69fb      	ldr	r3, [r7, #28]
 801c1b6:	6819      	ldr	r1, [r3, #0]
 801c1b8:	f107 0320 	add.w	r3, r7, #32
 801c1bc:	697a      	ldr	r2, [r7, #20]
 801c1be:	4618      	mov	r0, r3
 801c1c0:	f7ef ff6e 	bl	800c0a0 <osMessageGet>

    if(event.status == osEventMessage)
 801c1c4:	6a3b      	ldr	r3, [r7, #32]
 801c1c6:	2b10      	cmp	r3, #16
 801c1c8:	d109      	bne.n	801c1de <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801c1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1cc:	461a      	mov	r2, r3
 801c1ce:	69bb      	ldr	r3, [r7, #24]
 801c1d0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801c1d2:	f7ef fd1a 	bl	800bc0a <osKernelSysTick>
 801c1d6:	4602      	mov	r2, r0
 801c1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1da:	1ad3      	subs	r3, r2, r3
 801c1dc:	e019      	b.n	801c212 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c1de:	f04f 33ff 	mov.w	r3, #4294967295
 801c1e2:	e016      	b.n	801c212 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801c1e4:	69fb      	ldr	r3, [r7, #28]
 801c1e6:	6819      	ldr	r1, [r3, #0]
 801c1e8:	463b      	mov	r3, r7
 801c1ea:	f04f 32ff 	mov.w	r2, #4294967295
 801c1ee:	4618      	mov	r0, r3
 801c1f0:	f7ef ff56 	bl	800c0a0 <osMessageGet>
 801c1f4:	f107 0320 	add.w	r3, r7, #32
 801c1f8:	463a      	mov	r2, r7
 801c1fa:	ca07      	ldmia	r2, {r0, r1, r2}
 801c1fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801c200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c202:	461a      	mov	r2, r3
 801c204:	69bb      	ldr	r3, [r7, #24]
 801c206:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801c208:	f7ef fcff 	bl	800bc0a <osKernelSysTick>
 801c20c:	4602      	mov	r2, r0
 801c20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c210:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c212:	4618      	mov	r0, r3
 801c214:	3730      	adds	r7, #48	@ 0x30
 801c216:	46bd      	mov	sp, r7
 801c218:	bd80      	pop	{r7, pc}

0801c21a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801c21a:	b580      	push	{r7, lr}
 801c21c:	b086      	sub	sp, #24
 801c21e:	af00      	add	r7, sp, #0
 801c220:	6078      	str	r0, [r7, #4]
 801c222:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801c224:	687b      	ldr	r3, [r7, #4]
 801c226:	6819      	ldr	r1, [r3, #0]
 801c228:	f107 030c 	add.w	r3, r7, #12
 801c22c:	2200      	movs	r2, #0
 801c22e:	4618      	mov	r0, r3
 801c230:	f7ef ff36 	bl	800c0a0 <osMessageGet>

  if(event.status == osEventMessage)
 801c234:	68fb      	ldr	r3, [r7, #12]
 801c236:	2b10      	cmp	r3, #16
 801c238:	d105      	bne.n	801c246 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801c23a:	693b      	ldr	r3, [r7, #16]
 801c23c:	461a      	mov	r2, r3
 801c23e:	683b      	ldr	r3, [r7, #0]
 801c240:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801c242:	2300      	movs	r3, #0
 801c244:	e001      	b.n	801c24a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801c246:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801c24a:	4618      	mov	r0, r3
 801c24c:	3718      	adds	r7, #24
 801c24e:	46bd      	mov	sp, r7
 801c250:	bd80      	pop	{r7, pc}

0801c252 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801c252:	b480      	push	{r7}
 801c254:	b083      	sub	sp, #12
 801c256:	af00      	add	r7, sp, #0
 801c258:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	681b      	ldr	r3, [r3, #0]
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d101      	bne.n	801c266 <sys_mbox_valid+0x14>
    return 0;
 801c262:	2300      	movs	r3, #0
 801c264:	e000      	b.n	801c268 <sys_mbox_valid+0x16>
  else
    return 1;
 801c266:	2301      	movs	r3, #1
}
 801c268:	4618      	mov	r0, r3
 801c26a:	370c      	adds	r7, #12
 801c26c:	46bd      	mov	sp, r7
 801c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c272:	4770      	bx	lr

0801c274 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801c274:	b480      	push	{r7}
 801c276:	b083      	sub	sp, #12
 801c278:	af00      	add	r7, sp, #0
 801c27a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	2200      	movs	r2, #0
 801c280:	601a      	str	r2, [r3, #0]
}
 801c282:	bf00      	nop
 801c284:	370c      	adds	r7, #12
 801c286:	46bd      	mov	sp, r7
 801c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c28c:	4770      	bx	lr

0801c28e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801c28e:	b580      	push	{r7, lr}
 801c290:	b084      	sub	sp, #16
 801c292:	af00      	add	r7, sp, #0
 801c294:	6078      	str	r0, [r7, #4]
 801c296:	460b      	mov	r3, r1
 801c298:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801c29a:	2300      	movs	r3, #0
 801c29c:	60bb      	str	r3, [r7, #8]
 801c29e:	2300      	movs	r3, #0
 801c2a0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801c2a2:	f107 0308 	add.w	r3, r7, #8
 801c2a6:	2101      	movs	r1, #1
 801c2a8:	4618      	mov	r0, r3
 801c2aa:	f7ef fdc7 	bl	800be3c <osSemaphoreCreate>
 801c2ae:	4602      	mov	r2, r0
 801c2b0:	687b      	ldr	r3, [r7, #4]
 801c2b2:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	681b      	ldr	r3, [r3, #0]
 801c2b8:	2b00      	cmp	r3, #0
 801c2ba:	d102      	bne.n	801c2c2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c2bc:	f04f 33ff 	mov.w	r3, #4294967295
 801c2c0:	e009      	b.n	801c2d6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801c2c2:	78fb      	ldrb	r3, [r7, #3]
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	d105      	bne.n	801c2d4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	681b      	ldr	r3, [r3, #0]
 801c2cc:	2100      	movs	r1, #0
 801c2ce:	4618      	mov	r0, r3
 801c2d0:	f7ef fde6 	bl	800bea0 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801c2d4:	2300      	movs	r3, #0
}
 801c2d6:	4618      	mov	r0, r3
 801c2d8:	3710      	adds	r7, #16
 801c2da:	46bd      	mov	sp, r7
 801c2dc:	bd80      	pop	{r7, pc}

0801c2de <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801c2de:	b580      	push	{r7, lr}
 801c2e0:	b084      	sub	sp, #16
 801c2e2:	af00      	add	r7, sp, #0
 801c2e4:	6078      	str	r0, [r7, #4]
 801c2e6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801c2e8:	f7ef fc8f 	bl	800bc0a <osKernelSysTick>
 801c2ec:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c2ee:	683b      	ldr	r3, [r7, #0]
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	d011      	beq.n	801c318 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	681b      	ldr	r3, [r3, #0]
 801c2f8:	6839      	ldr	r1, [r7, #0]
 801c2fa:	4618      	mov	r0, r3
 801c2fc:	f7ef fdd0 	bl	800bea0 <osSemaphoreWait>
 801c300:	4603      	mov	r3, r0
 801c302:	2b00      	cmp	r3, #0
 801c304:	d105      	bne.n	801c312 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801c306:	f7ef fc80 	bl	800bc0a <osKernelSysTick>
 801c30a:	4602      	mov	r2, r0
 801c30c:	68fb      	ldr	r3, [r7, #12]
 801c30e:	1ad3      	subs	r3, r2, r3
 801c310:	e012      	b.n	801c338 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c312:	f04f 33ff 	mov.w	r3, #4294967295
 801c316:	e00f      	b.n	801c338 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801c318:	bf00      	nop
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	681b      	ldr	r3, [r3, #0]
 801c31e:	f04f 31ff 	mov.w	r1, #4294967295
 801c322:	4618      	mov	r0, r3
 801c324:	f7ef fdbc 	bl	800bea0 <osSemaphoreWait>
 801c328:	4603      	mov	r3, r0
 801c32a:	2b00      	cmp	r3, #0
 801c32c:	d1f5      	bne.n	801c31a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801c32e:	f7ef fc6c 	bl	800bc0a <osKernelSysTick>
 801c332:	4602      	mov	r2, r0
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c338:	4618      	mov	r0, r3
 801c33a:	3710      	adds	r7, #16
 801c33c:	46bd      	mov	sp, r7
 801c33e:	bd80      	pop	{r7, pc}

0801c340 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801c340:	b580      	push	{r7, lr}
 801c342:	b082      	sub	sp, #8
 801c344:	af00      	add	r7, sp, #0
 801c346:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	681b      	ldr	r3, [r3, #0]
 801c34c:	4618      	mov	r0, r3
 801c34e:	f7ef fdf5 	bl	800bf3c <osSemaphoreRelease>
}
 801c352:	bf00      	nop
 801c354:	3708      	adds	r7, #8
 801c356:	46bd      	mov	sp, r7
 801c358:	bd80      	pop	{r7, pc}

0801c35a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801c35a:	b580      	push	{r7, lr}
 801c35c:	b082      	sub	sp, #8
 801c35e:	af00      	add	r7, sp, #0
 801c360:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801c362:	687b      	ldr	r3, [r7, #4]
 801c364:	681b      	ldr	r3, [r3, #0]
 801c366:	4618      	mov	r0, r3
 801c368:	f7ef fe1e 	bl	800bfa8 <osSemaphoreDelete>
}
 801c36c:	bf00      	nop
 801c36e:	3708      	adds	r7, #8
 801c370:	46bd      	mov	sp, r7
 801c372:	bd80      	pop	{r7, pc}

0801c374 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801c374:	b480      	push	{r7}
 801c376:	b083      	sub	sp, #12
 801c378:	af00      	add	r7, sp, #0
 801c37a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	681b      	ldr	r3, [r3, #0]
 801c380:	2b00      	cmp	r3, #0
 801c382:	d101      	bne.n	801c388 <sys_sem_valid+0x14>
    return 0;
 801c384:	2300      	movs	r3, #0
 801c386:	e000      	b.n	801c38a <sys_sem_valid+0x16>
  else
    return 1;
 801c388:	2301      	movs	r3, #1
}
 801c38a:	4618      	mov	r0, r3
 801c38c:	370c      	adds	r7, #12
 801c38e:	46bd      	mov	sp, r7
 801c390:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c394:	4770      	bx	lr

0801c396 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801c396:	b480      	push	{r7}
 801c398:	b083      	sub	sp, #12
 801c39a:	af00      	add	r7, sp, #0
 801c39c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801c39e:	687b      	ldr	r3, [r7, #4]
 801c3a0:	2200      	movs	r2, #0
 801c3a2:	601a      	str	r2, [r3, #0]
}
 801c3a4:	bf00      	nop
 801c3a6:	370c      	adds	r7, #12
 801c3a8:	46bd      	mov	sp, r7
 801c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3ae:	4770      	bx	lr

0801c3b0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801c3b0:	b580      	push	{r7, lr}
 801c3b2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801c3b4:	4803      	ldr	r0, [pc, #12]	@ (801c3c4 <sys_init+0x14>)
 801c3b6:	f7ef fca4 	bl	800bd02 <osMutexCreate>
 801c3ba:	4603      	mov	r3, r0
 801c3bc:	4a02      	ldr	r2, [pc, #8]	@ (801c3c8 <sys_init+0x18>)
 801c3be:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801c3c0:	bf00      	nop
 801c3c2:	bd80      	pop	{r7, pc}
 801c3c4:	0803252c 	.word	0x0803252c
 801c3c8:	2000e5b8 	.word	0x2000e5b8

0801c3cc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c3cc:	b580      	push	{r7, lr}
 801c3ce:	b084      	sub	sp, #16
 801c3d0:	af00      	add	r7, sp, #0
 801c3d2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801c3d4:	2300      	movs	r3, #0
 801c3d6:	60bb      	str	r3, [r7, #8]
 801c3d8:	2300      	movs	r3, #0
 801c3da:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801c3dc:	f107 0308 	add.w	r3, r7, #8
 801c3e0:	4618      	mov	r0, r3
 801c3e2:	f7ef fc8e 	bl	800bd02 <osMutexCreate>
 801c3e6:	4602      	mov	r2, r0
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801c3ec:	687b      	ldr	r3, [r7, #4]
 801c3ee:	681b      	ldr	r3, [r3, #0]
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	d102      	bne.n	801c3fa <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c3f4:	f04f 33ff 	mov.w	r3, #4294967295
 801c3f8:	e000      	b.n	801c3fc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c3fa:	2300      	movs	r3, #0
}
 801c3fc:	4618      	mov	r0, r3
 801c3fe:	3710      	adds	r7, #16
 801c400:	46bd      	mov	sp, r7
 801c402:	bd80      	pop	{r7, pc}

0801c404 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c404:	b580      	push	{r7, lr}
 801c406:	b082      	sub	sp, #8
 801c408:	af00      	add	r7, sp, #0
 801c40a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	f04f 31ff 	mov.w	r1, #4294967295
 801c414:	4618      	mov	r0, r3
 801c416:	f7ef fc8d 	bl	800bd34 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801c41a:	bf00      	nop
 801c41c:	3708      	adds	r7, #8
 801c41e:	46bd      	mov	sp, r7
 801c420:	bd80      	pop	{r7, pc}

0801c422 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c422:	b580      	push	{r7, lr}
 801c424:	b082      	sub	sp, #8
 801c426:	af00      	add	r7, sp, #0
 801c428:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	681b      	ldr	r3, [r3, #0]
 801c42e:	4618      	mov	r0, r3
 801c430:	f7ef fcce 	bl	800bdd0 <osMutexRelease>
}
 801c434:	bf00      	nop
 801c436:	3708      	adds	r7, #8
 801c438:	46bd      	mov	sp, r7
 801c43a:	bd80      	pop	{r7, pc}

0801c43c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c43c:	b580      	push	{r7, lr}
 801c43e:	b08c      	sub	sp, #48	@ 0x30
 801c440:	af00      	add	r7, sp, #0
 801c442:	60f8      	str	r0, [r7, #12]
 801c444:	60b9      	str	r1, [r7, #8]
 801c446:	607a      	str	r2, [r7, #4]
 801c448:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801c44a:	f107 0314 	add.w	r3, r7, #20
 801c44e:	2200      	movs	r2, #0
 801c450:	601a      	str	r2, [r3, #0]
 801c452:	605a      	str	r2, [r3, #4]
 801c454:	609a      	str	r2, [r3, #8]
 801c456:	60da      	str	r2, [r3, #12]
 801c458:	611a      	str	r2, [r3, #16]
 801c45a:	615a      	str	r2, [r3, #20]
 801c45c:	619a      	str	r2, [r3, #24]
 801c45e:	68fb      	ldr	r3, [r7, #12]
 801c460:	617b      	str	r3, [r7, #20]
 801c462:	68bb      	ldr	r3, [r7, #8]
 801c464:	61bb      	str	r3, [r7, #24]
 801c466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c468:	b21b      	sxth	r3, r3
 801c46a:	83bb      	strh	r3, [r7, #28]
 801c46c:	683b      	ldr	r3, [r7, #0]
 801c46e:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801c470:	f107 0314 	add.w	r3, r7, #20
 801c474:	6879      	ldr	r1, [r7, #4]
 801c476:	4618      	mov	r0, r3
 801c478:	f7ef fbd7 	bl	800bc2a <osThreadCreate>
 801c47c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801c47e:	4618      	mov	r0, r3
 801c480:	3730      	adds	r7, #48	@ 0x30
 801c482:	46bd      	mov	sp, r7
 801c484:	bd80      	pop	{r7, pc}
	...

0801c488 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c488:	b580      	push	{r7, lr}
 801c48a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801c48c:	4b04      	ldr	r3, [pc, #16]	@ (801c4a0 <sys_arch_protect+0x18>)
 801c48e:	681b      	ldr	r3, [r3, #0]
 801c490:	f04f 31ff 	mov.w	r1, #4294967295
 801c494:	4618      	mov	r0, r3
 801c496:	f7ef fc4d 	bl	800bd34 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801c49a:	2301      	movs	r3, #1
}
 801c49c:	4618      	mov	r0, r3
 801c49e:	bd80      	pop	{r7, pc}
 801c4a0:	2000e5b8 	.word	0x2000e5b8

0801c4a4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c4a4:	b580      	push	{r7, lr}
 801c4a6:	b082      	sub	sp, #8
 801c4a8:	af00      	add	r7, sp, #0
 801c4aa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c4ac:	4b04      	ldr	r3, [pc, #16]	@ (801c4c0 <sys_arch_unprotect+0x1c>)
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	4618      	mov	r0, r3
 801c4b2:	f7ef fc8d 	bl	800bdd0 <osMutexRelease>
}
 801c4b6:	bf00      	nop
 801c4b8:	3708      	adds	r7, #8
 801c4ba:	46bd      	mov	sp, r7
 801c4bc:	bd80      	pop	{r7, pc}
 801c4be:	bf00      	nop
 801c4c0:	2000e5b8 	.word	0x2000e5b8

0801c4c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801c4c4:	b580      	push	{r7, lr}
 801c4c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801c4c8:	2200      	movs	r2, #0
 801c4ca:	4912      	ldr	r1, [pc, #72]	@ (801c514 <MX_USB_DEVICE_Init+0x50>)
 801c4cc:	4812      	ldr	r0, [pc, #72]	@ (801c518 <MX_USB_DEVICE_Init+0x54>)
 801c4ce:	f7ee f83f 	bl	800a550 <USBD_Init>
 801c4d2:	4603      	mov	r3, r0
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	d001      	beq.n	801c4dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801c4d8:	f7e5 fb44 	bl	8001b64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801c4dc:	490f      	ldr	r1, [pc, #60]	@ (801c51c <MX_USB_DEVICE_Init+0x58>)
 801c4de:	480e      	ldr	r0, [pc, #56]	@ (801c518 <MX_USB_DEVICE_Init+0x54>)
 801c4e0:	f7ee f866 	bl	800a5b0 <USBD_RegisterClass>
 801c4e4:	4603      	mov	r3, r0
 801c4e6:	2b00      	cmp	r3, #0
 801c4e8:	d001      	beq.n	801c4ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801c4ea:	f7e5 fb3b 	bl	8001b64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801c4ee:	490c      	ldr	r1, [pc, #48]	@ (801c520 <MX_USB_DEVICE_Init+0x5c>)
 801c4f0:	4809      	ldr	r0, [pc, #36]	@ (801c518 <MX_USB_DEVICE_Init+0x54>)
 801c4f2:	f7ed ff5d 	bl	800a3b0 <USBD_CDC_RegisterInterface>
 801c4f6:	4603      	mov	r3, r0
 801c4f8:	2b00      	cmp	r3, #0
 801c4fa:	d001      	beq.n	801c500 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801c4fc:	f7e5 fb32 	bl	8001b64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801c500:	4805      	ldr	r0, [pc, #20]	@ (801c518 <MX_USB_DEVICE_Init+0x54>)
 801c502:	f7ee f88b 	bl	800a61c <USBD_Start>
 801c506:	4603      	mov	r3, r0
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d001      	beq.n	801c510 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801c50c:	f7e5 fb2a 	bl	8001b64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801c510:	bf00      	nop
 801c512:	bd80      	pop	{r7, pc}
 801c514:	200000d0 	.word	0x200000d0
 801c518:	2000e5bc 	.word	0x2000e5bc
 801c51c:	2000002c 	.word	0x2000002c
 801c520:	200000bc 	.word	0x200000bc

0801c524 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801c524:	b580      	push	{r7, lr}
 801c526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801c528:	2200      	movs	r2, #0
 801c52a:	4905      	ldr	r1, [pc, #20]	@ (801c540 <CDC_Init_FS+0x1c>)
 801c52c:	4805      	ldr	r0, [pc, #20]	@ (801c544 <CDC_Init_FS+0x20>)
 801c52e:	f7ed ff59 	bl	800a3e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801c532:	4905      	ldr	r1, [pc, #20]	@ (801c548 <CDC_Init_FS+0x24>)
 801c534:	4803      	ldr	r0, [pc, #12]	@ (801c544 <CDC_Init_FS+0x20>)
 801c536:	f7ed ff77 	bl	800a428 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801c53a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801c53c:	4618      	mov	r0, r3
 801c53e:	bd80      	pop	{r7, pc}
 801c540:	2000f098 	.word	0x2000f098
 801c544:	2000e5bc 	.word	0x2000e5bc
 801c548:	2000e898 	.word	0x2000e898

0801c54c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801c54c:	b480      	push	{r7}
 801c54e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801c550:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801c552:	4618      	mov	r0, r3
 801c554:	46bd      	mov	sp, r7
 801c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c55a:	4770      	bx	lr

0801c55c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801c55c:	b480      	push	{r7}
 801c55e:	b083      	sub	sp, #12
 801c560:	af00      	add	r7, sp, #0
 801c562:	4603      	mov	r3, r0
 801c564:	6039      	str	r1, [r7, #0]
 801c566:	71fb      	strb	r3, [r7, #7]
 801c568:	4613      	mov	r3, r2
 801c56a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801c56c:	79fb      	ldrb	r3, [r7, #7]
 801c56e:	2b23      	cmp	r3, #35	@ 0x23
 801c570:	d84a      	bhi.n	801c608 <CDC_Control_FS+0xac>
 801c572:	a201      	add	r2, pc, #4	@ (adr r2, 801c578 <CDC_Control_FS+0x1c>)
 801c574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c578:	0801c609 	.word	0x0801c609
 801c57c:	0801c609 	.word	0x0801c609
 801c580:	0801c609 	.word	0x0801c609
 801c584:	0801c609 	.word	0x0801c609
 801c588:	0801c609 	.word	0x0801c609
 801c58c:	0801c609 	.word	0x0801c609
 801c590:	0801c609 	.word	0x0801c609
 801c594:	0801c609 	.word	0x0801c609
 801c598:	0801c609 	.word	0x0801c609
 801c59c:	0801c609 	.word	0x0801c609
 801c5a0:	0801c609 	.word	0x0801c609
 801c5a4:	0801c609 	.word	0x0801c609
 801c5a8:	0801c609 	.word	0x0801c609
 801c5ac:	0801c609 	.word	0x0801c609
 801c5b0:	0801c609 	.word	0x0801c609
 801c5b4:	0801c609 	.word	0x0801c609
 801c5b8:	0801c609 	.word	0x0801c609
 801c5bc:	0801c609 	.word	0x0801c609
 801c5c0:	0801c609 	.word	0x0801c609
 801c5c4:	0801c609 	.word	0x0801c609
 801c5c8:	0801c609 	.word	0x0801c609
 801c5cc:	0801c609 	.word	0x0801c609
 801c5d0:	0801c609 	.word	0x0801c609
 801c5d4:	0801c609 	.word	0x0801c609
 801c5d8:	0801c609 	.word	0x0801c609
 801c5dc:	0801c609 	.word	0x0801c609
 801c5e0:	0801c609 	.word	0x0801c609
 801c5e4:	0801c609 	.word	0x0801c609
 801c5e8:	0801c609 	.word	0x0801c609
 801c5ec:	0801c609 	.word	0x0801c609
 801c5f0:	0801c609 	.word	0x0801c609
 801c5f4:	0801c609 	.word	0x0801c609
 801c5f8:	0801c609 	.word	0x0801c609
 801c5fc:	0801c609 	.word	0x0801c609
 801c600:	0801c609 	.word	0x0801c609
 801c604:	0801c609 	.word	0x0801c609
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801c608:	bf00      	nop
  }

  return (USBD_OK);
 801c60a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801c60c:	4618      	mov	r0, r3
 801c60e:	370c      	adds	r7, #12
 801c610:	46bd      	mov	sp, r7
 801c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c616:	4770      	bx	lr

0801c618 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801c618:	b580      	push	{r7, lr}
 801c61a:	b082      	sub	sp, #8
 801c61c:	af00      	add	r7, sp, #0
 801c61e:	6078      	str	r0, [r7, #4]
 801c620:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801c622:	6879      	ldr	r1, [r7, #4]
 801c624:	4805      	ldr	r0, [pc, #20]	@ (801c63c <CDC_Receive_FS+0x24>)
 801c626:	f7ed feff 	bl	800a428 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c62a:	4804      	ldr	r0, [pc, #16]	@ (801c63c <CDC_Receive_FS+0x24>)
 801c62c:	f7ed ff5a 	bl	800a4e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801c630:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801c632:	4618      	mov	r0, r3
 801c634:	3708      	adds	r7, #8
 801c636:	46bd      	mov	sp, r7
 801c638:	bd80      	pop	{r7, pc}
 801c63a:	bf00      	nop
 801c63c:	2000e5bc 	.word	0x2000e5bc

0801c640 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801c640:	b580      	push	{r7, lr}
 801c642:	b084      	sub	sp, #16
 801c644:	af00      	add	r7, sp, #0
 801c646:	6078      	str	r0, [r7, #4]
 801c648:	460b      	mov	r3, r1
 801c64a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801c64c:	2300      	movs	r3, #0
 801c64e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801c650:	4b0d      	ldr	r3, [pc, #52]	@ (801c688 <CDC_Transmit_FS+0x48>)
 801c652:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801c656:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801c658:	68bb      	ldr	r3, [r7, #8]
 801c65a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801c65e:	2b00      	cmp	r3, #0
 801c660:	d001      	beq.n	801c666 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801c662:	2301      	movs	r3, #1
 801c664:	e00b      	b.n	801c67e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801c666:	887b      	ldrh	r3, [r7, #2]
 801c668:	461a      	mov	r2, r3
 801c66a:	6879      	ldr	r1, [r7, #4]
 801c66c:	4806      	ldr	r0, [pc, #24]	@ (801c688 <CDC_Transmit_FS+0x48>)
 801c66e:	f7ed feb9 	bl	800a3e4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801c672:	4805      	ldr	r0, [pc, #20]	@ (801c688 <CDC_Transmit_FS+0x48>)
 801c674:	f7ed fef6 	bl	800a464 <USBD_CDC_TransmitPacket>
 801c678:	4603      	mov	r3, r0
 801c67a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801c67c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c67e:	4618      	mov	r0, r3
 801c680:	3710      	adds	r7, #16
 801c682:	46bd      	mov	sp, r7
 801c684:	bd80      	pop	{r7, pc}
 801c686:	bf00      	nop
 801c688:	2000e5bc 	.word	0x2000e5bc

0801c68c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801c68c:	b480      	push	{r7}
 801c68e:	b087      	sub	sp, #28
 801c690:	af00      	add	r7, sp, #0
 801c692:	60f8      	str	r0, [r7, #12]
 801c694:	60b9      	str	r1, [r7, #8]
 801c696:	4613      	mov	r3, r2
 801c698:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801c69a:	2300      	movs	r3, #0
 801c69c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801c69e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c6a2:	4618      	mov	r0, r3
 801c6a4:	371c      	adds	r7, #28
 801c6a6:	46bd      	mov	sp, r7
 801c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6ac:	4770      	bx	lr
	...

0801c6b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c6b0:	b480      	push	{r7}
 801c6b2:	b083      	sub	sp, #12
 801c6b4:	af00      	add	r7, sp, #0
 801c6b6:	4603      	mov	r3, r0
 801c6b8:	6039      	str	r1, [r7, #0]
 801c6ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801c6bc:	683b      	ldr	r3, [r7, #0]
 801c6be:	2212      	movs	r2, #18
 801c6c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801c6c2:	4b03      	ldr	r3, [pc, #12]	@ (801c6d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 801c6c4:	4618      	mov	r0, r3
 801c6c6:	370c      	adds	r7, #12
 801c6c8:	46bd      	mov	sp, r7
 801c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6ce:	4770      	bx	lr
 801c6d0:	200000f0 	.word	0x200000f0

0801c6d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c6d4:	b480      	push	{r7}
 801c6d6:	b083      	sub	sp, #12
 801c6d8:	af00      	add	r7, sp, #0
 801c6da:	4603      	mov	r3, r0
 801c6dc:	6039      	str	r1, [r7, #0]
 801c6de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801c6e0:	683b      	ldr	r3, [r7, #0]
 801c6e2:	2204      	movs	r2, #4
 801c6e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801c6e6:	4b03      	ldr	r3, [pc, #12]	@ (801c6f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801c6e8:	4618      	mov	r0, r3
 801c6ea:	370c      	adds	r7, #12
 801c6ec:	46bd      	mov	sp, r7
 801c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6f2:	4770      	bx	lr
 801c6f4:	20000110 	.word	0x20000110

0801c6f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c6f8:	b580      	push	{r7, lr}
 801c6fa:	b082      	sub	sp, #8
 801c6fc:	af00      	add	r7, sp, #0
 801c6fe:	4603      	mov	r3, r0
 801c700:	6039      	str	r1, [r7, #0]
 801c702:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801c704:	79fb      	ldrb	r3, [r7, #7]
 801c706:	2b00      	cmp	r3, #0
 801c708:	d105      	bne.n	801c716 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c70a:	683a      	ldr	r2, [r7, #0]
 801c70c:	4907      	ldr	r1, [pc, #28]	@ (801c72c <USBD_FS_ProductStrDescriptor+0x34>)
 801c70e:	4808      	ldr	r0, [pc, #32]	@ (801c730 <USBD_FS_ProductStrDescriptor+0x38>)
 801c710:	f7ef f95e 	bl	800b9d0 <USBD_GetString>
 801c714:	e004      	b.n	801c720 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c716:	683a      	ldr	r2, [r7, #0]
 801c718:	4904      	ldr	r1, [pc, #16]	@ (801c72c <USBD_FS_ProductStrDescriptor+0x34>)
 801c71a:	4805      	ldr	r0, [pc, #20]	@ (801c730 <USBD_FS_ProductStrDescriptor+0x38>)
 801c71c:	f7ef f958 	bl	800b9d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c720:	4b02      	ldr	r3, [pc, #8]	@ (801c72c <USBD_FS_ProductStrDescriptor+0x34>)
}
 801c722:	4618      	mov	r0, r3
 801c724:	3708      	adds	r7, #8
 801c726:	46bd      	mov	sp, r7
 801c728:	bd80      	pop	{r7, pc}
 801c72a:	bf00      	nop
 801c72c:	2000f898 	.word	0x2000f898
 801c730:	08021bc0 	.word	0x08021bc0

0801c734 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c734:	b580      	push	{r7, lr}
 801c736:	b082      	sub	sp, #8
 801c738:	af00      	add	r7, sp, #0
 801c73a:	4603      	mov	r3, r0
 801c73c:	6039      	str	r1, [r7, #0]
 801c73e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801c740:	683a      	ldr	r2, [r7, #0]
 801c742:	4904      	ldr	r1, [pc, #16]	@ (801c754 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801c744:	4804      	ldr	r0, [pc, #16]	@ (801c758 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801c746:	f7ef f943 	bl	800b9d0 <USBD_GetString>
  return USBD_StrDesc;
 801c74a:	4b02      	ldr	r3, [pc, #8]	@ (801c754 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801c74c:	4618      	mov	r0, r3
 801c74e:	3708      	adds	r7, #8
 801c750:	46bd      	mov	sp, r7
 801c752:	bd80      	pop	{r7, pc}
 801c754:	2000f898 	.word	0x2000f898
 801c758:	08021bd8 	.word	0x08021bd8

0801c75c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c75c:	b580      	push	{r7, lr}
 801c75e:	b082      	sub	sp, #8
 801c760:	af00      	add	r7, sp, #0
 801c762:	4603      	mov	r3, r0
 801c764:	6039      	str	r1, [r7, #0]
 801c766:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801c768:	683b      	ldr	r3, [r7, #0]
 801c76a:	221a      	movs	r2, #26
 801c76c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801c76e:	f000 f855 	bl	801c81c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801c772:	4b02      	ldr	r3, [pc, #8]	@ (801c77c <USBD_FS_SerialStrDescriptor+0x20>)
}
 801c774:	4618      	mov	r0, r3
 801c776:	3708      	adds	r7, #8
 801c778:	46bd      	mov	sp, r7
 801c77a:	bd80      	pop	{r7, pc}
 801c77c:	20000114 	.word	0x20000114

0801c780 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c780:	b580      	push	{r7, lr}
 801c782:	b082      	sub	sp, #8
 801c784:	af00      	add	r7, sp, #0
 801c786:	4603      	mov	r3, r0
 801c788:	6039      	str	r1, [r7, #0]
 801c78a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801c78c:	79fb      	ldrb	r3, [r7, #7]
 801c78e:	2b00      	cmp	r3, #0
 801c790:	d105      	bne.n	801c79e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c792:	683a      	ldr	r2, [r7, #0]
 801c794:	4907      	ldr	r1, [pc, #28]	@ (801c7b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 801c796:	4808      	ldr	r0, [pc, #32]	@ (801c7b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 801c798:	f7ef f91a 	bl	800b9d0 <USBD_GetString>
 801c79c:	e004      	b.n	801c7a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c79e:	683a      	ldr	r2, [r7, #0]
 801c7a0:	4904      	ldr	r1, [pc, #16]	@ (801c7b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 801c7a2:	4805      	ldr	r0, [pc, #20]	@ (801c7b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 801c7a4:	f7ef f914 	bl	800b9d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c7a8:	4b02      	ldr	r3, [pc, #8]	@ (801c7b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801c7aa:	4618      	mov	r0, r3
 801c7ac:	3708      	adds	r7, #8
 801c7ae:	46bd      	mov	sp, r7
 801c7b0:	bd80      	pop	{r7, pc}
 801c7b2:	bf00      	nop
 801c7b4:	2000f898 	.word	0x2000f898
 801c7b8:	08021bec 	.word	0x08021bec

0801c7bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c7bc:	b580      	push	{r7, lr}
 801c7be:	b082      	sub	sp, #8
 801c7c0:	af00      	add	r7, sp, #0
 801c7c2:	4603      	mov	r3, r0
 801c7c4:	6039      	str	r1, [r7, #0]
 801c7c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801c7c8:	79fb      	ldrb	r3, [r7, #7]
 801c7ca:	2b00      	cmp	r3, #0
 801c7cc:	d105      	bne.n	801c7da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c7ce:	683a      	ldr	r2, [r7, #0]
 801c7d0:	4907      	ldr	r1, [pc, #28]	@ (801c7f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801c7d2:	4808      	ldr	r0, [pc, #32]	@ (801c7f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801c7d4:	f7ef f8fc 	bl	800b9d0 <USBD_GetString>
 801c7d8:	e004      	b.n	801c7e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c7da:	683a      	ldr	r2, [r7, #0]
 801c7dc:	4904      	ldr	r1, [pc, #16]	@ (801c7f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801c7de:	4805      	ldr	r0, [pc, #20]	@ (801c7f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801c7e0:	f7ef f8f6 	bl	800b9d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c7e4:	4b02      	ldr	r3, [pc, #8]	@ (801c7f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801c7e6:	4618      	mov	r0, r3
 801c7e8:	3708      	adds	r7, #8
 801c7ea:	46bd      	mov	sp, r7
 801c7ec:	bd80      	pop	{r7, pc}
 801c7ee:	bf00      	nop
 801c7f0:	2000f898 	.word	0x2000f898
 801c7f4:	08021bf8 	.word	0x08021bf8

0801c7f8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c7f8:	b480      	push	{r7}
 801c7fa:	b083      	sub	sp, #12
 801c7fc:	af00      	add	r7, sp, #0
 801c7fe:	4603      	mov	r3, r0
 801c800:	6039      	str	r1, [r7, #0]
 801c802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801c804:	683b      	ldr	r3, [r7, #0]
 801c806:	220c      	movs	r2, #12
 801c808:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801c80a:	4b03      	ldr	r3, [pc, #12]	@ (801c818 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801c80c:	4618      	mov	r0, r3
 801c80e:	370c      	adds	r7, #12
 801c810:	46bd      	mov	sp, r7
 801c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c816:	4770      	bx	lr
 801c818:	20000104 	.word	0x20000104

0801c81c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801c81c:	b580      	push	{r7, lr}
 801c81e:	b084      	sub	sp, #16
 801c820:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801c822:	4b0f      	ldr	r3, [pc, #60]	@ (801c860 <Get_SerialNum+0x44>)
 801c824:	681b      	ldr	r3, [r3, #0]
 801c826:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801c828:	4b0e      	ldr	r3, [pc, #56]	@ (801c864 <Get_SerialNum+0x48>)
 801c82a:	681b      	ldr	r3, [r3, #0]
 801c82c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801c82e:	4b0e      	ldr	r3, [pc, #56]	@ (801c868 <Get_SerialNum+0x4c>)
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801c834:	68fa      	ldr	r2, [r7, #12]
 801c836:	687b      	ldr	r3, [r7, #4]
 801c838:	4413      	add	r3, r2
 801c83a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d009      	beq.n	801c856 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801c842:	2208      	movs	r2, #8
 801c844:	4909      	ldr	r1, [pc, #36]	@ (801c86c <Get_SerialNum+0x50>)
 801c846:	68f8      	ldr	r0, [r7, #12]
 801c848:	f000 f814 	bl	801c874 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801c84c:	2204      	movs	r2, #4
 801c84e:	4908      	ldr	r1, [pc, #32]	@ (801c870 <Get_SerialNum+0x54>)
 801c850:	68b8      	ldr	r0, [r7, #8]
 801c852:	f000 f80f 	bl	801c874 <IntToUnicode>
  }
}
 801c856:	bf00      	nop
 801c858:	3710      	adds	r7, #16
 801c85a:	46bd      	mov	sp, r7
 801c85c:	bd80      	pop	{r7, pc}
 801c85e:	bf00      	nop
 801c860:	1ff0f420 	.word	0x1ff0f420
 801c864:	1ff0f424 	.word	0x1ff0f424
 801c868:	1ff0f428 	.word	0x1ff0f428
 801c86c:	20000116 	.word	0x20000116
 801c870:	20000126 	.word	0x20000126

0801c874 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801c874:	b480      	push	{r7}
 801c876:	b087      	sub	sp, #28
 801c878:	af00      	add	r7, sp, #0
 801c87a:	60f8      	str	r0, [r7, #12]
 801c87c:	60b9      	str	r1, [r7, #8]
 801c87e:	4613      	mov	r3, r2
 801c880:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801c882:	2300      	movs	r3, #0
 801c884:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801c886:	2300      	movs	r3, #0
 801c888:	75fb      	strb	r3, [r7, #23]
 801c88a:	e027      	b.n	801c8dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801c88c:	68fb      	ldr	r3, [r7, #12]
 801c88e:	0f1b      	lsrs	r3, r3, #28
 801c890:	2b09      	cmp	r3, #9
 801c892:	d80b      	bhi.n	801c8ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801c894:	68fb      	ldr	r3, [r7, #12]
 801c896:	0f1b      	lsrs	r3, r3, #28
 801c898:	b2da      	uxtb	r2, r3
 801c89a:	7dfb      	ldrb	r3, [r7, #23]
 801c89c:	005b      	lsls	r3, r3, #1
 801c89e:	4619      	mov	r1, r3
 801c8a0:	68bb      	ldr	r3, [r7, #8]
 801c8a2:	440b      	add	r3, r1
 801c8a4:	3230      	adds	r2, #48	@ 0x30
 801c8a6:	b2d2      	uxtb	r2, r2
 801c8a8:	701a      	strb	r2, [r3, #0]
 801c8aa:	e00a      	b.n	801c8c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	0f1b      	lsrs	r3, r3, #28
 801c8b0:	b2da      	uxtb	r2, r3
 801c8b2:	7dfb      	ldrb	r3, [r7, #23]
 801c8b4:	005b      	lsls	r3, r3, #1
 801c8b6:	4619      	mov	r1, r3
 801c8b8:	68bb      	ldr	r3, [r7, #8]
 801c8ba:	440b      	add	r3, r1
 801c8bc:	3237      	adds	r2, #55	@ 0x37
 801c8be:	b2d2      	uxtb	r2, r2
 801c8c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	011b      	lsls	r3, r3, #4
 801c8c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801c8c8:	7dfb      	ldrb	r3, [r7, #23]
 801c8ca:	005b      	lsls	r3, r3, #1
 801c8cc:	3301      	adds	r3, #1
 801c8ce:	68ba      	ldr	r2, [r7, #8]
 801c8d0:	4413      	add	r3, r2
 801c8d2:	2200      	movs	r2, #0
 801c8d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801c8d6:	7dfb      	ldrb	r3, [r7, #23]
 801c8d8:	3301      	adds	r3, #1
 801c8da:	75fb      	strb	r3, [r7, #23]
 801c8dc:	7dfa      	ldrb	r2, [r7, #23]
 801c8de:	79fb      	ldrb	r3, [r7, #7]
 801c8e0:	429a      	cmp	r2, r3
 801c8e2:	d3d3      	bcc.n	801c88c <IntToUnicode+0x18>
  }
}
 801c8e4:	bf00      	nop
 801c8e6:	bf00      	nop
 801c8e8:	371c      	adds	r7, #28
 801c8ea:	46bd      	mov	sp, r7
 801c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8f0:	4770      	bx	lr
	...

0801c8f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801c8f4:	b580      	push	{r7, lr}
 801c8f6:	b0ae      	sub	sp, #184	@ 0xb8
 801c8f8:	af00      	add	r7, sp, #0
 801c8fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c8fc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801c900:	2200      	movs	r2, #0
 801c902:	601a      	str	r2, [r3, #0]
 801c904:	605a      	str	r2, [r3, #4]
 801c906:	609a      	str	r2, [r3, #8]
 801c908:	60da      	str	r2, [r3, #12]
 801c90a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801c90c:	f107 0314 	add.w	r3, r7, #20
 801c910:	2290      	movs	r2, #144	@ 0x90
 801c912:	2100      	movs	r1, #0
 801c914:	4618      	mov	r0, r3
 801c916:	f000 fdc8 	bl	801d4aa <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801c922:	d161      	bne.n	801c9e8 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 801c924:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801c928:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 801c92a:	2300      	movs	r3, #0
 801c92c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801c930:	f107 0314 	add.w	r3, r7, #20
 801c934:	4618      	mov	r0, r3
 801c936:	f7ea f85b 	bl	80069f0 <HAL_RCCEx_PeriphCLKConfig>
 801c93a:	4603      	mov	r3, r0
 801c93c:	2b00      	cmp	r3, #0
 801c93e:	d001      	beq.n	801c944 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 801c940:	f7e5 f910 	bl	8001b64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801c944:	4b2a      	ldr	r3, [pc, #168]	@ (801c9f0 <HAL_PCD_MspInit+0xfc>)
 801c946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c948:	4a29      	ldr	r2, [pc, #164]	@ (801c9f0 <HAL_PCD_MspInit+0xfc>)
 801c94a:	f043 0301 	orr.w	r3, r3, #1
 801c94e:	6313      	str	r3, [r2, #48]	@ 0x30
 801c950:	4b27      	ldr	r3, [pc, #156]	@ (801c9f0 <HAL_PCD_MspInit+0xfc>)
 801c952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c954:	f003 0301 	and.w	r3, r3, #1
 801c958:	613b      	str	r3, [r7, #16]
 801c95a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 801c95c:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 801c960:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c964:	2302      	movs	r3, #2
 801c966:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c96a:	2300      	movs	r3, #0
 801c96c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c970:	2303      	movs	r3, #3
 801c972:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801c976:	230a      	movs	r3, #10
 801c978:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c97c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801c980:	4619      	mov	r1, r3
 801c982:	481c      	ldr	r0, [pc, #112]	@ (801c9f4 <HAL_PCD_MspInit+0x100>)
 801c984:	f7e7 f866 	bl	8003a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801c988:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801c98c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801c990:	2300      	movs	r3, #0
 801c992:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c996:	2300      	movs	r3, #0
 801c998:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c99c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801c9a0:	4619      	mov	r1, r3
 801c9a2:	4814      	ldr	r0, [pc, #80]	@ (801c9f4 <HAL_PCD_MspInit+0x100>)
 801c9a4:	f7e7 f856 	bl	8003a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801c9a8:	4b11      	ldr	r3, [pc, #68]	@ (801c9f0 <HAL_PCD_MspInit+0xfc>)
 801c9aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c9ac:	4a10      	ldr	r2, [pc, #64]	@ (801c9f0 <HAL_PCD_MspInit+0xfc>)
 801c9ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c9b2:	6353      	str	r3, [r2, #52]	@ 0x34
 801c9b4:	4b0e      	ldr	r3, [pc, #56]	@ (801c9f0 <HAL_PCD_MspInit+0xfc>)
 801c9b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c9b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801c9bc:	60fb      	str	r3, [r7, #12]
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	4b0b      	ldr	r3, [pc, #44]	@ (801c9f0 <HAL_PCD_MspInit+0xfc>)
 801c9c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c9c4:	4a0a      	ldr	r2, [pc, #40]	@ (801c9f0 <HAL_PCD_MspInit+0xfc>)
 801c9c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801c9ca:	6453      	str	r3, [r2, #68]	@ 0x44
 801c9cc:	4b08      	ldr	r3, [pc, #32]	@ (801c9f0 <HAL_PCD_MspInit+0xfc>)
 801c9ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c9d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801c9d4:	60bb      	str	r3, [r7, #8]
 801c9d6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801c9d8:	2200      	movs	r2, #0
 801c9da:	2105      	movs	r1, #5
 801c9dc:	2043      	movs	r0, #67	@ 0x43
 801c9de:	f7e5 fd21 	bl	8002424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801c9e2:	2043      	movs	r0, #67	@ 0x43
 801c9e4:	f7e5 fd3a 	bl	800245c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801c9e8:	bf00      	nop
 801c9ea:	37b8      	adds	r7, #184	@ 0xb8
 801c9ec:	46bd      	mov	sp, r7
 801c9ee:	bd80      	pop	{r7, pc}
 801c9f0:	40023800 	.word	0x40023800
 801c9f4:	40020000 	.word	0x40020000

0801c9f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c9f8:	b580      	push	{r7, lr}
 801c9fa:	b082      	sub	sp, #8
 801c9fc:	af00      	add	r7, sp, #0
 801c9fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 801ca06:	687b      	ldr	r3, [r7, #4]
 801ca08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801ca0c:	4619      	mov	r1, r3
 801ca0e:	4610      	mov	r0, r2
 801ca10:	f7ed fe51 	bl	800a6b6 <USBD_LL_SetupStage>
}
 801ca14:	bf00      	nop
 801ca16:	3708      	adds	r7, #8
 801ca18:	46bd      	mov	sp, r7
 801ca1a:	bd80      	pop	{r7, pc}

0801ca1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ca1c:	b580      	push	{r7, lr}
 801ca1e:	b082      	sub	sp, #8
 801ca20:	af00      	add	r7, sp, #0
 801ca22:	6078      	str	r0, [r7, #4]
 801ca24:	460b      	mov	r3, r1
 801ca26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 801ca2e:	78fa      	ldrb	r2, [r7, #3]
 801ca30:	6879      	ldr	r1, [r7, #4]
 801ca32:	4613      	mov	r3, r2
 801ca34:	00db      	lsls	r3, r3, #3
 801ca36:	4413      	add	r3, r2
 801ca38:	009b      	lsls	r3, r3, #2
 801ca3a:	440b      	add	r3, r1
 801ca3c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801ca40:	681a      	ldr	r2, [r3, #0]
 801ca42:	78fb      	ldrb	r3, [r7, #3]
 801ca44:	4619      	mov	r1, r3
 801ca46:	f7ed fe8b 	bl	800a760 <USBD_LL_DataOutStage>
}
 801ca4a:	bf00      	nop
 801ca4c:	3708      	adds	r7, #8
 801ca4e:	46bd      	mov	sp, r7
 801ca50:	bd80      	pop	{r7, pc}

0801ca52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ca52:	b580      	push	{r7, lr}
 801ca54:	b082      	sub	sp, #8
 801ca56:	af00      	add	r7, sp, #0
 801ca58:	6078      	str	r0, [r7, #4]
 801ca5a:	460b      	mov	r3, r1
 801ca5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 801ca64:	78fa      	ldrb	r2, [r7, #3]
 801ca66:	6879      	ldr	r1, [r7, #4]
 801ca68:	4613      	mov	r3, r2
 801ca6a:	00db      	lsls	r3, r3, #3
 801ca6c:	4413      	add	r3, r2
 801ca6e:	009b      	lsls	r3, r3, #2
 801ca70:	440b      	add	r3, r1
 801ca72:	3320      	adds	r3, #32
 801ca74:	681a      	ldr	r2, [r3, #0]
 801ca76:	78fb      	ldrb	r3, [r7, #3]
 801ca78:	4619      	mov	r1, r3
 801ca7a:	f7ed ff24 	bl	800a8c6 <USBD_LL_DataInStage>
}
 801ca7e:	bf00      	nop
 801ca80:	3708      	adds	r7, #8
 801ca82:	46bd      	mov	sp, r7
 801ca84:	bd80      	pop	{r7, pc}

0801ca86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ca86:	b580      	push	{r7, lr}
 801ca88:	b082      	sub	sp, #8
 801ca8a:	af00      	add	r7, sp, #0
 801ca8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801ca8e:	687b      	ldr	r3, [r7, #4]
 801ca90:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801ca94:	4618      	mov	r0, r3
 801ca96:	f7ee f85e 	bl	800ab56 <USBD_LL_SOF>
}
 801ca9a:	bf00      	nop
 801ca9c:	3708      	adds	r7, #8
 801ca9e:	46bd      	mov	sp, r7
 801caa0:	bd80      	pop	{r7, pc}

0801caa2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801caa2:	b580      	push	{r7, lr}
 801caa4:	b084      	sub	sp, #16
 801caa6:	af00      	add	r7, sp, #0
 801caa8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801caaa:	2301      	movs	r3, #1
 801caac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	79db      	ldrb	r3, [r3, #7]
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	d102      	bne.n	801cabc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801cab6:	2300      	movs	r3, #0
 801cab8:	73fb      	strb	r3, [r7, #15]
 801caba:	e008      	b.n	801cace <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	79db      	ldrb	r3, [r3, #7]
 801cac0:	2b02      	cmp	r3, #2
 801cac2:	d102      	bne.n	801caca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801cac4:	2301      	movs	r3, #1
 801cac6:	73fb      	strb	r3, [r7, #15]
 801cac8:	e001      	b.n	801cace <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801caca:	f7e5 f84b 	bl	8001b64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801cad4:	7bfa      	ldrb	r2, [r7, #15]
 801cad6:	4611      	mov	r1, r2
 801cad8:	4618      	mov	r0, r3
 801cada:	f7ed fff8 	bl	800aace <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801cae4:	4618      	mov	r0, r3
 801cae6:	f7ed ffa0 	bl	800aa2a <USBD_LL_Reset>
}
 801caea:	bf00      	nop
 801caec:	3710      	adds	r7, #16
 801caee:	46bd      	mov	sp, r7
 801caf0:	bd80      	pop	{r7, pc}
	...

0801caf4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801caf4:	b580      	push	{r7, lr}
 801caf6:	b082      	sub	sp, #8
 801caf8:	af00      	add	r7, sp, #0
 801cafa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801cb02:	4618      	mov	r0, r3
 801cb04:	f7ed fff3 	bl	800aaee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	681b      	ldr	r3, [r3, #0]
 801cb0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801cb10:	681b      	ldr	r3, [r3, #0]
 801cb12:	687a      	ldr	r2, [r7, #4]
 801cb14:	6812      	ldr	r2, [r2, #0]
 801cb16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801cb1a:	f043 0301 	orr.w	r3, r3, #1
 801cb1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801cb20:	687b      	ldr	r3, [r7, #4]
 801cb22:	7adb      	ldrb	r3, [r3, #11]
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	d005      	beq.n	801cb34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801cb28:	4b04      	ldr	r3, [pc, #16]	@ (801cb3c <HAL_PCD_SuspendCallback+0x48>)
 801cb2a:	691b      	ldr	r3, [r3, #16]
 801cb2c:	4a03      	ldr	r2, [pc, #12]	@ (801cb3c <HAL_PCD_SuspendCallback+0x48>)
 801cb2e:	f043 0306 	orr.w	r3, r3, #6
 801cb32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801cb34:	bf00      	nop
 801cb36:	3708      	adds	r7, #8
 801cb38:	46bd      	mov	sp, r7
 801cb3a:	bd80      	pop	{r7, pc}
 801cb3c:	e000ed00 	.word	0xe000ed00

0801cb40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cb40:	b580      	push	{r7, lr}
 801cb42:	b082      	sub	sp, #8
 801cb44:	af00      	add	r7, sp, #0
 801cb46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801cb4e:	4618      	mov	r0, r3
 801cb50:	f7ed ffe9 	bl	800ab26 <USBD_LL_Resume>
}
 801cb54:	bf00      	nop
 801cb56:	3708      	adds	r7, #8
 801cb58:	46bd      	mov	sp, r7
 801cb5a:	bd80      	pop	{r7, pc}

0801cb5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cb5c:	b580      	push	{r7, lr}
 801cb5e:	b082      	sub	sp, #8
 801cb60:	af00      	add	r7, sp, #0
 801cb62:	6078      	str	r0, [r7, #4]
 801cb64:	460b      	mov	r3, r1
 801cb66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801cb6e:	78fa      	ldrb	r2, [r7, #3]
 801cb70:	4611      	mov	r1, r2
 801cb72:	4618      	mov	r0, r3
 801cb74:	f7ee f841 	bl	800abfa <USBD_LL_IsoOUTIncomplete>
}
 801cb78:	bf00      	nop
 801cb7a:	3708      	adds	r7, #8
 801cb7c:	46bd      	mov	sp, r7
 801cb7e:	bd80      	pop	{r7, pc}

0801cb80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cb80:	b580      	push	{r7, lr}
 801cb82:	b082      	sub	sp, #8
 801cb84:	af00      	add	r7, sp, #0
 801cb86:	6078      	str	r0, [r7, #4]
 801cb88:	460b      	mov	r3, r1
 801cb8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801cb8c:	687b      	ldr	r3, [r7, #4]
 801cb8e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801cb92:	78fa      	ldrb	r2, [r7, #3]
 801cb94:	4611      	mov	r1, r2
 801cb96:	4618      	mov	r0, r3
 801cb98:	f7ed fffd 	bl	800ab96 <USBD_LL_IsoINIncomplete>
}
 801cb9c:	bf00      	nop
 801cb9e:	3708      	adds	r7, #8
 801cba0:	46bd      	mov	sp, r7
 801cba2:	bd80      	pop	{r7, pc}

0801cba4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cba4:	b580      	push	{r7, lr}
 801cba6:	b082      	sub	sp, #8
 801cba8:	af00      	add	r7, sp, #0
 801cbaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801cbac:	687b      	ldr	r3, [r7, #4]
 801cbae:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801cbb2:	4618      	mov	r0, r3
 801cbb4:	f7ee f853 	bl	800ac5e <USBD_LL_DevConnected>
}
 801cbb8:	bf00      	nop
 801cbba:	3708      	adds	r7, #8
 801cbbc:	46bd      	mov	sp, r7
 801cbbe:	bd80      	pop	{r7, pc}

0801cbc0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cbc0:	b580      	push	{r7, lr}
 801cbc2:	b082      	sub	sp, #8
 801cbc4:	af00      	add	r7, sp, #0
 801cbc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801cbce:	4618      	mov	r0, r3
 801cbd0:	f7ee f850 	bl	800ac74 <USBD_LL_DevDisconnected>
}
 801cbd4:	bf00      	nop
 801cbd6:	3708      	adds	r7, #8
 801cbd8:	46bd      	mov	sp, r7
 801cbda:	bd80      	pop	{r7, pc}

0801cbdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801cbdc:	b580      	push	{r7, lr}
 801cbde:	b082      	sub	sp, #8
 801cbe0:	af00      	add	r7, sp, #0
 801cbe2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	781b      	ldrb	r3, [r3, #0]
 801cbe8:	2b00      	cmp	r3, #0
 801cbea:	d13c      	bne.n	801cc66 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801cbec:	4a20      	ldr	r2, [pc, #128]	@ (801cc70 <USBD_LL_Init+0x94>)
 801cbee:	687b      	ldr	r3, [r7, #4]
 801cbf0:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	4a1e      	ldr	r2, [pc, #120]	@ (801cc70 <USBD_LL_Init+0x94>)
 801cbf8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801cbfc:	4b1c      	ldr	r3, [pc, #112]	@ (801cc70 <USBD_LL_Init+0x94>)
 801cbfe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801cc02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801cc04:	4b1a      	ldr	r3, [pc, #104]	@ (801cc70 <USBD_LL_Init+0x94>)
 801cc06:	2206      	movs	r2, #6
 801cc08:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801cc0a:	4b19      	ldr	r3, [pc, #100]	@ (801cc70 <USBD_LL_Init+0x94>)
 801cc0c:	2202      	movs	r2, #2
 801cc0e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801cc10:	4b17      	ldr	r3, [pc, #92]	@ (801cc70 <USBD_LL_Init+0x94>)
 801cc12:	2200      	movs	r2, #0
 801cc14:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801cc16:	4b16      	ldr	r3, [pc, #88]	@ (801cc70 <USBD_LL_Init+0x94>)
 801cc18:	2202      	movs	r2, #2
 801cc1a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801cc1c:	4b14      	ldr	r3, [pc, #80]	@ (801cc70 <USBD_LL_Init+0x94>)
 801cc1e:	2201      	movs	r2, #1
 801cc20:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801cc22:	4b13      	ldr	r3, [pc, #76]	@ (801cc70 <USBD_LL_Init+0x94>)
 801cc24:	2200      	movs	r2, #0
 801cc26:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801cc28:	4b11      	ldr	r3, [pc, #68]	@ (801cc70 <USBD_LL_Init+0x94>)
 801cc2a:	2200      	movs	r2, #0
 801cc2c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801cc2e:	4b10      	ldr	r3, [pc, #64]	@ (801cc70 <USBD_LL_Init+0x94>)
 801cc30:	2201      	movs	r2, #1
 801cc32:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801cc34:	4b0e      	ldr	r3, [pc, #56]	@ (801cc70 <USBD_LL_Init+0x94>)
 801cc36:	2200      	movs	r2, #0
 801cc38:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801cc3a:	480d      	ldr	r0, [pc, #52]	@ (801cc70 <USBD_LL_Init+0x94>)
 801cc3c:	f7e7 ff0d 	bl	8004a5a <HAL_PCD_Init>
 801cc40:	4603      	mov	r3, r0
 801cc42:	2b00      	cmp	r3, #0
 801cc44:	d001      	beq.n	801cc4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801cc46:	f7e4 ff8d 	bl	8001b64 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801cc4a:	2180      	movs	r1, #128	@ 0x80
 801cc4c:	4808      	ldr	r0, [pc, #32]	@ (801cc70 <USBD_LL_Init+0x94>)
 801cc4e:	f7e9 f958 	bl	8005f02 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801cc52:	2240      	movs	r2, #64	@ 0x40
 801cc54:	2100      	movs	r1, #0
 801cc56:	4806      	ldr	r0, [pc, #24]	@ (801cc70 <USBD_LL_Init+0x94>)
 801cc58:	f7e9 f90c 	bl	8005e74 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801cc5c:	2280      	movs	r2, #128	@ 0x80
 801cc5e:	2101      	movs	r1, #1
 801cc60:	4803      	ldr	r0, [pc, #12]	@ (801cc70 <USBD_LL_Init+0x94>)
 801cc62:	f7e9 f907 	bl	8005e74 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801cc66:	2300      	movs	r3, #0
}
 801cc68:	4618      	mov	r0, r3
 801cc6a:	3708      	adds	r7, #8
 801cc6c:	46bd      	mov	sp, r7
 801cc6e:	bd80      	pop	{r7, pc}
 801cc70:	2000fa98 	.word	0x2000fa98

0801cc74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801cc74:	b580      	push	{r7, lr}
 801cc76:	b084      	sub	sp, #16
 801cc78:	af00      	add	r7, sp, #0
 801cc7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cc7c:	2300      	movs	r3, #0
 801cc7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cc80:	2300      	movs	r3, #0
 801cc82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801cc8a:	4618      	mov	r0, r3
 801cc8c:	f7e7 fffb 	bl	8004c86 <HAL_PCD_Start>
 801cc90:	4603      	mov	r3, r0
 801cc92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cc94:	7bfb      	ldrb	r3, [r7, #15]
 801cc96:	4618      	mov	r0, r3
 801cc98:	f000 f97e 	bl	801cf98 <USBD_Get_USB_Status>
 801cc9c:	4603      	mov	r3, r0
 801cc9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cca0:	7bbb      	ldrb	r3, [r7, #14]
}
 801cca2:	4618      	mov	r0, r3
 801cca4:	3710      	adds	r7, #16
 801cca6:	46bd      	mov	sp, r7
 801cca8:	bd80      	pop	{r7, pc}

0801ccaa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801ccaa:	b580      	push	{r7, lr}
 801ccac:	b084      	sub	sp, #16
 801ccae:	af00      	add	r7, sp, #0
 801ccb0:	6078      	str	r0, [r7, #4]
 801ccb2:	4608      	mov	r0, r1
 801ccb4:	4611      	mov	r1, r2
 801ccb6:	461a      	mov	r2, r3
 801ccb8:	4603      	mov	r3, r0
 801ccba:	70fb      	strb	r3, [r7, #3]
 801ccbc:	460b      	mov	r3, r1
 801ccbe:	70bb      	strb	r3, [r7, #2]
 801ccc0:	4613      	mov	r3, r2
 801ccc2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ccc4:	2300      	movs	r3, #0
 801ccc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ccc8:	2300      	movs	r3, #0
 801ccca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801ccd2:	78bb      	ldrb	r3, [r7, #2]
 801ccd4:	883a      	ldrh	r2, [r7, #0]
 801ccd6:	78f9      	ldrb	r1, [r7, #3]
 801ccd8:	f7e8 fce9 	bl	80056ae <HAL_PCD_EP_Open>
 801ccdc:	4603      	mov	r3, r0
 801ccde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cce0:	7bfb      	ldrb	r3, [r7, #15]
 801cce2:	4618      	mov	r0, r3
 801cce4:	f000 f958 	bl	801cf98 <USBD_Get_USB_Status>
 801cce8:	4603      	mov	r3, r0
 801ccea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ccec:	7bbb      	ldrb	r3, [r7, #14]
}
 801ccee:	4618      	mov	r0, r3
 801ccf0:	3710      	adds	r7, #16
 801ccf2:	46bd      	mov	sp, r7
 801ccf4:	bd80      	pop	{r7, pc}

0801ccf6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ccf6:	b580      	push	{r7, lr}
 801ccf8:	b084      	sub	sp, #16
 801ccfa:	af00      	add	r7, sp, #0
 801ccfc:	6078      	str	r0, [r7, #4]
 801ccfe:	460b      	mov	r3, r1
 801cd00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cd02:	2300      	movs	r3, #0
 801cd04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cd06:	2300      	movs	r3, #0
 801cd08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801cd10:	78fa      	ldrb	r2, [r7, #3]
 801cd12:	4611      	mov	r1, r2
 801cd14:	4618      	mov	r0, r3
 801cd16:	f7e8 fd32 	bl	800577e <HAL_PCD_EP_Close>
 801cd1a:	4603      	mov	r3, r0
 801cd1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cd1e:	7bfb      	ldrb	r3, [r7, #15]
 801cd20:	4618      	mov	r0, r3
 801cd22:	f000 f939 	bl	801cf98 <USBD_Get_USB_Status>
 801cd26:	4603      	mov	r3, r0
 801cd28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cd2a:	7bbb      	ldrb	r3, [r7, #14]
}
 801cd2c:	4618      	mov	r0, r3
 801cd2e:	3710      	adds	r7, #16
 801cd30:	46bd      	mov	sp, r7
 801cd32:	bd80      	pop	{r7, pc}

0801cd34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cd34:	b580      	push	{r7, lr}
 801cd36:	b084      	sub	sp, #16
 801cd38:	af00      	add	r7, sp, #0
 801cd3a:	6078      	str	r0, [r7, #4]
 801cd3c:	460b      	mov	r3, r1
 801cd3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cd40:	2300      	movs	r3, #0
 801cd42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cd44:	2300      	movs	r3, #0
 801cd46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801cd48:	687b      	ldr	r3, [r7, #4]
 801cd4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801cd4e:	78fa      	ldrb	r2, [r7, #3]
 801cd50:	4611      	mov	r1, r2
 801cd52:	4618      	mov	r0, r3
 801cd54:	f7e8 fdea 	bl	800592c <HAL_PCD_EP_SetStall>
 801cd58:	4603      	mov	r3, r0
 801cd5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cd5c:	7bfb      	ldrb	r3, [r7, #15]
 801cd5e:	4618      	mov	r0, r3
 801cd60:	f000 f91a 	bl	801cf98 <USBD_Get_USB_Status>
 801cd64:	4603      	mov	r3, r0
 801cd66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cd68:	7bbb      	ldrb	r3, [r7, #14]
}
 801cd6a:	4618      	mov	r0, r3
 801cd6c:	3710      	adds	r7, #16
 801cd6e:	46bd      	mov	sp, r7
 801cd70:	bd80      	pop	{r7, pc}

0801cd72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cd72:	b580      	push	{r7, lr}
 801cd74:	b084      	sub	sp, #16
 801cd76:	af00      	add	r7, sp, #0
 801cd78:	6078      	str	r0, [r7, #4]
 801cd7a:	460b      	mov	r3, r1
 801cd7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cd7e:	2300      	movs	r3, #0
 801cd80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cd82:	2300      	movs	r3, #0
 801cd84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801cd8c:	78fa      	ldrb	r2, [r7, #3]
 801cd8e:	4611      	mov	r1, r2
 801cd90:	4618      	mov	r0, r3
 801cd92:	f7e8 fe2e 	bl	80059f2 <HAL_PCD_EP_ClrStall>
 801cd96:	4603      	mov	r3, r0
 801cd98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cd9a:	7bfb      	ldrb	r3, [r7, #15]
 801cd9c:	4618      	mov	r0, r3
 801cd9e:	f000 f8fb 	bl	801cf98 <USBD_Get_USB_Status>
 801cda2:	4603      	mov	r3, r0
 801cda4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cda6:	7bbb      	ldrb	r3, [r7, #14]
}
 801cda8:	4618      	mov	r0, r3
 801cdaa:	3710      	adds	r7, #16
 801cdac:	46bd      	mov	sp, r7
 801cdae:	bd80      	pop	{r7, pc}

0801cdb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cdb0:	b480      	push	{r7}
 801cdb2:	b085      	sub	sp, #20
 801cdb4:	af00      	add	r7, sp, #0
 801cdb6:	6078      	str	r0, [r7, #4]
 801cdb8:	460b      	mov	r3, r1
 801cdba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801cdc2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801cdc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	da0b      	bge.n	801cde4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801cdcc:	78fb      	ldrb	r3, [r7, #3]
 801cdce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801cdd2:	68f9      	ldr	r1, [r7, #12]
 801cdd4:	4613      	mov	r3, r2
 801cdd6:	00db      	lsls	r3, r3, #3
 801cdd8:	4413      	add	r3, r2
 801cdda:	009b      	lsls	r3, r3, #2
 801cddc:	440b      	add	r3, r1
 801cdde:	3316      	adds	r3, #22
 801cde0:	781b      	ldrb	r3, [r3, #0]
 801cde2:	e00b      	b.n	801cdfc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801cde4:	78fb      	ldrb	r3, [r7, #3]
 801cde6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801cdea:	68f9      	ldr	r1, [r7, #12]
 801cdec:	4613      	mov	r3, r2
 801cdee:	00db      	lsls	r3, r3, #3
 801cdf0:	4413      	add	r3, r2
 801cdf2:	009b      	lsls	r3, r3, #2
 801cdf4:	440b      	add	r3, r1
 801cdf6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801cdfa:	781b      	ldrb	r3, [r3, #0]
  }
}
 801cdfc:	4618      	mov	r0, r3
 801cdfe:	3714      	adds	r7, #20
 801ce00:	46bd      	mov	sp, r7
 801ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce06:	4770      	bx	lr

0801ce08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ce08:	b580      	push	{r7, lr}
 801ce0a:	b084      	sub	sp, #16
 801ce0c:	af00      	add	r7, sp, #0
 801ce0e:	6078      	str	r0, [r7, #4]
 801ce10:	460b      	mov	r3, r1
 801ce12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ce14:	2300      	movs	r3, #0
 801ce16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ce18:	2300      	movs	r3, #0
 801ce1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801ce22:	78fa      	ldrb	r2, [r7, #3]
 801ce24:	4611      	mov	r1, r2
 801ce26:	4618      	mov	r0, r3
 801ce28:	f7e8 fc1d 	bl	8005666 <HAL_PCD_SetAddress>
 801ce2c:	4603      	mov	r3, r0
 801ce2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ce30:	7bfb      	ldrb	r3, [r7, #15]
 801ce32:	4618      	mov	r0, r3
 801ce34:	f000 f8b0 	bl	801cf98 <USBD_Get_USB_Status>
 801ce38:	4603      	mov	r3, r0
 801ce3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ce3c:	7bbb      	ldrb	r3, [r7, #14]
}
 801ce3e:	4618      	mov	r0, r3
 801ce40:	3710      	adds	r7, #16
 801ce42:	46bd      	mov	sp, r7
 801ce44:	bd80      	pop	{r7, pc}

0801ce46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ce46:	b580      	push	{r7, lr}
 801ce48:	b086      	sub	sp, #24
 801ce4a:	af00      	add	r7, sp, #0
 801ce4c:	60f8      	str	r0, [r7, #12]
 801ce4e:	607a      	str	r2, [r7, #4]
 801ce50:	603b      	str	r3, [r7, #0]
 801ce52:	460b      	mov	r3, r1
 801ce54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ce56:	2300      	movs	r3, #0
 801ce58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ce5a:	2300      	movs	r3, #0
 801ce5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801ce5e:	68fb      	ldr	r3, [r7, #12]
 801ce60:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801ce64:	7af9      	ldrb	r1, [r7, #11]
 801ce66:	683b      	ldr	r3, [r7, #0]
 801ce68:	687a      	ldr	r2, [r7, #4]
 801ce6a:	f7e8 fd25 	bl	80058b8 <HAL_PCD_EP_Transmit>
 801ce6e:	4603      	mov	r3, r0
 801ce70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ce72:	7dfb      	ldrb	r3, [r7, #23]
 801ce74:	4618      	mov	r0, r3
 801ce76:	f000 f88f 	bl	801cf98 <USBD_Get_USB_Status>
 801ce7a:	4603      	mov	r3, r0
 801ce7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ce7e:	7dbb      	ldrb	r3, [r7, #22]
}
 801ce80:	4618      	mov	r0, r3
 801ce82:	3718      	adds	r7, #24
 801ce84:	46bd      	mov	sp, r7
 801ce86:	bd80      	pop	{r7, pc}

0801ce88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ce88:	b580      	push	{r7, lr}
 801ce8a:	b086      	sub	sp, #24
 801ce8c:	af00      	add	r7, sp, #0
 801ce8e:	60f8      	str	r0, [r7, #12]
 801ce90:	607a      	str	r2, [r7, #4]
 801ce92:	603b      	str	r3, [r7, #0]
 801ce94:	460b      	mov	r3, r1
 801ce96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ce98:	2300      	movs	r3, #0
 801ce9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ce9c:	2300      	movs	r3, #0
 801ce9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801cea0:	68fb      	ldr	r3, [r7, #12]
 801cea2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801cea6:	7af9      	ldrb	r1, [r7, #11]
 801cea8:	683b      	ldr	r3, [r7, #0]
 801ceaa:	687a      	ldr	r2, [r7, #4]
 801ceac:	f7e8 fcb1 	bl	8005812 <HAL_PCD_EP_Receive>
 801ceb0:	4603      	mov	r3, r0
 801ceb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ceb4:	7dfb      	ldrb	r3, [r7, #23]
 801ceb6:	4618      	mov	r0, r3
 801ceb8:	f000 f86e 	bl	801cf98 <USBD_Get_USB_Status>
 801cebc:	4603      	mov	r3, r0
 801cebe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801cec0:	7dbb      	ldrb	r3, [r7, #22]
}
 801cec2:	4618      	mov	r0, r3
 801cec4:	3718      	adds	r7, #24
 801cec6:	46bd      	mov	sp, r7
 801cec8:	bd80      	pop	{r7, pc}

0801ceca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ceca:	b580      	push	{r7, lr}
 801cecc:	b082      	sub	sp, #8
 801cece:	af00      	add	r7, sp, #0
 801ced0:	6078      	str	r0, [r7, #4]
 801ced2:	460b      	mov	r3, r1
 801ced4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801cedc:	78fa      	ldrb	r2, [r7, #3]
 801cede:	4611      	mov	r1, r2
 801cee0:	4618      	mov	r0, r3
 801cee2:	f7e8 fcd1 	bl	8005888 <HAL_PCD_EP_GetRxCount>
 801cee6:	4603      	mov	r3, r0
}
 801cee8:	4618      	mov	r0, r3
 801ceea:	3708      	adds	r7, #8
 801ceec:	46bd      	mov	sp, r7
 801ceee:	bd80      	pop	{r7, pc}

0801cef0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801cef0:	b580      	push	{r7, lr}
 801cef2:	b082      	sub	sp, #8
 801cef4:	af00      	add	r7, sp, #0
 801cef6:	6078      	str	r0, [r7, #4]
 801cef8:	460b      	mov	r3, r1
 801cefa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801cefc:	78fb      	ldrb	r3, [r7, #3]
 801cefe:	2b00      	cmp	r3, #0
 801cf00:	d002      	beq.n	801cf08 <HAL_PCDEx_LPM_Callback+0x18>
 801cf02:	2b01      	cmp	r3, #1
 801cf04:	d01f      	beq.n	801cf46 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801cf06:	e03b      	b.n	801cf80 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801cf08:	687b      	ldr	r3, [r7, #4]
 801cf0a:	7adb      	ldrb	r3, [r3, #11]
 801cf0c:	2b00      	cmp	r3, #0
 801cf0e:	d007      	beq.n	801cf20 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801cf10:	f000 f83c 	bl	801cf8c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801cf14:	4b1c      	ldr	r3, [pc, #112]	@ (801cf88 <HAL_PCDEx_LPM_Callback+0x98>)
 801cf16:	691b      	ldr	r3, [r3, #16]
 801cf18:	4a1b      	ldr	r2, [pc, #108]	@ (801cf88 <HAL_PCDEx_LPM_Callback+0x98>)
 801cf1a:	f023 0306 	bic.w	r3, r3, #6
 801cf1e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801cf20:	687b      	ldr	r3, [r7, #4]
 801cf22:	681b      	ldr	r3, [r3, #0]
 801cf24:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801cf28:	681b      	ldr	r3, [r3, #0]
 801cf2a:	687a      	ldr	r2, [r7, #4]
 801cf2c:	6812      	ldr	r2, [r2, #0]
 801cf2e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801cf32:	f023 0301 	bic.w	r3, r3, #1
 801cf36:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801cf38:	687b      	ldr	r3, [r7, #4]
 801cf3a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801cf3e:	4618      	mov	r0, r3
 801cf40:	f7ed fdf1 	bl	800ab26 <USBD_LL_Resume>
    break;
 801cf44:	e01c      	b.n	801cf80 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	681b      	ldr	r3, [r3, #0]
 801cf4a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801cf4e:	681b      	ldr	r3, [r3, #0]
 801cf50:	687a      	ldr	r2, [r7, #4]
 801cf52:	6812      	ldr	r2, [r2, #0]
 801cf54:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801cf58:	f043 0301 	orr.w	r3, r3, #1
 801cf5c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801cf64:	4618      	mov	r0, r3
 801cf66:	f7ed fdc2 	bl	800aaee <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801cf6a:	687b      	ldr	r3, [r7, #4]
 801cf6c:	7adb      	ldrb	r3, [r3, #11]
 801cf6e:	2b00      	cmp	r3, #0
 801cf70:	d005      	beq.n	801cf7e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801cf72:	4b05      	ldr	r3, [pc, #20]	@ (801cf88 <HAL_PCDEx_LPM_Callback+0x98>)
 801cf74:	691b      	ldr	r3, [r3, #16]
 801cf76:	4a04      	ldr	r2, [pc, #16]	@ (801cf88 <HAL_PCDEx_LPM_Callback+0x98>)
 801cf78:	f043 0306 	orr.w	r3, r3, #6
 801cf7c:	6113      	str	r3, [r2, #16]
    break;
 801cf7e:	bf00      	nop
}
 801cf80:	bf00      	nop
 801cf82:	3708      	adds	r7, #8
 801cf84:	46bd      	mov	sp, r7
 801cf86:	bd80      	pop	{r7, pc}
 801cf88:	e000ed00 	.word	0xe000ed00

0801cf8c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801cf8c:	b580      	push	{r7, lr}
 801cf8e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801cf90:	f7e4 fbb2 	bl	80016f8 <SystemClock_Config>
}
 801cf94:	bf00      	nop
 801cf96:	bd80      	pop	{r7, pc}

0801cf98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801cf98:	b480      	push	{r7}
 801cf9a:	b085      	sub	sp, #20
 801cf9c:	af00      	add	r7, sp, #0
 801cf9e:	4603      	mov	r3, r0
 801cfa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cfa2:	2300      	movs	r3, #0
 801cfa4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801cfa6:	79fb      	ldrb	r3, [r7, #7]
 801cfa8:	2b03      	cmp	r3, #3
 801cfaa:	d817      	bhi.n	801cfdc <USBD_Get_USB_Status+0x44>
 801cfac:	a201      	add	r2, pc, #4	@ (adr r2, 801cfb4 <USBD_Get_USB_Status+0x1c>)
 801cfae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cfb2:	bf00      	nop
 801cfb4:	0801cfc5 	.word	0x0801cfc5
 801cfb8:	0801cfcb 	.word	0x0801cfcb
 801cfbc:	0801cfd1 	.word	0x0801cfd1
 801cfc0:	0801cfd7 	.word	0x0801cfd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801cfc4:	2300      	movs	r3, #0
 801cfc6:	73fb      	strb	r3, [r7, #15]
    break;
 801cfc8:	e00b      	b.n	801cfe2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801cfca:	2303      	movs	r3, #3
 801cfcc:	73fb      	strb	r3, [r7, #15]
    break;
 801cfce:	e008      	b.n	801cfe2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801cfd0:	2301      	movs	r3, #1
 801cfd2:	73fb      	strb	r3, [r7, #15]
    break;
 801cfd4:	e005      	b.n	801cfe2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801cfd6:	2303      	movs	r3, #3
 801cfd8:	73fb      	strb	r3, [r7, #15]
    break;
 801cfda:	e002      	b.n	801cfe2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801cfdc:	2303      	movs	r3, #3
 801cfde:	73fb      	strb	r3, [r7, #15]
    break;
 801cfe0:	bf00      	nop
  }
  return usb_status;
 801cfe2:	7bfb      	ldrb	r3, [r7, #15]
}
 801cfe4:	4618      	mov	r0, r3
 801cfe6:	3714      	adds	r7, #20
 801cfe8:	46bd      	mov	sp, r7
 801cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfee:	4770      	bx	lr

0801cff0 <malloc>:
 801cff0:	4b02      	ldr	r3, [pc, #8]	@ (801cffc <malloc+0xc>)
 801cff2:	4601      	mov	r1, r0
 801cff4:	6818      	ldr	r0, [r3, #0]
 801cff6:	f000 b82d 	b.w	801d054 <_malloc_r>
 801cffa:	bf00      	nop
 801cffc:	2000013c 	.word	0x2000013c

0801d000 <free>:
 801d000:	4b02      	ldr	r3, [pc, #8]	@ (801d00c <free+0xc>)
 801d002:	4601      	mov	r1, r0
 801d004:	6818      	ldr	r0, [r3, #0]
 801d006:	f000 bb6b 	b.w	801d6e0 <_free_r>
 801d00a:	bf00      	nop
 801d00c:	2000013c 	.word	0x2000013c

0801d010 <sbrk_aligned>:
 801d010:	b570      	push	{r4, r5, r6, lr}
 801d012:	4e0f      	ldr	r6, [pc, #60]	@ (801d050 <sbrk_aligned+0x40>)
 801d014:	460c      	mov	r4, r1
 801d016:	6831      	ldr	r1, [r6, #0]
 801d018:	4605      	mov	r5, r0
 801d01a:	b911      	cbnz	r1, 801d022 <sbrk_aligned+0x12>
 801d01c:	f000 faea 	bl	801d5f4 <_sbrk_r>
 801d020:	6030      	str	r0, [r6, #0]
 801d022:	4621      	mov	r1, r4
 801d024:	4628      	mov	r0, r5
 801d026:	f000 fae5 	bl	801d5f4 <_sbrk_r>
 801d02a:	1c43      	adds	r3, r0, #1
 801d02c:	d103      	bne.n	801d036 <sbrk_aligned+0x26>
 801d02e:	f04f 34ff 	mov.w	r4, #4294967295
 801d032:	4620      	mov	r0, r4
 801d034:	bd70      	pop	{r4, r5, r6, pc}
 801d036:	1cc4      	adds	r4, r0, #3
 801d038:	f024 0403 	bic.w	r4, r4, #3
 801d03c:	42a0      	cmp	r0, r4
 801d03e:	d0f8      	beq.n	801d032 <sbrk_aligned+0x22>
 801d040:	1a21      	subs	r1, r4, r0
 801d042:	4628      	mov	r0, r5
 801d044:	f000 fad6 	bl	801d5f4 <_sbrk_r>
 801d048:	3001      	adds	r0, #1
 801d04a:	d1f2      	bne.n	801d032 <sbrk_aligned+0x22>
 801d04c:	e7ef      	b.n	801d02e <sbrk_aligned+0x1e>
 801d04e:	bf00      	nop
 801d050:	2000ff78 	.word	0x2000ff78

0801d054 <_malloc_r>:
 801d054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d058:	1ccd      	adds	r5, r1, #3
 801d05a:	f025 0503 	bic.w	r5, r5, #3
 801d05e:	3508      	adds	r5, #8
 801d060:	2d0c      	cmp	r5, #12
 801d062:	bf38      	it	cc
 801d064:	250c      	movcc	r5, #12
 801d066:	2d00      	cmp	r5, #0
 801d068:	4606      	mov	r6, r0
 801d06a:	db01      	blt.n	801d070 <_malloc_r+0x1c>
 801d06c:	42a9      	cmp	r1, r5
 801d06e:	d904      	bls.n	801d07a <_malloc_r+0x26>
 801d070:	230c      	movs	r3, #12
 801d072:	6033      	str	r3, [r6, #0]
 801d074:	2000      	movs	r0, #0
 801d076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d07a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d150 <_malloc_r+0xfc>
 801d07e:	f000 f869 	bl	801d154 <__malloc_lock>
 801d082:	f8d8 3000 	ldr.w	r3, [r8]
 801d086:	461c      	mov	r4, r3
 801d088:	bb44      	cbnz	r4, 801d0dc <_malloc_r+0x88>
 801d08a:	4629      	mov	r1, r5
 801d08c:	4630      	mov	r0, r6
 801d08e:	f7ff ffbf 	bl	801d010 <sbrk_aligned>
 801d092:	1c43      	adds	r3, r0, #1
 801d094:	4604      	mov	r4, r0
 801d096:	d158      	bne.n	801d14a <_malloc_r+0xf6>
 801d098:	f8d8 4000 	ldr.w	r4, [r8]
 801d09c:	4627      	mov	r7, r4
 801d09e:	2f00      	cmp	r7, #0
 801d0a0:	d143      	bne.n	801d12a <_malloc_r+0xd6>
 801d0a2:	2c00      	cmp	r4, #0
 801d0a4:	d04b      	beq.n	801d13e <_malloc_r+0xea>
 801d0a6:	6823      	ldr	r3, [r4, #0]
 801d0a8:	4639      	mov	r1, r7
 801d0aa:	4630      	mov	r0, r6
 801d0ac:	eb04 0903 	add.w	r9, r4, r3
 801d0b0:	f000 faa0 	bl	801d5f4 <_sbrk_r>
 801d0b4:	4581      	cmp	r9, r0
 801d0b6:	d142      	bne.n	801d13e <_malloc_r+0xea>
 801d0b8:	6821      	ldr	r1, [r4, #0]
 801d0ba:	1a6d      	subs	r5, r5, r1
 801d0bc:	4629      	mov	r1, r5
 801d0be:	4630      	mov	r0, r6
 801d0c0:	f7ff ffa6 	bl	801d010 <sbrk_aligned>
 801d0c4:	3001      	adds	r0, #1
 801d0c6:	d03a      	beq.n	801d13e <_malloc_r+0xea>
 801d0c8:	6823      	ldr	r3, [r4, #0]
 801d0ca:	442b      	add	r3, r5
 801d0cc:	6023      	str	r3, [r4, #0]
 801d0ce:	f8d8 3000 	ldr.w	r3, [r8]
 801d0d2:	685a      	ldr	r2, [r3, #4]
 801d0d4:	bb62      	cbnz	r2, 801d130 <_malloc_r+0xdc>
 801d0d6:	f8c8 7000 	str.w	r7, [r8]
 801d0da:	e00f      	b.n	801d0fc <_malloc_r+0xa8>
 801d0dc:	6822      	ldr	r2, [r4, #0]
 801d0de:	1b52      	subs	r2, r2, r5
 801d0e0:	d420      	bmi.n	801d124 <_malloc_r+0xd0>
 801d0e2:	2a0b      	cmp	r2, #11
 801d0e4:	d917      	bls.n	801d116 <_malloc_r+0xc2>
 801d0e6:	1961      	adds	r1, r4, r5
 801d0e8:	42a3      	cmp	r3, r4
 801d0ea:	6025      	str	r5, [r4, #0]
 801d0ec:	bf18      	it	ne
 801d0ee:	6059      	strne	r1, [r3, #4]
 801d0f0:	6863      	ldr	r3, [r4, #4]
 801d0f2:	bf08      	it	eq
 801d0f4:	f8c8 1000 	streq.w	r1, [r8]
 801d0f8:	5162      	str	r2, [r4, r5]
 801d0fa:	604b      	str	r3, [r1, #4]
 801d0fc:	4630      	mov	r0, r6
 801d0fe:	f000 f82f 	bl	801d160 <__malloc_unlock>
 801d102:	f104 000b 	add.w	r0, r4, #11
 801d106:	1d23      	adds	r3, r4, #4
 801d108:	f020 0007 	bic.w	r0, r0, #7
 801d10c:	1ac2      	subs	r2, r0, r3
 801d10e:	bf1c      	itt	ne
 801d110:	1a1b      	subne	r3, r3, r0
 801d112:	50a3      	strne	r3, [r4, r2]
 801d114:	e7af      	b.n	801d076 <_malloc_r+0x22>
 801d116:	6862      	ldr	r2, [r4, #4]
 801d118:	42a3      	cmp	r3, r4
 801d11a:	bf0c      	ite	eq
 801d11c:	f8c8 2000 	streq.w	r2, [r8]
 801d120:	605a      	strne	r2, [r3, #4]
 801d122:	e7eb      	b.n	801d0fc <_malloc_r+0xa8>
 801d124:	4623      	mov	r3, r4
 801d126:	6864      	ldr	r4, [r4, #4]
 801d128:	e7ae      	b.n	801d088 <_malloc_r+0x34>
 801d12a:	463c      	mov	r4, r7
 801d12c:	687f      	ldr	r7, [r7, #4]
 801d12e:	e7b6      	b.n	801d09e <_malloc_r+0x4a>
 801d130:	461a      	mov	r2, r3
 801d132:	685b      	ldr	r3, [r3, #4]
 801d134:	42a3      	cmp	r3, r4
 801d136:	d1fb      	bne.n	801d130 <_malloc_r+0xdc>
 801d138:	2300      	movs	r3, #0
 801d13a:	6053      	str	r3, [r2, #4]
 801d13c:	e7de      	b.n	801d0fc <_malloc_r+0xa8>
 801d13e:	230c      	movs	r3, #12
 801d140:	6033      	str	r3, [r6, #0]
 801d142:	4630      	mov	r0, r6
 801d144:	f000 f80c 	bl	801d160 <__malloc_unlock>
 801d148:	e794      	b.n	801d074 <_malloc_r+0x20>
 801d14a:	6005      	str	r5, [r0, #0]
 801d14c:	e7d6      	b.n	801d0fc <_malloc_r+0xa8>
 801d14e:	bf00      	nop
 801d150:	2000ff7c 	.word	0x2000ff7c

0801d154 <__malloc_lock>:
 801d154:	4801      	ldr	r0, [pc, #4]	@ (801d15c <__malloc_lock+0x8>)
 801d156:	f000 ba94 	b.w	801d682 <__retarget_lock_acquire_recursive>
 801d15a:	bf00      	nop
 801d15c:	200100c0 	.word	0x200100c0

0801d160 <__malloc_unlock>:
 801d160:	4801      	ldr	r0, [pc, #4]	@ (801d168 <__malloc_unlock+0x8>)
 801d162:	f000 ba8f 	b.w	801d684 <__retarget_lock_release_recursive>
 801d166:	bf00      	nop
 801d168:	200100c0 	.word	0x200100c0

0801d16c <rand>:
 801d16c:	4b16      	ldr	r3, [pc, #88]	@ (801d1c8 <rand+0x5c>)
 801d16e:	b510      	push	{r4, lr}
 801d170:	681c      	ldr	r4, [r3, #0]
 801d172:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d174:	b9b3      	cbnz	r3, 801d1a4 <rand+0x38>
 801d176:	2018      	movs	r0, #24
 801d178:	f7ff ff3a 	bl	801cff0 <malloc>
 801d17c:	4602      	mov	r2, r0
 801d17e:	6320      	str	r0, [r4, #48]	@ 0x30
 801d180:	b920      	cbnz	r0, 801d18c <rand+0x20>
 801d182:	4b12      	ldr	r3, [pc, #72]	@ (801d1cc <rand+0x60>)
 801d184:	4812      	ldr	r0, [pc, #72]	@ (801d1d0 <rand+0x64>)
 801d186:	2152      	movs	r1, #82	@ 0x52
 801d188:	f000 fa8c 	bl	801d6a4 <__assert_func>
 801d18c:	4911      	ldr	r1, [pc, #68]	@ (801d1d4 <rand+0x68>)
 801d18e:	4b12      	ldr	r3, [pc, #72]	@ (801d1d8 <rand+0x6c>)
 801d190:	e9c0 1300 	strd	r1, r3, [r0]
 801d194:	4b11      	ldr	r3, [pc, #68]	@ (801d1dc <rand+0x70>)
 801d196:	6083      	str	r3, [r0, #8]
 801d198:	230b      	movs	r3, #11
 801d19a:	8183      	strh	r3, [r0, #12]
 801d19c:	2100      	movs	r1, #0
 801d19e:	2001      	movs	r0, #1
 801d1a0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d1a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d1a6:	480e      	ldr	r0, [pc, #56]	@ (801d1e0 <rand+0x74>)
 801d1a8:	690b      	ldr	r3, [r1, #16]
 801d1aa:	694c      	ldr	r4, [r1, #20]
 801d1ac:	4a0d      	ldr	r2, [pc, #52]	@ (801d1e4 <rand+0x78>)
 801d1ae:	4358      	muls	r0, r3
 801d1b0:	fb02 0004 	mla	r0, r2, r4, r0
 801d1b4:	fba3 3202 	umull	r3, r2, r3, r2
 801d1b8:	3301      	adds	r3, #1
 801d1ba:	eb40 0002 	adc.w	r0, r0, r2
 801d1be:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d1c2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801d1c6:	bd10      	pop	{r4, pc}
 801d1c8:	2000013c 	.word	0x2000013c
 801d1cc:	08032534 	.word	0x08032534
 801d1d0:	0803254b 	.word	0x0803254b
 801d1d4:	abcd330e 	.word	0xabcd330e
 801d1d8:	e66d1234 	.word	0xe66d1234
 801d1dc:	0005deec 	.word	0x0005deec
 801d1e0:	5851f42d 	.word	0x5851f42d
 801d1e4:	4c957f2d 	.word	0x4c957f2d

0801d1e8 <std>:
 801d1e8:	2300      	movs	r3, #0
 801d1ea:	b510      	push	{r4, lr}
 801d1ec:	4604      	mov	r4, r0
 801d1ee:	e9c0 3300 	strd	r3, r3, [r0]
 801d1f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d1f6:	6083      	str	r3, [r0, #8]
 801d1f8:	8181      	strh	r1, [r0, #12]
 801d1fa:	6643      	str	r3, [r0, #100]	@ 0x64
 801d1fc:	81c2      	strh	r2, [r0, #14]
 801d1fe:	6183      	str	r3, [r0, #24]
 801d200:	4619      	mov	r1, r3
 801d202:	2208      	movs	r2, #8
 801d204:	305c      	adds	r0, #92	@ 0x5c
 801d206:	f000 f950 	bl	801d4aa <memset>
 801d20a:	4b0d      	ldr	r3, [pc, #52]	@ (801d240 <std+0x58>)
 801d20c:	6263      	str	r3, [r4, #36]	@ 0x24
 801d20e:	4b0d      	ldr	r3, [pc, #52]	@ (801d244 <std+0x5c>)
 801d210:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d212:	4b0d      	ldr	r3, [pc, #52]	@ (801d248 <std+0x60>)
 801d214:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d216:	4b0d      	ldr	r3, [pc, #52]	@ (801d24c <std+0x64>)
 801d218:	6323      	str	r3, [r4, #48]	@ 0x30
 801d21a:	4b0d      	ldr	r3, [pc, #52]	@ (801d250 <std+0x68>)
 801d21c:	6224      	str	r4, [r4, #32]
 801d21e:	429c      	cmp	r4, r3
 801d220:	d006      	beq.n	801d230 <std+0x48>
 801d222:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d226:	4294      	cmp	r4, r2
 801d228:	d002      	beq.n	801d230 <std+0x48>
 801d22a:	33d0      	adds	r3, #208	@ 0xd0
 801d22c:	429c      	cmp	r4, r3
 801d22e:	d105      	bne.n	801d23c <std+0x54>
 801d230:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d238:	f000 ba22 	b.w	801d680 <__retarget_lock_init_recursive>
 801d23c:	bd10      	pop	{r4, pc}
 801d23e:	bf00      	nop
 801d240:	0801d3d1 	.word	0x0801d3d1
 801d244:	0801d3f3 	.word	0x0801d3f3
 801d248:	0801d42b 	.word	0x0801d42b
 801d24c:	0801d44f 	.word	0x0801d44f
 801d250:	2000ff80 	.word	0x2000ff80

0801d254 <stdio_exit_handler>:
 801d254:	4a02      	ldr	r2, [pc, #8]	@ (801d260 <stdio_exit_handler+0xc>)
 801d256:	4903      	ldr	r1, [pc, #12]	@ (801d264 <stdio_exit_handler+0x10>)
 801d258:	4803      	ldr	r0, [pc, #12]	@ (801d268 <stdio_exit_handler+0x14>)
 801d25a:	f000 b869 	b.w	801d330 <_fwalk_sglue>
 801d25e:	bf00      	nop
 801d260:	20000130 	.word	0x20000130
 801d264:	0801e0cd 	.word	0x0801e0cd
 801d268:	20000140 	.word	0x20000140

0801d26c <cleanup_stdio>:
 801d26c:	6841      	ldr	r1, [r0, #4]
 801d26e:	4b0c      	ldr	r3, [pc, #48]	@ (801d2a0 <cleanup_stdio+0x34>)
 801d270:	4299      	cmp	r1, r3
 801d272:	b510      	push	{r4, lr}
 801d274:	4604      	mov	r4, r0
 801d276:	d001      	beq.n	801d27c <cleanup_stdio+0x10>
 801d278:	f000 ff28 	bl	801e0cc <_fflush_r>
 801d27c:	68a1      	ldr	r1, [r4, #8]
 801d27e:	4b09      	ldr	r3, [pc, #36]	@ (801d2a4 <cleanup_stdio+0x38>)
 801d280:	4299      	cmp	r1, r3
 801d282:	d002      	beq.n	801d28a <cleanup_stdio+0x1e>
 801d284:	4620      	mov	r0, r4
 801d286:	f000 ff21 	bl	801e0cc <_fflush_r>
 801d28a:	68e1      	ldr	r1, [r4, #12]
 801d28c:	4b06      	ldr	r3, [pc, #24]	@ (801d2a8 <cleanup_stdio+0x3c>)
 801d28e:	4299      	cmp	r1, r3
 801d290:	d004      	beq.n	801d29c <cleanup_stdio+0x30>
 801d292:	4620      	mov	r0, r4
 801d294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d298:	f000 bf18 	b.w	801e0cc <_fflush_r>
 801d29c:	bd10      	pop	{r4, pc}
 801d29e:	bf00      	nop
 801d2a0:	2000ff80 	.word	0x2000ff80
 801d2a4:	2000ffe8 	.word	0x2000ffe8
 801d2a8:	20010050 	.word	0x20010050

0801d2ac <global_stdio_init.part.0>:
 801d2ac:	b510      	push	{r4, lr}
 801d2ae:	4b0b      	ldr	r3, [pc, #44]	@ (801d2dc <global_stdio_init.part.0+0x30>)
 801d2b0:	4c0b      	ldr	r4, [pc, #44]	@ (801d2e0 <global_stdio_init.part.0+0x34>)
 801d2b2:	4a0c      	ldr	r2, [pc, #48]	@ (801d2e4 <global_stdio_init.part.0+0x38>)
 801d2b4:	601a      	str	r2, [r3, #0]
 801d2b6:	4620      	mov	r0, r4
 801d2b8:	2200      	movs	r2, #0
 801d2ba:	2104      	movs	r1, #4
 801d2bc:	f7ff ff94 	bl	801d1e8 <std>
 801d2c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d2c4:	2201      	movs	r2, #1
 801d2c6:	2109      	movs	r1, #9
 801d2c8:	f7ff ff8e 	bl	801d1e8 <std>
 801d2cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d2d0:	2202      	movs	r2, #2
 801d2d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d2d6:	2112      	movs	r1, #18
 801d2d8:	f7ff bf86 	b.w	801d1e8 <std>
 801d2dc:	200100b8 	.word	0x200100b8
 801d2e0:	2000ff80 	.word	0x2000ff80
 801d2e4:	0801d255 	.word	0x0801d255

0801d2e8 <__sfp_lock_acquire>:
 801d2e8:	4801      	ldr	r0, [pc, #4]	@ (801d2f0 <__sfp_lock_acquire+0x8>)
 801d2ea:	f000 b9ca 	b.w	801d682 <__retarget_lock_acquire_recursive>
 801d2ee:	bf00      	nop
 801d2f0:	200100c1 	.word	0x200100c1

0801d2f4 <__sfp_lock_release>:
 801d2f4:	4801      	ldr	r0, [pc, #4]	@ (801d2fc <__sfp_lock_release+0x8>)
 801d2f6:	f000 b9c5 	b.w	801d684 <__retarget_lock_release_recursive>
 801d2fa:	bf00      	nop
 801d2fc:	200100c1 	.word	0x200100c1

0801d300 <__sinit>:
 801d300:	b510      	push	{r4, lr}
 801d302:	4604      	mov	r4, r0
 801d304:	f7ff fff0 	bl	801d2e8 <__sfp_lock_acquire>
 801d308:	6a23      	ldr	r3, [r4, #32]
 801d30a:	b11b      	cbz	r3, 801d314 <__sinit+0x14>
 801d30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d310:	f7ff bff0 	b.w	801d2f4 <__sfp_lock_release>
 801d314:	4b04      	ldr	r3, [pc, #16]	@ (801d328 <__sinit+0x28>)
 801d316:	6223      	str	r3, [r4, #32]
 801d318:	4b04      	ldr	r3, [pc, #16]	@ (801d32c <__sinit+0x2c>)
 801d31a:	681b      	ldr	r3, [r3, #0]
 801d31c:	2b00      	cmp	r3, #0
 801d31e:	d1f5      	bne.n	801d30c <__sinit+0xc>
 801d320:	f7ff ffc4 	bl	801d2ac <global_stdio_init.part.0>
 801d324:	e7f2      	b.n	801d30c <__sinit+0xc>
 801d326:	bf00      	nop
 801d328:	0801d26d 	.word	0x0801d26d
 801d32c:	200100b8 	.word	0x200100b8

0801d330 <_fwalk_sglue>:
 801d330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d334:	4607      	mov	r7, r0
 801d336:	4688      	mov	r8, r1
 801d338:	4614      	mov	r4, r2
 801d33a:	2600      	movs	r6, #0
 801d33c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d340:	f1b9 0901 	subs.w	r9, r9, #1
 801d344:	d505      	bpl.n	801d352 <_fwalk_sglue+0x22>
 801d346:	6824      	ldr	r4, [r4, #0]
 801d348:	2c00      	cmp	r4, #0
 801d34a:	d1f7      	bne.n	801d33c <_fwalk_sglue+0xc>
 801d34c:	4630      	mov	r0, r6
 801d34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d352:	89ab      	ldrh	r3, [r5, #12]
 801d354:	2b01      	cmp	r3, #1
 801d356:	d907      	bls.n	801d368 <_fwalk_sglue+0x38>
 801d358:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d35c:	3301      	adds	r3, #1
 801d35e:	d003      	beq.n	801d368 <_fwalk_sglue+0x38>
 801d360:	4629      	mov	r1, r5
 801d362:	4638      	mov	r0, r7
 801d364:	47c0      	blx	r8
 801d366:	4306      	orrs	r6, r0
 801d368:	3568      	adds	r5, #104	@ 0x68
 801d36a:	e7e9      	b.n	801d340 <_fwalk_sglue+0x10>

0801d36c <iprintf>:
 801d36c:	b40f      	push	{r0, r1, r2, r3}
 801d36e:	b507      	push	{r0, r1, r2, lr}
 801d370:	4906      	ldr	r1, [pc, #24]	@ (801d38c <iprintf+0x20>)
 801d372:	ab04      	add	r3, sp, #16
 801d374:	6808      	ldr	r0, [r1, #0]
 801d376:	f853 2b04 	ldr.w	r2, [r3], #4
 801d37a:	6881      	ldr	r1, [r0, #8]
 801d37c:	9301      	str	r3, [sp, #4]
 801d37e:	f000 fb7b 	bl	801da78 <_vfiprintf_r>
 801d382:	b003      	add	sp, #12
 801d384:	f85d eb04 	ldr.w	lr, [sp], #4
 801d388:	b004      	add	sp, #16
 801d38a:	4770      	bx	lr
 801d38c:	2000013c 	.word	0x2000013c

0801d390 <siprintf>:
 801d390:	b40e      	push	{r1, r2, r3}
 801d392:	b500      	push	{lr}
 801d394:	b09c      	sub	sp, #112	@ 0x70
 801d396:	ab1d      	add	r3, sp, #116	@ 0x74
 801d398:	9002      	str	r0, [sp, #8]
 801d39a:	9006      	str	r0, [sp, #24]
 801d39c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801d3a0:	4809      	ldr	r0, [pc, #36]	@ (801d3c8 <siprintf+0x38>)
 801d3a2:	9107      	str	r1, [sp, #28]
 801d3a4:	9104      	str	r1, [sp, #16]
 801d3a6:	4909      	ldr	r1, [pc, #36]	@ (801d3cc <siprintf+0x3c>)
 801d3a8:	f853 2b04 	ldr.w	r2, [r3], #4
 801d3ac:	9105      	str	r1, [sp, #20]
 801d3ae:	6800      	ldr	r0, [r0, #0]
 801d3b0:	9301      	str	r3, [sp, #4]
 801d3b2:	a902      	add	r1, sp, #8
 801d3b4:	f000 fa3a 	bl	801d82c <_svfiprintf_r>
 801d3b8:	9b02      	ldr	r3, [sp, #8]
 801d3ba:	2200      	movs	r2, #0
 801d3bc:	701a      	strb	r2, [r3, #0]
 801d3be:	b01c      	add	sp, #112	@ 0x70
 801d3c0:	f85d eb04 	ldr.w	lr, [sp], #4
 801d3c4:	b003      	add	sp, #12
 801d3c6:	4770      	bx	lr
 801d3c8:	2000013c 	.word	0x2000013c
 801d3cc:	ffff0208 	.word	0xffff0208

0801d3d0 <__sread>:
 801d3d0:	b510      	push	{r4, lr}
 801d3d2:	460c      	mov	r4, r1
 801d3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d3d8:	f000 f8fa 	bl	801d5d0 <_read_r>
 801d3dc:	2800      	cmp	r0, #0
 801d3de:	bfab      	itete	ge
 801d3e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d3e2:	89a3      	ldrhlt	r3, [r4, #12]
 801d3e4:	181b      	addge	r3, r3, r0
 801d3e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d3ea:	bfac      	ite	ge
 801d3ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d3ee:	81a3      	strhlt	r3, [r4, #12]
 801d3f0:	bd10      	pop	{r4, pc}

0801d3f2 <__swrite>:
 801d3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d3f6:	461f      	mov	r7, r3
 801d3f8:	898b      	ldrh	r3, [r1, #12]
 801d3fa:	05db      	lsls	r3, r3, #23
 801d3fc:	4605      	mov	r5, r0
 801d3fe:	460c      	mov	r4, r1
 801d400:	4616      	mov	r6, r2
 801d402:	d505      	bpl.n	801d410 <__swrite+0x1e>
 801d404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d408:	2302      	movs	r3, #2
 801d40a:	2200      	movs	r2, #0
 801d40c:	f000 f8ce 	bl	801d5ac <_lseek_r>
 801d410:	89a3      	ldrh	r3, [r4, #12]
 801d412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d416:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d41a:	81a3      	strh	r3, [r4, #12]
 801d41c:	4632      	mov	r2, r6
 801d41e:	463b      	mov	r3, r7
 801d420:	4628      	mov	r0, r5
 801d422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d426:	f000 b8f5 	b.w	801d614 <_write_r>

0801d42a <__sseek>:
 801d42a:	b510      	push	{r4, lr}
 801d42c:	460c      	mov	r4, r1
 801d42e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d432:	f000 f8bb 	bl	801d5ac <_lseek_r>
 801d436:	1c43      	adds	r3, r0, #1
 801d438:	89a3      	ldrh	r3, [r4, #12]
 801d43a:	bf15      	itete	ne
 801d43c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d43e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d442:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d446:	81a3      	strheq	r3, [r4, #12]
 801d448:	bf18      	it	ne
 801d44a:	81a3      	strhne	r3, [r4, #12]
 801d44c:	bd10      	pop	{r4, pc}

0801d44e <__sclose>:
 801d44e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d452:	f000 b845 	b.w	801d4e0 <_close_r>

0801d456 <memcmp>:
 801d456:	b510      	push	{r4, lr}
 801d458:	3901      	subs	r1, #1
 801d45a:	4402      	add	r2, r0
 801d45c:	4290      	cmp	r0, r2
 801d45e:	d101      	bne.n	801d464 <memcmp+0xe>
 801d460:	2000      	movs	r0, #0
 801d462:	e005      	b.n	801d470 <memcmp+0x1a>
 801d464:	7803      	ldrb	r3, [r0, #0]
 801d466:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d46a:	42a3      	cmp	r3, r4
 801d46c:	d001      	beq.n	801d472 <memcmp+0x1c>
 801d46e:	1b18      	subs	r0, r3, r4
 801d470:	bd10      	pop	{r4, pc}
 801d472:	3001      	adds	r0, #1
 801d474:	e7f2      	b.n	801d45c <memcmp+0x6>

0801d476 <memmove>:
 801d476:	4288      	cmp	r0, r1
 801d478:	b510      	push	{r4, lr}
 801d47a:	eb01 0402 	add.w	r4, r1, r2
 801d47e:	d902      	bls.n	801d486 <memmove+0x10>
 801d480:	4284      	cmp	r4, r0
 801d482:	4623      	mov	r3, r4
 801d484:	d807      	bhi.n	801d496 <memmove+0x20>
 801d486:	1e43      	subs	r3, r0, #1
 801d488:	42a1      	cmp	r1, r4
 801d48a:	d008      	beq.n	801d49e <memmove+0x28>
 801d48c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d490:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d494:	e7f8      	b.n	801d488 <memmove+0x12>
 801d496:	4402      	add	r2, r0
 801d498:	4601      	mov	r1, r0
 801d49a:	428a      	cmp	r2, r1
 801d49c:	d100      	bne.n	801d4a0 <memmove+0x2a>
 801d49e:	bd10      	pop	{r4, pc}
 801d4a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d4a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d4a8:	e7f7      	b.n	801d49a <memmove+0x24>

0801d4aa <memset>:
 801d4aa:	4402      	add	r2, r0
 801d4ac:	4603      	mov	r3, r0
 801d4ae:	4293      	cmp	r3, r2
 801d4b0:	d100      	bne.n	801d4b4 <memset+0xa>
 801d4b2:	4770      	bx	lr
 801d4b4:	f803 1b01 	strb.w	r1, [r3], #1
 801d4b8:	e7f9      	b.n	801d4ae <memset+0x4>

0801d4ba <strncmp>:
 801d4ba:	b510      	push	{r4, lr}
 801d4bc:	b16a      	cbz	r2, 801d4da <strncmp+0x20>
 801d4be:	3901      	subs	r1, #1
 801d4c0:	1884      	adds	r4, r0, r2
 801d4c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d4c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801d4ca:	429a      	cmp	r2, r3
 801d4cc:	d103      	bne.n	801d4d6 <strncmp+0x1c>
 801d4ce:	42a0      	cmp	r0, r4
 801d4d0:	d001      	beq.n	801d4d6 <strncmp+0x1c>
 801d4d2:	2a00      	cmp	r2, #0
 801d4d4:	d1f5      	bne.n	801d4c2 <strncmp+0x8>
 801d4d6:	1ad0      	subs	r0, r2, r3
 801d4d8:	bd10      	pop	{r4, pc}
 801d4da:	4610      	mov	r0, r2
 801d4dc:	e7fc      	b.n	801d4d8 <strncmp+0x1e>
	...

0801d4e0 <_close_r>:
 801d4e0:	b538      	push	{r3, r4, r5, lr}
 801d4e2:	4d06      	ldr	r5, [pc, #24]	@ (801d4fc <_close_r+0x1c>)
 801d4e4:	2300      	movs	r3, #0
 801d4e6:	4604      	mov	r4, r0
 801d4e8:	4608      	mov	r0, r1
 801d4ea:	602b      	str	r3, [r5, #0]
 801d4ec:	f7e4 fcd8 	bl	8001ea0 <_close>
 801d4f0:	1c43      	adds	r3, r0, #1
 801d4f2:	d102      	bne.n	801d4fa <_close_r+0x1a>
 801d4f4:	682b      	ldr	r3, [r5, #0]
 801d4f6:	b103      	cbz	r3, 801d4fa <_close_r+0x1a>
 801d4f8:	6023      	str	r3, [r4, #0]
 801d4fa:	bd38      	pop	{r3, r4, r5, pc}
 801d4fc:	200100bc 	.word	0x200100bc

0801d500 <_reclaim_reent>:
 801d500:	4b29      	ldr	r3, [pc, #164]	@ (801d5a8 <_reclaim_reent+0xa8>)
 801d502:	681b      	ldr	r3, [r3, #0]
 801d504:	4283      	cmp	r3, r0
 801d506:	b570      	push	{r4, r5, r6, lr}
 801d508:	4604      	mov	r4, r0
 801d50a:	d04b      	beq.n	801d5a4 <_reclaim_reent+0xa4>
 801d50c:	69c3      	ldr	r3, [r0, #28]
 801d50e:	b1ab      	cbz	r3, 801d53c <_reclaim_reent+0x3c>
 801d510:	68db      	ldr	r3, [r3, #12]
 801d512:	b16b      	cbz	r3, 801d530 <_reclaim_reent+0x30>
 801d514:	2500      	movs	r5, #0
 801d516:	69e3      	ldr	r3, [r4, #28]
 801d518:	68db      	ldr	r3, [r3, #12]
 801d51a:	5959      	ldr	r1, [r3, r5]
 801d51c:	2900      	cmp	r1, #0
 801d51e:	d13b      	bne.n	801d598 <_reclaim_reent+0x98>
 801d520:	3504      	adds	r5, #4
 801d522:	2d80      	cmp	r5, #128	@ 0x80
 801d524:	d1f7      	bne.n	801d516 <_reclaim_reent+0x16>
 801d526:	69e3      	ldr	r3, [r4, #28]
 801d528:	4620      	mov	r0, r4
 801d52a:	68d9      	ldr	r1, [r3, #12]
 801d52c:	f000 f8d8 	bl	801d6e0 <_free_r>
 801d530:	69e3      	ldr	r3, [r4, #28]
 801d532:	6819      	ldr	r1, [r3, #0]
 801d534:	b111      	cbz	r1, 801d53c <_reclaim_reent+0x3c>
 801d536:	4620      	mov	r0, r4
 801d538:	f000 f8d2 	bl	801d6e0 <_free_r>
 801d53c:	6961      	ldr	r1, [r4, #20]
 801d53e:	b111      	cbz	r1, 801d546 <_reclaim_reent+0x46>
 801d540:	4620      	mov	r0, r4
 801d542:	f000 f8cd 	bl	801d6e0 <_free_r>
 801d546:	69e1      	ldr	r1, [r4, #28]
 801d548:	b111      	cbz	r1, 801d550 <_reclaim_reent+0x50>
 801d54a:	4620      	mov	r0, r4
 801d54c:	f000 f8c8 	bl	801d6e0 <_free_r>
 801d550:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d552:	b111      	cbz	r1, 801d55a <_reclaim_reent+0x5a>
 801d554:	4620      	mov	r0, r4
 801d556:	f000 f8c3 	bl	801d6e0 <_free_r>
 801d55a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d55c:	b111      	cbz	r1, 801d564 <_reclaim_reent+0x64>
 801d55e:	4620      	mov	r0, r4
 801d560:	f000 f8be 	bl	801d6e0 <_free_r>
 801d564:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801d566:	b111      	cbz	r1, 801d56e <_reclaim_reent+0x6e>
 801d568:	4620      	mov	r0, r4
 801d56a:	f000 f8b9 	bl	801d6e0 <_free_r>
 801d56e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801d570:	b111      	cbz	r1, 801d578 <_reclaim_reent+0x78>
 801d572:	4620      	mov	r0, r4
 801d574:	f000 f8b4 	bl	801d6e0 <_free_r>
 801d578:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801d57a:	b111      	cbz	r1, 801d582 <_reclaim_reent+0x82>
 801d57c:	4620      	mov	r0, r4
 801d57e:	f000 f8af 	bl	801d6e0 <_free_r>
 801d582:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801d584:	b111      	cbz	r1, 801d58c <_reclaim_reent+0x8c>
 801d586:	4620      	mov	r0, r4
 801d588:	f000 f8aa 	bl	801d6e0 <_free_r>
 801d58c:	6a23      	ldr	r3, [r4, #32]
 801d58e:	b14b      	cbz	r3, 801d5a4 <_reclaim_reent+0xa4>
 801d590:	4620      	mov	r0, r4
 801d592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d596:	4718      	bx	r3
 801d598:	680e      	ldr	r6, [r1, #0]
 801d59a:	4620      	mov	r0, r4
 801d59c:	f000 f8a0 	bl	801d6e0 <_free_r>
 801d5a0:	4631      	mov	r1, r6
 801d5a2:	e7bb      	b.n	801d51c <_reclaim_reent+0x1c>
 801d5a4:	bd70      	pop	{r4, r5, r6, pc}
 801d5a6:	bf00      	nop
 801d5a8:	2000013c 	.word	0x2000013c

0801d5ac <_lseek_r>:
 801d5ac:	b538      	push	{r3, r4, r5, lr}
 801d5ae:	4d07      	ldr	r5, [pc, #28]	@ (801d5cc <_lseek_r+0x20>)
 801d5b0:	4604      	mov	r4, r0
 801d5b2:	4608      	mov	r0, r1
 801d5b4:	4611      	mov	r1, r2
 801d5b6:	2200      	movs	r2, #0
 801d5b8:	602a      	str	r2, [r5, #0]
 801d5ba:	461a      	mov	r2, r3
 801d5bc:	f7e4 fc97 	bl	8001eee <_lseek>
 801d5c0:	1c43      	adds	r3, r0, #1
 801d5c2:	d102      	bne.n	801d5ca <_lseek_r+0x1e>
 801d5c4:	682b      	ldr	r3, [r5, #0]
 801d5c6:	b103      	cbz	r3, 801d5ca <_lseek_r+0x1e>
 801d5c8:	6023      	str	r3, [r4, #0]
 801d5ca:	bd38      	pop	{r3, r4, r5, pc}
 801d5cc:	200100bc 	.word	0x200100bc

0801d5d0 <_read_r>:
 801d5d0:	b538      	push	{r3, r4, r5, lr}
 801d5d2:	4d07      	ldr	r5, [pc, #28]	@ (801d5f0 <_read_r+0x20>)
 801d5d4:	4604      	mov	r4, r0
 801d5d6:	4608      	mov	r0, r1
 801d5d8:	4611      	mov	r1, r2
 801d5da:	2200      	movs	r2, #0
 801d5dc:	602a      	str	r2, [r5, #0]
 801d5de:	461a      	mov	r2, r3
 801d5e0:	f7e4 fc25 	bl	8001e2e <_read>
 801d5e4:	1c43      	adds	r3, r0, #1
 801d5e6:	d102      	bne.n	801d5ee <_read_r+0x1e>
 801d5e8:	682b      	ldr	r3, [r5, #0]
 801d5ea:	b103      	cbz	r3, 801d5ee <_read_r+0x1e>
 801d5ec:	6023      	str	r3, [r4, #0]
 801d5ee:	bd38      	pop	{r3, r4, r5, pc}
 801d5f0:	200100bc 	.word	0x200100bc

0801d5f4 <_sbrk_r>:
 801d5f4:	b538      	push	{r3, r4, r5, lr}
 801d5f6:	4d06      	ldr	r5, [pc, #24]	@ (801d610 <_sbrk_r+0x1c>)
 801d5f8:	2300      	movs	r3, #0
 801d5fa:	4604      	mov	r4, r0
 801d5fc:	4608      	mov	r0, r1
 801d5fe:	602b      	str	r3, [r5, #0]
 801d600:	f7e4 fc82 	bl	8001f08 <_sbrk>
 801d604:	1c43      	adds	r3, r0, #1
 801d606:	d102      	bne.n	801d60e <_sbrk_r+0x1a>
 801d608:	682b      	ldr	r3, [r5, #0]
 801d60a:	b103      	cbz	r3, 801d60e <_sbrk_r+0x1a>
 801d60c:	6023      	str	r3, [r4, #0]
 801d60e:	bd38      	pop	{r3, r4, r5, pc}
 801d610:	200100bc 	.word	0x200100bc

0801d614 <_write_r>:
 801d614:	b538      	push	{r3, r4, r5, lr}
 801d616:	4d07      	ldr	r5, [pc, #28]	@ (801d634 <_write_r+0x20>)
 801d618:	4604      	mov	r4, r0
 801d61a:	4608      	mov	r0, r1
 801d61c:	4611      	mov	r1, r2
 801d61e:	2200      	movs	r2, #0
 801d620:	602a      	str	r2, [r5, #0]
 801d622:	461a      	mov	r2, r3
 801d624:	f7e4 fc20 	bl	8001e68 <_write>
 801d628:	1c43      	adds	r3, r0, #1
 801d62a:	d102      	bne.n	801d632 <_write_r+0x1e>
 801d62c:	682b      	ldr	r3, [r5, #0]
 801d62e:	b103      	cbz	r3, 801d632 <_write_r+0x1e>
 801d630:	6023      	str	r3, [r4, #0]
 801d632:	bd38      	pop	{r3, r4, r5, pc}
 801d634:	200100bc 	.word	0x200100bc

0801d638 <__libc_init_array>:
 801d638:	b570      	push	{r4, r5, r6, lr}
 801d63a:	4d0d      	ldr	r5, [pc, #52]	@ (801d670 <__libc_init_array+0x38>)
 801d63c:	4c0d      	ldr	r4, [pc, #52]	@ (801d674 <__libc_init_array+0x3c>)
 801d63e:	1b64      	subs	r4, r4, r5
 801d640:	10a4      	asrs	r4, r4, #2
 801d642:	2600      	movs	r6, #0
 801d644:	42a6      	cmp	r6, r4
 801d646:	d109      	bne.n	801d65c <__libc_init_array+0x24>
 801d648:	4d0b      	ldr	r5, [pc, #44]	@ (801d678 <__libc_init_array+0x40>)
 801d64a:	4c0c      	ldr	r4, [pc, #48]	@ (801d67c <__libc_init_array+0x44>)
 801d64c:	f000 ff12 	bl	801e474 <_init>
 801d650:	1b64      	subs	r4, r4, r5
 801d652:	10a4      	asrs	r4, r4, #2
 801d654:	2600      	movs	r6, #0
 801d656:	42a6      	cmp	r6, r4
 801d658:	d105      	bne.n	801d666 <__libc_init_array+0x2e>
 801d65a:	bd70      	pop	{r4, r5, r6, pc}
 801d65c:	f855 3b04 	ldr.w	r3, [r5], #4
 801d660:	4798      	blx	r3
 801d662:	3601      	adds	r6, #1
 801d664:	e7ee      	b.n	801d644 <__libc_init_array+0xc>
 801d666:	f855 3b04 	ldr.w	r3, [r5], #4
 801d66a:	4798      	blx	r3
 801d66c:	3601      	adds	r6, #1
 801d66e:	e7f2      	b.n	801d656 <__libc_init_array+0x1e>
 801d670:	0803261c 	.word	0x0803261c
 801d674:	0803261c 	.word	0x0803261c
 801d678:	0803261c 	.word	0x0803261c
 801d67c:	08032620 	.word	0x08032620

0801d680 <__retarget_lock_init_recursive>:
 801d680:	4770      	bx	lr

0801d682 <__retarget_lock_acquire_recursive>:
 801d682:	4770      	bx	lr

0801d684 <__retarget_lock_release_recursive>:
 801d684:	4770      	bx	lr

0801d686 <memcpy>:
 801d686:	440a      	add	r2, r1
 801d688:	4291      	cmp	r1, r2
 801d68a:	f100 33ff 	add.w	r3, r0, #4294967295
 801d68e:	d100      	bne.n	801d692 <memcpy+0xc>
 801d690:	4770      	bx	lr
 801d692:	b510      	push	{r4, lr}
 801d694:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d698:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d69c:	4291      	cmp	r1, r2
 801d69e:	d1f9      	bne.n	801d694 <memcpy+0xe>
 801d6a0:	bd10      	pop	{r4, pc}
	...

0801d6a4 <__assert_func>:
 801d6a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d6a6:	4614      	mov	r4, r2
 801d6a8:	461a      	mov	r2, r3
 801d6aa:	4b09      	ldr	r3, [pc, #36]	@ (801d6d0 <__assert_func+0x2c>)
 801d6ac:	681b      	ldr	r3, [r3, #0]
 801d6ae:	4605      	mov	r5, r0
 801d6b0:	68d8      	ldr	r0, [r3, #12]
 801d6b2:	b954      	cbnz	r4, 801d6ca <__assert_func+0x26>
 801d6b4:	4b07      	ldr	r3, [pc, #28]	@ (801d6d4 <__assert_func+0x30>)
 801d6b6:	461c      	mov	r4, r3
 801d6b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d6bc:	9100      	str	r1, [sp, #0]
 801d6be:	462b      	mov	r3, r5
 801d6c0:	4905      	ldr	r1, [pc, #20]	@ (801d6d8 <__assert_func+0x34>)
 801d6c2:	f000 fd2b 	bl	801e11c <fiprintf>
 801d6c6:	f000 fdcf 	bl	801e268 <abort>
 801d6ca:	4b04      	ldr	r3, [pc, #16]	@ (801d6dc <__assert_func+0x38>)
 801d6cc:	e7f4      	b.n	801d6b8 <__assert_func+0x14>
 801d6ce:	bf00      	nop
 801d6d0:	2000013c 	.word	0x2000013c
 801d6d4:	080325de 	.word	0x080325de
 801d6d8:	080325b0 	.word	0x080325b0
 801d6dc:	080325a3 	.word	0x080325a3

0801d6e0 <_free_r>:
 801d6e0:	b538      	push	{r3, r4, r5, lr}
 801d6e2:	4605      	mov	r5, r0
 801d6e4:	2900      	cmp	r1, #0
 801d6e6:	d041      	beq.n	801d76c <_free_r+0x8c>
 801d6e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d6ec:	1f0c      	subs	r4, r1, #4
 801d6ee:	2b00      	cmp	r3, #0
 801d6f0:	bfb8      	it	lt
 801d6f2:	18e4      	addlt	r4, r4, r3
 801d6f4:	f7ff fd2e 	bl	801d154 <__malloc_lock>
 801d6f8:	4a1d      	ldr	r2, [pc, #116]	@ (801d770 <_free_r+0x90>)
 801d6fa:	6813      	ldr	r3, [r2, #0]
 801d6fc:	b933      	cbnz	r3, 801d70c <_free_r+0x2c>
 801d6fe:	6063      	str	r3, [r4, #4]
 801d700:	6014      	str	r4, [r2, #0]
 801d702:	4628      	mov	r0, r5
 801d704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d708:	f7ff bd2a 	b.w	801d160 <__malloc_unlock>
 801d70c:	42a3      	cmp	r3, r4
 801d70e:	d908      	bls.n	801d722 <_free_r+0x42>
 801d710:	6820      	ldr	r0, [r4, #0]
 801d712:	1821      	adds	r1, r4, r0
 801d714:	428b      	cmp	r3, r1
 801d716:	bf01      	itttt	eq
 801d718:	6819      	ldreq	r1, [r3, #0]
 801d71a:	685b      	ldreq	r3, [r3, #4]
 801d71c:	1809      	addeq	r1, r1, r0
 801d71e:	6021      	streq	r1, [r4, #0]
 801d720:	e7ed      	b.n	801d6fe <_free_r+0x1e>
 801d722:	461a      	mov	r2, r3
 801d724:	685b      	ldr	r3, [r3, #4]
 801d726:	b10b      	cbz	r3, 801d72c <_free_r+0x4c>
 801d728:	42a3      	cmp	r3, r4
 801d72a:	d9fa      	bls.n	801d722 <_free_r+0x42>
 801d72c:	6811      	ldr	r1, [r2, #0]
 801d72e:	1850      	adds	r0, r2, r1
 801d730:	42a0      	cmp	r0, r4
 801d732:	d10b      	bne.n	801d74c <_free_r+0x6c>
 801d734:	6820      	ldr	r0, [r4, #0]
 801d736:	4401      	add	r1, r0
 801d738:	1850      	adds	r0, r2, r1
 801d73a:	4283      	cmp	r3, r0
 801d73c:	6011      	str	r1, [r2, #0]
 801d73e:	d1e0      	bne.n	801d702 <_free_r+0x22>
 801d740:	6818      	ldr	r0, [r3, #0]
 801d742:	685b      	ldr	r3, [r3, #4]
 801d744:	6053      	str	r3, [r2, #4]
 801d746:	4408      	add	r0, r1
 801d748:	6010      	str	r0, [r2, #0]
 801d74a:	e7da      	b.n	801d702 <_free_r+0x22>
 801d74c:	d902      	bls.n	801d754 <_free_r+0x74>
 801d74e:	230c      	movs	r3, #12
 801d750:	602b      	str	r3, [r5, #0]
 801d752:	e7d6      	b.n	801d702 <_free_r+0x22>
 801d754:	6820      	ldr	r0, [r4, #0]
 801d756:	1821      	adds	r1, r4, r0
 801d758:	428b      	cmp	r3, r1
 801d75a:	bf04      	itt	eq
 801d75c:	6819      	ldreq	r1, [r3, #0]
 801d75e:	685b      	ldreq	r3, [r3, #4]
 801d760:	6063      	str	r3, [r4, #4]
 801d762:	bf04      	itt	eq
 801d764:	1809      	addeq	r1, r1, r0
 801d766:	6021      	streq	r1, [r4, #0]
 801d768:	6054      	str	r4, [r2, #4]
 801d76a:	e7ca      	b.n	801d702 <_free_r+0x22>
 801d76c:	bd38      	pop	{r3, r4, r5, pc}
 801d76e:	bf00      	nop
 801d770:	2000ff7c 	.word	0x2000ff7c

0801d774 <__ssputs_r>:
 801d774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d778:	688e      	ldr	r6, [r1, #8]
 801d77a:	461f      	mov	r7, r3
 801d77c:	42be      	cmp	r6, r7
 801d77e:	680b      	ldr	r3, [r1, #0]
 801d780:	4682      	mov	sl, r0
 801d782:	460c      	mov	r4, r1
 801d784:	4690      	mov	r8, r2
 801d786:	d82d      	bhi.n	801d7e4 <__ssputs_r+0x70>
 801d788:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d78c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d790:	d026      	beq.n	801d7e0 <__ssputs_r+0x6c>
 801d792:	6965      	ldr	r5, [r4, #20]
 801d794:	6909      	ldr	r1, [r1, #16]
 801d796:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d79a:	eba3 0901 	sub.w	r9, r3, r1
 801d79e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d7a2:	1c7b      	adds	r3, r7, #1
 801d7a4:	444b      	add	r3, r9
 801d7a6:	106d      	asrs	r5, r5, #1
 801d7a8:	429d      	cmp	r5, r3
 801d7aa:	bf38      	it	cc
 801d7ac:	461d      	movcc	r5, r3
 801d7ae:	0553      	lsls	r3, r2, #21
 801d7b0:	d527      	bpl.n	801d802 <__ssputs_r+0x8e>
 801d7b2:	4629      	mov	r1, r5
 801d7b4:	f7ff fc4e 	bl	801d054 <_malloc_r>
 801d7b8:	4606      	mov	r6, r0
 801d7ba:	b360      	cbz	r0, 801d816 <__ssputs_r+0xa2>
 801d7bc:	6921      	ldr	r1, [r4, #16]
 801d7be:	464a      	mov	r2, r9
 801d7c0:	f7ff ff61 	bl	801d686 <memcpy>
 801d7c4:	89a3      	ldrh	r3, [r4, #12]
 801d7c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d7ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d7ce:	81a3      	strh	r3, [r4, #12]
 801d7d0:	6126      	str	r6, [r4, #16]
 801d7d2:	6165      	str	r5, [r4, #20]
 801d7d4:	444e      	add	r6, r9
 801d7d6:	eba5 0509 	sub.w	r5, r5, r9
 801d7da:	6026      	str	r6, [r4, #0]
 801d7dc:	60a5      	str	r5, [r4, #8]
 801d7de:	463e      	mov	r6, r7
 801d7e0:	42be      	cmp	r6, r7
 801d7e2:	d900      	bls.n	801d7e6 <__ssputs_r+0x72>
 801d7e4:	463e      	mov	r6, r7
 801d7e6:	6820      	ldr	r0, [r4, #0]
 801d7e8:	4632      	mov	r2, r6
 801d7ea:	4641      	mov	r1, r8
 801d7ec:	f7ff fe43 	bl	801d476 <memmove>
 801d7f0:	68a3      	ldr	r3, [r4, #8]
 801d7f2:	1b9b      	subs	r3, r3, r6
 801d7f4:	60a3      	str	r3, [r4, #8]
 801d7f6:	6823      	ldr	r3, [r4, #0]
 801d7f8:	4433      	add	r3, r6
 801d7fa:	6023      	str	r3, [r4, #0]
 801d7fc:	2000      	movs	r0, #0
 801d7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d802:	462a      	mov	r2, r5
 801d804:	f000 fd37 	bl	801e276 <_realloc_r>
 801d808:	4606      	mov	r6, r0
 801d80a:	2800      	cmp	r0, #0
 801d80c:	d1e0      	bne.n	801d7d0 <__ssputs_r+0x5c>
 801d80e:	6921      	ldr	r1, [r4, #16]
 801d810:	4650      	mov	r0, sl
 801d812:	f7ff ff65 	bl	801d6e0 <_free_r>
 801d816:	230c      	movs	r3, #12
 801d818:	f8ca 3000 	str.w	r3, [sl]
 801d81c:	89a3      	ldrh	r3, [r4, #12]
 801d81e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d822:	81a3      	strh	r3, [r4, #12]
 801d824:	f04f 30ff 	mov.w	r0, #4294967295
 801d828:	e7e9      	b.n	801d7fe <__ssputs_r+0x8a>
	...

0801d82c <_svfiprintf_r>:
 801d82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d830:	4698      	mov	r8, r3
 801d832:	898b      	ldrh	r3, [r1, #12]
 801d834:	061b      	lsls	r3, r3, #24
 801d836:	b09d      	sub	sp, #116	@ 0x74
 801d838:	4607      	mov	r7, r0
 801d83a:	460d      	mov	r5, r1
 801d83c:	4614      	mov	r4, r2
 801d83e:	d510      	bpl.n	801d862 <_svfiprintf_r+0x36>
 801d840:	690b      	ldr	r3, [r1, #16]
 801d842:	b973      	cbnz	r3, 801d862 <_svfiprintf_r+0x36>
 801d844:	2140      	movs	r1, #64	@ 0x40
 801d846:	f7ff fc05 	bl	801d054 <_malloc_r>
 801d84a:	6028      	str	r0, [r5, #0]
 801d84c:	6128      	str	r0, [r5, #16]
 801d84e:	b930      	cbnz	r0, 801d85e <_svfiprintf_r+0x32>
 801d850:	230c      	movs	r3, #12
 801d852:	603b      	str	r3, [r7, #0]
 801d854:	f04f 30ff 	mov.w	r0, #4294967295
 801d858:	b01d      	add	sp, #116	@ 0x74
 801d85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d85e:	2340      	movs	r3, #64	@ 0x40
 801d860:	616b      	str	r3, [r5, #20]
 801d862:	2300      	movs	r3, #0
 801d864:	9309      	str	r3, [sp, #36]	@ 0x24
 801d866:	2320      	movs	r3, #32
 801d868:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d86c:	f8cd 800c 	str.w	r8, [sp, #12]
 801d870:	2330      	movs	r3, #48	@ 0x30
 801d872:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801da10 <_svfiprintf_r+0x1e4>
 801d876:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d87a:	f04f 0901 	mov.w	r9, #1
 801d87e:	4623      	mov	r3, r4
 801d880:	469a      	mov	sl, r3
 801d882:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d886:	b10a      	cbz	r2, 801d88c <_svfiprintf_r+0x60>
 801d888:	2a25      	cmp	r2, #37	@ 0x25
 801d88a:	d1f9      	bne.n	801d880 <_svfiprintf_r+0x54>
 801d88c:	ebba 0b04 	subs.w	fp, sl, r4
 801d890:	d00b      	beq.n	801d8aa <_svfiprintf_r+0x7e>
 801d892:	465b      	mov	r3, fp
 801d894:	4622      	mov	r2, r4
 801d896:	4629      	mov	r1, r5
 801d898:	4638      	mov	r0, r7
 801d89a:	f7ff ff6b 	bl	801d774 <__ssputs_r>
 801d89e:	3001      	adds	r0, #1
 801d8a0:	f000 80a7 	beq.w	801d9f2 <_svfiprintf_r+0x1c6>
 801d8a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d8a6:	445a      	add	r2, fp
 801d8a8:	9209      	str	r2, [sp, #36]	@ 0x24
 801d8aa:	f89a 3000 	ldrb.w	r3, [sl]
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	f000 809f 	beq.w	801d9f2 <_svfiprintf_r+0x1c6>
 801d8b4:	2300      	movs	r3, #0
 801d8b6:	f04f 32ff 	mov.w	r2, #4294967295
 801d8ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d8be:	f10a 0a01 	add.w	sl, sl, #1
 801d8c2:	9304      	str	r3, [sp, #16]
 801d8c4:	9307      	str	r3, [sp, #28]
 801d8c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d8ca:	931a      	str	r3, [sp, #104]	@ 0x68
 801d8cc:	4654      	mov	r4, sl
 801d8ce:	2205      	movs	r2, #5
 801d8d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d8d4:	484e      	ldr	r0, [pc, #312]	@ (801da10 <_svfiprintf_r+0x1e4>)
 801d8d6:	f7e2 fccb 	bl	8000270 <memchr>
 801d8da:	9a04      	ldr	r2, [sp, #16]
 801d8dc:	b9d8      	cbnz	r0, 801d916 <_svfiprintf_r+0xea>
 801d8de:	06d0      	lsls	r0, r2, #27
 801d8e0:	bf44      	itt	mi
 801d8e2:	2320      	movmi	r3, #32
 801d8e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d8e8:	0711      	lsls	r1, r2, #28
 801d8ea:	bf44      	itt	mi
 801d8ec:	232b      	movmi	r3, #43	@ 0x2b
 801d8ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d8f2:	f89a 3000 	ldrb.w	r3, [sl]
 801d8f6:	2b2a      	cmp	r3, #42	@ 0x2a
 801d8f8:	d015      	beq.n	801d926 <_svfiprintf_r+0xfa>
 801d8fa:	9a07      	ldr	r2, [sp, #28]
 801d8fc:	4654      	mov	r4, sl
 801d8fe:	2000      	movs	r0, #0
 801d900:	f04f 0c0a 	mov.w	ip, #10
 801d904:	4621      	mov	r1, r4
 801d906:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d90a:	3b30      	subs	r3, #48	@ 0x30
 801d90c:	2b09      	cmp	r3, #9
 801d90e:	d94b      	bls.n	801d9a8 <_svfiprintf_r+0x17c>
 801d910:	b1b0      	cbz	r0, 801d940 <_svfiprintf_r+0x114>
 801d912:	9207      	str	r2, [sp, #28]
 801d914:	e014      	b.n	801d940 <_svfiprintf_r+0x114>
 801d916:	eba0 0308 	sub.w	r3, r0, r8
 801d91a:	fa09 f303 	lsl.w	r3, r9, r3
 801d91e:	4313      	orrs	r3, r2
 801d920:	9304      	str	r3, [sp, #16]
 801d922:	46a2      	mov	sl, r4
 801d924:	e7d2      	b.n	801d8cc <_svfiprintf_r+0xa0>
 801d926:	9b03      	ldr	r3, [sp, #12]
 801d928:	1d19      	adds	r1, r3, #4
 801d92a:	681b      	ldr	r3, [r3, #0]
 801d92c:	9103      	str	r1, [sp, #12]
 801d92e:	2b00      	cmp	r3, #0
 801d930:	bfbb      	ittet	lt
 801d932:	425b      	neglt	r3, r3
 801d934:	f042 0202 	orrlt.w	r2, r2, #2
 801d938:	9307      	strge	r3, [sp, #28]
 801d93a:	9307      	strlt	r3, [sp, #28]
 801d93c:	bfb8      	it	lt
 801d93e:	9204      	strlt	r2, [sp, #16]
 801d940:	7823      	ldrb	r3, [r4, #0]
 801d942:	2b2e      	cmp	r3, #46	@ 0x2e
 801d944:	d10a      	bne.n	801d95c <_svfiprintf_r+0x130>
 801d946:	7863      	ldrb	r3, [r4, #1]
 801d948:	2b2a      	cmp	r3, #42	@ 0x2a
 801d94a:	d132      	bne.n	801d9b2 <_svfiprintf_r+0x186>
 801d94c:	9b03      	ldr	r3, [sp, #12]
 801d94e:	1d1a      	adds	r2, r3, #4
 801d950:	681b      	ldr	r3, [r3, #0]
 801d952:	9203      	str	r2, [sp, #12]
 801d954:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d958:	3402      	adds	r4, #2
 801d95a:	9305      	str	r3, [sp, #20]
 801d95c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801da20 <_svfiprintf_r+0x1f4>
 801d960:	7821      	ldrb	r1, [r4, #0]
 801d962:	2203      	movs	r2, #3
 801d964:	4650      	mov	r0, sl
 801d966:	f7e2 fc83 	bl	8000270 <memchr>
 801d96a:	b138      	cbz	r0, 801d97c <_svfiprintf_r+0x150>
 801d96c:	9b04      	ldr	r3, [sp, #16]
 801d96e:	eba0 000a 	sub.w	r0, r0, sl
 801d972:	2240      	movs	r2, #64	@ 0x40
 801d974:	4082      	lsls	r2, r0
 801d976:	4313      	orrs	r3, r2
 801d978:	3401      	adds	r4, #1
 801d97a:	9304      	str	r3, [sp, #16]
 801d97c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d980:	4824      	ldr	r0, [pc, #144]	@ (801da14 <_svfiprintf_r+0x1e8>)
 801d982:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d986:	2206      	movs	r2, #6
 801d988:	f7e2 fc72 	bl	8000270 <memchr>
 801d98c:	2800      	cmp	r0, #0
 801d98e:	d036      	beq.n	801d9fe <_svfiprintf_r+0x1d2>
 801d990:	4b21      	ldr	r3, [pc, #132]	@ (801da18 <_svfiprintf_r+0x1ec>)
 801d992:	bb1b      	cbnz	r3, 801d9dc <_svfiprintf_r+0x1b0>
 801d994:	9b03      	ldr	r3, [sp, #12]
 801d996:	3307      	adds	r3, #7
 801d998:	f023 0307 	bic.w	r3, r3, #7
 801d99c:	3308      	adds	r3, #8
 801d99e:	9303      	str	r3, [sp, #12]
 801d9a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d9a2:	4433      	add	r3, r6
 801d9a4:	9309      	str	r3, [sp, #36]	@ 0x24
 801d9a6:	e76a      	b.n	801d87e <_svfiprintf_r+0x52>
 801d9a8:	fb0c 3202 	mla	r2, ip, r2, r3
 801d9ac:	460c      	mov	r4, r1
 801d9ae:	2001      	movs	r0, #1
 801d9b0:	e7a8      	b.n	801d904 <_svfiprintf_r+0xd8>
 801d9b2:	2300      	movs	r3, #0
 801d9b4:	3401      	adds	r4, #1
 801d9b6:	9305      	str	r3, [sp, #20]
 801d9b8:	4619      	mov	r1, r3
 801d9ba:	f04f 0c0a 	mov.w	ip, #10
 801d9be:	4620      	mov	r0, r4
 801d9c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d9c4:	3a30      	subs	r2, #48	@ 0x30
 801d9c6:	2a09      	cmp	r2, #9
 801d9c8:	d903      	bls.n	801d9d2 <_svfiprintf_r+0x1a6>
 801d9ca:	2b00      	cmp	r3, #0
 801d9cc:	d0c6      	beq.n	801d95c <_svfiprintf_r+0x130>
 801d9ce:	9105      	str	r1, [sp, #20]
 801d9d0:	e7c4      	b.n	801d95c <_svfiprintf_r+0x130>
 801d9d2:	fb0c 2101 	mla	r1, ip, r1, r2
 801d9d6:	4604      	mov	r4, r0
 801d9d8:	2301      	movs	r3, #1
 801d9da:	e7f0      	b.n	801d9be <_svfiprintf_r+0x192>
 801d9dc:	ab03      	add	r3, sp, #12
 801d9de:	9300      	str	r3, [sp, #0]
 801d9e0:	462a      	mov	r2, r5
 801d9e2:	4b0e      	ldr	r3, [pc, #56]	@ (801da1c <_svfiprintf_r+0x1f0>)
 801d9e4:	a904      	add	r1, sp, #16
 801d9e6:	4638      	mov	r0, r7
 801d9e8:	f3af 8000 	nop.w
 801d9ec:	1c42      	adds	r2, r0, #1
 801d9ee:	4606      	mov	r6, r0
 801d9f0:	d1d6      	bne.n	801d9a0 <_svfiprintf_r+0x174>
 801d9f2:	89ab      	ldrh	r3, [r5, #12]
 801d9f4:	065b      	lsls	r3, r3, #25
 801d9f6:	f53f af2d 	bmi.w	801d854 <_svfiprintf_r+0x28>
 801d9fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d9fc:	e72c      	b.n	801d858 <_svfiprintf_r+0x2c>
 801d9fe:	ab03      	add	r3, sp, #12
 801da00:	9300      	str	r3, [sp, #0]
 801da02:	462a      	mov	r2, r5
 801da04:	4b05      	ldr	r3, [pc, #20]	@ (801da1c <_svfiprintf_r+0x1f0>)
 801da06:	a904      	add	r1, sp, #16
 801da08:	4638      	mov	r0, r7
 801da0a:	f000 f9bb 	bl	801dd84 <_printf_i>
 801da0e:	e7ed      	b.n	801d9ec <_svfiprintf_r+0x1c0>
 801da10:	080325df 	.word	0x080325df
 801da14:	080325e9 	.word	0x080325e9
 801da18:	00000000 	.word	0x00000000
 801da1c:	0801d775 	.word	0x0801d775
 801da20:	080325e5 	.word	0x080325e5

0801da24 <__sfputc_r>:
 801da24:	6893      	ldr	r3, [r2, #8]
 801da26:	3b01      	subs	r3, #1
 801da28:	2b00      	cmp	r3, #0
 801da2a:	b410      	push	{r4}
 801da2c:	6093      	str	r3, [r2, #8]
 801da2e:	da08      	bge.n	801da42 <__sfputc_r+0x1e>
 801da30:	6994      	ldr	r4, [r2, #24]
 801da32:	42a3      	cmp	r3, r4
 801da34:	db01      	blt.n	801da3a <__sfputc_r+0x16>
 801da36:	290a      	cmp	r1, #10
 801da38:	d103      	bne.n	801da42 <__sfputc_r+0x1e>
 801da3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da3e:	f000 bb7f 	b.w	801e140 <__swbuf_r>
 801da42:	6813      	ldr	r3, [r2, #0]
 801da44:	1c58      	adds	r0, r3, #1
 801da46:	6010      	str	r0, [r2, #0]
 801da48:	7019      	strb	r1, [r3, #0]
 801da4a:	4608      	mov	r0, r1
 801da4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da50:	4770      	bx	lr

0801da52 <__sfputs_r>:
 801da52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da54:	4606      	mov	r6, r0
 801da56:	460f      	mov	r7, r1
 801da58:	4614      	mov	r4, r2
 801da5a:	18d5      	adds	r5, r2, r3
 801da5c:	42ac      	cmp	r4, r5
 801da5e:	d101      	bne.n	801da64 <__sfputs_r+0x12>
 801da60:	2000      	movs	r0, #0
 801da62:	e007      	b.n	801da74 <__sfputs_r+0x22>
 801da64:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da68:	463a      	mov	r2, r7
 801da6a:	4630      	mov	r0, r6
 801da6c:	f7ff ffda 	bl	801da24 <__sfputc_r>
 801da70:	1c43      	adds	r3, r0, #1
 801da72:	d1f3      	bne.n	801da5c <__sfputs_r+0xa>
 801da74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801da78 <_vfiprintf_r>:
 801da78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da7c:	460d      	mov	r5, r1
 801da7e:	b09d      	sub	sp, #116	@ 0x74
 801da80:	4614      	mov	r4, r2
 801da82:	4698      	mov	r8, r3
 801da84:	4606      	mov	r6, r0
 801da86:	b118      	cbz	r0, 801da90 <_vfiprintf_r+0x18>
 801da88:	6a03      	ldr	r3, [r0, #32]
 801da8a:	b90b      	cbnz	r3, 801da90 <_vfiprintf_r+0x18>
 801da8c:	f7ff fc38 	bl	801d300 <__sinit>
 801da90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801da92:	07d9      	lsls	r1, r3, #31
 801da94:	d405      	bmi.n	801daa2 <_vfiprintf_r+0x2a>
 801da96:	89ab      	ldrh	r3, [r5, #12]
 801da98:	059a      	lsls	r2, r3, #22
 801da9a:	d402      	bmi.n	801daa2 <_vfiprintf_r+0x2a>
 801da9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801da9e:	f7ff fdf0 	bl	801d682 <__retarget_lock_acquire_recursive>
 801daa2:	89ab      	ldrh	r3, [r5, #12]
 801daa4:	071b      	lsls	r3, r3, #28
 801daa6:	d501      	bpl.n	801daac <_vfiprintf_r+0x34>
 801daa8:	692b      	ldr	r3, [r5, #16]
 801daaa:	b99b      	cbnz	r3, 801dad4 <_vfiprintf_r+0x5c>
 801daac:	4629      	mov	r1, r5
 801daae:	4630      	mov	r0, r6
 801dab0:	f000 fb84 	bl	801e1bc <__swsetup_r>
 801dab4:	b170      	cbz	r0, 801dad4 <_vfiprintf_r+0x5c>
 801dab6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dab8:	07dc      	lsls	r4, r3, #31
 801daba:	d504      	bpl.n	801dac6 <_vfiprintf_r+0x4e>
 801dabc:	f04f 30ff 	mov.w	r0, #4294967295
 801dac0:	b01d      	add	sp, #116	@ 0x74
 801dac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dac6:	89ab      	ldrh	r3, [r5, #12]
 801dac8:	0598      	lsls	r0, r3, #22
 801daca:	d4f7      	bmi.n	801dabc <_vfiprintf_r+0x44>
 801dacc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dace:	f7ff fdd9 	bl	801d684 <__retarget_lock_release_recursive>
 801dad2:	e7f3      	b.n	801dabc <_vfiprintf_r+0x44>
 801dad4:	2300      	movs	r3, #0
 801dad6:	9309      	str	r3, [sp, #36]	@ 0x24
 801dad8:	2320      	movs	r3, #32
 801dada:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801dade:	f8cd 800c 	str.w	r8, [sp, #12]
 801dae2:	2330      	movs	r3, #48	@ 0x30
 801dae4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801dc94 <_vfiprintf_r+0x21c>
 801dae8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801daec:	f04f 0901 	mov.w	r9, #1
 801daf0:	4623      	mov	r3, r4
 801daf2:	469a      	mov	sl, r3
 801daf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801daf8:	b10a      	cbz	r2, 801dafe <_vfiprintf_r+0x86>
 801dafa:	2a25      	cmp	r2, #37	@ 0x25
 801dafc:	d1f9      	bne.n	801daf2 <_vfiprintf_r+0x7a>
 801dafe:	ebba 0b04 	subs.w	fp, sl, r4
 801db02:	d00b      	beq.n	801db1c <_vfiprintf_r+0xa4>
 801db04:	465b      	mov	r3, fp
 801db06:	4622      	mov	r2, r4
 801db08:	4629      	mov	r1, r5
 801db0a:	4630      	mov	r0, r6
 801db0c:	f7ff ffa1 	bl	801da52 <__sfputs_r>
 801db10:	3001      	adds	r0, #1
 801db12:	f000 80a7 	beq.w	801dc64 <_vfiprintf_r+0x1ec>
 801db16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801db18:	445a      	add	r2, fp
 801db1a:	9209      	str	r2, [sp, #36]	@ 0x24
 801db1c:	f89a 3000 	ldrb.w	r3, [sl]
 801db20:	2b00      	cmp	r3, #0
 801db22:	f000 809f 	beq.w	801dc64 <_vfiprintf_r+0x1ec>
 801db26:	2300      	movs	r3, #0
 801db28:	f04f 32ff 	mov.w	r2, #4294967295
 801db2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801db30:	f10a 0a01 	add.w	sl, sl, #1
 801db34:	9304      	str	r3, [sp, #16]
 801db36:	9307      	str	r3, [sp, #28]
 801db38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801db3c:	931a      	str	r3, [sp, #104]	@ 0x68
 801db3e:	4654      	mov	r4, sl
 801db40:	2205      	movs	r2, #5
 801db42:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db46:	4853      	ldr	r0, [pc, #332]	@ (801dc94 <_vfiprintf_r+0x21c>)
 801db48:	f7e2 fb92 	bl	8000270 <memchr>
 801db4c:	9a04      	ldr	r2, [sp, #16]
 801db4e:	b9d8      	cbnz	r0, 801db88 <_vfiprintf_r+0x110>
 801db50:	06d1      	lsls	r1, r2, #27
 801db52:	bf44      	itt	mi
 801db54:	2320      	movmi	r3, #32
 801db56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801db5a:	0713      	lsls	r3, r2, #28
 801db5c:	bf44      	itt	mi
 801db5e:	232b      	movmi	r3, #43	@ 0x2b
 801db60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801db64:	f89a 3000 	ldrb.w	r3, [sl]
 801db68:	2b2a      	cmp	r3, #42	@ 0x2a
 801db6a:	d015      	beq.n	801db98 <_vfiprintf_r+0x120>
 801db6c:	9a07      	ldr	r2, [sp, #28]
 801db6e:	4654      	mov	r4, sl
 801db70:	2000      	movs	r0, #0
 801db72:	f04f 0c0a 	mov.w	ip, #10
 801db76:	4621      	mov	r1, r4
 801db78:	f811 3b01 	ldrb.w	r3, [r1], #1
 801db7c:	3b30      	subs	r3, #48	@ 0x30
 801db7e:	2b09      	cmp	r3, #9
 801db80:	d94b      	bls.n	801dc1a <_vfiprintf_r+0x1a2>
 801db82:	b1b0      	cbz	r0, 801dbb2 <_vfiprintf_r+0x13a>
 801db84:	9207      	str	r2, [sp, #28]
 801db86:	e014      	b.n	801dbb2 <_vfiprintf_r+0x13a>
 801db88:	eba0 0308 	sub.w	r3, r0, r8
 801db8c:	fa09 f303 	lsl.w	r3, r9, r3
 801db90:	4313      	orrs	r3, r2
 801db92:	9304      	str	r3, [sp, #16]
 801db94:	46a2      	mov	sl, r4
 801db96:	e7d2      	b.n	801db3e <_vfiprintf_r+0xc6>
 801db98:	9b03      	ldr	r3, [sp, #12]
 801db9a:	1d19      	adds	r1, r3, #4
 801db9c:	681b      	ldr	r3, [r3, #0]
 801db9e:	9103      	str	r1, [sp, #12]
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	bfbb      	ittet	lt
 801dba4:	425b      	neglt	r3, r3
 801dba6:	f042 0202 	orrlt.w	r2, r2, #2
 801dbaa:	9307      	strge	r3, [sp, #28]
 801dbac:	9307      	strlt	r3, [sp, #28]
 801dbae:	bfb8      	it	lt
 801dbb0:	9204      	strlt	r2, [sp, #16]
 801dbb2:	7823      	ldrb	r3, [r4, #0]
 801dbb4:	2b2e      	cmp	r3, #46	@ 0x2e
 801dbb6:	d10a      	bne.n	801dbce <_vfiprintf_r+0x156>
 801dbb8:	7863      	ldrb	r3, [r4, #1]
 801dbba:	2b2a      	cmp	r3, #42	@ 0x2a
 801dbbc:	d132      	bne.n	801dc24 <_vfiprintf_r+0x1ac>
 801dbbe:	9b03      	ldr	r3, [sp, #12]
 801dbc0:	1d1a      	adds	r2, r3, #4
 801dbc2:	681b      	ldr	r3, [r3, #0]
 801dbc4:	9203      	str	r2, [sp, #12]
 801dbc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801dbca:	3402      	adds	r4, #2
 801dbcc:	9305      	str	r3, [sp, #20]
 801dbce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801dca4 <_vfiprintf_r+0x22c>
 801dbd2:	7821      	ldrb	r1, [r4, #0]
 801dbd4:	2203      	movs	r2, #3
 801dbd6:	4650      	mov	r0, sl
 801dbd8:	f7e2 fb4a 	bl	8000270 <memchr>
 801dbdc:	b138      	cbz	r0, 801dbee <_vfiprintf_r+0x176>
 801dbde:	9b04      	ldr	r3, [sp, #16]
 801dbe0:	eba0 000a 	sub.w	r0, r0, sl
 801dbe4:	2240      	movs	r2, #64	@ 0x40
 801dbe6:	4082      	lsls	r2, r0
 801dbe8:	4313      	orrs	r3, r2
 801dbea:	3401      	adds	r4, #1
 801dbec:	9304      	str	r3, [sp, #16]
 801dbee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dbf2:	4829      	ldr	r0, [pc, #164]	@ (801dc98 <_vfiprintf_r+0x220>)
 801dbf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801dbf8:	2206      	movs	r2, #6
 801dbfa:	f7e2 fb39 	bl	8000270 <memchr>
 801dbfe:	2800      	cmp	r0, #0
 801dc00:	d03f      	beq.n	801dc82 <_vfiprintf_r+0x20a>
 801dc02:	4b26      	ldr	r3, [pc, #152]	@ (801dc9c <_vfiprintf_r+0x224>)
 801dc04:	bb1b      	cbnz	r3, 801dc4e <_vfiprintf_r+0x1d6>
 801dc06:	9b03      	ldr	r3, [sp, #12]
 801dc08:	3307      	adds	r3, #7
 801dc0a:	f023 0307 	bic.w	r3, r3, #7
 801dc0e:	3308      	adds	r3, #8
 801dc10:	9303      	str	r3, [sp, #12]
 801dc12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc14:	443b      	add	r3, r7
 801dc16:	9309      	str	r3, [sp, #36]	@ 0x24
 801dc18:	e76a      	b.n	801daf0 <_vfiprintf_r+0x78>
 801dc1a:	fb0c 3202 	mla	r2, ip, r2, r3
 801dc1e:	460c      	mov	r4, r1
 801dc20:	2001      	movs	r0, #1
 801dc22:	e7a8      	b.n	801db76 <_vfiprintf_r+0xfe>
 801dc24:	2300      	movs	r3, #0
 801dc26:	3401      	adds	r4, #1
 801dc28:	9305      	str	r3, [sp, #20]
 801dc2a:	4619      	mov	r1, r3
 801dc2c:	f04f 0c0a 	mov.w	ip, #10
 801dc30:	4620      	mov	r0, r4
 801dc32:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dc36:	3a30      	subs	r2, #48	@ 0x30
 801dc38:	2a09      	cmp	r2, #9
 801dc3a:	d903      	bls.n	801dc44 <_vfiprintf_r+0x1cc>
 801dc3c:	2b00      	cmp	r3, #0
 801dc3e:	d0c6      	beq.n	801dbce <_vfiprintf_r+0x156>
 801dc40:	9105      	str	r1, [sp, #20]
 801dc42:	e7c4      	b.n	801dbce <_vfiprintf_r+0x156>
 801dc44:	fb0c 2101 	mla	r1, ip, r1, r2
 801dc48:	4604      	mov	r4, r0
 801dc4a:	2301      	movs	r3, #1
 801dc4c:	e7f0      	b.n	801dc30 <_vfiprintf_r+0x1b8>
 801dc4e:	ab03      	add	r3, sp, #12
 801dc50:	9300      	str	r3, [sp, #0]
 801dc52:	462a      	mov	r2, r5
 801dc54:	4b12      	ldr	r3, [pc, #72]	@ (801dca0 <_vfiprintf_r+0x228>)
 801dc56:	a904      	add	r1, sp, #16
 801dc58:	4630      	mov	r0, r6
 801dc5a:	f3af 8000 	nop.w
 801dc5e:	4607      	mov	r7, r0
 801dc60:	1c78      	adds	r0, r7, #1
 801dc62:	d1d6      	bne.n	801dc12 <_vfiprintf_r+0x19a>
 801dc64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dc66:	07d9      	lsls	r1, r3, #31
 801dc68:	d405      	bmi.n	801dc76 <_vfiprintf_r+0x1fe>
 801dc6a:	89ab      	ldrh	r3, [r5, #12]
 801dc6c:	059a      	lsls	r2, r3, #22
 801dc6e:	d402      	bmi.n	801dc76 <_vfiprintf_r+0x1fe>
 801dc70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dc72:	f7ff fd07 	bl	801d684 <__retarget_lock_release_recursive>
 801dc76:	89ab      	ldrh	r3, [r5, #12]
 801dc78:	065b      	lsls	r3, r3, #25
 801dc7a:	f53f af1f 	bmi.w	801dabc <_vfiprintf_r+0x44>
 801dc7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dc80:	e71e      	b.n	801dac0 <_vfiprintf_r+0x48>
 801dc82:	ab03      	add	r3, sp, #12
 801dc84:	9300      	str	r3, [sp, #0]
 801dc86:	462a      	mov	r2, r5
 801dc88:	4b05      	ldr	r3, [pc, #20]	@ (801dca0 <_vfiprintf_r+0x228>)
 801dc8a:	a904      	add	r1, sp, #16
 801dc8c:	4630      	mov	r0, r6
 801dc8e:	f000 f879 	bl	801dd84 <_printf_i>
 801dc92:	e7e4      	b.n	801dc5e <_vfiprintf_r+0x1e6>
 801dc94:	080325df 	.word	0x080325df
 801dc98:	080325e9 	.word	0x080325e9
 801dc9c:	00000000 	.word	0x00000000
 801dca0:	0801da53 	.word	0x0801da53
 801dca4:	080325e5 	.word	0x080325e5

0801dca8 <_printf_common>:
 801dca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dcac:	4616      	mov	r6, r2
 801dcae:	4698      	mov	r8, r3
 801dcb0:	688a      	ldr	r2, [r1, #8]
 801dcb2:	690b      	ldr	r3, [r1, #16]
 801dcb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801dcb8:	4293      	cmp	r3, r2
 801dcba:	bfb8      	it	lt
 801dcbc:	4613      	movlt	r3, r2
 801dcbe:	6033      	str	r3, [r6, #0]
 801dcc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801dcc4:	4607      	mov	r7, r0
 801dcc6:	460c      	mov	r4, r1
 801dcc8:	b10a      	cbz	r2, 801dcce <_printf_common+0x26>
 801dcca:	3301      	adds	r3, #1
 801dccc:	6033      	str	r3, [r6, #0]
 801dcce:	6823      	ldr	r3, [r4, #0]
 801dcd0:	0699      	lsls	r1, r3, #26
 801dcd2:	bf42      	ittt	mi
 801dcd4:	6833      	ldrmi	r3, [r6, #0]
 801dcd6:	3302      	addmi	r3, #2
 801dcd8:	6033      	strmi	r3, [r6, #0]
 801dcda:	6825      	ldr	r5, [r4, #0]
 801dcdc:	f015 0506 	ands.w	r5, r5, #6
 801dce0:	d106      	bne.n	801dcf0 <_printf_common+0x48>
 801dce2:	f104 0a19 	add.w	sl, r4, #25
 801dce6:	68e3      	ldr	r3, [r4, #12]
 801dce8:	6832      	ldr	r2, [r6, #0]
 801dcea:	1a9b      	subs	r3, r3, r2
 801dcec:	42ab      	cmp	r3, r5
 801dcee:	dc26      	bgt.n	801dd3e <_printf_common+0x96>
 801dcf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801dcf4:	6822      	ldr	r2, [r4, #0]
 801dcf6:	3b00      	subs	r3, #0
 801dcf8:	bf18      	it	ne
 801dcfa:	2301      	movne	r3, #1
 801dcfc:	0692      	lsls	r2, r2, #26
 801dcfe:	d42b      	bmi.n	801dd58 <_printf_common+0xb0>
 801dd00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801dd04:	4641      	mov	r1, r8
 801dd06:	4638      	mov	r0, r7
 801dd08:	47c8      	blx	r9
 801dd0a:	3001      	adds	r0, #1
 801dd0c:	d01e      	beq.n	801dd4c <_printf_common+0xa4>
 801dd0e:	6823      	ldr	r3, [r4, #0]
 801dd10:	6922      	ldr	r2, [r4, #16]
 801dd12:	f003 0306 	and.w	r3, r3, #6
 801dd16:	2b04      	cmp	r3, #4
 801dd18:	bf02      	ittt	eq
 801dd1a:	68e5      	ldreq	r5, [r4, #12]
 801dd1c:	6833      	ldreq	r3, [r6, #0]
 801dd1e:	1aed      	subeq	r5, r5, r3
 801dd20:	68a3      	ldr	r3, [r4, #8]
 801dd22:	bf0c      	ite	eq
 801dd24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801dd28:	2500      	movne	r5, #0
 801dd2a:	4293      	cmp	r3, r2
 801dd2c:	bfc4      	itt	gt
 801dd2e:	1a9b      	subgt	r3, r3, r2
 801dd30:	18ed      	addgt	r5, r5, r3
 801dd32:	2600      	movs	r6, #0
 801dd34:	341a      	adds	r4, #26
 801dd36:	42b5      	cmp	r5, r6
 801dd38:	d11a      	bne.n	801dd70 <_printf_common+0xc8>
 801dd3a:	2000      	movs	r0, #0
 801dd3c:	e008      	b.n	801dd50 <_printf_common+0xa8>
 801dd3e:	2301      	movs	r3, #1
 801dd40:	4652      	mov	r2, sl
 801dd42:	4641      	mov	r1, r8
 801dd44:	4638      	mov	r0, r7
 801dd46:	47c8      	blx	r9
 801dd48:	3001      	adds	r0, #1
 801dd4a:	d103      	bne.n	801dd54 <_printf_common+0xac>
 801dd4c:	f04f 30ff 	mov.w	r0, #4294967295
 801dd50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dd54:	3501      	adds	r5, #1
 801dd56:	e7c6      	b.n	801dce6 <_printf_common+0x3e>
 801dd58:	18e1      	adds	r1, r4, r3
 801dd5a:	1c5a      	adds	r2, r3, #1
 801dd5c:	2030      	movs	r0, #48	@ 0x30
 801dd5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801dd62:	4422      	add	r2, r4
 801dd64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801dd68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801dd6c:	3302      	adds	r3, #2
 801dd6e:	e7c7      	b.n	801dd00 <_printf_common+0x58>
 801dd70:	2301      	movs	r3, #1
 801dd72:	4622      	mov	r2, r4
 801dd74:	4641      	mov	r1, r8
 801dd76:	4638      	mov	r0, r7
 801dd78:	47c8      	blx	r9
 801dd7a:	3001      	adds	r0, #1
 801dd7c:	d0e6      	beq.n	801dd4c <_printf_common+0xa4>
 801dd7e:	3601      	adds	r6, #1
 801dd80:	e7d9      	b.n	801dd36 <_printf_common+0x8e>
	...

0801dd84 <_printf_i>:
 801dd84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dd88:	7e0f      	ldrb	r7, [r1, #24]
 801dd8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801dd8c:	2f78      	cmp	r7, #120	@ 0x78
 801dd8e:	4691      	mov	r9, r2
 801dd90:	4680      	mov	r8, r0
 801dd92:	460c      	mov	r4, r1
 801dd94:	469a      	mov	sl, r3
 801dd96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801dd9a:	d807      	bhi.n	801ddac <_printf_i+0x28>
 801dd9c:	2f62      	cmp	r7, #98	@ 0x62
 801dd9e:	d80a      	bhi.n	801ddb6 <_printf_i+0x32>
 801dda0:	2f00      	cmp	r7, #0
 801dda2:	f000 80d2 	beq.w	801df4a <_printf_i+0x1c6>
 801dda6:	2f58      	cmp	r7, #88	@ 0x58
 801dda8:	f000 80b9 	beq.w	801df1e <_printf_i+0x19a>
 801ddac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ddb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ddb4:	e03a      	b.n	801de2c <_printf_i+0xa8>
 801ddb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ddba:	2b15      	cmp	r3, #21
 801ddbc:	d8f6      	bhi.n	801ddac <_printf_i+0x28>
 801ddbe:	a101      	add	r1, pc, #4	@ (adr r1, 801ddc4 <_printf_i+0x40>)
 801ddc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ddc4:	0801de1d 	.word	0x0801de1d
 801ddc8:	0801de31 	.word	0x0801de31
 801ddcc:	0801ddad 	.word	0x0801ddad
 801ddd0:	0801ddad 	.word	0x0801ddad
 801ddd4:	0801ddad 	.word	0x0801ddad
 801ddd8:	0801ddad 	.word	0x0801ddad
 801dddc:	0801de31 	.word	0x0801de31
 801dde0:	0801ddad 	.word	0x0801ddad
 801dde4:	0801ddad 	.word	0x0801ddad
 801dde8:	0801ddad 	.word	0x0801ddad
 801ddec:	0801ddad 	.word	0x0801ddad
 801ddf0:	0801df31 	.word	0x0801df31
 801ddf4:	0801de5b 	.word	0x0801de5b
 801ddf8:	0801deeb 	.word	0x0801deeb
 801ddfc:	0801ddad 	.word	0x0801ddad
 801de00:	0801ddad 	.word	0x0801ddad
 801de04:	0801df53 	.word	0x0801df53
 801de08:	0801ddad 	.word	0x0801ddad
 801de0c:	0801de5b 	.word	0x0801de5b
 801de10:	0801ddad 	.word	0x0801ddad
 801de14:	0801ddad 	.word	0x0801ddad
 801de18:	0801def3 	.word	0x0801def3
 801de1c:	6833      	ldr	r3, [r6, #0]
 801de1e:	1d1a      	adds	r2, r3, #4
 801de20:	681b      	ldr	r3, [r3, #0]
 801de22:	6032      	str	r2, [r6, #0]
 801de24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801de28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801de2c:	2301      	movs	r3, #1
 801de2e:	e09d      	b.n	801df6c <_printf_i+0x1e8>
 801de30:	6833      	ldr	r3, [r6, #0]
 801de32:	6820      	ldr	r0, [r4, #0]
 801de34:	1d19      	adds	r1, r3, #4
 801de36:	6031      	str	r1, [r6, #0]
 801de38:	0606      	lsls	r6, r0, #24
 801de3a:	d501      	bpl.n	801de40 <_printf_i+0xbc>
 801de3c:	681d      	ldr	r5, [r3, #0]
 801de3e:	e003      	b.n	801de48 <_printf_i+0xc4>
 801de40:	0645      	lsls	r5, r0, #25
 801de42:	d5fb      	bpl.n	801de3c <_printf_i+0xb8>
 801de44:	f9b3 5000 	ldrsh.w	r5, [r3]
 801de48:	2d00      	cmp	r5, #0
 801de4a:	da03      	bge.n	801de54 <_printf_i+0xd0>
 801de4c:	232d      	movs	r3, #45	@ 0x2d
 801de4e:	426d      	negs	r5, r5
 801de50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801de54:	4859      	ldr	r0, [pc, #356]	@ (801dfbc <_printf_i+0x238>)
 801de56:	230a      	movs	r3, #10
 801de58:	e011      	b.n	801de7e <_printf_i+0xfa>
 801de5a:	6821      	ldr	r1, [r4, #0]
 801de5c:	6833      	ldr	r3, [r6, #0]
 801de5e:	0608      	lsls	r0, r1, #24
 801de60:	f853 5b04 	ldr.w	r5, [r3], #4
 801de64:	d402      	bmi.n	801de6c <_printf_i+0xe8>
 801de66:	0649      	lsls	r1, r1, #25
 801de68:	bf48      	it	mi
 801de6a:	b2ad      	uxthmi	r5, r5
 801de6c:	2f6f      	cmp	r7, #111	@ 0x6f
 801de6e:	4853      	ldr	r0, [pc, #332]	@ (801dfbc <_printf_i+0x238>)
 801de70:	6033      	str	r3, [r6, #0]
 801de72:	bf14      	ite	ne
 801de74:	230a      	movne	r3, #10
 801de76:	2308      	moveq	r3, #8
 801de78:	2100      	movs	r1, #0
 801de7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801de7e:	6866      	ldr	r6, [r4, #4]
 801de80:	60a6      	str	r6, [r4, #8]
 801de82:	2e00      	cmp	r6, #0
 801de84:	bfa2      	ittt	ge
 801de86:	6821      	ldrge	r1, [r4, #0]
 801de88:	f021 0104 	bicge.w	r1, r1, #4
 801de8c:	6021      	strge	r1, [r4, #0]
 801de8e:	b90d      	cbnz	r5, 801de94 <_printf_i+0x110>
 801de90:	2e00      	cmp	r6, #0
 801de92:	d04b      	beq.n	801df2c <_printf_i+0x1a8>
 801de94:	4616      	mov	r6, r2
 801de96:	fbb5 f1f3 	udiv	r1, r5, r3
 801de9a:	fb03 5711 	mls	r7, r3, r1, r5
 801de9e:	5dc7      	ldrb	r7, [r0, r7]
 801dea0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801dea4:	462f      	mov	r7, r5
 801dea6:	42bb      	cmp	r3, r7
 801dea8:	460d      	mov	r5, r1
 801deaa:	d9f4      	bls.n	801de96 <_printf_i+0x112>
 801deac:	2b08      	cmp	r3, #8
 801deae:	d10b      	bne.n	801dec8 <_printf_i+0x144>
 801deb0:	6823      	ldr	r3, [r4, #0]
 801deb2:	07df      	lsls	r7, r3, #31
 801deb4:	d508      	bpl.n	801dec8 <_printf_i+0x144>
 801deb6:	6923      	ldr	r3, [r4, #16]
 801deb8:	6861      	ldr	r1, [r4, #4]
 801deba:	4299      	cmp	r1, r3
 801debc:	bfde      	ittt	le
 801debe:	2330      	movle	r3, #48	@ 0x30
 801dec0:	f806 3c01 	strble.w	r3, [r6, #-1]
 801dec4:	f106 36ff 	addle.w	r6, r6, #4294967295
 801dec8:	1b92      	subs	r2, r2, r6
 801deca:	6122      	str	r2, [r4, #16]
 801decc:	f8cd a000 	str.w	sl, [sp]
 801ded0:	464b      	mov	r3, r9
 801ded2:	aa03      	add	r2, sp, #12
 801ded4:	4621      	mov	r1, r4
 801ded6:	4640      	mov	r0, r8
 801ded8:	f7ff fee6 	bl	801dca8 <_printf_common>
 801dedc:	3001      	adds	r0, #1
 801dede:	d14a      	bne.n	801df76 <_printf_i+0x1f2>
 801dee0:	f04f 30ff 	mov.w	r0, #4294967295
 801dee4:	b004      	add	sp, #16
 801dee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801deea:	6823      	ldr	r3, [r4, #0]
 801deec:	f043 0320 	orr.w	r3, r3, #32
 801def0:	6023      	str	r3, [r4, #0]
 801def2:	4833      	ldr	r0, [pc, #204]	@ (801dfc0 <_printf_i+0x23c>)
 801def4:	2778      	movs	r7, #120	@ 0x78
 801def6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801defa:	6823      	ldr	r3, [r4, #0]
 801defc:	6831      	ldr	r1, [r6, #0]
 801defe:	061f      	lsls	r7, r3, #24
 801df00:	f851 5b04 	ldr.w	r5, [r1], #4
 801df04:	d402      	bmi.n	801df0c <_printf_i+0x188>
 801df06:	065f      	lsls	r7, r3, #25
 801df08:	bf48      	it	mi
 801df0a:	b2ad      	uxthmi	r5, r5
 801df0c:	6031      	str	r1, [r6, #0]
 801df0e:	07d9      	lsls	r1, r3, #31
 801df10:	bf44      	itt	mi
 801df12:	f043 0320 	orrmi.w	r3, r3, #32
 801df16:	6023      	strmi	r3, [r4, #0]
 801df18:	b11d      	cbz	r5, 801df22 <_printf_i+0x19e>
 801df1a:	2310      	movs	r3, #16
 801df1c:	e7ac      	b.n	801de78 <_printf_i+0xf4>
 801df1e:	4827      	ldr	r0, [pc, #156]	@ (801dfbc <_printf_i+0x238>)
 801df20:	e7e9      	b.n	801def6 <_printf_i+0x172>
 801df22:	6823      	ldr	r3, [r4, #0]
 801df24:	f023 0320 	bic.w	r3, r3, #32
 801df28:	6023      	str	r3, [r4, #0]
 801df2a:	e7f6      	b.n	801df1a <_printf_i+0x196>
 801df2c:	4616      	mov	r6, r2
 801df2e:	e7bd      	b.n	801deac <_printf_i+0x128>
 801df30:	6833      	ldr	r3, [r6, #0]
 801df32:	6825      	ldr	r5, [r4, #0]
 801df34:	6961      	ldr	r1, [r4, #20]
 801df36:	1d18      	adds	r0, r3, #4
 801df38:	6030      	str	r0, [r6, #0]
 801df3a:	062e      	lsls	r6, r5, #24
 801df3c:	681b      	ldr	r3, [r3, #0]
 801df3e:	d501      	bpl.n	801df44 <_printf_i+0x1c0>
 801df40:	6019      	str	r1, [r3, #0]
 801df42:	e002      	b.n	801df4a <_printf_i+0x1c6>
 801df44:	0668      	lsls	r0, r5, #25
 801df46:	d5fb      	bpl.n	801df40 <_printf_i+0x1bc>
 801df48:	8019      	strh	r1, [r3, #0]
 801df4a:	2300      	movs	r3, #0
 801df4c:	6123      	str	r3, [r4, #16]
 801df4e:	4616      	mov	r6, r2
 801df50:	e7bc      	b.n	801decc <_printf_i+0x148>
 801df52:	6833      	ldr	r3, [r6, #0]
 801df54:	1d1a      	adds	r2, r3, #4
 801df56:	6032      	str	r2, [r6, #0]
 801df58:	681e      	ldr	r6, [r3, #0]
 801df5a:	6862      	ldr	r2, [r4, #4]
 801df5c:	2100      	movs	r1, #0
 801df5e:	4630      	mov	r0, r6
 801df60:	f7e2 f986 	bl	8000270 <memchr>
 801df64:	b108      	cbz	r0, 801df6a <_printf_i+0x1e6>
 801df66:	1b80      	subs	r0, r0, r6
 801df68:	6060      	str	r0, [r4, #4]
 801df6a:	6863      	ldr	r3, [r4, #4]
 801df6c:	6123      	str	r3, [r4, #16]
 801df6e:	2300      	movs	r3, #0
 801df70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801df74:	e7aa      	b.n	801decc <_printf_i+0x148>
 801df76:	6923      	ldr	r3, [r4, #16]
 801df78:	4632      	mov	r2, r6
 801df7a:	4649      	mov	r1, r9
 801df7c:	4640      	mov	r0, r8
 801df7e:	47d0      	blx	sl
 801df80:	3001      	adds	r0, #1
 801df82:	d0ad      	beq.n	801dee0 <_printf_i+0x15c>
 801df84:	6823      	ldr	r3, [r4, #0]
 801df86:	079b      	lsls	r3, r3, #30
 801df88:	d413      	bmi.n	801dfb2 <_printf_i+0x22e>
 801df8a:	68e0      	ldr	r0, [r4, #12]
 801df8c:	9b03      	ldr	r3, [sp, #12]
 801df8e:	4298      	cmp	r0, r3
 801df90:	bfb8      	it	lt
 801df92:	4618      	movlt	r0, r3
 801df94:	e7a6      	b.n	801dee4 <_printf_i+0x160>
 801df96:	2301      	movs	r3, #1
 801df98:	4632      	mov	r2, r6
 801df9a:	4649      	mov	r1, r9
 801df9c:	4640      	mov	r0, r8
 801df9e:	47d0      	blx	sl
 801dfa0:	3001      	adds	r0, #1
 801dfa2:	d09d      	beq.n	801dee0 <_printf_i+0x15c>
 801dfa4:	3501      	adds	r5, #1
 801dfa6:	68e3      	ldr	r3, [r4, #12]
 801dfa8:	9903      	ldr	r1, [sp, #12]
 801dfaa:	1a5b      	subs	r3, r3, r1
 801dfac:	42ab      	cmp	r3, r5
 801dfae:	dcf2      	bgt.n	801df96 <_printf_i+0x212>
 801dfb0:	e7eb      	b.n	801df8a <_printf_i+0x206>
 801dfb2:	2500      	movs	r5, #0
 801dfb4:	f104 0619 	add.w	r6, r4, #25
 801dfb8:	e7f5      	b.n	801dfa6 <_printf_i+0x222>
 801dfba:	bf00      	nop
 801dfbc:	080325f0 	.word	0x080325f0
 801dfc0:	08032601 	.word	0x08032601

0801dfc4 <__sflush_r>:
 801dfc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dfcc:	0716      	lsls	r6, r2, #28
 801dfce:	4605      	mov	r5, r0
 801dfd0:	460c      	mov	r4, r1
 801dfd2:	d454      	bmi.n	801e07e <__sflush_r+0xba>
 801dfd4:	684b      	ldr	r3, [r1, #4]
 801dfd6:	2b00      	cmp	r3, #0
 801dfd8:	dc02      	bgt.n	801dfe0 <__sflush_r+0x1c>
 801dfda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801dfdc:	2b00      	cmp	r3, #0
 801dfde:	dd48      	ble.n	801e072 <__sflush_r+0xae>
 801dfe0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dfe2:	2e00      	cmp	r6, #0
 801dfe4:	d045      	beq.n	801e072 <__sflush_r+0xae>
 801dfe6:	2300      	movs	r3, #0
 801dfe8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801dfec:	682f      	ldr	r7, [r5, #0]
 801dfee:	6a21      	ldr	r1, [r4, #32]
 801dff0:	602b      	str	r3, [r5, #0]
 801dff2:	d030      	beq.n	801e056 <__sflush_r+0x92>
 801dff4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801dff6:	89a3      	ldrh	r3, [r4, #12]
 801dff8:	0759      	lsls	r1, r3, #29
 801dffa:	d505      	bpl.n	801e008 <__sflush_r+0x44>
 801dffc:	6863      	ldr	r3, [r4, #4]
 801dffe:	1ad2      	subs	r2, r2, r3
 801e000:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e002:	b10b      	cbz	r3, 801e008 <__sflush_r+0x44>
 801e004:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e006:	1ad2      	subs	r2, r2, r3
 801e008:	2300      	movs	r3, #0
 801e00a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e00c:	6a21      	ldr	r1, [r4, #32]
 801e00e:	4628      	mov	r0, r5
 801e010:	47b0      	blx	r6
 801e012:	1c43      	adds	r3, r0, #1
 801e014:	89a3      	ldrh	r3, [r4, #12]
 801e016:	d106      	bne.n	801e026 <__sflush_r+0x62>
 801e018:	6829      	ldr	r1, [r5, #0]
 801e01a:	291d      	cmp	r1, #29
 801e01c:	d82b      	bhi.n	801e076 <__sflush_r+0xb2>
 801e01e:	4a2a      	ldr	r2, [pc, #168]	@ (801e0c8 <__sflush_r+0x104>)
 801e020:	410a      	asrs	r2, r1
 801e022:	07d6      	lsls	r6, r2, #31
 801e024:	d427      	bmi.n	801e076 <__sflush_r+0xb2>
 801e026:	2200      	movs	r2, #0
 801e028:	6062      	str	r2, [r4, #4]
 801e02a:	04d9      	lsls	r1, r3, #19
 801e02c:	6922      	ldr	r2, [r4, #16]
 801e02e:	6022      	str	r2, [r4, #0]
 801e030:	d504      	bpl.n	801e03c <__sflush_r+0x78>
 801e032:	1c42      	adds	r2, r0, #1
 801e034:	d101      	bne.n	801e03a <__sflush_r+0x76>
 801e036:	682b      	ldr	r3, [r5, #0]
 801e038:	b903      	cbnz	r3, 801e03c <__sflush_r+0x78>
 801e03a:	6560      	str	r0, [r4, #84]	@ 0x54
 801e03c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e03e:	602f      	str	r7, [r5, #0]
 801e040:	b1b9      	cbz	r1, 801e072 <__sflush_r+0xae>
 801e042:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e046:	4299      	cmp	r1, r3
 801e048:	d002      	beq.n	801e050 <__sflush_r+0x8c>
 801e04a:	4628      	mov	r0, r5
 801e04c:	f7ff fb48 	bl	801d6e0 <_free_r>
 801e050:	2300      	movs	r3, #0
 801e052:	6363      	str	r3, [r4, #52]	@ 0x34
 801e054:	e00d      	b.n	801e072 <__sflush_r+0xae>
 801e056:	2301      	movs	r3, #1
 801e058:	4628      	mov	r0, r5
 801e05a:	47b0      	blx	r6
 801e05c:	4602      	mov	r2, r0
 801e05e:	1c50      	adds	r0, r2, #1
 801e060:	d1c9      	bne.n	801dff6 <__sflush_r+0x32>
 801e062:	682b      	ldr	r3, [r5, #0]
 801e064:	2b00      	cmp	r3, #0
 801e066:	d0c6      	beq.n	801dff6 <__sflush_r+0x32>
 801e068:	2b1d      	cmp	r3, #29
 801e06a:	d001      	beq.n	801e070 <__sflush_r+0xac>
 801e06c:	2b16      	cmp	r3, #22
 801e06e:	d11e      	bne.n	801e0ae <__sflush_r+0xea>
 801e070:	602f      	str	r7, [r5, #0]
 801e072:	2000      	movs	r0, #0
 801e074:	e022      	b.n	801e0bc <__sflush_r+0xf8>
 801e076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e07a:	b21b      	sxth	r3, r3
 801e07c:	e01b      	b.n	801e0b6 <__sflush_r+0xf2>
 801e07e:	690f      	ldr	r7, [r1, #16]
 801e080:	2f00      	cmp	r7, #0
 801e082:	d0f6      	beq.n	801e072 <__sflush_r+0xae>
 801e084:	0793      	lsls	r3, r2, #30
 801e086:	680e      	ldr	r6, [r1, #0]
 801e088:	bf08      	it	eq
 801e08a:	694b      	ldreq	r3, [r1, #20]
 801e08c:	600f      	str	r7, [r1, #0]
 801e08e:	bf18      	it	ne
 801e090:	2300      	movne	r3, #0
 801e092:	eba6 0807 	sub.w	r8, r6, r7
 801e096:	608b      	str	r3, [r1, #8]
 801e098:	f1b8 0f00 	cmp.w	r8, #0
 801e09c:	dde9      	ble.n	801e072 <__sflush_r+0xae>
 801e09e:	6a21      	ldr	r1, [r4, #32]
 801e0a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e0a2:	4643      	mov	r3, r8
 801e0a4:	463a      	mov	r2, r7
 801e0a6:	4628      	mov	r0, r5
 801e0a8:	47b0      	blx	r6
 801e0aa:	2800      	cmp	r0, #0
 801e0ac:	dc08      	bgt.n	801e0c0 <__sflush_r+0xfc>
 801e0ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e0b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e0b6:	81a3      	strh	r3, [r4, #12]
 801e0b8:	f04f 30ff 	mov.w	r0, #4294967295
 801e0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0c0:	4407      	add	r7, r0
 801e0c2:	eba8 0800 	sub.w	r8, r8, r0
 801e0c6:	e7e7      	b.n	801e098 <__sflush_r+0xd4>
 801e0c8:	dfbffffe 	.word	0xdfbffffe

0801e0cc <_fflush_r>:
 801e0cc:	b538      	push	{r3, r4, r5, lr}
 801e0ce:	690b      	ldr	r3, [r1, #16]
 801e0d0:	4605      	mov	r5, r0
 801e0d2:	460c      	mov	r4, r1
 801e0d4:	b913      	cbnz	r3, 801e0dc <_fflush_r+0x10>
 801e0d6:	2500      	movs	r5, #0
 801e0d8:	4628      	mov	r0, r5
 801e0da:	bd38      	pop	{r3, r4, r5, pc}
 801e0dc:	b118      	cbz	r0, 801e0e6 <_fflush_r+0x1a>
 801e0de:	6a03      	ldr	r3, [r0, #32]
 801e0e0:	b90b      	cbnz	r3, 801e0e6 <_fflush_r+0x1a>
 801e0e2:	f7ff f90d 	bl	801d300 <__sinit>
 801e0e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e0ea:	2b00      	cmp	r3, #0
 801e0ec:	d0f3      	beq.n	801e0d6 <_fflush_r+0xa>
 801e0ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e0f0:	07d0      	lsls	r0, r2, #31
 801e0f2:	d404      	bmi.n	801e0fe <_fflush_r+0x32>
 801e0f4:	0599      	lsls	r1, r3, #22
 801e0f6:	d402      	bmi.n	801e0fe <_fflush_r+0x32>
 801e0f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e0fa:	f7ff fac2 	bl	801d682 <__retarget_lock_acquire_recursive>
 801e0fe:	4628      	mov	r0, r5
 801e100:	4621      	mov	r1, r4
 801e102:	f7ff ff5f 	bl	801dfc4 <__sflush_r>
 801e106:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e108:	07da      	lsls	r2, r3, #31
 801e10a:	4605      	mov	r5, r0
 801e10c:	d4e4      	bmi.n	801e0d8 <_fflush_r+0xc>
 801e10e:	89a3      	ldrh	r3, [r4, #12]
 801e110:	059b      	lsls	r3, r3, #22
 801e112:	d4e1      	bmi.n	801e0d8 <_fflush_r+0xc>
 801e114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e116:	f7ff fab5 	bl	801d684 <__retarget_lock_release_recursive>
 801e11a:	e7dd      	b.n	801e0d8 <_fflush_r+0xc>

0801e11c <fiprintf>:
 801e11c:	b40e      	push	{r1, r2, r3}
 801e11e:	b503      	push	{r0, r1, lr}
 801e120:	4601      	mov	r1, r0
 801e122:	ab03      	add	r3, sp, #12
 801e124:	4805      	ldr	r0, [pc, #20]	@ (801e13c <fiprintf+0x20>)
 801e126:	f853 2b04 	ldr.w	r2, [r3], #4
 801e12a:	6800      	ldr	r0, [r0, #0]
 801e12c:	9301      	str	r3, [sp, #4]
 801e12e:	f7ff fca3 	bl	801da78 <_vfiprintf_r>
 801e132:	b002      	add	sp, #8
 801e134:	f85d eb04 	ldr.w	lr, [sp], #4
 801e138:	b003      	add	sp, #12
 801e13a:	4770      	bx	lr
 801e13c:	2000013c 	.word	0x2000013c

0801e140 <__swbuf_r>:
 801e140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e142:	460e      	mov	r6, r1
 801e144:	4614      	mov	r4, r2
 801e146:	4605      	mov	r5, r0
 801e148:	b118      	cbz	r0, 801e152 <__swbuf_r+0x12>
 801e14a:	6a03      	ldr	r3, [r0, #32]
 801e14c:	b90b      	cbnz	r3, 801e152 <__swbuf_r+0x12>
 801e14e:	f7ff f8d7 	bl	801d300 <__sinit>
 801e152:	69a3      	ldr	r3, [r4, #24]
 801e154:	60a3      	str	r3, [r4, #8]
 801e156:	89a3      	ldrh	r3, [r4, #12]
 801e158:	071a      	lsls	r2, r3, #28
 801e15a:	d501      	bpl.n	801e160 <__swbuf_r+0x20>
 801e15c:	6923      	ldr	r3, [r4, #16]
 801e15e:	b943      	cbnz	r3, 801e172 <__swbuf_r+0x32>
 801e160:	4621      	mov	r1, r4
 801e162:	4628      	mov	r0, r5
 801e164:	f000 f82a 	bl	801e1bc <__swsetup_r>
 801e168:	b118      	cbz	r0, 801e172 <__swbuf_r+0x32>
 801e16a:	f04f 37ff 	mov.w	r7, #4294967295
 801e16e:	4638      	mov	r0, r7
 801e170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e172:	6823      	ldr	r3, [r4, #0]
 801e174:	6922      	ldr	r2, [r4, #16]
 801e176:	1a98      	subs	r0, r3, r2
 801e178:	6963      	ldr	r3, [r4, #20]
 801e17a:	b2f6      	uxtb	r6, r6
 801e17c:	4283      	cmp	r3, r0
 801e17e:	4637      	mov	r7, r6
 801e180:	dc05      	bgt.n	801e18e <__swbuf_r+0x4e>
 801e182:	4621      	mov	r1, r4
 801e184:	4628      	mov	r0, r5
 801e186:	f7ff ffa1 	bl	801e0cc <_fflush_r>
 801e18a:	2800      	cmp	r0, #0
 801e18c:	d1ed      	bne.n	801e16a <__swbuf_r+0x2a>
 801e18e:	68a3      	ldr	r3, [r4, #8]
 801e190:	3b01      	subs	r3, #1
 801e192:	60a3      	str	r3, [r4, #8]
 801e194:	6823      	ldr	r3, [r4, #0]
 801e196:	1c5a      	adds	r2, r3, #1
 801e198:	6022      	str	r2, [r4, #0]
 801e19a:	701e      	strb	r6, [r3, #0]
 801e19c:	6962      	ldr	r2, [r4, #20]
 801e19e:	1c43      	adds	r3, r0, #1
 801e1a0:	429a      	cmp	r2, r3
 801e1a2:	d004      	beq.n	801e1ae <__swbuf_r+0x6e>
 801e1a4:	89a3      	ldrh	r3, [r4, #12]
 801e1a6:	07db      	lsls	r3, r3, #31
 801e1a8:	d5e1      	bpl.n	801e16e <__swbuf_r+0x2e>
 801e1aa:	2e0a      	cmp	r6, #10
 801e1ac:	d1df      	bne.n	801e16e <__swbuf_r+0x2e>
 801e1ae:	4621      	mov	r1, r4
 801e1b0:	4628      	mov	r0, r5
 801e1b2:	f7ff ff8b 	bl	801e0cc <_fflush_r>
 801e1b6:	2800      	cmp	r0, #0
 801e1b8:	d0d9      	beq.n	801e16e <__swbuf_r+0x2e>
 801e1ba:	e7d6      	b.n	801e16a <__swbuf_r+0x2a>

0801e1bc <__swsetup_r>:
 801e1bc:	b538      	push	{r3, r4, r5, lr}
 801e1be:	4b29      	ldr	r3, [pc, #164]	@ (801e264 <__swsetup_r+0xa8>)
 801e1c0:	4605      	mov	r5, r0
 801e1c2:	6818      	ldr	r0, [r3, #0]
 801e1c4:	460c      	mov	r4, r1
 801e1c6:	b118      	cbz	r0, 801e1d0 <__swsetup_r+0x14>
 801e1c8:	6a03      	ldr	r3, [r0, #32]
 801e1ca:	b90b      	cbnz	r3, 801e1d0 <__swsetup_r+0x14>
 801e1cc:	f7ff f898 	bl	801d300 <__sinit>
 801e1d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e1d4:	0719      	lsls	r1, r3, #28
 801e1d6:	d422      	bmi.n	801e21e <__swsetup_r+0x62>
 801e1d8:	06da      	lsls	r2, r3, #27
 801e1da:	d407      	bmi.n	801e1ec <__swsetup_r+0x30>
 801e1dc:	2209      	movs	r2, #9
 801e1de:	602a      	str	r2, [r5, #0]
 801e1e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e1e4:	81a3      	strh	r3, [r4, #12]
 801e1e6:	f04f 30ff 	mov.w	r0, #4294967295
 801e1ea:	e033      	b.n	801e254 <__swsetup_r+0x98>
 801e1ec:	0758      	lsls	r0, r3, #29
 801e1ee:	d512      	bpl.n	801e216 <__swsetup_r+0x5a>
 801e1f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e1f2:	b141      	cbz	r1, 801e206 <__swsetup_r+0x4a>
 801e1f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e1f8:	4299      	cmp	r1, r3
 801e1fa:	d002      	beq.n	801e202 <__swsetup_r+0x46>
 801e1fc:	4628      	mov	r0, r5
 801e1fe:	f7ff fa6f 	bl	801d6e0 <_free_r>
 801e202:	2300      	movs	r3, #0
 801e204:	6363      	str	r3, [r4, #52]	@ 0x34
 801e206:	89a3      	ldrh	r3, [r4, #12]
 801e208:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e20c:	81a3      	strh	r3, [r4, #12]
 801e20e:	2300      	movs	r3, #0
 801e210:	6063      	str	r3, [r4, #4]
 801e212:	6923      	ldr	r3, [r4, #16]
 801e214:	6023      	str	r3, [r4, #0]
 801e216:	89a3      	ldrh	r3, [r4, #12]
 801e218:	f043 0308 	orr.w	r3, r3, #8
 801e21c:	81a3      	strh	r3, [r4, #12]
 801e21e:	6923      	ldr	r3, [r4, #16]
 801e220:	b94b      	cbnz	r3, 801e236 <__swsetup_r+0x7a>
 801e222:	89a3      	ldrh	r3, [r4, #12]
 801e224:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e22c:	d003      	beq.n	801e236 <__swsetup_r+0x7a>
 801e22e:	4621      	mov	r1, r4
 801e230:	4628      	mov	r0, r5
 801e232:	f000 f874 	bl	801e31e <__smakebuf_r>
 801e236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e23a:	f013 0201 	ands.w	r2, r3, #1
 801e23e:	d00a      	beq.n	801e256 <__swsetup_r+0x9a>
 801e240:	2200      	movs	r2, #0
 801e242:	60a2      	str	r2, [r4, #8]
 801e244:	6962      	ldr	r2, [r4, #20]
 801e246:	4252      	negs	r2, r2
 801e248:	61a2      	str	r2, [r4, #24]
 801e24a:	6922      	ldr	r2, [r4, #16]
 801e24c:	b942      	cbnz	r2, 801e260 <__swsetup_r+0xa4>
 801e24e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e252:	d1c5      	bne.n	801e1e0 <__swsetup_r+0x24>
 801e254:	bd38      	pop	{r3, r4, r5, pc}
 801e256:	0799      	lsls	r1, r3, #30
 801e258:	bf58      	it	pl
 801e25a:	6962      	ldrpl	r2, [r4, #20]
 801e25c:	60a2      	str	r2, [r4, #8]
 801e25e:	e7f4      	b.n	801e24a <__swsetup_r+0x8e>
 801e260:	2000      	movs	r0, #0
 801e262:	e7f7      	b.n	801e254 <__swsetup_r+0x98>
 801e264:	2000013c 	.word	0x2000013c

0801e268 <abort>:
 801e268:	b508      	push	{r3, lr}
 801e26a:	2006      	movs	r0, #6
 801e26c:	f000 f8bc 	bl	801e3e8 <raise>
 801e270:	2001      	movs	r0, #1
 801e272:	f7e3 fdd1 	bl	8001e18 <_exit>

0801e276 <_realloc_r>:
 801e276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e27a:	4680      	mov	r8, r0
 801e27c:	4615      	mov	r5, r2
 801e27e:	460c      	mov	r4, r1
 801e280:	b921      	cbnz	r1, 801e28c <_realloc_r+0x16>
 801e282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e286:	4611      	mov	r1, r2
 801e288:	f7fe bee4 	b.w	801d054 <_malloc_r>
 801e28c:	b92a      	cbnz	r2, 801e29a <_realloc_r+0x24>
 801e28e:	f7ff fa27 	bl	801d6e0 <_free_r>
 801e292:	2400      	movs	r4, #0
 801e294:	4620      	mov	r0, r4
 801e296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e29a:	f000 f8e3 	bl	801e464 <_malloc_usable_size_r>
 801e29e:	4285      	cmp	r5, r0
 801e2a0:	4606      	mov	r6, r0
 801e2a2:	d802      	bhi.n	801e2aa <_realloc_r+0x34>
 801e2a4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801e2a8:	d8f4      	bhi.n	801e294 <_realloc_r+0x1e>
 801e2aa:	4629      	mov	r1, r5
 801e2ac:	4640      	mov	r0, r8
 801e2ae:	f7fe fed1 	bl	801d054 <_malloc_r>
 801e2b2:	4607      	mov	r7, r0
 801e2b4:	2800      	cmp	r0, #0
 801e2b6:	d0ec      	beq.n	801e292 <_realloc_r+0x1c>
 801e2b8:	42b5      	cmp	r5, r6
 801e2ba:	462a      	mov	r2, r5
 801e2bc:	4621      	mov	r1, r4
 801e2be:	bf28      	it	cs
 801e2c0:	4632      	movcs	r2, r6
 801e2c2:	f7ff f9e0 	bl	801d686 <memcpy>
 801e2c6:	4621      	mov	r1, r4
 801e2c8:	4640      	mov	r0, r8
 801e2ca:	f7ff fa09 	bl	801d6e0 <_free_r>
 801e2ce:	463c      	mov	r4, r7
 801e2d0:	e7e0      	b.n	801e294 <_realloc_r+0x1e>

0801e2d2 <__swhatbuf_r>:
 801e2d2:	b570      	push	{r4, r5, r6, lr}
 801e2d4:	460c      	mov	r4, r1
 801e2d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e2da:	2900      	cmp	r1, #0
 801e2dc:	b096      	sub	sp, #88	@ 0x58
 801e2de:	4615      	mov	r5, r2
 801e2e0:	461e      	mov	r6, r3
 801e2e2:	da0d      	bge.n	801e300 <__swhatbuf_r+0x2e>
 801e2e4:	89a3      	ldrh	r3, [r4, #12]
 801e2e6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e2ea:	f04f 0100 	mov.w	r1, #0
 801e2ee:	bf14      	ite	ne
 801e2f0:	2340      	movne	r3, #64	@ 0x40
 801e2f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e2f6:	2000      	movs	r0, #0
 801e2f8:	6031      	str	r1, [r6, #0]
 801e2fa:	602b      	str	r3, [r5, #0]
 801e2fc:	b016      	add	sp, #88	@ 0x58
 801e2fe:	bd70      	pop	{r4, r5, r6, pc}
 801e300:	466a      	mov	r2, sp
 801e302:	f000 f879 	bl	801e3f8 <_fstat_r>
 801e306:	2800      	cmp	r0, #0
 801e308:	dbec      	blt.n	801e2e4 <__swhatbuf_r+0x12>
 801e30a:	9901      	ldr	r1, [sp, #4]
 801e30c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e310:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e314:	4259      	negs	r1, r3
 801e316:	4159      	adcs	r1, r3
 801e318:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e31c:	e7eb      	b.n	801e2f6 <__swhatbuf_r+0x24>

0801e31e <__smakebuf_r>:
 801e31e:	898b      	ldrh	r3, [r1, #12]
 801e320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e322:	079d      	lsls	r5, r3, #30
 801e324:	4606      	mov	r6, r0
 801e326:	460c      	mov	r4, r1
 801e328:	d507      	bpl.n	801e33a <__smakebuf_r+0x1c>
 801e32a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e32e:	6023      	str	r3, [r4, #0]
 801e330:	6123      	str	r3, [r4, #16]
 801e332:	2301      	movs	r3, #1
 801e334:	6163      	str	r3, [r4, #20]
 801e336:	b003      	add	sp, #12
 801e338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e33a:	ab01      	add	r3, sp, #4
 801e33c:	466a      	mov	r2, sp
 801e33e:	f7ff ffc8 	bl	801e2d2 <__swhatbuf_r>
 801e342:	9f00      	ldr	r7, [sp, #0]
 801e344:	4605      	mov	r5, r0
 801e346:	4639      	mov	r1, r7
 801e348:	4630      	mov	r0, r6
 801e34a:	f7fe fe83 	bl	801d054 <_malloc_r>
 801e34e:	b948      	cbnz	r0, 801e364 <__smakebuf_r+0x46>
 801e350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e354:	059a      	lsls	r2, r3, #22
 801e356:	d4ee      	bmi.n	801e336 <__smakebuf_r+0x18>
 801e358:	f023 0303 	bic.w	r3, r3, #3
 801e35c:	f043 0302 	orr.w	r3, r3, #2
 801e360:	81a3      	strh	r3, [r4, #12]
 801e362:	e7e2      	b.n	801e32a <__smakebuf_r+0xc>
 801e364:	89a3      	ldrh	r3, [r4, #12]
 801e366:	6020      	str	r0, [r4, #0]
 801e368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e36c:	81a3      	strh	r3, [r4, #12]
 801e36e:	9b01      	ldr	r3, [sp, #4]
 801e370:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e374:	b15b      	cbz	r3, 801e38e <__smakebuf_r+0x70>
 801e376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e37a:	4630      	mov	r0, r6
 801e37c:	f000 f84e 	bl	801e41c <_isatty_r>
 801e380:	b128      	cbz	r0, 801e38e <__smakebuf_r+0x70>
 801e382:	89a3      	ldrh	r3, [r4, #12]
 801e384:	f023 0303 	bic.w	r3, r3, #3
 801e388:	f043 0301 	orr.w	r3, r3, #1
 801e38c:	81a3      	strh	r3, [r4, #12]
 801e38e:	89a3      	ldrh	r3, [r4, #12]
 801e390:	431d      	orrs	r5, r3
 801e392:	81a5      	strh	r5, [r4, #12]
 801e394:	e7cf      	b.n	801e336 <__smakebuf_r+0x18>

0801e396 <_raise_r>:
 801e396:	291f      	cmp	r1, #31
 801e398:	b538      	push	{r3, r4, r5, lr}
 801e39a:	4605      	mov	r5, r0
 801e39c:	460c      	mov	r4, r1
 801e39e:	d904      	bls.n	801e3aa <_raise_r+0x14>
 801e3a0:	2316      	movs	r3, #22
 801e3a2:	6003      	str	r3, [r0, #0]
 801e3a4:	f04f 30ff 	mov.w	r0, #4294967295
 801e3a8:	bd38      	pop	{r3, r4, r5, pc}
 801e3aa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e3ac:	b112      	cbz	r2, 801e3b4 <_raise_r+0x1e>
 801e3ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e3b2:	b94b      	cbnz	r3, 801e3c8 <_raise_r+0x32>
 801e3b4:	4628      	mov	r0, r5
 801e3b6:	f000 f853 	bl	801e460 <_getpid_r>
 801e3ba:	4622      	mov	r2, r4
 801e3bc:	4601      	mov	r1, r0
 801e3be:	4628      	mov	r0, r5
 801e3c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e3c4:	f000 b83a 	b.w	801e43c <_kill_r>
 801e3c8:	2b01      	cmp	r3, #1
 801e3ca:	d00a      	beq.n	801e3e2 <_raise_r+0x4c>
 801e3cc:	1c59      	adds	r1, r3, #1
 801e3ce:	d103      	bne.n	801e3d8 <_raise_r+0x42>
 801e3d0:	2316      	movs	r3, #22
 801e3d2:	6003      	str	r3, [r0, #0]
 801e3d4:	2001      	movs	r0, #1
 801e3d6:	e7e7      	b.n	801e3a8 <_raise_r+0x12>
 801e3d8:	2100      	movs	r1, #0
 801e3da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e3de:	4620      	mov	r0, r4
 801e3e0:	4798      	blx	r3
 801e3e2:	2000      	movs	r0, #0
 801e3e4:	e7e0      	b.n	801e3a8 <_raise_r+0x12>
	...

0801e3e8 <raise>:
 801e3e8:	4b02      	ldr	r3, [pc, #8]	@ (801e3f4 <raise+0xc>)
 801e3ea:	4601      	mov	r1, r0
 801e3ec:	6818      	ldr	r0, [r3, #0]
 801e3ee:	f7ff bfd2 	b.w	801e396 <_raise_r>
 801e3f2:	bf00      	nop
 801e3f4:	2000013c 	.word	0x2000013c

0801e3f8 <_fstat_r>:
 801e3f8:	b538      	push	{r3, r4, r5, lr}
 801e3fa:	4d07      	ldr	r5, [pc, #28]	@ (801e418 <_fstat_r+0x20>)
 801e3fc:	2300      	movs	r3, #0
 801e3fe:	4604      	mov	r4, r0
 801e400:	4608      	mov	r0, r1
 801e402:	4611      	mov	r1, r2
 801e404:	602b      	str	r3, [r5, #0]
 801e406:	f7e3 fd57 	bl	8001eb8 <_fstat>
 801e40a:	1c43      	adds	r3, r0, #1
 801e40c:	d102      	bne.n	801e414 <_fstat_r+0x1c>
 801e40e:	682b      	ldr	r3, [r5, #0]
 801e410:	b103      	cbz	r3, 801e414 <_fstat_r+0x1c>
 801e412:	6023      	str	r3, [r4, #0]
 801e414:	bd38      	pop	{r3, r4, r5, pc}
 801e416:	bf00      	nop
 801e418:	200100bc 	.word	0x200100bc

0801e41c <_isatty_r>:
 801e41c:	b538      	push	{r3, r4, r5, lr}
 801e41e:	4d06      	ldr	r5, [pc, #24]	@ (801e438 <_isatty_r+0x1c>)
 801e420:	2300      	movs	r3, #0
 801e422:	4604      	mov	r4, r0
 801e424:	4608      	mov	r0, r1
 801e426:	602b      	str	r3, [r5, #0]
 801e428:	f7e3 fd56 	bl	8001ed8 <_isatty>
 801e42c:	1c43      	adds	r3, r0, #1
 801e42e:	d102      	bne.n	801e436 <_isatty_r+0x1a>
 801e430:	682b      	ldr	r3, [r5, #0]
 801e432:	b103      	cbz	r3, 801e436 <_isatty_r+0x1a>
 801e434:	6023      	str	r3, [r4, #0]
 801e436:	bd38      	pop	{r3, r4, r5, pc}
 801e438:	200100bc 	.word	0x200100bc

0801e43c <_kill_r>:
 801e43c:	b538      	push	{r3, r4, r5, lr}
 801e43e:	4d07      	ldr	r5, [pc, #28]	@ (801e45c <_kill_r+0x20>)
 801e440:	2300      	movs	r3, #0
 801e442:	4604      	mov	r4, r0
 801e444:	4608      	mov	r0, r1
 801e446:	4611      	mov	r1, r2
 801e448:	602b      	str	r3, [r5, #0]
 801e44a:	f7e3 fcd3 	bl	8001df4 <_kill>
 801e44e:	1c43      	adds	r3, r0, #1
 801e450:	d102      	bne.n	801e458 <_kill_r+0x1c>
 801e452:	682b      	ldr	r3, [r5, #0]
 801e454:	b103      	cbz	r3, 801e458 <_kill_r+0x1c>
 801e456:	6023      	str	r3, [r4, #0]
 801e458:	bd38      	pop	{r3, r4, r5, pc}
 801e45a:	bf00      	nop
 801e45c:	200100bc 	.word	0x200100bc

0801e460 <_getpid_r>:
 801e460:	f7e3 bcc0 	b.w	8001de4 <_getpid>

0801e464 <_malloc_usable_size_r>:
 801e464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e468:	1f18      	subs	r0, r3, #4
 801e46a:	2b00      	cmp	r3, #0
 801e46c:	bfbc      	itt	lt
 801e46e:	580b      	ldrlt	r3, [r1, r0]
 801e470:	18c0      	addlt	r0, r0, r3
 801e472:	4770      	bx	lr

0801e474 <_init>:
 801e474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e476:	bf00      	nop
 801e478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e47a:	bc08      	pop	{r3}
 801e47c:	469e      	mov	lr, r3
 801e47e:	4770      	bx	lr

0801e480 <_fini>:
 801e480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e482:	bf00      	nop
 801e484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e486:	bc08      	pop	{r3}
 801e488:	469e      	mov	lr, r3
 801e48a:	4770      	bx	lr
