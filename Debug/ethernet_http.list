
ethernet_http.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e2fc  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000150d4  0801e4fc  0801e4fc  0001f4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080335d0  080335d0  000352cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080335d0  080335d0  000345d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080335d8  080335d8  000352cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080335d8  080335d8  000345d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080335dc  080335dc  000345dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  080335e0  00035000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000018c  0803376c  0003518c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000022c  0803380c  0003522c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000fdf8  200002cc  080338ac  000352cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200100c4  080338ac  000360c4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000352cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003e022  00000000  00000000  000352fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009e14  00000000  00000000  0007331c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002ca0  00000000  00000000  0007d130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000022f1  00000000  00000000  0007fdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d6a2  00000000  00000000  000820c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000465ad  00000000  00000000  000bf763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001217e3  00000000  00000000  00105d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002274f3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c24c  00000000  00000000  00227538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000058  00000000  00000000  00233784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002cc 	.word	0x200002cc
 800021c:	00000000 	.word	0x00000000
 8000220:	0801e4e4 	.word	0x0801e4e4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002d0 	.word	0x200002d0
 800023c:	0801e4e4 	.word	0x0801e4e4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9d3 	b.w	80006d8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b988 	b.w	80006d8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	468e      	mov	lr, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	4688      	mov	r8, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d962      	bls.n	80004bc <__udivmoddi4+0xdc>
 80003f6:	fab2 f682 	clz	r6, r2
 80003fa:	b14e      	cbz	r6, 8000410 <__udivmoddi4+0x30>
 80003fc:	f1c6 0320 	rsb	r3, r6, #32
 8000400:	fa01 f806 	lsl.w	r8, r1, r6
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	40b7      	lsls	r7, r6
 800040a:	ea43 0808 	orr.w	r8, r3, r8
 800040e:	40b4      	lsls	r4, r6
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fbb8 f1fe 	udiv	r1, r8, lr
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fb01 f20c 	mul.w	r2, r1, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0x62>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f101 30ff 	add.w	r0, r1, #4294967295
 8000434:	f080 80ea 	bcs.w	800060c <__udivmoddi4+0x22c>
 8000438:	429a      	cmp	r2, r3
 800043a:	f240 80e7 	bls.w	800060c <__udivmoddi4+0x22c>
 800043e:	3902      	subs	r1, #2
 8000440:	443b      	add	r3, r7
 8000442:	1a9a      	subs	r2, r3, r2
 8000444:	b2a3      	uxth	r3, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000452:	fb00 fc0c 	mul.w	ip, r0, ip
 8000456:	459c      	cmp	ip, r3
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x8e>
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	f080 80d6 	bcs.w	8000610 <__udivmoddi4+0x230>
 8000464:	459c      	cmp	ip, r3
 8000466:	f240 80d3 	bls.w	8000610 <__udivmoddi4+0x230>
 800046a:	443b      	add	r3, r7
 800046c:	3802      	subs	r0, #2
 800046e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000472:	eba3 030c 	sub.w	r3, r3, ip
 8000476:	2100      	movs	r1, #0
 8000478:	b11d      	cbz	r5, 8000482 <__udivmoddi4+0xa2>
 800047a:	40f3      	lsrs	r3, r6
 800047c:	2200      	movs	r2, #0
 800047e:	e9c5 3200 	strd	r3, r2, [r5]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d905      	bls.n	8000496 <__udivmoddi4+0xb6>
 800048a:	b10d      	cbz	r5, 8000490 <__udivmoddi4+0xb0>
 800048c:	e9c5 0100 	strd	r0, r1, [r5]
 8000490:	2100      	movs	r1, #0
 8000492:	4608      	mov	r0, r1
 8000494:	e7f5      	b.n	8000482 <__udivmoddi4+0xa2>
 8000496:	fab3 f183 	clz	r1, r3
 800049a:	2900      	cmp	r1, #0
 800049c:	d146      	bne.n	800052c <__udivmoddi4+0x14c>
 800049e:	4573      	cmp	r3, lr
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xc8>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 8105 	bhi.w	80006b2 <__udivmoddi4+0x2d2>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	4690      	mov	r8, r2
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e5      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004b6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ba:	e7e2      	b.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	f000 8090 	beq.w	80005e2 <__udivmoddi4+0x202>
 80004c2:	fab2 f682 	clz	r6, r2
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	f040 80a4 	bne.w	8000614 <__udivmoddi4+0x234>
 80004cc:	1a8a      	subs	r2, r1, r2
 80004ce:	0c03      	lsrs	r3, r0, #16
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	b280      	uxth	r0, r0
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	2101      	movs	r1, #1
 80004da:	fbb2 fcfe 	udiv	ip, r2, lr
 80004de:	fb0e 221c 	mls	r2, lr, ip, r2
 80004e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x11e>
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x11c>
 80004f6:	429a      	cmp	r2, r3
 80004f8:	f200 80e0 	bhi.w	80006bc <__udivmoddi4+0x2dc>
 80004fc:	46c4      	mov	ip, r8
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	fbb3 f2fe 	udiv	r2, r3, lr
 8000504:	fb0e 3312 	mls	r3, lr, r2, r3
 8000508:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800050c:	fb02 f404 	mul.w	r4, r2, r4
 8000510:	429c      	cmp	r4, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x144>
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	f102 30ff 	add.w	r0, r2, #4294967295
 800051a:	d202      	bcs.n	8000522 <__udivmoddi4+0x142>
 800051c:	429c      	cmp	r4, r3
 800051e:	f200 80ca 	bhi.w	80006b6 <__udivmoddi4+0x2d6>
 8000522:	4602      	mov	r2, r0
 8000524:	1b1b      	subs	r3, r3, r4
 8000526:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800052a:	e7a5      	b.n	8000478 <__udivmoddi4+0x98>
 800052c:	f1c1 0620 	rsb	r6, r1, #32
 8000530:	408b      	lsls	r3, r1
 8000532:	fa22 f706 	lsr.w	r7, r2, r6
 8000536:	431f      	orrs	r7, r3
 8000538:	fa0e f401 	lsl.w	r4, lr, r1
 800053c:	fa20 f306 	lsr.w	r3, r0, r6
 8000540:	fa2e fe06 	lsr.w	lr, lr, r6
 8000544:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000548:	4323      	orrs	r3, r4
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	fa1f fc87 	uxth.w	ip, r7
 8000552:	fbbe f0f9 	udiv	r0, lr, r9
 8000556:	0c1c      	lsrs	r4, r3, #16
 8000558:	fb09 ee10 	mls	lr, r9, r0, lr
 800055c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000560:	fb00 fe0c 	mul.w	lr, r0, ip
 8000564:	45a6      	cmp	lr, r4
 8000566:	fa02 f201 	lsl.w	r2, r2, r1
 800056a:	d909      	bls.n	8000580 <__udivmoddi4+0x1a0>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000572:	f080 809c 	bcs.w	80006ae <__udivmoddi4+0x2ce>
 8000576:	45a6      	cmp	lr, r4
 8000578:	f240 8099 	bls.w	80006ae <__udivmoddi4+0x2ce>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	eba4 040e 	sub.w	r4, r4, lr
 8000584:	fa1f fe83 	uxth.w	lr, r3
 8000588:	fbb4 f3f9 	udiv	r3, r4, r9
 800058c:	fb09 4413 	mls	r4, r9, r3, r4
 8000590:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000594:	fb03 fc0c 	mul.w	ip, r3, ip
 8000598:	45a4      	cmp	ip, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x1ce>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f103 3eff 	add.w	lr, r3, #4294967295
 80005a2:	f080 8082 	bcs.w	80006aa <__udivmoddi4+0x2ca>
 80005a6:	45a4      	cmp	ip, r4
 80005a8:	d97f      	bls.n	80006aa <__udivmoddi4+0x2ca>
 80005aa:	3b02      	subs	r3, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005b2:	eba4 040c 	sub.w	r4, r4, ip
 80005b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ba:	4564      	cmp	r4, ip
 80005bc:	4673      	mov	r3, lr
 80005be:	46e1      	mov	r9, ip
 80005c0:	d362      	bcc.n	8000688 <__udivmoddi4+0x2a8>
 80005c2:	d05f      	beq.n	8000684 <__udivmoddi4+0x2a4>
 80005c4:	b15d      	cbz	r5, 80005de <__udivmoddi4+0x1fe>
 80005c6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ca:	eb64 0409 	sbc.w	r4, r4, r9
 80005ce:	fa04 f606 	lsl.w	r6, r4, r6
 80005d2:	fa22 f301 	lsr.w	r3, r2, r1
 80005d6:	431e      	orrs	r6, r3
 80005d8:	40cc      	lsrs	r4, r1
 80005da:	e9c5 6400 	strd	r6, r4, [r5]
 80005de:	2100      	movs	r1, #0
 80005e0:	e74f      	b.n	8000482 <__udivmoddi4+0xa2>
 80005e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005e6:	0c01      	lsrs	r1, r0, #16
 80005e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005ec:	b280      	uxth	r0, r0
 80005ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005f2:	463b      	mov	r3, r7
 80005f4:	4638      	mov	r0, r7
 80005f6:	463c      	mov	r4, r7
 80005f8:	46b8      	mov	r8, r7
 80005fa:	46be      	mov	lr, r7
 80005fc:	2620      	movs	r6, #32
 80005fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000602:	eba2 0208 	sub.w	r2, r2, r8
 8000606:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800060a:	e766      	b.n	80004da <__udivmoddi4+0xfa>
 800060c:	4601      	mov	r1, r0
 800060e:	e718      	b.n	8000442 <__udivmoddi4+0x62>
 8000610:	4610      	mov	r0, r2
 8000612:	e72c      	b.n	800046e <__udivmoddi4+0x8e>
 8000614:	f1c6 0220 	rsb	r2, r6, #32
 8000618:	fa2e f302 	lsr.w	r3, lr, r2
 800061c:	40b7      	lsls	r7, r6
 800061e:	40b1      	lsls	r1, r6
 8000620:	fa20 f202 	lsr.w	r2, r0, r2
 8000624:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000628:	430a      	orrs	r2, r1
 800062a:	fbb3 f8fe 	udiv	r8, r3, lr
 800062e:	b2bc      	uxth	r4, r7
 8000630:	fb0e 3318 	mls	r3, lr, r8, r3
 8000634:	0c11      	lsrs	r1, r2, #16
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb08 f904 	mul.w	r9, r8, r4
 800063e:	40b0      	lsls	r0, r6
 8000640:	4589      	cmp	r9, r1
 8000642:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000646:	b280      	uxth	r0, r0
 8000648:	d93e      	bls.n	80006c8 <__udivmoddi4+0x2e8>
 800064a:	1879      	adds	r1, r7, r1
 800064c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000650:	d201      	bcs.n	8000656 <__udivmoddi4+0x276>
 8000652:	4589      	cmp	r9, r1
 8000654:	d81f      	bhi.n	8000696 <__udivmoddi4+0x2b6>
 8000656:	eba1 0109 	sub.w	r1, r1, r9
 800065a:	fbb1 f9fe 	udiv	r9, r1, lr
 800065e:	fb09 f804 	mul.w	r8, r9, r4
 8000662:	fb0e 1119 	mls	r1, lr, r9, r1
 8000666:	b292      	uxth	r2, r2
 8000668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800066c:	4542      	cmp	r2, r8
 800066e:	d229      	bcs.n	80006c4 <__udivmoddi4+0x2e4>
 8000670:	18ba      	adds	r2, r7, r2
 8000672:	f109 31ff 	add.w	r1, r9, #4294967295
 8000676:	d2c4      	bcs.n	8000602 <__udivmoddi4+0x222>
 8000678:	4542      	cmp	r2, r8
 800067a:	d2c2      	bcs.n	8000602 <__udivmoddi4+0x222>
 800067c:	f1a9 0102 	sub.w	r1, r9, #2
 8000680:	443a      	add	r2, r7
 8000682:	e7be      	b.n	8000602 <__udivmoddi4+0x222>
 8000684:	45f0      	cmp	r8, lr
 8000686:	d29d      	bcs.n	80005c4 <__udivmoddi4+0x1e4>
 8000688:	ebbe 0302 	subs.w	r3, lr, r2
 800068c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000690:	3801      	subs	r0, #1
 8000692:	46e1      	mov	r9, ip
 8000694:	e796      	b.n	80005c4 <__udivmoddi4+0x1e4>
 8000696:	eba7 0909 	sub.w	r9, r7, r9
 800069a:	4449      	add	r1, r9
 800069c:	f1a8 0c02 	sub.w	ip, r8, #2
 80006a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a4:	fb09 f804 	mul.w	r8, r9, r4
 80006a8:	e7db      	b.n	8000662 <__udivmoddi4+0x282>
 80006aa:	4673      	mov	r3, lr
 80006ac:	e77f      	b.n	80005ae <__udivmoddi4+0x1ce>
 80006ae:	4650      	mov	r0, sl
 80006b0:	e766      	b.n	8000580 <__udivmoddi4+0x1a0>
 80006b2:	4608      	mov	r0, r1
 80006b4:	e6fd      	b.n	80004b2 <__udivmoddi4+0xd2>
 80006b6:	443b      	add	r3, r7
 80006b8:	3a02      	subs	r2, #2
 80006ba:	e733      	b.n	8000524 <__udivmoddi4+0x144>
 80006bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c0:	443b      	add	r3, r7
 80006c2:	e71c      	b.n	80004fe <__udivmoddi4+0x11e>
 80006c4:	4649      	mov	r1, r9
 80006c6:	e79c      	b.n	8000602 <__udivmoddi4+0x222>
 80006c8:	eba1 0109 	sub.w	r1, r1, r9
 80006cc:	46c4      	mov	ip, r8
 80006ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d2:	fb09 f804 	mul.w	r8, r9, r4
 80006d6:	e7c4      	b.n	8000662 <__udivmoddi4+0x282>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08c      	sub	sp, #48	@ 0x30
 80006e0:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	9302      	str	r3, [sp, #8]
 80006e8:	2319      	movs	r3, #25
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	463b      	mov	r3, r7
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	2288      	movs	r2, #136	@ 0x88
 80006f4:	21ec      	movs	r1, #236	@ 0xec
 80006f6:	485f      	ldr	r0, [pc, #380]	@ (8000874 <TrimRead+0x198>)
 80006f8:	f003 fd6c 	bl	80041d4 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80006fc:	463b      	mov	r3, r7
 80006fe:	3319      	adds	r3, #25
 8000700:	f04f 32ff 	mov.w	r2, #4294967295
 8000704:	9202      	str	r2, [sp, #8]
 8000706:	2207      	movs	r2, #7
 8000708:	9201      	str	r2, [sp, #4]
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2301      	movs	r3, #1
 800070e:	22e1      	movs	r2, #225	@ 0xe1
 8000710:	21ec      	movs	r1, #236	@ 0xec
 8000712:	4858      	ldr	r0, [pc, #352]	@ (8000874 <TrimRead+0x198>)
 8000714:	f003 fd5e 	bl	80041d4 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8000718:	787b      	ldrb	r3, [r7, #1]
 800071a:	b21b      	sxth	r3, r3
 800071c:	021b      	lsls	r3, r3, #8
 800071e:	b21a      	sxth	r2, r3
 8000720:	783b      	ldrb	r3, [r7, #0]
 8000722:	b21b      	sxth	r3, r3
 8000724:	4313      	orrs	r3, r2
 8000726:	b21b      	sxth	r3, r3
 8000728:	b29a      	uxth	r2, r3
 800072a:	4b53      	ldr	r3, [pc, #332]	@ (8000878 <TrimRead+0x19c>)
 800072c:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	b21b      	sxth	r3, r3
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	b21a      	sxth	r2, r3
 8000736:	78bb      	ldrb	r3, [r7, #2]
 8000738:	b21b      	sxth	r3, r3
 800073a:	4313      	orrs	r3, r2
 800073c:	b21a      	sxth	r2, r3
 800073e:	4b4f      	ldr	r3, [pc, #316]	@ (800087c <TrimRead+0x1a0>)
 8000740:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8000742:	797b      	ldrb	r3, [r7, #5]
 8000744:	b21b      	sxth	r3, r3
 8000746:	021b      	lsls	r3, r3, #8
 8000748:	b21a      	sxth	r2, r3
 800074a:	793b      	ldrb	r3, [r7, #4]
 800074c:	b21b      	sxth	r3, r3
 800074e:	4313      	orrs	r3, r2
 8000750:	b21a      	sxth	r2, r3
 8000752:	4b4b      	ldr	r3, [pc, #300]	@ (8000880 <TrimRead+0x1a4>)
 8000754:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	b21b      	sxth	r3, r3
 800075a:	021b      	lsls	r3, r3, #8
 800075c:	b21a      	sxth	r2, r3
 800075e:	797b      	ldrb	r3, [r7, #5]
 8000760:	b21b      	sxth	r3, r3
 8000762:	4313      	orrs	r3, r2
 8000764:	b21b      	sxth	r3, r3
 8000766:	b29a      	uxth	r2, r3
 8000768:	4b46      	ldr	r3, [pc, #280]	@ (8000884 <TrimRead+0x1a8>)
 800076a:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 800076c:	7a7b      	ldrb	r3, [r7, #9]
 800076e:	b21b      	sxth	r3, r3
 8000770:	021b      	lsls	r3, r3, #8
 8000772:	b21a      	sxth	r2, r3
 8000774:	79bb      	ldrb	r3, [r7, #6]
 8000776:	b21b      	sxth	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b21a      	sxth	r2, r3
 800077c:	4b42      	ldr	r3, [pc, #264]	@ (8000888 <TrimRead+0x1ac>)
 800077e:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8000780:	7afb      	ldrb	r3, [r7, #11]
 8000782:	b21b      	sxth	r3, r3
 8000784:	021b      	lsls	r3, r3, #8
 8000786:	b21a      	sxth	r2, r3
 8000788:	7abb      	ldrb	r3, [r7, #10]
 800078a:	b21b      	sxth	r3, r3
 800078c:	4313      	orrs	r3, r2
 800078e:	b21a      	sxth	r2, r3
 8000790:	4b3e      	ldr	r3, [pc, #248]	@ (800088c <TrimRead+0x1b0>)
 8000792:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	b21b      	sxth	r3, r3
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	b21a      	sxth	r2, r3
 800079c:	7b3b      	ldrb	r3, [r7, #12]
 800079e:	b21b      	sxth	r3, r3
 80007a0:	4313      	orrs	r3, r2
 80007a2:	b21a      	sxth	r2, r3
 80007a4:	4b3a      	ldr	r3, [pc, #232]	@ (8000890 <TrimRead+0x1b4>)
 80007a6:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	b21b      	sxth	r3, r3
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	b21a      	sxth	r2, r3
 80007b0:	7bbb      	ldrb	r3, [r7, #14]
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	4313      	orrs	r3, r2
 80007b6:	b21a      	sxth	r2, r3
 80007b8:	4b36      	ldr	r3, [pc, #216]	@ (8000894 <TrimRead+0x1b8>)
 80007ba:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80007bc:	7c7b      	ldrb	r3, [r7, #17]
 80007be:	b21b      	sxth	r3, r3
 80007c0:	021b      	lsls	r3, r3, #8
 80007c2:	b21a      	sxth	r2, r3
 80007c4:	7c3b      	ldrb	r3, [r7, #16]
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	4313      	orrs	r3, r2
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	4b32      	ldr	r3, [pc, #200]	@ (8000898 <TrimRead+0x1bc>)
 80007ce:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80007d0:	7cfb      	ldrb	r3, [r7, #19]
 80007d2:	b21b      	sxth	r3, r3
 80007d4:	021b      	lsls	r3, r3, #8
 80007d6:	b21a      	sxth	r2, r3
 80007d8:	7cbb      	ldrb	r3, [r7, #18]
 80007da:	b21b      	sxth	r3, r3
 80007dc:	4313      	orrs	r3, r2
 80007de:	b21a      	sxth	r2, r3
 80007e0:	4b2e      	ldr	r3, [pc, #184]	@ (800089c <TrimRead+0x1c0>)
 80007e2:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80007e4:	7d7b      	ldrb	r3, [r7, #21]
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	021b      	lsls	r3, r3, #8
 80007ea:	b21a      	sxth	r2, r3
 80007ec:	7d3b      	ldrb	r3, [r7, #20]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <TrimRead+0x1c4>)
 80007f6:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80007f8:	7dfb      	ldrb	r3, [r7, #23]
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b21a      	sxth	r2, r3
 8000800:	7dbb      	ldrb	r3, [r7, #22]
 8000802:	b21b      	sxth	r3, r3
 8000804:	4313      	orrs	r3, r2
 8000806:	b21a      	sxth	r2, r3
 8000808:	4b26      	ldr	r3, [pc, #152]	@ (80008a4 <TrimRead+0x1c8>)
 800080a:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 800080c:	7e3b      	ldrb	r3, [r7, #24]
 800080e:	461a      	mov	r2, r3
 8000810:	4b25      	ldr	r3, [pc, #148]	@ (80008a8 <TrimRead+0x1cc>)
 8000812:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8000814:	7ebb      	ldrb	r3, [r7, #26]
 8000816:	b21b      	sxth	r3, r3
 8000818:	021b      	lsls	r3, r3, #8
 800081a:	b21a      	sxth	r2, r3
 800081c:	7e7b      	ldrb	r3, [r7, #25]
 800081e:	b21b      	sxth	r3, r3
 8000820:	4313      	orrs	r3, r2
 8000822:	b21a      	sxth	r2, r3
 8000824:	4b21      	ldr	r3, [pc, #132]	@ (80008ac <TrimRead+0x1d0>)
 8000826:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8000828:	7efb      	ldrb	r3, [r7, #27]
 800082a:	461a      	mov	r2, r3
 800082c:	4b20      	ldr	r3, [pc, #128]	@ (80008b0 <TrimRead+0x1d4>)
 800082e:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8000830:	7f3b      	ldrb	r3, [r7, #28]
 8000832:	b21b      	sxth	r3, r3
 8000834:	011b      	lsls	r3, r3, #4
 8000836:	b21a      	sxth	r2, r3
 8000838:	7f7b      	ldrb	r3, [r7, #29]
 800083a:	b21b      	sxth	r3, r3
 800083c:	f003 030f 	and.w	r3, r3, #15
 8000840:	b21b      	sxth	r3, r3
 8000842:	4313      	orrs	r3, r2
 8000844:	b21a      	sxth	r2, r3
 8000846:	4b1b      	ldr	r3, [pc, #108]	@ (80008b4 <TrimRead+0x1d8>)
 8000848:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800084a:	7fbb      	ldrb	r3, [r7, #30]
 800084c:	b21b      	sxth	r3, r3
 800084e:	011b      	lsls	r3, r3, #4
 8000850:	b21a      	sxth	r2, r3
 8000852:	7f7b      	ldrb	r3, [r7, #29]
 8000854:	091b      	lsrs	r3, r3, #4
 8000856:	b2db      	uxtb	r3, r3
 8000858:	b21b      	sxth	r3, r3
 800085a:	4313      	orrs	r3, r2
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <TrimRead+0x1dc>)
 8000860:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8000862:	7ffb      	ldrb	r3, [r7, #31]
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <TrimRead+0x1e0>)
 8000868:	801a      	strh	r2, [r3, #0]
}
 800086a:	bf00      	nop
 800086c:	3720      	adds	r7, #32
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200005d0 	.word	0x200005d0
 8000878:	200002f8 	.word	0x200002f8
 800087c:	20000300 	.word	0x20000300
 8000880:	20000302 	.word	0x20000302
 8000884:	200002fa 	.word	0x200002fa
 8000888:	20000304 	.word	0x20000304
 800088c:	20000306 	.word	0x20000306
 8000890:	20000308 	.word	0x20000308
 8000894:	2000030a 	.word	0x2000030a
 8000898:	2000030c 	.word	0x2000030c
 800089c:	2000030e 	.word	0x2000030e
 80008a0:	20000310 	.word	0x20000310
 80008a4:	20000312 	.word	0x20000312
 80008a8:	200002fc 	.word	0x200002fc
 80008ac:	20000314 	.word	0x20000314
 80008b0:	200002fe 	.word	0x200002fe
 80008b4:	20000316 	.word	0x20000316
 80008b8:	20000318 	.word	0x20000318
 80008bc:	2000031a 	.word	0x2000031a

080008c0 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b089      	sub	sp, #36	@ 0x24
 80008c4:	af04      	add	r7, sp, #16
 80008c6:	4604      	mov	r4, r0
 80008c8:	4608      	mov	r0, r1
 80008ca:	4611      	mov	r1, r2
 80008cc:	461a      	mov	r2, r3
 80008ce:	4623      	mov	r3, r4
 80008d0:	71fb      	strb	r3, [r7, #7]
 80008d2:	4603      	mov	r3, r0
 80008d4:	71bb      	strb	r3, [r7, #6]
 80008d6:	460b      	mov	r3, r1
 80008d8:	717b      	strb	r3, [r7, #5]
 80008da:	4613      	mov	r3, r2
 80008dc:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80008de:	f7ff fefd 	bl	80006dc <TrimRead>


	uint8_t datatowrite = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80008ea:	23b6      	movs	r3, #182	@ 0xb6
 80008ec:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80008ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f2:	9302      	str	r3, [sp, #8]
 80008f4:	2301      	movs	r3, #1
 80008f6:	9301      	str	r3, [sp, #4]
 80008f8:	f107 030f 	add.w	r3, r7, #15
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2301      	movs	r3, #1
 8000900:	22e0      	movs	r2, #224	@ 0xe0
 8000902:	21ec      	movs	r1, #236	@ 0xec
 8000904:	4859      	ldr	r0, [pc, #356]	@ (8000a6c <BME280_Config+0x1ac>)
 8000906:	f003 fb51 	bl	8003fac <HAL_I2C_Mem_Write>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d002      	beq.n	8000916 <BME280_Config+0x56>
	{
		return -1;
 8000910:	f04f 33ff 	mov.w	r3, #4294967295
 8000914:	e0a5      	b.n	8000a62 <BME280_Config+0x1a2>
	}

	HAL_Delay (100);
 8000916:	2064      	movs	r0, #100	@ 0x64
 8000918:	f001 fccc 	bl	80022b4 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 800091c:	797b      	ldrb	r3, [r7, #5]
 800091e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000920:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000924:	9302      	str	r3, [sp, #8]
 8000926:	2301      	movs	r3, #1
 8000928:	9301      	str	r3, [sp, #4]
 800092a:	f107 030f 	add.w	r3, r7, #15
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2301      	movs	r3, #1
 8000932:	22f2      	movs	r2, #242	@ 0xf2
 8000934:	21ec      	movs	r1, #236	@ 0xec
 8000936:	484d      	ldr	r0, [pc, #308]	@ (8000a6c <BME280_Config+0x1ac>)
 8000938:	f003 fb38 	bl	8003fac <HAL_I2C_Mem_Write>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d002      	beq.n	8000948 <BME280_Config+0x88>
	{
		return -1;
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	e08c      	b.n	8000a62 <BME280_Config+0x1a2>
	}
	HAL_Delay (100);
 8000948:	2064      	movs	r0, #100	@ 0x64
 800094a:	f001 fcb3 	bl	80022b4 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800094e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000952:	9302      	str	r3, [sp, #8]
 8000954:	2301      	movs	r3, #1
 8000956:	9301      	str	r3, [sp, #4]
 8000958:	f107 030e 	add.w	r3, r7, #14
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2301      	movs	r3, #1
 8000960:	22f2      	movs	r2, #242	@ 0xf2
 8000962:	21ec      	movs	r1, #236	@ 0xec
 8000964:	4841      	ldr	r0, [pc, #260]	@ (8000a6c <BME280_Config+0x1ac>)
 8000966:	f003 fc35 	bl	80041d4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800096a:	7bba      	ldrb	r2, [r7, #14]
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	429a      	cmp	r2, r3
 8000970:	d002      	beq.n	8000978 <BME280_Config+0xb8>
	{
		return -1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
 8000976:	e074      	b.n	8000a62 <BME280_Config+0x1a2>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8000978:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800097c:	015b      	lsls	r3, r3, #5
 800097e:	b25a      	sxtb	r2, r3
 8000980:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	b25b      	sxtb	r3, r3
 8000988:	4313      	orrs	r3, r2
 800098a:	b25b      	sxtb	r3, r3
 800098c:	b2db      	uxtb	r3, r3
 800098e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000990:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000994:	9302      	str	r3, [sp, #8]
 8000996:	2301      	movs	r3, #1
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	f107 030f 	add.w	r3, r7, #15
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	2301      	movs	r3, #1
 80009a2:	22f5      	movs	r2, #245	@ 0xf5
 80009a4:	21ec      	movs	r1, #236	@ 0xec
 80009a6:	4831      	ldr	r0, [pc, #196]	@ (8000a6c <BME280_Config+0x1ac>)
 80009a8:	f003 fb00 	bl	8003fac <HAL_I2C_Mem_Write>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d002      	beq.n	80009b8 <BME280_Config+0xf8>
	{
		return -1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	e054      	b.n	8000a62 <BME280_Config+0x1a2>
	}
	HAL_Delay (100);
 80009b8:	2064      	movs	r0, #100	@ 0x64
 80009ba:	f001 fc7b 	bl	80022b4 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80009be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c2:	9302      	str	r3, [sp, #8]
 80009c4:	2301      	movs	r3, #1
 80009c6:	9301      	str	r3, [sp, #4]
 80009c8:	f107 030e 	add.w	r3, r7, #14
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2301      	movs	r3, #1
 80009d0:	22f5      	movs	r2, #245	@ 0xf5
 80009d2:	21ec      	movs	r1, #236	@ 0xec
 80009d4:	4825      	ldr	r0, [pc, #148]	@ (8000a6c <BME280_Config+0x1ac>)
 80009d6:	f003 fbfd 	bl	80041d4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80009da:	7bba      	ldrb	r2, [r7, #14]
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d002      	beq.n	80009e8 <BME280_Config+0x128>
	{
		return -1;
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	e03c      	b.n	8000a62 <BME280_Config+0x1a2>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	015b      	lsls	r3, r3, #5
 80009ee:	b25a      	sxtb	r2, r3
 80009f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b25a      	sxtb	r2, r3
 80009fc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000a08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0c:	9302      	str	r3, [sp, #8]
 8000a0e:	2301      	movs	r3, #1
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	f107 030f 	add.w	r3, r7, #15
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	22f4      	movs	r2, #244	@ 0xf4
 8000a1c:	21ec      	movs	r1, #236	@ 0xec
 8000a1e:	4813      	ldr	r0, [pc, #76]	@ (8000a6c <BME280_Config+0x1ac>)
 8000a20:	f003 fac4 	bl	8003fac <HAL_I2C_Mem_Write>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d002      	beq.n	8000a30 <BME280_Config+0x170>
	{
		return -1;
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	e018      	b.n	8000a62 <BME280_Config+0x1a2>
	}
	HAL_Delay (100);
 8000a30:	2064      	movs	r0, #100	@ 0x64
 8000a32:	f001 fc3f 	bl	80022b4 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8000a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a3a:	9302      	str	r3, [sp, #8]
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	9301      	str	r3, [sp, #4]
 8000a40:	f107 030e 	add.w	r3, r7, #14
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2301      	movs	r3, #1
 8000a48:	22f4      	movs	r2, #244	@ 0xf4
 8000a4a:	21ec      	movs	r1, #236	@ 0xec
 8000a4c:	4807      	ldr	r0, [pc, #28]	@ (8000a6c <BME280_Config+0x1ac>)
 8000a4e:	f003 fbc1 	bl	80041d4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8000a52:	7bba      	ldrb	r2, [r7, #14]
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d002      	beq.n	8000a60 <BME280_Config+0x1a0>
	{
		return -1;
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5e:	e000      	b.n	8000a62 <BME280_Config+0x1a2>
	}

	return 0;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd90      	pop	{r4, r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200005d0 	.word	0x200005d0

08000a70 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c2, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8000a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a7a:	9302      	str	r3, [sp, #8]
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	9301      	str	r3, [sp, #4]
 8000a80:	4b1e      	ldr	r3, [pc, #120]	@ (8000afc <BMEReadRaw+0x8c>)
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2301      	movs	r3, #1
 8000a86:	22d0      	movs	r2, #208	@ 0xd0
 8000a88:	21ec      	movs	r1, #236	@ 0xec
 8000a8a:	481d      	ldr	r0, [pc, #116]	@ (8000b00 <BMEReadRaw+0x90>)
 8000a8c:	f003 fba2 	bl	80041d4 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8000a90:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <BMEReadRaw+0x8c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b60      	cmp	r3, #96	@ 0x60
 8000a96:	d12a      	bne.n	8000aee <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	9302      	str	r3, [sp, #8]
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	9301      	str	r3, [sp, #4]
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	22f7      	movs	r2, #247	@ 0xf7
 8000aaa:	21ec      	movs	r1, #236	@ 0xec
 8000aac:	4814      	ldr	r0, [pc, #80]	@ (8000b00 <BMEReadRaw+0x90>)
 8000aae:	f003 fb91 	bl	80041d4 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8000ab2:	783b      	ldrb	r3, [r7, #0]
 8000ab4:	031a      	lsls	r2, r3, #12
 8000ab6:	787b      	ldrb	r3, [r7, #1]
 8000ab8:	011b      	lsls	r3, r3, #4
 8000aba:	4313      	orrs	r3, r2
 8000abc:	78ba      	ldrb	r2, [r7, #2]
 8000abe:	0912      	lsrs	r2, r2, #4
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	4a0f      	ldr	r2, [pc, #60]	@ (8000b04 <BMEReadRaw+0x94>)
 8000ac6:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8000ac8:	78fb      	ldrb	r3, [r7, #3]
 8000aca:	031a      	lsls	r2, r3, #12
 8000acc:	793b      	ldrb	r3, [r7, #4]
 8000ace:	011b      	lsls	r3, r3, #4
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	797a      	ldrb	r2, [r7, #5]
 8000ad4:	0912      	lsrs	r2, r2, #4
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	4a0b      	ldr	r2, [pc, #44]	@ (8000b08 <BMEReadRaw+0x98>)
 8000adc:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8000ade:	79bb      	ldrb	r3, [r7, #6]
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	79fa      	ldrb	r2, [r7, #7]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	4a09      	ldr	r2, [pc, #36]	@ (8000b0c <BMEReadRaw+0x9c>)
 8000ae8:	6013      	str	r3, [r2, #0]

		return 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e001      	b.n	8000af2 <BMEReadRaw+0x82>
	}

	else return -1;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200002e8 	.word	0x200002e8
 8000b00:	200005d0 	.word	0x200005d0
 8000b04:	200002f0 	.word	0x200002f0
 8000b08:	200002ec 	.word	0x200002ec
 8000b0c:	200002f4 	.word	0x200002f4

08000b10 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b087      	sub	sp, #28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	10da      	asrs	r2, r3, #3
 8000b1c:	4b19      	ldr	r3, [pc, #100]	@ (8000b84 <BME280_compensate_T_int32+0x74>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	4a18      	ldr	r2, [pc, #96]	@ (8000b88 <BME280_compensate_T_int32+0x78>)
 8000b26:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b2a:	fb02 f303 	mul.w	r3, r2, r3
 8000b2e:	12db      	asrs	r3, r3, #11
 8000b30:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	111b      	asrs	r3, r3, #4
 8000b36:	4a13      	ldr	r2, [pc, #76]	@ (8000b84 <BME280_compensate_T_int32+0x74>)
 8000b38:	8812      	ldrh	r2, [r2, #0]
 8000b3a:	1a9b      	subs	r3, r3, r2
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	1112      	asrs	r2, r2, #4
 8000b40:	4910      	ldr	r1, [pc, #64]	@ (8000b84 <BME280_compensate_T_int32+0x74>)
 8000b42:	8809      	ldrh	r1, [r1, #0]
 8000b44:	1a52      	subs	r2, r2, r1
 8000b46:	fb02 f303 	mul.w	r3, r2, r3
 8000b4a:	131b      	asrs	r3, r3, #12
 8000b4c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b8c <BME280_compensate_T_int32+0x7c>)
 8000b4e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b52:	fb02 f303 	mul.w	r3, r2, r3
 8000b56:	139b      	asrs	r3, r3, #14
 8000b58:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a0b      	ldr	r2, [pc, #44]	@ (8000b90 <BME280_compensate_T_int32+0x80>)
 8000b62:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <BME280_compensate_T_int32+0x80>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	4413      	add	r3, r2
 8000b6e:	3380      	adds	r3, #128	@ 0x80
 8000b70:	121b      	asrs	r3, r3, #8
 8000b72:	60fb      	str	r3, [r7, #12]
	return T;
 8000b74:	68fb      	ldr	r3, [r7, #12]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	371c      	adds	r7, #28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	200002f8 	.word	0x200002f8
 8000b88:	20000300 	.word	0x20000300
 8000b8c:	20000302 	.word	0x20000302
 8000b90:	2000031c 	.word	0x2000031c

08000b94 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8000b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b98:	b0ca      	sub	sp, #296	@ 0x128
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8000ba0:	4baf      	ldr	r3, [pc, #700]	@ (8000e60 <BME280_compensate_P_int64+0x2cc>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	17da      	asrs	r2, r3, #31
 8000ba6:	461c      	mov	r4, r3
 8000ba8:	4615      	mov	r5, r2
 8000baa:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000bae:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000bb2:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8000bb6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000bba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bbe:	fb03 f102 	mul.w	r1, r3, r2
 8000bc2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000bc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bca:	fb02 f303 	mul.w	r3, r2, r3
 8000bce:	18ca      	adds	r2, r1, r3
 8000bd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bd4:	fba3 8903 	umull	r8, r9, r3, r3
 8000bd8:	eb02 0309 	add.w	r3, r2, r9
 8000bdc:	4699      	mov	r9, r3
 8000bde:	4ba1      	ldr	r3, [pc, #644]	@ (8000e64 <BME280_compensate_P_int64+0x2d0>)
 8000be0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	17da      	asrs	r2, r3, #31
 8000be8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000bec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000bf0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	fb03 f209 	mul.w	r2, r3, r9
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	fb08 f303 	mul.w	r3, r8, r3
 8000c00:	4413      	add	r3, r2
 8000c02:	4602      	mov	r2, r0
 8000c04:	fba8 1202 	umull	r1, r2, r8, r2
 8000c08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000c0c:	460a      	mov	r2, r1
 8000c0e:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000c12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000c16:	4413      	add	r3, r2
 8000c18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000c1c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000c20:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000c24:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000c28:	4b8f      	ldr	r3, [pc, #572]	@ (8000e68 <BME280_compensate_P_int64+0x2d4>)
 8000c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c2e:	b21b      	sxth	r3, r3
 8000c30:	17da      	asrs	r2, r3, #31
 8000c32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000c36:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000c3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000c3e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000c42:	462a      	mov	r2, r5
 8000c44:	fb02 f203 	mul.w	r2, r2, r3
 8000c48:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	fb01 f303 	mul.w	r3, r1, r3
 8000c52:	441a      	add	r2, r3
 8000c54:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000c58:	4621      	mov	r1, r4
 8000c5a:	fba3 1301 	umull	r1, r3, r3, r1
 8000c5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000c62:	460b      	mov	r3, r1
 8000c64:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000c6c:	18d3      	adds	r3, r2, r3
 8000c6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000c72:	f04f 0000 	mov.w	r0, #0
 8000c76:	f04f 0100 	mov.w	r1, #0
 8000c7a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000c7e:	462b      	mov	r3, r5
 8000c80:	0459      	lsls	r1, r3, #17
 8000c82:	4623      	mov	r3, r4
 8000c84:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000c88:	4623      	mov	r3, r4
 8000c8a:	0458      	lsls	r0, r3, #17
 8000c8c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000c90:	1814      	adds	r4, r2, r0
 8000c92:	643c      	str	r4, [r7, #64]	@ 0x40
 8000c94:	414b      	adcs	r3, r1
 8000c96:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c98:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000c9c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000ca0:	4b72      	ldr	r3, [pc, #456]	@ (8000e6c <BME280_compensate_P_int64+0x2d8>)
 8000ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca6:	b21b      	sxth	r3, r3
 8000ca8:	17da      	asrs	r2, r3, #31
 8000caa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000cae:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	f04f 0100 	mov.w	r1, #0
 8000cba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000cbe:	00d9      	lsls	r1, r3, #3
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000cc6:	1814      	adds	r4, r2, r0
 8000cc8:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000cca:	414b      	adcs	r3, r1
 8000ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000cce:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000cd2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000cd6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000cda:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000cde:	fb03 f102 	mul.w	r1, r3, r2
 8000ce2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000ce6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000cea:	fb02 f303 	mul.w	r3, r2, r3
 8000cee:	18ca      	adds	r2, r1, r3
 8000cf0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000cf4:	fba3 1303 	umull	r1, r3, r3, r3
 8000cf8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000d06:	18d3      	adds	r3, r2, r3
 8000d08:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000d0c:	4b58      	ldr	r3, [pc, #352]	@ (8000e70 <BME280_compensate_P_int64+0x2dc>)
 8000d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	17da      	asrs	r2, r3, #31
 8000d16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000d1a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000d1e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000d22:	462b      	mov	r3, r5
 8000d24:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000d28:	4642      	mov	r2, r8
 8000d2a:	fb02 f203 	mul.w	r2, r2, r3
 8000d2e:	464b      	mov	r3, r9
 8000d30:	4621      	mov	r1, r4
 8000d32:	fb01 f303 	mul.w	r3, r1, r3
 8000d36:	4413      	add	r3, r2
 8000d38:	4622      	mov	r2, r4
 8000d3a:	4641      	mov	r1, r8
 8000d3c:	fba2 1201 	umull	r1, r2, r2, r1
 8000d40:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000d44:	460a      	mov	r2, r1
 8000d46:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000d4a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000d4e:	4413      	add	r3, r2
 8000d50:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000d54:	f04f 0000 	mov.w	r0, #0
 8000d58:	f04f 0100 	mov.w	r1, #0
 8000d5c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000d60:	4623      	mov	r3, r4
 8000d62:	0a18      	lsrs	r0, r3, #8
 8000d64:	462b      	mov	r3, r5
 8000d66:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000d6a:	462b      	mov	r3, r5
 8000d6c:	1219      	asrs	r1, r3, #8
 8000d6e:	4b41      	ldr	r3, [pc, #260]	@ (8000e74 <BME280_compensate_P_int64+0x2e0>)
 8000d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d74:	b21b      	sxth	r3, r3
 8000d76:	17da      	asrs	r2, r3, #31
 8000d78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000d7c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000d80:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000d84:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000d88:	464a      	mov	r2, r9
 8000d8a:	fb02 f203 	mul.w	r2, r2, r3
 8000d8e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000d92:	4644      	mov	r4, r8
 8000d94:	fb04 f303 	mul.w	r3, r4, r3
 8000d98:	441a      	add	r2, r3
 8000d9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000d9e:	4644      	mov	r4, r8
 8000da0:	fba3 4304 	umull	r4, r3, r3, r4
 8000da4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000da8:	4623      	mov	r3, r4
 8000daa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000dae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000db2:	18d3      	adds	r3, r2, r3
 8000db4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000db8:	f04f 0200 	mov.w	r2, #0
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000dc4:	464c      	mov	r4, r9
 8000dc6:	0323      	lsls	r3, r4, #12
 8000dc8:	4644      	mov	r4, r8
 8000dca:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000dce:	4644      	mov	r4, r8
 8000dd0:	0322      	lsls	r2, r4, #12
 8000dd2:	1884      	adds	r4, r0, r2
 8000dd4:	633c      	str	r4, [r7, #48]	@ 0x30
 8000dd6:	eb41 0303 	adc.w	r3, r1, r3
 8000dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ddc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000de0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000de4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000de8:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000dec:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000df0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000df4:	4b20      	ldr	r3, [pc, #128]	@ (8000e78 <BME280_compensate_P_int64+0x2e4>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000e00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000e04:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000e08:	462b      	mov	r3, r5
 8000e0a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000e0e:	4642      	mov	r2, r8
 8000e10:	fb02 f203 	mul.w	r2, r2, r3
 8000e14:	464b      	mov	r3, r9
 8000e16:	4621      	mov	r1, r4
 8000e18:	fb01 f303 	mul.w	r3, r1, r3
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4622      	mov	r2, r4
 8000e20:	4641      	mov	r1, r8
 8000e22:	fba2 1201 	umull	r1, r2, r2, r1
 8000e26:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000e2a:	460a      	mov	r2, r1
 8000e2c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000e30:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000e34:	4413      	add	r3, r2
 8000e36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000e3a:	f04f 0200 	mov.w	r2, #0
 8000e3e:	f04f 0300 	mov.w	r3, #0
 8000e42:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000e46:	4629      	mov	r1, r5
 8000e48:	104a      	asrs	r2, r1, #1
 8000e4a:	4629      	mov	r1, r5
 8000e4c:	17cb      	asrs	r3, r1, #31
 8000e4e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000e52:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000e56:	4313      	orrs	r3, r2
 8000e58:	d110      	bne.n	8000e7c <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e154      	b.n	8001108 <BME280_compensate_P_int64+0x574>
 8000e5e:	bf00      	nop
 8000e60:	2000031c 	.word	0x2000031c
 8000e64:	2000030c 	.word	0x2000030c
 8000e68:	2000030a 	.word	0x2000030a
 8000e6c:	20000308 	.word	0x20000308
 8000e70:	20000306 	.word	0x20000306
 8000e74:	20000304 	.word	0x20000304
 8000e78:	200002fa 	.word	0x200002fa
	}
	p = 1048576-adc_P;
 8000e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000e80:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000e84:	17da      	asrs	r2, r3, #31
 8000e86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000e8a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000e8e:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000e92:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e96:	105b      	asrs	r3, r3, #1
 8000e98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000e9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000ea0:	07db      	lsls	r3, r3, #31
 8000ea2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000ea6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000eaa:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000eae:	4621      	mov	r1, r4
 8000eb0:	1a89      	subs	r1, r1, r2
 8000eb2:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000eb4:	4629      	mov	r1, r5
 8000eb6:	eb61 0303 	sbc.w	r3, r1, r3
 8000eba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000ebc:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000ec0:	4622      	mov	r2, r4
 8000ec2:	462b      	mov	r3, r5
 8000ec4:	1891      	adds	r1, r2, r2
 8000ec6:	6239      	str	r1, [r7, #32]
 8000ec8:	415b      	adcs	r3, r3
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ecc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ed0:	4621      	mov	r1, r4
 8000ed2:	1851      	adds	r1, r2, r1
 8000ed4:	61b9      	str	r1, [r7, #24]
 8000ed6:	4629      	mov	r1, r5
 8000ed8:	414b      	adcs	r3, r1
 8000eda:	61fb      	str	r3, [r7, #28]
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000ee8:	4649      	mov	r1, r9
 8000eea:	018b      	lsls	r3, r1, #6
 8000eec:	4641      	mov	r1, r8
 8000eee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000ef2:	4641      	mov	r1, r8
 8000ef4:	018a      	lsls	r2, r1, #6
 8000ef6:	4641      	mov	r1, r8
 8000ef8:	1889      	adds	r1, r1, r2
 8000efa:	6139      	str	r1, [r7, #16]
 8000efc:	4649      	mov	r1, r9
 8000efe:	eb43 0101 	adc.w	r1, r3, r1
 8000f02:	6179      	str	r1, [r7, #20]
 8000f04:	f04f 0200 	mov.w	r2, #0
 8000f08:	f04f 0300 	mov.w	r3, #0
 8000f0c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000f10:	4649      	mov	r1, r9
 8000f12:	008b      	lsls	r3, r1, #2
 8000f14:	4641      	mov	r1, r8
 8000f16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000f1a:	4641      	mov	r1, r8
 8000f1c:	008a      	lsls	r2, r1, #2
 8000f1e:	4610      	mov	r0, r2
 8000f20:	4619      	mov	r1, r3
 8000f22:	4603      	mov	r3, r0
 8000f24:	4622      	mov	r2, r4
 8000f26:	189b      	adds	r3, r3, r2
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	462a      	mov	r2, r5
 8000f2e:	eb42 0303 	adc.w	r3, r2, r3
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000f40:	4649      	mov	r1, r9
 8000f42:	008b      	lsls	r3, r1, #2
 8000f44:	4641      	mov	r1, r8
 8000f46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000f4a:	4641      	mov	r1, r8
 8000f4c:	008a      	lsls	r2, r1, #2
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	4603      	mov	r3, r0
 8000f54:	4622      	mov	r2, r4
 8000f56:	189b      	adds	r3, r3, r2
 8000f58:	673b      	str	r3, [r7, #112]	@ 0x70
 8000f5a:	462b      	mov	r3, r5
 8000f5c:	460a      	mov	r2, r1
 8000f5e:	eb42 0303 	adc.w	r3, r2, r3
 8000f62:	677b      	str	r3, [r7, #116]	@ 0x74
 8000f64:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000f68:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000f6c:	f7ff f9d0 	bl	8000310 <__aeabi_ldivmod>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000f78:	4b66      	ldr	r3, [pc, #408]	@ (8001114 <BME280_compensate_P_int64+0x580>)
 8000f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	17da      	asrs	r2, r3, #31
 8000f82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000f84:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000f86:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	f04f 0100 	mov.w	r1, #0
 8000f92:	0b50      	lsrs	r0, r2, #13
 8000f94:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000f98:	1359      	asrs	r1, r3, #13
 8000f9a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000f9e:	462b      	mov	r3, r5
 8000fa0:	fb00 f203 	mul.w	r2, r0, r3
 8000fa4:	4623      	mov	r3, r4
 8000fa6:	fb03 f301 	mul.w	r3, r3, r1
 8000faa:	4413      	add	r3, r2
 8000fac:	4622      	mov	r2, r4
 8000fae:	fba2 1200 	umull	r1, r2, r2, r0
 8000fb2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000fb6:	460a      	mov	r2, r1
 8000fb8:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000fbc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000fc0:	4413      	add	r3, r2
 8000fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000fc6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	f04f 0100 	mov.w	r1, #0
 8000fd2:	0b50      	lsrs	r0, r2, #13
 8000fd4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000fd8:	1359      	asrs	r1, r3, #13
 8000fda:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000fde:	462b      	mov	r3, r5
 8000fe0:	fb00 f203 	mul.w	r2, r0, r3
 8000fe4:	4623      	mov	r3, r4
 8000fe6:	fb03 f301 	mul.w	r3, r3, r1
 8000fea:	4413      	add	r3, r2
 8000fec:	4622      	mov	r2, r4
 8000fee:	fba2 1200 	umull	r1, r2, r2, r0
 8000ff2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000ff6:	460a      	mov	r2, r1
 8000ff8:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000ffc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001000:	4413      	add	r3, r2
 8001002:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001012:	4621      	mov	r1, r4
 8001014:	0e4a      	lsrs	r2, r1, #25
 8001016:	4629      	mov	r1, r5
 8001018:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800101c:	4629      	mov	r1, r5
 800101e:	164b      	asrs	r3, r1, #25
 8001020:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001024:	4b3c      	ldr	r3, [pc, #240]	@ (8001118 <BME280_compensate_P_int64+0x584>)
 8001026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102a:	b21b      	sxth	r3, r3
 800102c:	17da      	asrs	r2, r3, #31
 800102e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001030:	667a      	str	r2, [r7, #100]	@ 0x64
 8001032:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001036:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800103a:	462a      	mov	r2, r5
 800103c:	fb02 f203 	mul.w	r2, r2, r3
 8001040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001044:	4621      	mov	r1, r4
 8001046:	fb01 f303 	mul.w	r3, r1, r3
 800104a:	4413      	add	r3, r2
 800104c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001050:	4621      	mov	r1, r4
 8001052:	fba2 1201 	umull	r1, r2, r2, r1
 8001056:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800105a:	460a      	mov	r2, r1
 800105c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001060:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001064:	4413      	add	r3, r2
 8001066:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001076:	4621      	mov	r1, r4
 8001078:	0cca      	lsrs	r2, r1, #19
 800107a:	4629      	mov	r1, r5
 800107c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001080:	4629      	mov	r1, r5
 8001082:	14cb      	asrs	r3, r1, #19
 8001084:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001088:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800108c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001090:	1884      	adds	r4, r0, r2
 8001092:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001094:	eb41 0303 	adc.w	r3, r1, r3
 8001098:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800109a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800109e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80010a2:	4621      	mov	r1, r4
 80010a4:	1889      	adds	r1, r1, r2
 80010a6:	6539      	str	r1, [r7, #80]	@ 0x50
 80010a8:	4629      	mov	r1, r5
 80010aa:	eb43 0101 	adc.w	r1, r3, r1
 80010ae:	6579      	str	r1, [r7, #84]	@ 0x54
 80010b0:	f04f 0000 	mov.w	r0, #0
 80010b4:	f04f 0100 	mov.w	r1, #0
 80010b8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80010bc:	4623      	mov	r3, r4
 80010be:	0a18      	lsrs	r0, r3, #8
 80010c0:	462b      	mov	r3, r5
 80010c2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80010c6:	462b      	mov	r3, r5
 80010c8:	1219      	asrs	r1, r3, #8
 80010ca:	4b14      	ldr	r3, [pc, #80]	@ (800111c <BME280_compensate_P_int64+0x588>)
 80010cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	17da      	asrs	r2, r3, #31
 80010d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80010d6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80010e4:	464c      	mov	r4, r9
 80010e6:	0123      	lsls	r3, r4, #4
 80010e8:	4644      	mov	r4, r8
 80010ea:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80010ee:	4644      	mov	r4, r8
 80010f0:	0122      	lsls	r2, r4, #4
 80010f2:	1884      	adds	r4, r0, r2
 80010f4:	603c      	str	r4, [r7, #0]
 80010f6:	eb41 0303 	adc.w	r3, r1, r3
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001100:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8001104:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001108:	4618      	mov	r0, r3
 800110a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800110e:	46bd      	mov	sp, r7
 8001110:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001114:	20000312 	.word	0x20000312
 8001118:	20000310 	.word	0x20000310
 800111c:	2000030e 	.word	0x2000030e

08001120 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001128:	4b2c      	ldr	r3, [pc, #176]	@ (80011dc <bme280_compensate_H_int32+0xbc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001130:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	039a      	lsls	r2, r3, #14
 8001136:	4b2a      	ldr	r3, [pc, #168]	@ (80011e0 <bme280_compensate_H_int32+0xc0>)
 8001138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113c:	051b      	lsls	r3, r3, #20
 800113e:	1ad2      	subs	r2, r2, r3
 8001140:	4b28      	ldr	r3, [pc, #160]	@ (80011e4 <bme280_compensate_H_int32+0xc4>)
 8001142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001146:	4619      	mov	r1, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	fb01 f303 	mul.w	r3, r1, r3
 800114e:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001150:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001154:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001156:	4a24      	ldr	r2, [pc, #144]	@ (80011e8 <bme280_compensate_H_int32+0xc8>)
 8001158:	f9b2 2000 	ldrsh.w	r2, [r2]
 800115c:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001164:	1292      	asrs	r2, r2, #10
 8001166:	4921      	ldr	r1, [pc, #132]	@ (80011ec <bme280_compensate_H_int32+0xcc>)
 8001168:	8809      	ldrh	r1, [r1, #0]
 800116a:	4608      	mov	r0, r1
 800116c:	68f9      	ldr	r1, [r7, #12]
 800116e:	fb00 f101 	mul.w	r1, r0, r1
 8001172:	12c9      	asrs	r1, r1, #11
 8001174:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001178:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 800117c:	1292      	asrs	r2, r2, #10
 800117e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001182:	491b      	ldr	r1, [pc, #108]	@ (80011f0 <bme280_compensate_H_int32+0xd0>)
 8001184:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001188:	fb01 f202 	mul.w	r2, r1, r2
 800118c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 8001190:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001192:	fb02 f303 	mul.w	r3, r2, r3
 8001196:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	13db      	asrs	r3, r3, #15
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	13d2      	asrs	r2, r2, #15
 80011a0:	fb02 f303 	mul.w	r3, r2, r3
 80011a4:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 80011a6:	4a13      	ldr	r2, [pc, #76]	@ (80011f4 <bme280_compensate_H_int32+0xd4>)
 80011a8:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 80011aa:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 80011ae:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80011bc:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 80011c4:	bfa8      	it	ge
 80011c6:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 80011ca:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	131b      	asrs	r3, r3, #12
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	2000031c 	.word	0x2000031c
 80011e0:	20000316 	.word	0x20000316
 80011e4:	20000318 	.word	0x20000318
 80011e8:	2000031a 	.word	0x2000031a
 80011ec:	200002fe 	.word	0x200002fe
 80011f0:	20000314 	.word	0x20000314
 80011f4:	200002fc 	.word	0x200002fc

080011f8 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 80011fc:	f7ff fc38 	bl	8000a70 <BMEReadRaw>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d154      	bne.n	80012b0 <BME280_Measure+0xb8>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001206:	4b38      	ldr	r3, [pc, #224]	@ (80012e8 <BME280_Measure+0xf0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800120e:	d104      	bne.n	800121a <BME280_Measure+0x22>
 8001210:	4b36      	ldr	r3, [pc, #216]	@ (80012ec <BME280_Measure+0xf4>)
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	e011      	b.n	800123e <BME280_Measure+0x46>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 800121a:	4b33      	ldr	r3, [pc, #204]	@ (80012e8 <BME280_Measure+0xf0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fc76 	bl	8000b10 <BME280_compensate_T_int32>
 8001224:	ee07 0a90 	vmov	s15, r0
 8001228:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800122c:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 80012d0 <BME280_Measure+0xd8>
 8001230:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001234:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001238:	4b2c      	ldr	r3, [pc, #176]	@ (80012ec <BME280_Measure+0xf4>)
 800123a:	edc3 7a00 	vstr	s15, [r3]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 800123e:	4b2c      	ldr	r3, [pc, #176]	@ (80012f0 <BME280_Measure+0xf8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001246:	d104      	bne.n	8001252 <BME280_Measure+0x5a>
 8001248:	4b2a      	ldr	r3, [pc, #168]	@ (80012f4 <BME280_Measure+0xfc>)
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	e011      	b.n	8001276 <BME280_Measure+0x7e>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001252:	4b27      	ldr	r3, [pc, #156]	@ (80012f0 <BME280_Measure+0xf8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fc9c 	bl	8000b94 <BME280_compensate_P_int64>
 800125c:	ee07 0a90 	vmov	s15, r0
 8001260:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001264:	ed9f 5b1c 	vldr	d5, [pc, #112]	@ 80012d8 <BME280_Measure+0xe0>
 8001268:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800126c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001270:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <BME280_Measure+0xfc>)
 8001272:	edc3 7a00 	vstr	s15, [r3]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001276:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <BME280_Measure+0x100>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800127e:	d104      	bne.n	800128a <BME280_Measure+0x92>
 8001280:	4b1e      	ldr	r3, [pc, #120]	@ (80012fc <BME280_Measure+0x104>)
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001288:	e01e      	b.n	80012c8 <BME280_Measure+0xd0>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 800128a:	4b1b      	ldr	r3, [pc, #108]	@ (80012f8 <BME280_Measure+0x100>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff46 	bl	8001120 <bme280_compensate_H_int32>
 8001294:	ee07 0a90 	vmov	s15, r0
 8001298:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800129c:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 80012e0 <BME280_Measure+0xe8>
 80012a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012a8:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <BME280_Measure+0x104>)
 80012aa:	edc3 7a00 	vstr	s15, [r3]
}
 80012ae:	e00b      	b.n	80012c8 <BME280_Measure+0xd0>
		Temperature = Pressure = Humidity = 0;
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <BME280_Measure+0x104>)
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <BME280_Measure+0x104>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0d      	ldr	r2, [pc, #52]	@ (80012f4 <BME280_Measure+0xfc>)
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <BME280_Measure+0xfc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a09      	ldr	r2, [pc, #36]	@ (80012ec <BME280_Measure+0xf4>)
 80012c6:	6013      	str	r3, [r2, #0]
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	f3af 8000 	nop.w
 80012d0:	00000000 	.word	0x00000000
 80012d4:	40590000 	.word	0x40590000
 80012d8:	00000000 	.word	0x00000000
 80012dc:	40700000 	.word	0x40700000
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40900000 	.word	0x40900000
 80012e8:	200002ec 	.word	0x200002ec
 80012ec:	200005c0 	.word	0x200005c0
 80012f0:	200002f0 	.word	0x200002f0
 80012f4:	200005c4 	.word	0x200005c4
 80012f8:	200002f4 	.word	0x200002f4
 80012fc:	200005c8 	.word	0x200005c8

08001300 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4a07      	ldr	r2, [pc, #28]	@ (800132c <vApplicationGetIdleTaskMemory+0x2c>)
 8001310:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	4a06      	ldr	r2, [pc, #24]	@ (8001330 <vApplicationGetIdleTaskMemory+0x30>)
 8001316:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2280      	movs	r2, #128	@ 0x80
 800131c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000320 	.word	0x20000320
 8001330:	200003c0 	.word	0x200003c0

08001334 <http_server>:
#include "cmsis_os.h"

extern float Temperature, Pressure, Humidity;

static void http_server(struct netconn *conn)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b090      	sub	sp, #64	@ 0x40
 8001338:	af02      	add	r7, sp, #8
 800133a:	6078      	str	r0, [r7, #4]
	char* buf;
	u16_t buflen;
	struct fs_file file;

	/* Read the data from the port, blocking if nothing yet there */
	recv_err = netconn_recv(conn, &inbuf);
 800133c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001340:	4619      	mov	r1, r3
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f00e f8de 	bl	800f504 <netconn_recv>
 8001348:	4603      	mov	r3, r0
 800134a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (recv_err == ERR_OK)
 800134e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001352:	2b00      	cmp	r3, #0
 8001354:	f040 80cb 	bne.w	80014ee <http_server+0x1ba>
	{
		if (netconn_err(conn) == ERR_OK)
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f00e fa5c 	bl	800f816 <netconn_err>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	f040 80c4 	bne.w	80014ee <http_server+0x1ba>
		{
			/* Get the data pointer and length of the data inside a netbuf */
			netbuf_data(inbuf, (void**)&buf, &buflen);
 8001366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001368:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 800136c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001370:	4618      	mov	r0, r3
 8001372:	f00f fe61 	bl	8011038 <netbuf_data>

			/* Check if request to get the index.html */
			if (strncmp((char const *)buf,"GET /index.html",15)==0)
 8001376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001378:	220f      	movs	r2, #15
 800137a:	4962      	ldr	r1, [pc, #392]	@ (8001504 <http_server+0x1d0>)
 800137c:	4618      	mov	r0, r3
 800137e:	f01c f8ce 	bl	801d51e <strncmp>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d113      	bne.n	80013b0 <http_server+0x7c>
			{
				fs_open(&file, "/index.html");
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	495e      	ldr	r1, [pc, #376]	@ (8001508 <http_server+0x1d4>)
 800138e:	4618      	mov	r0, r3
 8001390:	f010 f854 	bl	801143c <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001394:	68f9      	ldr	r1, [r7, #12]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	461a      	mov	r2, r3
 800139a:	2300      	movs	r3, #0
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2300      	movs	r3, #0
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f00e f929 	bl	800f5f8 <netconn_write_partly>
				fs_close(&file);
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	4618      	mov	r0, r3
 80013ac:	f010 f884 	bl	80114b8 <fs_close>
			}

			if (strncmp((char const *)buf,"GET /img/humidity.png",21)==0)
 80013b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b2:	2215      	movs	r2, #21
 80013b4:	4955      	ldr	r1, [pc, #340]	@ (800150c <http_server+0x1d8>)
 80013b6:	4618      	mov	r0, r3
 80013b8:	f01c f8b1 	bl	801d51e <strncmp>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d113      	bne.n	80013ea <http_server+0xb6>
			{

				fs_open(&file, "/img/humidity.png");
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	4952      	ldr	r1, [pc, #328]	@ (8001510 <http_server+0x1dc>)
 80013c8:	4618      	mov	r0, r3
 80013ca:	f010 f837 	bl	801143c <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 80013ce:	68f9      	ldr	r1, [r7, #12]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	461a      	mov	r2, r3
 80013d4:	2300      	movs	r3, #0
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2300      	movs	r3, #0
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f00e f90c 	bl	800f5f8 <netconn_write_partly>
				fs_close(&file);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4618      	mov	r0, r3
 80013e6:	f010 f867 	bl	80114b8 <fs_close>

			}
			if (strncmp((char const *)buf,"GET /img/pressure.png",21)==0)
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	2215      	movs	r2, #21
 80013ee:	4949      	ldr	r1, [pc, #292]	@ (8001514 <http_server+0x1e0>)
 80013f0:	4618      	mov	r0, r3
 80013f2:	f01c f894 	bl	801d51e <strncmp>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d113      	bne.n	8001424 <http_server+0xf0>
			{
				fs_open(&file, "/img/pressure.png");
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	4945      	ldr	r1, [pc, #276]	@ (8001518 <http_server+0x1e4>)
 8001402:	4618      	mov	r0, r3
 8001404:	f010 f81a 	bl	801143c <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001408:	68f9      	ldr	r1, [r7, #12]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	461a      	mov	r2, r3
 800140e:	2300      	movs	r3, #0
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2300      	movs	r3, #0
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f00e f8ef 	bl	800f5f8 <netconn_write_partly>
				fs_close(&file);
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	4618      	mov	r0, r3
 8001420:	f010 f84a 	bl	80114b8 <fs_close>

			}
			if (strncmp((char const *)buf,"GET /img/temperature.png",24)==0)
 8001424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001426:	2218      	movs	r2, #24
 8001428:	493c      	ldr	r1, [pc, #240]	@ (800151c <http_server+0x1e8>)
 800142a:	4618      	mov	r0, r3
 800142c:	f01c f877 	bl	801d51e <strncmp>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d113      	bne.n	800145e <http_server+0x12a>
			{
				fs_open(&file, "/img/temperature.png");
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	4939      	ldr	r1, [pc, #228]	@ (8001520 <http_server+0x1ec>)
 800143c:	4618      	mov	r0, r3
 800143e:	f00f fffd 	bl	801143c <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001442:	68f9      	ldr	r1, [r7, #12]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	461a      	mov	r2, r3
 8001448:	2300      	movs	r3, #0
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2300      	movs	r3, #0
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f00e f8d2 	bl	800f5f8 <netconn_write_partly>
				fs_close(&file);
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	4618      	mov	r0, r3
 800145a:	f010 f82d 	bl	80114b8 <fs_close>
			}

			if (strncmp((char const *)buf,"GET /get_value",14)==0)
 800145e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001460:	220e      	movs	r2, #14
 8001462:	4930      	ldr	r1, [pc, #192]	@ (8001524 <http_server+0x1f0>)
 8001464:	4618      	mov	r0, r3
 8001466:	f01c f85a 	bl	801d51e <strncmp>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d12a      	bne.n	80014c6 <http_server+0x192>
			{
				char *pagedata;
				pagedata = pvPortMalloc(10);
 8001470:	200a      	movs	r0, #10
 8001472:	f00d fb19 	bl	800eaa8 <pvPortMalloc>
 8001476:	6338      	str	r0, [r7, #48]	@ 0x30
				int len = sprintf (pagedata, "%d %d %d", (int)Temperature, (int)Pressure, (int)Humidity);
 8001478:	4b2b      	ldr	r3, [pc, #172]	@ (8001528 <http_server+0x1f4>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001482:	4b2a      	ldr	r3, [pc, #168]	@ (800152c <http_server+0x1f8>)
 8001484:	edd3 7a00 	vldr	s15, [r3]
 8001488:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800148c:	4b28      	ldr	r3, [pc, #160]	@ (8001530 <http_server+0x1fc>)
 800148e:	edd3 7a00 	vldr	s15, [r3]
 8001492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001496:	ee17 3a90 	vmov	r3, s15
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	ee16 3a90 	vmov	r3, s13
 80014a0:	ee17 2a10 	vmov	r2, s14
 80014a4:	4923      	ldr	r1, [pc, #140]	@ (8001534 <http_server+0x200>)
 80014a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80014a8:	f01b ffa2 	bl	801d3f0 <siprintf>
 80014ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
				netconn_write(conn, (const unsigned char*)pagedata, (size_t)len, NETCONN_NOCOPY);
 80014ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014b0:	2300      	movs	r3, #0
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2300      	movs	r3, #0
 80014b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f00e f89d 	bl	800f5f8 <netconn_write_partly>
				vPortFree(pagedata);
 80014be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80014c0:	f00d fbc0 	bl	800ec44 <vPortFree>
 80014c4:	e013      	b.n	80014ee <http_server+0x1ba>
			}
			else
			{
				fs_open(&file, "/404.html");
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	491b      	ldr	r1, [pc, #108]	@ (8001538 <http_server+0x204>)
 80014cc:	4618      	mov	r0, r3
 80014ce:	f00f ffb5 	bl	801143c <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 80014d2:	68f9      	ldr	r1, [r7, #12]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	461a      	mov	r2, r3
 80014d8:	2300      	movs	r3, #0
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2300      	movs	r3, #0
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f00e f88a 	bl	800f5f8 <netconn_write_partly>
				fs_close(&file);
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4618      	mov	r0, r3
 80014ea:	f00f ffe5 	bl	80114b8 <fs_close>
			}
		}
	}
	/* Close the connection (server closes in HTTP) */
	netconn_close(conn);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f00e f984 	bl	800f7fc <netconn_close>

	/* Delete the buffer (netconn_recv gives us ownership,
   so we have to make sure to deallocate the buffer) */
	netbuf_delete(inbuf);
 80014f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f6:	4618      	mov	r0, r3
 80014f8:	f00f fd7e 	bl	8010ff8 <netbuf_delete>
}
 80014fc:	bf00      	nop
 80014fe:	3738      	adds	r7, #56	@ 0x38
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	0801e4fc 	.word	0x0801e4fc
 8001508:	0801e50c 	.word	0x0801e50c
 800150c:	0801e518 	.word	0x0801e518
 8001510:	0801e530 	.word	0x0801e530
 8001514:	0801e544 	.word	0x0801e544
 8001518:	0801e55c 	.word	0x0801e55c
 800151c:	0801e570 	.word	0x0801e570
 8001520:	0801e58c 	.word	0x0801e58c
 8001524:	0801e5a4 	.word	0x0801e5a4
 8001528:	200005c0 	.word	0x200005c0
 800152c:	200005c4 	.word	0x200005c4
 8001530:	200005c8 	.word	0x200005c8
 8001534:	0801e5b4 	.word	0x0801e5b4
 8001538:	0801e5c0 	.word	0x0801e5c0

0800153c <http_thread>:


static void http_thread(void *arg)
{ 
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  
  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 8001544:	2200      	movs	r2, #0
 8001546:	2100      	movs	r1, #0
 8001548:	2010      	movs	r0, #16
 800154a:	f00d fcb5 	bl	800eeb8 <netconn_new_with_proto_and_callback>
 800154e:	6178      	str	r0, [r7, #20]
  
  if (conn!= NULL)
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d023      	beq.n	800159e <http_thread+0x62>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, IP_ADDR_ANY, 80);
 8001556:	2250      	movs	r2, #80	@ 0x50
 8001558:	4913      	ldr	r1, [pc, #76]	@ (80015a8 <http_thread+0x6c>)
 800155a:	6978      	ldr	r0, [r7, #20]
 800155c:	f00d fd66 	bl	800f02c <netconn_bind>
 8001560:	4603      	mov	r3, r0
 8001562:	74fb      	strb	r3, [r7, #19]
    
    if (err == ERR_OK)
 8001564:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d118      	bne.n	800159e <http_thread+0x62>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 800156c:	21ff      	movs	r1, #255	@ 0xff
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f00d fd94 	bl	800f09c <netconn_listen_with_backlog>
  
      while(1) 
      {
        /* accept any incoming connection */
        accept_err = netconn_accept(conn, &newconn);
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	4619      	mov	r1, r3
 800157a:	6978      	ldr	r0, [r7, #20]
 800157c:	f00d fdba 	bl	800f0f4 <netconn_accept>
 8001580:	4603      	mov	r3, r0
 8001582:	74bb      	strb	r3, [r7, #18]
        if(accept_err == ERR_OK)
 8001584:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f3      	bne.n	8001574 <http_thread+0x38>
        {
          /* serve connection */
          http_server(newconn);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fed0 	bl	8001334 <http_server>

          /* delete connection */
          netconn_delete(newconn);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4618      	mov	r0, r3
 8001598:	f00d fd2c 	bl	800eff4 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
 800159c:	e7ea      	b.n	8001574 <http_thread+0x38>
        }
      }
    }
  }
}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	080334d4 	.word	0x080334d4

080015ac <http_server_init>:



void http_server_init()
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af02      	add	r7, sp, #8
  sys_thread_new("http_thread", http_thread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
 80015b2:	2300      	movs	r3, #0
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ba:	2200      	movs	r2, #0
 80015bc:	4903      	ldr	r1, [pc, #12]	@ (80015cc <http_server_init+0x20>)
 80015be:	4804      	ldr	r0, [pc, #16]	@ (80015d0 <http_server_init+0x24>)
 80015c0:	f01a ff6c 	bl	801c49c <sys_thread_new>
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	0800153d 	.word	0x0800153d
 80015d0:	0801e5cc 	.word	0x0801e5cc

080015d4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015d8:	f3bf 8f4f 	dsb	sy
}
 80015dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015de:	f3bf 8f6f 	isb	sy
}
 80015e2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e4:	4b0d      	ldr	r3, [pc, #52]	@ (800161c <SCB_EnableICache+0x48>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ec:	f3bf 8f4f 	dsb	sy
}
 80015f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f2:	f3bf 8f6f 	isb	sy
}
 80015f6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80015f8:	4b08      	ldr	r3, [pc, #32]	@ (800161c <SCB_EnableICache+0x48>)
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	4a07      	ldr	r2, [pc, #28]	@ (800161c <SCB_EnableICache+0x48>)
 80015fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001602:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001604:	f3bf 8f4f 	dsb	sy
}
 8001608:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800160a:	f3bf 8f6f 	isb	sy
}
 800160e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001626:	4b1f      	ldr	r3, [pc, #124]	@ (80016a4 <SCB_EnableDCache+0x84>)
 8001628:	2200      	movs	r2, #0
 800162a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800162e:	f3bf 8f4f 	dsb	sy
}
 8001632:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001634:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <SCB_EnableDCache+0x84>)
 8001636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800163a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	0b5b      	lsrs	r3, r3, #13
 8001640:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001644:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	08db      	lsrs	r3, r3, #3
 800164a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800164e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	015a      	lsls	r2, r3, #5
 8001654:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001658:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800165e:	4911      	ldr	r1, [pc, #68]	@ (80016a4 <SCB_EnableDCache+0x84>)
 8001660:	4313      	orrs	r3, r2
 8001662:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1e5a      	subs	r2, r3, #1
 800166a:	60ba      	str	r2, [r7, #8]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1ef      	bne.n	8001650 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	1e5a      	subs	r2, r3, #1
 8001674:	60fa      	str	r2, [r7, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1e5      	bne.n	8001646 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800167a:	f3bf 8f4f 	dsb	sy
}
 800167e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001680:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <SCB_EnableDCache+0x84>)
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	4a07      	ldr	r2, [pc, #28]	@ (80016a4 <SCB_EnableDCache+0x84>)
 8001686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800168a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800168c:	f3bf 8f4f 	dsb	sy
}
 8001690:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001692:	f3bf 8f6f 	isb	sy
}
 8001696:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001698:	bf00      	nop
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	b096      	sub	sp, #88	@ 0x58
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80016ae:	f000 fa3b 	bl	8001b28 <MPU_Config>

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80016b2:	f7ff ff8f 	bl	80015d4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80016b6:	f7ff ffb3 	bl	8001620 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ba:	f000 fdce 	bl	800225a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016be:	f000 f84b 	bl	8001758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c2:	f000 f8f9 	bl	80018b8 <MX_GPIO_Init>
  MX_I2C2_Init();
 80016c6:	f000 f8b7 	bl	8001838 <MX_I2C2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 512);
 80016ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <main+0x98>)
 80016cc:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80016d0:	461d      	mov	r5, r3
 80016d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80016de:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f00a fad0 	bl	800bc8a <osThreadCreate>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a15      	ldr	r2, [pc, #84]	@ (8001744 <main+0x9c>)
 80016ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 80016f0:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <main+0xa0>)
 80016f2:	f107 0420 	add.w	r4, r7, #32
 80016f6:	461d      	mov	r5, r3
 80016f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001700:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001704:	f107 0320 	add.w	r3, r7, #32
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f00a fabd 	bl	800bc8a <osThreadCreate>
 8001710:	4603      	mov	r3, r0
 8001712:	4a0e      	ldr	r2, [pc, #56]	@ (800174c <main+0xa4>)
 8001714:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 8001716:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <main+0xa8>)
 8001718:	1d3c      	adds	r4, r7, #4
 800171a:	461d      	mov	r5, r3
 800171c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800171e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001720:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001724:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f00a faac 	bl	800bc8a <osThreadCreate>
 8001732:	4603      	mov	r3, r0
 8001734:	4a07      	ldr	r2, [pc, #28]	@ (8001754 <main+0xac>)
 8001736:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001738:	f00a fa90 	bl	800bc5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <main+0x94>
 8001740:	0801e5e4 	.word	0x0801e5e4
 8001744:	20000624 	.word	0x20000624
 8001748:	0801e60c 	.word	0x0801e60c
 800174c:	20000628 	.word	0x20000628
 8001750:	0801e634 	.word	0x0801e634
 8001754:	2000062c 	.word	0x2000062c

08001758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b094      	sub	sp, #80	@ 0x50
 800175c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	2234      	movs	r2, #52	@ 0x34
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f01b fed1 	bl	801d50e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800177c:	4b2c      	ldr	r3, [pc, #176]	@ (8001830 <SystemClock_Config+0xd8>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001780:	4a2b      	ldr	r2, [pc, #172]	@ (8001830 <SystemClock_Config+0xd8>)
 8001782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001786:	6413      	str	r3, [r2, #64]	@ 0x40
 8001788:	4b29      	ldr	r3, [pc, #164]	@ (8001830 <SystemClock_Config+0xd8>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001794:	4b27      	ldr	r3, [pc, #156]	@ (8001834 <SystemClock_Config+0xdc>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800179c:	4a25      	ldr	r2, [pc, #148]	@ (8001834 <SystemClock_Config+0xdc>)
 800179e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	4b23      	ldr	r3, [pc, #140]	@ (8001834 <SystemClock_Config+0xdc>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017b0:	2301      	movs	r3, #1
 80017b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ba:	2302      	movs	r3, #2
 80017bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017c4:	2304      	movs	r3, #4
 80017c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80017c8:	2360      	movs	r3, #96	@ 0x60
 80017ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017cc:	2302      	movs	r3, #2
 80017ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017d0:	2304      	movs	r3, #4
 80017d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d8:	f107 031c 	add.w	r3, r7, #28
 80017dc:	4618      	mov	r0, r3
 80017de:	f004 fc45 	bl	800606c <HAL_RCC_OscConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017e8:	f000 f9ec 	bl	8001bc4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017ec:	f004 fbee 	bl	8005fcc <HAL_PWREx_EnableOverDrive>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80017f6:	f000 f9e5 	bl	8001bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017fa:	230f      	movs	r3, #15
 80017fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fe:	2302      	movs	r3, #2
 8001800:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001806:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800180a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	2103      	movs	r1, #3
 8001816:	4618      	mov	r0, r3
 8001818:	f004 fed6 	bl	80065c8 <HAL_RCC_ClockConfig>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001822:	f000 f9cf 	bl	8001bc4 <Error_Handler>
  }
}
 8001826:	bf00      	nop
 8001828:	3750      	adds	r7, #80	@ 0x50
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	40007000 	.word	0x40007000

08001838 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <MX_I2C2_Init+0x74>)
 800183e:	4a1c      	ldr	r2, [pc, #112]	@ (80018b0 <MX_I2C2_Init+0x78>)
 8001840:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001842:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <MX_I2C2_Init+0x74>)
 8001844:	4a1b      	ldr	r2, [pc, #108]	@ (80018b4 <MX_I2C2_Init+0x7c>)
 8001846:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001848:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <MX_I2C2_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800184e:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <MX_I2C2_Init+0x74>)
 8001850:	2201      	movs	r2, #1
 8001852:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001854:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <MX_I2C2_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800185a:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <MX_I2C2_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <MX_I2C2_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001866:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <MX_I2C2_Init+0x74>)
 8001868:	2200      	movs	r2, #0
 800186a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800186c:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <MX_I2C2_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001872:	480e      	ldr	r0, [pc, #56]	@ (80018ac <MX_I2C2_Init+0x74>)
 8001874:	f002 fafe 	bl	8003e74 <HAL_I2C_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800187e:	f000 f9a1 	bl	8001bc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001882:	2100      	movs	r1, #0
 8001884:	4809      	ldr	r0, [pc, #36]	@ (80018ac <MX_I2C2_Init+0x74>)
 8001886:	f003 f881 	bl	800498c <HAL_I2CEx_ConfigAnalogFilter>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001890:	f000 f998 	bl	8001bc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001894:	2100      	movs	r1, #0
 8001896:	4805      	ldr	r0, [pc, #20]	@ (80018ac <MX_I2C2_Init+0x74>)
 8001898:	f003 f8c3 	bl	8004a22 <HAL_I2CEx_ConfigDigitalFilter>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80018a2:	f000 f98f 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200005d0 	.word	0x200005d0
 80018b0:	40005800 	.word	0x40005800
 80018b4:	20303e5d 	.word	0x20303e5d

080018b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	@ 0x30
 80018bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ce:	4b36      	ldr	r3, [pc, #216]	@ (80019a8 <MX_GPIO_Init+0xf0>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	4a35      	ldr	r2, [pc, #212]	@ (80019a8 <MX_GPIO_Init+0xf0>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018da:	4b33      	ldr	r3, [pc, #204]	@ (80019a8 <MX_GPIO_Init+0xf0>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018e6:	4b30      	ldr	r3, [pc, #192]	@ (80019a8 <MX_GPIO_Init+0xf0>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	4a2f      	ldr	r2, [pc, #188]	@ (80019a8 <MX_GPIO_Init+0xf0>)
 80018ec:	f043 0320 	orr.w	r3, r3, #32
 80018f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f2:	4b2d      	ldr	r3, [pc, #180]	@ (80019a8 <MX_GPIO_Init+0xf0>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f003 0320 	and.w	r3, r3, #32
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018fe:	4b2a      	ldr	r3, [pc, #168]	@ (80019a8 <MX_GPIO_Init+0xf0>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	4a29      	ldr	r2, [pc, #164]	@ (80019a8 <MX_GPIO_Init+0xf0>)
 8001904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001908:	6313      	str	r3, [r2, #48]	@ 0x30
 800190a:	4b27      	ldr	r3, [pc, #156]	@ (80019a8 <MX_GPIO_Init+0xf0>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	4b24      	ldr	r3, [pc, #144]	@ (80019a8 <MX_GPIO_Init+0xf0>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a23      	ldr	r2, [pc, #140]	@ (80019a8 <MX_GPIO_Init+0xf0>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b21      	ldr	r3, [pc, #132]	@ (80019a8 <MX_GPIO_Init+0xf0>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	4b1e      	ldr	r3, [pc, #120]	@ (80019a8 <MX_GPIO_Init+0xf0>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	4a1d      	ldr	r2, [pc, #116]	@ (80019a8 <MX_GPIO_Init+0xf0>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	6313      	str	r3, [r2, #48]	@ 0x30
 800193a:	4b1b      	ldr	r3, [pc, #108]	@ (80019a8 <MX_GPIO_Init+0xf0>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001946:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <MX_GPIO_Init+0xf0>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	4a17      	ldr	r2, [pc, #92]	@ (80019a8 <MX_GPIO_Init+0xf0>)
 800194c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001950:	6313      	str	r3, [r2, #48]	@ 0x30
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <MX_GPIO_Init+0xf0>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	2181      	movs	r1, #129	@ 0x81
 8001962:	4812      	ldr	r0, [pc, #72]	@ (80019ac <MX_GPIO_Init+0xf4>)
 8001964:	f002 fa52 	bl	8003e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001968:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800196c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800196e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	480c      	ldr	r0, [pc, #48]	@ (80019b0 <MX_GPIO_Init+0xf8>)
 8001980:	f002 f898 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8001984:	2381      	movs	r3, #129	@ 0x81
 8001986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	4619      	mov	r1, r3
 800199a:	4804      	ldr	r0, [pc, #16]	@ (80019ac <MX_GPIO_Init+0xf4>)
 800199c:	f002 f88a 	bl	8003ab4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019a0:	bf00      	nop
 80019a2:	3730      	adds	r7, #48	@ 0x30
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020400 	.word	0x40020400
 80019b0:	40020800 	.word	0x40020800

080019b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80019bc:	f007 fa80 	bl	8008ec0 <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80019c0:	f01a fdb0 	bl	801c524 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  http_server_init();
 80019c4:	f7ff fdf2 	bl	80015ac <http_server_init>
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 80019c8:	2304      	movs	r3, #4
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	2300      	movs	r3, #0
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2303      	movs	r3, #3
 80019d2:	2201      	movs	r2, #1
 80019d4:	2105      	movs	r1, #5
 80019d6:	2002      	movs	r0, #2
 80019d8:	f7fe ff72 	bl	80008c0 <BME280_Config>
  //CDC_Transmit_FS(USB_secondMessage,strlen(USB_firstMessage));
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 80019dc:	2001      	movs	r0, #1
 80019de:	f00a f9ac 	bl	800bd3a <osDelay>
 80019e2:	e7fb      	b.n	80019dc <StartDefaultTask+0x28>

080019e4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	BME280_Measure();
 80019ec:	f7ff fc04 	bl	80011f8 <BME280_Measure>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80019f0:	2180      	movs	r1, #128	@ 0x80
 80019f2:	4824      	ldr	r0, [pc, #144]	@ (8001a84 <StartTask02+0xa0>)
 80019f4:	f002 fa23 	bl	8003e3e <HAL_GPIO_TogglePin>
	int Temperature_rest = (int)((Temperature - (int)Temperature) * 100);
 80019f8:	4b23      	ldr	r3, [pc, #140]	@ (8001a88 <StartTask02+0xa4>)
 80019fa:	ed93 7a00 	vldr	s14, [r3]
 80019fe:	4b22      	ldr	r3, [pc, #136]	@ (8001a88 <StartTask02+0xa4>)
 8001a00:	edd3 7a00 	vldr	s15, [r3]
 8001a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a10:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001a8c <StartTask02+0xa8>
 8001a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a1c:	ee17 3a90 	vmov	r3, s15
 8001a20:	617b      	str	r3, [r7, #20]
	int Pressure_rest = (int)((Pressure - (int)Pressure) * 100);
 8001a22:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <StartTask02+0xac>)
 8001a24:	ed93 7a00 	vldr	s14, [r3]
 8001a28:	4b19      	ldr	r3, [pc, #100]	@ (8001a90 <StartTask02+0xac>)
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a3a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001a8c <StartTask02+0xa8>
 8001a3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a46:	ee17 3a90 	vmov	r3, s15
 8001a4a:	613b      	str	r3, [r7, #16]
	int Humidity_rest = (int)((Humidity - (int)Humidity) * 100);
 8001a4c:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <StartTask02+0xb0>)
 8001a4e:	ed93 7a00 	vldr	s14, [r3]
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <StartTask02+0xb0>)
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a64:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001a8c <StartTask02+0xa8>
 8001a68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a70:	ee17 3a90 	vmov	r3, s15
 8001a74:	60fb      	str	r3, [r7, #12]
    osDelay(500);
 8001a76:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a7a:	f00a f95e 	bl	800bd3a <osDelay>
  {
 8001a7e:	bf00      	nop
 8001a80:	e7b4      	b.n	80019ec <StartTask02+0x8>
 8001a82:	bf00      	nop
 8001a84:	40020400 	.word	0x40020400
 8001a88:	200005c0 	.word	0x200005c0
 8001a8c:	42c80000 	.word	0x42c80000
 8001a90:	200005c4 	.word	0x200005c4
 8001a94:	200005c8 	.word	0x200005c8

08001a98 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b087      	sub	sp, #28
 8001a9c:	af04      	add	r7, sp, #16
 8001a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	sprintf(USB_TxData,"Temperature- %d.%d,     Pressure- %d.%d,     Humidity- %d.%d\n\r", (int)Temperature, Temperature_rest, (int)Pressure, Pressure_rest, (int)Humidity, Humidity_rest);
 8001aa0:	4b19      	ldr	r3, [pc, #100]	@ (8001b08 <StartTask03+0x70>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001aaa:	4b18      	ldr	r3, [pc, #96]	@ (8001b0c <StartTask03+0x74>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4b17      	ldr	r3, [pc, #92]	@ (8001b10 <StartTask03+0x78>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aba:	ee17 0a90 	vmov	r0, s15
 8001abe:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <StartTask03+0x7c>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <StartTask03+0x80>)
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ace:	ee17 4a90 	vmov	r4, s15
 8001ad2:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <StartTask03+0x84>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	9303      	str	r3, [sp, #12]
 8001ad8:	9402      	str	r4, [sp, #8]
 8001ada:	9201      	str	r2, [sp, #4]
 8001adc:	9000      	str	r0, [sp, #0]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	ee17 2a10 	vmov	r2, s14
 8001ae4:	490e      	ldr	r1, [pc, #56]	@ (8001b20 <StartTask03+0x88>)
 8001ae6:	480f      	ldr	r0, [pc, #60]	@ (8001b24 <StartTask03+0x8c>)
 8001ae8:	f01b fc82 	bl	801d3f0 <siprintf>
	CDC_Transmit_FS(USB_TxData, strlen(USB_TxData));
 8001aec:	480d      	ldr	r0, [pc, #52]	@ (8001b24 <StartTask03+0x8c>)
 8001aee:	f7fe fbb1 	bl	8000254 <strlen>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4619      	mov	r1, r3
 8001af6:	480b      	ldr	r0, [pc, #44]	@ (8001b24 <StartTask03+0x8c>)
 8001af8:	f01a fdd2 	bl	801c6a0 <CDC_Transmit_FS>
    osDelay(1000);
 8001afc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b00:	f00a f91b 	bl	800bd3a <osDelay>
  {
 8001b04:	bf00      	nop
 8001b06:	e7cb      	b.n	8001aa0 <StartTask03+0x8>
 8001b08:	200005c0 	.word	0x200005c0
 8001b0c:	200005cc 	.word	0x200005cc
 8001b10:	200005c4 	.word	0x200005c4
 8001b14:	200005cd 	.word	0x200005cd
 8001b18:	200005c8 	.word	0x200005c8
 8001b1c:	200005ce 	.word	0x200005ce
 8001b20:	0801e650 	.word	0x0801e650
 8001b24:	20000630 	.word	0x20000630

08001b28 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001b2e:	463b      	mov	r3, r7
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001b3a:	f000 fccd 	bl	80024d8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20020000;
 8001b46:	4b14      	ldr	r3, [pc, #80]	@ (8001b98 <MPU_Config+0x70>)
 8001b48:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001b4a:	230d      	movs	r3, #13
 8001b4c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001b52:	2301      	movs	r3, #1
 8001b54:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001b56:	2303      	movs	r3, #3
 8001b58:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001b6a:	463b      	mov	r3, r7
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 fceb 	bl	8002548 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20040000;
 8001b76:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <MPU_Config+0x74>)
 8001b78:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001b7a:	230e      	movs	r3, #14
 8001b7c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001b82:	463b      	mov	r3, r7
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 fcdf 	bl	8002548 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001b8a:	2004      	movs	r0, #4
 8001b8c:	f000 fcbc 	bl	8002508 <HAL_MPU_Enable>

}
 8001b90:	bf00      	nop
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20020000 	.word	0x20020000
 8001b9c:	20040000 	.word	0x20040000

08001ba0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a04      	ldr	r2, [pc, #16]	@ (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d101      	bne.n	8001bb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bb2:	f000 fb5f 	bl	8002274 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40001000 	.word	0x40001000

08001bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc8:	b672      	cpsid	i
}
 8001bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <Error_Handler+0x8>

08001bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <HAL_MspInit+0x4c>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	4a10      	ldr	r2, [pc, #64]	@ (8001c1c <HAL_MspInit+0x4c>)
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c1c <HAL_MspInit+0x4c>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <HAL_MspInit+0x4c>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8001c1c <HAL_MspInit+0x4c>)
 8001bf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bfa:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <HAL_MspInit+0x4c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	210f      	movs	r1, #15
 8001c0a:	f06f 0001 	mvn.w	r0, #1
 8001c0e:	f000 fc39 	bl	8002484 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800

08001c20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0ae      	sub	sp, #184	@ 0xb8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	2290      	movs	r2, #144	@ 0x90
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f01b fc64 	bl	801d50e <memset>
  if(hi2c->Instance==I2C2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a21      	ldr	r2, [pc, #132]	@ (8001cd0 <HAL_I2C_MspInit+0xb0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d13b      	bne.n	8001cc8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c54:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c56:	2300      	movs	r3, #0
 8001c58:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f004 fef6 	bl	8006a50 <HAL_RCCEx_PeriphCLKConfig>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c6a:	f7ff ffab 	bl	8001bc4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c6e:	4b19      	ldr	r3, [pc, #100]	@ (8001cd4 <HAL_I2C_MspInit+0xb4>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	4a18      	ldr	r2, [pc, #96]	@ (8001cd4 <HAL_I2C_MspInit+0xb4>)
 8001c74:	f043 0320 	orr.w	r3, r3, #32
 8001c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7a:	4b16      	ldr	r3, [pc, #88]	@ (8001cd4 <HAL_I2C_MspInit+0xb4>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c86:	2303      	movs	r3, #3
 8001c88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c8c:	2312      	movs	r3, #18
 8001c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ca4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	480b      	ldr	r0, [pc, #44]	@ (8001cd8 <HAL_I2C_MspInit+0xb8>)
 8001cac:	f001 ff02 	bl	8003ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cb0:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <HAL_I2C_MspInit+0xb4>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb4:	4a07      	ldr	r2, [pc, #28]	@ (8001cd4 <HAL_I2C_MspInit+0xb4>)
 8001cb6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cba:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cbc:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <HAL_I2C_MspInit+0xb4>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001cc8:	bf00      	nop
 8001cca:	37b8      	adds	r7, #184	@ 0xb8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40005800 	.word	0x40005800
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40021400 	.word	0x40021400

08001cdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08e      	sub	sp, #56	@ 0x38
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001cec:	4b33      	ldr	r3, [pc, #204]	@ (8001dbc <HAL_InitTick+0xe0>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf0:	4a32      	ldr	r2, [pc, #200]	@ (8001dbc <HAL_InitTick+0xe0>)
 8001cf2:	f043 0310 	orr.w	r3, r3, #16
 8001cf6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf8:	4b30      	ldr	r3, [pc, #192]	@ (8001dbc <HAL_InitTick+0xe0>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d04:	f107 0210 	add.w	r2, r7, #16
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f004 fe6c 	bl	80069ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d103      	bne.n	8001d26 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d1e:	f004 fe51 	bl	80069c4 <HAL_RCC_GetPCLK1Freq>
 8001d22:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d24:	e004      	b.n	8001d30 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d26:	f004 fe4d 	bl	80069c4 <HAL_RCC_GetPCLK1Freq>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d32:	4a23      	ldr	r2, [pc, #140]	@ (8001dc0 <HAL_InitTick+0xe4>)
 8001d34:	fba2 2303 	umull	r2, r3, r2, r3
 8001d38:	0c9b      	lsrs	r3, r3, #18
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d3e:	4b21      	ldr	r3, [pc, #132]	@ (8001dc4 <HAL_InitTick+0xe8>)
 8001d40:	4a21      	ldr	r2, [pc, #132]	@ (8001dc8 <HAL_InitTick+0xec>)
 8001d42:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d44:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc4 <HAL_InitTick+0xe8>)
 8001d46:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d4a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc4 <HAL_InitTick+0xe8>)
 8001d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d50:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d52:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc4 <HAL_InitTick+0xe8>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d58:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc4 <HAL_InitTick+0xe8>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5e:	4b19      	ldr	r3, [pc, #100]	@ (8001dc4 <HAL_InitTick+0xe8>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001d64:	4817      	ldr	r0, [pc, #92]	@ (8001dc4 <HAL_InitTick+0xe8>)
 8001d66:	f005 fa9b 	bl	80072a0 <HAL_TIM_Base_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001d70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d11b      	bne.n	8001db0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001d78:	4812      	ldr	r0, [pc, #72]	@ (8001dc4 <HAL_InitTick+0xe8>)
 8001d7a:	f005 faf3 	bl	8007364 <HAL_TIM_Base_Start_IT>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001d84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d111      	bne.n	8001db0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d8c:	2036      	movs	r0, #54	@ 0x36
 8001d8e:	f000 fb95 	bl	80024bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b0f      	cmp	r3, #15
 8001d96:	d808      	bhi.n	8001daa <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	2036      	movs	r0, #54	@ 0x36
 8001d9e:	f000 fb71 	bl	8002484 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001da2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dcc <HAL_InitTick+0xf0>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	e002      	b.n	8001db0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001db0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3738      	adds	r7, #56	@ 0x38
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	431bde83 	.word	0x431bde83
 8001dc4:	20000680 	.word	0x20000680
 8001dc8:	40001000 	.word	0x40001000
 8001dcc:	20000004 	.word	0x20000004

08001dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dd4:	bf00      	nop
 8001dd6:	e7fd      	b.n	8001dd4 <NMI_Handler+0x4>

08001dd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ddc:	bf00      	nop
 8001dde:	e7fd      	b.n	8001ddc <HardFault_Handler+0x4>

08001de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de4:	bf00      	nop
 8001de6:	e7fd      	b.n	8001de4 <MemManage_Handler+0x4>

08001de8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <BusFault_Handler+0x4>

08001df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <UsageFault_Handler+0x4>

08001df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e0c:	4802      	ldr	r0, [pc, #8]	@ (8001e18 <TIM6_DAC_IRQHandler+0x10>)
 8001e0e:	f005 fb21 	bl	8007454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000680 	.word	0x20000680

08001e1c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001e20:	4802      	ldr	r0, [pc, #8]	@ (8001e2c <ETH_IRQHandler+0x10>)
 8001e22:	f000 ff5f 	bl	8002ce4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200050b4 	.word	0x200050b4

08001e30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e34:	4802      	ldr	r0, [pc, #8]	@ (8001e40 <OTG_FS_IRQHandler+0x10>)
 8001e36:	f002 ff78 	bl	8004d2a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000fa98 	.word	0x2000fa98

08001e44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return 1;
 8001e48:	2301      	movs	r3, #1
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_kill>:

int _kill(int pid, int sig)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e5e:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <_kill+0x20>)
 8001e60:	2216      	movs	r2, #22
 8001e62:	601a      	str	r2, [r3, #0]
  return -1;
 8001e64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	200100bc 	.word	0x200100bc

08001e78 <_exit>:

void _exit (int status)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e80:	f04f 31ff 	mov.w	r1, #4294967295
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ffe5 	bl	8001e54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e8a:	bf00      	nop
 8001e8c:	e7fd      	b.n	8001e8a <_exit+0x12>

08001e8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	e00a      	b.n	8001eb6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ea0:	f3af 8000 	nop.w
 8001ea4:	4601      	mov	r1, r0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	60ba      	str	r2, [r7, #8]
 8001eac:	b2ca      	uxtb	r2, r1
 8001eae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	dbf0      	blt.n	8001ea0 <_read+0x12>
  }

  return len;
 8001ebe:	687b      	ldr	r3, [r7, #4]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	e009      	b.n	8001eee <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	60ba      	str	r2, [r7, #8]
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	3301      	adds	r3, #1
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	dbf1      	blt.n	8001eda <_write+0x12>
  }
  return len;
 8001ef6:	687b      	ldr	r3, [r7, #4]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <_close>:

int _close(int file)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f28:	605a      	str	r2, [r3, #4]
  return 0;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <_isatty>:

int _isatty(int file)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f40:	2301      	movs	r3, #1
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b085      	sub	sp, #20
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f70:	4a14      	ldr	r2, [pc, #80]	@ (8001fc4 <_sbrk+0x5c>)
 8001f72:	4b15      	ldr	r3, [pc, #84]	@ (8001fc8 <_sbrk+0x60>)
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f7c:	4b13      	ldr	r3, [pc, #76]	@ (8001fcc <_sbrk+0x64>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d102      	bne.n	8001f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <_sbrk+0x64>)
 8001f86:	4a12      	ldr	r2, [pc, #72]	@ (8001fd0 <_sbrk+0x68>)
 8001f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f8a:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d205      	bcs.n	8001fa4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001f98:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <_sbrk+0x6c>)
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	e009      	b.n	8001fb8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa4:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001faa:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <_sbrk+0x64>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a06      	ldr	r2, [pc, #24]	@ (8001fcc <_sbrk+0x64>)
 8001fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	20080000 	.word	0x20080000
 8001fc8:	00000400 	.word	0x00000400
 8001fcc:	200006cc 	.word	0x200006cc
 8001fd0:	200100c8 	.word	0x200100c8
 8001fd4:	200100bc 	.word	0x200100bc

08001fd8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <SystemInit+0x20>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe2:	4a05      	ldr	r2, [pc, #20]	@ (8001ff8 <SystemInit+0x20>)
 8001fe4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fe8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ffc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002034 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002000:	f7ff ffea 	bl	8001fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002004:	480c      	ldr	r0, [pc, #48]	@ (8002038 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002006:	490d      	ldr	r1, [pc, #52]	@ (800203c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002008:	4a0d      	ldr	r2, [pc, #52]	@ (8002040 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800200c:	e002      	b.n	8002014 <LoopCopyDataInit>

0800200e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200e:	58d4      	ldr	r4, [r2, r3]

  str r4, [r0, r3]
 8002010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002012:	3304      	adds	r3, #4

08002014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002018:	d3f9      	bcc.n	800200e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201a:	4a0a      	ldr	r2, [pc, #40]	@ (8002044 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800201c:	4c0a      	ldr	r4, [pc, #40]	@ (8002048 <LoopFillZerobss+0x22>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002020:	e001      	b.n	8002026 <LoopFillZerobss>

08002022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002024:	3204      	adds	r2, #4

08002026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002028:	d3fb      	bcc.n	8002022 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800202a:	f01b fb3f 	bl	801d6ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800202e:	f7ff fb3b 	bl	80016a8 <main>
  bx  lr    
 8002032:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002034:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800203c:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8002040:	080335e0 	.word	0x080335e0
  ldr r2, =_sbss
 8002044:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8002048:	200100c4 	.word	0x200100c4

0800204c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800204c:	e7fe      	b.n	800204c <ADC_IRQHandler>

0800204e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00b      	beq.n	8002076 <LAN8742_RegisterBusIO+0x28>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <LAN8742_RegisterBusIO+0x28>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <LAN8742_RegisterBusIO+0x28>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d102      	bne.n	800207c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	e014      	b.n	80020a6 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d139      	bne.n	8002142 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2220      	movs	r2, #32
 80020e0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	e01c      	b.n	8002122 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f107 020c 	add.w	r2, r7, #12
 80020f0:	2112      	movs	r1, #18
 80020f2:	6978      	ldr	r0, [r7, #20]
 80020f4:	4798      	blx	r3
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	da03      	bge.n	8002104 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80020fc:	f06f 0304 	mvn.w	r3, #4
 8002100:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8002102:	e00b      	b.n	800211c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 031f 	and.w	r3, r3, #31
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	429a      	cmp	r2, r3
 800210e:	d105      	bne.n	800211c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
         break;
 800211a:	e005      	b.n	8002128 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b1f      	cmp	r3, #31
 8002126:	d9df      	bls.n	80020e8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b1f      	cmp	r3, #31
 800212e:	d902      	bls.n	8002136 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002130:	f06f 0302 	mvn.w	r3, #2
 8002134:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8002142:	693b      	ldr	r3, [r7, #16]
 }
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6810      	ldr	r0, [r2, #0]
 8002160:	f107 020c 	add.w	r2, r7, #12
 8002164:	2101      	movs	r1, #1
 8002166:	4798      	blx	r3
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	da02      	bge.n	8002174 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800216e:	f06f 0304 	mvn.w	r3, #4
 8002172:	e06e      	b.n	8002252 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6810      	ldr	r0, [r2, #0]
 800217c:	f107 020c 	add.w	r2, r7, #12
 8002180:	2101      	movs	r1, #1
 8002182:	4798      	blx	r3
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	da02      	bge.n	8002190 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800218a:	f06f 0304 	mvn.w	r3, #4
 800218e:	e060      	b.n	8002252 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800219a:	2301      	movs	r3, #1
 800219c:	e059      	b.n	8002252 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6810      	ldr	r0, [r2, #0]
 80021a6:	f107 020c 	add.w	r2, r7, #12
 80021aa:	2100      	movs	r1, #0
 80021ac:	4798      	blx	r3
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	da02      	bge.n	80021ba <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80021b4:	f06f 0304 	mvn.w	r3, #4
 80021b8:	e04b      	b.n	8002252 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d11b      	bne.n	80021fc <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d006      	beq.n	80021dc <LAN8742_GetLinkState+0x90>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80021d8:	2302      	movs	r3, #2
 80021da:	e03a      	b.n	8002252 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e033      	b.n	8002252 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80021f4:	2304      	movs	r3, #4
 80021f6:	e02c      	b.n	8002252 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80021f8:	2305      	movs	r3, #5
 80021fa:	e02a      	b.n	8002252 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6810      	ldr	r0, [r2, #0]
 8002204:	f107 020c 	add.w	r2, r7, #12
 8002208:	211f      	movs	r1, #31
 800220a:	4798      	blx	r3
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	da02      	bge.n	8002218 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002212:	f06f 0304 	mvn.w	r3, #4
 8002216:	e01c      	b.n	8002252 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002222:	2306      	movs	r3, #6
 8002224:	e015      	b.n	8002252 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f003 031c 	and.w	r3, r3, #28
 800222c:	2b18      	cmp	r3, #24
 800222e:	d101      	bne.n	8002234 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002230:	2302      	movs	r3, #2
 8002232:	e00e      	b.n	8002252 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 031c 	and.w	r3, r3, #28
 800223a:	2b08      	cmp	r3, #8
 800223c:	d101      	bne.n	8002242 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800223e:	2303      	movs	r3, #3
 8002240:	e007      	b.n	8002252 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f003 031c 	and.w	r3, r3, #28
 8002248:	2b14      	cmp	r3, #20
 800224a:	d101      	bne.n	8002250 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800224c:	2304      	movs	r3, #4
 800224e:	e000      	b.n	8002252 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002250:	2305      	movs	r3, #5
    }
  }
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800225e:	2003      	movs	r0, #3
 8002260:	f000 f905 	bl	800246e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002264:	200f      	movs	r0, #15
 8002266:	f7ff fd39 	bl	8001cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800226a:	f7ff fcb1 	bl	8001bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002278:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <HAL_IncTick+0x20>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_IncTick+0x24>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4413      	add	r3, r2
 8002284:	4a04      	ldr	r2, [pc, #16]	@ (8002298 <HAL_IncTick+0x24>)
 8002286:	6013      	str	r3, [r2, #0]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20000008 	.word	0x20000008
 8002298:	200006d0 	.word	0x200006d0

0800229c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return uwTick;
 80022a0:	4b03      	ldr	r3, [pc, #12]	@ (80022b0 <HAL_GetTick+0x14>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	200006d0 	.word	0x200006d0

080022b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022bc:	f7ff ffee 	bl	800229c <HAL_GetTick>
 80022c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d005      	beq.n	80022da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ce:	4b0a      	ldr	r3, [pc, #40]	@ (80022f8 <HAL_Delay+0x44>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022da:	bf00      	nop
 80022dc:	f7ff ffde 	bl	800229c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d8f7      	bhi.n	80022dc <HAL_Delay+0x28>
  {
  }
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000008 	.word	0x20000008

080022fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002300:	4b03      	ldr	r3, [pc, #12]	@ (8002310 <HAL_GetREVID+0x14>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	0c1b      	lsrs	r3, r3, #16
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e0042000 	.word	0xe0042000

08002314 <__NVIC_SetPriorityGrouping>:
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002324:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <__NVIC_SetPriorityGrouping+0x40>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002330:	4013      	ands	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800233c:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 800233e:	4313      	orrs	r3, r2
 8002340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002342:	4a04      	ldr	r2, [pc, #16]	@ (8002354 <__NVIC_SetPriorityGrouping+0x40>)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	60d3      	str	r3, [r2, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00
 8002358:	05fa0000 	.word	0x05fa0000

0800235c <__NVIC_GetPriorityGrouping>:
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002360:	4b04      	ldr	r3, [pc, #16]	@ (8002374 <__NVIC_GetPriorityGrouping+0x18>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	f003 0307 	and.w	r3, r3, #7
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_EnableIRQ>:
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	2b00      	cmp	r3, #0
 8002388:	db0b      	blt.n	80023a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	f003 021f 	and.w	r2, r3, #31
 8002390:	4907      	ldr	r1, [pc, #28]	@ (80023b0 <__NVIC_EnableIRQ+0x38>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	2001      	movs	r0, #1
 800239a:	fa00 f202 	lsl.w	r2, r0, r2
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000e100 	.word	0xe000e100

080023b4 <__NVIC_SetPriority>:
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	db0a      	blt.n	80023de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	490c      	ldr	r1, [pc, #48]	@ (8002400 <__NVIC_SetPriority+0x4c>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	0112      	lsls	r2, r2, #4
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	440b      	add	r3, r1
 80023d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80023dc:	e00a      	b.n	80023f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4908      	ldr	r1, [pc, #32]	@ (8002404 <__NVIC_SetPriority+0x50>)
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	3b04      	subs	r3, #4
 80023ec:	0112      	lsls	r2, r2, #4
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	440b      	add	r3, r1
 80023f2:	761a      	strb	r2, [r3, #24]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000e100 	.word	0xe000e100
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <NVIC_EncodePriority>:
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	@ 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f1c3 0307 	rsb	r3, r3, #7
 8002422:	2b04      	cmp	r3, #4
 8002424:	bf28      	it	cs
 8002426:	2304      	movcs	r3, #4
 8002428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3304      	adds	r3, #4
 800242e:	2b06      	cmp	r3, #6
 8002430:	d902      	bls.n	8002438 <NVIC_EncodePriority+0x30>
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3b03      	subs	r3, #3
 8002436:	e000      	b.n	800243a <NVIC_EncodePriority+0x32>
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	f04f 32ff 	mov.w	r2, #4294967295
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43da      	mvns	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	401a      	ands	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002450:	f04f 31ff 	mov.w	r1, #4294967295
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	43d9      	mvns	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	4313      	orrs	r3, r2
}
 8002462:	4618      	mov	r0, r3
 8002464:	3724      	adds	r7, #36	@ 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff ff4c 	bl	8002314 <__NVIC_SetPriorityGrouping>
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002496:	f7ff ff61 	bl	800235c <__NVIC_GetPriorityGrouping>
 800249a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	68b9      	ldr	r1, [r7, #8]
 80024a0:	6978      	ldr	r0, [r7, #20]
 80024a2:	f7ff ffb1 	bl	8002408 <NVIC_EncodePriority>
 80024a6:	4602      	mov	r2, r0
 80024a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff ff80 	bl	80023b4 <__NVIC_SetPriority>
}
 80024b4:	bf00      	nop
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff ff54 	bl	8002378 <__NVIC_EnableIRQ>
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80024dc:	f3bf 8f5f 	dmb	sy
}
 80024e0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80024e2:	4b07      	ldr	r3, [pc, #28]	@ (8002500 <HAL_MPU_Disable+0x28>)
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e6:	4a06      	ldr	r2, [pc, #24]	@ (8002500 <HAL_MPU_Disable+0x28>)
 80024e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ec:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80024ee:	4b05      	ldr	r3, [pc, #20]	@ (8002504 <HAL_MPU_Disable+0x2c>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	605a      	str	r2, [r3, #4]
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	e000ed00 	.word	0xe000ed00
 8002504:	e000ed90 	.word	0xe000ed90

08002508 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002510:	4a0b      	ldr	r2, [pc, #44]	@ (8002540 <HAL_MPU_Enable+0x38>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800251a:	4b0a      	ldr	r3, [pc, #40]	@ (8002544 <HAL_MPU_Enable+0x3c>)
 800251c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251e:	4a09      	ldr	r2, [pc, #36]	@ (8002544 <HAL_MPU_Enable+0x3c>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002524:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002526:	f3bf 8f4f 	dsb	sy
}
 800252a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800252c:	f3bf 8f6f 	isb	sy
}
 8002530:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000ed90 	.word	0xe000ed90
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	785a      	ldrb	r2, [r3, #1]
 8002554:	4b1b      	ldr	r3, [pc, #108]	@ (80025c4 <HAL_MPU_ConfigRegion+0x7c>)
 8002556:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002558:	4b1a      	ldr	r3, [pc, #104]	@ (80025c4 <HAL_MPU_ConfigRegion+0x7c>)
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	4a19      	ldr	r2, [pc, #100]	@ (80025c4 <HAL_MPU_ConfigRegion+0x7c>)
 800255e:	f023 0301 	bic.w	r3, r3, #1
 8002562:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002564:	4a17      	ldr	r2, [pc, #92]	@ (80025c4 <HAL_MPU_ConfigRegion+0x7c>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7b1b      	ldrb	r3, [r3, #12]
 8002570:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	7adb      	ldrb	r3, [r3, #11]
 8002576:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002578:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7a9b      	ldrb	r3, [r3, #10]
 800257e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002580:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	7b5b      	ldrb	r3, [r3, #13]
 8002586:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002588:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	7b9b      	ldrb	r3, [r3, #14]
 800258e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002590:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	7bdb      	ldrb	r3, [r3, #15]
 8002596:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002598:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7a5b      	ldrb	r3, [r3, #9]
 800259e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80025a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	7a1b      	ldrb	r3, [r3, #8]
 80025a6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80025a8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	7812      	ldrb	r2, [r2, #0]
 80025ae:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025b0:	4a04      	ldr	r2, [pc, #16]	@ (80025c4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025b2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025b4:	6113      	str	r3, [r2, #16]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000ed90 	.word	0xe000ed90

080025c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e086      	b.n	80026e8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d106      	bne.n	80025f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2223      	movs	r2, #35	@ 0x23
 80025e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f007 f8c1 	bl	8009774 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f2:	4b3f      	ldr	r3, [pc, #252]	@ (80026f0 <HAL_ETH_Init+0x128>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f6:	4a3e      	ldr	r2, [pc, #248]	@ (80026f0 <HAL_ETH_Init+0x128>)
 80025f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025fe:	4b3c      	ldr	r3, [pc, #240]	@ (80026f0 <HAL_ETH_Init+0x128>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800260a:	4b3a      	ldr	r3, [pc, #232]	@ (80026f4 <HAL_ETH_Init+0x12c>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4a39      	ldr	r2, [pc, #228]	@ (80026f4 <HAL_ETH_Init+0x12c>)
 8002610:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002614:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002616:	4b37      	ldr	r3, [pc, #220]	@ (80026f4 <HAL_ETH_Init+0x12c>)
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	4935      	ldr	r1, [pc, #212]	@ (80026f4 <HAL_ETH_Init+0x12c>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002624:	4b33      	ldr	r3, [pc, #204]	@ (80026f4 <HAL_ETH_Init+0x12c>)
 8002626:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800263e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002640:	f7ff fe2c 	bl	800229c <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002646:	e011      	b.n	800266c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002648:	f7ff fe28 	bl	800229c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002656:	d909      	bls.n	800266c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2204      	movs	r2, #4
 800265c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	22e0      	movs	r2, #224	@ 0xe0
 8002664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e03d      	b.n	80026e8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1e4      	bne.n	8002648 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 ff5c 	bl	800353c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f001 f807 	bl	8003698 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f001 f85d 	bl	800374a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	461a      	mov	r2, r3
 8002696:	2100      	movs	r1, #0
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 ffc5 	bl	8003628 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80026ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b0f      	ldr	r3, [pc, #60]	@ (80026f8 <HAL_ETH_Init+0x130>)
 80026bc:	430b      	orrs	r3, r1
 80026be:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80026d2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2210      	movs	r2, #16
 80026e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40013800 	.word	0x40013800
 80026f8:	00020060 	.word	0x00020060

080026fc <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800270a:	2b10      	cmp	r3, #16
 800270c:	d15f      	bne.n	80027ce <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2223      	movs	r2, #35	@ 0x23
 8002712:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2204      	movs	r2, #4
 8002720:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f9f6 	bl	8002b14 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002730:	2001      	movs	r0, #1
 8002732:	f7ff fdbf 	bl	80022b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002750:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002754:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800276c:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fd80 	bl	8003274 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0208 	orr.w	r2, r2, #8
 8002782:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800278c:	2001      	movs	r0, #1
 800278e:	f7ff fd91 	bl	80022b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0204 	orr.w	r2, r2, #4
 80027a8:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027b2:	69d9      	ldr	r1, [r3, #28]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b07      	ldr	r3, [pc, #28]	@ (80027d8 <HAL_ETH_Start_IT+0xdc>)
 80027ba:	430b      	orrs	r3, r1
 80027bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027c0:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2223      	movs	r2, #35	@ 0x23
 80027c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	e000      	b.n	80027d0 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
  }
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	0001a0c1 	.word	0x0001a0c1

080027dc <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027ea:	2b23      	cmp	r3, #35	@ 0x23
 80027ec:	d16e      	bne.n	80028cc <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2223      	movs	r2, #35	@ 0x23
 80027f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027fe:	69d9      	ldr	r1, [r3, #28]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b34      	ldr	r3, [pc, #208]	@ (80028d8 <HAL_ETH_Stop_IT+0xfc>)
 8002806:	400b      	ands	r3, r1
 8002808:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800280c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002820:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002824:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	f023 0302 	bic.w	r3, r3, #2
 8002838:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800283c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0204 	bic.w	r2, r2, #4
 800284c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002856:	2001      	movs	r0, #1
 8002858:	f7ff fd2c 	bl	80022b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 fd05 	bl	8003274 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0208 	bic.w	r2, r2, #8
 8002878:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002882:	2001      	movs	r0, #1
 8002884:	f7ff fd16 	bl	80022b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	e00e      	b.n	80028b4 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	3212      	adds	r2, #18
 800289c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a0:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	3301      	adds	r3, #1
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d9ed      	bls.n	8002896 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2210      	movs	r2, #16
 80028c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e000      	b.n	80028ce <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
  }
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	fffe5f3e 	.word	0xfffe5f3e

080028dc <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d109      	bne.n	8002900 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f2:	f043 0201 	orr.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e045      	b.n	800298c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002906:	2b23      	cmp	r3, #35	@ 0x23
 8002908:	d13f      	bne.n	800298a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002912:	2201      	movs	r2, #1
 8002914:	6839      	ldr	r1, [r7, #0]
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 ff86 	bl	8003828 <ETH_Prepare_Tx_Descriptors>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d009      	beq.n	8002936 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002928:	f043 0202 	orr.w	r2, r3, #2
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e02a      	b.n	800298c <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8002936:	f3bf 8f4f 	dsb	sy
}
 800293a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	629a      	str	r2, [r3, #40]	@ 0x28
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294a:	2b03      	cmp	r3, #3
 800294c:	d904      	bls.n	8002958 <HAL_ETH_Transmit_IT+0x7c>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002952:	1f1a      	subs	r2, r3, #4
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00d      	beq.n	8002986 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002972:	461a      	mov	r2, r3
 8002974:	2304      	movs	r3, #4
 8002976:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002980:	461a      	mov	r2, r3
 8002982:	2300      	movs	r3, #0
 8002984:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	e000      	b.n	800298c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
  }
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d109      	bne.n	80029c0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b2:	f043 0201 	orr.w	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0a4      	b.n	8002b0a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029c6:	2b23      	cmp	r3, #35	@ 0x23
 80029c8:	d001      	beq.n	80029ce <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e09d      	b.n	8002b0a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	3212      	adds	r2, #18
 80029da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029de:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029e4:	f1c3 0304 	rsb	r3, r3, #4
 80029e8:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80029ea:	e066      	b.n	8002aba <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d007      	beq.n	8002a08 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	69da      	ldr	r2, [r3, #28]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	699a      	ldr	r2, [r3, #24]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d103      	bne.n	8002a1c <HAL_ETH_ReadData+0x88>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d03c      	beq.n	8002a96 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002a3e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002a54:	2301      	movs	r3, #1
 8002a56:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002a70:	461a      	mov	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	f007 f849 	bl	8009b0c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	441a      	add	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	2200      	movs	r2, #0
 8002a94:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d902      	bls.n	8002aa8 <HAL_ETH_ReadData+0x114>
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3b04      	subs	r3, #4
 8002aa6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69fa      	ldr	r2, [r7, #28]
 8002aac:	3212      	adds	r2, #18
 8002aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	db06      	blt.n	8002ad0 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d202      	bcs.n	8002ad0 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d08d      	beq.n	80029ec <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	441a      	add	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f815 	bl	8002b14 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69fa      	ldr	r2, [r7, #28]
 8002aee:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002af0:	7cfb      	ldrb	r3, [r7, #19]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d108      	bne.n	8002b08 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	e000      	b.n	8002b0a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3720      	adds	r7, #32
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002b20:	2301      	movs	r3, #1
 8002b22:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b28:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69fa      	ldr	r2, [r7, #28]
 8002b2e:	3212      	adds	r2, #18
 8002b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b34:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b3a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002b3c:	e042      	b.n	8002bc4 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d112      	bne.n	8002b6c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002b46:	f107 0308 	add.w	r3, r7, #8
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f006 ffae 	bl	8009aac <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d102      	bne.n	8002b5c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	74fb      	strb	r3, [r7, #19]
 8002b5a:	e007      	b.n	8002b6c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	461a      	mov	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002b6c:	7cfb      	ldrb	r3, [r7, #19]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d028      	beq.n	8002bc4 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	4b26      	ldr	r3, [pc, #152]	@ (8002c18 <ETH_UpdateDescriptor+0x104>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	6053      	str	r3, [r2, #4]
 8002b86:	e005      	b.n	8002b94 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d902      	bls.n	8002bb2 <ETH_UpdateDescriptor+0x9e>
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	3b04      	subs	r3, #4
 8002bb0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	3212      	adds	r2, #18
 8002bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bbc:	617b      	str	r3, [r7, #20]
      desccount--;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <ETH_UpdateDescriptor+0xbc>
 8002bca:	7cfb      	ldrb	r3, [r7, #19]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1b6      	bne.n	8002b3e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d01a      	beq.n	8002c10 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002be4:	f3bf 8f5f 	dmb	sy
}
 8002be8:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6919      	ldr	r1, [r3, #16]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	18ca      	adds	r2, r1, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c02:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002c10:	bf00      	nop
 8002c12:	3720      	adds	r7, #32
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	80004000 	.word	0x80004000

08002c1c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3318      	adds	r3, #24
 8002c28:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c34:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002c36:	2301      	movs	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002c3a:	e047      	b.n	8002ccc <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10a      	bne.n	8002c6c <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d902      	bls.n	8002c68 <HAL_ETH_ReleaseTxPacket+0x4c>
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	3b04      	subs	r3, #4
 8002c66:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002c6c:	7bbb      	ldrb	r3, [r7, #14]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d02c      	beq.n	8002ccc <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68d9      	ldr	r1, [r3, #12]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	440b      	add	r3, r1
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	db1f      	blt.n	8002cc8 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f006 ff7b 	bl	8009b90 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	3301      	adds	r3, #1
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d902      	bls.n	8002cba <HAL_ETH_ReleaseTxPacket+0x9e>
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	3b04      	subs	r3, #4
 8002cb8:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002cc6:	e001      	b.n	8002ccc <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_ETH_ReleaseTxPacket+0xbc>
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1b1      	bne.n	8002c3c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf2:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002d0c:	4b4b      	ldr	r3, [pc, #300]	@ (8002e3c <HAL_ETH_IRQHandler+0x158>)
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00e      	beq.n	8002d3a <HAL_ETH_IRQHandler+0x56>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d009      	beq.n	8002d3a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d2e:	461a      	mov	r2, r3
 8002d30:	4b43      	ldr	r3, [pc, #268]	@ (8002e40 <HAL_ETH_IRQHandler+0x15c>)
 8002d32:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f006 fa31 	bl	800919c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00f      	beq.n	8002d64 <HAL_ETH_IRQHandler+0x80>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d56:	461a      	mov	r2, r3
 8002d58:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002d5c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f006 fa2c 	bl	80091bc <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d042      	beq.n	8002df4 <HAL_ETH_IRQHandler+0x110>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d03d      	beq.n	8002df4 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7e:	f043 0208 	orr.w	r2, r3, #8
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d01a      	beq.n	8002dc8 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d9a:	695a      	ldr	r2, [r3, #20]
 8002d9c:	4b29      	ldr	r3, [pc, #164]	@ (8002e44 <HAL_ETH_IRQHandler+0x160>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002db8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002dbc:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	22e0      	movs	r2, #224	@ 0xe0
 8002dc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002dc6:	e012      	b.n	8002dee <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002de6:	461a      	mov	r2, r3
 8002de8:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002dec:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f006 f9f4 	bl	80091dc <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00e      	beq.n	8002e1c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e04:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f81a 	bl	8002e48 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d006      	beq.n	8002e34 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002e26:	4b05      	ldr	r3, [pc, #20]	@ (8002e3c <HAL_ETH_IRQHandler+0x158>)
 8002e28:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002e2c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f814 	bl	8002e5c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002e34:	bf00      	nop
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40013c00 	.word	0x40013c00
 8002e40:	00010040 	.word	0x00010040
 8002e44:	007e2000 	.word	0x007e2000

08002e48 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f003 031c 	and.w	r3, r3, #28
 8002e8c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	02db      	lsls	r3, r3, #11
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	019b      	lsls	r3, r3, #6
 8002e9e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f023 0302 	bic.w	r3, r3, #2
 8002eae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002ec0:	f7ff f9ec 	bl	800229c <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ec6:	e00d      	b.n	8002ee4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002ec8:	f7ff f9e8 	bl	800229c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed6:	d301      	bcc.n	8002edc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e010      	b.n	8002efe <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1ec      	bne.n	8002ec8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b086      	sub	sp, #24
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f003 031c 	and.w	r3, r3, #28
 8002f22:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	02db      	lsls	r3, r3, #11
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	019b      	lsls	r3, r3, #6
 8002f34:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f043 0302 	orr.w	r3, r3, #2
 8002f44:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f60:	f7ff f99c 	bl	800229c <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f66:	e00d      	b.n	8002f84 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002f68:	f7ff f998 	bl	800229c <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f76:	d301      	bcc.n	8002f7c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e009      	b.n	8002f90 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1ec      	bne.n	8002f68 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0e6      	b.n	800317a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bf14      	ite	ne
 8002fba:	2301      	movne	r3, #1
 8002fbc:	2300      	moveq	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bf0c      	ite	eq
 8002fe4:	2301      	moveq	r3, #1
 8002fe6:	2300      	movne	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	461a      	mov	r2, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bf14      	ite	ne
 8003000:	2301      	movne	r3, #1
 8003002:	2300      	moveq	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003016:	2b00      	cmp	r3, #0
 8003018:	bf0c      	ite	eq
 800301a:	2301      	moveq	r3, #1
 800301c:	2300      	movne	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003030:	2b00      	cmp	r3, #0
 8003032:	bf14      	ite	ne
 8003034:	2301      	movne	r3, #1
 8003036:	2300      	moveq	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003066:	2b00      	cmp	r3, #0
 8003068:	bf0c      	ite	eq
 800306a:	2301      	moveq	r3, #1
 800306c:	2300      	movne	r3, #0
 800306e:	b2db      	uxtb	r3, r3
 8003070:	461a      	mov	r2, r3
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309a:	2b00      	cmp	r3, #0
 800309c:	bf14      	ite	ne
 800309e:	2301      	movne	r3, #1
 80030a0:	2300      	moveq	r3, #0
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf14      	ite	ne
 80030c6:	2301      	movne	r3, #1
 80030c8:	2300      	moveq	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf14      	ite	ne
 80030e0:	2301      	movne	r3, #1
 80030e2:	2300      	moveq	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	461a      	mov	r2, r3
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	bf14      	ite	ne
 80030fa:	2301      	movne	r3, #1
 80030fc:	2300      	moveq	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003112:	2b00      	cmp	r3, #0
 8003114:	bf0c      	ite	eq
 8003116:	2301      	moveq	r3, #1
 8003118:	2300      	movne	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	b29a      	uxth	r2, r3
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b00      	cmp	r3, #0
 800314c:	bf14      	ite	ne
 800314e:	2301      	movne	r3, #1
 8003150:	2300      	moveq	r3, #0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003166:	2b00      	cmp	r3, #0
 8003168:	bf14      	ite	ne
 800316a:	2301      	movne	r3, #1
 800316c:	2300      	moveq	r3, #0
 800316e:	b2db      	uxtb	r3, r3
 8003170:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e00b      	b.n	80031b2 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031a0:	2b10      	cmp	r3, #16
 80031a2:	d105      	bne.n	80031b0 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80031a4:	6839      	ldr	r1, [r7, #0]
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f88a 	bl	80032c0 <ETH_SetMACConfig>

    return HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e000      	b.n	80031b2 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
  }
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 031c 	bic.w	r3, r3, #28
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80031d4:	f003 fbea 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 80031d8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4a14      	ldr	r2, [pc, #80]	@ (8003230 <HAL_ETH_SetMDIOClockRange+0x74>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d804      	bhi.n	80031ec <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f043 0308 	orr.w	r3, r3, #8
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	e019      	b.n	8003220 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4a11      	ldr	r2, [pc, #68]	@ (8003234 <HAL_ETH_SetMDIOClockRange+0x78>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d204      	bcs.n	80031fe <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f043 030c 	orr.w	r3, r3, #12
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	e010      	b.n	8003220 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4a0d      	ldr	r2, [pc, #52]	@ (8003238 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d90c      	bls.n	8003220 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	4a0c      	ldr	r2, [pc, #48]	@ (800323c <HAL_ETH_SetMDIOClockRange+0x80>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d804      	bhi.n	8003218 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	e003      	b.n	8003220 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f043 0310 	orr.w	r3, r3, #16
 800321e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	611a      	str	r2, [r3, #16]
}
 8003228:	bf00      	nop
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	02160ebf 	.word	0x02160ebf
 8003234:	03938700 	.word	0x03938700
 8003238:	05f5e0ff 	.word	0x05f5e0ff
 800323c:	08f0d17f 	.word	0x08f0d17f

08003240 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 800324e:	4618      	mov	r0, r3
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003292:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003296:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032a4:	2001      	movs	r0, #1
 80032a6:	f7ff f805 	bl	80022b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80032b4:	6193      	str	r3, [r2, #24]
}
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4b53      	ldr	r3, [pc, #332]	@ (8003424 <ETH_SetMACConfig+0x164>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	7b9b      	ldrb	r3, [r3, #14]
 80032de:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	7c12      	ldrb	r2, [r2, #16]
 80032e4:	2a00      	cmp	r2, #0
 80032e6:	d102      	bne.n	80032ee <ETH_SetMACConfig+0x2e>
 80032e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80032ec:	e000      	b.n	80032f0 <ETH_SetMACConfig+0x30>
 80032ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80032f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	7c52      	ldrb	r2, [r2, #17]
 80032f6:	2a00      	cmp	r2, #0
 80032f8:	d102      	bne.n	8003300 <ETH_SetMACConfig+0x40>
 80032fa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80032fe:	e000      	b.n	8003302 <ETH_SetMACConfig+0x42>
 8003300:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003302:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003308:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	7fdb      	ldrb	r3, [r3, #31]
 800330e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003310:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003316:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	7f92      	ldrb	r2, [r2, #30]
 800331c:	2a00      	cmp	r2, #0
 800331e:	d102      	bne.n	8003326 <ETH_SetMACConfig+0x66>
 8003320:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003324:	e000      	b.n	8003328 <ETH_SetMACConfig+0x68>
 8003326:	2200      	movs	r2, #0
                        macconf->Speed |
 8003328:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	7f1b      	ldrb	r3, [r3, #28]
 800332e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003330:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003336:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	791b      	ldrb	r3, [r3, #4]
 800333c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800333e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003346:	2a00      	cmp	r2, #0
 8003348:	d102      	bne.n	8003350 <ETH_SetMACConfig+0x90>
 800334a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800334e:	e000      	b.n	8003352 <ETH_SetMACConfig+0x92>
 8003350:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003352:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	7bdb      	ldrb	r3, [r3, #15]
 8003358:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800335a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003360:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003368:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800336a:	4313      	orrs	r3, r2
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003382:	2001      	movs	r0, #1
 8003384:	f7fe ff96 	bl	80022b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800339e:	4013      	ands	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80033ae:	2a00      	cmp	r2, #0
 80033b0:	d101      	bne.n	80033b6 <ETH_SetMACConfig+0xf6>
 80033b2:	2280      	movs	r2, #128	@ 0x80
 80033b4:	e000      	b.n	80033b8 <ETH_SetMACConfig+0xf8>
 80033b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80033b8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80033be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80033c6:	2a01      	cmp	r2, #1
 80033c8:	d101      	bne.n	80033ce <ETH_SetMACConfig+0x10e>
 80033ca:	2208      	movs	r2, #8
 80033cc:	e000      	b.n	80033d0 <ETH_SetMACConfig+0x110>
 80033ce:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80033d0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80033d8:	2a01      	cmp	r2, #1
 80033da:	d101      	bne.n	80033e0 <ETH_SetMACConfig+0x120>
 80033dc:	2204      	movs	r2, #4
 80033de:	e000      	b.n	80033e2 <ETH_SetMACConfig+0x122>
 80033e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80033e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80033ea:	2a01      	cmp	r2, #1
 80033ec:	d101      	bne.n	80033f2 <ETH_SetMACConfig+0x132>
 80033ee:	2202      	movs	r2, #2
 80033f0:	e000      	b.n	80033f4 <ETH_SetMACConfig+0x134>
 80033f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80033f4:	4313      	orrs	r3, r2
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800340c:	2001      	movs	r0, #1
 800340e:	f7fe ff51 	bl	80022b4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	619a      	str	r2, [r3, #24]
}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	fd20810f 	.word	0xfd20810f

08003428 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4b3d      	ldr	r3, [pc, #244]	@ (8003538 <ETH_SetDMAConfig+0x110>)
 8003442:	4013      	ands	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	7b1b      	ldrb	r3, [r3, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d102      	bne.n	8003454 <ETH_SetDMAConfig+0x2c>
 800344e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003452:	e000      	b.n	8003456 <ETH_SetDMAConfig+0x2e>
 8003454:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	7b5b      	ldrb	r3, [r3, #13]
 800345a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800345c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	7f52      	ldrb	r2, [r2, #29]
 8003462:	2a00      	cmp	r2, #0
 8003464:	d102      	bne.n	800346c <ETH_SetDMAConfig+0x44>
 8003466:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800346a:	e000      	b.n	800346e <ETH_SetDMAConfig+0x46>
 800346c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800346e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	7b9b      	ldrb	r3, [r3, #14]
 8003474:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003476:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800347c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	7f1b      	ldrb	r3, [r3, #28]
 8003482:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003484:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	7f9b      	ldrb	r3, [r3, #30]
 800348a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800348c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003492:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800349a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800349c:	4313      	orrs	r3, r2
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034ac:	461a      	mov	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034be:	2001      	movs	r0, #1
 80034c0:	f7fe fef8 	bl	80022b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034cc:	461a      	mov	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	791b      	ldrb	r3, [r3, #4]
 80034d6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034dc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80034e2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80034e8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034f0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80034f2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80034fa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003500:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800350a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800350e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800351c:	2001      	movs	r0, #1
 800351e:	f7fe fec9 	bl	80022b4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800352a:	461a      	mov	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6013      	str	r3, [r2, #0]
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	f8de3f23 	.word	0xf8de3f23

0800353c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b0a6      	sub	sp, #152	@ 0x98
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003544:	2301      	movs	r3, #1
 8003546:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800354a:	2301      	movs	r3, #1
 800354c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003550:	2300      	movs	r3, #0
 8003552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003554:	2300      	movs	r3, #0
 8003556:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800355a:	2301      	movs	r3, #1
 800355c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003560:	2300      	movs	r3, #0
 8003562:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003566:	2301      	movs	r3, #1
 8003568:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800356c:	2301      	movs	r3, #1
 800356e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003572:	2300      	movs	r3, #0
 8003574:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003578:	2300      	movs	r3, #0
 800357a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800357e:	2300      	movs	r3, #0
 8003580:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003582:	2300      	movs	r3, #0
 8003584:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003588:	2300      	movs	r3, #0
 800358a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800358c:	2300      	movs	r3, #0
 800358e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003592:	2300      	movs	r3, #0
 8003594:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003598:	2300      	movs	r3, #0
 800359a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800359e:	2300      	movs	r3, #0
 80035a0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80035a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80035a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80035aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80035ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80035b0:	2300      	movs	r3, #0
 80035b2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80035b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80035ba:	4619      	mov	r1, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff fe7f 	bl	80032c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80035c2:	2301      	movs	r3, #1
 80035c4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80035c6:	2301      	movs	r3, #1
 80035c8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80035d0:	2301      	movs	r3, #1
 80035d2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80035d8:	2300      	movs	r3, #0
 80035da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80035de:	2300      	movs	r3, #0
 80035e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80035e4:	2300      	movs	r3, #0
 80035e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80035e8:	2301      	movs	r3, #1
 80035ea:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80035ee:	2301      	movs	r3, #1
 80035f0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80035f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035f6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80035f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80035fc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80035fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003602:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003604:	2301      	movs	r3, #1
 8003606:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800360a:	2300      	movs	r3, #0
 800360c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800360e:	2300      	movs	r3, #0
 8003610:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003612:	f107 0308 	add.w	r3, r7, #8
 8003616:	4619      	mov	r1, r3
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff ff05 	bl	8003428 <ETH_SetDMAConfig>
}
 800361e:	bf00      	nop
 8003620:	3798      	adds	r7, #152	@ 0x98
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3305      	adds	r3, #5
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	3204      	adds	r2, #4
 8003640:	7812      	ldrb	r2, [r2, #0]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	4b11      	ldr	r3, [pc, #68]	@ (8003690 <ETH_MACAddressConfig+0x68>)
 800364a:	4413      	add	r3, r2
 800364c:	461a      	mov	r2, r3
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3303      	adds	r3, #3
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	061a      	lsls	r2, r3, #24
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3302      	adds	r3, #2
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	041b      	lsls	r3, r3, #16
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3301      	adds	r3, #1
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	021b      	lsls	r3, r3, #8
 800366c:	4313      	orrs	r3, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	7812      	ldrb	r2, [r2, #0]
 8003672:	4313      	orrs	r3, r2
 8003674:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <ETH_MACAddressConfig+0x6c>)
 800367a:	4413      	add	r3, r2
 800367c:	461a      	mov	r2, r3
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	6013      	str	r3, [r2, #0]
}
 8003682:	bf00      	nop
 8003684:	371c      	adds	r7, #28
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40028040 	.word	0x40028040
 8003694:	40028044 	.word	0x40028044

08003698 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	e03e      	b.n	8003724 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68d9      	ldr	r1, [r3, #12]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	440b      	add	r3, r1
 80036b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2200      	movs	r2, #0
 80036c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2200      	movs	r2, #0
 80036c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2200      	movs	r2, #0
 80036ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80036d0:	68b9      	ldr	r1, [r7, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	3206      	adds	r2, #6
 80036d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d80c      	bhi.n	8003708 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68d9      	ldr	r1, [r3, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	440b      	add	r3, r1
 8003700:	461a      	mov	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	60da      	str	r2, [r3, #12]
 8003706:	e004      	b.n	8003712 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	461a      	mov	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3301      	adds	r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b03      	cmp	r3, #3
 8003728:	d9bd      	bls.n	80036a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800373c:	611a      	str	r2, [r3, #16]
}
 800373e:	bf00      	nop
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800374a:	b480      	push	{r7}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003752:	2300      	movs	r3, #0
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	e048      	b.n	80037ea <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6919      	ldr	r1, [r3, #16]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	440b      	add	r3, r1
 8003768:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2200      	movs	r2, #0
 8003774:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2200      	movs	r2, #0
 800377a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2200      	movs	r2, #0
 8003780:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2200      	movs	r2, #0
 8003786:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2200      	movs	r2, #0
 800378c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003794:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80037ae:	68b9      	ldr	r1, [r7, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	3212      	adds	r2, #18
 80037b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d80c      	bhi.n	80037da <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6919      	ldr	r1, [r3, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	440b      	add	r3, r1
 80037d2:	461a      	mov	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	60da      	str	r2, [r3, #12]
 80037d8:	e004      	b.n	80037e4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	461a      	mov	r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	3301      	adds	r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d9b3      	bls.n	8003758 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800381a:	60da      	str	r2, [r3, #12]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003828:	b480      	push	{r7}
 800382a:	b091      	sub	sp, #68	@ 0x44
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	3318      	adds	r3, #24
 8003838:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800383a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800384a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800384e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003852:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800385e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003866:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800386a:	d007      	beq.n	800387c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800386c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800386e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003870:	3304      	adds	r3, #4
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800387c:	2302      	movs	r3, #2
 800387e:	e111      	b.n	8003aa4 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003882:	3301      	adds	r3, #1
 8003884:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	4b86      	ldr	r3, [pc, #536]	@ (8003ab0 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003896:	4013      	ands	r3, r2
 8003898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800389a:	6852      	ldr	r2, [r2, #4]
 800389c:	431a      	orrs	r2, r3
 800389e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d008      	beq.n	80038c0 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80038ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038be:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80038cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	431a      	orrs	r2, r3
 80038da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038dc:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0304 	and.w	r3, r3, #4
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80038ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80038f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80038f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80038fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003900:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003902:	e082      	b.n	8003a0a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800390c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390e:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d006      	beq.n	8003924 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800391e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	e005      	b.n	8003930 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800392c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392e:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003932:	3301      	adds	r3, #1
 8003934:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003938:	2b03      	cmp	r3, #3
 800393a:	d902      	bls.n	8003942 <ETH_Prepare_Tx_Descriptors+0x11a>
 800393c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800393e:	3b04      	subs	r3, #4
 8003940:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003944:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800394a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800394c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003954:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003958:	d007      	beq.n	800396a <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800395a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800395c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800395e:	3304      	adds	r3, #4
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d029      	beq.n	80039be <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003976:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003978:	2300      	movs	r3, #0
 800397a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800397c:	e019      	b.n	80039b2 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800397e:	f3bf 8f5f 	dmb	sy
}
 8003982:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800398c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003992:	3301      	adds	r3, #1
 8003994:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003998:	2b03      	cmp	r3, #3
 800399a:	d902      	bls.n	80039a2 <ETH_Prepare_Tx_Descriptors+0x17a>
 800399c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800399e:	3b04      	subs	r3, #4
 80039a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80039a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039aa:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80039ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ae:	3301      	adds	r3, #1
 80039b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80039b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d3e1      	bcc.n	800397e <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 80039ba:	2302      	movs	r3, #2
 80039bc:	e072      	b.n	8003aa4 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80039be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80039c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c8:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80039ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039cc:	3301      	adds	r3, #1
 80039ce:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80039d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80039d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039de:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80039e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	4b32      	ldr	r3, [pc, #200]	@ (8003ab0 <ETH_Prepare_Tx_Descriptors+0x288>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039ea:	6852      	ldr	r2, [r2, #4]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f0:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80039f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f4:	3301      	adds	r3, #1
 80039f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80039f8:	f3bf 8f5f 	dmb	sy
}
 80039fc:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80039fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a08:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f47f af78 	bne.w	8003904 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d006      	beq.n	8003a28 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	e005      	b.n	8003a34 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a32:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a42:	6a3a      	ldr	r2, [r7, #32]
 8003a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a48:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003a4a:	f3bf 8f5f 	dmb	sy
}
 8003a4e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a64:	3304      	adds	r3, #4
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a70:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a72:	f3ef 8310 	mrs	r3, PRIMASK
 8003a76:	613b      	str	r3, [r7, #16]
  return(result);
 8003a78:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003a7a:	61fb      	str	r3, [r7, #28]
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f383 8810 	msr	PRIMASK, r3
}
 8003a86:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8e:	4413      	add	r3, r2
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a94:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f383 8810 	msr	PRIMASK, r3
}
 8003aa0:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3744      	adds	r7, #68	@ 0x44
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	ffffe000 	.word	0xffffe000

08003ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b089      	sub	sp, #36	@ 0x24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
 8003ad2:	e175      	b.n	8003dc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	f040 8164 	bne.w	8003dba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d005      	beq.n	8003b0a <HAL_GPIO_Init+0x56>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d130      	bne.n	8003b6c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	2203      	movs	r2, #3
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b40:	2201      	movs	r2, #1
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	091b      	lsrs	r3, r3, #4
 8003b56:	f003 0201 	and.w	r2, r3, #1
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d017      	beq.n	8003ba8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	2203      	movs	r2, #3
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d123      	bne.n	8003bfc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	08da      	lsrs	r2, r3, #3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3208      	adds	r2, #8
 8003bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	220f      	movs	r2, #15
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	08da      	lsrs	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3208      	adds	r2, #8
 8003bf6:	69b9      	ldr	r1, [r7, #24]
 8003bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	2203      	movs	r2, #3
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 0203 	and.w	r2, r3, #3
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 80be 	beq.w	8003dba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3e:	4b66      	ldr	r3, [pc, #408]	@ (8003dd8 <HAL_GPIO_Init+0x324>)
 8003c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c42:	4a65      	ldr	r2, [pc, #404]	@ (8003dd8 <HAL_GPIO_Init+0x324>)
 8003c44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c4a:	4b63      	ldr	r3, [pc, #396]	@ (8003dd8 <HAL_GPIO_Init+0x324>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003c56:	4a61      	ldr	r2, [pc, #388]	@ (8003ddc <HAL_GPIO_Init+0x328>)
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	089b      	lsrs	r3, r3, #2
 8003c5c:	3302      	adds	r3, #2
 8003c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	220f      	movs	r2, #15
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4013      	ands	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a58      	ldr	r2, [pc, #352]	@ (8003de0 <HAL_GPIO_Init+0x32c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d037      	beq.n	8003cf2 <HAL_GPIO_Init+0x23e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a57      	ldr	r2, [pc, #348]	@ (8003de4 <HAL_GPIO_Init+0x330>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d031      	beq.n	8003cee <HAL_GPIO_Init+0x23a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a56      	ldr	r2, [pc, #344]	@ (8003de8 <HAL_GPIO_Init+0x334>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d02b      	beq.n	8003cea <HAL_GPIO_Init+0x236>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a55      	ldr	r2, [pc, #340]	@ (8003dec <HAL_GPIO_Init+0x338>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d025      	beq.n	8003ce6 <HAL_GPIO_Init+0x232>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a54      	ldr	r2, [pc, #336]	@ (8003df0 <HAL_GPIO_Init+0x33c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01f      	beq.n	8003ce2 <HAL_GPIO_Init+0x22e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a53      	ldr	r2, [pc, #332]	@ (8003df4 <HAL_GPIO_Init+0x340>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d019      	beq.n	8003cde <HAL_GPIO_Init+0x22a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a52      	ldr	r2, [pc, #328]	@ (8003df8 <HAL_GPIO_Init+0x344>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d013      	beq.n	8003cda <HAL_GPIO_Init+0x226>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a51      	ldr	r2, [pc, #324]	@ (8003dfc <HAL_GPIO_Init+0x348>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00d      	beq.n	8003cd6 <HAL_GPIO_Init+0x222>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a50      	ldr	r2, [pc, #320]	@ (8003e00 <HAL_GPIO_Init+0x34c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d007      	beq.n	8003cd2 <HAL_GPIO_Init+0x21e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a4f      	ldr	r2, [pc, #316]	@ (8003e04 <HAL_GPIO_Init+0x350>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d101      	bne.n	8003cce <HAL_GPIO_Init+0x21a>
 8003cca:	2309      	movs	r3, #9
 8003ccc:	e012      	b.n	8003cf4 <HAL_GPIO_Init+0x240>
 8003cce:	230a      	movs	r3, #10
 8003cd0:	e010      	b.n	8003cf4 <HAL_GPIO_Init+0x240>
 8003cd2:	2308      	movs	r3, #8
 8003cd4:	e00e      	b.n	8003cf4 <HAL_GPIO_Init+0x240>
 8003cd6:	2307      	movs	r3, #7
 8003cd8:	e00c      	b.n	8003cf4 <HAL_GPIO_Init+0x240>
 8003cda:	2306      	movs	r3, #6
 8003cdc:	e00a      	b.n	8003cf4 <HAL_GPIO_Init+0x240>
 8003cde:	2305      	movs	r3, #5
 8003ce0:	e008      	b.n	8003cf4 <HAL_GPIO_Init+0x240>
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	e006      	b.n	8003cf4 <HAL_GPIO_Init+0x240>
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e004      	b.n	8003cf4 <HAL_GPIO_Init+0x240>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e002      	b.n	8003cf4 <HAL_GPIO_Init+0x240>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <HAL_GPIO_Init+0x240>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	69fa      	ldr	r2, [r7, #28]
 8003cf6:	f002 0203 	and.w	r2, r2, #3
 8003cfa:	0092      	lsls	r2, r2, #2
 8003cfc:	4093      	lsls	r3, r2
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d04:	4935      	ldr	r1, [pc, #212]	@ (8003ddc <HAL_GPIO_Init+0x328>)
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	089b      	lsrs	r3, r3, #2
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d12:	4b3d      	ldr	r3, [pc, #244]	@ (8003e08 <HAL_GPIO_Init+0x354>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d36:	4a34      	ldr	r2, [pc, #208]	@ (8003e08 <HAL_GPIO_Init+0x354>)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d3c:	4b32      	ldr	r3, [pc, #200]	@ (8003e08 <HAL_GPIO_Init+0x354>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d60:	4a29      	ldr	r2, [pc, #164]	@ (8003e08 <HAL_GPIO_Init+0x354>)
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d66:	4b28      	ldr	r3, [pc, #160]	@ (8003e08 <HAL_GPIO_Init+0x354>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4013      	ands	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003e08 <HAL_GPIO_Init+0x354>)
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d90:	4b1d      	ldr	r3, [pc, #116]	@ (8003e08 <HAL_GPIO_Init+0x354>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003db4:	4a14      	ldr	r2, [pc, #80]	@ (8003e08 <HAL_GPIO_Init+0x354>)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	2b0f      	cmp	r3, #15
 8003dc4:	f67f ae86 	bls.w	8003ad4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	3724      	adds	r7, #36	@ 0x24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	40013800 	.word	0x40013800
 8003de0:	40020000 	.word	0x40020000
 8003de4:	40020400 	.word	0x40020400
 8003de8:	40020800 	.word	0x40020800
 8003dec:	40020c00 	.word	0x40020c00
 8003df0:	40021000 	.word	0x40021000
 8003df4:	40021400 	.word	0x40021400
 8003df8:	40021800 	.word	0x40021800
 8003dfc:	40021c00 	.word	0x40021c00
 8003e00:	40022000 	.word	0x40022000
 8003e04:	40022400 	.word	0x40022400
 8003e08:	40013c00 	.word	0x40013c00

08003e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	460b      	mov	r3, r1
 8003e16:	807b      	strh	r3, [r7, #2]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e1c:	787b      	ldrb	r3, [r7, #1]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e22:	887a      	ldrh	r2, [r7, #2]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003e28:	e003      	b.n	8003e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003e2a:	887b      	ldrh	r3, [r7, #2]
 8003e2c:	041a      	lsls	r2, r3, #16
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	619a      	str	r2, [r3, #24]
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b085      	sub	sp, #20
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	460b      	mov	r3, r1
 8003e48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e50:	887a      	ldrh	r2, [r7, #2]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4013      	ands	r3, r2
 8003e56:	041a      	lsls	r2, r3, #16
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	43d9      	mvns	r1, r3
 8003e5c:	887b      	ldrh	r3, [r7, #2]
 8003e5e:	400b      	ands	r3, r1
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	619a      	str	r2, [r3, #24]
}
 8003e66:	bf00      	nop
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e08b      	b.n	8003f9e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fd fec0 	bl	8001c20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2224      	movs	r2, #36	@ 0x24
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0201 	bic.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ec4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ed4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d107      	bne.n	8003eee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003eea:	609a      	str	r2, [r3, #8]
 8003eec:	e006      	b.n	8003efc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003efa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d108      	bne.n	8003f16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f12:	605a      	str	r2, [r3, #4]
 8003f14:	e007      	b.n	8003f26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6859      	ldr	r1, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	4b1d      	ldr	r3, [pc, #116]	@ (8003fa8 <HAL_I2C_Init+0x134>)
 8003f32:	430b      	orrs	r3, r1
 8003f34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69d9      	ldr	r1, [r3, #28]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1a      	ldr	r2, [r3, #32]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	02008000 	.word	0x02008000

08003fac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	4608      	mov	r0, r1
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4603      	mov	r3, r0
 8003fbc:	817b      	strh	r3, [r7, #10]
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	813b      	strh	r3, [r7, #8]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	f040 80f9 	bne.w	80041c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_I2C_Mem_Write+0x34>
 8003fda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d105      	bne.n	8003fec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fe6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0ed      	b.n	80041c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_I2C_Mem_Write+0x4e>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e0e6      	b.n	80041c8 <HAL_I2C_Mem_Write+0x21c>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004002:	f7fe f94b 	bl	800229c <HAL_GetTick>
 8004006:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	2319      	movs	r3, #25
 800400e:	2201      	movs	r2, #1
 8004010:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 fac3 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0d1      	b.n	80041c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2221      	movs	r2, #33	@ 0x21
 8004028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2240      	movs	r2, #64	@ 0x40
 8004030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a3a      	ldr	r2, [r7, #32]
 800403e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004044:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800404c:	88f8      	ldrh	r0, [r7, #6]
 800404e:	893a      	ldrh	r2, [r7, #8]
 8004050:	8979      	ldrh	r1, [r7, #10]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	4603      	mov	r3, r0
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f9d3 	bl	8004408 <I2C_RequestMemoryWrite>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0a9      	b.n	80041c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	2bff      	cmp	r3, #255	@ 0xff
 800407c:	d90e      	bls.n	800409c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	22ff      	movs	r2, #255	@ 0xff
 8004082:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004088:	b2da      	uxtb	r2, r3
 800408a:	8979      	ldrh	r1, [r7, #10]
 800408c:	2300      	movs	r3, #0
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 fc47 	bl	8004928 <I2C_TransferConfig>
 800409a:	e00f      	b.n	80040bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	8979      	ldrh	r1, [r7, #10]
 80040ae:	2300      	movs	r3, #0
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 fc36 	bl	8004928 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 fac6 	bl	8004652 <I2C_WaitOnTXISFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e07b      	b.n	80041c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	781a      	ldrb	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d034      	beq.n	8004174 <HAL_I2C_Mem_Write+0x1c8>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410e:	2b00      	cmp	r3, #0
 8004110:	d130      	bne.n	8004174 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004118:	2200      	movs	r2, #0
 800411a:	2180      	movs	r1, #128	@ 0x80
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 fa3f 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e04d      	b.n	80041c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	2bff      	cmp	r3, #255	@ 0xff
 8004134:	d90e      	bls.n	8004154 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	22ff      	movs	r2, #255	@ 0xff
 800413a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004140:	b2da      	uxtb	r2, r3
 8004142:	8979      	ldrh	r1, [r7, #10]
 8004144:	2300      	movs	r3, #0
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fbeb 	bl	8004928 <I2C_TransferConfig>
 8004152:	e00f      	b.n	8004174 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004162:	b2da      	uxtb	r2, r3
 8004164:	8979      	ldrh	r1, [r7, #10]
 8004166:	2300      	movs	r3, #0
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 fbda 	bl	8004928 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004178:	b29b      	uxth	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d19e      	bne.n	80040bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 faac 	bl	80046e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e01a      	b.n	80041c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2220      	movs	r2, #32
 8004198:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6859      	ldr	r1, [r3, #4]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	4b0a      	ldr	r3, [pc, #40]	@ (80041d0 <HAL_I2C_Mem_Write+0x224>)
 80041a6:	400b      	ands	r3, r1
 80041a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2220      	movs	r2, #32
 80041ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	e000      	b.n	80041c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80041c6:	2302      	movs	r3, #2
  }
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	fe00e800 	.word	0xfe00e800

080041d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af02      	add	r7, sp, #8
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	4608      	mov	r0, r1
 80041de:	4611      	mov	r1, r2
 80041e0:	461a      	mov	r2, r3
 80041e2:	4603      	mov	r3, r0
 80041e4:	817b      	strh	r3, [r7, #10]
 80041e6:	460b      	mov	r3, r1
 80041e8:	813b      	strh	r3, [r7, #8]
 80041ea:	4613      	mov	r3, r2
 80041ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	f040 80fd 	bne.w	80043f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_I2C_Mem_Read+0x34>
 8004202:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004204:	2b00      	cmp	r3, #0
 8004206:	d105      	bne.n	8004214 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800420e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0f1      	b.n	80043f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_I2C_Mem_Read+0x4e>
 800421e:	2302      	movs	r3, #2
 8004220:	e0ea      	b.n	80043f8 <HAL_I2C_Mem_Read+0x224>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800422a:	f7fe f837 	bl	800229c <HAL_GetTick>
 800422e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	2319      	movs	r3, #25
 8004236:	2201      	movs	r2, #1
 8004238:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f9af 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0d5      	b.n	80043f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2222      	movs	r2, #34	@ 0x22
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2240      	movs	r2, #64	@ 0x40
 8004258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a3a      	ldr	r2, [r7, #32]
 8004266:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800426c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004274:	88f8      	ldrh	r0, [r7, #6]
 8004276:	893a      	ldrh	r2, [r7, #8]
 8004278:	8979      	ldrh	r1, [r7, #10]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	4603      	mov	r3, r0
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f913 	bl	80044b0 <I2C_RequestMemoryRead>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0ad      	b.n	80043f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2bff      	cmp	r3, #255	@ 0xff
 80042a4:	d90e      	bls.n	80042c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2201      	movs	r2, #1
 80042aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	8979      	ldrh	r1, [r7, #10]
 80042b4:	4b52      	ldr	r3, [pc, #328]	@ (8004400 <HAL_I2C_Mem_Read+0x22c>)
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 fb33 	bl	8004928 <I2C_TransferConfig>
 80042c2:	e00f      	b.n	80042e4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	8979      	ldrh	r1, [r7, #10]
 80042d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004400 <HAL_I2C_Mem_Read+0x22c>)
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 fb22 	bl	8004928 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ea:	2200      	movs	r2, #0
 80042ec:	2104      	movs	r1, #4
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f956 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e07c      	b.n	80043f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d034      	beq.n	80043a4 <HAL_I2C_Mem_Read+0x1d0>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800433e:	2b00      	cmp	r3, #0
 8004340:	d130      	bne.n	80043a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004348:	2200      	movs	r2, #0
 800434a:	2180      	movs	r1, #128	@ 0x80
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f927 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e04d      	b.n	80043f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004360:	b29b      	uxth	r3, r3
 8004362:	2bff      	cmp	r3, #255	@ 0xff
 8004364:	d90e      	bls.n	8004384 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004370:	b2da      	uxtb	r2, r3
 8004372:	8979      	ldrh	r1, [r7, #10]
 8004374:	2300      	movs	r3, #0
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 fad3 	bl	8004928 <I2C_TransferConfig>
 8004382:	e00f      	b.n	80043a4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004392:	b2da      	uxtb	r2, r3
 8004394:	8979      	ldrh	r1, [r7, #10]
 8004396:	2300      	movs	r3, #0
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 fac2 	bl	8004928 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d19a      	bne.n	80042e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f994 	bl	80046e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e01a      	b.n	80043f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2220      	movs	r2, #32
 80043c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6859      	ldr	r1, [r3, #4]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004404 <HAL_I2C_Mem_Read+0x230>)
 80043d6:	400b      	ands	r3, r1
 80043d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e000      	b.n	80043f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80043f6:	2302      	movs	r3, #2
  }
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	80002400 	.word	0x80002400
 8004404:	fe00e800 	.word	0xfe00e800

08004408 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	4608      	mov	r0, r1
 8004412:	4611      	mov	r1, r2
 8004414:	461a      	mov	r2, r3
 8004416:	4603      	mov	r3, r0
 8004418:	817b      	strh	r3, [r7, #10]
 800441a:	460b      	mov	r3, r1
 800441c:	813b      	strh	r3, [r7, #8]
 800441e:	4613      	mov	r3, r2
 8004420:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	b2da      	uxtb	r2, r3
 8004426:	8979      	ldrh	r1, [r7, #10]
 8004428:	4b20      	ldr	r3, [pc, #128]	@ (80044ac <I2C_RequestMemoryWrite+0xa4>)
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 fa79 	bl	8004928 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	69b9      	ldr	r1, [r7, #24]
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 f909 	bl	8004652 <I2C_WaitOnTXISFlagUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e02c      	b.n	80044a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d105      	bne.n	800445c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004450:	893b      	ldrh	r3, [r7, #8]
 8004452:	b2da      	uxtb	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	629a      	str	r2, [r3, #40]	@ 0x28
 800445a:	e015      	b.n	8004488 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800445c:	893b      	ldrh	r3, [r7, #8]
 800445e:	0a1b      	lsrs	r3, r3, #8
 8004460:	b29b      	uxth	r3, r3
 8004462:	b2da      	uxtb	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	69b9      	ldr	r1, [r7, #24]
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 f8ef 	bl	8004652 <I2C_WaitOnTXISFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e012      	b.n	80044a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800447e:	893b      	ldrh	r3, [r7, #8]
 8004480:	b2da      	uxtb	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2200      	movs	r2, #0
 8004490:	2180      	movs	r1, #128	@ 0x80
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 f884 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	80002000 	.word	0x80002000

080044b0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	4608      	mov	r0, r1
 80044ba:	4611      	mov	r1, r2
 80044bc:	461a      	mov	r2, r3
 80044be:	4603      	mov	r3, r0
 80044c0:	817b      	strh	r3, [r7, #10]
 80044c2:	460b      	mov	r3, r1
 80044c4:	813b      	strh	r3, [r7, #8]
 80044c6:	4613      	mov	r3, r2
 80044c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	8979      	ldrh	r1, [r7, #10]
 80044d0:	4b20      	ldr	r3, [pc, #128]	@ (8004554 <I2C_RequestMemoryRead+0xa4>)
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	2300      	movs	r3, #0
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fa26 	bl	8004928 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	69b9      	ldr	r1, [r7, #24]
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 f8b6 	bl	8004652 <I2C_WaitOnTXISFlagUntilTimeout>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e02c      	b.n	800454a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044f0:	88fb      	ldrh	r3, [r7, #6]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d105      	bne.n	8004502 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044f6:	893b      	ldrh	r3, [r7, #8]
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8004500:	e015      	b.n	800452e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004502:	893b      	ldrh	r3, [r7, #8]
 8004504:	0a1b      	lsrs	r3, r3, #8
 8004506:	b29b      	uxth	r3, r3
 8004508:	b2da      	uxtb	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004510:	69fa      	ldr	r2, [r7, #28]
 8004512:	69b9      	ldr	r1, [r7, #24]
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 f89c 	bl	8004652 <I2C_WaitOnTXISFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e012      	b.n	800454a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004524:	893b      	ldrh	r3, [r7, #8]
 8004526:	b2da      	uxtb	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2200      	movs	r2, #0
 8004536:	2140      	movs	r1, #64	@ 0x40
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f831 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	80002000 	.word	0x80002000

08004558 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b02      	cmp	r3, #2
 800456c:	d103      	bne.n	8004576 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2200      	movs	r2, #0
 8004574:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b01      	cmp	r3, #1
 8004582:	d007      	beq.n	8004594 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	619a      	str	r2, [r3, #24]
  }
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045b0:	e03b      	b.n	800462a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	6839      	ldr	r1, [r7, #0]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f8d6 	bl	8004768 <I2C_IsErrorOccurred>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e041      	b.n	800464a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045cc:	d02d      	beq.n	800462a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ce:	f7fd fe65 	bl	800229c <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d302      	bcc.n	80045e4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d122      	bne.n	800462a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	4013      	ands	r3, r2
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	bf0c      	ite	eq
 80045f4:	2301      	moveq	r3, #1
 80045f6:	2300      	movne	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	461a      	mov	r2, r3
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d113      	bne.n	800462a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004606:	f043 0220 	orr.w	r2, r3, #32
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e00f      	b.n	800464a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699a      	ldr	r2, [r3, #24]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4013      	ands	r3, r2
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	429a      	cmp	r2, r3
 8004638:	bf0c      	ite	eq
 800463a:	2301      	moveq	r3, #1
 800463c:	2300      	movne	r3, #0
 800463e:	b2db      	uxtb	r3, r3
 8004640:	461a      	mov	r2, r3
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	429a      	cmp	r2, r3
 8004646:	d0b4      	beq.n	80045b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b084      	sub	sp, #16
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800465e:	e033      	b.n	80046c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	68b9      	ldr	r1, [r7, #8]
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f87f 	bl	8004768 <I2C_IsErrorOccurred>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e031      	b.n	80046d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467a:	d025      	beq.n	80046c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467c:	f7fd fe0e 	bl	800229c <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	429a      	cmp	r2, r3
 800468a:	d302      	bcc.n	8004692 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d11a      	bne.n	80046c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b02      	cmp	r3, #2
 800469e:	d013      	beq.n	80046c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a4:	f043 0220 	orr.w	r2, r3, #32
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e007      	b.n	80046d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d1c4      	bne.n	8004660 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046ec:	e02f      	b.n	800474e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 f838 	bl	8004768 <I2C_IsErrorOccurred>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e02d      	b.n	800475e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004702:	f7fd fdcb 	bl	800229c <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	429a      	cmp	r2, r3
 8004710:	d302      	bcc.n	8004718 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d11a      	bne.n	800474e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b20      	cmp	r3, #32
 8004724:	d013      	beq.n	800474e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472a:	f043 0220 	orr.w	r2, r3, #32
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e007      	b.n	800475e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b20      	cmp	r3, #32
 800475a:	d1c8      	bne.n	80046ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	@ 0x28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	d068      	beq.n	8004866 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2210      	movs	r2, #16
 800479a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800479c:	e049      	b.n	8004832 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a4:	d045      	beq.n	8004832 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047a6:	f7fd fd79 	bl	800229c <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d302      	bcc.n	80047bc <I2C_IsErrorOccurred+0x54>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d13a      	bne.n	8004832 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047de:	d121      	bne.n	8004824 <I2C_IsErrorOccurred+0xbc>
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047e6:	d01d      	beq.n	8004824 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80047e8:	7cfb      	ldrb	r3, [r7, #19]
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	d01a      	beq.n	8004824 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80047fe:	f7fd fd4d 	bl	800229c <HAL_GetTick>
 8004802:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004804:	e00e      	b.n	8004824 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004806:	f7fd fd49 	bl	800229c <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b19      	cmp	r3, #25
 8004812:	d907      	bls.n	8004824 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	f043 0320 	orr.w	r3, r3, #32
 800481a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004822:	e006      	b.n	8004832 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b20      	cmp	r3, #32
 8004830:	d1e9      	bne.n	8004806 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b20      	cmp	r3, #32
 800483e:	d003      	beq.n	8004848 <I2C_IsErrorOccurred+0xe0>
 8004840:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0aa      	beq.n	800479e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004848:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800484c:	2b00      	cmp	r3, #0
 800484e:	d103      	bne.n	8004858 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2220      	movs	r2, #32
 8004856:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	f043 0304 	orr.w	r3, r3, #4
 800485e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00b      	beq.n	8004890 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	f043 0301 	orr.w	r3, r3, #1
 800487e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004888:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00b      	beq.n	80048b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	f043 0308 	orr.w	r3, r3, #8
 80048a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00b      	beq.n	80048d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	f043 0302 	orr.w	r3, r3, #2
 80048c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80048d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d01c      	beq.n	8004916 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f7ff fe3b 	bl	8004558 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6859      	ldr	r1, [r3, #4]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004924 <I2C_IsErrorOccurred+0x1bc>)
 80048ee:	400b      	ands	r3, r1
 80048f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	431a      	orrs	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004916:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800491a:	4618      	mov	r0, r3
 800491c:	3728      	adds	r7, #40	@ 0x28
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	fe00e800 	.word	0xfe00e800

08004928 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	607b      	str	r3, [r7, #4]
 8004932:	460b      	mov	r3, r1
 8004934:	817b      	strh	r3, [r7, #10]
 8004936:	4613      	mov	r3, r2
 8004938:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800493a:	897b      	ldrh	r3, [r7, #10]
 800493c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004940:	7a7b      	ldrb	r3, [r7, #9]
 8004942:	041b      	lsls	r3, r3, #16
 8004944:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004948:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	4313      	orrs	r3, r2
 8004952:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004956:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	0d5b      	lsrs	r3, r3, #21
 8004962:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004966:	4b08      	ldr	r3, [pc, #32]	@ (8004988 <I2C_TransferConfig+0x60>)
 8004968:	430b      	orrs	r3, r1
 800496a:	43db      	mvns	r3, r3
 800496c:	ea02 0103 	and.w	r1, r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	430a      	orrs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	03ff63ff 	.word	0x03ff63ff

0800498c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b20      	cmp	r3, #32
 80049a0:	d138      	bne.n	8004a14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e032      	b.n	8004a16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2224      	movs	r2, #36	@ 0x24
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0201 	bic.w	r2, r2, #1
 80049ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80049de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6819      	ldr	r1, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e000      	b.n	8004a16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a14:	2302      	movs	r3, #2
  }
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b085      	sub	sp, #20
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b20      	cmp	r3, #32
 8004a36:	d139      	bne.n	8004aac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e033      	b.n	8004aae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2224      	movs	r2, #36	@ 0x24
 8004a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004a74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	021b      	lsls	r3, r3, #8
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	e000      	b.n	8004aae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004aac:	2302      	movs	r3, #2
  }
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b086      	sub	sp, #24
 8004abe:	af02      	add	r7, sp, #8
 8004ac0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e108      	b.n	8004cde <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d106      	bne.n	8004aec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f017 ff34 	bl	801c954 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2203      	movs	r2, #3
 8004af0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004afa:	d102      	bne.n	8004b02 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f002 ffab 	bl	8007a62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	7c1a      	ldrb	r2, [r3, #16]
 8004b14:	f88d 2000 	strb.w	r2, [sp]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b1c:	f002 fe94 	bl	8007848 <USB_CoreInit>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e0d5      	b.n	8004cde <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2100      	movs	r1, #0
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f002 ffa3 	bl	8007a84 <USB_SetCurrentMode>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d005      	beq.n	8004b50 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0c6      	b.n	8004cde <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b50:	2300      	movs	r3, #0
 8004b52:	73fb      	strb	r3, [r7, #15]
 8004b54:	e04a      	b.n	8004bec <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b56:	7bfa      	ldrb	r2, [r7, #15]
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	440b      	add	r3, r1
 8004b64:	3315      	adds	r3, #21
 8004b66:	2201      	movs	r2, #1
 8004b68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b6a:	7bfa      	ldrb	r2, [r7, #15]
 8004b6c:	6879      	ldr	r1, [r7, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	4413      	add	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	3314      	adds	r3, #20
 8004b7a:	7bfa      	ldrb	r2, [r7, #15]
 8004b7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b7e:	7bfa      	ldrb	r2, [r7, #15]
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
 8004b82:	b298      	uxth	r0, r3
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	4613      	mov	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	440b      	add	r3, r1
 8004b90:	332e      	adds	r3, #46	@ 0x2e
 8004b92:	4602      	mov	r2, r0
 8004b94:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b96:	7bfa      	ldrb	r2, [r7, #15]
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	3318      	adds	r3, #24
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004baa:	7bfa      	ldrb	r2, [r7, #15]
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	00db      	lsls	r3, r3, #3
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	440b      	add	r3, r1
 8004bb8:	331c      	adds	r3, #28
 8004bba:	2200      	movs	r2, #0
 8004bbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004bbe:	7bfa      	ldrb	r2, [r7, #15]
 8004bc0:	6879      	ldr	r1, [r7, #4]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	440b      	add	r3, r1
 8004bcc:	3320      	adds	r3, #32
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004bd2:	7bfa      	ldrb	r2, [r7, #15]
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	4413      	add	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	440b      	add	r3, r1
 8004be0:	3324      	adds	r3, #36	@ 0x24
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
 8004be8:	3301      	adds	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	791b      	ldrb	r3, [r3, #4]
 8004bf0:	7bfa      	ldrb	r2, [r7, #15]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d3af      	bcc.n	8004b56 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	73fb      	strb	r3, [r7, #15]
 8004bfa:	e044      	b.n	8004c86 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004bfc:	7bfa      	ldrb	r2, [r7, #15]
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	4413      	add	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004c0e:	2200      	movs	r2, #0
 8004c10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c12:	7bfa      	ldrb	r2, [r7, #15]
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	4413      	add	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004c24:	7bfa      	ldrb	r2, [r7, #15]
 8004c26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c28:	7bfa      	ldrb	r2, [r7, #15]
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c3e:	7bfa      	ldrb	r2, [r7, #15]
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	4413      	add	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c54:	7bfa      	ldrb	r2, [r7, #15]
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c6a:	7bfa      	ldrb	r2, [r7, #15]
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	3301      	adds	r3, #1
 8004c84:	73fb      	strb	r3, [r7, #15]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	791b      	ldrb	r3, [r3, #4]
 8004c8a:	7bfa      	ldrb	r2, [r7, #15]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d3b5      	bcc.n	8004bfc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	7c1a      	ldrb	r2, [r3, #16]
 8004c98:	f88d 2000 	strb.w	r2, [sp]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ca0:	f002 ff3c 	bl	8007b1c <USB_DevInit>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2202      	movs	r2, #2
 8004cae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e013      	b.n	8004cde <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	7b1b      	ldrb	r3, [r3, #12]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d102      	bne.n	8004cd2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f001 f959 	bl	8005f84 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f003 ff7b 	bl	8008bd2 <USB_DevDisconnect>

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_PCD_Start+0x16>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e012      	b.n	8004d22 <HAL_PCD_Start+0x3c>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f002 fe99 	bl	8007a40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f003 ff3c 	bl	8008b90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004d2a:	b590      	push	{r4, r7, lr}
 8004d2c:	b08d      	sub	sp, #52	@ 0x34
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f003 fffa 	bl	8008d3a <USB_GetMode>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f040 84b9 	bne.w	80056c0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f003 ff5e 	bl	8008c14 <USB_ReadInterrupts>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 84af 	beq.w	80056be <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	0a1b      	lsrs	r3, r3, #8
 8004d6a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f003 ff4b 	bl	8008c14 <USB_ReadInterrupts>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d107      	bne.n	8004d98 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695a      	ldr	r2, [r3, #20]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f002 0202 	and.w	r2, r2, #2
 8004d96:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f003 ff39 	bl	8008c14 <USB_ReadInterrupts>
 8004da2:	4603      	mov	r3, r0
 8004da4:	f003 0310 	and.w	r3, r3, #16
 8004da8:	2b10      	cmp	r3, #16
 8004daa:	d161      	bne.n	8004e70 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0210 	bic.w	r2, r2, #16
 8004dba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	f003 020f 	and.w	r2, r3, #15
 8004dc8:	4613      	mov	r3, r2
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	3304      	adds	r3, #4
 8004dda:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004de2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004de6:	d124      	bne.n	8004e32 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004dee:	4013      	ands	r3, r2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d035      	beq.n	8004e60 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	091b      	lsrs	r3, r3, #4
 8004dfc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004dfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	461a      	mov	r2, r3
 8004e06:	6a38      	ldr	r0, [r7, #32]
 8004e08:	f003 fd70 	bl	80088ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	091b      	lsrs	r3, r3, #4
 8004e14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e18:	441a      	add	r2, r3
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	695a      	ldr	r2, [r3, #20]
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	091b      	lsrs	r3, r3, #4
 8004e26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e2a:	441a      	add	r2, r3
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	615a      	str	r2, [r3, #20]
 8004e30:	e016      	b.n	8004e60 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004e38:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004e3c:	d110      	bne.n	8004e60 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e44:	2208      	movs	r2, #8
 8004e46:	4619      	mov	r1, r3
 8004e48:	6a38      	ldr	r0, [r7, #32]
 8004e4a:	f003 fd4f 	bl	80088ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	695a      	ldr	r2, [r3, #20]
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	091b      	lsrs	r3, r3, #4
 8004e56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e5a:	441a      	add	r2, r3
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699a      	ldr	r2, [r3, #24]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0210 	orr.w	r2, r2, #16
 8004e6e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f003 fecd 	bl	8008c14 <USB_ReadInterrupts>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e80:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e84:	f040 80a7 	bne.w	8004fd6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f003 fed2 	bl	8008c3a <USB_ReadDevAllOutEpInterrupt>
 8004e96:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004e98:	e099      	b.n	8004fce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 808e 	beq.w	8004fc2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	4611      	mov	r1, r2
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f003 fef6 	bl	8008ca2 <USB_ReadDevOutEPInterrupt>
 8004eb6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00c      	beq.n	8004edc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ece:	461a      	mov	r2, r3
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004ed4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fece 	bl	8005c78 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f003 0308 	and.w	r3, r3, #8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00c      	beq.n	8004f00 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	2308      	movs	r3, #8
 8004ef6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004ef8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 ffa4 	bl	8005e48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f003 0310 	and.w	r3, r3, #16
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d008      	beq.n	8004f1c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f16:	461a      	mov	r2, r3
 8004f18:	2310      	movs	r3, #16
 8004f1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d030      	beq.n	8004f88 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f2e:	2b80      	cmp	r3, #128	@ 0x80
 8004f30:	d109      	bne.n	8004f46 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f44:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f48:	4613      	mov	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	4413      	add	r3, r2
 8004f58:	3304      	adds	r3, #4
 8004f5a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	78db      	ldrb	r3, [r3, #3]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d108      	bne.n	8004f76 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2200      	movs	r2, #0
 8004f68:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	4619      	mov	r1, r3
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f017 fe23 	bl	801cbbc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f82:	461a      	mov	r2, r3
 8004f84:	2302      	movs	r3, #2
 8004f86:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f003 0320 	and.w	r3, r3, #32
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d008      	beq.n	8004fa4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	2320      	movs	r3, #32
 8004fa2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d009      	beq.n	8004fc2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004fc0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fca:	085b      	lsrs	r3, r3, #1
 8004fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f47f af62 	bne.w	8004e9a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f003 fe1a 	bl	8008c14 <USB_ReadInterrupts>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fe6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fea:	f040 80db 	bne.w	80051a4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f003 fe3b 	bl	8008c6e <USB_ReadDevAllInEpInterrupt>
 8004ff8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004ffe:	e0cd      	b.n	800519c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 80c2 	beq.w	8005190 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	4611      	mov	r1, r2
 8005016:	4618      	mov	r0, r3
 8005018:	f003 fe61 	bl	8008cde <USB_ReadDevInEPInterrupt>
 800501c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d057      	beq.n	80050d8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	2201      	movs	r2, #1
 8005030:	fa02 f303 	lsl.w	r3, r2, r3
 8005034:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800503c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	43db      	mvns	r3, r3
 8005042:	69f9      	ldr	r1, [r7, #28]
 8005044:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005048:	4013      	ands	r3, r2
 800504a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005058:	461a      	mov	r2, r3
 800505a:	2301      	movs	r3, #1
 800505c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	799b      	ldrb	r3, [r3, #6]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d132      	bne.n	80050cc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800506a:	4613      	mov	r3, r2
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	440b      	add	r3, r1
 8005074:	3320      	adds	r3, #32
 8005076:	6819      	ldr	r1, [r3, #0]
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800507c:	4613      	mov	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4403      	add	r3, r0
 8005086:	331c      	adds	r3, #28
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4419      	add	r1, r3
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005090:	4613      	mov	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4403      	add	r3, r0
 800509a:	3320      	adds	r3, #32
 800509c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d113      	bne.n	80050cc <HAL_PCD_IRQHandler+0x3a2>
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a8:	4613      	mov	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	440b      	add	r3, r1
 80050b2:	3324      	adds	r3, #36	@ 0x24
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d108      	bne.n	80050cc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80050c4:	461a      	mov	r2, r3
 80050c6:	2101      	movs	r1, #1
 80050c8:	f003 fe6a 	bl	8008da0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80050cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	4619      	mov	r1, r3
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f017 fced 	bl	801cab2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f003 0308 	and.w	r3, r3, #8
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d008      	beq.n	80050f4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ee:	461a      	mov	r2, r3
 80050f0:	2308      	movs	r3, #8
 80050f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f003 0310 	and.w	r3, r3, #16
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d008      	beq.n	8005110 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800510a:	461a      	mov	r2, r3
 800510c:	2310      	movs	r3, #16
 800510e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d008      	beq.n	800512c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005126:	461a      	mov	r2, r3
 8005128:	2340      	movs	r3, #64	@ 0x40
 800512a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d023      	beq.n	800517e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005136:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005138:	6a38      	ldr	r0, [r7, #32]
 800513a:	f002 fe4d 	bl	8007dd8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800513e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005140:	4613      	mov	r3, r2
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	4413      	add	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	3310      	adds	r3, #16
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	4413      	add	r3, r2
 800514e:	3304      	adds	r3, #4
 8005150:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	78db      	ldrb	r3, [r3, #3]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d108      	bne.n	800516c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2200      	movs	r2, #0
 800515e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	b2db      	uxtb	r3, r3
 8005164:	4619      	mov	r1, r3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f017 fd3a 	bl	801cbe0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800516c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005178:	461a      	mov	r2, r3
 800517a:	2302      	movs	r3, #2
 800517c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005188:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fce8 	bl	8005b60 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	3301      	adds	r3, #1
 8005194:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800519c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f47f af2e 	bne.w	8005000 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f003 fd33 	bl	8008c14 <USB_ReadInterrupts>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051b8:	d122      	bne.n	8005200 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051c8:	f023 0301 	bic.w	r3, r3, #1
 80051cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d108      	bne.n	80051ea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80051e0:	2100      	movs	r1, #0
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f017 feb4 	bl	801cf50 <HAL_PCDEx_LPM_Callback>
 80051e8:	e002      	b.n	80051f0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f017 fcd8 	bl	801cba0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695a      	ldr	r2, [r3, #20]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80051fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4618      	mov	r0, r3
 8005206:	f003 fd05 	bl	8008c14 <USB_ReadInterrupts>
 800520a:	4603      	mov	r3, r0
 800520c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005210:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005214:	d112      	bne.n	800523c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b01      	cmp	r3, #1
 8005224:	d102      	bne.n	800522c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f017 fc94 	bl	801cb54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695a      	ldr	r2, [r3, #20]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800523a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4618      	mov	r0, r3
 8005242:	f003 fce7 	bl	8008c14 <USB_ReadInterrupts>
 8005246:	4603      	mov	r3, r0
 8005248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800524c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005250:	d121      	bne.n	8005296 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	695a      	ldr	r2, [r3, #20]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005260:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005268:	2b00      	cmp	r3, #0
 800526a:	d111      	bne.n	8005290 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527a:	089b      	lsrs	r3, r3, #2
 800527c:	f003 020f 	and.w	r2, r3, #15
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005286:	2101      	movs	r1, #1
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f017 fe61 	bl	801cf50 <HAL_PCDEx_LPM_Callback>
 800528e:	e002      	b.n	8005296 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f017 fc5f 	bl	801cb54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f003 fcba 	bl	8008c14 <USB_ReadInterrupts>
 80052a0:	4603      	mov	r3, r0
 80052a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052aa:	f040 80b7 	bne.w	800541c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052bc:	f023 0301 	bic.w	r3, r3, #1
 80052c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2110      	movs	r1, #16
 80052c8:	4618      	mov	r0, r3
 80052ca:	f002 fd85 	bl	8007dd8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ce:	2300      	movs	r3, #0
 80052d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052d2:	e046      	b.n	8005362 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80052d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052e0:	461a      	mov	r2, r3
 80052e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80052e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052f8:	0151      	lsls	r1, r2, #5
 80052fa:	69fa      	ldr	r2, [r7, #28]
 80052fc:	440a      	add	r2, r1
 80052fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005302:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005306:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005314:	461a      	mov	r2, r3
 8005316:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800531a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800531c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800532c:	0151      	lsls	r1, r2, #5
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	440a      	add	r2, r1
 8005332:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005336:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800533a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800533c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800534c:	0151      	lsls	r1, r2, #5
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	440a      	add	r2, r1
 8005352:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005356:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800535a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800535c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535e:	3301      	adds	r3, #1
 8005360:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	791b      	ldrb	r3, [r3, #4]
 8005366:	461a      	mov	r2, r3
 8005368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800536a:	4293      	cmp	r3, r2
 800536c:	d3b2      	bcc.n	80052d4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800537c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005380:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	7bdb      	ldrb	r3, [r3, #15]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d016      	beq.n	80053b8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005390:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800539a:	f043 030b 	orr.w	r3, r3, #11
 800539e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053aa:	69fa      	ldr	r2, [r7, #28]
 80053ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053b0:	f043 030b 	orr.w	r3, r3, #11
 80053b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80053b6:	e015      	b.n	80053e4 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053be:	695a      	ldr	r2, [r3, #20]
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053c6:	4619      	mov	r1, r3
 80053c8:	f242 032b 	movw	r3, #8235	@ 0x202b
 80053cc:	4313      	orrs	r3, r2
 80053ce:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053de:	f043 030b 	orr.w	r3, r3, #11
 80053e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80053f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005406:	461a      	mov	r2, r3
 8005408:	f003 fcca 	bl	8008da0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695a      	ldr	r2, [r3, #20]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800541a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f003 fbf7 	bl	8008c14 <USB_ReadInterrupts>
 8005426:	4603      	mov	r3, r0
 8005428:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800542c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005430:	d123      	bne.n	800547a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f003 fc8e 	bl	8008d58 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4618      	mov	r0, r3
 8005442:	f002 fd42 	bl	8007eca <USB_GetDevSpeed>
 8005446:	4603      	mov	r3, r0
 8005448:	461a      	mov	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681c      	ldr	r4, [r3, #0]
 8005452:	f001 faab 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 8005456:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800545c:	461a      	mov	r2, r3
 800545e:	4620      	mov	r0, r4
 8005460:	f002 fa4c 	bl	80078fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f017 fb4c 	bl	801cb02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695a      	ldr	r2, [r3, #20]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005478:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f003 fbc8 	bl	8008c14 <USB_ReadInterrupts>
 8005484:	4603      	mov	r3, r0
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b08      	cmp	r3, #8
 800548c:	d10a      	bne.n	80054a4 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f017 fb29 	bl	801cae6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695a      	ldr	r2, [r3, #20]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f002 0208 	and.w	r2, r2, #8
 80054a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f003 fbb3 	bl	8008c14 <USB_ReadInterrupts>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b4:	2b80      	cmp	r3, #128	@ 0x80
 80054b6:	d123      	bne.n	8005500 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054c4:	2301      	movs	r3, #1
 80054c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80054c8:	e014      	b.n	80054f4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ce:	4613      	mov	r3, r2
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	440b      	add	r3, r1
 80054d8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d105      	bne.n	80054ee <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80054e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fb08 	bl	8005afe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	3301      	adds	r3, #1
 80054f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	791b      	ldrb	r3, [r3, #4]
 80054f8:	461a      	mov	r2, r3
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d3e4      	bcc.n	80054ca <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4618      	mov	r0, r3
 8005506:	f003 fb85 	bl	8008c14 <USB_ReadInterrupts>
 800550a:	4603      	mov	r3, r0
 800550c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005510:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005514:	d13c      	bne.n	8005590 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005516:	2301      	movs	r3, #1
 8005518:	627b      	str	r3, [r7, #36]	@ 0x24
 800551a:	e02b      	b.n	8005574 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005530:	4613      	mov	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	3318      	adds	r3, #24
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d115      	bne.n	800556e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005542:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005544:	2b00      	cmp	r3, #0
 8005546:	da12      	bge.n	800556e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800554c:	4613      	mov	r3, r2
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	3317      	adds	r3, #23
 8005558:	2201      	movs	r2, #1
 800555a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800555c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555e:	b2db      	uxtb	r3, r3
 8005560:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005564:	b2db      	uxtb	r3, r3
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fac8 	bl	8005afe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	3301      	adds	r3, #1
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	791b      	ldrb	r3, [r3, #4]
 8005578:	461a      	mov	r2, r3
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557c:	4293      	cmp	r3, r2
 800557e:	d3cd      	bcc.n	800551c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695a      	ldr	r2, [r3, #20]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800558e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4618      	mov	r0, r3
 8005596:	f003 fb3d 	bl	8008c14 <USB_ReadInterrupts>
 800559a:	4603      	mov	r3, r0
 800559c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055a4:	d156      	bne.n	8005654 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055a6:	2301      	movs	r3, #1
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055aa:	e045      	b.n	8005638 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80055ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80055bc:	6879      	ldr	r1, [r7, #4]
 80055be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c0:	4613      	mov	r3, r2
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	4413      	add	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d12e      	bne.n	8005632 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80055d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	da2b      	bge.n	8005632 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80055e6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d121      	bne.n	8005632 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055f2:	4613      	mov	r3, r2
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	440b      	add	r3, r1
 80055fc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005600:	2201      	movs	r2, #1
 8005602:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10a      	bne.n	8005632 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800562a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800562e:	6053      	str	r3, [r2, #4]
            break;
 8005630:	e008      	b.n	8005644 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005634:	3301      	adds	r3, #1
 8005636:	627b      	str	r3, [r7, #36]	@ 0x24
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	791b      	ldrb	r3, [r3, #4]
 800563c:	461a      	mov	r2, r3
 800563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005640:	4293      	cmp	r3, r2
 8005642:	d3b3      	bcc.n	80055ac <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695a      	ldr	r2, [r3, #20]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005652:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4618      	mov	r0, r3
 800565a:	f003 fadb 	bl	8008c14 <USB_ReadInterrupts>
 800565e:	4603      	mov	r3, r0
 8005660:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005668:	d10a      	bne.n	8005680 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f017 faca 	bl	801cc04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695a      	ldr	r2, [r3, #20]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800567e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4618      	mov	r0, r3
 8005686:	f003 fac5 	bl	8008c14 <USB_ReadInterrupts>
 800568a:	4603      	mov	r3, r0
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b04      	cmp	r3, #4
 8005692:	d115      	bne.n	80056c0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f017 faba 	bl	801cc20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6859      	ldr	r1, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	605a      	str	r2, [r3, #4]
 80056bc:	e000      	b.n	80056c0 <HAL_PCD_IRQHandler+0x996>
      return;
 80056be:	bf00      	nop
    }
  }
}
 80056c0:	3734      	adds	r7, #52	@ 0x34
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd90      	pop	{r4, r7, pc}

080056c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b082      	sub	sp, #8
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	460b      	mov	r3, r1
 80056d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d101      	bne.n	80056e0 <HAL_PCD_SetAddress+0x1a>
 80056dc:	2302      	movs	r3, #2
 80056de:	e012      	b.n	8005706 <HAL_PCD_SetAddress+0x40>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	78fa      	ldrb	r2, [r7, #3]
 80056ec:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	78fa      	ldrb	r2, [r7, #3]
 80056f4:	4611      	mov	r1, r2
 80056f6:	4618      	mov	r0, r3
 80056f8:	f003 fa24 	bl	8008b44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	4608      	mov	r0, r1
 8005718:	4611      	mov	r1, r2
 800571a:	461a      	mov	r2, r3
 800571c:	4603      	mov	r3, r0
 800571e:	70fb      	strb	r3, [r7, #3]
 8005720:	460b      	mov	r3, r1
 8005722:	803b      	strh	r3, [r7, #0]
 8005724:	4613      	mov	r3, r2
 8005726:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005728:	2300      	movs	r3, #0
 800572a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800572c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005730:	2b00      	cmp	r3, #0
 8005732:	da0f      	bge.n	8005754 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	f003 020f 	and.w	r2, r3, #15
 800573a:	4613      	mov	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	3310      	adds	r3, #16
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	4413      	add	r3, r2
 8005748:	3304      	adds	r3, #4
 800574a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	705a      	strb	r2, [r3, #1]
 8005752:	e00f      	b.n	8005774 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	f003 020f 	and.w	r2, r3, #15
 800575a:	4613      	mov	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	4413      	add	r3, r2
 800576a:	3304      	adds	r3, #4
 800576c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	b2da      	uxtb	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005780:	883a      	ldrh	r2, [r7, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	78ba      	ldrb	r2, [r7, #2]
 800578a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	785b      	ldrb	r3, [r3, #1]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d004      	beq.n	800579e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800579e:	78bb      	ldrb	r3, [r7, #2]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d102      	bne.n	80057aa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_PCD_EP_Open+0xaa>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e00e      	b.n	80057d6 <HAL_PCD_EP_Open+0xc8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68f9      	ldr	r1, [r7, #12]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f002 fba4 	bl	8007f14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80057d4:	7afb      	ldrb	r3, [r7, #11]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	460b      	mov	r3, r1
 80057e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80057ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	da0f      	bge.n	8005812 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057f2:	78fb      	ldrb	r3, [r7, #3]
 80057f4:	f003 020f 	and.w	r2, r3, #15
 80057f8:	4613      	mov	r3, r2
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	3310      	adds	r3, #16
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	4413      	add	r3, r2
 8005806:	3304      	adds	r3, #4
 8005808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	705a      	strb	r2, [r3, #1]
 8005810:	e00f      	b.n	8005832 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005812:	78fb      	ldrb	r3, [r7, #3]
 8005814:	f003 020f 	and.w	r2, r3, #15
 8005818:	4613      	mov	r3, r2
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	4413      	add	r3, r2
 8005828:	3304      	adds	r3, #4
 800582a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005832:	78fb      	ldrb	r3, [r7, #3]
 8005834:	f003 030f 	and.w	r3, r3, #15
 8005838:	b2da      	uxtb	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_PCD_EP_Close+0x6e>
 8005848:	2302      	movs	r3, #2
 800584a:	e00e      	b.n	800586a <HAL_PCD_EP_Close+0x8c>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68f9      	ldr	r1, [r7, #12]
 800585a:	4618      	mov	r0, r3
 800585c:	f002 fbe2 	bl	8008024 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b086      	sub	sp, #24
 8005876:	af00      	add	r7, sp, #0
 8005878:	60f8      	str	r0, [r7, #12]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
 800587e:	460b      	mov	r3, r1
 8005880:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005882:	7afb      	ldrb	r3, [r7, #11]
 8005884:	f003 020f 	and.w	r2, r3, #15
 8005888:	4613      	mov	r3, r2
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4413      	add	r3, r2
 8005898:	3304      	adds	r3, #4
 800589a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2200      	movs	r2, #0
 80058ac:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2200      	movs	r2, #0
 80058b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058b4:	7afb      	ldrb	r3, [r7, #11]
 80058b6:	f003 030f 	and.w	r3, r3, #15
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	799b      	ldrb	r3, [r3, #6]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d102      	bne.n	80058ce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6818      	ldr	r0, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	799b      	ldrb	r3, [r3, #6]
 80058d6:	461a      	mov	r2, r3
 80058d8:	6979      	ldr	r1, [r7, #20]
 80058da:	f002 fc7f 	bl	80081dc <USB_EPStartXfer>

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	460b      	mov	r3, r1
 80058f2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80058f4:	78fb      	ldrb	r3, [r7, #3]
 80058f6:	f003 020f 	and.w	r2, r3, #15
 80058fa:	6879      	ldr	r1, [r7, #4]
 80058fc:	4613      	mov	r3, r2
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	4413      	add	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	440b      	add	r3, r1
 8005906:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800590a:	681b      	ldr	r3, [r3, #0]
}
 800590c:	4618      	mov	r0, r3
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	607a      	str	r2, [r7, #4]
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	460b      	mov	r3, r1
 8005926:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005928:	7afb      	ldrb	r3, [r7, #11]
 800592a:	f003 020f 	and.w	r2, r3, #15
 800592e:	4613      	mov	r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	3310      	adds	r3, #16
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	3304      	adds	r3, #4
 800593e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2200      	movs	r2, #0
 8005950:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2201      	movs	r2, #1
 8005956:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005958:	7afb      	ldrb	r3, [r7, #11]
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	b2da      	uxtb	r2, r3
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	799b      	ldrb	r3, [r3, #6]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d102      	bne.n	8005972 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6818      	ldr	r0, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	799b      	ldrb	r3, [r3, #6]
 800597a:	461a      	mov	r2, r3
 800597c:	6979      	ldr	r1, [r7, #20]
 800597e:	f002 fc2d 	bl	80081dc <USB_EPStartXfer>

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	7912      	ldrb	r2, [r2, #4]
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d901      	bls.n	80059aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e04f      	b.n	8005a4a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	da0f      	bge.n	80059d2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	f003 020f 	and.w	r2, r3, #15
 80059b8:	4613      	mov	r3, r2
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	4413      	add	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	3310      	adds	r3, #16
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	4413      	add	r3, r2
 80059c6:	3304      	adds	r3, #4
 80059c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	705a      	strb	r2, [r3, #1]
 80059d0:	e00d      	b.n	80059ee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80059d2:	78fa      	ldrb	r2, [r7, #3]
 80059d4:	4613      	mov	r3, r2
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	4413      	add	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	4413      	add	r3, r2
 80059e4:	3304      	adds	r3, #4
 80059e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2201      	movs	r2, #1
 80059f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d101      	bne.n	8005a0e <HAL_PCD_EP_SetStall+0x82>
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	e01d      	b.n	8005a4a <HAL_PCD_EP_SetStall+0xbe>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68f9      	ldr	r1, [r7, #12]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f002 ffbd 	bl	800899c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a22:	78fb      	ldrb	r3, [r7, #3]
 8005a24:	f003 030f 	and.w	r3, r3, #15
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d109      	bne.n	8005a40 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6818      	ldr	r0, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	7999      	ldrb	r1, [r3, #6]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f003 f9b0 	bl	8008da0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005a5e:	78fb      	ldrb	r3, [r7, #3]
 8005a60:	f003 030f 	and.w	r3, r3, #15
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	7912      	ldrb	r2, [r2, #4]
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d901      	bls.n	8005a70 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e042      	b.n	8005af6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	da0f      	bge.n	8005a98 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	f003 020f 	and.w	r2, r3, #15
 8005a7e:	4613      	mov	r3, r2
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	3310      	adds	r3, #16
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2201      	movs	r2, #1
 8005a94:	705a      	strb	r2, [r3, #1]
 8005a96:	e00f      	b.n	8005ab8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a98:	78fb      	ldrb	r3, [r7, #3]
 8005a9a:	f003 020f 	and.w	r2, r3, #15
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	4413      	add	r3, r2
 8005aae:	3304      	adds	r3, #4
 8005ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005abe:	78fb      	ldrb	r3, [r7, #3]
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d101      	bne.n	8005ad8 <HAL_PCD_EP_ClrStall+0x86>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e00e      	b.n	8005af6 <HAL_PCD_EP_ClrStall+0xa4>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68f9      	ldr	r1, [r7, #12]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f002 ffc6 	bl	8008a78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b084      	sub	sp, #16
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	460b      	mov	r3, r1
 8005b08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005b0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	da0c      	bge.n	8005b2c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b12:	78fb      	ldrb	r3, [r7, #3]
 8005b14:	f003 020f 	and.w	r2, r3, #15
 8005b18:	4613      	mov	r3, r2
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	3310      	adds	r3, #16
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	4413      	add	r3, r2
 8005b26:	3304      	adds	r3, #4
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	e00c      	b.n	8005b46 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	f003 020f 	and.w	r2, r3, #15
 8005b32:	4613      	mov	r3, r2
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	4413      	add	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	4413      	add	r3, r2
 8005b42:	3304      	adds	r3, #4
 8005b44:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68f9      	ldr	r1, [r7, #12]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f002 fde5 	bl	800871c <USB_EPStopXfer>
 8005b52:	4603      	mov	r3, r0
 8005b54:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005b56:	7afb      	ldrb	r3, [r7, #11]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08a      	sub	sp, #40	@ 0x28
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	4613      	mov	r3, r2
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	4413      	add	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	3310      	adds	r3, #16
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	4413      	add	r3, r2
 8005b84:	3304      	adds	r3, #4
 8005b86:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	695a      	ldr	r2, [r3, #20]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d901      	bls.n	8005b98 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e06b      	b.n	8005c70 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	69fa      	ldr	r2, [r7, #28]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d902      	bls.n	8005bb4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	3303      	adds	r3, #3
 8005bb8:	089b      	lsrs	r3, r3, #2
 8005bba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005bbc:	e02a      	b.n	8005c14 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691a      	ldr	r2, [r3, #16]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d902      	bls.n	8005bda <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	3303      	adds	r3, #3
 8005bde:	089b      	lsrs	r3, r3, #2
 8005be0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	68d9      	ldr	r1, [r3, #12]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	6978      	ldr	r0, [r7, #20]
 8005bf8:	f002 fe3a 	bl	8008870 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	68da      	ldr	r2, [r3, #12]
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	441a      	add	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	695a      	ldr	r2, [r3, #20]
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	441a      	add	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d809      	bhi.n	8005c3e <PCD_WriteEmptyTxFifo+0xde>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	695a      	ldr	r2, [r3, #20]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d203      	bcs.n	8005c3e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1bf      	bne.n	8005bbe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	691a      	ldr	r2, [r3, #16]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d811      	bhi.n	8005c6e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	2201      	movs	r2, #1
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	43db      	mvns	r3, r3
 8005c64:	6939      	ldr	r1, [r7, #16]
 8005c66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3720      	adds	r7, #32
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	333c      	adds	r3, #60	@ 0x3c
 8005c90:	3304      	adds	r3, #4
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	799b      	ldrb	r3, [r3, #6]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d17b      	bne.n	8005da6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f003 0308 	and.w	r3, r3, #8
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d015      	beq.n	8005ce4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	4a61      	ldr	r2, [pc, #388]	@ (8005e40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	f240 80b9 	bls.w	8005e34 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 80b3 	beq.w	8005e34 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ce0:	6093      	str	r3, [r2, #8]
 8005ce2:	e0a7      	b.n	8005e34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d009      	beq.n	8005d02 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	6093      	str	r3, [r2, #8]
 8005d00:	e098      	b.n	8005e34 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f040 8093 	bne.w	8005e34 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	4a4b      	ldr	r2, [pc, #300]	@ (8005e40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d90f      	bls.n	8005d36 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00a      	beq.n	8005d36 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d32:	6093      	str	r3, [r2, #8]
 8005d34:	e07e      	b.n	8005e34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	4413      	add	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	4413      	add	r3, r2
 8005d48:	3304      	adds	r3, #4
 8005d4a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6a1a      	ldr	r2, [r3, #32]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	0159      	lsls	r1, r3, #5
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	440b      	add	r3, r1
 8005d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d62:	1ad2      	subs	r2, r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d114      	bne.n	8005d98 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d109      	bne.n	8005d8a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d80:	461a      	mov	r2, r3
 8005d82:	2101      	movs	r1, #1
 8005d84:	f003 f80c 	bl	8008da0 <USB_EP0_OutStart>
 8005d88:	e006      	b.n	8005d98 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	441a      	add	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f016 fe6c 	bl	801ca7c <HAL_PCD_DataOutStageCallback>
 8005da4:	e046      	b.n	8005e34 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	4a26      	ldr	r2, [pc, #152]	@ (8005e44 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d124      	bne.n	8005df8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dca:	6093      	str	r3, [r2, #8]
 8005dcc:	e032      	b.n	8005e34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f003 0320 	and.w	r3, r3, #32
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d008      	beq.n	8005dea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de4:	461a      	mov	r2, r3
 8005de6:	2320      	movs	r3, #32
 8005de8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	4619      	mov	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f016 fe43 	bl	801ca7c <HAL_PCD_DataOutStageCallback>
 8005df6:	e01d      	b.n	8005e34 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d114      	bne.n	8005e28 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	4613      	mov	r3, r2
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	4413      	add	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	440b      	add	r3, r1
 8005e0c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d108      	bne.n	8005e28 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e20:	461a      	mov	r2, r3
 8005e22:	2100      	movs	r1, #0
 8005e24:	f002 ffbc 	bl	8008da0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f016 fe24 	bl	801ca7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3720      	adds	r7, #32
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	4f54300a 	.word	0x4f54300a
 8005e44:	4f54310a 	.word	0x4f54310a

08005e48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	333c      	adds	r3, #60	@ 0x3c
 8005e60:	3304      	adds	r3, #4
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4a15      	ldr	r2, [pc, #84]	@ (8005ed0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d90e      	bls.n	8005e9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d009      	beq.n	8005e9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e94:	461a      	mov	r2, r3
 8005e96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f016 fddb 	bl	801ca58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8005ed0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d90c      	bls.n	8005ec4 <PCD_EP_OutSetupPacket_int+0x7c>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	799b      	ldrb	r3, [r3, #6]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d108      	bne.n	8005ec4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	f002 ff6e 	bl	8008da0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	4f54300a 	.word	0x4f54300a

08005ed4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	70fb      	strb	r3, [r7, #3]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d107      	bne.n	8005f02 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005ef2:	883b      	ldrh	r3, [r7, #0]
 8005ef4:	0419      	lsls	r1, r3, #16
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f00:	e028      	b.n	8005f54 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f08:	0c1b      	lsrs	r3, r3, #16
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f10:	2300      	movs	r3, #0
 8005f12:	73fb      	strb	r3, [r7, #15]
 8005f14:	e00d      	b.n	8005f32 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	3340      	adds	r3, #64	@ 0x40
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	0c1b      	lsrs	r3, r3, #16
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	4413      	add	r3, r2
 8005f2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	73fb      	strb	r3, [r7, #15]
 8005f32:	7bfa      	ldrb	r2, [r7, #15]
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	3b01      	subs	r3, #1
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d3ec      	bcc.n	8005f16 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005f3c:	883b      	ldrh	r3, [r7, #0]
 8005f3e:	0418      	lsls	r0, r3, #16
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6819      	ldr	r1, [r3, #0]
 8005f44:	78fb      	ldrb	r3, [r7, #3]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	4302      	orrs	r2, r0
 8005f4c:	3340      	adds	r3, #64	@ 0x40
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	440b      	add	r3, r1
 8005f52:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	887a      	ldrh	r2, [r7, #2]
 8005f74:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005fb2:	4b05      	ldr	r3, [pc, #20]	@ (8005fc8 <HAL_PCDEx_ActivateLPM+0x44>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	10000003 	.word	0x10000003

08005fcc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005fd6:	4b23      	ldr	r3, [pc, #140]	@ (8006064 <HAL_PWREx_EnableOverDrive+0x98>)
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fda:	4a22      	ldr	r2, [pc, #136]	@ (8006064 <HAL_PWREx_EnableOverDrive+0x98>)
 8005fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fe2:	4b20      	ldr	r3, [pc, #128]	@ (8006064 <HAL_PWREx_EnableOverDrive+0x98>)
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fea:	603b      	str	r3, [r7, #0]
 8005fec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005fee:	4b1e      	ldr	r3, [pc, #120]	@ (8006068 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8006068 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ff8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ffa:	f7fc f94f 	bl	800229c <HAL_GetTick>
 8005ffe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006000:	e009      	b.n	8006016 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006002:	f7fc f94b 	bl	800229c <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006010:	d901      	bls.n	8006016 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e022      	b.n	800605c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006016:	4b14      	ldr	r3, [pc, #80]	@ (8006068 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800601e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006022:	d1ee      	bne.n	8006002 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006024:	4b10      	ldr	r3, [pc, #64]	@ (8006068 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a0f      	ldr	r2, [pc, #60]	@ (8006068 <HAL_PWREx_EnableOverDrive+0x9c>)
 800602a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800602e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006030:	f7fc f934 	bl	800229c <HAL_GetTick>
 8006034:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006036:	e009      	b.n	800604c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006038:	f7fc f930 	bl	800229c <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006046:	d901      	bls.n	800604c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e007      	b.n	800605c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800604c:	4b06      	ldr	r3, [pc, #24]	@ (8006068 <HAL_PWREx_EnableOverDrive+0x9c>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006054:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006058:	d1ee      	bne.n	8006038 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	40023800 	.word	0x40023800
 8006068:	40007000 	.word	0x40007000

0800606c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006074:	2300      	movs	r3, #0
 8006076:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e29b      	b.n	80065ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 8087 	beq.w	800619e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006090:	4b96      	ldr	r3, [pc, #600]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f003 030c 	and.w	r3, r3, #12
 8006098:	2b04      	cmp	r3, #4
 800609a:	d00c      	beq.n	80060b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800609c:	4b93      	ldr	r3, [pc, #588]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f003 030c 	and.w	r3, r3, #12
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d112      	bne.n	80060ce <HAL_RCC_OscConfig+0x62>
 80060a8:	4b90      	ldr	r3, [pc, #576]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060b4:	d10b      	bne.n	80060ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060b6:	4b8d      	ldr	r3, [pc, #564]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d06c      	beq.n	800619c <HAL_RCC_OscConfig+0x130>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d168      	bne.n	800619c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e275      	b.n	80065ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060d6:	d106      	bne.n	80060e6 <HAL_RCC_OscConfig+0x7a>
 80060d8:	4b84      	ldr	r3, [pc, #528]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a83      	ldr	r2, [pc, #524]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 80060de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	e02e      	b.n	8006144 <HAL_RCC_OscConfig+0xd8>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10c      	bne.n	8006108 <HAL_RCC_OscConfig+0x9c>
 80060ee:	4b7f      	ldr	r3, [pc, #508]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a7e      	ldr	r2, [pc, #504]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 80060f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060f8:	6013      	str	r3, [r2, #0]
 80060fa:	4b7c      	ldr	r3, [pc, #496]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a7b      	ldr	r2, [pc, #492]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 8006100:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006104:	6013      	str	r3, [r2, #0]
 8006106:	e01d      	b.n	8006144 <HAL_RCC_OscConfig+0xd8>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006110:	d10c      	bne.n	800612c <HAL_RCC_OscConfig+0xc0>
 8006112:	4b76      	ldr	r3, [pc, #472]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a75      	ldr	r2, [pc, #468]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 8006118:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800611c:	6013      	str	r3, [r2, #0]
 800611e:	4b73      	ldr	r3, [pc, #460]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a72      	ldr	r2, [pc, #456]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 8006124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	e00b      	b.n	8006144 <HAL_RCC_OscConfig+0xd8>
 800612c:	4b6f      	ldr	r3, [pc, #444]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a6e      	ldr	r2, [pc, #440]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 8006132:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006136:	6013      	str	r3, [r2, #0]
 8006138:	4b6c      	ldr	r3, [pc, #432]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a6b      	ldr	r2, [pc, #428]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 800613e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d013      	beq.n	8006174 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614c:	f7fc f8a6 	bl	800229c <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006154:	f7fc f8a2 	bl	800229c <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b64      	cmp	r3, #100	@ 0x64
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e229      	b.n	80065ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006166:	4b61      	ldr	r3, [pc, #388]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0f0      	beq.n	8006154 <HAL_RCC_OscConfig+0xe8>
 8006172:	e014      	b.n	800619e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006174:	f7fc f892 	bl	800229c <HAL_GetTick>
 8006178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800617a:	e008      	b.n	800618e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800617c:	f7fc f88e 	bl	800229c <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b64      	cmp	r3, #100	@ 0x64
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e215      	b.n	80065ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800618e:	4b57      	ldr	r3, [pc, #348]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1f0      	bne.n	800617c <HAL_RCC_OscConfig+0x110>
 800619a:	e000      	b.n	800619e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800619c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d069      	beq.n	800627e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061aa:	4b50      	ldr	r3, [pc, #320]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 030c 	and.w	r3, r3, #12
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00b      	beq.n	80061ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061b6:	4b4d      	ldr	r3, [pc, #308]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 030c 	and.w	r3, r3, #12
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d11c      	bne.n	80061fc <HAL_RCC_OscConfig+0x190>
 80061c2:	4b4a      	ldr	r3, [pc, #296]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d116      	bne.n	80061fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061ce:	4b47      	ldr	r3, [pc, #284]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d005      	beq.n	80061e6 <HAL_RCC_OscConfig+0x17a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d001      	beq.n	80061e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e1e9      	b.n	80065ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061e6:	4b41      	ldr	r3, [pc, #260]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	493d      	ldr	r1, [pc, #244]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061fa:	e040      	b.n	800627e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d023      	beq.n	800624c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006204:	4b39      	ldr	r3, [pc, #228]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a38      	ldr	r2, [pc, #224]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 800620a:	f043 0301 	orr.w	r3, r3, #1
 800620e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006210:	f7fc f844 	bl	800229c <HAL_GetTick>
 8006214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006216:	e008      	b.n	800622a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006218:	f7fc f840 	bl	800229c <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d901      	bls.n	800622a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e1c7      	b.n	80065ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800622a:	4b30      	ldr	r3, [pc, #192]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0f0      	beq.n	8006218 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006236:	4b2d      	ldr	r3, [pc, #180]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	4929      	ldr	r1, [pc, #164]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 8006246:	4313      	orrs	r3, r2
 8006248:	600b      	str	r3, [r1, #0]
 800624a:	e018      	b.n	800627e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800624c:	4b27      	ldr	r3, [pc, #156]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a26      	ldr	r2, [pc, #152]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 8006252:	f023 0301 	bic.w	r3, r3, #1
 8006256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006258:	f7fc f820 	bl	800229c <HAL_GetTick>
 800625c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006260:	f7fc f81c 	bl	800229c <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e1a3      	b.n	80065ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006272:	4b1e      	ldr	r3, [pc, #120]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1f0      	bne.n	8006260 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0308 	and.w	r3, r3, #8
 8006286:	2b00      	cmp	r3, #0
 8006288:	d038      	beq.n	80062fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d019      	beq.n	80062c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006292:	4b16      	ldr	r3, [pc, #88]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 8006294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006296:	4a15      	ldr	r2, [pc, #84]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 8006298:	f043 0301 	orr.w	r3, r3, #1
 800629c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800629e:	f7fb fffd 	bl	800229c <HAL_GetTick>
 80062a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062a4:	e008      	b.n	80062b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062a6:	f7fb fff9 	bl	800229c <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e180      	b.n	80065ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062b8:	4b0c      	ldr	r3, [pc, #48]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 80062ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0f0      	beq.n	80062a6 <HAL_RCC_OscConfig+0x23a>
 80062c4:	e01a      	b.n	80062fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062c6:	4b09      	ldr	r3, [pc, #36]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 80062c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ca:	4a08      	ldr	r2, [pc, #32]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 80062cc:	f023 0301 	bic.w	r3, r3, #1
 80062d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d2:	f7fb ffe3 	bl	800229c <HAL_GetTick>
 80062d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062d8:	e00a      	b.n	80062f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062da:	f7fb ffdf 	bl	800229c <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d903      	bls.n	80062f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e166      	b.n	80065ba <HAL_RCC_OscConfig+0x54e>
 80062ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062f0:	4b92      	ldr	r3, [pc, #584]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 80062f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1ee      	bne.n	80062da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 80a4 	beq.w	8006452 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800630a:	4b8c      	ldr	r3, [pc, #560]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 800630c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10d      	bne.n	8006332 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006316:	4b89      	ldr	r3, [pc, #548]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 8006318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631a:	4a88      	ldr	r2, [pc, #544]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 800631c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006320:	6413      	str	r3, [r2, #64]	@ 0x40
 8006322:	4b86      	ldr	r3, [pc, #536]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 8006324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800632a:	60bb      	str	r3, [r7, #8]
 800632c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800632e:	2301      	movs	r3, #1
 8006330:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006332:	4b83      	ldr	r3, [pc, #524]	@ (8006540 <HAL_RCC_OscConfig+0x4d4>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800633a:	2b00      	cmp	r3, #0
 800633c:	d118      	bne.n	8006370 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800633e:	4b80      	ldr	r3, [pc, #512]	@ (8006540 <HAL_RCC_OscConfig+0x4d4>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a7f      	ldr	r2, [pc, #508]	@ (8006540 <HAL_RCC_OscConfig+0x4d4>)
 8006344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800634a:	f7fb ffa7 	bl	800229c <HAL_GetTick>
 800634e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006350:	e008      	b.n	8006364 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006352:	f7fb ffa3 	bl	800229c <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b64      	cmp	r3, #100	@ 0x64
 800635e:	d901      	bls.n	8006364 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e12a      	b.n	80065ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006364:	4b76      	ldr	r3, [pc, #472]	@ (8006540 <HAL_RCC_OscConfig+0x4d4>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800636c:	2b00      	cmp	r3, #0
 800636e:	d0f0      	beq.n	8006352 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d106      	bne.n	8006386 <HAL_RCC_OscConfig+0x31a>
 8006378:	4b70      	ldr	r3, [pc, #448]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 800637a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800637c:	4a6f      	ldr	r2, [pc, #444]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 800637e:	f043 0301 	orr.w	r3, r3, #1
 8006382:	6713      	str	r3, [r2, #112]	@ 0x70
 8006384:	e02d      	b.n	80063e2 <HAL_RCC_OscConfig+0x376>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10c      	bne.n	80063a8 <HAL_RCC_OscConfig+0x33c>
 800638e:	4b6b      	ldr	r3, [pc, #428]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 8006390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006392:	4a6a      	ldr	r2, [pc, #424]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 8006394:	f023 0301 	bic.w	r3, r3, #1
 8006398:	6713      	str	r3, [r2, #112]	@ 0x70
 800639a:	4b68      	ldr	r3, [pc, #416]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 800639c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800639e:	4a67      	ldr	r2, [pc, #412]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 80063a0:	f023 0304 	bic.w	r3, r3, #4
 80063a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80063a6:	e01c      	b.n	80063e2 <HAL_RCC_OscConfig+0x376>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	2b05      	cmp	r3, #5
 80063ae:	d10c      	bne.n	80063ca <HAL_RCC_OscConfig+0x35e>
 80063b0:	4b62      	ldr	r3, [pc, #392]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 80063b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b4:	4a61      	ldr	r2, [pc, #388]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 80063b6:	f043 0304 	orr.w	r3, r3, #4
 80063ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80063bc:	4b5f      	ldr	r3, [pc, #380]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 80063be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c0:	4a5e      	ldr	r2, [pc, #376]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 80063c2:	f043 0301 	orr.w	r3, r3, #1
 80063c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80063c8:	e00b      	b.n	80063e2 <HAL_RCC_OscConfig+0x376>
 80063ca:	4b5c      	ldr	r3, [pc, #368]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 80063cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ce:	4a5b      	ldr	r2, [pc, #364]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 80063d0:	f023 0301 	bic.w	r3, r3, #1
 80063d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80063d6:	4b59      	ldr	r3, [pc, #356]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 80063d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063da:	4a58      	ldr	r2, [pc, #352]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 80063dc:	f023 0304 	bic.w	r3, r3, #4
 80063e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d015      	beq.n	8006416 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ea:	f7fb ff57 	bl	800229c <HAL_GetTick>
 80063ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063f0:	e00a      	b.n	8006408 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063f2:	f7fb ff53 	bl	800229c <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006400:	4293      	cmp	r3, r2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e0d8      	b.n	80065ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006408:	4b4c      	ldr	r3, [pc, #304]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 800640a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d0ee      	beq.n	80063f2 <HAL_RCC_OscConfig+0x386>
 8006414:	e014      	b.n	8006440 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006416:	f7fb ff41 	bl	800229c <HAL_GetTick>
 800641a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800641c:	e00a      	b.n	8006434 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800641e:	f7fb ff3d 	bl	800229c <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	f241 3288 	movw	r2, #5000	@ 0x1388
 800642c:	4293      	cmp	r3, r2
 800642e:	d901      	bls.n	8006434 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e0c2      	b.n	80065ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006434:	4b41      	ldr	r3, [pc, #260]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 8006436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1ee      	bne.n	800641e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006440:	7dfb      	ldrb	r3, [r7, #23]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d105      	bne.n	8006452 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006446:	4b3d      	ldr	r3, [pc, #244]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 8006448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644a:	4a3c      	ldr	r2, [pc, #240]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 800644c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006450:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 80ae 	beq.w	80065b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800645c:	4b37      	ldr	r3, [pc, #220]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f003 030c 	and.w	r3, r3, #12
 8006464:	2b08      	cmp	r3, #8
 8006466:	d06d      	beq.n	8006544 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	2b02      	cmp	r3, #2
 800646e:	d14b      	bne.n	8006508 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006470:	4b32      	ldr	r3, [pc, #200]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a31      	ldr	r2, [pc, #196]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 8006476:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800647a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647c:	f7fb ff0e 	bl	800229c <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006484:	f7fb ff0a 	bl	800229c <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e091      	b.n	80065ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006496:	4b29      	ldr	r3, [pc, #164]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1f0      	bne.n	8006484 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	69da      	ldr	r2, [r3, #28]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	431a      	orrs	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b0:	019b      	lsls	r3, r3, #6
 80064b2:	431a      	orrs	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b8:	085b      	lsrs	r3, r3, #1
 80064ba:	3b01      	subs	r3, #1
 80064bc:	041b      	lsls	r3, r3, #16
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c4:	061b      	lsls	r3, r3, #24
 80064c6:	431a      	orrs	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064cc:	071b      	lsls	r3, r3, #28
 80064ce:	491b      	ldr	r1, [pc, #108]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064d4:	4b19      	ldr	r3, [pc, #100]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a18      	ldr	r2, [pc, #96]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 80064da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e0:	f7fb fedc 	bl	800229c <HAL_GetTick>
 80064e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064e6:	e008      	b.n	80064fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064e8:	f7fb fed8 	bl	800229c <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e05f      	b.n	80065ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064fa:	4b10      	ldr	r3, [pc, #64]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0f0      	beq.n	80064e8 <HAL_RCC_OscConfig+0x47c>
 8006506:	e057      	b.n	80065b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006508:	4b0c      	ldr	r3, [pc, #48]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a0b      	ldr	r2, [pc, #44]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 800650e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006514:	f7fb fec2 	bl	800229c <HAL_GetTick>
 8006518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800651c:	f7fb febe 	bl	800229c <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e045      	b.n	80065ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800652e:	4b03      	ldr	r3, [pc, #12]	@ (800653c <HAL_RCC_OscConfig+0x4d0>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1f0      	bne.n	800651c <HAL_RCC_OscConfig+0x4b0>
 800653a:	e03d      	b.n	80065b8 <HAL_RCC_OscConfig+0x54c>
 800653c:	40023800 	.word	0x40023800
 8006540:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006544:	4b1f      	ldr	r3, [pc, #124]	@ (80065c4 <HAL_RCC_OscConfig+0x558>)
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d030      	beq.n	80065b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800655c:	429a      	cmp	r2, r3
 800655e:	d129      	bne.n	80065b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800656a:	429a      	cmp	r2, r3
 800656c:	d122      	bne.n	80065b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006574:	4013      	ands	r3, r2
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800657a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800657c:	4293      	cmp	r3, r2
 800657e:	d119      	bne.n	80065b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658a:	085b      	lsrs	r3, r3, #1
 800658c:	3b01      	subs	r3, #1
 800658e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006590:	429a      	cmp	r2, r3
 8006592:	d10f      	bne.n	80065b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d107      	bne.n	80065b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d001      	beq.n	80065b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e000      	b.n	80065ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3718      	adds	r7, #24
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	40023800 	.word	0x40023800

080065c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e0d0      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065e0:	4b6a      	ldr	r3, [pc, #424]	@ (800678c <HAL_RCC_ClockConfig+0x1c4>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 030f 	and.w	r3, r3, #15
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d910      	bls.n	8006610 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ee:	4b67      	ldr	r3, [pc, #412]	@ (800678c <HAL_RCC_ClockConfig+0x1c4>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f023 020f 	bic.w	r2, r3, #15
 80065f6:	4965      	ldr	r1, [pc, #404]	@ (800678c <HAL_RCC_ClockConfig+0x1c4>)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065fe:	4b63      	ldr	r3, [pc, #396]	@ (800678c <HAL_RCC_ClockConfig+0x1c4>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 030f 	and.w	r3, r3, #15
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d001      	beq.n	8006610 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e0b8      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d020      	beq.n	800665e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006628:	4b59      	ldr	r3, [pc, #356]	@ (8006790 <HAL_RCC_ClockConfig+0x1c8>)
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	4a58      	ldr	r2, [pc, #352]	@ (8006790 <HAL_RCC_ClockConfig+0x1c8>)
 800662e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006632:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b00      	cmp	r3, #0
 800663e:	d005      	beq.n	800664c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006640:	4b53      	ldr	r3, [pc, #332]	@ (8006790 <HAL_RCC_ClockConfig+0x1c8>)
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	4a52      	ldr	r2, [pc, #328]	@ (8006790 <HAL_RCC_ClockConfig+0x1c8>)
 8006646:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800664a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800664c:	4b50      	ldr	r3, [pc, #320]	@ (8006790 <HAL_RCC_ClockConfig+0x1c8>)
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	494d      	ldr	r1, [pc, #308]	@ (8006790 <HAL_RCC_ClockConfig+0x1c8>)
 800665a:	4313      	orrs	r3, r2
 800665c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	2b00      	cmp	r3, #0
 8006668:	d040      	beq.n	80066ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d107      	bne.n	8006682 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006672:	4b47      	ldr	r3, [pc, #284]	@ (8006790 <HAL_RCC_ClockConfig+0x1c8>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d115      	bne.n	80066aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e07f      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	2b02      	cmp	r3, #2
 8006688:	d107      	bne.n	800669a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800668a:	4b41      	ldr	r3, [pc, #260]	@ (8006790 <HAL_RCC_ClockConfig+0x1c8>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d109      	bne.n	80066aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e073      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800669a:	4b3d      	ldr	r3, [pc, #244]	@ (8006790 <HAL_RCC_ClockConfig+0x1c8>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e06b      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066aa:	4b39      	ldr	r3, [pc, #228]	@ (8006790 <HAL_RCC_ClockConfig+0x1c8>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f023 0203 	bic.w	r2, r3, #3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	4936      	ldr	r1, [pc, #216]	@ (8006790 <HAL_RCC_ClockConfig+0x1c8>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066bc:	f7fb fdee 	bl	800229c <HAL_GetTick>
 80066c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066c2:	e00a      	b.n	80066da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066c4:	f7fb fdea 	bl	800229c <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d901      	bls.n	80066da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e053      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066da:	4b2d      	ldr	r3, [pc, #180]	@ (8006790 <HAL_RCC_ClockConfig+0x1c8>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f003 020c 	and.w	r2, r3, #12
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d1eb      	bne.n	80066c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066ec:	4b27      	ldr	r3, [pc, #156]	@ (800678c <HAL_RCC_ClockConfig+0x1c4>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 030f 	and.w	r3, r3, #15
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d210      	bcs.n	800671c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066fa:	4b24      	ldr	r3, [pc, #144]	@ (800678c <HAL_RCC_ClockConfig+0x1c4>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f023 020f 	bic.w	r2, r3, #15
 8006702:	4922      	ldr	r1, [pc, #136]	@ (800678c <HAL_RCC_ClockConfig+0x1c4>)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	4313      	orrs	r3, r2
 8006708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800670a:	4b20      	ldr	r3, [pc, #128]	@ (800678c <HAL_RCC_ClockConfig+0x1c4>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d001      	beq.n	800671c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e032      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b00      	cmp	r3, #0
 8006726:	d008      	beq.n	800673a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006728:	4b19      	ldr	r3, [pc, #100]	@ (8006790 <HAL_RCC_ClockConfig+0x1c8>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	4916      	ldr	r1, [pc, #88]	@ (8006790 <HAL_RCC_ClockConfig+0x1c8>)
 8006736:	4313      	orrs	r3, r2
 8006738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0308 	and.w	r3, r3, #8
 8006742:	2b00      	cmp	r3, #0
 8006744:	d009      	beq.n	800675a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006746:	4b12      	ldr	r3, [pc, #72]	@ (8006790 <HAL_RCC_ClockConfig+0x1c8>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	00db      	lsls	r3, r3, #3
 8006754:	490e      	ldr	r1, [pc, #56]	@ (8006790 <HAL_RCC_ClockConfig+0x1c8>)
 8006756:	4313      	orrs	r3, r2
 8006758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800675a:	f000 f821 	bl	80067a0 <HAL_RCC_GetSysClockFreq>
 800675e:	4602      	mov	r2, r0
 8006760:	4b0b      	ldr	r3, [pc, #44]	@ (8006790 <HAL_RCC_ClockConfig+0x1c8>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	091b      	lsrs	r3, r3, #4
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	490a      	ldr	r1, [pc, #40]	@ (8006794 <HAL_RCC_ClockConfig+0x1cc>)
 800676c:	5ccb      	ldrb	r3, [r1, r3]
 800676e:	fa22 f303 	lsr.w	r3, r2, r3
 8006772:	4a09      	ldr	r2, [pc, #36]	@ (8006798 <HAL_RCC_ClockConfig+0x1d0>)
 8006774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006776:	4b09      	ldr	r3, [pc, #36]	@ (800679c <HAL_RCC_ClockConfig+0x1d4>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f7fb faae 	bl	8001cdc <HAL_InitTick>

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	40023c00 	.word	0x40023c00
 8006790:	40023800 	.word	0x40023800
 8006794:	08021c78 	.word	0x08021c78
 8006798:	20000000 	.word	0x20000000
 800679c:	20000004 	.word	0x20000004

080067a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067a4:	b094      	sub	sp, #80	@ 0x50
 80067a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80067a8:	2300      	movs	r3, #0
 80067aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80067ac:	2300      	movs	r3, #0
 80067ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067b0:	2300      	movs	r3, #0
 80067b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80067b4:	2300      	movs	r3, #0
 80067b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067b8:	4b79      	ldr	r3, [pc, #484]	@ (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f003 030c 	and.w	r3, r3, #12
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d00d      	beq.n	80067e0 <HAL_RCC_GetSysClockFreq+0x40>
 80067c4:	2b08      	cmp	r3, #8
 80067c6:	f200 80e1 	bhi.w	800698c <HAL_RCC_GetSysClockFreq+0x1ec>
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <HAL_RCC_GetSysClockFreq+0x34>
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	d003      	beq.n	80067da <HAL_RCC_GetSysClockFreq+0x3a>
 80067d2:	e0db      	b.n	800698c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067d4:	4b73      	ldr	r3, [pc, #460]	@ (80069a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80067d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067d8:	e0db      	b.n	8006992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067da:	4b73      	ldr	r3, [pc, #460]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80067dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067de:	e0d8      	b.n	8006992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067e0:	4b6f      	ldr	r3, [pc, #444]	@ (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80067ea:	4b6d      	ldr	r3, [pc, #436]	@ (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d063      	beq.n	80068be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067f6:	4b6a      	ldr	r3, [pc, #424]	@ (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	099b      	lsrs	r3, r3, #6
 80067fc:	2200      	movs	r2, #0
 80067fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006800:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006808:	633b      	str	r3, [r7, #48]	@ 0x30
 800680a:	2300      	movs	r3, #0
 800680c:	637b      	str	r3, [r7, #52]	@ 0x34
 800680e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006812:	4622      	mov	r2, r4
 8006814:	462b      	mov	r3, r5
 8006816:	f04f 0000 	mov.w	r0, #0
 800681a:	f04f 0100 	mov.w	r1, #0
 800681e:	0159      	lsls	r1, r3, #5
 8006820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006824:	0150      	lsls	r0, r2, #5
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4621      	mov	r1, r4
 800682c:	1a51      	subs	r1, r2, r1
 800682e:	6139      	str	r1, [r7, #16]
 8006830:	4629      	mov	r1, r5
 8006832:	eb63 0301 	sbc.w	r3, r3, r1
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006844:	4659      	mov	r1, fp
 8006846:	018b      	lsls	r3, r1, #6
 8006848:	4651      	mov	r1, sl
 800684a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800684e:	4651      	mov	r1, sl
 8006850:	018a      	lsls	r2, r1, #6
 8006852:	4651      	mov	r1, sl
 8006854:	ebb2 0801 	subs.w	r8, r2, r1
 8006858:	4659      	mov	r1, fp
 800685a:	eb63 0901 	sbc.w	r9, r3, r1
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	f04f 0300 	mov.w	r3, #0
 8006866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800686a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800686e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006872:	4690      	mov	r8, r2
 8006874:	4699      	mov	r9, r3
 8006876:	4623      	mov	r3, r4
 8006878:	eb18 0303 	adds.w	r3, r8, r3
 800687c:	60bb      	str	r3, [r7, #8]
 800687e:	462b      	mov	r3, r5
 8006880:	eb49 0303 	adc.w	r3, r9, r3
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006892:	4629      	mov	r1, r5
 8006894:	024b      	lsls	r3, r1, #9
 8006896:	4621      	mov	r1, r4
 8006898:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800689c:	4621      	mov	r1, r4
 800689e:	024a      	lsls	r2, r1, #9
 80068a0:	4610      	mov	r0, r2
 80068a2:	4619      	mov	r1, r3
 80068a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068a6:	2200      	movs	r2, #0
 80068a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80068b0:	f7f9 fd7e 	bl	80003b0 <__aeabi_uldivmod>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4613      	mov	r3, r2
 80068ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068bc:	e058      	b.n	8006970 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068be:	4b38      	ldr	r3, [pc, #224]	@ (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	099b      	lsrs	r3, r3, #6
 80068c4:	2200      	movs	r2, #0
 80068c6:	4618      	mov	r0, r3
 80068c8:	4611      	mov	r1, r2
 80068ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80068ce:	623b      	str	r3, [r7, #32]
 80068d0:	2300      	movs	r3, #0
 80068d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80068d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80068d8:	4642      	mov	r2, r8
 80068da:	464b      	mov	r3, r9
 80068dc:	f04f 0000 	mov.w	r0, #0
 80068e0:	f04f 0100 	mov.w	r1, #0
 80068e4:	0159      	lsls	r1, r3, #5
 80068e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068ea:	0150      	lsls	r0, r2, #5
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4641      	mov	r1, r8
 80068f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80068f6:	4649      	mov	r1, r9
 80068f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	f04f 0300 	mov.w	r3, #0
 8006904:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006908:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800690c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006910:	ebb2 040a 	subs.w	r4, r2, sl
 8006914:	eb63 050b 	sbc.w	r5, r3, fp
 8006918:	f04f 0200 	mov.w	r2, #0
 800691c:	f04f 0300 	mov.w	r3, #0
 8006920:	00eb      	lsls	r3, r5, #3
 8006922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006926:	00e2      	lsls	r2, r4, #3
 8006928:	4614      	mov	r4, r2
 800692a:	461d      	mov	r5, r3
 800692c:	4643      	mov	r3, r8
 800692e:	18e3      	adds	r3, r4, r3
 8006930:	603b      	str	r3, [r7, #0]
 8006932:	464b      	mov	r3, r9
 8006934:	eb45 0303 	adc.w	r3, r5, r3
 8006938:	607b      	str	r3, [r7, #4]
 800693a:	f04f 0200 	mov.w	r2, #0
 800693e:	f04f 0300 	mov.w	r3, #0
 8006942:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006946:	4629      	mov	r1, r5
 8006948:	028b      	lsls	r3, r1, #10
 800694a:	4621      	mov	r1, r4
 800694c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006950:	4621      	mov	r1, r4
 8006952:	028a      	lsls	r2, r1, #10
 8006954:	4610      	mov	r0, r2
 8006956:	4619      	mov	r1, r3
 8006958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800695a:	2200      	movs	r2, #0
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	61fa      	str	r2, [r7, #28]
 8006960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006964:	f7f9 fd24 	bl	80003b0 <__aeabi_uldivmod>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	4613      	mov	r3, r2
 800696e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006970:	4b0b      	ldr	r3, [pc, #44]	@ (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	0c1b      	lsrs	r3, r3, #16
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	3301      	adds	r3, #1
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006980:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006984:	fbb2 f3f3 	udiv	r3, r2, r3
 8006988:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800698a:	e002      	b.n	8006992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800698c:	4b05      	ldr	r3, [pc, #20]	@ (80069a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800698e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006994:	4618      	mov	r0, r3
 8006996:	3750      	adds	r7, #80	@ 0x50
 8006998:	46bd      	mov	sp, r7
 800699a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800699e:	bf00      	nop
 80069a0:	40023800 	.word	0x40023800
 80069a4:	00f42400 	.word	0x00f42400
 80069a8:	007a1200 	.word	0x007a1200

080069ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069b0:	4b03      	ldr	r3, [pc, #12]	@ (80069c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80069b2:	681b      	ldr	r3, [r3, #0]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	20000000 	.word	0x20000000

080069c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069c8:	f7ff fff0 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 80069cc:	4602      	mov	r2, r0
 80069ce:	4b05      	ldr	r3, [pc, #20]	@ (80069e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	0a9b      	lsrs	r3, r3, #10
 80069d4:	f003 0307 	and.w	r3, r3, #7
 80069d8:	4903      	ldr	r1, [pc, #12]	@ (80069e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069da:	5ccb      	ldrb	r3, [r1, r3]
 80069dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	40023800 	.word	0x40023800
 80069e8:	08021c88 	.word	0x08021c88

080069ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	220f      	movs	r2, #15
 80069fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80069fc:	4b12      	ldr	r3, [pc, #72]	@ (8006a48 <HAL_RCC_GetClockConfig+0x5c>)
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f003 0203 	and.w	r2, r3, #3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a08:	4b0f      	ldr	r3, [pc, #60]	@ (8006a48 <HAL_RCC_GetClockConfig+0x5c>)
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a14:	4b0c      	ldr	r3, [pc, #48]	@ (8006a48 <HAL_RCC_GetClockConfig+0x5c>)
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006a20:	4b09      	ldr	r3, [pc, #36]	@ (8006a48 <HAL_RCC_GetClockConfig+0x5c>)
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	08db      	lsrs	r3, r3, #3
 8006a26:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a2e:	4b07      	ldr	r3, [pc, #28]	@ (8006a4c <HAL_RCC_GetClockConfig+0x60>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 020f 	and.w	r2, r3, #15
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	601a      	str	r2, [r3, #0]
}
 8006a3a:	bf00      	nop
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	40023c00 	.word	0x40023c00

08006a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b088      	sub	sp, #32
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006a64:	2300      	movs	r3, #0
 8006a66:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d012      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a78:	4b69      	ldr	r3, [pc, #420]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	4a68      	ldr	r2, [pc, #416]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a7e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006a82:	6093      	str	r3, [r2, #8]
 8006a84:	4b66      	ldr	r3, [pc, #408]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a8c:	4964      	ldr	r1, [pc, #400]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d017      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006aaa:	4b5d      	ldr	r3, [pc, #372]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ab0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab8:	4959      	ldr	r1, [pc, #356]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ac8:	d101      	bne.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006aca:	2301      	movs	r3, #1
 8006acc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d017      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006ae6:	4b4e      	ldr	r3, [pc, #312]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006aec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af4:	494a      	ldr	r1, [pc, #296]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b04:	d101      	bne.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006b06:	2301      	movs	r3, #1
 8006b08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006b12:	2301      	movs	r3, #1
 8006b14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006b22:	2301      	movs	r3, #1
 8006b24:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0320 	and.w	r3, r3, #32
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 808b 	beq.w	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b34:	4b3a      	ldr	r3, [pc, #232]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b38:	4a39      	ldr	r2, [pc, #228]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b40:	4b37      	ldr	r3, [pc, #220]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b48:	60bb      	str	r3, [r7, #8]
 8006b4a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006b4c:	4b35      	ldr	r3, [pc, #212]	@ (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a34      	ldr	r2, [pc, #208]	@ (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b58:	f7fb fba0 	bl	800229c <HAL_GetTick>
 8006b5c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006b5e:	e008      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b60:	f7fb fb9c 	bl	800229c <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b64      	cmp	r3, #100	@ 0x64
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e38f      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006b72:	4b2c      	ldr	r3, [pc, #176]	@ (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0f0      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b7e:	4b28      	ldr	r3, [pc, #160]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b86:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d035      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d02e      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b9c:	4b20      	ldr	r3, [pc, #128]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ba0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ba4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006baa:	4a1d      	ldr	r2, [pc, #116]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bb0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bb6:	4a1a      	ldr	r2, [pc, #104]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bbc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006bbe:	4a18      	ldr	r2, [pc, #96]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006bc4:	4b16      	ldr	r3, [pc, #88]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d114      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd0:	f7fb fb64 	bl	800229c <HAL_GetTick>
 8006bd4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bd6:	e00a      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bd8:	f7fb fb60 	bl	800229c <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d901      	bls.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e351      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bee:	4b0c      	ldr	r3, [pc, #48]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0ee      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c06:	d111      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006c08:	4b05      	ldr	r3, [pc, #20]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006c14:	4b04      	ldr	r3, [pc, #16]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006c16:	400b      	ands	r3, r1
 8006c18:	4901      	ldr	r1, [pc, #4]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	608b      	str	r3, [r1, #8]
 8006c1e:	e00b      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006c20:	40023800 	.word	0x40023800
 8006c24:	40007000 	.word	0x40007000
 8006c28:	0ffffcff 	.word	0x0ffffcff
 8006c2c:	4bac      	ldr	r3, [pc, #688]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	4aab      	ldr	r2, [pc, #684]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c32:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006c36:	6093      	str	r3, [r2, #8]
 8006c38:	4ba9      	ldr	r3, [pc, #676]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c3a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c44:	49a6      	ldr	r1, [pc, #664]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0310 	and.w	r3, r3, #16
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d010      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c56:	4ba2      	ldr	r3, [pc, #648]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c5c:	4aa0      	ldr	r2, [pc, #640]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006c66:	4b9e      	ldr	r3, [pc, #632]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c68:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c70:	499b      	ldr	r1, [pc, #620]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00a      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c84:	4b96      	ldr	r3, [pc, #600]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c8a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c92:	4993      	ldr	r1, [pc, #588]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00a      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ca6:	4b8e      	ldr	r3, [pc, #568]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cb4:	498a      	ldr	r1, [pc, #552]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00a      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006cc8:	4b85      	ldr	r3, [pc, #532]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cd6:	4982      	ldr	r1, [pc, #520]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00a      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006cea:	4b7d      	ldr	r3, [pc, #500]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cf0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cf8:	4979      	ldr	r1, [pc, #484]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00a      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d0c:	4b74      	ldr	r3, [pc, #464]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d12:	f023 0203 	bic.w	r2, r3, #3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d1a:	4971      	ldr	r1, [pc, #452]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d2e:	4b6c      	ldr	r3, [pc, #432]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d34:	f023 020c 	bic.w	r2, r3, #12
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d3c:	4968      	ldr	r1, [pc, #416]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00a      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d50:	4b63      	ldr	r3, [pc, #396]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d56:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d5e:	4960      	ldr	r1, [pc, #384]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00a      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006d72:	4b5b      	ldr	r3, [pc, #364]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d78:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d80:	4957      	ldr	r1, [pc, #348]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00a      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006d94:	4b52      	ldr	r3, [pc, #328]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006da2:	494f      	ldr	r1, [pc, #316]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006db6:	4b4a      	ldr	r3, [pc, #296]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dbc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc4:	4946      	ldr	r1, [pc, #280]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00a      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006dd8:	4b41      	ldr	r3, [pc, #260]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dde:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006de6:	493e      	ldr	r1, [pc, #248]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006dfa:	4b39      	ldr	r3, [pc, #228]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e08:	4935      	ldr	r1, [pc, #212]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00a      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e1c:	4b30      	ldr	r3, [pc, #192]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e22:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e2a:	492d      	ldr	r1, [pc, #180]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d011      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006e3e:	4b28      	ldr	r3, [pc, #160]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e44:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e4c:	4924      	ldr	r1, [pc, #144]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e5c:	d101      	bne.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0308 	and.w	r3, r3, #8
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00a      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e7e:	4b18      	ldr	r3, [pc, #96]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e84:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e8c:	4914      	ldr	r1, [pc, #80]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00b      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ea6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eb0:	490b      	ldr	r1, [pc, #44]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00f      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006ec4:	4b06      	ldr	r3, [pc, #24]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eca:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ed4:	4902      	ldr	r1, [pc, #8]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006edc:	e002      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006ede:	bf00      	nop
 8006ee0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00b      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ef0:	4b8a      	ldr	r3, [pc, #552]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ef6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f00:	4986      	ldr	r1, [pc, #536]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00b      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006f14:	4b81      	ldr	r3, [pc, #516]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f1a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f24:	497d      	ldr	r1, [pc, #500]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d006      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 80d6 	beq.w	80070ec <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f40:	4b76      	ldr	r3, [pc, #472]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a75      	ldr	r2, [pc, #468]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f4c:	f7fb f9a6 	bl	800229c <HAL_GetTick>
 8006f50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f52:	e008      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f54:	f7fb f9a2 	bl	800229c <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	2b64      	cmp	r3, #100	@ 0x64
 8006f60:	d901      	bls.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e195      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f66:	4b6d      	ldr	r3, [pc, #436]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1f0      	bne.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d021      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d11d      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006f86:	4b65      	ldr	r3, [pc, #404]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f8c:	0c1b      	lsrs	r3, r3, #16
 8006f8e:	f003 0303 	and.w	r3, r3, #3
 8006f92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006f94:	4b61      	ldr	r3, [pc, #388]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f9a:	0e1b      	lsrs	r3, r3, #24
 8006f9c:	f003 030f 	and.w	r3, r3, #15
 8006fa0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	019a      	lsls	r2, r3, #6
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	041b      	lsls	r3, r3, #16
 8006fac:	431a      	orrs	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	061b      	lsls	r3, r3, #24
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	071b      	lsls	r3, r3, #28
 8006fba:	4958      	ldr	r1, [pc, #352]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d004      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fd6:	d00a      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d02e      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fec:	d129      	bne.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006fee:	4b4b      	ldr	r3, [pc, #300]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ff4:	0c1b      	lsrs	r3, r3, #16
 8006ff6:	f003 0303 	and.w	r3, r3, #3
 8006ffa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ffc:	4b47      	ldr	r3, [pc, #284]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007002:	0f1b      	lsrs	r3, r3, #28
 8007004:	f003 0307 	and.w	r3, r3, #7
 8007008:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	019a      	lsls	r2, r3, #6
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	041b      	lsls	r3, r3, #16
 8007014:	431a      	orrs	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	061b      	lsls	r3, r3, #24
 800701c:	431a      	orrs	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	071b      	lsls	r3, r3, #28
 8007022:	493e      	ldr	r1, [pc, #248]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007024:	4313      	orrs	r3, r2
 8007026:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800702a:	4b3c      	ldr	r3, [pc, #240]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800702c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007030:	f023 021f 	bic.w	r2, r3, #31
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007038:	3b01      	subs	r3, #1
 800703a:	4938      	ldr	r1, [pc, #224]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800703c:	4313      	orrs	r3, r2
 800703e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d01d      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800704e:	4b33      	ldr	r3, [pc, #204]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007054:	0e1b      	lsrs	r3, r3, #24
 8007056:	f003 030f 	and.w	r3, r3, #15
 800705a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800705c:	4b2f      	ldr	r3, [pc, #188]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800705e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007062:	0f1b      	lsrs	r3, r3, #28
 8007064:	f003 0307 	and.w	r3, r3, #7
 8007068:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	019a      	lsls	r2, r3, #6
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	041b      	lsls	r3, r3, #16
 8007076:	431a      	orrs	r2, r3
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	061b      	lsls	r3, r3, #24
 800707c:	431a      	orrs	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	071b      	lsls	r3, r3, #28
 8007082:	4926      	ldr	r1, [pc, #152]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007084:	4313      	orrs	r3, r2
 8007086:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d011      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	019a      	lsls	r2, r3, #6
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	041b      	lsls	r3, r3, #16
 80070a2:	431a      	orrs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	061b      	lsls	r3, r3, #24
 80070aa:	431a      	orrs	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	071b      	lsls	r3, r3, #28
 80070b2:	491a      	ldr	r1, [pc, #104]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80070ba:	4b18      	ldr	r3, [pc, #96]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a17      	ldr	r2, [pc, #92]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80070c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070c6:	f7fb f8e9 	bl	800229c <HAL_GetTick>
 80070ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070cc:	e008      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80070ce:	f7fb f8e5 	bl	800229c <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b64      	cmp	r3, #100	@ 0x64
 80070da:	d901      	bls.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e0d8      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070e0:	4b0e      	ldr	r3, [pc, #56]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d0f0      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	f040 80ce 	bne.w	8007290 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80070f4:	4b09      	ldr	r3, [pc, #36]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a08      	ldr	r2, [pc, #32]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007100:	f7fb f8cc 	bl	800229c <HAL_GetTick>
 8007104:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007106:	e00b      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007108:	f7fb f8c8 	bl	800229c <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	2b64      	cmp	r3, #100	@ 0x64
 8007114:	d904      	bls.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e0bb      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800711a:	bf00      	nop
 800711c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007120:	4b5e      	ldr	r3, [pc, #376]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800712c:	d0ec      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800713e:	2b00      	cmp	r3, #0
 8007140:	d009      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800714a:	2b00      	cmp	r3, #0
 800714c:	d02e      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007152:	2b00      	cmp	r3, #0
 8007154:	d12a      	bne.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007156:	4b51      	ldr	r3, [pc, #324]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800715c:	0c1b      	lsrs	r3, r3, #16
 800715e:	f003 0303 	and.w	r3, r3, #3
 8007162:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007164:	4b4d      	ldr	r3, [pc, #308]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800716a:	0f1b      	lsrs	r3, r3, #28
 800716c:	f003 0307 	and.w	r3, r3, #7
 8007170:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	019a      	lsls	r2, r3, #6
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	041b      	lsls	r3, r3, #16
 800717c:	431a      	orrs	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	061b      	lsls	r3, r3, #24
 8007184:	431a      	orrs	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	071b      	lsls	r3, r3, #28
 800718a:	4944      	ldr	r1, [pc, #272]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800718c:	4313      	orrs	r3, r2
 800718e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007192:	4b42      	ldr	r3, [pc, #264]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007194:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007198:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a0:	3b01      	subs	r3, #1
 80071a2:	021b      	lsls	r3, r3, #8
 80071a4:	493d      	ldr	r1, [pc, #244]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d022      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071c0:	d11d      	bne.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80071c2:	4b36      	ldr	r3, [pc, #216]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80071c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c8:	0e1b      	lsrs	r3, r3, #24
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80071d0:	4b32      	ldr	r3, [pc, #200]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80071d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071d6:	0f1b      	lsrs	r3, r3, #28
 80071d8:	f003 0307 	and.w	r3, r3, #7
 80071dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	019a      	lsls	r2, r3, #6
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	041b      	lsls	r3, r3, #16
 80071ea:	431a      	orrs	r2, r3
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	061b      	lsls	r3, r3, #24
 80071f0:	431a      	orrs	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	071b      	lsls	r3, r3, #28
 80071f6:	4929      	ldr	r1, [pc, #164]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0308 	and.w	r3, r3, #8
 8007206:	2b00      	cmp	r3, #0
 8007208:	d028      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800720a:	4b24      	ldr	r3, [pc, #144]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800720c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007210:	0e1b      	lsrs	r3, r3, #24
 8007212:	f003 030f 	and.w	r3, r3, #15
 8007216:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007218:	4b20      	ldr	r3, [pc, #128]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800721a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800721e:	0c1b      	lsrs	r3, r3, #16
 8007220:	f003 0303 	and.w	r3, r3, #3
 8007224:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	019a      	lsls	r2, r3, #6
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	041b      	lsls	r3, r3, #16
 8007230:	431a      	orrs	r2, r3
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	061b      	lsls	r3, r3, #24
 8007236:	431a      	orrs	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	071b      	lsls	r3, r3, #28
 800723e:	4917      	ldr	r1, [pc, #92]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007240:	4313      	orrs	r3, r2
 8007242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007246:	4b15      	ldr	r3, [pc, #84]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007248:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800724c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007254:	4911      	ldr	r1, [pc, #68]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007256:	4313      	orrs	r3, r2
 8007258:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800725c:	4b0f      	ldr	r3, [pc, #60]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a0e      	ldr	r2, [pc, #56]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007266:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007268:	f7fb f818 	bl	800229c <HAL_GetTick>
 800726c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800726e:	e008      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007270:	f7fb f814 	bl	800229c <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b64      	cmp	r3, #100	@ 0x64
 800727c:	d901      	bls.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e007      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007282:	4b06      	ldr	r3, [pc, #24]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800728a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800728e:	d1ef      	bne.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3720      	adds	r7, #32
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	40023800 	.word	0x40023800

080072a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e049      	b.n	8007346 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d106      	bne.n	80072cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f841 	bl	800734e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3304      	adds	r3, #4
 80072dc:	4619      	mov	r1, r3
 80072de:	4610      	mov	r0, r2
 80072e0:	f000 f9e8 	bl	80076b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800734e:	b480      	push	{r7}
 8007350:	b083      	sub	sp, #12
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007356:	bf00      	nop
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
	...

08007364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b01      	cmp	r3, #1
 8007376:	d001      	beq.n	800737c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e054      	b.n	8007426 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68da      	ldr	r2, [r3, #12]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f042 0201 	orr.w	r2, r2, #1
 8007392:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a26      	ldr	r2, [pc, #152]	@ (8007434 <HAL_TIM_Base_Start_IT+0xd0>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d022      	beq.n	80073e4 <HAL_TIM_Base_Start_IT+0x80>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073a6:	d01d      	beq.n	80073e4 <HAL_TIM_Base_Start_IT+0x80>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a22      	ldr	r2, [pc, #136]	@ (8007438 <HAL_TIM_Base_Start_IT+0xd4>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d018      	beq.n	80073e4 <HAL_TIM_Base_Start_IT+0x80>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a21      	ldr	r2, [pc, #132]	@ (800743c <HAL_TIM_Base_Start_IT+0xd8>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d013      	beq.n	80073e4 <HAL_TIM_Base_Start_IT+0x80>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a1f      	ldr	r2, [pc, #124]	@ (8007440 <HAL_TIM_Base_Start_IT+0xdc>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d00e      	beq.n	80073e4 <HAL_TIM_Base_Start_IT+0x80>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007444 <HAL_TIM_Base_Start_IT+0xe0>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d009      	beq.n	80073e4 <HAL_TIM_Base_Start_IT+0x80>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007448 <HAL_TIM_Base_Start_IT+0xe4>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d004      	beq.n	80073e4 <HAL_TIM_Base_Start_IT+0x80>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a1b      	ldr	r2, [pc, #108]	@ (800744c <HAL_TIM_Base_Start_IT+0xe8>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d115      	bne.n	8007410 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	689a      	ldr	r2, [r3, #8]
 80073ea:	4b19      	ldr	r3, [pc, #100]	@ (8007450 <HAL_TIM_Base_Start_IT+0xec>)
 80073ec:	4013      	ands	r3, r2
 80073ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2b06      	cmp	r3, #6
 80073f4:	d015      	beq.n	8007422 <HAL_TIM_Base_Start_IT+0xbe>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073fc:	d011      	beq.n	8007422 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f042 0201 	orr.w	r2, r2, #1
 800740c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800740e:	e008      	b.n	8007422 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f042 0201 	orr.w	r2, r2, #1
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	e000      	b.n	8007424 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007422:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3714      	adds	r7, #20
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	40010000 	.word	0x40010000
 8007438:	40000400 	.word	0x40000400
 800743c:	40000800 	.word	0x40000800
 8007440:	40000c00 	.word	0x40000c00
 8007444:	40010400 	.word	0x40010400
 8007448:	40014000 	.word	0x40014000
 800744c:	40001800 	.word	0x40001800
 8007450:	00010007 	.word	0x00010007

08007454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f003 0302 	and.w	r3, r3, #2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d020      	beq.n	80074b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f003 0302 	and.w	r3, r3, #2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d01b      	beq.n	80074b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f06f 0202 	mvn.w	r2, #2
 8007488:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	f003 0303 	and.w	r3, r3, #3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f8e9 	bl	8007676 <HAL_TIM_IC_CaptureCallback>
 80074a4:	e005      	b.n	80074b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f8db 	bl	8007662 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f8ec 	bl	800768a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	f003 0304 	and.w	r3, r3, #4
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d020      	beq.n	8007504 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f003 0304 	and.w	r3, r3, #4
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d01b      	beq.n	8007504 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f06f 0204 	mvn.w	r2, #4
 80074d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2202      	movs	r2, #2
 80074da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f8c3 	bl	8007676 <HAL_TIM_IC_CaptureCallback>
 80074f0:	e005      	b.n	80074fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f8b5 	bl	8007662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f8c6 	bl	800768a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f003 0308 	and.w	r3, r3, #8
 800750a:	2b00      	cmp	r3, #0
 800750c:	d020      	beq.n	8007550 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f003 0308 	and.w	r3, r3, #8
 8007514:	2b00      	cmp	r3, #0
 8007516:	d01b      	beq.n	8007550 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f06f 0208 	mvn.w	r2, #8
 8007520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2204      	movs	r2, #4
 8007526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	69db      	ldr	r3, [r3, #28]
 800752e:	f003 0303 	and.w	r3, r3, #3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f89d 	bl	8007676 <HAL_TIM_IC_CaptureCallback>
 800753c:	e005      	b.n	800754a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f88f 	bl	8007662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f8a0 	bl	800768a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f003 0310 	and.w	r3, r3, #16
 8007556:	2b00      	cmp	r3, #0
 8007558:	d020      	beq.n	800759c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f003 0310 	and.w	r3, r3, #16
 8007560:	2b00      	cmp	r3, #0
 8007562:	d01b      	beq.n	800759c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f06f 0210 	mvn.w	r2, #16
 800756c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2208      	movs	r2, #8
 8007572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	69db      	ldr	r3, [r3, #28]
 800757a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f877 	bl	8007676 <HAL_TIM_IC_CaptureCallback>
 8007588:	e005      	b.n	8007596 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f869 	bl	8007662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f87a 	bl	800768a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00c      	beq.n	80075c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d007      	beq.n	80075c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f06f 0201 	mvn.w	r2, #1
 80075b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7fa faf0 	bl	8001ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d104      	bne.n	80075d4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00c      	beq.n	80075ee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d007      	beq.n	80075ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80075e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f919 	bl	8007820 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00c      	beq.n	8007612 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d007      	beq.n	8007612 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800760a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f911 	bl	8007834 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00c      	beq.n	8007636 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007622:	2b00      	cmp	r3, #0
 8007624:	d007      	beq.n	8007636 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800762e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f834 	bl	800769e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	f003 0320 	and.w	r3, r3, #32
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00c      	beq.n	800765a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b00      	cmp	r3, #0
 8007648:	d007      	beq.n	800765a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f06f 0220 	mvn.w	r2, #32
 8007652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f8d9 	bl	800780c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800765a:	bf00      	nop
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007676:	b480      	push	{r7}
 8007678:	b083      	sub	sp, #12
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800767e:	bf00      	nop
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
	...

080076b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a46      	ldr	r2, [pc, #280]	@ (80077e0 <TIM_Base_SetConfig+0x12c>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d013      	beq.n	80076f4 <TIM_Base_SetConfig+0x40>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076d2:	d00f      	beq.n	80076f4 <TIM_Base_SetConfig+0x40>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a43      	ldr	r2, [pc, #268]	@ (80077e4 <TIM_Base_SetConfig+0x130>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d00b      	beq.n	80076f4 <TIM_Base_SetConfig+0x40>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a42      	ldr	r2, [pc, #264]	@ (80077e8 <TIM_Base_SetConfig+0x134>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d007      	beq.n	80076f4 <TIM_Base_SetConfig+0x40>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a41      	ldr	r2, [pc, #260]	@ (80077ec <TIM_Base_SetConfig+0x138>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d003      	beq.n	80076f4 <TIM_Base_SetConfig+0x40>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a40      	ldr	r2, [pc, #256]	@ (80077f0 <TIM_Base_SetConfig+0x13c>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d108      	bne.n	8007706 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	4313      	orrs	r3, r2
 8007704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a35      	ldr	r2, [pc, #212]	@ (80077e0 <TIM_Base_SetConfig+0x12c>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d02b      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007714:	d027      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a32      	ldr	r2, [pc, #200]	@ (80077e4 <TIM_Base_SetConfig+0x130>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d023      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a31      	ldr	r2, [pc, #196]	@ (80077e8 <TIM_Base_SetConfig+0x134>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d01f      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a30      	ldr	r2, [pc, #192]	@ (80077ec <TIM_Base_SetConfig+0x138>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d01b      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a2f      	ldr	r2, [pc, #188]	@ (80077f0 <TIM_Base_SetConfig+0x13c>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d017      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a2e      	ldr	r2, [pc, #184]	@ (80077f4 <TIM_Base_SetConfig+0x140>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d013      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a2d      	ldr	r2, [pc, #180]	@ (80077f8 <TIM_Base_SetConfig+0x144>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d00f      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a2c      	ldr	r2, [pc, #176]	@ (80077fc <TIM_Base_SetConfig+0x148>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d00b      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a2b      	ldr	r2, [pc, #172]	@ (8007800 <TIM_Base_SetConfig+0x14c>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d007      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a2a      	ldr	r2, [pc, #168]	@ (8007804 <TIM_Base_SetConfig+0x150>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d003      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a29      	ldr	r2, [pc, #164]	@ (8007808 <TIM_Base_SetConfig+0x154>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d108      	bne.n	8007778 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800776c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	4313      	orrs	r3, r2
 8007776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	4313      	orrs	r3, r2
 8007784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	689a      	ldr	r2, [r3, #8]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a10      	ldr	r2, [pc, #64]	@ (80077e0 <TIM_Base_SetConfig+0x12c>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d003      	beq.n	80077ac <TIM_Base_SetConfig+0xf8>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a12      	ldr	r2, [pc, #72]	@ (80077f0 <TIM_Base_SetConfig+0x13c>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d103      	bne.n	80077b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	691a      	ldr	r2, [r3, #16]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d105      	bne.n	80077d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	f023 0201 	bic.w	r2, r3, #1
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	611a      	str	r2, [r3, #16]
  }
}
 80077d2:	bf00      	nop
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	40010000 	.word	0x40010000
 80077e4:	40000400 	.word	0x40000400
 80077e8:	40000800 	.word	0x40000800
 80077ec:	40000c00 	.word	0x40000c00
 80077f0:	40010400 	.word	0x40010400
 80077f4:	40014000 	.word	0x40014000
 80077f8:	40014400 	.word	0x40014400
 80077fc:	40014800 	.word	0x40014800
 8007800:	40001800 	.word	0x40001800
 8007804:	40001c00 	.word	0x40001c00
 8007808:	40002000 	.word	0x40002000

0800780c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007848:	b084      	sub	sp, #16
 800784a:	b580      	push	{r7, lr}
 800784c:	b084      	sub	sp, #16
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	f107 001c 	add.w	r0, r7, #28
 8007856:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800785a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800785e:	2b01      	cmp	r3, #1
 8007860:	d121      	bne.n	80078a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007866:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68da      	ldr	r2, [r3, #12]
 8007872:	4b21      	ldr	r3, [pc, #132]	@ (80078f8 <USB_CoreInit+0xb0>)
 8007874:	4013      	ands	r3, r2
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007886:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800788a:	2b01      	cmp	r3, #1
 800788c:	d105      	bne.n	800789a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f001 fade 	bl	8008e5c <USB_CoreReset>
 80078a0:	4603      	mov	r3, r0
 80078a2:	73fb      	strb	r3, [r7, #15]
 80078a4:	e010      	b.n	80078c8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f001 fad2 	bl	8008e5c <USB_CoreReset>
 80078b8:	4603      	mov	r3, r0
 80078ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80078c8:	7fbb      	ldrb	r3, [r7, #30]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d10b      	bne.n	80078e6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f043 0206 	orr.w	r2, r3, #6
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f043 0220 	orr.w	r2, r3, #32
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078f2:	b004      	add	sp, #16
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	ffbdffbf 	.word	0xffbdffbf

080078fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	4613      	mov	r3, r2
 8007908:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800790a:	79fb      	ldrb	r3, [r7, #7]
 800790c:	2b02      	cmp	r3, #2
 800790e:	d165      	bne.n	80079dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	4a41      	ldr	r2, [pc, #260]	@ (8007a18 <USB_SetTurnaroundTime+0x11c>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d906      	bls.n	8007926 <USB_SetTurnaroundTime+0x2a>
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	4a40      	ldr	r2, [pc, #256]	@ (8007a1c <USB_SetTurnaroundTime+0x120>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d202      	bcs.n	8007926 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007920:	230f      	movs	r3, #15
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	e062      	b.n	80079ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	4a3c      	ldr	r2, [pc, #240]	@ (8007a1c <USB_SetTurnaroundTime+0x120>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d306      	bcc.n	800793c <USB_SetTurnaroundTime+0x40>
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	4a3b      	ldr	r2, [pc, #236]	@ (8007a20 <USB_SetTurnaroundTime+0x124>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d202      	bcs.n	800793c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007936:	230e      	movs	r3, #14
 8007938:	617b      	str	r3, [r7, #20]
 800793a:	e057      	b.n	80079ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	4a38      	ldr	r2, [pc, #224]	@ (8007a20 <USB_SetTurnaroundTime+0x124>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d306      	bcc.n	8007952 <USB_SetTurnaroundTime+0x56>
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	4a37      	ldr	r2, [pc, #220]	@ (8007a24 <USB_SetTurnaroundTime+0x128>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d202      	bcs.n	8007952 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800794c:	230d      	movs	r3, #13
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	e04c      	b.n	80079ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	4a33      	ldr	r2, [pc, #204]	@ (8007a24 <USB_SetTurnaroundTime+0x128>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d306      	bcc.n	8007968 <USB_SetTurnaroundTime+0x6c>
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	4a32      	ldr	r2, [pc, #200]	@ (8007a28 <USB_SetTurnaroundTime+0x12c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d802      	bhi.n	8007968 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007962:	230c      	movs	r3, #12
 8007964:	617b      	str	r3, [r7, #20]
 8007966:	e041      	b.n	80079ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4a2f      	ldr	r2, [pc, #188]	@ (8007a28 <USB_SetTurnaroundTime+0x12c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d906      	bls.n	800797e <USB_SetTurnaroundTime+0x82>
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	4a2e      	ldr	r2, [pc, #184]	@ (8007a2c <USB_SetTurnaroundTime+0x130>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d802      	bhi.n	800797e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007978:	230b      	movs	r3, #11
 800797a:	617b      	str	r3, [r7, #20]
 800797c:	e036      	b.n	80079ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	4a2a      	ldr	r2, [pc, #168]	@ (8007a2c <USB_SetTurnaroundTime+0x130>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d906      	bls.n	8007994 <USB_SetTurnaroundTime+0x98>
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	4a29      	ldr	r2, [pc, #164]	@ (8007a30 <USB_SetTurnaroundTime+0x134>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d802      	bhi.n	8007994 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800798e:	230a      	movs	r3, #10
 8007990:	617b      	str	r3, [r7, #20]
 8007992:	e02b      	b.n	80079ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	4a26      	ldr	r2, [pc, #152]	@ (8007a30 <USB_SetTurnaroundTime+0x134>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d906      	bls.n	80079aa <USB_SetTurnaroundTime+0xae>
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	4a25      	ldr	r2, [pc, #148]	@ (8007a34 <USB_SetTurnaroundTime+0x138>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d202      	bcs.n	80079aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80079a4:	2309      	movs	r3, #9
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	e020      	b.n	80079ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	4a21      	ldr	r2, [pc, #132]	@ (8007a34 <USB_SetTurnaroundTime+0x138>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d306      	bcc.n	80079c0 <USB_SetTurnaroundTime+0xc4>
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	4a20      	ldr	r2, [pc, #128]	@ (8007a38 <USB_SetTurnaroundTime+0x13c>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d802      	bhi.n	80079c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80079ba:	2308      	movs	r3, #8
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	e015      	b.n	80079ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	4a1d      	ldr	r2, [pc, #116]	@ (8007a38 <USB_SetTurnaroundTime+0x13c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d906      	bls.n	80079d6 <USB_SetTurnaroundTime+0xda>
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	4a1c      	ldr	r2, [pc, #112]	@ (8007a3c <USB_SetTurnaroundTime+0x140>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d202      	bcs.n	80079d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80079d0:	2307      	movs	r3, #7
 80079d2:	617b      	str	r3, [r7, #20]
 80079d4:	e00a      	b.n	80079ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80079d6:	2306      	movs	r3, #6
 80079d8:	617b      	str	r3, [r7, #20]
 80079da:	e007      	b.n	80079ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80079dc:	79fb      	ldrb	r3, [r7, #7]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d102      	bne.n	80079e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80079e2:	2309      	movs	r3, #9
 80079e4:	617b      	str	r3, [r7, #20]
 80079e6:	e001      	b.n	80079ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80079e8:	2309      	movs	r3, #9
 80079ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	029b      	lsls	r3, r3, #10
 8007a00:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007a04:	431a      	orrs	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	371c      	adds	r7, #28
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	00d8acbf 	.word	0x00d8acbf
 8007a1c:	00e4e1c0 	.word	0x00e4e1c0
 8007a20:	00f42400 	.word	0x00f42400
 8007a24:	01067380 	.word	0x01067380
 8007a28:	011a499f 	.word	0x011a499f
 8007a2c:	01312cff 	.word	0x01312cff
 8007a30:	014ca43f 	.word	0x014ca43f
 8007a34:	016e3600 	.word	0x016e3600
 8007a38:	01a6ab1f 	.word	0x01a6ab1f
 8007a3c:	01e84800 	.word	0x01e84800

08007a40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f043 0201 	orr.w	r2, r3, #1
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f023 0201 	bic.w	r2, r3, #1
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007aa0:	78fb      	ldrb	r3, [r7, #3]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d115      	bne.n	8007ad2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ab2:	200a      	movs	r0, #10
 8007ab4:	f7fa fbfe 	bl	80022b4 <HAL_Delay>
      ms += 10U;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	330a      	adds	r3, #10
 8007abc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f001 f93b 	bl	8008d3a <USB_GetMode>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d01e      	beq.n	8007b08 <USB_SetCurrentMode+0x84>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2bc7      	cmp	r3, #199	@ 0xc7
 8007ace:	d9f0      	bls.n	8007ab2 <USB_SetCurrentMode+0x2e>
 8007ad0:	e01a      	b.n	8007b08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ad2:	78fb      	ldrb	r3, [r7, #3]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d115      	bne.n	8007b04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ae4:	200a      	movs	r0, #10
 8007ae6:	f7fa fbe5 	bl	80022b4 <HAL_Delay>
      ms += 10U;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	330a      	adds	r3, #10
 8007aee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 f922 	bl	8008d3a <USB_GetMode>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d005      	beq.n	8007b08 <USB_SetCurrentMode+0x84>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2bc7      	cmp	r3, #199	@ 0xc7
 8007b00:	d9f0      	bls.n	8007ae4 <USB_SetCurrentMode+0x60>
 8007b02:	e001      	b.n	8007b08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e005      	b.n	8007b14 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2bc8      	cmp	r3, #200	@ 0xc8
 8007b0c:	d101      	bne.n	8007b12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e000      	b.n	8007b14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b086      	sub	sp, #24
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007b2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b36:	2300      	movs	r3, #0
 8007b38:	613b      	str	r3, [r7, #16]
 8007b3a:	e009      	b.n	8007b50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	3340      	adds	r3, #64	@ 0x40
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	2200      	movs	r2, #0
 8007b48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	613b      	str	r3, [r7, #16]
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	2b0e      	cmp	r3, #14
 8007b54:	d9f2      	bls.n	8007b3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d11c      	bne.n	8007b98 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b6c:	f043 0302 	orr.w	r3, r3, #2
 8007b70:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b76:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	e005      	b.n	8007ba4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b9c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007baa:	461a      	mov	r2, r3
 8007bac:	2300      	movs	r3, #0
 8007bae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bb0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d10d      	bne.n	8007bd4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d104      	bne.n	8007bca <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f968 	bl	8007e98 <USB_SetDevSpeed>
 8007bc8:	e008      	b.n	8007bdc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007bca:	2101      	movs	r1, #1
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f963 	bl	8007e98 <USB_SetDevSpeed>
 8007bd2:	e003      	b.n	8007bdc <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007bd4:	2103      	movs	r1, #3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f95e 	bl	8007e98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007bdc:	2110      	movs	r1, #16
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f8fa 	bl	8007dd8 <USB_FlushTxFifo>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f924 	bl	8007e3c <USB_FlushRxFifo>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c04:	461a      	mov	r2, r3
 8007c06:	2300      	movs	r3, #0
 8007c08:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c10:	461a      	mov	r2, r3
 8007c12:	2300      	movs	r3, #0
 8007c14:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	2300      	movs	r3, #0
 8007c20:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c22:	2300      	movs	r3, #0
 8007c24:	613b      	str	r3, [r7, #16]
 8007c26:	e043      	b.n	8007cb0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c3e:	d118      	bne.n	8007c72 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10a      	bne.n	8007c5c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c52:	461a      	mov	r2, r3
 8007c54:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007c58:	6013      	str	r3, [r2, #0]
 8007c5a:	e013      	b.n	8007c84 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c68:	461a      	mov	r2, r3
 8007c6a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007c6e:	6013      	str	r3, [r2, #0]
 8007c70:	e008      	b.n	8007c84 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c7e:	461a      	mov	r2, r3
 8007c80:	2300      	movs	r3, #0
 8007c82:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	015a      	lsls	r2, r3, #5
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c90:	461a      	mov	r2, r3
 8007c92:	2300      	movs	r3, #0
 8007c94:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ca8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	3301      	adds	r3, #1
 8007cae:	613b      	str	r3, [r7, #16]
 8007cb0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d3b5      	bcc.n	8007c28 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	613b      	str	r3, [r7, #16]
 8007cc0:	e043      	b.n	8007d4a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	015a      	lsls	r2, r3, #5
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cd8:	d118      	bne.n	8007d0c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10a      	bne.n	8007cf6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	015a      	lsls	r2, r3, #5
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cec:	461a      	mov	r2, r3
 8007cee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007cf2:	6013      	str	r3, [r2, #0]
 8007cf4:	e013      	b.n	8007d1e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d02:	461a      	mov	r2, r3
 8007d04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007d08:	6013      	str	r3, [r2, #0]
 8007d0a:	e008      	b.n	8007d1e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d18:	461a      	mov	r2, r3
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	015a      	lsls	r2, r3, #5
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	3301      	adds	r3, #1
 8007d48:	613b      	str	r3, [r7, #16]
 8007d4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007d4e:	461a      	mov	r2, r3
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d3b5      	bcc.n	8007cc2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d68:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007d76:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d105      	bne.n	8007d8c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	f043 0210 	orr.w	r2, r3, #16
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	699a      	ldr	r2, [r3, #24]
 8007d90:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd0 <USB_DevInit+0x2b4>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d98:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d005      	beq.n	8007dac <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	f043 0208 	orr.w	r2, r3, #8
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007dac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d105      	bne.n	8007dc0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	699a      	ldr	r2, [r3, #24]
 8007db8:	4b06      	ldr	r3, [pc, #24]	@ (8007dd4 <USB_DevInit+0x2b8>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3718      	adds	r7, #24
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dcc:	b004      	add	sp, #16
 8007dce:	4770      	bx	lr
 8007dd0:	803c3800 	.word	0x803c3800
 8007dd4:	40000004 	.word	0x40000004

08007dd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3301      	adds	r3, #1
 8007dea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007df2:	d901      	bls.n	8007df8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e01b      	b.n	8007e30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	daf2      	bge.n	8007de6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	019b      	lsls	r3, r3, #6
 8007e08:	f043 0220 	orr.w	r2, r3, #32
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	3301      	adds	r3, #1
 8007e14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e1c:	d901      	bls.n	8007e22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e006      	b.n	8007e30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	f003 0320 	and.w	r3, r3, #32
 8007e2a:	2b20      	cmp	r3, #32
 8007e2c:	d0f0      	beq.n	8007e10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e54:	d901      	bls.n	8007e5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e018      	b.n	8007e8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	daf2      	bge.n	8007e48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2210      	movs	r2, #16
 8007e6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e78:	d901      	bls.n	8007e7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e006      	b.n	8007e8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	f003 0310 	and.w	r3, r3, #16
 8007e86:	2b10      	cmp	r3, #16
 8007e88:	d0f0      	beq.n	8007e6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	78fb      	ldrb	r3, [r7, #3]
 8007eb2:	68f9      	ldr	r1, [r7, #12]
 8007eb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3714      	adds	r7, #20
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b087      	sub	sp, #28
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f003 0306 	and.w	r3, r3, #6
 8007ee2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d102      	bne.n	8007ef0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007eea:	2300      	movs	r3, #0
 8007eec:	75fb      	strb	r3, [r7, #23]
 8007eee:	e00a      	b.n	8007f06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d002      	beq.n	8007efc <USB_GetDevSpeed+0x32>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2b06      	cmp	r3, #6
 8007efa:	d102      	bne.n	8007f02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007efc:	2302      	movs	r3, #2
 8007efe:	75fb      	strb	r3, [r7, #23]
 8007f00:	e001      	b.n	8007f06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007f02:	230f      	movs	r3, #15
 8007f04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	371c      	adds	r7, #28
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	785b      	ldrb	r3, [r3, #1]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d139      	bne.n	8007fa4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f36:	69da      	ldr	r2, [r3, #28]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	f003 030f 	and.w	r3, r3, #15
 8007f40:	2101      	movs	r1, #1
 8007f42:	fa01 f303 	lsl.w	r3, r1, r3
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	68f9      	ldr	r1, [r7, #12]
 8007f4a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d153      	bne.n	8008010 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	791b      	ldrb	r3, [r3, #4]
 8007f82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	059b      	lsls	r3, r3, #22
 8007f8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	0159      	lsls	r1, r3, #5
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	440b      	add	r3, r1
 8007f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	4b20      	ldr	r3, [pc, #128]	@ (8008020 <USB_ActivateEndpoint+0x10c>)
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	600b      	str	r3, [r1, #0]
 8007fa2:	e035      	b.n	8008010 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007faa:	69da      	ldr	r2, [r3, #28]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	f003 030f 	and.w	r3, r3, #15
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8007fba:	041b      	lsls	r3, r3, #16
 8007fbc:	68f9      	ldr	r1, [r7, #12]
 8007fbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	015a      	lsls	r2, r3, #5
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4413      	add	r3, r2
 8007fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d119      	bne.n	8008010 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	015a      	lsls	r2, r3, #5
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	791b      	ldrb	r3, [r3, #4]
 8007ff6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	0159      	lsls	r1, r3, #5
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	440b      	add	r3, r1
 8008004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008008:	4619      	mov	r1, r3
 800800a:	4b05      	ldr	r3, [pc, #20]	@ (8008020 <USB_ActivateEndpoint+0x10c>)
 800800c:	4313      	orrs	r3, r2
 800800e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	10008000 	.word	0x10008000

08008024 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	785b      	ldrb	r3, [r3, #1]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d161      	bne.n	8008104 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	4413      	add	r3, r2
 8008048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008052:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008056:	d11f      	bne.n	8008098 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	015a      	lsls	r2, r3, #5
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	4413      	add	r3, r2
 8008060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	0151      	lsls	r1, r2, #5
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	440a      	add	r2, r1
 800806e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008072:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008076:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4413      	add	r3, r2
 8008080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	0151      	lsls	r1, r2, #5
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	440a      	add	r2, r1
 800808e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008092:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008096:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800809e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	f003 030f 	and.w	r3, r3, #15
 80080a8:	2101      	movs	r1, #1
 80080aa:	fa01 f303 	lsl.w	r3, r1, r3
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	43db      	mvns	r3, r3
 80080b2:	68f9      	ldr	r1, [r7, #12]
 80080b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080b8:	4013      	ands	r3, r2
 80080ba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080c2:	69da      	ldr	r2, [r3, #28]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	f003 030f 	and.w	r3, r3, #15
 80080cc:	2101      	movs	r1, #1
 80080ce:	fa01 f303 	lsl.w	r3, r1, r3
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	43db      	mvns	r3, r3
 80080d6:	68f9      	ldr	r1, [r7, #12]
 80080d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080dc:	4013      	ands	r3, r2
 80080de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	0159      	lsls	r1, r3, #5
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	440b      	add	r3, r1
 80080f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080fa:	4619      	mov	r1, r3
 80080fc:	4b35      	ldr	r3, [pc, #212]	@ (80081d4 <USB_DeactivateEndpoint+0x1b0>)
 80080fe:	4013      	ands	r3, r2
 8008100:	600b      	str	r3, [r1, #0]
 8008102:	e060      	b.n	80081c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008116:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800811a:	d11f      	bne.n	800815c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	4413      	add	r3, r2
 8008124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	0151      	lsls	r1, r2, #5
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	440a      	add	r2, r1
 8008132:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008136:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800813a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	015a      	lsls	r2, r3, #5
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	4413      	add	r3, r2
 8008144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	0151      	lsls	r1, r2, #5
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	440a      	add	r2, r1
 8008152:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008156:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800815a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008162:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	f003 030f 	and.w	r3, r3, #15
 800816c:	2101      	movs	r1, #1
 800816e:	fa01 f303 	lsl.w	r3, r1, r3
 8008172:	041b      	lsls	r3, r3, #16
 8008174:	43db      	mvns	r3, r3
 8008176:	68f9      	ldr	r1, [r7, #12]
 8008178:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800817c:	4013      	ands	r3, r2
 800817e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008186:	69da      	ldr	r2, [r3, #28]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	f003 030f 	and.w	r3, r3, #15
 8008190:	2101      	movs	r1, #1
 8008192:	fa01 f303 	lsl.w	r3, r1, r3
 8008196:	041b      	lsls	r3, r3, #16
 8008198:	43db      	mvns	r3, r3
 800819a:	68f9      	ldr	r1, [r7, #12]
 800819c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081a0:	4013      	ands	r3, r2
 80081a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	0159      	lsls	r1, r3, #5
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	440b      	add	r3, r1
 80081ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081be:	4619      	mov	r1, r3
 80081c0:	4b05      	ldr	r3, [pc, #20]	@ (80081d8 <USB_DeactivateEndpoint+0x1b4>)
 80081c2:	4013      	ands	r3, r2
 80081c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	ec337800 	.word	0xec337800
 80081d8:	eff37800 	.word	0xeff37800

080081dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08a      	sub	sp, #40	@ 0x28
 80081e0:	af02      	add	r7, sp, #8
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	4613      	mov	r3, r2
 80081e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	785b      	ldrb	r3, [r3, #1]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	f040 8181 	bne.w	8008500 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d132      	bne.n	800826c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008212:	691a      	ldr	r2, [r3, #16]
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	0159      	lsls	r1, r3, #5
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	440b      	add	r3, r1
 800821c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008220:	4619      	mov	r1, r3
 8008222:	4ba5      	ldr	r3, [pc, #660]	@ (80084b8 <USB_EPStartXfer+0x2dc>)
 8008224:	4013      	ands	r3, r2
 8008226:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	015a      	lsls	r2, r3, #5
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	4413      	add	r3, r2
 8008230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	0151      	lsls	r1, r2, #5
 800823a:	69fa      	ldr	r2, [r7, #28]
 800823c:	440a      	add	r2, r1
 800823e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008242:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008246:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	015a      	lsls	r2, r3, #5
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	4413      	add	r3, r2
 8008250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008254:	691a      	ldr	r2, [r3, #16]
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	0159      	lsls	r1, r3, #5
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	440b      	add	r3, r1
 800825e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008262:	4619      	mov	r1, r3
 8008264:	4b95      	ldr	r3, [pc, #596]	@ (80084bc <USB_EPStartXfer+0x2e0>)
 8008266:	4013      	ands	r3, r2
 8008268:	610b      	str	r3, [r1, #16]
 800826a:	e092      	b.n	8008392 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008278:	691a      	ldr	r2, [r3, #16]
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	0159      	lsls	r1, r3, #5
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	440b      	add	r3, r1
 8008282:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008286:	4619      	mov	r1, r3
 8008288:	4b8c      	ldr	r3, [pc, #560]	@ (80084bc <USB_EPStartXfer+0x2e0>)
 800828a:	4013      	ands	r3, r2
 800828c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800829a:	691a      	ldr	r2, [r3, #16]
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	0159      	lsls	r1, r3, #5
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	440b      	add	r3, r1
 80082a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082a8:	4619      	mov	r1, r3
 80082aa:	4b83      	ldr	r3, [pc, #524]	@ (80084b8 <USB_EPStartXfer+0x2dc>)
 80082ac:	4013      	ands	r3, r2
 80082ae:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d11a      	bne.n	80082ec <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	691a      	ldr	r2, [r3, #16]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d903      	bls.n	80082ca <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	689a      	ldr	r2, [r3, #8]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	015a      	lsls	r2, r3, #5
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	4413      	add	r3, r2
 80082d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	0151      	lsls	r1, r2, #5
 80082dc:	69fa      	ldr	r2, [r7, #28]
 80082de:	440a      	add	r2, r1
 80082e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80082e8:	6113      	str	r3, [r2, #16]
 80082ea:	e01b      	b.n	8008324 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	015a      	lsls	r2, r3, #5
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	4413      	add	r3, r2
 80082f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082f8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	6919      	ldr	r1, [r3, #16]
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	440b      	add	r3, r1
 8008304:	1e59      	subs	r1, r3, #1
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	fbb1 f3f3 	udiv	r3, r1, r3
 800830e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008310:	4b6b      	ldr	r3, [pc, #428]	@ (80084c0 <USB_EPStartXfer+0x2e4>)
 8008312:	400b      	ands	r3, r1
 8008314:	69b9      	ldr	r1, [r7, #24]
 8008316:	0148      	lsls	r0, r1, #5
 8008318:	69f9      	ldr	r1, [r7, #28]
 800831a:	4401      	add	r1, r0
 800831c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008320:	4313      	orrs	r3, r2
 8008322:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008330:	691a      	ldr	r2, [r3, #16]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800833a:	69b9      	ldr	r1, [r7, #24]
 800833c:	0148      	lsls	r0, r1, #5
 800833e:	69f9      	ldr	r1, [r7, #28]
 8008340:	4401      	add	r1, r0
 8008342:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008346:	4313      	orrs	r3, r2
 8008348:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	791b      	ldrb	r3, [r3, #4]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d11f      	bne.n	8008392 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	015a      	lsls	r2, r3, #5
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	4413      	add	r3, r2
 800835a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	69ba      	ldr	r2, [r7, #24]
 8008362:	0151      	lsls	r1, r2, #5
 8008364:	69fa      	ldr	r2, [r7, #28]
 8008366:	440a      	add	r2, r1
 8008368:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800836c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008370:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	4413      	add	r3, r2
 800837a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	69ba      	ldr	r2, [r7, #24]
 8008382:	0151      	lsls	r1, r2, #5
 8008384:	69fa      	ldr	r2, [r7, #28]
 8008386:	440a      	add	r2, r1
 8008388:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800838c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008390:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008392:	79fb      	ldrb	r3, [r7, #7]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d14b      	bne.n	8008430 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	69db      	ldr	r3, [r3, #28]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d009      	beq.n	80083b4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ac:	461a      	mov	r2, r3
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	791b      	ldrb	r3, [r3, #4]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d128      	bne.n	800840e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d110      	bne.n	80083ee <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69ba      	ldr	r2, [r7, #24]
 80083dc:	0151      	lsls	r1, r2, #5
 80083de:	69fa      	ldr	r2, [r7, #28]
 80083e0:	440a      	add	r2, r1
 80083e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80083ea:	6013      	str	r3, [r2, #0]
 80083ec:	e00f      	b.n	800840e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	69ba      	ldr	r2, [r7, #24]
 80083fe:	0151      	lsls	r1, r2, #5
 8008400:	69fa      	ldr	r2, [r7, #28]
 8008402:	440a      	add	r2, r1
 8008404:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800840c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	015a      	lsls	r2, r3, #5
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	4413      	add	r3, r2
 8008416:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	69ba      	ldr	r2, [r7, #24]
 800841e:	0151      	lsls	r1, r2, #5
 8008420:	69fa      	ldr	r2, [r7, #28]
 8008422:	440a      	add	r2, r1
 8008424:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008428:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800842c:	6013      	str	r3, [r2, #0]
 800842e:	e16a      	b.n	8008706 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	4413      	add	r3, r2
 8008438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	69ba      	ldr	r2, [r7, #24]
 8008440:	0151      	lsls	r1, r2, #5
 8008442:	69fa      	ldr	r2, [r7, #28]
 8008444:	440a      	add	r2, r1
 8008446:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800844a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800844e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	791b      	ldrb	r3, [r3, #4]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d015      	beq.n	8008484 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 8152 	beq.w	8008706 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008468:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	f003 030f 	and.w	r3, r3, #15
 8008472:	2101      	movs	r1, #1
 8008474:	fa01 f303 	lsl.w	r3, r1, r3
 8008478:	69f9      	ldr	r1, [r7, #28]
 800847a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800847e:	4313      	orrs	r3, r2
 8008480:	634b      	str	r3, [r1, #52]	@ 0x34
 8008482:	e140      	b.n	8008706 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008490:	2b00      	cmp	r3, #0
 8008492:	d117      	bne.n	80084c4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	4413      	add	r3, r2
 800849c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	0151      	lsls	r1, r2, #5
 80084a6:	69fa      	ldr	r2, [r7, #28]
 80084a8:	440a      	add	r2, r1
 80084aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084ae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80084b2:	6013      	str	r3, [r2, #0]
 80084b4:	e016      	b.n	80084e4 <USB_EPStartXfer+0x308>
 80084b6:	bf00      	nop
 80084b8:	e007ffff 	.word	0xe007ffff
 80084bc:	fff80000 	.word	0xfff80000
 80084c0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	015a      	lsls	r2, r3, #5
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	4413      	add	r3, r2
 80084cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	69ba      	ldr	r2, [r7, #24]
 80084d4:	0151      	lsls	r1, r2, #5
 80084d6:	69fa      	ldr	r2, [r7, #28]
 80084d8:	440a      	add	r2, r1
 80084da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084e2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	68d9      	ldr	r1, [r3, #12]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	781a      	ldrb	r2, [r3, #0]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	b298      	uxth	r0, r3
 80084f2:	79fb      	ldrb	r3, [r7, #7]
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	4603      	mov	r3, r0
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f000 f9b9 	bl	8008870 <USB_WritePacket>
 80084fe:	e102      	b.n	8008706 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800850c:	691a      	ldr	r2, [r3, #16]
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	0159      	lsls	r1, r3, #5
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	440b      	add	r3, r1
 8008516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800851a:	4619      	mov	r1, r3
 800851c:	4b7c      	ldr	r3, [pc, #496]	@ (8008710 <USB_EPStartXfer+0x534>)
 800851e:	4013      	ands	r3, r2
 8008520:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	4413      	add	r3, r2
 800852a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800852e:	691a      	ldr	r2, [r3, #16]
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	0159      	lsls	r1, r3, #5
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	440b      	add	r3, r1
 8008538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800853c:	4619      	mov	r1, r3
 800853e:	4b75      	ldr	r3, [pc, #468]	@ (8008714 <USB_EPStartXfer+0x538>)
 8008540:	4013      	ands	r3, r2
 8008542:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d12f      	bne.n	80085aa <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	689a      	ldr	r2, [r3, #8]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	689a      	ldr	r2, [r3, #8]
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	4413      	add	r3, r2
 800856a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800856e:	691a      	ldr	r2, [r3, #16]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	6a1b      	ldr	r3, [r3, #32]
 8008574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008578:	69b9      	ldr	r1, [r7, #24]
 800857a:	0148      	lsls	r0, r1, #5
 800857c:	69f9      	ldr	r1, [r7, #28]
 800857e:	4401      	add	r1, r0
 8008580:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008584:	4313      	orrs	r3, r2
 8008586:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	69ba      	ldr	r2, [r7, #24]
 8008598:	0151      	lsls	r1, r2, #5
 800859a:	69fa      	ldr	r2, [r7, #28]
 800859c:	440a      	add	r2, r1
 800859e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085a6:	6113      	str	r3, [r2, #16]
 80085a8:	e05f      	b.n	800866a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d123      	bne.n	80085fa <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	015a      	lsls	r2, r3, #5
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085be:	691a      	ldr	r2, [r3, #16]
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085c8:	69b9      	ldr	r1, [r7, #24]
 80085ca:	0148      	lsls	r0, r1, #5
 80085cc:	69f9      	ldr	r1, [r7, #28]
 80085ce:	4401      	add	r1, r0
 80085d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80085d4:	4313      	orrs	r3, r2
 80085d6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	0151      	lsls	r1, r2, #5
 80085ea:	69fa      	ldr	r2, [r7, #28]
 80085ec:	440a      	add	r2, r1
 80085ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085f6:	6113      	str	r3, [r2, #16]
 80085f8:	e037      	b.n	800866a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	691a      	ldr	r2, [r3, #16]
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	4413      	add	r3, r2
 8008604:	1e5a      	subs	r2, r3, #1
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	fbb2 f3f3 	udiv	r3, r2, r3
 800860e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	8afa      	ldrh	r2, [r7, #22]
 8008616:	fb03 f202 	mul.w	r2, r3, r2
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	4413      	add	r3, r2
 8008626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800862a:	691a      	ldr	r2, [r3, #16]
 800862c:	8afb      	ldrh	r3, [r7, #22]
 800862e:	04d9      	lsls	r1, r3, #19
 8008630:	4b39      	ldr	r3, [pc, #228]	@ (8008718 <USB_EPStartXfer+0x53c>)
 8008632:	400b      	ands	r3, r1
 8008634:	69b9      	ldr	r1, [r7, #24]
 8008636:	0148      	lsls	r0, r1, #5
 8008638:	69f9      	ldr	r1, [r7, #28]
 800863a:	4401      	add	r1, r0
 800863c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008640:	4313      	orrs	r3, r2
 8008642:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	4413      	add	r3, r2
 800864c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008650:	691a      	ldr	r2, [r3, #16]
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	6a1b      	ldr	r3, [r3, #32]
 8008656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800865a:	69b9      	ldr	r1, [r7, #24]
 800865c:	0148      	lsls	r0, r1, #5
 800865e:	69f9      	ldr	r1, [r7, #28]
 8008660:	4401      	add	r1, r0
 8008662:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008666:	4313      	orrs	r3, r2
 8008668:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800866a:	79fb      	ldrb	r3, [r7, #7]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d10d      	bne.n	800868c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d009      	beq.n	800868c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	68d9      	ldr	r1, [r3, #12]
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	015a      	lsls	r2, r3, #5
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	4413      	add	r3, r2
 8008684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008688:	460a      	mov	r2, r1
 800868a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	791b      	ldrb	r3, [r3, #4]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d128      	bne.n	80086e6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d110      	bne.n	80086c6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	015a      	lsls	r2, r3, #5
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	4413      	add	r3, r2
 80086ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	0151      	lsls	r1, r2, #5
 80086b6:	69fa      	ldr	r2, [r7, #28]
 80086b8:	440a      	add	r2, r1
 80086ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	e00f      	b.n	80086e6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	015a      	lsls	r2, r3, #5
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	69ba      	ldr	r2, [r7, #24]
 80086d6:	0151      	lsls	r1, r2, #5
 80086d8:	69fa      	ldr	r2, [r7, #28]
 80086da:	440a      	add	r2, r1
 80086dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086e4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	015a      	lsls	r2, r3, #5
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	4413      	add	r3, r2
 80086ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	69ba      	ldr	r2, [r7, #24]
 80086f6:	0151      	lsls	r1, r2, #5
 80086f8:	69fa      	ldr	r2, [r7, #28]
 80086fa:	440a      	add	r2, r1
 80086fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008700:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008704:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3720      	adds	r7, #32
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	fff80000 	.word	0xfff80000
 8008714:	e007ffff 	.word	0xe007ffff
 8008718:	1ff80000 	.word	0x1ff80000

0800871c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800871c:	b480      	push	{r7}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008726:	2300      	movs	r3, #0
 8008728:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	785b      	ldrb	r3, [r3, #1]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d14a      	bne.n	80087d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	015a      	lsls	r2, r3, #5
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	4413      	add	r3, r2
 8008744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800874e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008752:	f040 8086 	bne.w	8008862 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	015a      	lsls	r2, r3, #5
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	4413      	add	r3, r2
 8008760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	7812      	ldrb	r2, [r2, #0]
 800876a:	0151      	lsls	r1, r2, #5
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	440a      	add	r2, r1
 8008770:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008774:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008778:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	7812      	ldrb	r2, [r2, #0]
 800878e:	0151      	lsls	r1, r2, #5
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	440a      	add	r2, r1
 8008794:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008798:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800879c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3301      	adds	r3, #1
 80087a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d902      	bls.n	80087b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	75fb      	strb	r3, [r7, #23]
          break;
 80087b2:	e056      	b.n	8008862 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	015a      	lsls	r2, r3, #5
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	4413      	add	r3, r2
 80087be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087cc:	d0e7      	beq.n	800879e <USB_EPStopXfer+0x82>
 80087ce:	e048      	b.n	8008862 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	015a      	lsls	r2, r3, #5
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	4413      	add	r3, r2
 80087da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087e8:	d13b      	bne.n	8008862 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	7812      	ldrb	r2, [r2, #0]
 80087fe:	0151      	lsls	r1, r2, #5
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	440a      	add	r2, r1
 8008804:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008808:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800880c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	4413      	add	r3, r2
 8008818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	7812      	ldrb	r2, [r2, #0]
 8008822:	0151      	lsls	r1, r2, #5
 8008824:	693a      	ldr	r2, [r7, #16]
 8008826:	440a      	add	r2, r1
 8008828:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800882c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008830:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3301      	adds	r3, #1
 8008836:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800883e:	4293      	cmp	r3, r2
 8008840:	d902      	bls.n	8008848 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	75fb      	strb	r3, [r7, #23]
          break;
 8008846:	e00c      	b.n	8008862 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	015a      	lsls	r2, r3, #5
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	4413      	add	r3, r2
 8008852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800885c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008860:	d0e7      	beq.n	8008832 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008862:	7dfb      	ldrb	r3, [r7, #23]
}
 8008864:	4618      	mov	r0, r3
 8008866:	371c      	adds	r7, #28
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008870:	b480      	push	{r7}
 8008872:	b089      	sub	sp, #36	@ 0x24
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	4611      	mov	r1, r2
 800887c:	461a      	mov	r2, r3
 800887e:	460b      	mov	r3, r1
 8008880:	71fb      	strb	r3, [r7, #7]
 8008882:	4613      	mov	r3, r2
 8008884:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800888e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008892:	2b00      	cmp	r3, #0
 8008894:	d123      	bne.n	80088de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008896:	88bb      	ldrh	r3, [r7, #4]
 8008898:	3303      	adds	r3, #3
 800889a:	089b      	lsrs	r3, r3, #2
 800889c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800889e:	2300      	movs	r3, #0
 80088a0:	61bb      	str	r3, [r7, #24]
 80088a2:	e018      	b.n	80088d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80088a4:	79fb      	ldrb	r3, [r7, #7]
 80088a6:	031a      	lsls	r2, r3, #12
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088b0:	461a      	mov	r2, r3
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	3301      	adds	r3, #1
 80088bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	3301      	adds	r3, #1
 80088c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	3301      	adds	r3, #1
 80088c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	3301      	adds	r3, #1
 80088ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	3301      	adds	r3, #1
 80088d4:	61bb      	str	r3, [r7, #24]
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d3e2      	bcc.n	80088a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3724      	adds	r7, #36	@ 0x24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b08b      	sub	sp, #44	@ 0x2c
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	4613      	mov	r3, r2
 80088f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008902:	88fb      	ldrh	r3, [r7, #6]
 8008904:	089b      	lsrs	r3, r3, #2
 8008906:	b29b      	uxth	r3, r3
 8008908:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800890a:	88fb      	ldrh	r3, [r7, #6]
 800890c:	f003 0303 	and.w	r3, r3, #3
 8008910:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008912:	2300      	movs	r3, #0
 8008914:	623b      	str	r3, [r7, #32]
 8008916:	e014      	b.n	8008942 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008922:	601a      	str	r2, [r3, #0]
    pDest++;
 8008924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008926:	3301      	adds	r3, #1
 8008928:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800892a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892c:	3301      	adds	r3, #1
 800892e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008932:	3301      	adds	r3, #1
 8008934:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008938:	3301      	adds	r3, #1
 800893a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	3301      	adds	r3, #1
 8008940:	623b      	str	r3, [r7, #32]
 8008942:	6a3a      	ldr	r2, [r7, #32]
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	429a      	cmp	r2, r3
 8008948:	d3e6      	bcc.n	8008918 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800894a:	8bfb      	ldrh	r3, [r7, #30]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d01e      	beq.n	800898e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008950:	2300      	movs	r3, #0
 8008952:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800895a:	461a      	mov	r2, r3
 800895c:	f107 0310 	add.w	r3, r7, #16
 8008960:	6812      	ldr	r2, [r2, #0]
 8008962:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	b2db      	uxtb	r3, r3
 800896a:	00db      	lsls	r3, r3, #3
 800896c:	fa22 f303 	lsr.w	r3, r2, r3
 8008970:	b2da      	uxtb	r2, r3
 8008972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008974:	701a      	strb	r2, [r3, #0]
      i++;
 8008976:	6a3b      	ldr	r3, [r7, #32]
 8008978:	3301      	adds	r3, #1
 800897a:	623b      	str	r3, [r7, #32]
      pDest++;
 800897c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897e:	3301      	adds	r3, #1
 8008980:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008982:	8bfb      	ldrh	r3, [r7, #30]
 8008984:	3b01      	subs	r3, #1
 8008986:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008988:	8bfb      	ldrh	r3, [r7, #30]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1ea      	bne.n	8008964 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800898e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008990:	4618      	mov	r0, r3
 8008992:	372c      	adds	r7, #44	@ 0x2c
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	785b      	ldrb	r3, [r3, #1]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d12c      	bne.n	8008a12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	db12      	blt.n	80089f0 <USB_EPSetStall+0x54>
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00f      	beq.n	80089f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	015a      	lsls	r2, r3, #5
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	0151      	lsls	r1, r2, #5
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	440a      	add	r2, r1
 80089e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80089ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	015a      	lsls	r2, r3, #5
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	4413      	add	r3, r2
 80089f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	0151      	lsls	r1, r2, #5
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	440a      	add	r2, r1
 8008a06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a0e:	6013      	str	r3, [r2, #0]
 8008a10:	e02b      	b.n	8008a6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	db12      	blt.n	8008a4a <USB_EPSetStall+0xae>
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00f      	beq.n	8008a4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	015a      	lsls	r2, r3, #5
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	4413      	add	r3, r2
 8008a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	0151      	lsls	r1, r2, #5
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	440a      	add	r2, r1
 8008a40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	015a      	lsls	r2, r3, #5
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	4413      	add	r3, r2
 8008a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68ba      	ldr	r2, [r7, #8]
 8008a5a:	0151      	lsls	r1, r2, #5
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	440a      	add	r2, r1
 8008a60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	785b      	ldrb	r3, [r3, #1]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d128      	bne.n	8008ae6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	015a      	lsls	r2, r3, #5
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	0151      	lsls	r1, r2, #5
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	440a      	add	r2, r1
 8008aaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008aae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008ab2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	791b      	ldrb	r3, [r3, #4]
 8008ab8:	2b03      	cmp	r3, #3
 8008aba:	d003      	beq.n	8008ac4 <USB_EPClearStall+0x4c>
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	791b      	ldrb	r3, [r3, #4]
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d138      	bne.n	8008b36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	015a      	lsls	r2, r3, #5
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	4413      	add	r3, r2
 8008acc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	68ba      	ldr	r2, [r7, #8]
 8008ad4:	0151      	lsls	r1, r2, #5
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	440a      	add	r2, r1
 8008ada:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	e027      	b.n	8008b36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	015a      	lsls	r2, r3, #5
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	0151      	lsls	r1, r2, #5
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	440a      	add	r2, r1
 8008afc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b00:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	791b      	ldrb	r3, [r3, #4]
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d003      	beq.n	8008b16 <USB_EPClearStall+0x9e>
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	791b      	ldrb	r3, [r3, #4]
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d10f      	bne.n	8008b36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	015a      	lsls	r2, r3, #5
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	0151      	lsls	r1, r2, #5
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	440a      	add	r2, r1
 8008b2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b62:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008b66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	78fb      	ldrb	r3, [r7, #3]
 8008b72:	011b      	lsls	r3, r3, #4
 8008b74:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008b78:	68f9      	ldr	r1, [r7, #12]
 8008b7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3714      	adds	r7, #20
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008baa:	f023 0303 	bic.w	r3, r3, #3
 8008bae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bbe:	f023 0302 	bic.w	r3, r3, #2
 8008bc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3714      	adds	r7, #20
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	b085      	sub	sp, #20
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008bec:	f023 0303 	bic.w	r3, r3, #3
 8008bf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c00:	f043 0302 	orr.w	r3, r3, #2
 8008c04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	4013      	ands	r3, r2
 8008c2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3714      	adds	r7, #20
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b085      	sub	sp, #20
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c56:	69db      	ldr	r3, [r3, #28]
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	0c1b      	lsrs	r3, r3, #16
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b085      	sub	sp, #20
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c8a:	69db      	ldr	r3, [r3, #28]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	4013      	ands	r3, r2
 8008c90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	b29b      	uxth	r3, r3
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b085      	sub	sp, #20
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	460b      	mov	r3, r1
 8008cac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008cb2:	78fb      	ldrb	r3, [r7, #3]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	4013      	ands	r3, r2
 8008cce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008cd0:	68bb      	ldr	r3, [r7, #8]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b087      	sub	sp, #28
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008d02:	78fb      	ldrb	r3, [r7, #3]
 8008d04:	f003 030f 	and.w	r3, r3, #15
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d0e:	01db      	lsls	r3, r3, #7
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008d18:	78fb      	ldrb	r3, [r7, #3]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	4013      	ands	r3, r2
 8008d2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d2c:	68bb      	ldr	r3, [r7, #8]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	371c      	adds	r7, #28
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b083      	sub	sp, #12
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	f003 0301 	and.w	r3, r3, #1
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	370c      	adds	r7, #12
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
	...

08008d58 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d72:	4619      	mov	r1, r3
 8008d74:	4b09      	ldr	r3, [pc, #36]	@ (8008d9c <USB_ActivateSetup+0x44>)
 8008d76:	4013      	ands	r3, r2
 8008d78:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3714      	adds	r7, #20
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	fffff800 	.word	0xfffff800

08008da0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b087      	sub	sp, #28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	460b      	mov	r3, r1
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	333c      	adds	r3, #60	@ 0x3c
 8008db6:	3304      	adds	r3, #4
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	4a26      	ldr	r2, [pc, #152]	@ (8008e58 <USB_EP0_OutStart+0xb8>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d90a      	bls.n	8008dda <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008dd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008dd4:	d101      	bne.n	8008dda <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	e037      	b.n	8008e4a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008de0:	461a      	mov	r2, r3
 8008de2:	2300      	movs	r3, #0
 8008de4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008df4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008df8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e08:	f043 0318 	orr.w	r3, r3, #24
 8008e0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e1c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008e20:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008e22:	7afb      	ldrb	r3, [r7, #11]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d10f      	bne.n	8008e48 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e2e:	461a      	mov	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e42:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008e46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	371c      	adds	r7, #28
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	4f54300a 	.word	0x4f54300a

08008e5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e64:	2300      	movs	r3, #0
 8008e66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e74:	d901      	bls.n	8008e7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e01b      	b.n	8008eb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	daf2      	bge.n	8008e68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e82:	2300      	movs	r3, #0
 8008e84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	f043 0201 	orr.w	r2, r3, #1
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3301      	adds	r3, #1
 8008e96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e9e:	d901      	bls.n	8008ea4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	e006      	b.n	8008eb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	f003 0301 	and.w	r3, r3, #1
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d0f0      	beq.n	8008e92 <USB_CoreReset+0x36>

  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
	...

08008ec0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008ec0:	b5b0      	push	{r4, r5, r7, lr}
 8008ec2:	b08c      	sub	sp, #48	@ 0x30
 8008ec4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8008ec6:	4b8f      	ldr	r3, [pc, #572]	@ (8009104 <MX_LWIP_Init+0x244>)
 8008ec8:	22c0      	movs	r2, #192	@ 0xc0
 8008eca:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008ecc:	4b8d      	ldr	r3, [pc, #564]	@ (8009104 <MX_LWIP_Init+0x244>)
 8008ece:	22a8      	movs	r2, #168	@ 0xa8
 8008ed0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8008ed2:	4b8c      	ldr	r3, [pc, #560]	@ (8009104 <MX_LWIP_Init+0x244>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8008ed8:	4b8a      	ldr	r3, [pc, #552]	@ (8009104 <MX_LWIP_Init+0x244>)
 8008eda:	227b      	movs	r2, #123	@ 0x7b
 8008edc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8008ede:	4b8a      	ldr	r3, [pc, #552]	@ (8009108 <MX_LWIP_Init+0x248>)
 8008ee0:	22ff      	movs	r2, #255	@ 0xff
 8008ee2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008ee4:	4b88      	ldr	r3, [pc, #544]	@ (8009108 <MX_LWIP_Init+0x248>)
 8008ee6:	22ff      	movs	r2, #255	@ 0xff
 8008ee8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8008eea:	4b87      	ldr	r3, [pc, #540]	@ (8009108 <MX_LWIP_Init+0x248>)
 8008eec:	22ff      	movs	r2, #255	@ 0xff
 8008eee:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008ef0:	4b85      	ldr	r3, [pc, #532]	@ (8009108 <MX_LWIP_Init+0x248>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8008ef6:	4b85      	ldr	r3, [pc, #532]	@ (800910c <MX_LWIP_Init+0x24c>)
 8008ef8:	22c0      	movs	r2, #192	@ 0xc0
 8008efa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8008efc:	4b83      	ldr	r3, [pc, #524]	@ (800910c <MX_LWIP_Init+0x24c>)
 8008efe:	22a8      	movs	r2, #168	@ 0xa8
 8008f00:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8008f02:	4b82      	ldr	r3, [pc, #520]	@ (800910c <MX_LWIP_Init+0x24c>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8008f08:	4b80      	ldr	r3, [pc, #512]	@ (800910c <MX_LWIP_Init+0x24c>)
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8008f0e:	2100      	movs	r1, #0
 8008f10:	2000      	movs	r0, #0
 8008f12:	f008 fa49 	bl	80113a8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008f16:	4b7b      	ldr	r3, [pc, #492]	@ (8009104 <MX_LWIP_Init+0x244>)
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	061a      	lsls	r2, r3, #24
 8008f1c:	4b79      	ldr	r3, [pc, #484]	@ (8009104 <MX_LWIP_Init+0x244>)
 8008f1e:	785b      	ldrb	r3, [r3, #1]
 8008f20:	041b      	lsls	r3, r3, #16
 8008f22:	431a      	orrs	r2, r3
 8008f24:	4b77      	ldr	r3, [pc, #476]	@ (8009104 <MX_LWIP_Init+0x244>)
 8008f26:	789b      	ldrb	r3, [r3, #2]
 8008f28:	021b      	lsls	r3, r3, #8
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	4a75      	ldr	r2, [pc, #468]	@ (8009104 <MX_LWIP_Init+0x244>)
 8008f2e:	78d2      	ldrb	r2, [r2, #3]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	061a      	lsls	r2, r3, #24
 8008f34:	4b73      	ldr	r3, [pc, #460]	@ (8009104 <MX_LWIP_Init+0x244>)
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	0619      	lsls	r1, r3, #24
 8008f3a:	4b72      	ldr	r3, [pc, #456]	@ (8009104 <MX_LWIP_Init+0x244>)
 8008f3c:	785b      	ldrb	r3, [r3, #1]
 8008f3e:	041b      	lsls	r3, r3, #16
 8008f40:	4319      	orrs	r1, r3
 8008f42:	4b70      	ldr	r3, [pc, #448]	@ (8009104 <MX_LWIP_Init+0x244>)
 8008f44:	789b      	ldrb	r3, [r3, #2]
 8008f46:	021b      	lsls	r3, r3, #8
 8008f48:	430b      	orrs	r3, r1
 8008f4a:	496e      	ldr	r1, [pc, #440]	@ (8009104 <MX_LWIP_Init+0x244>)
 8008f4c:	78c9      	ldrb	r1, [r1, #3]
 8008f4e:	430b      	orrs	r3, r1
 8008f50:	021b      	lsls	r3, r3, #8
 8008f52:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008f56:	431a      	orrs	r2, r3
 8008f58:	4b6a      	ldr	r3, [pc, #424]	@ (8009104 <MX_LWIP_Init+0x244>)
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	0619      	lsls	r1, r3, #24
 8008f5e:	4b69      	ldr	r3, [pc, #420]	@ (8009104 <MX_LWIP_Init+0x244>)
 8008f60:	785b      	ldrb	r3, [r3, #1]
 8008f62:	041b      	lsls	r3, r3, #16
 8008f64:	4319      	orrs	r1, r3
 8008f66:	4b67      	ldr	r3, [pc, #412]	@ (8009104 <MX_LWIP_Init+0x244>)
 8008f68:	789b      	ldrb	r3, [r3, #2]
 8008f6a:	021b      	lsls	r3, r3, #8
 8008f6c:	430b      	orrs	r3, r1
 8008f6e:	4965      	ldr	r1, [pc, #404]	@ (8009104 <MX_LWIP_Init+0x244>)
 8008f70:	78c9      	ldrb	r1, [r1, #3]
 8008f72:	430b      	orrs	r3, r1
 8008f74:	0a1b      	lsrs	r3, r3, #8
 8008f76:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	4b61      	ldr	r3, [pc, #388]	@ (8009104 <MX_LWIP_Init+0x244>)
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	0619      	lsls	r1, r3, #24
 8008f82:	4b60      	ldr	r3, [pc, #384]	@ (8009104 <MX_LWIP_Init+0x244>)
 8008f84:	785b      	ldrb	r3, [r3, #1]
 8008f86:	041b      	lsls	r3, r3, #16
 8008f88:	4319      	orrs	r1, r3
 8008f8a:	4b5e      	ldr	r3, [pc, #376]	@ (8009104 <MX_LWIP_Init+0x244>)
 8008f8c:	789b      	ldrb	r3, [r3, #2]
 8008f8e:	021b      	lsls	r3, r3, #8
 8008f90:	430b      	orrs	r3, r1
 8008f92:	495c      	ldr	r1, [pc, #368]	@ (8009104 <MX_LWIP_Init+0x244>)
 8008f94:	78c9      	ldrb	r1, [r1, #3]
 8008f96:	430b      	orrs	r3, r1
 8008f98:	0e1b      	lsrs	r3, r3, #24
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	4a5c      	ldr	r2, [pc, #368]	@ (8009110 <MX_LWIP_Init+0x250>)
 8008f9e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008fa0:	4b59      	ldr	r3, [pc, #356]	@ (8009108 <MX_LWIP_Init+0x248>)
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	061a      	lsls	r2, r3, #24
 8008fa6:	4b58      	ldr	r3, [pc, #352]	@ (8009108 <MX_LWIP_Init+0x248>)
 8008fa8:	785b      	ldrb	r3, [r3, #1]
 8008faa:	041b      	lsls	r3, r3, #16
 8008fac:	431a      	orrs	r2, r3
 8008fae:	4b56      	ldr	r3, [pc, #344]	@ (8009108 <MX_LWIP_Init+0x248>)
 8008fb0:	789b      	ldrb	r3, [r3, #2]
 8008fb2:	021b      	lsls	r3, r3, #8
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	4a54      	ldr	r2, [pc, #336]	@ (8009108 <MX_LWIP_Init+0x248>)
 8008fb8:	78d2      	ldrb	r2, [r2, #3]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	061a      	lsls	r2, r3, #24
 8008fbe:	4b52      	ldr	r3, [pc, #328]	@ (8009108 <MX_LWIP_Init+0x248>)
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	0619      	lsls	r1, r3, #24
 8008fc4:	4b50      	ldr	r3, [pc, #320]	@ (8009108 <MX_LWIP_Init+0x248>)
 8008fc6:	785b      	ldrb	r3, [r3, #1]
 8008fc8:	041b      	lsls	r3, r3, #16
 8008fca:	4319      	orrs	r1, r3
 8008fcc:	4b4e      	ldr	r3, [pc, #312]	@ (8009108 <MX_LWIP_Init+0x248>)
 8008fce:	789b      	ldrb	r3, [r3, #2]
 8008fd0:	021b      	lsls	r3, r3, #8
 8008fd2:	430b      	orrs	r3, r1
 8008fd4:	494c      	ldr	r1, [pc, #304]	@ (8009108 <MX_LWIP_Init+0x248>)
 8008fd6:	78c9      	ldrb	r1, [r1, #3]
 8008fd8:	430b      	orrs	r3, r1
 8008fda:	021b      	lsls	r3, r3, #8
 8008fdc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008fe0:	431a      	orrs	r2, r3
 8008fe2:	4b49      	ldr	r3, [pc, #292]	@ (8009108 <MX_LWIP_Init+0x248>)
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	0619      	lsls	r1, r3, #24
 8008fe8:	4b47      	ldr	r3, [pc, #284]	@ (8009108 <MX_LWIP_Init+0x248>)
 8008fea:	785b      	ldrb	r3, [r3, #1]
 8008fec:	041b      	lsls	r3, r3, #16
 8008fee:	4319      	orrs	r1, r3
 8008ff0:	4b45      	ldr	r3, [pc, #276]	@ (8009108 <MX_LWIP_Init+0x248>)
 8008ff2:	789b      	ldrb	r3, [r3, #2]
 8008ff4:	021b      	lsls	r3, r3, #8
 8008ff6:	430b      	orrs	r3, r1
 8008ff8:	4943      	ldr	r1, [pc, #268]	@ (8009108 <MX_LWIP_Init+0x248>)
 8008ffa:	78c9      	ldrb	r1, [r1, #3]
 8008ffc:	430b      	orrs	r3, r1
 8008ffe:	0a1b      	lsrs	r3, r3, #8
 8009000:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009004:	431a      	orrs	r2, r3
 8009006:	4b40      	ldr	r3, [pc, #256]	@ (8009108 <MX_LWIP_Init+0x248>)
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	0619      	lsls	r1, r3, #24
 800900c:	4b3e      	ldr	r3, [pc, #248]	@ (8009108 <MX_LWIP_Init+0x248>)
 800900e:	785b      	ldrb	r3, [r3, #1]
 8009010:	041b      	lsls	r3, r3, #16
 8009012:	4319      	orrs	r1, r3
 8009014:	4b3c      	ldr	r3, [pc, #240]	@ (8009108 <MX_LWIP_Init+0x248>)
 8009016:	789b      	ldrb	r3, [r3, #2]
 8009018:	021b      	lsls	r3, r3, #8
 800901a:	430b      	orrs	r3, r1
 800901c:	493a      	ldr	r1, [pc, #232]	@ (8009108 <MX_LWIP_Init+0x248>)
 800901e:	78c9      	ldrb	r1, [r1, #3]
 8009020:	430b      	orrs	r3, r1
 8009022:	0e1b      	lsrs	r3, r3, #24
 8009024:	4313      	orrs	r3, r2
 8009026:	4a3b      	ldr	r2, [pc, #236]	@ (8009114 <MX_LWIP_Init+0x254>)
 8009028:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800902a:	4b38      	ldr	r3, [pc, #224]	@ (800910c <MX_LWIP_Init+0x24c>)
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	061a      	lsls	r2, r3, #24
 8009030:	4b36      	ldr	r3, [pc, #216]	@ (800910c <MX_LWIP_Init+0x24c>)
 8009032:	785b      	ldrb	r3, [r3, #1]
 8009034:	041b      	lsls	r3, r3, #16
 8009036:	431a      	orrs	r2, r3
 8009038:	4b34      	ldr	r3, [pc, #208]	@ (800910c <MX_LWIP_Init+0x24c>)
 800903a:	789b      	ldrb	r3, [r3, #2]
 800903c:	021b      	lsls	r3, r3, #8
 800903e:	4313      	orrs	r3, r2
 8009040:	4a32      	ldr	r2, [pc, #200]	@ (800910c <MX_LWIP_Init+0x24c>)
 8009042:	78d2      	ldrb	r2, [r2, #3]
 8009044:	4313      	orrs	r3, r2
 8009046:	061a      	lsls	r2, r3, #24
 8009048:	4b30      	ldr	r3, [pc, #192]	@ (800910c <MX_LWIP_Init+0x24c>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	0619      	lsls	r1, r3, #24
 800904e:	4b2f      	ldr	r3, [pc, #188]	@ (800910c <MX_LWIP_Init+0x24c>)
 8009050:	785b      	ldrb	r3, [r3, #1]
 8009052:	041b      	lsls	r3, r3, #16
 8009054:	4319      	orrs	r1, r3
 8009056:	4b2d      	ldr	r3, [pc, #180]	@ (800910c <MX_LWIP_Init+0x24c>)
 8009058:	789b      	ldrb	r3, [r3, #2]
 800905a:	021b      	lsls	r3, r3, #8
 800905c:	430b      	orrs	r3, r1
 800905e:	492b      	ldr	r1, [pc, #172]	@ (800910c <MX_LWIP_Init+0x24c>)
 8009060:	78c9      	ldrb	r1, [r1, #3]
 8009062:	430b      	orrs	r3, r1
 8009064:	021b      	lsls	r3, r3, #8
 8009066:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800906a:	431a      	orrs	r2, r3
 800906c:	4b27      	ldr	r3, [pc, #156]	@ (800910c <MX_LWIP_Init+0x24c>)
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	0619      	lsls	r1, r3, #24
 8009072:	4b26      	ldr	r3, [pc, #152]	@ (800910c <MX_LWIP_Init+0x24c>)
 8009074:	785b      	ldrb	r3, [r3, #1]
 8009076:	041b      	lsls	r3, r3, #16
 8009078:	4319      	orrs	r1, r3
 800907a:	4b24      	ldr	r3, [pc, #144]	@ (800910c <MX_LWIP_Init+0x24c>)
 800907c:	789b      	ldrb	r3, [r3, #2]
 800907e:	021b      	lsls	r3, r3, #8
 8009080:	430b      	orrs	r3, r1
 8009082:	4922      	ldr	r1, [pc, #136]	@ (800910c <MX_LWIP_Init+0x24c>)
 8009084:	78c9      	ldrb	r1, [r1, #3]
 8009086:	430b      	orrs	r3, r1
 8009088:	0a1b      	lsrs	r3, r3, #8
 800908a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800908e:	431a      	orrs	r2, r3
 8009090:	4b1e      	ldr	r3, [pc, #120]	@ (800910c <MX_LWIP_Init+0x24c>)
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	0619      	lsls	r1, r3, #24
 8009096:	4b1d      	ldr	r3, [pc, #116]	@ (800910c <MX_LWIP_Init+0x24c>)
 8009098:	785b      	ldrb	r3, [r3, #1]
 800909a:	041b      	lsls	r3, r3, #16
 800909c:	4319      	orrs	r1, r3
 800909e:	4b1b      	ldr	r3, [pc, #108]	@ (800910c <MX_LWIP_Init+0x24c>)
 80090a0:	789b      	ldrb	r3, [r3, #2]
 80090a2:	021b      	lsls	r3, r3, #8
 80090a4:	430b      	orrs	r3, r1
 80090a6:	4919      	ldr	r1, [pc, #100]	@ (800910c <MX_LWIP_Init+0x24c>)
 80090a8:	78c9      	ldrb	r1, [r1, #3]
 80090aa:	430b      	orrs	r3, r1
 80090ac:	0e1b      	lsrs	r3, r3, #24
 80090ae:	4313      	orrs	r3, r2
 80090b0:	4a19      	ldr	r2, [pc, #100]	@ (8009118 <MX_LWIP_Init+0x258>)
 80090b2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80090b4:	4b19      	ldr	r3, [pc, #100]	@ (800911c <MX_LWIP_Init+0x25c>)
 80090b6:	9302      	str	r3, [sp, #8]
 80090b8:	4b19      	ldr	r3, [pc, #100]	@ (8009120 <MX_LWIP_Init+0x260>)
 80090ba:	9301      	str	r3, [sp, #4]
 80090bc:	2300      	movs	r3, #0
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	4b15      	ldr	r3, [pc, #84]	@ (8009118 <MX_LWIP_Init+0x258>)
 80090c2:	4a14      	ldr	r2, [pc, #80]	@ (8009114 <MX_LWIP_Init+0x254>)
 80090c4:	4912      	ldr	r1, [pc, #72]	@ (8009110 <MX_LWIP_Init+0x250>)
 80090c6:	4817      	ldr	r0, [pc, #92]	@ (8009124 <MX_LWIP_Init+0x264>)
 80090c8:	f008 ff7c 	bl	8011fc4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80090cc:	4815      	ldr	r0, [pc, #84]	@ (8009124 <MX_LWIP_Init+0x264>)
 80090ce:	f009 f92b 	bl	8012328 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80090d2:	4814      	ldr	r0, [pc, #80]	@ (8009124 <MX_LWIP_Init+0x264>)
 80090d4:	f009 f938 	bl	8012348 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80090d8:	4913      	ldr	r1, [pc, #76]	@ (8009128 <MX_LWIP_Init+0x268>)
 80090da:	4812      	ldr	r0, [pc, #72]	@ (8009124 <MX_LWIP_Init+0x264>)
 80090dc:	f009 fa36 	bl	801254c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80090e0:	4b12      	ldr	r3, [pc, #72]	@ (800912c <MX_LWIP_Init+0x26c>)
 80090e2:	1d3c      	adds	r4, r7, #4
 80090e4:	461d      	mov	r5, r3
 80090e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80090ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80090f2:	1d3b      	adds	r3, r7, #4
 80090f4:	490b      	ldr	r1, [pc, #44]	@ (8009124 <MX_LWIP_Init+0x264>)
 80090f6:	4618      	mov	r0, r3
 80090f8:	f002 fdc7 	bl	800bc8a <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80090fc:	bf00      	nop
 80090fe:	3720      	adds	r7, #32
 8009100:	46bd      	mov	sp, r7
 8009102:	bdb0      	pop	{r4, r5, r7, pc}
 8009104:	20000714 	.word	0x20000714
 8009108:	20000718 	.word	0x20000718
 800910c:	2000071c 	.word	0x2000071c
 8009110:	20000708 	.word	0x20000708
 8009114:	2000070c 	.word	0x2000070c
 8009118:	20000710 	.word	0x20000710
 800911c:	080112b9 	.word	0x080112b9
 8009120:	080096c9 	.word	0x080096c9
 8009124:	200006d4 	.word	0x200006d4
 8009128:	08009131 	.word	0x08009131
 800912c:	0801e698 	.word	0x0801e698

08009130 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8009144:	b480      	push	{r7}
 8009146:	b087      	sub	sp, #28
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8009156:	2320      	movs	r3, #32
 8009158:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800915a:	f3bf 8f4f 	dsb	sy
}
 800915e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8009160:	e00b      	b.n	800917a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8009162:	4a0d      	ldr	r2, [pc, #52]	@ (8009198 <SCB_InvalidateDCache_by_Addr+0x54>)
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	4413      	add	r3, r2
 8009170:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2b00      	cmp	r3, #0
 800917e:	dcf0      	bgt.n	8009162 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8009180:	f3bf 8f4f 	dsb	sy
}
 8009184:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009186:	f3bf 8f6f 	isb	sy
}
 800918a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800918c:	bf00      	nop
 800918e:	371c      	adds	r7, #28
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr
 8009198:	e000ed00 	.word	0xe000ed00

0800919c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80091a4:	4b04      	ldr	r3, [pc, #16]	@ (80091b8 <HAL_ETH_RxCpltCallback+0x1c>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f002 fef7 	bl	800bf9c <osSemaphoreRelease>
}
 80091ae:	bf00      	nop
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	200050ac 	.word	0x200050ac

080091bc <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80091c4:	4b04      	ldr	r3, [pc, #16]	@ (80091d8 <HAL_ETH_TxCpltCallback+0x1c>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f002 fee7 	bl	800bf9c <osSemaphoreRelease>
}
 80091ce:	bf00      	nop
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	200050b0 	.word	0x200050b0

080091dc <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f7fa f838 	bl	800325a <HAL_ETH_GetDMAError>
 80091ea:	4603      	mov	r3, r0
 80091ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091f0:	2b80      	cmp	r3, #128	@ 0x80
 80091f2:	d104      	bne.n	80091fe <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80091f4:	4b04      	ldr	r3, [pc, #16]	@ (8009208 <HAL_ETH_ErrorCallback+0x2c>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f002 fecf 	bl	800bf9c <osSemaphoreRelease>
  }
}
 80091fe:	bf00      	nop
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	200050ac 	.word	0x200050ac

0800920c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800920c:	b5b0      	push	{r4, r5, r7, lr}
 800920e:	b0b4      	sub	sp, #208	@ 0xd0
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 800921a:	2300      	movs	r3, #0
 800921c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 8009220:	2300      	movs	r3, #0
 8009222:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 8009226:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800922a:	2264      	movs	r2, #100	@ 0x64
 800922c:	2100      	movs	r1, #0
 800922e:	4618      	mov	r0, r3
 8009230:	f014 f96d 	bl	801d50e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009234:	4b9f      	ldr	r3, [pc, #636]	@ (80094b4 <low_level_init+0x2a8>)
 8009236:	4aa0      	ldr	r2, [pc, #640]	@ (80094b8 <low_level_init+0x2ac>)
 8009238:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800923a:	2300      	movs	r3, #0
 800923c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x80;
 8009240:	2380      	movs	r3, #128	@ 0x80
 8009242:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0xE1;
 8009246:	23e1      	movs	r3, #225	@ 0xe1
 8009248:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x00;
 800924c:	2300      	movs	r3, #0
 800924e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0x00;
 8009252:	2300      	movs	r3, #0
 8009254:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0x00;
 8009258:	2300      	movs	r3, #0
 800925a:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 800925e:	4a95      	ldr	r2, [pc, #596]	@ (80094b4 <low_level_init+0x2a8>)
 8009260:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009264:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009266:	4b93      	ldr	r3, [pc, #588]	@ (80094b4 <low_level_init+0x2a8>)
 8009268:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800926c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800926e:	4b91      	ldr	r3, [pc, #580]	@ (80094b4 <low_level_init+0x2a8>)
 8009270:	4a92      	ldr	r2, [pc, #584]	@ (80094bc <low_level_init+0x2b0>)
 8009272:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009274:	4b8f      	ldr	r3, [pc, #572]	@ (80094b4 <low_level_init+0x2a8>)
 8009276:	4a92      	ldr	r2, [pc, #584]	@ (80094c0 <low_level_init+0x2b4>)
 8009278:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800927a:	4b8e      	ldr	r3, [pc, #568]	@ (80094b4 <low_level_init+0x2a8>)
 800927c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8009280:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009282:	488c      	ldr	r0, [pc, #560]	@ (80094b4 <low_level_init+0x2a8>)
 8009284:	f7f9 f9a0 	bl	80025c8 <HAL_ETH_Init>
 8009288:	4603      	mov	r3, r0
 800928a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800928e:	2238      	movs	r2, #56	@ 0x38
 8009290:	2100      	movs	r1, #0
 8009292:	488c      	ldr	r0, [pc, #560]	@ (80094c4 <low_level_init+0x2b8>)
 8009294:	f014 f93b 	bl	801d50e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009298:	4b8a      	ldr	r3, [pc, #552]	@ (80094c4 <low_level_init+0x2b8>)
 800929a:	2221      	movs	r2, #33	@ 0x21
 800929c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800929e:	4b89      	ldr	r3, [pc, #548]	@ (80094c4 <low_level_init+0x2b8>)
 80092a0:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80092a4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80092a6:	4b87      	ldr	r3, [pc, #540]	@ (80094c4 <low_level_init+0x2b8>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80092ac:	4886      	ldr	r0, [pc, #536]	@ (80094c8 <low_level_init+0x2bc>)
 80092ae:	f008 fd43 	bl	8011d38 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2206      	movs	r2, #6
 80092b6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80092ba:	4b7e      	ldr	r3, [pc, #504]	@ (80094b4 <low_level_init+0x2a8>)
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	781a      	ldrb	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80092c6:	4b7b      	ldr	r3, [pc, #492]	@ (80094b4 <low_level_init+0x2a8>)
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	785a      	ldrb	r2, [r3, #1]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80092d2:	4b78      	ldr	r3, [pc, #480]	@ (80094b4 <low_level_init+0x2a8>)
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	789a      	ldrb	r2, [r3, #2]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80092de:	4b75      	ldr	r3, [pc, #468]	@ (80094b4 <low_level_init+0x2a8>)
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	78da      	ldrb	r2, [r3, #3]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80092ea:	4b72      	ldr	r3, [pc, #456]	@ (80094b4 <low_level_init+0x2a8>)
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	791a      	ldrb	r2, [r3, #4]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80092f6:	4b6f      	ldr	r3, [pc, #444]	@ (80094b4 <low_level_init+0x2a8>)
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	795a      	ldrb	r2, [r3, #5]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8009308:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009310:	f043 030a 	orr.w	r3, r3, #10
 8009314:	b2da      	uxtb	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800931c:	2300      	movs	r3, #0
 800931e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009320:	2300      	movs	r3, #0
 8009322:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8009324:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8009328:	2101      	movs	r1, #1
 800932a:	4618      	mov	r0, r3
 800932c:	f002 fdb6 	bl	800be9c <osSemaphoreCreate>
 8009330:	4603      	mov	r3, r0
 8009332:	4a66      	ldr	r2, [pc, #408]	@ (80094cc <low_level_init+0x2c0>)
 8009334:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8009336:	2300      	movs	r3, #0
 8009338:	647b      	str	r3, [r7, #68]	@ 0x44
 800933a:	2300      	movs	r3, #0
 800933c:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800933e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009342:	2101      	movs	r1, #1
 8009344:	4618      	mov	r0, r3
 8009346:	f002 fda9 	bl	800be9c <osSemaphoreCreate>
 800934a:	4603      	mov	r3, r0
 800934c:	4a60      	ldr	r2, [pc, #384]	@ (80094d0 <low_level_init+0x2c4>)
 800934e:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8009350:	4b5e      	ldr	r3, [pc, #376]	@ (80094cc <low_level_init+0x2c0>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2100      	movs	r1, #0
 8009356:	4618      	mov	r0, r3
 8009358:	f002 fdd2 	bl	800bf00 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800935c:	4b5c      	ldr	r3, [pc, #368]	@ (80094d0 <low_level_init+0x2c4>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2100      	movs	r1, #0
 8009362:	4618      	mov	r0, r3
 8009364:	f002 fdcc 	bl	800bf00 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8009368:	4b5a      	ldr	r3, [pc, #360]	@ (80094d4 <low_level_init+0x2c8>)
 800936a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800936e:	461d      	mov	r5, r3
 8009370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009374:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009378:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800937c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009380:	6879      	ldr	r1, [r7, #4]
 8009382:	4618      	mov	r0, r3
 8009384:	f002 fc81 	bl	800bc8a <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009388:	4953      	ldr	r1, [pc, #332]	@ (80094d8 <low_level_init+0x2cc>)
 800938a:	4854      	ldr	r0, [pc, #336]	@ (80094dc <low_level_init+0x2d0>)
 800938c:	f7f8 fe5f 	bl	800204e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8009390:	4852      	ldr	r0, [pc, #328]	@ (80094dc <low_level_init+0x2d0>)
 8009392:	f7f8 fe8e 	bl	80020b2 <LAN8742_Init>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d006      	beq.n	80093aa <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f009 f8a5 	bl	80124ec <netif_set_link_down>
    netif_set_down(netif);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f009 f83c 	bl	8012420 <netif_set_down>
 80093a8:	e081      	b.n	80094ae <low_level_init+0x2a2>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80093aa:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d165      	bne.n	800947e <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80093b2:	484a      	ldr	r0, [pc, #296]	@ (80094dc <low_level_init+0x2d0>)
 80093b4:	f7f8 feca 	bl	800214c <LAN8742_GetLinkState>
 80093b8:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80093bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	dc06      	bgt.n	80093d2 <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f009 f891 	bl	80124ec <netif_set_link_down>
      netif_set_down(netif);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f009 f828 	bl	8012420 <netif_set_down>
 80093d0:	e057      	b.n	8009482 <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 80093d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80093d6:	3b02      	subs	r3, #2
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d82b      	bhi.n	8009434 <low_level_init+0x228>
 80093dc:	a201      	add	r2, pc, #4	@ (adr r2, 80093e4 <low_level_init+0x1d8>)
 80093de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e2:	bf00      	nop
 80093e4:	080093f5 	.word	0x080093f5
 80093e8:	08009407 	.word	0x08009407
 80093ec:	08009417 	.word	0x08009417
 80093f0:	08009427 	.word	0x08009427
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80093f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80093f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 80093fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009400:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8009404:	e01f      	b.n	8009446 <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8009406:	2300      	movs	r3, #0
 8009408:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 800940c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009410:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8009414:	e017      	b.n	8009446 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8009416:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800941a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 800941e:	2300      	movs	r3, #0
 8009420:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8009424:	e00f      	b.n	8009446 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8009426:	2300      	movs	r3, #0
 8009428:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 800942c:	2300      	movs	r3, #0
 800942e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8009432:	e008      	b.n	8009446 <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8009434:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009438:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 800943c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009440:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8009444:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009446:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800944a:	4619      	mov	r1, r3
 800944c:	4819      	ldr	r0, [pc, #100]	@ (80094b4 <low_level_init+0x2a8>)
 800944e:	f7f9 fda3 	bl	8002f98 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8009452:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009456:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 8009458:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800945c:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800945e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009462:	4619      	mov	r1, r3
 8009464:	4813      	ldr	r0, [pc, #76]	@ (80094b4 <low_level_init+0x2a8>)
 8009466:	f7f9 fe8e 	bl	8003186 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800946a:	4812      	ldr	r0, [pc, #72]	@ (80094b4 <low_level_init+0x2a8>)
 800946c:	f7f9 f946 	bl	80026fc <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f008 ff69 	bl	8012348 <netif_set_up>
    netif_set_link_up(netif);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f009 f804 	bl	8012484 <netif_set_link_up>
 800947c:	e001      	b.n	8009482 <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 800947e:	f7f8 fba1 	bl	8001bc4 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 8009482:	f7f8 ff3b 	bl	80022fc <HAL_GetREVID>
 8009486:	4603      	mov	r3, r0
 8009488:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800948c:	d10f      	bne.n	80094ae <low_level_init+0x2a2>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 800948e:	4b14      	ldr	r3, [pc, #80]	@ (80094e0 <low_level_init+0x2d4>)
 8009490:	f107 040c 	add.w	r4, r7, #12
 8009494:	461d      	mov	r5, r3
 8009496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800949a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800949e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 80094a2:	f107 030c 	add.w	r3, r7, #12
 80094a6:	2100      	movs	r1, #0
 80094a8:	4618      	mov	r0, r3
 80094aa:	f002 fbee 	bl	800bc8a <osThreadCreate>
  }
}
 80094ae:	37d0      	adds	r7, #208	@ 0xd0
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bdb0      	pop	{r4, r5, r7, pc}
 80094b4:	200050b4 	.word	0x200050b4
 80094b8:	40028000 	.word	0x40028000
 80094bc:	2000022c 	.word	0x2000022c
 80094c0:	2000018c 	.word	0x2000018c
 80094c4:	20005164 	.word	0x20005164
 80094c8:	08021c90 	.word	0x08021c90
 80094cc:	200050ac 	.word	0x200050ac
 80094d0:	200050b0 	.word	0x200050b0
 80094d4:	0801e6bc 	.word	0x0801e6bc
 80094d8:	2000000c 	.word	0x2000000c
 80094dc:	2000519c 	.word	0x2000519c
 80094e0:	0801e6e8 	.word	0x0801e6e8

080094e4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b092      	sub	sp, #72	@ 0x48
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80094ee:	2300      	movs	r3, #0
 80094f0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80094fc:	f107 030c 	add.w	r3, r7, #12
 8009500:	2230      	movs	r2, #48	@ 0x30
 8009502:	2100      	movs	r1, #0
 8009504:	4618      	mov	r0, r3
 8009506:	f014 f802 	bl	801d50e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800950a:	f107 030c 	add.w	r3, r7, #12
 800950e:	2230      	movs	r2, #48	@ 0x30
 8009510:	2100      	movs	r1, #0
 8009512:	4618      	mov	r0, r3
 8009514:	f013 fffb 	bl	801d50e <memset>

  for(q = p; q != NULL; q = q->next)
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	643b      	str	r3, [r7, #64]	@ 0x40
 800951c:	e045      	b.n	80095aa <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800951e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009520:	2b03      	cmp	r3, #3
 8009522:	d902      	bls.n	800952a <low_level_output+0x46>
      return ERR_IF;
 8009524:	f06f 030b 	mvn.w	r3, #11
 8009528:	e07f      	b.n	800962a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800952a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800952c:	6859      	ldr	r1, [r3, #4]
 800952e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009530:	4613      	mov	r3, r2
 8009532:	005b      	lsls	r3, r3, #1
 8009534:	4413      	add	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	3348      	adds	r3, #72	@ 0x48
 800953a:	443b      	add	r3, r7
 800953c:	3b3c      	subs	r3, #60	@ 0x3c
 800953e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009542:	895b      	ldrh	r3, [r3, #10]
 8009544:	4619      	mov	r1, r3
 8009546:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009548:	4613      	mov	r3, r2
 800954a:	005b      	lsls	r3, r3, #1
 800954c:	4413      	add	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	3348      	adds	r3, #72	@ 0x48
 8009552:	443b      	add	r3, r7
 8009554:	3b38      	subs	r3, #56	@ 0x38
 8009556:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800955a:	2b00      	cmp	r3, #0
 800955c:	d011      	beq.n	8009582 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800955e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009560:	1e5a      	subs	r2, r3, #1
 8009562:	f107 000c 	add.w	r0, r7, #12
 8009566:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009568:	460b      	mov	r3, r1
 800956a:	005b      	lsls	r3, r3, #1
 800956c:	440b      	add	r3, r1
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	18c1      	adds	r1, r0, r3
 8009572:	4613      	mov	r3, r2
 8009574:	005b      	lsls	r3, r3, #1
 8009576:	4413      	add	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	3348      	adds	r3, #72	@ 0x48
 800957c:	443b      	add	r3, r7
 800957e:	3b34      	subs	r3, #52	@ 0x34
 8009580:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d109      	bne.n	800959e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800958a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800958c:	4613      	mov	r3, r2
 800958e:	005b      	lsls	r3, r3, #1
 8009590:	4413      	add	r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	3348      	adds	r3, #72	@ 0x48
 8009596:	443b      	add	r3, r7
 8009598:	3b34      	subs	r3, #52	@ 0x34
 800959a:	2200      	movs	r2, #0
 800959c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800959e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095a0:	3301      	adds	r3, #1
 80095a2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80095a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80095aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1b6      	bne.n	800951e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	891b      	ldrh	r3, [r3, #8]
 80095b4:	461a      	mov	r2, r3
 80095b6:	4b1f      	ldr	r3, [pc, #124]	@ (8009634 <low_level_output+0x150>)
 80095b8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80095ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009634 <low_level_output+0x150>)
 80095bc:	f107 030c 	add.w	r3, r7, #12
 80095c0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80095c2:	4a1c      	ldr	r2, [pc, #112]	@ (8009634 <low_level_output+0x150>)
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 80095c8:	6838      	ldr	r0, [r7, #0]
 80095ca:	f009 fc13 	bl	8012df4 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 80095ce:	4919      	ldr	r1, [pc, #100]	@ (8009634 <low_level_output+0x150>)
 80095d0:	4819      	ldr	r0, [pc, #100]	@ (8009638 <low_level_output+0x154>)
 80095d2:	f7f9 f983 	bl	80028dc <HAL_ETH_Transmit_IT>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d103      	bne.n	80095e4 <low_level_output+0x100>
    {
      errval = ERR_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80095e2:	e01b      	b.n	800961c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 80095e4:	4814      	ldr	r0, [pc, #80]	@ (8009638 <low_level_output+0x154>)
 80095e6:	f7f9 fe2b 	bl	8003240 <HAL_ETH_GetError>
 80095ea:	4603      	mov	r3, r0
 80095ec:	f003 0302 	and.w	r3, r3, #2
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00d      	beq.n	8009610 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 80095f4:	4b11      	ldr	r3, [pc, #68]	@ (800963c <low_level_output+0x158>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80095fc:	4618      	mov	r0, r3
 80095fe:	f002 fc7f 	bl	800bf00 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 8009602:	480d      	ldr	r0, [pc, #52]	@ (8009638 <low_level_output+0x154>)
 8009604:	f7f9 fb0a 	bl	8002c1c <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8009608:	23fe      	movs	r3, #254	@ 0xfe
 800960a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800960e:	e005      	b.n	800961c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8009610:	6838      	ldr	r0, [r7, #0]
 8009612:	f009 fb49 	bl	8012ca8 <pbuf_free>
        errval =  ERR_IF;
 8009616:	23f4      	movs	r3, #244	@ 0xf4
 8009618:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800961c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009620:	f113 0f02 	cmn.w	r3, #2
 8009624:	d0d3      	beq.n	80095ce <low_level_output+0xea>

  return errval;
 8009626:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800962a:	4618      	mov	r0, r3
 800962c:	3748      	adds	r7, #72	@ 0x48
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	20005164 	.word	0x20005164
 8009638:	200050b4 	.word	0x200050b4
 800963c:	200050b0 	.word	0x200050b0

08009640 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009648:	2300      	movs	r3, #0
 800964a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800964c:	4b07      	ldr	r3, [pc, #28]	@ (800966c <low_level_input+0x2c>)
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d105      	bne.n	8009660 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009654:	f107 030c 	add.w	r3, r7, #12
 8009658:	4619      	mov	r1, r3
 800965a:	4805      	ldr	r0, [pc, #20]	@ (8009670 <low_level_input+0x30>)
 800965c:	f7f9 f99a 	bl	8002994 <HAL_ETH_ReadData>
  }

  return p;
 8009660:	68fb      	ldr	r3, [r7, #12]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	200050a8 	.word	0x200050a8
 8009670:	200050b4 	.word	0x200050b4

08009674 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800967c:	2300      	movs	r3, #0
 800967e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009684:	4b0f      	ldr	r3, [pc, #60]	@ (80096c4 <ethernetif_input+0x50>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f04f 31ff 	mov.w	r1, #4294967295
 800968c:	4618      	mov	r0, r3
 800968e:	f002 fc37 	bl	800bf00 <osSemaphoreWait>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1f5      	bne.n	8009684 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8009698:	68b8      	ldr	r0, [r7, #8]
 800969a:	f7ff ffd1 	bl	8009640 <low_level_input>
 800969e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	68b9      	ldr	r1, [r7, #8]
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	4798      	blx	r3
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d002      	beq.n	80096bc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f009 faf6 	bl	8012ca8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1ea      	bne.n	8009698 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80096c2:	e7df      	b.n	8009684 <ethernetif_input+0x10>
 80096c4:	200050ac 	.word	0x200050ac

080096c8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d106      	bne.n	80096e4 <ethernetif_init+0x1c>
 80096d6:	4b0e      	ldr	r3, [pc, #56]	@ (8009710 <ethernetif_init+0x48>)
 80096d8:	f240 2217 	movw	r2, #535	@ 0x217
 80096dc:	490d      	ldr	r1, [pc, #52]	@ (8009714 <ethernetif_init+0x4c>)
 80096de:	480e      	ldr	r0, [pc, #56]	@ (8009718 <ethernetif_init+0x50>)
 80096e0:	f013 fe74 	bl	801d3cc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2273      	movs	r2, #115	@ 0x73
 80096e8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2274      	movs	r2, #116	@ 0x74
 80096f0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4a09      	ldr	r2, [pc, #36]	@ (800971c <ethernetif_init+0x54>)
 80096f8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a08      	ldr	r2, [pc, #32]	@ (8009720 <ethernetif_init+0x58>)
 80096fe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7ff fd83 	bl	800920c <low_level_init>

  return ERR_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	0801e704 	.word	0x0801e704
 8009714:	0801e720 	.word	0x0801e720
 8009718:	0801e730 	.word	0x0801e730
 800971c:	0801a46d 	.word	0x0801a46d
 8009720:	080094e5 	.word	0x080094e5

08009724 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009730:	68f9      	ldr	r1, [r7, #12]
 8009732:	4809      	ldr	r0, [pc, #36]	@ (8009758 <pbuf_free_custom+0x34>)
 8009734:	f008 fbf0 	bl	8011f18 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8009738:	4b08      	ldr	r3, [pc, #32]	@ (800975c <pbuf_free_custom+0x38>)
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d107      	bne.n	8009750 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009740:	4b06      	ldr	r3, [pc, #24]	@ (800975c <pbuf_free_custom+0x38>)
 8009742:	2200      	movs	r2, #0
 8009744:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8009746:	4b06      	ldr	r3, [pc, #24]	@ (8009760 <pbuf_free_custom+0x3c>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4618      	mov	r0, r3
 800974c:	f002 fc26 	bl	800bf9c <osSemaphoreRelease>
  }
}
 8009750:	bf00      	nop
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	08021c90 	.word	0x08021c90
 800975c:	200050a8 	.word	0x200050a8
 8009760:	200050ac 	.word	0x200050ac

08009764 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009768:	f7f8 fd98 	bl	800229c <HAL_GetTick>
 800976c:	4603      	mov	r3, r0
}
 800976e:	4618      	mov	r0, r3
 8009770:	bd80      	pop	{r7, pc}
	...

08009774 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b08e      	sub	sp, #56	@ 0x38
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800977c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009780:	2200      	movs	r2, #0
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	605a      	str	r2, [r3, #4]
 8009786:	609a      	str	r2, [r3, #8]
 8009788:	60da      	str	r2, [r3, #12]
 800978a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a52      	ldr	r2, [pc, #328]	@ (80098dc <HAL_ETH_MspInit+0x168>)
 8009792:	4293      	cmp	r3, r2
 8009794:	f040 809e 	bne.w	80098d4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009798:	4b51      	ldr	r3, [pc, #324]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 800979a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800979c:	4a50      	ldr	r2, [pc, #320]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 800979e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80097a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80097a4:	4b4e      	ldr	r3, [pc, #312]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 80097a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097ac:	623b      	str	r3, [r7, #32]
 80097ae:	6a3b      	ldr	r3, [r7, #32]
 80097b0:	4b4b      	ldr	r3, [pc, #300]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 80097b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097b4:	4a4a      	ldr	r2, [pc, #296]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 80097b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80097ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80097bc:	4b48      	ldr	r3, [pc, #288]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 80097be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80097c4:	61fb      	str	r3, [r7, #28]
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	4b45      	ldr	r3, [pc, #276]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 80097ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097cc:	4a44      	ldr	r2, [pc, #272]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 80097ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80097d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80097d4:	4b42      	ldr	r3, [pc, #264]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 80097d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097dc:	61bb      	str	r3, [r7, #24]
 80097de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80097e0:	4b3f      	ldr	r3, [pc, #252]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 80097e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097e4:	4a3e      	ldr	r2, [pc, #248]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 80097e6:	f043 0304 	orr.w	r3, r3, #4
 80097ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80097ec:	4b3c      	ldr	r3, [pc, #240]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 80097ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097f0:	f003 0304 	and.w	r3, r3, #4
 80097f4:	617b      	str	r3, [r7, #20]
 80097f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097f8:	4b39      	ldr	r3, [pc, #228]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 80097fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097fc:	4a38      	ldr	r2, [pc, #224]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 80097fe:	f043 0301 	orr.w	r3, r3, #1
 8009802:	6313      	str	r3, [r2, #48]	@ 0x30
 8009804:	4b36      	ldr	r3, [pc, #216]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 8009806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009808:	f003 0301 	and.w	r3, r3, #1
 800980c:	613b      	str	r3, [r7, #16]
 800980e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009810:	4b33      	ldr	r3, [pc, #204]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 8009812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009814:	4a32      	ldr	r2, [pc, #200]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 8009816:	f043 0302 	orr.w	r3, r3, #2
 800981a:	6313      	str	r3, [r2, #48]	@ 0x30
 800981c:	4b30      	ldr	r3, [pc, #192]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 800981e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009820:	f003 0302 	and.w	r3, r3, #2
 8009824:	60fb      	str	r3, [r7, #12]
 8009826:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009828:	4b2d      	ldr	r3, [pc, #180]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 800982a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800982c:	4a2c      	ldr	r2, [pc, #176]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 800982e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009832:	6313      	str	r3, [r2, #48]	@ 0x30
 8009834:	4b2a      	ldr	r3, [pc, #168]	@ (80098e0 <HAL_ETH_MspInit+0x16c>)
 8009836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800983c:	60bb      	str	r3, [r7, #8]
 800983e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009840:	2332      	movs	r3, #50	@ 0x32
 8009842:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009844:	2302      	movs	r3, #2
 8009846:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009848:	2300      	movs	r3, #0
 800984a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800984c:	2303      	movs	r3, #3
 800984e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009850:	230b      	movs	r3, #11
 8009852:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009858:	4619      	mov	r1, r3
 800985a:	4822      	ldr	r0, [pc, #136]	@ (80098e4 <HAL_ETH_MspInit+0x170>)
 800985c:	f7fa f92a 	bl	8003ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009860:	2386      	movs	r3, #134	@ 0x86
 8009862:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009864:	2302      	movs	r3, #2
 8009866:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009868:	2300      	movs	r3, #0
 800986a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800986c:	2303      	movs	r3, #3
 800986e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009870:	230b      	movs	r3, #11
 8009872:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009878:	4619      	mov	r1, r3
 800987a:	481b      	ldr	r0, [pc, #108]	@ (80098e8 <HAL_ETH_MspInit+0x174>)
 800987c:	f7fa f91a 	bl	8003ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009880:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009884:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009886:	2302      	movs	r3, #2
 8009888:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800988a:	2300      	movs	r3, #0
 800988c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800988e:	2303      	movs	r3, #3
 8009890:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009892:	230b      	movs	r3, #11
 8009894:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800989a:	4619      	mov	r1, r3
 800989c:	4813      	ldr	r0, [pc, #76]	@ (80098ec <HAL_ETH_MspInit+0x178>)
 800989e:	f7fa f909 	bl	8003ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80098a2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80098a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098a8:	2302      	movs	r3, #2
 80098aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ac:	2300      	movs	r3, #0
 80098ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098b0:	2303      	movs	r3, #3
 80098b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80098b4:	230b      	movs	r3, #11
 80098b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80098b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098bc:	4619      	mov	r1, r3
 80098be:	480c      	ldr	r0, [pc, #48]	@ (80098f0 <HAL_ETH_MspInit+0x17c>)
 80098c0:	f7fa f8f8 	bl	8003ab4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80098c4:	2200      	movs	r2, #0
 80098c6:	2105      	movs	r1, #5
 80098c8:	203d      	movs	r0, #61	@ 0x3d
 80098ca:	f7f8 fddb 	bl	8002484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80098ce:	203d      	movs	r0, #61	@ 0x3d
 80098d0:	f7f8 fdf4 	bl	80024bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80098d4:	bf00      	nop
 80098d6:	3738      	adds	r7, #56	@ 0x38
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	40028000 	.word	0x40028000
 80098e0:	40023800 	.word	0x40023800
 80098e4:	40020800 	.word	0x40020800
 80098e8:	40020000 	.word	0x40020000
 80098ec:	40020400 	.word	0x40020400
 80098f0:	40021800 	.word	0x40021800

080098f4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80098f8:	4802      	ldr	r0, [pc, #8]	@ (8009904 <ETH_PHY_IO_Init+0x10>)
 80098fa:	f7f9 fc5f 	bl	80031bc <HAL_ETH_SetMDIOClockRange>

  return 0;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	bd80      	pop	{r7, pc}
 8009904:	200050b4 	.word	0x200050b4

08009908 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009908:	b480      	push	{r7}
 800990a:	af00      	add	r7, sp, #0
  return 0;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	68ba      	ldr	r2, [r7, #8]
 8009928:	68f9      	ldr	r1, [r7, #12]
 800992a:	4807      	ldr	r0, [pc, #28]	@ (8009948 <ETH_PHY_IO_ReadReg+0x30>)
 800992c:	f7f9 faa0 	bl	8002e70 <HAL_ETH_ReadPHYRegister>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d002      	beq.n	800993c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009936:	f04f 33ff 	mov.w	r3, #4294967295
 800993a:	e000      	b.n	800993e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	200050b4 	.word	0x200050b4

0800994c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	68f9      	ldr	r1, [r7, #12]
 800995e:	4807      	ldr	r0, [pc, #28]	@ (800997c <ETH_PHY_IO_WriteReg+0x30>)
 8009960:	f7f9 fad1 	bl	8002f06 <HAL_ETH_WritePHYRegister>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d002      	beq.n	8009970 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800996a:	f04f 33ff 	mov.w	r3, #4294967295
 800996e:	e000      	b.n	8009972 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	200050b4 	.word	0x200050b4

08009980 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009984:	f7f8 fc8a 	bl	800229c <HAL_GetTick>
 8009988:	4603      	mov	r3, r0
}
 800998a:	4618      	mov	r0, r3
 800998c:	bd80      	pop	{r7, pc}
	...

08009990 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b0a0      	sub	sp, #128	@ 0x80
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009998:	f107 0308 	add.w	r3, r7, #8
 800999c:	2264      	movs	r2, #100	@ 0x64
 800999e:	2100      	movs	r1, #0
 80099a0:	4618      	mov	r0, r3
 80099a2:	f013 fdb4 	bl	801d50e <memset>
  int32_t PHYLinkState = 0;
 80099a6:	2300      	movs	r3, #0
 80099a8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80099aa:	2300      	movs	r3, #0
 80099ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80099ae:	2300      	movs	r3, #0
 80099b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099b2:	2300      	movs	r3, #0
 80099b4:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80099ba:	483a      	ldr	r0, [pc, #232]	@ (8009aa4 <ethernet_link_thread+0x114>)
 80099bc:	f7f8 fbc6 	bl	800214c <LAN8742_GetLinkState>
 80099c0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80099c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80099c8:	089b      	lsrs	r3, r3, #2
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00c      	beq.n	80099ee <ethernet_link_thread+0x5e>
 80099d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	dc09      	bgt.n	80099ee <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80099da:	4833      	ldr	r0, [pc, #204]	@ (8009aa8 <ethernet_link_thread+0x118>)
 80099dc:	f7f8 fefe 	bl	80027dc <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80099e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80099e2:	f008 fd1d 	bl	8012420 <netif_set_down>
    netif_set_link_down(netif);
 80099e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80099e8:	f008 fd80 	bl	80124ec <netif_set_link_down>
 80099ec:	e055      	b.n	8009a9a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80099ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80099f4:	f003 0304 	and.w	r3, r3, #4
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d14e      	bne.n	8009a9a <ethernet_link_thread+0x10a>
 80099fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	dd4b      	ble.n	8009a9a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8009a02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a04:	3b02      	subs	r3, #2
 8009a06:	2b03      	cmp	r3, #3
 8009a08:	d82a      	bhi.n	8009a60 <ethernet_link_thread+0xd0>
 8009a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a10 <ethernet_link_thread+0x80>)
 8009a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a10:	08009a21 	.word	0x08009a21
 8009a14:	08009a33 	.word	0x08009a33
 8009a18:	08009a43 	.word	0x08009a43
 8009a1c:	08009a53 	.word	0x08009a53
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009a20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009a24:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009a26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009a2a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009a30:	e017      	b.n	8009a62 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009a32:	2300      	movs	r3, #0
 8009a34:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009a36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009a3a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009a40:	e00f      	b.n	8009a62 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009a42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009a46:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009a50:	e007      	b.n	8009a62 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009a52:	2300      	movs	r3, #0
 8009a54:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009a56:	2300      	movs	r3, #0
 8009a58:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009a5e:	e000      	b.n	8009a62 <ethernet_link_thread+0xd2>
    default:
      break;
 8009a60:	bf00      	nop
    }

    if(linkchanged)
 8009a62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d018      	beq.n	8009a9a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009a68:	f107 0308 	add.w	r3, r7, #8
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	480e      	ldr	r0, [pc, #56]	@ (8009aa8 <ethernet_link_thread+0x118>)
 8009a70:	f7f9 fa92 	bl	8002f98 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009a74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a76:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8009a78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a7a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009a7c:	f107 0308 	add.w	r3, r7, #8
 8009a80:	4619      	mov	r1, r3
 8009a82:	4809      	ldr	r0, [pc, #36]	@ (8009aa8 <ethernet_link_thread+0x118>)
 8009a84:	f7f9 fb7f 	bl	8003186 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8009a88:	4807      	ldr	r0, [pc, #28]	@ (8009aa8 <ethernet_link_thread+0x118>)
 8009a8a:	f7f8 fe37 	bl	80026fc <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8009a8e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009a90:	f008 fc5a 	bl	8012348 <netif_set_up>
      netif_set_link_up(netif);
 8009a94:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009a96:	f008 fcf5 	bl	8012484 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8009a9a:	2064      	movs	r0, #100	@ 0x64
 8009a9c:	f002 f94d 	bl	800bd3a <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009aa0:	e78b      	b.n	80099ba <ethernet_link_thread+0x2a>
 8009aa2:	bf00      	nop
 8009aa4:	2000519c 	.word	0x2000519c
 8009aa8:	200050b4 	.word	0x200050b4

08009aac <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af02      	add	r7, sp, #8
 8009ab2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009ab4:	4812      	ldr	r0, [pc, #72]	@ (8009b00 <HAL_ETH_RxAllocateCallback+0x54>)
 8009ab6:	f008 f9bb 	bl	8011e30 <memp_malloc_pool>
 8009aba:	60f8      	str	r0, [r7, #12]
  if (p)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d014      	beq.n	8009aec <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f103 0220 	add.w	r2, r3, #32
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4a0d      	ldr	r2, [pc, #52]	@ (8009b04 <HAL_ETH_RxAllocateCallback+0x58>)
 8009ad0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8009ada:	9201      	str	r2, [sp, #4]
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2241      	movs	r2, #65	@ 0x41
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	f008 ff25 	bl	8012934 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8009aea:	e005      	b.n	8009af8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8009aec:	4b06      	ldr	r3, [pc, #24]	@ (8009b08 <HAL_ETH_RxAllocateCallback+0x5c>)
 8009aee:	2201      	movs	r2, #1
 8009af0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	601a      	str	r2, [r3, #0]
}
 8009af8:	bf00      	nop
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	08021c90 	.word	0x08021c90
 8009b04:	08009725 	.word	0x08009725
 8009b08:	200050a8 	.word	0x200050a8

08009b0c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b088      	sub	sp, #32
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]
 8009b18:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009b22:	2300      	movs	r3, #0
 8009b24:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	3b20      	subs	r3, #32
 8009b2a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	2200      	movs	r2, #0
 8009b36:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	887a      	ldrh	r2, [r7, #2]
 8009b3c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d103      	bne.n	8009b4e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	69fa      	ldr	r2, [r7, #28]
 8009b4a:	601a      	str	r2, [r3, #0]
 8009b4c:	e003      	b.n	8009b56 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	69fa      	ldr	r2, [r7, #28]
 8009b54:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	69fa      	ldr	r2, [r7, #28]
 8009b5a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	61fb      	str	r3, [r7, #28]
 8009b62:	e009      	b.n	8009b78 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	891a      	ldrh	r2, [r3, #8]
 8009b68:	887b      	ldrh	r3, [r7, #2]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	61fb      	str	r3, [r7, #28]
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1f2      	bne.n	8009b64 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8009b7e:	887b      	ldrh	r3, [r7, #2]
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7ff fade 	bl	8009144 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009b88:	bf00      	nop
 8009b8a:	3720      	adds	r7, #32
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f009 f885 	bl	8012ca8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8009b9e:	bf00      	nop
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
	...

08009ba8 <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 8009bb0:	4b15      	ldr	r3, [pc, #84]	@ (8009c08 <RMII_Thread+0x60>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	f002 f8b0 	bl	800bd22 <osThreadTerminate>
 8009bc2:	e7f5      	b.n	8009bb0 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 8009bc4:	4b10      	ldr	r3, [pc, #64]	@ (8009c08 <RMII_Thread+0x60>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8009bcc:	2b0a      	cmp	r3, #10
 8009bce:	d916      	bls.n	8009bfe <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 8009bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8009c0c <RMII_Thread+0x64>)
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8009c0c <RMII_Thread+0x64>)
 8009bd6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009bda:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 8009bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8009c0c <RMII_Thread+0x64>)
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	4a0a      	ldr	r2, [pc, #40]	@ (8009c0c <RMII_Thread+0x64>)
 8009be2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009be6:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 8009be8:	4b07      	ldr	r3, [pc, #28]	@ (8009c08 <RMII_Thread+0x60>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8009bf0:	4b05      	ldr	r3, [pc, #20]	@ (8009c08 <RMII_Thread+0x60>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f042 0201 	orr.w	r2, r2, #1
 8009bf8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8009bfc:	e7d8      	b.n	8009bb0 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 8009bfe:	20c8      	movs	r0, #200	@ 0xc8
 8009c00:	f002 f89b 	bl	800bd3a <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 8009c04:	e7d4      	b.n	8009bb0 <RMII_Thread+0x8>
 8009c06:	bf00      	nop
 8009c08:	200050b4 	.word	0x200050b4
 8009c0c:	40013800 	.word	0x40013800

08009c10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009c1c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009c20:	f013 fa16 	bl	801d050 <malloc>
 8009c24:	4603      	mov	r3, r0
 8009c26:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d109      	bne.n	8009c42 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	32b0      	adds	r2, #176	@ 0xb0
 8009c38:	2100      	movs	r1, #0
 8009c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009c3e:	2302      	movs	r3, #2
 8009c40:	e0d4      	b.n	8009dec <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009c42:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009c46:	2100      	movs	r1, #0
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f013 fc60 	bl	801d50e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	32b0      	adds	r2, #176	@ 0xb0
 8009c58:	68f9      	ldr	r1, [r7, #12]
 8009c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	32b0      	adds	r2, #176	@ 0xb0
 8009c68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	7c1b      	ldrb	r3, [r3, #16]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d138      	bne.n	8009cec <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c7a:	4b5e      	ldr	r3, [pc, #376]	@ (8009df4 <USBD_CDC_Init+0x1e4>)
 8009c7c:	7819      	ldrb	r1, [r3, #0]
 8009c7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c82:	2202      	movs	r2, #2
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f013 f840 	bl	801cd0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c8a:	4b5a      	ldr	r3, [pc, #360]	@ (8009df4 <USBD_CDC_Init+0x1e4>)
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	f003 020f 	and.w	r2, r3, #15
 8009c92:	6879      	ldr	r1, [r7, #4]
 8009c94:	4613      	mov	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4413      	add	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	440b      	add	r3, r1
 8009c9e:	3324      	adds	r3, #36	@ 0x24
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009ca4:	4b54      	ldr	r3, [pc, #336]	@ (8009df8 <USBD_CDC_Init+0x1e8>)
 8009ca6:	7819      	ldrb	r1, [r3, #0]
 8009ca8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009cac:	2202      	movs	r2, #2
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f013 f82b 	bl	801cd0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009cb4:	4b50      	ldr	r3, [pc, #320]	@ (8009df8 <USBD_CDC_Init+0x1e8>)
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	f003 020f 	and.w	r2, r3, #15
 8009cbc:	6879      	ldr	r1, [r7, #4]
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	440b      	add	r3, r1
 8009cc8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009ccc:	2201      	movs	r2, #1
 8009cce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009cd0:	4b4a      	ldr	r3, [pc, #296]	@ (8009dfc <USBD_CDC_Init+0x1ec>)
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	f003 020f 	and.w	r2, r3, #15
 8009cd8:	6879      	ldr	r1, [r7, #4]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	4413      	add	r3, r2
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	440b      	add	r3, r1
 8009ce4:	3326      	adds	r3, #38	@ 0x26
 8009ce6:	2210      	movs	r2, #16
 8009ce8:	801a      	strh	r2, [r3, #0]
 8009cea:	e035      	b.n	8009d58 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009cec:	4b41      	ldr	r3, [pc, #260]	@ (8009df4 <USBD_CDC_Init+0x1e4>)
 8009cee:	7819      	ldrb	r1, [r3, #0]
 8009cf0:	2340      	movs	r3, #64	@ 0x40
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f013 f808 	bl	801cd0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009cfa:	4b3e      	ldr	r3, [pc, #248]	@ (8009df4 <USBD_CDC_Init+0x1e4>)
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	f003 020f 	and.w	r2, r3, #15
 8009d02:	6879      	ldr	r1, [r7, #4]
 8009d04:	4613      	mov	r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4413      	add	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	440b      	add	r3, r1
 8009d0e:	3324      	adds	r3, #36	@ 0x24
 8009d10:	2201      	movs	r2, #1
 8009d12:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009d14:	4b38      	ldr	r3, [pc, #224]	@ (8009df8 <USBD_CDC_Init+0x1e8>)
 8009d16:	7819      	ldrb	r1, [r3, #0]
 8009d18:	2340      	movs	r3, #64	@ 0x40
 8009d1a:	2202      	movs	r2, #2
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f012 fff4 	bl	801cd0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009d22:	4b35      	ldr	r3, [pc, #212]	@ (8009df8 <USBD_CDC_Init+0x1e8>)
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	f003 020f 	and.w	r2, r3, #15
 8009d2a:	6879      	ldr	r1, [r7, #4]
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4413      	add	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	440b      	add	r3, r1
 8009d36:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8009dfc <USBD_CDC_Init+0x1ec>)
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	f003 020f 	and.w	r2, r3, #15
 8009d46:	6879      	ldr	r1, [r7, #4]
 8009d48:	4613      	mov	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4413      	add	r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	440b      	add	r3, r1
 8009d52:	3326      	adds	r3, #38	@ 0x26
 8009d54:	2210      	movs	r2, #16
 8009d56:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d58:	4b28      	ldr	r3, [pc, #160]	@ (8009dfc <USBD_CDC_Init+0x1ec>)
 8009d5a:	7819      	ldrb	r1, [r3, #0]
 8009d5c:	2308      	movs	r3, #8
 8009d5e:	2203      	movs	r2, #3
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f012 ffd2 	bl	801cd0a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009d66:	4b25      	ldr	r3, [pc, #148]	@ (8009dfc <USBD_CDC_Init+0x1ec>)
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	f003 020f 	and.w	r2, r3, #15
 8009d6e:	6879      	ldr	r1, [r7, #4]
 8009d70:	4613      	mov	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4413      	add	r3, r2
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	440b      	add	r3, r1
 8009d7a:	3324      	adds	r3, #36	@ 0x24
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	33b0      	adds	r3, #176	@ 0xb0
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d101      	bne.n	8009dba <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8009db6:	2302      	movs	r3, #2
 8009db8:	e018      	b.n	8009dec <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	7c1b      	ldrb	r3, [r3, #16]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d10a      	bne.n	8009dd8 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8009df8 <USBD_CDC_Init+0x1e8>)
 8009dc4:	7819      	ldrb	r1, [r3, #0]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009dcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f013 f889 	bl	801cee8 <USBD_LL_PrepareReceive>
 8009dd6:	e008      	b.n	8009dea <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009dd8:	4b07      	ldr	r3, [pc, #28]	@ (8009df8 <USBD_CDC_Init+0x1e8>)
 8009dda:	7819      	ldrb	r1, [r3, #0]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009de2:	2340      	movs	r3, #64	@ 0x40
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f013 f87f 	bl	801cee8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	200000a7 	.word	0x200000a7
 8009df8:	200000a8 	.word	0x200000a8
 8009dfc:	200000a9 	.word	0x200000a9

08009e00 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009e0c:	4b3a      	ldr	r3, [pc, #232]	@ (8009ef8 <USBD_CDC_DeInit+0xf8>)
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	4619      	mov	r1, r3
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f012 ff9f 	bl	801cd56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009e18:	4b37      	ldr	r3, [pc, #220]	@ (8009ef8 <USBD_CDC_DeInit+0xf8>)
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	f003 020f 	and.w	r2, r3, #15
 8009e20:	6879      	ldr	r1, [r7, #4]
 8009e22:	4613      	mov	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	4413      	add	r3, r2
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	440b      	add	r3, r1
 8009e2c:	3324      	adds	r3, #36	@ 0x24
 8009e2e:	2200      	movs	r2, #0
 8009e30:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009e32:	4b32      	ldr	r3, [pc, #200]	@ (8009efc <USBD_CDC_DeInit+0xfc>)
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	4619      	mov	r1, r3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f012 ff8c 	bl	801cd56 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8009efc <USBD_CDC_DeInit+0xfc>)
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	f003 020f 	and.w	r2, r3, #15
 8009e46:	6879      	ldr	r1, [r7, #4]
 8009e48:	4613      	mov	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	4413      	add	r3, r2
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	440b      	add	r3, r1
 8009e52:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009e56:	2200      	movs	r2, #0
 8009e58:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009e5a:	4b29      	ldr	r3, [pc, #164]	@ (8009f00 <USBD_CDC_DeInit+0x100>)
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f012 ff78 	bl	801cd56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009e66:	4b26      	ldr	r3, [pc, #152]	@ (8009f00 <USBD_CDC_DeInit+0x100>)
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	f003 020f 	and.w	r2, r3, #15
 8009e6e:	6879      	ldr	r1, [r7, #4]
 8009e70:	4613      	mov	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4413      	add	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	440b      	add	r3, r1
 8009e7a:	3324      	adds	r3, #36	@ 0x24
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009e80:	4b1f      	ldr	r3, [pc, #124]	@ (8009f00 <USBD_CDC_DeInit+0x100>)
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	f003 020f 	and.w	r2, r3, #15
 8009e88:	6879      	ldr	r1, [r7, #4]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	4413      	add	r3, r2
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	440b      	add	r3, r1
 8009e94:	3326      	adds	r3, #38	@ 0x26
 8009e96:	2200      	movs	r2, #0
 8009e98:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	32b0      	adds	r2, #176	@ 0xb0
 8009ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d01f      	beq.n	8009eec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	33b0      	adds	r3, #176	@ 0xb0
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	4413      	add	r3, r2
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	32b0      	adds	r2, #176	@ 0xb0
 8009eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f013 f8c6 	bl	801d060 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	32b0      	adds	r2, #176	@ 0xb0
 8009ede:	2100      	movs	r1, #0
 8009ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	200000a7 	.word	0x200000a7
 8009efc:	200000a8 	.word	0x200000a8
 8009f00:	200000a9 	.word	0x200000a9

08009f04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	32b0      	adds	r2, #176	@ 0xb0
 8009f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f1c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009f22:	2300      	movs	r3, #0
 8009f24:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f26:	2300      	movs	r3, #0
 8009f28:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d101      	bne.n	8009f34 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009f30:	2303      	movs	r3, #3
 8009f32:	e0bf      	b.n	800a0b4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d050      	beq.n	8009fe2 <USBD_CDC_Setup+0xde>
 8009f40:	2b20      	cmp	r3, #32
 8009f42:	f040 80af 	bne.w	800a0a4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	88db      	ldrh	r3, [r3, #6]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d03a      	beq.n	8009fc4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	b25b      	sxtb	r3, r3
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	da1b      	bge.n	8009f90 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	33b0      	adds	r3, #176	@ 0xb0
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4413      	add	r3, r2
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	683a      	ldr	r2, [r7, #0]
 8009f6c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009f6e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f70:	683a      	ldr	r2, [r7, #0]
 8009f72:	88d2      	ldrh	r2, [r2, #6]
 8009f74:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	88db      	ldrh	r3, [r3, #6]
 8009f7a:	2b07      	cmp	r3, #7
 8009f7c:	bf28      	it	cs
 8009f7e:	2307      	movcs	r3, #7
 8009f80:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	89fa      	ldrh	r2, [r7, #14]
 8009f86:	4619      	mov	r1, r3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f001 fdbd 	bl	800bb08 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009f8e:	e090      	b.n	800a0b2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	785a      	ldrb	r2, [r3, #1]
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	88db      	ldrh	r3, [r3, #6]
 8009f9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8009fa0:	d803      	bhi.n	8009faa <USBD_CDC_Setup+0xa6>
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	88db      	ldrh	r3, [r3, #6]
 8009fa6:	b2da      	uxtb	r2, r3
 8009fa8:	e000      	b.n	8009fac <USBD_CDC_Setup+0xa8>
 8009faa:	2240      	movs	r2, #64	@ 0x40
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009fb2:	6939      	ldr	r1, [r7, #16]
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009fba:	461a      	mov	r2, r3
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f001 fdcf 	bl	800bb60 <USBD_CtlPrepareRx>
      break;
 8009fc2:	e076      	b.n	800a0b2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	33b0      	adds	r3, #176	@ 0xb0
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	4413      	add	r3, r2
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	683a      	ldr	r2, [r7, #0]
 8009fd8:	7850      	ldrb	r0, [r2, #1]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	6839      	ldr	r1, [r7, #0]
 8009fde:	4798      	blx	r3
      break;
 8009fe0:	e067      	b.n	800a0b2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	785b      	ldrb	r3, [r3, #1]
 8009fe6:	2b0b      	cmp	r3, #11
 8009fe8:	d851      	bhi.n	800a08e <USBD_CDC_Setup+0x18a>
 8009fea:	a201      	add	r2, pc, #4	@ (adr r2, 8009ff0 <USBD_CDC_Setup+0xec>)
 8009fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff0:	0800a021 	.word	0x0800a021
 8009ff4:	0800a09d 	.word	0x0800a09d
 8009ff8:	0800a08f 	.word	0x0800a08f
 8009ffc:	0800a08f 	.word	0x0800a08f
 800a000:	0800a08f 	.word	0x0800a08f
 800a004:	0800a08f 	.word	0x0800a08f
 800a008:	0800a08f 	.word	0x0800a08f
 800a00c:	0800a08f 	.word	0x0800a08f
 800a010:	0800a08f 	.word	0x0800a08f
 800a014:	0800a08f 	.word	0x0800a08f
 800a018:	0800a04b 	.word	0x0800a04b
 800a01c:	0800a075 	.word	0x0800a075
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a026:	b2db      	uxtb	r3, r3
 800a028:	2b03      	cmp	r3, #3
 800a02a:	d107      	bne.n	800a03c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a02c:	f107 030a 	add.w	r3, r7, #10
 800a030:	2202      	movs	r2, #2
 800a032:	4619      	mov	r1, r3
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f001 fd67 	bl	800bb08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a03a:	e032      	b.n	800a0a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a03c:	6839      	ldr	r1, [r7, #0]
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f001 fce5 	bl	800ba0e <USBD_CtlError>
            ret = USBD_FAIL;
 800a044:	2303      	movs	r3, #3
 800a046:	75fb      	strb	r3, [r7, #23]
          break;
 800a048:	e02b      	b.n	800a0a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a050:	b2db      	uxtb	r3, r3
 800a052:	2b03      	cmp	r3, #3
 800a054:	d107      	bne.n	800a066 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a056:	f107 030d 	add.w	r3, r7, #13
 800a05a:	2201      	movs	r2, #1
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f001 fd52 	bl	800bb08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a064:	e01d      	b.n	800a0a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a066:	6839      	ldr	r1, [r7, #0]
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f001 fcd0 	bl	800ba0e <USBD_CtlError>
            ret = USBD_FAIL;
 800a06e:	2303      	movs	r3, #3
 800a070:	75fb      	strb	r3, [r7, #23]
          break;
 800a072:	e016      	b.n	800a0a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	2b03      	cmp	r3, #3
 800a07e:	d00f      	beq.n	800a0a0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a080:	6839      	ldr	r1, [r7, #0]
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f001 fcc3 	bl	800ba0e <USBD_CtlError>
            ret = USBD_FAIL;
 800a088:	2303      	movs	r3, #3
 800a08a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a08c:	e008      	b.n	800a0a0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a08e:	6839      	ldr	r1, [r7, #0]
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f001 fcbc 	bl	800ba0e <USBD_CtlError>
          ret = USBD_FAIL;
 800a096:	2303      	movs	r3, #3
 800a098:	75fb      	strb	r3, [r7, #23]
          break;
 800a09a:	e002      	b.n	800a0a2 <USBD_CDC_Setup+0x19e>
          break;
 800a09c:	bf00      	nop
 800a09e:	e008      	b.n	800a0b2 <USBD_CDC_Setup+0x1ae>
          break;
 800a0a0:	bf00      	nop
      }
      break;
 800a0a2:	e006      	b.n	800a0b2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a0a4:	6839      	ldr	r1, [r7, #0]
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f001 fcb1 	bl	800ba0e <USBD_CtlError>
      ret = USBD_FAIL;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a0b0:	bf00      	nop
  }

  return (uint8_t)ret;
 800a0b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3718      	adds	r7, #24
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a0ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	32b0      	adds	r2, #176	@ 0xb0
 800a0da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	e065      	b.n	800a1b2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	32b0      	adds	r2, #176	@ 0xb0
 800a0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a0f6:	78fb      	ldrb	r3, [r7, #3]
 800a0f8:	f003 020f 	and.w	r2, r3, #15
 800a0fc:	6879      	ldr	r1, [r7, #4]
 800a0fe:	4613      	mov	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	440b      	add	r3, r1
 800a108:	3318      	adds	r3, #24
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d02f      	beq.n	800a170 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a110:	78fb      	ldrb	r3, [r7, #3]
 800a112:	f003 020f 	and.w	r2, r3, #15
 800a116:	6879      	ldr	r1, [r7, #4]
 800a118:	4613      	mov	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4413      	add	r3, r2
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	440b      	add	r3, r1
 800a122:	3318      	adds	r3, #24
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	78fb      	ldrb	r3, [r7, #3]
 800a128:	f003 010f 	and.w	r1, r3, #15
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	460b      	mov	r3, r1
 800a130:	00db      	lsls	r3, r3, #3
 800a132:	440b      	add	r3, r1
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	4403      	add	r3, r0
 800a138:	331c      	adds	r3, #28
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a140:	fb01 f303 	mul.w	r3, r1, r3
 800a144:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a146:	2b00      	cmp	r3, #0
 800a148:	d112      	bne.n	800a170 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a14a:	78fb      	ldrb	r3, [r7, #3]
 800a14c:	f003 020f 	and.w	r2, r3, #15
 800a150:	6879      	ldr	r1, [r7, #4]
 800a152:	4613      	mov	r3, r2
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	4413      	add	r3, r2
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	440b      	add	r3, r1
 800a15c:	3318      	adds	r3, #24
 800a15e:	2200      	movs	r2, #0
 800a160:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a162:	78f9      	ldrb	r1, [r7, #3]
 800a164:	2300      	movs	r3, #0
 800a166:	2200      	movs	r2, #0
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f012 fe9c 	bl	801cea6 <USBD_LL_Transmit>
 800a16e:	e01f      	b.n	800a1b0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	2200      	movs	r2, #0
 800a174:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	33b0      	adds	r3, #176	@ 0xb0
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	4413      	add	r3, r2
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d010      	beq.n	800a1b0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	33b0      	adds	r3, #176	@ 0xb0
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4413      	add	r3, r2
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a1a6:	68ba      	ldr	r2, [r7, #8]
 800a1a8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a1ac:	78fa      	ldrb	r2, [r7, #3]
 800a1ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b084      	sub	sp, #16
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	32b0      	adds	r2, #176	@ 0xb0
 800a1d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	32b0      	adds	r2, #176	@ 0xb0
 800a1e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d101      	bne.n	800a1ec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	e01a      	b.n	800a222 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a1ec:	78fb      	ldrb	r3, [r7, #3]
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f012 fe9a 	bl	801cf2a <USBD_LL_GetRxDataSize>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	33b0      	adds	r3, #176	@ 0xb0
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	4413      	add	r3, r2
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a21c:	4611      	mov	r1, r2
 800a21e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	32b0      	adds	r2, #176	@ 0xb0
 800a23c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a240:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d101      	bne.n	800a24c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a248:	2303      	movs	r3, #3
 800a24a:	e024      	b.n	800a296 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	33b0      	adds	r3, #176	@ 0xb0
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4413      	add	r3, r2
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d019      	beq.n	800a294 <USBD_CDC_EP0_RxReady+0x6a>
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a266:	2bff      	cmp	r3, #255	@ 0xff
 800a268:	d014      	beq.n	800a294 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	33b0      	adds	r3, #176	@ 0xb0
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	4413      	add	r3, r2
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a282:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a28a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	22ff      	movs	r2, #255	@ 0xff
 800a290:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
	...

0800a2a0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2a8:	2182      	movs	r1, #130	@ 0x82
 800a2aa:	4818      	ldr	r0, [pc, #96]	@ (800a30c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a2ac:	f000 fd4f 	bl	800ad4e <USBD_GetEpDesc>
 800a2b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a2b2:	2101      	movs	r1, #1
 800a2b4:	4815      	ldr	r0, [pc, #84]	@ (800a30c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a2b6:	f000 fd4a 	bl	800ad4e <USBD_GetEpDesc>
 800a2ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a2bc:	2181      	movs	r1, #129	@ 0x81
 800a2be:	4813      	ldr	r0, [pc, #76]	@ (800a30c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a2c0:	f000 fd45 	bl	800ad4e <USBD_GetEpDesc>
 800a2c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d002      	beq.n	800a2d2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	2210      	movs	r2, #16
 800a2d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d006      	beq.n	800a2e6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2e0:	711a      	strb	r2, [r3, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d006      	beq.n	800a2fa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2f4:	711a      	strb	r2, [r3, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2243      	movs	r2, #67	@ 0x43
 800a2fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a300:	4b02      	ldr	r3, [pc, #8]	@ (800a30c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a302:	4618      	mov	r0, r3
 800a304:	3718      	adds	r7, #24
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	20000064 	.word	0x20000064

0800a310 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a318:	2182      	movs	r1, #130	@ 0x82
 800a31a:	4818      	ldr	r0, [pc, #96]	@ (800a37c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a31c:	f000 fd17 	bl	800ad4e <USBD_GetEpDesc>
 800a320:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a322:	2101      	movs	r1, #1
 800a324:	4815      	ldr	r0, [pc, #84]	@ (800a37c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a326:	f000 fd12 	bl	800ad4e <USBD_GetEpDesc>
 800a32a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a32c:	2181      	movs	r1, #129	@ 0x81
 800a32e:	4813      	ldr	r0, [pc, #76]	@ (800a37c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a330:	f000 fd0d 	bl	800ad4e <USBD_GetEpDesc>
 800a334:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	2210      	movs	r2, #16
 800a340:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d006      	beq.n	800a356 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	2200      	movs	r2, #0
 800a34c:	711a      	strb	r2, [r3, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	f042 0202 	orr.w	r2, r2, #2
 800a354:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d006      	beq.n	800a36a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	711a      	strb	r2, [r3, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	f042 0202 	orr.w	r2, r2, #2
 800a368:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2243      	movs	r2, #67	@ 0x43
 800a36e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a370:	4b02      	ldr	r3, [pc, #8]	@ (800a37c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a372:	4618      	mov	r0, r3
 800a374:	3718      	adds	r7, #24
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	20000064 	.word	0x20000064

0800a380 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b086      	sub	sp, #24
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a388:	2182      	movs	r1, #130	@ 0x82
 800a38a:	4818      	ldr	r0, [pc, #96]	@ (800a3ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a38c:	f000 fcdf 	bl	800ad4e <USBD_GetEpDesc>
 800a390:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a392:	2101      	movs	r1, #1
 800a394:	4815      	ldr	r0, [pc, #84]	@ (800a3ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a396:	f000 fcda 	bl	800ad4e <USBD_GetEpDesc>
 800a39a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a39c:	2181      	movs	r1, #129	@ 0x81
 800a39e:	4813      	ldr	r0, [pc, #76]	@ (800a3ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a3a0:	f000 fcd5 	bl	800ad4e <USBD_GetEpDesc>
 800a3a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	2210      	movs	r2, #16
 800a3b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d006      	beq.n	800a3c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a3c0:	711a      	strb	r2, [r3, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d006      	beq.n	800a3da <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a3d4:	711a      	strb	r2, [r3, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2243      	movs	r2, #67	@ 0x43
 800a3de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a3e0:	4b02      	ldr	r3, [pc, #8]	@ (800a3ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3718      	adds	r7, #24
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20000064 	.word	0x20000064

0800a3f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	220a      	movs	r2, #10
 800a3fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a3fe:	4b03      	ldr	r3, [pc, #12]	@ (800a40c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a400:	4618      	mov	r0, r3
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr
 800a40c:	20000020 	.word	0x20000020

0800a410 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d101      	bne.n	800a424 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a420:	2303      	movs	r3, #3
 800a422:	e009      	b.n	800a438 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	33b0      	adds	r3, #176	@ 0xb0
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	4413      	add	r3, r2
 800a432:	683a      	ldr	r2, [r7, #0]
 800a434:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a444:	b480      	push	{r7}
 800a446:	b087      	sub	sp, #28
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	32b0      	adds	r2, #176	@ 0xb0
 800a45a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a45e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d101      	bne.n	800a46a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a466:	2303      	movs	r3, #3
 800a468:	e008      	b.n	800a47c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	371c      	adds	r7, #28
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	32b0      	adds	r2, #176	@ 0xb0
 800a49c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	e004      	b.n	800a4b6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	683a      	ldr	r2, [r7, #0]
 800a4b0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
	...

0800a4c4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	32b0      	adds	r2, #176	@ 0xb0
 800a4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4da:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d101      	bne.n	800a4ea <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	e025      	b.n	800a536 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d11f      	bne.n	800a534 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a4fc:	4b10      	ldr	r3, [pc, #64]	@ (800a540 <USBD_CDC_TransmitPacket+0x7c>)
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	f003 020f 	and.w	r2, r3, #15
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	4613      	mov	r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	4413      	add	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4403      	add	r3, r0
 800a516:	3318      	adds	r3, #24
 800a518:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a51a:	4b09      	ldr	r3, [pc, #36]	@ (800a540 <USBD_CDC_TransmitPacket+0x7c>)
 800a51c:	7819      	ldrb	r1, [r3, #0]
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f012 fcbb 	bl	801cea6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a534:	7bfb      	ldrb	r3, [r7, #15]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	200000a7 	.word	0x200000a7

0800a544 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	32b0      	adds	r2, #176	@ 0xb0
 800a556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a55a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	32b0      	adds	r2, #176	@ 0xb0
 800a566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d101      	bne.n	800a572 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a56e:	2303      	movs	r3, #3
 800a570:	e018      	b.n	800a5a4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	7c1b      	ldrb	r3, [r3, #16]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10a      	bne.n	800a590 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a57a:	4b0c      	ldr	r3, [pc, #48]	@ (800a5ac <USBD_CDC_ReceivePacket+0x68>)
 800a57c:	7819      	ldrb	r1, [r3, #0]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a584:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f012 fcad 	bl	801cee8 <USBD_LL_PrepareReceive>
 800a58e:	e008      	b.n	800a5a2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a590:	4b06      	ldr	r3, [pc, #24]	@ (800a5ac <USBD_CDC_ReceivePacket+0x68>)
 800a592:	7819      	ldrb	r1, [r3, #0]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a59a:	2340      	movs	r3, #64	@ 0x40
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f012 fca3 	bl	801cee8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	200000a8 	.word	0x200000a8

0800a5b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d101      	bne.n	800a5c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	e01f      	b.n	800a608 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d003      	beq.n	800a5ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	79fa      	ldrb	r2, [r7, #7]
 800a5fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a5fc:	68f8      	ldr	r0, [r7, #12]
 800a5fe:	f012 fb1d 	bl	801cc3c <USBD_LL_Init>
 800a602:	4603      	mov	r3, r0
 800a604:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a606:	7dfb      	ldrb	r3, [r7, #23]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3718      	adds	r7, #24
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a61a:	2300      	movs	r3, #0
 800a61c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d101      	bne.n	800a628 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a624:	2303      	movs	r3, #3
 800a626:	e025      	b.n	800a674 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	32ae      	adds	r2, #174	@ 0xae
 800a63a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a63e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a640:	2b00      	cmp	r3, #0
 800a642:	d00f      	beq.n	800a664 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	32ae      	adds	r2, #174	@ 0xae
 800a64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a654:	f107 020e 	add.w	r2, r7, #14
 800a658:	4610      	mov	r0, r2
 800a65a:	4798      	blx	r3
 800a65c:	4602      	mov	r2, r0
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a66a:	1c5a      	adds	r2, r3, #1
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a672:	2300      	movs	r3, #0
}
 800a674:	4618      	mov	r0, r3
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f012 fb25 	bl	801ccd4 <USBD_LL_Start>
 800a68a:	4603      	mov	r3, r0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a69c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	370c      	adds	r7, #12
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b084      	sub	sp, #16
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d009      	beq.n	800a6d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	78fa      	ldrb	r2, [r7, #3]
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	4798      	blx	r3
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a6d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b084      	sub	sp, #16
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	78fa      	ldrb	r2, [r7, #3]
 800a6fc:	4611      	mov	r1, r2
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	4798      	blx	r3
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d001      	beq.n	800a70c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a708:	2303      	movs	r3, #3
 800a70a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b084      	sub	sp, #16
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a726:	6839      	ldr	r1, [r7, #0]
 800a728:	4618      	mov	r0, r3
 800a72a:	f001 f936 	bl	800b99a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2201      	movs	r2, #1
 800a732:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a73c:	461a      	mov	r2, r3
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a74a:	f003 031f 	and.w	r3, r3, #31
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d01a      	beq.n	800a788 <USBD_LL_SetupStage+0x72>
 800a752:	2b02      	cmp	r3, #2
 800a754:	d822      	bhi.n	800a79c <USBD_LL_SetupStage+0x86>
 800a756:	2b00      	cmp	r3, #0
 800a758:	d002      	beq.n	800a760 <USBD_LL_SetupStage+0x4a>
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d00a      	beq.n	800a774 <USBD_LL_SetupStage+0x5e>
 800a75e:	e01d      	b.n	800a79c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a766:	4619      	mov	r1, r3
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 fb63 	bl	800ae34 <USBD_StdDevReq>
 800a76e:	4603      	mov	r3, r0
 800a770:	73fb      	strb	r3, [r7, #15]
      break;
 800a772:	e020      	b.n	800a7b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a77a:	4619      	mov	r1, r3
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 fbcb 	bl	800af18 <USBD_StdItfReq>
 800a782:	4603      	mov	r3, r0
 800a784:	73fb      	strb	r3, [r7, #15]
      break;
 800a786:	e016      	b.n	800a7b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a78e:	4619      	mov	r1, r3
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 fc2d 	bl	800aff0 <USBD_StdEPReq>
 800a796:	4603      	mov	r3, r0
 800a798:	73fb      	strb	r3, [r7, #15]
      break;
 800a79a:	e00c      	b.n	800a7b6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a7a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f012 faf2 	bl	801cd94 <USBD_LL_StallEP>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a7b4:	bf00      	nop
  }

  return ret;
 800a7b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3710      	adds	r7, #16
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	607a      	str	r2, [r7, #4]
 800a7cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a7d2:	7afb      	ldrb	r3, [r7, #11]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d16e      	bne.n	800a8b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a7de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a7e6:	2b03      	cmp	r3, #3
 800a7e8:	f040 8098 	bne.w	800a91c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	689a      	ldr	r2, [r3, #8]
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d913      	bls.n	800a820 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	689a      	ldr	r2, [r3, #8]
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	1ad2      	subs	r2, r2, r3
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	68da      	ldr	r2, [r3, #12]
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	4293      	cmp	r3, r2
 800a810:	bf28      	it	cs
 800a812:	4613      	movcs	r3, r2
 800a814:	461a      	mov	r2, r3
 800a816:	6879      	ldr	r1, [r7, #4]
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	f001 f9be 	bl	800bb9a <USBD_CtlContinueRx>
 800a81e:	e07d      	b.n	800a91c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a826:	f003 031f 	and.w	r3, r3, #31
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d014      	beq.n	800a858 <USBD_LL_DataOutStage+0x98>
 800a82e:	2b02      	cmp	r3, #2
 800a830:	d81d      	bhi.n	800a86e <USBD_LL_DataOutStage+0xae>
 800a832:	2b00      	cmp	r3, #0
 800a834:	d002      	beq.n	800a83c <USBD_LL_DataOutStage+0x7c>
 800a836:	2b01      	cmp	r3, #1
 800a838:	d003      	beq.n	800a842 <USBD_LL_DataOutStage+0x82>
 800a83a:	e018      	b.n	800a86e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a83c:	2300      	movs	r3, #0
 800a83e:	75bb      	strb	r3, [r7, #22]
            break;
 800a840:	e018      	b.n	800a874 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	4619      	mov	r1, r3
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f000 fa64 	bl	800ad1a <USBD_CoreFindIF>
 800a852:	4603      	mov	r3, r0
 800a854:	75bb      	strb	r3, [r7, #22]
            break;
 800a856:	e00d      	b.n	800a874 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	4619      	mov	r1, r3
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f000 fa66 	bl	800ad34 <USBD_CoreFindEP>
 800a868:	4603      	mov	r3, r0
 800a86a:	75bb      	strb	r3, [r7, #22]
            break;
 800a86c:	e002      	b.n	800a874 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a86e:	2300      	movs	r3, #0
 800a870:	75bb      	strb	r3, [r7, #22]
            break;
 800a872:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a874:	7dbb      	ldrb	r3, [r7, #22]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d119      	bne.n	800a8ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a880:	b2db      	uxtb	r3, r3
 800a882:	2b03      	cmp	r3, #3
 800a884:	d113      	bne.n	800a8ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a886:	7dba      	ldrb	r2, [r7, #22]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	32ae      	adds	r2, #174	@ 0xae
 800a88c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00b      	beq.n	800a8ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a896:	7dba      	ldrb	r2, [r7, #22]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a89e:	7dba      	ldrb	r2, [r7, #22]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	32ae      	adds	r2, #174	@ 0xae
 800a8a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f001 f984 	bl	800bbbc <USBD_CtlSendStatus>
 800a8b4:	e032      	b.n	800a91c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a8b6:	7afb      	ldrb	r3, [r7, #11]
 800a8b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	4619      	mov	r1, r3
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f000 fa37 	bl	800ad34 <USBD_CoreFindEP>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8ca:	7dbb      	ldrb	r3, [r7, #22]
 800a8cc:	2bff      	cmp	r3, #255	@ 0xff
 800a8ce:	d025      	beq.n	800a91c <USBD_LL_DataOutStage+0x15c>
 800a8d0:	7dbb      	ldrb	r3, [r7, #22]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d122      	bne.n	800a91c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	2b03      	cmp	r3, #3
 800a8e0:	d117      	bne.n	800a912 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a8e2:	7dba      	ldrb	r2, [r7, #22]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	32ae      	adds	r2, #174	@ 0xae
 800a8e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ec:	699b      	ldr	r3, [r3, #24]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00f      	beq.n	800a912 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a8f2:	7dba      	ldrb	r2, [r7, #22]
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a8fa:	7dba      	ldrb	r2, [r7, #22]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	32ae      	adds	r2, #174	@ 0xae
 800a900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	7afa      	ldrb	r2, [r7, #11]
 800a908:	4611      	mov	r1, r2
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	4798      	blx	r3
 800a90e:	4603      	mov	r3, r0
 800a910:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a912:	7dfb      	ldrb	r3, [r7, #23]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d001      	beq.n	800a91c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a918:	7dfb      	ldrb	r3, [r7, #23]
 800a91a:	e000      	b.n	800a91e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3718      	adds	r7, #24
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a926:	b580      	push	{r7, lr}
 800a928:	b086      	sub	sp, #24
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	60f8      	str	r0, [r7, #12]
 800a92e:	460b      	mov	r3, r1
 800a930:	607a      	str	r2, [r7, #4]
 800a932:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a934:	7afb      	ldrb	r3, [r7, #11]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d16f      	bne.n	800aa1a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	3314      	adds	r3, #20
 800a93e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a946:	2b02      	cmp	r3, #2
 800a948:	d15a      	bne.n	800aa00 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	689a      	ldr	r2, [r3, #8]
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	429a      	cmp	r2, r3
 800a954:	d914      	bls.n	800a980 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	689a      	ldr	r2, [r3, #8]
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	1ad2      	subs	r2, r2, r3
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	461a      	mov	r2, r3
 800a96a:	6879      	ldr	r1, [r7, #4]
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f001 f8e6 	bl	800bb3e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a972:	2300      	movs	r3, #0
 800a974:	2200      	movs	r2, #0
 800a976:	2100      	movs	r1, #0
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f012 fab5 	bl	801cee8 <USBD_LL_PrepareReceive>
 800a97e:	e03f      	b.n	800aa00 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	68da      	ldr	r2, [r3, #12]
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d11c      	bne.n	800a9c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	685a      	ldr	r2, [r3, #4]
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a994:	429a      	cmp	r2, r3
 800a996:	d316      	bcc.n	800a9c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	685a      	ldr	r2, [r3, #4]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d20f      	bcs.n	800a9c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	f001 f8c7 	bl	800bb3e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	2100      	movs	r1, #0
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f012 fa92 	bl	801cee8 <USBD_LL_PrepareReceive>
 800a9c4:	e01c      	b.n	800aa00 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	2b03      	cmp	r3, #3
 800a9d0:	d10f      	bne.n	800a9f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d009      	beq.n	800a9f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9f2:	2180      	movs	r1, #128	@ 0x80
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f012 f9cd 	bl	801cd94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f001 f8f1 	bl	800bbe2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d03a      	beq.n	800aa80 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f7ff fe42 	bl	800a694 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800aa18:	e032      	b.n	800aa80 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800aa1a:	7afb      	ldrb	r3, [r7, #11]
 800aa1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	4619      	mov	r1, r3
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f000 f985 	bl	800ad34 <USBD_CoreFindEP>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa2e:	7dfb      	ldrb	r3, [r7, #23]
 800aa30:	2bff      	cmp	r3, #255	@ 0xff
 800aa32:	d025      	beq.n	800aa80 <USBD_LL_DataInStage+0x15a>
 800aa34:	7dfb      	ldrb	r3, [r7, #23]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d122      	bne.n	800aa80 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	2b03      	cmp	r3, #3
 800aa44:	d11c      	bne.n	800aa80 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800aa46:	7dfa      	ldrb	r2, [r7, #23]
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	32ae      	adds	r2, #174	@ 0xae
 800aa4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa50:	695b      	ldr	r3, [r3, #20]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d014      	beq.n	800aa80 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800aa56:	7dfa      	ldrb	r2, [r7, #23]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800aa5e:	7dfa      	ldrb	r2, [r7, #23]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	32ae      	adds	r2, #174	@ 0xae
 800aa64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa68:	695b      	ldr	r3, [r3, #20]
 800aa6a:	7afa      	ldrb	r2, [r7, #11]
 800aa6c:	4611      	mov	r1, r2
 800aa6e:	68f8      	ldr	r0, [r7, #12]
 800aa70:	4798      	blx	r3
 800aa72:	4603      	mov	r3, r0
 800aa74:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aa76:	7dbb      	ldrb	r3, [r7, #22]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d001      	beq.n	800aa80 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800aa7c:	7dbb      	ldrb	r3, [r7, #22]
 800aa7e:	e000      	b.n	800aa82 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3718      	adds	r7, #24
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b084      	sub	sp, #16
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2201      	movs	r2, #1
 800aa9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d014      	beq.n	800aaf0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00e      	beq.n	800aaf0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	6852      	ldr	r2, [r2, #4]
 800aade:	b2d2      	uxtb	r2, r2
 800aae0:	4611      	mov	r1, r2
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	4798      	blx	r3
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d001      	beq.n	800aaf0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aaec:	2303      	movs	r3, #3
 800aaee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aaf0:	2340      	movs	r3, #64	@ 0x40
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	2100      	movs	r1, #0
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f012 f907 	bl	801cd0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2240      	movs	r2, #64	@ 0x40
 800ab08:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab0c:	2340      	movs	r3, #64	@ 0x40
 800ab0e:	2200      	movs	r2, #0
 800ab10:	2180      	movs	r1, #128	@ 0x80
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f012 f8f9 	bl	801cd0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2240      	movs	r2, #64	@ 0x40
 800ab22:	621a      	str	r2, [r3, #32]

  return ret;
 800ab24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ab2e:	b480      	push	{r7}
 800ab30:	b083      	sub	sp, #12
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
 800ab36:	460b      	mov	r3, r1
 800ab38:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	78fa      	ldrb	r2, [r7, #3]
 800ab3e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	370c      	adds	r7, #12
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr

0800ab4e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ab4e:	b480      	push	{r7}
 800ab50:	b083      	sub	sp, #12
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	2b04      	cmp	r3, #4
 800ab60:	d006      	beq.n	800ab70 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab68:	b2da      	uxtb	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2204      	movs	r2, #4
 800ab74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	370c      	adds	r7, #12
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr

0800ab86 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b083      	sub	sp, #12
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	2b04      	cmp	r3, #4
 800ab98:	d106      	bne.n	800aba8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800aba0:	b2da      	uxtb	r2, r3
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	370c      	adds	r7, #12
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr

0800abb6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b082      	sub	sp, #8
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	2b03      	cmp	r3, #3
 800abc8:	d110      	bne.n	800abec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00b      	beq.n	800abec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abda:	69db      	ldr	r3, [r3, #28]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d005      	beq.n	800abec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abe6:	69db      	ldr	r3, [r3, #28]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b082      	sub	sp, #8
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	460b      	mov	r3, r1
 800ac00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	32ae      	adds	r2, #174	@ 0xae
 800ac0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d101      	bne.n	800ac18 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ac14:	2303      	movs	r3, #3
 800ac16:	e01c      	b.n	800ac52 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	2b03      	cmp	r3, #3
 800ac22:	d115      	bne.n	800ac50 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	32ae      	adds	r2, #174	@ 0xae
 800ac2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac32:	6a1b      	ldr	r3, [r3, #32]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00b      	beq.n	800ac50 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	32ae      	adds	r2, #174	@ 0xae
 800ac42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac46:	6a1b      	ldr	r3, [r3, #32]
 800ac48:	78fa      	ldrb	r2, [r7, #3]
 800ac4a:	4611      	mov	r1, r2
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b082      	sub	sp, #8
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	460b      	mov	r3, r1
 800ac64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	32ae      	adds	r2, #174	@ 0xae
 800ac70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d101      	bne.n	800ac7c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ac78:	2303      	movs	r3, #3
 800ac7a:	e01c      	b.n	800acb6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	2b03      	cmp	r3, #3
 800ac86:	d115      	bne.n	800acb4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	32ae      	adds	r2, #174	@ 0xae
 800ac92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00b      	beq.n	800acb4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	32ae      	adds	r2, #174	@ 0xae
 800aca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acac:	78fa      	ldrb	r2, [r7, #3]
 800acae:	4611      	mov	r1, r2
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3708      	adds	r7, #8
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800acbe:	b480      	push	{r7}
 800acc0:	b083      	sub	sp, #12
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800acc6:	2300      	movs	r3, #0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800acdc:	2300      	movs	r3, #0
 800acde:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2201      	movs	r2, #1
 800ace4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00e      	beq.n	800ad10 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	6852      	ldr	r2, [r2, #4]
 800acfe:	b2d2      	uxtb	r2, r2
 800ad00:	4611      	mov	r1, r2
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	4798      	blx	r3
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d001      	beq.n	800ad10 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ad0c:	2303      	movs	r3, #3
 800ad0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3710      	adds	r7, #16
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ad1a:	b480      	push	{r7}
 800ad1c:	b083      	sub	sp, #12
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
 800ad22:	460b      	mov	r3, r1
 800ad24:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ad26:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ad40:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	370c      	adds	r7, #12
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b086      	sub	sp, #24
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	460b      	mov	r3, r1
 800ad58:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ad62:	2300      	movs	r3, #0
 800ad64:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	885b      	ldrh	r3, [r3, #2]
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	7812      	ldrb	r2, [r2, #0]
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d91f      	bls.n	800adb4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ad7a:	e013      	b.n	800ada4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ad7c:	f107 030a 	add.w	r3, r7, #10
 800ad80:	4619      	mov	r1, r3
 800ad82:	6978      	ldr	r0, [r7, #20]
 800ad84:	f000 f81b 	bl	800adbe <USBD_GetNextDesc>
 800ad88:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	785b      	ldrb	r3, [r3, #1]
 800ad8e:	2b05      	cmp	r3, #5
 800ad90:	d108      	bne.n	800ada4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	789b      	ldrb	r3, [r3, #2]
 800ad9a:	78fa      	ldrb	r2, [r7, #3]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d008      	beq.n	800adb2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ada0:	2300      	movs	r3, #0
 800ada2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	885b      	ldrh	r3, [r3, #2]
 800ada8:	b29a      	uxth	r2, r3
 800adaa:	897b      	ldrh	r3, [r7, #10]
 800adac:	429a      	cmp	r2, r3
 800adae:	d8e5      	bhi.n	800ad7c <USBD_GetEpDesc+0x2e>
 800adb0:	e000      	b.n	800adb4 <USBD_GetEpDesc+0x66>
          break;
 800adb2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800adb4:	693b      	ldr	r3, [r7, #16]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3718      	adds	r7, #24
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800adbe:	b480      	push	{r7}
 800adc0:	b085      	sub	sp, #20
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
 800adc6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	881b      	ldrh	r3, [r3, #0]
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	7812      	ldrb	r2, [r2, #0]
 800add4:	4413      	add	r3, r2
 800add6:	b29a      	uxth	r2, r3
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	461a      	mov	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4413      	add	r3, r2
 800ade6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ade8:	68fb      	ldr	r3, [r7, #12]
}
 800adea:	4618      	mov	r0, r3
 800adec:	3714      	adds	r7, #20
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr

0800adf6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b087      	sub	sp, #28
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ae14:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ae18:	021b      	lsls	r3, r3, #8
 800ae1a:	b21a      	sxth	r2, r3
 800ae1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	b21b      	sxth	r3, r3
 800ae24:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ae26:	89fb      	ldrh	r3, [r7, #14]
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	371c      	adds	r7, #28
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae4a:	2b40      	cmp	r3, #64	@ 0x40
 800ae4c:	d005      	beq.n	800ae5a <USBD_StdDevReq+0x26>
 800ae4e:	2b40      	cmp	r3, #64	@ 0x40
 800ae50:	d857      	bhi.n	800af02 <USBD_StdDevReq+0xce>
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00f      	beq.n	800ae76 <USBD_StdDevReq+0x42>
 800ae56:	2b20      	cmp	r3, #32
 800ae58:	d153      	bne.n	800af02 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	32ae      	adds	r2, #174	@ 0xae
 800ae64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	6839      	ldr	r1, [r7, #0]
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	4798      	blx	r3
 800ae70:	4603      	mov	r3, r0
 800ae72:	73fb      	strb	r3, [r7, #15]
      break;
 800ae74:	e04a      	b.n	800af0c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	785b      	ldrb	r3, [r3, #1]
 800ae7a:	2b09      	cmp	r3, #9
 800ae7c:	d83b      	bhi.n	800aef6 <USBD_StdDevReq+0xc2>
 800ae7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ae84 <USBD_StdDevReq+0x50>)
 800ae80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae84:	0800aed9 	.word	0x0800aed9
 800ae88:	0800aeed 	.word	0x0800aeed
 800ae8c:	0800aef7 	.word	0x0800aef7
 800ae90:	0800aee3 	.word	0x0800aee3
 800ae94:	0800aef7 	.word	0x0800aef7
 800ae98:	0800aeb7 	.word	0x0800aeb7
 800ae9c:	0800aead 	.word	0x0800aead
 800aea0:	0800aef7 	.word	0x0800aef7
 800aea4:	0800aecf 	.word	0x0800aecf
 800aea8:	0800aec1 	.word	0x0800aec1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aeac:	6839      	ldr	r1, [r7, #0]
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 fa3c 	bl	800b32c <USBD_GetDescriptor>
          break;
 800aeb4:	e024      	b.n	800af00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aeb6:	6839      	ldr	r1, [r7, #0]
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 fbcb 	bl	800b654 <USBD_SetAddress>
          break;
 800aebe:	e01f      	b.n	800af00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aec0:	6839      	ldr	r1, [r7, #0]
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 fc0a 	bl	800b6dc <USBD_SetConfig>
 800aec8:	4603      	mov	r3, r0
 800aeca:	73fb      	strb	r3, [r7, #15]
          break;
 800aecc:	e018      	b.n	800af00 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aece:	6839      	ldr	r1, [r7, #0]
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 fcad 	bl	800b830 <USBD_GetConfig>
          break;
 800aed6:	e013      	b.n	800af00 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aed8:	6839      	ldr	r1, [r7, #0]
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 fcde 	bl	800b89c <USBD_GetStatus>
          break;
 800aee0:	e00e      	b.n	800af00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aee2:	6839      	ldr	r1, [r7, #0]
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fd0d 	bl	800b904 <USBD_SetFeature>
          break;
 800aeea:	e009      	b.n	800af00 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aeec:	6839      	ldr	r1, [r7, #0]
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fd31 	bl	800b956 <USBD_ClrFeature>
          break;
 800aef4:	e004      	b.n	800af00 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fd88 	bl	800ba0e <USBD_CtlError>
          break;
 800aefe:	bf00      	nop
      }
      break;
 800af00:	e004      	b.n	800af0c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800af02:	6839      	ldr	r1, [r7, #0]
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 fd82 	bl	800ba0e <USBD_CtlError>
      break;
 800af0a:	bf00      	nop
  }

  return ret;
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop

0800af18 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af22:	2300      	movs	r3, #0
 800af24:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af2e:	2b40      	cmp	r3, #64	@ 0x40
 800af30:	d005      	beq.n	800af3e <USBD_StdItfReq+0x26>
 800af32:	2b40      	cmp	r3, #64	@ 0x40
 800af34:	d852      	bhi.n	800afdc <USBD_StdItfReq+0xc4>
 800af36:	2b00      	cmp	r3, #0
 800af38:	d001      	beq.n	800af3e <USBD_StdItfReq+0x26>
 800af3a:	2b20      	cmp	r3, #32
 800af3c:	d14e      	bne.n	800afdc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af44:	b2db      	uxtb	r3, r3
 800af46:	3b01      	subs	r3, #1
 800af48:	2b02      	cmp	r3, #2
 800af4a:	d840      	bhi.n	800afce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	889b      	ldrh	r3, [r3, #4]
 800af50:	b2db      	uxtb	r3, r3
 800af52:	2b01      	cmp	r3, #1
 800af54:	d836      	bhi.n	800afc4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	889b      	ldrh	r3, [r3, #4]
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	4619      	mov	r1, r3
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f7ff fedb 	bl	800ad1a <USBD_CoreFindIF>
 800af64:	4603      	mov	r3, r0
 800af66:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af68:	7bbb      	ldrb	r3, [r7, #14]
 800af6a:	2bff      	cmp	r3, #255	@ 0xff
 800af6c:	d01d      	beq.n	800afaa <USBD_StdItfReq+0x92>
 800af6e:	7bbb      	ldrb	r3, [r7, #14]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d11a      	bne.n	800afaa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800af74:	7bba      	ldrb	r2, [r7, #14]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	32ae      	adds	r2, #174	@ 0xae
 800af7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d00f      	beq.n	800afa4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800af84:	7bba      	ldrb	r2, [r7, #14]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800af8c:	7bba      	ldrb	r2, [r7, #14]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	32ae      	adds	r2, #174	@ 0xae
 800af92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	4798      	blx	r3
 800af9e:	4603      	mov	r3, r0
 800afa0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800afa2:	e004      	b.n	800afae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800afa4:	2303      	movs	r3, #3
 800afa6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800afa8:	e001      	b.n	800afae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800afaa:	2303      	movs	r3, #3
 800afac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	88db      	ldrh	r3, [r3, #6]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d110      	bne.n	800afd8 <USBD_StdItfReq+0xc0>
 800afb6:	7bfb      	ldrb	r3, [r7, #15]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10d      	bne.n	800afd8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 fdfd 	bl	800bbbc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800afc2:	e009      	b.n	800afd8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800afc4:	6839      	ldr	r1, [r7, #0]
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 fd21 	bl	800ba0e <USBD_CtlError>
          break;
 800afcc:	e004      	b.n	800afd8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800afce:	6839      	ldr	r1, [r7, #0]
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 fd1c 	bl	800ba0e <USBD_CtlError>
          break;
 800afd6:	e000      	b.n	800afda <USBD_StdItfReq+0xc2>
          break;
 800afd8:	bf00      	nop
      }
      break;
 800afda:	e004      	b.n	800afe6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800afdc:	6839      	ldr	r1, [r7, #0]
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 fd15 	bl	800ba0e <USBD_CtlError>
      break;
 800afe4:	bf00      	nop
  }

  return ret;
 800afe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800affa:	2300      	movs	r3, #0
 800affc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	889b      	ldrh	r3, [r3, #4]
 800b002:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b00c:	2b40      	cmp	r3, #64	@ 0x40
 800b00e:	d007      	beq.n	800b020 <USBD_StdEPReq+0x30>
 800b010:	2b40      	cmp	r3, #64	@ 0x40
 800b012:	f200 817f 	bhi.w	800b314 <USBD_StdEPReq+0x324>
 800b016:	2b00      	cmp	r3, #0
 800b018:	d02a      	beq.n	800b070 <USBD_StdEPReq+0x80>
 800b01a:	2b20      	cmp	r3, #32
 800b01c:	f040 817a 	bne.w	800b314 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b020:	7bbb      	ldrb	r3, [r7, #14]
 800b022:	4619      	mov	r1, r3
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f7ff fe85 	bl	800ad34 <USBD_CoreFindEP>
 800b02a:	4603      	mov	r3, r0
 800b02c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b02e:	7b7b      	ldrb	r3, [r7, #13]
 800b030:	2bff      	cmp	r3, #255	@ 0xff
 800b032:	f000 8174 	beq.w	800b31e <USBD_StdEPReq+0x32e>
 800b036:	7b7b      	ldrb	r3, [r7, #13]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f040 8170 	bne.w	800b31e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b03e:	7b7a      	ldrb	r2, [r7, #13]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b046:	7b7a      	ldrb	r2, [r7, #13]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	32ae      	adds	r2, #174	@ 0xae
 800b04c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	2b00      	cmp	r3, #0
 800b054:	f000 8163 	beq.w	800b31e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b058:	7b7a      	ldrb	r2, [r7, #13]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	32ae      	adds	r2, #174	@ 0xae
 800b05e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	6839      	ldr	r1, [r7, #0]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	4798      	blx	r3
 800b06a:	4603      	mov	r3, r0
 800b06c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b06e:	e156      	b.n	800b31e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	785b      	ldrb	r3, [r3, #1]
 800b074:	2b03      	cmp	r3, #3
 800b076:	d008      	beq.n	800b08a <USBD_StdEPReq+0x9a>
 800b078:	2b03      	cmp	r3, #3
 800b07a:	f300 8145 	bgt.w	800b308 <USBD_StdEPReq+0x318>
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f000 809b 	beq.w	800b1ba <USBD_StdEPReq+0x1ca>
 800b084:	2b01      	cmp	r3, #1
 800b086:	d03c      	beq.n	800b102 <USBD_StdEPReq+0x112>
 800b088:	e13e      	b.n	800b308 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b090:	b2db      	uxtb	r3, r3
 800b092:	2b02      	cmp	r3, #2
 800b094:	d002      	beq.n	800b09c <USBD_StdEPReq+0xac>
 800b096:	2b03      	cmp	r3, #3
 800b098:	d016      	beq.n	800b0c8 <USBD_StdEPReq+0xd8>
 800b09a:	e02c      	b.n	800b0f6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b09c:	7bbb      	ldrb	r3, [r7, #14]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00d      	beq.n	800b0be <USBD_StdEPReq+0xce>
 800b0a2:	7bbb      	ldrb	r3, [r7, #14]
 800b0a4:	2b80      	cmp	r3, #128	@ 0x80
 800b0a6:	d00a      	beq.n	800b0be <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0a8:	7bbb      	ldrb	r3, [r7, #14]
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f011 fe71 	bl	801cd94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0b2:	2180      	movs	r1, #128	@ 0x80
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f011 fe6d 	bl	801cd94 <USBD_LL_StallEP>
 800b0ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0bc:	e020      	b.n	800b100 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b0be:	6839      	ldr	r1, [r7, #0]
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fca4 	bl	800ba0e <USBD_CtlError>
              break;
 800b0c6:	e01b      	b.n	800b100 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	885b      	ldrh	r3, [r3, #2]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10e      	bne.n	800b0ee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b0d0:	7bbb      	ldrb	r3, [r7, #14]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00b      	beq.n	800b0ee <USBD_StdEPReq+0xfe>
 800b0d6:	7bbb      	ldrb	r3, [r7, #14]
 800b0d8:	2b80      	cmp	r3, #128	@ 0x80
 800b0da:	d008      	beq.n	800b0ee <USBD_StdEPReq+0xfe>
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	88db      	ldrh	r3, [r3, #6]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d104      	bne.n	800b0ee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f011 fe53 	bl	801cd94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 fd64 	bl	800bbbc <USBD_CtlSendStatus>

              break;
 800b0f4:	e004      	b.n	800b100 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fc88 	bl	800ba0e <USBD_CtlError>
              break;
 800b0fe:	bf00      	nop
          }
          break;
 800b100:	e107      	b.n	800b312 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	d002      	beq.n	800b114 <USBD_StdEPReq+0x124>
 800b10e:	2b03      	cmp	r3, #3
 800b110:	d016      	beq.n	800b140 <USBD_StdEPReq+0x150>
 800b112:	e04b      	b.n	800b1ac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b114:	7bbb      	ldrb	r3, [r7, #14]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00d      	beq.n	800b136 <USBD_StdEPReq+0x146>
 800b11a:	7bbb      	ldrb	r3, [r7, #14]
 800b11c:	2b80      	cmp	r3, #128	@ 0x80
 800b11e:	d00a      	beq.n	800b136 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b120:	7bbb      	ldrb	r3, [r7, #14]
 800b122:	4619      	mov	r1, r3
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f011 fe35 	bl	801cd94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b12a:	2180      	movs	r1, #128	@ 0x80
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f011 fe31 	bl	801cd94 <USBD_LL_StallEP>
 800b132:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b134:	e040      	b.n	800b1b8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 fc68 	bl	800ba0e <USBD_CtlError>
              break;
 800b13e:	e03b      	b.n	800b1b8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	885b      	ldrh	r3, [r3, #2]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d136      	bne.n	800b1b6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b148:	7bbb      	ldrb	r3, [r7, #14]
 800b14a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d004      	beq.n	800b15c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b152:	7bbb      	ldrb	r3, [r7, #14]
 800b154:	4619      	mov	r1, r3
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f011 fe3b 	bl	801cdd2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 fd2d 	bl	800bbbc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b162:	7bbb      	ldrb	r3, [r7, #14]
 800b164:	4619      	mov	r1, r3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f7ff fde4 	bl	800ad34 <USBD_CoreFindEP>
 800b16c:	4603      	mov	r3, r0
 800b16e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b170:	7b7b      	ldrb	r3, [r7, #13]
 800b172:	2bff      	cmp	r3, #255	@ 0xff
 800b174:	d01f      	beq.n	800b1b6 <USBD_StdEPReq+0x1c6>
 800b176:	7b7b      	ldrb	r3, [r7, #13]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d11c      	bne.n	800b1b6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b17c:	7b7a      	ldrb	r2, [r7, #13]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b184:	7b7a      	ldrb	r2, [r7, #13]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	32ae      	adds	r2, #174	@ 0xae
 800b18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d010      	beq.n	800b1b6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b194:	7b7a      	ldrb	r2, [r7, #13]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	32ae      	adds	r2, #174	@ 0xae
 800b19a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	6839      	ldr	r1, [r7, #0]
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	4798      	blx	r3
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b1aa:	e004      	b.n	800b1b6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b1ac:	6839      	ldr	r1, [r7, #0]
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fc2d 	bl	800ba0e <USBD_CtlError>
              break;
 800b1b4:	e000      	b.n	800b1b8 <USBD_StdEPReq+0x1c8>
              break;
 800b1b6:	bf00      	nop
          }
          break;
 800b1b8:	e0ab      	b.n	800b312 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d002      	beq.n	800b1cc <USBD_StdEPReq+0x1dc>
 800b1c6:	2b03      	cmp	r3, #3
 800b1c8:	d032      	beq.n	800b230 <USBD_StdEPReq+0x240>
 800b1ca:	e097      	b.n	800b2fc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1cc:	7bbb      	ldrb	r3, [r7, #14]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d007      	beq.n	800b1e2 <USBD_StdEPReq+0x1f2>
 800b1d2:	7bbb      	ldrb	r3, [r7, #14]
 800b1d4:	2b80      	cmp	r3, #128	@ 0x80
 800b1d6:	d004      	beq.n	800b1e2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b1d8:	6839      	ldr	r1, [r7, #0]
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 fc17 	bl	800ba0e <USBD_CtlError>
                break;
 800b1e0:	e091      	b.n	800b306 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	da0b      	bge.n	800b202 <USBD_StdEPReq+0x212>
 800b1ea:	7bbb      	ldrb	r3, [r7, #14]
 800b1ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4413      	add	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	3310      	adds	r3, #16
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	3304      	adds	r3, #4
 800b200:	e00b      	b.n	800b21a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b202:	7bbb      	ldrb	r3, [r7, #14]
 800b204:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b208:	4613      	mov	r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	4413      	add	r3, r2
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	4413      	add	r3, r2
 800b218:	3304      	adds	r3, #4
 800b21a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	2200      	movs	r2, #0
 800b220:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	2202      	movs	r2, #2
 800b226:	4619      	mov	r1, r3
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 fc6d 	bl	800bb08 <USBD_CtlSendData>
              break;
 800b22e:	e06a      	b.n	800b306 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b230:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b234:	2b00      	cmp	r3, #0
 800b236:	da11      	bge.n	800b25c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b238:	7bbb      	ldrb	r3, [r7, #14]
 800b23a:	f003 020f 	and.w	r2, r3, #15
 800b23e:	6879      	ldr	r1, [r7, #4]
 800b240:	4613      	mov	r3, r2
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	4413      	add	r3, r2
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	440b      	add	r3, r1
 800b24a:	3324      	adds	r3, #36	@ 0x24
 800b24c:	881b      	ldrh	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d117      	bne.n	800b282 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b252:	6839      	ldr	r1, [r7, #0]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 fbda 	bl	800ba0e <USBD_CtlError>
                  break;
 800b25a:	e054      	b.n	800b306 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b25c:	7bbb      	ldrb	r3, [r7, #14]
 800b25e:	f003 020f 	and.w	r2, r3, #15
 800b262:	6879      	ldr	r1, [r7, #4]
 800b264:	4613      	mov	r3, r2
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	4413      	add	r3, r2
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	440b      	add	r3, r1
 800b26e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b272:	881b      	ldrh	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d104      	bne.n	800b282 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b278:	6839      	ldr	r1, [r7, #0]
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 fbc7 	bl	800ba0e <USBD_CtlError>
                  break;
 800b280:	e041      	b.n	800b306 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b282:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b286:	2b00      	cmp	r3, #0
 800b288:	da0b      	bge.n	800b2a2 <USBD_StdEPReq+0x2b2>
 800b28a:	7bbb      	ldrb	r3, [r7, #14]
 800b28c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b290:	4613      	mov	r3, r2
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	3310      	adds	r3, #16
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	4413      	add	r3, r2
 800b29e:	3304      	adds	r3, #4
 800b2a0:	e00b      	b.n	800b2ba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2a2:	7bbb      	ldrb	r3, [r7, #14]
 800b2a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2a8:	4613      	mov	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	4413      	add	r3, r2
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	3304      	adds	r3, #4
 800b2ba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b2bc:	7bbb      	ldrb	r3, [r7, #14]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d002      	beq.n	800b2c8 <USBD_StdEPReq+0x2d8>
 800b2c2:	7bbb      	ldrb	r3, [r7, #14]
 800b2c4:	2b80      	cmp	r3, #128	@ 0x80
 800b2c6:	d103      	bne.n	800b2d0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	601a      	str	r2, [r3, #0]
 800b2ce:	e00e      	b.n	800b2ee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b2d0:	7bbb      	ldrb	r3, [r7, #14]
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f011 fd9b 	bl	801ce10 <USBD_LL_IsStallEP>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d003      	beq.n	800b2e8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	601a      	str	r2, [r3, #0]
 800b2e6:	e002      	b.n	800b2ee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	2202      	movs	r2, #2
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 fc07 	bl	800bb08 <USBD_CtlSendData>
              break;
 800b2fa:	e004      	b.n	800b306 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 fb85 	bl	800ba0e <USBD_CtlError>
              break;
 800b304:	bf00      	nop
          }
          break;
 800b306:	e004      	b.n	800b312 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b308:	6839      	ldr	r1, [r7, #0]
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 fb7f 	bl	800ba0e <USBD_CtlError>
          break;
 800b310:	bf00      	nop
      }
      break;
 800b312:	e005      	b.n	800b320 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 fb79 	bl	800ba0e <USBD_CtlError>
      break;
 800b31c:	e000      	b.n	800b320 <USBD_StdEPReq+0x330>
      break;
 800b31e:	bf00      	nop
  }

  return ret;
 800b320:	7bfb      	ldrb	r3, [r7, #15]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
	...

0800b32c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b336:	2300      	movs	r3, #0
 800b338:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b33a:	2300      	movs	r3, #0
 800b33c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b33e:	2300      	movs	r3, #0
 800b340:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	885b      	ldrh	r3, [r3, #2]
 800b346:	0a1b      	lsrs	r3, r3, #8
 800b348:	b29b      	uxth	r3, r3
 800b34a:	3b01      	subs	r3, #1
 800b34c:	2b0e      	cmp	r3, #14
 800b34e:	f200 8152 	bhi.w	800b5f6 <USBD_GetDescriptor+0x2ca>
 800b352:	a201      	add	r2, pc, #4	@ (adr r2, 800b358 <USBD_GetDescriptor+0x2c>)
 800b354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b358:	0800b3c9 	.word	0x0800b3c9
 800b35c:	0800b3e1 	.word	0x0800b3e1
 800b360:	0800b421 	.word	0x0800b421
 800b364:	0800b5f7 	.word	0x0800b5f7
 800b368:	0800b5f7 	.word	0x0800b5f7
 800b36c:	0800b597 	.word	0x0800b597
 800b370:	0800b5c3 	.word	0x0800b5c3
 800b374:	0800b5f7 	.word	0x0800b5f7
 800b378:	0800b5f7 	.word	0x0800b5f7
 800b37c:	0800b5f7 	.word	0x0800b5f7
 800b380:	0800b5f7 	.word	0x0800b5f7
 800b384:	0800b5f7 	.word	0x0800b5f7
 800b388:	0800b5f7 	.word	0x0800b5f7
 800b38c:	0800b5f7 	.word	0x0800b5f7
 800b390:	0800b395 	.word	0x0800b395
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b39a:	69db      	ldr	r3, [r3, #28]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00b      	beq.n	800b3b8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3a6:	69db      	ldr	r3, [r3, #28]
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	7c12      	ldrb	r2, [r2, #16]
 800b3ac:	f107 0108 	add.w	r1, r7, #8
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	4798      	blx	r3
 800b3b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3b6:	e126      	b.n	800b606 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fb27 	bl	800ba0e <USBD_CtlError>
        err++;
 800b3c0:	7afb      	ldrb	r3, [r7, #11]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	72fb      	strb	r3, [r7, #11]
      break;
 800b3c6:	e11e      	b.n	800b606 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	7c12      	ldrb	r2, [r2, #16]
 800b3d4:	f107 0108 	add.w	r1, r7, #8
 800b3d8:	4610      	mov	r0, r2
 800b3da:	4798      	blx	r3
 800b3dc:	60f8      	str	r0, [r7, #12]
      break;
 800b3de:	e112      	b.n	800b606 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	7c1b      	ldrb	r3, [r3, #16]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d10d      	bne.n	800b404 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3f0:	f107 0208 	add.w	r2, r7, #8
 800b3f4:	4610      	mov	r0, r2
 800b3f6:	4798      	blx	r3
 800b3f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	2202      	movs	r2, #2
 800b400:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b402:	e100      	b.n	800b606 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b40c:	f107 0208 	add.w	r2, r7, #8
 800b410:	4610      	mov	r0, r2
 800b412:	4798      	blx	r3
 800b414:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	3301      	adds	r3, #1
 800b41a:	2202      	movs	r2, #2
 800b41c:	701a      	strb	r2, [r3, #0]
      break;
 800b41e:	e0f2      	b.n	800b606 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	885b      	ldrh	r3, [r3, #2]
 800b424:	b2db      	uxtb	r3, r3
 800b426:	2b05      	cmp	r3, #5
 800b428:	f200 80ac 	bhi.w	800b584 <USBD_GetDescriptor+0x258>
 800b42c:	a201      	add	r2, pc, #4	@ (adr r2, 800b434 <USBD_GetDescriptor+0x108>)
 800b42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b432:	bf00      	nop
 800b434:	0800b44d 	.word	0x0800b44d
 800b438:	0800b481 	.word	0x0800b481
 800b43c:	0800b4b5 	.word	0x0800b4b5
 800b440:	0800b4e9 	.word	0x0800b4e9
 800b444:	0800b51d 	.word	0x0800b51d
 800b448:	0800b551 	.word	0x0800b551
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00b      	beq.n	800b470 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	7c12      	ldrb	r2, [r2, #16]
 800b464:	f107 0108 	add.w	r1, r7, #8
 800b468:	4610      	mov	r0, r2
 800b46a:	4798      	blx	r3
 800b46c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b46e:	e091      	b.n	800b594 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b470:	6839      	ldr	r1, [r7, #0]
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 facb 	bl	800ba0e <USBD_CtlError>
            err++;
 800b478:	7afb      	ldrb	r3, [r7, #11]
 800b47a:	3301      	adds	r3, #1
 800b47c:	72fb      	strb	r3, [r7, #11]
          break;
 800b47e:	e089      	b.n	800b594 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00b      	beq.n	800b4a4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	7c12      	ldrb	r2, [r2, #16]
 800b498:	f107 0108 	add.w	r1, r7, #8
 800b49c:	4610      	mov	r0, r2
 800b49e:	4798      	blx	r3
 800b4a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4a2:	e077      	b.n	800b594 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4a4:	6839      	ldr	r1, [r7, #0]
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 fab1 	bl	800ba0e <USBD_CtlError>
            err++;
 800b4ac:	7afb      	ldrb	r3, [r7, #11]
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b4b2:	e06f      	b.n	800b594 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00b      	beq.n	800b4d8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	7c12      	ldrb	r2, [r2, #16]
 800b4cc:	f107 0108 	add.w	r1, r7, #8
 800b4d0:	4610      	mov	r0, r2
 800b4d2:	4798      	blx	r3
 800b4d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4d6:	e05d      	b.n	800b594 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4d8:	6839      	ldr	r1, [r7, #0]
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 fa97 	bl	800ba0e <USBD_CtlError>
            err++;
 800b4e0:	7afb      	ldrb	r3, [r7, #11]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b4e6:	e055      	b.n	800b594 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d00b      	beq.n	800b50c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	7c12      	ldrb	r2, [r2, #16]
 800b500:	f107 0108 	add.w	r1, r7, #8
 800b504:	4610      	mov	r0, r2
 800b506:	4798      	blx	r3
 800b508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b50a:	e043      	b.n	800b594 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b50c:	6839      	ldr	r1, [r7, #0]
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 fa7d 	bl	800ba0e <USBD_CtlError>
            err++;
 800b514:	7afb      	ldrb	r3, [r7, #11]
 800b516:	3301      	adds	r3, #1
 800b518:	72fb      	strb	r3, [r7, #11]
          break;
 800b51a:	e03b      	b.n	800b594 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b522:	695b      	ldr	r3, [r3, #20]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00b      	beq.n	800b540 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b52e:	695b      	ldr	r3, [r3, #20]
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	7c12      	ldrb	r2, [r2, #16]
 800b534:	f107 0108 	add.w	r1, r7, #8
 800b538:	4610      	mov	r0, r2
 800b53a:	4798      	blx	r3
 800b53c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b53e:	e029      	b.n	800b594 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b540:	6839      	ldr	r1, [r7, #0]
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 fa63 	bl	800ba0e <USBD_CtlError>
            err++;
 800b548:	7afb      	ldrb	r3, [r7, #11]
 800b54a:	3301      	adds	r3, #1
 800b54c:	72fb      	strb	r3, [r7, #11]
          break;
 800b54e:	e021      	b.n	800b594 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b556:	699b      	ldr	r3, [r3, #24]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d00b      	beq.n	800b574 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b562:	699b      	ldr	r3, [r3, #24]
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	7c12      	ldrb	r2, [r2, #16]
 800b568:	f107 0108 	add.w	r1, r7, #8
 800b56c:	4610      	mov	r0, r2
 800b56e:	4798      	blx	r3
 800b570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b572:	e00f      	b.n	800b594 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b574:	6839      	ldr	r1, [r7, #0]
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 fa49 	bl	800ba0e <USBD_CtlError>
            err++;
 800b57c:	7afb      	ldrb	r3, [r7, #11]
 800b57e:	3301      	adds	r3, #1
 800b580:	72fb      	strb	r3, [r7, #11]
          break;
 800b582:	e007      	b.n	800b594 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b584:	6839      	ldr	r1, [r7, #0]
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 fa41 	bl	800ba0e <USBD_CtlError>
          err++;
 800b58c:	7afb      	ldrb	r3, [r7, #11]
 800b58e:	3301      	adds	r3, #1
 800b590:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b592:	bf00      	nop
      }
      break;
 800b594:	e037      	b.n	800b606 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	7c1b      	ldrb	r3, [r3, #16]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d109      	bne.n	800b5b2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5a6:	f107 0208 	add.w	r2, r7, #8
 800b5aa:	4610      	mov	r0, r2
 800b5ac:	4798      	blx	r3
 800b5ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5b0:	e029      	b.n	800b606 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b5b2:	6839      	ldr	r1, [r7, #0]
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fa2a 	bl	800ba0e <USBD_CtlError>
        err++;
 800b5ba:	7afb      	ldrb	r3, [r7, #11]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	72fb      	strb	r3, [r7, #11]
      break;
 800b5c0:	e021      	b.n	800b606 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	7c1b      	ldrb	r3, [r3, #16]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d10d      	bne.n	800b5e6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5d2:	f107 0208 	add.w	r2, r7, #8
 800b5d6:	4610      	mov	r0, r2
 800b5d8:	4798      	blx	r3
 800b5da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	3301      	adds	r3, #1
 800b5e0:	2207      	movs	r2, #7
 800b5e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5e4:	e00f      	b.n	800b606 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b5e6:	6839      	ldr	r1, [r7, #0]
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 fa10 	bl	800ba0e <USBD_CtlError>
        err++;
 800b5ee:	7afb      	ldrb	r3, [r7, #11]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	72fb      	strb	r3, [r7, #11]
      break;
 800b5f4:	e007      	b.n	800b606 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b5f6:	6839      	ldr	r1, [r7, #0]
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 fa08 	bl	800ba0e <USBD_CtlError>
      err++;
 800b5fe:	7afb      	ldrb	r3, [r7, #11]
 800b600:	3301      	adds	r3, #1
 800b602:	72fb      	strb	r3, [r7, #11]
      break;
 800b604:	bf00      	nop
  }

  if (err != 0U)
 800b606:	7afb      	ldrb	r3, [r7, #11]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d11e      	bne.n	800b64a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	88db      	ldrh	r3, [r3, #6]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d016      	beq.n	800b642 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b614:	893b      	ldrh	r3, [r7, #8]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00e      	beq.n	800b638 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	88da      	ldrh	r2, [r3, #6]
 800b61e:	893b      	ldrh	r3, [r7, #8]
 800b620:	4293      	cmp	r3, r2
 800b622:	bf28      	it	cs
 800b624:	4613      	movcs	r3, r2
 800b626:	b29b      	uxth	r3, r3
 800b628:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b62a:	893b      	ldrh	r3, [r7, #8]
 800b62c:	461a      	mov	r2, r3
 800b62e:	68f9      	ldr	r1, [r7, #12]
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 fa69 	bl	800bb08 <USBD_CtlSendData>
 800b636:	e009      	b.n	800b64c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b638:	6839      	ldr	r1, [r7, #0]
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 f9e7 	bl	800ba0e <USBD_CtlError>
 800b640:	e004      	b.n	800b64c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 faba 	bl	800bbbc <USBD_CtlSendStatus>
 800b648:	e000      	b.n	800b64c <USBD_GetDescriptor+0x320>
    return;
 800b64a:	bf00      	nop
  }
}
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop

0800b654 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	889b      	ldrh	r3, [r3, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d131      	bne.n	800b6ca <USBD_SetAddress+0x76>
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	88db      	ldrh	r3, [r3, #6]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d12d      	bne.n	800b6ca <USBD_SetAddress+0x76>
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	885b      	ldrh	r3, [r3, #2]
 800b672:	2b7f      	cmp	r3, #127	@ 0x7f
 800b674:	d829      	bhi.n	800b6ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	885b      	ldrh	r3, [r3, #2]
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b680:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	2b03      	cmp	r3, #3
 800b68c:	d104      	bne.n	800b698 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b68e:	6839      	ldr	r1, [r7, #0]
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 f9bc 	bl	800ba0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b696:	e01d      	b.n	800b6d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	7bfa      	ldrb	r2, [r7, #15]
 800b69c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b6a0:	7bfb      	ldrb	r3, [r7, #15]
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f011 fbdf 	bl	801ce68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 fa86 	bl	800bbbc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d004      	beq.n	800b6c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2202      	movs	r2, #2
 800b6ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6be:	e009      	b.n	800b6d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6c8:	e004      	b.n	800b6d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b6ca:	6839      	ldr	r1, [r7, #0]
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 f99e 	bl	800ba0e <USBD_CtlError>
  }
}
 800b6d2:	bf00      	nop
 800b6d4:	bf00      	nop
 800b6d6:	3710      	adds	r7, #16
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	885b      	ldrh	r3, [r3, #2]
 800b6ee:	b2da      	uxtb	r2, r3
 800b6f0:	4b4e      	ldr	r3, [pc, #312]	@ (800b82c <USBD_SetConfig+0x150>)
 800b6f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b6f4:	4b4d      	ldr	r3, [pc, #308]	@ (800b82c <USBD_SetConfig+0x150>)
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d905      	bls.n	800b708 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b6fc:	6839      	ldr	r1, [r7, #0]
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 f985 	bl	800ba0e <USBD_CtlError>
    return USBD_FAIL;
 800b704:	2303      	movs	r3, #3
 800b706:	e08c      	b.n	800b822 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	2b02      	cmp	r3, #2
 800b712:	d002      	beq.n	800b71a <USBD_SetConfig+0x3e>
 800b714:	2b03      	cmp	r3, #3
 800b716:	d029      	beq.n	800b76c <USBD_SetConfig+0x90>
 800b718:	e075      	b.n	800b806 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b71a:	4b44      	ldr	r3, [pc, #272]	@ (800b82c <USBD_SetConfig+0x150>)
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d020      	beq.n	800b764 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b722:	4b42      	ldr	r3, [pc, #264]	@ (800b82c <USBD_SetConfig+0x150>)
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	461a      	mov	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b72c:	4b3f      	ldr	r3, [pc, #252]	@ (800b82c <USBD_SetConfig+0x150>)
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	4619      	mov	r1, r3
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f7fe ffb9 	bl	800a6aa <USBD_SetClassConfig>
 800b738:	4603      	mov	r3, r0
 800b73a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b73c:	7bfb      	ldrb	r3, [r7, #15]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d008      	beq.n	800b754 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b742:	6839      	ldr	r1, [r7, #0]
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 f962 	bl	800ba0e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2202      	movs	r2, #2
 800b74e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b752:	e065      	b.n	800b820 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 fa31 	bl	800bbbc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2203      	movs	r2, #3
 800b75e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b762:	e05d      	b.n	800b820 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 fa29 	bl	800bbbc <USBD_CtlSendStatus>
      break;
 800b76a:	e059      	b.n	800b820 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b76c:	4b2f      	ldr	r3, [pc, #188]	@ (800b82c <USBD_SetConfig+0x150>)
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d112      	bne.n	800b79a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2202      	movs	r2, #2
 800b778:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b77c:	4b2b      	ldr	r3, [pc, #172]	@ (800b82c <USBD_SetConfig+0x150>)
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	461a      	mov	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b786:	4b29      	ldr	r3, [pc, #164]	@ (800b82c <USBD_SetConfig+0x150>)
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	4619      	mov	r1, r3
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f7fe ffa8 	bl	800a6e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 fa12 	bl	800bbbc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b798:	e042      	b.n	800b820 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b79a:	4b24      	ldr	r3, [pc, #144]	@ (800b82c <USBD_SetConfig+0x150>)
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d02a      	beq.n	800b7fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f7fe ff96 	bl	800a6e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b7b6:	4b1d      	ldr	r3, [pc, #116]	@ (800b82c <USBD_SetConfig+0x150>)
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b7c0:	4b1a      	ldr	r3, [pc, #104]	@ (800b82c <USBD_SetConfig+0x150>)
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f7fe ff6f 	bl	800a6aa <USBD_SetClassConfig>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b7d0:	7bfb      	ldrb	r3, [r7, #15]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d00f      	beq.n	800b7f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b7d6:	6839      	ldr	r1, [r7, #0]
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f918 	bl	800ba0e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f7fe ff7b 	bl	800a6e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2202      	movs	r2, #2
 800b7f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b7f4:	e014      	b.n	800b820 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 f9e0 	bl	800bbbc <USBD_CtlSendStatus>
      break;
 800b7fc:	e010      	b.n	800b820 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 f9dc 	bl	800bbbc <USBD_CtlSendStatus>
      break;
 800b804:	e00c      	b.n	800b820 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 f900 	bl	800ba0e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b80e:	4b07      	ldr	r3, [pc, #28]	@ (800b82c <USBD_SetConfig+0x150>)
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	4619      	mov	r1, r3
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f7fe ff64 	bl	800a6e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b81a:	2303      	movs	r3, #3
 800b81c:	73fb      	strb	r3, [r7, #15]
      break;
 800b81e:	bf00      	nop
  }

  return ret;
 800b820:	7bfb      	ldrb	r3, [r7, #15]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	200051bc 	.word	0x200051bc

0800b830 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	88db      	ldrh	r3, [r3, #6]
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d004      	beq.n	800b84c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b842:	6839      	ldr	r1, [r7, #0]
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 f8e2 	bl	800ba0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b84a:	e023      	b.n	800b894 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b852:	b2db      	uxtb	r3, r3
 800b854:	2b02      	cmp	r3, #2
 800b856:	dc02      	bgt.n	800b85e <USBD_GetConfig+0x2e>
 800b858:	2b00      	cmp	r3, #0
 800b85a:	dc03      	bgt.n	800b864 <USBD_GetConfig+0x34>
 800b85c:	e015      	b.n	800b88a <USBD_GetConfig+0x5a>
 800b85e:	2b03      	cmp	r3, #3
 800b860:	d00b      	beq.n	800b87a <USBD_GetConfig+0x4a>
 800b862:	e012      	b.n	800b88a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	3308      	adds	r3, #8
 800b86e:	2201      	movs	r2, #1
 800b870:	4619      	mov	r1, r3
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 f948 	bl	800bb08 <USBD_CtlSendData>
        break;
 800b878:	e00c      	b.n	800b894 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	3304      	adds	r3, #4
 800b87e:	2201      	movs	r2, #1
 800b880:	4619      	mov	r1, r3
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 f940 	bl	800bb08 <USBD_CtlSendData>
        break;
 800b888:	e004      	b.n	800b894 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b88a:	6839      	ldr	r1, [r7, #0]
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 f8be 	bl	800ba0e <USBD_CtlError>
        break;
 800b892:	bf00      	nop
}
 800b894:	bf00      	nop
 800b896:	3708      	adds	r7, #8
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	3b01      	subs	r3, #1
 800b8b0:	2b02      	cmp	r3, #2
 800b8b2:	d81e      	bhi.n	800b8f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	88db      	ldrh	r3, [r3, #6]
 800b8b8:	2b02      	cmp	r3, #2
 800b8ba:	d004      	beq.n	800b8c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b8bc:	6839      	ldr	r1, [r7, #0]
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f8a5 	bl	800ba0e <USBD_CtlError>
        break;
 800b8c4:	e01a      	b.n	800b8fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d005      	beq.n	800b8e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	f043 0202 	orr.w	r2, r3, #2
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	330c      	adds	r3, #12
 800b8e6:	2202      	movs	r2, #2
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 f90c 	bl	800bb08 <USBD_CtlSendData>
      break;
 800b8f0:	e004      	b.n	800b8fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b8f2:	6839      	ldr	r1, [r7, #0]
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 f88a 	bl	800ba0e <USBD_CtlError>
      break;
 800b8fa:	bf00      	nop
  }
}
 800b8fc:	bf00      	nop
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	885b      	ldrh	r3, [r3, #2]
 800b912:	2b01      	cmp	r3, #1
 800b914:	d107      	bne.n	800b926 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2201      	movs	r2, #1
 800b91a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 f94c 	bl	800bbbc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b924:	e013      	b.n	800b94e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	885b      	ldrh	r3, [r3, #2]
 800b92a:	2b02      	cmp	r3, #2
 800b92c:	d10b      	bne.n	800b946 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	889b      	ldrh	r3, [r3, #4]
 800b932:	0a1b      	lsrs	r3, r3, #8
 800b934:	b29b      	uxth	r3, r3
 800b936:	b2da      	uxtb	r2, r3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f000 f93c 	bl	800bbbc <USBD_CtlSendStatus>
}
 800b944:	e003      	b.n	800b94e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b946:	6839      	ldr	r1, [r7, #0]
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 f860 	bl	800ba0e <USBD_CtlError>
}
 800b94e:	bf00      	nop
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b082      	sub	sp, #8
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b966:	b2db      	uxtb	r3, r3
 800b968:	3b01      	subs	r3, #1
 800b96a:	2b02      	cmp	r3, #2
 800b96c:	d80b      	bhi.n	800b986 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	885b      	ldrh	r3, [r3, #2]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d10c      	bne.n	800b990 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 f91c 	bl	800bbbc <USBD_CtlSendStatus>
      }
      break;
 800b984:	e004      	b.n	800b990 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b986:	6839      	ldr	r1, [r7, #0]
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 f840 	bl	800ba0e <USBD_CtlError>
      break;
 800b98e:	e000      	b.n	800b992 <USBD_ClrFeature+0x3c>
      break;
 800b990:	bf00      	nop
  }
}
 800b992:	bf00      	nop
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b084      	sub	sp, #16
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
 800b9a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	781a      	ldrb	r2, [r3, #0]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	781a      	ldrb	r2, [r3, #0]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b9c4:	68f8      	ldr	r0, [r7, #12]
 800b9c6:	f7ff fa16 	bl	800adf6 <SWAPBYTE>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f7ff fa09 	bl	800adf6 <SWAPBYTE>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f7ff f9fc 	bl	800adf6 <SWAPBYTE>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	461a      	mov	r2, r3
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	80da      	strh	r2, [r3, #6]
}
 800ba06:	bf00      	nop
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b082      	sub	sp, #8
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
 800ba16:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba18:	2180      	movs	r1, #128	@ 0x80
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f011 f9ba 	bl	801cd94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ba20:	2100      	movs	r1, #0
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f011 f9b6 	bl	801cd94 <USBD_LL_StallEP>
}
 800ba28:	bf00      	nop
 800ba2a:	3708      	adds	r7, #8
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d042      	beq.n	800bacc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ba4a:	6938      	ldr	r0, [r7, #16]
 800ba4c:	f000 f842 	bl	800bad4 <USBD_GetLen>
 800ba50:	4603      	mov	r3, r0
 800ba52:	3301      	adds	r3, #1
 800ba54:	005b      	lsls	r3, r3, #1
 800ba56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba5a:	d808      	bhi.n	800ba6e <USBD_GetString+0x3e>
 800ba5c:	6938      	ldr	r0, [r7, #16]
 800ba5e:	f000 f839 	bl	800bad4 <USBD_GetLen>
 800ba62:	4603      	mov	r3, r0
 800ba64:	3301      	adds	r3, #1
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	005b      	lsls	r3, r3, #1
 800ba6a:	b29a      	uxth	r2, r3
 800ba6c:	e001      	b.n	800ba72 <USBD_GetString+0x42>
 800ba6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ba76:	7dfb      	ldrb	r3, [r7, #23]
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	7812      	ldrb	r2, [r2, #0]
 800ba80:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba82:	7dfb      	ldrb	r3, [r7, #23]
 800ba84:	3301      	adds	r3, #1
 800ba86:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ba88:	7dfb      	ldrb	r3, [r7, #23]
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	2203      	movs	r2, #3
 800ba90:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba92:	7dfb      	ldrb	r3, [r7, #23]
 800ba94:	3301      	adds	r3, #1
 800ba96:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ba98:	e013      	b.n	800bac2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ba9a:	7dfb      	ldrb	r3, [r7, #23]
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	4413      	add	r3, r2
 800baa0:	693a      	ldr	r2, [r7, #16]
 800baa2:	7812      	ldrb	r2, [r2, #0]
 800baa4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	3301      	adds	r3, #1
 800baaa:	613b      	str	r3, [r7, #16]
    idx++;
 800baac:	7dfb      	ldrb	r3, [r7, #23]
 800baae:	3301      	adds	r3, #1
 800bab0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bab2:	7dfb      	ldrb	r3, [r7, #23]
 800bab4:	68ba      	ldr	r2, [r7, #8]
 800bab6:	4413      	add	r3, r2
 800bab8:	2200      	movs	r2, #0
 800baba:	701a      	strb	r2, [r3, #0]
    idx++;
 800babc:	7dfb      	ldrb	r3, [r7, #23]
 800babe:	3301      	adds	r3, #1
 800bac0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1e7      	bne.n	800ba9a <USBD_GetString+0x6a>
 800baca:	e000      	b.n	800bace <USBD_GetString+0x9e>
    return;
 800bacc:	bf00      	nop
  }
}
 800bace:	3718      	adds	r7, #24
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b085      	sub	sp, #20
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800badc:	2300      	movs	r3, #0
 800bade:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bae4:	e005      	b.n	800baf2 <USBD_GetLen+0x1e>
  {
    len++;
 800bae6:	7bfb      	ldrb	r3, [r7, #15]
 800bae8:	3301      	adds	r3, #1
 800baea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	3301      	adds	r3, #1
 800baf0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1f5      	bne.n	800bae6 <USBD_GetLen+0x12>
  }

  return len;
 800bafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3714      	adds	r7, #20
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr

0800bb08 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2202      	movs	r2, #2
 800bb18:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	68ba      	ldr	r2, [r7, #8]
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f011 f9b9 	bl	801cea6 <USBD_LL_Transmit>

  return USBD_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b084      	sub	sp, #16
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	60f8      	str	r0, [r7, #12]
 800bb46:	60b9      	str	r1, [r7, #8]
 800bb48:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	68ba      	ldr	r2, [r7, #8]
 800bb4e:	2100      	movs	r1, #0
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f011 f9a8 	bl	801cea6 <USBD_LL_Transmit>

  return USBD_OK;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b084      	sub	sp, #16
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2203      	movs	r2, #3
 800bb70:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	68ba      	ldr	r2, [r7, #8]
 800bb88:	2100      	movs	r1, #0
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	f011 f9ac 	bl	801cee8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb90:	2300      	movs	r3, #0
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b084      	sub	sp, #16
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	60f8      	str	r0, [r7, #12]
 800bba2:	60b9      	str	r1, [r7, #8]
 800bba4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	68ba      	ldr	r2, [r7, #8]
 800bbaa:	2100      	movs	r1, #0
 800bbac:	68f8      	ldr	r0, [r7, #12]
 800bbae:	f011 f99b 	bl	801cee8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbb2:	2300      	movs	r3, #0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3710      	adds	r7, #16
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2204      	movs	r2, #4
 800bbc8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bbcc:	2300      	movs	r3, #0
 800bbce:	2200      	movs	r2, #0
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f011 f967 	bl	801cea6 <USBD_LL_Transmit>

  return USBD_OK;
 800bbd8:	2300      	movs	r3, #0
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3708      	adds	r7, #8
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b082      	sub	sp, #8
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2205      	movs	r2, #5
 800bbee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	2100      	movs	r1, #0
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f011 f975 	bl	801cee8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbfe:	2300      	movs	r3, #0
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	4603      	mov	r3, r0
 800bc10:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bc12:	2300      	movs	r3, #0
 800bc14:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bc16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bc1a:	2b84      	cmp	r3, #132	@ 0x84
 800bc1c:	d005      	beq.n	800bc2a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bc1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	4413      	add	r3, r2
 800bc26:	3303      	adds	r3, #3
 800bc28:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3714      	adds	r7, #20
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc3e:	f3ef 8305 	mrs	r3, IPSR
 800bc42:	607b      	str	r3, [r7, #4]
  return(result);
 800bc44:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	bf14      	ite	ne
 800bc4a:	2301      	movne	r3, #1
 800bc4c:	2300      	moveq	r3, #0
 800bc4e:	b2db      	uxtb	r3, r3
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	370c      	adds	r7, #12
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bc60:	f001 fe4c 	bl	800d8fc <vTaskStartScheduler>
  
  return osOK;
 800bc64:	2300      	movs	r3, #0
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bc6e:	f7ff ffe3 	bl	800bc38 <inHandlerMode>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d003      	beq.n	800bc80 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bc78:	f001 ff6c 	bl	800db54 <xTaskGetTickCountFromISR>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	e002      	b.n	800bc86 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bc80:	f001 ff58 	bl	800db34 <xTaskGetTickCount>
 800bc84:	4603      	mov	r3, r0
  }
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bc8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc8c:	b089      	sub	sp, #36	@ 0x24
 800bc8e:	af04      	add	r7, sp, #16
 800bc90:	6078      	str	r0, [r7, #4]
 800bc92:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	695b      	ldr	r3, [r3, #20]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d020      	beq.n	800bcde <osThreadCreate+0x54>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	699b      	ldr	r3, [r3, #24]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d01c      	beq.n	800bcde <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	685c      	ldr	r4, [r3, #4]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	691e      	ldr	r6, [r3, #16]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7ff ffa6 	bl	800bc08 <makeFreeRtosPriority>
 800bcbc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	695b      	ldr	r3, [r3, #20]
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bcc6:	9202      	str	r2, [sp, #8]
 800bcc8:	9301      	str	r3, [sp, #4]
 800bcca:	9100      	str	r1, [sp, #0]
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	4632      	mov	r2, r6
 800bcd0:	4629      	mov	r1, r5
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	f001 fb90 	bl	800d3f8 <xTaskCreateStatic>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	60fb      	str	r3, [r7, #12]
 800bcdc:	e01c      	b.n	800bd18 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	685c      	ldr	r4, [r3, #4]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bcea:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7ff ff88 	bl	800bc08 <makeFreeRtosPriority>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	f107 030c 	add.w	r3, r7, #12
 800bcfe:	9301      	str	r3, [sp, #4]
 800bd00:	9200      	str	r2, [sp, #0]
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	4632      	mov	r2, r6
 800bd06:	4629      	mov	r1, r5
 800bd08:	4620      	mov	r0, r4
 800bd0a:	f001 fbdb 	bl	800d4c4 <xTaskCreate>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d001      	beq.n	800bd18 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bd14:	2300      	movs	r3, #0
 800bd16:	e000      	b.n	800bd1a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bd18:	68fb      	ldr	r3, [r7, #12]
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3714      	adds	r7, #20
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bd22 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b082      	sub	sp, #8
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f001 fd1c 	bl	800d768 <vTaskDelete>
  return osOK;
 800bd30:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3708      	adds	r7, #8
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b084      	sub	sp, #16
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d001      	beq.n	800bd50 <osDelay+0x16>
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	e000      	b.n	800bd52 <osDelay+0x18>
 800bd50:	2301      	movs	r3, #1
 800bd52:	4618      	mov	r0, r3
 800bd54:	f001 fd9a 	bl	800d88c <vTaskDelay>
  
  return osOK;
 800bd58:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b082      	sub	sp, #8
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d007      	beq.n	800bd82 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	4619      	mov	r1, r3
 800bd78:	2001      	movs	r0, #1
 800bd7a:	f000 fc9a 	bl	800c6b2 <xQueueCreateMutexStatic>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	e003      	b.n	800bd8a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800bd82:	2001      	movs	r0, #1
 800bd84:	f000 fc7d 	bl	800c682 <xQueueCreateMutex>
 800bd88:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3708      	adds	r7, #8
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
	...

0800bd94 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bd9e:	2300      	movs	r3, #0
 800bda0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d101      	bne.n	800bdac <osMutexWait+0x18>
    return osErrorParameter;
 800bda8:	2380      	movs	r3, #128	@ 0x80
 800bdaa:	e03a      	b.n	800be22 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800bdac:	2300      	movs	r3, #0
 800bdae:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdb6:	d103      	bne.n	800bdc0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800bdb8:	f04f 33ff 	mov.w	r3, #4294967295
 800bdbc:	60fb      	str	r3, [r7, #12]
 800bdbe:	e009      	b.n	800bdd4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d006      	beq.n	800bdd4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d101      	bne.n	800bdd4 <osMutexWait+0x40>
      ticks = 1;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bdd4:	f7ff ff30 	bl	800bc38 <inHandlerMode>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d017      	beq.n	800be0e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800bdde:	f107 0308 	add.w	r3, r7, #8
 800bde2:	461a      	mov	r2, r3
 800bde4:	2100      	movs	r1, #0
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f001 f8c4 	bl	800cf74 <xQueueReceiveFromISR>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d001      	beq.n	800bdf6 <osMutexWait+0x62>
      return osErrorOS;
 800bdf2:	23ff      	movs	r3, #255	@ 0xff
 800bdf4:	e015      	b.n	800be22 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d011      	beq.n	800be20 <osMutexWait+0x8c>
 800bdfc:	4b0b      	ldr	r3, [pc, #44]	@ (800be2c <osMutexWait+0x98>)
 800bdfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be02:	601a      	str	r2, [r3, #0]
 800be04:	f3bf 8f4f 	dsb	sy
 800be08:	f3bf 8f6f 	isb	sy
 800be0c:	e008      	b.n	800be20 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800be0e:	68f9      	ldr	r1, [r7, #12]
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 ff97 	bl	800cd44 <xQueueSemaphoreTake>
 800be16:	4603      	mov	r3, r0
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d001      	beq.n	800be20 <osMutexWait+0x8c>
    return osErrorOS;
 800be1c:	23ff      	movs	r3, #255	@ 0xff
 800be1e:	e000      	b.n	800be22 <osMutexWait+0x8e>
  }
  
  return osOK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	3710      	adds	r7, #16
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	bf00      	nop
 800be2c:	e000ed04 	.word	0xe000ed04

0800be30 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800be38:	2300      	movs	r3, #0
 800be3a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800be3c:	2300      	movs	r3, #0
 800be3e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800be40:	f7ff fefa 	bl	800bc38 <inHandlerMode>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d016      	beq.n	800be78 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800be4a:	f107 0308 	add.w	r3, r7, #8
 800be4e:	4619      	mov	r1, r3
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fdf6 	bl	800ca42 <xQueueGiveFromISR>
 800be56:	4603      	mov	r3, r0
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d001      	beq.n	800be60 <osMutexRelease+0x30>
      return osErrorOS;
 800be5c:	23ff      	movs	r3, #255	@ 0xff
 800be5e:	e017      	b.n	800be90 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d013      	beq.n	800be8e <osMutexRelease+0x5e>
 800be66:	4b0c      	ldr	r3, [pc, #48]	@ (800be98 <osMutexRelease+0x68>)
 800be68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be6c:	601a      	str	r2, [r3, #0]
 800be6e:	f3bf 8f4f 	dsb	sy
 800be72:	f3bf 8f6f 	isb	sy
 800be76:	e00a      	b.n	800be8e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800be78:	2300      	movs	r3, #0
 800be7a:	2200      	movs	r2, #0
 800be7c:	2100      	movs	r1, #0
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fc32 	bl	800c6e8 <xQueueGenericSend>
 800be84:	4603      	mov	r3, r0
 800be86:	2b01      	cmp	r3, #1
 800be88:	d001      	beq.n	800be8e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800be8a:	23ff      	movs	r3, #255	@ 0xff
 800be8c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800be8e:	68fb      	ldr	r3, [r7, #12]
}
 800be90:	4618      	mov	r0, r3
 800be92:	3710      	adds	r7, #16
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	e000ed04 	.word	0xe000ed04

0800be9c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b086      	sub	sp, #24
 800bea0:	af02      	add	r7, sp, #8
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00f      	beq.n	800bece <osSemaphoreCreate+0x32>
    if (count == 1) {
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d10a      	bne.n	800beca <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	2203      	movs	r2, #3
 800beba:	9200      	str	r2, [sp, #0]
 800bebc:	2200      	movs	r2, #0
 800bebe:	2100      	movs	r1, #0
 800bec0:	2001      	movs	r0, #1
 800bec2:	f000 fadb 	bl	800c47c <xQueueGenericCreateStatic>
 800bec6:	4603      	mov	r3, r0
 800bec8:	e016      	b.n	800bef8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800beca:	2300      	movs	r3, #0
 800becc:	e014      	b.n	800bef8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d110      	bne.n	800bef6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800bed4:	2203      	movs	r2, #3
 800bed6:	2100      	movs	r1, #0
 800bed8:	2001      	movs	r0, #1
 800beda:	f000 fb56 	bl	800c58a <xQueueGenericCreate>
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d005      	beq.n	800bef2 <osSemaphoreCreate+0x56>
 800bee6:	2300      	movs	r3, #0
 800bee8:	2200      	movs	r2, #0
 800beea:	2100      	movs	r1, #0
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f000 fbfb 	bl	800c6e8 <xQueueGenericSend>
      return sema;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	e000      	b.n	800bef8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800bef6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3710      	adds	r7, #16
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d101      	bne.n	800bf18 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800bf14:	2380      	movs	r3, #128	@ 0x80
 800bf16:	e03a      	b.n	800bf8e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf22:	d103      	bne.n	800bf2c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800bf24:	f04f 33ff 	mov.w	r3, #4294967295
 800bf28:	60fb      	str	r3, [r7, #12]
 800bf2a:	e009      	b.n	800bf40 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d006      	beq.n	800bf40 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d101      	bne.n	800bf40 <osSemaphoreWait+0x40>
      ticks = 1;
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bf40:	f7ff fe7a 	bl	800bc38 <inHandlerMode>
 800bf44:	4603      	mov	r3, r0
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d017      	beq.n	800bf7a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bf4a:	f107 0308 	add.w	r3, r7, #8
 800bf4e:	461a      	mov	r2, r3
 800bf50:	2100      	movs	r1, #0
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f001 f80e 	bl	800cf74 <xQueueReceiveFromISR>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d001      	beq.n	800bf62 <osSemaphoreWait+0x62>
      return osErrorOS;
 800bf5e:	23ff      	movs	r3, #255	@ 0xff
 800bf60:	e015      	b.n	800bf8e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d011      	beq.n	800bf8c <osSemaphoreWait+0x8c>
 800bf68:	4b0b      	ldr	r3, [pc, #44]	@ (800bf98 <osSemaphoreWait+0x98>)
 800bf6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf6e:	601a      	str	r2, [r3, #0]
 800bf70:	f3bf 8f4f 	dsb	sy
 800bf74:	f3bf 8f6f 	isb	sy
 800bf78:	e008      	b.n	800bf8c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bf7a:	68f9      	ldr	r1, [r7, #12]
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 fee1 	bl	800cd44 <xQueueSemaphoreTake>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d001      	beq.n	800bf8c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800bf88:	23ff      	movs	r3, #255	@ 0xff
 800bf8a:	e000      	b.n	800bf8e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800bf8c:	2300      	movs	r3, #0
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3710      	adds	r7, #16
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	e000ed04 	.word	0xe000ed04

0800bf9c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800bfac:	f7ff fe44 	bl	800bc38 <inHandlerMode>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d016      	beq.n	800bfe4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bfb6:	f107 0308 	add.w	r3, r7, #8
 800bfba:	4619      	mov	r1, r3
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f000 fd40 	bl	800ca42 <xQueueGiveFromISR>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d001      	beq.n	800bfcc <osSemaphoreRelease+0x30>
      return osErrorOS;
 800bfc8:	23ff      	movs	r3, #255	@ 0xff
 800bfca:	e017      	b.n	800bffc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d013      	beq.n	800bffa <osSemaphoreRelease+0x5e>
 800bfd2:	4b0c      	ldr	r3, [pc, #48]	@ (800c004 <osSemaphoreRelease+0x68>)
 800bfd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfd8:	601a      	str	r2, [r3, #0]
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	e00a      	b.n	800bffa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	2100      	movs	r1, #0
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 fb7c 	bl	800c6e8 <xQueueGenericSend>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d001      	beq.n	800bffa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800bff6:	23ff      	movs	r3, #255	@ 0xff
 800bff8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800bffa:	68fb      	ldr	r3, [r7, #12]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3710      	adds	r7, #16
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	e000ed04 	.word	0xe000ed04

0800c008 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c010:	f7ff fe12 	bl	800bc38 <inHandlerMode>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d001      	beq.n	800c01e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800c01a:	2382      	movs	r3, #130	@ 0x82
 800c01c:	e003      	b.n	800c026 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f001 f872 	bl	800d108 <vQueueDelete>

  return osOK; 
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3708      	adds	r7, #8
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c02e:	b590      	push	{r4, r7, lr}
 800c030:	b085      	sub	sp, #20
 800c032:	af02      	add	r7, sp, #8
 800c034:	6078      	str	r0, [r7, #4]
 800c036:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d011      	beq.n	800c064 <osMessageCreate+0x36>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	68db      	ldr	r3, [r3, #12]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00d      	beq.n	800c064 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6818      	ldr	r0, [r3, #0]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6859      	ldr	r1, [r3, #4]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	689a      	ldr	r2, [r3, #8]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	2400      	movs	r4, #0
 800c05a:	9400      	str	r4, [sp, #0]
 800c05c:	f000 fa0e 	bl	800c47c <xQueueGenericCreateStatic>
 800c060:	4603      	mov	r3, r0
 800c062:	e008      	b.n	800c076 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6818      	ldr	r0, [r3, #0]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	2200      	movs	r2, #0
 800c06e:	4619      	mov	r1, r3
 800c070:	f000 fa8b 	bl	800c58a <xQueueGenericCreate>
 800c074:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c076:	4618      	mov	r0, r3
 800c078:	370c      	adds	r7, #12
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd90      	pop	{r4, r7, pc}
	...

0800c080 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b086      	sub	sp, #24
 800c084:	af00      	add	r7, sp, #0
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c08c:	2300      	movs	r3, #0
 800c08e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d101      	bne.n	800c09e <osMessagePut+0x1e>
    ticks = 1;
 800c09a:	2301      	movs	r3, #1
 800c09c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c09e:	f7ff fdcb 	bl	800bc38 <inHandlerMode>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d018      	beq.n	800c0da <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c0a8:	f107 0210 	add.w	r2, r7, #16
 800c0ac:	f107 0108 	add.w	r1, r7, #8
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f000 fc22 	bl	800c8fc <xQueueGenericSendFromISR>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d001      	beq.n	800c0c2 <osMessagePut+0x42>
      return osErrorOS;
 800c0be:	23ff      	movs	r3, #255	@ 0xff
 800c0c0:	e018      	b.n	800c0f4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d014      	beq.n	800c0f2 <osMessagePut+0x72>
 800c0c8:	4b0c      	ldr	r3, [pc, #48]	@ (800c0fc <osMessagePut+0x7c>)
 800c0ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0ce:	601a      	str	r2, [r3, #0]
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	e00b      	b.n	800c0f2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c0da:	f107 0108 	add.w	r1, r7, #8
 800c0de:	2300      	movs	r3, #0
 800c0e0:	697a      	ldr	r2, [r7, #20]
 800c0e2:	68f8      	ldr	r0, [r7, #12]
 800c0e4:	f000 fb00 	bl	800c6e8 <xQueueGenericSend>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d001      	beq.n	800c0f2 <osMessagePut+0x72>
      return osErrorOS;
 800c0ee:	23ff      	movs	r3, #255	@ 0xff
 800c0f0:	e000      	b.n	800c0f4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c0f2:	2300      	movs	r3, #0
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3718      	adds	r7, #24
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	e000ed04 	.word	0xe000ed04

0800c100 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c100:	b590      	push	{r4, r7, lr}
 800c102:	b08b      	sub	sp, #44	@ 0x2c
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c110:	2300      	movs	r3, #0
 800c112:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10a      	bne.n	800c130 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c11a:	2380      	movs	r3, #128	@ 0x80
 800c11c:	617b      	str	r3, [r7, #20]
    return event;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	461c      	mov	r4, r3
 800c122:	f107 0314 	add.w	r3, r7, #20
 800c126:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c12a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c12e:	e054      	b.n	800c1da <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c130:	2300      	movs	r3, #0
 800c132:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c134:	2300      	movs	r3, #0
 800c136:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c13e:	d103      	bne.n	800c148 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c140:	f04f 33ff 	mov.w	r3, #4294967295
 800c144:	627b      	str	r3, [r7, #36]	@ 0x24
 800c146:	e009      	b.n	800c15c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d006      	beq.n	800c15c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800c152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c154:	2b00      	cmp	r3, #0
 800c156:	d101      	bne.n	800c15c <osMessageGet+0x5c>
      ticks = 1;
 800c158:	2301      	movs	r3, #1
 800c15a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c15c:	f7ff fd6c 	bl	800bc38 <inHandlerMode>
 800c160:	4603      	mov	r3, r0
 800c162:	2b00      	cmp	r3, #0
 800c164:	d01c      	beq.n	800c1a0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c166:	f107 0220 	add.w	r2, r7, #32
 800c16a:	f107 0314 	add.w	r3, r7, #20
 800c16e:	3304      	adds	r3, #4
 800c170:	4619      	mov	r1, r3
 800c172:	68b8      	ldr	r0, [r7, #8]
 800c174:	f000 fefe 	bl	800cf74 <xQueueReceiveFromISR>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d102      	bne.n	800c184 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c17e:	2310      	movs	r3, #16
 800c180:	617b      	str	r3, [r7, #20]
 800c182:	e001      	b.n	800c188 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c184:	2300      	movs	r3, #0
 800c186:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c188:	6a3b      	ldr	r3, [r7, #32]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d01d      	beq.n	800c1ca <osMessageGet+0xca>
 800c18e:	4b15      	ldr	r3, [pc, #84]	@ (800c1e4 <osMessageGet+0xe4>)
 800c190:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c194:	601a      	str	r2, [r3, #0]
 800c196:	f3bf 8f4f 	dsb	sy
 800c19a:	f3bf 8f6f 	isb	sy
 800c19e:	e014      	b.n	800c1ca <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c1a0:	f107 0314 	add.w	r3, r7, #20
 800c1a4:	3304      	adds	r3, #4
 800c1a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	68b8      	ldr	r0, [r7, #8]
 800c1ac:	f000 fce2 	bl	800cb74 <xQueueReceive>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d102      	bne.n	800c1bc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c1b6:	2310      	movs	r3, #16
 800c1b8:	617b      	str	r3, [r7, #20]
 800c1ba:	e006      	b.n	800c1ca <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d101      	bne.n	800c1c6 <osMessageGet+0xc6>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	e000      	b.n	800c1c8 <osMessageGet+0xc8>
 800c1c6:	2340      	movs	r3, #64	@ 0x40
 800c1c8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	461c      	mov	r4, r3
 800c1ce:	f107 0314 	add.w	r3, r7, #20
 800c1d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c1d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c1da:	68f8      	ldr	r0, [r7, #12]
 800c1dc:	372c      	adds	r7, #44	@ 0x2c
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd90      	pop	{r4, r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	e000ed04 	.word	0xe000ed04

0800c1e8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c1f0:	f7ff fd22 	bl	800bc38 <inHandlerMode>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d004      	beq.n	800c204 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 ff63 	bl	800d0c6 <uxQueueMessagesWaitingFromISR>
 800c200:	4603      	mov	r3, r0
 800c202:	e003      	b.n	800c20c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 ff3d 	bl	800d084 <uxQueueMessagesWaiting>
 800c20a:	4603      	mov	r3, r0
  }
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c21c:	f7ff fd0c 	bl	800bc38 <inHandlerMode>
 800c220:	4603      	mov	r3, r0
 800c222:	2b00      	cmp	r3, #0
 800c224:	d001      	beq.n	800c22a <osMessageDelete+0x16>
    return osErrorISR;
 800c226:	2382      	movs	r3, #130	@ 0x82
 800c228:	e003      	b.n	800c232 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 ff6c 	bl	800d108 <vQueueDelete>

  return osOK; 
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c23a:	b480      	push	{r7}
 800c23c:	b083      	sub	sp, #12
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f103 0208 	add.w	r2, r3, #8
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f04f 32ff 	mov.w	r2, #4294967295
 800c252:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f103 0208 	add.w	r2, r3, #8
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f103 0208 	add.w	r2, r3, #8
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c26e:	bf00      	nop
 800c270:	370c      	adds	r7, #12
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c27a:	b480      	push	{r7}
 800c27c:	b083      	sub	sp, #12
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2200      	movs	r2, #0
 800c286:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c288:	bf00      	nop
 800c28a:	370c      	adds	r7, #12
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr

0800c294 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c294:	b480      	push	{r7}
 800c296:	b085      	sub	sp, #20
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	68fa      	ldr	r2, [r7, #12]
 800c2a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	689a      	ldr	r2, [r3, #8]
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	683a      	ldr	r2, [r7, #0]
 800c2b8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	683a      	ldr	r2, [r7, #0]
 800c2be:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	1c5a      	adds	r2, r3, #1
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	601a      	str	r2, [r3, #0]
}
 800c2d0:	bf00      	nop
 800c2d2:	3714      	adds	r7, #20
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr

0800c2dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b085      	sub	sp, #20
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f2:	d103      	bne.n	800c2fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	691b      	ldr	r3, [r3, #16]
 800c2f8:	60fb      	str	r3, [r7, #12]
 800c2fa:	e00c      	b.n	800c316 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	3308      	adds	r3, #8
 800c300:	60fb      	str	r3, [r7, #12]
 800c302:	e002      	b.n	800c30a <vListInsert+0x2e>
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	60fb      	str	r3, [r7, #12]
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	68ba      	ldr	r2, [r7, #8]
 800c312:	429a      	cmp	r2, r3
 800c314:	d2f6      	bcs.n	800c304 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	685a      	ldr	r2, [r3, #4]
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	683a      	ldr	r2, [r7, #0]
 800c324:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	68fa      	ldr	r2, [r7, #12]
 800c32a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	683a      	ldr	r2, [r7, #0]
 800c330:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	1c5a      	adds	r2, r3, #1
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	601a      	str	r2, [r3, #0]
}
 800c342:	bf00      	nop
 800c344:	3714      	adds	r7, #20
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr

0800c34e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c34e:	b480      	push	{r7}
 800c350:	b085      	sub	sp, #20
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	691b      	ldr	r3, [r3, #16]
 800c35a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	6892      	ldr	r2, [r2, #8]
 800c364:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	689b      	ldr	r3, [r3, #8]
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	6852      	ldr	r2, [r2, #4]
 800c36e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	429a      	cmp	r2, r3
 800c378:	d103      	bne.n	800c382 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	689a      	ldr	r2, [r3, #8]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	1e5a      	subs	r2, r3, #1
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3714      	adds	r7, #20
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
	...

0800c3a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d10d      	bne.n	800c3d4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c3b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3bc:	b672      	cpsid	i
 800c3be:	f383 8811 	msr	BASEPRI, r3
 800c3c2:	f3bf 8f6f 	isb	sy
 800c3c6:	f3bf 8f4f 	dsb	sy
 800c3ca:	b662      	cpsie	i
 800c3cc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c3ce:	bf00      	nop
 800c3d0:	bf00      	nop
 800c3d2:	e7fd      	b.n	800c3d0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800c3d4:	f002 fa3a 	bl	800e84c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3e0:	68f9      	ldr	r1, [r7, #12]
 800c3e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c3e4:	fb01 f303 	mul.w	r3, r1, r3
 800c3e8:	441a      	add	r2, r3
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c404:	3b01      	subs	r3, #1
 800c406:	68f9      	ldr	r1, [r7, #12]
 800c408:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c40a:	fb01 f303 	mul.w	r3, r1, r3
 800c40e:	441a      	add	r2, r3
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	22ff      	movs	r2, #255	@ 0xff
 800c418:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	22ff      	movs	r2, #255	@ 0xff
 800c420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d114      	bne.n	800c454 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	691b      	ldr	r3, [r3, #16]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d01a      	beq.n	800c468 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	3310      	adds	r3, #16
 800c436:	4618      	mov	r0, r3
 800c438:	f001 fce8 	bl	800de0c <xTaskRemoveFromEventList>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d012      	beq.n	800c468 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c442:	4b0d      	ldr	r3, [pc, #52]	@ (800c478 <xQueueGenericReset+0xd4>)
 800c444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c448:	601a      	str	r2, [r3, #0]
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	f3bf 8f6f 	isb	sy
 800c452:	e009      	b.n	800c468 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	3310      	adds	r3, #16
 800c458:	4618      	mov	r0, r3
 800c45a:	f7ff feee 	bl	800c23a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	3324      	adds	r3, #36	@ 0x24
 800c462:	4618      	mov	r0, r3
 800c464:	f7ff fee9 	bl	800c23a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c468:	f002 fa26 	bl	800e8b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c46c:	2301      	movs	r3, #1
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3710      	adds	r7, #16
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	e000ed04 	.word	0xe000ed04

0800c47c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b08e      	sub	sp, #56	@ 0x38
 800c480:	af02      	add	r7, sp, #8
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
 800c488:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d10d      	bne.n	800c4ac <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800c490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c494:	b672      	cpsid	i
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	b662      	cpsie	i
 800c4a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c4a6:	bf00      	nop
 800c4a8:	bf00      	nop
 800c4aa:	e7fd      	b.n	800c4a8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d10d      	bne.n	800c4ce <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800c4b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b6:	b672      	cpsid	i
 800c4b8:	f383 8811 	msr	BASEPRI, r3
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f3bf 8f4f 	dsb	sy
 800c4c4:	b662      	cpsie	i
 800c4c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c4c8:	bf00      	nop
 800c4ca:	bf00      	nop
 800c4cc:	e7fd      	b.n	800c4ca <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d002      	beq.n	800c4da <xQueueGenericCreateStatic+0x5e>
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d001      	beq.n	800c4de <xQueueGenericCreateStatic+0x62>
 800c4da:	2301      	movs	r3, #1
 800c4dc:	e000      	b.n	800c4e0 <xQueueGenericCreateStatic+0x64>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d10d      	bne.n	800c500 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800c4e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e8:	b672      	cpsid	i
 800c4ea:	f383 8811 	msr	BASEPRI, r3
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f3bf 8f4f 	dsb	sy
 800c4f6:	b662      	cpsie	i
 800c4f8:	623b      	str	r3, [r7, #32]
}
 800c4fa:	bf00      	nop
 800c4fc:	bf00      	nop
 800c4fe:	e7fd      	b.n	800c4fc <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d102      	bne.n	800c50c <xQueueGenericCreateStatic+0x90>
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d101      	bne.n	800c510 <xQueueGenericCreateStatic+0x94>
 800c50c:	2301      	movs	r3, #1
 800c50e:	e000      	b.n	800c512 <xQueueGenericCreateStatic+0x96>
 800c510:	2300      	movs	r3, #0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d10d      	bne.n	800c532 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800c516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c51a:	b672      	cpsid	i
 800c51c:	f383 8811 	msr	BASEPRI, r3
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	b662      	cpsie	i
 800c52a:	61fb      	str	r3, [r7, #28]
}
 800c52c:	bf00      	nop
 800c52e:	bf00      	nop
 800c530:	e7fd      	b.n	800c52e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c532:	2348      	movs	r3, #72	@ 0x48
 800c534:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	2b48      	cmp	r3, #72	@ 0x48
 800c53a:	d00d      	beq.n	800c558 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800c53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c540:	b672      	cpsid	i
 800c542:	f383 8811 	msr	BASEPRI, r3
 800c546:	f3bf 8f6f 	isb	sy
 800c54a:	f3bf 8f4f 	dsb	sy
 800c54e:	b662      	cpsie	i
 800c550:	61bb      	str	r3, [r7, #24]
}
 800c552:	bf00      	nop
 800c554:	bf00      	nop
 800c556:	e7fd      	b.n	800c554 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c558:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c560:	2b00      	cmp	r3, #0
 800c562:	d00d      	beq.n	800c580 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c566:	2201      	movs	r2, #1
 800c568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c56c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c572:	9300      	str	r3, [sp, #0]
 800c574:	4613      	mov	r3, r2
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	68b9      	ldr	r1, [r7, #8]
 800c57a:	68f8      	ldr	r0, [r7, #12]
 800c57c:	f000 f848 	bl	800c610 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c582:	4618      	mov	r0, r3
 800c584:	3730      	adds	r7, #48	@ 0x30
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}

0800c58a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c58a:	b580      	push	{r7, lr}
 800c58c:	b08a      	sub	sp, #40	@ 0x28
 800c58e:	af02      	add	r7, sp, #8
 800c590:	60f8      	str	r0, [r7, #12]
 800c592:	60b9      	str	r1, [r7, #8]
 800c594:	4613      	mov	r3, r2
 800c596:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d10d      	bne.n	800c5ba <xQueueGenericCreate+0x30>
	__asm volatile
 800c59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5a2:	b672      	cpsid	i
 800c5a4:	f383 8811 	msr	BASEPRI, r3
 800c5a8:	f3bf 8f6f 	isb	sy
 800c5ac:	f3bf 8f4f 	dsb	sy
 800c5b0:	b662      	cpsie	i
 800c5b2:	613b      	str	r3, [r7, #16]
}
 800c5b4:	bf00      	nop
 800c5b6:	bf00      	nop
 800c5b8:	e7fd      	b.n	800c5b6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d102      	bne.n	800c5c6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	61fb      	str	r3, [r7, #28]
 800c5c4:	e004      	b.n	800c5d0 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	68ba      	ldr	r2, [r7, #8]
 800c5ca:	fb02 f303 	mul.w	r3, r2, r3
 800c5ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	3348      	adds	r3, #72	@ 0x48
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f002 fa67 	bl	800eaa8 <pvPortMalloc>
 800c5da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d011      	beq.n	800c606 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c5e2:	69bb      	ldr	r3, [r7, #24]
 800c5e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	3348      	adds	r3, #72	@ 0x48
 800c5ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c5ec:	69bb      	ldr	r3, [r7, #24]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c5f4:	79fa      	ldrb	r2, [r7, #7]
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	9300      	str	r3, [sp, #0]
 800c5fa:	4613      	mov	r3, r2
 800c5fc:	697a      	ldr	r2, [r7, #20]
 800c5fe:	68b9      	ldr	r1, [r7, #8]
 800c600:	68f8      	ldr	r0, [r7, #12]
 800c602:	f000 f805 	bl	800c610 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c606:	69bb      	ldr	r3, [r7, #24]
	}
 800c608:	4618      	mov	r0, r3
 800c60a:	3720      	adds	r7, #32
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	607a      	str	r2, [r7, #4]
 800c61c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d103      	bne.n	800c62c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	69ba      	ldr	r2, [r7, #24]
 800c628:	601a      	str	r2, [r3, #0]
 800c62a:	e002      	b.n	800c632 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c62c:	69bb      	ldr	r3, [r7, #24]
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c632:	69bb      	ldr	r3, [r7, #24]
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	68ba      	ldr	r2, [r7, #8]
 800c63c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c63e:	2101      	movs	r1, #1
 800c640:	69b8      	ldr	r0, [r7, #24]
 800c642:	f7ff feaf 	bl	800c3a4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c646:	bf00      	nop
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b082      	sub	sp, #8
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00e      	beq.n	800c67a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2200      	movs	r2, #0
 800c666:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c66e:	2300      	movs	r3, #0
 800c670:	2200      	movs	r2, #0
 800c672:	2100      	movs	r1, #0
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 f837 	bl	800c6e8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c67a:	bf00      	nop
 800c67c:	3708      	adds	r7, #8
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c682:	b580      	push	{r7, lr}
 800c684:	b086      	sub	sp, #24
 800c686:	af00      	add	r7, sp, #0
 800c688:	4603      	mov	r3, r0
 800c68a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c68c:	2301      	movs	r3, #1
 800c68e:	617b      	str	r3, [r7, #20]
 800c690:	2300      	movs	r3, #0
 800c692:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c694:	79fb      	ldrb	r3, [r7, #7]
 800c696:	461a      	mov	r2, r3
 800c698:	6939      	ldr	r1, [r7, #16]
 800c69a:	6978      	ldr	r0, [r7, #20]
 800c69c:	f7ff ff75 	bl	800c58a <xQueueGenericCreate>
 800c6a0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c6a2:	68f8      	ldr	r0, [r7, #12]
 800c6a4:	f7ff ffd3 	bl	800c64e <prvInitialiseMutex>

		return xNewQueue;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
	}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3718      	adds	r7, #24
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}

0800c6b2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c6b2:	b580      	push	{r7, lr}
 800c6b4:	b088      	sub	sp, #32
 800c6b6:	af02      	add	r7, sp, #8
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	6039      	str	r1, [r7, #0]
 800c6bc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	617b      	str	r3, [r7, #20]
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c6c6:	79fb      	ldrb	r3, [r7, #7]
 800c6c8:	9300      	str	r3, [sp, #0]
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	6939      	ldr	r1, [r7, #16]
 800c6d0:	6978      	ldr	r0, [r7, #20]
 800c6d2:	f7ff fed3 	bl	800c47c <xQueueGenericCreateStatic>
 800c6d6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c6d8:	68f8      	ldr	r0, [r7, #12]
 800c6da:	f7ff ffb8 	bl	800c64e <prvInitialiseMutex>

		return xNewQueue;
 800c6de:	68fb      	ldr	r3, [r7, #12]
	}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3718      	adds	r7, #24
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b08e      	sub	sp, #56	@ 0x38
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
 800c6f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c700:	2b00      	cmp	r3, #0
 800c702:	d10d      	bne.n	800c720 <xQueueGenericSend+0x38>
	__asm volatile
 800c704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c708:	b672      	cpsid	i
 800c70a:	f383 8811 	msr	BASEPRI, r3
 800c70e:	f3bf 8f6f 	isb	sy
 800c712:	f3bf 8f4f 	dsb	sy
 800c716:	b662      	cpsie	i
 800c718:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c71a:	bf00      	nop
 800c71c:	bf00      	nop
 800c71e:	e7fd      	b.n	800c71c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d103      	bne.n	800c72e <xQueueGenericSend+0x46>
 800c726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d101      	bne.n	800c732 <xQueueGenericSend+0x4a>
 800c72e:	2301      	movs	r3, #1
 800c730:	e000      	b.n	800c734 <xQueueGenericSend+0x4c>
 800c732:	2300      	movs	r3, #0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d10d      	bne.n	800c754 <xQueueGenericSend+0x6c>
	__asm volatile
 800c738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c73c:	b672      	cpsid	i
 800c73e:	f383 8811 	msr	BASEPRI, r3
 800c742:	f3bf 8f6f 	isb	sy
 800c746:	f3bf 8f4f 	dsb	sy
 800c74a:	b662      	cpsie	i
 800c74c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c74e:	bf00      	nop
 800c750:	bf00      	nop
 800c752:	e7fd      	b.n	800c750 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	2b02      	cmp	r3, #2
 800c758:	d103      	bne.n	800c762 <xQueueGenericSend+0x7a>
 800c75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c75c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d101      	bne.n	800c766 <xQueueGenericSend+0x7e>
 800c762:	2301      	movs	r3, #1
 800c764:	e000      	b.n	800c768 <xQueueGenericSend+0x80>
 800c766:	2300      	movs	r3, #0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d10d      	bne.n	800c788 <xQueueGenericSend+0xa0>
	__asm volatile
 800c76c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c770:	b672      	cpsid	i
 800c772:	f383 8811 	msr	BASEPRI, r3
 800c776:	f3bf 8f6f 	isb	sy
 800c77a:	f3bf 8f4f 	dsb	sy
 800c77e:	b662      	cpsie	i
 800c780:	623b      	str	r3, [r7, #32]
}
 800c782:	bf00      	nop
 800c784:	bf00      	nop
 800c786:	e7fd      	b.n	800c784 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c788:	f001 fd0e 	bl	800e1a8 <xTaskGetSchedulerState>
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d102      	bne.n	800c798 <xQueueGenericSend+0xb0>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d101      	bne.n	800c79c <xQueueGenericSend+0xb4>
 800c798:	2301      	movs	r3, #1
 800c79a:	e000      	b.n	800c79e <xQueueGenericSend+0xb6>
 800c79c:	2300      	movs	r3, #0
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d10d      	bne.n	800c7be <xQueueGenericSend+0xd6>
	__asm volatile
 800c7a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a6:	b672      	cpsid	i
 800c7a8:	f383 8811 	msr	BASEPRI, r3
 800c7ac:	f3bf 8f6f 	isb	sy
 800c7b0:	f3bf 8f4f 	dsb	sy
 800c7b4:	b662      	cpsie	i
 800c7b6:	61fb      	str	r3, [r7, #28]
}
 800c7b8:	bf00      	nop
 800c7ba:	bf00      	nop
 800c7bc:	e7fd      	b.n	800c7ba <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c7be:	f002 f845 	bl	800e84c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d302      	bcc.n	800c7d4 <xQueueGenericSend+0xec>
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	2b02      	cmp	r3, #2
 800c7d2:	d129      	bne.n	800c828 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c7d4:	683a      	ldr	r2, [r7, #0]
 800c7d6:	68b9      	ldr	r1, [r7, #8]
 800c7d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c7da:	f000 fcd3 	bl	800d184 <prvCopyDataToQueue>
 800c7de:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d010      	beq.n	800c80a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ea:	3324      	adds	r3, #36	@ 0x24
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f001 fb0d 	bl	800de0c <xTaskRemoveFromEventList>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d013      	beq.n	800c820 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c7f8:	4b3f      	ldr	r3, [pc, #252]	@ (800c8f8 <xQueueGenericSend+0x210>)
 800c7fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7fe:	601a      	str	r2, [r3, #0]
 800c800:	f3bf 8f4f 	dsb	sy
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	e00a      	b.n	800c820 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c80a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d007      	beq.n	800c820 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c810:	4b39      	ldr	r3, [pc, #228]	@ (800c8f8 <xQueueGenericSend+0x210>)
 800c812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c816:	601a      	str	r2, [r3, #0]
 800c818:	f3bf 8f4f 	dsb	sy
 800c81c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c820:	f002 f84a 	bl	800e8b8 <vPortExitCritical>
				return pdPASS;
 800c824:	2301      	movs	r3, #1
 800c826:	e063      	b.n	800c8f0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d103      	bne.n	800c836 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c82e:	f002 f843 	bl	800e8b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c832:	2300      	movs	r3, #0
 800c834:	e05c      	b.n	800c8f0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d106      	bne.n	800c84a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c83c:	f107 0314 	add.w	r3, r7, #20
 800c840:	4618      	mov	r0, r3
 800c842:	f001 fb49 	bl	800ded8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c846:	2301      	movs	r3, #1
 800c848:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c84a:	f002 f835 	bl	800e8b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c84e:	f001 f8c3 	bl	800d9d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c852:	f001 fffb 	bl	800e84c <vPortEnterCritical>
 800c856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c858:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c85c:	b25b      	sxtb	r3, r3
 800c85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c862:	d103      	bne.n	800c86c <xQueueGenericSend+0x184>
 800c864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c866:	2200      	movs	r2, #0
 800c868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c86e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c872:	b25b      	sxtb	r3, r3
 800c874:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c878:	d103      	bne.n	800c882 <xQueueGenericSend+0x19a>
 800c87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c87c:	2200      	movs	r2, #0
 800c87e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c882:	f002 f819 	bl	800e8b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c886:	1d3a      	adds	r2, r7, #4
 800c888:	f107 0314 	add.w	r3, r7, #20
 800c88c:	4611      	mov	r1, r2
 800c88e:	4618      	mov	r0, r3
 800c890:	f001 fb38 	bl	800df04 <xTaskCheckForTimeOut>
 800c894:	4603      	mov	r3, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d124      	bne.n	800c8e4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c89a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c89c:	f000 fd6a 	bl	800d374 <prvIsQueueFull>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d018      	beq.n	800c8d8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8a8:	3310      	adds	r3, #16
 800c8aa:	687a      	ldr	r2, [r7, #4]
 800c8ac:	4611      	mov	r1, r2
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f001 fa84 	bl	800ddbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c8b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c8b6:	f000 fcf5 	bl	800d2a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c8ba:	f001 f89b 	bl	800d9f4 <xTaskResumeAll>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f47f af7c 	bne.w	800c7be <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800c8c6:	4b0c      	ldr	r3, [pc, #48]	@ (800c8f8 <xQueueGenericSend+0x210>)
 800c8c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8cc:	601a      	str	r2, [r3, #0]
 800c8ce:	f3bf 8f4f 	dsb	sy
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	e772      	b.n	800c7be <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c8d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c8da:	f000 fce3 	bl	800d2a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c8de:	f001 f889 	bl	800d9f4 <xTaskResumeAll>
 800c8e2:	e76c      	b.n	800c7be <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c8e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c8e6:	f000 fcdd 	bl	800d2a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c8ea:	f001 f883 	bl	800d9f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c8ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3738      	adds	r7, #56	@ 0x38
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	e000ed04 	.word	0xe000ed04

0800c8fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b08e      	sub	sp, #56	@ 0x38
 800c900:	af00      	add	r7, sp, #0
 800c902:	60f8      	str	r0, [r7, #12]
 800c904:	60b9      	str	r1, [r7, #8]
 800c906:	607a      	str	r2, [r7, #4]
 800c908:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c910:	2b00      	cmp	r3, #0
 800c912:	d10d      	bne.n	800c930 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800c914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c918:	b672      	cpsid	i
 800c91a:	f383 8811 	msr	BASEPRI, r3
 800c91e:	f3bf 8f6f 	isb	sy
 800c922:	f3bf 8f4f 	dsb	sy
 800c926:	b662      	cpsie	i
 800c928:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c92a:	bf00      	nop
 800c92c:	bf00      	nop
 800c92e:	e7fd      	b.n	800c92c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d103      	bne.n	800c93e <xQueueGenericSendFromISR+0x42>
 800c936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d101      	bne.n	800c942 <xQueueGenericSendFromISR+0x46>
 800c93e:	2301      	movs	r3, #1
 800c940:	e000      	b.n	800c944 <xQueueGenericSendFromISR+0x48>
 800c942:	2300      	movs	r3, #0
 800c944:	2b00      	cmp	r3, #0
 800c946:	d10d      	bne.n	800c964 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800c948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c94c:	b672      	cpsid	i
 800c94e:	f383 8811 	msr	BASEPRI, r3
 800c952:	f3bf 8f6f 	isb	sy
 800c956:	f3bf 8f4f 	dsb	sy
 800c95a:	b662      	cpsie	i
 800c95c:	623b      	str	r3, [r7, #32]
}
 800c95e:	bf00      	nop
 800c960:	bf00      	nop
 800c962:	e7fd      	b.n	800c960 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	2b02      	cmp	r3, #2
 800c968:	d103      	bne.n	800c972 <xQueueGenericSendFromISR+0x76>
 800c96a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c96c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d101      	bne.n	800c976 <xQueueGenericSendFromISR+0x7a>
 800c972:	2301      	movs	r3, #1
 800c974:	e000      	b.n	800c978 <xQueueGenericSendFromISR+0x7c>
 800c976:	2300      	movs	r3, #0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d10d      	bne.n	800c998 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800c97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c980:	b672      	cpsid	i
 800c982:	f383 8811 	msr	BASEPRI, r3
 800c986:	f3bf 8f6f 	isb	sy
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	b662      	cpsie	i
 800c990:	61fb      	str	r3, [r7, #28]
}
 800c992:	bf00      	nop
 800c994:	bf00      	nop
 800c996:	e7fd      	b.n	800c994 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c998:	f002 f840 	bl	800ea1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c99c:	f3ef 8211 	mrs	r2, BASEPRI
 800c9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a4:	b672      	cpsid	i
 800c9a6:	f383 8811 	msr	BASEPRI, r3
 800c9aa:	f3bf 8f6f 	isb	sy
 800c9ae:	f3bf 8f4f 	dsb	sy
 800c9b2:	b662      	cpsie	i
 800c9b4:	61ba      	str	r2, [r7, #24]
 800c9b6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c9b8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c9ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c9bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d302      	bcc.n	800c9ce <xQueueGenericSendFromISR+0xd2>
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	2b02      	cmp	r3, #2
 800c9cc:	d12c      	bne.n	800ca28 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c9d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c9d8:	683a      	ldr	r2, [r7, #0]
 800c9da:	68b9      	ldr	r1, [r7, #8]
 800c9dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c9de:	f000 fbd1 	bl	800d184 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c9e2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800c9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ea:	d112      	bne.n	800ca12 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d016      	beq.n	800ca22 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9f6:	3324      	adds	r3, #36	@ 0x24
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f001 fa07 	bl	800de0c <xTaskRemoveFromEventList>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d00e      	beq.n	800ca22 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d00b      	beq.n	800ca22 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	601a      	str	r2, [r3, #0]
 800ca10:	e007      	b.n	800ca22 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ca12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ca16:	3301      	adds	r3, #1
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	b25a      	sxtb	r2, r3
 800ca1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ca22:	2301      	movs	r3, #1
 800ca24:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800ca26:	e001      	b.n	800ca2c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca2e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ca36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ca38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3738      	adds	r7, #56	@ 0x38
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}

0800ca42 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ca42:	b580      	push	{r7, lr}
 800ca44:	b08e      	sub	sp, #56	@ 0x38
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
 800ca4a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ca50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d10d      	bne.n	800ca72 <xQueueGiveFromISR+0x30>
	__asm volatile
 800ca56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca5a:	b672      	cpsid	i
 800ca5c:	f383 8811 	msr	BASEPRI, r3
 800ca60:	f3bf 8f6f 	isb	sy
 800ca64:	f3bf 8f4f 	dsb	sy
 800ca68:	b662      	cpsie	i
 800ca6a:	623b      	str	r3, [r7, #32]
}
 800ca6c:	bf00      	nop
 800ca6e:	bf00      	nop
 800ca70:	e7fd      	b.n	800ca6e <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ca72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d00d      	beq.n	800ca96 <xQueueGiveFromISR+0x54>
	__asm volatile
 800ca7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca7e:	b672      	cpsid	i
 800ca80:	f383 8811 	msr	BASEPRI, r3
 800ca84:	f3bf 8f6f 	isb	sy
 800ca88:	f3bf 8f4f 	dsb	sy
 800ca8c:	b662      	cpsie	i
 800ca8e:	61fb      	str	r3, [r7, #28]
}
 800ca90:	bf00      	nop
 800ca92:	bf00      	nop
 800ca94:	e7fd      	b.n	800ca92 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ca96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d103      	bne.n	800caa6 <xQueueGiveFromISR+0x64>
 800ca9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa0:	689b      	ldr	r3, [r3, #8]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d101      	bne.n	800caaa <xQueueGiveFromISR+0x68>
 800caa6:	2301      	movs	r3, #1
 800caa8:	e000      	b.n	800caac <xQueueGiveFromISR+0x6a>
 800caaa:	2300      	movs	r3, #0
 800caac:	2b00      	cmp	r3, #0
 800caae:	d10d      	bne.n	800cacc <xQueueGiveFromISR+0x8a>
	__asm volatile
 800cab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cab4:	b672      	cpsid	i
 800cab6:	f383 8811 	msr	BASEPRI, r3
 800caba:	f3bf 8f6f 	isb	sy
 800cabe:	f3bf 8f4f 	dsb	sy
 800cac2:	b662      	cpsie	i
 800cac4:	61bb      	str	r3, [r7, #24]
}
 800cac6:	bf00      	nop
 800cac8:	bf00      	nop
 800caca:	e7fd      	b.n	800cac8 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cacc:	f001 ffa6 	bl	800ea1c <vPortValidateInterruptPriority>
	__asm volatile
 800cad0:	f3ef 8211 	mrs	r2, BASEPRI
 800cad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cad8:	b672      	cpsid	i
 800cada:	f383 8811 	msr	BASEPRI, r3
 800cade:	f3bf 8f6f 	isb	sy
 800cae2:	f3bf 8f4f 	dsb	sy
 800cae6:	b662      	cpsie	i
 800cae8:	617a      	str	r2, [r7, #20]
 800caea:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800caec:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800caee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800caf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caf4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800caf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cafa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d22b      	bcs.n	800cb58 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cb00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cb06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cb0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb0c:	1c5a      	adds	r2, r3, #1
 800cb0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb10:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cb12:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb1a:	d112      	bne.n	800cb42 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d016      	beq.n	800cb52 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb26:	3324      	adds	r3, #36	@ 0x24
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f001 f96f 	bl	800de0c <xTaskRemoveFromEventList>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d00e      	beq.n	800cb52 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00b      	beq.n	800cb52 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	601a      	str	r2, [r3, #0]
 800cb40:	e007      	b.n	800cb52 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cb42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb46:	3301      	adds	r3, #1
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	b25a      	sxtb	r2, r3
 800cb4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cb52:	2301      	movs	r3, #1
 800cb54:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb56:	e001      	b.n	800cb5c <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb5e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f383 8811 	msr	BASEPRI, r3
}
 800cb66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3738      	adds	r7, #56	@ 0x38
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
	...

0800cb74 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b08c      	sub	sp, #48	@ 0x30
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cb80:	2300      	movs	r3, #0
 800cb82:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cb88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d10d      	bne.n	800cbaa <xQueueReceive+0x36>
	__asm volatile
 800cb8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb92:	b672      	cpsid	i
 800cb94:	f383 8811 	msr	BASEPRI, r3
 800cb98:	f3bf 8f6f 	isb	sy
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	b662      	cpsie	i
 800cba2:	623b      	str	r3, [r7, #32]
}
 800cba4:	bf00      	nop
 800cba6:	bf00      	nop
 800cba8:	e7fd      	b.n	800cba6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d103      	bne.n	800cbb8 <xQueueReceive+0x44>
 800cbb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d101      	bne.n	800cbbc <xQueueReceive+0x48>
 800cbb8:	2301      	movs	r3, #1
 800cbba:	e000      	b.n	800cbbe <xQueueReceive+0x4a>
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d10d      	bne.n	800cbde <xQueueReceive+0x6a>
	__asm volatile
 800cbc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbc6:	b672      	cpsid	i
 800cbc8:	f383 8811 	msr	BASEPRI, r3
 800cbcc:	f3bf 8f6f 	isb	sy
 800cbd0:	f3bf 8f4f 	dsb	sy
 800cbd4:	b662      	cpsie	i
 800cbd6:	61fb      	str	r3, [r7, #28]
}
 800cbd8:	bf00      	nop
 800cbda:	bf00      	nop
 800cbdc:	e7fd      	b.n	800cbda <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cbde:	f001 fae3 	bl	800e1a8 <xTaskGetSchedulerState>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d102      	bne.n	800cbee <xQueueReceive+0x7a>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d101      	bne.n	800cbf2 <xQueueReceive+0x7e>
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e000      	b.n	800cbf4 <xQueueReceive+0x80>
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d10d      	bne.n	800cc14 <xQueueReceive+0xa0>
	__asm volatile
 800cbf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbfc:	b672      	cpsid	i
 800cbfe:	f383 8811 	msr	BASEPRI, r3
 800cc02:	f3bf 8f6f 	isb	sy
 800cc06:	f3bf 8f4f 	dsb	sy
 800cc0a:	b662      	cpsie	i
 800cc0c:	61bb      	str	r3, [r7, #24]
}
 800cc0e:	bf00      	nop
 800cc10:	bf00      	nop
 800cc12:	e7fd      	b.n	800cc10 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc14:	f001 fe1a 	bl	800e84c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc1c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d01f      	beq.n	800cc64 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cc24:	68b9      	ldr	r1, [r7, #8]
 800cc26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc28:	f000 fb16 	bl	800d258 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc2e:	1e5a      	subs	r2, r3, #1
 800cc30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc32:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc36:	691b      	ldr	r3, [r3, #16]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00f      	beq.n	800cc5c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc3e:	3310      	adds	r3, #16
 800cc40:	4618      	mov	r0, r3
 800cc42:	f001 f8e3 	bl	800de0c <xTaskRemoveFromEventList>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d007      	beq.n	800cc5c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cc4c:	4b3c      	ldr	r3, [pc, #240]	@ (800cd40 <xQueueReceive+0x1cc>)
 800cc4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc52:	601a      	str	r2, [r3, #0]
 800cc54:	f3bf 8f4f 	dsb	sy
 800cc58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cc5c:	f001 fe2c 	bl	800e8b8 <vPortExitCritical>
				return pdPASS;
 800cc60:	2301      	movs	r3, #1
 800cc62:	e069      	b.n	800cd38 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d103      	bne.n	800cc72 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc6a:	f001 fe25 	bl	800e8b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	e062      	b.n	800cd38 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d106      	bne.n	800cc86 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc78:	f107 0310 	add.w	r3, r7, #16
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f001 f92b 	bl	800ded8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc82:	2301      	movs	r3, #1
 800cc84:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc86:	f001 fe17 	bl	800e8b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc8a:	f000 fea5 	bl	800d9d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc8e:	f001 fddd 	bl	800e84c <vPortEnterCritical>
 800cc92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc98:	b25b      	sxtb	r3, r3
 800cc9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc9e:	d103      	bne.n	800cca8 <xQueueReceive+0x134>
 800cca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cca2:	2200      	movs	r2, #0
 800cca4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ccae:	b25b      	sxtb	r3, r3
 800ccb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccb4:	d103      	bne.n	800ccbe <xQueueReceive+0x14a>
 800ccb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ccbe:	f001 fdfb 	bl	800e8b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ccc2:	1d3a      	adds	r2, r7, #4
 800ccc4:	f107 0310 	add.w	r3, r7, #16
 800ccc8:	4611      	mov	r1, r2
 800ccca:	4618      	mov	r0, r3
 800cccc:	f001 f91a 	bl	800df04 <xTaskCheckForTimeOut>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d123      	bne.n	800cd1e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ccd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccd8:	f000 fb36 	bl	800d348 <prvIsQueueEmpty>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d017      	beq.n	800cd12 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cce4:	3324      	adds	r3, #36	@ 0x24
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	4611      	mov	r1, r2
 800ccea:	4618      	mov	r0, r3
 800ccec:	f001 f866 	bl	800ddbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ccf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccf2:	f000 fad7 	bl	800d2a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ccf6:	f000 fe7d 	bl	800d9f4 <xTaskResumeAll>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d189      	bne.n	800cc14 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800cd00:	4b0f      	ldr	r3, [pc, #60]	@ (800cd40 <xQueueReceive+0x1cc>)
 800cd02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd06:	601a      	str	r2, [r3, #0]
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	f3bf 8f6f 	isb	sy
 800cd10:	e780      	b.n	800cc14 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cd12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd14:	f000 fac6 	bl	800d2a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd18:	f000 fe6c 	bl	800d9f4 <xTaskResumeAll>
 800cd1c:	e77a      	b.n	800cc14 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cd1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd20:	f000 fac0 	bl	800d2a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd24:	f000 fe66 	bl	800d9f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd2a:	f000 fb0d 	bl	800d348 <prvIsQueueEmpty>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	f43f af6f 	beq.w	800cc14 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cd36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3730      	adds	r7, #48	@ 0x30
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	e000ed04 	.word	0xe000ed04

0800cd44 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b08e      	sub	sp, #56	@ 0x38
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cd56:	2300      	movs	r3, #0
 800cd58:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cd5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d10d      	bne.n	800cd7c <xQueueSemaphoreTake+0x38>
	__asm volatile
 800cd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd64:	b672      	cpsid	i
 800cd66:	f383 8811 	msr	BASEPRI, r3
 800cd6a:	f3bf 8f6f 	isb	sy
 800cd6e:	f3bf 8f4f 	dsb	sy
 800cd72:	b662      	cpsie	i
 800cd74:	623b      	str	r3, [r7, #32]
}
 800cd76:	bf00      	nop
 800cd78:	bf00      	nop
 800cd7a:	e7fd      	b.n	800cd78 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cd7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d00d      	beq.n	800cda0 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800cd84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd88:	b672      	cpsid	i
 800cd8a:	f383 8811 	msr	BASEPRI, r3
 800cd8e:	f3bf 8f6f 	isb	sy
 800cd92:	f3bf 8f4f 	dsb	sy
 800cd96:	b662      	cpsie	i
 800cd98:	61fb      	str	r3, [r7, #28]
}
 800cd9a:	bf00      	nop
 800cd9c:	bf00      	nop
 800cd9e:	e7fd      	b.n	800cd9c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cda0:	f001 fa02 	bl	800e1a8 <xTaskGetSchedulerState>
 800cda4:	4603      	mov	r3, r0
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d102      	bne.n	800cdb0 <xQueueSemaphoreTake+0x6c>
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d101      	bne.n	800cdb4 <xQueueSemaphoreTake+0x70>
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e000      	b.n	800cdb6 <xQueueSemaphoreTake+0x72>
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d10d      	bne.n	800cdd6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800cdba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdbe:	b672      	cpsid	i
 800cdc0:	f383 8811 	msr	BASEPRI, r3
 800cdc4:	f3bf 8f6f 	isb	sy
 800cdc8:	f3bf 8f4f 	dsb	sy
 800cdcc:	b662      	cpsie	i
 800cdce:	61bb      	str	r3, [r7, #24]
}
 800cdd0:	bf00      	nop
 800cdd2:	bf00      	nop
 800cdd4:	e7fd      	b.n	800cdd2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cdd6:	f001 fd39 	bl	800e84c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cdda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdde:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cde0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d024      	beq.n	800ce30 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cde6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cde8:	1e5a      	subs	r2, r3, #1
 800cdea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdec:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cdee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d104      	bne.n	800ce00 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cdf6:	f001 fba1 	bl	800e53c <pvTaskIncrementMutexHeldCount>
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdfe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce02:	691b      	ldr	r3, [r3, #16]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d00f      	beq.n	800ce28 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce0a:	3310      	adds	r3, #16
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f000 fffd 	bl	800de0c <xTaskRemoveFromEventList>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d007      	beq.n	800ce28 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ce18:	4b55      	ldr	r3, [pc, #340]	@ (800cf70 <xQueueSemaphoreTake+0x22c>)
 800ce1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce1e:	601a      	str	r2, [r3, #0]
 800ce20:	f3bf 8f4f 	dsb	sy
 800ce24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ce28:	f001 fd46 	bl	800e8b8 <vPortExitCritical>
				return pdPASS;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e09a      	b.n	800cf66 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d114      	bne.n	800ce60 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ce36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d00d      	beq.n	800ce58 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800ce3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce40:	b672      	cpsid	i
 800ce42:	f383 8811 	msr	BASEPRI, r3
 800ce46:	f3bf 8f6f 	isb	sy
 800ce4a:	f3bf 8f4f 	dsb	sy
 800ce4e:	b662      	cpsie	i
 800ce50:	617b      	str	r3, [r7, #20]
}
 800ce52:	bf00      	nop
 800ce54:	bf00      	nop
 800ce56:	e7fd      	b.n	800ce54 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ce58:	f001 fd2e 	bl	800e8b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	e082      	b.n	800cf66 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d106      	bne.n	800ce74 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce66:	f107 030c 	add.w	r3, r7, #12
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f001 f834 	bl	800ded8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce70:	2301      	movs	r3, #1
 800ce72:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce74:	f001 fd20 	bl	800e8b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce78:	f000 fdae 	bl	800d9d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce7c:	f001 fce6 	bl	800e84c <vPortEnterCritical>
 800ce80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ce86:	b25b      	sxtb	r3, r3
 800ce88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce8c:	d103      	bne.n	800ce96 <xQueueSemaphoreTake+0x152>
 800ce8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce90:	2200      	movs	r2, #0
 800ce92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ce96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce9c:	b25b      	sxtb	r3, r3
 800ce9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cea2:	d103      	bne.n	800ceac <xQueueSemaphoreTake+0x168>
 800cea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cea6:	2200      	movs	r2, #0
 800cea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ceac:	f001 fd04 	bl	800e8b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ceb0:	463a      	mov	r2, r7
 800ceb2:	f107 030c 	add.w	r3, r7, #12
 800ceb6:	4611      	mov	r1, r2
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f001 f823 	bl	800df04 <xTaskCheckForTimeOut>
 800cebe:	4603      	mov	r3, r0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d132      	bne.n	800cf2a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cec4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cec6:	f000 fa3f 	bl	800d348 <prvIsQueueEmpty>
 800ceca:	4603      	mov	r3, r0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d026      	beq.n	800cf1e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ced0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d109      	bne.n	800ceec <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800ced8:	f001 fcb8 	bl	800e84c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	4618      	mov	r0, r3
 800cee2:	f001 f97f 	bl	800e1e4 <xTaskPriorityInherit>
 800cee6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800cee8:	f001 fce6 	bl	800e8b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ceec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceee:	3324      	adds	r3, #36	@ 0x24
 800cef0:	683a      	ldr	r2, [r7, #0]
 800cef2:	4611      	mov	r1, r2
 800cef4:	4618      	mov	r0, r3
 800cef6:	f000 ff61 	bl	800ddbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cefa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cefc:	f000 f9d2 	bl	800d2a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cf00:	f000 fd78 	bl	800d9f4 <xTaskResumeAll>
 800cf04:	4603      	mov	r3, r0
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	f47f af65 	bne.w	800cdd6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800cf0c:	4b18      	ldr	r3, [pc, #96]	@ (800cf70 <xQueueSemaphoreTake+0x22c>)
 800cf0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf12:	601a      	str	r2, [r3, #0]
 800cf14:	f3bf 8f4f 	dsb	sy
 800cf18:	f3bf 8f6f 	isb	sy
 800cf1c:	e75b      	b.n	800cdd6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cf1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cf20:	f000 f9c0 	bl	800d2a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf24:	f000 fd66 	bl	800d9f4 <xTaskResumeAll>
 800cf28:	e755      	b.n	800cdd6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cf2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cf2c:	f000 f9ba 	bl	800d2a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf30:	f000 fd60 	bl	800d9f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cf36:	f000 fa07 	bl	800d348 <prvIsQueueEmpty>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	f43f af4a 	beq.w	800cdd6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cf42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d00d      	beq.n	800cf64 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800cf48:	f001 fc80 	bl	800e84c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cf4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cf4e:	f000 f901 	bl	800d154 <prvGetDisinheritPriorityAfterTimeout>
 800cf52:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cf54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf56:	689b      	ldr	r3, [r3, #8]
 800cf58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f001 fa4e 	bl	800e3fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cf60:	f001 fcaa 	bl	800e8b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cf64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3738      	adds	r7, #56	@ 0x38
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	e000ed04 	.word	0xe000ed04

0800cf74 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b08e      	sub	sp, #56	@ 0x38
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cf84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d10d      	bne.n	800cfa6 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800cf8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf8e:	b672      	cpsid	i
 800cf90:	f383 8811 	msr	BASEPRI, r3
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	b662      	cpsie	i
 800cf9e:	623b      	str	r3, [r7, #32]
}
 800cfa0:	bf00      	nop
 800cfa2:	bf00      	nop
 800cfa4:	e7fd      	b.n	800cfa2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d103      	bne.n	800cfb4 <xQueueReceiveFromISR+0x40>
 800cfac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d101      	bne.n	800cfb8 <xQueueReceiveFromISR+0x44>
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	e000      	b.n	800cfba <xQueueReceiveFromISR+0x46>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10d      	bne.n	800cfda <xQueueReceiveFromISR+0x66>
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfc2:	b672      	cpsid	i
 800cfc4:	f383 8811 	msr	BASEPRI, r3
 800cfc8:	f3bf 8f6f 	isb	sy
 800cfcc:	f3bf 8f4f 	dsb	sy
 800cfd0:	b662      	cpsie	i
 800cfd2:	61fb      	str	r3, [r7, #28]
}
 800cfd4:	bf00      	nop
 800cfd6:	bf00      	nop
 800cfd8:	e7fd      	b.n	800cfd6 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cfda:	f001 fd1f 	bl	800ea1c <vPortValidateInterruptPriority>
	__asm volatile
 800cfde:	f3ef 8211 	mrs	r2, BASEPRI
 800cfe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfe6:	b672      	cpsid	i
 800cfe8:	f383 8811 	msr	BASEPRI, r3
 800cfec:	f3bf 8f6f 	isb	sy
 800cff0:	f3bf 8f4f 	dsb	sy
 800cff4:	b662      	cpsie	i
 800cff6:	61ba      	str	r2, [r7, #24]
 800cff8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cffa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d002:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d006:	2b00      	cmp	r3, #0
 800d008:	d02f      	beq.n	800d06a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d00c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d010:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d014:	68b9      	ldr	r1, [r7, #8]
 800d016:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d018:	f000 f91e 	bl	800d258 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d01e:	1e5a      	subs	r2, r3, #1
 800d020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d022:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d024:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d02c:	d112      	bne.n	800d054 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d030:	691b      	ldr	r3, [r3, #16]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d016      	beq.n	800d064 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d038:	3310      	adds	r3, #16
 800d03a:	4618      	mov	r0, r3
 800d03c:	f000 fee6 	bl	800de0c <xTaskRemoveFromEventList>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d00e      	beq.n	800d064 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d00b      	beq.n	800d064 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2201      	movs	r2, #1
 800d050:	601a      	str	r2, [r3, #0]
 800d052:	e007      	b.n	800d064 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d054:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d058:	3301      	adds	r3, #1
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	b25a      	sxtb	r2, r3
 800d05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d064:	2301      	movs	r3, #1
 800d066:	637b      	str	r3, [r7, #52]	@ 0x34
 800d068:	e001      	b.n	800d06e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800d06a:	2300      	movs	r3, #0
 800d06c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d070:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	f383 8811 	msr	BASEPRI, r3
}
 800d078:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d07a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3738      	adds	r7, #56	@ 0x38
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d10d      	bne.n	800d0ae <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800d092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d096:	b672      	cpsid	i
 800d098:	f383 8811 	msr	BASEPRI, r3
 800d09c:	f3bf 8f6f 	isb	sy
 800d0a0:	f3bf 8f4f 	dsb	sy
 800d0a4:	b662      	cpsie	i
 800d0a6:	60bb      	str	r3, [r7, #8]
}
 800d0a8:	bf00      	nop
 800d0aa:	bf00      	nop
 800d0ac:	e7fd      	b.n	800d0aa <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800d0ae:	f001 fbcd 	bl	800e84c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0b6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d0b8:	f001 fbfe 	bl	800e8b8 <vPortExitCritical>

	return uxReturn;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3710      	adds	r7, #16
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800d0c6:	b480      	push	{r7}
 800d0c8:	b087      	sub	sp, #28
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d10d      	bne.n	800d0f4 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800d0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0dc:	b672      	cpsid	i
 800d0de:	f383 8811 	msr	BASEPRI, r3
 800d0e2:	f3bf 8f6f 	isb	sy
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	b662      	cpsie	i
 800d0ec:	60fb      	str	r3, [r7, #12]
}
 800d0ee:	bf00      	nop
 800d0f0:	bf00      	nop
 800d0f2:	e7fd      	b.n	800d0f0 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0f8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800d0fa:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	371c      	adds	r7, #28
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr

0800d108 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d10d      	bne.n	800d136 <vQueueDelete+0x2e>
	__asm volatile
 800d11a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d11e:	b672      	cpsid	i
 800d120:	f383 8811 	msr	BASEPRI, r3
 800d124:	f3bf 8f6f 	isb	sy
 800d128:	f3bf 8f4f 	dsb	sy
 800d12c:	b662      	cpsie	i
 800d12e:	60bb      	str	r3, [r7, #8]
}
 800d130:	bf00      	nop
 800d132:	bf00      	nop
 800d134:	e7fd      	b.n	800d132 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d136:	68f8      	ldr	r0, [r7, #12]
 800d138:	f000 f934 	bl	800d3a4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800d142:	2b00      	cmp	r3, #0
 800d144:	d102      	bne.n	800d14c <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800d146:	68f8      	ldr	r0, [r7, #12]
 800d148:	f001 fd7c 	bl	800ec44 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d14c:	bf00      	nop
 800d14e:	3710      	adds	r7, #16
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d154:	b480      	push	{r7}
 800d156:	b085      	sub	sp, #20
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d160:	2b00      	cmp	r3, #0
 800d162:	d006      	beq.n	800d172 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f1c3 0307 	rsb	r3, r3, #7
 800d16e:	60fb      	str	r3, [r7, #12]
 800d170:	e001      	b.n	800d176 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d172:	2300      	movs	r3, #0
 800d174:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d176:	68fb      	ldr	r3, [r7, #12]
	}
 800d178:	4618      	mov	r0, r3
 800d17a:	3714      	adds	r7, #20
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b086      	sub	sp, #24
 800d188:	af00      	add	r7, sp, #0
 800d18a:	60f8      	str	r0, [r7, #12]
 800d18c:	60b9      	str	r1, [r7, #8]
 800d18e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d190:	2300      	movs	r3, #0
 800d192:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d198:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d10d      	bne.n	800d1be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d14d      	bne.n	800d246 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	689b      	ldr	r3, [r3, #8]
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f001 f898 	bl	800e2e4 <xTaskPriorityDisinherit>
 800d1b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	609a      	str	r2, [r3, #8]
 800d1bc:	e043      	b.n	800d246 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d119      	bne.n	800d1f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	6858      	ldr	r0, [r3, #4]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	68b9      	ldr	r1, [r7, #8]
 800d1d0:	f010 fa93 	bl	801d6fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	685a      	ldr	r2, [r3, #4]
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1dc:	441a      	add	r2, r3
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	685a      	ldr	r2, [r3, #4]
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d32b      	bcc.n	800d246 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	605a      	str	r2, [r3, #4]
 800d1f6:	e026      	b.n	800d246 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	68d8      	ldr	r0, [r3, #12]
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d200:	461a      	mov	r2, r3
 800d202:	68b9      	ldr	r1, [r7, #8]
 800d204:	f010 fa79 	bl	801d6fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	68da      	ldr	r2, [r3, #12]
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d210:	425b      	negs	r3, r3
 800d212:	441a      	add	r2, r3
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	68da      	ldr	r2, [r3, #12]
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	429a      	cmp	r2, r3
 800d222:	d207      	bcs.n	800d234 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	689a      	ldr	r2, [r3, #8]
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d22c:	425b      	negs	r3, r3
 800d22e:	441a      	add	r2, r3
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2b02      	cmp	r3, #2
 800d238:	d105      	bne.n	800d246 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d002      	beq.n	800d246 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	3b01      	subs	r3, #1
 800d244:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	1c5a      	adds	r2, r3, #1
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d24e:	697b      	ldr	r3, [r7, #20]
}
 800d250:	4618      	mov	r0, r3
 800d252:	3718      	adds	r7, #24
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d266:	2b00      	cmp	r3, #0
 800d268:	d018      	beq.n	800d29c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	68da      	ldr	r2, [r3, #12]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d272:	441a      	add	r2, r3
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	68da      	ldr	r2, [r3, #12]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	689b      	ldr	r3, [r3, #8]
 800d280:	429a      	cmp	r2, r3
 800d282:	d303      	bcc.n	800d28c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681a      	ldr	r2, [r3, #0]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	68d9      	ldr	r1, [r3, #12]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d294:	461a      	mov	r2, r3
 800d296:	6838      	ldr	r0, [r7, #0]
 800d298:	f010 fa2f 	bl	801d6fa <memcpy>
	}
}
 800d29c:	bf00      	nop
 800d29e:	3708      	adds	r7, #8
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d2ac:	f001 face 	bl	800e84c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d2b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d2b8:	e011      	b.n	800d2de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d012      	beq.n	800d2e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	3324      	adds	r3, #36	@ 0x24
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f000 fda0 	bl	800de0c <xTaskRemoveFromEventList>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d001      	beq.n	800d2d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d2d2:	f000 fe7f 	bl	800dfd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d2d6:	7bfb      	ldrb	r3, [r7, #15]
 800d2d8:	3b01      	subs	r3, #1
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d2de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	dce9      	bgt.n	800d2ba <prvUnlockQueue+0x16>
 800d2e6:	e000      	b.n	800d2ea <prvUnlockQueue+0x46>
					break;
 800d2e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	22ff      	movs	r2, #255	@ 0xff
 800d2ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d2f2:	f001 fae1 	bl	800e8b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d2f6:	f001 faa9 	bl	800e84c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d300:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d302:	e011      	b.n	800d328 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	691b      	ldr	r3, [r3, #16]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d012      	beq.n	800d332 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	3310      	adds	r3, #16
 800d310:	4618      	mov	r0, r3
 800d312:	f000 fd7b 	bl	800de0c <xTaskRemoveFromEventList>
 800d316:	4603      	mov	r3, r0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d001      	beq.n	800d320 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d31c:	f000 fe5a 	bl	800dfd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d320:	7bbb      	ldrb	r3, [r7, #14]
 800d322:	3b01      	subs	r3, #1
 800d324:	b2db      	uxtb	r3, r3
 800d326:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d328:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	dce9      	bgt.n	800d304 <prvUnlockQueue+0x60>
 800d330:	e000      	b.n	800d334 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d332:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	22ff      	movs	r2, #255	@ 0xff
 800d338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d33c:	f001 fabc 	bl	800e8b8 <vPortExitCritical>
}
 800d340:	bf00      	nop
 800d342:	3710      	adds	r7, #16
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}

0800d348 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d350:	f001 fa7c 	bl	800e84c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d102      	bne.n	800d362 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d35c:	2301      	movs	r3, #1
 800d35e:	60fb      	str	r3, [r7, #12]
 800d360:	e001      	b.n	800d366 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d362:	2300      	movs	r3, #0
 800d364:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d366:	f001 faa7 	bl	800e8b8 <vPortExitCritical>

	return xReturn;
 800d36a:	68fb      	ldr	r3, [r7, #12]
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3710      	adds	r7, #16
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d37c:	f001 fa66 	bl	800e84c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d388:	429a      	cmp	r2, r3
 800d38a:	d102      	bne.n	800d392 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d38c:	2301      	movs	r3, #1
 800d38e:	60fb      	str	r3, [r7, #12]
 800d390:	e001      	b.n	800d396 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d392:	2300      	movs	r3, #0
 800d394:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d396:	f001 fa8f 	bl	800e8b8 <vPortExitCritical>

	return xReturn;
 800d39a:	68fb      	ldr	r3, [r7, #12]
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3710      	adds	r7, #16
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b085      	sub	sp, #20
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	60fb      	str	r3, [r7, #12]
 800d3b0:	e016      	b.n	800d3e0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d3b2:	4a10      	ldr	r2, [pc, #64]	@ (800d3f4 <vQueueUnregisterQueue+0x50>)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	00db      	lsls	r3, r3, #3
 800d3b8:	4413      	add	r3, r2
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	687a      	ldr	r2, [r7, #4]
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d10b      	bne.n	800d3da <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d3c2:	4a0c      	ldr	r2, [pc, #48]	@ (800d3f4 <vQueueUnregisterQueue+0x50>)
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d3cc:	4a09      	ldr	r2, [pc, #36]	@ (800d3f4 <vQueueUnregisterQueue+0x50>)
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	00db      	lsls	r3, r3, #3
 800d3d2:	4413      	add	r3, r2
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	605a      	str	r2, [r3, #4]
				break;
 800d3d8:	e006      	b.n	800d3e8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	3301      	adds	r3, #1
 800d3de:	60fb      	str	r3, [r7, #12]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2b07      	cmp	r3, #7
 800d3e4:	d9e5      	bls.n	800d3b2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d3e6:	bf00      	nop
 800d3e8:	bf00      	nop
 800d3ea:	3714      	adds	r7, #20
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f2:	4770      	bx	lr
 800d3f4:	200051c0 	.word	0x200051c0

0800d3f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b08e      	sub	sp, #56	@ 0x38
 800d3fc:	af04      	add	r7, sp, #16
 800d3fe:	60f8      	str	r0, [r7, #12]
 800d400:	60b9      	str	r1, [r7, #8]
 800d402:	607a      	str	r2, [r7, #4]
 800d404:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d10d      	bne.n	800d428 <xTaskCreateStatic+0x30>
	__asm volatile
 800d40c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d410:	b672      	cpsid	i
 800d412:	f383 8811 	msr	BASEPRI, r3
 800d416:	f3bf 8f6f 	isb	sy
 800d41a:	f3bf 8f4f 	dsb	sy
 800d41e:	b662      	cpsie	i
 800d420:	623b      	str	r3, [r7, #32]
}
 800d422:	bf00      	nop
 800d424:	bf00      	nop
 800d426:	e7fd      	b.n	800d424 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800d428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d10d      	bne.n	800d44a <xTaskCreateStatic+0x52>
	__asm volatile
 800d42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d432:	b672      	cpsid	i
 800d434:	f383 8811 	msr	BASEPRI, r3
 800d438:	f3bf 8f6f 	isb	sy
 800d43c:	f3bf 8f4f 	dsb	sy
 800d440:	b662      	cpsie	i
 800d442:	61fb      	str	r3, [r7, #28]
}
 800d444:	bf00      	nop
 800d446:	bf00      	nop
 800d448:	e7fd      	b.n	800d446 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d44a:	23a0      	movs	r3, #160	@ 0xa0
 800d44c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	2ba0      	cmp	r3, #160	@ 0xa0
 800d452:	d00d      	beq.n	800d470 <xTaskCreateStatic+0x78>
	__asm volatile
 800d454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d458:	b672      	cpsid	i
 800d45a:	f383 8811 	msr	BASEPRI, r3
 800d45e:	f3bf 8f6f 	isb	sy
 800d462:	f3bf 8f4f 	dsb	sy
 800d466:	b662      	cpsie	i
 800d468:	61bb      	str	r3, [r7, #24]
}
 800d46a:	bf00      	nop
 800d46c:	bf00      	nop
 800d46e:	e7fd      	b.n	800d46c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d470:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d474:	2b00      	cmp	r3, #0
 800d476:	d01e      	beq.n	800d4b6 <xTaskCreateStatic+0xbe>
 800d478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d01b      	beq.n	800d4b6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d480:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d484:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d486:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d48a:	2202      	movs	r2, #2
 800d48c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d490:	2300      	movs	r3, #0
 800d492:	9303      	str	r3, [sp, #12]
 800d494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d496:	9302      	str	r3, [sp, #8]
 800d498:	f107 0314 	add.w	r3, r7, #20
 800d49c:	9301      	str	r3, [sp, #4]
 800d49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4a0:	9300      	str	r3, [sp, #0]
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	687a      	ldr	r2, [r7, #4]
 800d4a6:	68b9      	ldr	r1, [r7, #8]
 800d4a8:	68f8      	ldr	r0, [r7, #12]
 800d4aa:	f000 f851 	bl	800d550 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d4ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d4b0:	f000 f8f0 	bl	800d694 <prvAddNewTaskToReadyList>
 800d4b4:	e001      	b.n	800d4ba <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d4ba:	697b      	ldr	r3, [r7, #20]
	}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	3728      	adds	r7, #40	@ 0x28
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b08c      	sub	sp, #48	@ 0x30
 800d4c8:	af04      	add	r7, sp, #16
 800d4ca:	60f8      	str	r0, [r7, #12]
 800d4cc:	60b9      	str	r1, [r7, #8]
 800d4ce:	603b      	str	r3, [r7, #0]
 800d4d0:	4613      	mov	r3, r2
 800d4d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d4d4:	88fb      	ldrh	r3, [r7, #6]
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f001 fae5 	bl	800eaa8 <pvPortMalloc>
 800d4de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d00e      	beq.n	800d504 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d4e6:	20a0      	movs	r0, #160	@ 0xa0
 800d4e8:	f001 fade 	bl	800eaa8 <pvPortMalloc>
 800d4ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d4ee:	69fb      	ldr	r3, [r7, #28]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d003      	beq.n	800d4fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d4f4:	69fb      	ldr	r3, [r7, #28]
 800d4f6:	697a      	ldr	r2, [r7, #20]
 800d4f8:	631a      	str	r2, [r3, #48]	@ 0x30
 800d4fa:	e005      	b.n	800d508 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d4fc:	6978      	ldr	r0, [r7, #20]
 800d4fe:	f001 fba1 	bl	800ec44 <vPortFree>
 800d502:	e001      	b.n	800d508 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d504:	2300      	movs	r3, #0
 800d506:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d508:	69fb      	ldr	r3, [r7, #28]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d017      	beq.n	800d53e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	2200      	movs	r2, #0
 800d512:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d516:	88fa      	ldrh	r2, [r7, #6]
 800d518:	2300      	movs	r3, #0
 800d51a:	9303      	str	r3, [sp, #12]
 800d51c:	69fb      	ldr	r3, [r7, #28]
 800d51e:	9302      	str	r3, [sp, #8]
 800d520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d522:	9301      	str	r3, [sp, #4]
 800d524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d526:	9300      	str	r3, [sp, #0]
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	68b9      	ldr	r1, [r7, #8]
 800d52c:	68f8      	ldr	r0, [r7, #12]
 800d52e:	f000 f80f 	bl	800d550 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d532:	69f8      	ldr	r0, [r7, #28]
 800d534:	f000 f8ae 	bl	800d694 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d538:	2301      	movs	r3, #1
 800d53a:	61bb      	str	r3, [r7, #24]
 800d53c:	e002      	b.n	800d544 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d53e:	f04f 33ff 	mov.w	r3, #4294967295
 800d542:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d544:	69bb      	ldr	r3, [r7, #24]
	}
 800d546:	4618      	mov	r0, r3
 800d548:	3720      	adds	r7, #32
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
	...

0800d550 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b088      	sub	sp, #32
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	607a      	str	r2, [r7, #4]
 800d55c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d560:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d562:	6879      	ldr	r1, [r7, #4]
 800d564:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d568:	440b      	add	r3, r1
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	4413      	add	r3, r2
 800d56e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d570:	69bb      	ldr	r3, [r7, #24]
 800d572:	f023 0307 	bic.w	r3, r3, #7
 800d576:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d578:	69bb      	ldr	r3, [r7, #24]
 800d57a:	f003 0307 	and.w	r3, r3, #7
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d00d      	beq.n	800d59e <prvInitialiseNewTask+0x4e>
	__asm volatile
 800d582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d586:	b672      	cpsid	i
 800d588:	f383 8811 	msr	BASEPRI, r3
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	b662      	cpsie	i
 800d596:	617b      	str	r3, [r7, #20]
}
 800d598:	bf00      	nop
 800d59a:	bf00      	nop
 800d59c:	e7fd      	b.n	800d59a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d01f      	beq.n	800d5e4 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	61fb      	str	r3, [r7, #28]
 800d5a8:	e012      	b.n	800d5d0 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d5aa:	68ba      	ldr	r2, [r7, #8]
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	4413      	add	r3, r2
 800d5b0:	7819      	ldrb	r1, [r3, #0]
 800d5b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5b4:	69fb      	ldr	r3, [r7, #28]
 800d5b6:	4413      	add	r3, r2
 800d5b8:	3334      	adds	r3, #52	@ 0x34
 800d5ba:	460a      	mov	r2, r1
 800d5bc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d5be:	68ba      	ldr	r2, [r7, #8]
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d006      	beq.n	800d5d8 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d5ca:	69fb      	ldr	r3, [r7, #28]
 800d5cc:	3301      	adds	r3, #1
 800d5ce:	61fb      	str	r3, [r7, #28]
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	2b0f      	cmp	r3, #15
 800d5d4:	d9e9      	bls.n	800d5aa <prvInitialiseNewTask+0x5a>
 800d5d6:	e000      	b.n	800d5da <prvInitialiseNewTask+0x8a>
			{
				break;
 800d5d8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5dc:	2200      	movs	r2, #0
 800d5de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d5e2:	e003      	b.n	800d5ec <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ee:	2b06      	cmp	r3, #6
 800d5f0:	d901      	bls.n	800d5f6 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d5f2:	2306      	movs	r3, #6
 800d5f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d5fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d600:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d604:	2200      	movs	r2, #0
 800d606:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d60a:	3304      	adds	r3, #4
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7fe fe34 	bl	800c27a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d614:	3318      	adds	r3, #24
 800d616:	4618      	mov	r0, r3
 800d618:	f7fe fe2f 	bl	800c27a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d61e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d620:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d624:	f1c3 0207 	rsb	r2, r3, #7
 800d628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d62a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d62e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d630:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d634:	2200      	movs	r2, #0
 800d636:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d63c:	2200      	movs	r2, #0
 800d63e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d644:	334c      	adds	r3, #76	@ 0x4c
 800d646:	224c      	movs	r2, #76	@ 0x4c
 800d648:	2100      	movs	r1, #0
 800d64a:	4618      	mov	r0, r3
 800d64c:	f00f ff5f 	bl	801d50e <memset>
 800d650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d652:	4a0d      	ldr	r2, [pc, #52]	@ (800d688 <prvInitialiseNewTask+0x138>)
 800d654:	651a      	str	r2, [r3, #80]	@ 0x50
 800d656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d658:	4a0c      	ldr	r2, [pc, #48]	@ (800d68c <prvInitialiseNewTask+0x13c>)
 800d65a:	655a      	str	r2, [r3, #84]	@ 0x54
 800d65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d65e:	4a0c      	ldr	r2, [pc, #48]	@ (800d690 <prvInitialiseNewTask+0x140>)
 800d660:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d662:	683a      	ldr	r2, [r7, #0]
 800d664:	68f9      	ldr	r1, [r7, #12]
 800d666:	69b8      	ldr	r0, [r7, #24]
 800d668:	f000 ffe2 	bl	800e630 <pxPortInitialiseStack>
 800d66c:	4602      	mov	r2, r0
 800d66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d670:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d674:	2b00      	cmp	r3, #0
 800d676:	d002      	beq.n	800d67e <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d67a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d67c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d67e:	bf00      	nop
 800d680:	3720      	adds	r7, #32
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	2000ff80 	.word	0x2000ff80
 800d68c:	2000ffe8 	.word	0x2000ffe8
 800d690:	20010050 	.word	0x20010050

0800d694 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b082      	sub	sp, #8
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d69c:	f001 f8d6 	bl	800e84c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d6a0:	4b2a      	ldr	r3, [pc, #168]	@ (800d74c <prvAddNewTaskToReadyList+0xb8>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	4a29      	ldr	r2, [pc, #164]	@ (800d74c <prvAddNewTaskToReadyList+0xb8>)
 800d6a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d6aa:	4b29      	ldr	r3, [pc, #164]	@ (800d750 <prvAddNewTaskToReadyList+0xbc>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d109      	bne.n	800d6c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d6b2:	4a27      	ldr	r2, [pc, #156]	@ (800d750 <prvAddNewTaskToReadyList+0xbc>)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d6b8:	4b24      	ldr	r3, [pc, #144]	@ (800d74c <prvAddNewTaskToReadyList+0xb8>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d110      	bne.n	800d6e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d6c0:	f000 fcac 	bl	800e01c <prvInitialiseTaskLists>
 800d6c4:	e00d      	b.n	800d6e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d6c6:	4b23      	ldr	r3, [pc, #140]	@ (800d754 <prvAddNewTaskToReadyList+0xc0>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d109      	bne.n	800d6e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d6ce:	4b20      	ldr	r3, [pc, #128]	@ (800d750 <prvAddNewTaskToReadyList+0xbc>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d802      	bhi.n	800d6e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d6dc:	4a1c      	ldr	r2, [pc, #112]	@ (800d750 <prvAddNewTaskToReadyList+0xbc>)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d6e2:	4b1d      	ldr	r3, [pc, #116]	@ (800d758 <prvAddNewTaskToReadyList+0xc4>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	4a1b      	ldr	r2, [pc, #108]	@ (800d758 <prvAddNewTaskToReadyList+0xc4>)
 800d6ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	409a      	lsls	r2, r3
 800d6f4:	4b19      	ldr	r3, [pc, #100]	@ (800d75c <prvAddNewTaskToReadyList+0xc8>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	4a18      	ldr	r2, [pc, #96]	@ (800d75c <prvAddNewTaskToReadyList+0xc8>)
 800d6fc:	6013      	str	r3, [r2, #0]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d702:	4613      	mov	r3, r2
 800d704:	009b      	lsls	r3, r3, #2
 800d706:	4413      	add	r3, r2
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	4a15      	ldr	r2, [pc, #84]	@ (800d760 <prvAddNewTaskToReadyList+0xcc>)
 800d70c:	441a      	add	r2, r3
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	3304      	adds	r3, #4
 800d712:	4619      	mov	r1, r3
 800d714:	4610      	mov	r0, r2
 800d716:	f7fe fdbd 	bl	800c294 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d71a:	f001 f8cd 	bl	800e8b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d71e:	4b0d      	ldr	r3, [pc, #52]	@ (800d754 <prvAddNewTaskToReadyList+0xc0>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d00e      	beq.n	800d744 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d726:	4b0a      	ldr	r3, [pc, #40]	@ (800d750 <prvAddNewTaskToReadyList+0xbc>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d730:	429a      	cmp	r2, r3
 800d732:	d207      	bcs.n	800d744 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d734:	4b0b      	ldr	r3, [pc, #44]	@ (800d764 <prvAddNewTaskToReadyList+0xd0>)
 800d736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d73a:	601a      	str	r2, [r3, #0]
 800d73c:	f3bf 8f4f 	dsb	sy
 800d740:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d744:	bf00      	nop
 800d746:	3708      	adds	r7, #8
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	20005300 	.word	0x20005300
 800d750:	20005200 	.word	0x20005200
 800d754:	2000530c 	.word	0x2000530c
 800d758:	2000531c 	.word	0x2000531c
 800d75c:	20005308 	.word	0x20005308
 800d760:	20005204 	.word	0x20005204
 800d764:	e000ed04 	.word	0xe000ed04

0800d768 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d770:	f001 f86c 	bl	800e84c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d102      	bne.n	800d780 <vTaskDelete+0x18>
 800d77a:	4b3a      	ldr	r3, [pc, #232]	@ (800d864 <vTaskDelete+0xfc>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	e000      	b.n	800d782 <vTaskDelete+0x1a>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	3304      	adds	r3, #4
 800d788:	4618      	mov	r0, r3
 800d78a:	f7fe fde0 	bl	800c34e <uxListRemove>
 800d78e:	4603      	mov	r3, r0
 800d790:	2b00      	cmp	r3, #0
 800d792:	d115      	bne.n	800d7c0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d798:	4933      	ldr	r1, [pc, #204]	@ (800d868 <vTaskDelete+0x100>)
 800d79a:	4613      	mov	r3, r2
 800d79c:	009b      	lsls	r3, r3, #2
 800d79e:	4413      	add	r3, r2
 800d7a0:	009b      	lsls	r3, r3, #2
 800d7a2:	440b      	add	r3, r1
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d10a      	bne.n	800d7c0 <vTaskDelete+0x58>
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d7b4:	43da      	mvns	r2, r3
 800d7b6:	4b2d      	ldr	r3, [pc, #180]	@ (800d86c <vTaskDelete+0x104>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	4013      	ands	r3, r2
 800d7bc:	4a2b      	ldr	r2, [pc, #172]	@ (800d86c <vTaskDelete+0x104>)
 800d7be:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d004      	beq.n	800d7d2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	3318      	adds	r3, #24
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7fe fdbe 	bl	800c34e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800d7d2:	4b27      	ldr	r3, [pc, #156]	@ (800d870 <vTaskDelete+0x108>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	3301      	adds	r3, #1
 800d7d8:	4a25      	ldr	r2, [pc, #148]	@ (800d870 <vTaskDelete+0x108>)
 800d7da:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800d7dc:	4b21      	ldr	r3, [pc, #132]	@ (800d864 <vTaskDelete+0xfc>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	68fa      	ldr	r2, [r7, #12]
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d10b      	bne.n	800d7fe <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	3304      	adds	r3, #4
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	4821      	ldr	r0, [pc, #132]	@ (800d874 <vTaskDelete+0x10c>)
 800d7ee:	f7fe fd51 	bl	800c294 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800d7f2:	4b21      	ldr	r3, [pc, #132]	@ (800d878 <vTaskDelete+0x110>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	3301      	adds	r3, #1
 800d7f8:	4a1f      	ldr	r2, [pc, #124]	@ (800d878 <vTaskDelete+0x110>)
 800d7fa:	6013      	str	r3, [r2, #0]
 800d7fc:	e009      	b.n	800d812 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800d7fe:	4b1f      	ldr	r3, [pc, #124]	@ (800d87c <vTaskDelete+0x114>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	3b01      	subs	r3, #1
 800d804:	4a1d      	ldr	r2, [pc, #116]	@ (800d87c <vTaskDelete+0x114>)
 800d806:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800d808:	68f8      	ldr	r0, [r7, #12]
 800d80a:	f000 fc75 	bl	800e0f8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800d80e:	f000 fcab 	bl	800e168 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800d812:	f001 f851 	bl	800e8b8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800d816:	4b1a      	ldr	r3, [pc, #104]	@ (800d880 <vTaskDelete+0x118>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d01e      	beq.n	800d85c <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 800d81e:	4b11      	ldr	r3, [pc, #68]	@ (800d864 <vTaskDelete+0xfc>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	68fa      	ldr	r2, [r7, #12]
 800d824:	429a      	cmp	r2, r3
 800d826:	d119      	bne.n	800d85c <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800d828:	4b16      	ldr	r3, [pc, #88]	@ (800d884 <vTaskDelete+0x11c>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d00d      	beq.n	800d84c <vTaskDelete+0xe4>
	__asm volatile
 800d830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d834:	b672      	cpsid	i
 800d836:	f383 8811 	msr	BASEPRI, r3
 800d83a:	f3bf 8f6f 	isb	sy
 800d83e:	f3bf 8f4f 	dsb	sy
 800d842:	b662      	cpsie	i
 800d844:	60bb      	str	r3, [r7, #8]
}
 800d846:	bf00      	nop
 800d848:	bf00      	nop
 800d84a:	e7fd      	b.n	800d848 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800d84c:	4b0e      	ldr	r3, [pc, #56]	@ (800d888 <vTaskDelete+0x120>)
 800d84e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d852:	601a      	str	r2, [r3, #0]
 800d854:	f3bf 8f4f 	dsb	sy
 800d858:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d85c:	bf00      	nop
 800d85e:	3710      	adds	r7, #16
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}
 800d864:	20005200 	.word	0x20005200
 800d868:	20005204 	.word	0x20005204
 800d86c:	20005308 	.word	0x20005308
 800d870:	2000531c 	.word	0x2000531c
 800d874:	200052d4 	.word	0x200052d4
 800d878:	200052e8 	.word	0x200052e8
 800d87c:	20005300 	.word	0x20005300
 800d880:	2000530c 	.word	0x2000530c
 800d884:	20005328 	.word	0x20005328
 800d888:	e000ed04 	.word	0xe000ed04

0800d88c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d894:	2300      	movs	r3, #0
 800d896:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d01a      	beq.n	800d8d4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d89e:	4b15      	ldr	r3, [pc, #84]	@ (800d8f4 <vTaskDelay+0x68>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d00d      	beq.n	800d8c2 <vTaskDelay+0x36>
	__asm volatile
 800d8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8aa:	b672      	cpsid	i
 800d8ac:	f383 8811 	msr	BASEPRI, r3
 800d8b0:	f3bf 8f6f 	isb	sy
 800d8b4:	f3bf 8f4f 	dsb	sy
 800d8b8:	b662      	cpsie	i
 800d8ba:	60bb      	str	r3, [r7, #8]
}
 800d8bc:	bf00      	nop
 800d8be:	bf00      	nop
 800d8c0:	e7fd      	b.n	800d8be <vTaskDelay+0x32>
			vTaskSuspendAll();
 800d8c2:	f000 f889 	bl	800d9d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d8c6:	2100      	movs	r1, #0
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f000 fe4b 	bl	800e564 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d8ce:	f000 f891 	bl	800d9f4 <xTaskResumeAll>
 800d8d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d107      	bne.n	800d8ea <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800d8da:	4b07      	ldr	r3, [pc, #28]	@ (800d8f8 <vTaskDelay+0x6c>)
 800d8dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8e0:	601a      	str	r2, [r3, #0]
 800d8e2:	f3bf 8f4f 	dsb	sy
 800d8e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d8ea:	bf00      	nop
 800d8ec:	3710      	adds	r7, #16
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
 800d8f2:	bf00      	nop
 800d8f4:	20005328 	.word	0x20005328
 800d8f8:	e000ed04 	.word	0xe000ed04

0800d8fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b08a      	sub	sp, #40	@ 0x28
 800d900:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d902:	2300      	movs	r3, #0
 800d904:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d906:	2300      	movs	r3, #0
 800d908:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d90a:	463a      	mov	r2, r7
 800d90c:	1d39      	adds	r1, r7, #4
 800d90e:	f107 0308 	add.w	r3, r7, #8
 800d912:	4618      	mov	r0, r3
 800d914:	f7f3 fcf4 	bl	8001300 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d918:	6839      	ldr	r1, [r7, #0]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	68ba      	ldr	r2, [r7, #8]
 800d91e:	9202      	str	r2, [sp, #8]
 800d920:	9301      	str	r3, [sp, #4]
 800d922:	2300      	movs	r3, #0
 800d924:	9300      	str	r3, [sp, #0]
 800d926:	2300      	movs	r3, #0
 800d928:	460a      	mov	r2, r1
 800d92a:	4923      	ldr	r1, [pc, #140]	@ (800d9b8 <vTaskStartScheduler+0xbc>)
 800d92c:	4823      	ldr	r0, [pc, #140]	@ (800d9bc <vTaskStartScheduler+0xc0>)
 800d92e:	f7ff fd63 	bl	800d3f8 <xTaskCreateStatic>
 800d932:	4603      	mov	r3, r0
 800d934:	4a22      	ldr	r2, [pc, #136]	@ (800d9c0 <vTaskStartScheduler+0xc4>)
 800d936:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d938:	4b21      	ldr	r3, [pc, #132]	@ (800d9c0 <vTaskStartScheduler+0xc4>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d002      	beq.n	800d946 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d940:	2301      	movs	r3, #1
 800d942:	617b      	str	r3, [r7, #20]
 800d944:	e001      	b.n	800d94a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d946:	2300      	movs	r3, #0
 800d948:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d11d      	bne.n	800d98c <vTaskStartScheduler+0x90>
	__asm volatile
 800d950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d954:	b672      	cpsid	i
 800d956:	f383 8811 	msr	BASEPRI, r3
 800d95a:	f3bf 8f6f 	isb	sy
 800d95e:	f3bf 8f4f 	dsb	sy
 800d962:	b662      	cpsie	i
 800d964:	613b      	str	r3, [r7, #16]
}
 800d966:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d968:	4b16      	ldr	r3, [pc, #88]	@ (800d9c4 <vTaskStartScheduler+0xc8>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	334c      	adds	r3, #76	@ 0x4c
 800d96e:	4a16      	ldr	r2, [pc, #88]	@ (800d9c8 <vTaskStartScheduler+0xcc>)
 800d970:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d972:	4b16      	ldr	r3, [pc, #88]	@ (800d9cc <vTaskStartScheduler+0xd0>)
 800d974:	f04f 32ff 	mov.w	r2, #4294967295
 800d978:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d97a:	4b15      	ldr	r3, [pc, #84]	@ (800d9d0 <vTaskStartScheduler+0xd4>)
 800d97c:	2201      	movs	r2, #1
 800d97e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d980:	4b14      	ldr	r3, [pc, #80]	@ (800d9d4 <vTaskStartScheduler+0xd8>)
 800d982:	2200      	movs	r2, #0
 800d984:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d986:	f000 fee3 	bl	800e750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d98a:	e011      	b.n	800d9b0 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d992:	d10d      	bne.n	800d9b0 <vTaskStartScheduler+0xb4>
	__asm volatile
 800d994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d998:	b672      	cpsid	i
 800d99a:	f383 8811 	msr	BASEPRI, r3
 800d99e:	f3bf 8f6f 	isb	sy
 800d9a2:	f3bf 8f4f 	dsb	sy
 800d9a6:	b662      	cpsie	i
 800d9a8:	60fb      	str	r3, [r7, #12]
}
 800d9aa:	bf00      	nop
 800d9ac:	bf00      	nop
 800d9ae:	e7fd      	b.n	800d9ac <vTaskStartScheduler+0xb0>
}
 800d9b0:	bf00      	nop
 800d9b2:	3718      	adds	r7, #24
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	0801e758 	.word	0x0801e758
 800d9bc:	0800dfed 	.word	0x0800dfed
 800d9c0:	20005324 	.word	0x20005324
 800d9c4:	20005200 	.word	0x20005200
 800d9c8:	2000013c 	.word	0x2000013c
 800d9cc:	20005320 	.word	0x20005320
 800d9d0:	2000530c 	.word	0x2000530c
 800d9d4:	20005304 	.word	0x20005304

0800d9d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d9d8:	b480      	push	{r7}
 800d9da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d9dc:	4b04      	ldr	r3, [pc, #16]	@ (800d9f0 <vTaskSuspendAll+0x18>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	4a03      	ldr	r2, [pc, #12]	@ (800d9f0 <vTaskSuspendAll+0x18>)
 800d9e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d9e6:	bf00      	nop
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr
 800d9f0:	20005328 	.word	0x20005328

0800d9f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d9fe:	2300      	movs	r3, #0
 800da00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800da02:	4b43      	ldr	r3, [pc, #268]	@ (800db10 <xTaskResumeAll+0x11c>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d10d      	bne.n	800da26 <xTaskResumeAll+0x32>
	__asm volatile
 800da0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da0e:	b672      	cpsid	i
 800da10:	f383 8811 	msr	BASEPRI, r3
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	f3bf 8f4f 	dsb	sy
 800da1c:	b662      	cpsie	i
 800da1e:	603b      	str	r3, [r7, #0]
}
 800da20:	bf00      	nop
 800da22:	bf00      	nop
 800da24:	e7fd      	b.n	800da22 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800da26:	f000 ff11 	bl	800e84c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800da2a:	4b39      	ldr	r3, [pc, #228]	@ (800db10 <xTaskResumeAll+0x11c>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	3b01      	subs	r3, #1
 800da30:	4a37      	ldr	r2, [pc, #220]	@ (800db10 <xTaskResumeAll+0x11c>)
 800da32:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da34:	4b36      	ldr	r3, [pc, #216]	@ (800db10 <xTaskResumeAll+0x11c>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d161      	bne.n	800db00 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800da3c:	4b35      	ldr	r3, [pc, #212]	@ (800db14 <xTaskResumeAll+0x120>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d05d      	beq.n	800db00 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da44:	e02e      	b.n	800daa4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da46:	4b34      	ldr	r3, [pc, #208]	@ (800db18 <xTaskResumeAll+0x124>)
 800da48:	68db      	ldr	r3, [r3, #12]
 800da4a:	68db      	ldr	r3, [r3, #12]
 800da4c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	3318      	adds	r3, #24
 800da52:	4618      	mov	r0, r3
 800da54:	f7fe fc7b 	bl	800c34e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	3304      	adds	r3, #4
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7fe fc76 	bl	800c34e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da66:	2201      	movs	r2, #1
 800da68:	409a      	lsls	r2, r3
 800da6a:	4b2c      	ldr	r3, [pc, #176]	@ (800db1c <xTaskResumeAll+0x128>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4313      	orrs	r3, r2
 800da70:	4a2a      	ldr	r2, [pc, #168]	@ (800db1c <xTaskResumeAll+0x128>)
 800da72:	6013      	str	r3, [r2, #0]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da78:	4613      	mov	r3, r2
 800da7a:	009b      	lsls	r3, r3, #2
 800da7c:	4413      	add	r3, r2
 800da7e:	009b      	lsls	r3, r3, #2
 800da80:	4a27      	ldr	r2, [pc, #156]	@ (800db20 <xTaskResumeAll+0x12c>)
 800da82:	441a      	add	r2, r3
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	3304      	adds	r3, #4
 800da88:	4619      	mov	r1, r3
 800da8a:	4610      	mov	r0, r2
 800da8c:	f7fe fc02 	bl	800c294 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da94:	4b23      	ldr	r3, [pc, #140]	@ (800db24 <xTaskResumeAll+0x130>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d302      	bcc.n	800daa4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800da9e:	4b22      	ldr	r3, [pc, #136]	@ (800db28 <xTaskResumeAll+0x134>)
 800daa0:	2201      	movs	r2, #1
 800daa2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800daa4:	4b1c      	ldr	r3, [pc, #112]	@ (800db18 <xTaskResumeAll+0x124>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d1cc      	bne.n	800da46 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d001      	beq.n	800dab6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dab2:	f000 fb59 	bl	800e168 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800dab6:	4b1d      	ldr	r3, [pc, #116]	@ (800db2c <xTaskResumeAll+0x138>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d010      	beq.n	800dae4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dac2:	f000 f859 	bl	800db78 <xTaskIncrementTick>
 800dac6:	4603      	mov	r3, r0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d002      	beq.n	800dad2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800dacc:	4b16      	ldr	r3, [pc, #88]	@ (800db28 <xTaskResumeAll+0x134>)
 800dace:	2201      	movs	r2, #1
 800dad0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	3b01      	subs	r3, #1
 800dad6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d1f1      	bne.n	800dac2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800dade:	4b13      	ldr	r3, [pc, #76]	@ (800db2c <xTaskResumeAll+0x138>)
 800dae0:	2200      	movs	r2, #0
 800dae2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dae4:	4b10      	ldr	r3, [pc, #64]	@ (800db28 <xTaskResumeAll+0x134>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d009      	beq.n	800db00 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800daec:	2301      	movs	r3, #1
 800daee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800daf0:	4b0f      	ldr	r3, [pc, #60]	@ (800db30 <xTaskResumeAll+0x13c>)
 800daf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daf6:	601a      	str	r2, [r3, #0]
 800daf8:	f3bf 8f4f 	dsb	sy
 800dafc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db00:	f000 feda 	bl	800e8b8 <vPortExitCritical>

	return xAlreadyYielded;
 800db04:	68bb      	ldr	r3, [r7, #8]
}
 800db06:	4618      	mov	r0, r3
 800db08:	3710      	adds	r7, #16
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	20005328 	.word	0x20005328
 800db14:	20005300 	.word	0x20005300
 800db18:	200052c0 	.word	0x200052c0
 800db1c:	20005308 	.word	0x20005308
 800db20:	20005204 	.word	0x20005204
 800db24:	20005200 	.word	0x20005200
 800db28:	20005314 	.word	0x20005314
 800db2c:	20005310 	.word	0x20005310
 800db30:	e000ed04 	.word	0xe000ed04

0800db34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800db34:	b480      	push	{r7}
 800db36:	b083      	sub	sp, #12
 800db38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800db3a:	4b05      	ldr	r3, [pc, #20]	@ (800db50 <xTaskGetTickCount+0x1c>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800db40:	687b      	ldr	r3, [r7, #4]
}
 800db42:	4618      	mov	r0, r3
 800db44:	370c      	adds	r7, #12
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr
 800db4e:	bf00      	nop
 800db50:	20005304 	.word	0x20005304

0800db54 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b082      	sub	sp, #8
 800db58:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db5a:	f000 ff5f 	bl	800ea1c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800db5e:	2300      	movs	r3, #0
 800db60:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800db62:	4b04      	ldr	r3, [pc, #16]	@ (800db74 <xTaskGetTickCountFromISR+0x20>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db68:	683b      	ldr	r3, [r7, #0]
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3708      	adds	r7, #8
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
 800db72:	bf00      	nop
 800db74:	20005304 	.word	0x20005304

0800db78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b086      	sub	sp, #24
 800db7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800db7e:	2300      	movs	r3, #0
 800db80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db82:	4b50      	ldr	r3, [pc, #320]	@ (800dcc4 <xTaskIncrementTick+0x14c>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	f040 808b 	bne.w	800dca2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800db8c:	4b4e      	ldr	r3, [pc, #312]	@ (800dcc8 <xTaskIncrementTick+0x150>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	3301      	adds	r3, #1
 800db92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800db94:	4a4c      	ldr	r2, [pc, #304]	@ (800dcc8 <xTaskIncrementTick+0x150>)
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d123      	bne.n	800dbe8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800dba0:	4b4a      	ldr	r3, [pc, #296]	@ (800dccc <xTaskIncrementTick+0x154>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d00d      	beq.n	800dbc6 <xTaskIncrementTick+0x4e>
	__asm volatile
 800dbaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbae:	b672      	cpsid	i
 800dbb0:	f383 8811 	msr	BASEPRI, r3
 800dbb4:	f3bf 8f6f 	isb	sy
 800dbb8:	f3bf 8f4f 	dsb	sy
 800dbbc:	b662      	cpsie	i
 800dbbe:	603b      	str	r3, [r7, #0]
}
 800dbc0:	bf00      	nop
 800dbc2:	bf00      	nop
 800dbc4:	e7fd      	b.n	800dbc2 <xTaskIncrementTick+0x4a>
 800dbc6:	4b41      	ldr	r3, [pc, #260]	@ (800dccc <xTaskIncrementTick+0x154>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	60fb      	str	r3, [r7, #12]
 800dbcc:	4b40      	ldr	r3, [pc, #256]	@ (800dcd0 <xTaskIncrementTick+0x158>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4a3e      	ldr	r2, [pc, #248]	@ (800dccc <xTaskIncrementTick+0x154>)
 800dbd2:	6013      	str	r3, [r2, #0]
 800dbd4:	4a3e      	ldr	r2, [pc, #248]	@ (800dcd0 <xTaskIncrementTick+0x158>)
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	6013      	str	r3, [r2, #0]
 800dbda:	4b3e      	ldr	r3, [pc, #248]	@ (800dcd4 <xTaskIncrementTick+0x15c>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	3301      	adds	r3, #1
 800dbe0:	4a3c      	ldr	r2, [pc, #240]	@ (800dcd4 <xTaskIncrementTick+0x15c>)
 800dbe2:	6013      	str	r3, [r2, #0]
 800dbe4:	f000 fac0 	bl	800e168 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dbe8:	4b3b      	ldr	r3, [pc, #236]	@ (800dcd8 <xTaskIncrementTick+0x160>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	693a      	ldr	r2, [r7, #16]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d348      	bcc.n	800dc84 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbf2:	4b36      	ldr	r3, [pc, #216]	@ (800dccc <xTaskIncrementTick+0x154>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d104      	bne.n	800dc06 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbfc:	4b36      	ldr	r3, [pc, #216]	@ (800dcd8 <xTaskIncrementTick+0x160>)
 800dbfe:	f04f 32ff 	mov.w	r2, #4294967295
 800dc02:	601a      	str	r2, [r3, #0]
					break;
 800dc04:	e03e      	b.n	800dc84 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc06:	4b31      	ldr	r3, [pc, #196]	@ (800dccc <xTaskIncrementTick+0x154>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	68db      	ldr	r3, [r3, #12]
 800dc0c:	68db      	ldr	r3, [r3, #12]
 800dc0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dc16:	693a      	ldr	r2, [r7, #16]
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d203      	bcs.n	800dc26 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dc1e:	4a2e      	ldr	r2, [pc, #184]	@ (800dcd8 <xTaskIncrementTick+0x160>)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dc24:	e02e      	b.n	800dc84 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	3304      	adds	r3, #4
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7fe fb8f 	bl	800c34e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d004      	beq.n	800dc42 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	3318      	adds	r3, #24
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7fe fb86 	bl	800c34e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc46:	2201      	movs	r2, #1
 800dc48:	409a      	lsls	r2, r3
 800dc4a:	4b24      	ldr	r3, [pc, #144]	@ (800dcdc <xTaskIncrementTick+0x164>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	4a22      	ldr	r2, [pc, #136]	@ (800dcdc <xTaskIncrementTick+0x164>)
 800dc52:	6013      	str	r3, [r2, #0]
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc58:	4613      	mov	r3, r2
 800dc5a:	009b      	lsls	r3, r3, #2
 800dc5c:	4413      	add	r3, r2
 800dc5e:	009b      	lsls	r3, r3, #2
 800dc60:	4a1f      	ldr	r2, [pc, #124]	@ (800dce0 <xTaskIncrementTick+0x168>)
 800dc62:	441a      	add	r2, r3
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	3304      	adds	r3, #4
 800dc68:	4619      	mov	r1, r3
 800dc6a:	4610      	mov	r0, r2
 800dc6c:	f7fe fb12 	bl	800c294 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc74:	4b1b      	ldr	r3, [pc, #108]	@ (800dce4 <xTaskIncrementTick+0x16c>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d3b9      	bcc.n	800dbf2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc82:	e7b6      	b.n	800dbf2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dc84:	4b17      	ldr	r3, [pc, #92]	@ (800dce4 <xTaskIncrementTick+0x16c>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc8a:	4915      	ldr	r1, [pc, #84]	@ (800dce0 <xTaskIncrementTick+0x168>)
 800dc8c:	4613      	mov	r3, r2
 800dc8e:	009b      	lsls	r3, r3, #2
 800dc90:	4413      	add	r3, r2
 800dc92:	009b      	lsls	r3, r3, #2
 800dc94:	440b      	add	r3, r1
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d907      	bls.n	800dcac <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	617b      	str	r3, [r7, #20]
 800dca0:	e004      	b.n	800dcac <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800dca2:	4b11      	ldr	r3, [pc, #68]	@ (800dce8 <xTaskIncrementTick+0x170>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	3301      	adds	r3, #1
 800dca8:	4a0f      	ldr	r2, [pc, #60]	@ (800dce8 <xTaskIncrementTick+0x170>)
 800dcaa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800dcac:	4b0f      	ldr	r3, [pc, #60]	@ (800dcec <xTaskIncrementTick+0x174>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d001      	beq.n	800dcb8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800dcb8:	697b      	ldr	r3, [r7, #20]
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3718      	adds	r7, #24
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	20005328 	.word	0x20005328
 800dcc8:	20005304 	.word	0x20005304
 800dccc:	200052b8 	.word	0x200052b8
 800dcd0:	200052bc 	.word	0x200052bc
 800dcd4:	20005318 	.word	0x20005318
 800dcd8:	20005320 	.word	0x20005320
 800dcdc:	20005308 	.word	0x20005308
 800dce0:	20005204 	.word	0x20005204
 800dce4:	20005200 	.word	0x20005200
 800dce8:	20005310 	.word	0x20005310
 800dcec:	20005314 	.word	0x20005314

0800dcf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b087      	sub	sp, #28
 800dcf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dcf6:	4b2b      	ldr	r3, [pc, #172]	@ (800dda4 <vTaskSwitchContext+0xb4>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d003      	beq.n	800dd06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dcfe:	4b2a      	ldr	r3, [pc, #168]	@ (800dda8 <vTaskSwitchContext+0xb8>)
 800dd00:	2201      	movs	r2, #1
 800dd02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dd04:	e047      	b.n	800dd96 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800dd06:	4b28      	ldr	r3, [pc, #160]	@ (800dda8 <vTaskSwitchContext+0xb8>)
 800dd08:	2200      	movs	r2, #0
 800dd0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd0c:	4b27      	ldr	r3, [pc, #156]	@ (800ddac <vTaskSwitchContext+0xbc>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	fab3 f383 	clz	r3, r3
 800dd18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dd1a:	7afb      	ldrb	r3, [r7, #11]
 800dd1c:	f1c3 031f 	rsb	r3, r3, #31
 800dd20:	617b      	str	r3, [r7, #20]
 800dd22:	4923      	ldr	r1, [pc, #140]	@ (800ddb0 <vTaskSwitchContext+0xc0>)
 800dd24:	697a      	ldr	r2, [r7, #20]
 800dd26:	4613      	mov	r3, r2
 800dd28:	009b      	lsls	r3, r3, #2
 800dd2a:	4413      	add	r3, r2
 800dd2c:	009b      	lsls	r3, r3, #2
 800dd2e:	440b      	add	r3, r1
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d10d      	bne.n	800dd52 <vTaskSwitchContext+0x62>
	__asm volatile
 800dd36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd3a:	b672      	cpsid	i
 800dd3c:	f383 8811 	msr	BASEPRI, r3
 800dd40:	f3bf 8f6f 	isb	sy
 800dd44:	f3bf 8f4f 	dsb	sy
 800dd48:	b662      	cpsie	i
 800dd4a:	607b      	str	r3, [r7, #4]
}
 800dd4c:	bf00      	nop
 800dd4e:	bf00      	nop
 800dd50:	e7fd      	b.n	800dd4e <vTaskSwitchContext+0x5e>
 800dd52:	697a      	ldr	r2, [r7, #20]
 800dd54:	4613      	mov	r3, r2
 800dd56:	009b      	lsls	r3, r3, #2
 800dd58:	4413      	add	r3, r2
 800dd5a:	009b      	lsls	r3, r3, #2
 800dd5c:	4a14      	ldr	r2, [pc, #80]	@ (800ddb0 <vTaskSwitchContext+0xc0>)
 800dd5e:	4413      	add	r3, r2
 800dd60:	613b      	str	r3, [r7, #16]
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	685b      	ldr	r3, [r3, #4]
 800dd66:	685a      	ldr	r2, [r3, #4]
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	605a      	str	r2, [r3, #4]
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	685a      	ldr	r2, [r3, #4]
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	3308      	adds	r3, #8
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d104      	bne.n	800dd82 <vTaskSwitchContext+0x92>
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	685a      	ldr	r2, [r3, #4]
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	605a      	str	r2, [r3, #4]
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	4a0a      	ldr	r2, [pc, #40]	@ (800ddb4 <vTaskSwitchContext+0xc4>)
 800dd8a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dd8c:	4b09      	ldr	r3, [pc, #36]	@ (800ddb4 <vTaskSwitchContext+0xc4>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	334c      	adds	r3, #76	@ 0x4c
 800dd92:	4a09      	ldr	r2, [pc, #36]	@ (800ddb8 <vTaskSwitchContext+0xc8>)
 800dd94:	6013      	str	r3, [r2, #0]
}
 800dd96:	bf00      	nop
 800dd98:	371c      	adds	r7, #28
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr
 800dda2:	bf00      	nop
 800dda4:	20005328 	.word	0x20005328
 800dda8:	20005314 	.word	0x20005314
 800ddac:	20005308 	.word	0x20005308
 800ddb0:	20005204 	.word	0x20005204
 800ddb4:	20005200 	.word	0x20005200
 800ddb8:	2000013c 	.word	0x2000013c

0800ddbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b084      	sub	sp, #16
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d10d      	bne.n	800dde8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800ddcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddd0:	b672      	cpsid	i
 800ddd2:	f383 8811 	msr	BASEPRI, r3
 800ddd6:	f3bf 8f6f 	isb	sy
 800ddda:	f3bf 8f4f 	dsb	sy
 800ddde:	b662      	cpsie	i
 800dde0:	60fb      	str	r3, [r7, #12]
}
 800dde2:	bf00      	nop
 800dde4:	bf00      	nop
 800dde6:	e7fd      	b.n	800dde4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dde8:	4b07      	ldr	r3, [pc, #28]	@ (800de08 <vTaskPlaceOnEventList+0x4c>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	3318      	adds	r3, #24
 800ddee:	4619      	mov	r1, r3
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f7fe fa73 	bl	800c2dc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ddf6:	2101      	movs	r1, #1
 800ddf8:	6838      	ldr	r0, [r7, #0]
 800ddfa:	f000 fbb3 	bl	800e564 <prvAddCurrentTaskToDelayedList>
}
 800ddfe:	bf00      	nop
 800de00:	3710      	adds	r7, #16
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	20005200 	.word	0x20005200

0800de0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b086      	sub	sp, #24
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	68db      	ldr	r3, [r3, #12]
 800de1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d10d      	bne.n	800de3e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800de22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de26:	b672      	cpsid	i
 800de28:	f383 8811 	msr	BASEPRI, r3
 800de2c:	f3bf 8f6f 	isb	sy
 800de30:	f3bf 8f4f 	dsb	sy
 800de34:	b662      	cpsie	i
 800de36:	60fb      	str	r3, [r7, #12]
}
 800de38:	bf00      	nop
 800de3a:	bf00      	nop
 800de3c:	e7fd      	b.n	800de3a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	3318      	adds	r3, #24
 800de42:	4618      	mov	r0, r3
 800de44:	f7fe fa83 	bl	800c34e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de48:	4b1d      	ldr	r3, [pc, #116]	@ (800dec0 <xTaskRemoveFromEventList+0xb4>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d11c      	bne.n	800de8a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	3304      	adds	r3, #4
 800de54:	4618      	mov	r0, r3
 800de56:	f7fe fa7a 	bl	800c34e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de5e:	2201      	movs	r2, #1
 800de60:	409a      	lsls	r2, r3
 800de62:	4b18      	ldr	r3, [pc, #96]	@ (800dec4 <xTaskRemoveFromEventList+0xb8>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	4313      	orrs	r3, r2
 800de68:	4a16      	ldr	r2, [pc, #88]	@ (800dec4 <xTaskRemoveFromEventList+0xb8>)
 800de6a:	6013      	str	r3, [r2, #0]
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de70:	4613      	mov	r3, r2
 800de72:	009b      	lsls	r3, r3, #2
 800de74:	4413      	add	r3, r2
 800de76:	009b      	lsls	r3, r3, #2
 800de78:	4a13      	ldr	r2, [pc, #76]	@ (800dec8 <xTaskRemoveFromEventList+0xbc>)
 800de7a:	441a      	add	r2, r3
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	3304      	adds	r3, #4
 800de80:	4619      	mov	r1, r3
 800de82:	4610      	mov	r0, r2
 800de84:	f7fe fa06 	bl	800c294 <vListInsertEnd>
 800de88:	e005      	b.n	800de96 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	3318      	adds	r3, #24
 800de8e:	4619      	mov	r1, r3
 800de90:	480e      	ldr	r0, [pc, #56]	@ (800decc <xTaskRemoveFromEventList+0xc0>)
 800de92:	f7fe f9ff 	bl	800c294 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ded0 <xTaskRemoveFromEventList+0xc4>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d905      	bls.n	800deb0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dea4:	2301      	movs	r3, #1
 800dea6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dea8:	4b0a      	ldr	r3, [pc, #40]	@ (800ded4 <xTaskRemoveFromEventList+0xc8>)
 800deaa:	2201      	movs	r2, #1
 800deac:	601a      	str	r2, [r3, #0]
 800deae:	e001      	b.n	800deb4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800deb0:	2300      	movs	r3, #0
 800deb2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800deb4:	697b      	ldr	r3, [r7, #20]
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3718      	adds	r7, #24
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	20005328 	.word	0x20005328
 800dec4:	20005308 	.word	0x20005308
 800dec8:	20005204 	.word	0x20005204
 800decc:	200052c0 	.word	0x200052c0
 800ded0:	20005200 	.word	0x20005200
 800ded4:	20005314 	.word	0x20005314

0800ded8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ded8:	b480      	push	{r7}
 800deda:	b083      	sub	sp, #12
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dee0:	4b06      	ldr	r3, [pc, #24]	@ (800defc <vTaskInternalSetTimeOutState+0x24>)
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dee8:	4b05      	ldr	r3, [pc, #20]	@ (800df00 <vTaskInternalSetTimeOutState+0x28>)
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	605a      	str	r2, [r3, #4]
}
 800def0:	bf00      	nop
 800def2:	370c      	adds	r7, #12
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr
 800defc:	20005318 	.word	0x20005318
 800df00:	20005304 	.word	0x20005304

0800df04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b088      	sub	sp, #32
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d10d      	bne.n	800df30 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800df14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df18:	b672      	cpsid	i
 800df1a:	f383 8811 	msr	BASEPRI, r3
 800df1e:	f3bf 8f6f 	isb	sy
 800df22:	f3bf 8f4f 	dsb	sy
 800df26:	b662      	cpsie	i
 800df28:	613b      	str	r3, [r7, #16]
}
 800df2a:	bf00      	nop
 800df2c:	bf00      	nop
 800df2e:	e7fd      	b.n	800df2c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d10d      	bne.n	800df52 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800df36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df3a:	b672      	cpsid	i
 800df3c:	f383 8811 	msr	BASEPRI, r3
 800df40:	f3bf 8f6f 	isb	sy
 800df44:	f3bf 8f4f 	dsb	sy
 800df48:	b662      	cpsie	i
 800df4a:	60fb      	str	r3, [r7, #12]
}
 800df4c:	bf00      	nop
 800df4e:	bf00      	nop
 800df50:	e7fd      	b.n	800df4e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800df52:	f000 fc7b 	bl	800e84c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800df56:	4b1d      	ldr	r3, [pc, #116]	@ (800dfcc <xTaskCheckForTimeOut+0xc8>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	69ba      	ldr	r2, [r7, #24]
 800df62:	1ad3      	subs	r3, r2, r3
 800df64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df6e:	d102      	bne.n	800df76 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800df70:	2300      	movs	r3, #0
 800df72:	61fb      	str	r3, [r7, #28]
 800df74:	e023      	b.n	800dfbe <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681a      	ldr	r2, [r3, #0]
 800df7a:	4b15      	ldr	r3, [pc, #84]	@ (800dfd0 <xTaskCheckForTimeOut+0xcc>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	429a      	cmp	r2, r3
 800df80:	d007      	beq.n	800df92 <xTaskCheckForTimeOut+0x8e>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	69ba      	ldr	r2, [r7, #24]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d302      	bcc.n	800df92 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800df8c:	2301      	movs	r3, #1
 800df8e:	61fb      	str	r3, [r7, #28]
 800df90:	e015      	b.n	800dfbe <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	697a      	ldr	r2, [r7, #20]
 800df98:	429a      	cmp	r2, r3
 800df9a:	d20b      	bcs.n	800dfb4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	1ad2      	subs	r2, r2, r3
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f7ff ff95 	bl	800ded8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	61fb      	str	r3, [r7, #28]
 800dfb2:	e004      	b.n	800dfbe <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dfba:	2301      	movs	r3, #1
 800dfbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dfbe:	f000 fc7b 	bl	800e8b8 <vPortExitCritical>

	return xReturn;
 800dfc2:	69fb      	ldr	r3, [r7, #28]
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3720      	adds	r7, #32
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}
 800dfcc:	20005304 	.word	0x20005304
 800dfd0:	20005318 	.word	0x20005318

0800dfd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dfd8:	4b03      	ldr	r3, [pc, #12]	@ (800dfe8 <vTaskMissedYield+0x14>)
 800dfda:	2201      	movs	r2, #1
 800dfdc:	601a      	str	r2, [r3, #0]
}
 800dfde:	bf00      	nop
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr
 800dfe8:	20005314 	.word	0x20005314

0800dfec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dff4:	f000 f852 	bl	800e09c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dff8:	4b06      	ldr	r3, [pc, #24]	@ (800e014 <prvIdleTask+0x28>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	d9f9      	bls.n	800dff4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e000:	4b05      	ldr	r3, [pc, #20]	@ (800e018 <prvIdleTask+0x2c>)
 800e002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e006:	601a      	str	r2, [r3, #0]
 800e008:	f3bf 8f4f 	dsb	sy
 800e00c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e010:	e7f0      	b.n	800dff4 <prvIdleTask+0x8>
 800e012:	bf00      	nop
 800e014:	20005204 	.word	0x20005204
 800e018:	e000ed04 	.word	0xe000ed04

0800e01c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e022:	2300      	movs	r3, #0
 800e024:	607b      	str	r3, [r7, #4]
 800e026:	e00c      	b.n	800e042 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e028:	687a      	ldr	r2, [r7, #4]
 800e02a:	4613      	mov	r3, r2
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	4413      	add	r3, r2
 800e030:	009b      	lsls	r3, r3, #2
 800e032:	4a12      	ldr	r2, [pc, #72]	@ (800e07c <prvInitialiseTaskLists+0x60>)
 800e034:	4413      	add	r3, r2
 800e036:	4618      	mov	r0, r3
 800e038:	f7fe f8ff 	bl	800c23a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	3301      	adds	r3, #1
 800e040:	607b      	str	r3, [r7, #4]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2b06      	cmp	r3, #6
 800e046:	d9ef      	bls.n	800e028 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e048:	480d      	ldr	r0, [pc, #52]	@ (800e080 <prvInitialiseTaskLists+0x64>)
 800e04a:	f7fe f8f6 	bl	800c23a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e04e:	480d      	ldr	r0, [pc, #52]	@ (800e084 <prvInitialiseTaskLists+0x68>)
 800e050:	f7fe f8f3 	bl	800c23a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e054:	480c      	ldr	r0, [pc, #48]	@ (800e088 <prvInitialiseTaskLists+0x6c>)
 800e056:	f7fe f8f0 	bl	800c23a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e05a:	480c      	ldr	r0, [pc, #48]	@ (800e08c <prvInitialiseTaskLists+0x70>)
 800e05c:	f7fe f8ed 	bl	800c23a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e060:	480b      	ldr	r0, [pc, #44]	@ (800e090 <prvInitialiseTaskLists+0x74>)
 800e062:	f7fe f8ea 	bl	800c23a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e066:	4b0b      	ldr	r3, [pc, #44]	@ (800e094 <prvInitialiseTaskLists+0x78>)
 800e068:	4a05      	ldr	r2, [pc, #20]	@ (800e080 <prvInitialiseTaskLists+0x64>)
 800e06a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e06c:	4b0a      	ldr	r3, [pc, #40]	@ (800e098 <prvInitialiseTaskLists+0x7c>)
 800e06e:	4a05      	ldr	r2, [pc, #20]	@ (800e084 <prvInitialiseTaskLists+0x68>)
 800e070:	601a      	str	r2, [r3, #0]
}
 800e072:	bf00      	nop
 800e074:	3708      	adds	r7, #8
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	20005204 	.word	0x20005204
 800e080:	20005290 	.word	0x20005290
 800e084:	200052a4 	.word	0x200052a4
 800e088:	200052c0 	.word	0x200052c0
 800e08c:	200052d4 	.word	0x200052d4
 800e090:	200052ec 	.word	0x200052ec
 800e094:	200052b8 	.word	0x200052b8
 800e098:	200052bc 	.word	0x200052bc

0800e09c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b082      	sub	sp, #8
 800e0a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0a2:	e019      	b.n	800e0d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e0a4:	f000 fbd2 	bl	800e84c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0a8:	4b10      	ldr	r3, [pc, #64]	@ (800e0ec <prvCheckTasksWaitingTermination+0x50>)
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	68db      	ldr	r3, [r3, #12]
 800e0ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	3304      	adds	r3, #4
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7fe f94a 	bl	800c34e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e0ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e0f0 <prvCheckTasksWaitingTermination+0x54>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	3b01      	subs	r3, #1
 800e0c0:	4a0b      	ldr	r2, [pc, #44]	@ (800e0f0 <prvCheckTasksWaitingTermination+0x54>)
 800e0c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e0c4:	4b0b      	ldr	r3, [pc, #44]	@ (800e0f4 <prvCheckTasksWaitingTermination+0x58>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	3b01      	subs	r3, #1
 800e0ca:	4a0a      	ldr	r2, [pc, #40]	@ (800e0f4 <prvCheckTasksWaitingTermination+0x58>)
 800e0cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e0ce:	f000 fbf3 	bl	800e8b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 f810 	bl	800e0f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0d8:	4b06      	ldr	r3, [pc, #24]	@ (800e0f4 <prvCheckTasksWaitingTermination+0x58>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d1e1      	bne.n	800e0a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e0e0:	bf00      	nop
 800e0e2:	bf00      	nop
 800e0e4:	3708      	adds	r7, #8
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
 800e0ea:	bf00      	nop
 800e0ec:	200052d4 	.word	0x200052d4
 800e0f0:	20005300 	.word	0x20005300
 800e0f4:	200052e8 	.word	0x200052e8

0800e0f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	334c      	adds	r3, #76	@ 0x4c
 800e104:	4618      	mov	r0, r3
 800e106:	f00f fa2d 	bl	801d564 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e110:	2b00      	cmp	r3, #0
 800e112:	d108      	bne.n	800e126 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e118:	4618      	mov	r0, r3
 800e11a:	f000 fd93 	bl	800ec44 <vPortFree>
				vPortFree( pxTCB );
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f000 fd90 	bl	800ec44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e124:	e01b      	b.n	800e15e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d103      	bne.n	800e138 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f000 fd87 	bl	800ec44 <vPortFree>
	}
 800e136:	e012      	b.n	800e15e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e13e:	2b02      	cmp	r3, #2
 800e140:	d00d      	beq.n	800e15e <prvDeleteTCB+0x66>
	__asm volatile
 800e142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e146:	b672      	cpsid	i
 800e148:	f383 8811 	msr	BASEPRI, r3
 800e14c:	f3bf 8f6f 	isb	sy
 800e150:	f3bf 8f4f 	dsb	sy
 800e154:	b662      	cpsie	i
 800e156:	60fb      	str	r3, [r7, #12]
}
 800e158:	bf00      	nop
 800e15a:	bf00      	nop
 800e15c:	e7fd      	b.n	800e15a <prvDeleteTCB+0x62>
	}
 800e15e:	bf00      	nop
 800e160:	3710      	adds	r7, #16
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
	...

0800e168 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e168:	b480      	push	{r7}
 800e16a:	b083      	sub	sp, #12
 800e16c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e16e:	4b0c      	ldr	r3, [pc, #48]	@ (800e1a0 <prvResetNextTaskUnblockTime+0x38>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d104      	bne.n	800e182 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e178:	4b0a      	ldr	r3, [pc, #40]	@ (800e1a4 <prvResetNextTaskUnblockTime+0x3c>)
 800e17a:	f04f 32ff 	mov.w	r2, #4294967295
 800e17e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e180:	e008      	b.n	800e194 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e182:	4b07      	ldr	r3, [pc, #28]	@ (800e1a0 <prvResetNextTaskUnblockTime+0x38>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	68db      	ldr	r3, [r3, #12]
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	4a04      	ldr	r2, [pc, #16]	@ (800e1a4 <prvResetNextTaskUnblockTime+0x3c>)
 800e192:	6013      	str	r3, [r2, #0]
}
 800e194:	bf00      	nop
 800e196:	370c      	adds	r7, #12
 800e198:	46bd      	mov	sp, r7
 800e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19e:	4770      	bx	lr
 800e1a0:	200052b8 	.word	0x200052b8
 800e1a4:	20005320 	.word	0x20005320

0800e1a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e1ae:	4b0b      	ldr	r3, [pc, #44]	@ (800e1dc <xTaskGetSchedulerState+0x34>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d102      	bne.n	800e1bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	607b      	str	r3, [r7, #4]
 800e1ba:	e008      	b.n	800e1ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1bc:	4b08      	ldr	r3, [pc, #32]	@ (800e1e0 <xTaskGetSchedulerState+0x38>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d102      	bne.n	800e1ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e1c4:	2302      	movs	r3, #2
 800e1c6:	607b      	str	r3, [r7, #4]
 800e1c8:	e001      	b.n	800e1ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e1ce:	687b      	ldr	r3, [r7, #4]
	}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	370c      	adds	r7, #12
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1da:	4770      	bx	lr
 800e1dc:	2000530c 	.word	0x2000530c
 800e1e0:	20005328 	.word	0x20005328

0800e1e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b084      	sub	sp, #16
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d069      	beq.n	800e2ce <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1fe:	4b36      	ldr	r3, [pc, #216]	@ (800e2d8 <xTaskPriorityInherit+0xf4>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e204:	429a      	cmp	r2, r3
 800e206:	d259      	bcs.n	800e2bc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	699b      	ldr	r3, [r3, #24]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	db06      	blt.n	800e21e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e210:	4b31      	ldr	r3, [pc, #196]	@ (800e2d8 <xTaskPriorityInherit+0xf4>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e216:	f1c3 0207 	rsb	r2, r3, #7
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	6959      	ldr	r1, [r3, #20]
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e226:	4613      	mov	r3, r2
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	4413      	add	r3, r2
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	4a2b      	ldr	r2, [pc, #172]	@ (800e2dc <xTaskPriorityInherit+0xf8>)
 800e230:	4413      	add	r3, r2
 800e232:	4299      	cmp	r1, r3
 800e234:	d13a      	bne.n	800e2ac <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	3304      	adds	r3, #4
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7fe f887 	bl	800c34e <uxListRemove>
 800e240:	4603      	mov	r3, r0
 800e242:	2b00      	cmp	r3, #0
 800e244:	d115      	bne.n	800e272 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e24a:	4924      	ldr	r1, [pc, #144]	@ (800e2dc <xTaskPriorityInherit+0xf8>)
 800e24c:	4613      	mov	r3, r2
 800e24e:	009b      	lsls	r3, r3, #2
 800e250:	4413      	add	r3, r2
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	440b      	add	r3, r1
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d10a      	bne.n	800e272 <xTaskPriorityInherit+0x8e>
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e260:	2201      	movs	r2, #1
 800e262:	fa02 f303 	lsl.w	r3, r2, r3
 800e266:	43da      	mvns	r2, r3
 800e268:	4b1d      	ldr	r3, [pc, #116]	@ (800e2e0 <xTaskPriorityInherit+0xfc>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4013      	ands	r3, r2
 800e26e:	4a1c      	ldr	r2, [pc, #112]	@ (800e2e0 <xTaskPriorityInherit+0xfc>)
 800e270:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e272:	4b19      	ldr	r3, [pc, #100]	@ (800e2d8 <xTaskPriorityInherit+0xf4>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e280:	2201      	movs	r2, #1
 800e282:	409a      	lsls	r2, r3
 800e284:	4b16      	ldr	r3, [pc, #88]	@ (800e2e0 <xTaskPriorityInherit+0xfc>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	4313      	orrs	r3, r2
 800e28a:	4a15      	ldr	r2, [pc, #84]	@ (800e2e0 <xTaskPriorityInherit+0xfc>)
 800e28c:	6013      	str	r3, [r2, #0]
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e292:	4613      	mov	r3, r2
 800e294:	009b      	lsls	r3, r3, #2
 800e296:	4413      	add	r3, r2
 800e298:	009b      	lsls	r3, r3, #2
 800e29a:	4a10      	ldr	r2, [pc, #64]	@ (800e2dc <xTaskPriorityInherit+0xf8>)
 800e29c:	441a      	add	r2, r3
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	3304      	adds	r3, #4
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	4610      	mov	r0, r2
 800e2a6:	f7fd fff5 	bl	800c294 <vListInsertEnd>
 800e2aa:	e004      	b.n	800e2b6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e2ac:	4b0a      	ldr	r3, [pc, #40]	@ (800e2d8 <xTaskPriorityInherit+0xf4>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	60fb      	str	r3, [r7, #12]
 800e2ba:	e008      	b.n	800e2ce <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e2c0:	4b05      	ldr	r3, [pc, #20]	@ (800e2d8 <xTaskPriorityInherit+0xf4>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d201      	bcs.n	800e2ce <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
	}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3710      	adds	r7, #16
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	20005200 	.word	0x20005200
 800e2dc:	20005204 	.word	0x20005204
 800e2e0:	20005308 	.word	0x20005308

0800e2e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b086      	sub	sp, #24
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d074      	beq.n	800e3e4 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e2fa:	4b3d      	ldr	r3, [pc, #244]	@ (800e3f0 <xTaskPriorityDisinherit+0x10c>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	693a      	ldr	r2, [r7, #16]
 800e300:	429a      	cmp	r2, r3
 800e302:	d00d      	beq.n	800e320 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800e304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e308:	b672      	cpsid	i
 800e30a:	f383 8811 	msr	BASEPRI, r3
 800e30e:	f3bf 8f6f 	isb	sy
 800e312:	f3bf 8f4f 	dsb	sy
 800e316:	b662      	cpsie	i
 800e318:	60fb      	str	r3, [r7, #12]
}
 800e31a:	bf00      	nop
 800e31c:	bf00      	nop
 800e31e:	e7fd      	b.n	800e31c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e324:	2b00      	cmp	r3, #0
 800e326:	d10d      	bne.n	800e344 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800e328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e32c:	b672      	cpsid	i
 800e32e:	f383 8811 	msr	BASEPRI, r3
 800e332:	f3bf 8f6f 	isb	sy
 800e336:	f3bf 8f4f 	dsb	sy
 800e33a:	b662      	cpsie	i
 800e33c:	60bb      	str	r3, [r7, #8]
}
 800e33e:	bf00      	nop
 800e340:	bf00      	nop
 800e342:	e7fd      	b.n	800e340 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e348:	1e5a      	subs	r2, r3, #1
 800e34a:	693b      	ldr	r3, [r7, #16]
 800e34c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e356:	429a      	cmp	r2, r3
 800e358:	d044      	beq.n	800e3e4 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d140      	bne.n	800e3e4 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	3304      	adds	r3, #4
 800e366:	4618      	mov	r0, r3
 800e368:	f7fd fff1 	bl	800c34e <uxListRemove>
 800e36c:	4603      	mov	r3, r0
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d115      	bne.n	800e39e <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e376:	491f      	ldr	r1, [pc, #124]	@ (800e3f4 <xTaskPriorityDisinherit+0x110>)
 800e378:	4613      	mov	r3, r2
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	4413      	add	r3, r2
 800e37e:	009b      	lsls	r3, r3, #2
 800e380:	440b      	add	r3, r1
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d10a      	bne.n	800e39e <xTaskPriorityDisinherit+0xba>
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e38c:	2201      	movs	r2, #1
 800e38e:	fa02 f303 	lsl.w	r3, r2, r3
 800e392:	43da      	mvns	r2, r3
 800e394:	4b18      	ldr	r3, [pc, #96]	@ (800e3f8 <xTaskPriorityDisinherit+0x114>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	4013      	ands	r3, r2
 800e39a:	4a17      	ldr	r2, [pc, #92]	@ (800e3f8 <xTaskPriorityDisinherit+0x114>)
 800e39c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e3a2:	693b      	ldr	r3, [r7, #16]
 800e3a4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3aa:	f1c3 0207 	rsb	r2, r3, #7
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	409a      	lsls	r2, r3
 800e3ba:	4b0f      	ldr	r3, [pc, #60]	@ (800e3f8 <xTaskPriorityDisinherit+0x114>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	4313      	orrs	r3, r2
 800e3c0:	4a0d      	ldr	r2, [pc, #52]	@ (800e3f8 <xTaskPriorityDisinherit+0x114>)
 800e3c2:	6013      	str	r3, [r2, #0]
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3c8:	4613      	mov	r3, r2
 800e3ca:	009b      	lsls	r3, r3, #2
 800e3cc:	4413      	add	r3, r2
 800e3ce:	009b      	lsls	r3, r3, #2
 800e3d0:	4a08      	ldr	r2, [pc, #32]	@ (800e3f4 <xTaskPriorityDisinherit+0x110>)
 800e3d2:	441a      	add	r2, r3
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	3304      	adds	r3, #4
 800e3d8:	4619      	mov	r1, r3
 800e3da:	4610      	mov	r0, r2
 800e3dc:	f7fd ff5a 	bl	800c294 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e3e4:	697b      	ldr	r3, [r7, #20]
	}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3718      	adds	r7, #24
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	20005200 	.word	0x20005200
 800e3f4:	20005204 	.word	0x20005204
 800e3f8:	20005308 	.word	0x20005308

0800e3fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b088      	sub	sp, #32
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e40a:	2301      	movs	r3, #1
 800e40c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2b00      	cmp	r3, #0
 800e412:	f000 8089 	beq.w	800e528 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e416:	69bb      	ldr	r3, [r7, #24]
 800e418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d10d      	bne.n	800e43a <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800e41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e422:	b672      	cpsid	i
 800e424:	f383 8811 	msr	BASEPRI, r3
 800e428:	f3bf 8f6f 	isb	sy
 800e42c:	f3bf 8f4f 	dsb	sy
 800e430:	b662      	cpsie	i
 800e432:	60fb      	str	r3, [r7, #12]
}
 800e434:	bf00      	nop
 800e436:	bf00      	nop
 800e438:	e7fd      	b.n	800e436 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e43a:	69bb      	ldr	r3, [r7, #24]
 800e43c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e43e:	683a      	ldr	r2, [r7, #0]
 800e440:	429a      	cmp	r2, r3
 800e442:	d902      	bls.n	800e44a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	61fb      	str	r3, [r7, #28]
 800e448:	e002      	b.n	800e450 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e44a:	69bb      	ldr	r3, [r7, #24]
 800e44c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e44e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e450:	69bb      	ldr	r3, [r7, #24]
 800e452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e454:	69fa      	ldr	r2, [r7, #28]
 800e456:	429a      	cmp	r2, r3
 800e458:	d066      	beq.n	800e528 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e45a:	69bb      	ldr	r3, [r7, #24]
 800e45c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e45e:	697a      	ldr	r2, [r7, #20]
 800e460:	429a      	cmp	r2, r3
 800e462:	d161      	bne.n	800e528 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e464:	4b32      	ldr	r3, [pc, #200]	@ (800e530 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	69ba      	ldr	r2, [r7, #24]
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d10d      	bne.n	800e48a <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800e46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e472:	b672      	cpsid	i
 800e474:	f383 8811 	msr	BASEPRI, r3
 800e478:	f3bf 8f6f 	isb	sy
 800e47c:	f3bf 8f4f 	dsb	sy
 800e480:	b662      	cpsie	i
 800e482:	60bb      	str	r3, [r7, #8]
}
 800e484:	bf00      	nop
 800e486:	bf00      	nop
 800e488:	e7fd      	b.n	800e486 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e48a:	69bb      	ldr	r3, [r7, #24]
 800e48c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e48e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e490:	69bb      	ldr	r3, [r7, #24]
 800e492:	69fa      	ldr	r2, [r7, #28]
 800e494:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e496:	69bb      	ldr	r3, [r7, #24]
 800e498:	699b      	ldr	r3, [r3, #24]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	db04      	blt.n	800e4a8 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	f1c3 0207 	rsb	r2, r3, #7
 800e4a4:	69bb      	ldr	r3, [r7, #24]
 800e4a6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e4a8:	69bb      	ldr	r3, [r7, #24]
 800e4aa:	6959      	ldr	r1, [r3, #20]
 800e4ac:	693a      	ldr	r2, [r7, #16]
 800e4ae:	4613      	mov	r3, r2
 800e4b0:	009b      	lsls	r3, r3, #2
 800e4b2:	4413      	add	r3, r2
 800e4b4:	009b      	lsls	r3, r3, #2
 800e4b6:	4a1f      	ldr	r2, [pc, #124]	@ (800e534 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e4b8:	4413      	add	r3, r2
 800e4ba:	4299      	cmp	r1, r3
 800e4bc:	d134      	bne.n	800e528 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4be:	69bb      	ldr	r3, [r7, #24]
 800e4c0:	3304      	adds	r3, #4
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7fd ff43 	bl	800c34e <uxListRemove>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d115      	bne.n	800e4fa <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e4ce:	69bb      	ldr	r3, [r7, #24]
 800e4d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4d2:	4918      	ldr	r1, [pc, #96]	@ (800e534 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	009b      	lsls	r3, r3, #2
 800e4d8:	4413      	add	r3, r2
 800e4da:	009b      	lsls	r3, r3, #2
 800e4dc:	440b      	add	r3, r1
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d10a      	bne.n	800e4fa <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4e8:	2201      	movs	r2, #1
 800e4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800e4ee:	43da      	mvns	r2, r3
 800e4f0:	4b11      	ldr	r3, [pc, #68]	@ (800e538 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	4013      	ands	r3, r2
 800e4f6:	4a10      	ldr	r2, [pc, #64]	@ (800e538 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800e4f8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e4fa:	69bb      	ldr	r3, [r7, #24]
 800e4fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4fe:	2201      	movs	r2, #1
 800e500:	409a      	lsls	r2, r3
 800e502:	4b0d      	ldr	r3, [pc, #52]	@ (800e538 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	4313      	orrs	r3, r2
 800e508:	4a0b      	ldr	r2, [pc, #44]	@ (800e538 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800e50a:	6013      	str	r3, [r2, #0]
 800e50c:	69bb      	ldr	r3, [r7, #24]
 800e50e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e510:	4613      	mov	r3, r2
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	4413      	add	r3, r2
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	4a06      	ldr	r2, [pc, #24]	@ (800e534 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e51a:	441a      	add	r2, r3
 800e51c:	69bb      	ldr	r3, [r7, #24]
 800e51e:	3304      	adds	r3, #4
 800e520:	4619      	mov	r1, r3
 800e522:	4610      	mov	r0, r2
 800e524:	f7fd feb6 	bl	800c294 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e528:	bf00      	nop
 800e52a:	3720      	adds	r7, #32
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	20005200 	.word	0x20005200
 800e534:	20005204 	.word	0x20005204
 800e538:	20005308 	.word	0x20005308

0800e53c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e53c:	b480      	push	{r7}
 800e53e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e540:	4b07      	ldr	r3, [pc, #28]	@ (800e560 <pvTaskIncrementMutexHeldCount+0x24>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d004      	beq.n	800e552 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e548:	4b05      	ldr	r3, [pc, #20]	@ (800e560 <pvTaskIncrementMutexHeldCount+0x24>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e54e:	3201      	adds	r2, #1
 800e550:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800e552:	4b03      	ldr	r3, [pc, #12]	@ (800e560 <pvTaskIncrementMutexHeldCount+0x24>)
 800e554:	681b      	ldr	r3, [r3, #0]
	}
 800e556:	4618      	mov	r0, r3
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr
 800e560:	20005200 	.word	0x20005200

0800e564 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b084      	sub	sp, #16
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e56e:	4b29      	ldr	r3, [pc, #164]	@ (800e614 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e574:	4b28      	ldr	r3, [pc, #160]	@ (800e618 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	3304      	adds	r3, #4
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7fd fee7 	bl	800c34e <uxListRemove>
 800e580:	4603      	mov	r3, r0
 800e582:	2b00      	cmp	r3, #0
 800e584:	d10b      	bne.n	800e59e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e586:	4b24      	ldr	r3, [pc, #144]	@ (800e618 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e58c:	2201      	movs	r2, #1
 800e58e:	fa02 f303 	lsl.w	r3, r2, r3
 800e592:	43da      	mvns	r2, r3
 800e594:	4b21      	ldr	r3, [pc, #132]	@ (800e61c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	4013      	ands	r3, r2
 800e59a:	4a20      	ldr	r2, [pc, #128]	@ (800e61c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e59c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5a4:	d10a      	bne.n	800e5bc <prvAddCurrentTaskToDelayedList+0x58>
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d007      	beq.n	800e5bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5ac:	4b1a      	ldr	r3, [pc, #104]	@ (800e618 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	3304      	adds	r3, #4
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	481a      	ldr	r0, [pc, #104]	@ (800e620 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e5b6:	f7fd fe6d 	bl	800c294 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e5ba:	e026      	b.n	800e60a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e5bc:	68fa      	ldr	r2, [r7, #12]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	4413      	add	r3, r2
 800e5c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e5c4:	4b14      	ldr	r3, [pc, #80]	@ (800e618 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	68ba      	ldr	r2, [r7, #8]
 800e5ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e5cc:	68ba      	ldr	r2, [r7, #8]
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d209      	bcs.n	800e5e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5d4:	4b13      	ldr	r3, [pc, #76]	@ (800e624 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e5d6:	681a      	ldr	r2, [r3, #0]
 800e5d8:	4b0f      	ldr	r3, [pc, #60]	@ (800e618 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	3304      	adds	r3, #4
 800e5de:	4619      	mov	r1, r3
 800e5e0:	4610      	mov	r0, r2
 800e5e2:	f7fd fe7b 	bl	800c2dc <vListInsert>
}
 800e5e6:	e010      	b.n	800e60a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5e8:	4b0f      	ldr	r3, [pc, #60]	@ (800e628 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e618 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	3304      	adds	r3, #4
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	4610      	mov	r0, r2
 800e5f6:	f7fd fe71 	bl	800c2dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e5fa:	4b0c      	ldr	r3, [pc, #48]	@ (800e62c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	68ba      	ldr	r2, [r7, #8]
 800e600:	429a      	cmp	r2, r3
 800e602:	d202      	bcs.n	800e60a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e604:	4a09      	ldr	r2, [pc, #36]	@ (800e62c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	6013      	str	r3, [r2, #0]
}
 800e60a:	bf00      	nop
 800e60c:	3710      	adds	r7, #16
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	20005304 	.word	0x20005304
 800e618:	20005200 	.word	0x20005200
 800e61c:	20005308 	.word	0x20005308
 800e620:	200052ec 	.word	0x200052ec
 800e624:	200052bc 	.word	0x200052bc
 800e628:	200052b8 	.word	0x200052b8
 800e62c:	20005320 	.word	0x20005320

0800e630 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e630:	b480      	push	{r7}
 800e632:	b085      	sub	sp, #20
 800e634:	af00      	add	r7, sp, #0
 800e636:	60f8      	str	r0, [r7, #12]
 800e638:	60b9      	str	r1, [r7, #8]
 800e63a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	3b04      	subs	r3, #4
 800e640:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e648:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	3b04      	subs	r3, #4
 800e64e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	f023 0201 	bic.w	r2, r3, #1
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	3b04      	subs	r3, #4
 800e65e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e660:	4a0c      	ldr	r2, [pc, #48]	@ (800e694 <pxPortInitialiseStack+0x64>)
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	3b14      	subs	r3, #20
 800e66a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e66c:	687a      	ldr	r2, [r7, #4]
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	3b04      	subs	r3, #4
 800e676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	f06f 0202 	mvn.w	r2, #2
 800e67e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	3b20      	subs	r3, #32
 800e684:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e686:	68fb      	ldr	r3, [r7, #12]
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3714      	adds	r7, #20
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr
 800e694:	0800e699 	.word	0x0800e699

0800e698 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e698:	b480      	push	{r7}
 800e69a:	b085      	sub	sp, #20
 800e69c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e6a2:	4b15      	ldr	r3, [pc, #84]	@ (800e6f8 <prvTaskExitError+0x60>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6aa:	d00d      	beq.n	800e6c8 <prvTaskExitError+0x30>
	__asm volatile
 800e6ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6b0:	b672      	cpsid	i
 800e6b2:	f383 8811 	msr	BASEPRI, r3
 800e6b6:	f3bf 8f6f 	isb	sy
 800e6ba:	f3bf 8f4f 	dsb	sy
 800e6be:	b662      	cpsie	i
 800e6c0:	60fb      	str	r3, [r7, #12]
}
 800e6c2:	bf00      	nop
 800e6c4:	bf00      	nop
 800e6c6:	e7fd      	b.n	800e6c4 <prvTaskExitError+0x2c>
	__asm volatile
 800e6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6cc:	b672      	cpsid	i
 800e6ce:	f383 8811 	msr	BASEPRI, r3
 800e6d2:	f3bf 8f6f 	isb	sy
 800e6d6:	f3bf 8f4f 	dsb	sy
 800e6da:	b662      	cpsie	i
 800e6dc:	60bb      	str	r3, [r7, #8]
}
 800e6de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e6e0:	bf00      	nop
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d0fc      	beq.n	800e6e2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e6e8:	bf00      	nop
 800e6ea:	bf00      	nop
 800e6ec:	3714      	adds	r7, #20
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f4:	4770      	bx	lr
 800e6f6:	bf00      	nop
 800e6f8:	200000ac 	.word	0x200000ac
 800e6fc:	00000000 	.word	0x00000000

0800e700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e700:	4b07      	ldr	r3, [pc, #28]	@ (800e720 <pxCurrentTCBConst2>)
 800e702:	6819      	ldr	r1, [r3, #0]
 800e704:	6808      	ldr	r0, [r1, #0]
 800e706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e70a:	f380 8809 	msr	PSP, r0
 800e70e:	f3bf 8f6f 	isb	sy
 800e712:	f04f 0000 	mov.w	r0, #0
 800e716:	f380 8811 	msr	BASEPRI, r0
 800e71a:	4770      	bx	lr
 800e71c:	f3af 8000 	nop.w

0800e720 <pxCurrentTCBConst2>:
 800e720:	20005200 	.word	0x20005200
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e724:	bf00      	nop
 800e726:	bf00      	nop

0800e728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e728:	4808      	ldr	r0, [pc, #32]	@ (800e74c <prvPortStartFirstTask+0x24>)
 800e72a:	6800      	ldr	r0, [r0, #0]
 800e72c:	6800      	ldr	r0, [r0, #0]
 800e72e:	f380 8808 	msr	MSP, r0
 800e732:	f04f 0000 	mov.w	r0, #0
 800e736:	f380 8814 	msr	CONTROL, r0
 800e73a:	b662      	cpsie	i
 800e73c:	b661      	cpsie	f
 800e73e:	f3bf 8f4f 	dsb	sy
 800e742:	f3bf 8f6f 	isb	sy
 800e746:	df00      	svc	0
 800e748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e74a:	bf00      	nop
 800e74c:	e000ed08 	.word	0xe000ed08

0800e750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b084      	sub	sp, #16
 800e754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e756:	4b37      	ldr	r3, [pc, #220]	@ (800e834 <xPortStartScheduler+0xe4>)
 800e758:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	b2db      	uxtb	r3, r3
 800e760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	22ff      	movs	r2, #255	@ 0xff
 800e766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	b2db      	uxtb	r3, r3
 800e76e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e770:	78fb      	ldrb	r3, [r7, #3]
 800e772:	b2db      	uxtb	r3, r3
 800e774:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e778:	b2da      	uxtb	r2, r3
 800e77a:	4b2f      	ldr	r3, [pc, #188]	@ (800e838 <xPortStartScheduler+0xe8>)
 800e77c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e77e:	4b2f      	ldr	r3, [pc, #188]	@ (800e83c <xPortStartScheduler+0xec>)
 800e780:	2207      	movs	r2, #7
 800e782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e784:	e009      	b.n	800e79a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e786:	4b2d      	ldr	r3, [pc, #180]	@ (800e83c <xPortStartScheduler+0xec>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	3b01      	subs	r3, #1
 800e78c:	4a2b      	ldr	r2, [pc, #172]	@ (800e83c <xPortStartScheduler+0xec>)
 800e78e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e790:	78fb      	ldrb	r3, [r7, #3]
 800e792:	b2db      	uxtb	r3, r3
 800e794:	005b      	lsls	r3, r3, #1
 800e796:	b2db      	uxtb	r3, r3
 800e798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e79a:	78fb      	ldrb	r3, [r7, #3]
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7a2:	2b80      	cmp	r3, #128	@ 0x80
 800e7a4:	d0ef      	beq.n	800e786 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e7a6:	4b25      	ldr	r3, [pc, #148]	@ (800e83c <xPortStartScheduler+0xec>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f1c3 0307 	rsb	r3, r3, #7
 800e7ae:	2b04      	cmp	r3, #4
 800e7b0:	d00d      	beq.n	800e7ce <xPortStartScheduler+0x7e>
	__asm volatile
 800e7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7b6:	b672      	cpsid	i
 800e7b8:	f383 8811 	msr	BASEPRI, r3
 800e7bc:	f3bf 8f6f 	isb	sy
 800e7c0:	f3bf 8f4f 	dsb	sy
 800e7c4:	b662      	cpsie	i
 800e7c6:	60bb      	str	r3, [r7, #8]
}
 800e7c8:	bf00      	nop
 800e7ca:	bf00      	nop
 800e7cc:	e7fd      	b.n	800e7ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e7ce:	4b1b      	ldr	r3, [pc, #108]	@ (800e83c <xPortStartScheduler+0xec>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	021b      	lsls	r3, r3, #8
 800e7d4:	4a19      	ldr	r2, [pc, #100]	@ (800e83c <xPortStartScheduler+0xec>)
 800e7d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e7d8:	4b18      	ldr	r3, [pc, #96]	@ (800e83c <xPortStartScheduler+0xec>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e7e0:	4a16      	ldr	r2, [pc, #88]	@ (800e83c <xPortStartScheduler+0xec>)
 800e7e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	b2da      	uxtb	r2, r3
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e7ec:	4b14      	ldr	r3, [pc, #80]	@ (800e840 <xPortStartScheduler+0xf0>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	4a13      	ldr	r2, [pc, #76]	@ (800e840 <xPortStartScheduler+0xf0>)
 800e7f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e7f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e7f8:	4b11      	ldr	r3, [pc, #68]	@ (800e840 <xPortStartScheduler+0xf0>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4a10      	ldr	r2, [pc, #64]	@ (800e840 <xPortStartScheduler+0xf0>)
 800e7fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e802:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e804:	f000 f8dc 	bl	800e9c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e808:	4b0e      	ldr	r3, [pc, #56]	@ (800e844 <xPortStartScheduler+0xf4>)
 800e80a:	2200      	movs	r2, #0
 800e80c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e80e:	f000 f8fb 	bl	800ea08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e812:	4b0d      	ldr	r3, [pc, #52]	@ (800e848 <xPortStartScheduler+0xf8>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	4a0c      	ldr	r2, [pc, #48]	@ (800e848 <xPortStartScheduler+0xf8>)
 800e818:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e81c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e81e:	f7ff ff83 	bl	800e728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e822:	f7ff fa65 	bl	800dcf0 <vTaskSwitchContext>
	prvTaskExitError();
 800e826:	f7ff ff37 	bl	800e698 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e82a:	2300      	movs	r3, #0
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3710      	adds	r7, #16
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	e000e400 	.word	0xe000e400
 800e838:	2000532c 	.word	0x2000532c
 800e83c:	20005330 	.word	0x20005330
 800e840:	e000ed20 	.word	0xe000ed20
 800e844:	200000ac 	.word	0x200000ac
 800e848:	e000ef34 	.word	0xe000ef34

0800e84c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e84c:	b480      	push	{r7}
 800e84e:	b083      	sub	sp, #12
 800e850:	af00      	add	r7, sp, #0
	__asm volatile
 800e852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e856:	b672      	cpsid	i
 800e858:	f383 8811 	msr	BASEPRI, r3
 800e85c:	f3bf 8f6f 	isb	sy
 800e860:	f3bf 8f4f 	dsb	sy
 800e864:	b662      	cpsie	i
 800e866:	607b      	str	r3, [r7, #4]
}
 800e868:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e86a:	4b11      	ldr	r3, [pc, #68]	@ (800e8b0 <vPortEnterCritical+0x64>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	3301      	adds	r3, #1
 800e870:	4a0f      	ldr	r2, [pc, #60]	@ (800e8b0 <vPortEnterCritical+0x64>)
 800e872:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e874:	4b0e      	ldr	r3, [pc, #56]	@ (800e8b0 <vPortEnterCritical+0x64>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	2b01      	cmp	r3, #1
 800e87a:	d112      	bne.n	800e8a2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e87c:	4b0d      	ldr	r3, [pc, #52]	@ (800e8b4 <vPortEnterCritical+0x68>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	b2db      	uxtb	r3, r3
 800e882:	2b00      	cmp	r3, #0
 800e884:	d00d      	beq.n	800e8a2 <vPortEnterCritical+0x56>
	__asm volatile
 800e886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e88a:	b672      	cpsid	i
 800e88c:	f383 8811 	msr	BASEPRI, r3
 800e890:	f3bf 8f6f 	isb	sy
 800e894:	f3bf 8f4f 	dsb	sy
 800e898:	b662      	cpsie	i
 800e89a:	603b      	str	r3, [r7, #0]
}
 800e89c:	bf00      	nop
 800e89e:	bf00      	nop
 800e8a0:	e7fd      	b.n	800e89e <vPortEnterCritical+0x52>
	}
}
 800e8a2:	bf00      	nop
 800e8a4:	370c      	adds	r7, #12
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr
 800e8ae:	bf00      	nop
 800e8b0:	200000ac 	.word	0x200000ac
 800e8b4:	e000ed04 	.word	0xe000ed04

0800e8b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e8be:	4b13      	ldr	r3, [pc, #76]	@ (800e90c <vPortExitCritical+0x54>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d10d      	bne.n	800e8e2 <vPortExitCritical+0x2a>
	__asm volatile
 800e8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ca:	b672      	cpsid	i
 800e8cc:	f383 8811 	msr	BASEPRI, r3
 800e8d0:	f3bf 8f6f 	isb	sy
 800e8d4:	f3bf 8f4f 	dsb	sy
 800e8d8:	b662      	cpsie	i
 800e8da:	607b      	str	r3, [r7, #4]
}
 800e8dc:	bf00      	nop
 800e8de:	bf00      	nop
 800e8e0:	e7fd      	b.n	800e8de <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800e8e2:	4b0a      	ldr	r3, [pc, #40]	@ (800e90c <vPortExitCritical+0x54>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	3b01      	subs	r3, #1
 800e8e8:	4a08      	ldr	r2, [pc, #32]	@ (800e90c <vPortExitCritical+0x54>)
 800e8ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e8ec:	4b07      	ldr	r3, [pc, #28]	@ (800e90c <vPortExitCritical+0x54>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d105      	bne.n	800e900 <vPortExitCritical+0x48>
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	f383 8811 	msr	BASEPRI, r3
}
 800e8fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e900:	bf00      	nop
 800e902:	370c      	adds	r7, #12
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr
 800e90c:	200000ac 	.word	0x200000ac

0800e910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e910:	f3ef 8009 	mrs	r0, PSP
 800e914:	f3bf 8f6f 	isb	sy
 800e918:	4b15      	ldr	r3, [pc, #84]	@ (800e970 <pxCurrentTCBConst>)
 800e91a:	681a      	ldr	r2, [r3, #0]
 800e91c:	f01e 0f10 	tst.w	lr, #16
 800e920:	bf08      	it	eq
 800e922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e92a:	6010      	str	r0, [r2, #0]
 800e92c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e930:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e934:	b672      	cpsid	i
 800e936:	f380 8811 	msr	BASEPRI, r0
 800e93a:	f3bf 8f4f 	dsb	sy
 800e93e:	f3bf 8f6f 	isb	sy
 800e942:	b662      	cpsie	i
 800e944:	f7ff f9d4 	bl	800dcf0 <vTaskSwitchContext>
 800e948:	f04f 0000 	mov.w	r0, #0
 800e94c:	f380 8811 	msr	BASEPRI, r0
 800e950:	bc09      	pop	{r0, r3}
 800e952:	6819      	ldr	r1, [r3, #0]
 800e954:	6808      	ldr	r0, [r1, #0]
 800e956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e95a:	f01e 0f10 	tst.w	lr, #16
 800e95e:	bf08      	it	eq
 800e960:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e964:	f380 8809 	msr	PSP, r0
 800e968:	f3bf 8f6f 	isb	sy
 800e96c:	4770      	bx	lr
 800e96e:	bf00      	nop

0800e970 <pxCurrentTCBConst>:
 800e970:	20005200 	.word	0x20005200
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e974:	bf00      	nop
 800e976:	bf00      	nop

0800e978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
	__asm volatile
 800e97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e982:	b672      	cpsid	i
 800e984:	f383 8811 	msr	BASEPRI, r3
 800e988:	f3bf 8f6f 	isb	sy
 800e98c:	f3bf 8f4f 	dsb	sy
 800e990:	b662      	cpsie	i
 800e992:	607b      	str	r3, [r7, #4]
}
 800e994:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e996:	f7ff f8ef 	bl	800db78 <xTaskIncrementTick>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d003      	beq.n	800e9a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e9a0:	4b06      	ldr	r3, [pc, #24]	@ (800e9bc <SysTick_Handler+0x44>)
 800e9a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9a6:	601a      	str	r2, [r3, #0]
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	f383 8811 	msr	BASEPRI, r3
}
 800e9b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e9b4:	bf00      	nop
 800e9b6:	3708      	adds	r7, #8
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	e000ed04 	.word	0xe000ed04

0800e9c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e9c4:	4b0b      	ldr	r3, [pc, #44]	@ (800e9f4 <vPortSetupTimerInterrupt+0x34>)
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e9ca:	4b0b      	ldr	r3, [pc, #44]	@ (800e9f8 <vPortSetupTimerInterrupt+0x38>)
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e9d0:	4b0a      	ldr	r3, [pc, #40]	@ (800e9fc <vPortSetupTimerInterrupt+0x3c>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4a0a      	ldr	r2, [pc, #40]	@ (800ea00 <vPortSetupTimerInterrupt+0x40>)
 800e9d6:	fba2 2303 	umull	r2, r3, r2, r3
 800e9da:	099b      	lsrs	r3, r3, #6
 800e9dc:	4a09      	ldr	r2, [pc, #36]	@ (800ea04 <vPortSetupTimerInterrupt+0x44>)
 800e9de:	3b01      	subs	r3, #1
 800e9e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e9e2:	4b04      	ldr	r3, [pc, #16]	@ (800e9f4 <vPortSetupTimerInterrupt+0x34>)
 800e9e4:	2207      	movs	r2, #7
 800e9e6:	601a      	str	r2, [r3, #0]
}
 800e9e8:	bf00      	nop
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f0:	4770      	bx	lr
 800e9f2:	bf00      	nop
 800e9f4:	e000e010 	.word	0xe000e010
 800e9f8:	e000e018 	.word	0xe000e018
 800e9fc:	20000000 	.word	0x20000000
 800ea00:	10624dd3 	.word	0x10624dd3
 800ea04:	e000e014 	.word	0xe000e014

0800ea08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ea08:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ea18 <vPortEnableVFP+0x10>
 800ea0c:	6801      	ldr	r1, [r0, #0]
 800ea0e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ea12:	6001      	str	r1, [r0, #0]
 800ea14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ea16:	bf00      	nop
 800ea18:	e000ed88 	.word	0xe000ed88

0800ea1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b085      	sub	sp, #20
 800ea20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ea22:	f3ef 8305 	mrs	r3, IPSR
 800ea26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2b0f      	cmp	r3, #15
 800ea2c:	d917      	bls.n	800ea5e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ea2e:	4a1a      	ldr	r2, [pc, #104]	@ (800ea98 <vPortValidateInterruptPriority+0x7c>)
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	4413      	add	r3, r2
 800ea34:	781b      	ldrb	r3, [r3, #0]
 800ea36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ea38:	4b18      	ldr	r3, [pc, #96]	@ (800ea9c <vPortValidateInterruptPriority+0x80>)
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	7afa      	ldrb	r2, [r7, #11]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d20d      	bcs.n	800ea5e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800ea42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea46:	b672      	cpsid	i
 800ea48:	f383 8811 	msr	BASEPRI, r3
 800ea4c:	f3bf 8f6f 	isb	sy
 800ea50:	f3bf 8f4f 	dsb	sy
 800ea54:	b662      	cpsie	i
 800ea56:	607b      	str	r3, [r7, #4]
}
 800ea58:	bf00      	nop
 800ea5a:	bf00      	nop
 800ea5c:	e7fd      	b.n	800ea5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ea5e:	4b10      	ldr	r3, [pc, #64]	@ (800eaa0 <vPortValidateInterruptPriority+0x84>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ea66:	4b0f      	ldr	r3, [pc, #60]	@ (800eaa4 <vPortValidateInterruptPriority+0x88>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d90d      	bls.n	800ea8a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800ea6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea72:	b672      	cpsid	i
 800ea74:	f383 8811 	msr	BASEPRI, r3
 800ea78:	f3bf 8f6f 	isb	sy
 800ea7c:	f3bf 8f4f 	dsb	sy
 800ea80:	b662      	cpsie	i
 800ea82:	603b      	str	r3, [r7, #0]
}
 800ea84:	bf00      	nop
 800ea86:	bf00      	nop
 800ea88:	e7fd      	b.n	800ea86 <vPortValidateInterruptPriority+0x6a>
	}
 800ea8a:	bf00      	nop
 800ea8c:	3714      	adds	r7, #20
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr
 800ea96:	bf00      	nop
 800ea98:	e000e3f0 	.word	0xe000e3f0
 800ea9c:	2000532c 	.word	0x2000532c
 800eaa0:	e000ed0c 	.word	0xe000ed0c
 800eaa4:	20005330 	.word	0x20005330

0800eaa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b08a      	sub	sp, #40	@ 0x28
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eab0:	2300      	movs	r3, #0
 800eab2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eab4:	f7fe ff90 	bl	800d9d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eab8:	4b5d      	ldr	r3, [pc, #372]	@ (800ec30 <pvPortMalloc+0x188>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d101      	bne.n	800eac4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eac0:	f000 f920 	bl	800ed04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eac4:	4b5b      	ldr	r3, [pc, #364]	@ (800ec34 <pvPortMalloc+0x18c>)
 800eac6:	681a      	ldr	r2, [r3, #0]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	4013      	ands	r3, r2
 800eacc:	2b00      	cmp	r3, #0
 800eace:	f040 8094 	bne.w	800ebfa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d020      	beq.n	800eb1a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800ead8:	2208      	movs	r2, #8
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	4413      	add	r3, r2
 800eade:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f003 0307 	and.w	r3, r3, #7
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d017      	beq.n	800eb1a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f023 0307 	bic.w	r3, r3, #7
 800eaf0:	3308      	adds	r3, #8
 800eaf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f003 0307 	and.w	r3, r3, #7
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d00d      	beq.n	800eb1a <pvPortMalloc+0x72>
	__asm volatile
 800eafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb02:	b672      	cpsid	i
 800eb04:	f383 8811 	msr	BASEPRI, r3
 800eb08:	f3bf 8f6f 	isb	sy
 800eb0c:	f3bf 8f4f 	dsb	sy
 800eb10:	b662      	cpsie	i
 800eb12:	617b      	str	r3, [r7, #20]
}
 800eb14:	bf00      	nop
 800eb16:	bf00      	nop
 800eb18:	e7fd      	b.n	800eb16 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d06c      	beq.n	800ebfa <pvPortMalloc+0x152>
 800eb20:	4b45      	ldr	r3, [pc, #276]	@ (800ec38 <pvPortMalloc+0x190>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	687a      	ldr	r2, [r7, #4]
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d867      	bhi.n	800ebfa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eb2a:	4b44      	ldr	r3, [pc, #272]	@ (800ec3c <pvPortMalloc+0x194>)
 800eb2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eb2e:	4b43      	ldr	r3, [pc, #268]	@ (800ec3c <pvPortMalloc+0x194>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb34:	e004      	b.n	800eb40 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800eb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eb3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb42:	685b      	ldr	r3, [r3, #4]
 800eb44:	687a      	ldr	r2, [r7, #4]
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d903      	bls.n	800eb52 <pvPortMalloc+0xaa>
 800eb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d1f1      	bne.n	800eb36 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eb52:	4b37      	ldr	r3, [pc, #220]	@ (800ec30 <pvPortMalloc+0x188>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d04e      	beq.n	800ebfa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eb5c:	6a3b      	ldr	r3, [r7, #32]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2208      	movs	r2, #8
 800eb62:	4413      	add	r3, r2
 800eb64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb68:	681a      	ldr	r2, [r3, #0]
 800eb6a:	6a3b      	ldr	r3, [r7, #32]
 800eb6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eb6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb70:	685a      	ldr	r2, [r3, #4]
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	1ad2      	subs	r2, r2, r3
 800eb76:	2308      	movs	r3, #8
 800eb78:	005b      	lsls	r3, r3, #1
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d922      	bls.n	800ebc4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eb7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	4413      	add	r3, r2
 800eb84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb86:	69bb      	ldr	r3, [r7, #24]
 800eb88:	f003 0307 	and.w	r3, r3, #7
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d00d      	beq.n	800ebac <pvPortMalloc+0x104>
	__asm volatile
 800eb90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb94:	b672      	cpsid	i
 800eb96:	f383 8811 	msr	BASEPRI, r3
 800eb9a:	f3bf 8f6f 	isb	sy
 800eb9e:	f3bf 8f4f 	dsb	sy
 800eba2:	b662      	cpsie	i
 800eba4:	613b      	str	r3, [r7, #16]
}
 800eba6:	bf00      	nop
 800eba8:	bf00      	nop
 800ebaa:	e7fd      	b.n	800eba8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ebac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebae:	685a      	ldr	r2, [r3, #4]
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	1ad2      	subs	r2, r2, r3
 800ebb4:	69bb      	ldr	r3, [r7, #24]
 800ebb6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ebb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebba:	687a      	ldr	r2, [r7, #4]
 800ebbc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ebbe:	69b8      	ldr	r0, [r7, #24]
 800ebc0:	f000 f902 	bl	800edc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ebc4:	4b1c      	ldr	r3, [pc, #112]	@ (800ec38 <pvPortMalloc+0x190>)
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	1ad3      	subs	r3, r2, r3
 800ebce:	4a1a      	ldr	r2, [pc, #104]	@ (800ec38 <pvPortMalloc+0x190>)
 800ebd0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ebd2:	4b19      	ldr	r3, [pc, #100]	@ (800ec38 <pvPortMalloc+0x190>)
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	4b1a      	ldr	r3, [pc, #104]	@ (800ec40 <pvPortMalloc+0x198>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d203      	bcs.n	800ebe6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ebde:	4b16      	ldr	r3, [pc, #88]	@ (800ec38 <pvPortMalloc+0x190>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	4a17      	ldr	r2, [pc, #92]	@ (800ec40 <pvPortMalloc+0x198>)
 800ebe4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ebe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebe8:	685a      	ldr	r2, [r3, #4]
 800ebea:	4b12      	ldr	r3, [pc, #72]	@ (800ec34 <pvPortMalloc+0x18c>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	431a      	orrs	r2, r3
 800ebf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebf2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ebf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ebfa:	f7fe fefb 	bl	800d9f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebfe:	69fb      	ldr	r3, [r7, #28]
 800ec00:	f003 0307 	and.w	r3, r3, #7
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d00d      	beq.n	800ec24 <pvPortMalloc+0x17c>
	__asm volatile
 800ec08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec0c:	b672      	cpsid	i
 800ec0e:	f383 8811 	msr	BASEPRI, r3
 800ec12:	f3bf 8f6f 	isb	sy
 800ec16:	f3bf 8f4f 	dsb	sy
 800ec1a:	b662      	cpsie	i
 800ec1c:	60fb      	str	r3, [r7, #12]
}
 800ec1e:	bf00      	nop
 800ec20:	bf00      	nop
 800ec22:	e7fd      	b.n	800ec20 <pvPortMalloc+0x178>
	return pvReturn;
 800ec24:	69fb      	ldr	r3, [r7, #28]
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3728      	adds	r7, #40	@ 0x28
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	2000b33c 	.word	0x2000b33c
 800ec34:	2000b348 	.word	0x2000b348
 800ec38:	2000b340 	.word	0x2000b340
 800ec3c:	2000b334 	.word	0x2000b334
 800ec40:	2000b344 	.word	0x2000b344

0800ec44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b086      	sub	sp, #24
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d04e      	beq.n	800ecf4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ec56:	2308      	movs	r3, #8
 800ec58:	425b      	negs	r3, r3
 800ec5a:	697a      	ldr	r2, [r7, #20]
 800ec5c:	4413      	add	r3, r2
 800ec5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	685a      	ldr	r2, [r3, #4]
 800ec68:	4b24      	ldr	r3, [pc, #144]	@ (800ecfc <vPortFree+0xb8>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4013      	ands	r3, r2
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d10d      	bne.n	800ec8e <vPortFree+0x4a>
	__asm volatile
 800ec72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec76:	b672      	cpsid	i
 800ec78:	f383 8811 	msr	BASEPRI, r3
 800ec7c:	f3bf 8f6f 	isb	sy
 800ec80:	f3bf 8f4f 	dsb	sy
 800ec84:	b662      	cpsie	i
 800ec86:	60fb      	str	r3, [r7, #12]
}
 800ec88:	bf00      	nop
 800ec8a:	bf00      	nop
 800ec8c:	e7fd      	b.n	800ec8a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d00d      	beq.n	800ecb2 <vPortFree+0x6e>
	__asm volatile
 800ec96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec9a:	b672      	cpsid	i
 800ec9c:	f383 8811 	msr	BASEPRI, r3
 800eca0:	f3bf 8f6f 	isb	sy
 800eca4:	f3bf 8f4f 	dsb	sy
 800eca8:	b662      	cpsie	i
 800ecaa:	60bb      	str	r3, [r7, #8]
}
 800ecac:	bf00      	nop
 800ecae:	bf00      	nop
 800ecb0:	e7fd      	b.n	800ecae <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	685a      	ldr	r2, [r3, #4]
 800ecb6:	4b11      	ldr	r3, [pc, #68]	@ (800ecfc <vPortFree+0xb8>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	4013      	ands	r3, r2
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d019      	beq.n	800ecf4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d115      	bne.n	800ecf4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	685a      	ldr	r2, [r3, #4]
 800eccc:	4b0b      	ldr	r3, [pc, #44]	@ (800ecfc <vPortFree+0xb8>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	43db      	mvns	r3, r3
 800ecd2:	401a      	ands	r2, r3
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ecd8:	f7fe fe7e 	bl	800d9d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	685a      	ldr	r2, [r3, #4]
 800ece0:	4b07      	ldr	r3, [pc, #28]	@ (800ed00 <vPortFree+0xbc>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	4413      	add	r3, r2
 800ece6:	4a06      	ldr	r2, [pc, #24]	@ (800ed00 <vPortFree+0xbc>)
 800ece8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ecea:	6938      	ldr	r0, [r7, #16]
 800ecec:	f000 f86c 	bl	800edc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ecf0:	f7fe fe80 	bl	800d9f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ecf4:	bf00      	nop
 800ecf6:	3718      	adds	r7, #24
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	2000b348 	.word	0x2000b348
 800ed00:	2000b340 	.word	0x2000b340

0800ed04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ed04:	b480      	push	{r7}
 800ed06:	b085      	sub	sp, #20
 800ed08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ed0a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800ed0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ed10:	4b27      	ldr	r3, [pc, #156]	@ (800edb0 <prvHeapInit+0xac>)
 800ed12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f003 0307 	and.w	r3, r3, #7
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d00c      	beq.n	800ed38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	3307      	adds	r3, #7
 800ed22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f023 0307 	bic.w	r3, r3, #7
 800ed2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ed2c:	68ba      	ldr	r2, [r7, #8]
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	1ad3      	subs	r3, r2, r3
 800ed32:	4a1f      	ldr	r2, [pc, #124]	@ (800edb0 <prvHeapInit+0xac>)
 800ed34:	4413      	add	r3, r2
 800ed36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ed3c:	4a1d      	ldr	r2, [pc, #116]	@ (800edb4 <prvHeapInit+0xb0>)
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ed42:	4b1c      	ldr	r3, [pc, #112]	@ (800edb4 <prvHeapInit+0xb0>)
 800ed44:	2200      	movs	r2, #0
 800ed46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	68ba      	ldr	r2, [r7, #8]
 800ed4c:	4413      	add	r3, r2
 800ed4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ed50:	2208      	movs	r2, #8
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	1a9b      	subs	r3, r3, r2
 800ed56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f023 0307 	bic.w	r3, r3, #7
 800ed5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	4a15      	ldr	r2, [pc, #84]	@ (800edb8 <prvHeapInit+0xb4>)
 800ed64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ed66:	4b14      	ldr	r3, [pc, #80]	@ (800edb8 <prvHeapInit+0xb4>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ed6e:	4b12      	ldr	r3, [pc, #72]	@ (800edb8 <prvHeapInit+0xb4>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	2200      	movs	r2, #0
 800ed74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	68fa      	ldr	r2, [r7, #12]
 800ed7e:	1ad2      	subs	r2, r2, r3
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ed84:	4b0c      	ldr	r3, [pc, #48]	@ (800edb8 <prvHeapInit+0xb4>)
 800ed86:	681a      	ldr	r2, [r3, #0]
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	685b      	ldr	r3, [r3, #4]
 800ed90:	4a0a      	ldr	r2, [pc, #40]	@ (800edbc <prvHeapInit+0xb8>)
 800ed92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	685b      	ldr	r3, [r3, #4]
 800ed98:	4a09      	ldr	r2, [pc, #36]	@ (800edc0 <prvHeapInit+0xbc>)
 800ed9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ed9c:	4b09      	ldr	r3, [pc, #36]	@ (800edc4 <prvHeapInit+0xc0>)
 800ed9e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800eda2:	601a      	str	r2, [r3, #0]
}
 800eda4:	bf00      	nop
 800eda6:	3714      	adds	r7, #20
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr
 800edb0:	20005334 	.word	0x20005334
 800edb4:	2000b334 	.word	0x2000b334
 800edb8:	2000b33c 	.word	0x2000b33c
 800edbc:	2000b344 	.word	0x2000b344
 800edc0:	2000b340 	.word	0x2000b340
 800edc4:	2000b348 	.word	0x2000b348

0800edc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800edc8:	b480      	push	{r7}
 800edca:	b085      	sub	sp, #20
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800edd0:	4b28      	ldr	r3, [pc, #160]	@ (800ee74 <prvInsertBlockIntoFreeList+0xac>)
 800edd2:	60fb      	str	r3, [r7, #12]
 800edd4:	e002      	b.n	800eddc <prvInsertBlockIntoFreeList+0x14>
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	60fb      	str	r3, [r7, #12]
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	687a      	ldr	r2, [r7, #4]
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d8f7      	bhi.n	800edd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	685b      	ldr	r3, [r3, #4]
 800edee:	68ba      	ldr	r2, [r7, #8]
 800edf0:	4413      	add	r3, r2
 800edf2:	687a      	ldr	r2, [r7, #4]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d108      	bne.n	800ee0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	685a      	ldr	r2, [r3, #4]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	441a      	add	r2, r3
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	68ba      	ldr	r2, [r7, #8]
 800ee14:	441a      	add	r2, r3
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d118      	bne.n	800ee50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	681a      	ldr	r2, [r3, #0]
 800ee22:	4b15      	ldr	r3, [pc, #84]	@ (800ee78 <prvInsertBlockIntoFreeList+0xb0>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d00d      	beq.n	800ee46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	685a      	ldr	r2, [r3, #4]
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	441a      	add	r2, r3
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	601a      	str	r2, [r3, #0]
 800ee44:	e008      	b.n	800ee58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ee46:	4b0c      	ldr	r3, [pc, #48]	@ (800ee78 <prvInsertBlockIntoFreeList+0xb0>)
 800ee48:	681a      	ldr	r2, [r3, #0]
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	601a      	str	r2, [r3, #0]
 800ee4e:	e003      	b.n	800ee58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681a      	ldr	r2, [r3, #0]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ee58:	68fa      	ldr	r2, [r7, #12]
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d002      	beq.n	800ee66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	687a      	ldr	r2, [r7, #4]
 800ee64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee66:	bf00      	nop
 800ee68:	3714      	adds	r7, #20
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee70:	4770      	bx	lr
 800ee72:	bf00      	nop
 800ee74:	2000b334 	.word	0x2000b334
 800ee78:	2000b33c 	.word	0x2000b33c

0800ee7c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b084      	sub	sp, #16
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
 800ee84:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	330c      	adds	r3, #12
 800ee8c:	461a      	mov	r2, r3
 800ee8e:	6839      	ldr	r1, [r7, #0]
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f002 fa73 	bl	801137c <tcpip_send_msg_wait_sem>
 800ee96:	4603      	mov	r3, r0
 800ee98:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ee9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d103      	bne.n	800eeaa <netconn_apimsg+0x2e>
    return apimsg->err;
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800eea8:	e001      	b.n	800eeae <netconn_apimsg+0x32>
  }
  return err;
 800eeaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3710      	adds	r7, #16
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}
	...

0800eeb8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b08c      	sub	sp, #48	@ 0x30
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	4603      	mov	r3, r0
 800eec0:	603a      	str	r2, [r7, #0]
 800eec2:	71fb      	strb	r3, [r7, #7]
 800eec4:	460b      	mov	r3, r1
 800eec6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800eec8:	79fb      	ldrb	r3, [r7, #7]
 800eeca:	6839      	ldr	r1, [r7, #0]
 800eecc:	4618      	mov	r0, r3
 800eece:	f001 f923 	bl	8010118 <netconn_alloc>
 800eed2:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800eed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d054      	beq.n	800ef84 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800eeda:	79bb      	ldrb	r3, [r7, #6]
 800eedc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800eede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eee0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800eee2:	f107 0308 	add.w	r3, r7, #8
 800eee6:	4619      	mov	r1, r3
 800eee8:	4829      	ldr	r0, [pc, #164]	@ (800ef90 <netconn_new_with_proto_and_callback+0xd8>)
 800eeea:	f7ff ffc7 	bl	800ee7c <netconn_apimsg>
 800eeee:	4603      	mov	r3, r0
 800eef0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800eef4:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d043      	beq.n	800ef84 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800eefc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d005      	beq.n	800ef10 <netconn_new_with_proto_and_callback+0x58>
 800ef04:	4b23      	ldr	r3, [pc, #140]	@ (800ef94 <netconn_new_with_proto_and_callback+0xdc>)
 800ef06:	22a3      	movs	r2, #163	@ 0xa3
 800ef08:	4923      	ldr	r1, [pc, #140]	@ (800ef98 <netconn_new_with_proto_and_callback+0xe0>)
 800ef0a:	4824      	ldr	r0, [pc, #144]	@ (800ef9c <netconn_new_with_proto_and_callback+0xe4>)
 800ef0c:	f00e fa5e 	bl	801d3cc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800ef10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef12:	3310      	adds	r3, #16
 800ef14:	4618      	mov	r0, r3
 800ef16:	f00d f9cc 	bl	801c2b2 <sys_mbox_valid>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d105      	bne.n	800ef2c <netconn_new_with_proto_and_callback+0x74>
 800ef20:	4b1c      	ldr	r3, [pc, #112]	@ (800ef94 <netconn_new_with_proto_and_callback+0xdc>)
 800ef22:	22a4      	movs	r2, #164	@ 0xa4
 800ef24:	491e      	ldr	r1, [pc, #120]	@ (800efa0 <netconn_new_with_proto_and_callback+0xe8>)
 800ef26:	481d      	ldr	r0, [pc, #116]	@ (800ef9c <netconn_new_with_proto_and_callback+0xe4>)
 800ef28:	f00e fa50 	bl	801d3cc <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800ef2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef2e:	3314      	adds	r3, #20
 800ef30:	4618      	mov	r0, r3
 800ef32:	f00d f9be 	bl	801c2b2 <sys_mbox_valid>
 800ef36:	4603      	mov	r3, r0
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d005      	beq.n	800ef48 <netconn_new_with_proto_and_callback+0x90>
 800ef3c:	4b15      	ldr	r3, [pc, #84]	@ (800ef94 <netconn_new_with_proto_and_callback+0xdc>)
 800ef3e:	22a6      	movs	r2, #166	@ 0xa6
 800ef40:	4918      	ldr	r1, [pc, #96]	@ (800efa4 <netconn_new_with_proto_and_callback+0xec>)
 800ef42:	4816      	ldr	r0, [pc, #88]	@ (800ef9c <netconn_new_with_proto_and_callback+0xe4>)
 800ef44:	f00e fa42 	bl	801d3cc <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800ef48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef4a:	330c      	adds	r3, #12
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f00d fa41 	bl	801c3d4 <sys_sem_valid>
 800ef52:	4603      	mov	r3, r0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d105      	bne.n	800ef64 <netconn_new_with_proto_and_callback+0xac>
 800ef58:	4b0e      	ldr	r3, [pc, #56]	@ (800ef94 <netconn_new_with_proto_and_callback+0xdc>)
 800ef5a:	22a9      	movs	r2, #169	@ 0xa9
 800ef5c:	4912      	ldr	r1, [pc, #72]	@ (800efa8 <netconn_new_with_proto_and_callback+0xf0>)
 800ef5e:	480f      	ldr	r0, [pc, #60]	@ (800ef9c <netconn_new_with_proto_and_callback+0xe4>)
 800ef60:	f00e fa34 	bl	801d3cc <iprintf>
      sys_sem_free(&conn->op_completed);
 800ef64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef66:	330c      	adds	r3, #12
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f00d fa26 	bl	801c3ba <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800ef6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef70:	3310      	adds	r3, #16
 800ef72:	4618      	mov	r0, r3
 800ef74:	f00d f916 	bl	801c1a4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800ef78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ef7a:	2007      	movs	r0, #7
 800ef7c:	f002 fff0 	bl	8011f60 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800ef80:	2300      	movs	r3, #0
 800ef82:	e000      	b.n	800ef86 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800ef84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3730      	adds	r7, #48	@ 0x30
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	080100ed 	.word	0x080100ed
 800ef94:	0801e760 	.word	0x0801e760
 800ef98:	0801e794 	.word	0x0801e794
 800ef9c:	0801e7b8 	.word	0x0801e7b8
 800efa0:	0801e7e0 	.word	0x0801e7e0
 800efa4:	0801e7f8 	.word	0x0801e7f8
 800efa8:	0801e81c 	.word	0x0801e81c

0800efac <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b08c      	sub	sp, #48	@ 0x30
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d101      	bne.n	800efbe <netconn_prepare_delete+0x12>
    return ERR_OK;
 800efba:	2300      	movs	r3, #0
 800efbc:	e014      	b.n	800efe8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800efc2:	2329      	movs	r3, #41	@ 0x29
 800efc4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800efc6:	f107 030c 	add.w	r3, r7, #12
 800efca:	4619      	mov	r1, r3
 800efcc:	4808      	ldr	r0, [pc, #32]	@ (800eff0 <netconn_prepare_delete+0x44>)
 800efce:	f7ff ff55 	bl	800ee7c <netconn_apimsg>
 800efd2:	4603      	mov	r3, r0
 800efd4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800efd8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d002      	beq.n	800efe6 <netconn_prepare_delete+0x3a>
    return err;
 800efe0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800efe4:	e000      	b.n	800efe8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800efe6:	2300      	movs	r3, #0
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3730      	adds	r7, #48	@ 0x30
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}
 800eff0:	08010659 	.word	0x08010659

0800eff4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b084      	sub	sp, #16
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d101      	bne.n	800f006 <netconn_delete+0x12>
    return ERR_OK;
 800f002:	2300      	movs	r3, #0
 800f004:	e00d      	b.n	800f022 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f7ff ffd0 	bl	800efac <netconn_prepare_delete>
 800f00c:	4603      	mov	r3, r0
 800f00e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800f010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d102      	bne.n	800f01e <netconn_delete+0x2a>
    netconn_free(conn);
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f001 f8eb 	bl	80101f4 <netconn_free>
  }
  return err;
 800f01e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f022:	4618      	mov	r0, r3
 800f024:	3710      	adds	r7, #16
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
	...

0800f02c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b08e      	sub	sp, #56	@ 0x38
 800f030:	af00      	add	r7, sp, #0
 800f032:	60f8      	str	r0, [r7, #12]
 800f034:	60b9      	str	r1, [r7, #8]
 800f036:	4613      	mov	r3, r2
 800f038:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d109      	bne.n	800f054 <netconn_bind+0x28>
 800f040:	4b11      	ldr	r3, [pc, #68]	@ (800f088 <netconn_bind+0x5c>)
 800f042:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800f046:	4911      	ldr	r1, [pc, #68]	@ (800f08c <netconn_bind+0x60>)
 800f048:	4811      	ldr	r0, [pc, #68]	@ (800f090 <netconn_bind+0x64>)
 800f04a:	f00e f9bf 	bl	801d3cc <iprintf>
 800f04e:	f06f 030f 	mvn.w	r3, #15
 800f052:	e015      	b.n	800f080 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d101      	bne.n	800f05e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800f05a:	4b0e      	ldr	r3, [pc, #56]	@ (800f094 <netconn_bind+0x68>)
 800f05c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800f066:	88fb      	ldrh	r3, [r7, #6]
 800f068:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800f06a:	f107 0314 	add.w	r3, r7, #20
 800f06e:	4619      	mov	r1, r3
 800f070:	4809      	ldr	r0, [pc, #36]	@ (800f098 <netconn_bind+0x6c>)
 800f072:	f7ff ff03 	bl	800ee7c <netconn_apimsg>
 800f076:	4603      	mov	r3, r0
 800f078:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800f07c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800f080:	4618      	mov	r0, r3
 800f082:	3738      	adds	r7, #56	@ 0x38
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	0801e760 	.word	0x0801e760
 800f08c:	0801e898 	.word	0x0801e898
 800f090:	0801e7b8 	.word	0x0801e7b8
 800f094:	080334d4 	.word	0x080334d4
 800f098:	08010821 	.word	0x08010821

0800f09c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b08c      	sub	sp, #48	@ 0x30
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	460b      	mov	r3, r1
 800f0a6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d109      	bne.n	800f0c2 <netconn_listen_with_backlog+0x26>
 800f0ae:	4b0d      	ldr	r3, [pc, #52]	@ (800f0e4 <netconn_listen_with_backlog+0x48>)
 800f0b0:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800f0b4:	490c      	ldr	r1, [pc, #48]	@ (800f0e8 <netconn_listen_with_backlog+0x4c>)
 800f0b6:	480d      	ldr	r0, [pc, #52]	@ (800f0ec <netconn_listen_with_backlog+0x50>)
 800f0b8:	f00e f988 	bl	801d3cc <iprintf>
 800f0bc:	f06f 030f 	mvn.w	r3, #15
 800f0c0:	e00c      	b.n	800f0dc <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800f0c6:	f107 030c 	add.w	r3, r7, #12
 800f0ca:	4619      	mov	r1, r3
 800f0cc:	4808      	ldr	r0, [pc, #32]	@ (800f0f0 <netconn_listen_with_backlog+0x54>)
 800f0ce:	f7ff fed5 	bl	800ee7c <netconn_apimsg>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800f0d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3730      	adds	r7, #48	@ 0x30
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}
 800f0e4:	0801e760 	.word	0x0801e760
 800f0e8:	0801e918 	.word	0x0801e918
 800f0ec:	0801e7b8 	.word	0x0801e7b8
 800f0f0:	08010895 	.word	0x08010895

0800f0f4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b086      	sub	sp, #24
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d109      	bne.n	800f118 <netconn_accept+0x24>
 800f104:	4b3d      	ldr	r3, [pc, #244]	@ (800f1fc <netconn_accept+0x108>)
 800f106:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800f10a:	493d      	ldr	r1, [pc, #244]	@ (800f200 <netconn_accept+0x10c>)
 800f10c:	483d      	ldr	r0, [pc, #244]	@ (800f204 <netconn_accept+0x110>)
 800f10e:	f00e f95d 	bl	801d3cc <iprintf>
 800f112:	f06f 030f 	mvn.w	r3, #15
 800f116:	e06c      	b.n	800f1f2 <netconn_accept+0xfe>
  *new_conn = NULL;
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	2200      	movs	r2, #0
 800f11c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d109      	bne.n	800f138 <netconn_accept+0x44>
 800f124:	4b35      	ldr	r3, [pc, #212]	@ (800f1fc <netconn_accept+0x108>)
 800f126:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800f12a:	4937      	ldr	r1, [pc, #220]	@ (800f208 <netconn_accept+0x114>)
 800f12c:	4835      	ldr	r0, [pc, #212]	@ (800f204 <netconn_accept+0x110>)
 800f12e:	f00e f94d 	bl	801d3cc <iprintf>
 800f132:	f06f 030f 	mvn.w	r3, #15
 800f136:	e05c      	b.n	800f1f2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f000 fb6c 	bl	800f816 <netconn_err>
 800f13e:	4603      	mov	r3, r0
 800f140:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800f142:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d002      	beq.n	800f150 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800f14a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f14e:	e050      	b.n	800f1f2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	3314      	adds	r3, #20
 800f154:	4618      	mov	r0, r3
 800f156:	f00d f8ac 	bl	801c2b2 <sys_mbox_valid>
 800f15a:	4603      	mov	r3, r0
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d005      	beq.n	800f16c <netconn_accept+0x78>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	7f1b      	ldrb	r3, [r3, #28]
 800f164:	f003 0301 	and.w	r3, r3, #1
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d002      	beq.n	800f172 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800f16c:	f06f 030e 	mvn.w	r3, #14
 800f170:	e03f      	b.n	800f1f2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	7f1b      	ldrb	r3, [r3, #28]
 800f176:	f003 0302 	and.w	r3, r3, #2
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d00e      	beq.n	800f19c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	3314      	adds	r3, #20
 800f182:	f107 020c 	add.w	r2, r7, #12
 800f186:	4611      	mov	r1, r2
 800f188:	4618      	mov	r0, r3
 800f18a:	f00d f876 	bl	801c27a <sys_arch_mbox_tryfetch>
 800f18e:	4603      	mov	r3, r0
 800f190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f194:	d10a      	bne.n	800f1ac <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800f196:	f06f 0306 	mvn.w	r3, #6
 800f19a:	e02a      	b.n	800f1f2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	3314      	adds	r3, #20
 800f1a0:	f107 010c 	add.w	r1, r7, #12
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f00d f828 	bl	801c1fc <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d005      	beq.n	800f1c0 <netconn_accept+0xcc>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	2101      	movs	r1, #1
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f107 0213 	add.w	r2, r7, #19
 800f1c6:	4611      	mov	r1, r2
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f000 fb75 	bl	800f8b8 <lwip_netconn_is_err_msg>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d002      	beq.n	800f1da <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800f1d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f1d8:	e00b      	b.n	800f1f2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d102      	bne.n	800f1e6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800f1e0:	f06f 030e 	mvn.w	r3, #14
 800f1e4:	e005      	b.n	800f1f2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	697a      	ldr	r2, [r7, #20]
 800f1ee:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800f1f0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3718      	adds	r7, #24
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	0801e760 	.word	0x0801e760
 800f200:	0801e938 	.word	0x0801e938
 800f204:	0801e7b8 	.word	0x0801e7b8
 800f208:	0801e958 	.word	0x0801e958

0800f20c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b088      	sub	sp, #32
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	4613      	mov	r3, r2
 800f218:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800f21a:	2300      	movs	r3, #0
 800f21c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d109      	bne.n	800f238 <netconn_recv_data+0x2c>
 800f224:	4b58      	ldr	r3, [pc, #352]	@ (800f388 <netconn_recv_data+0x17c>)
 800f226:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800f22a:	4958      	ldr	r1, [pc, #352]	@ (800f38c <netconn_recv_data+0x180>)
 800f22c:	4858      	ldr	r0, [pc, #352]	@ (800f390 <netconn_recv_data+0x184>)
 800f22e:	f00e f8cd 	bl	801d3cc <iprintf>
 800f232:	f06f 030f 	mvn.w	r3, #15
 800f236:	e0a2      	b.n	800f37e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	2200      	movs	r2, #0
 800f23c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d109      	bne.n	800f258 <netconn_recv_data+0x4c>
 800f244:	4b50      	ldr	r3, [pc, #320]	@ (800f388 <netconn_recv_data+0x17c>)
 800f246:	f240 224a 	movw	r2, #586	@ 0x24a
 800f24a:	4952      	ldr	r1, [pc, #328]	@ (800f394 <netconn_recv_data+0x188>)
 800f24c:	4850      	ldr	r0, [pc, #320]	@ (800f390 <netconn_recv_data+0x184>)
 800f24e:	f00e f8bd 	bl	801d3cc <iprintf>
 800f252:	f06f 030f 	mvn.w	r3, #15
 800f256:	e092      	b.n	800f37e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	3310      	adds	r3, #16
 800f25c:	4618      	mov	r0, r3
 800f25e:	f00d f828 	bl	801c2b2 <sys_mbox_valid>
 800f262:	4603      	mov	r3, r0
 800f264:	2b00      	cmp	r3, #0
 800f266:	d10e      	bne.n	800f286 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	f000 fad4 	bl	800f816 <netconn_err>
 800f26e:	4603      	mov	r3, r0
 800f270:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800f272:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d002      	beq.n	800f280 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800f27a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800f27e:	e07e      	b.n	800f37e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800f280:	f06f 030a 	mvn.w	r3, #10
 800f284:	e07b      	b.n	800f37e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	7f1b      	ldrb	r3, [r3, #28]
 800f28a:	f003 0302 	and.w	r3, r3, #2
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d10f      	bne.n	800f2b2 <netconn_recv_data+0xa6>
 800f292:	79fb      	ldrb	r3, [r7, #7]
 800f294:	f003 0304 	and.w	r3, r3, #4
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d10a      	bne.n	800f2b2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	7f1b      	ldrb	r3, [r3, #28]
 800f2a0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d104      	bne.n	800f2b2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d023      	beq.n	800f2fa <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	3310      	adds	r3, #16
 800f2b6:	f107 0218 	add.w	r2, r7, #24
 800f2ba:	4611      	mov	r1, r2
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f00c ffdc 	bl	801c27a <sys_arch_mbox_tryfetch>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2c8:	d11f      	bne.n	800f30a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800f2ca:	68f8      	ldr	r0, [r7, #12]
 800f2cc:	f000 faa3 	bl	800f816 <netconn_err>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800f2d4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d002      	beq.n	800f2e2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800f2dc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f2e0:	e04d      	b.n	800f37e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	7f1b      	ldrb	r3, [r3, #28]
 800f2e6:	f003 0301 	and.w	r3, r3, #1
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d002      	beq.n	800f2f4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800f2ee:	f06f 030a 	mvn.w	r3, #10
 800f2f2:	e044      	b.n	800f37e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800f2f4:	f06f 0306 	mvn.w	r3, #6
 800f2f8:	e041      	b.n	800f37e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	3310      	adds	r3, #16
 800f2fe:	f107 0118 	add.w	r1, r7, #24
 800f302:	2200      	movs	r2, #0
 800f304:	4618      	mov	r0, r3
 800f306:	f00c ff79 	bl	801c1fc <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f312:	2b10      	cmp	r3, #16
 800f314:	d117      	bne.n	800f346 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800f316:	69bb      	ldr	r3, [r7, #24]
 800f318:	f107 0217 	add.w	r2, r7, #23
 800f31c:	4611      	mov	r1, r2
 800f31e:	4618      	mov	r0, r3
 800f320:	f000 faca 	bl	800f8b8 <lwip_netconn_is_err_msg>
 800f324:	4603      	mov	r3, r0
 800f326:	2b00      	cmp	r3, #0
 800f328:	d009      	beq.n	800f33e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800f32a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f32e:	f113 0f0f 	cmn.w	r3, #15
 800f332:	d101      	bne.n	800f338 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800f334:	2300      	movs	r3, #0
 800f336:	e022      	b.n	800f37e <netconn_recv_data+0x172>
      }
      return err;
 800f338:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f33c:	e01f      	b.n	800f37e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800f33e:	69bb      	ldr	r3, [r7, #24]
 800f340:	891b      	ldrh	r3, [r3, #8]
 800f342:	83fb      	strh	r3, [r7, #30]
 800f344:	e00d      	b.n	800f362 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800f346:	69bb      	ldr	r3, [r7, #24]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d106      	bne.n	800f35a <netconn_recv_data+0x14e>
 800f34c:	4b0e      	ldr	r3, [pc, #56]	@ (800f388 <netconn_recv_data+0x17c>)
 800f34e:	f240 2291 	movw	r2, #657	@ 0x291
 800f352:	4911      	ldr	r1, [pc, #68]	@ (800f398 <netconn_recv_data+0x18c>)
 800f354:	480e      	ldr	r0, [pc, #56]	@ (800f390 <netconn_recv_data+0x184>)
 800f356:	f00e f839 	bl	801d3cc <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800f35a:	69bb      	ldr	r3, [r7, #24]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	891b      	ldrh	r3, [r3, #8]
 800f360:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f366:	2b00      	cmp	r3, #0
 800f368:	d005      	beq.n	800f376 <netconn_recv_data+0x16a>
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f36e:	8bfa      	ldrh	r2, [r7, #30]
 800f370:	2101      	movs	r1, #1
 800f372:	68f8      	ldr	r0, [r7, #12]
 800f374:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800f376:	69ba      	ldr	r2, [r7, #24]
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800f37c:	2300      	movs	r3, #0
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3720      	adds	r7, #32
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
 800f386:	bf00      	nop
 800f388:	0801e760 	.word	0x0801e760
 800f38c:	0801e978 	.word	0x0801e978
 800f390:	0801e7b8 	.word	0x0801e7b8
 800f394:	0801e998 	.word	0x0801e998
 800f398:	0801e9b4 	.word	0x0801e9b4

0800f39c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	60f8      	str	r0, [r7, #12]
 800f3a4:	60b9      	str	r1, [r7, #8]
 800f3a6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d005      	beq.n	800f3ba <netconn_tcp_recvd_msg+0x1e>
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f3b6:	2b10      	cmp	r3, #16
 800f3b8:	d009      	beq.n	800f3ce <netconn_tcp_recvd_msg+0x32>
 800f3ba:	4b0c      	ldr	r3, [pc, #48]	@ (800f3ec <netconn_tcp_recvd_msg+0x50>)
 800f3bc:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800f3c0:	490b      	ldr	r1, [pc, #44]	@ (800f3f0 <netconn_tcp_recvd_msg+0x54>)
 800f3c2:	480c      	ldr	r0, [pc, #48]	@ (800f3f4 <netconn_tcp_recvd_msg+0x58>)
 800f3c4:	f00e f802 	bl	801d3cc <iprintf>
 800f3c8:	f06f 030f 	mvn.w	r3, #15
 800f3cc:	e00a      	b.n	800f3e4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	68fa      	ldr	r2, [r7, #12]
 800f3d2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	68ba      	ldr	r2, [r7, #8]
 800f3d8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800f3da:	6879      	ldr	r1, [r7, #4]
 800f3dc:	4806      	ldr	r0, [pc, #24]	@ (800f3f8 <netconn_tcp_recvd_msg+0x5c>)
 800f3de:	f7ff fd4d 	bl	800ee7c <netconn_apimsg>
 800f3e2:	4603      	mov	r3, r0
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3710      	adds	r7, #16
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}
 800f3ec:	0801e760 	.word	0x0801e760
 800f3f0:	0801e9c0 	.word	0x0801e9c0
 800f3f4:	0801e7b8 	.word	0x0801e7b8
 800f3f8:	080109c5 	.word	0x080109c5

0800f3fc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b090      	sub	sp, #64	@ 0x40
 800f400:	af00      	add	r7, sp, #0
 800f402:	60f8      	str	r0, [r7, #12]
 800f404:	60b9      	str	r1, [r7, #8]
 800f406:	4613      	mov	r3, r2
 800f408:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	3310      	adds	r3, #16
 800f40e:	4618      	mov	r0, r3
 800f410:	f00c ff4f 	bl	801c2b2 <sys_mbox_valid>
 800f414:	4603      	mov	r3, r0
 800f416:	2b00      	cmp	r3, #0
 800f418:	d102      	bne.n	800f420 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800f41a:	f06f 030a 	mvn.w	r3, #10
 800f41e:	e06d      	b.n	800f4fc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	7f1b      	ldrb	r3, [r3, #28]
 800f424:	b25b      	sxtb	r3, r3
 800f426:	2b00      	cmp	r3, #0
 800f428:	da07      	bge.n	800f43a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	7f1b      	ldrb	r3, [r3, #28]
 800f42e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f432:	b2da      	uxtb	r2, r3
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800f438:	e039      	b.n	800f4ae <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800f43a:	79fb      	ldrb	r3, [r7, #7]
 800f43c:	461a      	mov	r2, r3
 800f43e:	68b9      	ldr	r1, [r7, #8]
 800f440:	68f8      	ldr	r0, [r7, #12]
 800f442:	f7ff fee3 	bl	800f20c <netconn_recv_data>
 800f446:	4603      	mov	r3, r0
 800f448:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800f44c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f450:	2b00      	cmp	r3, #0
 800f452:	d002      	beq.n	800f45a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800f454:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f458:	e050      	b.n	800f4fc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800f460:	79fb      	ldrb	r3, [r7, #7]
 800f462:	f003 0308 	and.w	r3, r3, #8
 800f466:	2b00      	cmp	r3, #0
 800f468:	d10e      	bne.n	800f488 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800f46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d002      	beq.n	800f476 <netconn_recv_data_tcp+0x7a>
 800f470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f472:	891b      	ldrh	r3, [r3, #8]
 800f474:	e000      	b.n	800f478 <netconn_recv_data_tcp+0x7c>
 800f476:	2301      	movs	r3, #1
 800f478:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800f47a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f47c:	f107 0214 	add.w	r2, r7, #20
 800f480:	4619      	mov	r1, r3
 800f482:	68f8      	ldr	r0, [r7, #12]
 800f484:	f7ff ff8a 	bl	800f39c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800f488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d134      	bne.n	800f4f8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800f48e:	79fb      	ldrb	r3, [r7, #7]
 800f490:	f003 0310 	and.w	r3, r3, #16
 800f494:	2b00      	cmp	r3, #0
 800f496:	d009      	beq.n	800f4ac <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	7f1b      	ldrb	r3, [r3, #28]
 800f49c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f4a0:	b2da      	uxtb	r2, r3
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800f4a6:	f06f 0306 	mvn.w	r3, #6
 800f4aa:	e027      	b.n	800f4fc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800f4ac:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d005      	beq.n	800f4c2 <netconn_recv_data_tcp+0xc6>
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	2101      	movs	r1, #1
 800f4be:	68f8      	ldr	r0, [r7, #12]
 800f4c0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	685b      	ldr	r3, [r3, #4]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d10f      	bne.n	800f4ea <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800f4ca:	68f8      	ldr	r0, [r7, #12]
 800f4cc:	f000 f9a3 	bl	800f816 <netconn_err>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800f4d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d002      	beq.n	800f4e4 <netconn_recv_data_tcp+0xe8>
          return err;
 800f4de:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f4e2:	e00b      	b.n	800f4fc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800f4e4:	f06f 030d 	mvn.w	r3, #13
 800f4e8:	e008      	b.n	800f4fc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800f4ea:	2101      	movs	r1, #1
 800f4ec:	68f8      	ldr	r0, [r7, #12]
 800f4ee:	f000 f955 	bl	800f79c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800f4f2:	f06f 030e 	mvn.w	r3, #14
 800f4f6:	e001      	b.n	800f4fc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800f4f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3740      	adds	r7, #64	@ 0x40
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}

0800f504 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b086      	sub	sp, #24
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800f50e:	2300      	movs	r3, #0
 800f510:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d109      	bne.n	800f52c <netconn_recv+0x28>
 800f518:	4b32      	ldr	r3, [pc, #200]	@ (800f5e4 <netconn_recv+0xe0>)
 800f51a:	f240 3263 	movw	r2, #867	@ 0x363
 800f51e:	4932      	ldr	r1, [pc, #200]	@ (800f5e8 <netconn_recv+0xe4>)
 800f520:	4832      	ldr	r0, [pc, #200]	@ (800f5ec <netconn_recv+0xe8>)
 800f522:	f00d ff53 	bl	801d3cc <iprintf>
 800f526:	f06f 030f 	mvn.w	r3, #15
 800f52a:	e056      	b.n	800f5da <netconn_recv+0xd6>
  *new_buf = NULL;
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	2200      	movs	r2, #0
 800f530:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d109      	bne.n	800f54c <netconn_recv+0x48>
 800f538:	4b2a      	ldr	r3, [pc, #168]	@ (800f5e4 <netconn_recv+0xe0>)
 800f53a:	f240 3265 	movw	r2, #869	@ 0x365
 800f53e:	492c      	ldr	r1, [pc, #176]	@ (800f5f0 <netconn_recv+0xec>)
 800f540:	482a      	ldr	r0, [pc, #168]	@ (800f5ec <netconn_recv+0xe8>)
 800f542:	f00d ff43 	bl	801d3cc <iprintf>
 800f546:	f06f 030f 	mvn.w	r3, #15
 800f54a:	e046      	b.n	800f5da <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f554:	2b10      	cmp	r3, #16
 800f556:	d13a      	bne.n	800f5ce <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800f558:	2300      	movs	r3, #0
 800f55a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800f55c:	2006      	movs	r0, #6
 800f55e:	f002 fc89 	bl	8011e74 <memp_malloc>
 800f562:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d102      	bne.n	800f570 <netconn_recv+0x6c>
      return ERR_MEM;
 800f56a:	f04f 33ff 	mov.w	r3, #4294967295
 800f56e:	e034      	b.n	800f5da <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800f570:	f107 030c 	add.w	r3, r7, #12
 800f574:	2200      	movs	r2, #0
 800f576:	4619      	mov	r1, r3
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f7ff ff3f 	bl	800f3fc <netconn_recv_data_tcp>
 800f57e:	4603      	mov	r3, r0
 800f580:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f582:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d006      	beq.n	800f598 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800f58a:	6979      	ldr	r1, [r7, #20]
 800f58c:	2006      	movs	r0, #6
 800f58e:	f002 fce7 	bl	8011f60 <memp_free>
      return err;
 800f592:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f596:	e020      	b.n	800f5da <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d106      	bne.n	800f5ac <netconn_recv+0xa8>
 800f59e:	4b11      	ldr	r3, [pc, #68]	@ (800f5e4 <netconn_recv+0xe0>)
 800f5a0:	f240 3279 	movw	r2, #889	@ 0x379
 800f5a4:	4913      	ldr	r1, [pc, #76]	@ (800f5f4 <netconn_recv+0xf0>)
 800f5a6:	4811      	ldr	r0, [pc, #68]	@ (800f5ec <netconn_recv+0xe8>)
 800f5a8:	f00d ff10 	bl	801d3cc <iprintf>

    buf->p = p;
 800f5ac:	68fa      	ldr	r2, [r7, #12]
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800f5b2:	68fa      	ldr	r2, [r7, #12]
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	697a      	ldr	r2, [r7, #20]
 800f5c8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	e005      	b.n	800f5da <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	6839      	ldr	r1, [r7, #0]
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f7ff fe1a 	bl	800f20c <netconn_recv_data>
 800f5d8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3718      	adds	r7, #24
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}
 800f5e2:	bf00      	nop
 800f5e4:	0801e760 	.word	0x0801e760
 800f5e8:	0801e978 	.word	0x0801e978
 800f5ec:	0801e7b8 	.word	0x0801e7b8
 800f5f0:	0801e998 	.word	0x0801e998
 800f5f4:	0801ea10 	.word	0x0801ea10

0800f5f8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b088      	sub	sp, #32
 800f5fc:	af02      	add	r7, sp, #8
 800f5fe:	60f8      	str	r0, [r7, #12]
 800f600:	60b9      	str	r1, [r7, #8]
 800f602:	607a      	str	r2, [r7, #4]
 800f604:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800f60e:	78fa      	ldrb	r2, [r7, #3]
 800f610:	f107 0110 	add.w	r1, r7, #16
 800f614:	6a3b      	ldr	r3, [r7, #32]
 800f616:	9300      	str	r3, [sp, #0]
 800f618:	4613      	mov	r3, r2
 800f61a:	2201      	movs	r2, #1
 800f61c:	68f8      	ldr	r0, [r7, #12]
 800f61e:	f000 f805 	bl	800f62c <netconn_write_vectors_partly>
 800f622:	4603      	mov	r3, r0
}
 800f624:	4618      	mov	r0, r3
 800f626:	3718      	adds	r7, #24
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b092      	sub	sp, #72	@ 0x48
 800f630:	af00      	add	r7, sp, #0
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	60b9      	str	r1, [r7, #8]
 800f636:	4611      	mov	r1, r2
 800f638:	461a      	mov	r2, r3
 800f63a:	460b      	mov	r3, r1
 800f63c:	80fb      	strh	r3, [r7, #6]
 800f63e:	4613      	mov	r3, r2
 800f640:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d109      	bne.n	800f65c <netconn_write_vectors_partly+0x30>
 800f648:	4b4e      	ldr	r3, [pc, #312]	@ (800f784 <netconn_write_vectors_partly+0x158>)
 800f64a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800f64e:	494e      	ldr	r1, [pc, #312]	@ (800f788 <netconn_write_vectors_partly+0x15c>)
 800f650:	484e      	ldr	r0, [pc, #312]	@ (800f78c <netconn_write_vectors_partly+0x160>)
 800f652:	f00d febb 	bl	801d3cc <iprintf>
 800f656:	f06f 030f 	mvn.w	r3, #15
 800f65a:	e08e      	b.n	800f77a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	781b      	ldrb	r3, [r3, #0]
 800f660:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f664:	2b10      	cmp	r3, #16
 800f666:	d009      	beq.n	800f67c <netconn_write_vectors_partly+0x50>
 800f668:	4b46      	ldr	r3, [pc, #280]	@ (800f784 <netconn_write_vectors_partly+0x158>)
 800f66a:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800f66e:	4948      	ldr	r1, [pc, #288]	@ (800f790 <netconn_write_vectors_partly+0x164>)
 800f670:	4846      	ldr	r0, [pc, #280]	@ (800f78c <netconn_write_vectors_partly+0x160>)
 800f672:	f00d feab 	bl	801d3cc <iprintf>
 800f676:	f06f 0305 	mvn.w	r3, #5
 800f67a:	e07e      	b.n	800f77a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	7f1b      	ldrb	r3, [r3, #28]
 800f680:	f003 0302 	and.w	r3, r3, #2
 800f684:	2b00      	cmp	r3, #0
 800f686:	d104      	bne.n	800f692 <netconn_write_vectors_partly+0x66>
 800f688:	797b      	ldrb	r3, [r7, #5]
 800f68a:	f003 0304 	and.w	r3, r3, #4
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d001      	beq.n	800f696 <netconn_write_vectors_partly+0x6a>
 800f692:	2301      	movs	r3, #1
 800f694:	e000      	b.n	800f698 <netconn_write_vectors_partly+0x6c>
 800f696:	2300      	movs	r3, #0
 800f698:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800f69c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d005      	beq.n	800f6b0 <netconn_write_vectors_partly+0x84>
 800f6a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d102      	bne.n	800f6b0 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800f6aa:	f06f 0305 	mvn.w	r3, #5
 800f6ae:	e064      	b.n	800f77a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	643b      	str	r3, [r7, #64]	@ 0x40
 800f6b8:	e015      	b.n	800f6e6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800f6ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6bc:	00db      	lsls	r3, r3, #3
 800f6be:	68ba      	ldr	r2, [r7, #8]
 800f6c0:	4413      	add	r3, r2
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f6c6:	4413      	add	r3, r2
 800f6c8:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800f6ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6cc:	00db      	lsls	r3, r3, #3
 800f6ce:	68ba      	ldr	r2, [r7, #8]
 800f6d0:	4413      	add	r3, r2
 800f6d2:	685b      	ldr	r3, [r3, #4]
 800f6d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d202      	bcs.n	800f6e0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800f6da:	f06f 0305 	mvn.w	r3, #5
 800f6de:	e04c      	b.n	800f77a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800f6e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800f6e6:	88fb      	ldrh	r3, [r7, #6]
 800f6e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	dbe5      	blt.n	800f6ba <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800f6ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d101      	bne.n	800f6f8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	e040      	b.n	800f77a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800f6f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	da0a      	bge.n	800f714 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800f6fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f700:	2b00      	cmp	r3, #0
 800f702:	d102      	bne.n	800f70a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800f704:	f06f 0305 	mvn.w	r3, #5
 800f708:	e037      	b.n	800f77a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800f70a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f70e:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800f710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f712:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800f71c:	88fb      	ldrh	r3, [r7, #6]
 800f71e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800f720:	2300      	movs	r3, #0
 800f722:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800f724:	797b      	ldrb	r3, [r7, #5]
 800f726:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800f72a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f72c:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800f72e:	2300      	movs	r3, #0
 800f730:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800f732:	f107 0314 	add.w	r3, r7, #20
 800f736:	4619      	mov	r1, r3
 800f738:	4816      	ldr	r0, [pc, #88]	@ (800f794 <netconn_write_vectors_partly+0x168>)
 800f73a:	f7ff fb9f 	bl	800ee7c <netconn_apimsg>
 800f73e:	4603      	mov	r3, r0
 800f740:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800f744:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d114      	bne.n	800f776 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800f74c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d002      	beq.n	800f758 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800f752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f754:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f756:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800f758:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d10a      	bne.n	800f776 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800f760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f762:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f764:	429a      	cmp	r2, r3
 800f766:	d006      	beq.n	800f776 <netconn_write_vectors_partly+0x14a>
 800f768:	4b06      	ldr	r3, [pc, #24]	@ (800f784 <netconn_write_vectors_partly+0x158>)
 800f76a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f76e:	490a      	ldr	r1, [pc, #40]	@ (800f798 <netconn_write_vectors_partly+0x16c>)
 800f770:	4806      	ldr	r0, [pc, #24]	@ (800f78c <netconn_write_vectors_partly+0x160>)
 800f772:	f00d fe2b 	bl	801d3cc <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800f776:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800f77a:	4618      	mov	r0, r3
 800f77c:	3748      	adds	r7, #72	@ 0x48
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}
 800f782:	bf00      	nop
 800f784:	0801e760 	.word	0x0801e760
 800f788:	0801ea38 	.word	0x0801ea38
 800f78c:	0801e7b8 	.word	0x0801e7b8
 800f790:	0801ea54 	.word	0x0801ea54
 800f794:	08010dc9 	.word	0x08010dc9
 800f798:	0801ea78 	.word	0x0801ea78

0800f79c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b08c      	sub	sp, #48	@ 0x30
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
 800f7a4:	460b      	mov	r3, r1
 800f7a6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d109      	bne.n	800f7c2 <netconn_close_shutdown+0x26>
 800f7ae:	4b0f      	ldr	r3, [pc, #60]	@ (800f7ec <netconn_close_shutdown+0x50>)
 800f7b0:	f240 4247 	movw	r2, #1095	@ 0x447
 800f7b4:	490e      	ldr	r1, [pc, #56]	@ (800f7f0 <netconn_close_shutdown+0x54>)
 800f7b6:	480f      	ldr	r0, [pc, #60]	@ (800f7f4 <netconn_close_shutdown+0x58>)
 800f7b8:	f00d fe08 	bl	801d3cc <iprintf>
 800f7bc:	f06f 030f 	mvn.w	r3, #15
 800f7c0:	e010      	b.n	800f7e4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800f7c6:	78fb      	ldrb	r3, [r7, #3]
 800f7c8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800f7ca:	2329      	movs	r3, #41	@ 0x29
 800f7cc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800f7ce:	f107 030c 	add.w	r3, r7, #12
 800f7d2:	4619      	mov	r1, r3
 800f7d4:	4808      	ldr	r0, [pc, #32]	@ (800f7f8 <netconn_close_shutdown+0x5c>)
 800f7d6:	f7ff fb51 	bl	800ee7c <netconn_apimsg>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800f7e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3730      	adds	r7, #48	@ 0x30
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}
 800f7ec:	0801e760 	.word	0x0801e760
 800f7f0:	0801ea9c 	.word	0x0801ea9c
 800f7f4:	0801e7b8 	.word	0x0801e7b8
 800f7f8:	08010ee1 	.word	0x08010ee1

0800f7fc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b082      	sub	sp, #8
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800f804:	2103      	movs	r1, #3
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f7ff ffc8 	bl	800f79c <netconn_close_shutdown>
 800f80c:	4603      	mov	r3, r0
}
 800f80e:	4618      	mov	r0, r3
 800f810:	3708      	adds	r7, #8
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}

0800f816 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800f816:	b580      	push	{r7, lr}
 800f818:	b084      	sub	sp, #16
 800f81a:	af00      	add	r7, sp, #0
 800f81c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d101      	bne.n	800f828 <netconn_err+0x12>
    return ERR_OK;
 800f824:	2300      	movs	r3, #0
 800f826:	e00d      	b.n	800f844 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800f828:	f00c fe5e 	bl	801c4e8 <sys_arch_protect>
 800f82c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	7a1b      	ldrb	r3, [r3, #8]
 800f832:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2200      	movs	r2, #0
 800f838:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800f83a:	68f8      	ldr	r0, [r7, #12]
 800f83c:	f00c fe62 	bl	801c504 <sys_arch_unprotect>
  return err;
 800f840:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f844:	4618      	mov	r0, r3
 800f846:	3710      	adds	r7, #16
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
 800f852:	4603      	mov	r3, r0
 800f854:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800f856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f85a:	f113 0f0d 	cmn.w	r3, #13
 800f85e:	d009      	beq.n	800f874 <lwip_netconn_err_to_msg+0x28>
 800f860:	f113 0f0d 	cmn.w	r3, #13
 800f864:	dc0c      	bgt.n	800f880 <lwip_netconn_err_to_msg+0x34>
 800f866:	f113 0f0f 	cmn.w	r3, #15
 800f86a:	d007      	beq.n	800f87c <lwip_netconn_err_to_msg+0x30>
 800f86c:	f113 0f0e 	cmn.w	r3, #14
 800f870:	d002      	beq.n	800f878 <lwip_netconn_err_to_msg+0x2c>
 800f872:	e005      	b.n	800f880 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800f874:	4b0a      	ldr	r3, [pc, #40]	@ (800f8a0 <lwip_netconn_err_to_msg+0x54>)
 800f876:	e00e      	b.n	800f896 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800f878:	4b0a      	ldr	r3, [pc, #40]	@ (800f8a4 <lwip_netconn_err_to_msg+0x58>)
 800f87a:	e00c      	b.n	800f896 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800f87c:	4b0a      	ldr	r3, [pc, #40]	@ (800f8a8 <lwip_netconn_err_to_msg+0x5c>)
 800f87e:	e00a      	b.n	800f896 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800f880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d005      	beq.n	800f894 <lwip_netconn_err_to_msg+0x48>
 800f888:	4b08      	ldr	r3, [pc, #32]	@ (800f8ac <lwip_netconn_err_to_msg+0x60>)
 800f88a:	227d      	movs	r2, #125	@ 0x7d
 800f88c:	4908      	ldr	r1, [pc, #32]	@ (800f8b0 <lwip_netconn_err_to_msg+0x64>)
 800f88e:	4809      	ldr	r0, [pc, #36]	@ (800f8b4 <lwip_netconn_err_to_msg+0x68>)
 800f890:	f00d fd9c 	bl	801d3cc <iprintf>
      return NULL;
 800f894:	2300      	movs	r3, #0
  }
}
 800f896:	4618      	mov	r0, r3
 800f898:	3708      	adds	r7, #8
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
 800f89e:	bf00      	nop
 800f8a0:	08021c9c 	.word	0x08021c9c
 800f8a4:	08021c9d 	.word	0x08021c9d
 800f8a8:	08021c9e 	.word	0x08021c9e
 800f8ac:	0801eab8 	.word	0x0801eab8
 800f8b0:	0801eaec 	.word	0x0801eaec
 800f8b4:	0801eafc 	.word	0x0801eafc

0800f8b8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b082      	sub	sp, #8
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d105      	bne.n	800f8d4 <lwip_netconn_is_err_msg+0x1c>
 800f8c8:	4b12      	ldr	r3, [pc, #72]	@ (800f914 <lwip_netconn_is_err_msg+0x5c>)
 800f8ca:	2285      	movs	r2, #133	@ 0x85
 800f8cc:	4912      	ldr	r1, [pc, #72]	@ (800f918 <lwip_netconn_is_err_msg+0x60>)
 800f8ce:	4813      	ldr	r0, [pc, #76]	@ (800f91c <lwip_netconn_is_err_msg+0x64>)
 800f8d0:	f00d fd7c 	bl	801d3cc <iprintf>

  if (msg == &netconn_aborted) {
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	4a12      	ldr	r2, [pc, #72]	@ (800f920 <lwip_netconn_is_err_msg+0x68>)
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	d104      	bne.n	800f8e6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	22f3      	movs	r2, #243	@ 0xf3
 800f8e0:	701a      	strb	r2, [r3, #0]
    return 1;
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	e012      	b.n	800f90c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	4a0e      	ldr	r2, [pc, #56]	@ (800f924 <lwip_netconn_is_err_msg+0x6c>)
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	d104      	bne.n	800f8f8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	22f2      	movs	r2, #242	@ 0xf2
 800f8f2:	701a      	strb	r2, [r3, #0]
    return 1;
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	e009      	b.n	800f90c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	4a0b      	ldr	r2, [pc, #44]	@ (800f928 <lwip_netconn_is_err_msg+0x70>)
 800f8fc:	4293      	cmp	r3, r2
 800f8fe:	d104      	bne.n	800f90a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	22f1      	movs	r2, #241	@ 0xf1
 800f904:	701a      	strb	r2, [r3, #0]
    return 1;
 800f906:	2301      	movs	r3, #1
 800f908:	e000      	b.n	800f90c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800f90a:	2300      	movs	r3, #0
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3708      	adds	r7, #8
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}
 800f914:	0801eab8 	.word	0x0801eab8
 800f918:	0801eb24 	.word	0x0801eb24
 800f91c:	0801eafc 	.word	0x0801eafc
 800f920:	08021c9c 	.word	0x08021c9c
 800f924:	08021c9d 	.word	0x08021c9d
 800f928:	08021c9e 	.word	0x08021c9e

0800f92c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b088      	sub	sp, #32
 800f930:	af00      	add	r7, sp, #0
 800f932:	60f8      	str	r0, [r7, #12]
 800f934:	60b9      	str	r1, [r7, #8]
 800f936:	607a      	str	r2, [r7, #4]
 800f938:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d105      	bne.n	800f94c <recv_udp+0x20>
 800f940:	4b34      	ldr	r3, [pc, #208]	@ (800fa14 <recv_udp+0xe8>)
 800f942:	22e5      	movs	r2, #229	@ 0xe5
 800f944:	4934      	ldr	r1, [pc, #208]	@ (800fa18 <recv_udp+0xec>)
 800f946:	4835      	ldr	r0, [pc, #212]	@ (800fa1c <recv_udp+0xf0>)
 800f948:	f00d fd40 	bl	801d3cc <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d105      	bne.n	800f95e <recv_udp+0x32>
 800f952:	4b30      	ldr	r3, [pc, #192]	@ (800fa14 <recv_udp+0xe8>)
 800f954:	22e6      	movs	r2, #230	@ 0xe6
 800f956:	4932      	ldr	r1, [pc, #200]	@ (800fa20 <recv_udp+0xf4>)
 800f958:	4830      	ldr	r0, [pc, #192]	@ (800fa1c <recv_udp+0xf0>)
 800f95a:	f00d fd37 	bl	801d3cc <iprintf>
  conn = (struct netconn *)arg;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f962:	69fb      	ldr	r3, [r7, #28]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d103      	bne.n	800f970 <recv_udp+0x44>
    pbuf_free(p);
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f003 f99d 	bl	8012ca8 <pbuf_free>
    return;
 800f96e:	e04d      	b.n	800fa0c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800f970:	69fb      	ldr	r3, [r7, #28]
 800f972:	685b      	ldr	r3, [r3, #4]
 800f974:	68ba      	ldr	r2, [r7, #8]
 800f976:	429a      	cmp	r2, r3
 800f978:	d005      	beq.n	800f986 <recv_udp+0x5a>
 800f97a:	4b26      	ldr	r3, [pc, #152]	@ (800fa14 <recv_udp+0xe8>)
 800f97c:	22ee      	movs	r2, #238	@ 0xee
 800f97e:	4929      	ldr	r1, [pc, #164]	@ (800fa24 <recv_udp+0xf8>)
 800f980:	4826      	ldr	r0, [pc, #152]	@ (800fa1c <recv_udp+0xf0>)
 800f982:	f00d fd23 	bl	801d3cc <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f986:	69fb      	ldr	r3, [r7, #28]
 800f988:	3310      	adds	r3, #16
 800f98a:	4618      	mov	r0, r3
 800f98c:	f00c fc91 	bl	801c2b2 <sys_mbox_valid>
 800f990:	4603      	mov	r3, r0
 800f992:	2b00      	cmp	r3, #0
 800f994:	d103      	bne.n	800f99e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f003 f986 	bl	8012ca8 <pbuf_free>
    return;
 800f99c:	e036      	b.n	800fa0c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800f99e:	2006      	movs	r0, #6
 800f9a0:	f002 fa68 	bl	8011e74 <memp_malloc>
 800f9a4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800f9a6:	69bb      	ldr	r3, [r7, #24]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d103      	bne.n	800f9b4 <recv_udp+0x88>
    pbuf_free(p);
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f003 f97b 	bl	8012ca8 <pbuf_free>
    return;
 800f9b2:	e02b      	b.n	800fa0c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800f9b4:	69bb      	ldr	r3, [r7, #24]
 800f9b6:	687a      	ldr	r2, [r7, #4]
 800f9b8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800f9ba:	69bb      	ldr	r3, [r7, #24]
 800f9bc:	687a      	ldr	r2, [r7, #4]
 800f9be:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d002      	beq.n	800f9cc <recv_udp+0xa0>
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	e000      	b.n	800f9ce <recv_udp+0xa2>
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	69ba      	ldr	r2, [r7, #24]
 800f9d0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800f9d2:	69bb      	ldr	r3, [r7, #24]
 800f9d4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800f9d6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	891b      	ldrh	r3, [r3, #8]
 800f9dc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800f9de:	69fb      	ldr	r3, [r7, #28]
 800f9e0:	3310      	adds	r3, #16
 800f9e2:	69b9      	ldr	r1, [r7, #24]
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f00c fbef 	bl	801c1c8 <sys_mbox_trypost>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d003      	beq.n	800f9f8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800f9f0:	69b8      	ldr	r0, [r7, #24]
 800f9f2:	f001 fb01 	bl	8010ff8 <netbuf_delete>
    return;
 800f9f6:	e009      	b.n	800fa0c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f9f8:	69fb      	ldr	r3, [r7, #28]
 800f9fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d005      	beq.n	800fa0c <recv_udp+0xe0>
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa04:	8afa      	ldrh	r2, [r7, #22]
 800fa06:	2100      	movs	r1, #0
 800fa08:	69f8      	ldr	r0, [r7, #28]
 800fa0a:	4798      	blx	r3
  }
}
 800fa0c:	3720      	adds	r7, #32
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}
 800fa12:	bf00      	nop
 800fa14:	0801eab8 	.word	0x0801eab8
 800fa18:	0801eb30 	.word	0x0801eb30
 800fa1c:	0801eafc 	.word	0x0801eafc
 800fa20:	0801eb54 	.word	0x0801eb54
 800fa24:	0801eb74 	.word	0x0801eb74

0800fa28 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b088      	sub	sp, #32
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	607a      	str	r2, [r7, #4]
 800fa34:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d106      	bne.n	800fa4a <recv_tcp+0x22>
 800fa3c:	4b36      	ldr	r3, [pc, #216]	@ (800fb18 <recv_tcp+0xf0>)
 800fa3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800fa42:	4936      	ldr	r1, [pc, #216]	@ (800fb1c <recv_tcp+0xf4>)
 800fa44:	4836      	ldr	r0, [pc, #216]	@ (800fb20 <recv_tcp+0xf8>)
 800fa46:	f00d fcc1 	bl	801d3cc <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d106      	bne.n	800fa5e <recv_tcp+0x36>
 800fa50:	4b31      	ldr	r3, [pc, #196]	@ (800fb18 <recv_tcp+0xf0>)
 800fa52:	f240 122d 	movw	r2, #301	@ 0x12d
 800fa56:	4933      	ldr	r1, [pc, #204]	@ (800fb24 <recv_tcp+0xfc>)
 800fa58:	4831      	ldr	r0, [pc, #196]	@ (800fb20 <recv_tcp+0xf8>)
 800fa5a:	f00d fcb7 	bl	801d3cc <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800fa5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d006      	beq.n	800fa74 <recv_tcp+0x4c>
 800fa66:	4b2c      	ldr	r3, [pc, #176]	@ (800fb18 <recv_tcp+0xf0>)
 800fa68:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800fa6c:	492e      	ldr	r1, [pc, #184]	@ (800fb28 <recv_tcp+0x100>)
 800fa6e:	482c      	ldr	r0, [pc, #176]	@ (800fb20 <recv_tcp+0xf8>)
 800fa70:	f00d fcac 	bl	801d3cc <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d102      	bne.n	800fa84 <recv_tcp+0x5c>
    return ERR_VAL;
 800fa7e:	f06f 0305 	mvn.w	r3, #5
 800fa82:	e045      	b.n	800fb10 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	685b      	ldr	r3, [r3, #4]
 800fa88:	68ba      	ldr	r2, [r7, #8]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d006      	beq.n	800fa9c <recv_tcp+0x74>
 800fa8e:	4b22      	ldr	r3, [pc, #136]	@ (800fb18 <recv_tcp+0xf0>)
 800fa90:	f240 1235 	movw	r2, #309	@ 0x135
 800fa94:	4925      	ldr	r1, [pc, #148]	@ (800fb2c <recv_tcp+0x104>)
 800fa96:	4822      	ldr	r0, [pc, #136]	@ (800fb20 <recv_tcp+0xf8>)
 800fa98:	f00d fc98 	bl	801d3cc <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	3310      	adds	r3, #16
 800faa0:	4618      	mov	r0, r3
 800faa2:	f00c fc06 	bl	801c2b2 <sys_mbox_valid>
 800faa6:	4603      	mov	r3, r0
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d10d      	bne.n	800fac8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d008      	beq.n	800fac4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	891b      	ldrh	r3, [r3, #8]
 800fab6:	4619      	mov	r1, r3
 800fab8:	68b8      	ldr	r0, [r7, #8]
 800faba:	f004 f8ad 	bl	8013c18 <tcp_recved>
      pbuf_free(p);
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f003 f8f2 	bl	8012ca8 <pbuf_free>
    }
    return ERR_OK;
 800fac4:	2300      	movs	r3, #0
 800fac6:	e023      	b.n	800fb10 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d005      	beq.n	800fada <recv_tcp+0xb2>
    msg = p;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	891b      	ldrh	r3, [r3, #8]
 800fad6:	83fb      	strh	r3, [r7, #30]
 800fad8:	e003      	b.n	800fae2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800fada:	4b15      	ldr	r3, [pc, #84]	@ (800fb30 <recv_tcp+0x108>)
 800fadc:	61bb      	str	r3, [r7, #24]
    len = 0;
 800fade:	2300      	movs	r3, #0
 800fae0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800fae2:	697b      	ldr	r3, [r7, #20]
 800fae4:	3310      	adds	r3, #16
 800fae6:	69b9      	ldr	r1, [r7, #24]
 800fae8:	4618      	mov	r0, r3
 800faea:	f00c fb6d 	bl	801c1c8 <sys_mbox_trypost>
 800faee:	4603      	mov	r3, r0
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d002      	beq.n	800fafa <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800faf4:	f04f 33ff 	mov.w	r3, #4294967295
 800faf8:	e00a      	b.n	800fb10 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800fafa:	697b      	ldr	r3, [r7, #20]
 800fafc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d005      	beq.n	800fb0e <recv_tcp+0xe6>
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb06:	8bfa      	ldrh	r2, [r7, #30]
 800fb08:	2100      	movs	r1, #0
 800fb0a:	6978      	ldr	r0, [r7, #20]
 800fb0c:	4798      	blx	r3
  }

  return ERR_OK;
 800fb0e:	2300      	movs	r3, #0
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	3720      	adds	r7, #32
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}
 800fb18:	0801eab8 	.word	0x0801eab8
 800fb1c:	0801eb94 	.word	0x0801eb94
 800fb20:	0801eafc 	.word	0x0801eafc
 800fb24:	0801ebb8 	.word	0x0801ebb8
 800fb28:	0801ebd8 	.word	0x0801ebd8
 800fb2c:	0801ebf0 	.word	0x0801ebf0
 800fb30:	08021c9e 	.word	0x08021c9e

0800fb34 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b084      	sub	sp, #16
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d106      	bne.n	800fb56 <poll_tcp+0x22>
 800fb48:	4b29      	ldr	r3, [pc, #164]	@ (800fbf0 <poll_tcp+0xbc>)
 800fb4a:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800fb4e:	4929      	ldr	r1, [pc, #164]	@ (800fbf4 <poll_tcp+0xc0>)
 800fb50:	4829      	ldr	r0, [pc, #164]	@ (800fbf8 <poll_tcp+0xc4>)
 800fb52:	f00d fc3b 	bl	801d3cc <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	785b      	ldrb	r3, [r3, #1]
 800fb5a:	2b01      	cmp	r3, #1
 800fb5c:	d104      	bne.n	800fb68 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800fb5e:	2101      	movs	r1, #1
 800fb60:	68f8      	ldr	r0, [r7, #12]
 800fb62:	f000 ff65 	bl	8010a30 <lwip_netconn_do_writemore>
 800fb66:	e016      	b.n	800fb96 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	785b      	ldrb	r3, [r3, #1]
 800fb6c:	2b04      	cmp	r3, #4
 800fb6e:	d112      	bne.n	800fb96 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	6a1b      	ldr	r3, [r3, #32]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d00a      	beq.n	800fb8e <poll_tcp+0x5a>
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	6a1b      	ldr	r3, [r3, #32]
 800fb7c:	7a5b      	ldrb	r3, [r3, #9]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d005      	beq.n	800fb8e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	6a1b      	ldr	r3, [r3, #32]
 800fb86:	7a5a      	ldrb	r2, [r3, #9]
 800fb88:	3a01      	subs	r2, #1
 800fb8a:	b2d2      	uxtb	r2, r2
 800fb8c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800fb8e:	2101      	movs	r1, #1
 800fb90:	68f8      	ldr	r0, [r7, #12]
 800fb92:	f000 fbf7 	bl	8010384 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	7f1b      	ldrb	r3, [r3, #28]
 800fb9a:	f003 0310 	and.w	r3, r3, #16
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d021      	beq.n	800fbe6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	685b      	ldr	r3, [r3, #4]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d01d      	beq.n	800fbe6 <poll_tcp+0xb2>
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	685b      	ldr	r3, [r3, #4]
 800fbae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fbb2:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800fbb6:	d316      	bcc.n	800fbe6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	685b      	ldr	r3, [r3, #4]
 800fbbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800fbc0:	2b04      	cmp	r3, #4
 800fbc2:	d810      	bhi.n	800fbe6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	7f1b      	ldrb	r3, [r3, #28]
 800fbc8:	f023 0310 	bic.w	r3, r3, #16
 800fbcc:	b2da      	uxtb	r2, r3
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d005      	beq.n	800fbe6 <poll_tcp+0xb2>
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbde:	2200      	movs	r2, #0
 800fbe0:	2102      	movs	r1, #2
 800fbe2:	68f8      	ldr	r0, [r7, #12]
 800fbe4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800fbe6:	2300      	movs	r3, #0
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3710      	adds	r7, #16
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}
 800fbf0:	0801eab8 	.word	0x0801eab8
 800fbf4:	0801ec10 	.word	0x0801ec10
 800fbf8:	0801eafc 	.word	0x0801eafc

0800fbfc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b086      	sub	sp, #24
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	60f8      	str	r0, [r7, #12]
 800fc04:	60b9      	str	r1, [r7, #8]
 800fc06:	4613      	mov	r3, r2
 800fc08:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d106      	bne.n	800fc22 <sent_tcp+0x26>
 800fc14:	4b20      	ldr	r3, [pc, #128]	@ (800fc98 <sent_tcp+0x9c>)
 800fc16:	f240 1293 	movw	r2, #403	@ 0x193
 800fc1a:	4920      	ldr	r1, [pc, #128]	@ (800fc9c <sent_tcp+0xa0>)
 800fc1c:	4820      	ldr	r0, [pc, #128]	@ (800fca0 <sent_tcp+0xa4>)
 800fc1e:	f00d fbd5 	bl	801d3cc <iprintf>

  if (conn) {
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d032      	beq.n	800fc8e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	785b      	ldrb	r3, [r3, #1]
 800fc2c:	2b01      	cmp	r3, #1
 800fc2e:	d104      	bne.n	800fc3a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800fc30:	2101      	movs	r1, #1
 800fc32:	6978      	ldr	r0, [r7, #20]
 800fc34:	f000 fefc 	bl	8010a30 <lwip_netconn_do_writemore>
 800fc38:	e007      	b.n	800fc4a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	785b      	ldrb	r3, [r3, #1]
 800fc3e:	2b04      	cmp	r3, #4
 800fc40:	d103      	bne.n	800fc4a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800fc42:	2101      	movs	r1, #1
 800fc44:	6978      	ldr	r0, [r7, #20]
 800fc46:	f000 fb9d 	bl	8010384 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d01d      	beq.n	800fc8e <sent_tcp+0x92>
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	685b      	ldr	r3, [r3, #4]
 800fc56:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fc5a:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800fc5e:	d316      	bcc.n	800fc8e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	685b      	ldr	r3, [r3, #4]
 800fc64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800fc68:	2b04      	cmp	r3, #4
 800fc6a:	d810      	bhi.n	800fc8e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	7f1b      	ldrb	r3, [r3, #28]
 800fc70:	f023 0310 	bic.w	r3, r3, #16
 800fc74:	b2da      	uxtb	r2, r3
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d005      	beq.n	800fc8e <sent_tcp+0x92>
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc86:	88fa      	ldrh	r2, [r7, #6]
 800fc88:	2102      	movs	r1, #2
 800fc8a:	6978      	ldr	r0, [r7, #20]
 800fc8c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800fc8e:	2300      	movs	r3, #0
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3718      	adds	r7, #24
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}
 800fc98:	0801eab8 	.word	0x0801eab8
 800fc9c:	0801ec10 	.word	0x0801ec10
 800fca0:	0801eafc 	.word	0x0801eafc

0800fca4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b088      	sub	sp, #32
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	460b      	mov	r3, r1
 800fcae:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800fcb4:	69fb      	ldr	r3, [r7, #28]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d106      	bne.n	800fcc8 <err_tcp+0x24>
 800fcba:	4b5f      	ldr	r3, [pc, #380]	@ (800fe38 <err_tcp+0x194>)
 800fcbc:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800fcc0:	495e      	ldr	r1, [pc, #376]	@ (800fe3c <err_tcp+0x198>)
 800fcc2:	485f      	ldr	r0, [pc, #380]	@ (800fe40 <err_tcp+0x19c>)
 800fcc4:	f00d fb82 	bl	801d3cc <iprintf>

  SYS_ARCH_PROTECT(lev);
 800fcc8:	f00c fc0e 	bl	801c4e8 <sys_arch_protect>
 800fccc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800fcce:	69fb      	ldr	r3, [r7, #28]
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800fcd4:	69fb      	ldr	r3, [r7, #28]
 800fcd6:	78fa      	ldrb	r2, [r7, #3]
 800fcd8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800fcda:	69fb      	ldr	r3, [r7, #28]
 800fcdc:	7f1b      	ldrb	r3, [r3, #28]
 800fcde:	f043 0301 	orr.w	r3, r3, #1
 800fce2:	b2da      	uxtb	r2, r3
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800fce8:	69fb      	ldr	r3, [r7, #28]
 800fcea:	785b      	ldrb	r3, [r3, #1]
 800fcec:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800fcee:	69fb      	ldr	r3, [r7, #28]
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800fcf4:	69b8      	ldr	r0, [r7, #24]
 800fcf6:	f00c fc05 	bl	801c504 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800fcfa:	69fb      	ldr	r3, [r7, #28]
 800fcfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d005      	beq.n	800fd0e <err_tcp+0x6a>
 800fd02:	69fb      	ldr	r3, [r7, #28]
 800fd04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd06:	2200      	movs	r2, #0
 800fd08:	2104      	movs	r1, #4
 800fd0a:	69f8      	ldr	r0, [r7, #28]
 800fd0c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fd0e:	69fb      	ldr	r3, [r7, #28]
 800fd10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d005      	beq.n	800fd22 <err_tcp+0x7e>
 800fd16:	69fb      	ldr	r3, [r7, #28]
 800fd18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	2100      	movs	r1, #0
 800fd1e:	69f8      	ldr	r0, [r7, #28]
 800fd20:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800fd22:	69fb      	ldr	r3, [r7, #28]
 800fd24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d005      	beq.n	800fd36 <err_tcp+0x92>
 800fd2a:	69fb      	ldr	r3, [r7, #28]
 800fd2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd2e:	2200      	movs	r2, #0
 800fd30:	2102      	movs	r1, #2
 800fd32:	69f8      	ldr	r0, [r7, #28]
 800fd34:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800fd36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7ff fd86 	bl	800f84c <lwip_netconn_err_to_msg>
 800fd40:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800fd42:	69fb      	ldr	r3, [r7, #28]
 800fd44:	3310      	adds	r3, #16
 800fd46:	4618      	mov	r0, r3
 800fd48:	f00c fab3 	bl	801c2b2 <sys_mbox_valid>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d005      	beq.n	800fd5e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800fd52:	69fb      	ldr	r3, [r7, #28]
 800fd54:	3310      	adds	r3, #16
 800fd56:	6939      	ldr	r1, [r7, #16]
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f00c fa35 	bl	801c1c8 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800fd5e:	69fb      	ldr	r3, [r7, #28]
 800fd60:	3314      	adds	r3, #20
 800fd62:	4618      	mov	r0, r3
 800fd64:	f00c faa5 	bl	801c2b2 <sys_mbox_valid>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d005      	beq.n	800fd7a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800fd6e:	69fb      	ldr	r3, [r7, #28]
 800fd70:	3314      	adds	r3, #20
 800fd72:	6939      	ldr	r1, [r7, #16]
 800fd74:	4618      	mov	r0, r3
 800fd76:	f00c fa27 	bl	801c1c8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800fd7a:	7dfb      	ldrb	r3, [r7, #23]
 800fd7c:	2b01      	cmp	r3, #1
 800fd7e:	d005      	beq.n	800fd8c <err_tcp+0xe8>
 800fd80:	7dfb      	ldrb	r3, [r7, #23]
 800fd82:	2b04      	cmp	r3, #4
 800fd84:	d002      	beq.n	800fd8c <err_tcp+0xe8>
 800fd86:	7dfb      	ldrb	r3, [r7, #23]
 800fd88:	2b03      	cmp	r3, #3
 800fd8a:	d143      	bne.n	800fe14 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800fd8c:	69fb      	ldr	r3, [r7, #28]
 800fd8e:	7f1b      	ldrb	r3, [r3, #28]
 800fd90:	f003 0304 	and.w	r3, r3, #4
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	bf14      	ite	ne
 800fd98:	2301      	movne	r3, #1
 800fd9a:	2300      	moveq	r3, #0
 800fd9c:	b2db      	uxtb	r3, r3
 800fd9e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800fda0:	69fb      	ldr	r3, [r7, #28]
 800fda2:	7f1b      	ldrb	r3, [r3, #28]
 800fda4:	f023 0304 	bic.w	r3, r3, #4
 800fda8:	b2da      	uxtb	r2, r3
 800fdaa:	69fb      	ldr	r3, [r7, #28]
 800fdac:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d13b      	bne.n	800fe2c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	6a1b      	ldr	r3, [r3, #32]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d106      	bne.n	800fdca <err_tcp+0x126>
 800fdbc:	4b1e      	ldr	r3, [pc, #120]	@ (800fe38 <err_tcp+0x194>)
 800fdbe:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800fdc2:	4920      	ldr	r1, [pc, #128]	@ (800fe44 <err_tcp+0x1a0>)
 800fdc4:	481e      	ldr	r0, [pc, #120]	@ (800fe40 <err_tcp+0x19c>)
 800fdc6:	f00d fb01 	bl	801d3cc <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800fdca:	7dfb      	ldrb	r3, [r7, #23]
 800fdcc:	2b04      	cmp	r3, #4
 800fdce:	d104      	bne.n	800fdda <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800fdd0:	69fb      	ldr	r3, [r7, #28]
 800fdd2:	6a1b      	ldr	r3, [r3, #32]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	711a      	strb	r2, [r3, #4]
 800fdd8:	e003      	b.n	800fde2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800fdda:	69fb      	ldr	r3, [r7, #28]
 800fddc:	6a1b      	ldr	r3, [r3, #32]
 800fdde:	78fa      	ldrb	r2, [r7, #3]
 800fde0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800fde2:	69fb      	ldr	r3, [r7, #28]
 800fde4:	6a1b      	ldr	r3, [r3, #32]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	330c      	adds	r3, #12
 800fdea:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800fdec:	68b8      	ldr	r0, [r7, #8]
 800fdee:	f00c faf1 	bl	801c3d4 <sys_sem_valid>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d106      	bne.n	800fe06 <err_tcp+0x162>
 800fdf8:	4b0f      	ldr	r3, [pc, #60]	@ (800fe38 <err_tcp+0x194>)
 800fdfa:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800fdfe:	4912      	ldr	r1, [pc, #72]	@ (800fe48 <err_tcp+0x1a4>)
 800fe00:	480f      	ldr	r0, [pc, #60]	@ (800fe40 <err_tcp+0x19c>)
 800fe02:	f00d fae3 	bl	801d3cc <iprintf>
      conn->current_msg = NULL;
 800fe06:	69fb      	ldr	r3, [r7, #28]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800fe0c:	68b8      	ldr	r0, [r7, #8]
 800fe0e:	f00c fac7 	bl	801c3a0 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800fe12:	e00b      	b.n	800fe2c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800fe14:	69fb      	ldr	r3, [r7, #28]
 800fe16:	6a1b      	ldr	r3, [r3, #32]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d008      	beq.n	800fe2e <err_tcp+0x18a>
 800fe1c:	4b06      	ldr	r3, [pc, #24]	@ (800fe38 <err_tcp+0x194>)
 800fe1e:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800fe22:	490a      	ldr	r1, [pc, #40]	@ (800fe4c <err_tcp+0x1a8>)
 800fe24:	4806      	ldr	r0, [pc, #24]	@ (800fe40 <err_tcp+0x19c>)
 800fe26:	f00d fad1 	bl	801d3cc <iprintf>
  }
}
 800fe2a:	e000      	b.n	800fe2e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800fe2c:	bf00      	nop
}
 800fe2e:	bf00      	nop
 800fe30:	3720      	adds	r7, #32
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}
 800fe36:	bf00      	nop
 800fe38:	0801eab8 	.word	0x0801eab8
 800fe3c:	0801ec10 	.word	0x0801ec10
 800fe40:	0801eafc 	.word	0x0801eafc
 800fe44:	0801ec20 	.word	0x0801ec20
 800fe48:	0801ec3c 	.word	0x0801ec3c
 800fe4c:	0801ec58 	.word	0x0801ec58

0800fe50 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b084      	sub	sp, #16
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	685b      	ldr	r3, [r3, #4]
 800fe5c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800fe5e:	6879      	ldr	r1, [r7, #4]
 800fe60:	68f8      	ldr	r0, [r7, #12]
 800fe62:	f004 fda1 	bl	80149a8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800fe66:	490a      	ldr	r1, [pc, #40]	@ (800fe90 <setup_tcp+0x40>)
 800fe68:	68f8      	ldr	r0, [r7, #12]
 800fe6a:	f004 fdaf 	bl	80149cc <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800fe6e:	4909      	ldr	r1, [pc, #36]	@ (800fe94 <setup_tcp+0x44>)
 800fe70:	68f8      	ldr	r0, [r7, #12]
 800fe72:	f004 fdcd 	bl	8014a10 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800fe76:	2202      	movs	r2, #2
 800fe78:	4907      	ldr	r1, [pc, #28]	@ (800fe98 <setup_tcp+0x48>)
 800fe7a:	68f8      	ldr	r0, [r7, #12]
 800fe7c:	f004 fe24 	bl	8014ac8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800fe80:	4906      	ldr	r1, [pc, #24]	@ (800fe9c <setup_tcp+0x4c>)
 800fe82:	68f8      	ldr	r0, [r7, #12]
 800fe84:	f004 fde6 	bl	8014a54 <tcp_err>
}
 800fe88:	bf00      	nop
 800fe8a:	3710      	adds	r7, #16
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}
 800fe90:	0800fa29 	.word	0x0800fa29
 800fe94:	0800fbfd 	.word	0x0800fbfd
 800fe98:	0800fb35 	.word	0x0800fb35
 800fe9c:	0800fca5 	.word	0x0800fca5

0800fea0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800fea0:	b590      	push	{r4, r7, lr}
 800fea2:	b089      	sub	sp, #36	@ 0x24
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	60f8      	str	r0, [r7, #12]
 800fea8:	60b9      	str	r1, [r7, #8]
 800feaa:	4613      	mov	r3, r2
 800feac:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800feb2:	69fb      	ldr	r3, [r7, #28]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d102      	bne.n	800febe <accept_function+0x1e>
    return ERR_VAL;
 800feb8:	f06f 0305 	mvn.w	r3, #5
 800febc:	e0a1      	b.n	8010002 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800febe:	69fb      	ldr	r3, [r7, #28]
 800fec0:	3314      	adds	r3, #20
 800fec2:	4618      	mov	r0, r3
 800fec4:	f00c f9f5 	bl	801c2b2 <sys_mbox_valid>
 800fec8:	4603      	mov	r3, r0
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d102      	bne.n	800fed4 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800fece:	f06f 0305 	mvn.w	r3, #5
 800fed2:	e096      	b.n	8010002 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d11b      	bne.n	800ff12 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800feda:	69fb      	ldr	r3, [r7, #28]
 800fedc:	f103 0414 	add.w	r4, r3, #20
 800fee0:	f06f 000c 	mvn.w	r0, #12
 800fee4:	f7ff fcb2 	bl	800f84c <lwip_netconn_err_to_msg>
 800fee8:	4603      	mov	r3, r0
 800feea:	4619      	mov	r1, r3
 800feec:	4620      	mov	r0, r4
 800feee:	f00c f96b 	bl	801c1c8 <sys_mbox_trypost>
 800fef2:	4603      	mov	r3, r0
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d109      	bne.n	800ff0c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fef8:	69fb      	ldr	r3, [r7, #28]
 800fefa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d005      	beq.n	800ff0c <accept_function+0x6c>
 800ff00:	69fb      	ldr	r3, [r7, #28]
 800ff02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff04:	2200      	movs	r2, #0
 800ff06:	2100      	movs	r1, #0
 800ff08:	69f8      	ldr	r0, [r7, #28]
 800ff0a:	4798      	blx	r3
    }
    return ERR_VAL;
 800ff0c:	f06f 0305 	mvn.w	r3, #5
 800ff10:	e077      	b.n	8010002 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800ff12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d006      	beq.n	800ff28 <accept_function+0x88>
 800ff1a:	4b3c      	ldr	r3, [pc, #240]	@ (801000c <accept_function+0x16c>)
 800ff1c:	f240 222a 	movw	r2, #554	@ 0x22a
 800ff20:	493b      	ldr	r1, [pc, #236]	@ (8010010 <accept_function+0x170>)
 800ff22:	483c      	ldr	r0, [pc, #240]	@ (8010014 <accept_function+0x174>)
 800ff24:	f00d fa52 	bl	801d3cc <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800ff28:	69fb      	ldr	r3, [r7, #28]
 800ff2a:	781a      	ldrb	r2, [r3, #0]
 800ff2c:	69fb      	ldr	r3, [r7, #28]
 800ff2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff30:	4619      	mov	r1, r3
 800ff32:	4610      	mov	r0, r2
 800ff34:	f000 f8f0 	bl	8010118 <netconn_alloc>
 800ff38:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800ff3a:	69bb      	ldr	r3, [r7, #24]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d11b      	bne.n	800ff78 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800ff40:	69fb      	ldr	r3, [r7, #28]
 800ff42:	f103 0414 	add.w	r4, r3, #20
 800ff46:	f06f 000c 	mvn.w	r0, #12
 800ff4a:	f7ff fc7f 	bl	800f84c <lwip_netconn_err_to_msg>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	4619      	mov	r1, r3
 800ff52:	4620      	mov	r0, r4
 800ff54:	f00c f938 	bl	801c1c8 <sys_mbox_trypost>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d109      	bne.n	800ff72 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ff5e:	69fb      	ldr	r3, [r7, #28]
 800ff60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d005      	beq.n	800ff72 <accept_function+0xd2>
 800ff66:	69fb      	ldr	r3, [r7, #28]
 800ff68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	2100      	movs	r1, #0
 800ff6e:	69f8      	ldr	r0, [r7, #28]
 800ff70:	4798      	blx	r3
    }
    return ERR_MEM;
 800ff72:	f04f 33ff 	mov.w	r3, #4294967295
 800ff76:	e044      	b.n	8010002 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800ff78:	69bb      	ldr	r3, [r7, #24]
 800ff7a:	68ba      	ldr	r2, [r7, #8]
 800ff7c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800ff7e:	69b8      	ldr	r0, [r7, #24]
 800ff80:	f7ff ff66 	bl	800fe50 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800ff84:	69fb      	ldr	r3, [r7, #28]
 800ff86:	3314      	adds	r3, #20
 800ff88:	69b9      	ldr	r1, [r7, #24]
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f00c f91c 	bl	801c1c8 <sys_mbox_trypost>
 800ff90:	4603      	mov	r3, r0
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d02a      	beq.n	800ffec <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800ff96:	69bb      	ldr	r3, [r7, #24]
 800ff98:	685b      	ldr	r3, [r3, #4]
 800ff9a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800ff9c:	2100      	movs	r1, #0
 800ff9e:	6978      	ldr	r0, [r7, #20]
 800ffa0:	f004 fd02 	bl	80149a8 <tcp_arg>
    tcp_recv(pcb, NULL);
 800ffa4:	2100      	movs	r1, #0
 800ffa6:	6978      	ldr	r0, [r7, #20]
 800ffa8:	f004 fd10 	bl	80149cc <tcp_recv>
    tcp_sent(pcb, NULL);
 800ffac:	2100      	movs	r1, #0
 800ffae:	6978      	ldr	r0, [r7, #20]
 800ffb0:	f004 fd2e 	bl	8014a10 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	2100      	movs	r1, #0
 800ffb8:	6978      	ldr	r0, [r7, #20]
 800ffba:	f004 fd85 	bl	8014ac8 <tcp_poll>
    tcp_err(pcb, NULL);
 800ffbe:	2100      	movs	r1, #0
 800ffc0:	6978      	ldr	r0, [r7, #20]
 800ffc2:	f004 fd47 	bl	8014a54 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800ffc6:	69bb      	ldr	r3, [r7, #24]
 800ffc8:	2200      	movs	r2, #0
 800ffca:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800ffcc:	69bb      	ldr	r3, [r7, #24]
 800ffce:	3310      	adds	r3, #16
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f00c f8e7 	bl	801c1a4 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800ffd6:	69bb      	ldr	r3, [r7, #24]
 800ffd8:	3310      	adds	r3, #16
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f00c f97a 	bl	801c2d4 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800ffe0:	69b8      	ldr	r0, [r7, #24]
 800ffe2:	f000 f907 	bl	80101f4 <netconn_free>
    return ERR_MEM;
 800ffe6:	f04f 33ff 	mov.w	r3, #4294967295
 800ffea:	e00a      	b.n	8010002 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ffec:	69fb      	ldr	r3, [r7, #28]
 800ffee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d005      	beq.n	8010000 <accept_function+0x160>
 800fff4:	69fb      	ldr	r3, [r7, #28]
 800fff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fff8:	2200      	movs	r2, #0
 800fffa:	2100      	movs	r1, #0
 800fffc:	69f8      	ldr	r0, [r7, #28]
 800fffe:	4798      	blx	r3
  }

  return ERR_OK;
 8010000:	2300      	movs	r3, #0
}
 8010002:	4618      	mov	r0, r3
 8010004:	3724      	adds	r7, #36	@ 0x24
 8010006:	46bd      	mov	sp, r7
 8010008:	bd90      	pop	{r4, r7, pc}
 801000a:	bf00      	nop
 801000c:	0801eab8 	.word	0x0801eab8
 8010010:	0801ec74 	.word	0x0801ec74
 8010014:	0801eafc 	.word	0x0801eafc

08010018 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8010018:	b590      	push	{r4, r7, lr}
 801001a:	b085      	sub	sp, #20
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8010020:	2300      	movs	r3, #0
 8010022:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d006      	beq.n	801003c <pcb_new+0x24>
 801002e:	4b2b      	ldr	r3, [pc, #172]	@ (80100dc <pcb_new+0xc4>)
 8010030:	f240 2265 	movw	r2, #613	@ 0x265
 8010034:	492a      	ldr	r1, [pc, #168]	@ (80100e0 <pcb_new+0xc8>)
 8010036:	482b      	ldr	r0, [pc, #172]	@ (80100e4 <pcb_new+0xcc>)
 8010038:	f00d f9c8 	bl	801d3cc <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010046:	2b10      	cmp	r3, #16
 8010048:	d022      	beq.n	8010090 <pcb_new+0x78>
 801004a:	2b20      	cmp	r3, #32
 801004c:	d133      	bne.n	80100b6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681c      	ldr	r4, [r3, #0]
 8010052:	7bfb      	ldrb	r3, [r7, #15]
 8010054:	4618      	mov	r0, r3
 8010056:	f009 fd80 	bl	8019b5a <udp_new_ip_type>
 801005a:	4603      	mov	r3, r0
 801005c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d02a      	beq.n	80100be <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	2b22      	cmp	r3, #34	@ 0x22
 8010070:	d104      	bne.n	801007c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	685b      	ldr	r3, [r3, #4]
 8010078:	2201      	movs	r2, #1
 801007a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	6858      	ldr	r0, [r3, #4]
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	461a      	mov	r2, r3
 8010088:	4917      	ldr	r1, [pc, #92]	@ (80100e8 <pcb_new+0xd0>)
 801008a:	f009 fced 	bl	8019a68 <udp_recv>
      }
      break;
 801008e:	e016      	b.n	80100be <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681c      	ldr	r4, [r3, #0]
 8010094:	7bfb      	ldrb	r3, [r7, #15]
 8010096:	4618      	mov	r0, r3
 8010098:	f004 fc78 	bl	801498c <tcp_new_ip_type>
 801009c:	4603      	mov	r3, r0
 801009e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d00b      	beq.n	80100c2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	4618      	mov	r0, r3
 80100b0:	f7ff fece 	bl	800fe50 <setup_tcp>
      }
      break;
 80100b4:	e005      	b.n	80100c2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	22fa      	movs	r2, #250	@ 0xfa
 80100ba:	711a      	strb	r2, [r3, #4]
      return;
 80100bc:	e00a      	b.n	80100d4 <pcb_new+0xbc>
      break;
 80100be:	bf00      	nop
 80100c0:	e000      	b.n	80100c4 <pcb_new+0xac>
      break;
 80100c2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d102      	bne.n	80100d4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	22ff      	movs	r2, #255	@ 0xff
 80100d2:	711a      	strb	r2, [r3, #4]
  }
}
 80100d4:	3714      	adds	r7, #20
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd90      	pop	{r4, r7, pc}
 80100da:	bf00      	nop
 80100dc:	0801eab8 	.word	0x0801eab8
 80100e0:	0801ec9c 	.word	0x0801ec9c
 80100e4:	0801eafc 	.word	0x0801eafc
 80100e8:	0800f92d 	.word	0x0800f92d

080100ec <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b084      	sub	sp, #16
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	2200      	movs	r2, #0
 80100fc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	685b      	ldr	r3, [r3, #4]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d102      	bne.n	801010e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8010108:	68f8      	ldr	r0, [r7, #12]
 801010a:	f7ff ff85 	bl	8010018 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 801010e:	bf00      	nop
 8010110:	3710      	adds	r7, #16
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
	...

08010118 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b086      	sub	sp, #24
 801011c:	af00      	add	r7, sp, #0
 801011e:	4603      	mov	r3, r0
 8010120:	6039      	str	r1, [r7, #0]
 8010122:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8010124:	2300      	movs	r3, #0
 8010126:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8010128:	2007      	movs	r0, #7
 801012a:	f001 fea3 	bl	8011e74 <memp_malloc>
 801012e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d101      	bne.n	801013a <netconn_alloc+0x22>
    return NULL;
 8010136:	2300      	movs	r3, #0
 8010138:	e052      	b.n	80101e0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	2200      	movs	r2, #0
 801013e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	79fa      	ldrb	r2, [r7, #7]
 8010144:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	2200      	movs	r2, #0
 801014a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 801014c:	79fb      	ldrb	r3, [r7, #7]
 801014e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010152:	2b10      	cmp	r3, #16
 8010154:	d004      	beq.n	8010160 <netconn_alloc+0x48>
 8010156:	2b20      	cmp	r3, #32
 8010158:	d105      	bne.n	8010166 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 801015a:	2306      	movs	r3, #6
 801015c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 801015e:	e00a      	b.n	8010176 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8010160:	2306      	movs	r3, #6
 8010162:	617b      	str	r3, [r7, #20]
      break;
 8010164:	e007      	b.n	8010176 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8010166:	4b20      	ldr	r3, [pc, #128]	@ (80101e8 <netconn_alloc+0xd0>)
 8010168:	f240 22e5 	movw	r2, #741	@ 0x2e5
 801016c:	491f      	ldr	r1, [pc, #124]	@ (80101ec <netconn_alloc+0xd4>)
 801016e:	4820      	ldr	r0, [pc, #128]	@ (80101f0 <netconn_alloc+0xd8>)
 8010170:	f00d f92c 	bl	801d3cc <iprintf>
      goto free_and_return;
 8010174:	e02f      	b.n	80101d6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	3310      	adds	r3, #16
 801017a:	6979      	ldr	r1, [r7, #20]
 801017c:	4618      	mov	r0, r3
 801017e:	f00b ffef 	bl	801c160 <sys_mbox_new>
 8010182:	4603      	mov	r3, r0
 8010184:	2b00      	cmp	r3, #0
 8010186:	d125      	bne.n	80101d4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	330c      	adds	r3, #12
 801018c:	2100      	movs	r1, #0
 801018e:	4618      	mov	r0, r3
 8010190:	f00c f8ad 	bl	801c2ee <sys_sem_new>
 8010194:	4603      	mov	r3, r0
 8010196:	2b00      	cmp	r3, #0
 8010198:	d005      	beq.n	80101a6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	3310      	adds	r3, #16
 801019e:	4618      	mov	r0, r3
 80101a0:	f00c f800 	bl	801c1a4 <sys_mbox_free>
    goto free_and_return;
 80101a4:	e017      	b.n	80101d6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	3314      	adds	r3, #20
 80101aa:	4618      	mov	r0, r3
 80101ac:	f00c f892 	bl	801c2d4 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	2200      	movs	r2, #0
 80101b4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	f04f 32ff 	mov.w	r2, #4294967295
 80101bc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	683a      	ldr	r2, [r7, #0]
 80101c2:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2200      	movs	r2, #0
 80101c8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	7cfa      	ldrb	r2, [r7, #19]
 80101ce:	771a      	strb	r2, [r3, #28]
  return conn;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	e005      	b.n	80101e0 <netconn_alloc+0xc8>
    goto free_and_return;
 80101d4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80101d6:	68f9      	ldr	r1, [r7, #12]
 80101d8:	2007      	movs	r0, #7
 80101da:	f001 fec1 	bl	8011f60 <memp_free>
  return NULL;
 80101de:	2300      	movs	r3, #0
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3718      	adds	r7, #24
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}
 80101e8:	0801eab8 	.word	0x0801eab8
 80101ec:	0801ecbc 	.word	0x0801ecbc
 80101f0:	0801eafc 	.word	0x0801eafc

080101f4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b082      	sub	sp, #8
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	685b      	ldr	r3, [r3, #4]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d006      	beq.n	8010212 <netconn_free+0x1e>
 8010204:	4b1b      	ldr	r3, [pc, #108]	@ (8010274 <netconn_free+0x80>)
 8010206:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801020a:	491b      	ldr	r1, [pc, #108]	@ (8010278 <netconn_free+0x84>)
 801020c:	481b      	ldr	r0, [pc, #108]	@ (801027c <netconn_free+0x88>)
 801020e:	f00d f8dd 	bl	801d3cc <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	3310      	adds	r3, #16
 8010216:	4618      	mov	r0, r3
 8010218:	f00c f84b 	bl	801c2b2 <sys_mbox_valid>
 801021c:	4603      	mov	r3, r0
 801021e:	2b00      	cmp	r3, #0
 8010220:	d006      	beq.n	8010230 <netconn_free+0x3c>
 8010222:	4b14      	ldr	r3, [pc, #80]	@ (8010274 <netconn_free+0x80>)
 8010224:	f240 3223 	movw	r2, #803	@ 0x323
 8010228:	4915      	ldr	r1, [pc, #84]	@ (8010280 <netconn_free+0x8c>)
 801022a:	4814      	ldr	r0, [pc, #80]	@ (801027c <netconn_free+0x88>)
 801022c:	f00d f8ce 	bl	801d3cc <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	3314      	adds	r3, #20
 8010234:	4618      	mov	r0, r3
 8010236:	f00c f83c 	bl	801c2b2 <sys_mbox_valid>
 801023a:	4603      	mov	r3, r0
 801023c:	2b00      	cmp	r3, #0
 801023e:	d006      	beq.n	801024e <netconn_free+0x5a>
 8010240:	4b0c      	ldr	r3, [pc, #48]	@ (8010274 <netconn_free+0x80>)
 8010242:	f240 3226 	movw	r2, #806	@ 0x326
 8010246:	490f      	ldr	r1, [pc, #60]	@ (8010284 <netconn_free+0x90>)
 8010248:	480c      	ldr	r0, [pc, #48]	@ (801027c <netconn_free+0x88>)
 801024a:	f00d f8bf 	bl	801d3cc <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	330c      	adds	r3, #12
 8010252:	4618      	mov	r0, r3
 8010254:	f00c f8b1 	bl	801c3ba <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	330c      	adds	r3, #12
 801025c:	4618      	mov	r0, r3
 801025e:	f00c f8ca 	bl	801c3f6 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8010262:	6879      	ldr	r1, [r7, #4]
 8010264:	2007      	movs	r0, #7
 8010266:	f001 fe7b 	bl	8011f60 <memp_free>
}
 801026a:	bf00      	nop
 801026c:	3708      	adds	r7, #8
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}
 8010272:	bf00      	nop
 8010274:	0801eab8 	.word	0x0801eab8
 8010278:	0801ece4 	.word	0x0801ece4
 801027c:	0801eafc 	.word	0x0801eafc
 8010280:	0801ed14 	.word	0x0801ed14
 8010284:	0801ed50 	.word	0x0801ed50

08010288 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b086      	sub	sp, #24
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	3310      	adds	r3, #16
 8010294:	4618      	mov	r0, r3
 8010296:	f00c f80c 	bl	801c2b2 <sys_mbox_valid>
 801029a:	4603      	mov	r3, r0
 801029c:	2b00      	cmp	r3, #0
 801029e:	d02f      	beq.n	8010300 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80102a0:	e018      	b.n	80102d4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	781b      	ldrb	r3, [r3, #0]
 80102a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80102aa:	2b10      	cmp	r3, #16
 80102ac:	d10e      	bne.n	80102cc <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80102ae:	693b      	ldr	r3, [r7, #16]
 80102b0:	f107 020f 	add.w	r2, r7, #15
 80102b4:	4611      	mov	r1, r2
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7ff fafe 	bl	800f8b8 <lwip_netconn_is_err_msg>
 80102bc:	4603      	mov	r3, r0
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d108      	bne.n	80102d4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80102c2:	693b      	ldr	r3, [r7, #16]
 80102c4:	4618      	mov	r0, r3
 80102c6:	f002 fcef 	bl	8012ca8 <pbuf_free>
 80102ca:	e003      	b.n	80102d4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	4618      	mov	r0, r3
 80102d0:	f000 fe92 	bl	8010ff8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	3310      	adds	r3, #16
 80102d8:	f107 0210 	add.w	r2, r7, #16
 80102dc:	4611      	mov	r1, r2
 80102de:	4618      	mov	r0, r3
 80102e0:	f00b ffcb 	bl	801c27a <sys_arch_mbox_tryfetch>
 80102e4:	4603      	mov	r3, r0
 80102e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ea:	d1da      	bne.n	80102a2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	3310      	adds	r3, #16
 80102f0:	4618      	mov	r0, r3
 80102f2:	f00b ff57 	bl	801c1a4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	3310      	adds	r3, #16
 80102fa:	4618      	mov	r0, r3
 80102fc:	f00b ffea 	bl	801c2d4 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	3314      	adds	r3, #20
 8010304:	4618      	mov	r0, r3
 8010306:	f00b ffd4 	bl	801c2b2 <sys_mbox_valid>
 801030a:	4603      	mov	r3, r0
 801030c:	2b00      	cmp	r3, #0
 801030e:	d034      	beq.n	801037a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8010310:	e01d      	b.n	801034e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8010312:	693b      	ldr	r3, [r7, #16]
 8010314:	f107 020e 	add.w	r2, r7, #14
 8010318:	4611      	mov	r1, r2
 801031a:	4618      	mov	r0, r3
 801031c:	f7ff facc 	bl	800f8b8 <lwip_netconn_is_err_msg>
 8010320:	4603      	mov	r3, r0
 8010322:	2b00      	cmp	r3, #0
 8010324:	d113      	bne.n	801034e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 801032a:	6978      	ldr	r0, [r7, #20]
 801032c:	f7ff ffac 	bl	8010288 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	685b      	ldr	r3, [r3, #4]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d007      	beq.n	8010348 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8010338:	697b      	ldr	r3, [r7, #20]
 801033a:	685b      	ldr	r3, [r3, #4]
 801033c:	4618      	mov	r0, r3
 801033e:	f003 faa3 	bl	8013888 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8010342:	697b      	ldr	r3, [r7, #20]
 8010344:	2200      	movs	r2, #0
 8010346:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8010348:	6978      	ldr	r0, [r7, #20]
 801034a:	f7ff ff53 	bl	80101f4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	3314      	adds	r3, #20
 8010352:	f107 0210 	add.w	r2, r7, #16
 8010356:	4611      	mov	r1, r2
 8010358:	4618      	mov	r0, r3
 801035a:	f00b ff8e 	bl	801c27a <sys_arch_mbox_tryfetch>
 801035e:	4603      	mov	r3, r0
 8010360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010364:	d1d5      	bne.n	8010312 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	3314      	adds	r3, #20
 801036a:	4618      	mov	r0, r3
 801036c:	f00b ff1a 	bl	801c1a4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	3314      	adds	r3, #20
 8010374:	4618      	mov	r0, r3
 8010376:	f00b ffad 	bl	801c2d4 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 801037a:	bf00      	nop
 801037c:	3718      	adds	r7, #24
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}
	...

08010384 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b086      	sub	sp, #24
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	460b      	mov	r3, r1
 801038e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8010390:	2300      	movs	r3, #0
 8010392:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d106      	bne.n	80103a8 <lwip_netconn_do_close_internal+0x24>
 801039a:	4b87      	ldr	r3, [pc, #540]	@ (80105b8 <lwip_netconn_do_close_internal+0x234>)
 801039c:	f240 32a2 	movw	r2, #930	@ 0x3a2
 80103a0:	4986      	ldr	r1, [pc, #536]	@ (80105bc <lwip_netconn_do_close_internal+0x238>)
 80103a2:	4887      	ldr	r0, [pc, #540]	@ (80105c0 <lwip_netconn_do_close_internal+0x23c>)
 80103a4:	f00d f812 	bl	801d3cc <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	781b      	ldrb	r3, [r3, #0]
 80103ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80103b0:	2b10      	cmp	r3, #16
 80103b2:	d006      	beq.n	80103c2 <lwip_netconn_do_close_internal+0x3e>
 80103b4:	4b80      	ldr	r3, [pc, #512]	@ (80105b8 <lwip_netconn_do_close_internal+0x234>)
 80103b6:	f240 32a3 	movw	r2, #931	@ 0x3a3
 80103ba:	4982      	ldr	r1, [pc, #520]	@ (80105c4 <lwip_netconn_do_close_internal+0x240>)
 80103bc:	4880      	ldr	r0, [pc, #512]	@ (80105c0 <lwip_netconn_do_close_internal+0x23c>)
 80103be:	f00d f805 	bl	801d3cc <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	785b      	ldrb	r3, [r3, #1]
 80103c6:	2b04      	cmp	r3, #4
 80103c8:	d006      	beq.n	80103d8 <lwip_netconn_do_close_internal+0x54>
 80103ca:	4b7b      	ldr	r3, [pc, #492]	@ (80105b8 <lwip_netconn_do_close_internal+0x234>)
 80103cc:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 80103d0:	497d      	ldr	r1, [pc, #500]	@ (80105c8 <lwip_netconn_do_close_internal+0x244>)
 80103d2:	487b      	ldr	r0, [pc, #492]	@ (80105c0 <lwip_netconn_do_close_internal+0x23c>)
 80103d4:	f00c fffa 	bl	801d3cc <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	685b      	ldr	r3, [r3, #4]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d106      	bne.n	80103ee <lwip_netconn_do_close_internal+0x6a>
 80103e0:	4b75      	ldr	r3, [pc, #468]	@ (80105b8 <lwip_netconn_do_close_internal+0x234>)
 80103e2:	f240 32a5 	movw	r2, #933	@ 0x3a5
 80103e6:	4979      	ldr	r1, [pc, #484]	@ (80105cc <lwip_netconn_do_close_internal+0x248>)
 80103e8:	4875      	ldr	r0, [pc, #468]	@ (80105c0 <lwip_netconn_do_close_internal+0x23c>)
 80103ea:	f00c ffef 	bl	801d3cc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6a1b      	ldr	r3, [r3, #32]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d106      	bne.n	8010404 <lwip_netconn_do_close_internal+0x80>
 80103f6:	4b70      	ldr	r3, [pc, #448]	@ (80105b8 <lwip_netconn_do_close_internal+0x234>)
 80103f8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80103fc:	4974      	ldr	r1, [pc, #464]	@ (80105d0 <lwip_netconn_do_close_internal+0x24c>)
 80103fe:	4870      	ldr	r0, [pc, #448]	@ (80105c0 <lwip_netconn_do_close_internal+0x23c>)
 8010400:	f00c ffe4 	bl	801d3cc <iprintf>

  tpcb = conn->pcb.tcp;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	685b      	ldr	r3, [r3, #4]
 8010408:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6a1b      	ldr	r3, [r3, #32]
 801040e:	7a1b      	ldrb	r3, [r3, #8]
 8010410:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8010412:	7bfb      	ldrb	r3, [r7, #15]
 8010414:	f003 0301 	and.w	r3, r3, #1
 8010418:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 801041a:	7bfb      	ldrb	r3, [r7, #15]
 801041c:	f003 0302 	and.w	r3, r3, #2
 8010420:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8010422:	7bfb      	ldrb	r3, [r7, #15]
 8010424:	2b03      	cmp	r3, #3
 8010426:	d102      	bne.n	801042e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8010428:	2301      	movs	r3, #1
 801042a:	75bb      	strb	r3, [r7, #22]
 801042c:	e01f      	b.n	801046e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 801042e:	7bbb      	ldrb	r3, [r7, #14]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d00e      	beq.n	8010452 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8010438:	2b05      	cmp	r3, #5
 801043a:	d007      	beq.n	801044c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 801043c:	693b      	ldr	r3, [r7, #16]
 801043e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8010440:	2b06      	cmp	r3, #6
 8010442:	d003      	beq.n	801044c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8010448:	2b08      	cmp	r3, #8
 801044a:	d102      	bne.n	8010452 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 801044c:	2301      	movs	r3, #1
 801044e:	75bb      	strb	r3, [r7, #22]
 8010450:	e00d      	b.n	801046e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8010452:	7b7b      	ldrb	r3, [r7, #13]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d008      	beq.n	801046a <lwip_netconn_do_close_internal+0xe6>
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	8b5b      	ldrh	r3, [r3, #26]
 801045c:	f003 0310 	and.w	r3, r3, #16
 8010460:	2b00      	cmp	r3, #0
 8010462:	d002      	beq.n	801046a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8010464:	2301      	movs	r3, #1
 8010466:	75bb      	strb	r3, [r7, #22]
 8010468:	e001      	b.n	801046e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 801046a:	2300      	movs	r3, #0
 801046c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 801046e:	7dbb      	ldrb	r3, [r7, #22]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d003      	beq.n	801047c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8010474:	2100      	movs	r1, #0
 8010476:	6938      	ldr	r0, [r7, #16]
 8010478:	f004 fa96 	bl	80149a8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 801047c:	693b      	ldr	r3, [r7, #16]
 801047e:	7d1b      	ldrb	r3, [r3, #20]
 8010480:	2b01      	cmp	r3, #1
 8010482:	d104      	bne.n	801048e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8010484:	2100      	movs	r1, #0
 8010486:	6938      	ldr	r0, [r7, #16]
 8010488:	f004 fb06 	bl	8014a98 <tcp_accept>
 801048c:	e01d      	b.n	80104ca <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 801048e:	7bbb      	ldrb	r3, [r7, #14]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d007      	beq.n	80104a4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8010494:	2100      	movs	r1, #0
 8010496:	6938      	ldr	r0, [r7, #16]
 8010498:	f004 fa98 	bl	80149cc <tcp_recv>
      tcp_accept(tpcb, NULL);
 801049c:	2100      	movs	r1, #0
 801049e:	6938      	ldr	r0, [r7, #16]
 80104a0:	f004 fafa 	bl	8014a98 <tcp_accept>
    }
    if (shut_tx) {
 80104a4:	7b7b      	ldrb	r3, [r7, #13]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d003      	beq.n	80104b2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80104aa:	2100      	movs	r1, #0
 80104ac:	6938      	ldr	r0, [r7, #16]
 80104ae:	f004 faaf 	bl	8014a10 <tcp_sent>
    }
    if (shut_close) {
 80104b2:	7dbb      	ldrb	r3, [r7, #22]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d008      	beq.n	80104ca <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80104b8:	2200      	movs	r2, #0
 80104ba:	2100      	movs	r1, #0
 80104bc:	6938      	ldr	r0, [r7, #16]
 80104be:	f004 fb03 	bl	8014ac8 <tcp_poll>
      tcp_err(tpcb, NULL);
 80104c2:	2100      	movs	r1, #0
 80104c4:	6938      	ldr	r0, [r7, #16]
 80104c6:	f004 fac5 	bl	8014a54 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80104ca:	7dbb      	ldrb	r3, [r7, #22]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d005      	beq.n	80104dc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80104d0:	6938      	ldr	r0, [r7, #16]
 80104d2:	f003 f893 	bl	80135fc <tcp_close>
 80104d6:	4603      	mov	r3, r0
 80104d8:	75fb      	strb	r3, [r7, #23]
 80104da:	e007      	b.n	80104ec <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80104dc:	7bbb      	ldrb	r3, [r7, #14]
 80104de:	7b7a      	ldrb	r2, [r7, #13]
 80104e0:	4619      	mov	r1, r3
 80104e2:	6938      	ldr	r0, [r7, #16]
 80104e4:	f003 f8b6 	bl	8013654 <tcp_shutdown>
 80104e8:	4603      	mov	r3, r0
 80104ea:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80104ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d102      	bne.n	80104fa <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80104f4:	2301      	movs	r3, #1
 80104f6:	757b      	strb	r3, [r7, #21]
 80104f8:	e016      	b.n	8010528 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80104fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80104fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010502:	d10f      	bne.n	8010524 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6a1b      	ldr	r3, [r3, #32]
 8010508:	7a5b      	ldrb	r3, [r3, #9]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d10c      	bne.n	8010528 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 801050e:	2301      	movs	r3, #1
 8010510:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8010512:	7dbb      	ldrb	r3, [r7, #22]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d007      	beq.n	8010528 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8010518:	6938      	ldr	r0, [r7, #16]
 801051a:	f003 f9b5 	bl	8013888 <tcp_abort>
          err = ERR_OK;
 801051e:	2300      	movs	r3, #0
 8010520:	75fb      	strb	r3, [r7, #23]
 8010522:	e001      	b.n	8010528 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8010524:	2301      	movs	r3, #1
 8010526:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8010528:	7d7b      	ldrb	r3, [r7, #21]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d052      	beq.n	80105d4 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6a1b      	ldr	r3, [r3, #32]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	330c      	adds	r3, #12
 8010536:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6a1b      	ldr	r3, [r3, #32]
 801053c:	7dfa      	ldrb	r2, [r7, #23]
 801053e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2200      	movs	r2, #0
 8010544:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2200      	movs	r2, #0
 801054a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 801054c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d129      	bne.n	80105a8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8010554:	7dbb      	ldrb	r3, [r7, #22]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d00c      	beq.n	8010574 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2200      	movs	r2, #0
 801055e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010564:	2b00      	cmp	r3, #0
 8010566:	d005      	beq.n	8010574 <lwip_netconn_do_close_internal+0x1f0>
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801056c:	2200      	movs	r2, #0
 801056e:	2104      	movs	r1, #4
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	4798      	blx	r3
      }
      if (shut_rx) {
 8010574:	7bbb      	ldrb	r3, [r7, #14]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d009      	beq.n	801058e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801057e:	2b00      	cmp	r3, #0
 8010580:	d005      	beq.n	801058e <lwip_netconn_do_close_internal+0x20a>
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010586:	2200      	movs	r2, #0
 8010588:	2100      	movs	r1, #0
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	4798      	blx	r3
      }
      if (shut_tx) {
 801058e:	7b7b      	ldrb	r3, [r7, #13]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d009      	beq.n	80105a8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010598:	2b00      	cmp	r3, #0
 801059a:	d005      	beq.n	80105a8 <lwip_netconn_do_close_internal+0x224>
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105a0:	2200      	movs	r2, #0
 80105a2:	2102      	movs	r1, #2
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80105a8:	78fb      	ldrb	r3, [r7, #3]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d002      	beq.n	80105b4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80105ae:	68b8      	ldr	r0, [r7, #8]
 80105b0:	f00b fef6 	bl	801c3a0 <sys_sem_signal>
    }
    return ERR_OK;
 80105b4:	2300      	movs	r3, #0
 80105b6:	e03c      	b.n	8010632 <lwip_netconn_do_close_internal+0x2ae>
 80105b8:	0801eab8 	.word	0x0801eab8
 80105bc:	0801ed8c 	.word	0x0801ed8c
 80105c0:	0801eafc 	.word	0x0801eafc
 80105c4:	0801ed9c 	.word	0x0801ed9c
 80105c8:	0801edbc 	.word	0x0801edbc
 80105cc:	0801ede0 	.word	0x0801ede0
 80105d0:	0801ec20 	.word	0x0801ec20
  }
  if (!close_finished) {
 80105d4:	7d7b      	ldrb	r3, [r7, #21]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d11e      	bne.n	8010618 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80105da:	693b      	ldr	r3, [r7, #16]
 80105dc:	7d1b      	ldrb	r3, [r3, #20]
 80105de:	2b01      	cmp	r3, #1
 80105e0:	d106      	bne.n	80105f0 <lwip_netconn_do_close_internal+0x26c>
 80105e2:	4b16      	ldr	r3, [pc, #88]	@ (801063c <lwip_netconn_do_close_internal+0x2b8>)
 80105e4:	f240 4241 	movw	r2, #1089	@ 0x441
 80105e8:	4915      	ldr	r1, [pc, #84]	@ (8010640 <lwip_netconn_do_close_internal+0x2bc>)
 80105ea:	4816      	ldr	r0, [pc, #88]	@ (8010644 <lwip_netconn_do_close_internal+0x2c0>)
 80105ec:	f00c feee 	bl	801d3cc <iprintf>
    if (shut_tx) {
 80105f0:	7b7b      	ldrb	r3, [r7, #13]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d003      	beq.n	80105fe <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 80105f6:	4914      	ldr	r1, [pc, #80]	@ (8010648 <lwip_netconn_do_close_internal+0x2c4>)
 80105f8:	6938      	ldr	r0, [r7, #16]
 80105fa:	f004 fa09 	bl	8014a10 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80105fe:	2201      	movs	r2, #1
 8010600:	4912      	ldr	r1, [pc, #72]	@ (801064c <lwip_netconn_do_close_internal+0x2c8>)
 8010602:	6938      	ldr	r0, [r7, #16]
 8010604:	f004 fa60 	bl	8014ac8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8010608:	4911      	ldr	r1, [pc, #68]	@ (8010650 <lwip_netconn_do_close_internal+0x2cc>)
 801060a:	6938      	ldr	r0, [r7, #16]
 801060c:	f004 fa22 	bl	8014a54 <tcp_err>
    tcp_arg(tpcb, conn);
 8010610:	6879      	ldr	r1, [r7, #4]
 8010612:	6938      	ldr	r0, [r7, #16]
 8010614:	f004 f9c8 	bl	80149a8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8010618:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d106      	bne.n	801062e <lwip_netconn_do_close_internal+0x2aa>
 8010620:	4b06      	ldr	r3, [pc, #24]	@ (801063c <lwip_netconn_do_close_internal+0x2b8>)
 8010622:	f240 424d 	movw	r2, #1101	@ 0x44d
 8010626:	490b      	ldr	r1, [pc, #44]	@ (8010654 <lwip_netconn_do_close_internal+0x2d0>)
 8010628:	4806      	ldr	r0, [pc, #24]	@ (8010644 <lwip_netconn_do_close_internal+0x2c0>)
 801062a:	f00c fecf 	bl	801d3cc <iprintf>
  return err;
 801062e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010632:	4618      	mov	r0, r3
 8010634:	3718      	adds	r7, #24
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
 801063a:	bf00      	nop
 801063c:	0801eab8 	.word	0x0801eab8
 8010640:	0801edf4 	.word	0x0801edf4
 8010644:	0801eafc 	.word	0x0801eafc
 8010648:	0800fbfd 	.word	0x0800fbfd
 801064c:	0800fb35 	.word	0x0800fb35
 8010650:	0800fca5 	.word	0x0800fca5
 8010654:	0801ee18 	.word	0x0801ee18

08010658 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b084      	sub	sp, #16
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	785b      	ldrb	r3, [r3, #1]
 801066a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 801066c:	7afb      	ldrb	r3, [r7, #11]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d00d      	beq.n	801068e <lwip_netconn_do_delconn+0x36>
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	781b      	ldrb	r3, [r3, #0]
 8010678:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801067c:	2b10      	cmp	r3, #16
 801067e:	d006      	beq.n	801068e <lwip_netconn_do_delconn+0x36>
 8010680:	4b60      	ldr	r3, [pc, #384]	@ (8010804 <lwip_netconn_do_delconn+0x1ac>)
 8010682:	f240 425e 	movw	r2, #1118	@ 0x45e
 8010686:	4960      	ldr	r1, [pc, #384]	@ (8010808 <lwip_netconn_do_delconn+0x1b0>)
 8010688:	4860      	ldr	r0, [pc, #384]	@ (801080c <lwip_netconn_do_delconn+0x1b4>)
 801068a:	f00c fe9f 	bl	801d3cc <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 801068e:	7afb      	ldrb	r3, [r7, #11]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d005      	beq.n	80106a0 <lwip_netconn_do_delconn+0x48>
 8010694:	7afb      	ldrb	r3, [r7, #11]
 8010696:	2b02      	cmp	r3, #2
 8010698:	d002      	beq.n	80106a0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 801069a:	7afb      	ldrb	r3, [r7, #11]
 801069c:	2b03      	cmp	r3, #3
 801069e:	d109      	bne.n	80106b4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80106a0:	7afb      	ldrb	r3, [r7, #11]
 80106a2:	2b03      	cmp	r3, #3
 80106a4:	d10a      	bne.n	80106bc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	7f1b      	ldrb	r3, [r3, #28]
 80106ac:	f003 0304 	and.w	r3, r3, #4
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d103      	bne.n	80106bc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	22fb      	movs	r2, #251	@ 0xfb
 80106b8:	711a      	strb	r2, [r3, #4]
 80106ba:	e097      	b.n	80107ec <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80106bc:	7afb      	ldrb	r3, [r7, #11]
 80106be:	2b03      	cmp	r3, #3
 80106c0:	d10d      	bne.n	80106de <lwip_netconn_do_delconn+0x86>
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	7f1b      	ldrb	r3, [r3, #28]
 80106c8:	f003 0304 	and.w	r3, r3, #4
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d106      	bne.n	80106de <lwip_netconn_do_delconn+0x86>
 80106d0:	4b4c      	ldr	r3, [pc, #304]	@ (8010804 <lwip_netconn_do_delconn+0x1ac>)
 80106d2:	f240 427a 	movw	r2, #1146	@ 0x47a
 80106d6:	494e      	ldr	r1, [pc, #312]	@ (8010810 <lwip_netconn_do_delconn+0x1b8>)
 80106d8:	484c      	ldr	r0, [pc, #304]	@ (801080c <lwip_netconn_do_delconn+0x1b4>)
 80106da:	f00c fe77 	bl	801d3cc <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	2200      	movs	r2, #0
 80106e2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7ff fdcd 	bl	8010288 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	685b      	ldr	r3, [r3, #4]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d05f      	beq.n	80107b8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	781b      	ldrb	r3, [r3, #0]
 80106fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010702:	2b10      	cmp	r3, #16
 8010704:	d00d      	beq.n	8010722 <lwip_netconn_do_delconn+0xca>
 8010706:	2b20      	cmp	r3, #32
 8010708:	d151      	bne.n	80107ae <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	685b      	ldr	r3, [r3, #4]
 8010710:	2200      	movs	r2, #0
 8010712:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	4618      	mov	r0, r3
 801071c:	f009 f9c4 	bl	8019aa8 <udp_remove>
          break;
 8010720:	e046      	b.n	80107b0 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	6a1b      	ldr	r3, [r3, #32]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d006      	beq.n	801073a <lwip_netconn_do_delconn+0xe2>
 801072c:	4b35      	ldr	r3, [pc, #212]	@ (8010804 <lwip_netconn_do_delconn+0x1ac>)
 801072e:	f240 4294 	movw	r2, #1172	@ 0x494
 8010732:	4938      	ldr	r1, [pc, #224]	@ (8010814 <lwip_netconn_do_delconn+0x1bc>)
 8010734:	4835      	ldr	r0, [pc, #212]	@ (801080c <lwip_netconn_do_delconn+0x1b4>)
 8010736:	f00c fe49 	bl	801d3cc <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	2204      	movs	r2, #4
 8010740:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	2203      	movs	r2, #3
 8010746:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	68fa      	ldr	r2, [r7, #12]
 801074e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	2100      	movs	r1, #0
 8010756:	4618      	mov	r0, r3
 8010758:	f7ff fe14 	bl	8010384 <lwip_netconn_do_close_internal>
 801075c:	4603      	mov	r3, r0
 801075e:	2b00      	cmp	r3, #0
 8010760:	d04b      	beq.n	80107fa <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	785b      	ldrb	r3, [r3, #1]
 8010768:	2b04      	cmp	r3, #4
 801076a:	d006      	beq.n	801077a <lwip_netconn_do_delconn+0x122>
 801076c:	4b25      	ldr	r3, [pc, #148]	@ (8010804 <lwip_netconn_do_delconn+0x1ac>)
 801076e:	f240 429a 	movw	r2, #1178	@ 0x49a
 8010772:	4929      	ldr	r1, [pc, #164]	@ (8010818 <lwip_netconn_do_delconn+0x1c0>)
 8010774:	4825      	ldr	r0, [pc, #148]	@ (801080c <lwip_netconn_do_delconn+0x1b4>)
 8010776:	f00c fe29 	bl	801d3cc <iprintf>
            UNLOCK_TCPIP_CORE();
 801077a:	4828      	ldr	r0, [pc, #160]	@ (801081c <lwip_netconn_do_delconn+0x1c4>)
 801077c:	f00b fe81 	bl	801c482 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	330c      	adds	r3, #12
 8010786:	2100      	movs	r1, #0
 8010788:	4618      	mov	r0, r3
 801078a:	f00b fdd8 	bl	801c33e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 801078e:	4823      	ldr	r0, [pc, #140]	@ (801081c <lwip_netconn_do_delconn+0x1c4>)
 8010790:	f00b fe68 	bl	801c464 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	785b      	ldrb	r3, [r3, #1]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d02d      	beq.n	80107fa <lwip_netconn_do_delconn+0x1a2>
 801079e:	4b19      	ldr	r3, [pc, #100]	@ (8010804 <lwip_netconn_do_delconn+0x1ac>)
 80107a0:	f240 429e 	movw	r2, #1182	@ 0x49e
 80107a4:	491c      	ldr	r1, [pc, #112]	@ (8010818 <lwip_netconn_do_delconn+0x1c0>)
 80107a6:	4819      	ldr	r0, [pc, #100]	@ (801080c <lwip_netconn_do_delconn+0x1b4>)
 80107a8:	f00c fe10 	bl	801d3cc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80107ac:	e025      	b.n	80107fa <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80107ae:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	2200      	movs	r2, #0
 80107b6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d007      	beq.n	80107d2 <lwip_netconn_do_delconn+0x17a>
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107c8:	68fa      	ldr	r2, [r7, #12]
 80107ca:	6810      	ldr	r0, [r2, #0]
 80107cc:	2200      	movs	r2, #0
 80107ce:	2100      	movs	r1, #0
 80107d0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d007      	beq.n	80107ec <lwip_netconn_do_delconn+0x194>
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107e2:	68fa      	ldr	r2, [r7, #12]
 80107e4:	6810      	ldr	r0, [r2, #0]
 80107e6:	2200      	movs	r2, #0
 80107e8:	2102      	movs	r1, #2
 80107ea:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	330c      	adds	r3, #12
 80107f2:	4618      	mov	r0, r3
 80107f4:	f00b fdee 	bl	801c3d4 <sys_sem_valid>
 80107f8:	e000      	b.n	80107fc <lwip_netconn_do_delconn+0x1a4>
          return;
 80107fa:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80107fc:	3710      	adds	r7, #16
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}
 8010802:	bf00      	nop
 8010804:	0801eab8 	.word	0x0801eab8
 8010808:	0801ee28 	.word	0x0801ee28
 801080c:	0801eafc 	.word	0x0801eafc
 8010810:	0801ee3c 	.word	0x0801ee3c
 8010814:	0801ee5c 	.word	0x0801ee5c
 8010818:	0801ee78 	.word	0x0801ee78
 801081c:	2000b358 	.word	0x2000b358

08010820 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b084      	sub	sp, #16
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	685b      	ldr	r3, [r3, #4]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d025      	beq.n	8010882 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010840:	2b10      	cmp	r3, #16
 8010842:	d00e      	beq.n	8010862 <lwip_netconn_do_bind+0x42>
 8010844:	2b20      	cmp	r3, #32
 8010846:	d119      	bne.n	801087c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	6858      	ldr	r0, [r3, #4]
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	6899      	ldr	r1, [r3, #8]
 8010852:	68bb      	ldr	r3, [r7, #8]
 8010854:	899b      	ldrh	r3, [r3, #12]
 8010856:	461a      	mov	r2, r3
 8010858:	f009 f87e 	bl	8019958 <udp_bind>
 801085c:	4603      	mov	r3, r0
 801085e:	73fb      	strb	r3, [r7, #15]
        break;
 8010860:	e011      	b.n	8010886 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	6858      	ldr	r0, [r3, #4]
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	6899      	ldr	r1, [r3, #8]
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	899b      	ldrh	r3, [r3, #12]
 8010870:	461a      	mov	r2, r3
 8010872:	f003 f815 	bl	80138a0 <tcp_bind>
 8010876:	4603      	mov	r3, r0
 8010878:	73fb      	strb	r3, [r7, #15]
        break;
 801087a:	e004      	b.n	8010886 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 801087c:	23fa      	movs	r3, #250	@ 0xfa
 801087e:	73fb      	strb	r3, [r7, #15]
        break;
 8010880:	e001      	b.n	8010886 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8010882:	23fa      	movs	r3, #250	@ 0xfa
 8010884:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	7bfa      	ldrb	r2, [r7, #15]
 801088a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801088c:	bf00      	nop
 801088e:	3710      	adds	r7, #16
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}

08010894 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b086      	sub	sp, #24
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80108a0:	697b      	ldr	r3, [r7, #20]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	685b      	ldr	r3, [r3, #4]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d07f      	beq.n	80109aa <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	781b      	ldrb	r3, [r3, #0]
 80108b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80108b4:	2b10      	cmp	r3, #16
 80108b6:	d175      	bne.n	80109a4 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	785b      	ldrb	r3, [r3, #1]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d165      	bne.n	801098e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	685b      	ldr	r3, [r3, #4]
 80108c8:	7d1b      	ldrb	r3, [r3, #20]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d002      	beq.n	80108d4 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80108ce:	23fa      	movs	r3, #250	@ 0xfa
 80108d0:	72fb      	strb	r3, [r7, #11]
 80108d2:	e06c      	b.n	80109ae <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80108d4:	23ff      	movs	r3, #255	@ 0xff
 80108d6:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	685b      	ldr	r3, [r3, #4]
 80108de:	f107 020b 	add.w	r2, r7, #11
 80108e2:	7cf9      	ldrb	r1, [r7, #19]
 80108e4:	4618      	mov	r0, r3
 80108e6:	f003 f893 	bl	8013a10 <tcp_listen_with_backlog_and_err>
 80108ea:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d05d      	beq.n	80109ae <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80108f2:	697b      	ldr	r3, [r7, #20]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	3310      	adds	r3, #16
 80108f8:	4618      	mov	r0, r3
 80108fa:	f00b fcda 	bl	801c2b2 <sys_mbox_valid>
 80108fe:	4603      	mov	r3, r0
 8010900:	2b00      	cmp	r3, #0
 8010902:	d00b      	beq.n	801091c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	3310      	adds	r3, #16
 801090a:	4618      	mov	r0, r3
 801090c:	f00b fc4a 	bl	801c1a4 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	3310      	adds	r3, #16
 8010916:	4618      	mov	r0, r3
 8010918:	f00b fcdc 	bl	801c2d4 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 801091c:	2300      	movs	r3, #0
 801091e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	3314      	adds	r3, #20
 8010926:	4618      	mov	r0, r3
 8010928:	f00b fcc3 	bl	801c2b2 <sys_mbox_valid>
 801092c:	4603      	mov	r3, r0
 801092e:	2b00      	cmp	r3, #0
 8010930:	d108      	bne.n	8010944 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	3314      	adds	r3, #20
 8010938:	2106      	movs	r1, #6
 801093a:	4618      	mov	r0, r3
 801093c:	f00b fc10 	bl	801c160 <sys_mbox_new>
 8010940:	4603      	mov	r3, r0
 8010942:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8010944:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d118      	bne.n	801097e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 801094c:	697b      	ldr	r3, [r7, #20]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	2202      	movs	r2, #2
 8010952:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	68fa      	ldr	r2, [r7, #12]
 801095a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	685a      	ldr	r2, [r3, #4]
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	4619      	mov	r1, r3
 8010968:	4610      	mov	r0, r2
 801096a:	f004 f81d 	bl	80149a8 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	685b      	ldr	r3, [r3, #4]
 8010974:	4912      	ldr	r1, [pc, #72]	@ (80109c0 <lwip_netconn_do_listen+0x12c>)
 8010976:	4618      	mov	r0, r3
 8010978:	f004 f88e 	bl	8014a98 <tcp_accept>
 801097c:	e017      	b.n	80109ae <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 801097e:	68f8      	ldr	r0, [r7, #12]
 8010980:	f002 fe3c 	bl	80135fc <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8010984:	697b      	ldr	r3, [r7, #20]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	2200      	movs	r2, #0
 801098a:	605a      	str	r2, [r3, #4]
 801098c:	e00f      	b.n	80109ae <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	785b      	ldrb	r3, [r3, #1]
 8010994:	2b02      	cmp	r3, #2
 8010996:	d102      	bne.n	801099e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8010998:	2300      	movs	r3, #0
 801099a:	72fb      	strb	r3, [r7, #11]
 801099c:	e007      	b.n	80109ae <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 801099e:	23f5      	movs	r3, #245	@ 0xf5
 80109a0:	72fb      	strb	r3, [r7, #11]
 80109a2:	e004      	b.n	80109ae <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80109a4:	23f0      	movs	r3, #240	@ 0xf0
 80109a6:	72fb      	strb	r3, [r7, #11]
 80109a8:	e001      	b.n	80109ae <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80109aa:	23f5      	movs	r3, #245	@ 0xf5
 80109ac:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80109ae:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80109b6:	bf00      	nop
 80109b8:	3718      	adds	r7, #24
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}
 80109be:	bf00      	nop
 80109c0:	0800fea1 	.word	0x0800fea1

080109c4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b086      	sub	sp, #24
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80109d0:	693b      	ldr	r3, [r7, #16]
 80109d2:	2200      	movs	r2, #0
 80109d4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80109d6:	693b      	ldr	r3, [r7, #16]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	685b      	ldr	r3, [r3, #4]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d022      	beq.n	8010a26 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	781b      	ldrb	r3, [r3, #0]
 80109e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80109ea:	2b10      	cmp	r3, #16
 80109ec:	d11b      	bne.n	8010a26 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80109ee:	693b      	ldr	r3, [r7, #16]
 80109f0:	689b      	ldr	r3, [r3, #8]
 80109f2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80109fa:	d202      	bcs.n	8010a02 <lwip_netconn_do_recv+0x3e>
 80109fc:	697b      	ldr	r3, [r7, #20]
 80109fe:	b29b      	uxth	r3, r3
 8010a00:	e001      	b.n	8010a06 <lwip_netconn_do_recv+0x42>
 8010a02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010a06:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	685b      	ldr	r3, [r3, #4]
 8010a0e:	89fa      	ldrh	r2, [r7, #14]
 8010a10:	4611      	mov	r1, r2
 8010a12:	4618      	mov	r0, r3
 8010a14:	f003 f900 	bl	8013c18 <tcp_recved>
        remaining -= recved;
 8010a18:	89fb      	ldrh	r3, [r7, #14]
 8010a1a:	697a      	ldr	r2, [r7, #20]
 8010a1c:	1ad3      	subs	r3, r2, r3
 8010a1e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d1e6      	bne.n	80109f4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010a26:	bf00      	nop
 8010a28:	3718      	adds	r7, #24
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}
	...

08010a30 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b088      	sub	sp, #32
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	460b      	mov	r3, r1
 8010a3a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d106      	bne.n	8010a54 <lwip_netconn_do_writemore+0x24>
 8010a46:	4b96      	ldr	r3, [pc, #600]	@ (8010ca0 <lwip_netconn_do_writemore+0x270>)
 8010a48:	f240 6273 	movw	r2, #1651	@ 0x673
 8010a4c:	4995      	ldr	r1, [pc, #596]	@ (8010ca4 <lwip_netconn_do_writemore+0x274>)
 8010a4e:	4896      	ldr	r0, [pc, #600]	@ (8010ca8 <lwip_netconn_do_writemore+0x278>)
 8010a50:	f00c fcbc 	bl	801d3cc <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	785b      	ldrb	r3, [r3, #1]
 8010a58:	2b01      	cmp	r3, #1
 8010a5a:	d006      	beq.n	8010a6a <lwip_netconn_do_writemore+0x3a>
 8010a5c:	4b90      	ldr	r3, [pc, #576]	@ (8010ca0 <lwip_netconn_do_writemore+0x270>)
 8010a5e:	f240 6274 	movw	r2, #1652	@ 0x674
 8010a62:	4992      	ldr	r1, [pc, #584]	@ (8010cac <lwip_netconn_do_writemore+0x27c>)
 8010a64:	4890      	ldr	r0, [pc, #576]	@ (8010ca8 <lwip_netconn_do_writemore+0x278>)
 8010a66:	f00c fcb1 	bl	801d3cc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6a1b      	ldr	r3, [r3, #32]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d106      	bne.n	8010a80 <lwip_netconn_do_writemore+0x50>
 8010a72:	4b8b      	ldr	r3, [pc, #556]	@ (8010ca0 <lwip_netconn_do_writemore+0x270>)
 8010a74:	f240 6275 	movw	r2, #1653	@ 0x675
 8010a78:	498d      	ldr	r1, [pc, #564]	@ (8010cb0 <lwip_netconn_do_writemore+0x280>)
 8010a7a:	488b      	ldr	r0, [pc, #556]	@ (8010ca8 <lwip_netconn_do_writemore+0x278>)
 8010a7c:	f00c fca6 	bl	801d3cc <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	685b      	ldr	r3, [r3, #4]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d106      	bne.n	8010a96 <lwip_netconn_do_writemore+0x66>
 8010a88:	4b85      	ldr	r3, [pc, #532]	@ (8010ca0 <lwip_netconn_do_writemore+0x270>)
 8010a8a:	f240 6276 	movw	r2, #1654	@ 0x676
 8010a8e:	4989      	ldr	r1, [pc, #548]	@ (8010cb4 <lwip_netconn_do_writemore+0x284>)
 8010a90:	4885      	ldr	r0, [pc, #532]	@ (8010ca8 <lwip_netconn_do_writemore+0x278>)
 8010a92:	f00c fc9b 	bl	801d3cc <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6a1b      	ldr	r3, [r3, #32]
 8010a9a:	699a      	ldr	r2, [r3, #24]
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	6a1b      	ldr	r3, [r3, #32]
 8010aa0:	695b      	ldr	r3, [r3, #20]
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d306      	bcc.n	8010ab4 <lwip_netconn_do_writemore+0x84>
 8010aa6:	4b7e      	ldr	r3, [pc, #504]	@ (8010ca0 <lwip_netconn_do_writemore+0x270>)
 8010aa8:	f240 6277 	movw	r2, #1655	@ 0x677
 8010aac:	4982      	ldr	r1, [pc, #520]	@ (8010cb8 <lwip_netconn_do_writemore+0x288>)
 8010aae:	487e      	ldr	r0, [pc, #504]	@ (8010ca8 <lwip_netconn_do_writemore+0x278>)
 8010ab0:	f00c fc8c 	bl	801d3cc <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	6a1b      	ldr	r3, [r3, #32]
 8010ab8:	899b      	ldrh	r3, [r3, #12]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d106      	bne.n	8010acc <lwip_netconn_do_writemore+0x9c>
 8010abe:	4b78      	ldr	r3, [pc, #480]	@ (8010ca0 <lwip_netconn_do_writemore+0x270>)
 8010ac0:	f240 6279 	movw	r2, #1657	@ 0x679
 8010ac4:	497d      	ldr	r1, [pc, #500]	@ (8010cbc <lwip_netconn_do_writemore+0x28c>)
 8010ac6:	4878      	ldr	r0, [pc, #480]	@ (8010ca8 <lwip_netconn_do_writemore+0x278>)
 8010ac8:	f00c fc80 	bl	801d3cc <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6a1b      	ldr	r3, [r3, #32]
 8010ad0:	7f1b      	ldrb	r3, [r3, #28]
 8010ad2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	7f1b      	ldrb	r3, [r3, #28]
 8010ad8:	f003 0302 	and.w	r3, r3, #2
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d104      	bne.n	8010aea <lwip_netconn_do_writemore+0xba>
 8010ae0:	7ebb      	ldrb	r3, [r7, #26]
 8010ae2:	f003 0304 	and.w	r3, r3, #4
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d001      	beq.n	8010aee <lwip_netconn_do_writemore+0xbe>
 8010aea:	2301      	movs	r3, #1
 8010aec:	e000      	b.n	8010af0 <lwip_netconn_do_writemore+0xc0>
 8010aee:	2300      	movs	r3, #0
 8010af0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	6a1b      	ldr	r3, [r3, #32]
 8010af6:	689b      	ldr	r3, [r3, #8]
 8010af8:	681a      	ldr	r2, [r3, #0]
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6a1b      	ldr	r3, [r3, #32]
 8010afe:	691b      	ldr	r3, [r3, #16]
 8010b00:	4413      	add	r3, r2
 8010b02:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	6a1b      	ldr	r3, [r3, #32]
 8010b08:	689b      	ldr	r3, [r3, #8]
 8010b0a:	685a      	ldr	r2, [r3, #4]
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6a1b      	ldr	r3, [r3, #32]
 8010b10:	691b      	ldr	r3, [r3, #16]
 8010b12:	1ad3      	subs	r3, r2, r3
 8010b14:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8010b16:	693b      	ldr	r3, [r7, #16]
 8010b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010b1c:	d307      	bcc.n	8010b2e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8010b1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010b22:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010b24:	7ebb      	ldrb	r3, [r7, #26]
 8010b26:	f043 0302 	orr.w	r3, r3, #2
 8010b2a:	76bb      	strb	r3, [r7, #26]
 8010b2c:	e001      	b.n	8010b32 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	685b      	ldr	r3, [r3, #4]
 8010b36:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010b3a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8010b3c:	89fa      	ldrh	r2, [r7, #14]
 8010b3e:	8bbb      	ldrh	r3, [r7, #28]
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d216      	bcs.n	8010b72 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8010b44:	89fb      	ldrh	r3, [r7, #14]
 8010b46:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8010b48:	7e3b      	ldrb	r3, [r7, #24]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d00d      	beq.n	8010b6a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8010b4e:	8bbb      	ldrh	r3, [r7, #28]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d10e      	bne.n	8010b72 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	6a1b      	ldr	r3, [r3, #32]
 8010b58:	699b      	ldr	r3, [r3, #24]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d102      	bne.n	8010b64 <lwip_netconn_do_writemore+0x134>
 8010b5e:	f06f 0306 	mvn.w	r3, #6
 8010b62:	e000      	b.n	8010b66 <lwip_netconn_do_writemore+0x136>
 8010b64:	2300      	movs	r3, #0
 8010b66:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8010b68:	e07d      	b.n	8010c66 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8010b6a:	7ebb      	ldrb	r3, [r7, #26]
 8010b6c:	f043 0302 	orr.w	r3, r3, #2
 8010b70:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	6a1b      	ldr	r3, [r3, #32]
 8010b76:	691a      	ldr	r2, [r3, #16]
 8010b78:	8bbb      	ldrh	r3, [r7, #28]
 8010b7a:	441a      	add	r2, r3
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6a1b      	ldr	r3, [r3, #32]
 8010b80:	689b      	ldr	r3, [r3, #8]
 8010b82:	685b      	ldr	r3, [r3, #4]
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d906      	bls.n	8010b96 <lwip_netconn_do_writemore+0x166>
 8010b88:	4b45      	ldr	r3, [pc, #276]	@ (8010ca0 <lwip_netconn_do_writemore+0x270>)
 8010b8a:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8010b8e:	494c      	ldr	r1, [pc, #304]	@ (8010cc0 <lwip_netconn_do_writemore+0x290>)
 8010b90:	4845      	ldr	r0, [pc, #276]	@ (8010ca8 <lwip_netconn_do_writemore+0x278>)
 8010b92:	f00c fc1b 	bl	801d3cc <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8010b96:	8bbb      	ldrh	r3, [r7, #28]
 8010b98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	d103      	bne.n	8010ba8 <lwip_netconn_do_writemore+0x178>
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010ba6:	d209      	bcs.n	8010bbc <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8010ba8:	693b      	ldr	r3, [r7, #16]
 8010baa:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8010bac:	8bba      	ldrh	r2, [r7, #28]
 8010bae:	429a      	cmp	r2, r3
 8010bb0:	d10b      	bne.n	8010bca <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	6a1b      	ldr	r3, [r3, #32]
 8010bb6:	899b      	ldrh	r3, [r3, #12]
 8010bb8:	2b01      	cmp	r3, #1
 8010bba:	d906      	bls.n	8010bca <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010bc0:	7ebb      	ldrb	r3, [r7, #26]
 8010bc2:	f043 0302 	orr.w	r3, r3, #2
 8010bc6:	76bb      	strb	r3, [r7, #26]
 8010bc8:	e001      	b.n	8010bce <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6858      	ldr	r0, [r3, #4]
 8010bd2:	7ebb      	ldrb	r3, [r7, #26]
 8010bd4:	8bba      	ldrh	r2, [r7, #28]
 8010bd6:	6979      	ldr	r1, [r7, #20]
 8010bd8:	f006 fe22 	bl	8017820 <tcp_write>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8010be0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d12c      	bne.n	8010c42 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	6a1b      	ldr	r3, [r3, #32]
 8010bec:	6999      	ldr	r1, [r3, #24]
 8010bee:	8bba      	ldrh	r2, [r7, #28]
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6a1b      	ldr	r3, [r3, #32]
 8010bf4:	440a      	add	r2, r1
 8010bf6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	6a1b      	ldr	r3, [r3, #32]
 8010bfc:	6919      	ldr	r1, [r3, #16]
 8010bfe:	8bba      	ldrh	r2, [r7, #28]
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	6a1b      	ldr	r3, [r3, #32]
 8010c04:	440a      	add	r2, r1
 8010c06:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	6a1b      	ldr	r3, [r3, #32]
 8010c0c:	691a      	ldr	r2, [r3, #16]
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6a1b      	ldr	r3, [r3, #32]
 8010c12:	689b      	ldr	r3, [r3, #8]
 8010c14:	685b      	ldr	r3, [r3, #4]
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d113      	bne.n	8010c42 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6a1b      	ldr	r3, [r3, #32]
 8010c1e:	899a      	ldrh	r2, [r3, #12]
 8010c20:	3a01      	subs	r2, #1
 8010c22:	b292      	uxth	r2, r2
 8010c24:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	6a1b      	ldr	r3, [r3, #32]
 8010c2a:	899b      	ldrh	r3, [r3, #12]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d008      	beq.n	8010c42 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	6a1b      	ldr	r3, [r3, #32]
 8010c34:	689a      	ldr	r2, [r3, #8]
 8010c36:	3208      	adds	r2, #8
 8010c38:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	6a1b      	ldr	r3, [r3, #32]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8010c42:	7e7b      	ldrb	r3, [r7, #25]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d004      	beq.n	8010c52 <lwip_netconn_do_writemore+0x222>
 8010c48:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	f43f af50 	beq.w	8010af2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8010c52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d004      	beq.n	8010c64 <lwip_netconn_do_writemore+0x234>
 8010c5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c62:	d146      	bne.n	8010cf2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8010c64:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8010c66:	7e3b      	ldrb	r3, [r7, #24]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d02b      	beq.n	8010cc4 <lwip_netconn_do_writemore+0x294>
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	6a1b      	ldr	r3, [r3, #32]
 8010c70:	699a      	ldr	r2, [r3, #24]
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6a1b      	ldr	r3, [r3, #32]
 8010c76:	695b      	ldr	r3, [r3, #20]
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	d223      	bcs.n	8010cc4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d005      	beq.n	8010c90 <lwip_netconn_do_writemore+0x260>
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c88:	2200      	movs	r2, #0
 8010c8a:	2103      	movs	r1, #3
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	7f1b      	ldrb	r3, [r3, #28]
 8010c94:	f043 0310 	orr.w	r3, r3, #16
 8010c98:	b2da      	uxtb	r2, r3
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	771a      	strb	r2, [r3, #28]
 8010c9e:	e028      	b.n	8010cf2 <lwip_netconn_do_writemore+0x2c2>
 8010ca0:	0801eab8 	.word	0x0801eab8
 8010ca4:	0801ec10 	.word	0x0801ec10
 8010ca8:	0801eafc 	.word	0x0801eafc
 8010cac:	0801ef18 	.word	0x0801ef18
 8010cb0:	0801ec20 	.word	0x0801ec20
 8010cb4:	0801ef38 	.word	0x0801ef38
 8010cb8:	0801ef50 	.word	0x0801ef50
 8010cbc:	0801ef90 	.word	0x0801ef90
 8010cc0:	0801efb8 	.word	0x0801efb8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	685b      	ldr	r3, [r3, #4]
 8010cc8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010ccc:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8010cd0:	d305      	bcc.n	8010cde <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010cda:	2b04      	cmp	r3, #4
 8010cdc:	d909      	bls.n	8010cf2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d005      	beq.n	8010cf2 <lwip_netconn_do_writemore+0x2c2>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cea:	2200      	movs	r2, #0
 8010cec:	2103      	movs	r1, #3
 8010cee:	6878      	ldr	r0, [r7, #4]
 8010cf0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8010cf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d11d      	bne.n	8010d36 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6a1b      	ldr	r3, [r3, #32]
 8010cfe:	699a      	ldr	r2, [r3, #24]
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6a1b      	ldr	r3, [r3, #32]
 8010d04:	695b      	ldr	r3, [r3, #20]
 8010d06:	429a      	cmp	r2, r3
 8010d08:	d002      	beq.n	8010d10 <lwip_netconn_do_writemore+0x2e0>
 8010d0a:	7e3b      	ldrb	r3, [r7, #24]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d001      	beq.n	8010d14 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8010d10:	2301      	movs	r3, #1
 8010d12:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	685b      	ldr	r3, [r3, #4]
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f007 fb6b 	bl	80183f4 <tcp_output>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8010d22:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010d26:	f113 0f04 	cmn.w	r3, #4
 8010d2a:	d12c      	bne.n	8010d86 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010d2c:	7b3b      	ldrb	r3, [r7, #12]
 8010d2e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010d30:	2301      	movs	r3, #1
 8010d32:	76fb      	strb	r3, [r7, #27]
 8010d34:	e027      	b.n	8010d86 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8010d36:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d3e:	d120      	bne.n	8010d82 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	685b      	ldr	r3, [r3, #4]
 8010d44:	4618      	mov	r0, r3
 8010d46:	f007 fb55 	bl	80183f4 <tcp_output>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8010d4e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010d52:	f113 0f04 	cmn.w	r3, #4
 8010d56:	d104      	bne.n	8010d62 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010d58:	7b7b      	ldrb	r3, [r7, #13]
 8010d5a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	76fb      	strb	r3, [r7, #27]
 8010d60:	e011      	b.n	8010d86 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8010d62:	7e3b      	ldrb	r3, [r7, #24]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d00e      	beq.n	8010d86 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6a1b      	ldr	r3, [r3, #32]
 8010d6c:	699b      	ldr	r3, [r3, #24]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d102      	bne.n	8010d78 <lwip_netconn_do_writemore+0x348>
 8010d72:	f06f 0306 	mvn.w	r3, #6
 8010d76:	e000      	b.n	8010d7a <lwip_netconn_do_writemore+0x34a>
 8010d78:	2300      	movs	r3, #0
 8010d7a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	76fb      	strb	r3, [r7, #27]
 8010d80:	e001      	b.n	8010d86 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8010d82:	2301      	movs	r3, #1
 8010d84:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8010d86:	7efb      	ldrb	r3, [r7, #27]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d015      	beq.n	8010db8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	6a1b      	ldr	r3, [r3, #32]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	330c      	adds	r3, #12
 8010d94:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6a1b      	ldr	r3, [r3, #32]
 8010d9a:	7ffa      	ldrb	r2, [r7, #31]
 8010d9c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2200      	movs	r2, #0
 8010da2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2200      	movs	r2, #0
 8010da8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8010daa:	78fb      	ldrb	r3, [r7, #3]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d006      	beq.n	8010dbe <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8010db0:	68b8      	ldr	r0, [r7, #8]
 8010db2:	f00b faf5 	bl	801c3a0 <sys_sem_signal>
 8010db6:	e002      	b.n	8010dbe <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8010db8:	f04f 33ff 	mov.w	r3, #4294967295
 8010dbc:	e000      	b.n	8010dc0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8010dbe:	2300      	movs	r3, #0
}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3720      	adds	r7, #32
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}

08010dc8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b084      	sub	sp, #16
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7fe fd1c 	bl	800f816 <netconn_err>
 8010dde:	4603      	mov	r3, r0
 8010de0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d166      	bne.n	8010eb8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8010dea:	68bb      	ldr	r3, [r7, #8]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	781b      	ldrb	r3, [r3, #0]
 8010df0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010df4:	2b10      	cmp	r3, #16
 8010df6:	d15d      	bne.n	8010eb4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	785b      	ldrb	r3, [r3, #1]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d002      	beq.n	8010e08 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8010e02:	23fb      	movs	r3, #251	@ 0xfb
 8010e04:	73fb      	strb	r3, [r7, #15]
 8010e06:	e057      	b.n	8010eb8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d04d      	beq.n	8010eae <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	2201      	movs	r2, #1
 8010e18:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	6a1b      	ldr	r3, [r3, #32]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d006      	beq.n	8010e32 <lwip_netconn_do_write+0x6a>
 8010e24:	4b28      	ldr	r3, [pc, #160]	@ (8010ec8 <lwip_netconn_do_write+0x100>)
 8010e26:	f240 7223 	movw	r2, #1827	@ 0x723
 8010e2a:	4928      	ldr	r1, [pc, #160]	@ (8010ecc <lwip_netconn_do_write+0x104>)
 8010e2c:	4828      	ldr	r0, [pc, #160]	@ (8010ed0 <lwip_netconn_do_write+0x108>)
 8010e2e:	f00c facd 	bl	801d3cc <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	695b      	ldr	r3, [r3, #20]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d106      	bne.n	8010e48 <lwip_netconn_do_write+0x80>
 8010e3a:	4b23      	ldr	r3, [pc, #140]	@ (8010ec8 <lwip_netconn_do_write+0x100>)
 8010e3c:	f240 7224 	movw	r2, #1828	@ 0x724
 8010e40:	4924      	ldr	r1, [pc, #144]	@ (8010ed4 <lwip_netconn_do_write+0x10c>)
 8010e42:	4823      	ldr	r0, [pc, #140]	@ (8010ed0 <lwip_netconn_do_write+0x108>)
 8010e44:	f00c fac2 	bl	801d3cc <iprintf>
        msg->conn->current_msg = msg;
 8010e48:	68bb      	ldr	r3, [r7, #8]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	68ba      	ldr	r2, [r7, #8]
 8010e4e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	2100      	movs	r1, #0
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7ff fdea 	bl	8010a30 <lwip_netconn_do_writemore>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d02e      	beq.n	8010ec0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	785b      	ldrb	r3, [r3, #1]
 8010e68:	2b01      	cmp	r3, #1
 8010e6a:	d006      	beq.n	8010e7a <lwip_netconn_do_write+0xb2>
 8010e6c:	4b16      	ldr	r3, [pc, #88]	@ (8010ec8 <lwip_netconn_do_write+0x100>)
 8010e6e:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 8010e72:	4919      	ldr	r1, [pc, #100]	@ (8010ed8 <lwip_netconn_do_write+0x110>)
 8010e74:	4816      	ldr	r0, [pc, #88]	@ (8010ed0 <lwip_netconn_do_write+0x108>)
 8010e76:	f00c faa9 	bl	801d3cc <iprintf>
          UNLOCK_TCPIP_CORE();
 8010e7a:	4818      	ldr	r0, [pc, #96]	@ (8010edc <lwip_netconn_do_write+0x114>)
 8010e7c:	f00b fb01 	bl	801c482 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	330c      	adds	r3, #12
 8010e86:	2100      	movs	r1, #0
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f00b fa58 	bl	801c33e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8010e8e:	4813      	ldr	r0, [pc, #76]	@ (8010edc <lwip_netconn_do_write+0x114>)
 8010e90:	f00b fae8 	bl	801c464 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8010e94:	68bb      	ldr	r3, [r7, #8]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	785b      	ldrb	r3, [r3, #1]
 8010e9a:	2b01      	cmp	r3, #1
 8010e9c:	d110      	bne.n	8010ec0 <lwip_netconn_do_write+0xf8>
 8010e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8010ec8 <lwip_netconn_do_write+0x100>)
 8010ea0:	f240 722c 	movw	r2, #1836	@ 0x72c
 8010ea4:	490c      	ldr	r1, [pc, #48]	@ (8010ed8 <lwip_netconn_do_write+0x110>)
 8010ea6:	480a      	ldr	r0, [pc, #40]	@ (8010ed0 <lwip_netconn_do_write+0x108>)
 8010ea8:	f00c fa90 	bl	801d3cc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8010eac:	e008      	b.n	8010ec0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8010eae:	23f5      	movs	r3, #245	@ 0xf5
 8010eb0:	73fb      	strb	r3, [r7, #15]
 8010eb2:	e001      	b.n	8010eb8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8010eb4:	23fa      	movs	r3, #250	@ 0xfa
 8010eb6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8010eb8:	68bb      	ldr	r3, [r7, #8]
 8010eba:	7bfa      	ldrb	r2, [r7, #15]
 8010ebc:	711a      	strb	r2, [r3, #4]
 8010ebe:	e000      	b.n	8010ec2 <lwip_netconn_do_write+0xfa>
        return;
 8010ec0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8010ec2:	3710      	adds	r7, #16
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}
 8010ec8:	0801eab8 	.word	0x0801eab8
 8010ecc:	0801ee5c 	.word	0x0801ee5c
 8010ed0:	0801eafc 	.word	0x0801eafc
 8010ed4:	0801efe4 	.word	0x0801efe4
 8010ed8:	0801ee78 	.word	0x0801ee78
 8010edc:	2000b358 	.word	0x2000b358

08010ee0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b084      	sub	sp, #16
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	785b      	ldrb	r3, [r3, #1]
 8010ef2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	685b      	ldr	r3, [r3, #4]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d069      	beq.n	8010fd2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8010f08:	2b10      	cmp	r3, #16
 8010f0a:	d162      	bne.n	8010fd2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010f10:	2b03      	cmp	r3, #3
 8010f12:	d002      	beq.n	8010f1a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010f14:	7afb      	ldrb	r3, [r7, #11]
 8010f16:	2b02      	cmp	r3, #2
 8010f18:	d05b      	beq.n	8010fd2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8010f1a:	7afb      	ldrb	r3, [r7, #11]
 8010f1c:	2b03      	cmp	r3, #3
 8010f1e:	d103      	bne.n	8010f28 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	22f5      	movs	r2, #245	@ 0xf5
 8010f24:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010f26:	e059      	b.n	8010fdc <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8010f28:	7afb      	ldrb	r3, [r7, #11]
 8010f2a:	2b01      	cmp	r3, #1
 8010f2c:	d103      	bne.n	8010f36 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	22fb      	movs	r2, #251	@ 0xfb
 8010f32:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010f34:	e052      	b.n	8010fdc <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	7a1b      	ldrb	r3, [r3, #8]
 8010f3a:	f003 0301 	and.w	r3, r3, #1
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d004      	beq.n	8010f4c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7ff f99e 	bl	8010288 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	6a1b      	ldr	r3, [r3, #32]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d006      	beq.n	8010f64 <lwip_netconn_do_close+0x84>
 8010f56:	4b23      	ldr	r3, [pc, #140]	@ (8010fe4 <lwip_netconn_do_close+0x104>)
 8010f58:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8010f5c:	4922      	ldr	r1, [pc, #136]	@ (8010fe8 <lwip_netconn_do_close+0x108>)
 8010f5e:	4823      	ldr	r0, [pc, #140]	@ (8010fec <lwip_netconn_do_close+0x10c>)
 8010f60:	f00c fa34 	bl	801d3cc <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	2204      	movs	r2, #4
 8010f6a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	68fa      	ldr	r2, [r7, #12]
 8010f72:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	2100      	movs	r1, #0
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7ff fa02 	bl	8010384 <lwip_netconn_do_close_internal>
 8010f80:	4603      	mov	r3, r0
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d029      	beq.n	8010fda <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	785b      	ldrb	r3, [r3, #1]
 8010f8c:	2b04      	cmp	r3, #4
 8010f8e:	d006      	beq.n	8010f9e <lwip_netconn_do_close+0xbe>
 8010f90:	4b14      	ldr	r3, [pc, #80]	@ (8010fe4 <lwip_netconn_do_close+0x104>)
 8010f92:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 8010f96:	4916      	ldr	r1, [pc, #88]	@ (8010ff0 <lwip_netconn_do_close+0x110>)
 8010f98:	4814      	ldr	r0, [pc, #80]	@ (8010fec <lwip_netconn_do_close+0x10c>)
 8010f9a:	f00c fa17 	bl	801d3cc <iprintf>
        UNLOCK_TCPIP_CORE();
 8010f9e:	4815      	ldr	r0, [pc, #84]	@ (8010ff4 <lwip_netconn_do_close+0x114>)
 8010fa0:	f00b fa6f 	bl	801c482 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	330c      	adds	r3, #12
 8010faa:	2100      	movs	r1, #0
 8010fac:	4618      	mov	r0, r3
 8010fae:	f00b f9c6 	bl	801c33e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8010fb2:	4810      	ldr	r0, [pc, #64]	@ (8010ff4 <lwip_netconn_do_close+0x114>)
 8010fb4:	f00b fa56 	bl	801c464 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	785b      	ldrb	r3, [r3, #1]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d00b      	beq.n	8010fda <lwip_netconn_do_close+0xfa>
 8010fc2:	4b08      	ldr	r3, [pc, #32]	@ (8010fe4 <lwip_netconn_do_close+0x104>)
 8010fc4:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8010fc8:	4909      	ldr	r1, [pc, #36]	@ (8010ff0 <lwip_netconn_do_close+0x110>)
 8010fca:	4808      	ldr	r0, [pc, #32]	@ (8010fec <lwip_netconn_do_close+0x10c>)
 8010fcc:	f00c f9fe 	bl	801d3cc <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8010fd0:	e003      	b.n	8010fda <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	22f5      	movs	r2, #245	@ 0xf5
 8010fd6:	711a      	strb	r2, [r3, #4]
 8010fd8:	e000      	b.n	8010fdc <lwip_netconn_do_close+0xfc>
      return;
 8010fda:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010fdc:	3710      	adds	r7, #16
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
 8010fe2:	bf00      	nop
 8010fe4:	0801eab8 	.word	0x0801eab8
 8010fe8:	0801ee5c 	.word	0x0801ee5c
 8010fec:	0801eafc 	.word	0x0801eafc
 8010ff0:	0801ee78 	.word	0x0801ee78
 8010ff4:	2000b358 	.word	0x2000b358

08010ff8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b082      	sub	sp, #8
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d013      	beq.n	801102e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d00b      	beq.n	8011026 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	4618      	mov	r0, r3
 8011014:	f001 fe48 	bl	8012ca8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2200      	movs	r2, #0
 801101c:	605a      	str	r2, [r3, #4]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	685a      	ldr	r2, [r3, #4]
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8011026:	6879      	ldr	r1, [r7, #4]
 8011028:	2006      	movs	r0, #6
 801102a:	f000 ff99 	bl	8011f60 <memp_free>
  }
}
 801102e:	bf00      	nop
 8011030:	3708      	adds	r7, #8
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}
	...

08011038 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b084      	sub	sp, #16
 801103c:	af00      	add	r7, sp, #0
 801103e:	60f8      	str	r0, [r7, #12]
 8011040:	60b9      	str	r1, [r7, #8]
 8011042:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d108      	bne.n	801105c <netbuf_data+0x24>
 801104a:	4b1b      	ldr	r3, [pc, #108]	@ (80110b8 <netbuf_data+0x80>)
 801104c:	22c6      	movs	r2, #198	@ 0xc6
 801104e:	491b      	ldr	r1, [pc, #108]	@ (80110bc <netbuf_data+0x84>)
 8011050:	481b      	ldr	r0, [pc, #108]	@ (80110c0 <netbuf_data+0x88>)
 8011052:	f00c f9bb 	bl	801d3cc <iprintf>
 8011056:	f06f 030f 	mvn.w	r3, #15
 801105a:	e029      	b.n	80110b0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d108      	bne.n	8011074 <netbuf_data+0x3c>
 8011062:	4b15      	ldr	r3, [pc, #84]	@ (80110b8 <netbuf_data+0x80>)
 8011064:	22c7      	movs	r2, #199	@ 0xc7
 8011066:	4917      	ldr	r1, [pc, #92]	@ (80110c4 <netbuf_data+0x8c>)
 8011068:	4815      	ldr	r0, [pc, #84]	@ (80110c0 <netbuf_data+0x88>)
 801106a:	f00c f9af 	bl	801d3cc <iprintf>
 801106e:	f06f 030f 	mvn.w	r3, #15
 8011072:	e01d      	b.n	80110b0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d108      	bne.n	801108c <netbuf_data+0x54>
 801107a:	4b0f      	ldr	r3, [pc, #60]	@ (80110b8 <netbuf_data+0x80>)
 801107c:	22c8      	movs	r2, #200	@ 0xc8
 801107e:	4912      	ldr	r1, [pc, #72]	@ (80110c8 <netbuf_data+0x90>)
 8011080:	480f      	ldr	r0, [pc, #60]	@ (80110c0 <netbuf_data+0x88>)
 8011082:	f00c f9a3 	bl	801d3cc <iprintf>
 8011086:	f06f 030f 	mvn.w	r3, #15
 801108a:	e011      	b.n	80110b0 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	685b      	ldr	r3, [r3, #4]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d102      	bne.n	801109a <netbuf_data+0x62>
    return ERR_BUF;
 8011094:	f06f 0301 	mvn.w	r3, #1
 8011098:	e00a      	b.n	80110b0 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	685b      	ldr	r3, [r3, #4]
 801109e:	685a      	ldr	r2, [r3, #4]
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	685b      	ldr	r3, [r3, #4]
 80110a8:	895a      	ldrh	r2, [r3, #10]
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 80110ae:	2300      	movs	r3, #0
}
 80110b0:	4618      	mov	r0, r3
 80110b2:	3710      	adds	r7, #16
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bd80      	pop	{r7, pc}
 80110b8:	0801f010 	.word	0x0801f010
 80110bc:	0801f118 	.word	0x0801f118
 80110c0:	0801f060 	.word	0x0801f060
 80110c4:	0801f134 	.word	0x0801f134
 80110c8:	0801f154 	.word	0x0801f154

080110cc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b084      	sub	sp, #16
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
 80110d4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80110d6:	f008 fa45 	bl	8019564 <sys_timeouts_sleeptime>
 80110da:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110e2:	d10b      	bne.n	80110fc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80110e4:	4813      	ldr	r0, [pc, #76]	@ (8011134 <tcpip_timeouts_mbox_fetch+0x68>)
 80110e6:	f00b f9cc 	bl	801c482 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80110ea:	2200      	movs	r2, #0
 80110ec:	6839      	ldr	r1, [r7, #0]
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f00b f884 	bl	801c1fc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80110f4:	480f      	ldr	r0, [pc, #60]	@ (8011134 <tcpip_timeouts_mbox_fetch+0x68>)
 80110f6:	f00b f9b5 	bl	801c464 <sys_mutex_lock>
    return;
 80110fa:	e018      	b.n	801112e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d102      	bne.n	8011108 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8011102:	f008 f9f5 	bl	80194f0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011106:	e7e6      	b.n	80110d6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8011108:	480a      	ldr	r0, [pc, #40]	@ (8011134 <tcpip_timeouts_mbox_fetch+0x68>)
 801110a:	f00b f9ba 	bl	801c482 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801110e:	68fa      	ldr	r2, [r7, #12]
 8011110:	6839      	ldr	r1, [r7, #0]
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f00b f872 	bl	801c1fc <sys_arch_mbox_fetch>
 8011118:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801111a:	4806      	ldr	r0, [pc, #24]	@ (8011134 <tcpip_timeouts_mbox_fetch+0x68>)
 801111c:	f00b f9a2 	bl	801c464 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8011120:	68bb      	ldr	r3, [r7, #8]
 8011122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011126:	d102      	bne.n	801112e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011128:	f008 f9e2 	bl	80194f0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801112c:	e7d3      	b.n	80110d6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801112e:	3710      	adds	r7, #16
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}
 8011134:	2000b358 	.word	0x2000b358

08011138 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b084      	sub	sp, #16
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8011140:	4810      	ldr	r0, [pc, #64]	@ (8011184 <tcpip_thread+0x4c>)
 8011142:	f00b f98f 	bl	801c464 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8011146:	4b10      	ldr	r3, [pc, #64]	@ (8011188 <tcpip_thread+0x50>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d005      	beq.n	801115a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801114e:	4b0e      	ldr	r3, [pc, #56]	@ (8011188 <tcpip_thread+0x50>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	4a0e      	ldr	r2, [pc, #56]	@ (801118c <tcpip_thread+0x54>)
 8011154:	6812      	ldr	r2, [r2, #0]
 8011156:	4610      	mov	r0, r2
 8011158:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801115a:	f107 030c 	add.w	r3, r7, #12
 801115e:	4619      	mov	r1, r3
 8011160:	480b      	ldr	r0, [pc, #44]	@ (8011190 <tcpip_thread+0x58>)
 8011162:	f7ff ffb3 	bl	80110cc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d106      	bne.n	801117a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801116c:	4b09      	ldr	r3, [pc, #36]	@ (8011194 <tcpip_thread+0x5c>)
 801116e:	2291      	movs	r2, #145	@ 0x91
 8011170:	4909      	ldr	r1, [pc, #36]	@ (8011198 <tcpip_thread+0x60>)
 8011172:	480a      	ldr	r0, [pc, #40]	@ (801119c <tcpip_thread+0x64>)
 8011174:	f00c f92a 	bl	801d3cc <iprintf>
      continue;
 8011178:	e003      	b.n	8011182 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	4618      	mov	r0, r3
 801117e:	f000 f80f 	bl	80111a0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011182:	e7ea      	b.n	801115a <tcpip_thread+0x22>
 8011184:	2000b358 	.word	0x2000b358
 8011188:	2000b34c 	.word	0x2000b34c
 801118c:	2000b350 	.word	0x2000b350
 8011190:	2000b354 	.word	0x2000b354
 8011194:	0801f1a8 	.word	0x0801f1a8
 8011198:	0801f1d8 	.word	0x0801f1d8
 801119c:	0801f1f8 	.word	0x0801f1f8

080111a0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b082      	sub	sp, #8
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	781b      	ldrb	r3, [r3, #0]
 80111ac:	2b02      	cmp	r3, #2
 80111ae:	d026      	beq.n	80111fe <tcpip_thread_handle_msg+0x5e>
 80111b0:	2b02      	cmp	r3, #2
 80111b2:	dc2b      	bgt.n	801120c <tcpip_thread_handle_msg+0x6c>
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d002      	beq.n	80111be <tcpip_thread_handle_msg+0x1e>
 80111b8:	2b01      	cmp	r3, #1
 80111ba:	d015      	beq.n	80111e8 <tcpip_thread_handle_msg+0x48>
 80111bc:	e026      	b.n	801120c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	68db      	ldr	r3, [r3, #12]
 80111c2:	687a      	ldr	r2, [r7, #4]
 80111c4:	6850      	ldr	r0, [r2, #4]
 80111c6:	687a      	ldr	r2, [r7, #4]
 80111c8:	6892      	ldr	r2, [r2, #8]
 80111ca:	4611      	mov	r1, r2
 80111cc:	4798      	blx	r3
 80111ce:	4603      	mov	r3, r0
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d004      	beq.n	80111de <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	685b      	ldr	r3, [r3, #4]
 80111d8:	4618      	mov	r0, r3
 80111da:	f001 fd65 	bl	8012ca8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80111de:	6879      	ldr	r1, [r7, #4]
 80111e0:	2009      	movs	r0, #9
 80111e2:	f000 febd 	bl	8011f60 <memp_free>
      break;
 80111e6:	e018      	b.n	801121a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	685b      	ldr	r3, [r3, #4]
 80111ec:	687a      	ldr	r2, [r7, #4]
 80111ee:	6892      	ldr	r2, [r2, #8]
 80111f0:	4610      	mov	r0, r2
 80111f2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80111f4:	6879      	ldr	r1, [r7, #4]
 80111f6:	2008      	movs	r0, #8
 80111f8:	f000 feb2 	bl	8011f60 <memp_free>
      break;
 80111fc:	e00d      	b.n	801121a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	685b      	ldr	r3, [r3, #4]
 8011202:	687a      	ldr	r2, [r7, #4]
 8011204:	6892      	ldr	r2, [r2, #8]
 8011206:	4610      	mov	r0, r2
 8011208:	4798      	blx	r3
      break;
 801120a:	e006      	b.n	801121a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801120c:	4b05      	ldr	r3, [pc, #20]	@ (8011224 <tcpip_thread_handle_msg+0x84>)
 801120e:	22cf      	movs	r2, #207	@ 0xcf
 8011210:	4905      	ldr	r1, [pc, #20]	@ (8011228 <tcpip_thread_handle_msg+0x88>)
 8011212:	4806      	ldr	r0, [pc, #24]	@ (801122c <tcpip_thread_handle_msg+0x8c>)
 8011214:	f00c f8da 	bl	801d3cc <iprintf>
      break;
 8011218:	bf00      	nop
  }
}
 801121a:	bf00      	nop
 801121c:	3708      	adds	r7, #8
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}
 8011222:	bf00      	nop
 8011224:	0801f1a8 	.word	0x0801f1a8
 8011228:	0801f1d8 	.word	0x0801f1d8
 801122c:	0801f1f8 	.word	0x0801f1f8

08011230 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b086      	sub	sp, #24
 8011234:	af00      	add	r7, sp, #0
 8011236:	60f8      	str	r0, [r7, #12]
 8011238:	60b9      	str	r1, [r7, #8]
 801123a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801123c:	481a      	ldr	r0, [pc, #104]	@ (80112a8 <tcpip_inpkt+0x78>)
 801123e:	f00b f838 	bl	801c2b2 <sys_mbox_valid>
 8011242:	4603      	mov	r3, r0
 8011244:	2b00      	cmp	r3, #0
 8011246:	d105      	bne.n	8011254 <tcpip_inpkt+0x24>
 8011248:	4b18      	ldr	r3, [pc, #96]	@ (80112ac <tcpip_inpkt+0x7c>)
 801124a:	22fc      	movs	r2, #252	@ 0xfc
 801124c:	4918      	ldr	r1, [pc, #96]	@ (80112b0 <tcpip_inpkt+0x80>)
 801124e:	4819      	ldr	r0, [pc, #100]	@ (80112b4 <tcpip_inpkt+0x84>)
 8011250:	f00c f8bc 	bl	801d3cc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8011254:	2009      	movs	r0, #9
 8011256:	f000 fe0d 	bl	8011e74 <memp_malloc>
 801125a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801125c:	697b      	ldr	r3, [r7, #20]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d102      	bne.n	8011268 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8011262:	f04f 33ff 	mov.w	r3, #4294967295
 8011266:	e01a      	b.n	801129e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	2200      	movs	r2, #0
 801126c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801126e:	697b      	ldr	r3, [r7, #20]
 8011270:	68fa      	ldr	r2, [r7, #12]
 8011272:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	68ba      	ldr	r2, [r7, #8]
 8011278:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	687a      	ldr	r2, [r7, #4]
 801127e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011280:	6979      	ldr	r1, [r7, #20]
 8011282:	4809      	ldr	r0, [pc, #36]	@ (80112a8 <tcpip_inpkt+0x78>)
 8011284:	f00a ffa0 	bl	801c1c8 <sys_mbox_trypost>
 8011288:	4603      	mov	r3, r0
 801128a:	2b00      	cmp	r3, #0
 801128c:	d006      	beq.n	801129c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801128e:	6979      	ldr	r1, [r7, #20]
 8011290:	2009      	movs	r0, #9
 8011292:	f000 fe65 	bl	8011f60 <memp_free>
    return ERR_MEM;
 8011296:	f04f 33ff 	mov.w	r3, #4294967295
 801129a:	e000      	b.n	801129e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801129c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3718      	adds	r7, #24
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}
 80112a6:	bf00      	nop
 80112a8:	2000b354 	.word	0x2000b354
 80112ac:	0801f1a8 	.word	0x0801f1a8
 80112b0:	0801f220 	.word	0x0801f220
 80112b4:	0801f1f8 	.word	0x0801f1f8

080112b8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b082      	sub	sp, #8
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
 80112c0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80112c8:	f003 0318 	and.w	r3, r3, #24
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d006      	beq.n	80112de <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80112d0:	4a08      	ldr	r2, [pc, #32]	@ (80112f4 <tcpip_input+0x3c>)
 80112d2:	6839      	ldr	r1, [r7, #0]
 80112d4:	6878      	ldr	r0, [r7, #4]
 80112d6:	f7ff ffab 	bl	8011230 <tcpip_inpkt>
 80112da:	4603      	mov	r3, r0
 80112dc:	e005      	b.n	80112ea <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80112de:	4a06      	ldr	r2, [pc, #24]	@ (80112f8 <tcpip_input+0x40>)
 80112e0:	6839      	ldr	r1, [r7, #0]
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	f7ff ffa4 	bl	8011230 <tcpip_inpkt>
 80112e8:	4603      	mov	r3, r0
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3708      	adds	r7, #8
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}
 80112f2:	bf00      	nop
 80112f4:	0801bfb5 	.word	0x0801bfb5
 80112f8:	0801aebd 	.word	0x0801aebd

080112fc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b084      	sub	sp, #16
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011306:	4819      	ldr	r0, [pc, #100]	@ (801136c <tcpip_try_callback+0x70>)
 8011308:	f00a ffd3 	bl	801c2b2 <sys_mbox_valid>
 801130c:	4603      	mov	r3, r0
 801130e:	2b00      	cmp	r3, #0
 8011310:	d106      	bne.n	8011320 <tcpip_try_callback+0x24>
 8011312:	4b17      	ldr	r3, [pc, #92]	@ (8011370 <tcpip_try_callback+0x74>)
 8011314:	f240 125d 	movw	r2, #349	@ 0x15d
 8011318:	4916      	ldr	r1, [pc, #88]	@ (8011374 <tcpip_try_callback+0x78>)
 801131a:	4817      	ldr	r0, [pc, #92]	@ (8011378 <tcpip_try_callback+0x7c>)
 801131c:	f00c f856 	bl	801d3cc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8011320:	2008      	movs	r0, #8
 8011322:	f000 fda7 	bl	8011e74 <memp_malloc>
 8011326:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d102      	bne.n	8011334 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801132e:	f04f 33ff 	mov.w	r3, #4294967295
 8011332:	e017      	b.n	8011364 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	2201      	movs	r2, #1
 8011338:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	687a      	ldr	r2, [r7, #4]
 801133e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	683a      	ldr	r2, [r7, #0]
 8011344:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011346:	68f9      	ldr	r1, [r7, #12]
 8011348:	4808      	ldr	r0, [pc, #32]	@ (801136c <tcpip_try_callback+0x70>)
 801134a:	f00a ff3d 	bl	801c1c8 <sys_mbox_trypost>
 801134e:	4603      	mov	r3, r0
 8011350:	2b00      	cmp	r3, #0
 8011352:	d006      	beq.n	8011362 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8011354:	68f9      	ldr	r1, [r7, #12]
 8011356:	2008      	movs	r0, #8
 8011358:	f000 fe02 	bl	8011f60 <memp_free>
    return ERR_MEM;
 801135c:	f04f 33ff 	mov.w	r3, #4294967295
 8011360:	e000      	b.n	8011364 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8011362:	2300      	movs	r3, #0
}
 8011364:	4618      	mov	r0, r3
 8011366:	3710      	adds	r7, #16
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}
 801136c:	2000b354 	.word	0x2000b354
 8011370:	0801f1a8 	.word	0x0801f1a8
 8011374:	0801f220 	.word	0x0801f220
 8011378:	0801f1f8 	.word	0x0801f1f8

0801137c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b084      	sub	sp, #16
 8011380:	af00      	add	r7, sp, #0
 8011382:	60f8      	str	r0, [r7, #12]
 8011384:	60b9      	str	r1, [r7, #8]
 8011386:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8011388:	4806      	ldr	r0, [pc, #24]	@ (80113a4 <tcpip_send_msg_wait_sem+0x28>)
 801138a:	f00b f86b 	bl	801c464 <sys_mutex_lock>
  fn(apimsg);
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	68b8      	ldr	r0, [r7, #8]
 8011392:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8011394:	4803      	ldr	r0, [pc, #12]	@ (80113a4 <tcpip_send_msg_wait_sem+0x28>)
 8011396:	f00b f874 	bl	801c482 <sys_mutex_unlock>
  return ERR_OK;
 801139a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801139c:	4618      	mov	r0, r3
 801139e:	3710      	adds	r7, #16
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}
 80113a4:	2000b358 	.word	0x2000b358

080113a8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b084      	sub	sp, #16
 80113ac:	af02      	add	r7, sp, #8
 80113ae:	6078      	str	r0, [r7, #4]
 80113b0:	6039      	str	r1, [r7, #0]
  lwip_init();
 80113b2:	f000 f8ba 	bl	801152a <lwip_init>

  tcpip_init_done = initfunc;
 80113b6:	4a17      	ldr	r2, [pc, #92]	@ (8011414 <tcpip_init+0x6c>)
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80113bc:	4a16      	ldr	r2, [pc, #88]	@ (8011418 <tcpip_init+0x70>)
 80113be:	683b      	ldr	r3, [r7, #0]
 80113c0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80113c2:	2106      	movs	r1, #6
 80113c4:	4815      	ldr	r0, [pc, #84]	@ (801141c <tcpip_init+0x74>)
 80113c6:	f00a fecb 	bl	801c160 <sys_mbox_new>
 80113ca:	4603      	mov	r3, r0
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d006      	beq.n	80113de <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80113d0:	4b13      	ldr	r3, [pc, #76]	@ (8011420 <tcpip_init+0x78>)
 80113d2:	f240 2261 	movw	r2, #609	@ 0x261
 80113d6:	4913      	ldr	r1, [pc, #76]	@ (8011424 <tcpip_init+0x7c>)
 80113d8:	4813      	ldr	r0, [pc, #76]	@ (8011428 <tcpip_init+0x80>)
 80113da:	f00b fff7 	bl	801d3cc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80113de:	4813      	ldr	r0, [pc, #76]	@ (801142c <tcpip_init+0x84>)
 80113e0:	f00b f824 	bl	801c42c <sys_mutex_new>
 80113e4:	4603      	mov	r3, r0
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d006      	beq.n	80113f8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80113ea:	4b0d      	ldr	r3, [pc, #52]	@ (8011420 <tcpip_init+0x78>)
 80113ec:	f240 2265 	movw	r2, #613	@ 0x265
 80113f0:	490f      	ldr	r1, [pc, #60]	@ (8011430 <tcpip_init+0x88>)
 80113f2:	480d      	ldr	r0, [pc, #52]	@ (8011428 <tcpip_init+0x80>)
 80113f4:	f00b ffea 	bl	801d3cc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80113f8:	2300      	movs	r3, #0
 80113fa:	9300      	str	r3, [sp, #0]
 80113fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011400:	2200      	movs	r2, #0
 8011402:	490c      	ldr	r1, [pc, #48]	@ (8011434 <tcpip_init+0x8c>)
 8011404:	480c      	ldr	r0, [pc, #48]	@ (8011438 <tcpip_init+0x90>)
 8011406:	f00b f849 	bl	801c49c <sys_thread_new>
}
 801140a:	bf00      	nop
 801140c:	3708      	adds	r7, #8
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}
 8011412:	bf00      	nop
 8011414:	2000b34c 	.word	0x2000b34c
 8011418:	2000b350 	.word	0x2000b350
 801141c:	2000b354 	.word	0x2000b354
 8011420:	0801f1a8 	.word	0x0801f1a8
 8011424:	0801f230 	.word	0x0801f230
 8011428:	0801f1f8 	.word	0x0801f1f8
 801142c:	2000b358 	.word	0x2000b358
 8011430:	0801f254 	.word	0x0801f254
 8011434:	08011139 	.word	0x08011139
 8011438:	0801f278 	.word	0x0801f278

0801143c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b084      	sub	sp, #16
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
 8011444:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d002      	beq.n	8011452 <fs_open+0x16>
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d102      	bne.n	8011458 <fs_open+0x1c>
    return ERR_ARG;
 8011452:	f06f 030f 	mvn.w	r3, #15
 8011456:	e028      	b.n	80114aa <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8011458:	4b16      	ldr	r3, [pc, #88]	@ (80114b4 <fs_open+0x78>)
 801145a:	60fb      	str	r3, [r7, #12]
 801145c:	e020      	b.n	80114a0 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	685b      	ldr	r3, [r3, #4]
 8011462:	4619      	mov	r1, r3
 8011464:	6838      	ldr	r0, [r7, #0]
 8011466:	f7ee feeb 	bl	8000240 <strcmp>
 801146a:	4603      	mov	r3, r0
 801146c:	2b00      	cmp	r3, #0
 801146e:	d114      	bne.n	801149a <fs_open+0x5e>
      file->data = (const char *)f->data;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	689a      	ldr	r2, [r3, #8]
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	68da      	ldr	r2, [r3, #12]
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	68da      	ldr	r2, [r3, #12]
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	2200      	movs	r2, #0
 801148c:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	7c1a      	ldrb	r2, [r3, #16]
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8011496:	2300      	movs	r3, #0
 8011498:	e007      	b.n	80114aa <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	60fb      	str	r3, [r7, #12]
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d1db      	bne.n	801145e <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 80114a6:	f06f 0305 	mvn.w	r3, #5
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3710      	adds	r7, #16
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}
 80114b2:	bf00      	nop
 80114b4:	080333b0 	.word	0x080333b0

080114b8 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80114b8:	b480      	push	{r7}
 80114ba:	b083      	sub	sp, #12
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80114c0:	bf00      	nop
 80114c2:	370c      	adds	r7, #12
 80114c4:	46bd      	mov	sp, r7
 80114c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ca:	4770      	bx	lr

080114cc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80114cc:	b480      	push	{r7}
 80114ce:	b083      	sub	sp, #12
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	4603      	mov	r3, r0
 80114d4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80114d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80114da:	021b      	lsls	r3, r3, #8
 80114dc:	b21a      	sxth	r2, r3
 80114de:	88fb      	ldrh	r3, [r7, #6]
 80114e0:	0a1b      	lsrs	r3, r3, #8
 80114e2:	b29b      	uxth	r3, r3
 80114e4:	b21b      	sxth	r3, r3
 80114e6:	4313      	orrs	r3, r2
 80114e8:	b21b      	sxth	r3, r3
 80114ea:	b29b      	uxth	r3, r3
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	370c      	adds	r7, #12
 80114f0:	46bd      	mov	sp, r7
 80114f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f6:	4770      	bx	lr

080114f8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80114f8:	b480      	push	{r7}
 80114fa:	b083      	sub	sp, #12
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	061a      	lsls	r2, r3, #24
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	021b      	lsls	r3, r3, #8
 8011508:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801150c:	431a      	orrs	r2, r3
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	0a1b      	lsrs	r3, r3, #8
 8011512:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011516:	431a      	orrs	r2, r3
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	0e1b      	lsrs	r3, r3, #24
 801151c:	4313      	orrs	r3, r2
}
 801151e:	4618      	mov	r0, r3
 8011520:	370c      	adds	r7, #12
 8011522:	46bd      	mov	sp, r7
 8011524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011528:	4770      	bx	lr

0801152a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801152a:	b580      	push	{r7, lr}
 801152c:	b082      	sub	sp, #8
 801152e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8011530:	2300      	movs	r3, #0
 8011532:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8011534:	f00a ff6c 	bl	801c410 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8011538:	f000 f8d4 	bl	80116e4 <mem_init>
  memp_init();
 801153c:	f000 fc2c 	bl	8011d98 <memp_init>
  pbuf_init();
  netif_init();
 8011540:	f000 fd38 	bl	8011fb4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8011544:	f008 f846 	bl	80195d4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8011548:	f001 fe48 	bl	80131dc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801154c:	f007 ff88 	bl	8019460 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8011550:	bf00      	nop
 8011552:	3708      	adds	r7, #8
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}

08011558 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8011558:	b480      	push	{r7}
 801155a:	b083      	sub	sp, #12
 801155c:	af00      	add	r7, sp, #0
 801155e:	4603      	mov	r3, r0
 8011560:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8011562:	4b05      	ldr	r3, [pc, #20]	@ (8011578 <ptr_to_mem+0x20>)
 8011564:	681a      	ldr	r2, [r3, #0]
 8011566:	88fb      	ldrh	r3, [r7, #6]
 8011568:	4413      	add	r3, r2
}
 801156a:	4618      	mov	r0, r3
 801156c:	370c      	adds	r7, #12
 801156e:	46bd      	mov	sp, r7
 8011570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011574:	4770      	bx	lr
 8011576:	bf00      	nop
 8011578:	2000b374 	.word	0x2000b374

0801157c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801157c:	b480      	push	{r7}
 801157e:	b083      	sub	sp, #12
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8011584:	4b05      	ldr	r3, [pc, #20]	@ (801159c <mem_to_ptr+0x20>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	687a      	ldr	r2, [r7, #4]
 801158a:	1ad3      	subs	r3, r2, r3
 801158c:	b29b      	uxth	r3, r3
}
 801158e:	4618      	mov	r0, r3
 8011590:	370c      	adds	r7, #12
 8011592:	46bd      	mov	sp, r7
 8011594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011598:	4770      	bx	lr
 801159a:	bf00      	nop
 801159c:	2000b374 	.word	0x2000b374

080115a0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80115a0:	b590      	push	{r4, r7, lr}
 80115a2:	b085      	sub	sp, #20
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80115a8:	4b45      	ldr	r3, [pc, #276]	@ (80116c0 <plug_holes+0x120>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	687a      	ldr	r2, [r7, #4]
 80115ae:	429a      	cmp	r2, r3
 80115b0:	d206      	bcs.n	80115c0 <plug_holes+0x20>
 80115b2:	4b44      	ldr	r3, [pc, #272]	@ (80116c4 <plug_holes+0x124>)
 80115b4:	f240 12df 	movw	r2, #479	@ 0x1df
 80115b8:	4943      	ldr	r1, [pc, #268]	@ (80116c8 <plug_holes+0x128>)
 80115ba:	4844      	ldr	r0, [pc, #272]	@ (80116cc <plug_holes+0x12c>)
 80115bc:	f00b ff06 	bl	801d3cc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80115c0:	4b43      	ldr	r3, [pc, #268]	@ (80116d0 <plug_holes+0x130>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	687a      	ldr	r2, [r7, #4]
 80115c6:	429a      	cmp	r2, r3
 80115c8:	d306      	bcc.n	80115d8 <plug_holes+0x38>
 80115ca:	4b3e      	ldr	r3, [pc, #248]	@ (80116c4 <plug_holes+0x124>)
 80115cc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80115d0:	4940      	ldr	r1, [pc, #256]	@ (80116d4 <plug_holes+0x134>)
 80115d2:	483e      	ldr	r0, [pc, #248]	@ (80116cc <plug_holes+0x12c>)
 80115d4:	f00b fefa 	bl	801d3cc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	791b      	ldrb	r3, [r3, #4]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d006      	beq.n	80115ee <plug_holes+0x4e>
 80115e0:	4b38      	ldr	r3, [pc, #224]	@ (80116c4 <plug_holes+0x124>)
 80115e2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80115e6:	493c      	ldr	r1, [pc, #240]	@ (80116d8 <plug_holes+0x138>)
 80115e8:	4838      	ldr	r0, [pc, #224]	@ (80116cc <plug_holes+0x12c>)
 80115ea:	f00b feef 	bl	801d3cc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	881b      	ldrh	r3, [r3, #0]
 80115f2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80115f6:	d906      	bls.n	8011606 <plug_holes+0x66>
 80115f8:	4b32      	ldr	r3, [pc, #200]	@ (80116c4 <plug_holes+0x124>)
 80115fa:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80115fe:	4937      	ldr	r1, [pc, #220]	@ (80116dc <plug_holes+0x13c>)
 8011600:	4832      	ldr	r0, [pc, #200]	@ (80116cc <plug_holes+0x12c>)
 8011602:	f00b fee3 	bl	801d3cc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	881b      	ldrh	r3, [r3, #0]
 801160a:	4618      	mov	r0, r3
 801160c:	f7ff ffa4 	bl	8011558 <ptr_to_mem>
 8011610:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8011612:	687a      	ldr	r2, [r7, #4]
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	429a      	cmp	r2, r3
 8011618:	d024      	beq.n	8011664 <plug_holes+0xc4>
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	791b      	ldrb	r3, [r3, #4]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d120      	bne.n	8011664 <plug_holes+0xc4>
 8011622:	4b2b      	ldr	r3, [pc, #172]	@ (80116d0 <plug_holes+0x130>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	68fa      	ldr	r2, [r7, #12]
 8011628:	429a      	cmp	r2, r3
 801162a:	d01b      	beq.n	8011664 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801162c:	4b2c      	ldr	r3, [pc, #176]	@ (80116e0 <plug_holes+0x140>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	68fa      	ldr	r2, [r7, #12]
 8011632:	429a      	cmp	r2, r3
 8011634:	d102      	bne.n	801163c <plug_holes+0x9c>
      lfree = mem;
 8011636:	4a2a      	ldr	r2, [pc, #168]	@ (80116e0 <plug_holes+0x140>)
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	881a      	ldrh	r2, [r3, #0]
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	881b      	ldrh	r3, [r3, #0]
 8011648:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801164c:	d00a      	beq.n	8011664 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	881b      	ldrh	r3, [r3, #0]
 8011652:	4618      	mov	r0, r3
 8011654:	f7ff ff80 	bl	8011558 <ptr_to_mem>
 8011658:	4604      	mov	r4, r0
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f7ff ff8e 	bl	801157c <mem_to_ptr>
 8011660:	4603      	mov	r3, r0
 8011662:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	885b      	ldrh	r3, [r3, #2]
 8011668:	4618      	mov	r0, r3
 801166a:	f7ff ff75 	bl	8011558 <ptr_to_mem>
 801166e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011670:	68ba      	ldr	r2, [r7, #8]
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	429a      	cmp	r2, r3
 8011676:	d01f      	beq.n	80116b8 <plug_holes+0x118>
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	791b      	ldrb	r3, [r3, #4]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d11b      	bne.n	80116b8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011680:	4b17      	ldr	r3, [pc, #92]	@ (80116e0 <plug_holes+0x140>)
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	687a      	ldr	r2, [r7, #4]
 8011686:	429a      	cmp	r2, r3
 8011688:	d102      	bne.n	8011690 <plug_holes+0xf0>
      lfree = pmem;
 801168a:	4a15      	ldr	r2, [pc, #84]	@ (80116e0 <plug_holes+0x140>)
 801168c:	68bb      	ldr	r3, [r7, #8]
 801168e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	881a      	ldrh	r2, [r3, #0]
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	881b      	ldrh	r3, [r3, #0]
 801169c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80116a0:	d00a      	beq.n	80116b8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	881b      	ldrh	r3, [r3, #0]
 80116a6:	4618      	mov	r0, r3
 80116a8:	f7ff ff56 	bl	8011558 <ptr_to_mem>
 80116ac:	4604      	mov	r4, r0
 80116ae:	68b8      	ldr	r0, [r7, #8]
 80116b0:	f7ff ff64 	bl	801157c <mem_to_ptr>
 80116b4:	4603      	mov	r3, r0
 80116b6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80116b8:	bf00      	nop
 80116ba:	3714      	adds	r7, #20
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd90      	pop	{r4, r7, pc}
 80116c0:	2000b374 	.word	0x2000b374
 80116c4:	0801f288 	.word	0x0801f288
 80116c8:	0801f2b8 	.word	0x0801f2b8
 80116cc:	0801f2d0 	.word	0x0801f2d0
 80116d0:	2000b378 	.word	0x2000b378
 80116d4:	0801f2f8 	.word	0x0801f2f8
 80116d8:	0801f314 	.word	0x0801f314
 80116dc:	0801f330 	.word	0x0801f330
 80116e0:	2000b380 	.word	0x2000b380

080116e4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b082      	sub	sp, #8
 80116e8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80116ea:	4b1d      	ldr	r3, [pc, #116]	@ (8011760 <mem_init+0x7c>)
 80116ec:	4a1d      	ldr	r2, [pc, #116]	@ (8011764 <mem_init+0x80>)
 80116ee:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80116f0:	4b1b      	ldr	r3, [pc, #108]	@ (8011760 <mem_init+0x7c>)
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 80116fc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2200      	movs	r2, #0
 8011702:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2200      	movs	r2, #0
 8011708:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801170a:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 801170e:	f7ff ff23 	bl	8011558 <ptr_to_mem>
 8011712:	4603      	mov	r3, r0
 8011714:	4a14      	ldr	r2, [pc, #80]	@ (8011768 <mem_init+0x84>)
 8011716:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8011718:	4b13      	ldr	r3, [pc, #76]	@ (8011768 <mem_init+0x84>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	2201      	movs	r2, #1
 801171e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8011720:	4b11      	ldr	r3, [pc, #68]	@ (8011768 <mem_init+0x84>)
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8011728:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801172a:	4b0f      	ldr	r3, [pc, #60]	@ (8011768 <mem_init+0x84>)
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8011732:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8011734:	4b0a      	ldr	r3, [pc, #40]	@ (8011760 <mem_init+0x7c>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	4a0c      	ldr	r2, [pc, #48]	@ (801176c <mem_init+0x88>)
 801173a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801173c:	480c      	ldr	r0, [pc, #48]	@ (8011770 <mem_init+0x8c>)
 801173e:	f00a fe75 	bl	801c42c <sys_mutex_new>
 8011742:	4603      	mov	r3, r0
 8011744:	2b00      	cmp	r3, #0
 8011746:	d006      	beq.n	8011756 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8011748:	4b0a      	ldr	r3, [pc, #40]	@ (8011774 <mem_init+0x90>)
 801174a:	f240 221f 	movw	r2, #543	@ 0x21f
 801174e:	490a      	ldr	r1, [pc, #40]	@ (8011778 <mem_init+0x94>)
 8011750:	480a      	ldr	r0, [pc, #40]	@ (801177c <mem_init+0x98>)
 8011752:	f00b fe3b 	bl	801d3cc <iprintf>
  }
}
 8011756:	bf00      	nop
 8011758:	3708      	adds	r7, #8
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}
 801175e:	bf00      	nop
 8011760:	2000b374 	.word	0x2000b374
 8011764:	20020000 	.word	0x20020000
 8011768:	2000b378 	.word	0x2000b378
 801176c:	2000b380 	.word	0x2000b380
 8011770:	2000b37c 	.word	0x2000b37c
 8011774:	0801f288 	.word	0x0801f288
 8011778:	0801f35c 	.word	0x0801f35c
 801177c:	0801f2d0 	.word	0x0801f2d0

08011780 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b086      	sub	sp, #24
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f7ff fef7 	bl	801157c <mem_to_ptr>
 801178e:	4603      	mov	r3, r0
 8011790:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	881b      	ldrh	r3, [r3, #0]
 8011796:	4618      	mov	r0, r3
 8011798:	f7ff fede 	bl	8011558 <ptr_to_mem>
 801179c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	885b      	ldrh	r3, [r3, #2]
 80117a2:	4618      	mov	r0, r3
 80117a4:	f7ff fed8 	bl	8011558 <ptr_to_mem>
 80117a8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	881b      	ldrh	r3, [r3, #0]
 80117ae:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80117b2:	d818      	bhi.n	80117e6 <mem_link_valid+0x66>
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	885b      	ldrh	r3, [r3, #2]
 80117b8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80117bc:	d813      	bhi.n	80117e6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80117c2:	8afa      	ldrh	r2, [r7, #22]
 80117c4:	429a      	cmp	r2, r3
 80117c6:	d004      	beq.n	80117d2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	881b      	ldrh	r3, [r3, #0]
 80117cc:	8afa      	ldrh	r2, [r7, #22]
 80117ce:	429a      	cmp	r2, r3
 80117d0:	d109      	bne.n	80117e6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80117d2:	4b08      	ldr	r3, [pc, #32]	@ (80117f4 <mem_link_valid+0x74>)
 80117d4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80117d6:	693a      	ldr	r2, [r7, #16]
 80117d8:	429a      	cmp	r2, r3
 80117da:	d006      	beq.n	80117ea <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	885b      	ldrh	r3, [r3, #2]
 80117e0:	8afa      	ldrh	r2, [r7, #22]
 80117e2:	429a      	cmp	r2, r3
 80117e4:	d001      	beq.n	80117ea <mem_link_valid+0x6a>
    return 0;
 80117e6:	2300      	movs	r3, #0
 80117e8:	e000      	b.n	80117ec <mem_link_valid+0x6c>
  }
  return 1;
 80117ea:	2301      	movs	r3, #1
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3718      	adds	r7, #24
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}
 80117f4:	2000b378 	.word	0x2000b378

080117f8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b088      	sub	sp, #32
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d070      	beq.n	80118e8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f003 0303 	and.w	r3, r3, #3
 801180c:	2b00      	cmp	r3, #0
 801180e:	d00d      	beq.n	801182c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8011810:	4b37      	ldr	r3, [pc, #220]	@ (80118f0 <mem_free+0xf8>)
 8011812:	f240 2273 	movw	r2, #627	@ 0x273
 8011816:	4937      	ldr	r1, [pc, #220]	@ (80118f4 <mem_free+0xfc>)
 8011818:	4837      	ldr	r0, [pc, #220]	@ (80118f8 <mem_free+0x100>)
 801181a:	f00b fdd7 	bl	801d3cc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801181e:	f00a fe63 	bl	801c4e8 <sys_arch_protect>
 8011822:	60f8      	str	r0, [r7, #12]
 8011824:	68f8      	ldr	r0, [r7, #12]
 8011826:	f00a fe6d 	bl	801c504 <sys_arch_unprotect>
    return;
 801182a:	e05e      	b.n	80118ea <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	3b08      	subs	r3, #8
 8011830:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8011832:	4b32      	ldr	r3, [pc, #200]	@ (80118fc <mem_free+0x104>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	69fa      	ldr	r2, [r7, #28]
 8011838:	429a      	cmp	r2, r3
 801183a:	d306      	bcc.n	801184a <mem_free+0x52>
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	f103 020c 	add.w	r2, r3, #12
 8011842:	4b2f      	ldr	r3, [pc, #188]	@ (8011900 <mem_free+0x108>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	429a      	cmp	r2, r3
 8011848:	d90d      	bls.n	8011866 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801184a:	4b29      	ldr	r3, [pc, #164]	@ (80118f0 <mem_free+0xf8>)
 801184c:	f240 227f 	movw	r2, #639	@ 0x27f
 8011850:	492c      	ldr	r1, [pc, #176]	@ (8011904 <mem_free+0x10c>)
 8011852:	4829      	ldr	r0, [pc, #164]	@ (80118f8 <mem_free+0x100>)
 8011854:	f00b fdba 	bl	801d3cc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011858:	f00a fe46 	bl	801c4e8 <sys_arch_protect>
 801185c:	6138      	str	r0, [r7, #16]
 801185e:	6938      	ldr	r0, [r7, #16]
 8011860:	f00a fe50 	bl	801c504 <sys_arch_unprotect>
    return;
 8011864:	e041      	b.n	80118ea <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011866:	4828      	ldr	r0, [pc, #160]	@ (8011908 <mem_free+0x110>)
 8011868:	f00a fdfc 	bl	801c464 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 801186c:	69fb      	ldr	r3, [r7, #28]
 801186e:	791b      	ldrb	r3, [r3, #4]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d110      	bne.n	8011896 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011874:	4b1e      	ldr	r3, [pc, #120]	@ (80118f0 <mem_free+0xf8>)
 8011876:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 801187a:	4924      	ldr	r1, [pc, #144]	@ (801190c <mem_free+0x114>)
 801187c:	481e      	ldr	r0, [pc, #120]	@ (80118f8 <mem_free+0x100>)
 801187e:	f00b fda5 	bl	801d3cc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011882:	4821      	ldr	r0, [pc, #132]	@ (8011908 <mem_free+0x110>)
 8011884:	f00a fdfd 	bl	801c482 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011888:	f00a fe2e 	bl	801c4e8 <sys_arch_protect>
 801188c:	6178      	str	r0, [r7, #20]
 801188e:	6978      	ldr	r0, [r7, #20]
 8011890:	f00a fe38 	bl	801c504 <sys_arch_unprotect>
    return;
 8011894:	e029      	b.n	80118ea <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8011896:	69f8      	ldr	r0, [r7, #28]
 8011898:	f7ff ff72 	bl	8011780 <mem_link_valid>
 801189c:	4603      	mov	r3, r0
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d110      	bne.n	80118c4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80118a2:	4b13      	ldr	r3, [pc, #76]	@ (80118f0 <mem_free+0xf8>)
 80118a4:	f240 2295 	movw	r2, #661	@ 0x295
 80118a8:	4919      	ldr	r1, [pc, #100]	@ (8011910 <mem_free+0x118>)
 80118aa:	4813      	ldr	r0, [pc, #76]	@ (80118f8 <mem_free+0x100>)
 80118ac:	f00b fd8e 	bl	801d3cc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80118b0:	4815      	ldr	r0, [pc, #84]	@ (8011908 <mem_free+0x110>)
 80118b2:	f00a fde6 	bl	801c482 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80118b6:	f00a fe17 	bl	801c4e8 <sys_arch_protect>
 80118ba:	61b8      	str	r0, [r7, #24]
 80118bc:	69b8      	ldr	r0, [r7, #24]
 80118be:	f00a fe21 	bl	801c504 <sys_arch_unprotect>
    return;
 80118c2:	e012      	b.n	80118ea <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80118c4:	69fb      	ldr	r3, [r7, #28]
 80118c6:	2200      	movs	r2, #0
 80118c8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80118ca:	4b12      	ldr	r3, [pc, #72]	@ (8011914 <mem_free+0x11c>)
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	69fa      	ldr	r2, [r7, #28]
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d202      	bcs.n	80118da <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80118d4:	4a0f      	ldr	r2, [pc, #60]	@ (8011914 <mem_free+0x11c>)
 80118d6:	69fb      	ldr	r3, [r7, #28]
 80118d8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80118da:	69f8      	ldr	r0, [r7, #28]
 80118dc:	f7ff fe60 	bl	80115a0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80118e0:	4809      	ldr	r0, [pc, #36]	@ (8011908 <mem_free+0x110>)
 80118e2:	f00a fdce 	bl	801c482 <sys_mutex_unlock>
 80118e6:	e000      	b.n	80118ea <mem_free+0xf2>
    return;
 80118e8:	bf00      	nop
}
 80118ea:	3720      	adds	r7, #32
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}
 80118f0:	0801f288 	.word	0x0801f288
 80118f4:	0801f378 	.word	0x0801f378
 80118f8:	0801f2d0 	.word	0x0801f2d0
 80118fc:	2000b374 	.word	0x2000b374
 8011900:	2000b378 	.word	0x2000b378
 8011904:	0801f39c 	.word	0x0801f39c
 8011908:	2000b37c 	.word	0x2000b37c
 801190c:	0801f3b8 	.word	0x0801f3b8
 8011910:	0801f3e0 	.word	0x0801f3e0
 8011914:	2000b380 	.word	0x2000b380

08011918 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b088      	sub	sp, #32
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
 8011920:	460b      	mov	r3, r1
 8011922:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8011924:	887b      	ldrh	r3, [r7, #2]
 8011926:	3303      	adds	r3, #3
 8011928:	b29b      	uxth	r3, r3
 801192a:	f023 0303 	bic.w	r3, r3, #3
 801192e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8011930:	8bfb      	ldrh	r3, [r7, #30]
 8011932:	2b0b      	cmp	r3, #11
 8011934:	d801      	bhi.n	801193a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8011936:	230c      	movs	r3, #12
 8011938:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801193a:	8bfb      	ldrh	r3, [r7, #30]
 801193c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011940:	d803      	bhi.n	801194a <mem_trim+0x32>
 8011942:	8bfa      	ldrh	r2, [r7, #30]
 8011944:	887b      	ldrh	r3, [r7, #2]
 8011946:	429a      	cmp	r2, r3
 8011948:	d201      	bcs.n	801194e <mem_trim+0x36>
    return NULL;
 801194a:	2300      	movs	r3, #0
 801194c:	e0d8      	b.n	8011b00 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801194e:	4b6e      	ldr	r3, [pc, #440]	@ (8011b08 <mem_trim+0x1f0>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	687a      	ldr	r2, [r7, #4]
 8011954:	429a      	cmp	r2, r3
 8011956:	d304      	bcc.n	8011962 <mem_trim+0x4a>
 8011958:	4b6c      	ldr	r3, [pc, #432]	@ (8011b0c <mem_trim+0x1f4>)
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	687a      	ldr	r2, [r7, #4]
 801195e:	429a      	cmp	r2, r3
 8011960:	d306      	bcc.n	8011970 <mem_trim+0x58>
 8011962:	4b6b      	ldr	r3, [pc, #428]	@ (8011b10 <mem_trim+0x1f8>)
 8011964:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8011968:	496a      	ldr	r1, [pc, #424]	@ (8011b14 <mem_trim+0x1fc>)
 801196a:	486b      	ldr	r0, [pc, #428]	@ (8011b18 <mem_trim+0x200>)
 801196c:	f00b fd2e 	bl	801d3cc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011970:	4b65      	ldr	r3, [pc, #404]	@ (8011b08 <mem_trim+0x1f0>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	687a      	ldr	r2, [r7, #4]
 8011976:	429a      	cmp	r2, r3
 8011978:	d304      	bcc.n	8011984 <mem_trim+0x6c>
 801197a:	4b64      	ldr	r3, [pc, #400]	@ (8011b0c <mem_trim+0x1f4>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	687a      	ldr	r2, [r7, #4]
 8011980:	429a      	cmp	r2, r3
 8011982:	d307      	bcc.n	8011994 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011984:	f00a fdb0 	bl	801c4e8 <sys_arch_protect>
 8011988:	60b8      	str	r0, [r7, #8]
 801198a:	68b8      	ldr	r0, [r7, #8]
 801198c:	f00a fdba 	bl	801c504 <sys_arch_unprotect>
    return rmem;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	e0b5      	b.n	8011b00 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	3b08      	subs	r3, #8
 8011998:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801199a:	69b8      	ldr	r0, [r7, #24]
 801199c:	f7ff fdee 	bl	801157c <mem_to_ptr>
 80119a0:	4603      	mov	r3, r0
 80119a2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80119a4:	69bb      	ldr	r3, [r7, #24]
 80119a6:	881a      	ldrh	r2, [r3, #0]
 80119a8:	8afb      	ldrh	r3, [r7, #22]
 80119aa:	1ad3      	subs	r3, r2, r3
 80119ac:	b29b      	uxth	r3, r3
 80119ae:	3b08      	subs	r3, #8
 80119b0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80119b2:	8bfa      	ldrh	r2, [r7, #30]
 80119b4:	8abb      	ldrh	r3, [r7, #20]
 80119b6:	429a      	cmp	r2, r3
 80119b8:	d906      	bls.n	80119c8 <mem_trim+0xb0>
 80119ba:	4b55      	ldr	r3, [pc, #340]	@ (8011b10 <mem_trim+0x1f8>)
 80119bc:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80119c0:	4956      	ldr	r1, [pc, #344]	@ (8011b1c <mem_trim+0x204>)
 80119c2:	4855      	ldr	r0, [pc, #340]	@ (8011b18 <mem_trim+0x200>)
 80119c4:	f00b fd02 	bl	801d3cc <iprintf>
  if (newsize > size) {
 80119c8:	8bfa      	ldrh	r2, [r7, #30]
 80119ca:	8abb      	ldrh	r3, [r7, #20]
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d901      	bls.n	80119d4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80119d0:	2300      	movs	r3, #0
 80119d2:	e095      	b.n	8011b00 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80119d4:	8bfa      	ldrh	r2, [r7, #30]
 80119d6:	8abb      	ldrh	r3, [r7, #20]
 80119d8:	429a      	cmp	r2, r3
 80119da:	d101      	bne.n	80119e0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	e08f      	b.n	8011b00 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80119e0:	484f      	ldr	r0, [pc, #316]	@ (8011b20 <mem_trim+0x208>)
 80119e2:	f00a fd3f 	bl	801c464 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80119e6:	69bb      	ldr	r3, [r7, #24]
 80119e8:	881b      	ldrh	r3, [r3, #0]
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7ff fdb4 	bl	8011558 <ptr_to_mem>
 80119f0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	791b      	ldrb	r3, [r3, #4]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d13f      	bne.n	8011a7a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80119fa:	69bb      	ldr	r3, [r7, #24]
 80119fc:	881b      	ldrh	r3, [r3, #0]
 80119fe:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011a02:	d106      	bne.n	8011a12 <mem_trim+0xfa>
 8011a04:	4b42      	ldr	r3, [pc, #264]	@ (8011b10 <mem_trim+0x1f8>)
 8011a06:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8011a0a:	4946      	ldr	r1, [pc, #280]	@ (8011b24 <mem_trim+0x20c>)
 8011a0c:	4842      	ldr	r0, [pc, #264]	@ (8011b18 <mem_trim+0x200>)
 8011a0e:	f00b fcdd 	bl	801d3cc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8011a12:	693b      	ldr	r3, [r7, #16]
 8011a14:	881b      	ldrh	r3, [r3, #0]
 8011a16:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011a18:	8afa      	ldrh	r2, [r7, #22]
 8011a1a:	8bfb      	ldrh	r3, [r7, #30]
 8011a1c:	4413      	add	r3, r2
 8011a1e:	b29b      	uxth	r3, r3
 8011a20:	3308      	adds	r3, #8
 8011a22:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8011a24:	4b40      	ldr	r3, [pc, #256]	@ (8011b28 <mem_trim+0x210>)
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	693a      	ldr	r2, [r7, #16]
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	d106      	bne.n	8011a3c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8011a2e:	89fb      	ldrh	r3, [r7, #14]
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7ff fd91 	bl	8011558 <ptr_to_mem>
 8011a36:	4603      	mov	r3, r0
 8011a38:	4a3b      	ldr	r2, [pc, #236]	@ (8011b28 <mem_trim+0x210>)
 8011a3a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011a3c:	89fb      	ldrh	r3, [r7, #14]
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f7ff fd8a 	bl	8011558 <ptr_to_mem>
 8011a44:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8011a46:	693b      	ldr	r3, [r7, #16]
 8011a48:	2200      	movs	r2, #0
 8011a4a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	89ba      	ldrh	r2, [r7, #12]
 8011a50:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	8afa      	ldrh	r2, [r7, #22]
 8011a56:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011a58:	69bb      	ldr	r3, [r7, #24]
 8011a5a:	89fa      	ldrh	r2, [r7, #14]
 8011a5c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	881b      	ldrh	r3, [r3, #0]
 8011a62:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011a66:	d047      	beq.n	8011af8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	881b      	ldrh	r3, [r3, #0]
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f7ff fd73 	bl	8011558 <ptr_to_mem>
 8011a72:	4602      	mov	r2, r0
 8011a74:	89fb      	ldrh	r3, [r7, #14]
 8011a76:	8053      	strh	r3, [r2, #2]
 8011a78:	e03e      	b.n	8011af8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011a7a:	8bfb      	ldrh	r3, [r7, #30]
 8011a7c:	f103 0214 	add.w	r2, r3, #20
 8011a80:	8abb      	ldrh	r3, [r7, #20]
 8011a82:	429a      	cmp	r2, r3
 8011a84:	d838      	bhi.n	8011af8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011a86:	8afa      	ldrh	r2, [r7, #22]
 8011a88:	8bfb      	ldrh	r3, [r7, #30]
 8011a8a:	4413      	add	r3, r2
 8011a8c:	b29b      	uxth	r3, r3
 8011a8e:	3308      	adds	r3, #8
 8011a90:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011a92:	69bb      	ldr	r3, [r7, #24]
 8011a94:	881b      	ldrh	r3, [r3, #0]
 8011a96:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011a9a:	d106      	bne.n	8011aaa <mem_trim+0x192>
 8011a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8011b10 <mem_trim+0x1f8>)
 8011a9e:	f240 3216 	movw	r2, #790	@ 0x316
 8011aa2:	4920      	ldr	r1, [pc, #128]	@ (8011b24 <mem_trim+0x20c>)
 8011aa4:	481c      	ldr	r0, [pc, #112]	@ (8011b18 <mem_trim+0x200>)
 8011aa6:	f00b fc91 	bl	801d3cc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011aaa:	89fb      	ldrh	r3, [r7, #14]
 8011aac:	4618      	mov	r0, r3
 8011aae:	f7ff fd53 	bl	8011558 <ptr_to_mem>
 8011ab2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8011b28 <mem_trim+0x210>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	693a      	ldr	r2, [r7, #16]
 8011aba:	429a      	cmp	r2, r3
 8011abc:	d202      	bcs.n	8011ac4 <mem_trim+0x1ac>
      lfree = mem2;
 8011abe:	4a1a      	ldr	r2, [pc, #104]	@ (8011b28 <mem_trim+0x210>)
 8011ac0:	693b      	ldr	r3, [r7, #16]
 8011ac2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011ac4:	693b      	ldr	r3, [r7, #16]
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011aca:	69bb      	ldr	r3, [r7, #24]
 8011acc:	881a      	ldrh	r2, [r3, #0]
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8011ad2:	693b      	ldr	r3, [r7, #16]
 8011ad4:	8afa      	ldrh	r2, [r7, #22]
 8011ad6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011ad8:	69bb      	ldr	r3, [r7, #24]
 8011ada:	89fa      	ldrh	r2, [r7, #14]
 8011adc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011ade:	693b      	ldr	r3, [r7, #16]
 8011ae0:	881b      	ldrh	r3, [r3, #0]
 8011ae2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011ae6:	d007      	beq.n	8011af8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011ae8:	693b      	ldr	r3, [r7, #16]
 8011aea:	881b      	ldrh	r3, [r3, #0]
 8011aec:	4618      	mov	r0, r3
 8011aee:	f7ff fd33 	bl	8011558 <ptr_to_mem>
 8011af2:	4602      	mov	r2, r0
 8011af4:	89fb      	ldrh	r3, [r7, #14]
 8011af6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011af8:	4809      	ldr	r0, [pc, #36]	@ (8011b20 <mem_trim+0x208>)
 8011afa:	f00a fcc2 	bl	801c482 <sys_mutex_unlock>
  return rmem;
 8011afe:	687b      	ldr	r3, [r7, #4]
}
 8011b00:	4618      	mov	r0, r3
 8011b02:	3720      	adds	r7, #32
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd80      	pop	{r7, pc}
 8011b08:	2000b374 	.word	0x2000b374
 8011b0c:	2000b378 	.word	0x2000b378
 8011b10:	0801f288 	.word	0x0801f288
 8011b14:	0801f414 	.word	0x0801f414
 8011b18:	0801f2d0 	.word	0x0801f2d0
 8011b1c:	0801f42c 	.word	0x0801f42c
 8011b20:	2000b37c 	.word	0x2000b37c
 8011b24:	0801f44c 	.word	0x0801f44c
 8011b28:	2000b380 	.word	0x2000b380

08011b2c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b088      	sub	sp, #32
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	4603      	mov	r3, r0
 8011b34:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011b36:	88fb      	ldrh	r3, [r7, #6]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d101      	bne.n	8011b40 <mem_malloc+0x14>
    return NULL;
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	e0e2      	b.n	8011d06 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011b40:	88fb      	ldrh	r3, [r7, #6]
 8011b42:	3303      	adds	r3, #3
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	f023 0303 	bic.w	r3, r3, #3
 8011b4a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011b4c:	8bbb      	ldrh	r3, [r7, #28]
 8011b4e:	2b0b      	cmp	r3, #11
 8011b50:	d801      	bhi.n	8011b56 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8011b52:	230c      	movs	r3, #12
 8011b54:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8011b56:	8bbb      	ldrh	r3, [r7, #28]
 8011b58:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011b5c:	d803      	bhi.n	8011b66 <mem_malloc+0x3a>
 8011b5e:	8bba      	ldrh	r2, [r7, #28]
 8011b60:	88fb      	ldrh	r3, [r7, #6]
 8011b62:	429a      	cmp	r2, r3
 8011b64:	d201      	bcs.n	8011b6a <mem_malloc+0x3e>
    return NULL;
 8011b66:	2300      	movs	r3, #0
 8011b68:	e0cd      	b.n	8011d06 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8011b6a:	4869      	ldr	r0, [pc, #420]	@ (8011d10 <mem_malloc+0x1e4>)
 8011b6c:	f00a fc7a 	bl	801c464 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011b70:	4b68      	ldr	r3, [pc, #416]	@ (8011d14 <mem_malloc+0x1e8>)
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	4618      	mov	r0, r3
 8011b76:	f7ff fd01 	bl	801157c <mem_to_ptr>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	83fb      	strh	r3, [r7, #30]
 8011b7e:	e0b7      	b.n	8011cf0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011b80:	8bfb      	ldrh	r3, [r7, #30]
 8011b82:	4618      	mov	r0, r3
 8011b84:	f7ff fce8 	bl	8011558 <ptr_to_mem>
 8011b88:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011b8a:	697b      	ldr	r3, [r7, #20]
 8011b8c:	791b      	ldrb	r3, [r3, #4]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	f040 80a7 	bne.w	8011ce2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011b94:	697b      	ldr	r3, [r7, #20]
 8011b96:	881b      	ldrh	r3, [r3, #0]
 8011b98:	461a      	mov	r2, r3
 8011b9a:	8bfb      	ldrh	r3, [r7, #30]
 8011b9c:	1ad3      	subs	r3, r2, r3
 8011b9e:	f1a3 0208 	sub.w	r2, r3, #8
 8011ba2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	f0c0 809c 	bcc.w	8011ce2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011baa:	697b      	ldr	r3, [r7, #20]
 8011bac:	881b      	ldrh	r3, [r3, #0]
 8011bae:	461a      	mov	r2, r3
 8011bb0:	8bfb      	ldrh	r3, [r7, #30]
 8011bb2:	1ad3      	subs	r3, r2, r3
 8011bb4:	f1a3 0208 	sub.w	r2, r3, #8
 8011bb8:	8bbb      	ldrh	r3, [r7, #28]
 8011bba:	3314      	adds	r3, #20
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	d333      	bcc.n	8011c28 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011bc0:	8bfa      	ldrh	r2, [r7, #30]
 8011bc2:	8bbb      	ldrh	r3, [r7, #28]
 8011bc4:	4413      	add	r3, r2
 8011bc6:	b29b      	uxth	r3, r3
 8011bc8:	3308      	adds	r3, #8
 8011bca:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011bcc:	8a7b      	ldrh	r3, [r7, #18]
 8011bce:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011bd2:	d106      	bne.n	8011be2 <mem_malloc+0xb6>
 8011bd4:	4b50      	ldr	r3, [pc, #320]	@ (8011d18 <mem_malloc+0x1ec>)
 8011bd6:	f240 3287 	movw	r2, #903	@ 0x387
 8011bda:	4950      	ldr	r1, [pc, #320]	@ (8011d1c <mem_malloc+0x1f0>)
 8011bdc:	4850      	ldr	r0, [pc, #320]	@ (8011d20 <mem_malloc+0x1f4>)
 8011bde:	f00b fbf5 	bl	801d3cc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8011be2:	8a7b      	ldrh	r3, [r7, #18]
 8011be4:	4618      	mov	r0, r3
 8011be6:	f7ff fcb7 	bl	8011558 <ptr_to_mem>
 8011bea:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	2200      	movs	r2, #0
 8011bf0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8011bf2:	697b      	ldr	r3, [r7, #20]
 8011bf4:	881a      	ldrh	r2, [r3, #0]
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	8bfa      	ldrh	r2, [r7, #30]
 8011bfe:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8011c00:	697b      	ldr	r3, [r7, #20]
 8011c02:	8a7a      	ldrh	r2, [r7, #18]
 8011c04:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8011c06:	697b      	ldr	r3, [r7, #20]
 8011c08:	2201      	movs	r2, #1
 8011c0a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	881b      	ldrh	r3, [r3, #0]
 8011c10:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011c14:	d00b      	beq.n	8011c2e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	881b      	ldrh	r3, [r3, #0]
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f7ff fc9c 	bl	8011558 <ptr_to_mem>
 8011c20:	4602      	mov	r2, r0
 8011c22:	8a7b      	ldrh	r3, [r7, #18]
 8011c24:	8053      	strh	r3, [r2, #2]
 8011c26:	e002      	b.n	8011c2e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011c28:	697b      	ldr	r3, [r7, #20]
 8011c2a:	2201      	movs	r2, #1
 8011c2c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011c2e:	4b39      	ldr	r3, [pc, #228]	@ (8011d14 <mem_malloc+0x1e8>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	697a      	ldr	r2, [r7, #20]
 8011c34:	429a      	cmp	r2, r3
 8011c36:	d127      	bne.n	8011c88 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011c38:	4b36      	ldr	r3, [pc, #216]	@ (8011d14 <mem_malloc+0x1e8>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011c3e:	e005      	b.n	8011c4c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011c40:	69bb      	ldr	r3, [r7, #24]
 8011c42:	881b      	ldrh	r3, [r3, #0]
 8011c44:	4618      	mov	r0, r3
 8011c46:	f7ff fc87 	bl	8011558 <ptr_to_mem>
 8011c4a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011c4c:	69bb      	ldr	r3, [r7, #24]
 8011c4e:	791b      	ldrb	r3, [r3, #4]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d004      	beq.n	8011c5e <mem_malloc+0x132>
 8011c54:	4b33      	ldr	r3, [pc, #204]	@ (8011d24 <mem_malloc+0x1f8>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	69ba      	ldr	r2, [r7, #24]
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d1f0      	bne.n	8011c40 <mem_malloc+0x114>
          }
          lfree = cur;
 8011c5e:	4a2d      	ldr	r2, [pc, #180]	@ (8011d14 <mem_malloc+0x1e8>)
 8011c60:	69bb      	ldr	r3, [r7, #24]
 8011c62:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8011c64:	4b2b      	ldr	r3, [pc, #172]	@ (8011d14 <mem_malloc+0x1e8>)
 8011c66:	681a      	ldr	r2, [r3, #0]
 8011c68:	4b2e      	ldr	r3, [pc, #184]	@ (8011d24 <mem_malloc+0x1f8>)
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	d00b      	beq.n	8011c88 <mem_malloc+0x15c>
 8011c70:	4b28      	ldr	r3, [pc, #160]	@ (8011d14 <mem_malloc+0x1e8>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	791b      	ldrb	r3, [r3, #4]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d006      	beq.n	8011c88 <mem_malloc+0x15c>
 8011c7a:	4b27      	ldr	r3, [pc, #156]	@ (8011d18 <mem_malloc+0x1ec>)
 8011c7c:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8011c80:	4929      	ldr	r1, [pc, #164]	@ (8011d28 <mem_malloc+0x1fc>)
 8011c82:	4827      	ldr	r0, [pc, #156]	@ (8011d20 <mem_malloc+0x1f4>)
 8011c84:	f00b fba2 	bl	801d3cc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8011c88:	4821      	ldr	r0, [pc, #132]	@ (8011d10 <mem_malloc+0x1e4>)
 8011c8a:	f00a fbfa 	bl	801c482 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8011c8e:	8bba      	ldrh	r2, [r7, #28]
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	4413      	add	r3, r2
 8011c94:	3308      	adds	r3, #8
 8011c96:	4a23      	ldr	r2, [pc, #140]	@ (8011d24 <mem_malloc+0x1f8>)
 8011c98:	6812      	ldr	r2, [r2, #0]
 8011c9a:	4293      	cmp	r3, r2
 8011c9c:	d906      	bls.n	8011cac <mem_malloc+0x180>
 8011c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8011d18 <mem_malloc+0x1ec>)
 8011ca0:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8011ca4:	4921      	ldr	r1, [pc, #132]	@ (8011d2c <mem_malloc+0x200>)
 8011ca6:	481e      	ldr	r0, [pc, #120]	@ (8011d20 <mem_malloc+0x1f4>)
 8011ca8:	f00b fb90 	bl	801d3cc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011cac:	697b      	ldr	r3, [r7, #20]
 8011cae:	f003 0303 	and.w	r3, r3, #3
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d006      	beq.n	8011cc4 <mem_malloc+0x198>
 8011cb6:	4b18      	ldr	r3, [pc, #96]	@ (8011d18 <mem_malloc+0x1ec>)
 8011cb8:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8011cbc:	491c      	ldr	r1, [pc, #112]	@ (8011d30 <mem_malloc+0x204>)
 8011cbe:	4818      	ldr	r0, [pc, #96]	@ (8011d20 <mem_malloc+0x1f4>)
 8011cc0:	f00b fb84 	bl	801d3cc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011cc4:	697b      	ldr	r3, [r7, #20]
 8011cc6:	f003 0303 	and.w	r3, r3, #3
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d006      	beq.n	8011cdc <mem_malloc+0x1b0>
 8011cce:	4b12      	ldr	r3, [pc, #72]	@ (8011d18 <mem_malloc+0x1ec>)
 8011cd0:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8011cd4:	4917      	ldr	r1, [pc, #92]	@ (8011d34 <mem_malloc+0x208>)
 8011cd6:	4812      	ldr	r0, [pc, #72]	@ (8011d20 <mem_malloc+0x1f4>)
 8011cd8:	f00b fb78 	bl	801d3cc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011cdc:	697b      	ldr	r3, [r7, #20]
 8011cde:	3308      	adds	r3, #8
 8011ce0:	e011      	b.n	8011d06 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8011ce2:	8bfb      	ldrh	r3, [r7, #30]
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7ff fc37 	bl	8011558 <ptr_to_mem>
 8011cea:	4603      	mov	r3, r0
 8011cec:	881b      	ldrh	r3, [r3, #0]
 8011cee:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011cf0:	8bfa      	ldrh	r2, [r7, #30]
 8011cf2:	8bbb      	ldrh	r3, [r7, #28]
 8011cf4:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 8011cf8:	429a      	cmp	r2, r3
 8011cfa:	f4ff af41 	bcc.w	8011b80 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8011cfe:	4804      	ldr	r0, [pc, #16]	@ (8011d10 <mem_malloc+0x1e4>)
 8011d00:	f00a fbbf 	bl	801c482 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011d04:	2300      	movs	r3, #0
}
 8011d06:	4618      	mov	r0, r3
 8011d08:	3720      	adds	r7, #32
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	bd80      	pop	{r7, pc}
 8011d0e:	bf00      	nop
 8011d10:	2000b37c 	.word	0x2000b37c
 8011d14:	2000b380 	.word	0x2000b380
 8011d18:	0801f288 	.word	0x0801f288
 8011d1c:	0801f44c 	.word	0x0801f44c
 8011d20:	0801f2d0 	.word	0x0801f2d0
 8011d24:	2000b378 	.word	0x2000b378
 8011d28:	0801f460 	.word	0x0801f460
 8011d2c:	0801f47c 	.word	0x0801f47c
 8011d30:	0801f4ac 	.word	0x0801f4ac
 8011d34:	0801f4dc 	.word	0x0801f4dc

08011d38 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011d38:	b480      	push	{r7}
 8011d3a:	b085      	sub	sp, #20
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	689b      	ldr	r3, [r3, #8]
 8011d44:	2200      	movs	r2, #0
 8011d46:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	3303      	adds	r3, #3
 8011d4e:	f023 0303 	bic.w	r3, r3, #3
 8011d52:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011d54:	2300      	movs	r3, #0
 8011d56:	60fb      	str	r3, [r7, #12]
 8011d58:	e011      	b.n	8011d7e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	689b      	ldr	r3, [r3, #8]
 8011d5e:	681a      	ldr	r2, [r3, #0]
 8011d60:	68bb      	ldr	r3, [r7, #8]
 8011d62:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	689b      	ldr	r3, [r3, #8]
 8011d68:	68ba      	ldr	r2, [r7, #8]
 8011d6a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	881b      	ldrh	r3, [r3, #0]
 8011d70:	461a      	mov	r2, r3
 8011d72:	68bb      	ldr	r3, [r7, #8]
 8011d74:	4413      	add	r3, r2
 8011d76:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	3301      	adds	r3, #1
 8011d7c:	60fb      	str	r3, [r7, #12]
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	885b      	ldrh	r3, [r3, #2]
 8011d82:	461a      	mov	r2, r3
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	4293      	cmp	r3, r2
 8011d88:	dbe7      	blt.n	8011d5a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011d8a:	bf00      	nop
 8011d8c:	bf00      	nop
 8011d8e:	3714      	adds	r7, #20
 8011d90:	46bd      	mov	sp, r7
 8011d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d96:	4770      	bx	lr

08011d98 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011d9e:	2300      	movs	r3, #0
 8011da0:	80fb      	strh	r3, [r7, #6]
 8011da2:	e009      	b.n	8011db8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011da4:	88fb      	ldrh	r3, [r7, #6]
 8011da6:	4a08      	ldr	r2, [pc, #32]	@ (8011dc8 <memp_init+0x30>)
 8011da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7ff ffc3 	bl	8011d38 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011db2:	88fb      	ldrh	r3, [r7, #6]
 8011db4:	3301      	adds	r3, #1
 8011db6:	80fb      	strh	r3, [r7, #6]
 8011db8:	88fb      	ldrh	r3, [r7, #6]
 8011dba:	2b0c      	cmp	r3, #12
 8011dbc:	d9f2      	bls.n	8011da4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8011dbe:	bf00      	nop
 8011dc0:	bf00      	nop
 8011dc2:	3708      	adds	r7, #8
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}
 8011dc8:	08033460 	.word	0x08033460

08011dcc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b084      	sub	sp, #16
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8011dd4:	f00a fb88 	bl	801c4e8 <sys_arch_protect>
 8011dd8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	689b      	ldr	r3, [r3, #8]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8011de2:	68bb      	ldr	r3, [r7, #8]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d015      	beq.n	8011e14 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	689b      	ldr	r3, [r3, #8]
 8011dec:	68ba      	ldr	r2, [r7, #8]
 8011dee:	6812      	ldr	r2, [r2, #0]
 8011df0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	f003 0303 	and.w	r3, r3, #3
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d006      	beq.n	8011e0a <do_memp_malloc_pool+0x3e>
 8011dfc:	4b09      	ldr	r3, [pc, #36]	@ (8011e24 <do_memp_malloc_pool+0x58>)
 8011dfe:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8011e02:	4909      	ldr	r1, [pc, #36]	@ (8011e28 <do_memp_malloc_pool+0x5c>)
 8011e04:	4809      	ldr	r0, [pc, #36]	@ (8011e2c <do_memp_malloc_pool+0x60>)
 8011e06:	f00b fae1 	bl	801d3cc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011e0a:	68f8      	ldr	r0, [r7, #12]
 8011e0c:	f00a fb7a 	bl	801c504 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	e003      	b.n	8011e1c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011e14:	68f8      	ldr	r0, [r7, #12]
 8011e16:	f00a fb75 	bl	801c504 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011e1a:	2300      	movs	r3, #0
}
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	3710      	adds	r7, #16
 8011e20:	46bd      	mov	sp, r7
 8011e22:	bd80      	pop	{r7, pc}
 8011e24:	0801f500 	.word	0x0801f500
 8011e28:	0801f530 	.word	0x0801f530
 8011e2c:	0801f554 	.word	0x0801f554

08011e30 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b082      	sub	sp, #8
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d106      	bne.n	8011e4c <memp_malloc_pool+0x1c>
 8011e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8011e68 <memp_malloc_pool+0x38>)
 8011e40:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8011e44:	4909      	ldr	r1, [pc, #36]	@ (8011e6c <memp_malloc_pool+0x3c>)
 8011e46:	480a      	ldr	r0, [pc, #40]	@ (8011e70 <memp_malloc_pool+0x40>)
 8011e48:	f00b fac0 	bl	801d3cc <iprintf>
  if (desc == NULL) {
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d101      	bne.n	8011e56 <memp_malloc_pool+0x26>
    return NULL;
 8011e52:	2300      	movs	r3, #0
 8011e54:	e003      	b.n	8011e5e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8011e56:	6878      	ldr	r0, [r7, #4]
 8011e58:	f7ff ffb8 	bl	8011dcc <do_memp_malloc_pool>
 8011e5c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3708      	adds	r7, #8
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd80      	pop	{r7, pc}
 8011e66:	bf00      	nop
 8011e68:	0801f500 	.word	0x0801f500
 8011e6c:	0801f57c 	.word	0x0801f57c
 8011e70:	0801f554 	.word	0x0801f554

08011e74 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b084      	sub	sp, #16
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011e7e:	79fb      	ldrb	r3, [r7, #7]
 8011e80:	2b0c      	cmp	r3, #12
 8011e82:	d908      	bls.n	8011e96 <memp_malloc+0x22>
 8011e84:	4b0a      	ldr	r3, [pc, #40]	@ (8011eb0 <memp_malloc+0x3c>)
 8011e86:	f240 1257 	movw	r2, #343	@ 0x157
 8011e8a:	490a      	ldr	r1, [pc, #40]	@ (8011eb4 <memp_malloc+0x40>)
 8011e8c:	480a      	ldr	r0, [pc, #40]	@ (8011eb8 <memp_malloc+0x44>)
 8011e8e:	f00b fa9d 	bl	801d3cc <iprintf>
 8011e92:	2300      	movs	r3, #0
 8011e94:	e008      	b.n	8011ea8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8011e96:	79fb      	ldrb	r3, [r7, #7]
 8011e98:	4a08      	ldr	r2, [pc, #32]	@ (8011ebc <memp_malloc+0x48>)
 8011e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f7ff ff94 	bl	8011dcc <do_memp_malloc_pool>
 8011ea4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8011ea6:	68fb      	ldr	r3, [r7, #12]
}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	3710      	adds	r7, #16
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}
 8011eb0:	0801f500 	.word	0x0801f500
 8011eb4:	0801f590 	.word	0x0801f590
 8011eb8:	0801f554 	.word	0x0801f554
 8011ebc:	08033460 	.word	0x08033460

08011ec0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b084      	sub	sp, #16
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
 8011ec8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	f003 0303 	and.w	r3, r3, #3
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d006      	beq.n	8011ee2 <do_memp_free_pool+0x22>
 8011ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8011f0c <do_memp_free_pool+0x4c>)
 8011ed6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8011eda:	490d      	ldr	r1, [pc, #52]	@ (8011f10 <do_memp_free_pool+0x50>)
 8011edc:	480d      	ldr	r0, [pc, #52]	@ (8011f14 <do_memp_free_pool+0x54>)
 8011ede:	f00b fa75 	bl	801d3cc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8011ee2:	683b      	ldr	r3, [r7, #0]
 8011ee4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8011ee6:	f00a faff 	bl	801c4e8 <sys_arch_protect>
 8011eea:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	689b      	ldr	r3, [r3, #8]
 8011ef0:	681a      	ldr	r2, [r3, #0]
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	689b      	ldr	r3, [r3, #8]
 8011efa:	68fa      	ldr	r2, [r7, #12]
 8011efc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8011efe:	68b8      	ldr	r0, [r7, #8]
 8011f00:	f00a fb00 	bl	801c504 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8011f04:	bf00      	nop
 8011f06:	3710      	adds	r7, #16
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd80      	pop	{r7, pc}
 8011f0c:	0801f500 	.word	0x0801f500
 8011f10:	0801f5b0 	.word	0x0801f5b0
 8011f14:	0801f554 	.word	0x0801f554

08011f18 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b082      	sub	sp, #8
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
 8011f20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d106      	bne.n	8011f36 <memp_free_pool+0x1e>
 8011f28:	4b0a      	ldr	r3, [pc, #40]	@ (8011f54 <memp_free_pool+0x3c>)
 8011f2a:	f240 1295 	movw	r2, #405	@ 0x195
 8011f2e:	490a      	ldr	r1, [pc, #40]	@ (8011f58 <memp_free_pool+0x40>)
 8011f30:	480a      	ldr	r0, [pc, #40]	@ (8011f5c <memp_free_pool+0x44>)
 8011f32:	f00b fa4b 	bl	801d3cc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d007      	beq.n	8011f4c <memp_free_pool+0x34>
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d004      	beq.n	8011f4c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8011f42:	6839      	ldr	r1, [r7, #0]
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	f7ff ffbb 	bl	8011ec0 <do_memp_free_pool>
 8011f4a:	e000      	b.n	8011f4e <memp_free_pool+0x36>
    return;
 8011f4c:	bf00      	nop
}
 8011f4e:	3708      	adds	r7, #8
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}
 8011f54:	0801f500 	.word	0x0801f500
 8011f58:	0801f57c 	.word	0x0801f57c
 8011f5c:	0801f554 	.word	0x0801f554

08011f60 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b082      	sub	sp, #8
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	4603      	mov	r3, r0
 8011f68:	6039      	str	r1, [r7, #0]
 8011f6a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011f6c:	79fb      	ldrb	r3, [r7, #7]
 8011f6e:	2b0c      	cmp	r3, #12
 8011f70:	d907      	bls.n	8011f82 <memp_free+0x22>
 8011f72:	4b0c      	ldr	r3, [pc, #48]	@ (8011fa4 <memp_free+0x44>)
 8011f74:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8011f78:	490b      	ldr	r1, [pc, #44]	@ (8011fa8 <memp_free+0x48>)
 8011f7a:	480c      	ldr	r0, [pc, #48]	@ (8011fac <memp_free+0x4c>)
 8011f7c:	f00b fa26 	bl	801d3cc <iprintf>
 8011f80:	e00c      	b.n	8011f9c <memp_free+0x3c>

  if (mem == NULL) {
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d008      	beq.n	8011f9a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8011f88:	79fb      	ldrb	r3, [r7, #7]
 8011f8a:	4a09      	ldr	r2, [pc, #36]	@ (8011fb0 <memp_free+0x50>)
 8011f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f90:	6839      	ldr	r1, [r7, #0]
 8011f92:	4618      	mov	r0, r3
 8011f94:	f7ff ff94 	bl	8011ec0 <do_memp_free_pool>
 8011f98:	e000      	b.n	8011f9c <memp_free+0x3c>
    return;
 8011f9a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8011f9c:	3708      	adds	r7, #8
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}
 8011fa2:	bf00      	nop
 8011fa4:	0801f500 	.word	0x0801f500
 8011fa8:	0801f5d0 	.word	0x0801f5d0
 8011fac:	0801f554 	.word	0x0801f554
 8011fb0:	08033460 	.word	0x08033460

08011fb4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8011fb4:	b480      	push	{r7}
 8011fb6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011fb8:	bf00      	nop
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc0:	4770      	bx	lr
	...

08011fc4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b086      	sub	sp, #24
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	60f8      	str	r0, [r7, #12]
 8011fcc:	60b9      	str	r1, [r7, #8]
 8011fce:	607a      	str	r2, [r7, #4]
 8011fd0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d108      	bne.n	8011fea <netif_add+0x26>
 8011fd8:	4b57      	ldr	r3, [pc, #348]	@ (8012138 <netif_add+0x174>)
 8011fda:	f240 1227 	movw	r2, #295	@ 0x127
 8011fde:	4957      	ldr	r1, [pc, #348]	@ (801213c <netif_add+0x178>)
 8011fe0:	4857      	ldr	r0, [pc, #348]	@ (8012140 <netif_add+0x17c>)
 8011fe2:	f00b f9f3 	bl	801d3cc <iprintf>
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	e0a2      	b.n	8012130 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8011fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d108      	bne.n	8012002 <netif_add+0x3e>
 8011ff0:	4b51      	ldr	r3, [pc, #324]	@ (8012138 <netif_add+0x174>)
 8011ff2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8011ff6:	4953      	ldr	r1, [pc, #332]	@ (8012144 <netif_add+0x180>)
 8011ff8:	4851      	ldr	r0, [pc, #324]	@ (8012140 <netif_add+0x17c>)
 8011ffa:	f00b f9e7 	bl	801d3cc <iprintf>
 8011ffe:	2300      	movs	r3, #0
 8012000:	e096      	b.n	8012130 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d101      	bne.n	801200c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8012008:	4b4f      	ldr	r3, [pc, #316]	@ (8012148 <netif_add+0x184>)
 801200a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d101      	bne.n	8012016 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8012012:	4b4d      	ldr	r3, [pc, #308]	@ (8012148 <netif_add+0x184>)
 8012014:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d101      	bne.n	8012020 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801201c:	4b4a      	ldr	r3, [pc, #296]	@ (8012148 <netif_add+0x184>)
 801201e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	2200      	movs	r2, #0
 8012024:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	2200      	movs	r2, #0
 801202a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	2200      	movs	r2, #0
 8012030:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	4a45      	ldr	r2, [pc, #276]	@ (801214c <netif_add+0x188>)
 8012036:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	2200      	movs	r2, #0
 801203c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	2200      	movs	r2, #0
 8012042:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	2200      	movs	r2, #0
 801204a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	6a3a      	ldr	r2, [r7, #32]
 8012050:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8012052:	4b3f      	ldr	r3, [pc, #252]	@ (8012150 <netif_add+0x18c>)
 8012054:	781a      	ldrb	r2, [r3, #0]
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012060:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8012062:	683b      	ldr	r3, [r7, #0]
 8012064:	687a      	ldr	r2, [r7, #4]
 8012066:	68b9      	ldr	r1, [r7, #8]
 8012068:	68f8      	ldr	r0, [r7, #12]
 801206a:	f000 f913 	bl	8012294 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012070:	68f8      	ldr	r0, [r7, #12]
 8012072:	4798      	blx	r3
 8012074:	4603      	mov	r3, r0
 8012076:	2b00      	cmp	r3, #0
 8012078:	d001      	beq.n	801207e <netif_add+0xba>
    return NULL;
 801207a:	2300      	movs	r3, #0
 801207c:	e058      	b.n	8012130 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012084:	2bff      	cmp	r3, #255	@ 0xff
 8012086:	d103      	bne.n	8012090 <netif_add+0xcc>
        netif->num = 0;
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	2200      	movs	r2, #0
 801208c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8012090:	2300      	movs	r3, #0
 8012092:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012094:	4b2f      	ldr	r3, [pc, #188]	@ (8012154 <netif_add+0x190>)
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	617b      	str	r3, [r7, #20]
 801209a:	e02b      	b.n	80120f4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801209c:	697a      	ldr	r2, [r7, #20]
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d106      	bne.n	80120b2 <netif_add+0xee>
 80120a4:	4b24      	ldr	r3, [pc, #144]	@ (8012138 <netif_add+0x174>)
 80120a6:	f240 128b 	movw	r2, #395	@ 0x18b
 80120aa:	492b      	ldr	r1, [pc, #172]	@ (8012158 <netif_add+0x194>)
 80120ac:	4824      	ldr	r0, [pc, #144]	@ (8012140 <netif_add+0x17c>)
 80120ae:	f00b f98d 	bl	801d3cc <iprintf>
        num_netifs++;
 80120b2:	693b      	ldr	r3, [r7, #16]
 80120b4:	3301      	adds	r3, #1
 80120b6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80120b8:	693b      	ldr	r3, [r7, #16]
 80120ba:	2bff      	cmp	r3, #255	@ 0xff
 80120bc:	dd06      	ble.n	80120cc <netif_add+0x108>
 80120be:	4b1e      	ldr	r3, [pc, #120]	@ (8012138 <netif_add+0x174>)
 80120c0:	f240 128d 	movw	r2, #397	@ 0x18d
 80120c4:	4925      	ldr	r1, [pc, #148]	@ (801215c <netif_add+0x198>)
 80120c6:	481e      	ldr	r0, [pc, #120]	@ (8012140 <netif_add+0x17c>)
 80120c8:	f00b f980 	bl	801d3cc <iprintf>
        if (netif2->num == netif->num) {
 80120cc:	697b      	ldr	r3, [r7, #20]
 80120ce:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80120d8:	429a      	cmp	r2, r3
 80120da:	d108      	bne.n	80120ee <netif_add+0x12a>
          netif->num++;
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80120e2:	3301      	adds	r3, #1
 80120e4:	b2da      	uxtb	r2, r3
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80120ec:	e005      	b.n	80120fa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	617b      	str	r3, [r7, #20]
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d1d0      	bne.n	801209c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80120fa:	697b      	ldr	r3, [r7, #20]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d1be      	bne.n	801207e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012106:	2bfe      	cmp	r3, #254	@ 0xfe
 8012108:	d103      	bne.n	8012112 <netif_add+0x14e>
    netif_num = 0;
 801210a:	4b11      	ldr	r3, [pc, #68]	@ (8012150 <netif_add+0x18c>)
 801210c:	2200      	movs	r2, #0
 801210e:	701a      	strb	r2, [r3, #0]
 8012110:	e006      	b.n	8012120 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012118:	3301      	adds	r3, #1
 801211a:	b2da      	uxtb	r2, r3
 801211c:	4b0c      	ldr	r3, [pc, #48]	@ (8012150 <netif_add+0x18c>)
 801211e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8012120:	4b0c      	ldr	r3, [pc, #48]	@ (8012154 <netif_add+0x190>)
 8012122:	681a      	ldr	r2, [r3, #0]
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8012128:	4a0a      	ldr	r2, [pc, #40]	@ (8012154 <netif_add+0x190>)
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801212e:	68fb      	ldr	r3, [r7, #12]
}
 8012130:	4618      	mov	r0, r3
 8012132:	3718      	adds	r7, #24
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}
 8012138:	0801f5ec 	.word	0x0801f5ec
 801213c:	0801f680 	.word	0x0801f680
 8012140:	0801f63c 	.word	0x0801f63c
 8012144:	0801f69c 	.word	0x0801f69c
 8012148:	080334d4 	.word	0x080334d4
 801214c:	0801256f 	.word	0x0801256f
 8012150:	2000e458 	.word	0x2000e458
 8012154:	2000e450 	.word	0x2000e450
 8012158:	0801f6c0 	.word	0x0801f6c0
 801215c:	0801f6d4 	.word	0x0801f6d4

08012160 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b082      	sub	sp, #8
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801216a:	6839      	ldr	r1, [r7, #0]
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f002 fe51 	bl	8014e14 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8012172:	6839      	ldr	r1, [r7, #0]
 8012174:	6878      	ldr	r0, [r7, #4]
 8012176:	f007 fcfd 	bl	8019b74 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801217a:	bf00      	nop
 801217c:	3708      	adds	r7, #8
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}
	...

08012184 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b086      	sub	sp, #24
 8012188:	af00      	add	r7, sp, #0
 801218a:	60f8      	str	r0, [r7, #12]
 801218c:	60b9      	str	r1, [r7, #8]
 801218e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d106      	bne.n	80121a4 <netif_do_set_ipaddr+0x20>
 8012196:	4b1d      	ldr	r3, [pc, #116]	@ (801220c <netif_do_set_ipaddr+0x88>)
 8012198:	f240 12cb 	movw	r2, #459	@ 0x1cb
 801219c:	491c      	ldr	r1, [pc, #112]	@ (8012210 <netif_do_set_ipaddr+0x8c>)
 801219e:	481d      	ldr	r0, [pc, #116]	@ (8012214 <netif_do_set_ipaddr+0x90>)
 80121a0:	f00b f914 	bl	801d3cc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d106      	bne.n	80121b8 <netif_do_set_ipaddr+0x34>
 80121aa:	4b18      	ldr	r3, [pc, #96]	@ (801220c <netif_do_set_ipaddr+0x88>)
 80121ac:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80121b0:	4917      	ldr	r1, [pc, #92]	@ (8012210 <netif_do_set_ipaddr+0x8c>)
 80121b2:	4818      	ldr	r0, [pc, #96]	@ (8012214 <netif_do_set_ipaddr+0x90>)
 80121b4:	f00b f90a 	bl	801d3cc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	681a      	ldr	r2, [r3, #0]
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	3304      	adds	r3, #4
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	429a      	cmp	r2, r3
 80121c4:	d01c      	beq.n	8012200 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80121c6:	68bb      	ldr	r3, [r7, #8]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	3304      	adds	r3, #4
 80121d0:	681a      	ldr	r2, [r3, #0]
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80121d6:	f107 0314 	add.w	r3, r7, #20
 80121da:	4619      	mov	r1, r3
 80121dc:	6878      	ldr	r0, [r7, #4]
 80121de:	f7ff ffbf 	bl	8012160 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d002      	beq.n	80121ee <netif_do_set_ipaddr+0x6a>
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	e000      	b.n	80121f0 <netif_do_set_ipaddr+0x6c>
 80121ee:	2300      	movs	r3, #0
 80121f0:	68fa      	ldr	r2, [r7, #12]
 80121f2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80121f4:	2101      	movs	r1, #1
 80121f6:	68f8      	ldr	r0, [r7, #12]
 80121f8:	f000 f8d2 	bl	80123a0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80121fc:	2301      	movs	r3, #1
 80121fe:	e000      	b.n	8012202 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8012200:	2300      	movs	r3, #0
}
 8012202:	4618      	mov	r0, r3
 8012204:	3718      	adds	r7, #24
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}
 801220a:	bf00      	nop
 801220c:	0801f5ec 	.word	0x0801f5ec
 8012210:	0801f704 	.word	0x0801f704
 8012214:	0801f63c 	.word	0x0801f63c

08012218 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8012218:	b480      	push	{r7}
 801221a:	b085      	sub	sp, #20
 801221c:	af00      	add	r7, sp, #0
 801221e:	60f8      	str	r0, [r7, #12]
 8012220:	60b9      	str	r1, [r7, #8]
 8012222:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	681a      	ldr	r2, [r3, #0]
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	3308      	adds	r3, #8
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	429a      	cmp	r2, r3
 8012230:	d00a      	beq.n	8012248 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8012232:	68bb      	ldr	r3, [r7, #8]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d002      	beq.n	801223e <netif_do_set_netmask+0x26>
 8012238:	68bb      	ldr	r3, [r7, #8]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	e000      	b.n	8012240 <netif_do_set_netmask+0x28>
 801223e:	2300      	movs	r3, #0
 8012240:	68fa      	ldr	r2, [r7, #12]
 8012242:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8012244:	2301      	movs	r3, #1
 8012246:	e000      	b.n	801224a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8012248:	2300      	movs	r3, #0
}
 801224a:	4618      	mov	r0, r3
 801224c:	3714      	adds	r7, #20
 801224e:	46bd      	mov	sp, r7
 8012250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012254:	4770      	bx	lr

08012256 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8012256:	b480      	push	{r7}
 8012258:	b085      	sub	sp, #20
 801225a:	af00      	add	r7, sp, #0
 801225c:	60f8      	str	r0, [r7, #12]
 801225e:	60b9      	str	r1, [r7, #8]
 8012260:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	681a      	ldr	r2, [r3, #0]
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	330c      	adds	r3, #12
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	429a      	cmp	r2, r3
 801226e:	d00a      	beq.n	8012286 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d002      	beq.n	801227c <netif_do_set_gw+0x26>
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	e000      	b.n	801227e <netif_do_set_gw+0x28>
 801227c:	2300      	movs	r3, #0
 801227e:	68fa      	ldr	r2, [r7, #12]
 8012280:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8012282:	2301      	movs	r3, #1
 8012284:	e000      	b.n	8012288 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8012286:	2300      	movs	r3, #0
}
 8012288:	4618      	mov	r0, r3
 801228a:	3714      	adds	r7, #20
 801228c:	46bd      	mov	sp, r7
 801228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012292:	4770      	bx	lr

08012294 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b088      	sub	sp, #32
 8012298:	af00      	add	r7, sp, #0
 801229a:	60f8      	str	r0, [r7, #12]
 801229c:	60b9      	str	r1, [r7, #8]
 801229e:	607a      	str	r2, [r7, #4]
 80122a0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80122a2:	2300      	movs	r3, #0
 80122a4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80122a6:	2300      	movs	r3, #0
 80122a8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80122aa:	68bb      	ldr	r3, [r7, #8]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d101      	bne.n	80122b4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80122b0:	4b1c      	ldr	r3, [pc, #112]	@ (8012324 <netif_set_addr+0x90>)
 80122b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d101      	bne.n	80122be <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80122ba:	4b1a      	ldr	r3, [pc, #104]	@ (8012324 <netif_set_addr+0x90>)
 80122bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d101      	bne.n	80122c8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80122c4:	4b17      	ldr	r3, [pc, #92]	@ (8012324 <netif_set_addr+0x90>)
 80122c6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80122c8:	68bb      	ldr	r3, [r7, #8]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d003      	beq.n	80122d6 <netif_set_addr+0x42>
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d101      	bne.n	80122da <netif_set_addr+0x46>
 80122d6:	2301      	movs	r3, #1
 80122d8:	e000      	b.n	80122dc <netif_set_addr+0x48>
 80122da:	2300      	movs	r3, #0
 80122dc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d006      	beq.n	80122f2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80122e4:	f107 0310 	add.w	r3, r7, #16
 80122e8:	461a      	mov	r2, r3
 80122ea:	68b9      	ldr	r1, [r7, #8]
 80122ec:	68f8      	ldr	r0, [r7, #12]
 80122ee:	f7ff ff49 	bl	8012184 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80122f2:	69fa      	ldr	r2, [r7, #28]
 80122f4:	6879      	ldr	r1, [r7, #4]
 80122f6:	68f8      	ldr	r0, [r7, #12]
 80122f8:	f7ff ff8e 	bl	8012218 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80122fc:	69ba      	ldr	r2, [r7, #24]
 80122fe:	6839      	ldr	r1, [r7, #0]
 8012300:	68f8      	ldr	r0, [r7, #12]
 8012302:	f7ff ffa8 	bl	8012256 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8012306:	697b      	ldr	r3, [r7, #20]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d106      	bne.n	801231a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801230c:	f107 0310 	add.w	r3, r7, #16
 8012310:	461a      	mov	r2, r3
 8012312:	68b9      	ldr	r1, [r7, #8]
 8012314:	68f8      	ldr	r0, [r7, #12]
 8012316:	f7ff ff35 	bl	8012184 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801231a:	bf00      	nop
 801231c:	3720      	adds	r7, #32
 801231e:	46bd      	mov	sp, r7
 8012320:	bd80      	pop	{r7, pc}
 8012322:	bf00      	nop
 8012324:	080334d4 	.word	0x080334d4

08012328 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8012328:	b480      	push	{r7}
 801232a:	b083      	sub	sp, #12
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8012330:	4a04      	ldr	r2, [pc, #16]	@ (8012344 <netif_set_default+0x1c>)
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8012336:	bf00      	nop
 8012338:	370c      	adds	r7, #12
 801233a:	46bd      	mov	sp, r7
 801233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012340:	4770      	bx	lr
 8012342:	bf00      	nop
 8012344:	2000e454 	.word	0x2000e454

08012348 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b082      	sub	sp, #8
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d107      	bne.n	8012366 <netif_set_up+0x1e>
 8012356:	4b0f      	ldr	r3, [pc, #60]	@ (8012394 <netif_set_up+0x4c>)
 8012358:	f44f 7254 	mov.w	r2, #848	@ 0x350
 801235c:	490e      	ldr	r1, [pc, #56]	@ (8012398 <netif_set_up+0x50>)
 801235e:	480f      	ldr	r0, [pc, #60]	@ (801239c <netif_set_up+0x54>)
 8012360:	f00b f834 	bl	801d3cc <iprintf>
 8012364:	e013      	b.n	801238e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801236c:	f003 0301 	and.w	r3, r3, #1
 8012370:	2b00      	cmp	r3, #0
 8012372:	d10c      	bne.n	801238e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801237a:	f043 0301 	orr.w	r3, r3, #1
 801237e:	b2da      	uxtb	r2, r3
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012386:	2103      	movs	r1, #3
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	f000 f809 	bl	80123a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801238e:	3708      	adds	r7, #8
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}
 8012394:	0801f5ec 	.word	0x0801f5ec
 8012398:	0801f774 	.word	0x0801f774
 801239c:	0801f63c 	.word	0x0801f63c

080123a0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b082      	sub	sp, #8
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
 80123a8:	460b      	mov	r3, r1
 80123aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d106      	bne.n	80123c0 <netif_issue_reports+0x20>
 80123b2:	4b18      	ldr	r3, [pc, #96]	@ (8012414 <netif_issue_reports+0x74>)
 80123b4:	f240 326d 	movw	r2, #877	@ 0x36d
 80123b8:	4917      	ldr	r1, [pc, #92]	@ (8012418 <netif_issue_reports+0x78>)
 80123ba:	4818      	ldr	r0, [pc, #96]	@ (801241c <netif_issue_reports+0x7c>)
 80123bc:	f00b f806 	bl	801d3cc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80123c6:	f003 0304 	and.w	r3, r3, #4
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d01e      	beq.n	801240c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80123d4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d017      	beq.n	801240c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80123dc:	78fb      	ldrb	r3, [r7, #3]
 80123de:	f003 0301 	and.w	r3, r3, #1
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d013      	beq.n	801240e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	3304      	adds	r3, #4
 80123ea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d00e      	beq.n	801240e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80123f6:	f003 0308 	and.w	r3, r3, #8
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d007      	beq.n	801240e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	3304      	adds	r3, #4
 8012402:	4619      	mov	r1, r3
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f008 fb1f 	bl	801aa48 <etharp_request>
 801240a:	e000      	b.n	801240e <netif_issue_reports+0x6e>
    return;
 801240c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801240e:	3708      	adds	r7, #8
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}
 8012414:	0801f5ec 	.word	0x0801f5ec
 8012418:	0801f790 	.word	0x0801f790
 801241c:	0801f63c 	.word	0x0801f63c

08012420 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b082      	sub	sp, #8
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d107      	bne.n	801243e <netif_set_down+0x1e>
 801242e:	4b12      	ldr	r3, [pc, #72]	@ (8012478 <netif_set_down+0x58>)
 8012430:	f240 329b 	movw	r2, #923	@ 0x39b
 8012434:	4911      	ldr	r1, [pc, #68]	@ (801247c <netif_set_down+0x5c>)
 8012436:	4812      	ldr	r0, [pc, #72]	@ (8012480 <netif_set_down+0x60>)
 8012438:	f00a ffc8 	bl	801d3cc <iprintf>
 801243c:	e019      	b.n	8012472 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012444:	f003 0301 	and.w	r3, r3, #1
 8012448:	2b00      	cmp	r3, #0
 801244a:	d012      	beq.n	8012472 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012452:	f023 0301 	bic.w	r3, r3, #1
 8012456:	b2da      	uxtb	r2, r3
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012464:	f003 0308 	and.w	r3, r3, #8
 8012468:	2b00      	cmp	r3, #0
 801246a:	d002      	beq.n	8012472 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f007 fea9 	bl	801a1c4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8012472:	3708      	adds	r7, #8
 8012474:	46bd      	mov	sp, r7
 8012476:	bd80      	pop	{r7, pc}
 8012478:	0801f5ec 	.word	0x0801f5ec
 801247c:	0801f7b4 	.word	0x0801f7b4
 8012480:	0801f63c 	.word	0x0801f63c

08012484 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d107      	bne.n	80124a2 <netif_set_link_up+0x1e>
 8012492:	4b13      	ldr	r3, [pc, #76]	@ (80124e0 <netif_set_link_up+0x5c>)
 8012494:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8012498:	4912      	ldr	r1, [pc, #72]	@ (80124e4 <netif_set_link_up+0x60>)
 801249a:	4813      	ldr	r0, [pc, #76]	@ (80124e8 <netif_set_link_up+0x64>)
 801249c:	f00a ff96 	bl	801d3cc <iprintf>
 80124a0:	e01b      	b.n	80124da <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80124a8:	f003 0304 	and.w	r3, r3, #4
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d114      	bne.n	80124da <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80124b6:	f043 0304 	orr.w	r3, r3, #4
 80124ba:	b2da      	uxtb	r2, r3
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80124c2:	2103      	movs	r1, #3
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f7ff ff6b 	bl	80123a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	69db      	ldr	r3, [r3, #28]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d003      	beq.n	80124da <netif_set_link_up+0x56>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	69db      	ldr	r3, [r3, #28]
 80124d6:	6878      	ldr	r0, [r7, #4]
 80124d8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80124da:	3708      	adds	r7, #8
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}
 80124e0:	0801f5ec 	.word	0x0801f5ec
 80124e4:	0801f7d4 	.word	0x0801f7d4
 80124e8:	0801f63c 	.word	0x0801f63c

080124ec <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b082      	sub	sp, #8
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d107      	bne.n	801250a <netif_set_link_down+0x1e>
 80124fa:	4b11      	ldr	r3, [pc, #68]	@ (8012540 <netif_set_link_down+0x54>)
 80124fc:	f240 4206 	movw	r2, #1030	@ 0x406
 8012500:	4910      	ldr	r1, [pc, #64]	@ (8012544 <netif_set_link_down+0x58>)
 8012502:	4811      	ldr	r0, [pc, #68]	@ (8012548 <netif_set_link_down+0x5c>)
 8012504:	f00a ff62 	bl	801d3cc <iprintf>
 8012508:	e017      	b.n	801253a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012510:	f003 0304 	and.w	r3, r3, #4
 8012514:	2b00      	cmp	r3, #0
 8012516:	d010      	beq.n	801253a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801251e:	f023 0304 	bic.w	r3, r3, #4
 8012522:	b2da      	uxtb	r2, r3
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	69db      	ldr	r3, [r3, #28]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d003      	beq.n	801253a <netif_set_link_down+0x4e>
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	69db      	ldr	r3, [r3, #28]
 8012536:	6878      	ldr	r0, [r7, #4]
 8012538:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801253a:	3708      	adds	r7, #8
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}
 8012540:	0801f5ec 	.word	0x0801f5ec
 8012544:	0801f7f8 	.word	0x0801f7f8
 8012548:	0801f63c 	.word	0x0801f63c

0801254c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801254c:	b480      	push	{r7}
 801254e:	b083      	sub	sp, #12
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d002      	beq.n	8012562 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	683a      	ldr	r2, [r7, #0]
 8012560:	61da      	str	r2, [r3, #28]
  }
}
 8012562:	bf00      	nop
 8012564:	370c      	adds	r7, #12
 8012566:	46bd      	mov	sp, r7
 8012568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256c:	4770      	bx	lr

0801256e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801256e:	b480      	push	{r7}
 8012570:	b085      	sub	sp, #20
 8012572:	af00      	add	r7, sp, #0
 8012574:	60f8      	str	r0, [r7, #12]
 8012576:	60b9      	str	r1, [r7, #8]
 8012578:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801257a:	f06f 030b 	mvn.w	r3, #11
}
 801257e:	4618      	mov	r0, r3
 8012580:	3714      	adds	r7, #20
 8012582:	46bd      	mov	sp, r7
 8012584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012588:	4770      	bx	lr
	...

0801258c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801258c:	b480      	push	{r7}
 801258e:	b085      	sub	sp, #20
 8012590:	af00      	add	r7, sp, #0
 8012592:	4603      	mov	r3, r0
 8012594:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8012596:	79fb      	ldrb	r3, [r7, #7]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d013      	beq.n	80125c4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801259c:	4b0d      	ldr	r3, [pc, #52]	@ (80125d4 <netif_get_by_index+0x48>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	60fb      	str	r3, [r7, #12]
 80125a2:	e00c      	b.n	80125be <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80125aa:	3301      	adds	r3, #1
 80125ac:	b2db      	uxtb	r3, r3
 80125ae:	79fa      	ldrb	r2, [r7, #7]
 80125b0:	429a      	cmp	r2, r3
 80125b2:	d101      	bne.n	80125b8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	e006      	b.n	80125c6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	60fb      	str	r3, [r7, #12]
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d1ef      	bne.n	80125a4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80125c4:	2300      	movs	r3, #0
}
 80125c6:	4618      	mov	r0, r3
 80125c8:	3714      	adds	r7, #20
 80125ca:	46bd      	mov	sp, r7
 80125cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d0:	4770      	bx	lr
 80125d2:	bf00      	nop
 80125d4:	2000e450 	.word	0x2000e450

080125d8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b082      	sub	sp, #8
 80125dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80125de:	f009 ff83 	bl	801c4e8 <sys_arch_protect>
 80125e2:	6038      	str	r0, [r7, #0]
 80125e4:	4b0d      	ldr	r3, [pc, #52]	@ (801261c <pbuf_free_ooseq+0x44>)
 80125e6:	2200      	movs	r2, #0
 80125e8:	701a      	strb	r2, [r3, #0]
 80125ea:	6838      	ldr	r0, [r7, #0]
 80125ec:	f009 ff8a 	bl	801c504 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80125f0:	4b0b      	ldr	r3, [pc, #44]	@ (8012620 <pbuf_free_ooseq+0x48>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	607b      	str	r3, [r7, #4]
 80125f6:	e00a      	b.n	801260e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d003      	beq.n	8012608 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f002 fc45 	bl	8014e90 <tcp_free_ooseq>
      return;
 8012606:	e005      	b.n	8012614 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	68db      	ldr	r3, [r3, #12]
 801260c:	607b      	str	r3, [r7, #4]
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d1f1      	bne.n	80125f8 <pbuf_free_ooseq+0x20>
    }
  }
}
 8012614:	3708      	adds	r7, #8
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}
 801261a:	bf00      	nop
 801261c:	2000e459 	.word	0x2000e459
 8012620:	2000e468 	.word	0x2000e468

08012624 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b082      	sub	sp, #8
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801262c:	f7ff ffd4 	bl	80125d8 <pbuf_free_ooseq>
}
 8012630:	bf00      	nop
 8012632:	3708      	adds	r7, #8
 8012634:	46bd      	mov	sp, r7
 8012636:	bd80      	pop	{r7, pc}

08012638 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b082      	sub	sp, #8
 801263c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801263e:	f009 ff53 	bl	801c4e8 <sys_arch_protect>
 8012642:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8012644:	4b0f      	ldr	r3, [pc, #60]	@ (8012684 <pbuf_pool_is_empty+0x4c>)
 8012646:	781b      	ldrb	r3, [r3, #0]
 8012648:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801264a:	4b0e      	ldr	r3, [pc, #56]	@ (8012684 <pbuf_pool_is_empty+0x4c>)
 801264c:	2201      	movs	r2, #1
 801264e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f009 ff57 	bl	801c504 <sys_arch_unprotect>

  if (!queued) {
 8012656:	78fb      	ldrb	r3, [r7, #3]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d10f      	bne.n	801267c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801265c:	2100      	movs	r1, #0
 801265e:	480a      	ldr	r0, [pc, #40]	@ (8012688 <pbuf_pool_is_empty+0x50>)
 8012660:	f7fe fe4c 	bl	80112fc <tcpip_try_callback>
 8012664:	4603      	mov	r3, r0
 8012666:	2b00      	cmp	r3, #0
 8012668:	d008      	beq.n	801267c <pbuf_pool_is_empty+0x44>
 801266a:	f009 ff3d 	bl	801c4e8 <sys_arch_protect>
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	4b04      	ldr	r3, [pc, #16]	@ (8012684 <pbuf_pool_is_empty+0x4c>)
 8012672:	2200      	movs	r2, #0
 8012674:	701a      	strb	r2, [r3, #0]
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f009 ff44 	bl	801c504 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801267c:	bf00      	nop
 801267e:	3708      	adds	r7, #8
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}
 8012684:	2000e459 	.word	0x2000e459
 8012688:	08012625 	.word	0x08012625

0801268c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801268c:	b480      	push	{r7}
 801268e:	b085      	sub	sp, #20
 8012690:	af00      	add	r7, sp, #0
 8012692:	60f8      	str	r0, [r7, #12]
 8012694:	60b9      	str	r1, [r7, #8]
 8012696:	4611      	mov	r1, r2
 8012698:	461a      	mov	r2, r3
 801269a:	460b      	mov	r3, r1
 801269c:	80fb      	strh	r3, [r7, #6]
 801269e:	4613      	mov	r3, r2
 80126a0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	2200      	movs	r2, #0
 80126a6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	68ba      	ldr	r2, [r7, #8]
 80126ac:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	88fa      	ldrh	r2, [r7, #6]
 80126b2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	88ba      	ldrh	r2, [r7, #4]
 80126b8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80126ba:	8b3b      	ldrh	r3, [r7, #24]
 80126bc:	b2da      	uxtb	r2, r3
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	7f3a      	ldrb	r2, [r7, #28]
 80126c6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	2201      	movs	r2, #1
 80126cc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	2200      	movs	r2, #0
 80126d2:	73da      	strb	r2, [r3, #15]
}
 80126d4:	bf00      	nop
 80126d6:	3714      	adds	r7, #20
 80126d8:	46bd      	mov	sp, r7
 80126da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126de:	4770      	bx	lr

080126e0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b08c      	sub	sp, #48	@ 0x30
 80126e4:	af02      	add	r7, sp, #8
 80126e6:	4603      	mov	r3, r0
 80126e8:	71fb      	strb	r3, [r7, #7]
 80126ea:	460b      	mov	r3, r1
 80126ec:	80bb      	strh	r3, [r7, #4]
 80126ee:	4613      	mov	r3, r2
 80126f0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80126f2:	79fb      	ldrb	r3, [r7, #7]
 80126f4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80126f6:	887b      	ldrh	r3, [r7, #2]
 80126f8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80126fc:	d07f      	beq.n	80127fe <pbuf_alloc+0x11e>
 80126fe:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8012702:	f300 80c8 	bgt.w	8012896 <pbuf_alloc+0x1b6>
 8012706:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801270a:	d010      	beq.n	801272e <pbuf_alloc+0x4e>
 801270c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8012710:	f300 80c1 	bgt.w	8012896 <pbuf_alloc+0x1b6>
 8012714:	2b01      	cmp	r3, #1
 8012716:	d002      	beq.n	801271e <pbuf_alloc+0x3e>
 8012718:	2b41      	cmp	r3, #65	@ 0x41
 801271a:	f040 80bc 	bne.w	8012896 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801271e:	887a      	ldrh	r2, [r7, #2]
 8012720:	88bb      	ldrh	r3, [r7, #4]
 8012722:	4619      	mov	r1, r3
 8012724:	2000      	movs	r0, #0
 8012726:	f000 f8d1 	bl	80128cc <pbuf_alloc_reference>
 801272a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 801272c:	e0bd      	b.n	80128aa <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801272e:	2300      	movs	r3, #0
 8012730:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8012732:	2300      	movs	r3, #0
 8012734:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8012736:	88bb      	ldrh	r3, [r7, #4]
 8012738:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801273a:	200c      	movs	r0, #12
 801273c:	f7ff fb9a 	bl	8011e74 <memp_malloc>
 8012740:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8012742:	693b      	ldr	r3, [r7, #16]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d109      	bne.n	801275c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8012748:	f7ff ff76 	bl	8012638 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801274e:	2b00      	cmp	r3, #0
 8012750:	d002      	beq.n	8012758 <pbuf_alloc+0x78>
            pbuf_free(p);
 8012752:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012754:	f000 faa8 	bl	8012ca8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012758:	2300      	movs	r3, #0
 801275a:	e0a7      	b.n	80128ac <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801275c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801275e:	3303      	adds	r3, #3
 8012760:	b29b      	uxth	r3, r3
 8012762:	f023 0303 	bic.w	r3, r3, #3
 8012766:	b29b      	uxth	r3, r3
 8012768:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 801276c:	b29b      	uxth	r3, r3
 801276e:	8b7a      	ldrh	r2, [r7, #26]
 8012770:	4293      	cmp	r3, r2
 8012772:	bf28      	it	cs
 8012774:	4613      	movcs	r3, r2
 8012776:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012778:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801277a:	3310      	adds	r3, #16
 801277c:	693a      	ldr	r2, [r7, #16]
 801277e:	4413      	add	r3, r2
 8012780:	3303      	adds	r3, #3
 8012782:	f023 0303 	bic.w	r3, r3, #3
 8012786:	4618      	mov	r0, r3
 8012788:	89f9      	ldrh	r1, [r7, #14]
 801278a:	8b7a      	ldrh	r2, [r7, #26]
 801278c:	2300      	movs	r3, #0
 801278e:	9301      	str	r3, [sp, #4]
 8012790:	887b      	ldrh	r3, [r7, #2]
 8012792:	9300      	str	r3, [sp, #0]
 8012794:	460b      	mov	r3, r1
 8012796:	4601      	mov	r1, r0
 8012798:	6938      	ldr	r0, [r7, #16]
 801279a:	f7ff ff77 	bl	801268c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801279e:	693b      	ldr	r3, [r7, #16]
 80127a0:	685b      	ldr	r3, [r3, #4]
 80127a2:	f003 0303 	and.w	r3, r3, #3
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d006      	beq.n	80127b8 <pbuf_alloc+0xd8>
 80127aa:	4b42      	ldr	r3, [pc, #264]	@ (80128b4 <pbuf_alloc+0x1d4>)
 80127ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80127b0:	4941      	ldr	r1, [pc, #260]	@ (80128b8 <pbuf_alloc+0x1d8>)
 80127b2:	4842      	ldr	r0, [pc, #264]	@ (80128bc <pbuf_alloc+0x1dc>)
 80127b4:	f00a fe0a 	bl	801d3cc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80127b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80127ba:	3303      	adds	r3, #3
 80127bc:	f023 0303 	bic.w	r3, r3, #3
 80127c0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80127c4:	d106      	bne.n	80127d4 <pbuf_alloc+0xf4>
 80127c6:	4b3b      	ldr	r3, [pc, #236]	@ (80128b4 <pbuf_alloc+0x1d4>)
 80127c8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80127cc:	493c      	ldr	r1, [pc, #240]	@ (80128c0 <pbuf_alloc+0x1e0>)
 80127ce:	483b      	ldr	r0, [pc, #236]	@ (80128bc <pbuf_alloc+0x1dc>)
 80127d0:	f00a fdfc 	bl	801d3cc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80127d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d102      	bne.n	80127e0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80127da:	693b      	ldr	r3, [r7, #16]
 80127dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80127de:	e002      	b.n	80127e6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80127e0:	69fb      	ldr	r3, [r7, #28]
 80127e2:	693a      	ldr	r2, [r7, #16]
 80127e4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80127e6:	693b      	ldr	r3, [r7, #16]
 80127e8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80127ea:	8b7a      	ldrh	r2, [r7, #26]
 80127ec:	89fb      	ldrh	r3, [r7, #14]
 80127ee:	1ad3      	subs	r3, r2, r3
 80127f0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80127f2:	2300      	movs	r3, #0
 80127f4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80127f6:	8b7b      	ldrh	r3, [r7, #26]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d19e      	bne.n	801273a <pbuf_alloc+0x5a>
      break;
 80127fc:	e055      	b.n	80128aa <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80127fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012800:	3303      	adds	r3, #3
 8012802:	b29b      	uxth	r3, r3
 8012804:	f023 0303 	bic.w	r3, r3, #3
 8012808:	b29a      	uxth	r2, r3
 801280a:	88bb      	ldrh	r3, [r7, #4]
 801280c:	3303      	adds	r3, #3
 801280e:	b29b      	uxth	r3, r3
 8012810:	f023 0303 	bic.w	r3, r3, #3
 8012814:	b29b      	uxth	r3, r3
 8012816:	4413      	add	r3, r2
 8012818:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801281a:	8b3b      	ldrh	r3, [r7, #24]
 801281c:	3310      	adds	r3, #16
 801281e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012820:	8b3a      	ldrh	r2, [r7, #24]
 8012822:	88bb      	ldrh	r3, [r7, #4]
 8012824:	3303      	adds	r3, #3
 8012826:	f023 0303 	bic.w	r3, r3, #3
 801282a:	429a      	cmp	r2, r3
 801282c:	d306      	bcc.n	801283c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801282e:	8afa      	ldrh	r2, [r7, #22]
 8012830:	88bb      	ldrh	r3, [r7, #4]
 8012832:	3303      	adds	r3, #3
 8012834:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012838:	429a      	cmp	r2, r3
 801283a:	d201      	bcs.n	8012840 <pbuf_alloc+0x160>
        return NULL;
 801283c:	2300      	movs	r3, #0
 801283e:	e035      	b.n	80128ac <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012840:	8afb      	ldrh	r3, [r7, #22]
 8012842:	4618      	mov	r0, r3
 8012844:	f7ff f972 	bl	8011b2c <mem_malloc>
 8012848:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801284c:	2b00      	cmp	r3, #0
 801284e:	d101      	bne.n	8012854 <pbuf_alloc+0x174>
        return NULL;
 8012850:	2300      	movs	r3, #0
 8012852:	e02b      	b.n	80128ac <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8012854:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012856:	3310      	adds	r3, #16
 8012858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801285a:	4413      	add	r3, r2
 801285c:	3303      	adds	r3, #3
 801285e:	f023 0303 	bic.w	r3, r3, #3
 8012862:	4618      	mov	r0, r3
 8012864:	88b9      	ldrh	r1, [r7, #4]
 8012866:	88ba      	ldrh	r2, [r7, #4]
 8012868:	2300      	movs	r3, #0
 801286a:	9301      	str	r3, [sp, #4]
 801286c:	887b      	ldrh	r3, [r7, #2]
 801286e:	9300      	str	r3, [sp, #0]
 8012870:	460b      	mov	r3, r1
 8012872:	4601      	mov	r1, r0
 8012874:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012876:	f7ff ff09 	bl	801268c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801287c:	685b      	ldr	r3, [r3, #4]
 801287e:	f003 0303 	and.w	r3, r3, #3
 8012882:	2b00      	cmp	r3, #0
 8012884:	d010      	beq.n	80128a8 <pbuf_alloc+0x1c8>
 8012886:	4b0b      	ldr	r3, [pc, #44]	@ (80128b4 <pbuf_alloc+0x1d4>)
 8012888:	f44f 7291 	mov.w	r2, #290	@ 0x122
 801288c:	490d      	ldr	r1, [pc, #52]	@ (80128c4 <pbuf_alloc+0x1e4>)
 801288e:	480b      	ldr	r0, [pc, #44]	@ (80128bc <pbuf_alloc+0x1dc>)
 8012890:	f00a fd9c 	bl	801d3cc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012894:	e008      	b.n	80128a8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8012896:	4b07      	ldr	r3, [pc, #28]	@ (80128b4 <pbuf_alloc+0x1d4>)
 8012898:	f240 1227 	movw	r2, #295	@ 0x127
 801289c:	490a      	ldr	r1, [pc, #40]	@ (80128c8 <pbuf_alloc+0x1e8>)
 801289e:	4807      	ldr	r0, [pc, #28]	@ (80128bc <pbuf_alloc+0x1dc>)
 80128a0:	f00a fd94 	bl	801d3cc <iprintf>
      return NULL;
 80128a4:	2300      	movs	r3, #0
 80128a6:	e001      	b.n	80128ac <pbuf_alloc+0x1cc>
      break;
 80128a8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80128aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80128ac:	4618      	mov	r0, r3
 80128ae:	3728      	adds	r7, #40	@ 0x28
 80128b0:	46bd      	mov	sp, r7
 80128b2:	bd80      	pop	{r7, pc}
 80128b4:	0801f81c 	.word	0x0801f81c
 80128b8:	0801f84c 	.word	0x0801f84c
 80128bc:	0801f87c 	.word	0x0801f87c
 80128c0:	0801f8a4 	.word	0x0801f8a4
 80128c4:	0801f8d8 	.word	0x0801f8d8
 80128c8:	0801f904 	.word	0x0801f904

080128cc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b086      	sub	sp, #24
 80128d0:	af02      	add	r7, sp, #8
 80128d2:	6078      	str	r0, [r7, #4]
 80128d4:	460b      	mov	r3, r1
 80128d6:	807b      	strh	r3, [r7, #2]
 80128d8:	4613      	mov	r3, r2
 80128da:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80128dc:	883b      	ldrh	r3, [r7, #0]
 80128de:	2b41      	cmp	r3, #65	@ 0x41
 80128e0:	d009      	beq.n	80128f6 <pbuf_alloc_reference+0x2a>
 80128e2:	883b      	ldrh	r3, [r7, #0]
 80128e4:	2b01      	cmp	r3, #1
 80128e6:	d006      	beq.n	80128f6 <pbuf_alloc_reference+0x2a>
 80128e8:	4b0f      	ldr	r3, [pc, #60]	@ (8012928 <pbuf_alloc_reference+0x5c>)
 80128ea:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80128ee:	490f      	ldr	r1, [pc, #60]	@ (801292c <pbuf_alloc_reference+0x60>)
 80128f0:	480f      	ldr	r0, [pc, #60]	@ (8012930 <pbuf_alloc_reference+0x64>)
 80128f2:	f00a fd6b 	bl	801d3cc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80128f6:	200b      	movs	r0, #11
 80128f8:	f7ff fabc 	bl	8011e74 <memp_malloc>
 80128fc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d101      	bne.n	8012908 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012904:	2300      	movs	r3, #0
 8012906:	e00b      	b.n	8012920 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012908:	8879      	ldrh	r1, [r7, #2]
 801290a:	887a      	ldrh	r2, [r7, #2]
 801290c:	2300      	movs	r3, #0
 801290e:	9301      	str	r3, [sp, #4]
 8012910:	883b      	ldrh	r3, [r7, #0]
 8012912:	9300      	str	r3, [sp, #0]
 8012914:	460b      	mov	r3, r1
 8012916:	6879      	ldr	r1, [r7, #4]
 8012918:	68f8      	ldr	r0, [r7, #12]
 801291a:	f7ff feb7 	bl	801268c <pbuf_init_alloced_pbuf>
  return p;
 801291e:	68fb      	ldr	r3, [r7, #12]
}
 8012920:	4618      	mov	r0, r3
 8012922:	3710      	adds	r7, #16
 8012924:	46bd      	mov	sp, r7
 8012926:	bd80      	pop	{r7, pc}
 8012928:	0801f81c 	.word	0x0801f81c
 801292c:	0801f920 	.word	0x0801f920
 8012930:	0801f87c 	.word	0x0801f87c

08012934 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b088      	sub	sp, #32
 8012938:	af02      	add	r7, sp, #8
 801293a:	607b      	str	r3, [r7, #4]
 801293c:	4603      	mov	r3, r0
 801293e:	73fb      	strb	r3, [r7, #15]
 8012940:	460b      	mov	r3, r1
 8012942:	81bb      	strh	r3, [r7, #12]
 8012944:	4613      	mov	r3, r2
 8012946:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8012948:	7bfb      	ldrb	r3, [r7, #15]
 801294a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801294c:	8a7b      	ldrh	r3, [r7, #18]
 801294e:	3303      	adds	r3, #3
 8012950:	f023 0203 	bic.w	r2, r3, #3
 8012954:	89bb      	ldrh	r3, [r7, #12]
 8012956:	441a      	add	r2, r3
 8012958:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801295a:	429a      	cmp	r2, r3
 801295c:	d901      	bls.n	8012962 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801295e:	2300      	movs	r3, #0
 8012960:	e018      	b.n	8012994 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012962:	6a3b      	ldr	r3, [r7, #32]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d007      	beq.n	8012978 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012968:	8a7b      	ldrh	r3, [r7, #18]
 801296a:	3303      	adds	r3, #3
 801296c:	f023 0303 	bic.w	r3, r3, #3
 8012970:	6a3a      	ldr	r2, [r7, #32]
 8012972:	4413      	add	r3, r2
 8012974:	617b      	str	r3, [r7, #20]
 8012976:	e001      	b.n	801297c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012978:	2300      	movs	r3, #0
 801297a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	89b9      	ldrh	r1, [r7, #12]
 8012980:	89ba      	ldrh	r2, [r7, #12]
 8012982:	2302      	movs	r3, #2
 8012984:	9301      	str	r3, [sp, #4]
 8012986:	897b      	ldrh	r3, [r7, #10]
 8012988:	9300      	str	r3, [sp, #0]
 801298a:	460b      	mov	r3, r1
 801298c:	6979      	ldr	r1, [r7, #20]
 801298e:	f7ff fe7d 	bl	801268c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012992:	687b      	ldr	r3, [r7, #4]
}
 8012994:	4618      	mov	r0, r3
 8012996:	3718      	adds	r7, #24
 8012998:	46bd      	mov	sp, r7
 801299a:	bd80      	pop	{r7, pc}

0801299c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b084      	sub	sp, #16
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
 80129a4:	460b      	mov	r3, r1
 80129a6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d106      	bne.n	80129bc <pbuf_realloc+0x20>
 80129ae:	4b3a      	ldr	r3, [pc, #232]	@ (8012a98 <pbuf_realloc+0xfc>)
 80129b0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80129b4:	4939      	ldr	r1, [pc, #228]	@ (8012a9c <pbuf_realloc+0x100>)
 80129b6:	483a      	ldr	r0, [pc, #232]	@ (8012aa0 <pbuf_realloc+0x104>)
 80129b8:	f00a fd08 	bl	801d3cc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	891b      	ldrh	r3, [r3, #8]
 80129c0:	887a      	ldrh	r2, [r7, #2]
 80129c2:	429a      	cmp	r2, r3
 80129c4:	d263      	bcs.n	8012a8e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	891a      	ldrh	r2, [r3, #8]
 80129ca:	887b      	ldrh	r3, [r7, #2]
 80129cc:	1ad3      	subs	r3, r2, r3
 80129ce:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80129d0:	887b      	ldrh	r3, [r7, #2]
 80129d2:	817b      	strh	r3, [r7, #10]
  q = p;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80129d8:	e018      	b.n	8012a0c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	895b      	ldrh	r3, [r3, #10]
 80129de:	897a      	ldrh	r2, [r7, #10]
 80129e0:	1ad3      	subs	r3, r2, r3
 80129e2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	891a      	ldrh	r2, [r3, #8]
 80129e8:	893b      	ldrh	r3, [r7, #8]
 80129ea:	1ad3      	subs	r3, r2, r3
 80129ec:	b29a      	uxth	r2, r3
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d106      	bne.n	8012a0c <pbuf_realloc+0x70>
 80129fe:	4b26      	ldr	r3, [pc, #152]	@ (8012a98 <pbuf_realloc+0xfc>)
 8012a00:	f240 12af 	movw	r2, #431	@ 0x1af
 8012a04:	4927      	ldr	r1, [pc, #156]	@ (8012aa4 <pbuf_realloc+0x108>)
 8012a06:	4826      	ldr	r0, [pc, #152]	@ (8012aa0 <pbuf_realloc+0x104>)
 8012a08:	f00a fce0 	bl	801d3cc <iprintf>
  while (rem_len > q->len) {
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	895b      	ldrh	r3, [r3, #10]
 8012a10:	897a      	ldrh	r2, [r7, #10]
 8012a12:	429a      	cmp	r2, r3
 8012a14:	d8e1      	bhi.n	80129da <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	7b1b      	ldrb	r3, [r3, #12]
 8012a1a:	f003 030f 	and.w	r3, r3, #15
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d121      	bne.n	8012a66 <pbuf_realloc+0xca>
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	895b      	ldrh	r3, [r3, #10]
 8012a26:	897a      	ldrh	r2, [r7, #10]
 8012a28:	429a      	cmp	r2, r3
 8012a2a:	d01c      	beq.n	8012a66 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	7b5b      	ldrb	r3, [r3, #13]
 8012a30:	f003 0302 	and.w	r3, r3, #2
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d116      	bne.n	8012a66 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	685a      	ldr	r2, [r3, #4]
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	1ad3      	subs	r3, r2, r3
 8012a40:	b29a      	uxth	r2, r3
 8012a42:	897b      	ldrh	r3, [r7, #10]
 8012a44:	4413      	add	r3, r2
 8012a46:	b29b      	uxth	r3, r3
 8012a48:	4619      	mov	r1, r3
 8012a4a:	68f8      	ldr	r0, [r7, #12]
 8012a4c:	f7fe ff64 	bl	8011918 <mem_trim>
 8012a50:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d106      	bne.n	8012a66 <pbuf_realloc+0xca>
 8012a58:	4b0f      	ldr	r3, [pc, #60]	@ (8012a98 <pbuf_realloc+0xfc>)
 8012a5a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8012a5e:	4912      	ldr	r1, [pc, #72]	@ (8012aa8 <pbuf_realloc+0x10c>)
 8012a60:	480f      	ldr	r0, [pc, #60]	@ (8012aa0 <pbuf_realloc+0x104>)
 8012a62:	f00a fcb3 	bl	801d3cc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	897a      	ldrh	r2, [r7, #10]
 8012a6a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	895a      	ldrh	r2, [r3, #10]
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d004      	beq.n	8012a86 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	4618      	mov	r0, r3
 8012a82:	f000 f911 	bl	8012ca8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	2200      	movs	r2, #0
 8012a8a:	601a      	str	r2, [r3, #0]
 8012a8c:	e000      	b.n	8012a90 <pbuf_realloc+0xf4>
    return;
 8012a8e:	bf00      	nop

}
 8012a90:	3710      	adds	r7, #16
 8012a92:	46bd      	mov	sp, r7
 8012a94:	bd80      	pop	{r7, pc}
 8012a96:	bf00      	nop
 8012a98:	0801f81c 	.word	0x0801f81c
 8012a9c:	0801f934 	.word	0x0801f934
 8012aa0:	0801f87c 	.word	0x0801f87c
 8012aa4:	0801f94c 	.word	0x0801f94c
 8012aa8:	0801f964 	.word	0x0801f964

08012aac <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b086      	sub	sp, #24
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	60f8      	str	r0, [r7, #12]
 8012ab4:	60b9      	str	r1, [r7, #8]
 8012ab6:	4613      	mov	r3, r2
 8012ab8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d106      	bne.n	8012ace <pbuf_add_header_impl+0x22>
 8012ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8012b70 <pbuf_add_header_impl+0xc4>)
 8012ac2:	f240 12df 	movw	r2, #479	@ 0x1df
 8012ac6:	492b      	ldr	r1, [pc, #172]	@ (8012b74 <pbuf_add_header_impl+0xc8>)
 8012ac8:	482b      	ldr	r0, [pc, #172]	@ (8012b78 <pbuf_add_header_impl+0xcc>)
 8012aca:	f00a fc7f 	bl	801d3cc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d003      	beq.n	8012adc <pbuf_add_header_impl+0x30>
 8012ad4:	68bb      	ldr	r3, [r7, #8]
 8012ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012ada:	d301      	bcc.n	8012ae0 <pbuf_add_header_impl+0x34>
    return 1;
 8012adc:	2301      	movs	r3, #1
 8012ade:	e043      	b.n	8012b68 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012ae0:	68bb      	ldr	r3, [r7, #8]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d101      	bne.n	8012aea <pbuf_add_header_impl+0x3e>
    return 0;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	e03e      	b.n	8012b68 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	891a      	ldrh	r2, [r3, #8]
 8012af2:	8a7b      	ldrh	r3, [r7, #18]
 8012af4:	4413      	add	r3, r2
 8012af6:	b29b      	uxth	r3, r3
 8012af8:	8a7a      	ldrh	r2, [r7, #18]
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d901      	bls.n	8012b02 <pbuf_add_header_impl+0x56>
    return 1;
 8012afe:	2301      	movs	r3, #1
 8012b00:	e032      	b.n	8012b68 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	7b1b      	ldrb	r3, [r3, #12]
 8012b06:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012b08:	8a3b      	ldrh	r3, [r7, #16]
 8012b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d00c      	beq.n	8012b2c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	685a      	ldr	r2, [r3, #4]
 8012b16:	68bb      	ldr	r3, [r7, #8]
 8012b18:	425b      	negs	r3, r3
 8012b1a:	4413      	add	r3, r2
 8012b1c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	3310      	adds	r3, #16
 8012b22:	697a      	ldr	r2, [r7, #20]
 8012b24:	429a      	cmp	r2, r3
 8012b26:	d20d      	bcs.n	8012b44 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012b28:	2301      	movs	r3, #1
 8012b2a:	e01d      	b.n	8012b68 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012b2c:	79fb      	ldrb	r3, [r7, #7]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d006      	beq.n	8012b40 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	685a      	ldr	r2, [r3, #4]
 8012b36:	68bb      	ldr	r3, [r7, #8]
 8012b38:	425b      	negs	r3, r3
 8012b3a:	4413      	add	r3, r2
 8012b3c:	617b      	str	r3, [r7, #20]
 8012b3e:	e001      	b.n	8012b44 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012b40:	2301      	movs	r3, #1
 8012b42:	e011      	b.n	8012b68 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	697a      	ldr	r2, [r7, #20]
 8012b48:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	895a      	ldrh	r2, [r3, #10]
 8012b4e:	8a7b      	ldrh	r3, [r7, #18]
 8012b50:	4413      	add	r3, r2
 8012b52:	b29a      	uxth	r2, r3
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	891a      	ldrh	r2, [r3, #8]
 8012b5c:	8a7b      	ldrh	r3, [r7, #18]
 8012b5e:	4413      	add	r3, r2
 8012b60:	b29a      	uxth	r2, r3
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	811a      	strh	r2, [r3, #8]


  return 0;
 8012b66:	2300      	movs	r3, #0
}
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3718      	adds	r7, #24
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}
 8012b70:	0801f81c 	.word	0x0801f81c
 8012b74:	0801f980 	.word	0x0801f980
 8012b78:	0801f87c 	.word	0x0801f87c

08012b7c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b082      	sub	sp, #8
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
 8012b84:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012b86:	2200      	movs	r2, #0
 8012b88:	6839      	ldr	r1, [r7, #0]
 8012b8a:	6878      	ldr	r0, [r7, #4]
 8012b8c:	f7ff ff8e 	bl	8012aac <pbuf_add_header_impl>
 8012b90:	4603      	mov	r3, r0
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	3708      	adds	r7, #8
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}
	...

08012b9c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b084      	sub	sp, #16
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
 8012ba4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d106      	bne.n	8012bba <pbuf_remove_header+0x1e>
 8012bac:	4b20      	ldr	r3, [pc, #128]	@ (8012c30 <pbuf_remove_header+0x94>)
 8012bae:	f240 224b 	movw	r2, #587	@ 0x24b
 8012bb2:	4920      	ldr	r1, [pc, #128]	@ (8012c34 <pbuf_remove_header+0x98>)
 8012bb4:	4820      	ldr	r0, [pc, #128]	@ (8012c38 <pbuf_remove_header+0x9c>)
 8012bb6:	f00a fc09 	bl	801d3cc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d003      	beq.n	8012bc8 <pbuf_remove_header+0x2c>
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012bc6:	d301      	bcc.n	8012bcc <pbuf_remove_header+0x30>
    return 1;
 8012bc8:	2301      	movs	r3, #1
 8012bca:	e02c      	b.n	8012c26 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d101      	bne.n	8012bd6 <pbuf_remove_header+0x3a>
    return 0;
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	e027      	b.n	8012c26 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012bd6:	683b      	ldr	r3, [r7, #0]
 8012bd8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	895b      	ldrh	r3, [r3, #10]
 8012bde:	89fa      	ldrh	r2, [r7, #14]
 8012be0:	429a      	cmp	r2, r3
 8012be2:	d908      	bls.n	8012bf6 <pbuf_remove_header+0x5a>
 8012be4:	4b12      	ldr	r3, [pc, #72]	@ (8012c30 <pbuf_remove_header+0x94>)
 8012be6:	f240 2255 	movw	r2, #597	@ 0x255
 8012bea:	4914      	ldr	r1, [pc, #80]	@ (8012c3c <pbuf_remove_header+0xa0>)
 8012bec:	4812      	ldr	r0, [pc, #72]	@ (8012c38 <pbuf_remove_header+0x9c>)
 8012bee:	f00a fbed 	bl	801d3cc <iprintf>
 8012bf2:	2301      	movs	r3, #1
 8012bf4:	e017      	b.n	8012c26 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	685b      	ldr	r3, [r3, #4]
 8012bfa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	685a      	ldr	r2, [r3, #4]
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	441a      	add	r2, r3
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	895a      	ldrh	r2, [r3, #10]
 8012c0c:	89fb      	ldrh	r3, [r7, #14]
 8012c0e:	1ad3      	subs	r3, r2, r3
 8012c10:	b29a      	uxth	r2, r3
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	891a      	ldrh	r2, [r3, #8]
 8012c1a:	89fb      	ldrh	r3, [r7, #14]
 8012c1c:	1ad3      	subs	r3, r2, r3
 8012c1e:	b29a      	uxth	r2, r3
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012c24:	2300      	movs	r3, #0
}
 8012c26:	4618      	mov	r0, r3
 8012c28:	3710      	adds	r7, #16
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	bd80      	pop	{r7, pc}
 8012c2e:	bf00      	nop
 8012c30:	0801f81c 	.word	0x0801f81c
 8012c34:	0801f980 	.word	0x0801f980
 8012c38:	0801f87c 	.word	0x0801f87c
 8012c3c:	0801f98c 	.word	0x0801f98c

08012c40 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b082      	sub	sp, #8
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
 8012c48:	460b      	mov	r3, r1
 8012c4a:	807b      	strh	r3, [r7, #2]
 8012c4c:	4613      	mov	r3, r2
 8012c4e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012c50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	da08      	bge.n	8012c6a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012c58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012c5c:	425b      	negs	r3, r3
 8012c5e:	4619      	mov	r1, r3
 8012c60:	6878      	ldr	r0, [r7, #4]
 8012c62:	f7ff ff9b 	bl	8012b9c <pbuf_remove_header>
 8012c66:	4603      	mov	r3, r0
 8012c68:	e007      	b.n	8012c7a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012c6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012c6e:	787a      	ldrb	r2, [r7, #1]
 8012c70:	4619      	mov	r1, r3
 8012c72:	6878      	ldr	r0, [r7, #4]
 8012c74:	f7ff ff1a 	bl	8012aac <pbuf_add_header_impl>
 8012c78:	4603      	mov	r3, r0
  }
}
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	3708      	adds	r7, #8
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}

08012c82 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012c82:	b580      	push	{r7, lr}
 8012c84:	b082      	sub	sp, #8
 8012c86:	af00      	add	r7, sp, #0
 8012c88:	6078      	str	r0, [r7, #4]
 8012c8a:	460b      	mov	r3, r1
 8012c8c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8012c8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012c92:	2201      	movs	r2, #1
 8012c94:	4619      	mov	r1, r3
 8012c96:	6878      	ldr	r0, [r7, #4]
 8012c98:	f7ff ffd2 	bl	8012c40 <pbuf_header_impl>
 8012c9c:	4603      	mov	r3, r0
}
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	3708      	adds	r7, #8
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	bd80      	pop	{r7, pc}
	...

08012ca8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b088      	sub	sp, #32
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d10b      	bne.n	8012cce <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d106      	bne.n	8012cca <pbuf_free+0x22>
 8012cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8012dac <pbuf_free+0x104>)
 8012cbe:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8012cc2:	493b      	ldr	r1, [pc, #236]	@ (8012db0 <pbuf_free+0x108>)
 8012cc4:	483b      	ldr	r0, [pc, #236]	@ (8012db4 <pbuf_free+0x10c>)
 8012cc6:	f00a fb81 	bl	801d3cc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8012cca:	2300      	movs	r3, #0
 8012ccc:	e069      	b.n	8012da2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012cd2:	e062      	b.n	8012d9a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012cd4:	f009 fc08 	bl	801c4e8 <sys_arch_protect>
 8012cd8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	7b9b      	ldrb	r3, [r3, #14]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d106      	bne.n	8012cf0 <pbuf_free+0x48>
 8012ce2:	4b32      	ldr	r3, [pc, #200]	@ (8012dac <pbuf_free+0x104>)
 8012ce4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8012ce8:	4933      	ldr	r1, [pc, #204]	@ (8012db8 <pbuf_free+0x110>)
 8012cea:	4832      	ldr	r0, [pc, #200]	@ (8012db4 <pbuf_free+0x10c>)
 8012cec:	f00a fb6e 	bl	801d3cc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	7b9b      	ldrb	r3, [r3, #14]
 8012cf4:	3b01      	subs	r3, #1
 8012cf6:	b2da      	uxtb	r2, r3
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	739a      	strb	r2, [r3, #14]
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	7b9b      	ldrb	r3, [r3, #14]
 8012d00:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012d02:	69b8      	ldr	r0, [r7, #24]
 8012d04:	f009 fbfe 	bl	801c504 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012d08:	7dfb      	ldrb	r3, [r7, #23]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d143      	bne.n	8012d96 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	7b1b      	ldrb	r3, [r3, #12]
 8012d18:	f003 030f 	and.w	r3, r3, #15
 8012d1c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	7b5b      	ldrb	r3, [r3, #13]
 8012d22:	f003 0302 	and.w	r3, r3, #2
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d011      	beq.n	8012d4e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012d2e:	68bb      	ldr	r3, [r7, #8]
 8012d30:	691b      	ldr	r3, [r3, #16]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d106      	bne.n	8012d44 <pbuf_free+0x9c>
 8012d36:	4b1d      	ldr	r3, [pc, #116]	@ (8012dac <pbuf_free+0x104>)
 8012d38:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8012d3c:	491f      	ldr	r1, [pc, #124]	@ (8012dbc <pbuf_free+0x114>)
 8012d3e:	481d      	ldr	r0, [pc, #116]	@ (8012db4 <pbuf_free+0x10c>)
 8012d40:	f00a fb44 	bl	801d3cc <iprintf>
        pc->custom_free_function(p);
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	691b      	ldr	r3, [r3, #16]
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	4798      	blx	r3
 8012d4c:	e01d      	b.n	8012d8a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012d4e:	7bfb      	ldrb	r3, [r7, #15]
 8012d50:	2b02      	cmp	r3, #2
 8012d52:	d104      	bne.n	8012d5e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012d54:	6879      	ldr	r1, [r7, #4]
 8012d56:	200c      	movs	r0, #12
 8012d58:	f7ff f902 	bl	8011f60 <memp_free>
 8012d5c:	e015      	b.n	8012d8a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012d5e:	7bfb      	ldrb	r3, [r7, #15]
 8012d60:	2b01      	cmp	r3, #1
 8012d62:	d104      	bne.n	8012d6e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012d64:	6879      	ldr	r1, [r7, #4]
 8012d66:	200b      	movs	r0, #11
 8012d68:	f7ff f8fa 	bl	8011f60 <memp_free>
 8012d6c:	e00d      	b.n	8012d8a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012d6e:	7bfb      	ldrb	r3, [r7, #15]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d103      	bne.n	8012d7c <pbuf_free+0xd4>
          mem_free(p);
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f7fe fd3f 	bl	80117f8 <mem_free>
 8012d7a:	e006      	b.n	8012d8a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8012dac <pbuf_free+0x104>)
 8012d7e:	f240 320f 	movw	r2, #783	@ 0x30f
 8012d82:	490f      	ldr	r1, [pc, #60]	@ (8012dc0 <pbuf_free+0x118>)
 8012d84:	480b      	ldr	r0, [pc, #44]	@ (8012db4 <pbuf_free+0x10c>)
 8012d86:	f00a fb21 	bl	801d3cc <iprintf>
        }
      }
      count++;
 8012d8a:	7ffb      	ldrb	r3, [r7, #31]
 8012d8c:	3301      	adds	r3, #1
 8012d8e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012d90:	693b      	ldr	r3, [r7, #16]
 8012d92:	607b      	str	r3, [r7, #4]
 8012d94:	e001      	b.n	8012d9a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8012d96:	2300      	movs	r3, #0
 8012d98:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d199      	bne.n	8012cd4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012da0:	7ffb      	ldrb	r3, [r7, #31]
}
 8012da2:	4618      	mov	r0, r3
 8012da4:	3720      	adds	r7, #32
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}
 8012daa:	bf00      	nop
 8012dac:	0801f81c 	.word	0x0801f81c
 8012db0:	0801f980 	.word	0x0801f980
 8012db4:	0801f87c 	.word	0x0801f87c
 8012db8:	0801f9ac 	.word	0x0801f9ac
 8012dbc:	0801f9c4 	.word	0x0801f9c4
 8012dc0:	0801f9e8 	.word	0x0801f9e8

08012dc4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012dc4:	b480      	push	{r7}
 8012dc6:	b085      	sub	sp, #20
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012dd0:	e005      	b.n	8012dde <pbuf_clen+0x1a>
    ++len;
 8012dd2:	89fb      	ldrh	r3, [r7, #14]
 8012dd4:	3301      	adds	r3, #1
 8012dd6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d1f6      	bne.n	8012dd2 <pbuf_clen+0xe>
  }
  return len;
 8012de4:	89fb      	ldrh	r3, [r7, #14]
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	3714      	adds	r7, #20
 8012dea:	46bd      	mov	sp, r7
 8012dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df0:	4770      	bx	lr
	...

08012df4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b084      	sub	sp, #16
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d016      	beq.n	8012e30 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8012e02:	f009 fb71 	bl	801c4e8 <sys_arch_protect>
 8012e06:	60f8      	str	r0, [r7, #12]
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	7b9b      	ldrb	r3, [r3, #14]
 8012e0c:	3301      	adds	r3, #1
 8012e0e:	b2da      	uxtb	r2, r3
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	739a      	strb	r2, [r3, #14]
 8012e14:	68f8      	ldr	r0, [r7, #12]
 8012e16:	f009 fb75 	bl	801c504 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	7b9b      	ldrb	r3, [r3, #14]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d106      	bne.n	8012e30 <pbuf_ref+0x3c>
 8012e22:	4b05      	ldr	r3, [pc, #20]	@ (8012e38 <pbuf_ref+0x44>)
 8012e24:	f240 3242 	movw	r2, #834	@ 0x342
 8012e28:	4904      	ldr	r1, [pc, #16]	@ (8012e3c <pbuf_ref+0x48>)
 8012e2a:	4805      	ldr	r0, [pc, #20]	@ (8012e40 <pbuf_ref+0x4c>)
 8012e2c:	f00a face 	bl	801d3cc <iprintf>
  }
}
 8012e30:	bf00      	nop
 8012e32:	3710      	adds	r7, #16
 8012e34:	46bd      	mov	sp, r7
 8012e36:	bd80      	pop	{r7, pc}
 8012e38:	0801f81c 	.word	0x0801f81c
 8012e3c:	0801f9fc 	.word	0x0801f9fc
 8012e40:	0801f87c 	.word	0x0801f87c

08012e44 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b084      	sub	sp, #16
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
 8012e4c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d002      	beq.n	8012e5a <pbuf_cat+0x16>
 8012e54:	683b      	ldr	r3, [r7, #0]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d107      	bne.n	8012e6a <pbuf_cat+0x26>
 8012e5a:	4b20      	ldr	r3, [pc, #128]	@ (8012edc <pbuf_cat+0x98>)
 8012e5c:	f240 3259 	movw	r2, #857	@ 0x359
 8012e60:	491f      	ldr	r1, [pc, #124]	@ (8012ee0 <pbuf_cat+0x9c>)
 8012e62:	4820      	ldr	r0, [pc, #128]	@ (8012ee4 <pbuf_cat+0xa0>)
 8012e64:	f00a fab2 	bl	801d3cc <iprintf>
 8012e68:	e034      	b.n	8012ed4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	60fb      	str	r3, [r7, #12]
 8012e6e:	e00a      	b.n	8012e86 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	891a      	ldrh	r2, [r3, #8]
 8012e74:	683b      	ldr	r3, [r7, #0]
 8012e76:	891b      	ldrh	r3, [r3, #8]
 8012e78:	4413      	add	r3, r2
 8012e7a:	b29a      	uxth	r2, r3
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	60fb      	str	r3, [r7, #12]
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d1f0      	bne.n	8012e70 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	891a      	ldrh	r2, [r3, #8]
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	895b      	ldrh	r3, [r3, #10]
 8012e96:	429a      	cmp	r2, r3
 8012e98:	d006      	beq.n	8012ea8 <pbuf_cat+0x64>
 8012e9a:	4b10      	ldr	r3, [pc, #64]	@ (8012edc <pbuf_cat+0x98>)
 8012e9c:	f240 3262 	movw	r2, #866	@ 0x362
 8012ea0:	4911      	ldr	r1, [pc, #68]	@ (8012ee8 <pbuf_cat+0xa4>)
 8012ea2:	4810      	ldr	r0, [pc, #64]	@ (8012ee4 <pbuf_cat+0xa0>)
 8012ea4:	f00a fa92 	bl	801d3cc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d006      	beq.n	8012ebe <pbuf_cat+0x7a>
 8012eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8012edc <pbuf_cat+0x98>)
 8012eb2:	f240 3263 	movw	r2, #867	@ 0x363
 8012eb6:	490d      	ldr	r1, [pc, #52]	@ (8012eec <pbuf_cat+0xa8>)
 8012eb8:	480a      	ldr	r0, [pc, #40]	@ (8012ee4 <pbuf_cat+0xa0>)
 8012eba:	f00a fa87 	bl	801d3cc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	891a      	ldrh	r2, [r3, #8]
 8012ec2:	683b      	ldr	r3, [r7, #0]
 8012ec4:	891b      	ldrh	r3, [r3, #8]
 8012ec6:	4413      	add	r3, r2
 8012ec8:	b29a      	uxth	r2, r3
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	683a      	ldr	r2, [r7, #0]
 8012ed2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8012ed4:	3710      	adds	r7, #16
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	bd80      	pop	{r7, pc}
 8012eda:	bf00      	nop
 8012edc:	0801f81c 	.word	0x0801f81c
 8012ee0:	0801fa10 	.word	0x0801fa10
 8012ee4:	0801f87c 	.word	0x0801f87c
 8012ee8:	0801fa48 	.word	0x0801fa48
 8012eec:	0801fa78 	.word	0x0801fa78

08012ef0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b086      	sub	sp, #24
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
 8012ef8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8012efa:	2300      	movs	r3, #0
 8012efc:	617b      	str	r3, [r7, #20]
 8012efe:	2300      	movs	r3, #0
 8012f00:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d008      	beq.n	8012f1a <pbuf_copy+0x2a>
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d005      	beq.n	8012f1a <pbuf_copy+0x2a>
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	891a      	ldrh	r2, [r3, #8]
 8012f12:	683b      	ldr	r3, [r7, #0]
 8012f14:	891b      	ldrh	r3, [r3, #8]
 8012f16:	429a      	cmp	r2, r3
 8012f18:	d209      	bcs.n	8012f2e <pbuf_copy+0x3e>
 8012f1a:	4b57      	ldr	r3, [pc, #348]	@ (8013078 <pbuf_copy+0x188>)
 8012f1c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8012f20:	4956      	ldr	r1, [pc, #344]	@ (801307c <pbuf_copy+0x18c>)
 8012f22:	4857      	ldr	r0, [pc, #348]	@ (8013080 <pbuf_copy+0x190>)
 8012f24:	f00a fa52 	bl	801d3cc <iprintf>
 8012f28:	f06f 030f 	mvn.w	r3, #15
 8012f2c:	e09f      	b.n	801306e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	895b      	ldrh	r3, [r3, #10]
 8012f32:	461a      	mov	r2, r3
 8012f34:	697b      	ldr	r3, [r7, #20]
 8012f36:	1ad2      	subs	r2, r2, r3
 8012f38:	683b      	ldr	r3, [r7, #0]
 8012f3a:	895b      	ldrh	r3, [r3, #10]
 8012f3c:	4619      	mov	r1, r3
 8012f3e:	693b      	ldr	r3, [r7, #16]
 8012f40:	1acb      	subs	r3, r1, r3
 8012f42:	429a      	cmp	r2, r3
 8012f44:	d306      	bcc.n	8012f54 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	895b      	ldrh	r3, [r3, #10]
 8012f4a:	461a      	mov	r2, r3
 8012f4c:	693b      	ldr	r3, [r7, #16]
 8012f4e:	1ad3      	subs	r3, r2, r3
 8012f50:	60fb      	str	r3, [r7, #12]
 8012f52:	e005      	b.n	8012f60 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	895b      	ldrh	r3, [r3, #10]
 8012f58:	461a      	mov	r2, r3
 8012f5a:	697b      	ldr	r3, [r7, #20]
 8012f5c:	1ad3      	subs	r3, r2, r3
 8012f5e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	685a      	ldr	r2, [r3, #4]
 8012f64:	697b      	ldr	r3, [r7, #20]
 8012f66:	18d0      	adds	r0, r2, r3
 8012f68:	683b      	ldr	r3, [r7, #0]
 8012f6a:	685a      	ldr	r2, [r3, #4]
 8012f6c:	693b      	ldr	r3, [r7, #16]
 8012f6e:	4413      	add	r3, r2
 8012f70:	68fa      	ldr	r2, [r7, #12]
 8012f72:	4619      	mov	r1, r3
 8012f74:	f00a fbc1 	bl	801d6fa <memcpy>
    offset_to += len;
 8012f78:	697a      	ldr	r2, [r7, #20]
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	4413      	add	r3, r2
 8012f7e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012f80:	693a      	ldr	r2, [r7, #16]
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	4413      	add	r3, r2
 8012f86:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	895b      	ldrh	r3, [r3, #10]
 8012f8c:	461a      	mov	r2, r3
 8012f8e:	697b      	ldr	r3, [r7, #20]
 8012f90:	4293      	cmp	r3, r2
 8012f92:	d906      	bls.n	8012fa2 <pbuf_copy+0xb2>
 8012f94:	4b38      	ldr	r3, [pc, #224]	@ (8013078 <pbuf_copy+0x188>)
 8012f96:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8012f9a:	493a      	ldr	r1, [pc, #232]	@ (8013084 <pbuf_copy+0x194>)
 8012f9c:	4838      	ldr	r0, [pc, #224]	@ (8013080 <pbuf_copy+0x190>)
 8012f9e:	f00a fa15 	bl	801d3cc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8012fa2:	683b      	ldr	r3, [r7, #0]
 8012fa4:	895b      	ldrh	r3, [r3, #10]
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	693b      	ldr	r3, [r7, #16]
 8012faa:	4293      	cmp	r3, r2
 8012fac:	d906      	bls.n	8012fbc <pbuf_copy+0xcc>
 8012fae:	4b32      	ldr	r3, [pc, #200]	@ (8013078 <pbuf_copy+0x188>)
 8012fb0:	f240 32da 	movw	r2, #986	@ 0x3da
 8012fb4:	4934      	ldr	r1, [pc, #208]	@ (8013088 <pbuf_copy+0x198>)
 8012fb6:	4832      	ldr	r0, [pc, #200]	@ (8013080 <pbuf_copy+0x190>)
 8012fb8:	f00a fa08 	bl	801d3cc <iprintf>
    if (offset_from >= p_from->len) {
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	895b      	ldrh	r3, [r3, #10]
 8012fc0:	461a      	mov	r2, r3
 8012fc2:	693b      	ldr	r3, [r7, #16]
 8012fc4:	4293      	cmp	r3, r2
 8012fc6:	d304      	bcc.n	8012fd2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8012fcc:	683b      	ldr	r3, [r7, #0]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	895b      	ldrh	r3, [r3, #10]
 8012fd6:	461a      	mov	r2, r3
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	4293      	cmp	r3, r2
 8012fdc:	d114      	bne.n	8013008 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d10c      	bne.n	8013008 <pbuf_copy+0x118>
 8012fee:	683b      	ldr	r3, [r7, #0]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d009      	beq.n	8013008 <pbuf_copy+0x118>
 8012ff4:	4b20      	ldr	r3, [pc, #128]	@ (8013078 <pbuf_copy+0x188>)
 8012ff6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8012ffa:	4924      	ldr	r1, [pc, #144]	@ (801308c <pbuf_copy+0x19c>)
 8012ffc:	4820      	ldr	r0, [pc, #128]	@ (8013080 <pbuf_copy+0x190>)
 8012ffe:	f00a f9e5 	bl	801d3cc <iprintf>
 8013002:	f06f 030f 	mvn.w	r3, #15
 8013006:	e032      	b.n	801306e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d013      	beq.n	8013036 <pbuf_copy+0x146>
 801300e:	683b      	ldr	r3, [r7, #0]
 8013010:	895a      	ldrh	r2, [r3, #10]
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	891b      	ldrh	r3, [r3, #8]
 8013016:	429a      	cmp	r2, r3
 8013018:	d10d      	bne.n	8013036 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801301a:	683b      	ldr	r3, [r7, #0]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d009      	beq.n	8013036 <pbuf_copy+0x146>
 8013022:	4b15      	ldr	r3, [pc, #84]	@ (8013078 <pbuf_copy+0x188>)
 8013024:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8013028:	4919      	ldr	r1, [pc, #100]	@ (8013090 <pbuf_copy+0x1a0>)
 801302a:	4815      	ldr	r0, [pc, #84]	@ (8013080 <pbuf_copy+0x190>)
 801302c:	f00a f9ce 	bl	801d3cc <iprintf>
 8013030:	f06f 0305 	mvn.w	r3, #5
 8013034:	e01b      	b.n	801306e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d013      	beq.n	8013064 <pbuf_copy+0x174>
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	895a      	ldrh	r2, [r3, #10]
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	891b      	ldrh	r3, [r3, #8]
 8013044:	429a      	cmp	r2, r3
 8013046:	d10d      	bne.n	8013064 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d009      	beq.n	8013064 <pbuf_copy+0x174>
 8013050:	4b09      	ldr	r3, [pc, #36]	@ (8013078 <pbuf_copy+0x188>)
 8013052:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8013056:	490e      	ldr	r1, [pc, #56]	@ (8013090 <pbuf_copy+0x1a0>)
 8013058:	4809      	ldr	r0, [pc, #36]	@ (8013080 <pbuf_copy+0x190>)
 801305a:	f00a f9b7 	bl	801d3cc <iprintf>
 801305e:	f06f 0305 	mvn.w	r3, #5
 8013062:	e004      	b.n	801306e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	2b00      	cmp	r3, #0
 8013068:	f47f af61 	bne.w	8012f2e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801306c:	2300      	movs	r3, #0
}
 801306e:	4618      	mov	r0, r3
 8013070:	3718      	adds	r7, #24
 8013072:	46bd      	mov	sp, r7
 8013074:	bd80      	pop	{r7, pc}
 8013076:	bf00      	nop
 8013078:	0801f81c 	.word	0x0801f81c
 801307c:	0801fac4 	.word	0x0801fac4
 8013080:	0801f87c 	.word	0x0801f87c
 8013084:	0801faf4 	.word	0x0801faf4
 8013088:	0801fb0c 	.word	0x0801fb0c
 801308c:	0801fb28 	.word	0x0801fb28
 8013090:	0801fb38 	.word	0x0801fb38

08013094 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b088      	sub	sp, #32
 8013098:	af00      	add	r7, sp, #0
 801309a:	60f8      	str	r0, [r7, #12]
 801309c:	60b9      	str	r1, [r7, #8]
 801309e:	4611      	mov	r1, r2
 80130a0:	461a      	mov	r2, r3
 80130a2:	460b      	mov	r3, r1
 80130a4:	80fb      	strh	r3, [r7, #6]
 80130a6:	4613      	mov	r3, r2
 80130a8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80130aa:	2300      	movs	r3, #0
 80130ac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80130ae:	2300      	movs	r3, #0
 80130b0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d108      	bne.n	80130ca <pbuf_copy_partial+0x36>
 80130b8:	4b2b      	ldr	r3, [pc, #172]	@ (8013168 <pbuf_copy_partial+0xd4>)
 80130ba:	f240 420a 	movw	r2, #1034	@ 0x40a
 80130be:	492b      	ldr	r1, [pc, #172]	@ (801316c <pbuf_copy_partial+0xd8>)
 80130c0:	482b      	ldr	r0, [pc, #172]	@ (8013170 <pbuf_copy_partial+0xdc>)
 80130c2:	f00a f983 	bl	801d3cc <iprintf>
 80130c6:	2300      	movs	r3, #0
 80130c8:	e04a      	b.n	8013160 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80130ca:	68bb      	ldr	r3, [r7, #8]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d108      	bne.n	80130e2 <pbuf_copy_partial+0x4e>
 80130d0:	4b25      	ldr	r3, [pc, #148]	@ (8013168 <pbuf_copy_partial+0xd4>)
 80130d2:	f240 420b 	movw	r2, #1035	@ 0x40b
 80130d6:	4927      	ldr	r1, [pc, #156]	@ (8013174 <pbuf_copy_partial+0xe0>)
 80130d8:	4825      	ldr	r0, [pc, #148]	@ (8013170 <pbuf_copy_partial+0xdc>)
 80130da:	f00a f977 	bl	801d3cc <iprintf>
 80130de:	2300      	movs	r3, #0
 80130e0:	e03e      	b.n	8013160 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	61fb      	str	r3, [r7, #28]
 80130e6:	e034      	b.n	8013152 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80130e8:	88bb      	ldrh	r3, [r7, #4]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d00a      	beq.n	8013104 <pbuf_copy_partial+0x70>
 80130ee:	69fb      	ldr	r3, [r7, #28]
 80130f0:	895b      	ldrh	r3, [r3, #10]
 80130f2:	88ba      	ldrh	r2, [r7, #4]
 80130f4:	429a      	cmp	r2, r3
 80130f6:	d305      	bcc.n	8013104 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80130f8:	69fb      	ldr	r3, [r7, #28]
 80130fa:	895b      	ldrh	r3, [r3, #10]
 80130fc:	88ba      	ldrh	r2, [r7, #4]
 80130fe:	1ad3      	subs	r3, r2, r3
 8013100:	80bb      	strh	r3, [r7, #4]
 8013102:	e023      	b.n	801314c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8013104:	69fb      	ldr	r3, [r7, #28]
 8013106:	895a      	ldrh	r2, [r3, #10]
 8013108:	88bb      	ldrh	r3, [r7, #4]
 801310a:	1ad3      	subs	r3, r2, r3
 801310c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801310e:	8b3a      	ldrh	r2, [r7, #24]
 8013110:	88fb      	ldrh	r3, [r7, #6]
 8013112:	429a      	cmp	r2, r3
 8013114:	d901      	bls.n	801311a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8013116:	88fb      	ldrh	r3, [r7, #6]
 8013118:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801311a:	8b7b      	ldrh	r3, [r7, #26]
 801311c:	68ba      	ldr	r2, [r7, #8]
 801311e:	18d0      	adds	r0, r2, r3
 8013120:	69fb      	ldr	r3, [r7, #28]
 8013122:	685a      	ldr	r2, [r3, #4]
 8013124:	88bb      	ldrh	r3, [r7, #4]
 8013126:	4413      	add	r3, r2
 8013128:	8b3a      	ldrh	r2, [r7, #24]
 801312a:	4619      	mov	r1, r3
 801312c:	f00a fae5 	bl	801d6fa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8013130:	8afa      	ldrh	r2, [r7, #22]
 8013132:	8b3b      	ldrh	r3, [r7, #24]
 8013134:	4413      	add	r3, r2
 8013136:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8013138:	8b7a      	ldrh	r2, [r7, #26]
 801313a:	8b3b      	ldrh	r3, [r7, #24]
 801313c:	4413      	add	r3, r2
 801313e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8013140:	88fa      	ldrh	r2, [r7, #6]
 8013142:	8b3b      	ldrh	r3, [r7, #24]
 8013144:	1ad3      	subs	r3, r2, r3
 8013146:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8013148:	2300      	movs	r3, #0
 801314a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801314c:	69fb      	ldr	r3, [r7, #28]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	61fb      	str	r3, [r7, #28]
 8013152:	88fb      	ldrh	r3, [r7, #6]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d002      	beq.n	801315e <pbuf_copy_partial+0xca>
 8013158:	69fb      	ldr	r3, [r7, #28]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d1c4      	bne.n	80130e8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801315e:	8afb      	ldrh	r3, [r7, #22]
}
 8013160:	4618      	mov	r0, r3
 8013162:	3720      	adds	r7, #32
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}
 8013168:	0801f81c 	.word	0x0801f81c
 801316c:	0801fb64 	.word	0x0801fb64
 8013170:	0801f87c 	.word	0x0801f87c
 8013174:	0801fb84 	.word	0x0801fb84

08013178 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b084      	sub	sp, #16
 801317c:	af00      	add	r7, sp, #0
 801317e:	4603      	mov	r3, r0
 8013180:	603a      	str	r2, [r7, #0]
 8013182:	71fb      	strb	r3, [r7, #7]
 8013184:	460b      	mov	r3, r1
 8013186:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	8919      	ldrh	r1, [r3, #8]
 801318c:	88ba      	ldrh	r2, [r7, #4]
 801318e:	79fb      	ldrb	r3, [r7, #7]
 8013190:	4618      	mov	r0, r3
 8013192:	f7ff faa5 	bl	80126e0 <pbuf_alloc>
 8013196:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d101      	bne.n	80131a2 <pbuf_clone+0x2a>
    return NULL;
 801319e:	2300      	movs	r3, #0
 80131a0:	e011      	b.n	80131c6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80131a2:	6839      	ldr	r1, [r7, #0]
 80131a4:	68f8      	ldr	r0, [r7, #12]
 80131a6:	f7ff fea3 	bl	8012ef0 <pbuf_copy>
 80131aa:	4603      	mov	r3, r0
 80131ac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80131ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d006      	beq.n	80131c4 <pbuf_clone+0x4c>
 80131b6:	4b06      	ldr	r3, [pc, #24]	@ (80131d0 <pbuf_clone+0x58>)
 80131b8:	f240 5224 	movw	r2, #1316	@ 0x524
 80131bc:	4905      	ldr	r1, [pc, #20]	@ (80131d4 <pbuf_clone+0x5c>)
 80131be:	4806      	ldr	r0, [pc, #24]	@ (80131d8 <pbuf_clone+0x60>)
 80131c0:	f00a f904 	bl	801d3cc <iprintf>
  return q;
 80131c4:	68fb      	ldr	r3, [r7, #12]
}
 80131c6:	4618      	mov	r0, r3
 80131c8:	3710      	adds	r7, #16
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}
 80131ce:	bf00      	nop
 80131d0:	0801f81c 	.word	0x0801f81c
 80131d4:	0801fc90 	.word	0x0801fc90
 80131d8:	0801f87c 	.word	0x0801f87c

080131dc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80131e0:	f009 fff4 	bl	801d1cc <rand>
 80131e4:	4603      	mov	r3, r0
 80131e6:	b29b      	uxth	r3, r3
 80131e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80131ec:	b29b      	uxth	r3, r3
 80131ee:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80131f2:	b29a      	uxth	r2, r3
 80131f4:	4b01      	ldr	r3, [pc, #4]	@ (80131fc <tcp_init+0x20>)
 80131f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80131f8:	bf00      	nop
 80131fa:	bd80      	pop	{r7, pc}
 80131fc:	200000b0 	.word	0x200000b0

08013200 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b082      	sub	sp, #8
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	7d1b      	ldrb	r3, [r3, #20]
 801320c:	2b01      	cmp	r3, #1
 801320e:	d105      	bne.n	801321c <tcp_free+0x1c>
 8013210:	4b06      	ldr	r3, [pc, #24]	@ (801322c <tcp_free+0x2c>)
 8013212:	22d4      	movs	r2, #212	@ 0xd4
 8013214:	4906      	ldr	r1, [pc, #24]	@ (8013230 <tcp_free+0x30>)
 8013216:	4807      	ldr	r0, [pc, #28]	@ (8013234 <tcp_free+0x34>)
 8013218:	f00a f8d8 	bl	801d3cc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801321c:	6879      	ldr	r1, [r7, #4]
 801321e:	2001      	movs	r0, #1
 8013220:	f7fe fe9e 	bl	8011f60 <memp_free>
}
 8013224:	bf00      	nop
 8013226:	3708      	adds	r7, #8
 8013228:	46bd      	mov	sp, r7
 801322a:	bd80      	pop	{r7, pc}
 801322c:	0801fd1c 	.word	0x0801fd1c
 8013230:	0801fd4c 	.word	0x0801fd4c
 8013234:	0801fd60 	.word	0x0801fd60

08013238 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8013238:	b580      	push	{r7, lr}
 801323a:	b082      	sub	sp, #8
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	7d1b      	ldrb	r3, [r3, #20]
 8013244:	2b01      	cmp	r3, #1
 8013246:	d105      	bne.n	8013254 <tcp_free_listen+0x1c>
 8013248:	4b06      	ldr	r3, [pc, #24]	@ (8013264 <tcp_free_listen+0x2c>)
 801324a:	22df      	movs	r2, #223	@ 0xdf
 801324c:	4906      	ldr	r1, [pc, #24]	@ (8013268 <tcp_free_listen+0x30>)
 801324e:	4807      	ldr	r0, [pc, #28]	@ (801326c <tcp_free_listen+0x34>)
 8013250:	f00a f8bc 	bl	801d3cc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8013254:	6879      	ldr	r1, [r7, #4]
 8013256:	2002      	movs	r0, #2
 8013258:	f7fe fe82 	bl	8011f60 <memp_free>
}
 801325c:	bf00      	nop
 801325e:	3708      	adds	r7, #8
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}
 8013264:	0801fd1c 	.word	0x0801fd1c
 8013268:	0801fd88 	.word	0x0801fd88
 801326c:	0801fd60 	.word	0x0801fd60

08013270 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8013274:	f001 f8a8 	bl	80143c8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8013278:	4b07      	ldr	r3, [pc, #28]	@ (8013298 <tcp_tmr+0x28>)
 801327a:	781b      	ldrb	r3, [r3, #0]
 801327c:	3301      	adds	r3, #1
 801327e:	b2da      	uxtb	r2, r3
 8013280:	4b05      	ldr	r3, [pc, #20]	@ (8013298 <tcp_tmr+0x28>)
 8013282:	701a      	strb	r2, [r3, #0]
 8013284:	4b04      	ldr	r3, [pc, #16]	@ (8013298 <tcp_tmr+0x28>)
 8013286:	781b      	ldrb	r3, [r3, #0]
 8013288:	f003 0301 	and.w	r3, r3, #1
 801328c:	2b00      	cmp	r3, #0
 801328e:	d001      	beq.n	8013294 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8013290:	f000 fd58 	bl	8013d44 <tcp_slowtmr>
  }
}
 8013294:	bf00      	nop
 8013296:	bd80      	pop	{r7, pc}
 8013298:	2000e471 	.word	0x2000e471

0801329c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b084      	sub	sp, #16
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
 80132a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80132a6:	683b      	ldr	r3, [r7, #0]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d105      	bne.n	80132b8 <tcp_remove_listener+0x1c>
 80132ac:	4b0d      	ldr	r3, [pc, #52]	@ (80132e4 <tcp_remove_listener+0x48>)
 80132ae:	22ff      	movs	r2, #255	@ 0xff
 80132b0:	490d      	ldr	r1, [pc, #52]	@ (80132e8 <tcp_remove_listener+0x4c>)
 80132b2:	480e      	ldr	r0, [pc, #56]	@ (80132ec <tcp_remove_listener+0x50>)
 80132b4:	f00a f88a 	bl	801d3cc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	60fb      	str	r3, [r7, #12]
 80132bc:	e00a      	b.n	80132d4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80132c2:	683a      	ldr	r2, [r7, #0]
 80132c4:	429a      	cmp	r2, r3
 80132c6:	d102      	bne.n	80132ce <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	2200      	movs	r2, #0
 80132cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	68db      	ldr	r3, [r3, #12]
 80132d2:	60fb      	str	r3, [r7, #12]
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d1f1      	bne.n	80132be <tcp_remove_listener+0x22>
    }
  }
}
 80132da:	bf00      	nop
 80132dc:	bf00      	nop
 80132de:	3710      	adds	r7, #16
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}
 80132e4:	0801fd1c 	.word	0x0801fd1c
 80132e8:	0801fda4 	.word	0x0801fda4
 80132ec:	0801fd60 	.word	0x0801fd60

080132f0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b084      	sub	sp, #16
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d106      	bne.n	801330c <tcp_listen_closed+0x1c>
 80132fe:	4b14      	ldr	r3, [pc, #80]	@ (8013350 <tcp_listen_closed+0x60>)
 8013300:	f240 1211 	movw	r2, #273	@ 0x111
 8013304:	4913      	ldr	r1, [pc, #76]	@ (8013354 <tcp_listen_closed+0x64>)
 8013306:	4814      	ldr	r0, [pc, #80]	@ (8013358 <tcp_listen_closed+0x68>)
 8013308:	f00a f860 	bl	801d3cc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	7d1b      	ldrb	r3, [r3, #20]
 8013310:	2b01      	cmp	r3, #1
 8013312:	d006      	beq.n	8013322 <tcp_listen_closed+0x32>
 8013314:	4b0e      	ldr	r3, [pc, #56]	@ (8013350 <tcp_listen_closed+0x60>)
 8013316:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801331a:	4910      	ldr	r1, [pc, #64]	@ (801335c <tcp_listen_closed+0x6c>)
 801331c:	480e      	ldr	r0, [pc, #56]	@ (8013358 <tcp_listen_closed+0x68>)
 801331e:	f00a f855 	bl	801d3cc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013322:	2301      	movs	r3, #1
 8013324:	60fb      	str	r3, [r7, #12]
 8013326:	e00b      	b.n	8013340 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8013328:	4a0d      	ldr	r2, [pc, #52]	@ (8013360 <tcp_listen_closed+0x70>)
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	6879      	ldr	r1, [r7, #4]
 8013334:	4618      	mov	r0, r3
 8013336:	f7ff ffb1 	bl	801329c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	3301      	adds	r3, #1
 801333e:	60fb      	str	r3, [r7, #12]
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	2b03      	cmp	r3, #3
 8013344:	d9f0      	bls.n	8013328 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8013346:	bf00      	nop
 8013348:	bf00      	nop
 801334a:	3710      	adds	r7, #16
 801334c:	46bd      	mov	sp, r7
 801334e:	bd80      	pop	{r7, pc}
 8013350:	0801fd1c 	.word	0x0801fd1c
 8013354:	0801fdcc 	.word	0x0801fdcc
 8013358:	0801fd60 	.word	0x0801fd60
 801335c:	0801fdd8 	.word	0x0801fdd8
 8013360:	080334ac 	.word	0x080334ac

08013364 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8013364:	b5b0      	push	{r4, r5, r7, lr}
 8013366:	b088      	sub	sp, #32
 8013368:	af04      	add	r7, sp, #16
 801336a:	6078      	str	r0, [r7, #4]
 801336c:	460b      	mov	r3, r1
 801336e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d106      	bne.n	8013384 <tcp_close_shutdown+0x20>
 8013376:	4b63      	ldr	r3, [pc, #396]	@ (8013504 <tcp_close_shutdown+0x1a0>)
 8013378:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 801337c:	4962      	ldr	r1, [pc, #392]	@ (8013508 <tcp_close_shutdown+0x1a4>)
 801337e:	4863      	ldr	r0, [pc, #396]	@ (801350c <tcp_close_shutdown+0x1a8>)
 8013380:	f00a f824 	bl	801d3cc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8013384:	78fb      	ldrb	r3, [r7, #3]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d066      	beq.n	8013458 <tcp_close_shutdown+0xf4>
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	7d1b      	ldrb	r3, [r3, #20]
 801338e:	2b04      	cmp	r3, #4
 8013390:	d003      	beq.n	801339a <tcp_close_shutdown+0x36>
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	7d1b      	ldrb	r3, [r3, #20]
 8013396:	2b07      	cmp	r3, #7
 8013398:	d15e      	bne.n	8013458 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d104      	bne.n	80133ac <tcp_close_shutdown+0x48>
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80133a6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80133aa:	d055      	beq.n	8013458 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	8b5b      	ldrh	r3, [r3, #26]
 80133b0:	f003 0310 	and.w	r3, r3, #16
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d106      	bne.n	80133c6 <tcp_close_shutdown+0x62>
 80133b8:	4b52      	ldr	r3, [pc, #328]	@ (8013504 <tcp_close_shutdown+0x1a0>)
 80133ba:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80133be:	4954      	ldr	r1, [pc, #336]	@ (8013510 <tcp_close_shutdown+0x1ac>)
 80133c0:	4852      	ldr	r0, [pc, #328]	@ (801350c <tcp_close_shutdown+0x1a8>)
 80133c2:	f00a f803 	bl	801d3cc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80133ce:	687d      	ldr	r5, [r7, #4]
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	3304      	adds	r3, #4
 80133d4:	687a      	ldr	r2, [r7, #4]
 80133d6:	8ad2      	ldrh	r2, [r2, #22]
 80133d8:	6879      	ldr	r1, [r7, #4]
 80133da:	8b09      	ldrh	r1, [r1, #24]
 80133dc:	9102      	str	r1, [sp, #8]
 80133de:	9201      	str	r2, [sp, #4]
 80133e0:	9300      	str	r3, [sp, #0]
 80133e2:	462b      	mov	r3, r5
 80133e4:	4622      	mov	r2, r4
 80133e6:	4601      	mov	r1, r0
 80133e8:	6878      	ldr	r0, [r7, #4]
 80133ea:	f005 fdb7 	bl	8018f5c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80133ee:	6878      	ldr	r0, [r7, #4]
 80133f0:	f001 fb9a 	bl	8014b28 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80133f4:	4b47      	ldr	r3, [pc, #284]	@ (8013514 <tcp_close_shutdown+0x1b0>)
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	687a      	ldr	r2, [r7, #4]
 80133fa:	429a      	cmp	r2, r3
 80133fc:	d105      	bne.n	801340a <tcp_close_shutdown+0xa6>
 80133fe:	4b45      	ldr	r3, [pc, #276]	@ (8013514 <tcp_close_shutdown+0x1b0>)
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	68db      	ldr	r3, [r3, #12]
 8013404:	4a43      	ldr	r2, [pc, #268]	@ (8013514 <tcp_close_shutdown+0x1b0>)
 8013406:	6013      	str	r3, [r2, #0]
 8013408:	e013      	b.n	8013432 <tcp_close_shutdown+0xce>
 801340a:	4b42      	ldr	r3, [pc, #264]	@ (8013514 <tcp_close_shutdown+0x1b0>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	60fb      	str	r3, [r7, #12]
 8013410:	e00c      	b.n	801342c <tcp_close_shutdown+0xc8>
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	68db      	ldr	r3, [r3, #12]
 8013416:	687a      	ldr	r2, [r7, #4]
 8013418:	429a      	cmp	r2, r3
 801341a:	d104      	bne.n	8013426 <tcp_close_shutdown+0xc2>
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	68da      	ldr	r2, [r3, #12]
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	60da      	str	r2, [r3, #12]
 8013424:	e005      	b.n	8013432 <tcp_close_shutdown+0xce>
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	68db      	ldr	r3, [r3, #12]
 801342a:	60fb      	str	r3, [r7, #12]
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d1ef      	bne.n	8013412 <tcp_close_shutdown+0xae>
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	2200      	movs	r2, #0
 8013436:	60da      	str	r2, [r3, #12]
 8013438:	4b37      	ldr	r3, [pc, #220]	@ (8013518 <tcp_close_shutdown+0x1b4>)
 801343a:	2201      	movs	r2, #1
 801343c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801343e:	4b37      	ldr	r3, [pc, #220]	@ (801351c <tcp_close_shutdown+0x1b8>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	687a      	ldr	r2, [r7, #4]
 8013444:	429a      	cmp	r2, r3
 8013446:	d102      	bne.n	801344e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8013448:	f004 f82e 	bl	80174a8 <tcp_trigger_input_pcb_close>
 801344c:	e002      	b.n	8013454 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801344e:	6878      	ldr	r0, [r7, #4]
 8013450:	f7ff fed6 	bl	8013200 <tcp_free>
      }
      return ERR_OK;
 8013454:	2300      	movs	r3, #0
 8013456:	e050      	b.n	80134fa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	7d1b      	ldrb	r3, [r3, #20]
 801345c:	2b02      	cmp	r3, #2
 801345e:	d03b      	beq.n	80134d8 <tcp_close_shutdown+0x174>
 8013460:	2b02      	cmp	r3, #2
 8013462:	dc44      	bgt.n	80134ee <tcp_close_shutdown+0x18a>
 8013464:	2b00      	cmp	r3, #0
 8013466:	d002      	beq.n	801346e <tcp_close_shutdown+0x10a>
 8013468:	2b01      	cmp	r3, #1
 801346a:	d02a      	beq.n	80134c2 <tcp_close_shutdown+0x15e>
 801346c:	e03f      	b.n	80134ee <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	8adb      	ldrh	r3, [r3, #22]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d021      	beq.n	80134ba <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013476:	4b2a      	ldr	r3, [pc, #168]	@ (8013520 <tcp_close_shutdown+0x1bc>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	687a      	ldr	r2, [r7, #4]
 801347c:	429a      	cmp	r2, r3
 801347e:	d105      	bne.n	801348c <tcp_close_shutdown+0x128>
 8013480:	4b27      	ldr	r3, [pc, #156]	@ (8013520 <tcp_close_shutdown+0x1bc>)
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	68db      	ldr	r3, [r3, #12]
 8013486:	4a26      	ldr	r2, [pc, #152]	@ (8013520 <tcp_close_shutdown+0x1bc>)
 8013488:	6013      	str	r3, [r2, #0]
 801348a:	e013      	b.n	80134b4 <tcp_close_shutdown+0x150>
 801348c:	4b24      	ldr	r3, [pc, #144]	@ (8013520 <tcp_close_shutdown+0x1bc>)
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	60bb      	str	r3, [r7, #8]
 8013492:	e00c      	b.n	80134ae <tcp_close_shutdown+0x14a>
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	68db      	ldr	r3, [r3, #12]
 8013498:	687a      	ldr	r2, [r7, #4]
 801349a:	429a      	cmp	r2, r3
 801349c:	d104      	bne.n	80134a8 <tcp_close_shutdown+0x144>
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	68da      	ldr	r2, [r3, #12]
 80134a2:	68bb      	ldr	r3, [r7, #8]
 80134a4:	60da      	str	r2, [r3, #12]
 80134a6:	e005      	b.n	80134b4 <tcp_close_shutdown+0x150>
 80134a8:	68bb      	ldr	r3, [r7, #8]
 80134aa:	68db      	ldr	r3, [r3, #12]
 80134ac:	60bb      	str	r3, [r7, #8]
 80134ae:	68bb      	ldr	r3, [r7, #8]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d1ef      	bne.n	8013494 <tcp_close_shutdown+0x130>
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	2200      	movs	r2, #0
 80134b8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f7ff fea0 	bl	8013200 <tcp_free>
      break;
 80134c0:	e01a      	b.n	80134f8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80134c2:	6878      	ldr	r0, [r7, #4]
 80134c4:	f7ff ff14 	bl	80132f0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80134c8:	6879      	ldr	r1, [r7, #4]
 80134ca:	4816      	ldr	r0, [pc, #88]	@ (8013524 <tcp_close_shutdown+0x1c0>)
 80134cc:	f001 fb7c 	bl	8014bc8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80134d0:	6878      	ldr	r0, [r7, #4]
 80134d2:	f7ff feb1 	bl	8013238 <tcp_free_listen>
      break;
 80134d6:	e00f      	b.n	80134f8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80134d8:	6879      	ldr	r1, [r7, #4]
 80134da:	480e      	ldr	r0, [pc, #56]	@ (8013514 <tcp_close_shutdown+0x1b0>)
 80134dc:	f001 fb74 	bl	8014bc8 <tcp_pcb_remove>
 80134e0:	4b0d      	ldr	r3, [pc, #52]	@ (8013518 <tcp_close_shutdown+0x1b4>)
 80134e2:	2201      	movs	r2, #1
 80134e4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80134e6:	6878      	ldr	r0, [r7, #4]
 80134e8:	f7ff fe8a 	bl	8013200 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80134ec:	e004      	b.n	80134f8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80134ee:	6878      	ldr	r0, [r7, #4]
 80134f0:	f000 f81a 	bl	8013528 <tcp_close_shutdown_fin>
 80134f4:	4603      	mov	r3, r0
 80134f6:	e000      	b.n	80134fa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80134f8:	2300      	movs	r3, #0
}
 80134fa:	4618      	mov	r0, r3
 80134fc:	3710      	adds	r7, #16
 80134fe:	46bd      	mov	sp, r7
 8013500:	bdb0      	pop	{r4, r5, r7, pc}
 8013502:	bf00      	nop
 8013504:	0801fd1c 	.word	0x0801fd1c
 8013508:	0801fdf0 	.word	0x0801fdf0
 801350c:	0801fd60 	.word	0x0801fd60
 8013510:	0801fe10 	.word	0x0801fe10
 8013514:	2000e468 	.word	0x2000e468
 8013518:	2000e470 	.word	0x2000e470
 801351c:	2000e4a8 	.word	0x2000e4a8
 8013520:	2000e460 	.word	0x2000e460
 8013524:	2000e464 	.word	0x2000e464

08013528 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b084      	sub	sp, #16
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d106      	bne.n	8013544 <tcp_close_shutdown_fin+0x1c>
 8013536:	4b2e      	ldr	r3, [pc, #184]	@ (80135f0 <tcp_close_shutdown_fin+0xc8>)
 8013538:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801353c:	492d      	ldr	r1, [pc, #180]	@ (80135f4 <tcp_close_shutdown_fin+0xcc>)
 801353e:	482e      	ldr	r0, [pc, #184]	@ (80135f8 <tcp_close_shutdown_fin+0xd0>)
 8013540:	f009 ff44 	bl	801d3cc <iprintf>

  switch (pcb->state) {
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	7d1b      	ldrb	r3, [r3, #20]
 8013548:	2b07      	cmp	r3, #7
 801354a:	d020      	beq.n	801358e <tcp_close_shutdown_fin+0x66>
 801354c:	2b07      	cmp	r3, #7
 801354e:	dc2b      	bgt.n	80135a8 <tcp_close_shutdown_fin+0x80>
 8013550:	2b03      	cmp	r3, #3
 8013552:	d002      	beq.n	801355a <tcp_close_shutdown_fin+0x32>
 8013554:	2b04      	cmp	r3, #4
 8013556:	d00d      	beq.n	8013574 <tcp_close_shutdown_fin+0x4c>
 8013558:	e026      	b.n	80135a8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801355a:	6878      	ldr	r0, [r7, #4]
 801355c:	f004 fe0c 	bl	8018178 <tcp_send_fin>
 8013560:	4603      	mov	r3, r0
 8013562:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d11f      	bne.n	80135ac <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	2205      	movs	r2, #5
 8013570:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013572:	e01b      	b.n	80135ac <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8013574:	6878      	ldr	r0, [r7, #4]
 8013576:	f004 fdff 	bl	8018178 <tcp_send_fin>
 801357a:	4603      	mov	r3, r0
 801357c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801357e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d114      	bne.n	80135b0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2205      	movs	r2, #5
 801358a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801358c:	e010      	b.n	80135b0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801358e:	6878      	ldr	r0, [r7, #4]
 8013590:	f004 fdf2 	bl	8018178 <tcp_send_fin>
 8013594:	4603      	mov	r3, r0
 8013596:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d109      	bne.n	80135b4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	2209      	movs	r2, #9
 80135a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80135a6:	e005      	b.n	80135b4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80135a8:	2300      	movs	r3, #0
 80135aa:	e01c      	b.n	80135e6 <tcp_close_shutdown_fin+0xbe>
      break;
 80135ac:	bf00      	nop
 80135ae:	e002      	b.n	80135b6 <tcp_close_shutdown_fin+0x8e>
      break;
 80135b0:	bf00      	nop
 80135b2:	e000      	b.n	80135b6 <tcp_close_shutdown_fin+0x8e>
      break;
 80135b4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80135b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d103      	bne.n	80135c6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80135be:	6878      	ldr	r0, [r7, #4]
 80135c0:	f004 ff18 	bl	80183f4 <tcp_output>
 80135c4:	e00d      	b.n	80135e2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80135c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80135ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135ce:	d108      	bne.n	80135e2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	8b5b      	ldrh	r3, [r3, #26]
 80135d4:	f043 0308 	orr.w	r3, r3, #8
 80135d8:	b29a      	uxth	r2, r3
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80135de:	2300      	movs	r3, #0
 80135e0:	e001      	b.n	80135e6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80135e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80135e6:	4618      	mov	r0, r3
 80135e8:	3710      	adds	r7, #16
 80135ea:	46bd      	mov	sp, r7
 80135ec:	bd80      	pop	{r7, pc}
 80135ee:	bf00      	nop
 80135f0:	0801fd1c 	.word	0x0801fd1c
 80135f4:	0801fdcc 	.word	0x0801fdcc
 80135f8:	0801fd60 	.word	0x0801fd60

080135fc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b082      	sub	sp, #8
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d109      	bne.n	801361e <tcp_close+0x22>
 801360a:	4b0f      	ldr	r3, [pc, #60]	@ (8013648 <tcp_close+0x4c>)
 801360c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8013610:	490e      	ldr	r1, [pc, #56]	@ (801364c <tcp_close+0x50>)
 8013612:	480f      	ldr	r0, [pc, #60]	@ (8013650 <tcp_close+0x54>)
 8013614:	f009 feda 	bl	801d3cc <iprintf>
 8013618:	f06f 030f 	mvn.w	r3, #15
 801361c:	e00f      	b.n	801363e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	7d1b      	ldrb	r3, [r3, #20]
 8013622:	2b01      	cmp	r3, #1
 8013624:	d006      	beq.n	8013634 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	8b5b      	ldrh	r3, [r3, #26]
 801362a:	f043 0310 	orr.w	r3, r3, #16
 801362e:	b29a      	uxth	r2, r3
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8013634:	2101      	movs	r1, #1
 8013636:	6878      	ldr	r0, [r7, #4]
 8013638:	f7ff fe94 	bl	8013364 <tcp_close_shutdown>
 801363c:	4603      	mov	r3, r0
}
 801363e:	4618      	mov	r0, r3
 8013640:	3708      	adds	r7, #8
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}
 8013646:	bf00      	nop
 8013648:	0801fd1c 	.word	0x0801fd1c
 801364c:	0801fe2c 	.word	0x0801fe2c
 8013650:	0801fd60 	.word	0x0801fd60

08013654 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b084      	sub	sp, #16
 8013658:	af00      	add	r7, sp, #0
 801365a:	60f8      	str	r0, [r7, #12]
 801365c:	60b9      	str	r1, [r7, #8]
 801365e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d109      	bne.n	801367a <tcp_shutdown+0x26>
 8013666:	4b26      	ldr	r3, [pc, #152]	@ (8013700 <tcp_shutdown+0xac>)
 8013668:	f240 2207 	movw	r2, #519	@ 0x207
 801366c:	4925      	ldr	r1, [pc, #148]	@ (8013704 <tcp_shutdown+0xb0>)
 801366e:	4826      	ldr	r0, [pc, #152]	@ (8013708 <tcp_shutdown+0xb4>)
 8013670:	f009 feac 	bl	801d3cc <iprintf>
 8013674:	f06f 030f 	mvn.w	r3, #15
 8013678:	e03d      	b.n	80136f6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	7d1b      	ldrb	r3, [r3, #20]
 801367e:	2b01      	cmp	r3, #1
 8013680:	d102      	bne.n	8013688 <tcp_shutdown+0x34>
    return ERR_CONN;
 8013682:	f06f 030a 	mvn.w	r3, #10
 8013686:	e036      	b.n	80136f6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8013688:	68bb      	ldr	r3, [r7, #8]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d01b      	beq.n	80136c6 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	8b5b      	ldrh	r3, [r3, #26]
 8013692:	f043 0310 	orr.w	r3, r3, #16
 8013696:	b29a      	uxth	r2, r3
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d005      	beq.n	80136ae <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80136a2:	2101      	movs	r1, #1
 80136a4:	68f8      	ldr	r0, [r7, #12]
 80136a6:	f7ff fe5d 	bl	8013364 <tcp_close_shutdown>
 80136aa:	4603      	mov	r3, r0
 80136ac:	e023      	b.n	80136f6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d007      	beq.n	80136c6 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80136ba:	4618      	mov	r0, r3
 80136bc:	f7ff faf4 	bl	8012ca8 <pbuf_free>
      pcb->refused_data = NULL;
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	2200      	movs	r2, #0
 80136c4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d013      	beq.n	80136f4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	7d1b      	ldrb	r3, [r3, #20]
 80136d0:	2b04      	cmp	r3, #4
 80136d2:	dc02      	bgt.n	80136da <tcp_shutdown+0x86>
 80136d4:	2b03      	cmp	r3, #3
 80136d6:	da02      	bge.n	80136de <tcp_shutdown+0x8a>
 80136d8:	e009      	b.n	80136ee <tcp_shutdown+0x9a>
 80136da:	2b07      	cmp	r3, #7
 80136dc:	d107      	bne.n	80136ee <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80136de:	68bb      	ldr	r3, [r7, #8]
 80136e0:	b2db      	uxtb	r3, r3
 80136e2:	4619      	mov	r1, r3
 80136e4:	68f8      	ldr	r0, [r7, #12]
 80136e6:	f7ff fe3d 	bl	8013364 <tcp_close_shutdown>
 80136ea:	4603      	mov	r3, r0
 80136ec:	e003      	b.n	80136f6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80136ee:	f06f 030a 	mvn.w	r3, #10
 80136f2:	e000      	b.n	80136f6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80136f4:	2300      	movs	r3, #0
}
 80136f6:	4618      	mov	r0, r3
 80136f8:	3710      	adds	r7, #16
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bd80      	pop	{r7, pc}
 80136fe:	bf00      	nop
 8013700:	0801fd1c 	.word	0x0801fd1c
 8013704:	0801fe44 	.word	0x0801fe44
 8013708:	0801fd60 	.word	0x0801fd60

0801370c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801370c:	b580      	push	{r7, lr}
 801370e:	b08e      	sub	sp, #56	@ 0x38
 8013710:	af04      	add	r7, sp, #16
 8013712:	6078      	str	r0, [r7, #4]
 8013714:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d107      	bne.n	801372c <tcp_abandon+0x20>
 801371c:	4b52      	ldr	r3, [pc, #328]	@ (8013868 <tcp_abandon+0x15c>)
 801371e:	f240 223d 	movw	r2, #573	@ 0x23d
 8013722:	4952      	ldr	r1, [pc, #328]	@ (801386c <tcp_abandon+0x160>)
 8013724:	4852      	ldr	r0, [pc, #328]	@ (8013870 <tcp_abandon+0x164>)
 8013726:	f009 fe51 	bl	801d3cc <iprintf>
 801372a:	e099      	b.n	8013860 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	7d1b      	ldrb	r3, [r3, #20]
 8013730:	2b01      	cmp	r3, #1
 8013732:	d106      	bne.n	8013742 <tcp_abandon+0x36>
 8013734:	4b4c      	ldr	r3, [pc, #304]	@ (8013868 <tcp_abandon+0x15c>)
 8013736:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801373a:	494e      	ldr	r1, [pc, #312]	@ (8013874 <tcp_abandon+0x168>)
 801373c:	484c      	ldr	r0, [pc, #304]	@ (8013870 <tcp_abandon+0x164>)
 801373e:	f009 fe45 	bl	801d3cc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	7d1b      	ldrb	r3, [r3, #20]
 8013746:	2b0a      	cmp	r3, #10
 8013748:	d107      	bne.n	801375a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801374a:	6879      	ldr	r1, [r7, #4]
 801374c:	484a      	ldr	r0, [pc, #296]	@ (8013878 <tcp_abandon+0x16c>)
 801374e:	f001 fa3b 	bl	8014bc8 <tcp_pcb_remove>
    tcp_free(pcb);
 8013752:	6878      	ldr	r0, [r7, #4]
 8013754:	f7ff fd54 	bl	8013200 <tcp_free>
 8013758:	e082      	b.n	8013860 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801375a:	2300      	movs	r3, #0
 801375c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801375e:	2300      	movs	r3, #0
 8013760:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013766:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801376c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013774:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	691b      	ldr	r3, [r3, #16]
 801377a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	7d1b      	ldrb	r3, [r3, #20]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d126      	bne.n	80137d2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	8adb      	ldrh	r3, [r3, #22]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d02e      	beq.n	80137ea <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801378c:	4b3b      	ldr	r3, [pc, #236]	@ (801387c <tcp_abandon+0x170>)
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	687a      	ldr	r2, [r7, #4]
 8013792:	429a      	cmp	r2, r3
 8013794:	d105      	bne.n	80137a2 <tcp_abandon+0x96>
 8013796:	4b39      	ldr	r3, [pc, #228]	@ (801387c <tcp_abandon+0x170>)
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	68db      	ldr	r3, [r3, #12]
 801379c:	4a37      	ldr	r2, [pc, #220]	@ (801387c <tcp_abandon+0x170>)
 801379e:	6013      	str	r3, [r2, #0]
 80137a0:	e013      	b.n	80137ca <tcp_abandon+0xbe>
 80137a2:	4b36      	ldr	r3, [pc, #216]	@ (801387c <tcp_abandon+0x170>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	61fb      	str	r3, [r7, #28]
 80137a8:	e00c      	b.n	80137c4 <tcp_abandon+0xb8>
 80137aa:	69fb      	ldr	r3, [r7, #28]
 80137ac:	68db      	ldr	r3, [r3, #12]
 80137ae:	687a      	ldr	r2, [r7, #4]
 80137b0:	429a      	cmp	r2, r3
 80137b2:	d104      	bne.n	80137be <tcp_abandon+0xb2>
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	68da      	ldr	r2, [r3, #12]
 80137b8:	69fb      	ldr	r3, [r7, #28]
 80137ba:	60da      	str	r2, [r3, #12]
 80137bc:	e005      	b.n	80137ca <tcp_abandon+0xbe>
 80137be:	69fb      	ldr	r3, [r7, #28]
 80137c0:	68db      	ldr	r3, [r3, #12]
 80137c2:	61fb      	str	r3, [r7, #28]
 80137c4:	69fb      	ldr	r3, [r7, #28]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d1ef      	bne.n	80137aa <tcp_abandon+0x9e>
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	2200      	movs	r2, #0
 80137ce:	60da      	str	r2, [r3, #12]
 80137d0:	e00b      	b.n	80137ea <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80137d2:	683b      	ldr	r3, [r7, #0]
 80137d4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	8adb      	ldrh	r3, [r3, #22]
 80137da:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80137dc:	6879      	ldr	r1, [r7, #4]
 80137de:	4828      	ldr	r0, [pc, #160]	@ (8013880 <tcp_abandon+0x174>)
 80137e0:	f001 f9f2 	bl	8014bc8 <tcp_pcb_remove>
 80137e4:	4b27      	ldr	r3, [pc, #156]	@ (8013884 <tcp_abandon+0x178>)
 80137e6:	2201      	movs	r2, #1
 80137e8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d004      	beq.n	80137fc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80137f6:	4618      	mov	r0, r3
 80137f8:	f000 fec6 	bl	8014588 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013800:	2b00      	cmp	r3, #0
 8013802:	d004      	beq.n	801380e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013808:	4618      	mov	r0, r3
 801380a:	f000 febd 	bl	8014588 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013812:	2b00      	cmp	r3, #0
 8013814:	d004      	beq.n	8013820 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801381a:	4618      	mov	r0, r3
 801381c:	f000 feb4 	bl	8014588 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013822:	2b00      	cmp	r3, #0
 8013824:	d00e      	beq.n	8013844 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8013826:	6879      	ldr	r1, [r7, #4]
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	3304      	adds	r3, #4
 801382c:	687a      	ldr	r2, [r7, #4]
 801382e:	8b12      	ldrh	r2, [r2, #24]
 8013830:	9202      	str	r2, [sp, #8]
 8013832:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013834:	9201      	str	r2, [sp, #4]
 8013836:	9300      	str	r3, [sp, #0]
 8013838:	460b      	mov	r3, r1
 801383a:	697a      	ldr	r2, [r7, #20]
 801383c:	69b9      	ldr	r1, [r7, #24]
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	f005 fb8c 	bl	8018f5c <tcp_rst>
    }
    last_state = pcb->state;
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	7d1b      	ldrb	r3, [r3, #20]
 8013848:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801384a:	6878      	ldr	r0, [r7, #4]
 801384c:	f7ff fcd8 	bl	8013200 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8013850:	693b      	ldr	r3, [r7, #16]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d004      	beq.n	8013860 <tcp_abandon+0x154>
 8013856:	693b      	ldr	r3, [r7, #16]
 8013858:	f06f 010c 	mvn.w	r1, #12
 801385c:	68f8      	ldr	r0, [r7, #12]
 801385e:	4798      	blx	r3
  }
}
 8013860:	3728      	adds	r7, #40	@ 0x28
 8013862:	46bd      	mov	sp, r7
 8013864:	bd80      	pop	{r7, pc}
 8013866:	bf00      	nop
 8013868:	0801fd1c 	.word	0x0801fd1c
 801386c:	0801fe60 	.word	0x0801fe60
 8013870:	0801fd60 	.word	0x0801fd60
 8013874:	0801fe7c 	.word	0x0801fe7c
 8013878:	2000e46c 	.word	0x2000e46c
 801387c:	2000e460 	.word	0x2000e460
 8013880:	2000e468 	.word	0x2000e468
 8013884:	2000e470 	.word	0x2000e470

08013888 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b082      	sub	sp, #8
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8013890:	2101      	movs	r1, #1
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f7ff ff3a 	bl	801370c <tcp_abandon>
}
 8013898:	bf00      	nop
 801389a:	3708      	adds	r7, #8
 801389c:	46bd      	mov	sp, r7
 801389e:	bd80      	pop	{r7, pc}

080138a0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b088      	sub	sp, #32
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	60f8      	str	r0, [r7, #12]
 80138a8:	60b9      	str	r1, [r7, #8]
 80138aa:	4613      	mov	r3, r2
 80138ac:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80138ae:	2304      	movs	r3, #4
 80138b0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80138b2:	68bb      	ldr	r3, [r7, #8]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d101      	bne.n	80138bc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80138b8:	4b3e      	ldr	r3, [pc, #248]	@ (80139b4 <tcp_bind+0x114>)
 80138ba:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d109      	bne.n	80138d6 <tcp_bind+0x36>
 80138c2:	4b3d      	ldr	r3, [pc, #244]	@ (80139b8 <tcp_bind+0x118>)
 80138c4:	f240 22a9 	movw	r2, #681	@ 0x2a9
 80138c8:	493c      	ldr	r1, [pc, #240]	@ (80139bc <tcp_bind+0x11c>)
 80138ca:	483d      	ldr	r0, [pc, #244]	@ (80139c0 <tcp_bind+0x120>)
 80138cc:	f009 fd7e 	bl	801d3cc <iprintf>
 80138d0:	f06f 030f 	mvn.w	r3, #15
 80138d4:	e06a      	b.n	80139ac <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	7d1b      	ldrb	r3, [r3, #20]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d009      	beq.n	80138f2 <tcp_bind+0x52>
 80138de:	4b36      	ldr	r3, [pc, #216]	@ (80139b8 <tcp_bind+0x118>)
 80138e0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80138e4:	4937      	ldr	r1, [pc, #220]	@ (80139c4 <tcp_bind+0x124>)
 80138e6:	4836      	ldr	r0, [pc, #216]	@ (80139c0 <tcp_bind+0x120>)
 80138e8:	f009 fd70 	bl	801d3cc <iprintf>
 80138ec:	f06f 0305 	mvn.w	r3, #5
 80138f0:	e05c      	b.n	80139ac <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80138f2:	88fb      	ldrh	r3, [r7, #6]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d109      	bne.n	801390c <tcp_bind+0x6c>
    port = tcp_new_port();
 80138f8:	f000 f9de 	bl	8013cb8 <tcp_new_port>
 80138fc:	4603      	mov	r3, r0
 80138fe:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013900:	88fb      	ldrh	r3, [r7, #6]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d135      	bne.n	8013972 <tcp_bind+0xd2>
      return ERR_BUF;
 8013906:	f06f 0301 	mvn.w	r3, #1
 801390a:	e04f      	b.n	80139ac <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801390c:	2300      	movs	r3, #0
 801390e:	61fb      	str	r3, [r7, #28]
 8013910:	e02b      	b.n	801396a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013912:	4a2d      	ldr	r2, [pc, #180]	@ (80139c8 <tcp_bind+0x128>)
 8013914:	69fb      	ldr	r3, [r7, #28]
 8013916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	61bb      	str	r3, [r7, #24]
 801391e:	e01e      	b.n	801395e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8013920:	69bb      	ldr	r3, [r7, #24]
 8013922:	8adb      	ldrh	r3, [r3, #22]
 8013924:	88fa      	ldrh	r2, [r7, #6]
 8013926:	429a      	cmp	r2, r3
 8013928:	d116      	bne.n	8013958 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801392a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801392c:	2b00      	cmp	r3, #0
 801392e:	d010      	beq.n	8013952 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8013930:	69bb      	ldr	r3, [r7, #24]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d00c      	beq.n	8013952 <tcp_bind+0xb2>
 8013938:	68bb      	ldr	r3, [r7, #8]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d009      	beq.n	8013952 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801393e:	68bb      	ldr	r3, [r7, #8]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d005      	beq.n	8013952 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8013946:	69bb      	ldr	r3, [r7, #24]
 8013948:	681a      	ldr	r2, [r3, #0]
 801394a:	68bb      	ldr	r3, [r7, #8]
 801394c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801394e:	429a      	cmp	r2, r3
 8013950:	d102      	bne.n	8013958 <tcp_bind+0xb8>
              return ERR_USE;
 8013952:	f06f 0307 	mvn.w	r3, #7
 8013956:	e029      	b.n	80139ac <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013958:	69bb      	ldr	r3, [r7, #24]
 801395a:	68db      	ldr	r3, [r3, #12]
 801395c:	61bb      	str	r3, [r7, #24]
 801395e:	69bb      	ldr	r3, [r7, #24]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d1dd      	bne.n	8013920 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8013964:	69fb      	ldr	r3, [r7, #28]
 8013966:	3301      	adds	r3, #1
 8013968:	61fb      	str	r3, [r7, #28]
 801396a:	69fa      	ldr	r2, [r7, #28]
 801396c:	697b      	ldr	r3, [r7, #20]
 801396e:	429a      	cmp	r2, r3
 8013970:	dbcf      	blt.n	8013912 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8013972:	68bb      	ldr	r3, [r7, #8]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d00c      	beq.n	8013992 <tcp_bind+0xf2>
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d008      	beq.n	8013992 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d002      	beq.n	801398c <tcp_bind+0xec>
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	e000      	b.n	801398e <tcp_bind+0xee>
 801398c:	2300      	movs	r3, #0
 801398e:	68fa      	ldr	r2, [r7, #12]
 8013990:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	88fa      	ldrh	r2, [r7, #6]
 8013996:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8013998:	4b0c      	ldr	r3, [pc, #48]	@ (80139cc <tcp_bind+0x12c>)
 801399a:	681a      	ldr	r2, [r3, #0]
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	60da      	str	r2, [r3, #12]
 80139a0:	4a0a      	ldr	r2, [pc, #40]	@ (80139cc <tcp_bind+0x12c>)
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	6013      	str	r3, [r2, #0]
 80139a6:	f005 fc9b 	bl	80192e0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80139aa:	2300      	movs	r3, #0
}
 80139ac:	4618      	mov	r0, r3
 80139ae:	3720      	adds	r7, #32
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd80      	pop	{r7, pc}
 80139b4:	080334d4 	.word	0x080334d4
 80139b8:	0801fd1c 	.word	0x0801fd1c
 80139bc:	0801feb0 	.word	0x0801feb0
 80139c0:	0801fd60 	.word	0x0801fd60
 80139c4:	0801fec8 	.word	0x0801fec8
 80139c8:	080334ac 	.word	0x080334ac
 80139cc:	2000e460 	.word	0x2000e460

080139d0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b084      	sub	sp, #16
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	60b9      	str	r1, [r7, #8]
 80139da:	4613      	mov	r3, r2
 80139dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80139de:	68bb      	ldr	r3, [r7, #8]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d106      	bne.n	80139f2 <tcp_accept_null+0x22>
 80139e4:	4b07      	ldr	r3, [pc, #28]	@ (8013a04 <tcp_accept_null+0x34>)
 80139e6:	f240 320f 	movw	r2, #783	@ 0x30f
 80139ea:	4907      	ldr	r1, [pc, #28]	@ (8013a08 <tcp_accept_null+0x38>)
 80139ec:	4807      	ldr	r0, [pc, #28]	@ (8013a0c <tcp_accept_null+0x3c>)
 80139ee:	f009 fced 	bl	801d3cc <iprintf>

  tcp_abort(pcb);
 80139f2:	68b8      	ldr	r0, [r7, #8]
 80139f4:	f7ff ff48 	bl	8013888 <tcp_abort>

  return ERR_ABRT;
 80139f8:	f06f 030c 	mvn.w	r3, #12
}
 80139fc:	4618      	mov	r0, r3
 80139fe:	3710      	adds	r7, #16
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd80      	pop	{r7, pc}
 8013a04:	0801fd1c 	.word	0x0801fd1c
 8013a08:	0801fef0 	.word	0x0801fef0
 8013a0c:	0801fd60 	.word	0x0801fd60

08013a10 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b088      	sub	sp, #32
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	60f8      	str	r0, [r7, #12]
 8013a18:	460b      	mov	r3, r1
 8013a1a:	607a      	str	r2, [r7, #4]
 8013a1c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8013a1e:	2300      	movs	r3, #0
 8013a20:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d109      	bne.n	8013a3c <tcp_listen_with_backlog_and_err+0x2c>
 8013a28:	4b47      	ldr	r3, [pc, #284]	@ (8013b48 <tcp_listen_with_backlog_and_err+0x138>)
 8013a2a:	f240 3259 	movw	r2, #857	@ 0x359
 8013a2e:	4947      	ldr	r1, [pc, #284]	@ (8013b4c <tcp_listen_with_backlog_and_err+0x13c>)
 8013a30:	4847      	ldr	r0, [pc, #284]	@ (8013b50 <tcp_listen_with_backlog_and_err+0x140>)
 8013a32:	f009 fccb 	bl	801d3cc <iprintf>
 8013a36:	23f0      	movs	r3, #240	@ 0xf0
 8013a38:	76fb      	strb	r3, [r7, #27]
 8013a3a:	e079      	b.n	8013b30 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	7d1b      	ldrb	r3, [r3, #20]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d009      	beq.n	8013a58 <tcp_listen_with_backlog_and_err+0x48>
 8013a44:	4b40      	ldr	r3, [pc, #256]	@ (8013b48 <tcp_listen_with_backlog_and_err+0x138>)
 8013a46:	f240 325a 	movw	r2, #858	@ 0x35a
 8013a4a:	4942      	ldr	r1, [pc, #264]	@ (8013b54 <tcp_listen_with_backlog_and_err+0x144>)
 8013a4c:	4840      	ldr	r0, [pc, #256]	@ (8013b50 <tcp_listen_with_backlog_and_err+0x140>)
 8013a4e:	f009 fcbd 	bl	801d3cc <iprintf>
 8013a52:	23f1      	movs	r3, #241	@ 0xf1
 8013a54:	76fb      	strb	r3, [r7, #27]
 8013a56:	e06b      	b.n	8013b30 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	7d1b      	ldrb	r3, [r3, #20]
 8013a5c:	2b01      	cmp	r3, #1
 8013a5e:	d104      	bne.n	8013a6a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8013a64:	23f7      	movs	r3, #247	@ 0xf7
 8013a66:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013a68:	e062      	b.n	8013b30 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8013a6a:	2002      	movs	r0, #2
 8013a6c:	f7fe fa02 	bl	8011e74 <memp_malloc>
 8013a70:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8013a72:	69fb      	ldr	r3, [r7, #28]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d102      	bne.n	8013a7e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8013a78:	23ff      	movs	r3, #255	@ 0xff
 8013a7a:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013a7c:	e058      	b.n	8013b30 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	691a      	ldr	r2, [r3, #16]
 8013a82:	69fb      	ldr	r3, [r7, #28]
 8013a84:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	8ada      	ldrh	r2, [r3, #22]
 8013a8a:	69fb      	ldr	r3, [r7, #28]
 8013a8c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8013a8e:	69fb      	ldr	r3, [r7, #28]
 8013a90:	2201      	movs	r2, #1
 8013a92:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	7d5a      	ldrb	r2, [r3, #21]
 8013a98:	69fb      	ldr	r3, [r7, #28]
 8013a9a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	7a5a      	ldrb	r2, [r3, #9]
 8013aa0:	69fb      	ldr	r3, [r7, #28]
 8013aa2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8013aa4:	69fb      	ldr	r3, [r7, #28]
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	7ada      	ldrb	r2, [r3, #11]
 8013aae:	69fb      	ldr	r3, [r7, #28]
 8013ab0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	7a9a      	ldrb	r2, [r3, #10]
 8013ab6:	69fb      	ldr	r3, [r7, #28]
 8013ab8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	681a      	ldr	r2, [r3, #0]
 8013abe:	69fb      	ldr	r3, [r7, #28]
 8013ac0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	8adb      	ldrh	r3, [r3, #22]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d021      	beq.n	8013b0e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8013aca:	4b23      	ldr	r3, [pc, #140]	@ (8013b58 <tcp_listen_with_backlog_and_err+0x148>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	68fa      	ldr	r2, [r7, #12]
 8013ad0:	429a      	cmp	r2, r3
 8013ad2:	d105      	bne.n	8013ae0 <tcp_listen_with_backlog_and_err+0xd0>
 8013ad4:	4b20      	ldr	r3, [pc, #128]	@ (8013b58 <tcp_listen_with_backlog_and_err+0x148>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	68db      	ldr	r3, [r3, #12]
 8013ada:	4a1f      	ldr	r2, [pc, #124]	@ (8013b58 <tcp_listen_with_backlog_and_err+0x148>)
 8013adc:	6013      	str	r3, [r2, #0]
 8013ade:	e013      	b.n	8013b08 <tcp_listen_with_backlog_and_err+0xf8>
 8013ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8013b58 <tcp_listen_with_backlog_and_err+0x148>)
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	617b      	str	r3, [r7, #20]
 8013ae6:	e00c      	b.n	8013b02 <tcp_listen_with_backlog_and_err+0xf2>
 8013ae8:	697b      	ldr	r3, [r7, #20]
 8013aea:	68db      	ldr	r3, [r3, #12]
 8013aec:	68fa      	ldr	r2, [r7, #12]
 8013aee:	429a      	cmp	r2, r3
 8013af0:	d104      	bne.n	8013afc <tcp_listen_with_backlog_and_err+0xec>
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	68da      	ldr	r2, [r3, #12]
 8013af6:	697b      	ldr	r3, [r7, #20]
 8013af8:	60da      	str	r2, [r3, #12]
 8013afa:	e005      	b.n	8013b08 <tcp_listen_with_backlog_and_err+0xf8>
 8013afc:	697b      	ldr	r3, [r7, #20]
 8013afe:	68db      	ldr	r3, [r3, #12]
 8013b00:	617b      	str	r3, [r7, #20]
 8013b02:	697b      	ldr	r3, [r7, #20]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d1ef      	bne.n	8013ae8 <tcp_listen_with_backlog_and_err+0xd8>
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8013b0e:	68f8      	ldr	r0, [r7, #12]
 8013b10:	f7ff fb76 	bl	8013200 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8013b14:	69fb      	ldr	r3, [r7, #28]
 8013b16:	4a11      	ldr	r2, [pc, #68]	@ (8013b5c <tcp_listen_with_backlog_and_err+0x14c>)
 8013b18:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8013b1a:	4b11      	ldr	r3, [pc, #68]	@ (8013b60 <tcp_listen_with_backlog_and_err+0x150>)
 8013b1c:	681a      	ldr	r2, [r3, #0]
 8013b1e:	69fb      	ldr	r3, [r7, #28]
 8013b20:	60da      	str	r2, [r3, #12]
 8013b22:	4a0f      	ldr	r2, [pc, #60]	@ (8013b60 <tcp_listen_with_backlog_and_err+0x150>)
 8013b24:	69fb      	ldr	r3, [r7, #28]
 8013b26:	6013      	str	r3, [r2, #0]
 8013b28:	f005 fbda 	bl	80192e0 <tcp_timer_needed>
  res = ERR_OK;
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d002      	beq.n	8013b3c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	7efa      	ldrb	r2, [r7, #27]
 8013b3a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8013b3c:	69fb      	ldr	r3, [r7, #28]
}
 8013b3e:	4618      	mov	r0, r3
 8013b40:	3720      	adds	r7, #32
 8013b42:	46bd      	mov	sp, r7
 8013b44:	bd80      	pop	{r7, pc}
 8013b46:	bf00      	nop
 8013b48:	0801fd1c 	.word	0x0801fd1c
 8013b4c:	0801ff10 	.word	0x0801ff10
 8013b50:	0801fd60 	.word	0x0801fd60
 8013b54:	0801ff40 	.word	0x0801ff40
 8013b58:	2000e460 	.word	0x2000e460
 8013b5c:	080139d1 	.word	0x080139d1
 8013b60:	2000e464 	.word	0x2000e464

08013b64 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b084      	sub	sp, #16
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d106      	bne.n	8013b80 <tcp_update_rcv_ann_wnd+0x1c>
 8013b72:	4b25      	ldr	r3, [pc, #148]	@ (8013c08 <tcp_update_rcv_ann_wnd+0xa4>)
 8013b74:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8013b78:	4924      	ldr	r1, [pc, #144]	@ (8013c0c <tcp_update_rcv_ann_wnd+0xa8>)
 8013b7a:	4825      	ldr	r0, [pc, #148]	@ (8013c10 <tcp_update_rcv_ann_wnd+0xac>)
 8013b7c:	f009 fc26 	bl	801d3cc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b84:	687a      	ldr	r2, [r7, #4]
 8013b86:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8013b88:	4413      	add	r3, r2
 8013b8a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b90:	687a      	ldr	r2, [r7, #4]
 8013b92:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8013b94:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8013b98:	bf28      	it	cs
 8013b9a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8013b9e:	b292      	uxth	r2, r2
 8013ba0:	4413      	add	r3, r2
 8013ba2:	68fa      	ldr	r2, [r7, #12]
 8013ba4:	1ad3      	subs	r3, r2, r3
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	db08      	blt.n	8013bbc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bb6:	68fa      	ldr	r2, [r7, #12]
 8013bb8:	1ad3      	subs	r3, r2, r3
 8013bba:	e020      	b.n	8013bfe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bc4:	1ad3      	subs	r3, r2, r3
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	dd03      	ble.n	8013bd2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2200      	movs	r2, #0
 8013bce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013bd0:	e014      	b.n	8013bfc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bda:	1ad3      	subs	r3, r2, r3
 8013bdc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8013bde:	68bb      	ldr	r3, [r7, #8]
 8013be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013be4:	d306      	bcc.n	8013bf4 <tcp_update_rcv_ann_wnd+0x90>
 8013be6:	4b08      	ldr	r3, [pc, #32]	@ (8013c08 <tcp_update_rcv_ann_wnd+0xa4>)
 8013be8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8013bec:	4909      	ldr	r1, [pc, #36]	@ (8013c14 <tcp_update_rcv_ann_wnd+0xb0>)
 8013bee:	4808      	ldr	r0, [pc, #32]	@ (8013c10 <tcp_update_rcv_ann_wnd+0xac>)
 8013bf0:	f009 fbec 	bl	801d3cc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013bf4:	68bb      	ldr	r3, [r7, #8]
 8013bf6:	b29a      	uxth	r2, r3
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8013bfc:	2300      	movs	r3, #0
  }
}
 8013bfe:	4618      	mov	r0, r3
 8013c00:	3710      	adds	r7, #16
 8013c02:	46bd      	mov	sp, r7
 8013c04:	bd80      	pop	{r7, pc}
 8013c06:	bf00      	nop
 8013c08:	0801fd1c 	.word	0x0801fd1c
 8013c0c:	0801ff78 	.word	0x0801ff78
 8013c10:	0801fd60 	.word	0x0801fd60
 8013c14:	0801ff9c 	.word	0x0801ff9c

08013c18 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b084      	sub	sp, #16
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
 8013c20:	460b      	mov	r3, r1
 8013c22:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d107      	bne.n	8013c3a <tcp_recved+0x22>
 8013c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8013ca8 <tcp_recved+0x90>)
 8013c2c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8013c30:	491e      	ldr	r1, [pc, #120]	@ (8013cac <tcp_recved+0x94>)
 8013c32:	481f      	ldr	r0, [pc, #124]	@ (8013cb0 <tcp_recved+0x98>)
 8013c34:	f009 fbca 	bl	801d3cc <iprintf>
 8013c38:	e032      	b.n	8013ca0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	7d1b      	ldrb	r3, [r3, #20]
 8013c3e:	2b01      	cmp	r3, #1
 8013c40:	d106      	bne.n	8013c50 <tcp_recved+0x38>
 8013c42:	4b19      	ldr	r3, [pc, #100]	@ (8013ca8 <tcp_recved+0x90>)
 8013c44:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8013c48:	491a      	ldr	r1, [pc, #104]	@ (8013cb4 <tcp_recved+0x9c>)
 8013c4a:	4819      	ldr	r0, [pc, #100]	@ (8013cb0 <tcp_recved+0x98>)
 8013c4c:	f009 fbbe 	bl	801d3cc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013c54:	887b      	ldrh	r3, [r7, #2]
 8013c56:	4413      	add	r3, r2
 8013c58:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8013c5a:	89fb      	ldrh	r3, [r7, #14]
 8013c5c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013c60:	d804      	bhi.n	8013c6c <tcp_recved+0x54>
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c66:	89fa      	ldrh	r2, [r7, #14]
 8013c68:	429a      	cmp	r2, r3
 8013c6a:	d204      	bcs.n	8013c76 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8013c72:	851a      	strh	r2, [r3, #40]	@ 0x28
 8013c74:	e002      	b.n	8013c7c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	89fa      	ldrh	r2, [r7, #14]
 8013c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f7ff ff71 	bl	8013b64 <tcp_update_rcv_ann_wnd>
 8013c82:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013c84:	68bb      	ldr	r3, [r7, #8]
 8013c86:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8013c8a:	d309      	bcc.n	8013ca0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	8b5b      	ldrh	r3, [r3, #26]
 8013c90:	f043 0302 	orr.w	r3, r3, #2
 8013c94:	b29a      	uxth	r2, r3
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f004 fbaa 	bl	80183f4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8013ca0:	3710      	adds	r7, #16
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bd80      	pop	{r7, pc}
 8013ca6:	bf00      	nop
 8013ca8:	0801fd1c 	.word	0x0801fd1c
 8013cac:	0801ffb8 	.word	0x0801ffb8
 8013cb0:	0801fd60 	.word	0x0801fd60
 8013cb4:	0801ffd0 	.word	0x0801ffd0

08013cb8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8013cb8:	b480      	push	{r7}
 8013cba:	b083      	sub	sp, #12
 8013cbc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8013cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8013d3c <tcp_new_port+0x84>)
 8013cc4:	881b      	ldrh	r3, [r3, #0]
 8013cc6:	3301      	adds	r3, #1
 8013cc8:	b29a      	uxth	r2, r3
 8013cca:	4b1c      	ldr	r3, [pc, #112]	@ (8013d3c <tcp_new_port+0x84>)
 8013ccc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8013cce:	4b1b      	ldr	r3, [pc, #108]	@ (8013d3c <tcp_new_port+0x84>)
 8013cd0:	881b      	ldrh	r3, [r3, #0]
 8013cd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013cd6:	4293      	cmp	r3, r2
 8013cd8:	d103      	bne.n	8013ce2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8013cda:	4b18      	ldr	r3, [pc, #96]	@ (8013d3c <tcp_new_port+0x84>)
 8013cdc:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013ce0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	71fb      	strb	r3, [r7, #7]
 8013ce6:	e01e      	b.n	8013d26 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013ce8:	79fb      	ldrb	r3, [r7, #7]
 8013cea:	4a15      	ldr	r2, [pc, #84]	@ (8013d40 <tcp_new_port+0x88>)
 8013cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	603b      	str	r3, [r7, #0]
 8013cf4:	e011      	b.n	8013d1a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	8ada      	ldrh	r2, [r3, #22]
 8013cfa:	4b10      	ldr	r3, [pc, #64]	@ (8013d3c <tcp_new_port+0x84>)
 8013cfc:	881b      	ldrh	r3, [r3, #0]
 8013cfe:	429a      	cmp	r2, r3
 8013d00:	d108      	bne.n	8013d14 <tcp_new_port+0x5c>
        n++;
 8013d02:	88bb      	ldrh	r3, [r7, #4]
 8013d04:	3301      	adds	r3, #1
 8013d06:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8013d08:	88bb      	ldrh	r3, [r7, #4]
 8013d0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013d0e:	d3d8      	bcc.n	8013cc2 <tcp_new_port+0xa>
          return 0;
 8013d10:	2300      	movs	r3, #0
 8013d12:	e00d      	b.n	8013d30 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013d14:	683b      	ldr	r3, [r7, #0]
 8013d16:	68db      	ldr	r3, [r3, #12]
 8013d18:	603b      	str	r3, [r7, #0]
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d1ea      	bne.n	8013cf6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013d20:	79fb      	ldrb	r3, [r7, #7]
 8013d22:	3301      	adds	r3, #1
 8013d24:	71fb      	strb	r3, [r7, #7]
 8013d26:	79fb      	ldrb	r3, [r7, #7]
 8013d28:	2b03      	cmp	r3, #3
 8013d2a:	d9dd      	bls.n	8013ce8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8013d2c:	4b03      	ldr	r3, [pc, #12]	@ (8013d3c <tcp_new_port+0x84>)
 8013d2e:	881b      	ldrh	r3, [r3, #0]
}
 8013d30:	4618      	mov	r0, r3
 8013d32:	370c      	adds	r7, #12
 8013d34:	46bd      	mov	sp, r7
 8013d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3a:	4770      	bx	lr
 8013d3c:	200000b0 	.word	0x200000b0
 8013d40:	080334ac 	.word	0x080334ac

08013d44 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8013d44:	b5b0      	push	{r4, r5, r7, lr}
 8013d46:	b090      	sub	sp, #64	@ 0x40
 8013d48:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8013d50:	4b95      	ldr	r3, [pc, #596]	@ (8013fa8 <tcp_slowtmr+0x264>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	3301      	adds	r3, #1
 8013d56:	4a94      	ldr	r2, [pc, #592]	@ (8013fa8 <tcp_slowtmr+0x264>)
 8013d58:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8013d5a:	4b94      	ldr	r3, [pc, #592]	@ (8013fac <tcp_slowtmr+0x268>)
 8013d5c:	781b      	ldrb	r3, [r3, #0]
 8013d5e:	3301      	adds	r3, #1
 8013d60:	b2da      	uxtb	r2, r3
 8013d62:	4b92      	ldr	r3, [pc, #584]	@ (8013fac <tcp_slowtmr+0x268>)
 8013d64:	701a      	strb	r2, [r3, #0]
 8013d66:	e000      	b.n	8013d6a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8013d68:	bf00      	nop
  prev = NULL;
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8013d6e:	4b90      	ldr	r3, [pc, #576]	@ (8013fb0 <tcp_slowtmr+0x26c>)
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013d74:	e29d      	b.n	80142b2 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d78:	7d1b      	ldrb	r3, [r3, #20]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d106      	bne.n	8013d8c <tcp_slowtmr+0x48>
 8013d7e:	4b8d      	ldr	r3, [pc, #564]	@ (8013fb4 <tcp_slowtmr+0x270>)
 8013d80:	f240 42be 	movw	r2, #1214	@ 0x4be
 8013d84:	498c      	ldr	r1, [pc, #560]	@ (8013fb8 <tcp_slowtmr+0x274>)
 8013d86:	488d      	ldr	r0, [pc, #564]	@ (8013fbc <tcp_slowtmr+0x278>)
 8013d88:	f009 fb20 	bl	801d3cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d8e:	7d1b      	ldrb	r3, [r3, #20]
 8013d90:	2b01      	cmp	r3, #1
 8013d92:	d106      	bne.n	8013da2 <tcp_slowtmr+0x5e>
 8013d94:	4b87      	ldr	r3, [pc, #540]	@ (8013fb4 <tcp_slowtmr+0x270>)
 8013d96:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8013d9a:	4989      	ldr	r1, [pc, #548]	@ (8013fc0 <tcp_slowtmr+0x27c>)
 8013d9c:	4887      	ldr	r0, [pc, #540]	@ (8013fbc <tcp_slowtmr+0x278>)
 8013d9e:	f009 fb15 	bl	801d3cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8013da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013da4:	7d1b      	ldrb	r3, [r3, #20]
 8013da6:	2b0a      	cmp	r3, #10
 8013da8:	d106      	bne.n	8013db8 <tcp_slowtmr+0x74>
 8013daa:	4b82      	ldr	r3, [pc, #520]	@ (8013fb4 <tcp_slowtmr+0x270>)
 8013dac:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8013db0:	4984      	ldr	r1, [pc, #528]	@ (8013fc4 <tcp_slowtmr+0x280>)
 8013db2:	4882      	ldr	r0, [pc, #520]	@ (8013fbc <tcp_slowtmr+0x278>)
 8013db4:	f009 fb0a 	bl	801d3cc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dba:	7f9a      	ldrb	r2, [r3, #30]
 8013dbc:	4b7b      	ldr	r3, [pc, #492]	@ (8013fac <tcp_slowtmr+0x268>)
 8013dbe:	781b      	ldrb	r3, [r3, #0]
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d105      	bne.n	8013dd0 <tcp_slowtmr+0x8c>
      prev = pcb;
 8013dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dca:	68db      	ldr	r3, [r3, #12]
 8013dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8013dce:	e270      	b.n	80142b2 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8013dd0:	4b76      	ldr	r3, [pc, #472]	@ (8013fac <tcp_slowtmr+0x268>)
 8013dd2:	781a      	ldrb	r2, [r3, #0]
 8013dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dd6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8013dd8:	2300      	movs	r3, #0
 8013dda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8013dde:	2300      	movs	r3, #0
 8013de0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8013de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013de6:	7d1b      	ldrb	r3, [r3, #20]
 8013de8:	2b02      	cmp	r3, #2
 8013dea:	d10a      	bne.n	8013e02 <tcp_slowtmr+0xbe>
 8013dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013df2:	2b05      	cmp	r3, #5
 8013df4:	d905      	bls.n	8013e02 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8013df6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013dfa:	3301      	adds	r3, #1
 8013dfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013e00:	e11e      	b.n	8014040 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8013e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013e08:	2b0b      	cmp	r3, #11
 8013e0a:	d905      	bls.n	8013e18 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8013e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013e10:	3301      	adds	r3, #1
 8013e12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013e16:	e113      	b.n	8014040 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8013e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e1a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d075      	beq.n	8013f0e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8013e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d006      	beq.n	8013e38 <tcp_slowtmr+0xf4>
 8013e2a:	4b62      	ldr	r3, [pc, #392]	@ (8013fb4 <tcp_slowtmr+0x270>)
 8013e2c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8013e30:	4965      	ldr	r1, [pc, #404]	@ (8013fc8 <tcp_slowtmr+0x284>)
 8013e32:	4862      	ldr	r0, [pc, #392]	@ (8013fbc <tcp_slowtmr+0x278>)
 8013e34:	f009 faca 	bl	801d3cc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d106      	bne.n	8013e4e <tcp_slowtmr+0x10a>
 8013e40:	4b5c      	ldr	r3, [pc, #368]	@ (8013fb4 <tcp_slowtmr+0x270>)
 8013e42:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8013e46:	4961      	ldr	r1, [pc, #388]	@ (8013fcc <tcp_slowtmr+0x288>)
 8013e48:	485c      	ldr	r0, [pc, #368]	@ (8013fbc <tcp_slowtmr+0x278>)
 8013e4a:	f009 fabf 	bl	801d3cc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8013e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e50:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013e54:	2b0b      	cmp	r3, #11
 8013e56:	d905      	bls.n	8013e64 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8013e58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013e5c:	3301      	adds	r3, #1
 8013e5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013e62:	e0ed      	b.n	8014040 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e66:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013e6a:	3b01      	subs	r3, #1
 8013e6c:	4a58      	ldr	r2, [pc, #352]	@ (8013fd0 <tcp_slowtmr+0x28c>)
 8013e6e:	5cd3      	ldrb	r3, [r2, r3]
 8013e70:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8013e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e74:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013e78:	7c7a      	ldrb	r2, [r7, #17]
 8013e7a:	429a      	cmp	r2, r3
 8013e7c:	d907      	bls.n	8013e8e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8013e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e80:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013e84:	3301      	adds	r3, #1
 8013e86:	b2da      	uxtb	r2, r3
 8013e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e8a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8013e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e90:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013e94:	7c7a      	ldrb	r2, [r7, #17]
 8013e96:	429a      	cmp	r2, r3
 8013e98:	f200 80d2 	bhi.w	8014040 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8013ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ea2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d108      	bne.n	8013ebc <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013eaa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013eac:	f005 f94a 	bl	8019144 <tcp_zero_window_probe>
 8013eb0:	4603      	mov	r3, r0
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d014      	beq.n	8013ee0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	623b      	str	r3, [r7, #32]
 8013eba:	e011      	b.n	8013ee0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ebe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013ec2:	4619      	mov	r1, r3
 8013ec4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013ec6:	f004 f80f 	bl	8017ee8 <tcp_split_unsent_seg>
 8013eca:	4603      	mov	r3, r0
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d107      	bne.n	8013ee0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8013ed0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013ed2:	f004 fa8f 	bl	80183f4 <tcp_output>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d101      	bne.n	8013ee0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8013edc:	2300      	movs	r3, #0
 8013ede:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8013ee0:	6a3b      	ldr	r3, [r7, #32]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	f000 80ac 	beq.w	8014040 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8013ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013eea:	2200      	movs	r2, #0
 8013eec:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8013ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ef2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013ef6:	2b06      	cmp	r3, #6
 8013ef8:	f200 80a2 	bhi.w	8014040 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8013efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013efe:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013f02:	3301      	adds	r3, #1
 8013f04:	b2da      	uxtb	r2, r3
 8013f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f08:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8013f0c:	e098      	b.n	8014040 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8013f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f10:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	db0f      	blt.n	8013f38 <tcp_slowtmr+0x1f4>
 8013f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f1a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013f1e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013f22:	4293      	cmp	r3, r2
 8013f24:	d008      	beq.n	8013f38 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8013f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	3301      	adds	r3, #1
 8013f30:	b29b      	uxth	r3, r3
 8013f32:	b21a      	sxth	r2, r3
 8013f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f36:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8013f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f3a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8013f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f40:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8013f44:	429a      	cmp	r2, r3
 8013f46:	db7b      	blt.n	8014040 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8013f48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013f4a:	f004 fd47 	bl	80189dc <tcp_rexmit_rto_prepare>
 8013f4e:	4603      	mov	r3, r0
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d007      	beq.n	8013f64 <tcp_slowtmr+0x220>
 8013f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d171      	bne.n	8014040 <tcp_slowtmr+0x2fc>
 8013f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d06d      	beq.n	8014040 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8013f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f66:	7d1b      	ldrb	r3, [r3, #20]
 8013f68:	2b02      	cmp	r3, #2
 8013f6a:	d03a      	beq.n	8013fe2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8013f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013f72:	2b0c      	cmp	r3, #12
 8013f74:	bf28      	it	cs
 8013f76:	230c      	movcs	r3, #12
 8013f78:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8013f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013f80:	10db      	asrs	r3, r3, #3
 8013f82:	b21b      	sxth	r3, r3
 8013f84:	461a      	mov	r2, r3
 8013f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f88:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013f8c:	4413      	add	r3, r2
 8013f8e:	7efa      	ldrb	r2, [r7, #27]
 8013f90:	4910      	ldr	r1, [pc, #64]	@ (8013fd4 <tcp_slowtmr+0x290>)
 8013f92:	5c8a      	ldrb	r2, [r1, r2]
 8013f94:	4093      	lsls	r3, r2
 8013f96:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013f98:	697b      	ldr	r3, [r7, #20]
 8013f9a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8013f9e:	4293      	cmp	r3, r2
 8013fa0:	dc1a      	bgt.n	8013fd8 <tcp_slowtmr+0x294>
 8013fa2:	697b      	ldr	r3, [r7, #20]
 8013fa4:	b21a      	sxth	r2, r3
 8013fa6:	e019      	b.n	8013fdc <tcp_slowtmr+0x298>
 8013fa8:	2000e45c 	.word	0x2000e45c
 8013fac:	2000e472 	.word	0x2000e472
 8013fb0:	2000e468 	.word	0x2000e468
 8013fb4:	0801fd1c 	.word	0x0801fd1c
 8013fb8:	08020060 	.word	0x08020060
 8013fbc:	0801fd60 	.word	0x0801fd60
 8013fc0:	0802008c 	.word	0x0802008c
 8013fc4:	080200b8 	.word	0x080200b8
 8013fc8:	080200e8 	.word	0x080200e8
 8013fcc:	0802011c 	.word	0x0802011c
 8013fd0:	080334a4 	.word	0x080334a4
 8013fd4:	08033494 	.word	0x08033494
 8013fd8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fde:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8013fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ff0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013ff4:	4293      	cmp	r3, r2
 8013ff6:	bf28      	it	cs
 8013ff8:	4613      	movcs	r3, r2
 8013ffa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013ffc:	8a7b      	ldrh	r3, [r7, #18]
 8013ffe:	085b      	lsrs	r3, r3, #1
 8014000:	b29a      	uxth	r2, r3
 8014002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014004:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8014008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801400a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801400e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014010:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014012:	005b      	lsls	r3, r3, #1
 8014014:	b29b      	uxth	r3, r3
 8014016:	429a      	cmp	r2, r3
 8014018:	d206      	bcs.n	8014028 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801401a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801401c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801401e:	005b      	lsls	r3, r3, #1
 8014020:	b29a      	uxth	r2, r3
 8014022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014024:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8014028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801402a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801402c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801402e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8014032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014034:	2200      	movs	r2, #0
 8014036:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801403a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801403c:	f004 fd3e 	bl	8018abc <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8014040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014042:	7d1b      	ldrb	r3, [r3, #20]
 8014044:	2b06      	cmp	r3, #6
 8014046:	d111      	bne.n	801406c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8014048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801404a:	8b5b      	ldrh	r3, [r3, #26]
 801404c:	f003 0310 	and.w	r3, r3, #16
 8014050:	2b00      	cmp	r3, #0
 8014052:	d00b      	beq.n	801406c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014054:	4b9c      	ldr	r3, [pc, #624]	@ (80142c8 <tcp_slowtmr+0x584>)
 8014056:	681a      	ldr	r2, [r3, #0]
 8014058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801405a:	6a1b      	ldr	r3, [r3, #32]
 801405c:	1ad3      	subs	r3, r2, r3
 801405e:	2b28      	cmp	r3, #40	@ 0x28
 8014060:	d904      	bls.n	801406c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8014062:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014066:	3301      	adds	r3, #1
 8014068:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801406c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801406e:	7a5b      	ldrb	r3, [r3, #9]
 8014070:	f003 0308 	and.w	r3, r3, #8
 8014074:	2b00      	cmp	r3, #0
 8014076:	d04a      	beq.n	801410e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8014078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801407a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801407c:	2b04      	cmp	r3, #4
 801407e:	d003      	beq.n	8014088 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8014080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014082:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8014084:	2b07      	cmp	r3, #7
 8014086:	d142      	bne.n	801410e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014088:	4b8f      	ldr	r3, [pc, #572]	@ (80142c8 <tcp_slowtmr+0x584>)
 801408a:	681a      	ldr	r2, [r3, #0]
 801408c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801408e:	6a1b      	ldr	r3, [r3, #32]
 8014090:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8014092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014094:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8014098:	4b8c      	ldr	r3, [pc, #560]	@ (80142cc <tcp_slowtmr+0x588>)
 801409a:	440b      	add	r3, r1
 801409c:	498c      	ldr	r1, [pc, #560]	@ (80142d0 <tcp_slowtmr+0x58c>)
 801409e:	fba1 1303 	umull	r1, r3, r1, r3
 80140a2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80140a4:	429a      	cmp	r2, r3
 80140a6:	d90a      	bls.n	80140be <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80140a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80140ac:	3301      	adds	r3, #1
 80140ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80140b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80140b6:	3301      	adds	r3, #1
 80140b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80140bc:	e027      	b.n	801410e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80140be:	4b82      	ldr	r3, [pc, #520]	@ (80142c8 <tcp_slowtmr+0x584>)
 80140c0:	681a      	ldr	r2, [r3, #0]
 80140c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140c4:	6a1b      	ldr	r3, [r3, #32]
 80140c6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80140c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140ca:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80140ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140d0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80140d4:	4618      	mov	r0, r3
 80140d6:	4b7f      	ldr	r3, [pc, #508]	@ (80142d4 <tcp_slowtmr+0x590>)
 80140d8:	fb00 f303 	mul.w	r3, r0, r3
 80140dc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80140de:	497c      	ldr	r1, [pc, #496]	@ (80142d0 <tcp_slowtmr+0x58c>)
 80140e0:	fba1 1303 	umull	r1, r3, r1, r3
 80140e4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80140e6:	429a      	cmp	r2, r3
 80140e8:	d911      	bls.n	801410e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80140ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80140ec:	f004 ffea 	bl	80190c4 <tcp_keepalive>
 80140f0:	4603      	mov	r3, r0
 80140f2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80140f6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d107      	bne.n	801410e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80140fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014100:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8014104:	3301      	adds	r3, #1
 8014106:	b2da      	uxtb	r2, r3
 8014108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801410a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801410e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014112:	2b00      	cmp	r3, #0
 8014114:	d011      	beq.n	801413a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8014116:	4b6c      	ldr	r3, [pc, #432]	@ (80142c8 <tcp_slowtmr+0x584>)
 8014118:	681a      	ldr	r2, [r3, #0]
 801411a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801411c:	6a1b      	ldr	r3, [r3, #32]
 801411e:	1ad2      	subs	r2, r2, r3
 8014120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014122:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8014126:	4619      	mov	r1, r3
 8014128:	460b      	mov	r3, r1
 801412a:	005b      	lsls	r3, r3, #1
 801412c:	440b      	add	r3, r1
 801412e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8014130:	429a      	cmp	r2, r3
 8014132:	d302      	bcc.n	801413a <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8014134:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014136:	f000 feab 	bl	8014e90 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801413a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801413c:	7d1b      	ldrb	r3, [r3, #20]
 801413e:	2b03      	cmp	r3, #3
 8014140:	d10b      	bne.n	801415a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014142:	4b61      	ldr	r3, [pc, #388]	@ (80142c8 <tcp_slowtmr+0x584>)
 8014144:	681a      	ldr	r2, [r3, #0]
 8014146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014148:	6a1b      	ldr	r3, [r3, #32]
 801414a:	1ad3      	subs	r3, r2, r3
 801414c:	2b28      	cmp	r3, #40	@ 0x28
 801414e:	d904      	bls.n	801415a <tcp_slowtmr+0x416>
        ++pcb_remove;
 8014150:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014154:	3301      	adds	r3, #1
 8014156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 801415a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801415c:	7d1b      	ldrb	r3, [r3, #20]
 801415e:	2b09      	cmp	r3, #9
 8014160:	d10b      	bne.n	801417a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014162:	4b59      	ldr	r3, [pc, #356]	@ (80142c8 <tcp_slowtmr+0x584>)
 8014164:	681a      	ldr	r2, [r3, #0]
 8014166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014168:	6a1b      	ldr	r3, [r3, #32]
 801416a:	1ad3      	subs	r3, r2, r3
 801416c:	2bf0      	cmp	r3, #240	@ 0xf0
 801416e:	d904      	bls.n	801417a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8014170:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014174:	3301      	adds	r3, #1
 8014176:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801417a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801417e:	2b00      	cmp	r3, #0
 8014180:	d060      	beq.n	8014244 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8014182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014188:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801418a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801418c:	f000 fccc 	bl	8014b28 <tcp_pcb_purge>
      if (prev != NULL) {
 8014190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014192:	2b00      	cmp	r3, #0
 8014194:	d010      	beq.n	80141b8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8014196:	4b50      	ldr	r3, [pc, #320]	@ (80142d8 <tcp_slowtmr+0x594>)
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801419c:	429a      	cmp	r2, r3
 801419e:	d106      	bne.n	80141ae <tcp_slowtmr+0x46a>
 80141a0:	4b4e      	ldr	r3, [pc, #312]	@ (80142dc <tcp_slowtmr+0x598>)
 80141a2:	f240 526d 	movw	r2, #1389	@ 0x56d
 80141a6:	494e      	ldr	r1, [pc, #312]	@ (80142e0 <tcp_slowtmr+0x59c>)
 80141a8:	484e      	ldr	r0, [pc, #312]	@ (80142e4 <tcp_slowtmr+0x5a0>)
 80141aa:	f009 f90f 	bl	801d3cc <iprintf>
        prev->next = pcb->next;
 80141ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141b0:	68da      	ldr	r2, [r3, #12]
 80141b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141b4:	60da      	str	r2, [r3, #12]
 80141b6:	e00f      	b.n	80141d8 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80141b8:	4b47      	ldr	r3, [pc, #284]	@ (80142d8 <tcp_slowtmr+0x594>)
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80141be:	429a      	cmp	r2, r3
 80141c0:	d006      	beq.n	80141d0 <tcp_slowtmr+0x48c>
 80141c2:	4b46      	ldr	r3, [pc, #280]	@ (80142dc <tcp_slowtmr+0x598>)
 80141c4:	f240 5271 	movw	r2, #1393	@ 0x571
 80141c8:	4947      	ldr	r1, [pc, #284]	@ (80142e8 <tcp_slowtmr+0x5a4>)
 80141ca:	4846      	ldr	r0, [pc, #280]	@ (80142e4 <tcp_slowtmr+0x5a0>)
 80141cc:	f009 f8fe 	bl	801d3cc <iprintf>
        tcp_active_pcbs = pcb->next;
 80141d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141d2:	68db      	ldr	r3, [r3, #12]
 80141d4:	4a40      	ldr	r2, [pc, #256]	@ (80142d8 <tcp_slowtmr+0x594>)
 80141d6:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80141d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d013      	beq.n	8014208 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80141e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141e2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80141e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141e6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80141e8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80141ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141ec:	3304      	adds	r3, #4
 80141ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80141f0:	8ad2      	ldrh	r2, [r2, #22]
 80141f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80141f4:	8b09      	ldrh	r1, [r1, #24]
 80141f6:	9102      	str	r1, [sp, #8]
 80141f8:	9201      	str	r2, [sp, #4]
 80141fa:	9300      	str	r3, [sp, #0]
 80141fc:	462b      	mov	r3, r5
 80141fe:	4622      	mov	r2, r4
 8014200:	4601      	mov	r1, r0
 8014202:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014204:	f004 feaa 	bl	8018f5c <tcp_rst>
      err_arg = pcb->callback_arg;
 8014208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801420a:	691b      	ldr	r3, [r3, #16]
 801420c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801420e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014210:	7d1b      	ldrb	r3, [r3, #20]
 8014212:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8014214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014216:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8014218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801421a:	68db      	ldr	r3, [r3, #12]
 801421c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801421e:	6838      	ldr	r0, [r7, #0]
 8014220:	f7fe ffee 	bl	8013200 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8014224:	4b31      	ldr	r3, [pc, #196]	@ (80142ec <tcp_slowtmr+0x5a8>)
 8014226:	2200      	movs	r2, #0
 8014228:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d004      	beq.n	801423a <tcp_slowtmr+0x4f6>
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	f06f 010c 	mvn.w	r1, #12
 8014236:	68b8      	ldr	r0, [r7, #8]
 8014238:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801423a:	4b2c      	ldr	r3, [pc, #176]	@ (80142ec <tcp_slowtmr+0x5a8>)
 801423c:	781b      	ldrb	r3, [r3, #0]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d037      	beq.n	80142b2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8014242:	e592      	b.n	8013d6a <tcp_slowtmr+0x26>
      prev = pcb;
 8014244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014246:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8014248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801424a:	68db      	ldr	r3, [r3, #12]
 801424c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801424e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014250:	7f1b      	ldrb	r3, [r3, #28]
 8014252:	3301      	adds	r3, #1
 8014254:	b2da      	uxtb	r2, r3
 8014256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014258:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801425a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801425c:	7f1a      	ldrb	r2, [r3, #28]
 801425e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014260:	7f5b      	ldrb	r3, [r3, #29]
 8014262:	429a      	cmp	r2, r3
 8014264:	d325      	bcc.n	80142b2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8014266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014268:	2200      	movs	r2, #0
 801426a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 801426c:	4b1f      	ldr	r3, [pc, #124]	@ (80142ec <tcp_slowtmr+0x5a8>)
 801426e:	2200      	movs	r2, #0
 8014270:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8014272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014274:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014278:	2b00      	cmp	r3, #0
 801427a:	d00b      	beq.n	8014294 <tcp_slowtmr+0x550>
 801427c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801427e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014282:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014284:	6912      	ldr	r2, [r2, #16]
 8014286:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014288:	4610      	mov	r0, r2
 801428a:	4798      	blx	r3
 801428c:	4603      	mov	r3, r0
 801428e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8014292:	e002      	b.n	801429a <tcp_slowtmr+0x556>
 8014294:	2300      	movs	r3, #0
 8014296:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801429a:	4b14      	ldr	r3, [pc, #80]	@ (80142ec <tcp_slowtmr+0x5a8>)
 801429c:	781b      	ldrb	r3, [r3, #0]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	f47f ad62 	bne.w	8013d68 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80142a4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d102      	bne.n	80142b2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80142ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80142ae:	f004 f8a1 	bl	80183f4 <tcp_output>
  while (pcb != NULL) {
 80142b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	f47f ad5e 	bne.w	8013d76 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80142ba:	2300      	movs	r3, #0
 80142bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80142be:	4b0c      	ldr	r3, [pc, #48]	@ (80142f0 <tcp_slowtmr+0x5ac>)
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80142c4:	e069      	b.n	801439a <tcp_slowtmr+0x656>
 80142c6:	bf00      	nop
 80142c8:	2000e45c 	.word	0x2000e45c
 80142cc:	000a4cb8 	.word	0x000a4cb8
 80142d0:	10624dd3 	.word	0x10624dd3
 80142d4:	000124f8 	.word	0x000124f8
 80142d8:	2000e468 	.word	0x2000e468
 80142dc:	0801fd1c 	.word	0x0801fd1c
 80142e0:	08020154 	.word	0x08020154
 80142e4:	0801fd60 	.word	0x0801fd60
 80142e8:	08020180 	.word	0x08020180
 80142ec:	2000e470 	.word	0x2000e470
 80142f0:	2000e46c 	.word	0x2000e46c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80142f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142f6:	7d1b      	ldrb	r3, [r3, #20]
 80142f8:	2b0a      	cmp	r3, #10
 80142fa:	d006      	beq.n	801430a <tcp_slowtmr+0x5c6>
 80142fc:	4b2b      	ldr	r3, [pc, #172]	@ (80143ac <tcp_slowtmr+0x668>)
 80142fe:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8014302:	492b      	ldr	r1, [pc, #172]	@ (80143b0 <tcp_slowtmr+0x66c>)
 8014304:	482b      	ldr	r0, [pc, #172]	@ (80143b4 <tcp_slowtmr+0x670>)
 8014306:	f009 f861 	bl	801d3cc <iprintf>
    pcb_remove = 0;
 801430a:	2300      	movs	r3, #0
 801430c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014310:	4b29      	ldr	r3, [pc, #164]	@ (80143b8 <tcp_slowtmr+0x674>)
 8014312:	681a      	ldr	r2, [r3, #0]
 8014314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014316:	6a1b      	ldr	r3, [r3, #32]
 8014318:	1ad3      	subs	r3, r2, r3
 801431a:	2bf0      	cmp	r3, #240	@ 0xf0
 801431c:	d904      	bls.n	8014328 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801431e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014322:	3301      	adds	r3, #1
 8014324:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8014328:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801432c:	2b00      	cmp	r3, #0
 801432e:	d02f      	beq.n	8014390 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8014330:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014332:	f000 fbf9 	bl	8014b28 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8014336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014338:	2b00      	cmp	r3, #0
 801433a:	d010      	beq.n	801435e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801433c:	4b1f      	ldr	r3, [pc, #124]	@ (80143bc <tcp_slowtmr+0x678>)
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014342:	429a      	cmp	r2, r3
 8014344:	d106      	bne.n	8014354 <tcp_slowtmr+0x610>
 8014346:	4b19      	ldr	r3, [pc, #100]	@ (80143ac <tcp_slowtmr+0x668>)
 8014348:	f240 52af 	movw	r2, #1455	@ 0x5af
 801434c:	491c      	ldr	r1, [pc, #112]	@ (80143c0 <tcp_slowtmr+0x67c>)
 801434e:	4819      	ldr	r0, [pc, #100]	@ (80143b4 <tcp_slowtmr+0x670>)
 8014350:	f009 f83c 	bl	801d3cc <iprintf>
        prev->next = pcb->next;
 8014354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014356:	68da      	ldr	r2, [r3, #12]
 8014358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801435a:	60da      	str	r2, [r3, #12]
 801435c:	e00f      	b.n	801437e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801435e:	4b17      	ldr	r3, [pc, #92]	@ (80143bc <tcp_slowtmr+0x678>)
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014364:	429a      	cmp	r2, r3
 8014366:	d006      	beq.n	8014376 <tcp_slowtmr+0x632>
 8014368:	4b10      	ldr	r3, [pc, #64]	@ (80143ac <tcp_slowtmr+0x668>)
 801436a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801436e:	4915      	ldr	r1, [pc, #84]	@ (80143c4 <tcp_slowtmr+0x680>)
 8014370:	4810      	ldr	r0, [pc, #64]	@ (80143b4 <tcp_slowtmr+0x670>)
 8014372:	f009 f82b 	bl	801d3cc <iprintf>
        tcp_tw_pcbs = pcb->next;
 8014376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014378:	68db      	ldr	r3, [r3, #12]
 801437a:	4a10      	ldr	r2, [pc, #64]	@ (80143bc <tcp_slowtmr+0x678>)
 801437c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801437e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014380:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8014382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014384:	68db      	ldr	r3, [r3, #12]
 8014386:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8014388:	69f8      	ldr	r0, [r7, #28]
 801438a:	f7fe ff39 	bl	8013200 <tcp_free>
 801438e:	e004      	b.n	801439a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8014390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014392:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8014394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014396:	68db      	ldr	r3, [r3, #12]
 8014398:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801439a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801439c:	2b00      	cmp	r3, #0
 801439e:	d1a9      	bne.n	80142f4 <tcp_slowtmr+0x5b0>
    }
  }
}
 80143a0:	bf00      	nop
 80143a2:	bf00      	nop
 80143a4:	3730      	adds	r7, #48	@ 0x30
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bdb0      	pop	{r4, r5, r7, pc}
 80143aa:	bf00      	nop
 80143ac:	0801fd1c 	.word	0x0801fd1c
 80143b0:	080201ac 	.word	0x080201ac
 80143b4:	0801fd60 	.word	0x0801fd60
 80143b8:	2000e45c 	.word	0x2000e45c
 80143bc:	2000e46c 	.word	0x2000e46c
 80143c0:	080201dc 	.word	0x080201dc
 80143c4:	08020204 	.word	0x08020204

080143c8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b082      	sub	sp, #8
 80143cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80143ce:	4b2d      	ldr	r3, [pc, #180]	@ (8014484 <tcp_fasttmr+0xbc>)
 80143d0:	781b      	ldrb	r3, [r3, #0]
 80143d2:	3301      	adds	r3, #1
 80143d4:	b2da      	uxtb	r2, r3
 80143d6:	4b2b      	ldr	r3, [pc, #172]	@ (8014484 <tcp_fasttmr+0xbc>)
 80143d8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80143da:	4b2b      	ldr	r3, [pc, #172]	@ (8014488 <tcp_fasttmr+0xc0>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80143e0:	e048      	b.n	8014474 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	7f9a      	ldrb	r2, [r3, #30]
 80143e6:	4b27      	ldr	r3, [pc, #156]	@ (8014484 <tcp_fasttmr+0xbc>)
 80143e8:	781b      	ldrb	r3, [r3, #0]
 80143ea:	429a      	cmp	r2, r3
 80143ec:	d03f      	beq.n	801446e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80143ee:	4b25      	ldr	r3, [pc, #148]	@ (8014484 <tcp_fasttmr+0xbc>)
 80143f0:	781a      	ldrb	r2, [r3, #0]
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	8b5b      	ldrh	r3, [r3, #26]
 80143fa:	f003 0301 	and.w	r3, r3, #1
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d010      	beq.n	8014424 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	8b5b      	ldrh	r3, [r3, #26]
 8014406:	f043 0302 	orr.w	r3, r3, #2
 801440a:	b29a      	uxth	r2, r3
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8014410:	6878      	ldr	r0, [r7, #4]
 8014412:	f003 ffef 	bl	80183f4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	8b5b      	ldrh	r3, [r3, #26]
 801441a:	f023 0303 	bic.w	r3, r3, #3
 801441e:	b29a      	uxth	r2, r3
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	8b5b      	ldrh	r3, [r3, #26]
 8014428:	f003 0308 	and.w	r3, r3, #8
 801442c:	2b00      	cmp	r3, #0
 801442e:	d009      	beq.n	8014444 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	8b5b      	ldrh	r3, [r3, #26]
 8014434:	f023 0308 	bic.w	r3, r3, #8
 8014438:	b29a      	uxth	r2, r3
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801443e:	6878      	ldr	r0, [r7, #4]
 8014440:	f7ff f872 	bl	8013528 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	68db      	ldr	r3, [r3, #12]
 8014448:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801444e:	2b00      	cmp	r3, #0
 8014450:	d00a      	beq.n	8014468 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8014452:	4b0e      	ldr	r3, [pc, #56]	@ (801448c <tcp_fasttmr+0xc4>)
 8014454:	2200      	movs	r2, #0
 8014456:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8014458:	6878      	ldr	r0, [r7, #4]
 801445a:	f000 f819 	bl	8014490 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801445e:	4b0b      	ldr	r3, [pc, #44]	@ (801448c <tcp_fasttmr+0xc4>)
 8014460:	781b      	ldrb	r3, [r3, #0]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d000      	beq.n	8014468 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8014466:	e7b8      	b.n	80143da <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8014468:	683b      	ldr	r3, [r7, #0]
 801446a:	607b      	str	r3, [r7, #4]
 801446c:	e002      	b.n	8014474 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	68db      	ldr	r3, [r3, #12]
 8014472:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d1b3      	bne.n	80143e2 <tcp_fasttmr+0x1a>
    }
  }
}
 801447a:	bf00      	nop
 801447c:	bf00      	nop
 801447e:	3708      	adds	r7, #8
 8014480:	46bd      	mov	sp, r7
 8014482:	bd80      	pop	{r7, pc}
 8014484:	2000e472 	.word	0x2000e472
 8014488:	2000e468 	.word	0x2000e468
 801448c:	2000e470 	.word	0x2000e470

08014490 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8014490:	b590      	push	{r4, r7, lr}
 8014492:	b085      	sub	sp, #20
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d109      	bne.n	80144b2 <tcp_process_refused_data+0x22>
 801449e:	4b37      	ldr	r3, [pc, #220]	@ (801457c <tcp_process_refused_data+0xec>)
 80144a0:	f240 6209 	movw	r2, #1545	@ 0x609
 80144a4:	4936      	ldr	r1, [pc, #216]	@ (8014580 <tcp_process_refused_data+0xf0>)
 80144a6:	4837      	ldr	r0, [pc, #220]	@ (8014584 <tcp_process_refused_data+0xf4>)
 80144a8:	f008 ff90 	bl	801d3cc <iprintf>
 80144ac:	f06f 030f 	mvn.w	r3, #15
 80144b0:	e060      	b.n	8014574 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80144b6:	7b5b      	ldrb	r3, [r3, #13]
 80144b8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80144be:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	2200      	movs	r2, #0
 80144c4:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d00b      	beq.n	80144e8 <tcp_process_refused_data+0x58>
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	6918      	ldr	r0, [r3, #16]
 80144da:	2300      	movs	r3, #0
 80144dc:	68ba      	ldr	r2, [r7, #8]
 80144de:	6879      	ldr	r1, [r7, #4]
 80144e0:	47a0      	blx	r4
 80144e2:	4603      	mov	r3, r0
 80144e4:	73fb      	strb	r3, [r7, #15]
 80144e6:	e007      	b.n	80144f8 <tcp_process_refused_data+0x68>
 80144e8:	2300      	movs	r3, #0
 80144ea:	68ba      	ldr	r2, [r7, #8]
 80144ec:	6879      	ldr	r1, [r7, #4]
 80144ee:	2000      	movs	r0, #0
 80144f0:	f000 f8a4 	bl	801463c <tcp_recv_null>
 80144f4:	4603      	mov	r3, r0
 80144f6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80144f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d12a      	bne.n	8014556 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8014500:	7bbb      	ldrb	r3, [r7, #14]
 8014502:	f003 0320 	and.w	r3, r3, #32
 8014506:	2b00      	cmp	r3, #0
 8014508:	d033      	beq.n	8014572 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801450e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014512:	d005      	beq.n	8014520 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014518:	3301      	adds	r3, #1
 801451a:	b29a      	uxth	r2, r3
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014526:	2b00      	cmp	r3, #0
 8014528:	d00b      	beq.n	8014542 <tcp_process_refused_data+0xb2>
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	6918      	ldr	r0, [r3, #16]
 8014534:	2300      	movs	r3, #0
 8014536:	2200      	movs	r2, #0
 8014538:	6879      	ldr	r1, [r7, #4]
 801453a:	47a0      	blx	r4
 801453c:	4603      	mov	r3, r0
 801453e:	73fb      	strb	r3, [r7, #15]
 8014540:	e001      	b.n	8014546 <tcp_process_refused_data+0xb6>
 8014542:	2300      	movs	r3, #0
 8014544:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8014546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801454a:	f113 0f0d 	cmn.w	r3, #13
 801454e:	d110      	bne.n	8014572 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8014550:	f06f 030c 	mvn.w	r3, #12
 8014554:	e00e      	b.n	8014574 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8014556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801455a:	f113 0f0d 	cmn.w	r3, #13
 801455e:	d102      	bne.n	8014566 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8014560:	f06f 030c 	mvn.w	r3, #12
 8014564:	e006      	b.n	8014574 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	68ba      	ldr	r2, [r7, #8]
 801456a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801456c:	f06f 0304 	mvn.w	r3, #4
 8014570:	e000      	b.n	8014574 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8014572:	2300      	movs	r3, #0
}
 8014574:	4618      	mov	r0, r3
 8014576:	3714      	adds	r7, #20
 8014578:	46bd      	mov	sp, r7
 801457a:	bd90      	pop	{r4, r7, pc}
 801457c:	0801fd1c 	.word	0x0801fd1c
 8014580:	0802022c 	.word	0x0802022c
 8014584:	0801fd60 	.word	0x0801fd60

08014588 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b084      	sub	sp, #16
 801458c:	af00      	add	r7, sp, #0
 801458e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8014590:	e007      	b.n	80145a2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8014598:	6878      	ldr	r0, [r7, #4]
 801459a:	f000 f80a 	bl	80145b2 <tcp_seg_free>
    seg = next;
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d1f4      	bne.n	8014592 <tcp_segs_free+0xa>
  }
}
 80145a8:	bf00      	nop
 80145aa:	bf00      	nop
 80145ac:	3710      	adds	r7, #16
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd80      	pop	{r7, pc}

080145b2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80145b2:	b580      	push	{r7, lr}
 80145b4:	b082      	sub	sp, #8
 80145b6:	af00      	add	r7, sp, #0
 80145b8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d00c      	beq.n	80145da <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	685b      	ldr	r3, [r3, #4]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d004      	beq.n	80145d2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	685b      	ldr	r3, [r3, #4]
 80145cc:	4618      	mov	r0, r3
 80145ce:	f7fe fb6b 	bl	8012ca8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80145d2:	6879      	ldr	r1, [r7, #4]
 80145d4:	2003      	movs	r0, #3
 80145d6:	f7fd fcc3 	bl	8011f60 <memp_free>
  }
}
 80145da:	bf00      	nop
 80145dc:	3708      	adds	r7, #8
 80145de:	46bd      	mov	sp, r7
 80145e0:	bd80      	pop	{r7, pc}
	...

080145e4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b084      	sub	sp, #16
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d106      	bne.n	8014600 <tcp_seg_copy+0x1c>
 80145f2:	4b0f      	ldr	r3, [pc, #60]	@ (8014630 <tcp_seg_copy+0x4c>)
 80145f4:	f240 6282 	movw	r2, #1666	@ 0x682
 80145f8:	490e      	ldr	r1, [pc, #56]	@ (8014634 <tcp_seg_copy+0x50>)
 80145fa:	480f      	ldr	r0, [pc, #60]	@ (8014638 <tcp_seg_copy+0x54>)
 80145fc:	f008 fee6 	bl	801d3cc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8014600:	2003      	movs	r0, #3
 8014602:	f7fd fc37 	bl	8011e74 <memp_malloc>
 8014606:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d101      	bne.n	8014612 <tcp_seg_copy+0x2e>
    return NULL;
 801460e:	2300      	movs	r3, #0
 8014610:	e00a      	b.n	8014628 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8014612:	2210      	movs	r2, #16
 8014614:	6879      	ldr	r1, [r7, #4]
 8014616:	68f8      	ldr	r0, [r7, #12]
 8014618:	f009 f86f 	bl	801d6fa <memcpy>
  pbuf_ref(cseg->p);
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	685b      	ldr	r3, [r3, #4]
 8014620:	4618      	mov	r0, r3
 8014622:	f7fe fbe7 	bl	8012df4 <pbuf_ref>
  return cseg;
 8014626:	68fb      	ldr	r3, [r7, #12]
}
 8014628:	4618      	mov	r0, r3
 801462a:	3710      	adds	r7, #16
 801462c:	46bd      	mov	sp, r7
 801462e:	bd80      	pop	{r7, pc}
 8014630:	0801fd1c 	.word	0x0801fd1c
 8014634:	08020270 	.word	0x08020270
 8014638:	0801fd60 	.word	0x0801fd60

0801463c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801463c:	b580      	push	{r7, lr}
 801463e:	b084      	sub	sp, #16
 8014640:	af00      	add	r7, sp, #0
 8014642:	60f8      	str	r0, [r7, #12]
 8014644:	60b9      	str	r1, [r7, #8]
 8014646:	607a      	str	r2, [r7, #4]
 8014648:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801464a:	68bb      	ldr	r3, [r7, #8]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d109      	bne.n	8014664 <tcp_recv_null+0x28>
 8014650:	4b12      	ldr	r3, [pc, #72]	@ (801469c <tcp_recv_null+0x60>)
 8014652:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8014656:	4912      	ldr	r1, [pc, #72]	@ (80146a0 <tcp_recv_null+0x64>)
 8014658:	4812      	ldr	r0, [pc, #72]	@ (80146a4 <tcp_recv_null+0x68>)
 801465a:	f008 feb7 	bl	801d3cc <iprintf>
 801465e:	f06f 030f 	mvn.w	r3, #15
 8014662:	e016      	b.n	8014692 <tcp_recv_null+0x56>

  if (p != NULL) {
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d009      	beq.n	801467e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	891b      	ldrh	r3, [r3, #8]
 801466e:	4619      	mov	r1, r3
 8014670:	68b8      	ldr	r0, [r7, #8]
 8014672:	f7ff fad1 	bl	8013c18 <tcp_recved>
    pbuf_free(p);
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f7fe fb16 	bl	8012ca8 <pbuf_free>
 801467c:	e008      	b.n	8014690 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801467e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d104      	bne.n	8014690 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8014686:	68b8      	ldr	r0, [r7, #8]
 8014688:	f7fe ffb8 	bl	80135fc <tcp_close>
 801468c:	4603      	mov	r3, r0
 801468e:	e000      	b.n	8014692 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8014690:	2300      	movs	r3, #0
}
 8014692:	4618      	mov	r0, r3
 8014694:	3710      	adds	r7, #16
 8014696:	46bd      	mov	sp, r7
 8014698:	bd80      	pop	{r7, pc}
 801469a:	bf00      	nop
 801469c:	0801fd1c 	.word	0x0801fd1c
 80146a0:	0802028c 	.word	0x0802028c
 80146a4:	0801fd60 	.word	0x0801fd60

080146a8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b086      	sub	sp, #24
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	4603      	mov	r3, r0
 80146b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80146b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	db01      	blt.n	80146be <tcp_kill_prio+0x16>
 80146ba:	79fb      	ldrb	r3, [r7, #7]
 80146bc:	e000      	b.n	80146c0 <tcp_kill_prio+0x18>
 80146be:	237f      	movs	r3, #127	@ 0x7f
 80146c0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80146c2:	7afb      	ldrb	r3, [r7, #11]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d034      	beq.n	8014732 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80146c8:	7afb      	ldrb	r3, [r7, #11]
 80146ca:	3b01      	subs	r3, #1
 80146cc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80146ce:	2300      	movs	r3, #0
 80146d0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80146d2:	2300      	movs	r3, #0
 80146d4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80146d6:	4b19      	ldr	r3, [pc, #100]	@ (801473c <tcp_kill_prio+0x94>)
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	617b      	str	r3, [r7, #20]
 80146dc:	e01f      	b.n	801471e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80146de:	697b      	ldr	r3, [r7, #20]
 80146e0:	7d5b      	ldrb	r3, [r3, #21]
 80146e2:	7afa      	ldrb	r2, [r7, #11]
 80146e4:	429a      	cmp	r2, r3
 80146e6:	d80c      	bhi.n	8014702 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80146e8:	697b      	ldr	r3, [r7, #20]
 80146ea:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80146ec:	7afa      	ldrb	r2, [r7, #11]
 80146ee:	429a      	cmp	r2, r3
 80146f0:	d112      	bne.n	8014718 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80146f2:	4b13      	ldr	r3, [pc, #76]	@ (8014740 <tcp_kill_prio+0x98>)
 80146f4:	681a      	ldr	r2, [r3, #0]
 80146f6:	697b      	ldr	r3, [r7, #20]
 80146f8:	6a1b      	ldr	r3, [r3, #32]
 80146fa:	1ad3      	subs	r3, r2, r3
 80146fc:	68fa      	ldr	r2, [r7, #12]
 80146fe:	429a      	cmp	r2, r3
 8014700:	d80a      	bhi.n	8014718 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8014702:	4b0f      	ldr	r3, [pc, #60]	@ (8014740 <tcp_kill_prio+0x98>)
 8014704:	681a      	ldr	r2, [r3, #0]
 8014706:	697b      	ldr	r3, [r7, #20]
 8014708:	6a1b      	ldr	r3, [r3, #32]
 801470a:	1ad3      	subs	r3, r2, r3
 801470c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801470e:	697b      	ldr	r3, [r7, #20]
 8014710:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8014712:	697b      	ldr	r3, [r7, #20]
 8014714:	7d5b      	ldrb	r3, [r3, #21]
 8014716:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014718:	697b      	ldr	r3, [r7, #20]
 801471a:	68db      	ldr	r3, [r3, #12]
 801471c:	617b      	str	r3, [r7, #20]
 801471e:	697b      	ldr	r3, [r7, #20]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d1dc      	bne.n	80146de <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014724:	693b      	ldr	r3, [r7, #16]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d004      	beq.n	8014734 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801472a:	6938      	ldr	r0, [r7, #16]
 801472c:	f7ff f8ac 	bl	8013888 <tcp_abort>
 8014730:	e000      	b.n	8014734 <tcp_kill_prio+0x8c>
    return;
 8014732:	bf00      	nop
  }
}
 8014734:	3718      	adds	r7, #24
 8014736:	46bd      	mov	sp, r7
 8014738:	bd80      	pop	{r7, pc}
 801473a:	bf00      	nop
 801473c:	2000e468 	.word	0x2000e468
 8014740:	2000e45c 	.word	0x2000e45c

08014744 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b086      	sub	sp, #24
 8014748:	af00      	add	r7, sp, #0
 801474a:	4603      	mov	r3, r0
 801474c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801474e:	79fb      	ldrb	r3, [r7, #7]
 8014750:	2b08      	cmp	r3, #8
 8014752:	d009      	beq.n	8014768 <tcp_kill_state+0x24>
 8014754:	79fb      	ldrb	r3, [r7, #7]
 8014756:	2b09      	cmp	r3, #9
 8014758:	d006      	beq.n	8014768 <tcp_kill_state+0x24>
 801475a:	4b1a      	ldr	r3, [pc, #104]	@ (80147c4 <tcp_kill_state+0x80>)
 801475c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8014760:	4919      	ldr	r1, [pc, #100]	@ (80147c8 <tcp_kill_state+0x84>)
 8014762:	481a      	ldr	r0, [pc, #104]	@ (80147cc <tcp_kill_state+0x88>)
 8014764:	f008 fe32 	bl	801d3cc <iprintf>

  inactivity = 0;
 8014768:	2300      	movs	r3, #0
 801476a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801476c:	2300      	movs	r3, #0
 801476e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014770:	4b17      	ldr	r3, [pc, #92]	@ (80147d0 <tcp_kill_state+0x8c>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	617b      	str	r3, [r7, #20]
 8014776:	e017      	b.n	80147a8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8014778:	697b      	ldr	r3, [r7, #20]
 801477a:	7d1b      	ldrb	r3, [r3, #20]
 801477c:	79fa      	ldrb	r2, [r7, #7]
 801477e:	429a      	cmp	r2, r3
 8014780:	d10f      	bne.n	80147a2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014782:	4b14      	ldr	r3, [pc, #80]	@ (80147d4 <tcp_kill_state+0x90>)
 8014784:	681a      	ldr	r2, [r3, #0]
 8014786:	697b      	ldr	r3, [r7, #20]
 8014788:	6a1b      	ldr	r3, [r3, #32]
 801478a:	1ad3      	subs	r3, r2, r3
 801478c:	68fa      	ldr	r2, [r7, #12]
 801478e:	429a      	cmp	r2, r3
 8014790:	d807      	bhi.n	80147a2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8014792:	4b10      	ldr	r3, [pc, #64]	@ (80147d4 <tcp_kill_state+0x90>)
 8014794:	681a      	ldr	r2, [r3, #0]
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	6a1b      	ldr	r3, [r3, #32]
 801479a:	1ad3      	subs	r3, r2, r3
 801479c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801479e:	697b      	ldr	r3, [r7, #20]
 80147a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80147a2:	697b      	ldr	r3, [r7, #20]
 80147a4:	68db      	ldr	r3, [r3, #12]
 80147a6:	617b      	str	r3, [r7, #20]
 80147a8:	697b      	ldr	r3, [r7, #20]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d1e4      	bne.n	8014778 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80147ae:	693b      	ldr	r3, [r7, #16]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d003      	beq.n	80147bc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80147b4:	2100      	movs	r1, #0
 80147b6:	6938      	ldr	r0, [r7, #16]
 80147b8:	f7fe ffa8 	bl	801370c <tcp_abandon>
  }
}
 80147bc:	bf00      	nop
 80147be:	3718      	adds	r7, #24
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd80      	pop	{r7, pc}
 80147c4:	0801fd1c 	.word	0x0801fd1c
 80147c8:	080202a8 	.word	0x080202a8
 80147cc:	0801fd60 	.word	0x0801fd60
 80147d0:	2000e468 	.word	0x2000e468
 80147d4:	2000e45c 	.word	0x2000e45c

080147d8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b084      	sub	sp, #16
 80147dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80147de:	2300      	movs	r3, #0
 80147e0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80147e2:	2300      	movs	r3, #0
 80147e4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80147e6:	4b12      	ldr	r3, [pc, #72]	@ (8014830 <tcp_kill_timewait+0x58>)
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	60fb      	str	r3, [r7, #12]
 80147ec:	e012      	b.n	8014814 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80147ee:	4b11      	ldr	r3, [pc, #68]	@ (8014834 <tcp_kill_timewait+0x5c>)
 80147f0:	681a      	ldr	r2, [r3, #0]
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	6a1b      	ldr	r3, [r3, #32]
 80147f6:	1ad3      	subs	r3, r2, r3
 80147f8:	687a      	ldr	r2, [r7, #4]
 80147fa:	429a      	cmp	r2, r3
 80147fc:	d807      	bhi.n	801480e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80147fe:	4b0d      	ldr	r3, [pc, #52]	@ (8014834 <tcp_kill_timewait+0x5c>)
 8014800:	681a      	ldr	r2, [r3, #0]
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	6a1b      	ldr	r3, [r3, #32]
 8014806:	1ad3      	subs	r3, r2, r3
 8014808:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	68db      	ldr	r3, [r3, #12]
 8014812:	60fb      	str	r3, [r7, #12]
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d1e9      	bne.n	80147ee <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801481a:	68bb      	ldr	r3, [r7, #8]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d002      	beq.n	8014826 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014820:	68b8      	ldr	r0, [r7, #8]
 8014822:	f7ff f831 	bl	8013888 <tcp_abort>
  }
}
 8014826:	bf00      	nop
 8014828:	3710      	adds	r7, #16
 801482a:	46bd      	mov	sp, r7
 801482c:	bd80      	pop	{r7, pc}
 801482e:	bf00      	nop
 8014830:	2000e46c 	.word	0x2000e46c
 8014834:	2000e45c 	.word	0x2000e45c

08014838 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b082      	sub	sp, #8
 801483c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801483e:	4b10      	ldr	r3, [pc, #64]	@ (8014880 <tcp_handle_closepend+0x48>)
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014844:	e014      	b.n	8014870 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	68db      	ldr	r3, [r3, #12]
 801484a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	8b5b      	ldrh	r3, [r3, #26]
 8014850:	f003 0308 	and.w	r3, r3, #8
 8014854:	2b00      	cmp	r3, #0
 8014856:	d009      	beq.n	801486c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	8b5b      	ldrh	r3, [r3, #26]
 801485c:	f023 0308 	bic.w	r3, r3, #8
 8014860:	b29a      	uxth	r2, r3
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8014866:	6878      	ldr	r0, [r7, #4]
 8014868:	f7fe fe5e 	bl	8013528 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801486c:	683b      	ldr	r3, [r7, #0]
 801486e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d1e7      	bne.n	8014846 <tcp_handle_closepend+0xe>
  }
}
 8014876:	bf00      	nop
 8014878:	bf00      	nop
 801487a:	3708      	adds	r7, #8
 801487c:	46bd      	mov	sp, r7
 801487e:	bd80      	pop	{r7, pc}
 8014880:	2000e468 	.word	0x2000e468

08014884 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b084      	sub	sp, #16
 8014888:	af00      	add	r7, sp, #0
 801488a:	4603      	mov	r3, r0
 801488c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801488e:	2001      	movs	r0, #1
 8014890:	f7fd faf0 	bl	8011e74 <memp_malloc>
 8014894:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d126      	bne.n	80148ea <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801489c:	f7ff ffcc 	bl	8014838 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80148a0:	f7ff ff9a 	bl	80147d8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80148a4:	2001      	movs	r0, #1
 80148a6:	f7fd fae5 	bl	8011e74 <memp_malloc>
 80148aa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d11b      	bne.n	80148ea <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80148b2:	2009      	movs	r0, #9
 80148b4:	f7ff ff46 	bl	8014744 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80148b8:	2001      	movs	r0, #1
 80148ba:	f7fd fadb 	bl	8011e74 <memp_malloc>
 80148be:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d111      	bne.n	80148ea <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80148c6:	2008      	movs	r0, #8
 80148c8:	f7ff ff3c 	bl	8014744 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80148cc:	2001      	movs	r0, #1
 80148ce:	f7fd fad1 	bl	8011e74 <memp_malloc>
 80148d2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d107      	bne.n	80148ea <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80148da:	79fb      	ldrb	r3, [r7, #7]
 80148dc:	4618      	mov	r0, r3
 80148de:	f7ff fee3 	bl	80146a8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80148e2:	2001      	movs	r0, #1
 80148e4:	f7fd fac6 	bl	8011e74 <memp_malloc>
 80148e8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d03f      	beq.n	8014970 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80148f0:	229c      	movs	r2, #156	@ 0x9c
 80148f2:	2100      	movs	r1, #0
 80148f4:	68f8      	ldr	r0, [r7, #12]
 80148f6:	f008 fe0a 	bl	801d50e <memset>
    pcb->prio = prio;
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	79fa      	ldrb	r2, [r7, #7]
 80148fe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8014906:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8014910:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	22ff      	movs	r2, #255	@ 0xff
 801491e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8014926:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	2206      	movs	r2, #6
 801492c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	2206      	movs	r2, #6
 8014934:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801493c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	2201      	movs	r2, #1
 8014942:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8014946:	4b0d      	ldr	r3, [pc, #52]	@ (801497c <tcp_alloc+0xf8>)
 8014948:	681a      	ldr	r2, [r3, #0]
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801494e:	4b0c      	ldr	r3, [pc, #48]	@ (8014980 <tcp_alloc+0xfc>)
 8014950:	781a      	ldrb	r2, [r3, #0]
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801495c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	4a08      	ldr	r2, [pc, #32]	@ (8014984 <tcp_alloc+0x100>)
 8014964:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	4a07      	ldr	r2, [pc, #28]	@ (8014988 <tcp_alloc+0x104>)
 801496c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014970:	68fb      	ldr	r3, [r7, #12]
}
 8014972:	4618      	mov	r0, r3
 8014974:	3710      	adds	r7, #16
 8014976:	46bd      	mov	sp, r7
 8014978:	bd80      	pop	{r7, pc}
 801497a:	bf00      	nop
 801497c:	2000e45c 	.word	0x2000e45c
 8014980:	2000e472 	.word	0x2000e472
 8014984:	0801463d 	.word	0x0801463d
 8014988:	006ddd00 	.word	0x006ddd00

0801498c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b084      	sub	sp, #16
 8014990:	af00      	add	r7, sp, #0
 8014992:	4603      	mov	r3, r0
 8014994:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8014996:	2040      	movs	r0, #64	@ 0x40
 8014998:	f7ff ff74 	bl	8014884 <tcp_alloc>
 801499c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801499e:	68fb      	ldr	r3, [r7, #12]
}
 80149a0:	4618      	mov	r0, r3
 80149a2:	3710      	adds	r7, #16
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}

080149a8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80149a8:	b480      	push	{r7}
 80149aa:	b083      	sub	sp, #12
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
 80149b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d002      	beq.n	80149be <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	683a      	ldr	r2, [r7, #0]
 80149bc:	611a      	str	r2, [r3, #16]
  }
}
 80149be:	bf00      	nop
 80149c0:	370c      	adds	r7, #12
 80149c2:	46bd      	mov	sp, r7
 80149c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c8:	4770      	bx	lr
	...

080149cc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b082      	sub	sp, #8
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
 80149d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d00e      	beq.n	80149fa <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	7d1b      	ldrb	r3, [r3, #20]
 80149e0:	2b01      	cmp	r3, #1
 80149e2:	d106      	bne.n	80149f2 <tcp_recv+0x26>
 80149e4:	4b07      	ldr	r3, [pc, #28]	@ (8014a04 <tcp_recv+0x38>)
 80149e6:	f240 72df 	movw	r2, #2015	@ 0x7df
 80149ea:	4907      	ldr	r1, [pc, #28]	@ (8014a08 <tcp_recv+0x3c>)
 80149ec:	4807      	ldr	r0, [pc, #28]	@ (8014a0c <tcp_recv+0x40>)
 80149ee:	f008 fced 	bl	801d3cc <iprintf>
    pcb->recv = recv;
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	683a      	ldr	r2, [r7, #0]
 80149f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 80149fa:	bf00      	nop
 80149fc:	3708      	adds	r7, #8
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}
 8014a02:	bf00      	nop
 8014a04:	0801fd1c 	.word	0x0801fd1c
 8014a08:	080202b8 	.word	0x080202b8
 8014a0c:	0801fd60 	.word	0x0801fd60

08014a10 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b082      	sub	sp, #8
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
 8014a18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d00e      	beq.n	8014a3e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	7d1b      	ldrb	r3, [r3, #20]
 8014a24:	2b01      	cmp	r3, #1
 8014a26:	d106      	bne.n	8014a36 <tcp_sent+0x26>
 8014a28:	4b07      	ldr	r3, [pc, #28]	@ (8014a48 <tcp_sent+0x38>)
 8014a2a:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8014a2e:	4907      	ldr	r1, [pc, #28]	@ (8014a4c <tcp_sent+0x3c>)
 8014a30:	4807      	ldr	r0, [pc, #28]	@ (8014a50 <tcp_sent+0x40>)
 8014a32:	f008 fccb 	bl	801d3cc <iprintf>
    pcb->sent = sent;
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	683a      	ldr	r2, [r7, #0]
 8014a3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8014a3e:	bf00      	nop
 8014a40:	3708      	adds	r7, #8
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}
 8014a46:	bf00      	nop
 8014a48:	0801fd1c 	.word	0x0801fd1c
 8014a4c:	080202e0 	.word	0x080202e0
 8014a50:	0801fd60 	.word	0x0801fd60

08014a54 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b082      	sub	sp, #8
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
 8014a5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d00e      	beq.n	8014a82 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	7d1b      	ldrb	r3, [r3, #20]
 8014a68:	2b01      	cmp	r3, #1
 8014a6a:	d106      	bne.n	8014a7a <tcp_err+0x26>
 8014a6c:	4b07      	ldr	r3, [pc, #28]	@ (8014a8c <tcp_err+0x38>)
 8014a6e:	f640 020d 	movw	r2, #2061	@ 0x80d
 8014a72:	4907      	ldr	r1, [pc, #28]	@ (8014a90 <tcp_err+0x3c>)
 8014a74:	4807      	ldr	r0, [pc, #28]	@ (8014a94 <tcp_err+0x40>)
 8014a76:	f008 fca9 	bl	801d3cc <iprintf>
    pcb->errf = err;
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	683a      	ldr	r2, [r7, #0]
 8014a7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8014a82:	bf00      	nop
 8014a84:	3708      	adds	r7, #8
 8014a86:	46bd      	mov	sp, r7
 8014a88:	bd80      	pop	{r7, pc}
 8014a8a:	bf00      	nop
 8014a8c:	0801fd1c 	.word	0x0801fd1c
 8014a90:	08020308 	.word	0x08020308
 8014a94:	0801fd60 	.word	0x0801fd60

08014a98 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8014a98:	b480      	push	{r7}
 8014a9a:	b085      	sub	sp, #20
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	6078      	str	r0, [r7, #4]
 8014aa0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d008      	beq.n	8014aba <tcp_accept+0x22>
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	7d1b      	ldrb	r3, [r3, #20]
 8014aac:	2b01      	cmp	r3, #1
 8014aae:	d104      	bne.n	8014aba <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	683a      	ldr	r2, [r7, #0]
 8014ab8:	619a      	str	r2, [r3, #24]
  }
}
 8014aba:	bf00      	nop
 8014abc:	3714      	adds	r7, #20
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac4:	4770      	bx	lr
	...

08014ac8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b084      	sub	sp, #16
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	60f8      	str	r0, [r7, #12]
 8014ad0:	60b9      	str	r1, [r7, #8]
 8014ad2:	4613      	mov	r3, r2
 8014ad4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d107      	bne.n	8014aec <tcp_poll+0x24>
 8014adc:	4b0e      	ldr	r3, [pc, #56]	@ (8014b18 <tcp_poll+0x50>)
 8014ade:	f640 023d 	movw	r2, #2109	@ 0x83d
 8014ae2:	490e      	ldr	r1, [pc, #56]	@ (8014b1c <tcp_poll+0x54>)
 8014ae4:	480e      	ldr	r0, [pc, #56]	@ (8014b20 <tcp_poll+0x58>)
 8014ae6:	f008 fc71 	bl	801d3cc <iprintf>
 8014aea:	e011      	b.n	8014b10 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	7d1b      	ldrb	r3, [r3, #20]
 8014af0:	2b01      	cmp	r3, #1
 8014af2:	d106      	bne.n	8014b02 <tcp_poll+0x3a>
 8014af4:	4b08      	ldr	r3, [pc, #32]	@ (8014b18 <tcp_poll+0x50>)
 8014af6:	f640 023e 	movw	r2, #2110	@ 0x83e
 8014afa:	490a      	ldr	r1, [pc, #40]	@ (8014b24 <tcp_poll+0x5c>)
 8014afc:	4808      	ldr	r0, [pc, #32]	@ (8014b20 <tcp_poll+0x58>)
 8014afe:	f008 fc65 	bl	801d3cc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	68ba      	ldr	r2, [r7, #8]
 8014b06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	79fa      	ldrb	r2, [r7, #7]
 8014b0e:	775a      	strb	r2, [r3, #29]
}
 8014b10:	3710      	adds	r7, #16
 8014b12:	46bd      	mov	sp, r7
 8014b14:	bd80      	pop	{r7, pc}
 8014b16:	bf00      	nop
 8014b18:	0801fd1c 	.word	0x0801fd1c
 8014b1c:	08020330 	.word	0x08020330
 8014b20:	0801fd60 	.word	0x0801fd60
 8014b24:	08020348 	.word	0x08020348

08014b28 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b082      	sub	sp, #8
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d107      	bne.n	8014b46 <tcp_pcb_purge+0x1e>
 8014b36:	4b21      	ldr	r3, [pc, #132]	@ (8014bbc <tcp_pcb_purge+0x94>)
 8014b38:	f640 0251 	movw	r2, #2129	@ 0x851
 8014b3c:	4920      	ldr	r1, [pc, #128]	@ (8014bc0 <tcp_pcb_purge+0x98>)
 8014b3e:	4821      	ldr	r0, [pc, #132]	@ (8014bc4 <tcp_pcb_purge+0x9c>)
 8014b40:	f008 fc44 	bl	801d3cc <iprintf>
 8014b44:	e037      	b.n	8014bb6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	7d1b      	ldrb	r3, [r3, #20]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d033      	beq.n	8014bb6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014b52:	2b0a      	cmp	r3, #10
 8014b54:	d02f      	beq.n	8014bb6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014b5a:	2b01      	cmp	r3, #1
 8014b5c:	d02b      	beq.n	8014bb6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d007      	beq.n	8014b76 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f7fe f89c 	bl	8012ca8 <pbuf_free>
      pcb->refused_data = NULL;
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	2200      	movs	r2, #0
 8014b74:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d002      	beq.n	8014b84 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f000 f986 	bl	8014e90 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014b8a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b90:	4618      	mov	r0, r3
 8014b92:	f7ff fcf9 	bl	8014588 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	f7ff fcf4 	bl	8014588 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8014bb6:	3708      	adds	r7, #8
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	bd80      	pop	{r7, pc}
 8014bbc:	0801fd1c 	.word	0x0801fd1c
 8014bc0:	08020368 	.word	0x08020368
 8014bc4:	0801fd60 	.word	0x0801fd60

08014bc8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b084      	sub	sp, #16
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
 8014bd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8014bd2:	683b      	ldr	r3, [r7, #0]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d106      	bne.n	8014be6 <tcp_pcb_remove+0x1e>
 8014bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8014cd4 <tcp_pcb_remove+0x10c>)
 8014bda:	f640 0283 	movw	r2, #2179	@ 0x883
 8014bde:	493e      	ldr	r1, [pc, #248]	@ (8014cd8 <tcp_pcb_remove+0x110>)
 8014be0:	483e      	ldr	r0, [pc, #248]	@ (8014cdc <tcp_pcb_remove+0x114>)
 8014be2:	f008 fbf3 	bl	801d3cc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d106      	bne.n	8014bfa <tcp_pcb_remove+0x32>
 8014bec:	4b39      	ldr	r3, [pc, #228]	@ (8014cd4 <tcp_pcb_remove+0x10c>)
 8014bee:	f640 0284 	movw	r2, #2180	@ 0x884
 8014bf2:	493b      	ldr	r1, [pc, #236]	@ (8014ce0 <tcp_pcb_remove+0x118>)
 8014bf4:	4839      	ldr	r0, [pc, #228]	@ (8014cdc <tcp_pcb_remove+0x114>)
 8014bf6:	f008 fbe9 	bl	801d3cc <iprintf>

  TCP_RMV(pcblist, pcb);
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	683a      	ldr	r2, [r7, #0]
 8014c00:	429a      	cmp	r2, r3
 8014c02:	d105      	bne.n	8014c10 <tcp_pcb_remove+0x48>
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	68da      	ldr	r2, [r3, #12]
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	601a      	str	r2, [r3, #0]
 8014c0e:	e013      	b.n	8014c38 <tcp_pcb_remove+0x70>
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	60fb      	str	r3, [r7, #12]
 8014c16:	e00c      	b.n	8014c32 <tcp_pcb_remove+0x6a>
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	68db      	ldr	r3, [r3, #12]
 8014c1c:	683a      	ldr	r2, [r7, #0]
 8014c1e:	429a      	cmp	r2, r3
 8014c20:	d104      	bne.n	8014c2c <tcp_pcb_remove+0x64>
 8014c22:	683b      	ldr	r3, [r7, #0]
 8014c24:	68da      	ldr	r2, [r3, #12]
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	60da      	str	r2, [r3, #12]
 8014c2a:	e005      	b.n	8014c38 <tcp_pcb_remove+0x70>
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	68db      	ldr	r3, [r3, #12]
 8014c30:	60fb      	str	r3, [r7, #12]
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d1ef      	bne.n	8014c18 <tcp_pcb_remove+0x50>
 8014c38:	683b      	ldr	r3, [r7, #0]
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8014c3e:	6838      	ldr	r0, [r7, #0]
 8014c40:	f7ff ff72 	bl	8014b28 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014c44:	683b      	ldr	r3, [r7, #0]
 8014c46:	7d1b      	ldrb	r3, [r3, #20]
 8014c48:	2b0a      	cmp	r3, #10
 8014c4a:	d013      	beq.n	8014c74 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014c4c:	683b      	ldr	r3, [r7, #0]
 8014c4e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014c50:	2b01      	cmp	r3, #1
 8014c52:	d00f      	beq.n	8014c74 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014c54:	683b      	ldr	r3, [r7, #0]
 8014c56:	8b5b      	ldrh	r3, [r3, #26]
 8014c58:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d009      	beq.n	8014c74 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014c60:	683b      	ldr	r3, [r7, #0]
 8014c62:	8b5b      	ldrh	r3, [r3, #26]
 8014c64:	f043 0302 	orr.w	r3, r3, #2
 8014c68:	b29a      	uxth	r2, r3
 8014c6a:	683b      	ldr	r3, [r7, #0]
 8014c6c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014c6e:	6838      	ldr	r0, [r7, #0]
 8014c70:	f003 fbc0 	bl	80183f4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014c74:	683b      	ldr	r3, [r7, #0]
 8014c76:	7d1b      	ldrb	r3, [r3, #20]
 8014c78:	2b01      	cmp	r3, #1
 8014c7a:	d020      	beq.n	8014cbe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014c7c:	683b      	ldr	r3, [r7, #0]
 8014c7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d006      	beq.n	8014c92 <tcp_pcb_remove+0xca>
 8014c84:	4b13      	ldr	r3, [pc, #76]	@ (8014cd4 <tcp_pcb_remove+0x10c>)
 8014c86:	f640 0293 	movw	r2, #2195	@ 0x893
 8014c8a:	4916      	ldr	r1, [pc, #88]	@ (8014ce4 <tcp_pcb_remove+0x11c>)
 8014c8c:	4813      	ldr	r0, [pc, #76]	@ (8014cdc <tcp_pcb_remove+0x114>)
 8014c8e:	f008 fb9d 	bl	801d3cc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8014c92:	683b      	ldr	r3, [r7, #0]
 8014c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d006      	beq.n	8014ca8 <tcp_pcb_remove+0xe0>
 8014c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8014cd4 <tcp_pcb_remove+0x10c>)
 8014c9c:	f640 0294 	movw	r2, #2196	@ 0x894
 8014ca0:	4911      	ldr	r1, [pc, #68]	@ (8014ce8 <tcp_pcb_remove+0x120>)
 8014ca2:	480e      	ldr	r0, [pc, #56]	@ (8014cdc <tcp_pcb_remove+0x114>)
 8014ca4:	f008 fb92 	bl	801d3cc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d006      	beq.n	8014cbe <tcp_pcb_remove+0xf6>
 8014cb0:	4b08      	ldr	r3, [pc, #32]	@ (8014cd4 <tcp_pcb_remove+0x10c>)
 8014cb2:	f640 0296 	movw	r2, #2198	@ 0x896
 8014cb6:	490d      	ldr	r1, [pc, #52]	@ (8014cec <tcp_pcb_remove+0x124>)
 8014cb8:	4808      	ldr	r0, [pc, #32]	@ (8014cdc <tcp_pcb_remove+0x114>)
 8014cba:	f008 fb87 	bl	801d3cc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8014cbe:	683b      	ldr	r3, [r7, #0]
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014cc4:	683b      	ldr	r3, [r7, #0]
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014cca:	bf00      	nop
 8014ccc:	3710      	adds	r7, #16
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	bd80      	pop	{r7, pc}
 8014cd2:	bf00      	nop
 8014cd4:	0801fd1c 	.word	0x0801fd1c
 8014cd8:	08020384 	.word	0x08020384
 8014cdc:	0801fd60 	.word	0x0801fd60
 8014ce0:	080203a0 	.word	0x080203a0
 8014ce4:	080203c0 	.word	0x080203c0
 8014ce8:	080203d8 	.word	0x080203d8
 8014cec:	080203f4 	.word	0x080203f4

08014cf0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b082      	sub	sp, #8
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d106      	bne.n	8014d0c <tcp_next_iss+0x1c>
 8014cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8014d28 <tcp_next_iss+0x38>)
 8014d00:	f640 02af 	movw	r2, #2223	@ 0x8af
 8014d04:	4909      	ldr	r1, [pc, #36]	@ (8014d2c <tcp_next_iss+0x3c>)
 8014d06:	480a      	ldr	r0, [pc, #40]	@ (8014d30 <tcp_next_iss+0x40>)
 8014d08:	f008 fb60 	bl	801d3cc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014d0c:	4b09      	ldr	r3, [pc, #36]	@ (8014d34 <tcp_next_iss+0x44>)
 8014d0e:	681a      	ldr	r2, [r3, #0]
 8014d10:	4b09      	ldr	r3, [pc, #36]	@ (8014d38 <tcp_next_iss+0x48>)
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	4413      	add	r3, r2
 8014d16:	4a07      	ldr	r2, [pc, #28]	@ (8014d34 <tcp_next_iss+0x44>)
 8014d18:	6013      	str	r3, [r2, #0]
  return iss;
 8014d1a:	4b06      	ldr	r3, [pc, #24]	@ (8014d34 <tcp_next_iss+0x44>)
 8014d1c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014d1e:	4618      	mov	r0, r3
 8014d20:	3708      	adds	r7, #8
 8014d22:	46bd      	mov	sp, r7
 8014d24:	bd80      	pop	{r7, pc}
 8014d26:	bf00      	nop
 8014d28:	0801fd1c 	.word	0x0801fd1c
 8014d2c:	0802040c 	.word	0x0802040c
 8014d30:	0801fd60 	.word	0x0801fd60
 8014d34:	200000b4 	.word	0x200000b4
 8014d38:	2000e45c 	.word	0x2000e45c

08014d3c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b086      	sub	sp, #24
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	4603      	mov	r3, r0
 8014d44:	60b9      	str	r1, [r7, #8]
 8014d46:	607a      	str	r2, [r7, #4]
 8014d48:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d106      	bne.n	8014d5e <tcp_eff_send_mss_netif+0x22>
 8014d50:	4b14      	ldr	r3, [pc, #80]	@ (8014da4 <tcp_eff_send_mss_netif+0x68>)
 8014d52:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8014d56:	4914      	ldr	r1, [pc, #80]	@ (8014da8 <tcp_eff_send_mss_netif+0x6c>)
 8014d58:	4814      	ldr	r0, [pc, #80]	@ (8014dac <tcp_eff_send_mss_netif+0x70>)
 8014d5a:	f008 fb37 	bl	801d3cc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014d5e:	68bb      	ldr	r3, [r7, #8]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d101      	bne.n	8014d68 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8014d64:	89fb      	ldrh	r3, [r7, #14]
 8014d66:	e019      	b.n	8014d9c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014d6c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8014d6e:	8afb      	ldrh	r3, [r7, #22]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d012      	beq.n	8014d9a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8014d74:	2328      	movs	r3, #40	@ 0x28
 8014d76:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014d78:	8afa      	ldrh	r2, [r7, #22]
 8014d7a:	8abb      	ldrh	r3, [r7, #20]
 8014d7c:	429a      	cmp	r2, r3
 8014d7e:	d904      	bls.n	8014d8a <tcp_eff_send_mss_netif+0x4e>
 8014d80:	8afa      	ldrh	r2, [r7, #22]
 8014d82:	8abb      	ldrh	r3, [r7, #20]
 8014d84:	1ad3      	subs	r3, r2, r3
 8014d86:	b29b      	uxth	r3, r3
 8014d88:	e000      	b.n	8014d8c <tcp_eff_send_mss_netif+0x50>
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8014d8e:	8a7a      	ldrh	r2, [r7, #18]
 8014d90:	89fb      	ldrh	r3, [r7, #14]
 8014d92:	4293      	cmp	r3, r2
 8014d94:	bf28      	it	cs
 8014d96:	4613      	movcs	r3, r2
 8014d98:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8014d9a:	89fb      	ldrh	r3, [r7, #14]
}
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	3718      	adds	r7, #24
 8014da0:	46bd      	mov	sp, r7
 8014da2:	bd80      	pop	{r7, pc}
 8014da4:	0801fd1c 	.word	0x0801fd1c
 8014da8:	08020428 	.word	0x08020428
 8014dac:	0801fd60 	.word	0x0801fd60

08014db0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b084      	sub	sp, #16
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
 8014db8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8014dba:	683b      	ldr	r3, [r7, #0]
 8014dbc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d119      	bne.n	8014df8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8014dc4:	4b10      	ldr	r3, [pc, #64]	@ (8014e08 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8014dc6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8014dca:	4910      	ldr	r1, [pc, #64]	@ (8014e0c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014dcc:	4810      	ldr	r0, [pc, #64]	@ (8014e10 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8014dce:	f008 fafd 	bl	801d3cc <iprintf>

  while (pcb != NULL) {
 8014dd2:	e011      	b.n	8014df8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	681a      	ldr	r2, [r3, #0]
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	429a      	cmp	r2, r3
 8014dde:	d108      	bne.n	8014df2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	68db      	ldr	r3, [r3, #12]
 8014de4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8014de6:	68f8      	ldr	r0, [r7, #12]
 8014de8:	f7fe fd4e 	bl	8013888 <tcp_abort>
      pcb = next;
 8014dec:	68bb      	ldr	r3, [r7, #8]
 8014dee:	60fb      	str	r3, [r7, #12]
 8014df0:	e002      	b.n	8014df8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	68db      	ldr	r3, [r3, #12]
 8014df6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d1ea      	bne.n	8014dd4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8014dfe:	bf00      	nop
 8014e00:	bf00      	nop
 8014e02:	3710      	adds	r7, #16
 8014e04:	46bd      	mov	sp, r7
 8014e06:	bd80      	pop	{r7, pc}
 8014e08:	0801fd1c 	.word	0x0801fd1c
 8014e0c:	08020450 	.word	0x08020450
 8014e10:	0801fd60 	.word	0x0801fd60

08014e14 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b084      	sub	sp, #16
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
 8014e1c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d02a      	beq.n	8014e7a <tcp_netif_ip_addr_changed+0x66>
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d026      	beq.n	8014e7a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014e2c:	4b15      	ldr	r3, [pc, #84]	@ (8014e84 <tcp_netif_ip_addr_changed+0x70>)
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	4619      	mov	r1, r3
 8014e32:	6878      	ldr	r0, [r7, #4]
 8014e34:	f7ff ffbc 	bl	8014db0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014e38:	4b13      	ldr	r3, [pc, #76]	@ (8014e88 <tcp_netif_ip_addr_changed+0x74>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	4619      	mov	r1, r3
 8014e3e:	6878      	ldr	r0, [r7, #4]
 8014e40:	f7ff ffb6 	bl	8014db0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014e44:	683b      	ldr	r3, [r7, #0]
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d017      	beq.n	8014e7a <tcp_netif_ip_addr_changed+0x66>
 8014e4a:	683b      	ldr	r3, [r7, #0]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d013      	beq.n	8014e7a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014e52:	4b0e      	ldr	r3, [pc, #56]	@ (8014e8c <tcp_netif_ip_addr_changed+0x78>)
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	60fb      	str	r3, [r7, #12]
 8014e58:	e00c      	b.n	8014e74 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	681a      	ldr	r2, [r3, #0]
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	429a      	cmp	r2, r3
 8014e64:	d103      	bne.n	8014e6e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014e66:	683b      	ldr	r3, [r7, #0]
 8014e68:	681a      	ldr	r2, [r3, #0]
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	68db      	ldr	r3, [r3, #12]
 8014e72:	60fb      	str	r3, [r7, #12]
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d1ef      	bne.n	8014e5a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014e7a:	bf00      	nop
 8014e7c:	3710      	adds	r7, #16
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	bd80      	pop	{r7, pc}
 8014e82:	bf00      	nop
 8014e84:	2000e468 	.word	0x2000e468
 8014e88:	2000e460 	.word	0x2000e460
 8014e8c:	2000e464 	.word	0x2000e464

08014e90 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b082      	sub	sp, #8
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d007      	beq.n	8014eb0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	f7ff fb6f 	bl	8014588 <tcp_segs_free>
    pcb->ooseq = NULL;
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	2200      	movs	r2, #0
 8014eae:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8014eb0:	bf00      	nop
 8014eb2:	3708      	adds	r7, #8
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	bd80      	pop	{r7, pc}

08014eb8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8014eb8:	b590      	push	{r4, r7, lr}
 8014eba:	b08d      	sub	sp, #52	@ 0x34
 8014ebc:	af04      	add	r7, sp, #16
 8014ebe:	6078      	str	r0, [r7, #4]
 8014ec0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d105      	bne.n	8014ed4 <tcp_input+0x1c>
 8014ec8:	4b9b      	ldr	r3, [pc, #620]	@ (8015138 <tcp_input+0x280>)
 8014eca:	2283      	movs	r2, #131	@ 0x83
 8014ecc:	499b      	ldr	r1, [pc, #620]	@ (801513c <tcp_input+0x284>)
 8014ece:	489c      	ldr	r0, [pc, #624]	@ (8015140 <tcp_input+0x288>)
 8014ed0:	f008 fa7c 	bl	801d3cc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	685b      	ldr	r3, [r3, #4]
 8014ed8:	4a9a      	ldr	r2, [pc, #616]	@ (8015144 <tcp_input+0x28c>)
 8014eda:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	895b      	ldrh	r3, [r3, #10]
 8014ee0:	2b13      	cmp	r3, #19
 8014ee2:	f240 83d1 	bls.w	8015688 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014ee6:	4b98      	ldr	r3, [pc, #608]	@ (8015148 <tcp_input+0x290>)
 8014ee8:	695b      	ldr	r3, [r3, #20]
 8014eea:	4a97      	ldr	r2, [pc, #604]	@ (8015148 <tcp_input+0x290>)
 8014eec:	6812      	ldr	r2, [r2, #0]
 8014eee:	4611      	mov	r1, r2
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	f006 f9df 	bl	801b2b4 <ip4_addr_isbroadcast_u32>
 8014ef6:	4603      	mov	r3, r0
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	f040 83c7 	bne.w	801568c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8014efe:	4b92      	ldr	r3, [pc, #584]	@ (8015148 <tcp_input+0x290>)
 8014f00:	695b      	ldr	r3, [r3, #20]
 8014f02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014f06:	2be0      	cmp	r3, #224	@ 0xe0
 8014f08:	f000 83c0 	beq.w	801568c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8014f0c:	4b8d      	ldr	r3, [pc, #564]	@ (8015144 <tcp_input+0x28c>)
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	899b      	ldrh	r3, [r3, #12]
 8014f12:	b29b      	uxth	r3, r3
 8014f14:	4618      	mov	r0, r3
 8014f16:	f7fc fad9 	bl	80114cc <lwip_htons>
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	0b1b      	lsrs	r3, r3, #12
 8014f1e:	b29b      	uxth	r3, r3
 8014f20:	b2db      	uxtb	r3, r3
 8014f22:	009b      	lsls	r3, r3, #2
 8014f24:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8014f26:	7cbb      	ldrb	r3, [r7, #18]
 8014f28:	2b13      	cmp	r3, #19
 8014f2a:	f240 83b1 	bls.w	8015690 <tcp_input+0x7d8>
 8014f2e:	7cbb      	ldrb	r3, [r7, #18]
 8014f30:	b29a      	uxth	r2, r3
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	891b      	ldrh	r3, [r3, #8]
 8014f36:	429a      	cmp	r2, r3
 8014f38:	f200 83aa 	bhi.w	8015690 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8014f3c:	7cbb      	ldrb	r3, [r7, #18]
 8014f3e:	b29b      	uxth	r3, r3
 8014f40:	3b14      	subs	r3, #20
 8014f42:	b29a      	uxth	r2, r3
 8014f44:	4b81      	ldr	r3, [pc, #516]	@ (801514c <tcp_input+0x294>)
 8014f46:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8014f48:	4b81      	ldr	r3, [pc, #516]	@ (8015150 <tcp_input+0x298>)
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	895a      	ldrh	r2, [r3, #10]
 8014f52:	7cbb      	ldrb	r3, [r7, #18]
 8014f54:	b29b      	uxth	r3, r3
 8014f56:	429a      	cmp	r2, r3
 8014f58:	d309      	bcc.n	8014f6e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8014f5a:	4b7c      	ldr	r3, [pc, #496]	@ (801514c <tcp_input+0x294>)
 8014f5c:	881a      	ldrh	r2, [r3, #0]
 8014f5e:	4b7d      	ldr	r3, [pc, #500]	@ (8015154 <tcp_input+0x29c>)
 8014f60:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8014f62:	7cbb      	ldrb	r3, [r7, #18]
 8014f64:	4619      	mov	r1, r3
 8014f66:	6878      	ldr	r0, [r7, #4]
 8014f68:	f7fd fe18 	bl	8012b9c <pbuf_remove_header>
 8014f6c:	e04e      	b.n	801500c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d105      	bne.n	8014f82 <tcp_input+0xca>
 8014f76:	4b70      	ldr	r3, [pc, #448]	@ (8015138 <tcp_input+0x280>)
 8014f78:	22c2      	movs	r2, #194	@ 0xc2
 8014f7a:	4977      	ldr	r1, [pc, #476]	@ (8015158 <tcp_input+0x2a0>)
 8014f7c:	4870      	ldr	r0, [pc, #448]	@ (8015140 <tcp_input+0x288>)
 8014f7e:	f008 fa25 	bl	801d3cc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8014f82:	2114      	movs	r1, #20
 8014f84:	6878      	ldr	r0, [r7, #4]
 8014f86:	f7fd fe09 	bl	8012b9c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	895a      	ldrh	r2, [r3, #10]
 8014f8e:	4b71      	ldr	r3, [pc, #452]	@ (8015154 <tcp_input+0x29c>)
 8014f90:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8014f92:	4b6e      	ldr	r3, [pc, #440]	@ (801514c <tcp_input+0x294>)
 8014f94:	881a      	ldrh	r2, [r3, #0]
 8014f96:	4b6f      	ldr	r3, [pc, #444]	@ (8015154 <tcp_input+0x29c>)
 8014f98:	881b      	ldrh	r3, [r3, #0]
 8014f9a:	1ad3      	subs	r3, r2, r3
 8014f9c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8014f9e:	4b6d      	ldr	r3, [pc, #436]	@ (8015154 <tcp_input+0x29c>)
 8014fa0:	881b      	ldrh	r3, [r3, #0]
 8014fa2:	4619      	mov	r1, r3
 8014fa4:	6878      	ldr	r0, [r7, #4]
 8014fa6:	f7fd fdf9 	bl	8012b9c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	895b      	ldrh	r3, [r3, #10]
 8014fb0:	8a3a      	ldrh	r2, [r7, #16]
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	f200 836e 	bhi.w	8015694 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	685b      	ldr	r3, [r3, #4]
 8014fbe:	4a64      	ldr	r2, [pc, #400]	@ (8015150 <tcp_input+0x298>)
 8014fc0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	8a3a      	ldrh	r2, [r7, #16]
 8014fc8:	4611      	mov	r1, r2
 8014fca:	4618      	mov	r0, r3
 8014fcc:	f7fd fde6 	bl	8012b9c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	891a      	ldrh	r2, [r3, #8]
 8014fd4:	8a3b      	ldrh	r3, [r7, #16]
 8014fd6:	1ad3      	subs	r3, r2, r3
 8014fd8:	b29a      	uxth	r2, r3
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	895b      	ldrh	r3, [r3, #10]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d005      	beq.n	8014ff2 <tcp_input+0x13a>
 8014fe6:	4b54      	ldr	r3, [pc, #336]	@ (8015138 <tcp_input+0x280>)
 8014fe8:	22df      	movs	r2, #223	@ 0xdf
 8014fea:	495c      	ldr	r1, [pc, #368]	@ (801515c <tcp_input+0x2a4>)
 8014fec:	4854      	ldr	r0, [pc, #336]	@ (8015140 <tcp_input+0x288>)
 8014fee:	f008 f9ed 	bl	801d3cc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	891a      	ldrh	r2, [r3, #8]
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	891b      	ldrh	r3, [r3, #8]
 8014ffc:	429a      	cmp	r2, r3
 8014ffe:	d005      	beq.n	801500c <tcp_input+0x154>
 8015000:	4b4d      	ldr	r3, [pc, #308]	@ (8015138 <tcp_input+0x280>)
 8015002:	22e0      	movs	r2, #224	@ 0xe0
 8015004:	4956      	ldr	r1, [pc, #344]	@ (8015160 <tcp_input+0x2a8>)
 8015006:	484e      	ldr	r0, [pc, #312]	@ (8015140 <tcp_input+0x288>)
 8015008:	f008 f9e0 	bl	801d3cc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801500c:	4b4d      	ldr	r3, [pc, #308]	@ (8015144 <tcp_input+0x28c>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	881b      	ldrh	r3, [r3, #0]
 8015012:	b29b      	uxth	r3, r3
 8015014:	4a4b      	ldr	r2, [pc, #300]	@ (8015144 <tcp_input+0x28c>)
 8015016:	6814      	ldr	r4, [r2, #0]
 8015018:	4618      	mov	r0, r3
 801501a:	f7fc fa57 	bl	80114cc <lwip_htons>
 801501e:	4603      	mov	r3, r0
 8015020:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8015022:	4b48      	ldr	r3, [pc, #288]	@ (8015144 <tcp_input+0x28c>)
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	885b      	ldrh	r3, [r3, #2]
 8015028:	b29b      	uxth	r3, r3
 801502a:	4a46      	ldr	r2, [pc, #280]	@ (8015144 <tcp_input+0x28c>)
 801502c:	6814      	ldr	r4, [r2, #0]
 801502e:	4618      	mov	r0, r3
 8015030:	f7fc fa4c 	bl	80114cc <lwip_htons>
 8015034:	4603      	mov	r3, r0
 8015036:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8015038:	4b42      	ldr	r3, [pc, #264]	@ (8015144 <tcp_input+0x28c>)
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	685b      	ldr	r3, [r3, #4]
 801503e:	4a41      	ldr	r2, [pc, #260]	@ (8015144 <tcp_input+0x28c>)
 8015040:	6814      	ldr	r4, [r2, #0]
 8015042:	4618      	mov	r0, r3
 8015044:	f7fc fa58 	bl	80114f8 <lwip_htonl>
 8015048:	4603      	mov	r3, r0
 801504a:	6063      	str	r3, [r4, #4]
 801504c:	6863      	ldr	r3, [r4, #4]
 801504e:	4a45      	ldr	r2, [pc, #276]	@ (8015164 <tcp_input+0x2ac>)
 8015050:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8015052:	4b3c      	ldr	r3, [pc, #240]	@ (8015144 <tcp_input+0x28c>)
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	689b      	ldr	r3, [r3, #8]
 8015058:	4a3a      	ldr	r2, [pc, #232]	@ (8015144 <tcp_input+0x28c>)
 801505a:	6814      	ldr	r4, [r2, #0]
 801505c:	4618      	mov	r0, r3
 801505e:	f7fc fa4b 	bl	80114f8 <lwip_htonl>
 8015062:	4603      	mov	r3, r0
 8015064:	60a3      	str	r3, [r4, #8]
 8015066:	68a3      	ldr	r3, [r4, #8]
 8015068:	4a3f      	ldr	r2, [pc, #252]	@ (8015168 <tcp_input+0x2b0>)
 801506a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801506c:	4b35      	ldr	r3, [pc, #212]	@ (8015144 <tcp_input+0x28c>)
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	89db      	ldrh	r3, [r3, #14]
 8015072:	b29b      	uxth	r3, r3
 8015074:	4a33      	ldr	r2, [pc, #204]	@ (8015144 <tcp_input+0x28c>)
 8015076:	6814      	ldr	r4, [r2, #0]
 8015078:	4618      	mov	r0, r3
 801507a:	f7fc fa27 	bl	80114cc <lwip_htons>
 801507e:	4603      	mov	r3, r0
 8015080:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8015082:	4b30      	ldr	r3, [pc, #192]	@ (8015144 <tcp_input+0x28c>)
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	899b      	ldrh	r3, [r3, #12]
 8015088:	b29b      	uxth	r3, r3
 801508a:	4618      	mov	r0, r3
 801508c:	f7fc fa1e 	bl	80114cc <lwip_htons>
 8015090:	4603      	mov	r3, r0
 8015092:	b2db      	uxtb	r3, r3
 8015094:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015098:	b2da      	uxtb	r2, r3
 801509a:	4b34      	ldr	r3, [pc, #208]	@ (801516c <tcp_input+0x2b4>)
 801509c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	891a      	ldrh	r2, [r3, #8]
 80150a2:	4b33      	ldr	r3, [pc, #204]	@ (8015170 <tcp_input+0x2b8>)
 80150a4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80150a6:	4b31      	ldr	r3, [pc, #196]	@ (801516c <tcp_input+0x2b4>)
 80150a8:	781b      	ldrb	r3, [r3, #0]
 80150aa:	f003 0303 	and.w	r3, r3, #3
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d00c      	beq.n	80150cc <tcp_input+0x214>
    tcplen++;
 80150b2:	4b2f      	ldr	r3, [pc, #188]	@ (8015170 <tcp_input+0x2b8>)
 80150b4:	881b      	ldrh	r3, [r3, #0]
 80150b6:	3301      	adds	r3, #1
 80150b8:	b29a      	uxth	r2, r3
 80150ba:	4b2d      	ldr	r3, [pc, #180]	@ (8015170 <tcp_input+0x2b8>)
 80150bc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	891a      	ldrh	r2, [r3, #8]
 80150c2:	4b2b      	ldr	r3, [pc, #172]	@ (8015170 <tcp_input+0x2b8>)
 80150c4:	881b      	ldrh	r3, [r3, #0]
 80150c6:	429a      	cmp	r2, r3
 80150c8:	f200 82e6 	bhi.w	8015698 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80150cc:	2300      	movs	r3, #0
 80150ce:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80150d0:	4b28      	ldr	r3, [pc, #160]	@ (8015174 <tcp_input+0x2bc>)
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	61fb      	str	r3, [r7, #28]
 80150d6:	e09d      	b.n	8015214 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80150d8:	69fb      	ldr	r3, [r7, #28]
 80150da:	7d1b      	ldrb	r3, [r3, #20]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d105      	bne.n	80150ec <tcp_input+0x234>
 80150e0:	4b15      	ldr	r3, [pc, #84]	@ (8015138 <tcp_input+0x280>)
 80150e2:	22fb      	movs	r2, #251	@ 0xfb
 80150e4:	4924      	ldr	r1, [pc, #144]	@ (8015178 <tcp_input+0x2c0>)
 80150e6:	4816      	ldr	r0, [pc, #88]	@ (8015140 <tcp_input+0x288>)
 80150e8:	f008 f970 	bl	801d3cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80150ec:	69fb      	ldr	r3, [r7, #28]
 80150ee:	7d1b      	ldrb	r3, [r3, #20]
 80150f0:	2b0a      	cmp	r3, #10
 80150f2:	d105      	bne.n	8015100 <tcp_input+0x248>
 80150f4:	4b10      	ldr	r3, [pc, #64]	@ (8015138 <tcp_input+0x280>)
 80150f6:	22fc      	movs	r2, #252	@ 0xfc
 80150f8:	4920      	ldr	r1, [pc, #128]	@ (801517c <tcp_input+0x2c4>)
 80150fa:	4811      	ldr	r0, [pc, #68]	@ (8015140 <tcp_input+0x288>)
 80150fc:	f008 f966 	bl	801d3cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8015100:	69fb      	ldr	r3, [r7, #28]
 8015102:	7d1b      	ldrb	r3, [r3, #20]
 8015104:	2b01      	cmp	r3, #1
 8015106:	d105      	bne.n	8015114 <tcp_input+0x25c>
 8015108:	4b0b      	ldr	r3, [pc, #44]	@ (8015138 <tcp_input+0x280>)
 801510a:	22fd      	movs	r2, #253	@ 0xfd
 801510c:	491c      	ldr	r1, [pc, #112]	@ (8015180 <tcp_input+0x2c8>)
 801510e:	480c      	ldr	r0, [pc, #48]	@ (8015140 <tcp_input+0x288>)
 8015110:	f008 f95c 	bl	801d3cc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015114:	69fb      	ldr	r3, [r7, #28]
 8015116:	7a1b      	ldrb	r3, [r3, #8]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d033      	beq.n	8015184 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801511c:	69fb      	ldr	r3, [r7, #28]
 801511e:	7a1a      	ldrb	r2, [r3, #8]
 8015120:	4b09      	ldr	r3, [pc, #36]	@ (8015148 <tcp_input+0x290>)
 8015122:	685b      	ldr	r3, [r3, #4]
 8015124:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015128:	3301      	adds	r3, #1
 801512a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801512c:	429a      	cmp	r2, r3
 801512e:	d029      	beq.n	8015184 <tcp_input+0x2cc>
      prev = pcb;
 8015130:	69fb      	ldr	r3, [r7, #28]
 8015132:	61bb      	str	r3, [r7, #24]
      continue;
 8015134:	e06b      	b.n	801520e <tcp_input+0x356>
 8015136:	bf00      	nop
 8015138:	08020484 	.word	0x08020484
 801513c:	080204b8 	.word	0x080204b8
 8015140:	080204d0 	.word	0x080204d0
 8015144:	2000e484 	.word	0x2000e484
 8015148:	2000b35c 	.word	0x2000b35c
 801514c:	2000e488 	.word	0x2000e488
 8015150:	2000e48c 	.word	0x2000e48c
 8015154:	2000e48a 	.word	0x2000e48a
 8015158:	080204f8 	.word	0x080204f8
 801515c:	08020508 	.word	0x08020508
 8015160:	08020514 	.word	0x08020514
 8015164:	2000e494 	.word	0x2000e494
 8015168:	2000e498 	.word	0x2000e498
 801516c:	2000e4a0 	.word	0x2000e4a0
 8015170:	2000e49e 	.word	0x2000e49e
 8015174:	2000e468 	.word	0x2000e468
 8015178:	08020534 	.word	0x08020534
 801517c:	0802055c 	.word	0x0802055c
 8015180:	08020588 	.word	0x08020588
    }

    if (pcb->remote_port == tcphdr->src &&
 8015184:	69fb      	ldr	r3, [r7, #28]
 8015186:	8b1a      	ldrh	r2, [r3, #24]
 8015188:	4b72      	ldr	r3, [pc, #456]	@ (8015354 <tcp_input+0x49c>)
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	881b      	ldrh	r3, [r3, #0]
 801518e:	b29b      	uxth	r3, r3
 8015190:	429a      	cmp	r2, r3
 8015192:	d13a      	bne.n	801520a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8015194:	69fb      	ldr	r3, [r7, #28]
 8015196:	8ada      	ldrh	r2, [r3, #22]
 8015198:	4b6e      	ldr	r3, [pc, #440]	@ (8015354 <tcp_input+0x49c>)
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	885b      	ldrh	r3, [r3, #2]
 801519e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80151a0:	429a      	cmp	r2, r3
 80151a2:	d132      	bne.n	801520a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80151a4:	69fb      	ldr	r3, [r7, #28]
 80151a6:	685a      	ldr	r2, [r3, #4]
 80151a8:	4b6b      	ldr	r3, [pc, #428]	@ (8015358 <tcp_input+0x4a0>)
 80151aa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80151ac:	429a      	cmp	r2, r3
 80151ae:	d12c      	bne.n	801520a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80151b0:	69fb      	ldr	r3, [r7, #28]
 80151b2:	681a      	ldr	r2, [r3, #0]
 80151b4:	4b68      	ldr	r3, [pc, #416]	@ (8015358 <tcp_input+0x4a0>)
 80151b6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80151b8:	429a      	cmp	r2, r3
 80151ba:	d126      	bne.n	801520a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80151bc:	69fb      	ldr	r3, [r7, #28]
 80151be:	68db      	ldr	r3, [r3, #12]
 80151c0:	69fa      	ldr	r2, [r7, #28]
 80151c2:	429a      	cmp	r2, r3
 80151c4:	d106      	bne.n	80151d4 <tcp_input+0x31c>
 80151c6:	4b65      	ldr	r3, [pc, #404]	@ (801535c <tcp_input+0x4a4>)
 80151c8:	f240 120d 	movw	r2, #269	@ 0x10d
 80151cc:	4964      	ldr	r1, [pc, #400]	@ (8015360 <tcp_input+0x4a8>)
 80151ce:	4865      	ldr	r0, [pc, #404]	@ (8015364 <tcp_input+0x4ac>)
 80151d0:	f008 f8fc 	bl	801d3cc <iprintf>
      if (prev != NULL) {
 80151d4:	69bb      	ldr	r3, [r7, #24]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d00a      	beq.n	80151f0 <tcp_input+0x338>
        prev->next = pcb->next;
 80151da:	69fb      	ldr	r3, [r7, #28]
 80151dc:	68da      	ldr	r2, [r3, #12]
 80151de:	69bb      	ldr	r3, [r7, #24]
 80151e0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80151e2:	4b61      	ldr	r3, [pc, #388]	@ (8015368 <tcp_input+0x4b0>)
 80151e4:	681a      	ldr	r2, [r3, #0]
 80151e6:	69fb      	ldr	r3, [r7, #28]
 80151e8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80151ea:	4a5f      	ldr	r2, [pc, #380]	@ (8015368 <tcp_input+0x4b0>)
 80151ec:	69fb      	ldr	r3, [r7, #28]
 80151ee:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80151f0:	69fb      	ldr	r3, [r7, #28]
 80151f2:	68db      	ldr	r3, [r3, #12]
 80151f4:	69fa      	ldr	r2, [r7, #28]
 80151f6:	429a      	cmp	r2, r3
 80151f8:	d111      	bne.n	801521e <tcp_input+0x366>
 80151fa:	4b58      	ldr	r3, [pc, #352]	@ (801535c <tcp_input+0x4a4>)
 80151fc:	f240 1215 	movw	r2, #277	@ 0x115
 8015200:	495a      	ldr	r1, [pc, #360]	@ (801536c <tcp_input+0x4b4>)
 8015202:	4858      	ldr	r0, [pc, #352]	@ (8015364 <tcp_input+0x4ac>)
 8015204:	f008 f8e2 	bl	801d3cc <iprintf>
      break;
 8015208:	e009      	b.n	801521e <tcp_input+0x366>
    }
    prev = pcb;
 801520a:	69fb      	ldr	r3, [r7, #28]
 801520c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801520e:	69fb      	ldr	r3, [r7, #28]
 8015210:	68db      	ldr	r3, [r3, #12]
 8015212:	61fb      	str	r3, [r7, #28]
 8015214:	69fb      	ldr	r3, [r7, #28]
 8015216:	2b00      	cmp	r3, #0
 8015218:	f47f af5e 	bne.w	80150d8 <tcp_input+0x220>
 801521c:	e000      	b.n	8015220 <tcp_input+0x368>
      break;
 801521e:	bf00      	nop
  }

  if (pcb == NULL) {
 8015220:	69fb      	ldr	r3, [r7, #28]
 8015222:	2b00      	cmp	r3, #0
 8015224:	f040 80aa 	bne.w	801537c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015228:	4b51      	ldr	r3, [pc, #324]	@ (8015370 <tcp_input+0x4b8>)
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	61fb      	str	r3, [r7, #28]
 801522e:	e03f      	b.n	80152b0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015230:	69fb      	ldr	r3, [r7, #28]
 8015232:	7d1b      	ldrb	r3, [r3, #20]
 8015234:	2b0a      	cmp	r3, #10
 8015236:	d006      	beq.n	8015246 <tcp_input+0x38e>
 8015238:	4b48      	ldr	r3, [pc, #288]	@ (801535c <tcp_input+0x4a4>)
 801523a:	f240 121f 	movw	r2, #287	@ 0x11f
 801523e:	494d      	ldr	r1, [pc, #308]	@ (8015374 <tcp_input+0x4bc>)
 8015240:	4848      	ldr	r0, [pc, #288]	@ (8015364 <tcp_input+0x4ac>)
 8015242:	f008 f8c3 	bl	801d3cc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015246:	69fb      	ldr	r3, [r7, #28]
 8015248:	7a1b      	ldrb	r3, [r3, #8]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d009      	beq.n	8015262 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801524e:	69fb      	ldr	r3, [r7, #28]
 8015250:	7a1a      	ldrb	r2, [r3, #8]
 8015252:	4b41      	ldr	r3, [pc, #260]	@ (8015358 <tcp_input+0x4a0>)
 8015254:	685b      	ldr	r3, [r3, #4]
 8015256:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801525a:	3301      	adds	r3, #1
 801525c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801525e:	429a      	cmp	r2, r3
 8015260:	d122      	bne.n	80152a8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8015262:	69fb      	ldr	r3, [r7, #28]
 8015264:	8b1a      	ldrh	r2, [r3, #24]
 8015266:	4b3b      	ldr	r3, [pc, #236]	@ (8015354 <tcp_input+0x49c>)
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	881b      	ldrh	r3, [r3, #0]
 801526c:	b29b      	uxth	r3, r3
 801526e:	429a      	cmp	r2, r3
 8015270:	d11b      	bne.n	80152aa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8015272:	69fb      	ldr	r3, [r7, #28]
 8015274:	8ada      	ldrh	r2, [r3, #22]
 8015276:	4b37      	ldr	r3, [pc, #220]	@ (8015354 <tcp_input+0x49c>)
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	885b      	ldrh	r3, [r3, #2]
 801527c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801527e:	429a      	cmp	r2, r3
 8015280:	d113      	bne.n	80152aa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015282:	69fb      	ldr	r3, [r7, #28]
 8015284:	685a      	ldr	r2, [r3, #4]
 8015286:	4b34      	ldr	r3, [pc, #208]	@ (8015358 <tcp_input+0x4a0>)
 8015288:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801528a:	429a      	cmp	r2, r3
 801528c:	d10d      	bne.n	80152aa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801528e:	69fb      	ldr	r3, [r7, #28]
 8015290:	681a      	ldr	r2, [r3, #0]
 8015292:	4b31      	ldr	r3, [pc, #196]	@ (8015358 <tcp_input+0x4a0>)
 8015294:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015296:	429a      	cmp	r2, r3
 8015298:	d107      	bne.n	80152aa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801529a:	69f8      	ldr	r0, [r7, #28]
 801529c:	f000 fb56 	bl	801594c <tcp_timewait_input>
        }
        pbuf_free(p);
 80152a0:	6878      	ldr	r0, [r7, #4]
 80152a2:	f7fd fd01 	bl	8012ca8 <pbuf_free>
        return;
 80152a6:	e1fd      	b.n	80156a4 <tcp_input+0x7ec>
        continue;
 80152a8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80152aa:	69fb      	ldr	r3, [r7, #28]
 80152ac:	68db      	ldr	r3, [r3, #12]
 80152ae:	61fb      	str	r3, [r7, #28]
 80152b0:	69fb      	ldr	r3, [r7, #28]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d1bc      	bne.n	8015230 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80152b6:	2300      	movs	r3, #0
 80152b8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80152ba:	4b2f      	ldr	r3, [pc, #188]	@ (8015378 <tcp_input+0x4c0>)
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	617b      	str	r3, [r7, #20]
 80152c0:	e02a      	b.n	8015318 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80152c2:	697b      	ldr	r3, [r7, #20]
 80152c4:	7a1b      	ldrb	r3, [r3, #8]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d00c      	beq.n	80152e4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80152ca:	697b      	ldr	r3, [r7, #20]
 80152cc:	7a1a      	ldrb	r2, [r3, #8]
 80152ce:	4b22      	ldr	r3, [pc, #136]	@ (8015358 <tcp_input+0x4a0>)
 80152d0:	685b      	ldr	r3, [r3, #4]
 80152d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80152d6:	3301      	adds	r3, #1
 80152d8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80152da:	429a      	cmp	r2, r3
 80152dc:	d002      	beq.n	80152e4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80152de:	697b      	ldr	r3, [r7, #20]
 80152e0:	61bb      	str	r3, [r7, #24]
        continue;
 80152e2:	e016      	b.n	8015312 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80152e4:	697b      	ldr	r3, [r7, #20]
 80152e6:	8ada      	ldrh	r2, [r3, #22]
 80152e8:	4b1a      	ldr	r3, [pc, #104]	@ (8015354 <tcp_input+0x49c>)
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	885b      	ldrh	r3, [r3, #2]
 80152ee:	b29b      	uxth	r3, r3
 80152f0:	429a      	cmp	r2, r3
 80152f2:	d10c      	bne.n	801530e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80152f4:	697b      	ldr	r3, [r7, #20]
 80152f6:	681a      	ldr	r2, [r3, #0]
 80152f8:	4b17      	ldr	r3, [pc, #92]	@ (8015358 <tcp_input+0x4a0>)
 80152fa:	695b      	ldr	r3, [r3, #20]
 80152fc:	429a      	cmp	r2, r3
 80152fe:	d00f      	beq.n	8015320 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8015300:	697b      	ldr	r3, [r7, #20]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d00d      	beq.n	8015322 <tcp_input+0x46a>
 8015306:	697b      	ldr	r3, [r7, #20]
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d009      	beq.n	8015322 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801530e:	697b      	ldr	r3, [r7, #20]
 8015310:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015312:	697b      	ldr	r3, [r7, #20]
 8015314:	68db      	ldr	r3, [r3, #12]
 8015316:	617b      	str	r3, [r7, #20]
 8015318:	697b      	ldr	r3, [r7, #20]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d1d1      	bne.n	80152c2 <tcp_input+0x40a>
 801531e:	e000      	b.n	8015322 <tcp_input+0x46a>
            break;
 8015320:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8015322:	697b      	ldr	r3, [r7, #20]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d029      	beq.n	801537c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8015328:	69bb      	ldr	r3, [r7, #24]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d00a      	beq.n	8015344 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801532e:	697b      	ldr	r3, [r7, #20]
 8015330:	68da      	ldr	r2, [r3, #12]
 8015332:	69bb      	ldr	r3, [r7, #24]
 8015334:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8015336:	4b10      	ldr	r3, [pc, #64]	@ (8015378 <tcp_input+0x4c0>)
 8015338:	681a      	ldr	r2, [r3, #0]
 801533a:	697b      	ldr	r3, [r7, #20]
 801533c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801533e:	4a0e      	ldr	r2, [pc, #56]	@ (8015378 <tcp_input+0x4c0>)
 8015340:	697b      	ldr	r3, [r7, #20]
 8015342:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8015344:	6978      	ldr	r0, [r7, #20]
 8015346:	f000 fa03 	bl	8015750 <tcp_listen_input>
      }
      pbuf_free(p);
 801534a:	6878      	ldr	r0, [r7, #4]
 801534c:	f7fd fcac 	bl	8012ca8 <pbuf_free>
      return;
 8015350:	e1a8      	b.n	80156a4 <tcp_input+0x7ec>
 8015352:	bf00      	nop
 8015354:	2000e484 	.word	0x2000e484
 8015358:	2000b35c 	.word	0x2000b35c
 801535c:	08020484 	.word	0x08020484
 8015360:	080205b0 	.word	0x080205b0
 8015364:	080204d0 	.word	0x080204d0
 8015368:	2000e468 	.word	0x2000e468
 801536c:	080205dc 	.word	0x080205dc
 8015370:	2000e46c 	.word	0x2000e46c
 8015374:	08020608 	.word	0x08020608
 8015378:	2000e464 	.word	0x2000e464
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801537c:	69fb      	ldr	r3, [r7, #28]
 801537e:	2b00      	cmp	r3, #0
 8015380:	f000 8158 	beq.w	8015634 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8015384:	4b95      	ldr	r3, [pc, #596]	@ (80155dc <tcp_input+0x724>)
 8015386:	2200      	movs	r2, #0
 8015388:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	891a      	ldrh	r2, [r3, #8]
 801538e:	4b93      	ldr	r3, [pc, #588]	@ (80155dc <tcp_input+0x724>)
 8015390:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8015392:	4a92      	ldr	r2, [pc, #584]	@ (80155dc <tcp_input+0x724>)
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8015398:	4b91      	ldr	r3, [pc, #580]	@ (80155e0 <tcp_input+0x728>)
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	4a8f      	ldr	r2, [pc, #572]	@ (80155dc <tcp_input+0x724>)
 801539e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80153a0:	4b90      	ldr	r3, [pc, #576]	@ (80155e4 <tcp_input+0x72c>)
 80153a2:	2200      	movs	r2, #0
 80153a4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80153a6:	4b90      	ldr	r3, [pc, #576]	@ (80155e8 <tcp_input+0x730>)
 80153a8:	2200      	movs	r2, #0
 80153aa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80153ac:	4b8f      	ldr	r3, [pc, #572]	@ (80155ec <tcp_input+0x734>)
 80153ae:	2200      	movs	r2, #0
 80153b0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80153b2:	4b8f      	ldr	r3, [pc, #572]	@ (80155f0 <tcp_input+0x738>)
 80153b4:	781b      	ldrb	r3, [r3, #0]
 80153b6:	f003 0308 	and.w	r3, r3, #8
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d006      	beq.n	80153cc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	7b5b      	ldrb	r3, [r3, #13]
 80153c2:	f043 0301 	orr.w	r3, r3, #1
 80153c6:	b2da      	uxtb	r2, r3
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80153cc:	69fb      	ldr	r3, [r7, #28]
 80153ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d017      	beq.n	8015404 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80153d4:	69f8      	ldr	r0, [r7, #28]
 80153d6:	f7ff f85b 	bl	8014490 <tcp_process_refused_data>
 80153da:	4603      	mov	r3, r0
 80153dc:	f113 0f0d 	cmn.w	r3, #13
 80153e0:	d007      	beq.n	80153f2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80153e2:	69fb      	ldr	r3, [r7, #28]
 80153e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d00c      	beq.n	8015404 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80153ea:	4b82      	ldr	r3, [pc, #520]	@ (80155f4 <tcp_input+0x73c>)
 80153ec:	881b      	ldrh	r3, [r3, #0]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d008      	beq.n	8015404 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80153f2:	69fb      	ldr	r3, [r7, #28]
 80153f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	f040 80e3 	bne.w	80155c2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80153fc:	69f8      	ldr	r0, [r7, #28]
 80153fe:	f003 fdff 	bl	8019000 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8015402:	e0de      	b.n	80155c2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8015404:	4a7c      	ldr	r2, [pc, #496]	@ (80155f8 <tcp_input+0x740>)
 8015406:	69fb      	ldr	r3, [r7, #28]
 8015408:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801540a:	69f8      	ldr	r0, [r7, #28]
 801540c:	f000 fb18 	bl	8015a40 <tcp_process>
 8015410:	4603      	mov	r3, r0
 8015412:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8015414:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015418:	f113 0f0d 	cmn.w	r3, #13
 801541c:	f000 80d3 	beq.w	80155c6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8015420:	4b71      	ldr	r3, [pc, #452]	@ (80155e8 <tcp_input+0x730>)
 8015422:	781b      	ldrb	r3, [r3, #0]
 8015424:	f003 0308 	and.w	r3, r3, #8
 8015428:	2b00      	cmp	r3, #0
 801542a:	d015      	beq.n	8015458 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801542c:	69fb      	ldr	r3, [r7, #28]
 801542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015432:	2b00      	cmp	r3, #0
 8015434:	d008      	beq.n	8015448 <tcp_input+0x590>
 8015436:	69fb      	ldr	r3, [r7, #28]
 8015438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801543c:	69fa      	ldr	r2, [r7, #28]
 801543e:	6912      	ldr	r2, [r2, #16]
 8015440:	f06f 010d 	mvn.w	r1, #13
 8015444:	4610      	mov	r0, r2
 8015446:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015448:	69f9      	ldr	r1, [r7, #28]
 801544a:	486c      	ldr	r0, [pc, #432]	@ (80155fc <tcp_input+0x744>)
 801544c:	f7ff fbbc 	bl	8014bc8 <tcp_pcb_remove>
        tcp_free(pcb);
 8015450:	69f8      	ldr	r0, [r7, #28]
 8015452:	f7fd fed5 	bl	8013200 <tcp_free>
 8015456:	e0da      	b.n	801560e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8015458:	2300      	movs	r3, #0
 801545a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801545c:	4b63      	ldr	r3, [pc, #396]	@ (80155ec <tcp_input+0x734>)
 801545e:	881b      	ldrh	r3, [r3, #0]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d01d      	beq.n	80154a0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8015464:	4b61      	ldr	r3, [pc, #388]	@ (80155ec <tcp_input+0x734>)
 8015466:	881b      	ldrh	r3, [r3, #0]
 8015468:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801546a:	69fb      	ldr	r3, [r7, #28]
 801546c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015470:	2b00      	cmp	r3, #0
 8015472:	d00a      	beq.n	801548a <tcp_input+0x5d2>
 8015474:	69fb      	ldr	r3, [r7, #28]
 8015476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801547a:	69fa      	ldr	r2, [r7, #28]
 801547c:	6910      	ldr	r0, [r2, #16]
 801547e:	89fa      	ldrh	r2, [r7, #14]
 8015480:	69f9      	ldr	r1, [r7, #28]
 8015482:	4798      	blx	r3
 8015484:	4603      	mov	r3, r0
 8015486:	74fb      	strb	r3, [r7, #19]
 8015488:	e001      	b.n	801548e <tcp_input+0x5d6>
 801548a:	2300      	movs	r3, #0
 801548c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801548e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015492:	f113 0f0d 	cmn.w	r3, #13
 8015496:	f000 8098 	beq.w	80155ca <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801549a:	4b54      	ldr	r3, [pc, #336]	@ (80155ec <tcp_input+0x734>)
 801549c:	2200      	movs	r2, #0
 801549e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80154a0:	69f8      	ldr	r0, [r7, #28]
 80154a2:	f000 f915 	bl	80156d0 <tcp_input_delayed_close>
 80154a6:	4603      	mov	r3, r0
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	f040 8090 	bne.w	80155ce <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80154ae:	4b4d      	ldr	r3, [pc, #308]	@ (80155e4 <tcp_input+0x72c>)
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d041      	beq.n	801553a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80154b6:	69fb      	ldr	r3, [r7, #28]
 80154b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d006      	beq.n	80154cc <tcp_input+0x614>
 80154be:	4b50      	ldr	r3, [pc, #320]	@ (8015600 <tcp_input+0x748>)
 80154c0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80154c4:	494f      	ldr	r1, [pc, #316]	@ (8015604 <tcp_input+0x74c>)
 80154c6:	4850      	ldr	r0, [pc, #320]	@ (8015608 <tcp_input+0x750>)
 80154c8:	f007 ff80 	bl	801d3cc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80154cc:	69fb      	ldr	r3, [r7, #28]
 80154ce:	8b5b      	ldrh	r3, [r3, #26]
 80154d0:	f003 0310 	and.w	r3, r3, #16
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d008      	beq.n	80154ea <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80154d8:	4b42      	ldr	r3, [pc, #264]	@ (80155e4 <tcp_input+0x72c>)
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	4618      	mov	r0, r3
 80154de:	f7fd fbe3 	bl	8012ca8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80154e2:	69f8      	ldr	r0, [r7, #28]
 80154e4:	f7fe f9d0 	bl	8013888 <tcp_abort>
            goto aborted;
 80154e8:	e091      	b.n	801560e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80154ea:	69fb      	ldr	r3, [r7, #28]
 80154ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d00c      	beq.n	801550e <tcp_input+0x656>
 80154f4:	69fb      	ldr	r3, [r7, #28]
 80154f6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80154fa:	69fb      	ldr	r3, [r7, #28]
 80154fc:	6918      	ldr	r0, [r3, #16]
 80154fe:	4b39      	ldr	r3, [pc, #228]	@ (80155e4 <tcp_input+0x72c>)
 8015500:	681a      	ldr	r2, [r3, #0]
 8015502:	2300      	movs	r3, #0
 8015504:	69f9      	ldr	r1, [r7, #28]
 8015506:	47a0      	blx	r4
 8015508:	4603      	mov	r3, r0
 801550a:	74fb      	strb	r3, [r7, #19]
 801550c:	e008      	b.n	8015520 <tcp_input+0x668>
 801550e:	4b35      	ldr	r3, [pc, #212]	@ (80155e4 <tcp_input+0x72c>)
 8015510:	681a      	ldr	r2, [r3, #0]
 8015512:	2300      	movs	r3, #0
 8015514:	69f9      	ldr	r1, [r7, #28]
 8015516:	2000      	movs	r0, #0
 8015518:	f7ff f890 	bl	801463c <tcp_recv_null>
 801551c:	4603      	mov	r3, r0
 801551e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8015520:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015524:	f113 0f0d 	cmn.w	r3, #13
 8015528:	d053      	beq.n	80155d2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801552a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d003      	beq.n	801553a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8015532:	4b2c      	ldr	r3, [pc, #176]	@ (80155e4 <tcp_input+0x72c>)
 8015534:	681a      	ldr	r2, [r3, #0]
 8015536:	69fb      	ldr	r3, [r7, #28]
 8015538:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801553a:	4b2b      	ldr	r3, [pc, #172]	@ (80155e8 <tcp_input+0x730>)
 801553c:	781b      	ldrb	r3, [r3, #0]
 801553e:	f003 0320 	and.w	r3, r3, #32
 8015542:	2b00      	cmp	r3, #0
 8015544:	d030      	beq.n	80155a8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8015546:	69fb      	ldr	r3, [r7, #28]
 8015548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801554a:	2b00      	cmp	r3, #0
 801554c:	d009      	beq.n	8015562 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801554e:	69fb      	ldr	r3, [r7, #28]
 8015550:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015552:	7b5a      	ldrb	r2, [r3, #13]
 8015554:	69fb      	ldr	r3, [r7, #28]
 8015556:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015558:	f042 0220 	orr.w	r2, r2, #32
 801555c:	b2d2      	uxtb	r2, r2
 801555e:	735a      	strb	r2, [r3, #13]
 8015560:	e022      	b.n	80155a8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015562:	69fb      	ldr	r3, [r7, #28]
 8015564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015566:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801556a:	d005      	beq.n	8015578 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801556c:	69fb      	ldr	r3, [r7, #28]
 801556e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015570:	3301      	adds	r3, #1
 8015572:	b29a      	uxth	r2, r3
 8015574:	69fb      	ldr	r3, [r7, #28]
 8015576:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8015578:	69fb      	ldr	r3, [r7, #28]
 801557a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801557e:	2b00      	cmp	r3, #0
 8015580:	d00b      	beq.n	801559a <tcp_input+0x6e2>
 8015582:	69fb      	ldr	r3, [r7, #28]
 8015584:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015588:	69fb      	ldr	r3, [r7, #28]
 801558a:	6918      	ldr	r0, [r3, #16]
 801558c:	2300      	movs	r3, #0
 801558e:	2200      	movs	r2, #0
 8015590:	69f9      	ldr	r1, [r7, #28]
 8015592:	47a0      	blx	r4
 8015594:	4603      	mov	r3, r0
 8015596:	74fb      	strb	r3, [r7, #19]
 8015598:	e001      	b.n	801559e <tcp_input+0x6e6>
 801559a:	2300      	movs	r3, #0
 801559c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801559e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80155a2:	f113 0f0d 	cmn.w	r3, #13
 80155a6:	d016      	beq.n	80155d6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80155a8:	4b13      	ldr	r3, [pc, #76]	@ (80155f8 <tcp_input+0x740>)
 80155aa:	2200      	movs	r2, #0
 80155ac:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80155ae:	69f8      	ldr	r0, [r7, #28]
 80155b0:	f000 f88e 	bl	80156d0 <tcp_input_delayed_close>
 80155b4:	4603      	mov	r3, r0
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d128      	bne.n	801560c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80155ba:	69f8      	ldr	r0, [r7, #28]
 80155bc:	f002 ff1a 	bl	80183f4 <tcp_output>
 80155c0:	e025      	b.n	801560e <tcp_input+0x756>
        goto aborted;
 80155c2:	bf00      	nop
 80155c4:	e023      	b.n	801560e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80155c6:	bf00      	nop
 80155c8:	e021      	b.n	801560e <tcp_input+0x756>
              goto aborted;
 80155ca:	bf00      	nop
 80155cc:	e01f      	b.n	801560e <tcp_input+0x756>
          goto aborted;
 80155ce:	bf00      	nop
 80155d0:	e01d      	b.n	801560e <tcp_input+0x756>
            goto aborted;
 80155d2:	bf00      	nop
 80155d4:	e01b      	b.n	801560e <tcp_input+0x756>
              goto aborted;
 80155d6:	bf00      	nop
 80155d8:	e019      	b.n	801560e <tcp_input+0x756>
 80155da:	bf00      	nop
 80155dc:	2000e474 	.word	0x2000e474
 80155e0:	2000e484 	.word	0x2000e484
 80155e4:	2000e4a4 	.word	0x2000e4a4
 80155e8:	2000e4a1 	.word	0x2000e4a1
 80155ec:	2000e49c 	.word	0x2000e49c
 80155f0:	2000e4a0 	.word	0x2000e4a0
 80155f4:	2000e49e 	.word	0x2000e49e
 80155f8:	2000e4a8 	.word	0x2000e4a8
 80155fc:	2000e468 	.word	0x2000e468
 8015600:	08020484 	.word	0x08020484
 8015604:	08020638 	.word	0x08020638
 8015608:	080204d0 	.word	0x080204d0
          goto aborted;
 801560c:	bf00      	nop
    tcp_input_pcb = NULL;
 801560e:	4b27      	ldr	r3, [pc, #156]	@ (80156ac <tcp_input+0x7f4>)
 8015610:	2200      	movs	r2, #0
 8015612:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8015614:	4b26      	ldr	r3, [pc, #152]	@ (80156b0 <tcp_input+0x7f8>)
 8015616:	2200      	movs	r2, #0
 8015618:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801561a:	4b26      	ldr	r3, [pc, #152]	@ (80156b4 <tcp_input+0x7fc>)
 801561c:	685b      	ldr	r3, [r3, #4]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d03f      	beq.n	80156a2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8015622:	4b24      	ldr	r3, [pc, #144]	@ (80156b4 <tcp_input+0x7fc>)
 8015624:	685b      	ldr	r3, [r3, #4]
 8015626:	4618      	mov	r0, r3
 8015628:	f7fd fb3e 	bl	8012ca8 <pbuf_free>
      inseg.p = NULL;
 801562c:	4b21      	ldr	r3, [pc, #132]	@ (80156b4 <tcp_input+0x7fc>)
 801562e:	2200      	movs	r2, #0
 8015630:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8015632:	e036      	b.n	80156a2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8015634:	4b20      	ldr	r3, [pc, #128]	@ (80156b8 <tcp_input+0x800>)
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	899b      	ldrh	r3, [r3, #12]
 801563a:	b29b      	uxth	r3, r3
 801563c:	4618      	mov	r0, r3
 801563e:	f7fb ff45 	bl	80114cc <lwip_htons>
 8015642:	4603      	mov	r3, r0
 8015644:	b2db      	uxtb	r3, r3
 8015646:	f003 0304 	and.w	r3, r3, #4
 801564a:	2b00      	cmp	r3, #0
 801564c:	d118      	bne.n	8015680 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801564e:	4b1b      	ldr	r3, [pc, #108]	@ (80156bc <tcp_input+0x804>)
 8015650:	6819      	ldr	r1, [r3, #0]
 8015652:	4b1b      	ldr	r3, [pc, #108]	@ (80156c0 <tcp_input+0x808>)
 8015654:	881b      	ldrh	r3, [r3, #0]
 8015656:	461a      	mov	r2, r3
 8015658:	4b1a      	ldr	r3, [pc, #104]	@ (80156c4 <tcp_input+0x80c>)
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801565e:	4b16      	ldr	r3, [pc, #88]	@ (80156b8 <tcp_input+0x800>)
 8015660:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015662:	885b      	ldrh	r3, [r3, #2]
 8015664:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015666:	4a14      	ldr	r2, [pc, #80]	@ (80156b8 <tcp_input+0x800>)
 8015668:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801566a:	8812      	ldrh	r2, [r2, #0]
 801566c:	b292      	uxth	r2, r2
 801566e:	9202      	str	r2, [sp, #8]
 8015670:	9301      	str	r3, [sp, #4]
 8015672:	4b15      	ldr	r3, [pc, #84]	@ (80156c8 <tcp_input+0x810>)
 8015674:	9300      	str	r3, [sp, #0]
 8015676:	4b15      	ldr	r3, [pc, #84]	@ (80156cc <tcp_input+0x814>)
 8015678:	4602      	mov	r2, r0
 801567a:	2000      	movs	r0, #0
 801567c:	f003 fc6e 	bl	8018f5c <tcp_rst>
    pbuf_free(p);
 8015680:	6878      	ldr	r0, [r7, #4]
 8015682:	f7fd fb11 	bl	8012ca8 <pbuf_free>
  return;
 8015686:	e00c      	b.n	80156a2 <tcp_input+0x7ea>
    goto dropped;
 8015688:	bf00      	nop
 801568a:	e006      	b.n	801569a <tcp_input+0x7e2>
    goto dropped;
 801568c:	bf00      	nop
 801568e:	e004      	b.n	801569a <tcp_input+0x7e2>
    goto dropped;
 8015690:	bf00      	nop
 8015692:	e002      	b.n	801569a <tcp_input+0x7e2>
      goto dropped;
 8015694:	bf00      	nop
 8015696:	e000      	b.n	801569a <tcp_input+0x7e2>
      goto dropped;
 8015698:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801569a:	6878      	ldr	r0, [r7, #4]
 801569c:	f7fd fb04 	bl	8012ca8 <pbuf_free>
 80156a0:	e000      	b.n	80156a4 <tcp_input+0x7ec>
  return;
 80156a2:	bf00      	nop
}
 80156a4:	3724      	adds	r7, #36	@ 0x24
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd90      	pop	{r4, r7, pc}
 80156aa:	bf00      	nop
 80156ac:	2000e4a8 	.word	0x2000e4a8
 80156b0:	2000e4a4 	.word	0x2000e4a4
 80156b4:	2000e474 	.word	0x2000e474
 80156b8:	2000e484 	.word	0x2000e484
 80156bc:	2000e498 	.word	0x2000e498
 80156c0:	2000e49e 	.word	0x2000e49e
 80156c4:	2000e494 	.word	0x2000e494
 80156c8:	2000b36c 	.word	0x2000b36c
 80156cc:	2000b370 	.word	0x2000b370

080156d0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b082      	sub	sp, #8
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d106      	bne.n	80156ec <tcp_input_delayed_close+0x1c>
 80156de:	4b17      	ldr	r3, [pc, #92]	@ (801573c <tcp_input_delayed_close+0x6c>)
 80156e0:	f240 225a 	movw	r2, #602	@ 0x25a
 80156e4:	4916      	ldr	r1, [pc, #88]	@ (8015740 <tcp_input_delayed_close+0x70>)
 80156e6:	4817      	ldr	r0, [pc, #92]	@ (8015744 <tcp_input_delayed_close+0x74>)
 80156e8:	f007 fe70 	bl	801d3cc <iprintf>

  if (recv_flags & TF_CLOSED) {
 80156ec:	4b16      	ldr	r3, [pc, #88]	@ (8015748 <tcp_input_delayed_close+0x78>)
 80156ee:	781b      	ldrb	r3, [r3, #0]
 80156f0:	f003 0310 	and.w	r3, r3, #16
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d01c      	beq.n	8015732 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	8b5b      	ldrh	r3, [r3, #26]
 80156fc:	f003 0310 	and.w	r3, r3, #16
 8015700:	2b00      	cmp	r3, #0
 8015702:	d10d      	bne.n	8015720 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801570a:	2b00      	cmp	r3, #0
 801570c:	d008      	beq.n	8015720 <tcp_input_delayed_close+0x50>
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015714:	687a      	ldr	r2, [r7, #4]
 8015716:	6912      	ldr	r2, [r2, #16]
 8015718:	f06f 010e 	mvn.w	r1, #14
 801571c:	4610      	mov	r0, r2
 801571e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015720:	6879      	ldr	r1, [r7, #4]
 8015722:	480a      	ldr	r0, [pc, #40]	@ (801574c <tcp_input_delayed_close+0x7c>)
 8015724:	f7ff fa50 	bl	8014bc8 <tcp_pcb_remove>
    tcp_free(pcb);
 8015728:	6878      	ldr	r0, [r7, #4]
 801572a:	f7fd fd69 	bl	8013200 <tcp_free>
    return 1;
 801572e:	2301      	movs	r3, #1
 8015730:	e000      	b.n	8015734 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8015732:	2300      	movs	r3, #0
}
 8015734:	4618      	mov	r0, r3
 8015736:	3708      	adds	r7, #8
 8015738:	46bd      	mov	sp, r7
 801573a:	bd80      	pop	{r7, pc}
 801573c:	08020484 	.word	0x08020484
 8015740:	08020654 	.word	0x08020654
 8015744:	080204d0 	.word	0x080204d0
 8015748:	2000e4a1 	.word	0x2000e4a1
 801574c:	2000e468 	.word	0x2000e468

08015750 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8015750:	b590      	push	{r4, r7, lr}
 8015752:	b08b      	sub	sp, #44	@ 0x2c
 8015754:	af04      	add	r7, sp, #16
 8015756:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8015758:	4b6f      	ldr	r3, [pc, #444]	@ (8015918 <tcp_listen_input+0x1c8>)
 801575a:	781b      	ldrb	r3, [r3, #0]
 801575c:	f003 0304 	and.w	r3, r3, #4
 8015760:	2b00      	cmp	r3, #0
 8015762:	f040 80d2 	bne.w	801590a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d106      	bne.n	801577a <tcp_listen_input+0x2a>
 801576c:	4b6b      	ldr	r3, [pc, #428]	@ (801591c <tcp_listen_input+0x1cc>)
 801576e:	f240 2281 	movw	r2, #641	@ 0x281
 8015772:	496b      	ldr	r1, [pc, #428]	@ (8015920 <tcp_listen_input+0x1d0>)
 8015774:	486b      	ldr	r0, [pc, #428]	@ (8015924 <tcp_listen_input+0x1d4>)
 8015776:	f007 fe29 	bl	801d3cc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801577a:	4b67      	ldr	r3, [pc, #412]	@ (8015918 <tcp_listen_input+0x1c8>)
 801577c:	781b      	ldrb	r3, [r3, #0]
 801577e:	f003 0310 	and.w	r3, r3, #16
 8015782:	2b00      	cmp	r3, #0
 8015784:	d019      	beq.n	80157ba <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015786:	4b68      	ldr	r3, [pc, #416]	@ (8015928 <tcp_listen_input+0x1d8>)
 8015788:	6819      	ldr	r1, [r3, #0]
 801578a:	4b68      	ldr	r3, [pc, #416]	@ (801592c <tcp_listen_input+0x1dc>)
 801578c:	881b      	ldrh	r3, [r3, #0]
 801578e:	461a      	mov	r2, r3
 8015790:	4b67      	ldr	r3, [pc, #412]	@ (8015930 <tcp_listen_input+0x1e0>)
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015796:	4b67      	ldr	r3, [pc, #412]	@ (8015934 <tcp_listen_input+0x1e4>)
 8015798:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801579a:	885b      	ldrh	r3, [r3, #2]
 801579c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801579e:	4a65      	ldr	r2, [pc, #404]	@ (8015934 <tcp_listen_input+0x1e4>)
 80157a0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80157a2:	8812      	ldrh	r2, [r2, #0]
 80157a4:	b292      	uxth	r2, r2
 80157a6:	9202      	str	r2, [sp, #8]
 80157a8:	9301      	str	r3, [sp, #4]
 80157aa:	4b63      	ldr	r3, [pc, #396]	@ (8015938 <tcp_listen_input+0x1e8>)
 80157ac:	9300      	str	r3, [sp, #0]
 80157ae:	4b63      	ldr	r3, [pc, #396]	@ (801593c <tcp_listen_input+0x1ec>)
 80157b0:	4602      	mov	r2, r0
 80157b2:	6878      	ldr	r0, [r7, #4]
 80157b4:	f003 fbd2 	bl	8018f5c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80157b8:	e0a9      	b.n	801590e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80157ba:	4b57      	ldr	r3, [pc, #348]	@ (8015918 <tcp_listen_input+0x1c8>)
 80157bc:	781b      	ldrb	r3, [r3, #0]
 80157be:	f003 0302 	and.w	r3, r3, #2
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	f000 80a3 	beq.w	801590e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	7d5b      	ldrb	r3, [r3, #21]
 80157cc:	4618      	mov	r0, r3
 80157ce:	f7ff f859 	bl	8014884 <tcp_alloc>
 80157d2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80157d4:	697b      	ldr	r3, [r7, #20]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d111      	bne.n	80157fe <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	699b      	ldr	r3, [r3, #24]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d00a      	beq.n	80157f8 <tcp_listen_input+0xa8>
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	699b      	ldr	r3, [r3, #24]
 80157e6:	687a      	ldr	r2, [r7, #4]
 80157e8:	6910      	ldr	r0, [r2, #16]
 80157ea:	f04f 32ff 	mov.w	r2, #4294967295
 80157ee:	2100      	movs	r1, #0
 80157f0:	4798      	blx	r3
 80157f2:	4603      	mov	r3, r0
 80157f4:	73bb      	strb	r3, [r7, #14]
      return;
 80157f6:	e08b      	b.n	8015910 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80157f8:	23f0      	movs	r3, #240	@ 0xf0
 80157fa:	73bb      	strb	r3, [r7, #14]
      return;
 80157fc:	e088      	b.n	8015910 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80157fe:	4b50      	ldr	r3, [pc, #320]	@ (8015940 <tcp_listen_input+0x1f0>)
 8015800:	695a      	ldr	r2, [r3, #20]
 8015802:	697b      	ldr	r3, [r7, #20]
 8015804:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8015806:	4b4e      	ldr	r3, [pc, #312]	@ (8015940 <tcp_listen_input+0x1f0>)
 8015808:	691a      	ldr	r2, [r3, #16]
 801580a:	697b      	ldr	r3, [r7, #20]
 801580c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	8ada      	ldrh	r2, [r3, #22]
 8015812:	697b      	ldr	r3, [r7, #20]
 8015814:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8015816:	4b47      	ldr	r3, [pc, #284]	@ (8015934 <tcp_listen_input+0x1e4>)
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	881b      	ldrh	r3, [r3, #0]
 801581c:	b29a      	uxth	r2, r3
 801581e:	697b      	ldr	r3, [r7, #20]
 8015820:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8015822:	697b      	ldr	r3, [r7, #20]
 8015824:	2203      	movs	r2, #3
 8015826:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8015828:	4b41      	ldr	r3, [pc, #260]	@ (8015930 <tcp_listen_input+0x1e0>)
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	1c5a      	adds	r2, r3, #1
 801582e:	697b      	ldr	r3, [r7, #20]
 8015830:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8015832:	697b      	ldr	r3, [r7, #20]
 8015834:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015836:	697b      	ldr	r3, [r7, #20]
 8015838:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801583a:	6978      	ldr	r0, [r7, #20]
 801583c:	f7ff fa58 	bl	8014cf0 <tcp_next_iss>
 8015840:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8015842:	697b      	ldr	r3, [r7, #20]
 8015844:	693a      	ldr	r2, [r7, #16]
 8015846:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	693a      	ldr	r2, [r7, #16]
 801584c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801584e:	697b      	ldr	r3, [r7, #20]
 8015850:	693a      	ldr	r2, [r7, #16]
 8015852:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8015854:	697b      	ldr	r3, [r7, #20]
 8015856:	693a      	ldr	r2, [r7, #16]
 8015858:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801585a:	4b35      	ldr	r3, [pc, #212]	@ (8015930 <tcp_listen_input+0x1e0>)
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	1e5a      	subs	r2, r3, #1
 8015860:	697b      	ldr	r3, [r7, #20]
 8015862:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	691a      	ldr	r2, [r3, #16]
 8015868:	697b      	ldr	r3, [r7, #20]
 801586a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801586c:	697b      	ldr	r3, [r7, #20]
 801586e:	687a      	ldr	r2, [r7, #4]
 8015870:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	7a5b      	ldrb	r3, [r3, #9]
 8015876:	f003 030c 	and.w	r3, r3, #12
 801587a:	b2da      	uxtb	r2, r3
 801587c:	697b      	ldr	r3, [r7, #20]
 801587e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	7a1a      	ldrb	r2, [r3, #8]
 8015884:	697b      	ldr	r3, [r7, #20]
 8015886:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8015888:	4b2e      	ldr	r3, [pc, #184]	@ (8015944 <tcp_listen_input+0x1f4>)
 801588a:	681a      	ldr	r2, [r3, #0]
 801588c:	697b      	ldr	r3, [r7, #20]
 801588e:	60da      	str	r2, [r3, #12]
 8015890:	4a2c      	ldr	r2, [pc, #176]	@ (8015944 <tcp_listen_input+0x1f4>)
 8015892:	697b      	ldr	r3, [r7, #20]
 8015894:	6013      	str	r3, [r2, #0]
 8015896:	f003 fd23 	bl	80192e0 <tcp_timer_needed>
 801589a:	4b2b      	ldr	r3, [pc, #172]	@ (8015948 <tcp_listen_input+0x1f8>)
 801589c:	2201      	movs	r2, #1
 801589e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80158a0:	6978      	ldr	r0, [r7, #20]
 80158a2:	f001 fd8b 	bl	80173bc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80158a6:	4b23      	ldr	r3, [pc, #140]	@ (8015934 <tcp_listen_input+0x1e4>)
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	89db      	ldrh	r3, [r3, #14]
 80158ac:	b29a      	uxth	r2, r3
 80158ae:	697b      	ldr	r3, [r7, #20]
 80158b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80158b4:	697b      	ldr	r3, [r7, #20]
 80158b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80158ba:	697b      	ldr	r3, [r7, #20]
 80158bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80158c0:	697b      	ldr	r3, [r7, #20]
 80158c2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80158c4:	697b      	ldr	r3, [r7, #20]
 80158c6:	3304      	adds	r3, #4
 80158c8:	4618      	mov	r0, r3
 80158ca:	f005 fa5d 	bl	801ad88 <ip4_route>
 80158ce:	4601      	mov	r1, r0
 80158d0:	697b      	ldr	r3, [r7, #20]
 80158d2:	3304      	adds	r3, #4
 80158d4:	461a      	mov	r2, r3
 80158d6:	4620      	mov	r0, r4
 80158d8:	f7ff fa30 	bl	8014d3c <tcp_eff_send_mss_netif>
 80158dc:	4603      	mov	r3, r0
 80158de:	461a      	mov	r2, r3
 80158e0:	697b      	ldr	r3, [r7, #20]
 80158e2:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80158e4:	2112      	movs	r1, #18
 80158e6:	6978      	ldr	r0, [r7, #20]
 80158e8:	f002 fc96 	bl	8018218 <tcp_enqueue_flags>
 80158ec:	4603      	mov	r3, r0
 80158ee:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80158f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d004      	beq.n	8015902 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80158f8:	2100      	movs	r1, #0
 80158fa:	6978      	ldr	r0, [r7, #20]
 80158fc:	f7fd ff06 	bl	801370c <tcp_abandon>
      return;
 8015900:	e006      	b.n	8015910 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8015902:	6978      	ldr	r0, [r7, #20]
 8015904:	f002 fd76 	bl	80183f4 <tcp_output>
  return;
 8015908:	e001      	b.n	801590e <tcp_listen_input+0x1be>
    return;
 801590a:	bf00      	nop
 801590c:	e000      	b.n	8015910 <tcp_listen_input+0x1c0>
  return;
 801590e:	bf00      	nop
}
 8015910:	371c      	adds	r7, #28
 8015912:	46bd      	mov	sp, r7
 8015914:	bd90      	pop	{r4, r7, pc}
 8015916:	bf00      	nop
 8015918:	2000e4a0 	.word	0x2000e4a0
 801591c:	08020484 	.word	0x08020484
 8015920:	0802067c 	.word	0x0802067c
 8015924:	080204d0 	.word	0x080204d0
 8015928:	2000e498 	.word	0x2000e498
 801592c:	2000e49e 	.word	0x2000e49e
 8015930:	2000e494 	.word	0x2000e494
 8015934:	2000e484 	.word	0x2000e484
 8015938:	2000b36c 	.word	0x2000b36c
 801593c:	2000b370 	.word	0x2000b370
 8015940:	2000b35c 	.word	0x2000b35c
 8015944:	2000e468 	.word	0x2000e468
 8015948:	2000e470 	.word	0x2000e470

0801594c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b086      	sub	sp, #24
 8015950:	af04      	add	r7, sp, #16
 8015952:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015954:	4b2f      	ldr	r3, [pc, #188]	@ (8015a14 <tcp_timewait_input+0xc8>)
 8015956:	781b      	ldrb	r3, [r3, #0]
 8015958:	f003 0304 	and.w	r3, r3, #4
 801595c:	2b00      	cmp	r3, #0
 801595e:	d153      	bne.n	8015a08 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	2b00      	cmp	r3, #0
 8015964:	d106      	bne.n	8015974 <tcp_timewait_input+0x28>
 8015966:	4b2c      	ldr	r3, [pc, #176]	@ (8015a18 <tcp_timewait_input+0xcc>)
 8015968:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801596c:	492b      	ldr	r1, [pc, #172]	@ (8015a1c <tcp_timewait_input+0xd0>)
 801596e:	482c      	ldr	r0, [pc, #176]	@ (8015a20 <tcp_timewait_input+0xd4>)
 8015970:	f007 fd2c 	bl	801d3cc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015974:	4b27      	ldr	r3, [pc, #156]	@ (8015a14 <tcp_timewait_input+0xc8>)
 8015976:	781b      	ldrb	r3, [r3, #0]
 8015978:	f003 0302 	and.w	r3, r3, #2
 801597c:	2b00      	cmp	r3, #0
 801597e:	d02a      	beq.n	80159d6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015980:	4b28      	ldr	r3, [pc, #160]	@ (8015a24 <tcp_timewait_input+0xd8>)
 8015982:	681a      	ldr	r2, [r3, #0]
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015988:	1ad3      	subs	r3, r2, r3
 801598a:	2b00      	cmp	r3, #0
 801598c:	db2d      	blt.n	80159ea <tcp_timewait_input+0x9e>
 801598e:	4b25      	ldr	r3, [pc, #148]	@ (8015a24 <tcp_timewait_input+0xd8>)
 8015990:	681a      	ldr	r2, [r3, #0]
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015996:	6879      	ldr	r1, [r7, #4]
 8015998:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801599a:	440b      	add	r3, r1
 801599c:	1ad3      	subs	r3, r2, r3
 801599e:	2b00      	cmp	r3, #0
 80159a0:	dc23      	bgt.n	80159ea <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80159a2:	4b21      	ldr	r3, [pc, #132]	@ (8015a28 <tcp_timewait_input+0xdc>)
 80159a4:	6819      	ldr	r1, [r3, #0]
 80159a6:	4b21      	ldr	r3, [pc, #132]	@ (8015a2c <tcp_timewait_input+0xe0>)
 80159a8:	881b      	ldrh	r3, [r3, #0]
 80159aa:	461a      	mov	r2, r3
 80159ac:	4b1d      	ldr	r3, [pc, #116]	@ (8015a24 <tcp_timewait_input+0xd8>)
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80159b2:	4b1f      	ldr	r3, [pc, #124]	@ (8015a30 <tcp_timewait_input+0xe4>)
 80159b4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80159b6:	885b      	ldrh	r3, [r3, #2]
 80159b8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80159ba:	4a1d      	ldr	r2, [pc, #116]	@ (8015a30 <tcp_timewait_input+0xe4>)
 80159bc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80159be:	8812      	ldrh	r2, [r2, #0]
 80159c0:	b292      	uxth	r2, r2
 80159c2:	9202      	str	r2, [sp, #8]
 80159c4:	9301      	str	r3, [sp, #4]
 80159c6:	4b1b      	ldr	r3, [pc, #108]	@ (8015a34 <tcp_timewait_input+0xe8>)
 80159c8:	9300      	str	r3, [sp, #0]
 80159ca:	4b1b      	ldr	r3, [pc, #108]	@ (8015a38 <tcp_timewait_input+0xec>)
 80159cc:	4602      	mov	r2, r0
 80159ce:	6878      	ldr	r0, [r7, #4]
 80159d0:	f003 fac4 	bl	8018f5c <tcp_rst>
      return;
 80159d4:	e01b      	b.n	8015a0e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80159d6:	4b0f      	ldr	r3, [pc, #60]	@ (8015a14 <tcp_timewait_input+0xc8>)
 80159d8:	781b      	ldrb	r3, [r3, #0]
 80159da:	f003 0301 	and.w	r3, r3, #1
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d003      	beq.n	80159ea <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80159e2:	4b16      	ldr	r3, [pc, #88]	@ (8015a3c <tcp_timewait_input+0xf0>)
 80159e4:	681a      	ldr	r2, [r3, #0]
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80159ea:	4b10      	ldr	r3, [pc, #64]	@ (8015a2c <tcp_timewait_input+0xe0>)
 80159ec:	881b      	ldrh	r3, [r3, #0]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d00c      	beq.n	8015a0c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	8b5b      	ldrh	r3, [r3, #26]
 80159f6:	f043 0302 	orr.w	r3, r3, #2
 80159fa:	b29a      	uxth	r2, r3
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015a00:	6878      	ldr	r0, [r7, #4]
 8015a02:	f002 fcf7 	bl	80183f4 <tcp_output>
  }
  return;
 8015a06:	e001      	b.n	8015a0c <tcp_timewait_input+0xc0>
    return;
 8015a08:	bf00      	nop
 8015a0a:	e000      	b.n	8015a0e <tcp_timewait_input+0xc2>
  return;
 8015a0c:	bf00      	nop
}
 8015a0e:	3708      	adds	r7, #8
 8015a10:	46bd      	mov	sp, r7
 8015a12:	bd80      	pop	{r7, pc}
 8015a14:	2000e4a0 	.word	0x2000e4a0
 8015a18:	08020484 	.word	0x08020484
 8015a1c:	0802069c 	.word	0x0802069c
 8015a20:	080204d0 	.word	0x080204d0
 8015a24:	2000e494 	.word	0x2000e494
 8015a28:	2000e498 	.word	0x2000e498
 8015a2c:	2000e49e 	.word	0x2000e49e
 8015a30:	2000e484 	.word	0x2000e484
 8015a34:	2000b36c 	.word	0x2000b36c
 8015a38:	2000b370 	.word	0x2000b370
 8015a3c:	2000e45c 	.word	0x2000e45c

08015a40 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015a40:	b590      	push	{r4, r7, lr}
 8015a42:	b08d      	sub	sp, #52	@ 0x34
 8015a44:	af04      	add	r7, sp, #16
 8015a46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015a48:	2300      	movs	r3, #0
 8015a4a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d106      	bne.n	8015a64 <tcp_process+0x24>
 8015a56:	4b9d      	ldr	r3, [pc, #628]	@ (8015ccc <tcp_process+0x28c>)
 8015a58:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8015a5c:	499c      	ldr	r1, [pc, #624]	@ (8015cd0 <tcp_process+0x290>)
 8015a5e:	489d      	ldr	r0, [pc, #628]	@ (8015cd4 <tcp_process+0x294>)
 8015a60:	f007 fcb4 	bl	801d3cc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015a64:	4b9c      	ldr	r3, [pc, #624]	@ (8015cd8 <tcp_process+0x298>)
 8015a66:	781b      	ldrb	r3, [r3, #0]
 8015a68:	f003 0304 	and.w	r3, r3, #4
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d04e      	beq.n	8015b0e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	7d1b      	ldrb	r3, [r3, #20]
 8015a74:	2b02      	cmp	r3, #2
 8015a76:	d108      	bne.n	8015a8a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015a7c:	4b97      	ldr	r3, [pc, #604]	@ (8015cdc <tcp_process+0x29c>)
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	429a      	cmp	r2, r3
 8015a82:	d123      	bne.n	8015acc <tcp_process+0x8c>
        acceptable = 1;
 8015a84:	2301      	movs	r3, #1
 8015a86:	76fb      	strb	r3, [r7, #27]
 8015a88:	e020      	b.n	8015acc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015a8e:	4b94      	ldr	r3, [pc, #592]	@ (8015ce0 <tcp_process+0x2a0>)
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	429a      	cmp	r2, r3
 8015a94:	d102      	bne.n	8015a9c <tcp_process+0x5c>
        acceptable = 1;
 8015a96:	2301      	movs	r3, #1
 8015a98:	76fb      	strb	r3, [r7, #27]
 8015a9a:	e017      	b.n	8015acc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015a9c:	4b90      	ldr	r3, [pc, #576]	@ (8015ce0 <tcp_process+0x2a0>)
 8015a9e:	681a      	ldr	r2, [r3, #0]
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015aa4:	1ad3      	subs	r3, r2, r3
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	db10      	blt.n	8015acc <tcp_process+0x8c>
 8015aaa:	4b8d      	ldr	r3, [pc, #564]	@ (8015ce0 <tcp_process+0x2a0>)
 8015aac:	681a      	ldr	r2, [r3, #0]
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ab2:	6879      	ldr	r1, [r7, #4]
 8015ab4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015ab6:	440b      	add	r3, r1
 8015ab8:	1ad3      	subs	r3, r2, r3
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	dc06      	bgt.n	8015acc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	8b5b      	ldrh	r3, [r3, #26]
 8015ac2:	f043 0302 	orr.w	r3, r3, #2
 8015ac6:	b29a      	uxth	r2, r3
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015acc:	7efb      	ldrb	r3, [r7, #27]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d01b      	beq.n	8015b0a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	7d1b      	ldrb	r3, [r3, #20]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d106      	bne.n	8015ae8 <tcp_process+0xa8>
 8015ada:	4b7c      	ldr	r3, [pc, #496]	@ (8015ccc <tcp_process+0x28c>)
 8015adc:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8015ae0:	4980      	ldr	r1, [pc, #512]	@ (8015ce4 <tcp_process+0x2a4>)
 8015ae2:	487c      	ldr	r0, [pc, #496]	@ (8015cd4 <tcp_process+0x294>)
 8015ae4:	f007 fc72 	bl	801d3cc <iprintf>
      recv_flags |= TF_RESET;
 8015ae8:	4b7f      	ldr	r3, [pc, #508]	@ (8015ce8 <tcp_process+0x2a8>)
 8015aea:	781b      	ldrb	r3, [r3, #0]
 8015aec:	f043 0308 	orr.w	r3, r3, #8
 8015af0:	b2da      	uxtb	r2, r3
 8015af2:	4b7d      	ldr	r3, [pc, #500]	@ (8015ce8 <tcp_process+0x2a8>)
 8015af4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	8b5b      	ldrh	r3, [r3, #26]
 8015afa:	f023 0301 	bic.w	r3, r3, #1
 8015afe:	b29a      	uxth	r2, r3
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015b04:	f06f 030d 	mvn.w	r3, #13
 8015b08:	e37a      	b.n	8016200 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	e378      	b.n	8016200 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8015b0e:	4b72      	ldr	r3, [pc, #456]	@ (8015cd8 <tcp_process+0x298>)
 8015b10:	781b      	ldrb	r3, [r3, #0]
 8015b12:	f003 0302 	and.w	r3, r3, #2
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d010      	beq.n	8015b3c <tcp_process+0xfc>
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	7d1b      	ldrb	r3, [r3, #20]
 8015b1e:	2b02      	cmp	r3, #2
 8015b20:	d00c      	beq.n	8015b3c <tcp_process+0xfc>
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	7d1b      	ldrb	r3, [r3, #20]
 8015b26:	2b03      	cmp	r3, #3
 8015b28:	d008      	beq.n	8015b3c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	8b5b      	ldrh	r3, [r3, #26]
 8015b2e:	f043 0302 	orr.w	r3, r3, #2
 8015b32:	b29a      	uxth	r2, r3
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015b38:	2300      	movs	r3, #0
 8015b3a:	e361      	b.n	8016200 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	8b5b      	ldrh	r3, [r3, #26]
 8015b40:	f003 0310 	and.w	r3, r3, #16
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d103      	bne.n	8015b50 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015b48:	4b68      	ldr	r3, [pc, #416]	@ (8015cec <tcp_process+0x2ac>)
 8015b4a:	681a      	ldr	r2, [r3, #0]
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	2200      	movs	r2, #0
 8015b54:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8015b60:	6878      	ldr	r0, [r7, #4]
 8015b62:	f001 fc2b 	bl	80173bc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	7d1b      	ldrb	r3, [r3, #20]
 8015b6a:	3b02      	subs	r3, #2
 8015b6c:	2b07      	cmp	r3, #7
 8015b6e:	f200 8337 	bhi.w	80161e0 <tcp_process+0x7a0>
 8015b72:	a201      	add	r2, pc, #4	@ (adr r2, 8015b78 <tcp_process+0x138>)
 8015b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b78:	08015b99 	.word	0x08015b99
 8015b7c:	08015dc9 	.word	0x08015dc9
 8015b80:	08015f41 	.word	0x08015f41
 8015b84:	08015f6b 	.word	0x08015f6b
 8015b88:	0801608f 	.word	0x0801608f
 8015b8c:	08015f41 	.word	0x08015f41
 8015b90:	0801611b 	.word	0x0801611b
 8015b94:	080161ab 	.word	0x080161ab
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015b98:	4b4f      	ldr	r3, [pc, #316]	@ (8015cd8 <tcp_process+0x298>)
 8015b9a:	781b      	ldrb	r3, [r3, #0]
 8015b9c:	f003 0310 	and.w	r3, r3, #16
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	f000 80e4 	beq.w	8015d6e <tcp_process+0x32e>
 8015ba6:	4b4c      	ldr	r3, [pc, #304]	@ (8015cd8 <tcp_process+0x298>)
 8015ba8:	781b      	ldrb	r3, [r3, #0]
 8015baa:	f003 0302 	and.w	r3, r3, #2
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	f000 80dd 	beq.w	8015d6e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015bb8:	1c5a      	adds	r2, r3, #1
 8015bba:	4b48      	ldr	r3, [pc, #288]	@ (8015cdc <tcp_process+0x29c>)
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	429a      	cmp	r2, r3
 8015bc0:	f040 80d5 	bne.w	8015d6e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015bc4:	4b46      	ldr	r3, [pc, #280]	@ (8015ce0 <tcp_process+0x2a0>)
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	1c5a      	adds	r2, r3, #1
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8015bd6:	4b41      	ldr	r3, [pc, #260]	@ (8015cdc <tcp_process+0x29c>)
 8015bd8:	681a      	ldr	r2, [r3, #0]
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8015bde:	4b44      	ldr	r3, [pc, #272]	@ (8015cf0 <tcp_process+0x2b0>)
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	89db      	ldrh	r3, [r3, #14]
 8015be4:	b29a      	uxth	r2, r3
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015bf8:	4b39      	ldr	r3, [pc, #228]	@ (8015ce0 <tcp_process+0x2a0>)
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	1e5a      	subs	r2, r3, #1
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	2204      	movs	r2, #4
 8015c06:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	3304      	adds	r3, #4
 8015c10:	4618      	mov	r0, r3
 8015c12:	f005 f8b9 	bl	801ad88 <ip4_route>
 8015c16:	4601      	mov	r1, r0
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	3304      	adds	r3, #4
 8015c1c:	461a      	mov	r2, r3
 8015c1e:	4620      	mov	r0, r4
 8015c20:	f7ff f88c 	bl	8014d3c <tcp_eff_send_mss_netif>
 8015c24:	4603      	mov	r3, r0
 8015c26:	461a      	mov	r2, r3
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c30:	009a      	lsls	r2, r3, #2
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c36:	005b      	lsls	r3, r3, #1
 8015c38:	f241 111c 	movw	r1, #4380	@ 0x111c
 8015c3c:	428b      	cmp	r3, r1
 8015c3e:	bf38      	it	cc
 8015c40:	460b      	movcc	r3, r1
 8015c42:	429a      	cmp	r2, r3
 8015c44:	d204      	bcs.n	8015c50 <tcp_process+0x210>
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c4a:	009b      	lsls	r3, r3, #2
 8015c4c:	b29b      	uxth	r3, r3
 8015c4e:	e00d      	b.n	8015c6c <tcp_process+0x22c>
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c54:	005b      	lsls	r3, r3, #1
 8015c56:	f241 121c 	movw	r2, #4380	@ 0x111c
 8015c5a:	4293      	cmp	r3, r2
 8015c5c:	d904      	bls.n	8015c68 <tcp_process+0x228>
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c62:	005b      	lsls	r3, r3, #1
 8015c64:	b29b      	uxth	r3, r3
 8015c66:	e001      	b.n	8015c6c <tcp_process+0x22c>
 8015c68:	f241 131c 	movw	r3, #4380	@ 0x111c
 8015c6c:	687a      	ldr	r2, [r7, #4]
 8015c6e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d106      	bne.n	8015c8a <tcp_process+0x24a>
 8015c7c:	4b13      	ldr	r3, [pc, #76]	@ (8015ccc <tcp_process+0x28c>)
 8015c7e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8015c82:	491c      	ldr	r1, [pc, #112]	@ (8015cf4 <tcp_process+0x2b4>)
 8015c84:	4813      	ldr	r0, [pc, #76]	@ (8015cd4 <tcp_process+0x294>)
 8015c86:	f007 fba1 	bl	801d3cc <iprintf>
        --pcb->snd_queuelen;
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015c90:	3b01      	subs	r3, #1
 8015c92:	b29a      	uxth	r2, r3
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015c9e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015ca0:	69fb      	ldr	r3, [r7, #28]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d12a      	bne.n	8015cfc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015caa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015cac:	69fb      	ldr	r3, [r7, #28]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d106      	bne.n	8015cc0 <tcp_process+0x280>
 8015cb2:	4b06      	ldr	r3, [pc, #24]	@ (8015ccc <tcp_process+0x28c>)
 8015cb4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8015cb8:	490f      	ldr	r1, [pc, #60]	@ (8015cf8 <tcp_process+0x2b8>)
 8015cba:	4806      	ldr	r0, [pc, #24]	@ (8015cd4 <tcp_process+0x294>)
 8015cbc:	f007 fb86 	bl	801d3cc <iprintf>
          pcb->unsent = rseg->next;
 8015cc0:	69fb      	ldr	r3, [r7, #28]
 8015cc2:	681a      	ldr	r2, [r3, #0]
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015cc8:	e01c      	b.n	8015d04 <tcp_process+0x2c4>
 8015cca:	bf00      	nop
 8015ccc:	08020484 	.word	0x08020484
 8015cd0:	080206bc 	.word	0x080206bc
 8015cd4:	080204d0 	.word	0x080204d0
 8015cd8:	2000e4a0 	.word	0x2000e4a0
 8015cdc:	2000e498 	.word	0x2000e498
 8015ce0:	2000e494 	.word	0x2000e494
 8015ce4:	080206d8 	.word	0x080206d8
 8015ce8:	2000e4a1 	.word	0x2000e4a1
 8015cec:	2000e45c 	.word	0x2000e45c
 8015cf0:	2000e484 	.word	0x2000e484
 8015cf4:	080206f8 	.word	0x080206f8
 8015cf8:	08020710 	.word	0x08020710
        } else {
          pcb->unacked = rseg->next;
 8015cfc:	69fb      	ldr	r3, [r7, #28]
 8015cfe:	681a      	ldr	r2, [r3, #0]
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8015d04:	69f8      	ldr	r0, [r7, #28]
 8015d06:	f7fe fc54 	bl	80145b2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d104      	bne.n	8015d1c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015d18:	861a      	strh	r2, [r3, #48]	@ 0x30
 8015d1a:	e006      	b.n	8015d2a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	2200      	movs	r2, #0
 8015d20:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	2200      	movs	r2, #0
 8015d26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d00a      	beq.n	8015d4a <tcp_process+0x30a>
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015d3a:	687a      	ldr	r2, [r7, #4]
 8015d3c:	6910      	ldr	r0, [r2, #16]
 8015d3e:	2200      	movs	r2, #0
 8015d40:	6879      	ldr	r1, [r7, #4]
 8015d42:	4798      	blx	r3
 8015d44:	4603      	mov	r3, r0
 8015d46:	76bb      	strb	r3, [r7, #26]
 8015d48:	e001      	b.n	8015d4e <tcp_process+0x30e>
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015d4e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015d52:	f113 0f0d 	cmn.w	r3, #13
 8015d56:	d102      	bne.n	8015d5e <tcp_process+0x31e>
          return ERR_ABRT;
 8015d58:	f06f 030c 	mvn.w	r3, #12
 8015d5c:	e250      	b.n	8016200 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	8b5b      	ldrh	r3, [r3, #26]
 8015d62:	f043 0302 	orr.w	r3, r3, #2
 8015d66:	b29a      	uxth	r2, r3
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015d6c:	e23a      	b.n	80161e4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8015d6e:	4b98      	ldr	r3, [pc, #608]	@ (8015fd0 <tcp_process+0x590>)
 8015d70:	781b      	ldrb	r3, [r3, #0]
 8015d72:	f003 0310 	and.w	r3, r3, #16
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	f000 8234 	beq.w	80161e4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015d7c:	4b95      	ldr	r3, [pc, #596]	@ (8015fd4 <tcp_process+0x594>)
 8015d7e:	6819      	ldr	r1, [r3, #0]
 8015d80:	4b95      	ldr	r3, [pc, #596]	@ (8015fd8 <tcp_process+0x598>)
 8015d82:	881b      	ldrh	r3, [r3, #0]
 8015d84:	461a      	mov	r2, r3
 8015d86:	4b95      	ldr	r3, [pc, #596]	@ (8015fdc <tcp_process+0x59c>)
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015d8c:	4b94      	ldr	r3, [pc, #592]	@ (8015fe0 <tcp_process+0x5a0>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015d90:	885b      	ldrh	r3, [r3, #2]
 8015d92:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015d94:	4a92      	ldr	r2, [pc, #584]	@ (8015fe0 <tcp_process+0x5a0>)
 8015d96:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015d98:	8812      	ldrh	r2, [r2, #0]
 8015d9a:	b292      	uxth	r2, r2
 8015d9c:	9202      	str	r2, [sp, #8]
 8015d9e:	9301      	str	r3, [sp, #4]
 8015da0:	4b90      	ldr	r3, [pc, #576]	@ (8015fe4 <tcp_process+0x5a4>)
 8015da2:	9300      	str	r3, [sp, #0]
 8015da4:	4b90      	ldr	r3, [pc, #576]	@ (8015fe8 <tcp_process+0x5a8>)
 8015da6:	4602      	mov	r2, r0
 8015da8:	6878      	ldr	r0, [r7, #4]
 8015daa:	f003 f8d7 	bl	8018f5c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015db4:	2b05      	cmp	r3, #5
 8015db6:	f200 8215 	bhi.w	80161e4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8015dc0:	6878      	ldr	r0, [r7, #4]
 8015dc2:	f002 fea3 	bl	8018b0c <tcp_rexmit_rto>
      break;
 8015dc6:	e20d      	b.n	80161e4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8015dc8:	4b81      	ldr	r3, [pc, #516]	@ (8015fd0 <tcp_process+0x590>)
 8015dca:	781b      	ldrb	r3, [r3, #0]
 8015dcc:	f003 0310 	and.w	r3, r3, #16
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	f000 80a1 	beq.w	8015f18 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015dd6:	4b7f      	ldr	r3, [pc, #508]	@ (8015fd4 <tcp_process+0x594>)
 8015dd8:	681a      	ldr	r2, [r3, #0]
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015dde:	1ad3      	subs	r3, r2, r3
 8015de0:	3b01      	subs	r3, #1
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	db7e      	blt.n	8015ee4 <tcp_process+0x4a4>
 8015de6:	4b7b      	ldr	r3, [pc, #492]	@ (8015fd4 <tcp_process+0x594>)
 8015de8:	681a      	ldr	r2, [r3, #0]
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015dee:	1ad3      	subs	r3, r2, r3
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	dc77      	bgt.n	8015ee4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	2204      	movs	r2, #4
 8015df8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d102      	bne.n	8015e08 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8015e02:	23fa      	movs	r3, #250	@ 0xfa
 8015e04:	76bb      	strb	r3, [r7, #26]
 8015e06:	e01d      	b.n	8015e44 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015e0c:	699b      	ldr	r3, [r3, #24]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d106      	bne.n	8015e20 <tcp_process+0x3e0>
 8015e12:	4b76      	ldr	r3, [pc, #472]	@ (8015fec <tcp_process+0x5ac>)
 8015e14:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8015e18:	4975      	ldr	r1, [pc, #468]	@ (8015ff0 <tcp_process+0x5b0>)
 8015e1a:	4876      	ldr	r0, [pc, #472]	@ (8015ff4 <tcp_process+0x5b4>)
 8015e1c:	f007 fad6 	bl	801d3cc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015e24:	699b      	ldr	r3, [r3, #24]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d00a      	beq.n	8015e40 <tcp_process+0x400>
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015e2e:	699b      	ldr	r3, [r3, #24]
 8015e30:	687a      	ldr	r2, [r7, #4]
 8015e32:	6910      	ldr	r0, [r2, #16]
 8015e34:	2200      	movs	r2, #0
 8015e36:	6879      	ldr	r1, [r7, #4]
 8015e38:	4798      	blx	r3
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	76bb      	strb	r3, [r7, #26]
 8015e3e:	e001      	b.n	8015e44 <tcp_process+0x404>
 8015e40:	23f0      	movs	r3, #240	@ 0xf0
 8015e42:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8015e44:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d00a      	beq.n	8015e62 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015e4c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015e50:	f113 0f0d 	cmn.w	r3, #13
 8015e54:	d002      	beq.n	8015e5c <tcp_process+0x41c>
              tcp_abort(pcb);
 8015e56:	6878      	ldr	r0, [r7, #4]
 8015e58:	f7fd fd16 	bl	8013888 <tcp_abort>
            }
            return ERR_ABRT;
 8015e5c:	f06f 030c 	mvn.w	r3, #12
 8015e60:	e1ce      	b.n	8016200 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8015e62:	6878      	ldr	r0, [r7, #4]
 8015e64:	f000 fae0 	bl	8016428 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015e68:	4b63      	ldr	r3, [pc, #396]	@ (8015ff8 <tcp_process+0x5b8>)
 8015e6a:	881b      	ldrh	r3, [r3, #0]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d005      	beq.n	8015e7c <tcp_process+0x43c>
            recv_acked--;
 8015e70:	4b61      	ldr	r3, [pc, #388]	@ (8015ff8 <tcp_process+0x5b8>)
 8015e72:	881b      	ldrh	r3, [r3, #0]
 8015e74:	3b01      	subs	r3, #1
 8015e76:	b29a      	uxth	r2, r3
 8015e78:	4b5f      	ldr	r3, [pc, #380]	@ (8015ff8 <tcp_process+0x5b8>)
 8015e7a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015e80:	009a      	lsls	r2, r3, #2
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015e86:	005b      	lsls	r3, r3, #1
 8015e88:	f241 111c 	movw	r1, #4380	@ 0x111c
 8015e8c:	428b      	cmp	r3, r1
 8015e8e:	bf38      	it	cc
 8015e90:	460b      	movcc	r3, r1
 8015e92:	429a      	cmp	r2, r3
 8015e94:	d204      	bcs.n	8015ea0 <tcp_process+0x460>
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015e9a:	009b      	lsls	r3, r3, #2
 8015e9c:	b29b      	uxth	r3, r3
 8015e9e:	e00d      	b.n	8015ebc <tcp_process+0x47c>
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015ea4:	005b      	lsls	r3, r3, #1
 8015ea6:	f241 121c 	movw	r2, #4380	@ 0x111c
 8015eaa:	4293      	cmp	r3, r2
 8015eac:	d904      	bls.n	8015eb8 <tcp_process+0x478>
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015eb2:	005b      	lsls	r3, r3, #1
 8015eb4:	b29b      	uxth	r3, r3
 8015eb6:	e001      	b.n	8015ebc <tcp_process+0x47c>
 8015eb8:	f241 131c 	movw	r3, #4380	@ 0x111c
 8015ebc:	687a      	ldr	r2, [r7, #4]
 8015ebe:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8015ec2:	4b4e      	ldr	r3, [pc, #312]	@ (8015ffc <tcp_process+0x5bc>)
 8015ec4:	781b      	ldrb	r3, [r3, #0]
 8015ec6:	f003 0320 	and.w	r3, r3, #32
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d037      	beq.n	8015f3e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	8b5b      	ldrh	r3, [r3, #26]
 8015ed2:	f043 0302 	orr.w	r3, r3, #2
 8015ed6:	b29a      	uxth	r2, r3
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	2207      	movs	r2, #7
 8015ee0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8015ee2:	e02c      	b.n	8015f3e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8015fd4 <tcp_process+0x594>)
 8015ee6:	6819      	ldr	r1, [r3, #0]
 8015ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8015fd8 <tcp_process+0x598>)
 8015eea:	881b      	ldrh	r3, [r3, #0]
 8015eec:	461a      	mov	r2, r3
 8015eee:	4b3b      	ldr	r3, [pc, #236]	@ (8015fdc <tcp_process+0x59c>)
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015ef4:	4b3a      	ldr	r3, [pc, #232]	@ (8015fe0 <tcp_process+0x5a0>)
 8015ef6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ef8:	885b      	ldrh	r3, [r3, #2]
 8015efa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015efc:	4a38      	ldr	r2, [pc, #224]	@ (8015fe0 <tcp_process+0x5a0>)
 8015efe:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015f00:	8812      	ldrh	r2, [r2, #0]
 8015f02:	b292      	uxth	r2, r2
 8015f04:	9202      	str	r2, [sp, #8]
 8015f06:	9301      	str	r3, [sp, #4]
 8015f08:	4b36      	ldr	r3, [pc, #216]	@ (8015fe4 <tcp_process+0x5a4>)
 8015f0a:	9300      	str	r3, [sp, #0]
 8015f0c:	4b36      	ldr	r3, [pc, #216]	@ (8015fe8 <tcp_process+0x5a8>)
 8015f0e:	4602      	mov	r2, r0
 8015f10:	6878      	ldr	r0, [r7, #4]
 8015f12:	f003 f823 	bl	8018f5c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8015f16:	e167      	b.n	80161e8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015f18:	4b2d      	ldr	r3, [pc, #180]	@ (8015fd0 <tcp_process+0x590>)
 8015f1a:	781b      	ldrb	r3, [r3, #0]
 8015f1c:	f003 0302 	and.w	r3, r3, #2
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	f000 8161 	beq.w	80161e8 <tcp_process+0x7a8>
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f2a:	1e5a      	subs	r2, r3, #1
 8015f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8015fdc <tcp_process+0x59c>)
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	429a      	cmp	r2, r3
 8015f32:	f040 8159 	bne.w	80161e8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8015f36:	6878      	ldr	r0, [r7, #4]
 8015f38:	f002 fe0a 	bl	8018b50 <tcp_rexmit>
      break;
 8015f3c:	e154      	b.n	80161e8 <tcp_process+0x7a8>
 8015f3e:	e153      	b.n	80161e8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8015f40:	6878      	ldr	r0, [r7, #4]
 8015f42:	f000 fa71 	bl	8016428 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8015f46:	4b2d      	ldr	r3, [pc, #180]	@ (8015ffc <tcp_process+0x5bc>)
 8015f48:	781b      	ldrb	r3, [r3, #0]
 8015f4a:	f003 0320 	and.w	r3, r3, #32
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	f000 814c 	beq.w	80161ec <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	8b5b      	ldrh	r3, [r3, #26]
 8015f58:	f043 0302 	orr.w	r3, r3, #2
 8015f5c:	b29a      	uxth	r2, r3
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	2207      	movs	r2, #7
 8015f66:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015f68:	e140      	b.n	80161ec <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8015f6a:	6878      	ldr	r0, [r7, #4]
 8015f6c:	f000 fa5c 	bl	8016428 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015f70:	4b22      	ldr	r3, [pc, #136]	@ (8015ffc <tcp_process+0x5bc>)
 8015f72:	781b      	ldrb	r3, [r3, #0]
 8015f74:	f003 0320 	and.w	r3, r3, #32
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d071      	beq.n	8016060 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015f7c:	4b14      	ldr	r3, [pc, #80]	@ (8015fd0 <tcp_process+0x590>)
 8015f7e:	781b      	ldrb	r3, [r3, #0]
 8015f80:	f003 0310 	and.w	r3, r3, #16
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d060      	beq.n	801604a <tcp_process+0x60a>
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015f8c:	4b11      	ldr	r3, [pc, #68]	@ (8015fd4 <tcp_process+0x594>)
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	429a      	cmp	r2, r3
 8015f92:	d15a      	bne.n	801604a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d156      	bne.n	801604a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	8b5b      	ldrh	r3, [r3, #26]
 8015fa0:	f043 0302 	orr.w	r3, r3, #2
 8015fa4:	b29a      	uxth	r2, r3
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f7fe fdbc 	bl	8014b28 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8015fb0:	4b13      	ldr	r3, [pc, #76]	@ (8016000 <tcp_process+0x5c0>)
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	687a      	ldr	r2, [r7, #4]
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	d105      	bne.n	8015fc6 <tcp_process+0x586>
 8015fba:	4b11      	ldr	r3, [pc, #68]	@ (8016000 <tcp_process+0x5c0>)
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	68db      	ldr	r3, [r3, #12]
 8015fc0:	4a0f      	ldr	r2, [pc, #60]	@ (8016000 <tcp_process+0x5c0>)
 8015fc2:	6013      	str	r3, [r2, #0]
 8015fc4:	e02e      	b.n	8016024 <tcp_process+0x5e4>
 8015fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8016000 <tcp_process+0x5c0>)
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	617b      	str	r3, [r7, #20]
 8015fcc:	e027      	b.n	801601e <tcp_process+0x5de>
 8015fce:	bf00      	nop
 8015fd0:	2000e4a0 	.word	0x2000e4a0
 8015fd4:	2000e498 	.word	0x2000e498
 8015fd8:	2000e49e 	.word	0x2000e49e
 8015fdc:	2000e494 	.word	0x2000e494
 8015fe0:	2000e484 	.word	0x2000e484
 8015fe4:	2000b36c 	.word	0x2000b36c
 8015fe8:	2000b370 	.word	0x2000b370
 8015fec:	08020484 	.word	0x08020484
 8015ff0:	08020724 	.word	0x08020724
 8015ff4:	080204d0 	.word	0x080204d0
 8015ff8:	2000e49c 	.word	0x2000e49c
 8015ffc:	2000e4a1 	.word	0x2000e4a1
 8016000:	2000e468 	.word	0x2000e468
 8016004:	697b      	ldr	r3, [r7, #20]
 8016006:	68db      	ldr	r3, [r3, #12]
 8016008:	687a      	ldr	r2, [r7, #4]
 801600a:	429a      	cmp	r2, r3
 801600c:	d104      	bne.n	8016018 <tcp_process+0x5d8>
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	68da      	ldr	r2, [r3, #12]
 8016012:	697b      	ldr	r3, [r7, #20]
 8016014:	60da      	str	r2, [r3, #12]
 8016016:	e005      	b.n	8016024 <tcp_process+0x5e4>
 8016018:	697b      	ldr	r3, [r7, #20]
 801601a:	68db      	ldr	r3, [r3, #12]
 801601c:	617b      	str	r3, [r7, #20]
 801601e:	697b      	ldr	r3, [r7, #20]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d1ef      	bne.n	8016004 <tcp_process+0x5c4>
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	2200      	movs	r2, #0
 8016028:	60da      	str	r2, [r3, #12]
 801602a:	4b77      	ldr	r3, [pc, #476]	@ (8016208 <tcp_process+0x7c8>)
 801602c:	2201      	movs	r2, #1
 801602e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	220a      	movs	r2, #10
 8016034:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8016036:	4b75      	ldr	r3, [pc, #468]	@ (801620c <tcp_process+0x7cc>)
 8016038:	681a      	ldr	r2, [r3, #0]
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	60da      	str	r2, [r3, #12]
 801603e:	4a73      	ldr	r2, [pc, #460]	@ (801620c <tcp_process+0x7cc>)
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	6013      	str	r3, [r2, #0]
 8016044:	f003 f94c 	bl	80192e0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8016048:	e0d2      	b.n	80161f0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	8b5b      	ldrh	r3, [r3, #26]
 801604e:	f043 0302 	orr.w	r3, r3, #2
 8016052:	b29a      	uxth	r2, r3
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	2208      	movs	r2, #8
 801605c:	751a      	strb	r2, [r3, #20]
      break;
 801605e:	e0c7      	b.n	80161f0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016060:	4b6b      	ldr	r3, [pc, #428]	@ (8016210 <tcp_process+0x7d0>)
 8016062:	781b      	ldrb	r3, [r3, #0]
 8016064:	f003 0310 	and.w	r3, r3, #16
 8016068:	2b00      	cmp	r3, #0
 801606a:	f000 80c1 	beq.w	80161f0 <tcp_process+0x7b0>
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016072:	4b68      	ldr	r3, [pc, #416]	@ (8016214 <tcp_process+0x7d4>)
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	429a      	cmp	r2, r3
 8016078:	f040 80ba 	bne.w	80161f0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016080:	2b00      	cmp	r3, #0
 8016082:	f040 80b5 	bne.w	80161f0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	2206      	movs	r2, #6
 801608a:	751a      	strb	r2, [r3, #20]
      break;
 801608c:	e0b0      	b.n	80161f0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801608e:	6878      	ldr	r0, [r7, #4]
 8016090:	f000 f9ca 	bl	8016428 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016094:	4b60      	ldr	r3, [pc, #384]	@ (8016218 <tcp_process+0x7d8>)
 8016096:	781b      	ldrb	r3, [r3, #0]
 8016098:	f003 0320 	and.w	r3, r3, #32
 801609c:	2b00      	cmp	r3, #0
 801609e:	f000 80a9 	beq.w	80161f4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	8b5b      	ldrh	r3, [r3, #26]
 80160a6:	f043 0302 	orr.w	r3, r3, #2
 80160aa:	b29a      	uxth	r2, r3
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f7fe fd39 	bl	8014b28 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80160b6:	4b59      	ldr	r3, [pc, #356]	@ (801621c <tcp_process+0x7dc>)
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	687a      	ldr	r2, [r7, #4]
 80160bc:	429a      	cmp	r2, r3
 80160be:	d105      	bne.n	80160cc <tcp_process+0x68c>
 80160c0:	4b56      	ldr	r3, [pc, #344]	@ (801621c <tcp_process+0x7dc>)
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	68db      	ldr	r3, [r3, #12]
 80160c6:	4a55      	ldr	r2, [pc, #340]	@ (801621c <tcp_process+0x7dc>)
 80160c8:	6013      	str	r3, [r2, #0]
 80160ca:	e013      	b.n	80160f4 <tcp_process+0x6b4>
 80160cc:	4b53      	ldr	r3, [pc, #332]	@ (801621c <tcp_process+0x7dc>)
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	613b      	str	r3, [r7, #16]
 80160d2:	e00c      	b.n	80160ee <tcp_process+0x6ae>
 80160d4:	693b      	ldr	r3, [r7, #16]
 80160d6:	68db      	ldr	r3, [r3, #12]
 80160d8:	687a      	ldr	r2, [r7, #4]
 80160da:	429a      	cmp	r2, r3
 80160dc:	d104      	bne.n	80160e8 <tcp_process+0x6a8>
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	68da      	ldr	r2, [r3, #12]
 80160e2:	693b      	ldr	r3, [r7, #16]
 80160e4:	60da      	str	r2, [r3, #12]
 80160e6:	e005      	b.n	80160f4 <tcp_process+0x6b4>
 80160e8:	693b      	ldr	r3, [r7, #16]
 80160ea:	68db      	ldr	r3, [r3, #12]
 80160ec:	613b      	str	r3, [r7, #16]
 80160ee:	693b      	ldr	r3, [r7, #16]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d1ef      	bne.n	80160d4 <tcp_process+0x694>
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	2200      	movs	r2, #0
 80160f8:	60da      	str	r2, [r3, #12]
 80160fa:	4b43      	ldr	r3, [pc, #268]	@ (8016208 <tcp_process+0x7c8>)
 80160fc:	2201      	movs	r2, #1
 80160fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	220a      	movs	r2, #10
 8016104:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016106:	4b41      	ldr	r3, [pc, #260]	@ (801620c <tcp_process+0x7cc>)
 8016108:	681a      	ldr	r2, [r3, #0]
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	60da      	str	r2, [r3, #12]
 801610e:	4a3f      	ldr	r2, [pc, #252]	@ (801620c <tcp_process+0x7cc>)
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	6013      	str	r3, [r2, #0]
 8016114:	f003 f8e4 	bl	80192e0 <tcp_timer_needed>
      }
      break;
 8016118:	e06c      	b.n	80161f4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801611a:	6878      	ldr	r0, [r7, #4]
 801611c:	f000 f984 	bl	8016428 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016120:	4b3b      	ldr	r3, [pc, #236]	@ (8016210 <tcp_process+0x7d0>)
 8016122:	781b      	ldrb	r3, [r3, #0]
 8016124:	f003 0310 	and.w	r3, r3, #16
 8016128:	2b00      	cmp	r3, #0
 801612a:	d065      	beq.n	80161f8 <tcp_process+0x7b8>
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016130:	4b38      	ldr	r3, [pc, #224]	@ (8016214 <tcp_process+0x7d4>)
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	429a      	cmp	r2, r3
 8016136:	d15f      	bne.n	80161f8 <tcp_process+0x7b8>
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801613c:	2b00      	cmp	r3, #0
 801613e:	d15b      	bne.n	80161f8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8016140:	6878      	ldr	r0, [r7, #4]
 8016142:	f7fe fcf1 	bl	8014b28 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016146:	4b35      	ldr	r3, [pc, #212]	@ (801621c <tcp_process+0x7dc>)
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	687a      	ldr	r2, [r7, #4]
 801614c:	429a      	cmp	r2, r3
 801614e:	d105      	bne.n	801615c <tcp_process+0x71c>
 8016150:	4b32      	ldr	r3, [pc, #200]	@ (801621c <tcp_process+0x7dc>)
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	68db      	ldr	r3, [r3, #12]
 8016156:	4a31      	ldr	r2, [pc, #196]	@ (801621c <tcp_process+0x7dc>)
 8016158:	6013      	str	r3, [r2, #0]
 801615a:	e013      	b.n	8016184 <tcp_process+0x744>
 801615c:	4b2f      	ldr	r3, [pc, #188]	@ (801621c <tcp_process+0x7dc>)
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	60fb      	str	r3, [r7, #12]
 8016162:	e00c      	b.n	801617e <tcp_process+0x73e>
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	68db      	ldr	r3, [r3, #12]
 8016168:	687a      	ldr	r2, [r7, #4]
 801616a:	429a      	cmp	r2, r3
 801616c:	d104      	bne.n	8016178 <tcp_process+0x738>
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	68da      	ldr	r2, [r3, #12]
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	60da      	str	r2, [r3, #12]
 8016176:	e005      	b.n	8016184 <tcp_process+0x744>
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	68db      	ldr	r3, [r3, #12]
 801617c:	60fb      	str	r3, [r7, #12]
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d1ef      	bne.n	8016164 <tcp_process+0x724>
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	2200      	movs	r2, #0
 8016188:	60da      	str	r2, [r3, #12]
 801618a:	4b1f      	ldr	r3, [pc, #124]	@ (8016208 <tcp_process+0x7c8>)
 801618c:	2201      	movs	r2, #1
 801618e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	220a      	movs	r2, #10
 8016194:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016196:	4b1d      	ldr	r3, [pc, #116]	@ (801620c <tcp_process+0x7cc>)
 8016198:	681a      	ldr	r2, [r3, #0]
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	60da      	str	r2, [r3, #12]
 801619e:	4a1b      	ldr	r2, [pc, #108]	@ (801620c <tcp_process+0x7cc>)
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	6013      	str	r3, [r2, #0]
 80161a4:	f003 f89c 	bl	80192e0 <tcp_timer_needed>
      }
      break;
 80161a8:	e026      	b.n	80161f8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80161aa:	6878      	ldr	r0, [r7, #4]
 80161ac:	f000 f93c 	bl	8016428 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80161b0:	4b17      	ldr	r3, [pc, #92]	@ (8016210 <tcp_process+0x7d0>)
 80161b2:	781b      	ldrb	r3, [r3, #0]
 80161b4:	f003 0310 	and.w	r3, r3, #16
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d01f      	beq.n	80161fc <tcp_process+0x7bc>
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80161c0:	4b14      	ldr	r3, [pc, #80]	@ (8016214 <tcp_process+0x7d4>)
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	429a      	cmp	r2, r3
 80161c6:	d119      	bne.n	80161fc <tcp_process+0x7bc>
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d115      	bne.n	80161fc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80161d0:	4b11      	ldr	r3, [pc, #68]	@ (8016218 <tcp_process+0x7d8>)
 80161d2:	781b      	ldrb	r3, [r3, #0]
 80161d4:	f043 0310 	orr.w	r3, r3, #16
 80161d8:	b2da      	uxtb	r2, r3
 80161da:	4b0f      	ldr	r3, [pc, #60]	@ (8016218 <tcp_process+0x7d8>)
 80161dc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80161de:	e00d      	b.n	80161fc <tcp_process+0x7bc>
    default:
      break;
 80161e0:	bf00      	nop
 80161e2:	e00c      	b.n	80161fe <tcp_process+0x7be>
      break;
 80161e4:	bf00      	nop
 80161e6:	e00a      	b.n	80161fe <tcp_process+0x7be>
      break;
 80161e8:	bf00      	nop
 80161ea:	e008      	b.n	80161fe <tcp_process+0x7be>
      break;
 80161ec:	bf00      	nop
 80161ee:	e006      	b.n	80161fe <tcp_process+0x7be>
      break;
 80161f0:	bf00      	nop
 80161f2:	e004      	b.n	80161fe <tcp_process+0x7be>
      break;
 80161f4:	bf00      	nop
 80161f6:	e002      	b.n	80161fe <tcp_process+0x7be>
      break;
 80161f8:	bf00      	nop
 80161fa:	e000      	b.n	80161fe <tcp_process+0x7be>
      break;
 80161fc:	bf00      	nop
  }
  return ERR_OK;
 80161fe:	2300      	movs	r3, #0
}
 8016200:	4618      	mov	r0, r3
 8016202:	3724      	adds	r7, #36	@ 0x24
 8016204:	46bd      	mov	sp, r7
 8016206:	bd90      	pop	{r4, r7, pc}
 8016208:	2000e470 	.word	0x2000e470
 801620c:	2000e46c 	.word	0x2000e46c
 8016210:	2000e4a0 	.word	0x2000e4a0
 8016214:	2000e498 	.word	0x2000e498
 8016218:	2000e4a1 	.word	0x2000e4a1
 801621c:	2000e468 	.word	0x2000e468

08016220 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8016220:	b590      	push	{r4, r7, lr}
 8016222:	b085      	sub	sp, #20
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]
 8016228:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	2b00      	cmp	r3, #0
 801622e:	d106      	bne.n	801623e <tcp_oos_insert_segment+0x1e>
 8016230:	4b3b      	ldr	r3, [pc, #236]	@ (8016320 <tcp_oos_insert_segment+0x100>)
 8016232:	f240 421f 	movw	r2, #1055	@ 0x41f
 8016236:	493b      	ldr	r1, [pc, #236]	@ (8016324 <tcp_oos_insert_segment+0x104>)
 8016238:	483b      	ldr	r0, [pc, #236]	@ (8016328 <tcp_oos_insert_segment+0x108>)
 801623a:	f007 f8c7 	bl	801d3cc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	68db      	ldr	r3, [r3, #12]
 8016242:	899b      	ldrh	r3, [r3, #12]
 8016244:	b29b      	uxth	r3, r3
 8016246:	4618      	mov	r0, r3
 8016248:	f7fb f940 	bl	80114cc <lwip_htons>
 801624c:	4603      	mov	r3, r0
 801624e:	b2db      	uxtb	r3, r3
 8016250:	f003 0301 	and.w	r3, r3, #1
 8016254:	2b00      	cmp	r3, #0
 8016256:	d028      	beq.n	80162aa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8016258:	6838      	ldr	r0, [r7, #0]
 801625a:	f7fe f995 	bl	8014588 <tcp_segs_free>
    next = NULL;
 801625e:	2300      	movs	r3, #0
 8016260:	603b      	str	r3, [r7, #0]
 8016262:	e056      	b.n	8016312 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016264:	683b      	ldr	r3, [r7, #0]
 8016266:	68db      	ldr	r3, [r3, #12]
 8016268:	899b      	ldrh	r3, [r3, #12]
 801626a:	b29b      	uxth	r3, r3
 801626c:	4618      	mov	r0, r3
 801626e:	f7fb f92d 	bl	80114cc <lwip_htons>
 8016272:	4603      	mov	r3, r0
 8016274:	b2db      	uxtb	r3, r3
 8016276:	f003 0301 	and.w	r3, r3, #1
 801627a:	2b00      	cmp	r3, #0
 801627c:	d00d      	beq.n	801629a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	68db      	ldr	r3, [r3, #12]
 8016282:	899b      	ldrh	r3, [r3, #12]
 8016284:	b29c      	uxth	r4, r3
 8016286:	2001      	movs	r0, #1
 8016288:	f7fb f920 	bl	80114cc <lwip_htons>
 801628c:	4603      	mov	r3, r0
 801628e:	461a      	mov	r2, r3
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	68db      	ldr	r3, [r3, #12]
 8016294:	4322      	orrs	r2, r4
 8016296:	b292      	uxth	r2, r2
 8016298:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801629a:	683b      	ldr	r3, [r7, #0]
 801629c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801629e:	683b      	ldr	r3, [r7, #0]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80162a4:	68f8      	ldr	r0, [r7, #12]
 80162a6:	f7fe f984 	bl	80145b2 <tcp_seg_free>
    while (next &&
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d00e      	beq.n	80162ce <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	891b      	ldrh	r3, [r3, #8]
 80162b4:	461a      	mov	r2, r3
 80162b6:	4b1d      	ldr	r3, [pc, #116]	@ (801632c <tcp_oos_insert_segment+0x10c>)
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	441a      	add	r2, r3
 80162bc:	683b      	ldr	r3, [r7, #0]
 80162be:	68db      	ldr	r3, [r3, #12]
 80162c0:	685b      	ldr	r3, [r3, #4]
 80162c2:	6839      	ldr	r1, [r7, #0]
 80162c4:	8909      	ldrh	r1, [r1, #8]
 80162c6:	440b      	add	r3, r1
 80162c8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	daca      	bge.n	8016264 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80162ce:	683b      	ldr	r3, [r7, #0]
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d01e      	beq.n	8016312 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	891b      	ldrh	r3, [r3, #8]
 80162d8:	461a      	mov	r2, r3
 80162da:	4b14      	ldr	r3, [pc, #80]	@ (801632c <tcp_oos_insert_segment+0x10c>)
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	441a      	add	r2, r3
 80162e0:	683b      	ldr	r3, [r7, #0]
 80162e2:	68db      	ldr	r3, [r3, #12]
 80162e4:	685b      	ldr	r3, [r3, #4]
 80162e6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	dd12      	ble.n	8016312 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80162ec:	683b      	ldr	r3, [r7, #0]
 80162ee:	68db      	ldr	r3, [r3, #12]
 80162f0:	685b      	ldr	r3, [r3, #4]
 80162f2:	b29a      	uxth	r2, r3
 80162f4:	4b0d      	ldr	r3, [pc, #52]	@ (801632c <tcp_oos_insert_segment+0x10c>)
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	b29b      	uxth	r3, r3
 80162fa:	1ad3      	subs	r3, r2, r3
 80162fc:	b29a      	uxth	r2, r3
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	685a      	ldr	r2, [r3, #4]
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	891b      	ldrh	r3, [r3, #8]
 801630a:	4619      	mov	r1, r3
 801630c:	4610      	mov	r0, r2
 801630e:	f7fc fb45 	bl	801299c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	683a      	ldr	r2, [r7, #0]
 8016316:	601a      	str	r2, [r3, #0]
}
 8016318:	bf00      	nop
 801631a:	3714      	adds	r7, #20
 801631c:	46bd      	mov	sp, r7
 801631e:	bd90      	pop	{r4, r7, pc}
 8016320:	08020484 	.word	0x08020484
 8016324:	08020744 	.word	0x08020744
 8016328:	080204d0 	.word	0x080204d0
 801632c:	2000e494 	.word	0x2000e494

08016330 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8016330:	b5b0      	push	{r4, r5, r7, lr}
 8016332:	b086      	sub	sp, #24
 8016334:	af00      	add	r7, sp, #0
 8016336:	60f8      	str	r0, [r7, #12]
 8016338:	60b9      	str	r1, [r7, #8]
 801633a:	607a      	str	r2, [r7, #4]
 801633c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801633e:	e03e      	b.n	80163be <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8016340:	68bb      	ldr	r3, [r7, #8]
 8016342:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8016344:	68bb      	ldr	r3, [r7, #8]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801634a:	697b      	ldr	r3, [r7, #20]
 801634c:	685b      	ldr	r3, [r3, #4]
 801634e:	4618      	mov	r0, r3
 8016350:	f7fc fd38 	bl	8012dc4 <pbuf_clen>
 8016354:	4603      	mov	r3, r0
 8016356:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801635e:	8a7a      	ldrh	r2, [r7, #18]
 8016360:	429a      	cmp	r2, r3
 8016362:	d906      	bls.n	8016372 <tcp_free_acked_segments+0x42>
 8016364:	4b2a      	ldr	r3, [pc, #168]	@ (8016410 <tcp_free_acked_segments+0xe0>)
 8016366:	f240 4257 	movw	r2, #1111	@ 0x457
 801636a:	492a      	ldr	r1, [pc, #168]	@ (8016414 <tcp_free_acked_segments+0xe4>)
 801636c:	482a      	ldr	r0, [pc, #168]	@ (8016418 <tcp_free_acked_segments+0xe8>)
 801636e:	f007 f82d 	bl	801d3cc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8016378:	8a7b      	ldrh	r3, [r7, #18]
 801637a:	1ad3      	subs	r3, r2, r3
 801637c:	b29a      	uxth	r2, r3
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8016384:	697b      	ldr	r3, [r7, #20]
 8016386:	891a      	ldrh	r2, [r3, #8]
 8016388:	4b24      	ldr	r3, [pc, #144]	@ (801641c <tcp_free_acked_segments+0xec>)
 801638a:	881b      	ldrh	r3, [r3, #0]
 801638c:	4413      	add	r3, r2
 801638e:	b29a      	uxth	r2, r3
 8016390:	4b22      	ldr	r3, [pc, #136]	@ (801641c <tcp_free_acked_segments+0xec>)
 8016392:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8016394:	6978      	ldr	r0, [r7, #20]
 8016396:	f7fe f90c 	bl	80145b2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d00c      	beq.n	80163be <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80163a4:	68bb      	ldr	r3, [r7, #8]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d109      	bne.n	80163be <tcp_free_acked_segments+0x8e>
 80163aa:	683b      	ldr	r3, [r7, #0]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d106      	bne.n	80163be <tcp_free_acked_segments+0x8e>
 80163b0:	4b17      	ldr	r3, [pc, #92]	@ (8016410 <tcp_free_acked_segments+0xe0>)
 80163b2:	f240 4261 	movw	r2, #1121	@ 0x461
 80163b6:	491a      	ldr	r1, [pc, #104]	@ (8016420 <tcp_free_acked_segments+0xf0>)
 80163b8:	4817      	ldr	r0, [pc, #92]	@ (8016418 <tcp_free_acked_segments+0xe8>)
 80163ba:	f007 f807 	bl	801d3cc <iprintf>
  while (seg_list != NULL &&
 80163be:	68bb      	ldr	r3, [r7, #8]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d020      	beq.n	8016406 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80163c4:	68bb      	ldr	r3, [r7, #8]
 80163c6:	68db      	ldr	r3, [r3, #12]
 80163c8:	685b      	ldr	r3, [r3, #4]
 80163ca:	4618      	mov	r0, r3
 80163cc:	f7fb f894 	bl	80114f8 <lwip_htonl>
 80163d0:	4604      	mov	r4, r0
 80163d2:	68bb      	ldr	r3, [r7, #8]
 80163d4:	891b      	ldrh	r3, [r3, #8]
 80163d6:	461d      	mov	r5, r3
 80163d8:	68bb      	ldr	r3, [r7, #8]
 80163da:	68db      	ldr	r3, [r3, #12]
 80163dc:	899b      	ldrh	r3, [r3, #12]
 80163de:	b29b      	uxth	r3, r3
 80163e0:	4618      	mov	r0, r3
 80163e2:	f7fb f873 	bl	80114cc <lwip_htons>
 80163e6:	4603      	mov	r3, r0
 80163e8:	b2db      	uxtb	r3, r3
 80163ea:	f003 0303 	and.w	r3, r3, #3
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d001      	beq.n	80163f6 <tcp_free_acked_segments+0xc6>
 80163f2:	2301      	movs	r3, #1
 80163f4:	e000      	b.n	80163f8 <tcp_free_acked_segments+0xc8>
 80163f6:	2300      	movs	r3, #0
 80163f8:	442b      	add	r3, r5
 80163fa:	18e2      	adds	r2, r4, r3
 80163fc:	4b09      	ldr	r3, [pc, #36]	@ (8016424 <tcp_free_acked_segments+0xf4>)
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8016402:	2b00      	cmp	r3, #0
 8016404:	dd9c      	ble.n	8016340 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8016406:	68bb      	ldr	r3, [r7, #8]
}
 8016408:	4618      	mov	r0, r3
 801640a:	3718      	adds	r7, #24
 801640c:	46bd      	mov	sp, r7
 801640e:	bdb0      	pop	{r4, r5, r7, pc}
 8016410:	08020484 	.word	0x08020484
 8016414:	0802076c 	.word	0x0802076c
 8016418:	080204d0 	.word	0x080204d0
 801641c:	2000e49c 	.word	0x2000e49c
 8016420:	08020794 	.word	0x08020794
 8016424:	2000e498 	.word	0x2000e498

08016428 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8016428:	b5b0      	push	{r4, r5, r7, lr}
 801642a:	b094      	sub	sp, #80	@ 0x50
 801642c:	af00      	add	r7, sp, #0
 801642e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8016430:	2300      	movs	r3, #0
 8016432:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d106      	bne.n	8016448 <tcp_receive+0x20>
 801643a:	4b91      	ldr	r3, [pc, #580]	@ (8016680 <tcp_receive+0x258>)
 801643c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8016440:	4990      	ldr	r1, [pc, #576]	@ (8016684 <tcp_receive+0x25c>)
 8016442:	4891      	ldr	r0, [pc, #580]	@ (8016688 <tcp_receive+0x260>)
 8016444:	f006 ffc2 	bl	801d3cc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	7d1b      	ldrb	r3, [r3, #20]
 801644c:	2b03      	cmp	r3, #3
 801644e:	d806      	bhi.n	801645e <tcp_receive+0x36>
 8016450:	4b8b      	ldr	r3, [pc, #556]	@ (8016680 <tcp_receive+0x258>)
 8016452:	f240 427c 	movw	r2, #1148	@ 0x47c
 8016456:	498d      	ldr	r1, [pc, #564]	@ (801668c <tcp_receive+0x264>)
 8016458:	488b      	ldr	r0, [pc, #556]	@ (8016688 <tcp_receive+0x260>)
 801645a:	f006 ffb7 	bl	801d3cc <iprintf>

  if (flags & TCP_ACK) {
 801645e:	4b8c      	ldr	r3, [pc, #560]	@ (8016690 <tcp_receive+0x268>)
 8016460:	781b      	ldrb	r3, [r3, #0]
 8016462:	f003 0310 	and.w	r3, r3, #16
 8016466:	2b00      	cmp	r3, #0
 8016468:	f000 8264 	beq.w	8016934 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016472:	461a      	mov	r2, r3
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016478:	4413      	add	r3, r2
 801647a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016480:	4b84      	ldr	r3, [pc, #528]	@ (8016694 <tcp_receive+0x26c>)
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	1ad3      	subs	r3, r2, r3
 8016486:	2b00      	cmp	r3, #0
 8016488:	db1b      	blt.n	80164c2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801648e:	4b81      	ldr	r3, [pc, #516]	@ (8016694 <tcp_receive+0x26c>)
 8016490:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016492:	429a      	cmp	r2, r3
 8016494:	d106      	bne.n	80164a4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801649a:	4b7f      	ldr	r3, [pc, #508]	@ (8016698 <tcp_receive+0x270>)
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	1ad3      	subs	r3, r2, r3
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	db0e      	blt.n	80164c2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80164a8:	4b7b      	ldr	r3, [pc, #492]	@ (8016698 <tcp_receive+0x270>)
 80164aa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80164ac:	429a      	cmp	r2, r3
 80164ae:	d125      	bne.n	80164fc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80164b0:	4b7a      	ldr	r3, [pc, #488]	@ (801669c <tcp_receive+0x274>)
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	89db      	ldrh	r3, [r3, #14]
 80164b6:	b29a      	uxth	r2, r3
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80164be:	429a      	cmp	r2, r3
 80164c0:	d91c      	bls.n	80164fc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80164c2:	4b76      	ldr	r3, [pc, #472]	@ (801669c <tcp_receive+0x274>)
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	89db      	ldrh	r3, [r3, #14]
 80164c8:	b29a      	uxth	r2, r3
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80164dc:	429a      	cmp	r2, r3
 80164de:	d205      	bcs.n	80164ec <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80164ec:	4b69      	ldr	r3, [pc, #420]	@ (8016694 <tcp_receive+0x26c>)
 80164ee:	681a      	ldr	r2, [r3, #0]
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80164f4:	4b68      	ldr	r3, [pc, #416]	@ (8016698 <tcp_receive+0x270>)
 80164f6:	681a      	ldr	r2, [r3, #0]
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80164fc:	4b66      	ldr	r3, [pc, #408]	@ (8016698 <tcp_receive+0x270>)
 80164fe:	681a      	ldr	r2, [r3, #0]
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016504:	1ad3      	subs	r3, r2, r3
 8016506:	2b00      	cmp	r3, #0
 8016508:	dc58      	bgt.n	80165bc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801650a:	4b65      	ldr	r3, [pc, #404]	@ (80166a0 <tcp_receive+0x278>)
 801650c:	881b      	ldrh	r3, [r3, #0]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d14b      	bne.n	80165aa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016516:	687a      	ldr	r2, [r7, #4]
 8016518:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 801651c:	4413      	add	r3, r2
 801651e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016520:	429a      	cmp	r2, r3
 8016522:	d142      	bne.n	80165aa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801652a:	2b00      	cmp	r3, #0
 801652c:	db3d      	blt.n	80165aa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016532:	4b59      	ldr	r3, [pc, #356]	@ (8016698 <tcp_receive+0x270>)
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	429a      	cmp	r2, r3
 8016538:	d137      	bne.n	80165aa <tcp_receive+0x182>
              found_dupack = 1;
 801653a:	2301      	movs	r3, #1
 801653c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016544:	2bff      	cmp	r3, #255	@ 0xff
 8016546:	d007      	beq.n	8016558 <tcp_receive+0x130>
                ++pcb->dupacks;
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801654e:	3301      	adds	r3, #1
 8016550:	b2da      	uxtb	r2, r3
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801655e:	2b03      	cmp	r3, #3
 8016560:	d91b      	bls.n	801659a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801656c:	4413      	add	r3, r2
 801656e:	b29a      	uxth	r2, r3
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016576:	429a      	cmp	r2, r3
 8016578:	d30a      	bcc.n	8016590 <tcp_receive+0x168>
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016584:	4413      	add	r3, r2
 8016586:	b29a      	uxth	r2, r3
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801658e:	e004      	b.n	801659a <tcp_receive+0x172>
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016596:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80165a0:	2b02      	cmp	r3, #2
 80165a2:	d902      	bls.n	80165aa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80165a4:	6878      	ldr	r0, [r7, #4]
 80165a6:	f002 fb3f 	bl	8018c28 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80165aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	f040 8161 	bne.w	8016874 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	2200      	movs	r2, #0
 80165b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80165ba:	e15b      	b.n	8016874 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80165bc:	4b36      	ldr	r3, [pc, #216]	@ (8016698 <tcp_receive+0x270>)
 80165be:	681a      	ldr	r2, [r3, #0]
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80165c4:	1ad3      	subs	r3, r2, r3
 80165c6:	3b01      	subs	r3, #1
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	f2c0 814e 	blt.w	801686a <tcp_receive+0x442>
 80165ce:	4b32      	ldr	r3, [pc, #200]	@ (8016698 <tcp_receive+0x270>)
 80165d0:	681a      	ldr	r2, [r3, #0]
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80165d6:	1ad3      	subs	r3, r2, r3
 80165d8:	2b00      	cmp	r3, #0
 80165da:	f300 8146 	bgt.w	801686a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	8b5b      	ldrh	r3, [r3, #26]
 80165e2:	f003 0304 	and.w	r3, r3, #4
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d010      	beq.n	801660c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	8b5b      	ldrh	r3, [r3, #26]
 80165ee:	f023 0304 	bic.w	r3, r3, #4
 80165f2:	b29a      	uxth	r2, r3
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	2200      	movs	r2, #0
 8016608:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	2200      	movs	r2, #0
 8016610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801661a:	10db      	asrs	r3, r3, #3
 801661c:	b21b      	sxth	r3, r3
 801661e:	b29a      	uxth	r2, r3
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016626:	b29b      	uxth	r3, r3
 8016628:	4413      	add	r3, r2
 801662a:	b29b      	uxth	r3, r3
 801662c:	b21a      	sxth	r2, r3
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8016634:	4b18      	ldr	r3, [pc, #96]	@ (8016698 <tcp_receive+0x270>)
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	b29a      	uxth	r2, r3
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801663e:	b29b      	uxth	r3, r3
 8016640:	1ad3      	subs	r3, r2, r3
 8016642:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	2200      	movs	r2, #0
 8016648:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801664c:	4b12      	ldr	r3, [pc, #72]	@ (8016698 <tcp_receive+0x270>)
 801664e:	681a      	ldr	r2, [r3, #0]
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	7d1b      	ldrb	r3, [r3, #20]
 8016658:	2b03      	cmp	r3, #3
 801665a:	f240 8097 	bls.w	801678c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801666a:	429a      	cmp	r2, r3
 801666c:	d245      	bcs.n	80166fa <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	8b5b      	ldrh	r3, [r3, #26]
 8016672:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016676:	2b00      	cmp	r3, #0
 8016678:	d014      	beq.n	80166a4 <tcp_receive+0x27c>
 801667a:	2301      	movs	r3, #1
 801667c:	e013      	b.n	80166a6 <tcp_receive+0x27e>
 801667e:	bf00      	nop
 8016680:	08020484 	.word	0x08020484
 8016684:	080207b4 	.word	0x080207b4
 8016688:	080204d0 	.word	0x080204d0
 801668c:	080207d0 	.word	0x080207d0
 8016690:	2000e4a0 	.word	0x2000e4a0
 8016694:	2000e494 	.word	0x2000e494
 8016698:	2000e498 	.word	0x2000e498
 801669c:	2000e484 	.word	0x2000e484
 80166a0:	2000e49e 	.word	0x2000e49e
 80166a4:	2302      	movs	r3, #2
 80166a6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80166aa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80166ae:	b29a      	uxth	r2, r3
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80166b4:	fb12 f303 	smulbb	r3, r2, r3
 80166b8:	b29b      	uxth	r3, r3
 80166ba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80166bc:	4293      	cmp	r3, r2
 80166be:	bf28      	it	cs
 80166c0:	4613      	movcs	r3, r2
 80166c2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80166ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80166cc:	4413      	add	r3, r2
 80166ce:	b29a      	uxth	r2, r3
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80166d6:	429a      	cmp	r2, r3
 80166d8:	d309      	bcc.n	80166ee <tcp_receive+0x2c6>
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80166e0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80166e2:	4413      	add	r3, r2
 80166e4:	b29a      	uxth	r2, r3
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80166ec:	e04e      	b.n	801678c <tcp_receive+0x364>
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80166f4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80166f8:	e048      	b.n	801678c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016700:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016702:	4413      	add	r3, r2
 8016704:	b29a      	uxth	r2, r3
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801670c:	429a      	cmp	r2, r3
 801670e:	d309      	bcc.n	8016724 <tcp_receive+0x2fc>
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016716:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016718:	4413      	add	r3, r2
 801671a:	b29a      	uxth	r2, r3
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8016722:	e004      	b.n	801672e <tcp_receive+0x306>
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801672a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801673a:	429a      	cmp	r2, r3
 801673c:	d326      	bcc.n	801678c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801674a:	1ad3      	subs	r3, r2, r3
 801674c:	b29a      	uxth	r2, r3
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801675e:	4413      	add	r3, r2
 8016760:	b29a      	uxth	r2, r3
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016768:	429a      	cmp	r2, r3
 801676a:	d30a      	bcc.n	8016782 <tcp_receive+0x35a>
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016776:	4413      	add	r3, r2
 8016778:	b29a      	uxth	r2, r3
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016780:	e004      	b.n	801678c <tcp_receive+0x364>
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016788:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016794:	4a98      	ldr	r2, [pc, #608]	@ (80169f8 <tcp_receive+0x5d0>)
 8016796:	6878      	ldr	r0, [r7, #4]
 8016798:	f7ff fdca 	bl	8016330 <tcp_free_acked_segments>
 801679c:	4602      	mov	r2, r0
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80167aa:	4a94      	ldr	r2, [pc, #592]	@ (80169fc <tcp_receive+0x5d4>)
 80167ac:	6878      	ldr	r0, [r7, #4]
 80167ae:	f7ff fdbf 	bl	8016330 <tcp_free_acked_segments>
 80167b2:	4602      	mov	r2, r0
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d104      	bne.n	80167ca <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80167c6:	861a      	strh	r2, [r3, #48]	@ 0x30
 80167c8:	e002      	b.n	80167d0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	2200      	movs	r2, #0
 80167ce:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	2200      	movs	r2, #0
 80167d4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d103      	bne.n	80167e6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	2200      	movs	r2, #0
 80167e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80167ec:	4b84      	ldr	r3, [pc, #528]	@ (8016a00 <tcp_receive+0x5d8>)
 80167ee:	881b      	ldrh	r3, [r3, #0]
 80167f0:	4413      	add	r3, r2
 80167f2:	b29a      	uxth	r2, r3
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	8b5b      	ldrh	r3, [r3, #26]
 80167fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016802:	2b00      	cmp	r3, #0
 8016804:	d035      	beq.n	8016872 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801680a:	2b00      	cmp	r3, #0
 801680c:	d118      	bne.n	8016840 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016812:	2b00      	cmp	r3, #0
 8016814:	d00c      	beq.n	8016830 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801681e:	68db      	ldr	r3, [r3, #12]
 8016820:	685b      	ldr	r3, [r3, #4]
 8016822:	4618      	mov	r0, r3
 8016824:	f7fa fe68 	bl	80114f8 <lwip_htonl>
 8016828:	4603      	mov	r3, r0
 801682a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801682c:	2b00      	cmp	r3, #0
 801682e:	dc20      	bgt.n	8016872 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	8b5b      	ldrh	r3, [r3, #26]
 8016834:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016838:	b29a      	uxth	r2, r3
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801683e:	e018      	b.n	8016872 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016848:	68db      	ldr	r3, [r3, #12]
 801684a:	685b      	ldr	r3, [r3, #4]
 801684c:	4618      	mov	r0, r3
 801684e:	f7fa fe53 	bl	80114f8 <lwip_htonl>
 8016852:	4603      	mov	r3, r0
 8016854:	1ae3      	subs	r3, r4, r3
 8016856:	2b00      	cmp	r3, #0
 8016858:	dc0b      	bgt.n	8016872 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	8b5b      	ldrh	r3, [r3, #26]
 801685e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016862:	b29a      	uxth	r2, r3
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016868:	e003      	b.n	8016872 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801686a:	6878      	ldr	r0, [r7, #4]
 801686c:	f002 fbc8 	bl	8019000 <tcp_send_empty_ack>
 8016870:	e000      	b.n	8016874 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016872:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016878:	2b00      	cmp	r3, #0
 801687a:	d05b      	beq.n	8016934 <tcp_receive+0x50c>
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016880:	4b60      	ldr	r3, [pc, #384]	@ (8016a04 <tcp_receive+0x5dc>)
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	1ad3      	subs	r3, r2, r3
 8016886:	2b00      	cmp	r3, #0
 8016888:	da54      	bge.n	8016934 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801688a:	4b5f      	ldr	r3, [pc, #380]	@ (8016a08 <tcp_receive+0x5e0>)
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	b29a      	uxth	r2, r3
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016894:	b29b      	uxth	r3, r3
 8016896:	1ad3      	subs	r3, r2, r3
 8016898:	b29b      	uxth	r3, r3
 801689a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801689e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80168a8:	10db      	asrs	r3, r3, #3
 80168aa:	b21b      	sxth	r3, r3
 80168ac:	b29b      	uxth	r3, r3
 80168ae:	1ad3      	subs	r3, r2, r3
 80168b0:	b29b      	uxth	r3, r3
 80168b2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80168bc:	b29a      	uxth	r2, r3
 80168be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80168c2:	4413      	add	r3, r2
 80168c4:	b29b      	uxth	r3, r3
 80168c6:	b21a      	sxth	r2, r3
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80168cc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	da05      	bge.n	80168e0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80168d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80168d8:	425b      	negs	r3, r3
 80168da:	b29b      	uxth	r3, r3
 80168dc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80168e0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80168ea:	109b      	asrs	r3, r3, #2
 80168ec:	b21b      	sxth	r3, r3
 80168ee:	b29b      	uxth	r3, r3
 80168f0:	1ad3      	subs	r3, r2, r3
 80168f2:	b29b      	uxth	r3, r3
 80168f4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80168fe:	b29a      	uxth	r2, r3
 8016900:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016904:	4413      	add	r3, r2
 8016906:	b29b      	uxth	r3, r3
 8016908:	b21a      	sxth	r2, r3
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016914:	10db      	asrs	r3, r3, #3
 8016916:	b21b      	sxth	r3, r3
 8016918:	b29a      	uxth	r2, r3
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016920:	b29b      	uxth	r3, r3
 8016922:	4413      	add	r3, r2
 8016924:	b29b      	uxth	r3, r3
 8016926:	b21a      	sxth	r2, r3
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	2200      	movs	r2, #0
 8016932:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016934:	4b35      	ldr	r3, [pc, #212]	@ (8016a0c <tcp_receive+0x5e4>)
 8016936:	881b      	ldrh	r3, [r3, #0]
 8016938:	2b00      	cmp	r3, #0
 801693a:	f000 84df 	beq.w	80172fc <tcp_receive+0xed4>
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	7d1b      	ldrb	r3, [r3, #20]
 8016942:	2b06      	cmp	r3, #6
 8016944:	f200 84da 	bhi.w	80172fc <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801694c:	4b30      	ldr	r3, [pc, #192]	@ (8016a10 <tcp_receive+0x5e8>)
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	1ad3      	subs	r3, r2, r3
 8016952:	3b01      	subs	r3, #1
 8016954:	2b00      	cmp	r3, #0
 8016956:	f2c0 808f 	blt.w	8016a78 <tcp_receive+0x650>
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801695e:	4b2b      	ldr	r3, [pc, #172]	@ (8016a0c <tcp_receive+0x5e4>)
 8016960:	881b      	ldrh	r3, [r3, #0]
 8016962:	4619      	mov	r1, r3
 8016964:	4b2a      	ldr	r3, [pc, #168]	@ (8016a10 <tcp_receive+0x5e8>)
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	440b      	add	r3, r1
 801696a:	1ad3      	subs	r3, r2, r3
 801696c:	3301      	adds	r3, #1
 801696e:	2b00      	cmp	r3, #0
 8016970:	f300 8082 	bgt.w	8016a78 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8016974:	4b27      	ldr	r3, [pc, #156]	@ (8016a14 <tcp_receive+0x5ec>)
 8016976:	685b      	ldr	r3, [r3, #4]
 8016978:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801697e:	4b24      	ldr	r3, [pc, #144]	@ (8016a10 <tcp_receive+0x5e8>)
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	1ad3      	subs	r3, r2, r3
 8016984:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016986:	4b23      	ldr	r3, [pc, #140]	@ (8016a14 <tcp_receive+0x5ec>)
 8016988:	685b      	ldr	r3, [r3, #4]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d106      	bne.n	801699c <tcp_receive+0x574>
 801698e:	4b22      	ldr	r3, [pc, #136]	@ (8016a18 <tcp_receive+0x5f0>)
 8016990:	f240 5294 	movw	r2, #1428	@ 0x594
 8016994:	4921      	ldr	r1, [pc, #132]	@ (8016a1c <tcp_receive+0x5f4>)
 8016996:	4822      	ldr	r0, [pc, #136]	@ (8016a20 <tcp_receive+0x5f8>)
 8016998:	f006 fd18 	bl	801d3cc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801699c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801699e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80169a2:	4293      	cmp	r3, r2
 80169a4:	d906      	bls.n	80169b4 <tcp_receive+0x58c>
 80169a6:	4b1c      	ldr	r3, [pc, #112]	@ (8016a18 <tcp_receive+0x5f0>)
 80169a8:	f240 5295 	movw	r2, #1429	@ 0x595
 80169ac:	491d      	ldr	r1, [pc, #116]	@ (8016a24 <tcp_receive+0x5fc>)
 80169ae:	481c      	ldr	r0, [pc, #112]	@ (8016a20 <tcp_receive+0x5f8>)
 80169b0:	f006 fd0c 	bl	801d3cc <iprintf>
      off = (u16_t)off32;
 80169b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80169ba:	4b16      	ldr	r3, [pc, #88]	@ (8016a14 <tcp_receive+0x5ec>)
 80169bc:	685b      	ldr	r3, [r3, #4]
 80169be:	891b      	ldrh	r3, [r3, #8]
 80169c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80169c4:	429a      	cmp	r2, r3
 80169c6:	d906      	bls.n	80169d6 <tcp_receive+0x5ae>
 80169c8:	4b13      	ldr	r3, [pc, #76]	@ (8016a18 <tcp_receive+0x5f0>)
 80169ca:	f240 5297 	movw	r2, #1431	@ 0x597
 80169ce:	4916      	ldr	r1, [pc, #88]	@ (8016a28 <tcp_receive+0x600>)
 80169d0:	4813      	ldr	r0, [pc, #76]	@ (8016a20 <tcp_receive+0x5f8>)
 80169d2:	f006 fcfb 	bl	801d3cc <iprintf>
      inseg.len -= off;
 80169d6:	4b0f      	ldr	r3, [pc, #60]	@ (8016a14 <tcp_receive+0x5ec>)
 80169d8:	891a      	ldrh	r2, [r3, #8]
 80169da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80169de:	1ad3      	subs	r3, r2, r3
 80169e0:	b29a      	uxth	r2, r3
 80169e2:	4b0c      	ldr	r3, [pc, #48]	@ (8016a14 <tcp_receive+0x5ec>)
 80169e4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80169e6:	4b0b      	ldr	r3, [pc, #44]	@ (8016a14 <tcp_receive+0x5ec>)
 80169e8:	685b      	ldr	r3, [r3, #4]
 80169ea:	891a      	ldrh	r2, [r3, #8]
 80169ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80169f0:	1ad3      	subs	r3, r2, r3
 80169f2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80169f4:	e02a      	b.n	8016a4c <tcp_receive+0x624>
 80169f6:	bf00      	nop
 80169f8:	080207ec 	.word	0x080207ec
 80169fc:	080207f4 	.word	0x080207f4
 8016a00:	2000e49c 	.word	0x2000e49c
 8016a04:	2000e498 	.word	0x2000e498
 8016a08:	2000e45c 	.word	0x2000e45c
 8016a0c:	2000e49e 	.word	0x2000e49e
 8016a10:	2000e494 	.word	0x2000e494
 8016a14:	2000e474 	.word	0x2000e474
 8016a18:	08020484 	.word	0x08020484
 8016a1c:	080207fc 	.word	0x080207fc
 8016a20:	080204d0 	.word	0x080204d0
 8016a24:	0802080c 	.word	0x0802080c
 8016a28:	0802081c 	.word	0x0802081c
        off -= p->len;
 8016a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016a2e:	895b      	ldrh	r3, [r3, #10]
 8016a30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016a34:	1ad3      	subs	r3, r2, r3
 8016a36:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8016a3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016a3c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8016a3e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016a42:	2200      	movs	r2, #0
 8016a44:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8016a46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8016a4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016a4e:	895b      	ldrh	r3, [r3, #10]
 8016a50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016a54:	429a      	cmp	r2, r3
 8016a56:	d8e9      	bhi.n	8016a2c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016a58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016a5c:	4619      	mov	r1, r3
 8016a5e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8016a60:	f7fc f89c 	bl	8012b9c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a68:	4a90      	ldr	r2, [pc, #576]	@ (8016cac <tcp_receive+0x884>)
 8016a6a:	6013      	str	r3, [r2, #0]
 8016a6c:	4b90      	ldr	r3, [pc, #576]	@ (8016cb0 <tcp_receive+0x888>)
 8016a6e:	68db      	ldr	r3, [r3, #12]
 8016a70:	4a8e      	ldr	r2, [pc, #568]	@ (8016cac <tcp_receive+0x884>)
 8016a72:	6812      	ldr	r2, [r2, #0]
 8016a74:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016a76:	e00d      	b.n	8016a94 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016a78:	4b8c      	ldr	r3, [pc, #560]	@ (8016cac <tcp_receive+0x884>)
 8016a7a:	681a      	ldr	r2, [r3, #0]
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a80:	1ad3      	subs	r3, r2, r3
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	da06      	bge.n	8016a94 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	8b5b      	ldrh	r3, [r3, #26]
 8016a8a:	f043 0302 	orr.w	r3, r3, #2
 8016a8e:	b29a      	uxth	r2, r3
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016a94:	4b85      	ldr	r3, [pc, #532]	@ (8016cac <tcp_receive+0x884>)
 8016a96:	681a      	ldr	r2, [r3, #0]
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a9c:	1ad3      	subs	r3, r2, r3
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	f2c0 8427 	blt.w	80172f2 <tcp_receive+0xeca>
 8016aa4:	4b81      	ldr	r3, [pc, #516]	@ (8016cac <tcp_receive+0x884>)
 8016aa6:	681a      	ldr	r2, [r3, #0]
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016aac:	6879      	ldr	r1, [r7, #4]
 8016aae:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016ab0:	440b      	add	r3, r1
 8016ab2:	1ad3      	subs	r3, r2, r3
 8016ab4:	3301      	adds	r3, #1
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	f300 841b 	bgt.w	80172f2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016ac0:	4b7a      	ldr	r3, [pc, #488]	@ (8016cac <tcp_receive+0x884>)
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	429a      	cmp	r2, r3
 8016ac6:	f040 8298 	bne.w	8016ffa <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016aca:	4b79      	ldr	r3, [pc, #484]	@ (8016cb0 <tcp_receive+0x888>)
 8016acc:	891c      	ldrh	r4, [r3, #8]
 8016ace:	4b78      	ldr	r3, [pc, #480]	@ (8016cb0 <tcp_receive+0x888>)
 8016ad0:	68db      	ldr	r3, [r3, #12]
 8016ad2:	899b      	ldrh	r3, [r3, #12]
 8016ad4:	b29b      	uxth	r3, r3
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	f7fa fcf8 	bl	80114cc <lwip_htons>
 8016adc:	4603      	mov	r3, r0
 8016ade:	b2db      	uxtb	r3, r3
 8016ae0:	f003 0303 	and.w	r3, r3, #3
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d001      	beq.n	8016aec <tcp_receive+0x6c4>
 8016ae8:	2301      	movs	r3, #1
 8016aea:	e000      	b.n	8016aee <tcp_receive+0x6c6>
 8016aec:	2300      	movs	r3, #0
 8016aee:	4423      	add	r3, r4
 8016af0:	b29a      	uxth	r2, r3
 8016af2:	4b70      	ldr	r3, [pc, #448]	@ (8016cb4 <tcp_receive+0x88c>)
 8016af4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016afa:	4b6e      	ldr	r3, [pc, #440]	@ (8016cb4 <tcp_receive+0x88c>)
 8016afc:	881b      	ldrh	r3, [r3, #0]
 8016afe:	429a      	cmp	r2, r3
 8016b00:	d274      	bcs.n	8016bec <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016b02:	4b6b      	ldr	r3, [pc, #428]	@ (8016cb0 <tcp_receive+0x888>)
 8016b04:	68db      	ldr	r3, [r3, #12]
 8016b06:	899b      	ldrh	r3, [r3, #12]
 8016b08:	b29b      	uxth	r3, r3
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f7fa fcde 	bl	80114cc <lwip_htons>
 8016b10:	4603      	mov	r3, r0
 8016b12:	b2db      	uxtb	r3, r3
 8016b14:	f003 0301 	and.w	r3, r3, #1
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d01e      	beq.n	8016b5a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016b1c:	4b64      	ldr	r3, [pc, #400]	@ (8016cb0 <tcp_receive+0x888>)
 8016b1e:	68db      	ldr	r3, [r3, #12]
 8016b20:	899b      	ldrh	r3, [r3, #12]
 8016b22:	b29b      	uxth	r3, r3
 8016b24:	b21b      	sxth	r3, r3
 8016b26:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8016b2a:	b21c      	sxth	r4, r3
 8016b2c:	4b60      	ldr	r3, [pc, #384]	@ (8016cb0 <tcp_receive+0x888>)
 8016b2e:	68db      	ldr	r3, [r3, #12]
 8016b30:	899b      	ldrh	r3, [r3, #12]
 8016b32:	b29b      	uxth	r3, r3
 8016b34:	4618      	mov	r0, r3
 8016b36:	f7fa fcc9 	bl	80114cc <lwip_htons>
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	b2db      	uxtb	r3, r3
 8016b3e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8016b42:	b29b      	uxth	r3, r3
 8016b44:	4618      	mov	r0, r3
 8016b46:	f7fa fcc1 	bl	80114cc <lwip_htons>
 8016b4a:	4603      	mov	r3, r0
 8016b4c:	b21b      	sxth	r3, r3
 8016b4e:	4323      	orrs	r3, r4
 8016b50:	b21a      	sxth	r2, r3
 8016b52:	4b57      	ldr	r3, [pc, #348]	@ (8016cb0 <tcp_receive+0x888>)
 8016b54:	68db      	ldr	r3, [r3, #12]
 8016b56:	b292      	uxth	r2, r2
 8016b58:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016b5e:	4b54      	ldr	r3, [pc, #336]	@ (8016cb0 <tcp_receive+0x888>)
 8016b60:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016b62:	4b53      	ldr	r3, [pc, #332]	@ (8016cb0 <tcp_receive+0x888>)
 8016b64:	68db      	ldr	r3, [r3, #12]
 8016b66:	899b      	ldrh	r3, [r3, #12]
 8016b68:	b29b      	uxth	r3, r3
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	f7fa fcae 	bl	80114cc <lwip_htons>
 8016b70:	4603      	mov	r3, r0
 8016b72:	b2db      	uxtb	r3, r3
 8016b74:	f003 0302 	and.w	r3, r3, #2
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d005      	beq.n	8016b88 <tcp_receive+0x760>
            inseg.len -= 1;
 8016b7c:	4b4c      	ldr	r3, [pc, #304]	@ (8016cb0 <tcp_receive+0x888>)
 8016b7e:	891b      	ldrh	r3, [r3, #8]
 8016b80:	3b01      	subs	r3, #1
 8016b82:	b29a      	uxth	r2, r3
 8016b84:	4b4a      	ldr	r3, [pc, #296]	@ (8016cb0 <tcp_receive+0x888>)
 8016b86:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016b88:	4b49      	ldr	r3, [pc, #292]	@ (8016cb0 <tcp_receive+0x888>)
 8016b8a:	685b      	ldr	r3, [r3, #4]
 8016b8c:	4a48      	ldr	r2, [pc, #288]	@ (8016cb0 <tcp_receive+0x888>)
 8016b8e:	8912      	ldrh	r2, [r2, #8]
 8016b90:	4611      	mov	r1, r2
 8016b92:	4618      	mov	r0, r3
 8016b94:	f7fb ff02 	bl	801299c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016b98:	4b45      	ldr	r3, [pc, #276]	@ (8016cb0 <tcp_receive+0x888>)
 8016b9a:	891c      	ldrh	r4, [r3, #8]
 8016b9c:	4b44      	ldr	r3, [pc, #272]	@ (8016cb0 <tcp_receive+0x888>)
 8016b9e:	68db      	ldr	r3, [r3, #12]
 8016ba0:	899b      	ldrh	r3, [r3, #12]
 8016ba2:	b29b      	uxth	r3, r3
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	f7fa fc91 	bl	80114cc <lwip_htons>
 8016baa:	4603      	mov	r3, r0
 8016bac:	b2db      	uxtb	r3, r3
 8016bae:	f003 0303 	and.w	r3, r3, #3
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d001      	beq.n	8016bba <tcp_receive+0x792>
 8016bb6:	2301      	movs	r3, #1
 8016bb8:	e000      	b.n	8016bbc <tcp_receive+0x794>
 8016bba:	2300      	movs	r3, #0
 8016bbc:	4423      	add	r3, r4
 8016bbe:	b29a      	uxth	r2, r3
 8016bc0:	4b3c      	ldr	r3, [pc, #240]	@ (8016cb4 <tcp_receive+0x88c>)
 8016bc2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016bc4:	4b3b      	ldr	r3, [pc, #236]	@ (8016cb4 <tcp_receive+0x88c>)
 8016bc6:	881b      	ldrh	r3, [r3, #0]
 8016bc8:	461a      	mov	r2, r3
 8016bca:	4b38      	ldr	r3, [pc, #224]	@ (8016cac <tcp_receive+0x884>)
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	441a      	add	r2, r3
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bd4:	6879      	ldr	r1, [r7, #4]
 8016bd6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016bd8:	440b      	add	r3, r1
 8016bda:	429a      	cmp	r2, r3
 8016bdc:	d006      	beq.n	8016bec <tcp_receive+0x7c4>
 8016bde:	4b36      	ldr	r3, [pc, #216]	@ (8016cb8 <tcp_receive+0x890>)
 8016be0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8016be4:	4935      	ldr	r1, [pc, #212]	@ (8016cbc <tcp_receive+0x894>)
 8016be6:	4836      	ldr	r0, [pc, #216]	@ (8016cc0 <tcp_receive+0x898>)
 8016be8:	f006 fbf0 	bl	801d3cc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	f000 80e6 	beq.w	8016dc2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8016cb0 <tcp_receive+0x888>)
 8016bf8:	68db      	ldr	r3, [r3, #12]
 8016bfa:	899b      	ldrh	r3, [r3, #12]
 8016bfc:	b29b      	uxth	r3, r3
 8016bfe:	4618      	mov	r0, r3
 8016c00:	f7fa fc64 	bl	80114cc <lwip_htons>
 8016c04:	4603      	mov	r3, r0
 8016c06:	b2db      	uxtb	r3, r3
 8016c08:	f003 0301 	and.w	r3, r3, #1
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d010      	beq.n	8016c32 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8016c10:	e00a      	b.n	8016c28 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016c16:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016c1c:	681a      	ldr	r2, [r3, #0]
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8016c22:	68f8      	ldr	r0, [r7, #12]
 8016c24:	f7fd fcc5 	bl	80145b2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d1f0      	bne.n	8016c12 <tcp_receive+0x7ea>
 8016c30:	e0c7      	b.n	8016dc2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016c38:	e051      	b.n	8016cde <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c3c:	68db      	ldr	r3, [r3, #12]
 8016c3e:	899b      	ldrh	r3, [r3, #12]
 8016c40:	b29b      	uxth	r3, r3
 8016c42:	4618      	mov	r0, r3
 8016c44:	f7fa fc42 	bl	80114cc <lwip_htons>
 8016c48:	4603      	mov	r3, r0
 8016c4a:	b2db      	uxtb	r3, r3
 8016c4c:	f003 0301 	and.w	r3, r3, #1
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d03c      	beq.n	8016cce <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016c54:	4b16      	ldr	r3, [pc, #88]	@ (8016cb0 <tcp_receive+0x888>)
 8016c56:	68db      	ldr	r3, [r3, #12]
 8016c58:	899b      	ldrh	r3, [r3, #12]
 8016c5a:	b29b      	uxth	r3, r3
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f7fa fc35 	bl	80114cc <lwip_htons>
 8016c62:	4603      	mov	r3, r0
 8016c64:	b2db      	uxtb	r3, r3
 8016c66:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d12f      	bne.n	8016cce <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016c6e:	4b10      	ldr	r3, [pc, #64]	@ (8016cb0 <tcp_receive+0x888>)
 8016c70:	68db      	ldr	r3, [r3, #12]
 8016c72:	899b      	ldrh	r3, [r3, #12]
 8016c74:	b29c      	uxth	r4, r3
 8016c76:	2001      	movs	r0, #1
 8016c78:	f7fa fc28 	bl	80114cc <lwip_htons>
 8016c7c:	4603      	mov	r3, r0
 8016c7e:	461a      	mov	r2, r3
 8016c80:	4b0b      	ldr	r3, [pc, #44]	@ (8016cb0 <tcp_receive+0x888>)
 8016c82:	68db      	ldr	r3, [r3, #12]
 8016c84:	4322      	orrs	r2, r4
 8016c86:	b292      	uxth	r2, r2
 8016c88:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016c8a:	4b09      	ldr	r3, [pc, #36]	@ (8016cb0 <tcp_receive+0x888>)
 8016c8c:	891c      	ldrh	r4, [r3, #8]
 8016c8e:	4b08      	ldr	r3, [pc, #32]	@ (8016cb0 <tcp_receive+0x888>)
 8016c90:	68db      	ldr	r3, [r3, #12]
 8016c92:	899b      	ldrh	r3, [r3, #12]
 8016c94:	b29b      	uxth	r3, r3
 8016c96:	4618      	mov	r0, r3
 8016c98:	f7fa fc18 	bl	80114cc <lwip_htons>
 8016c9c:	4603      	mov	r3, r0
 8016c9e:	b2db      	uxtb	r3, r3
 8016ca0:	f003 0303 	and.w	r3, r3, #3
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d00d      	beq.n	8016cc4 <tcp_receive+0x89c>
 8016ca8:	2301      	movs	r3, #1
 8016caa:	e00c      	b.n	8016cc6 <tcp_receive+0x89e>
 8016cac:	2000e494 	.word	0x2000e494
 8016cb0:	2000e474 	.word	0x2000e474
 8016cb4:	2000e49e 	.word	0x2000e49e
 8016cb8:	08020484 	.word	0x08020484
 8016cbc:	0802082c 	.word	0x0802082c
 8016cc0:	080204d0 	.word	0x080204d0
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	4423      	add	r3, r4
 8016cc8:	b29a      	uxth	r2, r3
 8016cca:	4b98      	ldr	r3, [pc, #608]	@ (8016f2c <tcp_receive+0xb04>)
 8016ccc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8016cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016cd0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8016cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8016cd8:	6938      	ldr	r0, [r7, #16]
 8016cda:	f7fd fc6a 	bl	80145b2 <tcp_seg_free>
            while (next &&
 8016cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d00e      	beq.n	8016d02 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016ce4:	4b91      	ldr	r3, [pc, #580]	@ (8016f2c <tcp_receive+0xb04>)
 8016ce6:	881b      	ldrh	r3, [r3, #0]
 8016ce8:	461a      	mov	r2, r3
 8016cea:	4b91      	ldr	r3, [pc, #580]	@ (8016f30 <tcp_receive+0xb08>)
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	441a      	add	r2, r3
 8016cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016cf2:	68db      	ldr	r3, [r3, #12]
 8016cf4:	685b      	ldr	r3, [r3, #4]
 8016cf6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016cf8:	8909      	ldrh	r1, [r1, #8]
 8016cfa:	440b      	add	r3, r1
 8016cfc:	1ad3      	subs	r3, r2, r3
            while (next &&
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	da9b      	bge.n	8016c3a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d059      	beq.n	8016dbc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8016d08:	4b88      	ldr	r3, [pc, #544]	@ (8016f2c <tcp_receive+0xb04>)
 8016d0a:	881b      	ldrh	r3, [r3, #0]
 8016d0c:	461a      	mov	r2, r3
 8016d0e:	4b88      	ldr	r3, [pc, #544]	@ (8016f30 <tcp_receive+0xb08>)
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	441a      	add	r2, r3
 8016d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016d16:	68db      	ldr	r3, [r3, #12]
 8016d18:	685b      	ldr	r3, [r3, #4]
 8016d1a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	dd4d      	ble.n	8016dbc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016d22:	68db      	ldr	r3, [r3, #12]
 8016d24:	685b      	ldr	r3, [r3, #4]
 8016d26:	b29a      	uxth	r2, r3
 8016d28:	4b81      	ldr	r3, [pc, #516]	@ (8016f30 <tcp_receive+0xb08>)
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	b29b      	uxth	r3, r3
 8016d2e:	1ad3      	subs	r3, r2, r3
 8016d30:	b29a      	uxth	r2, r3
 8016d32:	4b80      	ldr	r3, [pc, #512]	@ (8016f34 <tcp_receive+0xb0c>)
 8016d34:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016d36:	4b7f      	ldr	r3, [pc, #508]	@ (8016f34 <tcp_receive+0xb0c>)
 8016d38:	68db      	ldr	r3, [r3, #12]
 8016d3a:	899b      	ldrh	r3, [r3, #12]
 8016d3c:	b29b      	uxth	r3, r3
 8016d3e:	4618      	mov	r0, r3
 8016d40:	f7fa fbc4 	bl	80114cc <lwip_htons>
 8016d44:	4603      	mov	r3, r0
 8016d46:	b2db      	uxtb	r3, r3
 8016d48:	f003 0302 	and.w	r3, r3, #2
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d005      	beq.n	8016d5c <tcp_receive+0x934>
                inseg.len -= 1;
 8016d50:	4b78      	ldr	r3, [pc, #480]	@ (8016f34 <tcp_receive+0xb0c>)
 8016d52:	891b      	ldrh	r3, [r3, #8]
 8016d54:	3b01      	subs	r3, #1
 8016d56:	b29a      	uxth	r2, r3
 8016d58:	4b76      	ldr	r3, [pc, #472]	@ (8016f34 <tcp_receive+0xb0c>)
 8016d5a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016d5c:	4b75      	ldr	r3, [pc, #468]	@ (8016f34 <tcp_receive+0xb0c>)
 8016d5e:	685b      	ldr	r3, [r3, #4]
 8016d60:	4a74      	ldr	r2, [pc, #464]	@ (8016f34 <tcp_receive+0xb0c>)
 8016d62:	8912      	ldrh	r2, [r2, #8]
 8016d64:	4611      	mov	r1, r2
 8016d66:	4618      	mov	r0, r3
 8016d68:	f7fb fe18 	bl	801299c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016d6c:	4b71      	ldr	r3, [pc, #452]	@ (8016f34 <tcp_receive+0xb0c>)
 8016d6e:	891c      	ldrh	r4, [r3, #8]
 8016d70:	4b70      	ldr	r3, [pc, #448]	@ (8016f34 <tcp_receive+0xb0c>)
 8016d72:	68db      	ldr	r3, [r3, #12]
 8016d74:	899b      	ldrh	r3, [r3, #12]
 8016d76:	b29b      	uxth	r3, r3
 8016d78:	4618      	mov	r0, r3
 8016d7a:	f7fa fba7 	bl	80114cc <lwip_htons>
 8016d7e:	4603      	mov	r3, r0
 8016d80:	b2db      	uxtb	r3, r3
 8016d82:	f003 0303 	and.w	r3, r3, #3
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d001      	beq.n	8016d8e <tcp_receive+0x966>
 8016d8a:	2301      	movs	r3, #1
 8016d8c:	e000      	b.n	8016d90 <tcp_receive+0x968>
 8016d8e:	2300      	movs	r3, #0
 8016d90:	4423      	add	r3, r4
 8016d92:	b29a      	uxth	r2, r3
 8016d94:	4b65      	ldr	r3, [pc, #404]	@ (8016f2c <tcp_receive+0xb04>)
 8016d96:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016d98:	4b64      	ldr	r3, [pc, #400]	@ (8016f2c <tcp_receive+0xb04>)
 8016d9a:	881b      	ldrh	r3, [r3, #0]
 8016d9c:	461a      	mov	r2, r3
 8016d9e:	4b64      	ldr	r3, [pc, #400]	@ (8016f30 <tcp_receive+0xb08>)
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	441a      	add	r2, r3
 8016da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016da6:	68db      	ldr	r3, [r3, #12]
 8016da8:	685b      	ldr	r3, [r3, #4]
 8016daa:	429a      	cmp	r2, r3
 8016dac:	d006      	beq.n	8016dbc <tcp_receive+0x994>
 8016dae:	4b62      	ldr	r3, [pc, #392]	@ (8016f38 <tcp_receive+0xb10>)
 8016db0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8016db4:	4961      	ldr	r1, [pc, #388]	@ (8016f3c <tcp_receive+0xb14>)
 8016db6:	4862      	ldr	r0, [pc, #392]	@ (8016f40 <tcp_receive+0xb18>)
 8016db8:	f006 fb08 	bl	801d3cc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016dc0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8016dc2:	4b5a      	ldr	r3, [pc, #360]	@ (8016f2c <tcp_receive+0xb04>)
 8016dc4:	881b      	ldrh	r3, [r3, #0]
 8016dc6:	461a      	mov	r2, r3
 8016dc8:	4b59      	ldr	r3, [pc, #356]	@ (8016f30 <tcp_receive+0xb08>)
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	441a      	add	r2, r3
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016dd6:	4b55      	ldr	r3, [pc, #340]	@ (8016f2c <tcp_receive+0xb04>)
 8016dd8:	881b      	ldrh	r3, [r3, #0]
 8016dda:	429a      	cmp	r2, r3
 8016ddc:	d206      	bcs.n	8016dec <tcp_receive+0x9c4>
 8016dde:	4b56      	ldr	r3, [pc, #344]	@ (8016f38 <tcp_receive+0xb10>)
 8016de0:	f240 6207 	movw	r2, #1543	@ 0x607
 8016de4:	4957      	ldr	r1, [pc, #348]	@ (8016f44 <tcp_receive+0xb1c>)
 8016de6:	4856      	ldr	r0, [pc, #344]	@ (8016f40 <tcp_receive+0xb18>)
 8016de8:	f006 faf0 	bl	801d3cc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016df0:	4b4e      	ldr	r3, [pc, #312]	@ (8016f2c <tcp_receive+0xb04>)
 8016df2:	881b      	ldrh	r3, [r3, #0]
 8016df4:	1ad3      	subs	r3, r2, r3
 8016df6:	b29a      	uxth	r2, r3
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016dfc:	6878      	ldr	r0, [r7, #4]
 8016dfe:	f7fc feb1 	bl	8013b64 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8016e02:	4b4c      	ldr	r3, [pc, #304]	@ (8016f34 <tcp_receive+0xb0c>)
 8016e04:	685b      	ldr	r3, [r3, #4]
 8016e06:	891b      	ldrh	r3, [r3, #8]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d006      	beq.n	8016e1a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8016e0c:	4b49      	ldr	r3, [pc, #292]	@ (8016f34 <tcp_receive+0xb0c>)
 8016e0e:	685b      	ldr	r3, [r3, #4]
 8016e10:	4a4d      	ldr	r2, [pc, #308]	@ (8016f48 <tcp_receive+0xb20>)
 8016e12:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016e14:	4b47      	ldr	r3, [pc, #284]	@ (8016f34 <tcp_receive+0xb0c>)
 8016e16:	2200      	movs	r2, #0
 8016e18:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016e1a:	4b46      	ldr	r3, [pc, #280]	@ (8016f34 <tcp_receive+0xb0c>)
 8016e1c:	68db      	ldr	r3, [r3, #12]
 8016e1e:	899b      	ldrh	r3, [r3, #12]
 8016e20:	b29b      	uxth	r3, r3
 8016e22:	4618      	mov	r0, r3
 8016e24:	f7fa fb52 	bl	80114cc <lwip_htons>
 8016e28:	4603      	mov	r3, r0
 8016e2a:	b2db      	uxtb	r3, r3
 8016e2c:	f003 0301 	and.w	r3, r3, #1
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	f000 80b8 	beq.w	8016fa6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016e36:	4b45      	ldr	r3, [pc, #276]	@ (8016f4c <tcp_receive+0xb24>)
 8016e38:	781b      	ldrb	r3, [r3, #0]
 8016e3a:	f043 0320 	orr.w	r3, r3, #32
 8016e3e:	b2da      	uxtb	r2, r3
 8016e40:	4b42      	ldr	r3, [pc, #264]	@ (8016f4c <tcp_receive+0xb24>)
 8016e42:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016e44:	e0af      	b.n	8016fa6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016e4a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016e50:	68db      	ldr	r3, [r3, #12]
 8016e52:	685b      	ldr	r3, [r3, #4]
 8016e54:	4a36      	ldr	r2, [pc, #216]	@ (8016f30 <tcp_receive+0xb08>)
 8016e56:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016e58:	68bb      	ldr	r3, [r7, #8]
 8016e5a:	891b      	ldrh	r3, [r3, #8]
 8016e5c:	461c      	mov	r4, r3
 8016e5e:	68bb      	ldr	r3, [r7, #8]
 8016e60:	68db      	ldr	r3, [r3, #12]
 8016e62:	899b      	ldrh	r3, [r3, #12]
 8016e64:	b29b      	uxth	r3, r3
 8016e66:	4618      	mov	r0, r3
 8016e68:	f7fa fb30 	bl	80114cc <lwip_htons>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	b2db      	uxtb	r3, r3
 8016e70:	f003 0303 	and.w	r3, r3, #3
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d001      	beq.n	8016e7c <tcp_receive+0xa54>
 8016e78:	2301      	movs	r3, #1
 8016e7a:	e000      	b.n	8016e7e <tcp_receive+0xa56>
 8016e7c:	2300      	movs	r3, #0
 8016e7e:	191a      	adds	r2, r3, r4
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e84:	441a      	add	r2, r3
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016e8e:	461c      	mov	r4, r3
 8016e90:	68bb      	ldr	r3, [r7, #8]
 8016e92:	891b      	ldrh	r3, [r3, #8]
 8016e94:	461d      	mov	r5, r3
 8016e96:	68bb      	ldr	r3, [r7, #8]
 8016e98:	68db      	ldr	r3, [r3, #12]
 8016e9a:	899b      	ldrh	r3, [r3, #12]
 8016e9c:	b29b      	uxth	r3, r3
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	f7fa fb14 	bl	80114cc <lwip_htons>
 8016ea4:	4603      	mov	r3, r0
 8016ea6:	b2db      	uxtb	r3, r3
 8016ea8:	f003 0303 	and.w	r3, r3, #3
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d001      	beq.n	8016eb4 <tcp_receive+0xa8c>
 8016eb0:	2301      	movs	r3, #1
 8016eb2:	e000      	b.n	8016eb6 <tcp_receive+0xa8e>
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	442b      	add	r3, r5
 8016eb8:	429c      	cmp	r4, r3
 8016eba:	d206      	bcs.n	8016eca <tcp_receive+0xaa2>
 8016ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8016f38 <tcp_receive+0xb10>)
 8016ebe:	f240 622b 	movw	r2, #1579	@ 0x62b
 8016ec2:	4923      	ldr	r1, [pc, #140]	@ (8016f50 <tcp_receive+0xb28>)
 8016ec4:	481e      	ldr	r0, [pc, #120]	@ (8016f40 <tcp_receive+0xb18>)
 8016ec6:	f006 fa81 	bl	801d3cc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016eca:	68bb      	ldr	r3, [r7, #8]
 8016ecc:	891b      	ldrh	r3, [r3, #8]
 8016ece:	461c      	mov	r4, r3
 8016ed0:	68bb      	ldr	r3, [r7, #8]
 8016ed2:	68db      	ldr	r3, [r3, #12]
 8016ed4:	899b      	ldrh	r3, [r3, #12]
 8016ed6:	b29b      	uxth	r3, r3
 8016ed8:	4618      	mov	r0, r3
 8016eda:	f7fa faf7 	bl	80114cc <lwip_htons>
 8016ede:	4603      	mov	r3, r0
 8016ee0:	b2db      	uxtb	r3, r3
 8016ee2:	f003 0303 	and.w	r3, r3, #3
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d001      	beq.n	8016eee <tcp_receive+0xac6>
 8016eea:	2301      	movs	r3, #1
 8016eec:	e000      	b.n	8016ef0 <tcp_receive+0xac8>
 8016eee:	2300      	movs	r3, #0
 8016ef0:	1919      	adds	r1, r3, r4
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016ef6:	b28b      	uxth	r3, r1
 8016ef8:	1ad3      	subs	r3, r2, r3
 8016efa:	b29a      	uxth	r2, r3
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8016f00:	6878      	ldr	r0, [r7, #4]
 8016f02:	f7fc fe2f 	bl	8013b64 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8016f06:	68bb      	ldr	r3, [r7, #8]
 8016f08:	685b      	ldr	r3, [r3, #4]
 8016f0a:	891b      	ldrh	r3, [r3, #8]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d028      	beq.n	8016f62 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8016f10:	4b0d      	ldr	r3, [pc, #52]	@ (8016f48 <tcp_receive+0xb20>)
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d01d      	beq.n	8016f54 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8016f18:	4b0b      	ldr	r3, [pc, #44]	@ (8016f48 <tcp_receive+0xb20>)
 8016f1a:	681a      	ldr	r2, [r3, #0]
 8016f1c:	68bb      	ldr	r3, [r7, #8]
 8016f1e:	685b      	ldr	r3, [r3, #4]
 8016f20:	4619      	mov	r1, r3
 8016f22:	4610      	mov	r0, r2
 8016f24:	f7fb ff8e 	bl	8012e44 <pbuf_cat>
 8016f28:	e018      	b.n	8016f5c <tcp_receive+0xb34>
 8016f2a:	bf00      	nop
 8016f2c:	2000e49e 	.word	0x2000e49e
 8016f30:	2000e494 	.word	0x2000e494
 8016f34:	2000e474 	.word	0x2000e474
 8016f38:	08020484 	.word	0x08020484
 8016f3c:	08020864 	.word	0x08020864
 8016f40:	080204d0 	.word	0x080204d0
 8016f44:	080208a0 	.word	0x080208a0
 8016f48:	2000e4a4 	.word	0x2000e4a4
 8016f4c:	2000e4a1 	.word	0x2000e4a1
 8016f50:	080208c0 	.word	0x080208c0
            } else {
              recv_data = cseg->p;
 8016f54:	68bb      	ldr	r3, [r7, #8]
 8016f56:	685b      	ldr	r3, [r3, #4]
 8016f58:	4a70      	ldr	r2, [pc, #448]	@ (801711c <tcp_receive+0xcf4>)
 8016f5a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016f5c:	68bb      	ldr	r3, [r7, #8]
 8016f5e:	2200      	movs	r2, #0
 8016f60:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016f62:	68bb      	ldr	r3, [r7, #8]
 8016f64:	68db      	ldr	r3, [r3, #12]
 8016f66:	899b      	ldrh	r3, [r3, #12]
 8016f68:	b29b      	uxth	r3, r3
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	f7fa faae 	bl	80114cc <lwip_htons>
 8016f70:	4603      	mov	r3, r0
 8016f72:	b2db      	uxtb	r3, r3
 8016f74:	f003 0301 	and.w	r3, r3, #1
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d00d      	beq.n	8016f98 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8016f7c:	4b68      	ldr	r3, [pc, #416]	@ (8017120 <tcp_receive+0xcf8>)
 8016f7e:	781b      	ldrb	r3, [r3, #0]
 8016f80:	f043 0320 	orr.w	r3, r3, #32
 8016f84:	b2da      	uxtb	r2, r3
 8016f86:	4b66      	ldr	r3, [pc, #408]	@ (8017120 <tcp_receive+0xcf8>)
 8016f88:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	7d1b      	ldrb	r3, [r3, #20]
 8016f8e:	2b04      	cmp	r3, #4
 8016f90:	d102      	bne.n	8016f98 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	2207      	movs	r2, #7
 8016f96:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8016f98:	68bb      	ldr	r3, [r7, #8]
 8016f9a:	681a      	ldr	r2, [r3, #0]
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8016fa0:	68b8      	ldr	r0, [r7, #8]
 8016fa2:	f7fd fb06 	bl	80145b2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d008      	beq.n	8016fc0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016fb2:	68db      	ldr	r3, [r3, #12]
 8016fb4:	685a      	ldr	r2, [r3, #4]
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8016fba:	429a      	cmp	r2, r3
 8016fbc:	f43f af43 	beq.w	8016e46 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	8b5b      	ldrh	r3, [r3, #26]
 8016fc4:	f003 0301 	and.w	r3, r3, #1
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d00e      	beq.n	8016fea <tcp_receive+0xbc2>
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	8b5b      	ldrh	r3, [r3, #26]
 8016fd0:	f023 0301 	bic.w	r3, r3, #1
 8016fd4:	b29a      	uxth	r2, r3
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	835a      	strh	r2, [r3, #26]
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	8b5b      	ldrh	r3, [r3, #26]
 8016fde:	f043 0302 	orr.w	r3, r3, #2
 8016fe2:	b29a      	uxth	r2, r3
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016fe8:	e187      	b.n	80172fa <tcp_receive+0xed2>
        tcp_ack(pcb);
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	8b5b      	ldrh	r3, [r3, #26]
 8016fee:	f043 0301 	orr.w	r3, r3, #1
 8016ff2:	b29a      	uxth	r2, r3
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016ff8:	e17f      	b.n	80172fa <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d106      	bne.n	8017010 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8017002:	4848      	ldr	r0, [pc, #288]	@ (8017124 <tcp_receive+0xcfc>)
 8017004:	f7fd faee 	bl	80145e4 <tcp_seg_copy>
 8017008:	4602      	mov	r2, r0
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	675a      	str	r2, [r3, #116]	@ 0x74
 801700e:	e16c      	b.n	80172ea <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8017010:	2300      	movs	r3, #0
 8017012:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017018:	63bb      	str	r3, [r7, #56]	@ 0x38
 801701a:	e156      	b.n	80172ca <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801701c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801701e:	68db      	ldr	r3, [r3, #12]
 8017020:	685a      	ldr	r2, [r3, #4]
 8017022:	4b41      	ldr	r3, [pc, #260]	@ (8017128 <tcp_receive+0xd00>)
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	429a      	cmp	r2, r3
 8017028:	d11d      	bne.n	8017066 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801702a:	4b3e      	ldr	r3, [pc, #248]	@ (8017124 <tcp_receive+0xcfc>)
 801702c:	891a      	ldrh	r2, [r3, #8]
 801702e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017030:	891b      	ldrh	r3, [r3, #8]
 8017032:	429a      	cmp	r2, r3
 8017034:	f240 814e 	bls.w	80172d4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017038:	483a      	ldr	r0, [pc, #232]	@ (8017124 <tcp_receive+0xcfc>)
 801703a:	f7fd fad3 	bl	80145e4 <tcp_seg_copy>
 801703e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8017040:	697b      	ldr	r3, [r7, #20]
 8017042:	2b00      	cmp	r3, #0
 8017044:	f000 8148 	beq.w	80172d8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8017048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801704a:	2b00      	cmp	r3, #0
 801704c:	d003      	beq.n	8017056 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801704e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017050:	697a      	ldr	r2, [r7, #20]
 8017052:	601a      	str	r2, [r3, #0]
 8017054:	e002      	b.n	801705c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	697a      	ldr	r2, [r7, #20]
 801705a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801705c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801705e:	6978      	ldr	r0, [r7, #20]
 8017060:	f7ff f8de 	bl	8016220 <tcp_oos_insert_segment>
                }
                break;
 8017064:	e138      	b.n	80172d8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8017066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017068:	2b00      	cmp	r3, #0
 801706a:	d117      	bne.n	801709c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801706c:	4b2e      	ldr	r3, [pc, #184]	@ (8017128 <tcp_receive+0xd00>)
 801706e:	681a      	ldr	r2, [r3, #0]
 8017070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017072:	68db      	ldr	r3, [r3, #12]
 8017074:	685b      	ldr	r3, [r3, #4]
 8017076:	1ad3      	subs	r3, r2, r3
 8017078:	2b00      	cmp	r3, #0
 801707a:	da57      	bge.n	801712c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801707c:	4829      	ldr	r0, [pc, #164]	@ (8017124 <tcp_receive+0xcfc>)
 801707e:	f7fd fab1 	bl	80145e4 <tcp_seg_copy>
 8017082:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8017084:	69bb      	ldr	r3, [r7, #24]
 8017086:	2b00      	cmp	r3, #0
 8017088:	f000 8128 	beq.w	80172dc <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	69ba      	ldr	r2, [r7, #24]
 8017090:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8017092:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017094:	69b8      	ldr	r0, [r7, #24]
 8017096:	f7ff f8c3 	bl	8016220 <tcp_oos_insert_segment>
                  }
                  break;
 801709a:	e11f      	b.n	80172dc <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801709c:	4b22      	ldr	r3, [pc, #136]	@ (8017128 <tcp_receive+0xd00>)
 801709e:	681a      	ldr	r2, [r3, #0]
 80170a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80170a2:	68db      	ldr	r3, [r3, #12]
 80170a4:	685b      	ldr	r3, [r3, #4]
 80170a6:	1ad3      	subs	r3, r2, r3
 80170a8:	3b01      	subs	r3, #1
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	db3e      	blt.n	801712c <tcp_receive+0xd04>
 80170ae:	4b1e      	ldr	r3, [pc, #120]	@ (8017128 <tcp_receive+0xd00>)
 80170b0:	681a      	ldr	r2, [r3, #0]
 80170b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80170b4:	68db      	ldr	r3, [r3, #12]
 80170b6:	685b      	ldr	r3, [r3, #4]
 80170b8:	1ad3      	subs	r3, r2, r3
 80170ba:	3301      	adds	r3, #1
 80170bc:	2b00      	cmp	r3, #0
 80170be:	dc35      	bgt.n	801712c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80170c0:	4818      	ldr	r0, [pc, #96]	@ (8017124 <tcp_receive+0xcfc>)
 80170c2:	f7fd fa8f 	bl	80145e4 <tcp_seg_copy>
 80170c6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80170c8:	69fb      	ldr	r3, [r7, #28]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	f000 8108 	beq.w	80172e0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80170d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80170d2:	68db      	ldr	r3, [r3, #12]
 80170d4:	685b      	ldr	r3, [r3, #4]
 80170d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80170d8:	8912      	ldrh	r2, [r2, #8]
 80170da:	441a      	add	r2, r3
 80170dc:	4b12      	ldr	r3, [pc, #72]	@ (8017128 <tcp_receive+0xd00>)
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	1ad3      	subs	r3, r2, r3
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	dd12      	ble.n	801710c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80170e6:	4b10      	ldr	r3, [pc, #64]	@ (8017128 <tcp_receive+0xd00>)
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	b29a      	uxth	r2, r3
 80170ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80170ee:	68db      	ldr	r3, [r3, #12]
 80170f0:	685b      	ldr	r3, [r3, #4]
 80170f2:	b29b      	uxth	r3, r3
 80170f4:	1ad3      	subs	r3, r2, r3
 80170f6:	b29a      	uxth	r2, r3
 80170f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80170fa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80170fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80170fe:	685a      	ldr	r2, [r3, #4]
 8017100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017102:	891b      	ldrh	r3, [r3, #8]
 8017104:	4619      	mov	r1, r3
 8017106:	4610      	mov	r0, r2
 8017108:	f7fb fc48 	bl	801299c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801710c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801710e:	69fa      	ldr	r2, [r7, #28]
 8017110:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8017112:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017114:	69f8      	ldr	r0, [r7, #28]
 8017116:	f7ff f883 	bl	8016220 <tcp_oos_insert_segment>
                  }
                  break;
 801711a:	e0e1      	b.n	80172e0 <tcp_receive+0xeb8>
 801711c:	2000e4a4 	.word	0x2000e4a4
 8017120:	2000e4a1 	.word	0x2000e4a1
 8017124:	2000e474 	.word	0x2000e474
 8017128:	2000e494 	.word	0x2000e494
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801712c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801712e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8017130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	2b00      	cmp	r3, #0
 8017136:	f040 80c5 	bne.w	80172c4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801713a:	4b7f      	ldr	r3, [pc, #508]	@ (8017338 <tcp_receive+0xf10>)
 801713c:	681a      	ldr	r2, [r3, #0]
 801713e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017140:	68db      	ldr	r3, [r3, #12]
 8017142:	685b      	ldr	r3, [r3, #4]
 8017144:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8017146:	2b00      	cmp	r3, #0
 8017148:	f340 80bc 	ble.w	80172c4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801714c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801714e:	68db      	ldr	r3, [r3, #12]
 8017150:	899b      	ldrh	r3, [r3, #12]
 8017152:	b29b      	uxth	r3, r3
 8017154:	4618      	mov	r0, r3
 8017156:	f7fa f9b9 	bl	80114cc <lwip_htons>
 801715a:	4603      	mov	r3, r0
 801715c:	b2db      	uxtb	r3, r3
 801715e:	f003 0301 	and.w	r3, r3, #1
 8017162:	2b00      	cmp	r3, #0
 8017164:	f040 80be 	bne.w	80172e4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8017168:	4874      	ldr	r0, [pc, #464]	@ (801733c <tcp_receive+0xf14>)
 801716a:	f7fd fa3b 	bl	80145e4 <tcp_seg_copy>
 801716e:	4602      	mov	r2, r0
 8017170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017172:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8017174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	2b00      	cmp	r3, #0
 801717a:	f000 80b5 	beq.w	80172e8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801717e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017180:	68db      	ldr	r3, [r3, #12]
 8017182:	685b      	ldr	r3, [r3, #4]
 8017184:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017186:	8912      	ldrh	r2, [r2, #8]
 8017188:	441a      	add	r2, r3
 801718a:	4b6b      	ldr	r3, [pc, #428]	@ (8017338 <tcp_receive+0xf10>)
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	1ad3      	subs	r3, r2, r3
 8017190:	2b00      	cmp	r3, #0
 8017192:	dd12      	ble.n	80171ba <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8017194:	4b68      	ldr	r3, [pc, #416]	@ (8017338 <tcp_receive+0xf10>)
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	b29a      	uxth	r2, r3
 801719a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801719c:	68db      	ldr	r3, [r3, #12]
 801719e:	685b      	ldr	r3, [r3, #4]
 80171a0:	b29b      	uxth	r3, r3
 80171a2:	1ad3      	subs	r3, r2, r3
 80171a4:	b29a      	uxth	r2, r3
 80171a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171a8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80171aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171ac:	685a      	ldr	r2, [r3, #4]
 80171ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171b0:	891b      	ldrh	r3, [r3, #8]
 80171b2:	4619      	mov	r1, r3
 80171b4:	4610      	mov	r0, r2
 80171b6:	f7fb fbf1 	bl	801299c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80171ba:	4b61      	ldr	r3, [pc, #388]	@ (8017340 <tcp_receive+0xf18>)
 80171bc:	881b      	ldrh	r3, [r3, #0]
 80171be:	461a      	mov	r2, r3
 80171c0:	4b5d      	ldr	r3, [pc, #372]	@ (8017338 <tcp_receive+0xf10>)
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	441a      	add	r2, r3
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171ca:	6879      	ldr	r1, [r7, #4]
 80171cc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80171ce:	440b      	add	r3, r1
 80171d0:	1ad3      	subs	r3, r2, r3
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	f340 8088 	ble.w	80172e8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80171d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	68db      	ldr	r3, [r3, #12]
 80171de:	899b      	ldrh	r3, [r3, #12]
 80171e0:	b29b      	uxth	r3, r3
 80171e2:	4618      	mov	r0, r3
 80171e4:	f7fa f972 	bl	80114cc <lwip_htons>
 80171e8:	4603      	mov	r3, r0
 80171ea:	b2db      	uxtb	r3, r3
 80171ec:	f003 0301 	and.w	r3, r3, #1
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d021      	beq.n	8017238 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80171f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	68db      	ldr	r3, [r3, #12]
 80171fa:	899b      	ldrh	r3, [r3, #12]
 80171fc:	b29b      	uxth	r3, r3
 80171fe:	b21b      	sxth	r3, r3
 8017200:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017204:	b21c      	sxth	r4, r3
 8017206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	68db      	ldr	r3, [r3, #12]
 801720c:	899b      	ldrh	r3, [r3, #12]
 801720e:	b29b      	uxth	r3, r3
 8017210:	4618      	mov	r0, r3
 8017212:	f7fa f95b 	bl	80114cc <lwip_htons>
 8017216:	4603      	mov	r3, r0
 8017218:	b2db      	uxtb	r3, r3
 801721a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801721e:	b29b      	uxth	r3, r3
 8017220:	4618      	mov	r0, r3
 8017222:	f7fa f953 	bl	80114cc <lwip_htons>
 8017226:	4603      	mov	r3, r0
 8017228:	b21b      	sxth	r3, r3
 801722a:	4323      	orrs	r3, r4
 801722c:	b21a      	sxth	r2, r3
 801722e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	68db      	ldr	r3, [r3, #12]
 8017234:	b292      	uxth	r2, r2
 8017236:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801723c:	b29a      	uxth	r2, r3
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017242:	4413      	add	r3, r2
 8017244:	b299      	uxth	r1, r3
 8017246:	4b3c      	ldr	r3, [pc, #240]	@ (8017338 <tcp_receive+0xf10>)
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	b29a      	uxth	r2, r3
 801724c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	1a8a      	subs	r2, r1, r2
 8017252:	b292      	uxth	r2, r2
 8017254:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8017256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	685a      	ldr	r2, [r3, #4]
 801725c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	891b      	ldrh	r3, [r3, #8]
 8017262:	4619      	mov	r1, r3
 8017264:	4610      	mov	r0, r2
 8017266:	f7fb fb99 	bl	801299c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801726a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	891c      	ldrh	r4, [r3, #8]
 8017270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	68db      	ldr	r3, [r3, #12]
 8017276:	899b      	ldrh	r3, [r3, #12]
 8017278:	b29b      	uxth	r3, r3
 801727a:	4618      	mov	r0, r3
 801727c:	f7fa f926 	bl	80114cc <lwip_htons>
 8017280:	4603      	mov	r3, r0
 8017282:	b2db      	uxtb	r3, r3
 8017284:	f003 0303 	and.w	r3, r3, #3
 8017288:	2b00      	cmp	r3, #0
 801728a:	d001      	beq.n	8017290 <tcp_receive+0xe68>
 801728c:	2301      	movs	r3, #1
 801728e:	e000      	b.n	8017292 <tcp_receive+0xe6a>
 8017290:	2300      	movs	r3, #0
 8017292:	4423      	add	r3, r4
 8017294:	b29a      	uxth	r2, r3
 8017296:	4b2a      	ldr	r3, [pc, #168]	@ (8017340 <tcp_receive+0xf18>)
 8017298:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801729a:	4b29      	ldr	r3, [pc, #164]	@ (8017340 <tcp_receive+0xf18>)
 801729c:	881b      	ldrh	r3, [r3, #0]
 801729e:	461a      	mov	r2, r3
 80172a0:	4b25      	ldr	r3, [pc, #148]	@ (8017338 <tcp_receive+0xf10>)
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	441a      	add	r2, r3
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172aa:	6879      	ldr	r1, [r7, #4]
 80172ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80172ae:	440b      	add	r3, r1
 80172b0:	429a      	cmp	r2, r3
 80172b2:	d019      	beq.n	80172e8 <tcp_receive+0xec0>
 80172b4:	4b23      	ldr	r3, [pc, #140]	@ (8017344 <tcp_receive+0xf1c>)
 80172b6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80172ba:	4923      	ldr	r1, [pc, #140]	@ (8017348 <tcp_receive+0xf20>)
 80172bc:	4823      	ldr	r0, [pc, #140]	@ (801734c <tcp_receive+0xf24>)
 80172be:	f006 f885 	bl	801d3cc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80172c2:	e011      	b.n	80172e8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80172c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80172ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	f47f aea5 	bne.w	801701c <tcp_receive+0xbf4>
 80172d2:	e00a      	b.n	80172ea <tcp_receive+0xec2>
                break;
 80172d4:	bf00      	nop
 80172d6:	e008      	b.n	80172ea <tcp_receive+0xec2>
                break;
 80172d8:	bf00      	nop
 80172da:	e006      	b.n	80172ea <tcp_receive+0xec2>
                  break;
 80172dc:	bf00      	nop
 80172de:	e004      	b.n	80172ea <tcp_receive+0xec2>
                  break;
 80172e0:	bf00      	nop
 80172e2:	e002      	b.n	80172ea <tcp_receive+0xec2>
                  break;
 80172e4:	bf00      	nop
 80172e6:	e000      	b.n	80172ea <tcp_receive+0xec2>
                break;
 80172e8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80172ea:	6878      	ldr	r0, [r7, #4]
 80172ec:	f001 fe88 	bl	8019000 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80172f0:	e003      	b.n	80172fa <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80172f2:	6878      	ldr	r0, [r7, #4]
 80172f4:	f001 fe84 	bl	8019000 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80172f8:	e01a      	b.n	8017330 <tcp_receive+0xf08>
 80172fa:	e019      	b.n	8017330 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80172fc:	4b0e      	ldr	r3, [pc, #56]	@ (8017338 <tcp_receive+0xf10>)
 80172fe:	681a      	ldr	r2, [r3, #0]
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017304:	1ad3      	subs	r3, r2, r3
 8017306:	2b00      	cmp	r3, #0
 8017308:	db0a      	blt.n	8017320 <tcp_receive+0xef8>
 801730a:	4b0b      	ldr	r3, [pc, #44]	@ (8017338 <tcp_receive+0xf10>)
 801730c:	681a      	ldr	r2, [r3, #0]
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017312:	6879      	ldr	r1, [r7, #4]
 8017314:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017316:	440b      	add	r3, r1
 8017318:	1ad3      	subs	r3, r2, r3
 801731a:	3301      	adds	r3, #1
 801731c:	2b00      	cmp	r3, #0
 801731e:	dd07      	ble.n	8017330 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	8b5b      	ldrh	r3, [r3, #26]
 8017324:	f043 0302 	orr.w	r3, r3, #2
 8017328:	b29a      	uxth	r2, r3
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801732e:	e7ff      	b.n	8017330 <tcp_receive+0xf08>
 8017330:	bf00      	nop
 8017332:	3750      	adds	r7, #80	@ 0x50
 8017334:	46bd      	mov	sp, r7
 8017336:	bdb0      	pop	{r4, r5, r7, pc}
 8017338:	2000e494 	.word	0x2000e494
 801733c:	2000e474 	.word	0x2000e474
 8017340:	2000e49e 	.word	0x2000e49e
 8017344:	08020484 	.word	0x08020484
 8017348:	0802082c 	.word	0x0802082c
 801734c:	080204d0 	.word	0x080204d0

08017350 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8017350:	b480      	push	{r7}
 8017352:	b083      	sub	sp, #12
 8017354:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8017356:	4b15      	ldr	r3, [pc, #84]	@ (80173ac <tcp_get_next_optbyte+0x5c>)
 8017358:	881b      	ldrh	r3, [r3, #0]
 801735a:	1c5a      	adds	r2, r3, #1
 801735c:	b291      	uxth	r1, r2
 801735e:	4a13      	ldr	r2, [pc, #76]	@ (80173ac <tcp_get_next_optbyte+0x5c>)
 8017360:	8011      	strh	r1, [r2, #0]
 8017362:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8017364:	4b12      	ldr	r3, [pc, #72]	@ (80173b0 <tcp_get_next_optbyte+0x60>)
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d004      	beq.n	8017376 <tcp_get_next_optbyte+0x26>
 801736c:	4b11      	ldr	r3, [pc, #68]	@ (80173b4 <tcp_get_next_optbyte+0x64>)
 801736e:	881b      	ldrh	r3, [r3, #0]
 8017370:	88fa      	ldrh	r2, [r7, #6]
 8017372:	429a      	cmp	r2, r3
 8017374:	d208      	bcs.n	8017388 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8017376:	4b10      	ldr	r3, [pc, #64]	@ (80173b8 <tcp_get_next_optbyte+0x68>)
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	3314      	adds	r3, #20
 801737c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801737e:	88fb      	ldrh	r3, [r7, #6]
 8017380:	683a      	ldr	r2, [r7, #0]
 8017382:	4413      	add	r3, r2
 8017384:	781b      	ldrb	r3, [r3, #0]
 8017386:	e00b      	b.n	80173a0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8017388:	88fb      	ldrh	r3, [r7, #6]
 801738a:	b2da      	uxtb	r2, r3
 801738c:	4b09      	ldr	r3, [pc, #36]	@ (80173b4 <tcp_get_next_optbyte+0x64>)
 801738e:	881b      	ldrh	r3, [r3, #0]
 8017390:	b2db      	uxtb	r3, r3
 8017392:	1ad3      	subs	r3, r2, r3
 8017394:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8017396:	4b06      	ldr	r3, [pc, #24]	@ (80173b0 <tcp_get_next_optbyte+0x60>)
 8017398:	681a      	ldr	r2, [r3, #0]
 801739a:	797b      	ldrb	r3, [r7, #5]
 801739c:	4413      	add	r3, r2
 801739e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80173a0:	4618      	mov	r0, r3
 80173a2:	370c      	adds	r7, #12
 80173a4:	46bd      	mov	sp, r7
 80173a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173aa:	4770      	bx	lr
 80173ac:	2000e490 	.word	0x2000e490
 80173b0:	2000e48c 	.word	0x2000e48c
 80173b4:	2000e48a 	.word	0x2000e48a
 80173b8:	2000e484 	.word	0x2000e484

080173bc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80173bc:	b580      	push	{r7, lr}
 80173be:	b084      	sub	sp, #16
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d106      	bne.n	80173d8 <tcp_parseopt+0x1c>
 80173ca:	4b32      	ldr	r3, [pc, #200]	@ (8017494 <tcp_parseopt+0xd8>)
 80173cc:	f240 727d 	movw	r2, #1917	@ 0x77d
 80173d0:	4931      	ldr	r1, [pc, #196]	@ (8017498 <tcp_parseopt+0xdc>)
 80173d2:	4832      	ldr	r0, [pc, #200]	@ (801749c <tcp_parseopt+0xe0>)
 80173d4:	f005 fffa 	bl	801d3cc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80173d8:	4b31      	ldr	r3, [pc, #196]	@ (80174a0 <tcp_parseopt+0xe4>)
 80173da:	881b      	ldrh	r3, [r3, #0]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d056      	beq.n	801748e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80173e0:	4b30      	ldr	r3, [pc, #192]	@ (80174a4 <tcp_parseopt+0xe8>)
 80173e2:	2200      	movs	r2, #0
 80173e4:	801a      	strh	r2, [r3, #0]
 80173e6:	e046      	b.n	8017476 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80173e8:	f7ff ffb2 	bl	8017350 <tcp_get_next_optbyte>
 80173ec:	4603      	mov	r3, r0
 80173ee:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80173f0:	7bfb      	ldrb	r3, [r7, #15]
 80173f2:	2b02      	cmp	r3, #2
 80173f4:	d006      	beq.n	8017404 <tcp_parseopt+0x48>
 80173f6:	2b02      	cmp	r3, #2
 80173f8:	dc2a      	bgt.n	8017450 <tcp_parseopt+0x94>
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d042      	beq.n	8017484 <tcp_parseopt+0xc8>
 80173fe:	2b01      	cmp	r3, #1
 8017400:	d038      	beq.n	8017474 <tcp_parseopt+0xb8>
 8017402:	e025      	b.n	8017450 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8017404:	f7ff ffa4 	bl	8017350 <tcp_get_next_optbyte>
 8017408:	4603      	mov	r3, r0
 801740a:	2b04      	cmp	r3, #4
 801740c:	d13c      	bne.n	8017488 <tcp_parseopt+0xcc>
 801740e:	4b25      	ldr	r3, [pc, #148]	@ (80174a4 <tcp_parseopt+0xe8>)
 8017410:	881b      	ldrh	r3, [r3, #0]
 8017412:	3301      	adds	r3, #1
 8017414:	4a22      	ldr	r2, [pc, #136]	@ (80174a0 <tcp_parseopt+0xe4>)
 8017416:	8812      	ldrh	r2, [r2, #0]
 8017418:	4293      	cmp	r3, r2
 801741a:	da35      	bge.n	8017488 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801741c:	f7ff ff98 	bl	8017350 <tcp_get_next_optbyte>
 8017420:	4603      	mov	r3, r0
 8017422:	021b      	lsls	r3, r3, #8
 8017424:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8017426:	f7ff ff93 	bl	8017350 <tcp_get_next_optbyte>
 801742a:	4603      	mov	r3, r0
 801742c:	461a      	mov	r2, r3
 801742e:	89bb      	ldrh	r3, [r7, #12]
 8017430:	4313      	orrs	r3, r2
 8017432:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8017434:	89bb      	ldrh	r3, [r7, #12]
 8017436:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801743a:	d804      	bhi.n	8017446 <tcp_parseopt+0x8a>
 801743c:	89bb      	ldrh	r3, [r7, #12]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d001      	beq.n	8017446 <tcp_parseopt+0x8a>
 8017442:	89ba      	ldrh	r2, [r7, #12]
 8017444:	e001      	b.n	801744a <tcp_parseopt+0x8e>
 8017446:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801744e:	e012      	b.n	8017476 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8017450:	f7ff ff7e 	bl	8017350 <tcp_get_next_optbyte>
 8017454:	4603      	mov	r3, r0
 8017456:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8017458:	7afb      	ldrb	r3, [r7, #11]
 801745a:	2b01      	cmp	r3, #1
 801745c:	d916      	bls.n	801748c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801745e:	7afb      	ldrb	r3, [r7, #11]
 8017460:	b29a      	uxth	r2, r3
 8017462:	4b10      	ldr	r3, [pc, #64]	@ (80174a4 <tcp_parseopt+0xe8>)
 8017464:	881b      	ldrh	r3, [r3, #0]
 8017466:	4413      	add	r3, r2
 8017468:	b29b      	uxth	r3, r3
 801746a:	3b02      	subs	r3, #2
 801746c:	b29a      	uxth	r2, r3
 801746e:	4b0d      	ldr	r3, [pc, #52]	@ (80174a4 <tcp_parseopt+0xe8>)
 8017470:	801a      	strh	r2, [r3, #0]
 8017472:	e000      	b.n	8017476 <tcp_parseopt+0xba>
          break;
 8017474:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017476:	4b0b      	ldr	r3, [pc, #44]	@ (80174a4 <tcp_parseopt+0xe8>)
 8017478:	881a      	ldrh	r2, [r3, #0]
 801747a:	4b09      	ldr	r3, [pc, #36]	@ (80174a0 <tcp_parseopt+0xe4>)
 801747c:	881b      	ldrh	r3, [r3, #0]
 801747e:	429a      	cmp	r2, r3
 8017480:	d3b2      	bcc.n	80173e8 <tcp_parseopt+0x2c>
 8017482:	e004      	b.n	801748e <tcp_parseopt+0xd2>
          return;
 8017484:	bf00      	nop
 8017486:	e002      	b.n	801748e <tcp_parseopt+0xd2>
            return;
 8017488:	bf00      	nop
 801748a:	e000      	b.n	801748e <tcp_parseopt+0xd2>
            return;
 801748c:	bf00      	nop
      }
    }
  }
}
 801748e:	3710      	adds	r7, #16
 8017490:	46bd      	mov	sp, r7
 8017492:	bd80      	pop	{r7, pc}
 8017494:	08020484 	.word	0x08020484
 8017498:	080208e8 	.word	0x080208e8
 801749c:	080204d0 	.word	0x080204d0
 80174a0:	2000e488 	.word	0x2000e488
 80174a4:	2000e490 	.word	0x2000e490

080174a8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80174a8:	b480      	push	{r7}
 80174aa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80174ac:	4b05      	ldr	r3, [pc, #20]	@ (80174c4 <tcp_trigger_input_pcb_close+0x1c>)
 80174ae:	781b      	ldrb	r3, [r3, #0]
 80174b0:	f043 0310 	orr.w	r3, r3, #16
 80174b4:	b2da      	uxtb	r2, r3
 80174b6:	4b03      	ldr	r3, [pc, #12]	@ (80174c4 <tcp_trigger_input_pcb_close+0x1c>)
 80174b8:	701a      	strb	r2, [r3, #0]
}
 80174ba:	bf00      	nop
 80174bc:	46bd      	mov	sp, r7
 80174be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c2:	4770      	bx	lr
 80174c4:	2000e4a1 	.word	0x2000e4a1

080174c8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80174c8:	b580      	push	{r7, lr}
 80174ca:	b084      	sub	sp, #16
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	60f8      	str	r0, [r7, #12]
 80174d0:	60b9      	str	r1, [r7, #8]
 80174d2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80174d4:	68fb      	ldr	r3, [r7, #12]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d00a      	beq.n	80174f0 <tcp_route+0x28>
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	7a1b      	ldrb	r3, [r3, #8]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d006      	beq.n	80174f0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	7a1b      	ldrb	r3, [r3, #8]
 80174e6:	4618      	mov	r0, r3
 80174e8:	f7fb f850 	bl	801258c <netif_get_by_index>
 80174ec:	4603      	mov	r3, r0
 80174ee:	e003      	b.n	80174f8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80174f0:	6878      	ldr	r0, [r7, #4]
 80174f2:	f003 fc49 	bl	801ad88 <ip4_route>
 80174f6:	4603      	mov	r3, r0
  }
}
 80174f8:	4618      	mov	r0, r3
 80174fa:	3710      	adds	r7, #16
 80174fc:	46bd      	mov	sp, r7
 80174fe:	bd80      	pop	{r7, pc}

08017500 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8017500:	b590      	push	{r4, r7, lr}
 8017502:	b087      	sub	sp, #28
 8017504:	af00      	add	r7, sp, #0
 8017506:	60f8      	str	r0, [r7, #12]
 8017508:	60b9      	str	r1, [r7, #8]
 801750a:	603b      	str	r3, [r7, #0]
 801750c:	4613      	mov	r3, r2
 801750e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d105      	bne.n	8017522 <tcp_create_segment+0x22>
 8017516:	4b43      	ldr	r3, [pc, #268]	@ (8017624 <tcp_create_segment+0x124>)
 8017518:	22a3      	movs	r2, #163	@ 0xa3
 801751a:	4943      	ldr	r1, [pc, #268]	@ (8017628 <tcp_create_segment+0x128>)
 801751c:	4843      	ldr	r0, [pc, #268]	@ (801762c <tcp_create_segment+0x12c>)
 801751e:	f005 ff55 	bl	801d3cc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8017522:	68bb      	ldr	r3, [r7, #8]
 8017524:	2b00      	cmp	r3, #0
 8017526:	d105      	bne.n	8017534 <tcp_create_segment+0x34>
 8017528:	4b3e      	ldr	r3, [pc, #248]	@ (8017624 <tcp_create_segment+0x124>)
 801752a:	22a4      	movs	r2, #164	@ 0xa4
 801752c:	4940      	ldr	r1, [pc, #256]	@ (8017630 <tcp_create_segment+0x130>)
 801752e:	483f      	ldr	r0, [pc, #252]	@ (801762c <tcp_create_segment+0x12c>)
 8017530:	f005 ff4c 	bl	801d3cc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017534:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017538:	009b      	lsls	r3, r3, #2
 801753a:	b2db      	uxtb	r3, r3
 801753c:	f003 0304 	and.w	r3, r3, #4
 8017540:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8017542:	2003      	movs	r0, #3
 8017544:	f7fa fc96 	bl	8011e74 <memp_malloc>
 8017548:	6138      	str	r0, [r7, #16]
 801754a:	693b      	ldr	r3, [r7, #16]
 801754c:	2b00      	cmp	r3, #0
 801754e:	d104      	bne.n	801755a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8017550:	68b8      	ldr	r0, [r7, #8]
 8017552:	f7fb fba9 	bl	8012ca8 <pbuf_free>
    return NULL;
 8017556:	2300      	movs	r3, #0
 8017558:	e060      	b.n	801761c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801755a:	693b      	ldr	r3, [r7, #16]
 801755c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017560:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8017562:	693b      	ldr	r3, [r7, #16]
 8017564:	2200      	movs	r2, #0
 8017566:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8017568:	693b      	ldr	r3, [r7, #16]
 801756a:	68ba      	ldr	r2, [r7, #8]
 801756c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801756e:	68bb      	ldr	r3, [r7, #8]
 8017570:	891a      	ldrh	r2, [r3, #8]
 8017572:	7dfb      	ldrb	r3, [r7, #23]
 8017574:	b29b      	uxth	r3, r3
 8017576:	429a      	cmp	r2, r3
 8017578:	d205      	bcs.n	8017586 <tcp_create_segment+0x86>
 801757a:	4b2a      	ldr	r3, [pc, #168]	@ (8017624 <tcp_create_segment+0x124>)
 801757c:	22b0      	movs	r2, #176	@ 0xb0
 801757e:	492d      	ldr	r1, [pc, #180]	@ (8017634 <tcp_create_segment+0x134>)
 8017580:	482a      	ldr	r0, [pc, #168]	@ (801762c <tcp_create_segment+0x12c>)
 8017582:	f005 ff23 	bl	801d3cc <iprintf>
  seg->len = p->tot_len - optlen;
 8017586:	68bb      	ldr	r3, [r7, #8]
 8017588:	891a      	ldrh	r2, [r3, #8]
 801758a:	7dfb      	ldrb	r3, [r7, #23]
 801758c:	b29b      	uxth	r3, r3
 801758e:	1ad3      	subs	r3, r2, r3
 8017590:	b29a      	uxth	r2, r3
 8017592:	693b      	ldr	r3, [r7, #16]
 8017594:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8017596:	2114      	movs	r1, #20
 8017598:	68b8      	ldr	r0, [r7, #8]
 801759a:	f7fb faef 	bl	8012b7c <pbuf_add_header>
 801759e:	4603      	mov	r3, r0
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d004      	beq.n	80175ae <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80175a4:	6938      	ldr	r0, [r7, #16]
 80175a6:	f7fd f804 	bl	80145b2 <tcp_seg_free>
    return NULL;
 80175aa:	2300      	movs	r3, #0
 80175ac:	e036      	b.n	801761c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80175ae:	693b      	ldr	r3, [r7, #16]
 80175b0:	685b      	ldr	r3, [r3, #4]
 80175b2:	685a      	ldr	r2, [r3, #4]
 80175b4:	693b      	ldr	r3, [r7, #16]
 80175b6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	8ada      	ldrh	r2, [r3, #22]
 80175bc:	693b      	ldr	r3, [r7, #16]
 80175be:	68dc      	ldr	r4, [r3, #12]
 80175c0:	4610      	mov	r0, r2
 80175c2:	f7f9 ff83 	bl	80114cc <lwip_htons>
 80175c6:	4603      	mov	r3, r0
 80175c8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	8b1a      	ldrh	r2, [r3, #24]
 80175ce:	693b      	ldr	r3, [r7, #16]
 80175d0:	68dc      	ldr	r4, [r3, #12]
 80175d2:	4610      	mov	r0, r2
 80175d4:	f7f9 ff7a 	bl	80114cc <lwip_htons>
 80175d8:	4603      	mov	r3, r0
 80175da:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80175dc:	693b      	ldr	r3, [r7, #16]
 80175de:	68dc      	ldr	r4, [r3, #12]
 80175e0:	6838      	ldr	r0, [r7, #0]
 80175e2:	f7f9 ff89 	bl	80114f8 <lwip_htonl>
 80175e6:	4603      	mov	r3, r0
 80175e8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80175ea:	7dfb      	ldrb	r3, [r7, #23]
 80175ec:	089b      	lsrs	r3, r3, #2
 80175ee:	b2db      	uxtb	r3, r3
 80175f0:	3305      	adds	r3, #5
 80175f2:	b29b      	uxth	r3, r3
 80175f4:	031b      	lsls	r3, r3, #12
 80175f6:	b29a      	uxth	r2, r3
 80175f8:	79fb      	ldrb	r3, [r7, #7]
 80175fa:	b29b      	uxth	r3, r3
 80175fc:	4313      	orrs	r3, r2
 80175fe:	b29a      	uxth	r2, r3
 8017600:	693b      	ldr	r3, [r7, #16]
 8017602:	68dc      	ldr	r4, [r3, #12]
 8017604:	4610      	mov	r0, r2
 8017606:	f7f9 ff61 	bl	80114cc <lwip_htons>
 801760a:	4603      	mov	r3, r0
 801760c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801760e:	693b      	ldr	r3, [r7, #16]
 8017610:	68db      	ldr	r3, [r3, #12]
 8017612:	2200      	movs	r2, #0
 8017614:	749a      	strb	r2, [r3, #18]
 8017616:	2200      	movs	r2, #0
 8017618:	74da      	strb	r2, [r3, #19]
  return seg;
 801761a:	693b      	ldr	r3, [r7, #16]
}
 801761c:	4618      	mov	r0, r3
 801761e:	371c      	adds	r7, #28
 8017620:	46bd      	mov	sp, r7
 8017622:	bd90      	pop	{r4, r7, pc}
 8017624:	08020904 	.word	0x08020904
 8017628:	08020938 	.word	0x08020938
 801762c:	08020958 	.word	0x08020958
 8017630:	08020980 	.word	0x08020980
 8017634:	080209a4 	.word	0x080209a4

08017638 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8017638:	b580      	push	{r7, lr}
 801763a:	b086      	sub	sp, #24
 801763c:	af00      	add	r7, sp, #0
 801763e:	607b      	str	r3, [r7, #4]
 8017640:	4603      	mov	r3, r0
 8017642:	73fb      	strb	r3, [r7, #15]
 8017644:	460b      	mov	r3, r1
 8017646:	81bb      	strh	r3, [r7, #12]
 8017648:	4613      	mov	r3, r2
 801764a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801764c:	89bb      	ldrh	r3, [r7, #12]
 801764e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d105      	bne.n	8017662 <tcp_pbuf_prealloc+0x2a>
 8017656:	4b30      	ldr	r3, [pc, #192]	@ (8017718 <tcp_pbuf_prealloc+0xe0>)
 8017658:	22e8      	movs	r2, #232	@ 0xe8
 801765a:	4930      	ldr	r1, [pc, #192]	@ (801771c <tcp_pbuf_prealloc+0xe4>)
 801765c:	4830      	ldr	r0, [pc, #192]	@ (8017720 <tcp_pbuf_prealloc+0xe8>)
 801765e:	f005 feb5 	bl	801d3cc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8017662:	6a3b      	ldr	r3, [r7, #32]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d105      	bne.n	8017674 <tcp_pbuf_prealloc+0x3c>
 8017668:	4b2b      	ldr	r3, [pc, #172]	@ (8017718 <tcp_pbuf_prealloc+0xe0>)
 801766a:	22e9      	movs	r2, #233	@ 0xe9
 801766c:	492d      	ldr	r1, [pc, #180]	@ (8017724 <tcp_pbuf_prealloc+0xec>)
 801766e:	482c      	ldr	r0, [pc, #176]	@ (8017720 <tcp_pbuf_prealloc+0xe8>)
 8017670:	f005 feac 	bl	801d3cc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8017674:	89ba      	ldrh	r2, [r7, #12]
 8017676:	897b      	ldrh	r3, [r7, #10]
 8017678:	429a      	cmp	r2, r3
 801767a:	d221      	bcs.n	80176c0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801767c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017680:	f003 0302 	and.w	r3, r3, #2
 8017684:	2b00      	cmp	r3, #0
 8017686:	d111      	bne.n	80176ac <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8017688:	6a3b      	ldr	r3, [r7, #32]
 801768a:	8b5b      	ldrh	r3, [r3, #26]
 801768c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017690:	2b00      	cmp	r3, #0
 8017692:	d115      	bne.n	80176c0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8017694:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017698:	2b00      	cmp	r3, #0
 801769a:	d007      	beq.n	80176ac <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801769c:	6a3b      	ldr	r3, [r7, #32]
 801769e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d103      	bne.n	80176ac <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80176a4:	6a3b      	ldr	r3, [r7, #32]
 80176a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d009      	beq.n	80176c0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80176ac:	89bb      	ldrh	r3, [r7, #12]
 80176ae:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 80176b2:	f023 0203 	bic.w	r2, r3, #3
 80176b6:	897b      	ldrh	r3, [r7, #10]
 80176b8:	4293      	cmp	r3, r2
 80176ba:	bf28      	it	cs
 80176bc:	4613      	movcs	r3, r2
 80176be:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80176c0:	8af9      	ldrh	r1, [r7, #22]
 80176c2:	7bfb      	ldrb	r3, [r7, #15]
 80176c4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80176c8:	4618      	mov	r0, r3
 80176ca:	f7fb f809 	bl	80126e0 <pbuf_alloc>
 80176ce:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80176d0:	693b      	ldr	r3, [r7, #16]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d101      	bne.n	80176da <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80176d6:	2300      	movs	r3, #0
 80176d8:	e019      	b.n	801770e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80176da:	693b      	ldr	r3, [r7, #16]
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d006      	beq.n	80176f0 <tcp_pbuf_prealloc+0xb8>
 80176e2:	4b0d      	ldr	r3, [pc, #52]	@ (8017718 <tcp_pbuf_prealloc+0xe0>)
 80176e4:	f240 120b 	movw	r2, #267	@ 0x10b
 80176e8:	490f      	ldr	r1, [pc, #60]	@ (8017728 <tcp_pbuf_prealloc+0xf0>)
 80176ea:	480d      	ldr	r0, [pc, #52]	@ (8017720 <tcp_pbuf_prealloc+0xe8>)
 80176ec:	f005 fe6e 	bl	801d3cc <iprintf>
  *oversize = p->len - length;
 80176f0:	693b      	ldr	r3, [r7, #16]
 80176f2:	895a      	ldrh	r2, [r3, #10]
 80176f4:	89bb      	ldrh	r3, [r7, #12]
 80176f6:	1ad3      	subs	r3, r2, r3
 80176f8:	b29a      	uxth	r2, r3
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80176fe:	693b      	ldr	r3, [r7, #16]
 8017700:	89ba      	ldrh	r2, [r7, #12]
 8017702:	811a      	strh	r2, [r3, #8]
 8017704:	693b      	ldr	r3, [r7, #16]
 8017706:	891a      	ldrh	r2, [r3, #8]
 8017708:	693b      	ldr	r3, [r7, #16]
 801770a:	815a      	strh	r2, [r3, #10]
  return p;
 801770c:	693b      	ldr	r3, [r7, #16]
}
 801770e:	4618      	mov	r0, r3
 8017710:	3718      	adds	r7, #24
 8017712:	46bd      	mov	sp, r7
 8017714:	bd80      	pop	{r7, pc}
 8017716:	bf00      	nop
 8017718:	08020904 	.word	0x08020904
 801771c:	080209bc 	.word	0x080209bc
 8017720:	08020958 	.word	0x08020958
 8017724:	080209e0 	.word	0x080209e0
 8017728:	08020a00 	.word	0x08020a00

0801772c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801772c:	b580      	push	{r7, lr}
 801772e:	b082      	sub	sp, #8
 8017730:	af00      	add	r7, sp, #0
 8017732:	6078      	str	r0, [r7, #4]
 8017734:	460b      	mov	r3, r1
 8017736:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d106      	bne.n	801774c <tcp_write_checks+0x20>
 801773e:	4b33      	ldr	r3, [pc, #204]	@ (801780c <tcp_write_checks+0xe0>)
 8017740:	f240 1233 	movw	r2, #307	@ 0x133
 8017744:	4932      	ldr	r1, [pc, #200]	@ (8017810 <tcp_write_checks+0xe4>)
 8017746:	4833      	ldr	r0, [pc, #204]	@ (8017814 <tcp_write_checks+0xe8>)
 8017748:	f005 fe40 	bl	801d3cc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	7d1b      	ldrb	r3, [r3, #20]
 8017750:	2b04      	cmp	r3, #4
 8017752:	d00e      	beq.n	8017772 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8017758:	2b07      	cmp	r3, #7
 801775a:	d00a      	beq.n	8017772 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8017760:	2b02      	cmp	r3, #2
 8017762:	d006      	beq.n	8017772 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8017768:	2b03      	cmp	r3, #3
 801776a:	d002      	beq.n	8017772 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801776c:	f06f 030a 	mvn.w	r3, #10
 8017770:	e048      	b.n	8017804 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8017772:	887b      	ldrh	r3, [r7, #2]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d101      	bne.n	801777c <tcp_write_checks+0x50>
    return ERR_OK;
 8017778:	2300      	movs	r3, #0
 801777a:	e043      	b.n	8017804 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017782:	887a      	ldrh	r2, [r7, #2]
 8017784:	429a      	cmp	r2, r3
 8017786:	d909      	bls.n	801779c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	8b5b      	ldrh	r3, [r3, #26]
 801778c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017790:	b29a      	uxth	r2, r3
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017796:	f04f 33ff 	mov.w	r3, #4294967295
 801779a:	e033      	b.n	8017804 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80177a2:	2b08      	cmp	r3, #8
 80177a4:	d909      	bls.n	80177ba <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	8b5b      	ldrh	r3, [r3, #26]
 80177aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80177ae:	b29a      	uxth	r2, r3
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80177b4:	f04f 33ff 	mov.w	r3, #4294967295
 80177b8:	e024      	b.n	8017804 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d00f      	beq.n	80177e4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d11a      	bne.n	8017802 <tcp_write_checks+0xd6>
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d116      	bne.n	8017802 <tcp_write_checks+0xd6>
 80177d4:	4b0d      	ldr	r3, [pc, #52]	@ (801780c <tcp_write_checks+0xe0>)
 80177d6:	f240 1255 	movw	r2, #341	@ 0x155
 80177da:	490f      	ldr	r1, [pc, #60]	@ (8017818 <tcp_write_checks+0xec>)
 80177dc:	480d      	ldr	r0, [pc, #52]	@ (8017814 <tcp_write_checks+0xe8>)
 80177de:	f005 fdf5 	bl	801d3cc <iprintf>
 80177e2:	e00e      	b.n	8017802 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d103      	bne.n	80177f4 <tcp_write_checks+0xc8>
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d006      	beq.n	8017802 <tcp_write_checks+0xd6>
 80177f4:	4b05      	ldr	r3, [pc, #20]	@ (801780c <tcp_write_checks+0xe0>)
 80177f6:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80177fa:	4908      	ldr	r1, [pc, #32]	@ (801781c <tcp_write_checks+0xf0>)
 80177fc:	4805      	ldr	r0, [pc, #20]	@ (8017814 <tcp_write_checks+0xe8>)
 80177fe:	f005 fde5 	bl	801d3cc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8017802:	2300      	movs	r3, #0
}
 8017804:	4618      	mov	r0, r3
 8017806:	3708      	adds	r7, #8
 8017808:	46bd      	mov	sp, r7
 801780a:	bd80      	pop	{r7, pc}
 801780c:	08020904 	.word	0x08020904
 8017810:	08020a14 	.word	0x08020a14
 8017814:	08020958 	.word	0x08020958
 8017818:	08020a34 	.word	0x08020a34
 801781c:	08020a70 	.word	0x08020a70

08017820 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8017820:	b590      	push	{r4, r7, lr}
 8017822:	b09b      	sub	sp, #108	@ 0x6c
 8017824:	af04      	add	r7, sp, #16
 8017826:	60f8      	str	r0, [r7, #12]
 8017828:	60b9      	str	r1, [r7, #8]
 801782a:	4611      	mov	r1, r2
 801782c:	461a      	mov	r2, r3
 801782e:	460b      	mov	r3, r1
 8017830:	80fb      	strh	r3, [r7, #6]
 8017832:	4613      	mov	r3, r2
 8017834:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8017836:	2300      	movs	r3, #0
 8017838:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801783a:	2300      	movs	r3, #0
 801783c:	653b      	str	r3, [r7, #80]	@ 0x50
 801783e:	2300      	movs	r3, #0
 8017840:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017842:	2300      	movs	r3, #0
 8017844:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017846:	2300      	movs	r3, #0
 8017848:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801784a:	2300      	movs	r3, #0
 801784c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8017850:	2300      	movs	r3, #0
 8017852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8017856:	2300      	movs	r3, #0
 8017858:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801785a:	2300      	movs	r3, #0
 801785c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801785e:	2300      	movs	r3, #0
 8017860:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d109      	bne.n	801787c <tcp_write+0x5c>
 8017868:	4ba4      	ldr	r3, [pc, #656]	@ (8017afc <tcp_write+0x2dc>)
 801786a:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801786e:	49a4      	ldr	r1, [pc, #656]	@ (8017b00 <tcp_write+0x2e0>)
 8017870:	48a4      	ldr	r0, [pc, #656]	@ (8017b04 <tcp_write+0x2e4>)
 8017872:	f005 fdab 	bl	801d3cc <iprintf>
 8017876:	f06f 030f 	mvn.w	r3, #15
 801787a:	e32a      	b.n	8017ed2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8017882:	085b      	lsrs	r3, r3, #1
 8017884:	b29a      	uxth	r2, r3
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801788a:	4293      	cmp	r3, r2
 801788c:	bf28      	it	cs
 801788e:	4613      	movcs	r3, r2
 8017890:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8017892:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017894:	2b00      	cmp	r3, #0
 8017896:	d102      	bne.n	801789e <tcp_write+0x7e>
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801789c:	e000      	b.n	80178a0 <tcp_write+0x80>
 801789e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80178a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80178a2:	68bb      	ldr	r3, [r7, #8]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d109      	bne.n	80178bc <tcp_write+0x9c>
 80178a8:	4b94      	ldr	r3, [pc, #592]	@ (8017afc <tcp_write+0x2dc>)
 80178aa:	f240 12ad 	movw	r2, #429	@ 0x1ad
 80178ae:	4996      	ldr	r1, [pc, #600]	@ (8017b08 <tcp_write+0x2e8>)
 80178b0:	4894      	ldr	r0, [pc, #592]	@ (8017b04 <tcp_write+0x2e4>)
 80178b2:	f005 fd8b 	bl	801d3cc <iprintf>
 80178b6:	f06f 030f 	mvn.w	r3, #15
 80178ba:	e30a      	b.n	8017ed2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80178bc:	88fb      	ldrh	r3, [r7, #6]
 80178be:	4619      	mov	r1, r3
 80178c0:	68f8      	ldr	r0, [r7, #12]
 80178c2:	f7ff ff33 	bl	801772c <tcp_write_checks>
 80178c6:	4603      	mov	r3, r0
 80178c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 80178cc:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d002      	beq.n	80178da <tcp_write+0xba>
    return err;
 80178d4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80178d8:	e2fb      	b.n	8017ed2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80178e0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80178e4:	2300      	movs	r3, #0
 80178e6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	f000 80f6 	beq.w	8017ae0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80178f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80178fa:	e002      	b.n	8017902 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80178fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017902:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017904:	681b      	ldr	r3, [r3, #0]
 8017906:	2b00      	cmp	r3, #0
 8017908:	d1f8      	bne.n	80178fc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801790a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801790c:	7a9b      	ldrb	r3, [r3, #10]
 801790e:	009b      	lsls	r3, r3, #2
 8017910:	b29b      	uxth	r3, r3
 8017912:	f003 0304 	and.w	r3, r3, #4
 8017916:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8017918:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801791a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801791c:	891b      	ldrh	r3, [r3, #8]
 801791e:	4619      	mov	r1, r3
 8017920:	8c3b      	ldrh	r3, [r7, #32]
 8017922:	440b      	add	r3, r1
 8017924:	429a      	cmp	r2, r3
 8017926:	da06      	bge.n	8017936 <tcp_write+0x116>
 8017928:	4b74      	ldr	r3, [pc, #464]	@ (8017afc <tcp_write+0x2dc>)
 801792a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801792e:	4977      	ldr	r1, [pc, #476]	@ (8017b0c <tcp_write+0x2ec>)
 8017930:	4874      	ldr	r0, [pc, #464]	@ (8017b04 <tcp_write+0x2e4>)
 8017932:	f005 fd4b 	bl	801d3cc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8017936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017938:	891a      	ldrh	r2, [r3, #8]
 801793a:	8c3b      	ldrh	r3, [r7, #32]
 801793c:	4413      	add	r3, r2
 801793e:	b29b      	uxth	r3, r3
 8017940:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017942:	1ad3      	subs	r3, r2, r3
 8017944:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801794c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801794e:	8a7b      	ldrh	r3, [r7, #18]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d026      	beq.n	80179a2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8017954:	8a7b      	ldrh	r3, [r7, #18]
 8017956:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017958:	429a      	cmp	r2, r3
 801795a:	d206      	bcs.n	801796a <tcp_write+0x14a>
 801795c:	4b67      	ldr	r3, [pc, #412]	@ (8017afc <tcp_write+0x2dc>)
 801795e:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8017962:	496b      	ldr	r1, [pc, #428]	@ (8017b10 <tcp_write+0x2f0>)
 8017964:	4867      	ldr	r0, [pc, #412]	@ (8017b04 <tcp_write+0x2e4>)
 8017966:	f005 fd31 	bl	801d3cc <iprintf>
      seg = last_unsent;
 801796a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801796c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801796e:	8a7b      	ldrh	r3, [r7, #18]
 8017970:	88fa      	ldrh	r2, [r7, #6]
 8017972:	4293      	cmp	r3, r2
 8017974:	bf28      	it	cs
 8017976:	4613      	movcs	r3, r2
 8017978:	b29b      	uxth	r3, r3
 801797a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801797c:	4293      	cmp	r3, r2
 801797e:	bf28      	it	cs
 8017980:	4613      	movcs	r3, r2
 8017982:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8017984:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017988:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801798a:	4413      	add	r3, r2
 801798c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8017990:	8a7a      	ldrh	r2, [r7, #18]
 8017992:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017994:	1ad3      	subs	r3, r2, r3
 8017996:	b29b      	uxth	r3, r3
 8017998:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801799a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801799c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801799e:	1ad3      	subs	r3, r2, r3
 80179a0:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80179a2:	8a7b      	ldrh	r3, [r7, #18]
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d00b      	beq.n	80179c0 <tcp_write+0x1a0>
 80179a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80179ac:	88fb      	ldrh	r3, [r7, #6]
 80179ae:	429a      	cmp	r2, r3
 80179b0:	d006      	beq.n	80179c0 <tcp_write+0x1a0>
 80179b2:	4b52      	ldr	r3, [pc, #328]	@ (8017afc <tcp_write+0x2dc>)
 80179b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80179b8:	4956      	ldr	r1, [pc, #344]	@ (8017b14 <tcp_write+0x2f4>)
 80179ba:	4852      	ldr	r0, [pc, #328]	@ (8017b04 <tcp_write+0x2e4>)
 80179bc:	f005 fd06 	bl	801d3cc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80179c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80179c4:	88fb      	ldrh	r3, [r7, #6]
 80179c6:	429a      	cmp	r2, r3
 80179c8:	f080 8167 	bcs.w	8017c9a <tcp_write+0x47a>
 80179cc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	f000 8163 	beq.w	8017c9a <tcp_write+0x47a>
 80179d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80179d6:	891b      	ldrh	r3, [r3, #8]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	f000 815e 	beq.w	8017c9a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80179de:	88fa      	ldrh	r2, [r7, #6]
 80179e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80179e4:	1ad2      	subs	r2, r2, r3
 80179e6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80179e8:	4293      	cmp	r3, r2
 80179ea:	bfa8      	it	ge
 80179ec:	4613      	movge	r3, r2
 80179ee:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80179f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80179f2:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80179f4:	797b      	ldrb	r3, [r7, #5]
 80179f6:	f003 0301 	and.w	r3, r3, #1
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d027      	beq.n	8017a4e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80179fe:	f107 0012 	add.w	r0, r7, #18
 8017a02:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017a04:	8bf9      	ldrh	r1, [r7, #30]
 8017a06:	2301      	movs	r3, #1
 8017a08:	9302      	str	r3, [sp, #8]
 8017a0a:	797b      	ldrb	r3, [r7, #5]
 8017a0c:	9301      	str	r3, [sp, #4]
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	9300      	str	r3, [sp, #0]
 8017a12:	4603      	mov	r3, r0
 8017a14:	2000      	movs	r0, #0
 8017a16:	f7ff fe0f 	bl	8017638 <tcp_pbuf_prealloc>
 8017a1a:	6578      	str	r0, [r7, #84]	@ 0x54
 8017a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	f000 8225 	beq.w	8017e6e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8017a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a26:	6858      	ldr	r0, [r3, #4]
 8017a28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017a2c:	68ba      	ldr	r2, [r7, #8]
 8017a2e:	4413      	add	r3, r2
 8017a30:	8bfa      	ldrh	r2, [r7, #30]
 8017a32:	4619      	mov	r1, r3
 8017a34:	f005 fe61 	bl	801d6fa <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8017a38:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017a3a:	f7fb f9c3 	bl	8012dc4 <pbuf_clen>
 8017a3e:	4603      	mov	r3, r0
 8017a40:	461a      	mov	r2, r3
 8017a42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017a46:	4413      	add	r3, r2
 8017a48:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8017a4c:	e041      	b.n	8017ad2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8017a4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017a50:	685b      	ldr	r3, [r3, #4]
 8017a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8017a54:	e002      	b.n	8017a5c <tcp_write+0x23c>
 8017a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8017a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d1f8      	bne.n	8017a56 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017a66:	7b1b      	ldrb	r3, [r3, #12]
 8017a68:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d115      	bne.n	8017a9c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8017a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017a72:	685b      	ldr	r3, [r3, #4]
 8017a74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017a76:	8952      	ldrh	r2, [r2, #10]
 8017a78:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017a7a:	68ba      	ldr	r2, [r7, #8]
 8017a7c:	429a      	cmp	r2, r3
 8017a7e:	d10d      	bne.n	8017a9c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017a80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d006      	beq.n	8017a96 <tcp_write+0x276>
 8017a88:	4b1c      	ldr	r3, [pc, #112]	@ (8017afc <tcp_write+0x2dc>)
 8017a8a:	f240 2231 	movw	r2, #561	@ 0x231
 8017a8e:	4922      	ldr	r1, [pc, #136]	@ (8017b18 <tcp_write+0x2f8>)
 8017a90:	481c      	ldr	r0, [pc, #112]	@ (8017b04 <tcp_write+0x2e4>)
 8017a92:	f005 fc9b 	bl	801d3cc <iprintf>
          extendlen = seglen;
 8017a96:	8bfb      	ldrh	r3, [r7, #30]
 8017a98:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8017a9a:	e01a      	b.n	8017ad2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8017a9c:	8bfb      	ldrh	r3, [r7, #30]
 8017a9e:	2201      	movs	r2, #1
 8017aa0:	4619      	mov	r1, r3
 8017aa2:	2000      	movs	r0, #0
 8017aa4:	f7fa fe1c 	bl	80126e0 <pbuf_alloc>
 8017aa8:	6578      	str	r0, [r7, #84]	@ 0x54
 8017aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	f000 81e0 	beq.w	8017e72 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8017ab2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017ab6:	68ba      	ldr	r2, [r7, #8]
 8017ab8:	441a      	add	r2, r3
 8017aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017abc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8017abe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017ac0:	f7fb f980 	bl	8012dc4 <pbuf_clen>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	461a      	mov	r2, r3
 8017ac8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017acc:	4413      	add	r3, r2
 8017ace:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8017ad2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017ad6:	8bfb      	ldrh	r3, [r7, #30]
 8017ad8:	4413      	add	r3, r2
 8017ada:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8017ade:	e0dc      	b.n	8017c9a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	f000 80d7 	beq.w	8017c9a <tcp_write+0x47a>
 8017aec:	4b03      	ldr	r3, [pc, #12]	@ (8017afc <tcp_write+0x2dc>)
 8017aee:	f240 224a 	movw	r2, #586	@ 0x24a
 8017af2:	490a      	ldr	r1, [pc, #40]	@ (8017b1c <tcp_write+0x2fc>)
 8017af4:	4803      	ldr	r0, [pc, #12]	@ (8017b04 <tcp_write+0x2e4>)
 8017af6:	f005 fc69 	bl	801d3cc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8017afa:	e0ce      	b.n	8017c9a <tcp_write+0x47a>
 8017afc:	08020904 	.word	0x08020904
 8017b00:	08020aa4 	.word	0x08020aa4
 8017b04:	08020958 	.word	0x08020958
 8017b08:	08020abc 	.word	0x08020abc
 8017b0c:	08020af0 	.word	0x08020af0
 8017b10:	08020b08 	.word	0x08020b08
 8017b14:	08020b28 	.word	0x08020b28
 8017b18:	08020b48 	.word	0x08020b48
 8017b1c:	08020b74 	.word	0x08020b74
    struct pbuf *p;
    u16_t left = len - pos;
 8017b20:	88fa      	ldrh	r2, [r7, #6]
 8017b22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017b26:	1ad3      	subs	r3, r2, r3
 8017b28:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8017b2a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017b2e:	b29b      	uxth	r3, r3
 8017b30:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017b32:	1ad3      	subs	r3, r2, r3
 8017b34:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8017b36:	8b7a      	ldrh	r2, [r7, #26]
 8017b38:	8bbb      	ldrh	r3, [r7, #28]
 8017b3a:	4293      	cmp	r3, r2
 8017b3c:	bf28      	it	cs
 8017b3e:	4613      	movcs	r3, r2
 8017b40:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017b42:	797b      	ldrb	r3, [r7, #5]
 8017b44:	f003 0301 	and.w	r3, r3, #1
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d036      	beq.n	8017bba <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017b4c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017b50:	b29a      	uxth	r2, r3
 8017b52:	8b3b      	ldrh	r3, [r7, #24]
 8017b54:	4413      	add	r3, r2
 8017b56:	b299      	uxth	r1, r3
 8017b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	bf0c      	ite	eq
 8017b5e:	2301      	moveq	r3, #1
 8017b60:	2300      	movne	r3, #0
 8017b62:	b2db      	uxtb	r3, r3
 8017b64:	f107 0012 	add.w	r0, r7, #18
 8017b68:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017b6a:	9302      	str	r3, [sp, #8]
 8017b6c:	797b      	ldrb	r3, [r7, #5]
 8017b6e:	9301      	str	r3, [sp, #4]
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	9300      	str	r3, [sp, #0]
 8017b74:	4603      	mov	r3, r0
 8017b76:	2036      	movs	r0, #54	@ 0x36
 8017b78:	f7ff fd5e 	bl	8017638 <tcp_pbuf_prealloc>
 8017b7c:	6338      	str	r0, [r7, #48]	@ 0x30
 8017b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	f000 8178 	beq.w	8017e76 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8017b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b88:	895b      	ldrh	r3, [r3, #10]
 8017b8a:	8b3a      	ldrh	r2, [r7, #24]
 8017b8c:	429a      	cmp	r2, r3
 8017b8e:	d906      	bls.n	8017b9e <tcp_write+0x37e>
 8017b90:	4b8c      	ldr	r3, [pc, #560]	@ (8017dc4 <tcp_write+0x5a4>)
 8017b92:	f240 2266 	movw	r2, #614	@ 0x266
 8017b96:	498c      	ldr	r1, [pc, #560]	@ (8017dc8 <tcp_write+0x5a8>)
 8017b98:	488c      	ldr	r0, [pc, #560]	@ (8017dcc <tcp_write+0x5ac>)
 8017b9a:	f005 fc17 	bl	801d3cc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8017b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ba0:	685a      	ldr	r2, [r3, #4]
 8017ba2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017ba6:	18d0      	adds	r0, r2, r3
 8017ba8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017bac:	68ba      	ldr	r2, [r7, #8]
 8017bae:	4413      	add	r3, r2
 8017bb0:	8b3a      	ldrh	r2, [r7, #24]
 8017bb2:	4619      	mov	r1, r3
 8017bb4:	f005 fda1 	bl	801d6fa <memcpy>
 8017bb8:	e02f      	b.n	8017c1a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8017bba:	8a7b      	ldrh	r3, [r7, #18]
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d006      	beq.n	8017bce <tcp_write+0x3ae>
 8017bc0:	4b80      	ldr	r3, [pc, #512]	@ (8017dc4 <tcp_write+0x5a4>)
 8017bc2:	f240 2271 	movw	r2, #625	@ 0x271
 8017bc6:	4982      	ldr	r1, [pc, #520]	@ (8017dd0 <tcp_write+0x5b0>)
 8017bc8:	4880      	ldr	r0, [pc, #512]	@ (8017dcc <tcp_write+0x5ac>)
 8017bca:	f005 fbff 	bl	801d3cc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8017bce:	8b3b      	ldrh	r3, [r7, #24]
 8017bd0:	2201      	movs	r2, #1
 8017bd2:	4619      	mov	r1, r3
 8017bd4:	2036      	movs	r0, #54	@ 0x36
 8017bd6:	f7fa fd83 	bl	80126e0 <pbuf_alloc>
 8017bda:	6178      	str	r0, [r7, #20]
 8017bdc:	697b      	ldr	r3, [r7, #20]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	f000 814b 	beq.w	8017e7a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8017be4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017be8:	68ba      	ldr	r2, [r7, #8]
 8017bea:	441a      	add	r2, r3
 8017bec:	697b      	ldr	r3, [r7, #20]
 8017bee:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017bf0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017bf4:	b29b      	uxth	r3, r3
 8017bf6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017bfa:	4619      	mov	r1, r3
 8017bfc:	2036      	movs	r0, #54	@ 0x36
 8017bfe:	f7fa fd6f 	bl	80126e0 <pbuf_alloc>
 8017c02:	6338      	str	r0, [r7, #48]	@ 0x30
 8017c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d103      	bne.n	8017c12 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8017c0a:	6978      	ldr	r0, [r7, #20]
 8017c0c:	f7fb f84c 	bl	8012ca8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8017c10:	e136      	b.n	8017e80 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8017c12:	6979      	ldr	r1, [r7, #20]
 8017c14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017c16:	f7fb f915 	bl	8012e44 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8017c1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017c1c:	f7fb f8d2 	bl	8012dc4 <pbuf_clen>
 8017c20:	4603      	mov	r3, r0
 8017c22:	461a      	mov	r2, r3
 8017c24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017c28:	4413      	add	r3, r2
 8017c2a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8017c2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017c32:	2b09      	cmp	r3, #9
 8017c34:	d903      	bls.n	8017c3e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8017c36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017c38:	f7fb f836 	bl	8012ca8 <pbuf_free>
      goto memerr;
 8017c3c:	e120      	b.n	8017e80 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8017c42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017c46:	441a      	add	r2, r3
 8017c48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017c4c:	9300      	str	r3, [sp, #0]
 8017c4e:	4613      	mov	r3, r2
 8017c50:	2200      	movs	r2, #0
 8017c52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017c54:	68f8      	ldr	r0, [r7, #12]
 8017c56:	f7ff fc53 	bl	8017500 <tcp_create_segment>
 8017c5a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8017c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	f000 810d 	beq.w	8017e7e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8017c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d102      	bne.n	8017c70 <tcp_write+0x450>
      queue = seg;
 8017c6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8017c6e:	e00c      	b.n	8017c8a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8017c70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d106      	bne.n	8017c84 <tcp_write+0x464>
 8017c76:	4b53      	ldr	r3, [pc, #332]	@ (8017dc4 <tcp_write+0x5a4>)
 8017c78:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8017c7c:	4955      	ldr	r1, [pc, #340]	@ (8017dd4 <tcp_write+0x5b4>)
 8017c7e:	4853      	ldr	r0, [pc, #332]	@ (8017dcc <tcp_write+0x5ac>)
 8017c80:	f005 fba4 	bl	801d3cc <iprintf>
      prev_seg->next = seg;
 8017c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017c86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017c88:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8017c8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017c8c:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8017c8e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017c92:	8b3b      	ldrh	r3, [r7, #24]
 8017c94:	4413      	add	r3, r2
 8017c96:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8017c9a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017c9e:	88fb      	ldrh	r3, [r7, #6]
 8017ca0:	429a      	cmp	r2, r3
 8017ca2:	f4ff af3d 	bcc.w	8017b20 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8017ca6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d02c      	beq.n	8017d06 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8017cac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017cae:	685b      	ldr	r3, [r3, #4]
 8017cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017cb2:	e01e      	b.n	8017cf2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8017cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cb6:	891a      	ldrh	r2, [r3, #8]
 8017cb8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017cba:	4413      	add	r3, r2
 8017cbc:	b29a      	uxth	r2, r3
 8017cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cc0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8017cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d110      	bne.n	8017cec <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8017cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ccc:	685b      	ldr	r3, [r3, #4]
 8017cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017cd0:	8952      	ldrh	r2, [r2, #10]
 8017cd2:	4413      	add	r3, r2
 8017cd4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017cd6:	68b9      	ldr	r1, [r7, #8]
 8017cd8:	4618      	mov	r0, r3
 8017cda:	f005 fd0e 	bl	801d6fa <memcpy>
        p->len += oversize_used;
 8017cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ce0:	895a      	ldrh	r2, [r3, #10]
 8017ce2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017ce4:	4413      	add	r3, r2
 8017ce6:	b29a      	uxth	r2, r3
 8017ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cea:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8017cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d1dd      	bne.n	8017cb4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8017cf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017cfa:	891a      	ldrh	r2, [r3, #8]
 8017cfc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017cfe:	4413      	add	r3, r2
 8017d00:	b29a      	uxth	r2, r3
 8017d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017d04:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8017d06:	8a7a      	ldrh	r2, [r7, #18]
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8017d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d018      	beq.n	8017d46 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8017d14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d106      	bne.n	8017d28 <tcp_write+0x508>
 8017d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8017dc4 <tcp_write+0x5a4>)
 8017d1c:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8017d20:	492d      	ldr	r1, [pc, #180]	@ (8017dd8 <tcp_write+0x5b8>)
 8017d22:	482a      	ldr	r0, [pc, #168]	@ (8017dcc <tcp_write+0x5ac>)
 8017d24:	f005 fb52 	bl	801d3cc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8017d28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017d2a:	685b      	ldr	r3, [r3, #4]
 8017d2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017d2e:	4618      	mov	r0, r3
 8017d30:	f7fb f888 	bl	8012e44 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8017d34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017d36:	891a      	ldrh	r2, [r3, #8]
 8017d38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017d3a:	891b      	ldrh	r3, [r3, #8]
 8017d3c:	4413      	add	r3, r2
 8017d3e:	b29a      	uxth	r2, r3
 8017d40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017d42:	811a      	strh	r2, [r3, #8]
 8017d44:	e037      	b.n	8017db6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8017d46:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d034      	beq.n	8017db6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8017d4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d003      	beq.n	8017d5a <tcp_write+0x53a>
 8017d52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017d54:	685b      	ldr	r3, [r3, #4]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d106      	bne.n	8017d68 <tcp_write+0x548>
 8017d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8017dc4 <tcp_write+0x5a4>)
 8017d5c:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8017d60:	491e      	ldr	r1, [pc, #120]	@ (8017ddc <tcp_write+0x5bc>)
 8017d62:	481a      	ldr	r0, [pc, #104]	@ (8017dcc <tcp_write+0x5ac>)
 8017d64:	f005 fb32 	bl	801d3cc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017d68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017d6a:	685b      	ldr	r3, [r3, #4]
 8017d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017d6e:	e009      	b.n	8017d84 <tcp_write+0x564>
      p->tot_len += extendlen;
 8017d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d72:	891a      	ldrh	r2, [r3, #8]
 8017d74:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017d76:	4413      	add	r3, r2
 8017d78:	b29a      	uxth	r2, r3
 8017d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d7c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d1f1      	bne.n	8017d70 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8017d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d8e:	891a      	ldrh	r2, [r3, #8]
 8017d90:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017d92:	4413      	add	r3, r2
 8017d94:	b29a      	uxth	r2, r3
 8017d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d98:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8017d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d9c:	895a      	ldrh	r2, [r3, #10]
 8017d9e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017da0:	4413      	add	r3, r2
 8017da2:	b29a      	uxth	r2, r3
 8017da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017da6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8017da8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017daa:	891a      	ldrh	r2, [r3, #8]
 8017dac:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017dae:	4413      	add	r3, r2
 8017db0:	b29a      	uxth	r2, r3
 8017db2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017db4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8017db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d111      	bne.n	8017de0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017dc0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017dc2:	e010      	b.n	8017de6 <tcp_write+0x5c6>
 8017dc4:	08020904 	.word	0x08020904
 8017dc8:	08020ba4 	.word	0x08020ba4
 8017dcc:	08020958 	.word	0x08020958
 8017dd0:	08020be4 	.word	0x08020be4
 8017dd4:	08020bf4 	.word	0x08020bf4
 8017dd8:	08020c08 	.word	0x08020c08
 8017ddc:	08020c40 	.word	0x08020c40
  } else {
    last_unsent->next = queue;
 8017de0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017de2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017de4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8017dea:	88fb      	ldrh	r3, [r7, #6]
 8017dec:	441a      	add	r2, r3
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8017df8:	88fb      	ldrh	r3, [r7, #6]
 8017dfa:	1ad3      	subs	r3, r2, r3
 8017dfc:	b29a      	uxth	r2, r3
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8017e0a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d00e      	beq.n	8017e36 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d10a      	bne.n	8017e36 <tcp_write+0x616>
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d106      	bne.n	8017e36 <tcp_write+0x616>
 8017e28:	4b2c      	ldr	r3, [pc, #176]	@ (8017edc <tcp_write+0x6bc>)
 8017e2a:	f240 3212 	movw	r2, #786	@ 0x312
 8017e2e:	492c      	ldr	r1, [pc, #176]	@ (8017ee0 <tcp_write+0x6c0>)
 8017e30:	482c      	ldr	r0, [pc, #176]	@ (8017ee4 <tcp_write+0x6c4>)
 8017e32:	f005 facb 	bl	801d3cc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8017e36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d016      	beq.n	8017e6a <tcp_write+0x64a>
 8017e3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e3e:	68db      	ldr	r3, [r3, #12]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d012      	beq.n	8017e6a <tcp_write+0x64a>
 8017e44:	797b      	ldrb	r3, [r7, #5]
 8017e46:	f003 0302 	and.w	r3, r3, #2
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d10d      	bne.n	8017e6a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8017e4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e50:	68db      	ldr	r3, [r3, #12]
 8017e52:	899b      	ldrh	r3, [r3, #12]
 8017e54:	b29c      	uxth	r4, r3
 8017e56:	2008      	movs	r0, #8
 8017e58:	f7f9 fb38 	bl	80114cc <lwip_htons>
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	461a      	mov	r2, r3
 8017e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e62:	68db      	ldr	r3, [r3, #12]
 8017e64:	4322      	orrs	r2, r4
 8017e66:	b292      	uxth	r2, r2
 8017e68:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	e031      	b.n	8017ed2 <tcp_write+0x6b2>
          goto memerr;
 8017e6e:	bf00      	nop
 8017e70:	e006      	b.n	8017e80 <tcp_write+0x660>
            goto memerr;
 8017e72:	bf00      	nop
 8017e74:	e004      	b.n	8017e80 <tcp_write+0x660>
        goto memerr;
 8017e76:	bf00      	nop
 8017e78:	e002      	b.n	8017e80 <tcp_write+0x660>
        goto memerr;
 8017e7a:	bf00      	nop
 8017e7c:	e000      	b.n	8017e80 <tcp_write+0x660>
      goto memerr;
 8017e7e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	8b5b      	ldrh	r3, [r3, #26]
 8017e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017e88:	b29a      	uxth	r2, r3
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8017e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d002      	beq.n	8017e9a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8017e94:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017e96:	f7fa ff07 	bl	8012ca8 <pbuf_free>
  }
  if (queue != NULL) {
 8017e9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d002      	beq.n	8017ea6 <tcp_write+0x686>
    tcp_segs_free(queue);
 8017ea0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017ea2:	f7fc fb71 	bl	8014588 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8017ea6:	68fb      	ldr	r3, [r7, #12]
 8017ea8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d00e      	beq.n	8017ece <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d10a      	bne.n	8017ece <tcp_write+0x6ae>
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d106      	bne.n	8017ece <tcp_write+0x6ae>
 8017ec0:	4b06      	ldr	r3, [pc, #24]	@ (8017edc <tcp_write+0x6bc>)
 8017ec2:	f240 3227 	movw	r2, #807	@ 0x327
 8017ec6:	4906      	ldr	r1, [pc, #24]	@ (8017ee0 <tcp_write+0x6c0>)
 8017ec8:	4806      	ldr	r0, [pc, #24]	@ (8017ee4 <tcp_write+0x6c4>)
 8017eca:	f005 fa7f 	bl	801d3cc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8017ece:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	375c      	adds	r7, #92	@ 0x5c
 8017ed6:	46bd      	mov	sp, r7
 8017ed8:	bd90      	pop	{r4, r7, pc}
 8017eda:	bf00      	nop
 8017edc:	08020904 	.word	0x08020904
 8017ee0:	08020c78 	.word	0x08020c78
 8017ee4:	08020958 	.word	0x08020958

08017ee8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8017ee8:	b590      	push	{r4, r7, lr}
 8017eea:	b08b      	sub	sp, #44	@ 0x2c
 8017eec:	af02      	add	r7, sp, #8
 8017eee:	6078      	str	r0, [r7, #4]
 8017ef0:	460b      	mov	r3, r1
 8017ef2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	61fb      	str	r3, [r7, #28]
 8017ef8:	2300      	movs	r3, #0
 8017efa:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8017efc:	2300      	movs	r3, #0
 8017efe:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d106      	bne.n	8017f14 <tcp_split_unsent_seg+0x2c>
 8017f06:	4b95      	ldr	r3, [pc, #596]	@ (801815c <tcp_split_unsent_seg+0x274>)
 8017f08:	f240 324b 	movw	r2, #843	@ 0x34b
 8017f0c:	4994      	ldr	r1, [pc, #592]	@ (8018160 <tcp_split_unsent_seg+0x278>)
 8017f0e:	4895      	ldr	r0, [pc, #596]	@ (8018164 <tcp_split_unsent_seg+0x27c>)
 8017f10:	f005 fa5c 	bl	801d3cc <iprintf>

  useg = pcb->unsent;
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017f18:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8017f1a:	697b      	ldr	r3, [r7, #20]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d102      	bne.n	8017f26 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8017f20:	f04f 33ff 	mov.w	r3, #4294967295
 8017f24:	e116      	b.n	8018154 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8017f26:	887b      	ldrh	r3, [r7, #2]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d109      	bne.n	8017f40 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8017f2c:	4b8b      	ldr	r3, [pc, #556]	@ (801815c <tcp_split_unsent_seg+0x274>)
 8017f2e:	f240 3253 	movw	r2, #851	@ 0x353
 8017f32:	498d      	ldr	r1, [pc, #564]	@ (8018168 <tcp_split_unsent_seg+0x280>)
 8017f34:	488b      	ldr	r0, [pc, #556]	@ (8018164 <tcp_split_unsent_seg+0x27c>)
 8017f36:	f005 fa49 	bl	801d3cc <iprintf>
    return ERR_VAL;
 8017f3a:	f06f 0305 	mvn.w	r3, #5
 8017f3e:	e109      	b.n	8018154 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8017f40:	697b      	ldr	r3, [r7, #20]
 8017f42:	891b      	ldrh	r3, [r3, #8]
 8017f44:	887a      	ldrh	r2, [r7, #2]
 8017f46:	429a      	cmp	r2, r3
 8017f48:	d301      	bcc.n	8017f4e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	e102      	b.n	8018154 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017f52:	887a      	ldrh	r2, [r7, #2]
 8017f54:	429a      	cmp	r2, r3
 8017f56:	d906      	bls.n	8017f66 <tcp_split_unsent_seg+0x7e>
 8017f58:	4b80      	ldr	r3, [pc, #512]	@ (801815c <tcp_split_unsent_seg+0x274>)
 8017f5a:	f240 325b 	movw	r2, #859	@ 0x35b
 8017f5e:	4983      	ldr	r1, [pc, #524]	@ (801816c <tcp_split_unsent_seg+0x284>)
 8017f60:	4880      	ldr	r0, [pc, #512]	@ (8018164 <tcp_split_unsent_seg+0x27c>)
 8017f62:	f005 fa33 	bl	801d3cc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8017f66:	697b      	ldr	r3, [r7, #20]
 8017f68:	891b      	ldrh	r3, [r3, #8]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d106      	bne.n	8017f7c <tcp_split_unsent_seg+0x94>
 8017f6e:	4b7b      	ldr	r3, [pc, #492]	@ (801815c <tcp_split_unsent_seg+0x274>)
 8017f70:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8017f74:	497e      	ldr	r1, [pc, #504]	@ (8018170 <tcp_split_unsent_seg+0x288>)
 8017f76:	487b      	ldr	r0, [pc, #492]	@ (8018164 <tcp_split_unsent_seg+0x27c>)
 8017f78:	f005 fa28 	bl	801d3cc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8017f7c:	697b      	ldr	r3, [r7, #20]
 8017f7e:	7a9b      	ldrb	r3, [r3, #10]
 8017f80:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8017f82:	7bfb      	ldrb	r3, [r7, #15]
 8017f84:	009b      	lsls	r3, r3, #2
 8017f86:	b2db      	uxtb	r3, r3
 8017f88:	f003 0304 	and.w	r3, r3, #4
 8017f8c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8017f8e:	697b      	ldr	r3, [r7, #20]
 8017f90:	891a      	ldrh	r2, [r3, #8]
 8017f92:	887b      	ldrh	r3, [r7, #2]
 8017f94:	1ad3      	subs	r3, r2, r3
 8017f96:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8017f98:	7bbb      	ldrb	r3, [r7, #14]
 8017f9a:	b29a      	uxth	r2, r3
 8017f9c:	89bb      	ldrh	r3, [r7, #12]
 8017f9e:	4413      	add	r3, r2
 8017fa0:	b29b      	uxth	r3, r3
 8017fa2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017fa6:	4619      	mov	r1, r3
 8017fa8:	2036      	movs	r0, #54	@ 0x36
 8017faa:	f7fa fb99 	bl	80126e0 <pbuf_alloc>
 8017fae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017fb0:	693b      	ldr	r3, [r7, #16]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	f000 80b7 	beq.w	8018126 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8017fb8:	697b      	ldr	r3, [r7, #20]
 8017fba:	685b      	ldr	r3, [r3, #4]
 8017fbc:	891a      	ldrh	r2, [r3, #8]
 8017fbe:	697b      	ldr	r3, [r7, #20]
 8017fc0:	891b      	ldrh	r3, [r3, #8]
 8017fc2:	1ad3      	subs	r3, r2, r3
 8017fc4:	b29a      	uxth	r2, r3
 8017fc6:	887b      	ldrh	r3, [r7, #2]
 8017fc8:	4413      	add	r3, r2
 8017fca:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8017fcc:	697b      	ldr	r3, [r7, #20]
 8017fce:	6858      	ldr	r0, [r3, #4]
 8017fd0:	693b      	ldr	r3, [r7, #16]
 8017fd2:	685a      	ldr	r2, [r3, #4]
 8017fd4:	7bbb      	ldrb	r3, [r7, #14]
 8017fd6:	18d1      	adds	r1, r2, r3
 8017fd8:	897b      	ldrh	r3, [r7, #10]
 8017fda:	89ba      	ldrh	r2, [r7, #12]
 8017fdc:	f7fb f85a 	bl	8013094 <pbuf_copy_partial>
 8017fe0:	4603      	mov	r3, r0
 8017fe2:	461a      	mov	r2, r3
 8017fe4:	89bb      	ldrh	r3, [r7, #12]
 8017fe6:	4293      	cmp	r3, r2
 8017fe8:	f040 809f 	bne.w	801812a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8017fec:	697b      	ldr	r3, [r7, #20]
 8017fee:	68db      	ldr	r3, [r3, #12]
 8017ff0:	899b      	ldrh	r3, [r3, #12]
 8017ff2:	b29b      	uxth	r3, r3
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	f7f9 fa69 	bl	80114cc <lwip_htons>
 8017ffa:	4603      	mov	r3, r0
 8017ffc:	b2db      	uxtb	r3, r3
 8017ffe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018002:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8018004:	2300      	movs	r3, #0
 8018006:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8018008:	7efb      	ldrb	r3, [r7, #27]
 801800a:	f003 0308 	and.w	r3, r3, #8
 801800e:	2b00      	cmp	r3, #0
 8018010:	d007      	beq.n	8018022 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8018012:	7efb      	ldrb	r3, [r7, #27]
 8018014:	f023 0308 	bic.w	r3, r3, #8
 8018018:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801801a:	7ebb      	ldrb	r3, [r7, #26]
 801801c:	f043 0308 	orr.w	r3, r3, #8
 8018020:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8018022:	7efb      	ldrb	r3, [r7, #27]
 8018024:	f003 0301 	and.w	r3, r3, #1
 8018028:	2b00      	cmp	r3, #0
 801802a:	d007      	beq.n	801803c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801802c:	7efb      	ldrb	r3, [r7, #27]
 801802e:	f023 0301 	bic.w	r3, r3, #1
 8018032:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8018034:	7ebb      	ldrb	r3, [r7, #26]
 8018036:	f043 0301 	orr.w	r3, r3, #1
 801803a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801803c:	697b      	ldr	r3, [r7, #20]
 801803e:	68db      	ldr	r3, [r3, #12]
 8018040:	685b      	ldr	r3, [r3, #4]
 8018042:	4618      	mov	r0, r3
 8018044:	f7f9 fa58 	bl	80114f8 <lwip_htonl>
 8018048:	4602      	mov	r2, r0
 801804a:	887b      	ldrh	r3, [r7, #2]
 801804c:	18d1      	adds	r1, r2, r3
 801804e:	7eba      	ldrb	r2, [r7, #26]
 8018050:	7bfb      	ldrb	r3, [r7, #15]
 8018052:	9300      	str	r3, [sp, #0]
 8018054:	460b      	mov	r3, r1
 8018056:	6939      	ldr	r1, [r7, #16]
 8018058:	6878      	ldr	r0, [r7, #4]
 801805a:	f7ff fa51 	bl	8017500 <tcp_create_segment>
 801805e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8018060:	69fb      	ldr	r3, [r7, #28]
 8018062:	2b00      	cmp	r3, #0
 8018064:	d063      	beq.n	801812e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8018066:	697b      	ldr	r3, [r7, #20]
 8018068:	685b      	ldr	r3, [r3, #4]
 801806a:	4618      	mov	r0, r3
 801806c:	f7fa feaa 	bl	8012dc4 <pbuf_clen>
 8018070:	4603      	mov	r3, r0
 8018072:	461a      	mov	r2, r3
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801807a:	1a9b      	subs	r3, r3, r2
 801807c:	b29a      	uxth	r2, r3
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8018084:	697b      	ldr	r3, [r7, #20]
 8018086:	6858      	ldr	r0, [r3, #4]
 8018088:	697b      	ldr	r3, [r7, #20]
 801808a:	685b      	ldr	r3, [r3, #4]
 801808c:	891a      	ldrh	r2, [r3, #8]
 801808e:	89bb      	ldrh	r3, [r7, #12]
 8018090:	1ad3      	subs	r3, r2, r3
 8018092:	b29b      	uxth	r3, r3
 8018094:	4619      	mov	r1, r3
 8018096:	f7fa fc81 	bl	801299c <pbuf_realloc>
  useg->len -= remainder;
 801809a:	697b      	ldr	r3, [r7, #20]
 801809c:	891a      	ldrh	r2, [r3, #8]
 801809e:	89bb      	ldrh	r3, [r7, #12]
 80180a0:	1ad3      	subs	r3, r2, r3
 80180a2:	b29a      	uxth	r2, r3
 80180a4:	697b      	ldr	r3, [r7, #20]
 80180a6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80180a8:	697b      	ldr	r3, [r7, #20]
 80180aa:	68db      	ldr	r3, [r3, #12]
 80180ac:	899b      	ldrh	r3, [r3, #12]
 80180ae:	b29c      	uxth	r4, r3
 80180b0:	7efb      	ldrb	r3, [r7, #27]
 80180b2:	b29b      	uxth	r3, r3
 80180b4:	4618      	mov	r0, r3
 80180b6:	f7f9 fa09 	bl	80114cc <lwip_htons>
 80180ba:	4603      	mov	r3, r0
 80180bc:	461a      	mov	r2, r3
 80180be:	697b      	ldr	r3, [r7, #20]
 80180c0:	68db      	ldr	r3, [r3, #12]
 80180c2:	4322      	orrs	r2, r4
 80180c4:	b292      	uxth	r2, r2
 80180c6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80180c8:	697b      	ldr	r3, [r7, #20]
 80180ca:	685b      	ldr	r3, [r3, #4]
 80180cc:	4618      	mov	r0, r3
 80180ce:	f7fa fe79 	bl	8012dc4 <pbuf_clen>
 80180d2:	4603      	mov	r3, r0
 80180d4:	461a      	mov	r2, r3
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80180dc:	4413      	add	r3, r2
 80180de:	b29a      	uxth	r2, r3
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80180e6:	69fb      	ldr	r3, [r7, #28]
 80180e8:	685b      	ldr	r3, [r3, #4]
 80180ea:	4618      	mov	r0, r3
 80180ec:	f7fa fe6a 	bl	8012dc4 <pbuf_clen>
 80180f0:	4603      	mov	r3, r0
 80180f2:	461a      	mov	r2, r3
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80180fa:	4413      	add	r3, r2
 80180fc:	b29a      	uxth	r2, r3
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8018104:	697b      	ldr	r3, [r7, #20]
 8018106:	681a      	ldr	r2, [r3, #0]
 8018108:	69fb      	ldr	r3, [r7, #28]
 801810a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801810c:	697b      	ldr	r3, [r7, #20]
 801810e:	69fa      	ldr	r2, [r7, #28]
 8018110:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8018112:	69fb      	ldr	r3, [r7, #28]
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d103      	bne.n	8018122 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	2200      	movs	r2, #0
 801811e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8018122:	2300      	movs	r3, #0
 8018124:	e016      	b.n	8018154 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8018126:	bf00      	nop
 8018128:	e002      	b.n	8018130 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801812a:	bf00      	nop
 801812c:	e000      	b.n	8018130 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801812e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8018130:	69fb      	ldr	r3, [r7, #28]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d006      	beq.n	8018144 <tcp_split_unsent_seg+0x25c>
 8018136:	4b09      	ldr	r3, [pc, #36]	@ (801815c <tcp_split_unsent_seg+0x274>)
 8018138:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801813c:	490d      	ldr	r1, [pc, #52]	@ (8018174 <tcp_split_unsent_seg+0x28c>)
 801813e:	4809      	ldr	r0, [pc, #36]	@ (8018164 <tcp_split_unsent_seg+0x27c>)
 8018140:	f005 f944 	bl	801d3cc <iprintf>
  if (p != NULL) {
 8018144:	693b      	ldr	r3, [r7, #16]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d002      	beq.n	8018150 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801814a:	6938      	ldr	r0, [r7, #16]
 801814c:	f7fa fdac 	bl	8012ca8 <pbuf_free>
  }

  return ERR_MEM;
 8018150:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018154:	4618      	mov	r0, r3
 8018156:	3724      	adds	r7, #36	@ 0x24
 8018158:	46bd      	mov	sp, r7
 801815a:	bd90      	pop	{r4, r7, pc}
 801815c:	08020904 	.word	0x08020904
 8018160:	08020c98 	.word	0x08020c98
 8018164:	08020958 	.word	0x08020958
 8018168:	08020cbc 	.word	0x08020cbc
 801816c:	08020ce0 	.word	0x08020ce0
 8018170:	08020cf0 	.word	0x08020cf0
 8018174:	08020d00 	.word	0x08020d00

08018178 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8018178:	b590      	push	{r4, r7, lr}
 801817a:	b085      	sub	sp, #20
 801817c:	af00      	add	r7, sp, #0
 801817e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d106      	bne.n	8018194 <tcp_send_fin+0x1c>
 8018186:	4b21      	ldr	r3, [pc, #132]	@ (801820c <tcp_send_fin+0x94>)
 8018188:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801818c:	4920      	ldr	r1, [pc, #128]	@ (8018210 <tcp_send_fin+0x98>)
 801818e:	4821      	ldr	r0, [pc, #132]	@ (8018214 <tcp_send_fin+0x9c>)
 8018190:	f005 f91c 	bl	801d3cc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018198:	2b00      	cmp	r3, #0
 801819a:	d02e      	beq.n	80181fa <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80181a0:	60fb      	str	r3, [r7, #12]
 80181a2:	e002      	b.n	80181aa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80181aa:	68fb      	ldr	r3, [r7, #12]
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d1f8      	bne.n	80181a4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80181b2:	68fb      	ldr	r3, [r7, #12]
 80181b4:	68db      	ldr	r3, [r3, #12]
 80181b6:	899b      	ldrh	r3, [r3, #12]
 80181b8:	b29b      	uxth	r3, r3
 80181ba:	4618      	mov	r0, r3
 80181bc:	f7f9 f986 	bl	80114cc <lwip_htons>
 80181c0:	4603      	mov	r3, r0
 80181c2:	b2db      	uxtb	r3, r3
 80181c4:	f003 0307 	and.w	r3, r3, #7
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d116      	bne.n	80181fa <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80181cc:	68fb      	ldr	r3, [r7, #12]
 80181ce:	68db      	ldr	r3, [r3, #12]
 80181d0:	899b      	ldrh	r3, [r3, #12]
 80181d2:	b29c      	uxth	r4, r3
 80181d4:	2001      	movs	r0, #1
 80181d6:	f7f9 f979 	bl	80114cc <lwip_htons>
 80181da:	4603      	mov	r3, r0
 80181dc:	461a      	mov	r2, r3
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	68db      	ldr	r3, [r3, #12]
 80181e2:	4322      	orrs	r2, r4
 80181e4:	b292      	uxth	r2, r2
 80181e6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	8b5b      	ldrh	r3, [r3, #26]
 80181ec:	f043 0320 	orr.w	r3, r3, #32
 80181f0:	b29a      	uxth	r2, r3
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80181f6:	2300      	movs	r3, #0
 80181f8:	e004      	b.n	8018204 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80181fa:	2101      	movs	r1, #1
 80181fc:	6878      	ldr	r0, [r7, #4]
 80181fe:	f000 f80b 	bl	8018218 <tcp_enqueue_flags>
 8018202:	4603      	mov	r3, r0
}
 8018204:	4618      	mov	r0, r3
 8018206:	3714      	adds	r7, #20
 8018208:	46bd      	mov	sp, r7
 801820a:	bd90      	pop	{r4, r7, pc}
 801820c:	08020904 	.word	0x08020904
 8018210:	08020d0c 	.word	0x08020d0c
 8018214:	08020958 	.word	0x08020958

08018218 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8018218:	b580      	push	{r7, lr}
 801821a:	b08a      	sub	sp, #40	@ 0x28
 801821c:	af02      	add	r7, sp, #8
 801821e:	6078      	str	r0, [r7, #4]
 8018220:	460b      	mov	r3, r1
 8018222:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8018224:	2300      	movs	r3, #0
 8018226:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8018228:	2300      	movs	r3, #0
 801822a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801822c:	78fb      	ldrb	r3, [r7, #3]
 801822e:	f003 0303 	and.w	r3, r3, #3
 8018232:	2b00      	cmp	r3, #0
 8018234:	d106      	bne.n	8018244 <tcp_enqueue_flags+0x2c>
 8018236:	4b67      	ldr	r3, [pc, #412]	@ (80183d4 <tcp_enqueue_flags+0x1bc>)
 8018238:	f240 4211 	movw	r2, #1041	@ 0x411
 801823c:	4966      	ldr	r1, [pc, #408]	@ (80183d8 <tcp_enqueue_flags+0x1c0>)
 801823e:	4867      	ldr	r0, [pc, #412]	@ (80183dc <tcp_enqueue_flags+0x1c4>)
 8018240:	f005 f8c4 	bl	801d3cc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d106      	bne.n	8018258 <tcp_enqueue_flags+0x40>
 801824a:	4b62      	ldr	r3, [pc, #392]	@ (80183d4 <tcp_enqueue_flags+0x1bc>)
 801824c:	f240 4213 	movw	r2, #1043	@ 0x413
 8018250:	4963      	ldr	r1, [pc, #396]	@ (80183e0 <tcp_enqueue_flags+0x1c8>)
 8018252:	4862      	ldr	r0, [pc, #392]	@ (80183dc <tcp_enqueue_flags+0x1c4>)
 8018254:	f005 f8ba 	bl	801d3cc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8018258:	78fb      	ldrb	r3, [r7, #3]
 801825a:	f003 0302 	and.w	r3, r3, #2
 801825e:	2b00      	cmp	r3, #0
 8018260:	d001      	beq.n	8018266 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8018262:	2301      	movs	r3, #1
 8018264:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018266:	7ffb      	ldrb	r3, [r7, #31]
 8018268:	009b      	lsls	r3, r3, #2
 801826a:	b2db      	uxtb	r3, r3
 801826c:	f003 0304 	and.w	r3, r3, #4
 8018270:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018272:	7dfb      	ldrb	r3, [r7, #23]
 8018274:	b29b      	uxth	r3, r3
 8018276:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801827a:	4619      	mov	r1, r3
 801827c:	2036      	movs	r0, #54	@ 0x36
 801827e:	f7fa fa2f 	bl	80126e0 <pbuf_alloc>
 8018282:	6138      	str	r0, [r7, #16]
 8018284:	693b      	ldr	r3, [r7, #16]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d109      	bne.n	801829e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	8b5b      	ldrh	r3, [r3, #26]
 801828e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018292:	b29a      	uxth	r2, r3
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018298:	f04f 33ff 	mov.w	r3, #4294967295
 801829c:	e095      	b.n	80183ca <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801829e:	693b      	ldr	r3, [r7, #16]
 80182a0:	895a      	ldrh	r2, [r3, #10]
 80182a2:	7dfb      	ldrb	r3, [r7, #23]
 80182a4:	b29b      	uxth	r3, r3
 80182a6:	429a      	cmp	r2, r3
 80182a8:	d206      	bcs.n	80182b8 <tcp_enqueue_flags+0xa0>
 80182aa:	4b4a      	ldr	r3, [pc, #296]	@ (80183d4 <tcp_enqueue_flags+0x1bc>)
 80182ac:	f240 4239 	movw	r2, #1081	@ 0x439
 80182b0:	494c      	ldr	r1, [pc, #304]	@ (80183e4 <tcp_enqueue_flags+0x1cc>)
 80182b2:	484a      	ldr	r0, [pc, #296]	@ (80183dc <tcp_enqueue_flags+0x1c4>)
 80182b4:	f005 f88a 	bl	801d3cc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80182bc:	78fa      	ldrb	r2, [r7, #3]
 80182be:	7ffb      	ldrb	r3, [r7, #31]
 80182c0:	9300      	str	r3, [sp, #0]
 80182c2:	460b      	mov	r3, r1
 80182c4:	6939      	ldr	r1, [r7, #16]
 80182c6:	6878      	ldr	r0, [r7, #4]
 80182c8:	f7ff f91a 	bl	8017500 <tcp_create_segment>
 80182cc:	60f8      	str	r0, [r7, #12]
 80182ce:	68fb      	ldr	r3, [r7, #12]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d109      	bne.n	80182e8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	8b5b      	ldrh	r3, [r3, #26]
 80182d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80182dc:	b29a      	uxth	r2, r3
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80182e2:	f04f 33ff 	mov.w	r3, #4294967295
 80182e6:	e070      	b.n	80183ca <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	68db      	ldr	r3, [r3, #12]
 80182ec:	f003 0303 	and.w	r3, r3, #3
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d006      	beq.n	8018302 <tcp_enqueue_flags+0xea>
 80182f4:	4b37      	ldr	r3, [pc, #220]	@ (80183d4 <tcp_enqueue_flags+0x1bc>)
 80182f6:	f240 4242 	movw	r2, #1090	@ 0x442
 80182fa:	493b      	ldr	r1, [pc, #236]	@ (80183e8 <tcp_enqueue_flags+0x1d0>)
 80182fc:	4837      	ldr	r0, [pc, #220]	@ (80183dc <tcp_enqueue_flags+0x1c4>)
 80182fe:	f005 f865 	bl	801d3cc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	891b      	ldrh	r3, [r3, #8]
 8018306:	2b00      	cmp	r3, #0
 8018308:	d006      	beq.n	8018318 <tcp_enqueue_flags+0x100>
 801830a:	4b32      	ldr	r3, [pc, #200]	@ (80183d4 <tcp_enqueue_flags+0x1bc>)
 801830c:	f240 4243 	movw	r2, #1091	@ 0x443
 8018310:	4936      	ldr	r1, [pc, #216]	@ (80183ec <tcp_enqueue_flags+0x1d4>)
 8018312:	4832      	ldr	r0, [pc, #200]	@ (80183dc <tcp_enqueue_flags+0x1c4>)
 8018314:	f005 f85a 	bl	801d3cc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801831c:	2b00      	cmp	r3, #0
 801831e:	d103      	bne.n	8018328 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	68fa      	ldr	r2, [r7, #12]
 8018324:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018326:	e00d      	b.n	8018344 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801832c:	61bb      	str	r3, [r7, #24]
 801832e:	e002      	b.n	8018336 <tcp_enqueue_flags+0x11e>
 8018330:	69bb      	ldr	r3, [r7, #24]
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	61bb      	str	r3, [r7, #24]
 8018336:	69bb      	ldr	r3, [r7, #24]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	2b00      	cmp	r3, #0
 801833c:	d1f8      	bne.n	8018330 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801833e:	69bb      	ldr	r3, [r7, #24]
 8018340:	68fa      	ldr	r2, [r7, #12]
 8018342:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	2200      	movs	r2, #0
 8018348:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801834c:	78fb      	ldrb	r3, [r7, #3]
 801834e:	f003 0302 	and.w	r3, r3, #2
 8018352:	2b00      	cmp	r3, #0
 8018354:	d104      	bne.n	8018360 <tcp_enqueue_flags+0x148>
 8018356:	78fb      	ldrb	r3, [r7, #3]
 8018358:	f003 0301 	and.w	r3, r3, #1
 801835c:	2b00      	cmp	r3, #0
 801835e:	d004      	beq.n	801836a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018364:	1c5a      	adds	r2, r3, #1
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801836a:	78fb      	ldrb	r3, [r7, #3]
 801836c:	f003 0301 	and.w	r3, r3, #1
 8018370:	2b00      	cmp	r3, #0
 8018372:	d006      	beq.n	8018382 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	8b5b      	ldrh	r3, [r3, #26]
 8018378:	f043 0320 	orr.w	r3, r3, #32
 801837c:	b29a      	uxth	r2, r3
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	685b      	ldr	r3, [r3, #4]
 8018386:	4618      	mov	r0, r3
 8018388:	f7fa fd1c 	bl	8012dc4 <pbuf_clen>
 801838c:	4603      	mov	r3, r0
 801838e:	461a      	mov	r2, r3
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018396:	4413      	add	r3, r2
 8018398:	b29a      	uxth	r2, r3
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d00e      	beq.n	80183c8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d10a      	bne.n	80183c8 <tcp_enqueue_flags+0x1b0>
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d106      	bne.n	80183c8 <tcp_enqueue_flags+0x1b0>
 80183ba:	4b06      	ldr	r3, [pc, #24]	@ (80183d4 <tcp_enqueue_flags+0x1bc>)
 80183bc:	f240 4265 	movw	r2, #1125	@ 0x465
 80183c0:	490b      	ldr	r1, [pc, #44]	@ (80183f0 <tcp_enqueue_flags+0x1d8>)
 80183c2:	4806      	ldr	r0, [pc, #24]	@ (80183dc <tcp_enqueue_flags+0x1c4>)
 80183c4:	f005 f802 	bl	801d3cc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80183c8:	2300      	movs	r3, #0
}
 80183ca:	4618      	mov	r0, r3
 80183cc:	3720      	adds	r7, #32
 80183ce:	46bd      	mov	sp, r7
 80183d0:	bd80      	pop	{r7, pc}
 80183d2:	bf00      	nop
 80183d4:	08020904 	.word	0x08020904
 80183d8:	08020d28 	.word	0x08020d28
 80183dc:	08020958 	.word	0x08020958
 80183e0:	08020d80 	.word	0x08020d80
 80183e4:	08020da0 	.word	0x08020da0
 80183e8:	08020ddc 	.word	0x08020ddc
 80183ec:	08020df4 	.word	0x08020df4
 80183f0:	08020e20 	.word	0x08020e20

080183f4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80183f4:	b5b0      	push	{r4, r5, r7, lr}
 80183f6:	b08a      	sub	sp, #40	@ 0x28
 80183f8:	af00      	add	r7, sp, #0
 80183fa:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d106      	bne.n	8018410 <tcp_output+0x1c>
 8018402:	4b8a      	ldr	r3, [pc, #552]	@ (801862c <tcp_output+0x238>)
 8018404:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8018408:	4989      	ldr	r1, [pc, #548]	@ (8018630 <tcp_output+0x23c>)
 801840a:	488a      	ldr	r0, [pc, #552]	@ (8018634 <tcp_output+0x240>)
 801840c:	f004 ffde 	bl	801d3cc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	7d1b      	ldrb	r3, [r3, #20]
 8018414:	2b01      	cmp	r3, #1
 8018416:	d106      	bne.n	8018426 <tcp_output+0x32>
 8018418:	4b84      	ldr	r3, [pc, #528]	@ (801862c <tcp_output+0x238>)
 801841a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801841e:	4986      	ldr	r1, [pc, #536]	@ (8018638 <tcp_output+0x244>)
 8018420:	4884      	ldr	r0, [pc, #528]	@ (8018634 <tcp_output+0x240>)
 8018422:	f004 ffd3 	bl	801d3cc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8018426:	4b85      	ldr	r3, [pc, #532]	@ (801863c <tcp_output+0x248>)
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	687a      	ldr	r2, [r7, #4]
 801842c:	429a      	cmp	r2, r3
 801842e:	d101      	bne.n	8018434 <tcp_output+0x40>
    return ERR_OK;
 8018430:	2300      	movs	r3, #0
 8018432:	e1ce      	b.n	80187d2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018440:	4293      	cmp	r3, r2
 8018442:	bf28      	it	cs
 8018444:	4613      	movcs	r3, r2
 8018446:	b29b      	uxth	r3, r3
 8018448:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801844e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8018450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018452:	2b00      	cmp	r3, #0
 8018454:	d10b      	bne.n	801846e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	8b5b      	ldrh	r3, [r3, #26]
 801845a:	f003 0302 	and.w	r3, r3, #2
 801845e:	2b00      	cmp	r3, #0
 8018460:	f000 81aa 	beq.w	80187b8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8018464:	6878      	ldr	r0, [r7, #4]
 8018466:	f000 fdcb 	bl	8019000 <tcp_send_empty_ack>
 801846a:	4603      	mov	r3, r0
 801846c:	e1b1      	b.n	80187d2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801846e:	6879      	ldr	r1, [r7, #4]
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	3304      	adds	r3, #4
 8018474:	461a      	mov	r2, r3
 8018476:	6878      	ldr	r0, [r7, #4]
 8018478:	f7ff f826 	bl	80174c8 <tcp_route>
 801847c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801847e:	697b      	ldr	r3, [r7, #20]
 8018480:	2b00      	cmp	r3, #0
 8018482:	d102      	bne.n	801848a <tcp_output+0x96>
    return ERR_RTE;
 8018484:	f06f 0303 	mvn.w	r3, #3
 8018488:	e1a3      	b.n	80187d2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	2b00      	cmp	r3, #0
 801848e:	d003      	beq.n	8018498 <tcp_output+0xa4>
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d111      	bne.n	80184bc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8018498:	697b      	ldr	r3, [r7, #20]
 801849a:	2b00      	cmp	r3, #0
 801849c:	d002      	beq.n	80184a4 <tcp_output+0xb0>
 801849e:	697b      	ldr	r3, [r7, #20]
 80184a0:	3304      	adds	r3, #4
 80184a2:	e000      	b.n	80184a6 <tcp_output+0xb2>
 80184a4:	2300      	movs	r3, #0
 80184a6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80184a8:	693b      	ldr	r3, [r7, #16]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d102      	bne.n	80184b4 <tcp_output+0xc0>
      return ERR_RTE;
 80184ae:	f06f 0303 	mvn.w	r3, #3
 80184b2:	e18e      	b.n	80187d2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80184b4:	693b      	ldr	r3, [r7, #16]
 80184b6:	681a      	ldr	r2, [r3, #0]
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80184bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184be:	68db      	ldr	r3, [r3, #12]
 80184c0:	685b      	ldr	r3, [r3, #4]
 80184c2:	4618      	mov	r0, r3
 80184c4:	f7f9 f818 	bl	80114f8 <lwip_htonl>
 80184c8:	4602      	mov	r2, r0
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80184ce:	1ad3      	subs	r3, r2, r3
 80184d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80184d2:	8912      	ldrh	r2, [r2, #8]
 80184d4:	4413      	add	r3, r2
 80184d6:	69ba      	ldr	r2, [r7, #24]
 80184d8:	429a      	cmp	r2, r3
 80184da:	d227      	bcs.n	801852c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80184e2:	461a      	mov	r2, r3
 80184e4:	69bb      	ldr	r3, [r7, #24]
 80184e6:	4293      	cmp	r3, r2
 80184e8:	d114      	bne.n	8018514 <tcp_output+0x120>
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d110      	bne.n	8018514 <tcp_output+0x120>
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d10b      	bne.n	8018514 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	2200      	movs	r2, #0
 8018500:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	2201      	movs	r2, #1
 8018508:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	2200      	movs	r2, #0
 8018510:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	8b5b      	ldrh	r3, [r3, #26]
 8018518:	f003 0302 	and.w	r3, r3, #2
 801851c:	2b00      	cmp	r3, #0
 801851e:	f000 814d 	beq.w	80187bc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8018522:	6878      	ldr	r0, [r7, #4]
 8018524:	f000 fd6c 	bl	8019000 <tcp_send_empty_ack>
 8018528:	4603      	mov	r3, r0
 801852a:	e152      	b.n	80187d2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	2200      	movs	r2, #0
 8018530:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018538:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801853a:	6a3b      	ldr	r3, [r7, #32]
 801853c:	2b00      	cmp	r3, #0
 801853e:	f000 811c 	beq.w	801877a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8018542:	e002      	b.n	801854a <tcp_output+0x156>
 8018544:	6a3b      	ldr	r3, [r7, #32]
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	623b      	str	r3, [r7, #32]
 801854a:	6a3b      	ldr	r3, [r7, #32]
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	2b00      	cmp	r3, #0
 8018550:	d1f8      	bne.n	8018544 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8018552:	e112      	b.n	801877a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8018554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018556:	68db      	ldr	r3, [r3, #12]
 8018558:	899b      	ldrh	r3, [r3, #12]
 801855a:	b29b      	uxth	r3, r3
 801855c:	4618      	mov	r0, r3
 801855e:	f7f8 ffb5 	bl	80114cc <lwip_htons>
 8018562:	4603      	mov	r3, r0
 8018564:	b2db      	uxtb	r3, r3
 8018566:	f003 0304 	and.w	r3, r3, #4
 801856a:	2b00      	cmp	r3, #0
 801856c:	d006      	beq.n	801857c <tcp_output+0x188>
 801856e:	4b2f      	ldr	r3, [pc, #188]	@ (801862c <tcp_output+0x238>)
 8018570:	f240 5236 	movw	r2, #1334	@ 0x536
 8018574:	4932      	ldr	r1, [pc, #200]	@ (8018640 <tcp_output+0x24c>)
 8018576:	482f      	ldr	r0, [pc, #188]	@ (8018634 <tcp_output+0x240>)
 8018578:	f004 ff28 	bl	801d3cc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018580:	2b00      	cmp	r3, #0
 8018582:	d01f      	beq.n	80185c4 <tcp_output+0x1d0>
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	8b5b      	ldrh	r3, [r3, #26]
 8018588:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801858c:	2b00      	cmp	r3, #0
 801858e:	d119      	bne.n	80185c4 <tcp_output+0x1d0>
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018594:	2b00      	cmp	r3, #0
 8018596:	d00b      	beq.n	80185b0 <tcp_output+0x1bc>
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d110      	bne.n	80185c4 <tcp_output+0x1d0>
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80185a6:	891a      	ldrh	r2, [r3, #8]
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80185ac:	429a      	cmp	r2, r3
 80185ae:	d209      	bcs.n	80185c4 <tcp_output+0x1d0>
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d004      	beq.n	80185c4 <tcp_output+0x1d0>
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80185c0:	2b08      	cmp	r3, #8
 80185c2:	d901      	bls.n	80185c8 <tcp_output+0x1d4>
 80185c4:	2301      	movs	r3, #1
 80185c6:	e000      	b.n	80185ca <tcp_output+0x1d6>
 80185c8:	2300      	movs	r3, #0
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d106      	bne.n	80185dc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	8b5b      	ldrh	r3, [r3, #26]
 80185d2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	f000 80e4 	beq.w	80187a4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	7d1b      	ldrb	r3, [r3, #20]
 80185e0:	2b02      	cmp	r3, #2
 80185e2:	d00d      	beq.n	8018600 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80185e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185e6:	68db      	ldr	r3, [r3, #12]
 80185e8:	899b      	ldrh	r3, [r3, #12]
 80185ea:	b29c      	uxth	r4, r3
 80185ec:	2010      	movs	r0, #16
 80185ee:	f7f8 ff6d 	bl	80114cc <lwip_htons>
 80185f2:	4603      	mov	r3, r0
 80185f4:	461a      	mov	r2, r3
 80185f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185f8:	68db      	ldr	r3, [r3, #12]
 80185fa:	4322      	orrs	r2, r4
 80185fc:	b292      	uxth	r2, r2
 80185fe:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8018600:	697a      	ldr	r2, [r7, #20]
 8018602:	6879      	ldr	r1, [r7, #4]
 8018604:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018606:	f000 f909 	bl	801881c <tcp_output_segment>
 801860a:	4603      	mov	r3, r0
 801860c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801860e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018612:	2b00      	cmp	r3, #0
 8018614:	d016      	beq.n	8018644 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	8b5b      	ldrh	r3, [r3, #26]
 801861a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801861e:	b29a      	uxth	r2, r3
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	835a      	strh	r2, [r3, #26]
      return err;
 8018624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018628:	e0d3      	b.n	80187d2 <tcp_output+0x3de>
 801862a:	bf00      	nop
 801862c:	08020904 	.word	0x08020904
 8018630:	08020e48 	.word	0x08020e48
 8018634:	08020958 	.word	0x08020958
 8018638:	08020e60 	.word	0x08020e60
 801863c:	2000e4a8 	.word	0x2000e4a8
 8018640:	08020e88 	.word	0x08020e88
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8018644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018646:	681a      	ldr	r2, [r3, #0]
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	7d1b      	ldrb	r3, [r3, #20]
 8018650:	2b02      	cmp	r3, #2
 8018652:	d006      	beq.n	8018662 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	8b5b      	ldrh	r3, [r3, #26]
 8018658:	f023 0303 	bic.w	r3, r3, #3
 801865c:	b29a      	uxth	r2, r3
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018664:	68db      	ldr	r3, [r3, #12]
 8018666:	685b      	ldr	r3, [r3, #4]
 8018668:	4618      	mov	r0, r3
 801866a:	f7f8 ff45 	bl	80114f8 <lwip_htonl>
 801866e:	4604      	mov	r4, r0
 8018670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018672:	891b      	ldrh	r3, [r3, #8]
 8018674:	461d      	mov	r5, r3
 8018676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018678:	68db      	ldr	r3, [r3, #12]
 801867a:	899b      	ldrh	r3, [r3, #12]
 801867c:	b29b      	uxth	r3, r3
 801867e:	4618      	mov	r0, r3
 8018680:	f7f8 ff24 	bl	80114cc <lwip_htons>
 8018684:	4603      	mov	r3, r0
 8018686:	b2db      	uxtb	r3, r3
 8018688:	f003 0303 	and.w	r3, r3, #3
 801868c:	2b00      	cmp	r3, #0
 801868e:	d001      	beq.n	8018694 <tcp_output+0x2a0>
 8018690:	2301      	movs	r3, #1
 8018692:	e000      	b.n	8018696 <tcp_output+0x2a2>
 8018694:	2300      	movs	r3, #0
 8018696:	442b      	add	r3, r5
 8018698:	4423      	add	r3, r4
 801869a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80186a0:	68bb      	ldr	r3, [r7, #8]
 80186a2:	1ad3      	subs	r3, r2, r3
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	da02      	bge.n	80186ae <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	68ba      	ldr	r2, [r7, #8]
 80186ac:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80186ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186b0:	891b      	ldrh	r3, [r3, #8]
 80186b2:	461c      	mov	r4, r3
 80186b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186b6:	68db      	ldr	r3, [r3, #12]
 80186b8:	899b      	ldrh	r3, [r3, #12]
 80186ba:	b29b      	uxth	r3, r3
 80186bc:	4618      	mov	r0, r3
 80186be:	f7f8 ff05 	bl	80114cc <lwip_htons>
 80186c2:	4603      	mov	r3, r0
 80186c4:	b2db      	uxtb	r3, r3
 80186c6:	f003 0303 	and.w	r3, r3, #3
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d001      	beq.n	80186d2 <tcp_output+0x2de>
 80186ce:	2301      	movs	r3, #1
 80186d0:	e000      	b.n	80186d4 <tcp_output+0x2e0>
 80186d2:	2300      	movs	r3, #0
 80186d4:	4423      	add	r3, r4
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d049      	beq.n	801876e <tcp_output+0x37a>
      seg->next = NULL;
 80186da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186dc:	2200      	movs	r2, #0
 80186de:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d105      	bne.n	80186f4 <tcp_output+0x300>
        pcb->unacked = seg;
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80186ec:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80186ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186f0:	623b      	str	r3, [r7, #32]
 80186f2:	e03f      	b.n	8018774 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80186f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186f6:	68db      	ldr	r3, [r3, #12]
 80186f8:	685b      	ldr	r3, [r3, #4]
 80186fa:	4618      	mov	r0, r3
 80186fc:	f7f8 fefc 	bl	80114f8 <lwip_htonl>
 8018700:	4604      	mov	r4, r0
 8018702:	6a3b      	ldr	r3, [r7, #32]
 8018704:	68db      	ldr	r3, [r3, #12]
 8018706:	685b      	ldr	r3, [r3, #4]
 8018708:	4618      	mov	r0, r3
 801870a:	f7f8 fef5 	bl	80114f8 <lwip_htonl>
 801870e:	4603      	mov	r3, r0
 8018710:	1ae3      	subs	r3, r4, r3
 8018712:	2b00      	cmp	r3, #0
 8018714:	da24      	bge.n	8018760 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	3370      	adds	r3, #112	@ 0x70
 801871a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801871c:	e002      	b.n	8018724 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801871e:	69fb      	ldr	r3, [r7, #28]
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018724:	69fb      	ldr	r3, [r7, #28]
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	2b00      	cmp	r3, #0
 801872a:	d011      	beq.n	8018750 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801872c:	69fb      	ldr	r3, [r7, #28]
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	68db      	ldr	r3, [r3, #12]
 8018732:	685b      	ldr	r3, [r3, #4]
 8018734:	4618      	mov	r0, r3
 8018736:	f7f8 fedf 	bl	80114f8 <lwip_htonl>
 801873a:	4604      	mov	r4, r0
 801873c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801873e:	68db      	ldr	r3, [r3, #12]
 8018740:	685b      	ldr	r3, [r3, #4]
 8018742:	4618      	mov	r0, r3
 8018744:	f7f8 fed8 	bl	80114f8 <lwip_htonl>
 8018748:	4603      	mov	r3, r0
 801874a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801874c:	2b00      	cmp	r3, #0
 801874e:	dbe6      	blt.n	801871e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8018750:	69fb      	ldr	r3, [r7, #28]
 8018752:	681a      	ldr	r2, [r3, #0]
 8018754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018756:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8018758:	69fb      	ldr	r3, [r7, #28]
 801875a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801875c:	601a      	str	r2, [r3, #0]
 801875e:	e009      	b.n	8018774 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018760:	6a3b      	ldr	r3, [r7, #32]
 8018762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018764:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8018766:	6a3b      	ldr	r3, [r7, #32]
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	623b      	str	r3, [r7, #32]
 801876c:	e002      	b.n	8018774 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801876e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018770:	f7fb ff1f 	bl	80145b2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018778:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801877a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801877c:	2b00      	cmp	r3, #0
 801877e:	d012      	beq.n	80187a6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018782:	68db      	ldr	r3, [r3, #12]
 8018784:	685b      	ldr	r3, [r3, #4]
 8018786:	4618      	mov	r0, r3
 8018788:	f7f8 feb6 	bl	80114f8 <lwip_htonl>
 801878c:	4602      	mov	r2, r0
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018792:	1ad3      	subs	r3, r2, r3
 8018794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018796:	8912      	ldrh	r2, [r2, #8]
 8018798:	4413      	add	r3, r2
  while (seg != NULL &&
 801879a:	69ba      	ldr	r2, [r7, #24]
 801879c:	429a      	cmp	r2, r3
 801879e:	f4bf aed9 	bcs.w	8018554 <tcp_output+0x160>
 80187a2:	e000      	b.n	80187a6 <tcp_output+0x3b2>
      break;
 80187a4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d108      	bne.n	80187c0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	2200      	movs	r2, #0
 80187b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80187b6:	e004      	b.n	80187c2 <tcp_output+0x3ce>
    goto output_done;
 80187b8:	bf00      	nop
 80187ba:	e002      	b.n	80187c2 <tcp_output+0x3ce>
    goto output_done;
 80187bc:	bf00      	nop
 80187be:	e000      	b.n	80187c2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80187c0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	8b5b      	ldrh	r3, [r3, #26]
 80187c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80187ca:	b29a      	uxth	r2, r3
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80187d0:	2300      	movs	r3, #0
}
 80187d2:	4618      	mov	r0, r3
 80187d4:	3728      	adds	r7, #40	@ 0x28
 80187d6:	46bd      	mov	sp, r7
 80187d8:	bdb0      	pop	{r4, r5, r7, pc}
 80187da:	bf00      	nop

080187dc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80187dc:	b580      	push	{r7, lr}
 80187de:	b082      	sub	sp, #8
 80187e0:	af00      	add	r7, sp, #0
 80187e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d106      	bne.n	80187f8 <tcp_output_segment_busy+0x1c>
 80187ea:	4b09      	ldr	r3, [pc, #36]	@ (8018810 <tcp_output_segment_busy+0x34>)
 80187ec:	f240 529a 	movw	r2, #1434	@ 0x59a
 80187f0:	4908      	ldr	r1, [pc, #32]	@ (8018814 <tcp_output_segment_busy+0x38>)
 80187f2:	4809      	ldr	r0, [pc, #36]	@ (8018818 <tcp_output_segment_busy+0x3c>)
 80187f4:	f004 fdea 	bl	801d3cc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	685b      	ldr	r3, [r3, #4]
 80187fc:	7b9b      	ldrb	r3, [r3, #14]
 80187fe:	2b01      	cmp	r3, #1
 8018800:	d001      	beq.n	8018806 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8018802:	2301      	movs	r3, #1
 8018804:	e000      	b.n	8018808 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8018806:	2300      	movs	r3, #0
}
 8018808:	4618      	mov	r0, r3
 801880a:	3708      	adds	r7, #8
 801880c:	46bd      	mov	sp, r7
 801880e:	bd80      	pop	{r7, pc}
 8018810:	08020904 	.word	0x08020904
 8018814:	08020ea0 	.word	0x08020ea0
 8018818:	08020958 	.word	0x08020958

0801881c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801881c:	b5b0      	push	{r4, r5, r7, lr}
 801881e:	b08c      	sub	sp, #48	@ 0x30
 8018820:	af04      	add	r7, sp, #16
 8018822:	60f8      	str	r0, [r7, #12]
 8018824:	60b9      	str	r1, [r7, #8]
 8018826:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	2b00      	cmp	r3, #0
 801882c:	d106      	bne.n	801883c <tcp_output_segment+0x20>
 801882e:	4b64      	ldr	r3, [pc, #400]	@ (80189c0 <tcp_output_segment+0x1a4>)
 8018830:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8018834:	4963      	ldr	r1, [pc, #396]	@ (80189c4 <tcp_output_segment+0x1a8>)
 8018836:	4864      	ldr	r0, [pc, #400]	@ (80189c8 <tcp_output_segment+0x1ac>)
 8018838:	f004 fdc8 	bl	801d3cc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801883c:	68bb      	ldr	r3, [r7, #8]
 801883e:	2b00      	cmp	r3, #0
 8018840:	d106      	bne.n	8018850 <tcp_output_segment+0x34>
 8018842:	4b5f      	ldr	r3, [pc, #380]	@ (80189c0 <tcp_output_segment+0x1a4>)
 8018844:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8018848:	4960      	ldr	r1, [pc, #384]	@ (80189cc <tcp_output_segment+0x1b0>)
 801884a:	485f      	ldr	r0, [pc, #380]	@ (80189c8 <tcp_output_segment+0x1ac>)
 801884c:	f004 fdbe 	bl	801d3cc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	2b00      	cmp	r3, #0
 8018854:	d106      	bne.n	8018864 <tcp_output_segment+0x48>
 8018856:	4b5a      	ldr	r3, [pc, #360]	@ (80189c0 <tcp_output_segment+0x1a4>)
 8018858:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801885c:	495c      	ldr	r1, [pc, #368]	@ (80189d0 <tcp_output_segment+0x1b4>)
 801885e:	485a      	ldr	r0, [pc, #360]	@ (80189c8 <tcp_output_segment+0x1ac>)
 8018860:	f004 fdb4 	bl	801d3cc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8018864:	68f8      	ldr	r0, [r7, #12]
 8018866:	f7ff ffb9 	bl	80187dc <tcp_output_segment_busy>
 801886a:	4603      	mov	r3, r0
 801886c:	2b00      	cmp	r3, #0
 801886e:	d001      	beq.n	8018874 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8018870:	2300      	movs	r3, #0
 8018872:	e0a1      	b.n	80189b8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018874:	68bb      	ldr	r3, [r7, #8]
 8018876:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018878:	68fb      	ldr	r3, [r7, #12]
 801887a:	68dc      	ldr	r4, [r3, #12]
 801887c:	4610      	mov	r0, r2
 801887e:	f7f8 fe3b 	bl	80114f8 <lwip_htonl>
 8018882:	4603      	mov	r3, r0
 8018884:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018886:	68bb      	ldr	r3, [r7, #8]
 8018888:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801888a:	68fb      	ldr	r3, [r7, #12]
 801888c:	68dc      	ldr	r4, [r3, #12]
 801888e:	4610      	mov	r0, r2
 8018890:	f7f8 fe1c 	bl	80114cc <lwip_htons>
 8018894:	4603      	mov	r3, r0
 8018896:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018898:	68bb      	ldr	r3, [r7, #8]
 801889a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801889c:	68ba      	ldr	r2, [r7, #8]
 801889e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80188a0:	441a      	add	r2, r3
 80188a2:	68bb      	ldr	r3, [r7, #8]
 80188a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	68db      	ldr	r3, [r3, #12]
 80188aa:	3314      	adds	r3, #20
 80188ac:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	7a9b      	ldrb	r3, [r3, #10]
 80188b2:	f003 0301 	and.w	r3, r3, #1
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d015      	beq.n	80188e6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80188ba:	68bb      	ldr	r3, [r7, #8]
 80188bc:	3304      	adds	r3, #4
 80188be:	461a      	mov	r2, r3
 80188c0:	6879      	ldr	r1, [r7, #4]
 80188c2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80188c6:	f7fc fa39 	bl	8014d3c <tcp_eff_send_mss_netif>
 80188ca:	4603      	mov	r3, r0
 80188cc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80188ce:	8b7b      	ldrh	r3, [r7, #26]
 80188d0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80188d4:	4618      	mov	r0, r3
 80188d6:	f7f8 fe0f 	bl	80114f8 <lwip_htonl>
 80188da:	4602      	mov	r2, r0
 80188dc:	69fb      	ldr	r3, [r7, #28]
 80188de:	601a      	str	r2, [r3, #0]
    opts += 1;
 80188e0:	69fb      	ldr	r3, [r7, #28]
 80188e2:	3304      	adds	r3, #4
 80188e4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80188e6:	68bb      	ldr	r3, [r7, #8]
 80188e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	da02      	bge.n	80188f6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80188f0:	68bb      	ldr	r3, [r7, #8]
 80188f2:	2200      	movs	r2, #0
 80188f4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80188f6:	68bb      	ldr	r3, [r7, #8]
 80188f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d10c      	bne.n	8018918 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80188fe:	4b35      	ldr	r3, [pc, #212]	@ (80189d4 <tcp_output_segment+0x1b8>)
 8018900:	681a      	ldr	r2, [r3, #0]
 8018902:	68bb      	ldr	r3, [r7, #8]
 8018904:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	68db      	ldr	r3, [r3, #12]
 801890a:	685b      	ldr	r3, [r3, #4]
 801890c:	4618      	mov	r0, r3
 801890e:	f7f8 fdf3 	bl	80114f8 <lwip_htonl>
 8018912:	4602      	mov	r2, r0
 8018914:	68bb      	ldr	r3, [r7, #8]
 8018916:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018918:	68fb      	ldr	r3, [r7, #12]
 801891a:	68da      	ldr	r2, [r3, #12]
 801891c:	68fb      	ldr	r3, [r7, #12]
 801891e:	685b      	ldr	r3, [r3, #4]
 8018920:	685b      	ldr	r3, [r3, #4]
 8018922:	1ad3      	subs	r3, r2, r3
 8018924:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8018926:	68fb      	ldr	r3, [r7, #12]
 8018928:	685b      	ldr	r3, [r3, #4]
 801892a:	8959      	ldrh	r1, [r3, #10]
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	685b      	ldr	r3, [r3, #4]
 8018930:	8b3a      	ldrh	r2, [r7, #24]
 8018932:	1a8a      	subs	r2, r1, r2
 8018934:	b292      	uxth	r2, r2
 8018936:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018938:	68fb      	ldr	r3, [r7, #12]
 801893a:	685b      	ldr	r3, [r3, #4]
 801893c:	8919      	ldrh	r1, [r3, #8]
 801893e:	68fb      	ldr	r3, [r7, #12]
 8018940:	685b      	ldr	r3, [r3, #4]
 8018942:	8b3a      	ldrh	r2, [r7, #24]
 8018944:	1a8a      	subs	r2, r1, r2
 8018946:	b292      	uxth	r2, r2
 8018948:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801894a:	68fb      	ldr	r3, [r7, #12]
 801894c:	685b      	ldr	r3, [r3, #4]
 801894e:	68fa      	ldr	r2, [r7, #12]
 8018950:	68d2      	ldr	r2, [r2, #12]
 8018952:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	68db      	ldr	r3, [r3, #12]
 8018958:	2200      	movs	r2, #0
 801895a:	741a      	strb	r2, [r3, #16]
 801895c:	2200      	movs	r2, #0
 801895e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018960:	68fb      	ldr	r3, [r7, #12]
 8018962:	68da      	ldr	r2, [r3, #12]
 8018964:	68fb      	ldr	r3, [r7, #12]
 8018966:	7a9b      	ldrb	r3, [r3, #10]
 8018968:	f003 0301 	and.w	r3, r3, #1
 801896c:	2b00      	cmp	r3, #0
 801896e:	d001      	beq.n	8018974 <tcp_output_segment+0x158>
 8018970:	2318      	movs	r3, #24
 8018972:	e000      	b.n	8018976 <tcp_output_segment+0x15a>
 8018974:	2314      	movs	r3, #20
 8018976:	4413      	add	r3, r2
 8018978:	69fa      	ldr	r2, [r7, #28]
 801897a:	429a      	cmp	r2, r3
 801897c:	d006      	beq.n	801898c <tcp_output_segment+0x170>
 801897e:	4b10      	ldr	r3, [pc, #64]	@ (80189c0 <tcp_output_segment+0x1a4>)
 8018980:	f240 621c 	movw	r2, #1564	@ 0x61c
 8018984:	4914      	ldr	r1, [pc, #80]	@ (80189d8 <tcp_output_segment+0x1bc>)
 8018986:	4810      	ldr	r0, [pc, #64]	@ (80189c8 <tcp_output_segment+0x1ac>)
 8018988:	f004 fd20 	bl	801d3cc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	6858      	ldr	r0, [r3, #4]
 8018990:	68b9      	ldr	r1, [r7, #8]
 8018992:	68bb      	ldr	r3, [r7, #8]
 8018994:	1d1c      	adds	r4, r3, #4
 8018996:	68bb      	ldr	r3, [r7, #8]
 8018998:	7add      	ldrb	r5, [r3, #11]
 801899a:	68bb      	ldr	r3, [r7, #8]
 801899c:	7a9b      	ldrb	r3, [r3, #10]
 801899e:	687a      	ldr	r2, [r7, #4]
 80189a0:	9202      	str	r2, [sp, #8]
 80189a2:	2206      	movs	r2, #6
 80189a4:	9201      	str	r2, [sp, #4]
 80189a6:	9300      	str	r3, [sp, #0]
 80189a8:	462b      	mov	r3, r5
 80189aa:	4622      	mov	r2, r4
 80189ac:	f002 fbaa 	bl	801b104 <ip4_output_if>
 80189b0:	4603      	mov	r3, r0
 80189b2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80189b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80189b8:	4618      	mov	r0, r3
 80189ba:	3720      	adds	r7, #32
 80189bc:	46bd      	mov	sp, r7
 80189be:	bdb0      	pop	{r4, r5, r7, pc}
 80189c0:	08020904 	.word	0x08020904
 80189c4:	08020ec8 	.word	0x08020ec8
 80189c8:	08020958 	.word	0x08020958
 80189cc:	08020ee8 	.word	0x08020ee8
 80189d0:	08020f08 	.word	0x08020f08
 80189d4:	2000e45c 	.word	0x2000e45c
 80189d8:	08020f2c 	.word	0x08020f2c

080189dc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80189dc:	b5b0      	push	{r4, r5, r7, lr}
 80189de:	b084      	sub	sp, #16
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d106      	bne.n	80189f8 <tcp_rexmit_rto_prepare+0x1c>
 80189ea:	4b31      	ldr	r3, [pc, #196]	@ (8018ab0 <tcp_rexmit_rto_prepare+0xd4>)
 80189ec:	f240 6263 	movw	r2, #1635	@ 0x663
 80189f0:	4930      	ldr	r1, [pc, #192]	@ (8018ab4 <tcp_rexmit_rto_prepare+0xd8>)
 80189f2:	4831      	ldr	r0, [pc, #196]	@ (8018ab8 <tcp_rexmit_rto_prepare+0xdc>)
 80189f4:	f004 fcea 	bl	801d3cc <iprintf>

  if (pcb->unacked == NULL) {
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d102      	bne.n	8018a06 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8018a00:	f06f 0305 	mvn.w	r3, #5
 8018a04:	e050      	b.n	8018aa8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018a0a:	60fb      	str	r3, [r7, #12]
 8018a0c:	e00b      	b.n	8018a26 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8018a0e:	68f8      	ldr	r0, [r7, #12]
 8018a10:	f7ff fee4 	bl	80187dc <tcp_output_segment_busy>
 8018a14:	4603      	mov	r3, r0
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d002      	beq.n	8018a20 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8018a1a:	f06f 0305 	mvn.w	r3, #5
 8018a1e:	e043      	b.n	8018aa8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	60fb      	str	r3, [r7, #12]
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	681b      	ldr	r3, [r3, #0]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d1ef      	bne.n	8018a0e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018a2e:	68f8      	ldr	r0, [r7, #12]
 8018a30:	f7ff fed4 	bl	80187dc <tcp_output_segment_busy>
 8018a34:	4603      	mov	r3, r0
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d002      	beq.n	8018a40 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8018a3a:	f06f 0305 	mvn.w	r3, #5
 8018a3e:	e033      	b.n	8018aa8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	2200      	movs	r2, #0
 8018a54:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	8b5b      	ldrh	r3, [r3, #26]
 8018a5a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8018a5e:	b29a      	uxth	r2, r3
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	68db      	ldr	r3, [r3, #12]
 8018a68:	685b      	ldr	r3, [r3, #4]
 8018a6a:	4618      	mov	r0, r3
 8018a6c:	f7f8 fd44 	bl	80114f8 <lwip_htonl>
 8018a70:	4604      	mov	r4, r0
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	891b      	ldrh	r3, [r3, #8]
 8018a76:	461d      	mov	r5, r3
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	68db      	ldr	r3, [r3, #12]
 8018a7c:	899b      	ldrh	r3, [r3, #12]
 8018a7e:	b29b      	uxth	r3, r3
 8018a80:	4618      	mov	r0, r3
 8018a82:	f7f8 fd23 	bl	80114cc <lwip_htons>
 8018a86:	4603      	mov	r3, r0
 8018a88:	b2db      	uxtb	r3, r3
 8018a8a:	f003 0303 	and.w	r3, r3, #3
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d001      	beq.n	8018a96 <tcp_rexmit_rto_prepare+0xba>
 8018a92:	2301      	movs	r3, #1
 8018a94:	e000      	b.n	8018a98 <tcp_rexmit_rto_prepare+0xbc>
 8018a96:	2300      	movs	r3, #0
 8018a98:	442b      	add	r3, r5
 8018a9a:	18e2      	adds	r2, r4, r3
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	2200      	movs	r2, #0
 8018aa4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8018aa6:	2300      	movs	r3, #0
}
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	3710      	adds	r7, #16
 8018aac:	46bd      	mov	sp, r7
 8018aae:	bdb0      	pop	{r4, r5, r7, pc}
 8018ab0:	08020904 	.word	0x08020904
 8018ab4:	08020f40 	.word	0x08020f40
 8018ab8:	08020958 	.word	0x08020958

08018abc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b082      	sub	sp, #8
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d106      	bne.n	8018ad8 <tcp_rexmit_rto_commit+0x1c>
 8018aca:	4b0d      	ldr	r3, [pc, #52]	@ (8018b00 <tcp_rexmit_rto_commit+0x44>)
 8018acc:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8018ad0:	490c      	ldr	r1, [pc, #48]	@ (8018b04 <tcp_rexmit_rto_commit+0x48>)
 8018ad2:	480d      	ldr	r0, [pc, #52]	@ (8018b08 <tcp_rexmit_rto_commit+0x4c>)
 8018ad4:	f004 fc7a 	bl	801d3cc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018ade:	2bff      	cmp	r3, #255	@ 0xff
 8018ae0:	d007      	beq.n	8018af2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018ae8:	3301      	adds	r3, #1
 8018aea:	b2da      	uxtb	r2, r3
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8018af2:	6878      	ldr	r0, [r7, #4]
 8018af4:	f7ff fc7e 	bl	80183f4 <tcp_output>
}
 8018af8:	bf00      	nop
 8018afa:	3708      	adds	r7, #8
 8018afc:	46bd      	mov	sp, r7
 8018afe:	bd80      	pop	{r7, pc}
 8018b00:	08020904 	.word	0x08020904
 8018b04:	08020f64 	.word	0x08020f64
 8018b08:	08020958 	.word	0x08020958

08018b0c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018b0c:	b580      	push	{r7, lr}
 8018b0e:	b082      	sub	sp, #8
 8018b10:	af00      	add	r7, sp, #0
 8018b12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d106      	bne.n	8018b28 <tcp_rexmit_rto+0x1c>
 8018b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8018b44 <tcp_rexmit_rto+0x38>)
 8018b1c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8018b20:	4909      	ldr	r1, [pc, #36]	@ (8018b48 <tcp_rexmit_rto+0x3c>)
 8018b22:	480a      	ldr	r0, [pc, #40]	@ (8018b4c <tcp_rexmit_rto+0x40>)
 8018b24:	f004 fc52 	bl	801d3cc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8018b28:	6878      	ldr	r0, [r7, #4]
 8018b2a:	f7ff ff57 	bl	80189dc <tcp_rexmit_rto_prepare>
 8018b2e:	4603      	mov	r3, r0
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d102      	bne.n	8018b3a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018b34:	6878      	ldr	r0, [r7, #4]
 8018b36:	f7ff ffc1 	bl	8018abc <tcp_rexmit_rto_commit>
  }
}
 8018b3a:	bf00      	nop
 8018b3c:	3708      	adds	r7, #8
 8018b3e:	46bd      	mov	sp, r7
 8018b40:	bd80      	pop	{r7, pc}
 8018b42:	bf00      	nop
 8018b44:	08020904 	.word	0x08020904
 8018b48:	08020f88 	.word	0x08020f88
 8018b4c:	08020958 	.word	0x08020958

08018b50 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018b50:	b590      	push	{r4, r7, lr}
 8018b52:	b085      	sub	sp, #20
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d106      	bne.n	8018b6c <tcp_rexmit+0x1c>
 8018b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8018c1c <tcp_rexmit+0xcc>)
 8018b60:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8018b64:	492e      	ldr	r1, [pc, #184]	@ (8018c20 <tcp_rexmit+0xd0>)
 8018b66:	482f      	ldr	r0, [pc, #188]	@ (8018c24 <tcp_rexmit+0xd4>)
 8018b68:	f004 fc30 	bl	801d3cc <iprintf>

  if (pcb->unacked == NULL) {
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d102      	bne.n	8018b7a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018b74:	f06f 0305 	mvn.w	r3, #5
 8018b78:	e04c      	b.n	8018c14 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018b7e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018b80:	68b8      	ldr	r0, [r7, #8]
 8018b82:	f7ff fe2b 	bl	80187dc <tcp_output_segment_busy>
 8018b86:	4603      	mov	r3, r0
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d002      	beq.n	8018b92 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018b8c:	f06f 0305 	mvn.w	r3, #5
 8018b90:	e040      	b.n	8018c14 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018b92:	68bb      	ldr	r3, [r7, #8]
 8018b94:	681a      	ldr	r2, [r3, #0]
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	336c      	adds	r3, #108	@ 0x6c
 8018b9e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018ba0:	e002      	b.n	8018ba8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018ba8:	68fb      	ldr	r3, [r7, #12]
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d011      	beq.n	8018bd4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	68db      	ldr	r3, [r3, #12]
 8018bb6:	685b      	ldr	r3, [r3, #4]
 8018bb8:	4618      	mov	r0, r3
 8018bba:	f7f8 fc9d 	bl	80114f8 <lwip_htonl>
 8018bbe:	4604      	mov	r4, r0
 8018bc0:	68bb      	ldr	r3, [r7, #8]
 8018bc2:	68db      	ldr	r3, [r3, #12]
 8018bc4:	685b      	ldr	r3, [r3, #4]
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	f7f8 fc96 	bl	80114f8 <lwip_htonl>
 8018bcc:	4603      	mov	r3, r0
 8018bce:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	dbe6      	blt.n	8018ba2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018bd4:	68fb      	ldr	r3, [r7, #12]
 8018bd6:	681a      	ldr	r2, [r3, #0]
 8018bd8:	68bb      	ldr	r3, [r7, #8]
 8018bda:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018bdc:	68fb      	ldr	r3, [r7, #12]
 8018bde:	68ba      	ldr	r2, [r7, #8]
 8018be0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018be2:	68bb      	ldr	r3, [r7, #8]
 8018be4:	681b      	ldr	r3, [r3, #0]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d103      	bne.n	8018bf2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	2200      	movs	r2, #0
 8018bee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018bf8:	2bff      	cmp	r3, #255	@ 0xff
 8018bfa:	d007      	beq.n	8018c0c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018c02:	3301      	adds	r3, #1
 8018c04:	b2da      	uxtb	r2, r3
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	2200      	movs	r2, #0
 8018c10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018c12:	2300      	movs	r3, #0
}
 8018c14:	4618      	mov	r0, r3
 8018c16:	3714      	adds	r7, #20
 8018c18:	46bd      	mov	sp, r7
 8018c1a:	bd90      	pop	{r4, r7, pc}
 8018c1c:	08020904 	.word	0x08020904
 8018c20:	08020fa4 	.word	0x08020fa4
 8018c24:	08020958 	.word	0x08020958

08018c28 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b082      	sub	sp, #8
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d106      	bne.n	8018c44 <tcp_rexmit_fast+0x1c>
 8018c36:	4b2a      	ldr	r3, [pc, #168]	@ (8018ce0 <tcp_rexmit_fast+0xb8>)
 8018c38:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8018c3c:	4929      	ldr	r1, [pc, #164]	@ (8018ce4 <tcp_rexmit_fast+0xbc>)
 8018c3e:	482a      	ldr	r0, [pc, #168]	@ (8018ce8 <tcp_rexmit_fast+0xc0>)
 8018c40:	f004 fbc4 	bl	801d3cc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d045      	beq.n	8018cd8 <tcp_rexmit_fast+0xb0>
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	8b5b      	ldrh	r3, [r3, #26]
 8018c50:	f003 0304 	and.w	r3, r3, #4
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d13f      	bne.n	8018cd8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8018c58:	6878      	ldr	r0, [r7, #4]
 8018c5a:	f7ff ff79 	bl	8018b50 <tcp_rexmit>
 8018c5e:	4603      	mov	r3, r0
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d139      	bne.n	8018cd8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018c70:	4293      	cmp	r3, r2
 8018c72:	bf28      	it	cs
 8018c74:	4613      	movcs	r3, r2
 8018c76:	b29b      	uxth	r3, r3
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	da00      	bge.n	8018c7e <tcp_rexmit_fast+0x56>
 8018c7c:	3301      	adds	r3, #1
 8018c7e:	105b      	asrs	r3, r3, #1
 8018c80:	b29a      	uxth	r2, r3
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8018c8e:	461a      	mov	r2, r3
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018c94:	005b      	lsls	r3, r3, #1
 8018c96:	429a      	cmp	r2, r3
 8018c98:	d206      	bcs.n	8018ca8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018c9e:	005b      	lsls	r3, r3, #1
 8018ca0:	b29a      	uxth	r2, r3
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018cb2:	4619      	mov	r1, r3
 8018cb4:	0049      	lsls	r1, r1, #1
 8018cb6:	440b      	add	r3, r1
 8018cb8:	b29b      	uxth	r3, r3
 8018cba:	4413      	add	r3, r2
 8018cbc:	b29a      	uxth	r2, r3
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	8b5b      	ldrh	r3, [r3, #26]
 8018cc8:	f043 0304 	orr.w	r3, r3, #4
 8018ccc:	b29a      	uxth	r2, r3
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	2200      	movs	r2, #0
 8018cd6:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8018cd8:	bf00      	nop
 8018cda:	3708      	adds	r7, #8
 8018cdc:	46bd      	mov	sp, r7
 8018cde:	bd80      	pop	{r7, pc}
 8018ce0:	08020904 	.word	0x08020904
 8018ce4:	08020fbc 	.word	0x08020fbc
 8018ce8:	08020958 	.word	0x08020958

08018cec <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8018cec:	b580      	push	{r7, lr}
 8018cee:	b086      	sub	sp, #24
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	60f8      	str	r0, [r7, #12]
 8018cf4:	607b      	str	r3, [r7, #4]
 8018cf6:	460b      	mov	r3, r1
 8018cf8:	817b      	strh	r3, [r7, #10]
 8018cfa:	4613      	mov	r3, r2
 8018cfc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018cfe:	897a      	ldrh	r2, [r7, #10]
 8018d00:	893b      	ldrh	r3, [r7, #8]
 8018d02:	4413      	add	r3, r2
 8018d04:	b29b      	uxth	r3, r3
 8018d06:	3314      	adds	r3, #20
 8018d08:	b29b      	uxth	r3, r3
 8018d0a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018d0e:	4619      	mov	r1, r3
 8018d10:	2022      	movs	r0, #34	@ 0x22
 8018d12:	f7f9 fce5 	bl	80126e0 <pbuf_alloc>
 8018d16:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018d18:	697b      	ldr	r3, [r7, #20]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d04d      	beq.n	8018dba <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018d1e:	897b      	ldrh	r3, [r7, #10]
 8018d20:	3313      	adds	r3, #19
 8018d22:	697a      	ldr	r2, [r7, #20]
 8018d24:	8952      	ldrh	r2, [r2, #10]
 8018d26:	4293      	cmp	r3, r2
 8018d28:	db06      	blt.n	8018d38 <tcp_output_alloc_header_common+0x4c>
 8018d2a:	4b26      	ldr	r3, [pc, #152]	@ (8018dc4 <tcp_output_alloc_header_common+0xd8>)
 8018d2c:	f240 7223 	movw	r2, #1827	@ 0x723
 8018d30:	4925      	ldr	r1, [pc, #148]	@ (8018dc8 <tcp_output_alloc_header_common+0xdc>)
 8018d32:	4826      	ldr	r0, [pc, #152]	@ (8018dcc <tcp_output_alloc_header_common+0xe0>)
 8018d34:	f004 fb4a 	bl	801d3cc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018d38:	697b      	ldr	r3, [r7, #20]
 8018d3a:	685b      	ldr	r3, [r3, #4]
 8018d3c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8018d3e:	8c3b      	ldrh	r3, [r7, #32]
 8018d40:	4618      	mov	r0, r3
 8018d42:	f7f8 fbc3 	bl	80114cc <lwip_htons>
 8018d46:	4603      	mov	r3, r0
 8018d48:	461a      	mov	r2, r3
 8018d4a:	693b      	ldr	r3, [r7, #16]
 8018d4c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8018d4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018d50:	4618      	mov	r0, r3
 8018d52:	f7f8 fbbb 	bl	80114cc <lwip_htons>
 8018d56:	4603      	mov	r3, r0
 8018d58:	461a      	mov	r2, r3
 8018d5a:	693b      	ldr	r3, [r7, #16]
 8018d5c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8018d5e:	693b      	ldr	r3, [r7, #16]
 8018d60:	687a      	ldr	r2, [r7, #4]
 8018d62:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018d64:	68f8      	ldr	r0, [r7, #12]
 8018d66:	f7f8 fbc7 	bl	80114f8 <lwip_htonl>
 8018d6a:	4602      	mov	r2, r0
 8018d6c:	693b      	ldr	r3, [r7, #16]
 8018d6e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018d70:	897b      	ldrh	r3, [r7, #10]
 8018d72:	089b      	lsrs	r3, r3, #2
 8018d74:	b29b      	uxth	r3, r3
 8018d76:	3305      	adds	r3, #5
 8018d78:	b29b      	uxth	r3, r3
 8018d7a:	031b      	lsls	r3, r3, #12
 8018d7c:	b29a      	uxth	r2, r3
 8018d7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018d82:	b29b      	uxth	r3, r3
 8018d84:	4313      	orrs	r3, r2
 8018d86:	b29b      	uxth	r3, r3
 8018d88:	4618      	mov	r0, r3
 8018d8a:	f7f8 fb9f 	bl	80114cc <lwip_htons>
 8018d8e:	4603      	mov	r3, r0
 8018d90:	461a      	mov	r2, r3
 8018d92:	693b      	ldr	r3, [r7, #16]
 8018d94:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8018d96:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8018d98:	4618      	mov	r0, r3
 8018d9a:	f7f8 fb97 	bl	80114cc <lwip_htons>
 8018d9e:	4603      	mov	r3, r0
 8018da0:	461a      	mov	r2, r3
 8018da2:	693b      	ldr	r3, [r7, #16]
 8018da4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018da6:	693b      	ldr	r3, [r7, #16]
 8018da8:	2200      	movs	r2, #0
 8018daa:	741a      	strb	r2, [r3, #16]
 8018dac:	2200      	movs	r2, #0
 8018dae:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018db0:	693b      	ldr	r3, [r7, #16]
 8018db2:	2200      	movs	r2, #0
 8018db4:	749a      	strb	r2, [r3, #18]
 8018db6:	2200      	movs	r2, #0
 8018db8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8018dba:	697b      	ldr	r3, [r7, #20]
}
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	3718      	adds	r7, #24
 8018dc0:	46bd      	mov	sp, r7
 8018dc2:	bd80      	pop	{r7, pc}
 8018dc4:	08020904 	.word	0x08020904
 8018dc8:	08020fdc 	.word	0x08020fdc
 8018dcc:	08020958 	.word	0x08020958

08018dd0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018dd0:	b5b0      	push	{r4, r5, r7, lr}
 8018dd2:	b08a      	sub	sp, #40	@ 0x28
 8018dd4:	af04      	add	r7, sp, #16
 8018dd6:	60f8      	str	r0, [r7, #12]
 8018dd8:	607b      	str	r3, [r7, #4]
 8018dda:	460b      	mov	r3, r1
 8018ddc:	817b      	strh	r3, [r7, #10]
 8018dde:	4613      	mov	r3, r2
 8018de0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018de2:	68fb      	ldr	r3, [r7, #12]
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d106      	bne.n	8018df6 <tcp_output_alloc_header+0x26>
 8018de8:	4b15      	ldr	r3, [pc, #84]	@ (8018e40 <tcp_output_alloc_header+0x70>)
 8018dea:	f240 7242 	movw	r2, #1858	@ 0x742
 8018dee:	4915      	ldr	r1, [pc, #84]	@ (8018e44 <tcp_output_alloc_header+0x74>)
 8018df0:	4815      	ldr	r0, [pc, #84]	@ (8018e48 <tcp_output_alloc_header+0x78>)
 8018df2:	f004 faeb 	bl	801d3cc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018df6:	68fb      	ldr	r3, [r7, #12]
 8018df8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8018dfa:	68fb      	ldr	r3, [r7, #12]
 8018dfc:	8adb      	ldrh	r3, [r3, #22]
 8018dfe:	68fa      	ldr	r2, [r7, #12]
 8018e00:	8b12      	ldrh	r2, [r2, #24]
 8018e02:	68f9      	ldr	r1, [r7, #12]
 8018e04:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8018e06:	893d      	ldrh	r5, [r7, #8]
 8018e08:	897c      	ldrh	r4, [r7, #10]
 8018e0a:	9103      	str	r1, [sp, #12]
 8018e0c:	2110      	movs	r1, #16
 8018e0e:	9102      	str	r1, [sp, #8]
 8018e10:	9201      	str	r2, [sp, #4]
 8018e12:	9300      	str	r3, [sp, #0]
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	462a      	mov	r2, r5
 8018e18:	4621      	mov	r1, r4
 8018e1a:	f7ff ff67 	bl	8018cec <tcp_output_alloc_header_common>
 8018e1e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018e20:	697b      	ldr	r3, [r7, #20]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d006      	beq.n	8018e34 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e2a:	68fa      	ldr	r2, [r7, #12]
 8018e2c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8018e2e:	441a      	add	r2, r3
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8018e34:	697b      	ldr	r3, [r7, #20]
}
 8018e36:	4618      	mov	r0, r3
 8018e38:	3718      	adds	r7, #24
 8018e3a:	46bd      	mov	sp, r7
 8018e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8018e3e:	bf00      	nop
 8018e40:	08020904 	.word	0x08020904
 8018e44:	0802100c 	.word	0x0802100c
 8018e48:	08020958 	.word	0x08020958

08018e4c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b088      	sub	sp, #32
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	60f8      	str	r0, [r7, #12]
 8018e54:	60b9      	str	r1, [r7, #8]
 8018e56:	4611      	mov	r1, r2
 8018e58:	461a      	mov	r2, r3
 8018e5a:	460b      	mov	r3, r1
 8018e5c:	71fb      	strb	r3, [r7, #7]
 8018e5e:	4613      	mov	r3, r2
 8018e60:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018e62:	2300      	movs	r3, #0
 8018e64:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8018e66:	68bb      	ldr	r3, [r7, #8]
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d106      	bne.n	8018e7a <tcp_output_fill_options+0x2e>
 8018e6c:	4b12      	ldr	r3, [pc, #72]	@ (8018eb8 <tcp_output_fill_options+0x6c>)
 8018e6e:	f240 7256 	movw	r2, #1878	@ 0x756
 8018e72:	4912      	ldr	r1, [pc, #72]	@ (8018ebc <tcp_output_fill_options+0x70>)
 8018e74:	4812      	ldr	r0, [pc, #72]	@ (8018ec0 <tcp_output_fill_options+0x74>)
 8018e76:	f004 faa9 	bl	801d3cc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8018e7a:	68bb      	ldr	r3, [r7, #8]
 8018e7c:	685b      	ldr	r3, [r3, #4]
 8018e7e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018e80:	69bb      	ldr	r3, [r7, #24]
 8018e82:	3314      	adds	r3, #20
 8018e84:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8018e86:	8bfb      	ldrh	r3, [r7, #30]
 8018e88:	009b      	lsls	r3, r3, #2
 8018e8a:	461a      	mov	r2, r3
 8018e8c:	79fb      	ldrb	r3, [r7, #7]
 8018e8e:	009b      	lsls	r3, r3, #2
 8018e90:	f003 0304 	and.w	r3, r3, #4
 8018e94:	4413      	add	r3, r2
 8018e96:	3314      	adds	r3, #20
 8018e98:	69ba      	ldr	r2, [r7, #24]
 8018e9a:	4413      	add	r3, r2
 8018e9c:	697a      	ldr	r2, [r7, #20]
 8018e9e:	429a      	cmp	r2, r3
 8018ea0:	d006      	beq.n	8018eb0 <tcp_output_fill_options+0x64>
 8018ea2:	4b05      	ldr	r3, [pc, #20]	@ (8018eb8 <tcp_output_fill_options+0x6c>)
 8018ea4:	f240 7275 	movw	r2, #1909	@ 0x775
 8018ea8:	4906      	ldr	r1, [pc, #24]	@ (8018ec4 <tcp_output_fill_options+0x78>)
 8018eaa:	4805      	ldr	r0, [pc, #20]	@ (8018ec0 <tcp_output_fill_options+0x74>)
 8018eac:	f004 fa8e 	bl	801d3cc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018eb0:	bf00      	nop
 8018eb2:	3720      	adds	r7, #32
 8018eb4:	46bd      	mov	sp, r7
 8018eb6:	bd80      	pop	{r7, pc}
 8018eb8:	08020904 	.word	0x08020904
 8018ebc:	08021034 	.word	0x08021034
 8018ec0:	08020958 	.word	0x08020958
 8018ec4:	08020f2c 	.word	0x08020f2c

08018ec8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	b08a      	sub	sp, #40	@ 0x28
 8018ecc:	af04      	add	r7, sp, #16
 8018ece:	60f8      	str	r0, [r7, #12]
 8018ed0:	60b9      	str	r1, [r7, #8]
 8018ed2:	607a      	str	r2, [r7, #4]
 8018ed4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8018ed6:	68bb      	ldr	r3, [r7, #8]
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d106      	bne.n	8018eea <tcp_output_control_segment+0x22>
 8018edc:	4b1c      	ldr	r3, [pc, #112]	@ (8018f50 <tcp_output_control_segment+0x88>)
 8018ede:	f240 7287 	movw	r2, #1927	@ 0x787
 8018ee2:	491c      	ldr	r1, [pc, #112]	@ (8018f54 <tcp_output_control_segment+0x8c>)
 8018ee4:	481c      	ldr	r0, [pc, #112]	@ (8018f58 <tcp_output_control_segment+0x90>)
 8018ee6:	f004 fa71 	bl	801d3cc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8018eea:	683a      	ldr	r2, [r7, #0]
 8018eec:	6879      	ldr	r1, [r7, #4]
 8018eee:	68f8      	ldr	r0, [r7, #12]
 8018ef0:	f7fe faea 	bl	80174c8 <tcp_route>
 8018ef4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8018ef6:	693b      	ldr	r3, [r7, #16]
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d102      	bne.n	8018f02 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8018efc:	23fc      	movs	r3, #252	@ 0xfc
 8018efe:	75fb      	strb	r3, [r7, #23]
 8018f00:	e01c      	b.n	8018f3c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d006      	beq.n	8018f16 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	7adb      	ldrb	r3, [r3, #11]
 8018f0c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8018f0e:	68fb      	ldr	r3, [r7, #12]
 8018f10:	7a9b      	ldrb	r3, [r3, #10]
 8018f12:	757b      	strb	r3, [r7, #21]
 8018f14:	e003      	b.n	8018f1e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8018f16:	23ff      	movs	r3, #255	@ 0xff
 8018f18:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8018f1a:	2300      	movs	r3, #0
 8018f1c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8018f1e:	7dba      	ldrb	r2, [r7, #22]
 8018f20:	693b      	ldr	r3, [r7, #16]
 8018f22:	9302      	str	r3, [sp, #8]
 8018f24:	2306      	movs	r3, #6
 8018f26:	9301      	str	r3, [sp, #4]
 8018f28:	7d7b      	ldrb	r3, [r7, #21]
 8018f2a:	9300      	str	r3, [sp, #0]
 8018f2c:	4613      	mov	r3, r2
 8018f2e:	683a      	ldr	r2, [r7, #0]
 8018f30:	6879      	ldr	r1, [r7, #4]
 8018f32:	68b8      	ldr	r0, [r7, #8]
 8018f34:	f002 f8e6 	bl	801b104 <ip4_output_if>
 8018f38:	4603      	mov	r3, r0
 8018f3a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8018f3c:	68b8      	ldr	r0, [r7, #8]
 8018f3e:	f7f9 feb3 	bl	8012ca8 <pbuf_free>
  return err;
 8018f42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018f46:	4618      	mov	r0, r3
 8018f48:	3718      	adds	r7, #24
 8018f4a:	46bd      	mov	sp, r7
 8018f4c:	bd80      	pop	{r7, pc}
 8018f4e:	bf00      	nop
 8018f50:	08020904 	.word	0x08020904
 8018f54:	0802105c 	.word	0x0802105c
 8018f58:	08020958 	.word	0x08020958

08018f5c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8018f5c:	b590      	push	{r4, r7, lr}
 8018f5e:	b08b      	sub	sp, #44	@ 0x2c
 8018f60:	af04      	add	r7, sp, #16
 8018f62:	60f8      	str	r0, [r7, #12]
 8018f64:	60b9      	str	r1, [r7, #8]
 8018f66:	607a      	str	r2, [r7, #4]
 8018f68:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8018f6a:	683b      	ldr	r3, [r7, #0]
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d106      	bne.n	8018f7e <tcp_rst+0x22>
 8018f70:	4b1f      	ldr	r3, [pc, #124]	@ (8018ff0 <tcp_rst+0x94>)
 8018f72:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8018f76:	491f      	ldr	r1, [pc, #124]	@ (8018ff4 <tcp_rst+0x98>)
 8018f78:	481f      	ldr	r0, [pc, #124]	@ (8018ff8 <tcp_rst+0x9c>)
 8018f7a:	f004 fa27 	bl	801d3cc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8018f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d106      	bne.n	8018f92 <tcp_rst+0x36>
 8018f84:	4b1a      	ldr	r3, [pc, #104]	@ (8018ff0 <tcp_rst+0x94>)
 8018f86:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8018f8a:	491c      	ldr	r1, [pc, #112]	@ (8018ffc <tcp_rst+0xa0>)
 8018f8c:	481a      	ldr	r0, [pc, #104]	@ (8018ff8 <tcp_rst+0x9c>)
 8018f8e:	f004 fa1d 	bl	801d3cc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018f92:	2300      	movs	r3, #0
 8018f94:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8018f96:	f246 0308 	movw	r3, #24584	@ 0x6008
 8018f9a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8018f9c:	7dfb      	ldrb	r3, [r7, #23]
 8018f9e:	b29c      	uxth	r4, r3
 8018fa0:	68b8      	ldr	r0, [r7, #8]
 8018fa2:	f7f8 faa9 	bl	80114f8 <lwip_htonl>
 8018fa6:	4602      	mov	r2, r0
 8018fa8:	8abb      	ldrh	r3, [r7, #20]
 8018faa:	9303      	str	r3, [sp, #12]
 8018fac:	2314      	movs	r3, #20
 8018fae:	9302      	str	r3, [sp, #8]
 8018fb0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8018fb2:	9301      	str	r3, [sp, #4]
 8018fb4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8018fb6:	9300      	str	r3, [sp, #0]
 8018fb8:	4613      	mov	r3, r2
 8018fba:	2200      	movs	r2, #0
 8018fbc:	4621      	mov	r1, r4
 8018fbe:	6878      	ldr	r0, [r7, #4]
 8018fc0:	f7ff fe94 	bl	8018cec <tcp_output_alloc_header_common>
 8018fc4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8018fc6:	693b      	ldr	r3, [r7, #16]
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d00c      	beq.n	8018fe6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018fcc:	7dfb      	ldrb	r3, [r7, #23]
 8018fce:	2200      	movs	r2, #0
 8018fd0:	6939      	ldr	r1, [r7, #16]
 8018fd2:	68f8      	ldr	r0, [r7, #12]
 8018fd4:	f7ff ff3a 	bl	8018e4c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8018fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018fda:	683a      	ldr	r2, [r7, #0]
 8018fdc:	6939      	ldr	r1, [r7, #16]
 8018fde:	68f8      	ldr	r0, [r7, #12]
 8018fe0:	f7ff ff72 	bl	8018ec8 <tcp_output_control_segment>
 8018fe4:	e000      	b.n	8018fe8 <tcp_rst+0x8c>
    return;
 8018fe6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8018fe8:	371c      	adds	r7, #28
 8018fea:	46bd      	mov	sp, r7
 8018fec:	bd90      	pop	{r4, r7, pc}
 8018fee:	bf00      	nop
 8018ff0:	08020904 	.word	0x08020904
 8018ff4:	08021088 	.word	0x08021088
 8018ff8:	08020958 	.word	0x08020958
 8018ffc:	080210a4 	.word	0x080210a4

08019000 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8019000:	b590      	push	{r4, r7, lr}
 8019002:	b087      	sub	sp, #28
 8019004:	af00      	add	r7, sp, #0
 8019006:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8019008:	2300      	movs	r3, #0
 801900a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801900c:	2300      	movs	r3, #0
 801900e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	2b00      	cmp	r3, #0
 8019014:	d106      	bne.n	8019024 <tcp_send_empty_ack+0x24>
 8019016:	4b28      	ldr	r3, [pc, #160]	@ (80190b8 <tcp_send_empty_ack+0xb8>)
 8019018:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801901c:	4927      	ldr	r1, [pc, #156]	@ (80190bc <tcp_send_empty_ack+0xbc>)
 801901e:	4828      	ldr	r0, [pc, #160]	@ (80190c0 <tcp_send_empty_ack+0xc0>)
 8019020:	f004 f9d4 	bl	801d3cc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019024:	7dfb      	ldrb	r3, [r7, #23]
 8019026:	009b      	lsls	r3, r3, #2
 8019028:	b2db      	uxtb	r3, r3
 801902a:	f003 0304 	and.w	r3, r3, #4
 801902e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8019030:	7d7b      	ldrb	r3, [r7, #21]
 8019032:	b29c      	uxth	r4, r3
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019038:	4618      	mov	r0, r3
 801903a:	f7f8 fa5d 	bl	80114f8 <lwip_htonl>
 801903e:	4603      	mov	r3, r0
 8019040:	2200      	movs	r2, #0
 8019042:	4621      	mov	r1, r4
 8019044:	6878      	ldr	r0, [r7, #4]
 8019046:	f7ff fec3 	bl	8018dd0 <tcp_output_alloc_header>
 801904a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801904c:	693b      	ldr	r3, [r7, #16]
 801904e:	2b00      	cmp	r3, #0
 8019050:	d109      	bne.n	8019066 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	8b5b      	ldrh	r3, [r3, #26]
 8019056:	f043 0303 	orr.w	r3, r3, #3
 801905a:	b29a      	uxth	r2, r3
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8019060:	f06f 0301 	mvn.w	r3, #1
 8019064:	e023      	b.n	80190ae <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8019066:	7dbb      	ldrb	r3, [r7, #22]
 8019068:	7dfa      	ldrb	r2, [r7, #23]
 801906a:	6939      	ldr	r1, [r7, #16]
 801906c:	6878      	ldr	r0, [r7, #4]
 801906e:	f7ff feed 	bl	8018e4c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019072:	687a      	ldr	r2, [r7, #4]
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	3304      	adds	r3, #4
 8019078:	6939      	ldr	r1, [r7, #16]
 801907a:	6878      	ldr	r0, [r7, #4]
 801907c:	f7ff ff24 	bl	8018ec8 <tcp_output_control_segment>
 8019080:	4603      	mov	r3, r0
 8019082:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8019084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019088:	2b00      	cmp	r3, #0
 801908a:	d007      	beq.n	801909c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	8b5b      	ldrh	r3, [r3, #26]
 8019090:	f043 0303 	orr.w	r3, r3, #3
 8019094:	b29a      	uxth	r2, r3
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	835a      	strh	r2, [r3, #26]
 801909a:	e006      	b.n	80190aa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	8b5b      	ldrh	r3, [r3, #26]
 80190a0:	f023 0303 	bic.w	r3, r3, #3
 80190a4:	b29a      	uxth	r2, r3
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80190aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80190ae:	4618      	mov	r0, r3
 80190b0:	371c      	adds	r7, #28
 80190b2:	46bd      	mov	sp, r7
 80190b4:	bd90      	pop	{r4, r7, pc}
 80190b6:	bf00      	nop
 80190b8:	08020904 	.word	0x08020904
 80190bc:	080210c0 	.word	0x080210c0
 80190c0:	08020958 	.word	0x08020958

080190c4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80190c4:	b590      	push	{r4, r7, lr}
 80190c6:	b087      	sub	sp, #28
 80190c8:	af00      	add	r7, sp, #0
 80190ca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80190cc:	2300      	movs	r3, #0
 80190ce:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d106      	bne.n	80190e4 <tcp_keepalive+0x20>
 80190d6:	4b18      	ldr	r3, [pc, #96]	@ (8019138 <tcp_keepalive+0x74>)
 80190d8:	f640 0224 	movw	r2, #2084	@ 0x824
 80190dc:	4917      	ldr	r1, [pc, #92]	@ (801913c <tcp_keepalive+0x78>)
 80190de:	4818      	ldr	r0, [pc, #96]	@ (8019140 <tcp_keepalive+0x7c>)
 80190e0:	f004 f974 	bl	801d3cc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80190e4:	7dfb      	ldrb	r3, [r7, #23]
 80190e6:	b29c      	uxth	r4, r3
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80190ec:	3b01      	subs	r3, #1
 80190ee:	4618      	mov	r0, r3
 80190f0:	f7f8 fa02 	bl	80114f8 <lwip_htonl>
 80190f4:	4603      	mov	r3, r0
 80190f6:	2200      	movs	r2, #0
 80190f8:	4621      	mov	r1, r4
 80190fa:	6878      	ldr	r0, [r7, #4]
 80190fc:	f7ff fe68 	bl	8018dd0 <tcp_output_alloc_header>
 8019100:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019102:	693b      	ldr	r3, [r7, #16]
 8019104:	2b00      	cmp	r3, #0
 8019106:	d102      	bne.n	801910e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8019108:	f04f 33ff 	mov.w	r3, #4294967295
 801910c:	e010      	b.n	8019130 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801910e:	7dfb      	ldrb	r3, [r7, #23]
 8019110:	2200      	movs	r2, #0
 8019112:	6939      	ldr	r1, [r7, #16]
 8019114:	6878      	ldr	r0, [r7, #4]
 8019116:	f7ff fe99 	bl	8018e4c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801911a:	687a      	ldr	r2, [r7, #4]
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	3304      	adds	r3, #4
 8019120:	6939      	ldr	r1, [r7, #16]
 8019122:	6878      	ldr	r0, [r7, #4]
 8019124:	f7ff fed0 	bl	8018ec8 <tcp_output_control_segment>
 8019128:	4603      	mov	r3, r0
 801912a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801912c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019130:	4618      	mov	r0, r3
 8019132:	371c      	adds	r7, #28
 8019134:	46bd      	mov	sp, r7
 8019136:	bd90      	pop	{r4, r7, pc}
 8019138:	08020904 	.word	0x08020904
 801913c:	080210e0 	.word	0x080210e0
 8019140:	08020958 	.word	0x08020958

08019144 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8019144:	b590      	push	{r4, r7, lr}
 8019146:	b08b      	sub	sp, #44	@ 0x2c
 8019148:	af00      	add	r7, sp, #0
 801914a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801914c:	2300      	movs	r3, #0
 801914e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	2b00      	cmp	r3, #0
 8019156:	d106      	bne.n	8019166 <tcp_zero_window_probe+0x22>
 8019158:	4b4c      	ldr	r3, [pc, #304]	@ (801928c <tcp_zero_window_probe+0x148>)
 801915a:	f640 024f 	movw	r2, #2127	@ 0x84f
 801915e:	494c      	ldr	r1, [pc, #304]	@ (8019290 <tcp_zero_window_probe+0x14c>)
 8019160:	484c      	ldr	r0, [pc, #304]	@ (8019294 <tcp_zero_window_probe+0x150>)
 8019162:	f004 f933 	bl	801d3cc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801916a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801916c:	6a3b      	ldr	r3, [r7, #32]
 801916e:	2b00      	cmp	r3, #0
 8019170:	d101      	bne.n	8019176 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8019172:	2300      	movs	r3, #0
 8019174:	e086      	b.n	8019284 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801917c:	2bff      	cmp	r3, #255	@ 0xff
 801917e:	d007      	beq.n	8019190 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8019186:	3301      	adds	r3, #1
 8019188:	b2da      	uxtb	r2, r3
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8019190:	6a3b      	ldr	r3, [r7, #32]
 8019192:	68db      	ldr	r3, [r3, #12]
 8019194:	899b      	ldrh	r3, [r3, #12]
 8019196:	b29b      	uxth	r3, r3
 8019198:	4618      	mov	r0, r3
 801919a:	f7f8 f997 	bl	80114cc <lwip_htons>
 801919e:	4603      	mov	r3, r0
 80191a0:	b2db      	uxtb	r3, r3
 80191a2:	f003 0301 	and.w	r3, r3, #1
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d005      	beq.n	80191b6 <tcp_zero_window_probe+0x72>
 80191aa:	6a3b      	ldr	r3, [r7, #32]
 80191ac:	891b      	ldrh	r3, [r3, #8]
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d101      	bne.n	80191b6 <tcp_zero_window_probe+0x72>
 80191b2:	2301      	movs	r3, #1
 80191b4:	e000      	b.n	80191b8 <tcp_zero_window_probe+0x74>
 80191b6:	2300      	movs	r3, #0
 80191b8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80191ba:	7ffb      	ldrb	r3, [r7, #31]
 80191bc:	2b00      	cmp	r3, #0
 80191be:	bf0c      	ite	eq
 80191c0:	2301      	moveq	r3, #1
 80191c2:	2300      	movne	r3, #0
 80191c4:	b2db      	uxtb	r3, r3
 80191c6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80191c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80191cc:	b299      	uxth	r1, r3
 80191ce:	6a3b      	ldr	r3, [r7, #32]
 80191d0:	68db      	ldr	r3, [r3, #12]
 80191d2:	685b      	ldr	r3, [r3, #4]
 80191d4:	8bba      	ldrh	r2, [r7, #28]
 80191d6:	6878      	ldr	r0, [r7, #4]
 80191d8:	f7ff fdfa 	bl	8018dd0 <tcp_output_alloc_header>
 80191dc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80191de:	69bb      	ldr	r3, [r7, #24]
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d102      	bne.n	80191ea <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80191e4:	f04f 33ff 	mov.w	r3, #4294967295
 80191e8:	e04c      	b.n	8019284 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80191ea:	69bb      	ldr	r3, [r7, #24]
 80191ec:	685b      	ldr	r3, [r3, #4]
 80191ee:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80191f0:	7ffb      	ldrb	r3, [r7, #31]
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d011      	beq.n	801921a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80191f6:	697b      	ldr	r3, [r7, #20]
 80191f8:	899b      	ldrh	r3, [r3, #12]
 80191fa:	b29b      	uxth	r3, r3
 80191fc:	b21b      	sxth	r3, r3
 80191fe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019202:	b21c      	sxth	r4, r3
 8019204:	2011      	movs	r0, #17
 8019206:	f7f8 f961 	bl	80114cc <lwip_htons>
 801920a:	4603      	mov	r3, r0
 801920c:	b21b      	sxth	r3, r3
 801920e:	4323      	orrs	r3, r4
 8019210:	b21b      	sxth	r3, r3
 8019212:	b29a      	uxth	r2, r3
 8019214:	697b      	ldr	r3, [r7, #20]
 8019216:	819a      	strh	r2, [r3, #12]
 8019218:	e010      	b.n	801923c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801921a:	69bb      	ldr	r3, [r7, #24]
 801921c:	685b      	ldr	r3, [r3, #4]
 801921e:	3314      	adds	r3, #20
 8019220:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8019222:	6a3b      	ldr	r3, [r7, #32]
 8019224:	6858      	ldr	r0, [r3, #4]
 8019226:	6a3b      	ldr	r3, [r7, #32]
 8019228:	685b      	ldr	r3, [r3, #4]
 801922a:	891a      	ldrh	r2, [r3, #8]
 801922c:	6a3b      	ldr	r3, [r7, #32]
 801922e:	891b      	ldrh	r3, [r3, #8]
 8019230:	1ad3      	subs	r3, r2, r3
 8019232:	b29b      	uxth	r3, r3
 8019234:	2201      	movs	r2, #1
 8019236:	6939      	ldr	r1, [r7, #16]
 8019238:	f7f9 ff2c 	bl	8013094 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801923c:	6a3b      	ldr	r3, [r7, #32]
 801923e:	68db      	ldr	r3, [r3, #12]
 8019240:	685b      	ldr	r3, [r3, #4]
 8019242:	4618      	mov	r0, r3
 8019244:	f7f8 f958 	bl	80114f8 <lwip_htonl>
 8019248:	4603      	mov	r3, r0
 801924a:	3301      	adds	r3, #1
 801924c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	1ad3      	subs	r3, r2, r3
 8019256:	2b00      	cmp	r3, #0
 8019258:	da02      	bge.n	8019260 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	68fa      	ldr	r2, [r7, #12]
 801925e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019260:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019264:	2200      	movs	r2, #0
 8019266:	69b9      	ldr	r1, [r7, #24]
 8019268:	6878      	ldr	r0, [r7, #4]
 801926a:	f7ff fdef 	bl	8018e4c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801926e:	687a      	ldr	r2, [r7, #4]
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	3304      	adds	r3, #4
 8019274:	69b9      	ldr	r1, [r7, #24]
 8019276:	6878      	ldr	r0, [r7, #4]
 8019278:	f7ff fe26 	bl	8018ec8 <tcp_output_control_segment>
 801927c:	4603      	mov	r3, r0
 801927e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019280:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019284:	4618      	mov	r0, r3
 8019286:	372c      	adds	r7, #44	@ 0x2c
 8019288:	46bd      	mov	sp, r7
 801928a:	bd90      	pop	{r4, r7, pc}
 801928c:	08020904 	.word	0x08020904
 8019290:	080210fc 	.word	0x080210fc
 8019294:	08020958 	.word	0x08020958

08019298 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019298:	b580      	push	{r7, lr}
 801929a:	b082      	sub	sp, #8
 801929c:	af00      	add	r7, sp, #0
 801929e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80192a0:	f7f9 ffe6 	bl	8013270 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80192a4:	4b0a      	ldr	r3, [pc, #40]	@ (80192d0 <tcpip_tcp_timer+0x38>)
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d103      	bne.n	80192b4 <tcpip_tcp_timer+0x1c>
 80192ac:	4b09      	ldr	r3, [pc, #36]	@ (80192d4 <tcpip_tcp_timer+0x3c>)
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d005      	beq.n	80192c0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80192b4:	2200      	movs	r2, #0
 80192b6:	4908      	ldr	r1, [pc, #32]	@ (80192d8 <tcpip_tcp_timer+0x40>)
 80192b8:	20fa      	movs	r0, #250	@ 0xfa
 80192ba:	f000 f8f3 	bl	80194a4 <sys_timeout>
 80192be:	e003      	b.n	80192c8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80192c0:	4b06      	ldr	r3, [pc, #24]	@ (80192dc <tcpip_tcp_timer+0x44>)
 80192c2:	2200      	movs	r2, #0
 80192c4:	601a      	str	r2, [r3, #0]
  }
}
 80192c6:	bf00      	nop
 80192c8:	bf00      	nop
 80192ca:	3708      	adds	r7, #8
 80192cc:	46bd      	mov	sp, r7
 80192ce:	bd80      	pop	{r7, pc}
 80192d0:	2000e468 	.word	0x2000e468
 80192d4:	2000e46c 	.word	0x2000e46c
 80192d8:	08019299 	.word	0x08019299
 80192dc:	2000e4b4 	.word	0x2000e4b4

080192e0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80192e0:	b580      	push	{r7, lr}
 80192e2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80192e4:	4b0a      	ldr	r3, [pc, #40]	@ (8019310 <tcp_timer_needed+0x30>)
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d10f      	bne.n	801930c <tcp_timer_needed+0x2c>
 80192ec:	4b09      	ldr	r3, [pc, #36]	@ (8019314 <tcp_timer_needed+0x34>)
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d103      	bne.n	80192fc <tcp_timer_needed+0x1c>
 80192f4:	4b08      	ldr	r3, [pc, #32]	@ (8019318 <tcp_timer_needed+0x38>)
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d007      	beq.n	801930c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80192fc:	4b04      	ldr	r3, [pc, #16]	@ (8019310 <tcp_timer_needed+0x30>)
 80192fe:	2201      	movs	r2, #1
 8019300:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019302:	2200      	movs	r2, #0
 8019304:	4905      	ldr	r1, [pc, #20]	@ (801931c <tcp_timer_needed+0x3c>)
 8019306:	20fa      	movs	r0, #250	@ 0xfa
 8019308:	f000 f8cc 	bl	80194a4 <sys_timeout>
  }
}
 801930c:	bf00      	nop
 801930e:	bd80      	pop	{r7, pc}
 8019310:	2000e4b4 	.word	0x2000e4b4
 8019314:	2000e468 	.word	0x2000e468
 8019318:	2000e46c 	.word	0x2000e46c
 801931c:	08019299 	.word	0x08019299

08019320 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8019320:	b580      	push	{r7, lr}
 8019322:	b086      	sub	sp, #24
 8019324:	af00      	add	r7, sp, #0
 8019326:	60f8      	str	r0, [r7, #12]
 8019328:	60b9      	str	r1, [r7, #8]
 801932a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801932c:	200a      	movs	r0, #10
 801932e:	f7f8 fda1 	bl	8011e74 <memp_malloc>
 8019332:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8019334:	693b      	ldr	r3, [r7, #16]
 8019336:	2b00      	cmp	r3, #0
 8019338:	d109      	bne.n	801934e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801933a:	693b      	ldr	r3, [r7, #16]
 801933c:	2b00      	cmp	r3, #0
 801933e:	d151      	bne.n	80193e4 <sys_timeout_abs+0xc4>
 8019340:	4b2a      	ldr	r3, [pc, #168]	@ (80193ec <sys_timeout_abs+0xcc>)
 8019342:	22be      	movs	r2, #190	@ 0xbe
 8019344:	492a      	ldr	r1, [pc, #168]	@ (80193f0 <sys_timeout_abs+0xd0>)
 8019346:	482b      	ldr	r0, [pc, #172]	@ (80193f4 <sys_timeout_abs+0xd4>)
 8019348:	f004 f840 	bl	801d3cc <iprintf>
    return;
 801934c:	e04a      	b.n	80193e4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801934e:	693b      	ldr	r3, [r7, #16]
 8019350:	2200      	movs	r2, #0
 8019352:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8019354:	693b      	ldr	r3, [r7, #16]
 8019356:	68ba      	ldr	r2, [r7, #8]
 8019358:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801935a:	693b      	ldr	r3, [r7, #16]
 801935c:	687a      	ldr	r2, [r7, #4]
 801935e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8019360:	693b      	ldr	r3, [r7, #16]
 8019362:	68fa      	ldr	r2, [r7, #12]
 8019364:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8019366:	4b24      	ldr	r3, [pc, #144]	@ (80193f8 <sys_timeout_abs+0xd8>)
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	2b00      	cmp	r3, #0
 801936c:	d103      	bne.n	8019376 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801936e:	4a22      	ldr	r2, [pc, #136]	@ (80193f8 <sys_timeout_abs+0xd8>)
 8019370:	693b      	ldr	r3, [r7, #16]
 8019372:	6013      	str	r3, [r2, #0]
    return;
 8019374:	e037      	b.n	80193e6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8019376:	693b      	ldr	r3, [r7, #16]
 8019378:	685a      	ldr	r2, [r3, #4]
 801937a:	4b1f      	ldr	r3, [pc, #124]	@ (80193f8 <sys_timeout_abs+0xd8>)
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	685b      	ldr	r3, [r3, #4]
 8019380:	1ad3      	subs	r3, r2, r3
 8019382:	0fdb      	lsrs	r3, r3, #31
 8019384:	f003 0301 	and.w	r3, r3, #1
 8019388:	b2db      	uxtb	r3, r3
 801938a:	2b00      	cmp	r3, #0
 801938c:	d007      	beq.n	801939e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801938e:	4b1a      	ldr	r3, [pc, #104]	@ (80193f8 <sys_timeout_abs+0xd8>)
 8019390:	681a      	ldr	r2, [r3, #0]
 8019392:	693b      	ldr	r3, [r7, #16]
 8019394:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8019396:	4a18      	ldr	r2, [pc, #96]	@ (80193f8 <sys_timeout_abs+0xd8>)
 8019398:	693b      	ldr	r3, [r7, #16]
 801939a:	6013      	str	r3, [r2, #0]
 801939c:	e023      	b.n	80193e6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801939e:	4b16      	ldr	r3, [pc, #88]	@ (80193f8 <sys_timeout_abs+0xd8>)
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	617b      	str	r3, [r7, #20]
 80193a4:	e01a      	b.n	80193dc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80193a6:	697b      	ldr	r3, [r7, #20]
 80193a8:	681b      	ldr	r3, [r3, #0]
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d00b      	beq.n	80193c6 <sys_timeout_abs+0xa6>
 80193ae:	693b      	ldr	r3, [r7, #16]
 80193b0:	685a      	ldr	r2, [r3, #4]
 80193b2:	697b      	ldr	r3, [r7, #20]
 80193b4:	681b      	ldr	r3, [r3, #0]
 80193b6:	685b      	ldr	r3, [r3, #4]
 80193b8:	1ad3      	subs	r3, r2, r3
 80193ba:	0fdb      	lsrs	r3, r3, #31
 80193bc:	f003 0301 	and.w	r3, r3, #1
 80193c0:	b2db      	uxtb	r3, r3
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d007      	beq.n	80193d6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80193c6:	697b      	ldr	r3, [r7, #20]
 80193c8:	681a      	ldr	r2, [r3, #0]
 80193ca:	693b      	ldr	r3, [r7, #16]
 80193cc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80193ce:	697b      	ldr	r3, [r7, #20]
 80193d0:	693a      	ldr	r2, [r7, #16]
 80193d2:	601a      	str	r2, [r3, #0]
        break;
 80193d4:	e007      	b.n	80193e6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80193d6:	697b      	ldr	r3, [r7, #20]
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	617b      	str	r3, [r7, #20]
 80193dc:	697b      	ldr	r3, [r7, #20]
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d1e1      	bne.n	80193a6 <sys_timeout_abs+0x86>
 80193e2:	e000      	b.n	80193e6 <sys_timeout_abs+0xc6>
    return;
 80193e4:	bf00      	nop
      }
    }
  }
}
 80193e6:	3718      	adds	r7, #24
 80193e8:	46bd      	mov	sp, r7
 80193ea:	bd80      	pop	{r7, pc}
 80193ec:	08021120 	.word	0x08021120
 80193f0:	08021154 	.word	0x08021154
 80193f4:	08021194 	.word	0x08021194
 80193f8:	2000e4ac 	.word	0x2000e4ac

080193fc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80193fc:	b580      	push	{r7, lr}
 80193fe:	b086      	sub	sp, #24
 8019400:	af00      	add	r7, sp, #0
 8019402:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8019408:	697b      	ldr	r3, [r7, #20]
 801940a:	685b      	ldr	r3, [r3, #4]
 801940c:	4798      	blx	r3

  now = sys_now();
 801940e:	f7f0 f9a9 	bl	8009764 <sys_now>
 8019412:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8019414:	697b      	ldr	r3, [r7, #20]
 8019416:	681a      	ldr	r2, [r3, #0]
 8019418:	4b0f      	ldr	r3, [pc, #60]	@ (8019458 <lwip_cyclic_timer+0x5c>)
 801941a:	681b      	ldr	r3, [r3, #0]
 801941c:	4413      	add	r3, r2
 801941e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8019420:	68fa      	ldr	r2, [r7, #12]
 8019422:	693b      	ldr	r3, [r7, #16]
 8019424:	1ad3      	subs	r3, r2, r3
 8019426:	0fdb      	lsrs	r3, r3, #31
 8019428:	f003 0301 	and.w	r3, r3, #1
 801942c:	b2db      	uxtb	r3, r3
 801942e:	2b00      	cmp	r3, #0
 8019430:	d009      	beq.n	8019446 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8019432:	697b      	ldr	r3, [r7, #20]
 8019434:	681a      	ldr	r2, [r3, #0]
 8019436:	693b      	ldr	r3, [r7, #16]
 8019438:	4413      	add	r3, r2
 801943a:	687a      	ldr	r2, [r7, #4]
 801943c:	4907      	ldr	r1, [pc, #28]	@ (801945c <lwip_cyclic_timer+0x60>)
 801943e:	4618      	mov	r0, r3
 8019440:	f7ff ff6e 	bl	8019320 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8019444:	e004      	b.n	8019450 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8019446:	687a      	ldr	r2, [r7, #4]
 8019448:	4904      	ldr	r1, [pc, #16]	@ (801945c <lwip_cyclic_timer+0x60>)
 801944a:	68f8      	ldr	r0, [r7, #12]
 801944c:	f7ff ff68 	bl	8019320 <sys_timeout_abs>
}
 8019450:	bf00      	nop
 8019452:	3718      	adds	r7, #24
 8019454:	46bd      	mov	sp, r7
 8019456:	bd80      	pop	{r7, pc}
 8019458:	2000e4b0 	.word	0x2000e4b0
 801945c:	080193fd 	.word	0x080193fd

08019460 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8019460:	b580      	push	{r7, lr}
 8019462:	b082      	sub	sp, #8
 8019464:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019466:	2301      	movs	r3, #1
 8019468:	607b      	str	r3, [r7, #4]
 801946a:	e00e      	b.n	801948a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801946c:	4a0b      	ldr	r2, [pc, #44]	@ (801949c <sys_timeouts_init+0x3c>)
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	00db      	lsls	r3, r3, #3
 8019478:	4a08      	ldr	r2, [pc, #32]	@ (801949c <sys_timeouts_init+0x3c>)
 801947a:	4413      	add	r3, r2
 801947c:	461a      	mov	r2, r3
 801947e:	4908      	ldr	r1, [pc, #32]	@ (80194a0 <sys_timeouts_init+0x40>)
 8019480:	f000 f810 	bl	80194a4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	3301      	adds	r3, #1
 8019488:	607b      	str	r3, [r7, #4]
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	2b02      	cmp	r3, #2
 801948e:	d9ed      	bls.n	801946c <sys_timeouts_init+0xc>
  }
}
 8019490:	bf00      	nop
 8019492:	bf00      	nop
 8019494:	3708      	adds	r7, #8
 8019496:	46bd      	mov	sp, r7
 8019498:	bd80      	pop	{r7, pc}
 801949a:	bf00      	nop
 801949c:	080334bc 	.word	0x080334bc
 80194a0:	080193fd 	.word	0x080193fd

080194a4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80194a4:	b580      	push	{r7, lr}
 80194a6:	b086      	sub	sp, #24
 80194a8:	af00      	add	r7, sp, #0
 80194aa:	60f8      	str	r0, [r7, #12]
 80194ac:	60b9      	str	r1, [r7, #8]
 80194ae:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80194b0:	68fb      	ldr	r3, [r7, #12]
 80194b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80194b6:	d306      	bcc.n	80194c6 <sys_timeout+0x22>
 80194b8:	4b0a      	ldr	r3, [pc, #40]	@ (80194e4 <sys_timeout+0x40>)
 80194ba:	f240 1229 	movw	r2, #297	@ 0x129
 80194be:	490a      	ldr	r1, [pc, #40]	@ (80194e8 <sys_timeout+0x44>)
 80194c0:	480a      	ldr	r0, [pc, #40]	@ (80194ec <sys_timeout+0x48>)
 80194c2:	f003 ff83 	bl	801d3cc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80194c6:	f7f0 f94d 	bl	8009764 <sys_now>
 80194ca:	4602      	mov	r2, r0
 80194cc:	68fb      	ldr	r3, [r7, #12]
 80194ce:	4413      	add	r3, r2
 80194d0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80194d2:	687a      	ldr	r2, [r7, #4]
 80194d4:	68b9      	ldr	r1, [r7, #8]
 80194d6:	6978      	ldr	r0, [r7, #20]
 80194d8:	f7ff ff22 	bl	8019320 <sys_timeout_abs>
#endif
}
 80194dc:	bf00      	nop
 80194de:	3718      	adds	r7, #24
 80194e0:	46bd      	mov	sp, r7
 80194e2:	bd80      	pop	{r7, pc}
 80194e4:	08021120 	.word	0x08021120
 80194e8:	080211bc 	.word	0x080211bc
 80194ec:	08021194 	.word	0x08021194

080194f0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80194f0:	b580      	push	{r7, lr}
 80194f2:	b084      	sub	sp, #16
 80194f4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80194f6:	f7f0 f935 	bl	8009764 <sys_now>
 80194fa:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80194fc:	4b17      	ldr	r3, [pc, #92]	@ (801955c <sys_check_timeouts+0x6c>)
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8019502:	68bb      	ldr	r3, [r7, #8]
 8019504:	2b00      	cmp	r3, #0
 8019506:	d022      	beq.n	801954e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8019508:	68bb      	ldr	r3, [r7, #8]
 801950a:	685b      	ldr	r3, [r3, #4]
 801950c:	68fa      	ldr	r2, [r7, #12]
 801950e:	1ad3      	subs	r3, r2, r3
 8019510:	0fdb      	lsrs	r3, r3, #31
 8019512:	f003 0301 	and.w	r3, r3, #1
 8019516:	b2db      	uxtb	r3, r3
 8019518:	2b00      	cmp	r3, #0
 801951a:	d11a      	bne.n	8019552 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801951c:	68bb      	ldr	r3, [r7, #8]
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	4a0e      	ldr	r2, [pc, #56]	@ (801955c <sys_check_timeouts+0x6c>)
 8019522:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8019524:	68bb      	ldr	r3, [r7, #8]
 8019526:	689b      	ldr	r3, [r3, #8]
 8019528:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801952a:	68bb      	ldr	r3, [r7, #8]
 801952c:	68db      	ldr	r3, [r3, #12]
 801952e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8019530:	68bb      	ldr	r3, [r7, #8]
 8019532:	685b      	ldr	r3, [r3, #4]
 8019534:	4a0a      	ldr	r2, [pc, #40]	@ (8019560 <sys_check_timeouts+0x70>)
 8019536:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019538:	68b9      	ldr	r1, [r7, #8]
 801953a:	200a      	movs	r0, #10
 801953c:	f7f8 fd10 	bl	8011f60 <memp_free>
    if (handler != NULL) {
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	2b00      	cmp	r3, #0
 8019544:	d0da      	beq.n	80194fc <sys_check_timeouts+0xc>
      handler(arg);
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	6838      	ldr	r0, [r7, #0]
 801954a:	4798      	blx	r3
  do {
 801954c:	e7d6      	b.n	80194fc <sys_check_timeouts+0xc>
      return;
 801954e:	bf00      	nop
 8019550:	e000      	b.n	8019554 <sys_check_timeouts+0x64>
      return;
 8019552:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8019554:	3710      	adds	r7, #16
 8019556:	46bd      	mov	sp, r7
 8019558:	bd80      	pop	{r7, pc}
 801955a:	bf00      	nop
 801955c:	2000e4ac 	.word	0x2000e4ac
 8019560:	2000e4b0 	.word	0x2000e4b0

08019564 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019564:	b580      	push	{r7, lr}
 8019566:	b082      	sub	sp, #8
 8019568:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801956a:	4b16      	ldr	r3, [pc, #88]	@ (80195c4 <sys_timeouts_sleeptime+0x60>)
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	2b00      	cmp	r3, #0
 8019570:	d102      	bne.n	8019578 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8019572:	f04f 33ff 	mov.w	r3, #4294967295
 8019576:	e020      	b.n	80195ba <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019578:	f7f0 f8f4 	bl	8009764 <sys_now>
 801957c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801957e:	4b11      	ldr	r3, [pc, #68]	@ (80195c4 <sys_timeouts_sleeptime+0x60>)
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	685a      	ldr	r2, [r3, #4]
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	1ad3      	subs	r3, r2, r3
 8019588:	0fdb      	lsrs	r3, r3, #31
 801958a:	f003 0301 	and.w	r3, r3, #1
 801958e:	b2db      	uxtb	r3, r3
 8019590:	2b00      	cmp	r3, #0
 8019592:	d001      	beq.n	8019598 <sys_timeouts_sleeptime+0x34>
    return 0;
 8019594:	2300      	movs	r3, #0
 8019596:	e010      	b.n	80195ba <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019598:	4b0a      	ldr	r3, [pc, #40]	@ (80195c4 <sys_timeouts_sleeptime+0x60>)
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	685a      	ldr	r2, [r3, #4]
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	1ad3      	subs	r3, r2, r3
 80195a2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80195a4:	683b      	ldr	r3, [r7, #0]
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	da06      	bge.n	80195b8 <sys_timeouts_sleeptime+0x54>
 80195aa:	4b07      	ldr	r3, [pc, #28]	@ (80195c8 <sys_timeouts_sleeptime+0x64>)
 80195ac:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80195b0:	4906      	ldr	r1, [pc, #24]	@ (80195cc <sys_timeouts_sleeptime+0x68>)
 80195b2:	4807      	ldr	r0, [pc, #28]	@ (80195d0 <sys_timeouts_sleeptime+0x6c>)
 80195b4:	f003 ff0a 	bl	801d3cc <iprintf>
    return ret;
 80195b8:	683b      	ldr	r3, [r7, #0]
  }
}
 80195ba:	4618      	mov	r0, r3
 80195bc:	3708      	adds	r7, #8
 80195be:	46bd      	mov	sp, r7
 80195c0:	bd80      	pop	{r7, pc}
 80195c2:	bf00      	nop
 80195c4:	2000e4ac 	.word	0x2000e4ac
 80195c8:	08021120 	.word	0x08021120
 80195cc:	080211f4 	.word	0x080211f4
 80195d0:	08021194 	.word	0x08021194

080195d4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80195d4:	b580      	push	{r7, lr}
 80195d6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80195d8:	f003 fdf8 	bl	801d1cc <rand>
 80195dc:	4603      	mov	r3, r0
 80195de:	b29b      	uxth	r3, r3
 80195e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80195e4:	b29b      	uxth	r3, r3
 80195e6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80195ea:	b29a      	uxth	r2, r3
 80195ec:	4b01      	ldr	r3, [pc, #4]	@ (80195f4 <udp_init+0x20>)
 80195ee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80195f0:	bf00      	nop
 80195f2:	bd80      	pop	{r7, pc}
 80195f4:	200000b8 	.word	0x200000b8

080195f8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80195f8:	b480      	push	{r7}
 80195fa:	b083      	sub	sp, #12
 80195fc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80195fe:	2300      	movs	r3, #0
 8019600:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8019602:	4b17      	ldr	r3, [pc, #92]	@ (8019660 <udp_new_port+0x68>)
 8019604:	881b      	ldrh	r3, [r3, #0]
 8019606:	1c5a      	adds	r2, r3, #1
 8019608:	b291      	uxth	r1, r2
 801960a:	4a15      	ldr	r2, [pc, #84]	@ (8019660 <udp_new_port+0x68>)
 801960c:	8011      	strh	r1, [r2, #0]
 801960e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019612:	4293      	cmp	r3, r2
 8019614:	d103      	bne.n	801961e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8019616:	4b12      	ldr	r3, [pc, #72]	@ (8019660 <udp_new_port+0x68>)
 8019618:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801961c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801961e:	4b11      	ldr	r3, [pc, #68]	@ (8019664 <udp_new_port+0x6c>)
 8019620:	681b      	ldr	r3, [r3, #0]
 8019622:	603b      	str	r3, [r7, #0]
 8019624:	e011      	b.n	801964a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8019626:	683b      	ldr	r3, [r7, #0]
 8019628:	8a5a      	ldrh	r2, [r3, #18]
 801962a:	4b0d      	ldr	r3, [pc, #52]	@ (8019660 <udp_new_port+0x68>)
 801962c:	881b      	ldrh	r3, [r3, #0]
 801962e:	429a      	cmp	r2, r3
 8019630:	d108      	bne.n	8019644 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8019632:	88fb      	ldrh	r3, [r7, #6]
 8019634:	3301      	adds	r3, #1
 8019636:	80fb      	strh	r3, [r7, #6]
 8019638:	88fb      	ldrh	r3, [r7, #6]
 801963a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801963e:	d3e0      	bcc.n	8019602 <udp_new_port+0xa>
        return 0;
 8019640:	2300      	movs	r3, #0
 8019642:	e007      	b.n	8019654 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019644:	683b      	ldr	r3, [r7, #0]
 8019646:	68db      	ldr	r3, [r3, #12]
 8019648:	603b      	str	r3, [r7, #0]
 801964a:	683b      	ldr	r3, [r7, #0]
 801964c:	2b00      	cmp	r3, #0
 801964e:	d1ea      	bne.n	8019626 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8019650:	4b03      	ldr	r3, [pc, #12]	@ (8019660 <udp_new_port+0x68>)
 8019652:	881b      	ldrh	r3, [r3, #0]
}
 8019654:	4618      	mov	r0, r3
 8019656:	370c      	adds	r7, #12
 8019658:	46bd      	mov	sp, r7
 801965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801965e:	4770      	bx	lr
 8019660:	200000b8 	.word	0x200000b8
 8019664:	2000e4b8 	.word	0x2000e4b8

08019668 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8019668:	b580      	push	{r7, lr}
 801966a:	b084      	sub	sp, #16
 801966c:	af00      	add	r7, sp, #0
 801966e:	60f8      	str	r0, [r7, #12]
 8019670:	60b9      	str	r1, [r7, #8]
 8019672:	4613      	mov	r3, r2
 8019674:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	2b00      	cmp	r3, #0
 801967a:	d105      	bne.n	8019688 <udp_input_local_match+0x20>
 801967c:	4b27      	ldr	r3, [pc, #156]	@ (801971c <udp_input_local_match+0xb4>)
 801967e:	2287      	movs	r2, #135	@ 0x87
 8019680:	4927      	ldr	r1, [pc, #156]	@ (8019720 <udp_input_local_match+0xb8>)
 8019682:	4828      	ldr	r0, [pc, #160]	@ (8019724 <udp_input_local_match+0xbc>)
 8019684:	f003 fea2 	bl	801d3cc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8019688:	68bb      	ldr	r3, [r7, #8]
 801968a:	2b00      	cmp	r3, #0
 801968c:	d105      	bne.n	801969a <udp_input_local_match+0x32>
 801968e:	4b23      	ldr	r3, [pc, #140]	@ (801971c <udp_input_local_match+0xb4>)
 8019690:	2288      	movs	r2, #136	@ 0x88
 8019692:	4925      	ldr	r1, [pc, #148]	@ (8019728 <udp_input_local_match+0xc0>)
 8019694:	4823      	ldr	r0, [pc, #140]	@ (8019724 <udp_input_local_match+0xbc>)
 8019696:	f003 fe99 	bl	801d3cc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801969a:	68fb      	ldr	r3, [r7, #12]
 801969c:	7a1b      	ldrb	r3, [r3, #8]
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d00b      	beq.n	80196ba <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80196a2:	68fb      	ldr	r3, [r7, #12]
 80196a4:	7a1a      	ldrb	r2, [r3, #8]
 80196a6:	4b21      	ldr	r3, [pc, #132]	@ (801972c <udp_input_local_match+0xc4>)
 80196a8:	685b      	ldr	r3, [r3, #4]
 80196aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80196ae:	3301      	adds	r3, #1
 80196b0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80196b2:	429a      	cmp	r2, r3
 80196b4:	d001      	beq.n	80196ba <udp_input_local_match+0x52>
    return 0;
 80196b6:	2300      	movs	r3, #0
 80196b8:	e02b      	b.n	8019712 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80196ba:	79fb      	ldrb	r3, [r7, #7]
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d018      	beq.n	80196f2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80196c0:	68fb      	ldr	r3, [r7, #12]
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d013      	beq.n	80196ee <udp_input_local_match+0x86>
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d00f      	beq.n	80196ee <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80196ce:	4b17      	ldr	r3, [pc, #92]	@ (801972c <udp_input_local_match+0xc4>)
 80196d0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80196d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80196d6:	d00a      	beq.n	80196ee <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80196d8:	68fb      	ldr	r3, [r7, #12]
 80196da:	681a      	ldr	r2, [r3, #0]
 80196dc:	4b13      	ldr	r3, [pc, #76]	@ (801972c <udp_input_local_match+0xc4>)
 80196de:	695b      	ldr	r3, [r3, #20]
 80196e0:	405a      	eors	r2, r3
 80196e2:	68bb      	ldr	r3, [r7, #8]
 80196e4:	3308      	adds	r3, #8
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d110      	bne.n	8019710 <udp_input_local_match+0xa8>
          return 1;
 80196ee:	2301      	movs	r3, #1
 80196f0:	e00f      	b.n	8019712 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80196f2:	68fb      	ldr	r3, [r7, #12]
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d009      	beq.n	801970c <udp_input_local_match+0xa4>
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d005      	beq.n	801970c <udp_input_local_match+0xa4>
 8019700:	68fb      	ldr	r3, [r7, #12]
 8019702:	681a      	ldr	r2, [r3, #0]
 8019704:	4b09      	ldr	r3, [pc, #36]	@ (801972c <udp_input_local_match+0xc4>)
 8019706:	695b      	ldr	r3, [r3, #20]
 8019708:	429a      	cmp	r2, r3
 801970a:	d101      	bne.n	8019710 <udp_input_local_match+0xa8>
        return 1;
 801970c:	2301      	movs	r3, #1
 801970e:	e000      	b.n	8019712 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8019710:	2300      	movs	r3, #0
}
 8019712:	4618      	mov	r0, r3
 8019714:	3710      	adds	r7, #16
 8019716:	46bd      	mov	sp, r7
 8019718:	bd80      	pop	{r7, pc}
 801971a:	bf00      	nop
 801971c:	08021208 	.word	0x08021208
 8019720:	08021238 	.word	0x08021238
 8019724:	0802125c 	.word	0x0802125c
 8019728:	08021284 	.word	0x08021284
 801972c:	2000b35c 	.word	0x2000b35c

08019730 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8019730:	b590      	push	{r4, r7, lr}
 8019732:	b08d      	sub	sp, #52	@ 0x34
 8019734:	af02      	add	r7, sp, #8
 8019736:	6078      	str	r0, [r7, #4]
 8019738:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801973a:	2300      	movs	r3, #0
 801973c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	2b00      	cmp	r3, #0
 8019742:	d105      	bne.n	8019750 <udp_input+0x20>
 8019744:	4b7c      	ldr	r3, [pc, #496]	@ (8019938 <udp_input+0x208>)
 8019746:	22cf      	movs	r2, #207	@ 0xcf
 8019748:	497c      	ldr	r1, [pc, #496]	@ (801993c <udp_input+0x20c>)
 801974a:	487d      	ldr	r0, [pc, #500]	@ (8019940 <udp_input+0x210>)
 801974c:	f003 fe3e 	bl	801d3cc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019750:	683b      	ldr	r3, [r7, #0]
 8019752:	2b00      	cmp	r3, #0
 8019754:	d105      	bne.n	8019762 <udp_input+0x32>
 8019756:	4b78      	ldr	r3, [pc, #480]	@ (8019938 <udp_input+0x208>)
 8019758:	22d0      	movs	r2, #208	@ 0xd0
 801975a:	497a      	ldr	r1, [pc, #488]	@ (8019944 <udp_input+0x214>)
 801975c:	4878      	ldr	r0, [pc, #480]	@ (8019940 <udp_input+0x210>)
 801975e:	f003 fe35 	bl	801d3cc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	895b      	ldrh	r3, [r3, #10]
 8019766:	2b07      	cmp	r3, #7
 8019768:	d803      	bhi.n	8019772 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801976a:	6878      	ldr	r0, [r7, #4]
 801976c:	f7f9 fa9c 	bl	8012ca8 <pbuf_free>
    goto end;
 8019770:	e0de      	b.n	8019930 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	685b      	ldr	r3, [r3, #4]
 8019776:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019778:	4b73      	ldr	r3, [pc, #460]	@ (8019948 <udp_input+0x218>)
 801977a:	695b      	ldr	r3, [r3, #20]
 801977c:	4a72      	ldr	r2, [pc, #456]	@ (8019948 <udp_input+0x218>)
 801977e:	6812      	ldr	r2, [r2, #0]
 8019780:	4611      	mov	r1, r2
 8019782:	4618      	mov	r0, r3
 8019784:	f001 fd96 	bl	801b2b4 <ip4_addr_isbroadcast_u32>
 8019788:	4603      	mov	r3, r0
 801978a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801978c:	697b      	ldr	r3, [r7, #20]
 801978e:	881b      	ldrh	r3, [r3, #0]
 8019790:	b29b      	uxth	r3, r3
 8019792:	4618      	mov	r0, r3
 8019794:	f7f7 fe9a 	bl	80114cc <lwip_htons>
 8019798:	4603      	mov	r3, r0
 801979a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801979c:	697b      	ldr	r3, [r7, #20]
 801979e:	885b      	ldrh	r3, [r3, #2]
 80197a0:	b29b      	uxth	r3, r3
 80197a2:	4618      	mov	r0, r3
 80197a4:	f7f7 fe92 	bl	80114cc <lwip_htons>
 80197a8:	4603      	mov	r3, r0
 80197aa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80197ac:	2300      	movs	r3, #0
 80197ae:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80197b0:	2300      	movs	r3, #0
 80197b2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80197b4:	2300      	movs	r3, #0
 80197b6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80197b8:	4b64      	ldr	r3, [pc, #400]	@ (801994c <udp_input+0x21c>)
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80197be:	e054      	b.n	801986a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80197c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197c2:	8a5b      	ldrh	r3, [r3, #18]
 80197c4:	89fa      	ldrh	r2, [r7, #14]
 80197c6:	429a      	cmp	r2, r3
 80197c8:	d14a      	bne.n	8019860 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80197ca:	7cfb      	ldrb	r3, [r7, #19]
 80197cc:	461a      	mov	r2, r3
 80197ce:	6839      	ldr	r1, [r7, #0]
 80197d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80197d2:	f7ff ff49 	bl	8019668 <udp_input_local_match>
 80197d6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d041      	beq.n	8019860 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80197dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197de:	7c1b      	ldrb	r3, [r3, #16]
 80197e0:	f003 0304 	and.w	r3, r3, #4
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d11d      	bne.n	8019824 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80197e8:	69fb      	ldr	r3, [r7, #28]
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	d102      	bne.n	80197f4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80197ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197f0:	61fb      	str	r3, [r7, #28]
 80197f2:	e017      	b.n	8019824 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80197f4:	7cfb      	ldrb	r3, [r7, #19]
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d014      	beq.n	8019824 <udp_input+0xf4>
 80197fa:	4b53      	ldr	r3, [pc, #332]	@ (8019948 <udp_input+0x218>)
 80197fc:	695b      	ldr	r3, [r3, #20]
 80197fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019802:	d10f      	bne.n	8019824 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8019804:	69fb      	ldr	r3, [r7, #28]
 8019806:	681a      	ldr	r2, [r3, #0]
 8019808:	683b      	ldr	r3, [r7, #0]
 801980a:	3304      	adds	r3, #4
 801980c:	681b      	ldr	r3, [r3, #0]
 801980e:	429a      	cmp	r2, r3
 8019810:	d008      	beq.n	8019824 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8019812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019814:	681a      	ldr	r2, [r3, #0]
 8019816:	683b      	ldr	r3, [r7, #0]
 8019818:	3304      	adds	r3, #4
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	429a      	cmp	r2, r3
 801981e:	d101      	bne.n	8019824 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8019820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019822:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8019824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019826:	8a9b      	ldrh	r3, [r3, #20]
 8019828:	8a3a      	ldrh	r2, [r7, #16]
 801982a:	429a      	cmp	r2, r3
 801982c:	d118      	bne.n	8019860 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801982e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019830:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8019832:	2b00      	cmp	r3, #0
 8019834:	d005      	beq.n	8019842 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8019836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019838:	685a      	ldr	r2, [r3, #4]
 801983a:	4b43      	ldr	r3, [pc, #268]	@ (8019948 <udp_input+0x218>)
 801983c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801983e:	429a      	cmp	r2, r3
 8019840:	d10e      	bne.n	8019860 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8019842:	6a3b      	ldr	r3, [r7, #32]
 8019844:	2b00      	cmp	r3, #0
 8019846:	d014      	beq.n	8019872 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8019848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801984a:	68da      	ldr	r2, [r3, #12]
 801984c:	6a3b      	ldr	r3, [r7, #32]
 801984e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019850:	4b3e      	ldr	r3, [pc, #248]	@ (801994c <udp_input+0x21c>)
 8019852:	681a      	ldr	r2, [r3, #0]
 8019854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019856:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8019858:	4a3c      	ldr	r2, [pc, #240]	@ (801994c <udp_input+0x21c>)
 801985a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801985c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801985e:	e008      	b.n	8019872 <udp_input+0x142>
      }
    }

    prev = pcb;
 8019860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019862:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019866:	68db      	ldr	r3, [r3, #12]
 8019868:	627b      	str	r3, [r7, #36]	@ 0x24
 801986a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801986c:	2b00      	cmp	r3, #0
 801986e:	d1a7      	bne.n	80197c0 <udp_input+0x90>
 8019870:	e000      	b.n	8019874 <udp_input+0x144>
        break;
 8019872:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8019874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019876:	2b00      	cmp	r3, #0
 8019878:	d101      	bne.n	801987e <udp_input+0x14e>
    pcb = uncon_pcb;
 801987a:	69fb      	ldr	r3, [r7, #28]
 801987c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801987e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019880:	2b00      	cmp	r3, #0
 8019882:	d002      	beq.n	801988a <udp_input+0x15a>
    for_us = 1;
 8019884:	2301      	movs	r3, #1
 8019886:	76fb      	strb	r3, [r7, #27]
 8019888:	e00a      	b.n	80198a0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801988a:	683b      	ldr	r3, [r7, #0]
 801988c:	3304      	adds	r3, #4
 801988e:	681a      	ldr	r2, [r3, #0]
 8019890:	4b2d      	ldr	r3, [pc, #180]	@ (8019948 <udp_input+0x218>)
 8019892:	695b      	ldr	r3, [r3, #20]
 8019894:	429a      	cmp	r2, r3
 8019896:	bf0c      	ite	eq
 8019898:	2301      	moveq	r3, #1
 801989a:	2300      	movne	r3, #0
 801989c:	b2db      	uxtb	r3, r3
 801989e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80198a0:	7efb      	ldrb	r3, [r7, #27]
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	d041      	beq.n	801992a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80198a6:	2108      	movs	r1, #8
 80198a8:	6878      	ldr	r0, [r7, #4]
 80198aa:	f7f9 f977 	bl	8012b9c <pbuf_remove_header>
 80198ae:	4603      	mov	r3, r0
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d00a      	beq.n	80198ca <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80198b4:	4b20      	ldr	r3, [pc, #128]	@ (8019938 <udp_input+0x208>)
 80198b6:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80198ba:	4925      	ldr	r1, [pc, #148]	@ (8019950 <udp_input+0x220>)
 80198bc:	4820      	ldr	r0, [pc, #128]	@ (8019940 <udp_input+0x210>)
 80198be:	f003 fd85 	bl	801d3cc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80198c2:	6878      	ldr	r0, [r7, #4]
 80198c4:	f7f9 f9f0 	bl	8012ca8 <pbuf_free>
      goto end;
 80198c8:	e032      	b.n	8019930 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80198ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d012      	beq.n	80198f6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80198d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198d2:	699b      	ldr	r3, [r3, #24]
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	d00a      	beq.n	80198ee <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80198d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198da:	699c      	ldr	r4, [r3, #24]
 80198dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198de:	69d8      	ldr	r0, [r3, #28]
 80198e0:	8a3b      	ldrh	r3, [r7, #16]
 80198e2:	9300      	str	r3, [sp, #0]
 80198e4:	4b1b      	ldr	r3, [pc, #108]	@ (8019954 <udp_input+0x224>)
 80198e6:	687a      	ldr	r2, [r7, #4]
 80198e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80198ea:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80198ec:	e021      	b.n	8019932 <udp_input+0x202>
        pbuf_free(p);
 80198ee:	6878      	ldr	r0, [r7, #4]
 80198f0:	f7f9 f9da 	bl	8012ca8 <pbuf_free>
        goto end;
 80198f4:	e01c      	b.n	8019930 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80198f6:	7cfb      	ldrb	r3, [r7, #19]
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d112      	bne.n	8019922 <udp_input+0x1f2>
 80198fc:	4b12      	ldr	r3, [pc, #72]	@ (8019948 <udp_input+0x218>)
 80198fe:	695b      	ldr	r3, [r3, #20]
 8019900:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019904:	2be0      	cmp	r3, #224	@ 0xe0
 8019906:	d00c      	beq.n	8019922 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8019908:	4b0f      	ldr	r3, [pc, #60]	@ (8019948 <udp_input+0x218>)
 801990a:	899b      	ldrh	r3, [r3, #12]
 801990c:	3308      	adds	r3, #8
 801990e:	b29b      	uxth	r3, r3
 8019910:	b21b      	sxth	r3, r3
 8019912:	4619      	mov	r1, r3
 8019914:	6878      	ldr	r0, [r7, #4]
 8019916:	f7f9 f9b4 	bl	8012c82 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801991a:	2103      	movs	r1, #3
 801991c:	6878      	ldr	r0, [r7, #4]
 801991e:	f001 f9a9 	bl	801ac74 <icmp_dest_unreach>
      pbuf_free(p);
 8019922:	6878      	ldr	r0, [r7, #4]
 8019924:	f7f9 f9c0 	bl	8012ca8 <pbuf_free>
  return;
 8019928:	e003      	b.n	8019932 <udp_input+0x202>
    pbuf_free(p);
 801992a:	6878      	ldr	r0, [r7, #4]
 801992c:	f7f9 f9bc 	bl	8012ca8 <pbuf_free>
  return;
 8019930:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019932:	372c      	adds	r7, #44	@ 0x2c
 8019934:	46bd      	mov	sp, r7
 8019936:	bd90      	pop	{r4, r7, pc}
 8019938:	08021208 	.word	0x08021208
 801993c:	080212ac 	.word	0x080212ac
 8019940:	0802125c 	.word	0x0802125c
 8019944:	080212c4 	.word	0x080212c4
 8019948:	2000b35c 	.word	0x2000b35c
 801994c:	2000e4b8 	.word	0x2000e4b8
 8019950:	080212e0 	.word	0x080212e0
 8019954:	2000b36c 	.word	0x2000b36c

08019958 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019958:	b580      	push	{r7, lr}
 801995a:	b086      	sub	sp, #24
 801995c:	af00      	add	r7, sp, #0
 801995e:	60f8      	str	r0, [r7, #12]
 8019960:	60b9      	str	r1, [r7, #8]
 8019962:	4613      	mov	r3, r2
 8019964:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019966:	68bb      	ldr	r3, [r7, #8]
 8019968:	2b00      	cmp	r3, #0
 801996a:	d101      	bne.n	8019970 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801996c:	4b39      	ldr	r3, [pc, #228]	@ (8019a54 <udp_bind+0xfc>)
 801996e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	2b00      	cmp	r3, #0
 8019974:	d109      	bne.n	801998a <udp_bind+0x32>
 8019976:	4b38      	ldr	r3, [pc, #224]	@ (8019a58 <udp_bind+0x100>)
 8019978:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801997c:	4937      	ldr	r1, [pc, #220]	@ (8019a5c <udp_bind+0x104>)
 801997e:	4838      	ldr	r0, [pc, #224]	@ (8019a60 <udp_bind+0x108>)
 8019980:	f003 fd24 	bl	801d3cc <iprintf>
 8019984:	f06f 030f 	mvn.w	r3, #15
 8019988:	e060      	b.n	8019a4c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801998a:	2300      	movs	r3, #0
 801998c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801998e:	4b35      	ldr	r3, [pc, #212]	@ (8019a64 <udp_bind+0x10c>)
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	617b      	str	r3, [r7, #20]
 8019994:	e009      	b.n	80199aa <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8019996:	68fa      	ldr	r2, [r7, #12]
 8019998:	697b      	ldr	r3, [r7, #20]
 801999a:	429a      	cmp	r2, r3
 801999c:	d102      	bne.n	80199a4 <udp_bind+0x4c>
      rebind = 1;
 801999e:	2301      	movs	r3, #1
 80199a0:	74fb      	strb	r3, [r7, #19]
      break;
 80199a2:	e005      	b.n	80199b0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80199a4:	697b      	ldr	r3, [r7, #20]
 80199a6:	68db      	ldr	r3, [r3, #12]
 80199a8:	617b      	str	r3, [r7, #20]
 80199aa:	697b      	ldr	r3, [r7, #20]
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d1f2      	bne.n	8019996 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80199b0:	88fb      	ldrh	r3, [r7, #6]
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d109      	bne.n	80199ca <udp_bind+0x72>
    port = udp_new_port();
 80199b6:	f7ff fe1f 	bl	80195f8 <udp_new_port>
 80199ba:	4603      	mov	r3, r0
 80199bc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80199be:	88fb      	ldrh	r3, [r7, #6]
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d12c      	bne.n	8019a1e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80199c4:	f06f 0307 	mvn.w	r3, #7
 80199c8:	e040      	b.n	8019a4c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80199ca:	4b26      	ldr	r3, [pc, #152]	@ (8019a64 <udp_bind+0x10c>)
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	617b      	str	r3, [r7, #20]
 80199d0:	e022      	b.n	8019a18 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80199d2:	68fa      	ldr	r2, [r7, #12]
 80199d4:	697b      	ldr	r3, [r7, #20]
 80199d6:	429a      	cmp	r2, r3
 80199d8:	d01b      	beq.n	8019a12 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80199da:	697b      	ldr	r3, [r7, #20]
 80199dc:	8a5b      	ldrh	r3, [r3, #18]
 80199de:	88fa      	ldrh	r2, [r7, #6]
 80199e0:	429a      	cmp	r2, r3
 80199e2:	d116      	bne.n	8019a12 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80199e4:	697b      	ldr	r3, [r7, #20]
 80199e6:	681a      	ldr	r2, [r3, #0]
 80199e8:	68bb      	ldr	r3, [r7, #8]
 80199ea:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80199ec:	429a      	cmp	r2, r3
 80199ee:	d00d      	beq.n	8019a0c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80199f0:	68bb      	ldr	r3, [r7, #8]
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d00a      	beq.n	8019a0c <udp_bind+0xb4>
 80199f6:	68bb      	ldr	r3, [r7, #8]
 80199f8:	681b      	ldr	r3, [r3, #0]
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	d006      	beq.n	8019a0c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80199fe:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d003      	beq.n	8019a0c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019a04:	697b      	ldr	r3, [r7, #20]
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d102      	bne.n	8019a12 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8019a0c:	f06f 0307 	mvn.w	r3, #7
 8019a10:	e01c      	b.n	8019a4c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019a12:	697b      	ldr	r3, [r7, #20]
 8019a14:	68db      	ldr	r3, [r3, #12]
 8019a16:	617b      	str	r3, [r7, #20]
 8019a18:	697b      	ldr	r3, [r7, #20]
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d1d9      	bne.n	80199d2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8019a1e:	68bb      	ldr	r3, [r7, #8]
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d002      	beq.n	8019a2a <udp_bind+0xd2>
 8019a24:	68bb      	ldr	r3, [r7, #8]
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	e000      	b.n	8019a2c <udp_bind+0xd4>
 8019a2a:	2300      	movs	r3, #0
 8019a2c:	68fa      	ldr	r2, [r7, #12]
 8019a2e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019a30:	68fb      	ldr	r3, [r7, #12]
 8019a32:	88fa      	ldrh	r2, [r7, #6]
 8019a34:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8019a36:	7cfb      	ldrb	r3, [r7, #19]
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d106      	bne.n	8019a4a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8019a3c:	4b09      	ldr	r3, [pc, #36]	@ (8019a64 <udp_bind+0x10c>)
 8019a3e:	681a      	ldr	r2, [r3, #0]
 8019a40:	68fb      	ldr	r3, [r7, #12]
 8019a42:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8019a44:	4a07      	ldr	r2, [pc, #28]	@ (8019a64 <udp_bind+0x10c>)
 8019a46:	68fb      	ldr	r3, [r7, #12]
 8019a48:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8019a4a:	2300      	movs	r3, #0
}
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	3718      	adds	r7, #24
 8019a50:	46bd      	mov	sp, r7
 8019a52:	bd80      	pop	{r7, pc}
 8019a54:	080334d4 	.word	0x080334d4
 8019a58:	08021208 	.word	0x08021208
 8019a5c:	080214d0 	.word	0x080214d0
 8019a60:	0802125c 	.word	0x0802125c
 8019a64:	2000e4b8 	.word	0x2000e4b8

08019a68 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8019a68:	b580      	push	{r7, lr}
 8019a6a:	b084      	sub	sp, #16
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	60f8      	str	r0, [r7, #12]
 8019a70:	60b9      	str	r1, [r7, #8]
 8019a72:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	d107      	bne.n	8019a8a <udp_recv+0x22>
 8019a7a:	4b08      	ldr	r3, [pc, #32]	@ (8019a9c <udp_recv+0x34>)
 8019a7c:	f240 428a 	movw	r2, #1162	@ 0x48a
 8019a80:	4907      	ldr	r1, [pc, #28]	@ (8019aa0 <udp_recv+0x38>)
 8019a82:	4808      	ldr	r0, [pc, #32]	@ (8019aa4 <udp_recv+0x3c>)
 8019a84:	f003 fca2 	bl	801d3cc <iprintf>
 8019a88:	e005      	b.n	8019a96 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8019a8a:	68fb      	ldr	r3, [r7, #12]
 8019a8c:	68ba      	ldr	r2, [r7, #8]
 8019a8e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	687a      	ldr	r2, [r7, #4]
 8019a94:	61da      	str	r2, [r3, #28]
}
 8019a96:	3710      	adds	r7, #16
 8019a98:	46bd      	mov	sp, r7
 8019a9a:	bd80      	pop	{r7, pc}
 8019a9c:	08021208 	.word	0x08021208
 8019aa0:	0802153c 	.word	0x0802153c
 8019aa4:	0802125c 	.word	0x0802125c

08019aa8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8019aa8:	b580      	push	{r7, lr}
 8019aaa:	b084      	sub	sp, #16
 8019aac:	af00      	add	r7, sp, #0
 8019aae:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d107      	bne.n	8019ac6 <udp_remove+0x1e>
 8019ab6:	4b19      	ldr	r3, [pc, #100]	@ (8019b1c <udp_remove+0x74>)
 8019ab8:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8019abc:	4918      	ldr	r1, [pc, #96]	@ (8019b20 <udp_remove+0x78>)
 8019abe:	4819      	ldr	r0, [pc, #100]	@ (8019b24 <udp_remove+0x7c>)
 8019ac0:	f003 fc84 	bl	801d3cc <iprintf>
 8019ac4:	e026      	b.n	8019b14 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8019ac6:	4b18      	ldr	r3, [pc, #96]	@ (8019b28 <udp_remove+0x80>)
 8019ac8:	681b      	ldr	r3, [r3, #0]
 8019aca:	687a      	ldr	r2, [r7, #4]
 8019acc:	429a      	cmp	r2, r3
 8019ace:	d105      	bne.n	8019adc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8019ad0:	4b15      	ldr	r3, [pc, #84]	@ (8019b28 <udp_remove+0x80>)
 8019ad2:	681b      	ldr	r3, [r3, #0]
 8019ad4:	68db      	ldr	r3, [r3, #12]
 8019ad6:	4a14      	ldr	r2, [pc, #80]	@ (8019b28 <udp_remove+0x80>)
 8019ad8:	6013      	str	r3, [r2, #0]
 8019ada:	e017      	b.n	8019b0c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019adc:	4b12      	ldr	r3, [pc, #72]	@ (8019b28 <udp_remove+0x80>)
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	60fb      	str	r3, [r7, #12]
 8019ae2:	e010      	b.n	8019b06 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8019ae4:	68fb      	ldr	r3, [r7, #12]
 8019ae6:	68db      	ldr	r3, [r3, #12]
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d009      	beq.n	8019b00 <udp_remove+0x58>
 8019aec:	68fb      	ldr	r3, [r7, #12]
 8019aee:	68db      	ldr	r3, [r3, #12]
 8019af0:	687a      	ldr	r2, [r7, #4]
 8019af2:	429a      	cmp	r2, r3
 8019af4:	d104      	bne.n	8019b00 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	68da      	ldr	r2, [r3, #12]
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	60da      	str	r2, [r3, #12]
        break;
 8019afe:	e005      	b.n	8019b0c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	68db      	ldr	r3, [r3, #12]
 8019b04:	60fb      	str	r3, [r7, #12]
 8019b06:	68fb      	ldr	r3, [r7, #12]
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d1eb      	bne.n	8019ae4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8019b0c:	6879      	ldr	r1, [r7, #4]
 8019b0e:	2000      	movs	r0, #0
 8019b10:	f7f8 fa26 	bl	8011f60 <memp_free>
}
 8019b14:	3710      	adds	r7, #16
 8019b16:	46bd      	mov	sp, r7
 8019b18:	bd80      	pop	{r7, pc}
 8019b1a:	bf00      	nop
 8019b1c:	08021208 	.word	0x08021208
 8019b20:	08021554 	.word	0x08021554
 8019b24:	0802125c 	.word	0x0802125c
 8019b28:	2000e4b8 	.word	0x2000e4b8

08019b2c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8019b2c:	b580      	push	{r7, lr}
 8019b2e:	b082      	sub	sp, #8
 8019b30:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8019b32:	2000      	movs	r0, #0
 8019b34:	f7f8 f99e 	bl	8011e74 <memp_malloc>
 8019b38:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d007      	beq.n	8019b50 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8019b40:	2220      	movs	r2, #32
 8019b42:	2100      	movs	r1, #0
 8019b44:	6878      	ldr	r0, [r7, #4]
 8019b46:	f003 fce2 	bl	801d50e <memset>
    pcb->ttl = UDP_TTL;
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	22ff      	movs	r2, #255	@ 0xff
 8019b4e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8019b50:	687b      	ldr	r3, [r7, #4]
}
 8019b52:	4618      	mov	r0, r3
 8019b54:	3708      	adds	r7, #8
 8019b56:	46bd      	mov	sp, r7
 8019b58:	bd80      	pop	{r7, pc}

08019b5a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8019b5a:	b580      	push	{r7, lr}
 8019b5c:	b084      	sub	sp, #16
 8019b5e:	af00      	add	r7, sp, #0
 8019b60:	4603      	mov	r3, r0
 8019b62:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8019b64:	f7ff ffe2 	bl	8019b2c <udp_new>
 8019b68:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8019b6a:	68fb      	ldr	r3, [r7, #12]
}
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	3710      	adds	r7, #16
 8019b70:	46bd      	mov	sp, r7
 8019b72:	bd80      	pop	{r7, pc}

08019b74 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019b74:	b480      	push	{r7}
 8019b76:	b085      	sub	sp, #20
 8019b78:	af00      	add	r7, sp, #0
 8019b7a:	6078      	str	r0, [r7, #4]
 8019b7c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d01e      	beq.n	8019bc2 <udp_netif_ip_addr_changed+0x4e>
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	2b00      	cmp	r3, #0
 8019b8a:	d01a      	beq.n	8019bc2 <udp_netif_ip_addr_changed+0x4e>
 8019b8c:	683b      	ldr	r3, [r7, #0]
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d017      	beq.n	8019bc2 <udp_netif_ip_addr_changed+0x4e>
 8019b92:	683b      	ldr	r3, [r7, #0]
 8019b94:	681b      	ldr	r3, [r3, #0]
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d013      	beq.n	8019bc2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8019bd0 <udp_netif_ip_addr_changed+0x5c>)
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	60fb      	str	r3, [r7, #12]
 8019ba0:	e00c      	b.n	8019bbc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	681a      	ldr	r2, [r3, #0]
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	429a      	cmp	r2, r3
 8019bac:	d103      	bne.n	8019bb6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8019bae:	683b      	ldr	r3, [r7, #0]
 8019bb0:	681a      	ldr	r2, [r3, #0]
 8019bb2:	68fb      	ldr	r3, [r7, #12]
 8019bb4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019bb6:	68fb      	ldr	r3, [r7, #12]
 8019bb8:	68db      	ldr	r3, [r3, #12]
 8019bba:	60fb      	str	r3, [r7, #12]
 8019bbc:	68fb      	ldr	r3, [r7, #12]
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d1ef      	bne.n	8019ba2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8019bc2:	bf00      	nop
 8019bc4:	3714      	adds	r7, #20
 8019bc6:	46bd      	mov	sp, r7
 8019bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bcc:	4770      	bx	lr
 8019bce:	bf00      	nop
 8019bd0:	2000e4b8 	.word	0x2000e4b8

08019bd4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8019bd4:	b580      	push	{r7, lr}
 8019bd6:	b082      	sub	sp, #8
 8019bd8:	af00      	add	r7, sp, #0
 8019bda:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8019bdc:	4915      	ldr	r1, [pc, #84]	@ (8019c34 <etharp_free_entry+0x60>)
 8019bde:	687a      	ldr	r2, [r7, #4]
 8019be0:	4613      	mov	r3, r2
 8019be2:	005b      	lsls	r3, r3, #1
 8019be4:	4413      	add	r3, r2
 8019be6:	00db      	lsls	r3, r3, #3
 8019be8:	440b      	add	r3, r1
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d013      	beq.n	8019c18 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8019bf0:	4910      	ldr	r1, [pc, #64]	@ (8019c34 <etharp_free_entry+0x60>)
 8019bf2:	687a      	ldr	r2, [r7, #4]
 8019bf4:	4613      	mov	r3, r2
 8019bf6:	005b      	lsls	r3, r3, #1
 8019bf8:	4413      	add	r3, r2
 8019bfa:	00db      	lsls	r3, r3, #3
 8019bfc:	440b      	add	r3, r1
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	4618      	mov	r0, r3
 8019c02:	f7f9 f851 	bl	8012ca8 <pbuf_free>
    arp_table[i].q = NULL;
 8019c06:	490b      	ldr	r1, [pc, #44]	@ (8019c34 <etharp_free_entry+0x60>)
 8019c08:	687a      	ldr	r2, [r7, #4]
 8019c0a:	4613      	mov	r3, r2
 8019c0c:	005b      	lsls	r3, r3, #1
 8019c0e:	4413      	add	r3, r2
 8019c10:	00db      	lsls	r3, r3, #3
 8019c12:	440b      	add	r3, r1
 8019c14:	2200      	movs	r2, #0
 8019c16:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8019c18:	4906      	ldr	r1, [pc, #24]	@ (8019c34 <etharp_free_entry+0x60>)
 8019c1a:	687a      	ldr	r2, [r7, #4]
 8019c1c:	4613      	mov	r3, r2
 8019c1e:	005b      	lsls	r3, r3, #1
 8019c20:	4413      	add	r3, r2
 8019c22:	00db      	lsls	r3, r3, #3
 8019c24:	440b      	add	r3, r1
 8019c26:	3314      	adds	r3, #20
 8019c28:	2200      	movs	r2, #0
 8019c2a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8019c2c:	bf00      	nop
 8019c2e:	3708      	adds	r7, #8
 8019c30:	46bd      	mov	sp, r7
 8019c32:	bd80      	pop	{r7, pc}
 8019c34:	2000e4bc 	.word	0x2000e4bc

08019c38 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8019c38:	b580      	push	{r7, lr}
 8019c3a:	b082      	sub	sp, #8
 8019c3c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019c3e:	2300      	movs	r3, #0
 8019c40:	607b      	str	r3, [r7, #4]
 8019c42:	e096      	b.n	8019d72 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8019c44:	494f      	ldr	r1, [pc, #316]	@ (8019d84 <etharp_tmr+0x14c>)
 8019c46:	687a      	ldr	r2, [r7, #4]
 8019c48:	4613      	mov	r3, r2
 8019c4a:	005b      	lsls	r3, r3, #1
 8019c4c:	4413      	add	r3, r2
 8019c4e:	00db      	lsls	r3, r3, #3
 8019c50:	440b      	add	r3, r1
 8019c52:	3314      	adds	r3, #20
 8019c54:	781b      	ldrb	r3, [r3, #0]
 8019c56:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8019c58:	78fb      	ldrb	r3, [r7, #3]
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	f000 8086 	beq.w	8019d6c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8019c60:	4948      	ldr	r1, [pc, #288]	@ (8019d84 <etharp_tmr+0x14c>)
 8019c62:	687a      	ldr	r2, [r7, #4]
 8019c64:	4613      	mov	r3, r2
 8019c66:	005b      	lsls	r3, r3, #1
 8019c68:	4413      	add	r3, r2
 8019c6a:	00db      	lsls	r3, r3, #3
 8019c6c:	440b      	add	r3, r1
 8019c6e:	3312      	adds	r3, #18
 8019c70:	881b      	ldrh	r3, [r3, #0]
 8019c72:	3301      	adds	r3, #1
 8019c74:	b298      	uxth	r0, r3
 8019c76:	4943      	ldr	r1, [pc, #268]	@ (8019d84 <etharp_tmr+0x14c>)
 8019c78:	687a      	ldr	r2, [r7, #4]
 8019c7a:	4613      	mov	r3, r2
 8019c7c:	005b      	lsls	r3, r3, #1
 8019c7e:	4413      	add	r3, r2
 8019c80:	00db      	lsls	r3, r3, #3
 8019c82:	440b      	add	r3, r1
 8019c84:	3312      	adds	r3, #18
 8019c86:	4602      	mov	r2, r0
 8019c88:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019c8a:	493e      	ldr	r1, [pc, #248]	@ (8019d84 <etharp_tmr+0x14c>)
 8019c8c:	687a      	ldr	r2, [r7, #4]
 8019c8e:	4613      	mov	r3, r2
 8019c90:	005b      	lsls	r3, r3, #1
 8019c92:	4413      	add	r3, r2
 8019c94:	00db      	lsls	r3, r3, #3
 8019c96:	440b      	add	r3, r1
 8019c98:	3312      	adds	r3, #18
 8019c9a:	881b      	ldrh	r3, [r3, #0]
 8019c9c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8019ca0:	d215      	bcs.n	8019cce <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019ca2:	4938      	ldr	r1, [pc, #224]	@ (8019d84 <etharp_tmr+0x14c>)
 8019ca4:	687a      	ldr	r2, [r7, #4]
 8019ca6:	4613      	mov	r3, r2
 8019ca8:	005b      	lsls	r3, r3, #1
 8019caa:	4413      	add	r3, r2
 8019cac:	00db      	lsls	r3, r3, #3
 8019cae:	440b      	add	r3, r1
 8019cb0:	3314      	adds	r3, #20
 8019cb2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019cb4:	2b01      	cmp	r3, #1
 8019cb6:	d10e      	bne.n	8019cd6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8019cb8:	4932      	ldr	r1, [pc, #200]	@ (8019d84 <etharp_tmr+0x14c>)
 8019cba:	687a      	ldr	r2, [r7, #4]
 8019cbc:	4613      	mov	r3, r2
 8019cbe:	005b      	lsls	r3, r3, #1
 8019cc0:	4413      	add	r3, r2
 8019cc2:	00db      	lsls	r3, r3, #3
 8019cc4:	440b      	add	r3, r1
 8019cc6:	3312      	adds	r3, #18
 8019cc8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019cca:	2b04      	cmp	r3, #4
 8019ccc:	d903      	bls.n	8019cd6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8019cce:	6878      	ldr	r0, [r7, #4]
 8019cd0:	f7ff ff80 	bl	8019bd4 <etharp_free_entry>
 8019cd4:	e04a      	b.n	8019d6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8019cd6:	492b      	ldr	r1, [pc, #172]	@ (8019d84 <etharp_tmr+0x14c>)
 8019cd8:	687a      	ldr	r2, [r7, #4]
 8019cda:	4613      	mov	r3, r2
 8019cdc:	005b      	lsls	r3, r3, #1
 8019cde:	4413      	add	r3, r2
 8019ce0:	00db      	lsls	r3, r3, #3
 8019ce2:	440b      	add	r3, r1
 8019ce4:	3314      	adds	r3, #20
 8019ce6:	781b      	ldrb	r3, [r3, #0]
 8019ce8:	2b03      	cmp	r3, #3
 8019cea:	d10a      	bne.n	8019d02 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8019cec:	4925      	ldr	r1, [pc, #148]	@ (8019d84 <etharp_tmr+0x14c>)
 8019cee:	687a      	ldr	r2, [r7, #4]
 8019cf0:	4613      	mov	r3, r2
 8019cf2:	005b      	lsls	r3, r3, #1
 8019cf4:	4413      	add	r3, r2
 8019cf6:	00db      	lsls	r3, r3, #3
 8019cf8:	440b      	add	r3, r1
 8019cfa:	3314      	adds	r3, #20
 8019cfc:	2204      	movs	r2, #4
 8019cfe:	701a      	strb	r2, [r3, #0]
 8019d00:	e034      	b.n	8019d6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8019d02:	4920      	ldr	r1, [pc, #128]	@ (8019d84 <etharp_tmr+0x14c>)
 8019d04:	687a      	ldr	r2, [r7, #4]
 8019d06:	4613      	mov	r3, r2
 8019d08:	005b      	lsls	r3, r3, #1
 8019d0a:	4413      	add	r3, r2
 8019d0c:	00db      	lsls	r3, r3, #3
 8019d0e:	440b      	add	r3, r1
 8019d10:	3314      	adds	r3, #20
 8019d12:	781b      	ldrb	r3, [r3, #0]
 8019d14:	2b04      	cmp	r3, #4
 8019d16:	d10a      	bne.n	8019d2e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8019d18:	491a      	ldr	r1, [pc, #104]	@ (8019d84 <etharp_tmr+0x14c>)
 8019d1a:	687a      	ldr	r2, [r7, #4]
 8019d1c:	4613      	mov	r3, r2
 8019d1e:	005b      	lsls	r3, r3, #1
 8019d20:	4413      	add	r3, r2
 8019d22:	00db      	lsls	r3, r3, #3
 8019d24:	440b      	add	r3, r1
 8019d26:	3314      	adds	r3, #20
 8019d28:	2202      	movs	r2, #2
 8019d2a:	701a      	strb	r2, [r3, #0]
 8019d2c:	e01e      	b.n	8019d6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019d2e:	4915      	ldr	r1, [pc, #84]	@ (8019d84 <etharp_tmr+0x14c>)
 8019d30:	687a      	ldr	r2, [r7, #4]
 8019d32:	4613      	mov	r3, r2
 8019d34:	005b      	lsls	r3, r3, #1
 8019d36:	4413      	add	r3, r2
 8019d38:	00db      	lsls	r3, r3, #3
 8019d3a:	440b      	add	r3, r1
 8019d3c:	3314      	adds	r3, #20
 8019d3e:	781b      	ldrb	r3, [r3, #0]
 8019d40:	2b01      	cmp	r3, #1
 8019d42:	d113      	bne.n	8019d6c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8019d44:	490f      	ldr	r1, [pc, #60]	@ (8019d84 <etharp_tmr+0x14c>)
 8019d46:	687a      	ldr	r2, [r7, #4]
 8019d48:	4613      	mov	r3, r2
 8019d4a:	005b      	lsls	r3, r3, #1
 8019d4c:	4413      	add	r3, r2
 8019d4e:	00db      	lsls	r3, r3, #3
 8019d50:	440b      	add	r3, r1
 8019d52:	3308      	adds	r3, #8
 8019d54:	6818      	ldr	r0, [r3, #0]
 8019d56:	687a      	ldr	r2, [r7, #4]
 8019d58:	4613      	mov	r3, r2
 8019d5a:	005b      	lsls	r3, r3, #1
 8019d5c:	4413      	add	r3, r2
 8019d5e:	00db      	lsls	r3, r3, #3
 8019d60:	4a08      	ldr	r2, [pc, #32]	@ (8019d84 <etharp_tmr+0x14c>)
 8019d62:	4413      	add	r3, r2
 8019d64:	3304      	adds	r3, #4
 8019d66:	4619      	mov	r1, r3
 8019d68:	f000 fe6e 	bl	801aa48 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	3301      	adds	r3, #1
 8019d70:	607b      	str	r3, [r7, #4]
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	2b09      	cmp	r3, #9
 8019d76:	f77f af65 	ble.w	8019c44 <etharp_tmr+0xc>
      }
    }
  }
}
 8019d7a:	bf00      	nop
 8019d7c:	bf00      	nop
 8019d7e:	3708      	adds	r7, #8
 8019d80:	46bd      	mov	sp, r7
 8019d82:	bd80      	pop	{r7, pc}
 8019d84:	2000e4bc 	.word	0x2000e4bc

08019d88 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8019d88:	b580      	push	{r7, lr}
 8019d8a:	b08a      	sub	sp, #40	@ 0x28
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	60f8      	str	r0, [r7, #12]
 8019d90:	460b      	mov	r3, r1
 8019d92:	607a      	str	r2, [r7, #4]
 8019d94:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8019d96:	230a      	movs	r3, #10
 8019d98:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8019d9a:	230a      	movs	r3, #10
 8019d9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8019d9e:	230a      	movs	r3, #10
 8019da0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8019da2:	2300      	movs	r3, #0
 8019da4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8019da6:	230a      	movs	r3, #10
 8019da8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8019daa:	2300      	movs	r3, #0
 8019dac:	83bb      	strh	r3, [r7, #28]
 8019dae:	2300      	movs	r3, #0
 8019db0:	837b      	strh	r3, [r7, #26]
 8019db2:	2300      	movs	r3, #0
 8019db4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019db6:	2300      	movs	r3, #0
 8019db8:	843b      	strh	r3, [r7, #32]
 8019dba:	e0ae      	b.n	8019f1a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8019dbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019dc0:	49a6      	ldr	r1, [pc, #664]	@ (801a05c <etharp_find_entry+0x2d4>)
 8019dc2:	4613      	mov	r3, r2
 8019dc4:	005b      	lsls	r3, r3, #1
 8019dc6:	4413      	add	r3, r2
 8019dc8:	00db      	lsls	r3, r3, #3
 8019dca:	440b      	add	r3, r1
 8019dcc:	3314      	adds	r3, #20
 8019dce:	781b      	ldrb	r3, [r3, #0]
 8019dd0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8019dd2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8019dd6:	2b0a      	cmp	r3, #10
 8019dd8:	d105      	bne.n	8019de6 <etharp_find_entry+0x5e>
 8019dda:	7dfb      	ldrb	r3, [r7, #23]
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d102      	bne.n	8019de6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8019de0:	8c3b      	ldrh	r3, [r7, #32]
 8019de2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8019de4:	e095      	b.n	8019f12 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8019de6:	7dfb      	ldrb	r3, [r7, #23]
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	f000 8092 	beq.w	8019f12 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8019dee:	7dfb      	ldrb	r3, [r7, #23]
 8019df0:	2b01      	cmp	r3, #1
 8019df2:	d009      	beq.n	8019e08 <etharp_find_entry+0x80>
 8019df4:	7dfb      	ldrb	r3, [r7, #23]
 8019df6:	2b01      	cmp	r3, #1
 8019df8:	d806      	bhi.n	8019e08 <etharp_find_entry+0x80>
 8019dfa:	4b99      	ldr	r3, [pc, #612]	@ (801a060 <etharp_find_entry+0x2d8>)
 8019dfc:	f240 1223 	movw	r2, #291	@ 0x123
 8019e00:	4998      	ldr	r1, [pc, #608]	@ (801a064 <etharp_find_entry+0x2dc>)
 8019e02:	4899      	ldr	r0, [pc, #612]	@ (801a068 <etharp_find_entry+0x2e0>)
 8019e04:	f003 fae2 	bl	801d3cc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8019e08:	68fb      	ldr	r3, [r7, #12]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d020      	beq.n	8019e50 <etharp_find_entry+0xc8>
 8019e0e:	68fb      	ldr	r3, [r7, #12]
 8019e10:	6819      	ldr	r1, [r3, #0]
 8019e12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019e16:	4891      	ldr	r0, [pc, #580]	@ (801a05c <etharp_find_entry+0x2d4>)
 8019e18:	4613      	mov	r3, r2
 8019e1a:	005b      	lsls	r3, r3, #1
 8019e1c:	4413      	add	r3, r2
 8019e1e:	00db      	lsls	r3, r3, #3
 8019e20:	4403      	add	r3, r0
 8019e22:	3304      	adds	r3, #4
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	4299      	cmp	r1, r3
 8019e28:	d112      	bne.n	8019e50 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d00c      	beq.n	8019e4a <etharp_find_entry+0xc2>
 8019e30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019e34:	4989      	ldr	r1, [pc, #548]	@ (801a05c <etharp_find_entry+0x2d4>)
 8019e36:	4613      	mov	r3, r2
 8019e38:	005b      	lsls	r3, r3, #1
 8019e3a:	4413      	add	r3, r2
 8019e3c:	00db      	lsls	r3, r3, #3
 8019e3e:	440b      	add	r3, r1
 8019e40:	3308      	adds	r3, #8
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	687a      	ldr	r2, [r7, #4]
 8019e46:	429a      	cmp	r2, r3
 8019e48:	d102      	bne.n	8019e50 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8019e4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019e4e:	e100      	b.n	801a052 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8019e50:	7dfb      	ldrb	r3, [r7, #23]
 8019e52:	2b01      	cmp	r3, #1
 8019e54:	d140      	bne.n	8019ed8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8019e56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019e5a:	4980      	ldr	r1, [pc, #512]	@ (801a05c <etharp_find_entry+0x2d4>)
 8019e5c:	4613      	mov	r3, r2
 8019e5e:	005b      	lsls	r3, r3, #1
 8019e60:	4413      	add	r3, r2
 8019e62:	00db      	lsls	r3, r3, #3
 8019e64:	440b      	add	r3, r1
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d01a      	beq.n	8019ea2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8019e6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019e70:	497a      	ldr	r1, [pc, #488]	@ (801a05c <etharp_find_entry+0x2d4>)
 8019e72:	4613      	mov	r3, r2
 8019e74:	005b      	lsls	r3, r3, #1
 8019e76:	4413      	add	r3, r2
 8019e78:	00db      	lsls	r3, r3, #3
 8019e7a:	440b      	add	r3, r1
 8019e7c:	3312      	adds	r3, #18
 8019e7e:	881b      	ldrh	r3, [r3, #0]
 8019e80:	8bba      	ldrh	r2, [r7, #28]
 8019e82:	429a      	cmp	r2, r3
 8019e84:	d845      	bhi.n	8019f12 <etharp_find_entry+0x18a>
            old_queue = i;
 8019e86:	8c3b      	ldrh	r3, [r7, #32]
 8019e88:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8019e8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019e8e:	4973      	ldr	r1, [pc, #460]	@ (801a05c <etharp_find_entry+0x2d4>)
 8019e90:	4613      	mov	r3, r2
 8019e92:	005b      	lsls	r3, r3, #1
 8019e94:	4413      	add	r3, r2
 8019e96:	00db      	lsls	r3, r3, #3
 8019e98:	440b      	add	r3, r1
 8019e9a:	3312      	adds	r3, #18
 8019e9c:	881b      	ldrh	r3, [r3, #0]
 8019e9e:	83bb      	strh	r3, [r7, #28]
 8019ea0:	e037      	b.n	8019f12 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8019ea2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019ea6:	496d      	ldr	r1, [pc, #436]	@ (801a05c <etharp_find_entry+0x2d4>)
 8019ea8:	4613      	mov	r3, r2
 8019eaa:	005b      	lsls	r3, r3, #1
 8019eac:	4413      	add	r3, r2
 8019eae:	00db      	lsls	r3, r3, #3
 8019eb0:	440b      	add	r3, r1
 8019eb2:	3312      	adds	r3, #18
 8019eb4:	881b      	ldrh	r3, [r3, #0]
 8019eb6:	8b7a      	ldrh	r2, [r7, #26]
 8019eb8:	429a      	cmp	r2, r3
 8019eba:	d82a      	bhi.n	8019f12 <etharp_find_entry+0x18a>
            old_pending = i;
 8019ebc:	8c3b      	ldrh	r3, [r7, #32]
 8019ebe:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8019ec0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019ec4:	4965      	ldr	r1, [pc, #404]	@ (801a05c <etharp_find_entry+0x2d4>)
 8019ec6:	4613      	mov	r3, r2
 8019ec8:	005b      	lsls	r3, r3, #1
 8019eca:	4413      	add	r3, r2
 8019ecc:	00db      	lsls	r3, r3, #3
 8019ece:	440b      	add	r3, r1
 8019ed0:	3312      	adds	r3, #18
 8019ed2:	881b      	ldrh	r3, [r3, #0]
 8019ed4:	837b      	strh	r3, [r7, #26]
 8019ed6:	e01c      	b.n	8019f12 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8019ed8:	7dfb      	ldrb	r3, [r7, #23]
 8019eda:	2b01      	cmp	r3, #1
 8019edc:	d919      	bls.n	8019f12 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8019ede:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019ee2:	495e      	ldr	r1, [pc, #376]	@ (801a05c <etharp_find_entry+0x2d4>)
 8019ee4:	4613      	mov	r3, r2
 8019ee6:	005b      	lsls	r3, r3, #1
 8019ee8:	4413      	add	r3, r2
 8019eea:	00db      	lsls	r3, r3, #3
 8019eec:	440b      	add	r3, r1
 8019eee:	3312      	adds	r3, #18
 8019ef0:	881b      	ldrh	r3, [r3, #0]
 8019ef2:	8b3a      	ldrh	r2, [r7, #24]
 8019ef4:	429a      	cmp	r2, r3
 8019ef6:	d80c      	bhi.n	8019f12 <etharp_find_entry+0x18a>
            old_stable = i;
 8019ef8:	8c3b      	ldrh	r3, [r7, #32]
 8019efa:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8019efc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019f00:	4956      	ldr	r1, [pc, #344]	@ (801a05c <etharp_find_entry+0x2d4>)
 8019f02:	4613      	mov	r3, r2
 8019f04:	005b      	lsls	r3, r3, #1
 8019f06:	4413      	add	r3, r2
 8019f08:	00db      	lsls	r3, r3, #3
 8019f0a:	440b      	add	r3, r1
 8019f0c:	3312      	adds	r3, #18
 8019f0e:	881b      	ldrh	r3, [r3, #0]
 8019f10:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019f12:	8c3b      	ldrh	r3, [r7, #32]
 8019f14:	3301      	adds	r3, #1
 8019f16:	b29b      	uxth	r3, r3
 8019f18:	843b      	strh	r3, [r7, #32]
 8019f1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019f1e:	2b09      	cmp	r3, #9
 8019f20:	f77f af4c 	ble.w	8019dbc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8019f24:	7afb      	ldrb	r3, [r7, #11]
 8019f26:	f003 0302 	and.w	r3, r3, #2
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d108      	bne.n	8019f40 <etharp_find_entry+0x1b8>
 8019f2e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8019f32:	2b0a      	cmp	r3, #10
 8019f34:	d107      	bne.n	8019f46 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8019f36:	7afb      	ldrb	r3, [r7, #11]
 8019f38:	f003 0301 	and.w	r3, r3, #1
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d102      	bne.n	8019f46 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8019f40:	f04f 33ff 	mov.w	r3, #4294967295
 8019f44:	e085      	b.n	801a052 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8019f46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8019f4a:	2b09      	cmp	r3, #9
 8019f4c:	dc02      	bgt.n	8019f54 <etharp_find_entry+0x1cc>
    i = empty;
 8019f4e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019f50:	843b      	strh	r3, [r7, #32]
 8019f52:	e039      	b.n	8019fc8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8019f54:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8019f58:	2b09      	cmp	r3, #9
 8019f5a:	dc14      	bgt.n	8019f86 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8019f5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019f5e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8019f60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019f64:	493d      	ldr	r1, [pc, #244]	@ (801a05c <etharp_find_entry+0x2d4>)
 8019f66:	4613      	mov	r3, r2
 8019f68:	005b      	lsls	r3, r3, #1
 8019f6a:	4413      	add	r3, r2
 8019f6c:	00db      	lsls	r3, r3, #3
 8019f6e:	440b      	add	r3, r1
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d018      	beq.n	8019fa8 <etharp_find_entry+0x220>
 8019f76:	4b3a      	ldr	r3, [pc, #232]	@ (801a060 <etharp_find_entry+0x2d8>)
 8019f78:	f240 126d 	movw	r2, #365	@ 0x16d
 8019f7c:	493b      	ldr	r1, [pc, #236]	@ (801a06c <etharp_find_entry+0x2e4>)
 8019f7e:	483a      	ldr	r0, [pc, #232]	@ (801a068 <etharp_find_entry+0x2e0>)
 8019f80:	f003 fa24 	bl	801d3cc <iprintf>
 8019f84:	e010      	b.n	8019fa8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8019f86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8019f8a:	2b09      	cmp	r3, #9
 8019f8c:	dc02      	bgt.n	8019f94 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8019f8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019f90:	843b      	strh	r3, [r7, #32]
 8019f92:	e009      	b.n	8019fa8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8019f94:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019f98:	2b09      	cmp	r3, #9
 8019f9a:	dc02      	bgt.n	8019fa2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8019f9c:	8bfb      	ldrh	r3, [r7, #30]
 8019f9e:	843b      	strh	r3, [r7, #32]
 8019fa0:	e002      	b.n	8019fa8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8019fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8019fa6:	e054      	b.n	801a052 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019fa8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019fac:	2b09      	cmp	r3, #9
 8019fae:	dd06      	ble.n	8019fbe <etharp_find_entry+0x236>
 8019fb0:	4b2b      	ldr	r3, [pc, #172]	@ (801a060 <etharp_find_entry+0x2d8>)
 8019fb2:	f240 127f 	movw	r2, #383	@ 0x17f
 8019fb6:	492e      	ldr	r1, [pc, #184]	@ (801a070 <etharp_find_entry+0x2e8>)
 8019fb8:	482b      	ldr	r0, [pc, #172]	@ (801a068 <etharp_find_entry+0x2e0>)
 8019fba:	f003 fa07 	bl	801d3cc <iprintf>
    etharp_free_entry(i);
 8019fbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019fc2:	4618      	mov	r0, r3
 8019fc4:	f7ff fe06 	bl	8019bd4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019fc8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019fcc:	2b09      	cmp	r3, #9
 8019fce:	dd06      	ble.n	8019fde <etharp_find_entry+0x256>
 8019fd0:	4b23      	ldr	r3, [pc, #140]	@ (801a060 <etharp_find_entry+0x2d8>)
 8019fd2:	f240 1283 	movw	r2, #387	@ 0x183
 8019fd6:	4926      	ldr	r1, [pc, #152]	@ (801a070 <etharp_find_entry+0x2e8>)
 8019fd8:	4823      	ldr	r0, [pc, #140]	@ (801a068 <etharp_find_entry+0x2e0>)
 8019fda:	f003 f9f7 	bl	801d3cc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8019fde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019fe2:	491e      	ldr	r1, [pc, #120]	@ (801a05c <etharp_find_entry+0x2d4>)
 8019fe4:	4613      	mov	r3, r2
 8019fe6:	005b      	lsls	r3, r3, #1
 8019fe8:	4413      	add	r3, r2
 8019fea:	00db      	lsls	r3, r3, #3
 8019fec:	440b      	add	r3, r1
 8019fee:	3314      	adds	r3, #20
 8019ff0:	781b      	ldrb	r3, [r3, #0]
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	d006      	beq.n	801a004 <etharp_find_entry+0x27c>
 8019ff6:	4b1a      	ldr	r3, [pc, #104]	@ (801a060 <etharp_find_entry+0x2d8>)
 8019ff8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8019ffc:	491d      	ldr	r1, [pc, #116]	@ (801a074 <etharp_find_entry+0x2ec>)
 8019ffe:	481a      	ldr	r0, [pc, #104]	@ (801a068 <etharp_find_entry+0x2e0>)
 801a000:	f003 f9e4 	bl	801d3cc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801a004:	68fb      	ldr	r3, [r7, #12]
 801a006:	2b00      	cmp	r3, #0
 801a008:	d00b      	beq.n	801a022 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801a00a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a00e:	68fb      	ldr	r3, [r7, #12]
 801a010:	6819      	ldr	r1, [r3, #0]
 801a012:	4812      	ldr	r0, [pc, #72]	@ (801a05c <etharp_find_entry+0x2d4>)
 801a014:	4613      	mov	r3, r2
 801a016:	005b      	lsls	r3, r3, #1
 801a018:	4413      	add	r3, r2
 801a01a:	00db      	lsls	r3, r3, #3
 801a01c:	4403      	add	r3, r0
 801a01e:	3304      	adds	r3, #4
 801a020:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801a022:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a026:	490d      	ldr	r1, [pc, #52]	@ (801a05c <etharp_find_entry+0x2d4>)
 801a028:	4613      	mov	r3, r2
 801a02a:	005b      	lsls	r3, r3, #1
 801a02c:	4413      	add	r3, r2
 801a02e:	00db      	lsls	r3, r3, #3
 801a030:	440b      	add	r3, r1
 801a032:	3312      	adds	r3, #18
 801a034:	2200      	movs	r2, #0
 801a036:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801a038:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a03c:	4907      	ldr	r1, [pc, #28]	@ (801a05c <etharp_find_entry+0x2d4>)
 801a03e:	4613      	mov	r3, r2
 801a040:	005b      	lsls	r3, r3, #1
 801a042:	4413      	add	r3, r2
 801a044:	00db      	lsls	r3, r3, #3
 801a046:	440b      	add	r3, r1
 801a048:	3308      	adds	r3, #8
 801a04a:	687a      	ldr	r2, [r7, #4]
 801a04c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801a04e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801a052:	4618      	mov	r0, r3
 801a054:	3728      	adds	r7, #40	@ 0x28
 801a056:	46bd      	mov	sp, r7
 801a058:	bd80      	pop	{r7, pc}
 801a05a:	bf00      	nop
 801a05c:	2000e4bc 	.word	0x2000e4bc
 801a060:	0802156c 	.word	0x0802156c
 801a064:	080215a4 	.word	0x080215a4
 801a068:	080215e4 	.word	0x080215e4
 801a06c:	0802160c 	.word	0x0802160c
 801a070:	08021624 	.word	0x08021624
 801a074:	08021638 	.word	0x08021638

0801a078 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801a078:	b580      	push	{r7, lr}
 801a07a:	b088      	sub	sp, #32
 801a07c:	af02      	add	r7, sp, #8
 801a07e:	60f8      	str	r0, [r7, #12]
 801a080:	60b9      	str	r1, [r7, #8]
 801a082:	607a      	str	r2, [r7, #4]
 801a084:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a086:	68fb      	ldr	r3, [r7, #12]
 801a088:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a08c:	2b06      	cmp	r3, #6
 801a08e:	d006      	beq.n	801a09e <etharp_update_arp_entry+0x26>
 801a090:	4b48      	ldr	r3, [pc, #288]	@ (801a1b4 <etharp_update_arp_entry+0x13c>)
 801a092:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801a096:	4948      	ldr	r1, [pc, #288]	@ (801a1b8 <etharp_update_arp_entry+0x140>)
 801a098:	4848      	ldr	r0, [pc, #288]	@ (801a1bc <etharp_update_arp_entry+0x144>)
 801a09a:	f003 f997 	bl	801d3cc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801a09e:	68bb      	ldr	r3, [r7, #8]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d012      	beq.n	801a0ca <etharp_update_arp_entry+0x52>
 801a0a4:	68bb      	ldr	r3, [r7, #8]
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	d00e      	beq.n	801a0ca <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a0ac:	68bb      	ldr	r3, [r7, #8]
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	68f9      	ldr	r1, [r7, #12]
 801a0b2:	4618      	mov	r0, r3
 801a0b4:	f001 f8fe 	bl	801b2b4 <ip4_addr_isbroadcast_u32>
 801a0b8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	d105      	bne.n	801a0ca <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801a0be:	68bb      	ldr	r3, [r7, #8]
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a0c6:	2be0      	cmp	r3, #224	@ 0xe0
 801a0c8:	d102      	bne.n	801a0d0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a0ca:	f06f 030f 	mvn.w	r3, #15
 801a0ce:	e06c      	b.n	801a1aa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801a0d0:	78fb      	ldrb	r3, [r7, #3]
 801a0d2:	68fa      	ldr	r2, [r7, #12]
 801a0d4:	4619      	mov	r1, r3
 801a0d6:	68b8      	ldr	r0, [r7, #8]
 801a0d8:	f7ff fe56 	bl	8019d88 <etharp_find_entry>
 801a0dc:	4603      	mov	r3, r0
 801a0de:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801a0e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	da02      	bge.n	801a0ee <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801a0e8:	8afb      	ldrh	r3, [r7, #22]
 801a0ea:	b25b      	sxtb	r3, r3
 801a0ec:	e05d      	b.n	801a1aa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801a0ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a0f2:	4933      	ldr	r1, [pc, #204]	@ (801a1c0 <etharp_update_arp_entry+0x148>)
 801a0f4:	4613      	mov	r3, r2
 801a0f6:	005b      	lsls	r3, r3, #1
 801a0f8:	4413      	add	r3, r2
 801a0fa:	00db      	lsls	r3, r3, #3
 801a0fc:	440b      	add	r3, r1
 801a0fe:	3314      	adds	r3, #20
 801a100:	2202      	movs	r2, #2
 801a102:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801a104:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a108:	492d      	ldr	r1, [pc, #180]	@ (801a1c0 <etharp_update_arp_entry+0x148>)
 801a10a:	4613      	mov	r3, r2
 801a10c:	005b      	lsls	r3, r3, #1
 801a10e:	4413      	add	r3, r2
 801a110:	00db      	lsls	r3, r3, #3
 801a112:	440b      	add	r3, r1
 801a114:	3308      	adds	r3, #8
 801a116:	68fa      	ldr	r2, [r7, #12]
 801a118:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801a11a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a11e:	4613      	mov	r3, r2
 801a120:	005b      	lsls	r3, r3, #1
 801a122:	4413      	add	r3, r2
 801a124:	00db      	lsls	r3, r3, #3
 801a126:	3308      	adds	r3, #8
 801a128:	4a25      	ldr	r2, [pc, #148]	@ (801a1c0 <etharp_update_arp_entry+0x148>)
 801a12a:	4413      	add	r3, r2
 801a12c:	3304      	adds	r3, #4
 801a12e:	2206      	movs	r2, #6
 801a130:	6879      	ldr	r1, [r7, #4]
 801a132:	4618      	mov	r0, r3
 801a134:	f003 fae1 	bl	801d6fa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801a138:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a13c:	4920      	ldr	r1, [pc, #128]	@ (801a1c0 <etharp_update_arp_entry+0x148>)
 801a13e:	4613      	mov	r3, r2
 801a140:	005b      	lsls	r3, r3, #1
 801a142:	4413      	add	r3, r2
 801a144:	00db      	lsls	r3, r3, #3
 801a146:	440b      	add	r3, r1
 801a148:	3312      	adds	r3, #18
 801a14a:	2200      	movs	r2, #0
 801a14c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801a14e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a152:	491b      	ldr	r1, [pc, #108]	@ (801a1c0 <etharp_update_arp_entry+0x148>)
 801a154:	4613      	mov	r3, r2
 801a156:	005b      	lsls	r3, r3, #1
 801a158:	4413      	add	r3, r2
 801a15a:	00db      	lsls	r3, r3, #3
 801a15c:	440b      	add	r3, r1
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	2b00      	cmp	r3, #0
 801a162:	d021      	beq.n	801a1a8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801a164:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a168:	4915      	ldr	r1, [pc, #84]	@ (801a1c0 <etharp_update_arp_entry+0x148>)
 801a16a:	4613      	mov	r3, r2
 801a16c:	005b      	lsls	r3, r3, #1
 801a16e:	4413      	add	r3, r2
 801a170:	00db      	lsls	r3, r3, #3
 801a172:	440b      	add	r3, r1
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801a178:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a17c:	4910      	ldr	r1, [pc, #64]	@ (801a1c0 <etharp_update_arp_entry+0x148>)
 801a17e:	4613      	mov	r3, r2
 801a180:	005b      	lsls	r3, r3, #1
 801a182:	4413      	add	r3, r2
 801a184:	00db      	lsls	r3, r3, #3
 801a186:	440b      	add	r3, r1
 801a188:	2200      	movs	r2, #0
 801a18a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801a18c:	68fb      	ldr	r3, [r7, #12]
 801a18e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801a192:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a196:	9300      	str	r3, [sp, #0]
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	6939      	ldr	r1, [r7, #16]
 801a19c:	68f8      	ldr	r0, [r7, #12]
 801a19e:	f001 ff97 	bl	801c0d0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801a1a2:	6938      	ldr	r0, [r7, #16]
 801a1a4:	f7f8 fd80 	bl	8012ca8 <pbuf_free>
  }
  return ERR_OK;
 801a1a8:	2300      	movs	r3, #0
}
 801a1aa:	4618      	mov	r0, r3
 801a1ac:	3718      	adds	r7, #24
 801a1ae:	46bd      	mov	sp, r7
 801a1b0:	bd80      	pop	{r7, pc}
 801a1b2:	bf00      	nop
 801a1b4:	0802156c 	.word	0x0802156c
 801a1b8:	08021664 	.word	0x08021664
 801a1bc:	080215e4 	.word	0x080215e4
 801a1c0:	2000e4bc 	.word	0x2000e4bc

0801a1c4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801a1c4:	b580      	push	{r7, lr}
 801a1c6:	b084      	sub	sp, #16
 801a1c8:	af00      	add	r7, sp, #0
 801a1ca:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a1cc:	2300      	movs	r3, #0
 801a1ce:	60fb      	str	r3, [r7, #12]
 801a1d0:	e01e      	b.n	801a210 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801a1d2:	4913      	ldr	r1, [pc, #76]	@ (801a220 <etharp_cleanup_netif+0x5c>)
 801a1d4:	68fa      	ldr	r2, [r7, #12]
 801a1d6:	4613      	mov	r3, r2
 801a1d8:	005b      	lsls	r3, r3, #1
 801a1da:	4413      	add	r3, r2
 801a1dc:	00db      	lsls	r3, r3, #3
 801a1de:	440b      	add	r3, r1
 801a1e0:	3314      	adds	r3, #20
 801a1e2:	781b      	ldrb	r3, [r3, #0]
 801a1e4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801a1e6:	7afb      	ldrb	r3, [r7, #11]
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d00e      	beq.n	801a20a <etharp_cleanup_netif+0x46>
 801a1ec:	490c      	ldr	r1, [pc, #48]	@ (801a220 <etharp_cleanup_netif+0x5c>)
 801a1ee:	68fa      	ldr	r2, [r7, #12]
 801a1f0:	4613      	mov	r3, r2
 801a1f2:	005b      	lsls	r3, r3, #1
 801a1f4:	4413      	add	r3, r2
 801a1f6:	00db      	lsls	r3, r3, #3
 801a1f8:	440b      	add	r3, r1
 801a1fa:	3308      	adds	r3, #8
 801a1fc:	681b      	ldr	r3, [r3, #0]
 801a1fe:	687a      	ldr	r2, [r7, #4]
 801a200:	429a      	cmp	r2, r3
 801a202:	d102      	bne.n	801a20a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801a204:	68f8      	ldr	r0, [r7, #12]
 801a206:	f7ff fce5 	bl	8019bd4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a20a:	68fb      	ldr	r3, [r7, #12]
 801a20c:	3301      	adds	r3, #1
 801a20e:	60fb      	str	r3, [r7, #12]
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	2b09      	cmp	r3, #9
 801a214:	dddd      	ble.n	801a1d2 <etharp_cleanup_netif+0xe>
    }
  }
}
 801a216:	bf00      	nop
 801a218:	bf00      	nop
 801a21a:	3710      	adds	r7, #16
 801a21c:	46bd      	mov	sp, r7
 801a21e:	bd80      	pop	{r7, pc}
 801a220:	2000e4bc 	.word	0x2000e4bc

0801a224 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801a224:	b5b0      	push	{r4, r5, r7, lr}
 801a226:	b08a      	sub	sp, #40	@ 0x28
 801a228:	af04      	add	r7, sp, #16
 801a22a:	6078      	str	r0, [r7, #4]
 801a22c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a22e:	683b      	ldr	r3, [r7, #0]
 801a230:	2b00      	cmp	r3, #0
 801a232:	d107      	bne.n	801a244 <etharp_input+0x20>
 801a234:	4b3d      	ldr	r3, [pc, #244]	@ (801a32c <etharp_input+0x108>)
 801a236:	f240 228a 	movw	r2, #650	@ 0x28a
 801a23a:	493d      	ldr	r1, [pc, #244]	@ (801a330 <etharp_input+0x10c>)
 801a23c:	483d      	ldr	r0, [pc, #244]	@ (801a334 <etharp_input+0x110>)
 801a23e:	f003 f8c5 	bl	801d3cc <iprintf>
 801a242:	e06f      	b.n	801a324 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	685b      	ldr	r3, [r3, #4]
 801a248:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a24a:	693b      	ldr	r3, [r7, #16]
 801a24c:	881b      	ldrh	r3, [r3, #0]
 801a24e:	b29b      	uxth	r3, r3
 801a250:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a254:	d10c      	bne.n	801a270 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a256:	693b      	ldr	r3, [r7, #16]
 801a258:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a25a:	2b06      	cmp	r3, #6
 801a25c:	d108      	bne.n	801a270 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a25e:	693b      	ldr	r3, [r7, #16]
 801a260:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a262:	2b04      	cmp	r3, #4
 801a264:	d104      	bne.n	801a270 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a266:	693b      	ldr	r3, [r7, #16]
 801a268:	885b      	ldrh	r3, [r3, #2]
 801a26a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a26c:	2b08      	cmp	r3, #8
 801a26e:	d003      	beq.n	801a278 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a270:	6878      	ldr	r0, [r7, #4]
 801a272:	f7f8 fd19 	bl	8012ca8 <pbuf_free>
    return;
 801a276:	e055      	b.n	801a324 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a278:	693b      	ldr	r3, [r7, #16]
 801a27a:	330e      	adds	r3, #14
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a280:	693b      	ldr	r3, [r7, #16]
 801a282:	3318      	adds	r3, #24
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a288:	683b      	ldr	r3, [r7, #0]
 801a28a:	3304      	adds	r3, #4
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d102      	bne.n	801a298 <etharp_input+0x74>
    for_us = 0;
 801a292:	2300      	movs	r3, #0
 801a294:	75fb      	strb	r3, [r7, #23]
 801a296:	e009      	b.n	801a2ac <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a298:	68ba      	ldr	r2, [r7, #8]
 801a29a:	683b      	ldr	r3, [r7, #0]
 801a29c:	3304      	adds	r3, #4
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	429a      	cmp	r2, r3
 801a2a2:	bf0c      	ite	eq
 801a2a4:	2301      	moveq	r3, #1
 801a2a6:	2300      	movne	r3, #0
 801a2a8:	b2db      	uxtb	r3, r3
 801a2aa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a2ac:	693b      	ldr	r3, [r7, #16]
 801a2ae:	f103 0208 	add.w	r2, r3, #8
 801a2b2:	7dfb      	ldrb	r3, [r7, #23]
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d001      	beq.n	801a2bc <etharp_input+0x98>
 801a2b8:	2301      	movs	r3, #1
 801a2ba:	e000      	b.n	801a2be <etharp_input+0x9a>
 801a2bc:	2302      	movs	r3, #2
 801a2be:	f107 010c 	add.w	r1, r7, #12
 801a2c2:	6838      	ldr	r0, [r7, #0]
 801a2c4:	f7ff fed8 	bl	801a078 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a2c8:	693b      	ldr	r3, [r7, #16]
 801a2ca:	88db      	ldrh	r3, [r3, #6]
 801a2cc:	b29b      	uxth	r3, r3
 801a2ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a2d2:	d003      	beq.n	801a2dc <etharp_input+0xb8>
 801a2d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a2d8:	d01e      	beq.n	801a318 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a2da:	e020      	b.n	801a31e <etharp_input+0xfa>
      if (for_us) {
 801a2dc:	7dfb      	ldrb	r3, [r7, #23]
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d01c      	beq.n	801a31c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a2e2:	683b      	ldr	r3, [r7, #0]
 801a2e4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801a2e8:	693b      	ldr	r3, [r7, #16]
 801a2ea:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a2ee:	683b      	ldr	r3, [r7, #0]
 801a2f0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801a2f4:	683b      	ldr	r3, [r7, #0]
 801a2f6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a2f8:	693a      	ldr	r2, [r7, #16]
 801a2fa:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a2fc:	2102      	movs	r1, #2
 801a2fe:	9103      	str	r1, [sp, #12]
 801a300:	f107 010c 	add.w	r1, r7, #12
 801a304:	9102      	str	r1, [sp, #8]
 801a306:	9201      	str	r2, [sp, #4]
 801a308:	9300      	str	r3, [sp, #0]
 801a30a:	462b      	mov	r3, r5
 801a30c:	4622      	mov	r2, r4
 801a30e:	4601      	mov	r1, r0
 801a310:	6838      	ldr	r0, [r7, #0]
 801a312:	f000 faeb 	bl	801a8ec <etharp_raw>
      break;
 801a316:	e001      	b.n	801a31c <etharp_input+0xf8>
      break;
 801a318:	bf00      	nop
 801a31a:	e000      	b.n	801a31e <etharp_input+0xfa>
      break;
 801a31c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a31e:	6878      	ldr	r0, [r7, #4]
 801a320:	f7f8 fcc2 	bl	8012ca8 <pbuf_free>
}
 801a324:	3718      	adds	r7, #24
 801a326:	46bd      	mov	sp, r7
 801a328:	bdb0      	pop	{r4, r5, r7, pc}
 801a32a:	bf00      	nop
 801a32c:	0802156c 	.word	0x0802156c
 801a330:	080216bc 	.word	0x080216bc
 801a334:	080215e4 	.word	0x080215e4

0801a338 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a338:	b580      	push	{r7, lr}
 801a33a:	b086      	sub	sp, #24
 801a33c:	af02      	add	r7, sp, #8
 801a33e:	60f8      	str	r0, [r7, #12]
 801a340:	60b9      	str	r1, [r7, #8]
 801a342:	4613      	mov	r3, r2
 801a344:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a346:	79fa      	ldrb	r2, [r7, #7]
 801a348:	4944      	ldr	r1, [pc, #272]	@ (801a45c <etharp_output_to_arp_index+0x124>)
 801a34a:	4613      	mov	r3, r2
 801a34c:	005b      	lsls	r3, r3, #1
 801a34e:	4413      	add	r3, r2
 801a350:	00db      	lsls	r3, r3, #3
 801a352:	440b      	add	r3, r1
 801a354:	3314      	adds	r3, #20
 801a356:	781b      	ldrb	r3, [r3, #0]
 801a358:	2b01      	cmp	r3, #1
 801a35a:	d806      	bhi.n	801a36a <etharp_output_to_arp_index+0x32>
 801a35c:	4b40      	ldr	r3, [pc, #256]	@ (801a460 <etharp_output_to_arp_index+0x128>)
 801a35e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801a362:	4940      	ldr	r1, [pc, #256]	@ (801a464 <etharp_output_to_arp_index+0x12c>)
 801a364:	4840      	ldr	r0, [pc, #256]	@ (801a468 <etharp_output_to_arp_index+0x130>)
 801a366:	f003 f831 	bl	801d3cc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a36a:	79fa      	ldrb	r2, [r7, #7]
 801a36c:	493b      	ldr	r1, [pc, #236]	@ (801a45c <etharp_output_to_arp_index+0x124>)
 801a36e:	4613      	mov	r3, r2
 801a370:	005b      	lsls	r3, r3, #1
 801a372:	4413      	add	r3, r2
 801a374:	00db      	lsls	r3, r3, #3
 801a376:	440b      	add	r3, r1
 801a378:	3314      	adds	r3, #20
 801a37a:	781b      	ldrb	r3, [r3, #0]
 801a37c:	2b02      	cmp	r3, #2
 801a37e:	d153      	bne.n	801a428 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a380:	79fa      	ldrb	r2, [r7, #7]
 801a382:	4936      	ldr	r1, [pc, #216]	@ (801a45c <etharp_output_to_arp_index+0x124>)
 801a384:	4613      	mov	r3, r2
 801a386:	005b      	lsls	r3, r3, #1
 801a388:	4413      	add	r3, r2
 801a38a:	00db      	lsls	r3, r3, #3
 801a38c:	440b      	add	r3, r1
 801a38e:	3312      	adds	r3, #18
 801a390:	881b      	ldrh	r3, [r3, #0]
 801a392:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801a396:	d919      	bls.n	801a3cc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a398:	79fa      	ldrb	r2, [r7, #7]
 801a39a:	4613      	mov	r3, r2
 801a39c:	005b      	lsls	r3, r3, #1
 801a39e:	4413      	add	r3, r2
 801a3a0:	00db      	lsls	r3, r3, #3
 801a3a2:	4a2e      	ldr	r2, [pc, #184]	@ (801a45c <etharp_output_to_arp_index+0x124>)
 801a3a4:	4413      	add	r3, r2
 801a3a6:	3304      	adds	r3, #4
 801a3a8:	4619      	mov	r1, r3
 801a3aa:	68f8      	ldr	r0, [r7, #12]
 801a3ac:	f000 fb4c 	bl	801aa48 <etharp_request>
 801a3b0:	4603      	mov	r3, r0
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d138      	bne.n	801a428 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a3b6:	79fa      	ldrb	r2, [r7, #7]
 801a3b8:	4928      	ldr	r1, [pc, #160]	@ (801a45c <etharp_output_to_arp_index+0x124>)
 801a3ba:	4613      	mov	r3, r2
 801a3bc:	005b      	lsls	r3, r3, #1
 801a3be:	4413      	add	r3, r2
 801a3c0:	00db      	lsls	r3, r3, #3
 801a3c2:	440b      	add	r3, r1
 801a3c4:	3314      	adds	r3, #20
 801a3c6:	2203      	movs	r2, #3
 801a3c8:	701a      	strb	r2, [r3, #0]
 801a3ca:	e02d      	b.n	801a428 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a3cc:	79fa      	ldrb	r2, [r7, #7]
 801a3ce:	4923      	ldr	r1, [pc, #140]	@ (801a45c <etharp_output_to_arp_index+0x124>)
 801a3d0:	4613      	mov	r3, r2
 801a3d2:	005b      	lsls	r3, r3, #1
 801a3d4:	4413      	add	r3, r2
 801a3d6:	00db      	lsls	r3, r3, #3
 801a3d8:	440b      	add	r3, r1
 801a3da:	3312      	adds	r3, #18
 801a3dc:	881b      	ldrh	r3, [r3, #0]
 801a3de:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801a3e2:	d321      	bcc.n	801a428 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a3e4:	79fa      	ldrb	r2, [r7, #7]
 801a3e6:	4613      	mov	r3, r2
 801a3e8:	005b      	lsls	r3, r3, #1
 801a3ea:	4413      	add	r3, r2
 801a3ec:	00db      	lsls	r3, r3, #3
 801a3ee:	4a1b      	ldr	r2, [pc, #108]	@ (801a45c <etharp_output_to_arp_index+0x124>)
 801a3f0:	4413      	add	r3, r2
 801a3f2:	1d19      	adds	r1, r3, #4
 801a3f4:	79fa      	ldrb	r2, [r7, #7]
 801a3f6:	4613      	mov	r3, r2
 801a3f8:	005b      	lsls	r3, r3, #1
 801a3fa:	4413      	add	r3, r2
 801a3fc:	00db      	lsls	r3, r3, #3
 801a3fe:	3308      	adds	r3, #8
 801a400:	4a16      	ldr	r2, [pc, #88]	@ (801a45c <etharp_output_to_arp_index+0x124>)
 801a402:	4413      	add	r3, r2
 801a404:	3304      	adds	r3, #4
 801a406:	461a      	mov	r2, r3
 801a408:	68f8      	ldr	r0, [r7, #12]
 801a40a:	f000 fafb 	bl	801aa04 <etharp_request_dst>
 801a40e:	4603      	mov	r3, r0
 801a410:	2b00      	cmp	r3, #0
 801a412:	d109      	bne.n	801a428 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a414:	79fa      	ldrb	r2, [r7, #7]
 801a416:	4911      	ldr	r1, [pc, #68]	@ (801a45c <etharp_output_to_arp_index+0x124>)
 801a418:	4613      	mov	r3, r2
 801a41a:	005b      	lsls	r3, r3, #1
 801a41c:	4413      	add	r3, r2
 801a41e:	00db      	lsls	r3, r3, #3
 801a420:	440b      	add	r3, r1
 801a422:	3314      	adds	r3, #20
 801a424:	2203      	movs	r2, #3
 801a426:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a428:	68fb      	ldr	r3, [r7, #12]
 801a42a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801a42e:	79fa      	ldrb	r2, [r7, #7]
 801a430:	4613      	mov	r3, r2
 801a432:	005b      	lsls	r3, r3, #1
 801a434:	4413      	add	r3, r2
 801a436:	00db      	lsls	r3, r3, #3
 801a438:	3308      	adds	r3, #8
 801a43a:	4a08      	ldr	r2, [pc, #32]	@ (801a45c <etharp_output_to_arp_index+0x124>)
 801a43c:	4413      	add	r3, r2
 801a43e:	3304      	adds	r3, #4
 801a440:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a444:	9200      	str	r2, [sp, #0]
 801a446:	460a      	mov	r2, r1
 801a448:	68b9      	ldr	r1, [r7, #8]
 801a44a:	68f8      	ldr	r0, [r7, #12]
 801a44c:	f001 fe40 	bl	801c0d0 <ethernet_output>
 801a450:	4603      	mov	r3, r0
}
 801a452:	4618      	mov	r0, r3
 801a454:	3710      	adds	r7, #16
 801a456:	46bd      	mov	sp, r7
 801a458:	bd80      	pop	{r7, pc}
 801a45a:	bf00      	nop
 801a45c:	2000e4bc 	.word	0x2000e4bc
 801a460:	0802156c 	.word	0x0802156c
 801a464:	080216dc 	.word	0x080216dc
 801a468:	080215e4 	.word	0x080215e4

0801a46c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801a46c:	b580      	push	{r7, lr}
 801a46e:	b08a      	sub	sp, #40	@ 0x28
 801a470:	af02      	add	r7, sp, #8
 801a472:	60f8      	str	r0, [r7, #12]
 801a474:	60b9      	str	r1, [r7, #8]
 801a476:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a47c:	68fb      	ldr	r3, [r7, #12]
 801a47e:	2b00      	cmp	r3, #0
 801a480:	d106      	bne.n	801a490 <etharp_output+0x24>
 801a482:	4b73      	ldr	r3, [pc, #460]	@ (801a650 <etharp_output+0x1e4>)
 801a484:	f240 321e 	movw	r2, #798	@ 0x31e
 801a488:	4972      	ldr	r1, [pc, #456]	@ (801a654 <etharp_output+0x1e8>)
 801a48a:	4873      	ldr	r0, [pc, #460]	@ (801a658 <etharp_output+0x1ec>)
 801a48c:	f002 ff9e 	bl	801d3cc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a490:	68bb      	ldr	r3, [r7, #8]
 801a492:	2b00      	cmp	r3, #0
 801a494:	d106      	bne.n	801a4a4 <etharp_output+0x38>
 801a496:	4b6e      	ldr	r3, [pc, #440]	@ (801a650 <etharp_output+0x1e4>)
 801a498:	f240 321f 	movw	r2, #799	@ 0x31f
 801a49c:	496f      	ldr	r1, [pc, #444]	@ (801a65c <etharp_output+0x1f0>)
 801a49e:	486e      	ldr	r0, [pc, #440]	@ (801a658 <etharp_output+0x1ec>)
 801a4a0:	f002 ff94 	bl	801d3cc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d106      	bne.n	801a4b8 <etharp_output+0x4c>
 801a4aa:	4b69      	ldr	r3, [pc, #420]	@ (801a650 <etharp_output+0x1e4>)
 801a4ac:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801a4b0:	496b      	ldr	r1, [pc, #428]	@ (801a660 <etharp_output+0x1f4>)
 801a4b2:	4869      	ldr	r0, [pc, #420]	@ (801a658 <etharp_output+0x1ec>)
 801a4b4:	f002 ff8a 	bl	801d3cc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	681b      	ldr	r3, [r3, #0]
 801a4bc:	68f9      	ldr	r1, [r7, #12]
 801a4be:	4618      	mov	r0, r3
 801a4c0:	f000 fef8 	bl	801b2b4 <ip4_addr_isbroadcast_u32>
 801a4c4:	4603      	mov	r3, r0
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d002      	beq.n	801a4d0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801a4ca:	4b66      	ldr	r3, [pc, #408]	@ (801a664 <etharp_output+0x1f8>)
 801a4cc:	61fb      	str	r3, [r7, #28]
 801a4ce:	e0af      	b.n	801a630 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	681b      	ldr	r3, [r3, #0]
 801a4d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a4d8:	2be0      	cmp	r3, #224	@ 0xe0
 801a4da:	d118      	bne.n	801a50e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801a4dc:	2301      	movs	r3, #1
 801a4de:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801a4e4:	235e      	movs	r3, #94	@ 0x5e
 801a4e6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	3301      	adds	r3, #1
 801a4ec:	781b      	ldrb	r3, [r3, #0]
 801a4ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a4f2:	b2db      	uxtb	r3, r3
 801a4f4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	3302      	adds	r3, #2
 801a4fa:	781b      	ldrb	r3, [r3, #0]
 801a4fc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	3303      	adds	r3, #3
 801a502:	781b      	ldrb	r3, [r3, #0]
 801a504:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801a506:	f107 0310 	add.w	r3, r7, #16
 801a50a:	61fb      	str	r3, [r7, #28]
 801a50c:	e090      	b.n	801a630 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	681a      	ldr	r2, [r3, #0]
 801a512:	68fb      	ldr	r3, [r7, #12]
 801a514:	3304      	adds	r3, #4
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	405a      	eors	r2, r3
 801a51a:	68fb      	ldr	r3, [r7, #12]
 801a51c:	3308      	adds	r3, #8
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	4013      	ands	r3, r2
 801a522:	2b00      	cmp	r3, #0
 801a524:	d012      	beq.n	801a54c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a52c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801a530:	4293      	cmp	r3, r2
 801a532:	d00b      	beq.n	801a54c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	330c      	adds	r3, #12
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d003      	beq.n	801a546 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	330c      	adds	r3, #12
 801a542:	61bb      	str	r3, [r7, #24]
 801a544:	e002      	b.n	801a54c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801a546:	f06f 0303 	mvn.w	r3, #3
 801a54a:	e07d      	b.n	801a648 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a54c:	4b46      	ldr	r3, [pc, #280]	@ (801a668 <etharp_output+0x1fc>)
 801a54e:	781b      	ldrb	r3, [r3, #0]
 801a550:	4619      	mov	r1, r3
 801a552:	4a46      	ldr	r2, [pc, #280]	@ (801a66c <etharp_output+0x200>)
 801a554:	460b      	mov	r3, r1
 801a556:	005b      	lsls	r3, r3, #1
 801a558:	440b      	add	r3, r1
 801a55a:	00db      	lsls	r3, r3, #3
 801a55c:	4413      	add	r3, r2
 801a55e:	3314      	adds	r3, #20
 801a560:	781b      	ldrb	r3, [r3, #0]
 801a562:	2b01      	cmp	r3, #1
 801a564:	d925      	bls.n	801a5b2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a566:	4b40      	ldr	r3, [pc, #256]	@ (801a668 <etharp_output+0x1fc>)
 801a568:	781b      	ldrb	r3, [r3, #0]
 801a56a:	4619      	mov	r1, r3
 801a56c:	4a3f      	ldr	r2, [pc, #252]	@ (801a66c <etharp_output+0x200>)
 801a56e:	460b      	mov	r3, r1
 801a570:	005b      	lsls	r3, r3, #1
 801a572:	440b      	add	r3, r1
 801a574:	00db      	lsls	r3, r3, #3
 801a576:	4413      	add	r3, r2
 801a578:	3308      	adds	r3, #8
 801a57a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a57c:	68fa      	ldr	r2, [r7, #12]
 801a57e:	429a      	cmp	r2, r3
 801a580:	d117      	bne.n	801a5b2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801a582:	69bb      	ldr	r3, [r7, #24]
 801a584:	681a      	ldr	r2, [r3, #0]
 801a586:	4b38      	ldr	r3, [pc, #224]	@ (801a668 <etharp_output+0x1fc>)
 801a588:	781b      	ldrb	r3, [r3, #0]
 801a58a:	4618      	mov	r0, r3
 801a58c:	4937      	ldr	r1, [pc, #220]	@ (801a66c <etharp_output+0x200>)
 801a58e:	4603      	mov	r3, r0
 801a590:	005b      	lsls	r3, r3, #1
 801a592:	4403      	add	r3, r0
 801a594:	00db      	lsls	r3, r3, #3
 801a596:	440b      	add	r3, r1
 801a598:	3304      	adds	r3, #4
 801a59a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a59c:	429a      	cmp	r2, r3
 801a59e:	d108      	bne.n	801a5b2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801a5a0:	4b31      	ldr	r3, [pc, #196]	@ (801a668 <etharp_output+0x1fc>)
 801a5a2:	781b      	ldrb	r3, [r3, #0]
 801a5a4:	461a      	mov	r2, r3
 801a5a6:	68b9      	ldr	r1, [r7, #8]
 801a5a8:	68f8      	ldr	r0, [r7, #12]
 801a5aa:	f7ff fec5 	bl	801a338 <etharp_output_to_arp_index>
 801a5ae:	4603      	mov	r3, r0
 801a5b0:	e04a      	b.n	801a648 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a5b2:	2300      	movs	r3, #0
 801a5b4:	75fb      	strb	r3, [r7, #23]
 801a5b6:	e031      	b.n	801a61c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a5b8:	7dfa      	ldrb	r2, [r7, #23]
 801a5ba:	492c      	ldr	r1, [pc, #176]	@ (801a66c <etharp_output+0x200>)
 801a5bc:	4613      	mov	r3, r2
 801a5be:	005b      	lsls	r3, r3, #1
 801a5c0:	4413      	add	r3, r2
 801a5c2:	00db      	lsls	r3, r3, #3
 801a5c4:	440b      	add	r3, r1
 801a5c6:	3314      	adds	r3, #20
 801a5c8:	781b      	ldrb	r3, [r3, #0]
 801a5ca:	2b01      	cmp	r3, #1
 801a5cc:	d923      	bls.n	801a616 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801a5ce:	7dfa      	ldrb	r2, [r7, #23]
 801a5d0:	4926      	ldr	r1, [pc, #152]	@ (801a66c <etharp_output+0x200>)
 801a5d2:	4613      	mov	r3, r2
 801a5d4:	005b      	lsls	r3, r3, #1
 801a5d6:	4413      	add	r3, r2
 801a5d8:	00db      	lsls	r3, r3, #3
 801a5da:	440b      	add	r3, r1
 801a5dc:	3308      	adds	r3, #8
 801a5de:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a5e0:	68fa      	ldr	r2, [r7, #12]
 801a5e2:	429a      	cmp	r2, r3
 801a5e4:	d117      	bne.n	801a616 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801a5e6:	69bb      	ldr	r3, [r7, #24]
 801a5e8:	6819      	ldr	r1, [r3, #0]
 801a5ea:	7dfa      	ldrb	r2, [r7, #23]
 801a5ec:	481f      	ldr	r0, [pc, #124]	@ (801a66c <etharp_output+0x200>)
 801a5ee:	4613      	mov	r3, r2
 801a5f0:	005b      	lsls	r3, r3, #1
 801a5f2:	4413      	add	r3, r2
 801a5f4:	00db      	lsls	r3, r3, #3
 801a5f6:	4403      	add	r3, r0
 801a5f8:	3304      	adds	r3, #4
 801a5fa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801a5fc:	4299      	cmp	r1, r3
 801a5fe:	d10a      	bne.n	801a616 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801a600:	4a19      	ldr	r2, [pc, #100]	@ (801a668 <etharp_output+0x1fc>)
 801a602:	7dfb      	ldrb	r3, [r7, #23]
 801a604:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801a606:	7dfb      	ldrb	r3, [r7, #23]
 801a608:	461a      	mov	r2, r3
 801a60a:	68b9      	ldr	r1, [r7, #8]
 801a60c:	68f8      	ldr	r0, [r7, #12]
 801a60e:	f7ff fe93 	bl	801a338 <etharp_output_to_arp_index>
 801a612:	4603      	mov	r3, r0
 801a614:	e018      	b.n	801a648 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a616:	7dfb      	ldrb	r3, [r7, #23]
 801a618:	3301      	adds	r3, #1
 801a61a:	75fb      	strb	r3, [r7, #23]
 801a61c:	7dfb      	ldrb	r3, [r7, #23]
 801a61e:	2b09      	cmp	r3, #9
 801a620:	d9ca      	bls.n	801a5b8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801a622:	68ba      	ldr	r2, [r7, #8]
 801a624:	69b9      	ldr	r1, [r7, #24]
 801a626:	68f8      	ldr	r0, [r7, #12]
 801a628:	f000 f822 	bl	801a670 <etharp_query>
 801a62c:	4603      	mov	r3, r0
 801a62e:	e00b      	b.n	801a648 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801a630:	68fb      	ldr	r3, [r7, #12]
 801a632:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801a636:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a63a:	9300      	str	r3, [sp, #0]
 801a63c:	69fb      	ldr	r3, [r7, #28]
 801a63e:	68b9      	ldr	r1, [r7, #8]
 801a640:	68f8      	ldr	r0, [r7, #12]
 801a642:	f001 fd45 	bl	801c0d0 <ethernet_output>
 801a646:	4603      	mov	r3, r0
}
 801a648:	4618      	mov	r0, r3
 801a64a:	3720      	adds	r7, #32
 801a64c:	46bd      	mov	sp, r7
 801a64e:	bd80      	pop	{r7, pc}
 801a650:	0802156c 	.word	0x0802156c
 801a654:	080216bc 	.word	0x080216bc
 801a658:	080215e4 	.word	0x080215e4
 801a65c:	0802170c 	.word	0x0802170c
 801a660:	080216ac 	.word	0x080216ac
 801a664:	080334d8 	.word	0x080334d8
 801a668:	2000e5ac 	.word	0x2000e5ac
 801a66c:	2000e4bc 	.word	0x2000e4bc

0801a670 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801a670:	b580      	push	{r7, lr}
 801a672:	b08c      	sub	sp, #48	@ 0x30
 801a674:	af02      	add	r7, sp, #8
 801a676:	60f8      	str	r0, [r7, #12]
 801a678:	60b9      	str	r1, [r7, #8]
 801a67a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801a67c:	68fb      	ldr	r3, [r7, #12]
 801a67e:	3326      	adds	r3, #38	@ 0x26
 801a680:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801a682:	23ff      	movs	r3, #255	@ 0xff
 801a684:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801a688:	2300      	movs	r3, #0
 801a68a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a68c:	68bb      	ldr	r3, [r7, #8]
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	68f9      	ldr	r1, [r7, #12]
 801a692:	4618      	mov	r0, r3
 801a694:	f000 fe0e 	bl	801b2b4 <ip4_addr_isbroadcast_u32>
 801a698:	4603      	mov	r3, r0
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	d10c      	bne.n	801a6b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a69e:	68bb      	ldr	r3, [r7, #8]
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a6a6:	2be0      	cmp	r3, #224	@ 0xe0
 801a6a8:	d006      	beq.n	801a6b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a6aa:	68bb      	ldr	r3, [r7, #8]
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d003      	beq.n	801a6b8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801a6b0:	68bb      	ldr	r3, [r7, #8]
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	d102      	bne.n	801a6be <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a6b8:	f06f 030f 	mvn.w	r3, #15
 801a6bc:	e101      	b.n	801a8c2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801a6be:	68fa      	ldr	r2, [r7, #12]
 801a6c0:	2101      	movs	r1, #1
 801a6c2:	68b8      	ldr	r0, [r7, #8]
 801a6c4:	f7ff fb60 	bl	8019d88 <etharp_find_entry>
 801a6c8:	4603      	mov	r3, r0
 801a6ca:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801a6cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	da02      	bge.n	801a6da <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801a6d4:	8a7b      	ldrh	r3, [r7, #18]
 801a6d6:	b25b      	sxtb	r3, r3
 801a6d8:	e0f3      	b.n	801a8c2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801a6da:	8a7b      	ldrh	r3, [r7, #18]
 801a6dc:	2b7e      	cmp	r3, #126	@ 0x7e
 801a6de:	d906      	bls.n	801a6ee <etharp_query+0x7e>
 801a6e0:	4b7a      	ldr	r3, [pc, #488]	@ (801a8cc <etharp_query+0x25c>)
 801a6e2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801a6e6:	497a      	ldr	r1, [pc, #488]	@ (801a8d0 <etharp_query+0x260>)
 801a6e8:	487a      	ldr	r0, [pc, #488]	@ (801a8d4 <etharp_query+0x264>)
 801a6ea:	f002 fe6f 	bl	801d3cc <iprintf>
  i = (netif_addr_idx_t)i_err;
 801a6ee:	8a7b      	ldrh	r3, [r7, #18]
 801a6f0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801a6f2:	7c7a      	ldrb	r2, [r7, #17]
 801a6f4:	4978      	ldr	r1, [pc, #480]	@ (801a8d8 <etharp_query+0x268>)
 801a6f6:	4613      	mov	r3, r2
 801a6f8:	005b      	lsls	r3, r3, #1
 801a6fa:	4413      	add	r3, r2
 801a6fc:	00db      	lsls	r3, r3, #3
 801a6fe:	440b      	add	r3, r1
 801a700:	3314      	adds	r3, #20
 801a702:	781b      	ldrb	r3, [r3, #0]
 801a704:	2b00      	cmp	r3, #0
 801a706:	d115      	bne.n	801a734 <etharp_query+0xc4>
    is_new_entry = 1;
 801a708:	2301      	movs	r3, #1
 801a70a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801a70c:	7c7a      	ldrb	r2, [r7, #17]
 801a70e:	4972      	ldr	r1, [pc, #456]	@ (801a8d8 <etharp_query+0x268>)
 801a710:	4613      	mov	r3, r2
 801a712:	005b      	lsls	r3, r3, #1
 801a714:	4413      	add	r3, r2
 801a716:	00db      	lsls	r3, r3, #3
 801a718:	440b      	add	r3, r1
 801a71a:	3314      	adds	r3, #20
 801a71c:	2201      	movs	r2, #1
 801a71e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801a720:	7c7a      	ldrb	r2, [r7, #17]
 801a722:	496d      	ldr	r1, [pc, #436]	@ (801a8d8 <etharp_query+0x268>)
 801a724:	4613      	mov	r3, r2
 801a726:	005b      	lsls	r3, r3, #1
 801a728:	4413      	add	r3, r2
 801a72a:	00db      	lsls	r3, r3, #3
 801a72c:	440b      	add	r3, r1
 801a72e:	3308      	adds	r3, #8
 801a730:	68fa      	ldr	r2, [r7, #12]
 801a732:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801a734:	7c7a      	ldrb	r2, [r7, #17]
 801a736:	4968      	ldr	r1, [pc, #416]	@ (801a8d8 <etharp_query+0x268>)
 801a738:	4613      	mov	r3, r2
 801a73a:	005b      	lsls	r3, r3, #1
 801a73c:	4413      	add	r3, r2
 801a73e:	00db      	lsls	r3, r3, #3
 801a740:	440b      	add	r3, r1
 801a742:	3314      	adds	r3, #20
 801a744:	781b      	ldrb	r3, [r3, #0]
 801a746:	2b01      	cmp	r3, #1
 801a748:	d011      	beq.n	801a76e <etharp_query+0xfe>
 801a74a:	7c7a      	ldrb	r2, [r7, #17]
 801a74c:	4962      	ldr	r1, [pc, #392]	@ (801a8d8 <etharp_query+0x268>)
 801a74e:	4613      	mov	r3, r2
 801a750:	005b      	lsls	r3, r3, #1
 801a752:	4413      	add	r3, r2
 801a754:	00db      	lsls	r3, r3, #3
 801a756:	440b      	add	r3, r1
 801a758:	3314      	adds	r3, #20
 801a75a:	781b      	ldrb	r3, [r3, #0]
 801a75c:	2b01      	cmp	r3, #1
 801a75e:	d806      	bhi.n	801a76e <etharp_query+0xfe>
 801a760:	4b5a      	ldr	r3, [pc, #360]	@ (801a8cc <etharp_query+0x25c>)
 801a762:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801a766:	495d      	ldr	r1, [pc, #372]	@ (801a8dc <etharp_query+0x26c>)
 801a768:	485a      	ldr	r0, [pc, #360]	@ (801a8d4 <etharp_query+0x264>)
 801a76a:	f002 fe2f 	bl	801d3cc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801a76e:	6a3b      	ldr	r3, [r7, #32]
 801a770:	2b00      	cmp	r3, #0
 801a772:	d102      	bne.n	801a77a <etharp_query+0x10a>
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	2b00      	cmp	r3, #0
 801a778:	d10c      	bne.n	801a794 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801a77a:	68b9      	ldr	r1, [r7, #8]
 801a77c:	68f8      	ldr	r0, [r7, #12]
 801a77e:	f000 f963 	bl	801aa48 <etharp_request>
 801a782:	4603      	mov	r3, r0
 801a784:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d102      	bne.n	801a794 <etharp_query+0x124>
      return result;
 801a78e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801a792:	e096      	b.n	801a8c2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	2b00      	cmp	r3, #0
 801a798:	d106      	bne.n	801a7a8 <etharp_query+0x138>
 801a79a:	4b4c      	ldr	r3, [pc, #304]	@ (801a8cc <etharp_query+0x25c>)
 801a79c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801a7a0:	494f      	ldr	r1, [pc, #316]	@ (801a8e0 <etharp_query+0x270>)
 801a7a2:	484c      	ldr	r0, [pc, #304]	@ (801a8d4 <etharp_query+0x264>)
 801a7a4:	f002 fe12 	bl	801d3cc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801a7a8:	7c7a      	ldrb	r2, [r7, #17]
 801a7aa:	494b      	ldr	r1, [pc, #300]	@ (801a8d8 <etharp_query+0x268>)
 801a7ac:	4613      	mov	r3, r2
 801a7ae:	005b      	lsls	r3, r3, #1
 801a7b0:	4413      	add	r3, r2
 801a7b2:	00db      	lsls	r3, r3, #3
 801a7b4:	440b      	add	r3, r1
 801a7b6:	3314      	adds	r3, #20
 801a7b8:	781b      	ldrb	r3, [r3, #0]
 801a7ba:	2b01      	cmp	r3, #1
 801a7bc:	d917      	bls.n	801a7ee <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801a7be:	4a49      	ldr	r2, [pc, #292]	@ (801a8e4 <etharp_query+0x274>)
 801a7c0:	7c7b      	ldrb	r3, [r7, #17]
 801a7c2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801a7c4:	7c7a      	ldrb	r2, [r7, #17]
 801a7c6:	4613      	mov	r3, r2
 801a7c8:	005b      	lsls	r3, r3, #1
 801a7ca:	4413      	add	r3, r2
 801a7cc:	00db      	lsls	r3, r3, #3
 801a7ce:	3308      	adds	r3, #8
 801a7d0:	4a41      	ldr	r2, [pc, #260]	@ (801a8d8 <etharp_query+0x268>)
 801a7d2:	4413      	add	r3, r2
 801a7d4:	3304      	adds	r3, #4
 801a7d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a7da:	9200      	str	r2, [sp, #0]
 801a7dc:	697a      	ldr	r2, [r7, #20]
 801a7de:	6879      	ldr	r1, [r7, #4]
 801a7e0:	68f8      	ldr	r0, [r7, #12]
 801a7e2:	f001 fc75 	bl	801c0d0 <ethernet_output>
 801a7e6:	4603      	mov	r3, r0
 801a7e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a7ec:	e067      	b.n	801a8be <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a7ee:	7c7a      	ldrb	r2, [r7, #17]
 801a7f0:	4939      	ldr	r1, [pc, #228]	@ (801a8d8 <etharp_query+0x268>)
 801a7f2:	4613      	mov	r3, r2
 801a7f4:	005b      	lsls	r3, r3, #1
 801a7f6:	4413      	add	r3, r2
 801a7f8:	00db      	lsls	r3, r3, #3
 801a7fa:	440b      	add	r3, r1
 801a7fc:	3314      	adds	r3, #20
 801a7fe:	781b      	ldrb	r3, [r3, #0]
 801a800:	2b01      	cmp	r3, #1
 801a802:	d15c      	bne.n	801a8be <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801a804:	2300      	movs	r3, #0
 801a806:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a80c:	e01c      	b.n	801a848 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801a80e:	69fb      	ldr	r3, [r7, #28]
 801a810:	895a      	ldrh	r2, [r3, #10]
 801a812:	69fb      	ldr	r3, [r7, #28]
 801a814:	891b      	ldrh	r3, [r3, #8]
 801a816:	429a      	cmp	r2, r3
 801a818:	d10a      	bne.n	801a830 <etharp_query+0x1c0>
 801a81a:	69fb      	ldr	r3, [r7, #28]
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d006      	beq.n	801a830 <etharp_query+0x1c0>
 801a822:	4b2a      	ldr	r3, [pc, #168]	@ (801a8cc <etharp_query+0x25c>)
 801a824:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801a828:	492f      	ldr	r1, [pc, #188]	@ (801a8e8 <etharp_query+0x278>)
 801a82a:	482a      	ldr	r0, [pc, #168]	@ (801a8d4 <etharp_query+0x264>)
 801a82c:	f002 fdce 	bl	801d3cc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801a830:	69fb      	ldr	r3, [r7, #28]
 801a832:	7b1b      	ldrb	r3, [r3, #12]
 801a834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d002      	beq.n	801a842 <etharp_query+0x1d2>
        copy_needed = 1;
 801a83c:	2301      	movs	r3, #1
 801a83e:	61bb      	str	r3, [r7, #24]
        break;
 801a840:	e005      	b.n	801a84e <etharp_query+0x1de>
      }
      p = p->next;
 801a842:	69fb      	ldr	r3, [r7, #28]
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a848:	69fb      	ldr	r3, [r7, #28]
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d1df      	bne.n	801a80e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801a84e:	69bb      	ldr	r3, [r7, #24]
 801a850:	2b00      	cmp	r3, #0
 801a852:	d007      	beq.n	801a864 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801a854:	687a      	ldr	r2, [r7, #4]
 801a856:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801a85a:	200e      	movs	r0, #14
 801a85c:	f7f8 fc8c 	bl	8013178 <pbuf_clone>
 801a860:	61f8      	str	r0, [r7, #28]
 801a862:	e004      	b.n	801a86e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801a868:	69f8      	ldr	r0, [r7, #28]
 801a86a:	f7f8 fac3 	bl	8012df4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801a86e:	69fb      	ldr	r3, [r7, #28]
 801a870:	2b00      	cmp	r3, #0
 801a872:	d021      	beq.n	801a8b8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801a874:	7c7a      	ldrb	r2, [r7, #17]
 801a876:	4918      	ldr	r1, [pc, #96]	@ (801a8d8 <etharp_query+0x268>)
 801a878:	4613      	mov	r3, r2
 801a87a:	005b      	lsls	r3, r3, #1
 801a87c:	4413      	add	r3, r2
 801a87e:	00db      	lsls	r3, r3, #3
 801a880:	440b      	add	r3, r1
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	2b00      	cmp	r3, #0
 801a886:	d00a      	beq.n	801a89e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801a888:	7c7a      	ldrb	r2, [r7, #17]
 801a88a:	4913      	ldr	r1, [pc, #76]	@ (801a8d8 <etharp_query+0x268>)
 801a88c:	4613      	mov	r3, r2
 801a88e:	005b      	lsls	r3, r3, #1
 801a890:	4413      	add	r3, r2
 801a892:	00db      	lsls	r3, r3, #3
 801a894:	440b      	add	r3, r1
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	4618      	mov	r0, r3
 801a89a:	f7f8 fa05 	bl	8012ca8 <pbuf_free>
      }
      arp_table[i].q = p;
 801a89e:	7c7a      	ldrb	r2, [r7, #17]
 801a8a0:	490d      	ldr	r1, [pc, #52]	@ (801a8d8 <etharp_query+0x268>)
 801a8a2:	4613      	mov	r3, r2
 801a8a4:	005b      	lsls	r3, r3, #1
 801a8a6:	4413      	add	r3, r2
 801a8a8:	00db      	lsls	r3, r3, #3
 801a8aa:	440b      	add	r3, r1
 801a8ac:	69fa      	ldr	r2, [r7, #28]
 801a8ae:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801a8b0:	2300      	movs	r3, #0
 801a8b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a8b6:	e002      	b.n	801a8be <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801a8b8:	23ff      	movs	r3, #255	@ 0xff
 801a8ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801a8be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801a8c2:	4618      	mov	r0, r3
 801a8c4:	3728      	adds	r7, #40	@ 0x28
 801a8c6:	46bd      	mov	sp, r7
 801a8c8:	bd80      	pop	{r7, pc}
 801a8ca:	bf00      	nop
 801a8cc:	0802156c 	.word	0x0802156c
 801a8d0:	08021718 	.word	0x08021718
 801a8d4:	080215e4 	.word	0x080215e4
 801a8d8:	2000e4bc 	.word	0x2000e4bc
 801a8dc:	08021728 	.word	0x08021728
 801a8e0:	0802170c 	.word	0x0802170c
 801a8e4:	2000e5ac 	.word	0x2000e5ac
 801a8e8:	08021750 	.word	0x08021750

0801a8ec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801a8ec:	b580      	push	{r7, lr}
 801a8ee:	b08a      	sub	sp, #40	@ 0x28
 801a8f0:	af02      	add	r7, sp, #8
 801a8f2:	60f8      	str	r0, [r7, #12]
 801a8f4:	60b9      	str	r1, [r7, #8]
 801a8f6:	607a      	str	r2, [r7, #4]
 801a8f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801a8fa:	2300      	movs	r3, #0
 801a8fc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a8fe:	68fb      	ldr	r3, [r7, #12]
 801a900:	2b00      	cmp	r3, #0
 801a902:	d106      	bne.n	801a912 <etharp_raw+0x26>
 801a904:	4b3a      	ldr	r3, [pc, #232]	@ (801a9f0 <etharp_raw+0x104>)
 801a906:	f240 4257 	movw	r2, #1111	@ 0x457
 801a90a:	493a      	ldr	r1, [pc, #232]	@ (801a9f4 <etharp_raw+0x108>)
 801a90c:	483a      	ldr	r0, [pc, #232]	@ (801a9f8 <etharp_raw+0x10c>)
 801a90e:	f002 fd5d 	bl	801d3cc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801a912:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a916:	211c      	movs	r1, #28
 801a918:	200e      	movs	r0, #14
 801a91a:	f7f7 fee1 	bl	80126e0 <pbuf_alloc>
 801a91e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801a920:	69bb      	ldr	r3, [r7, #24]
 801a922:	2b00      	cmp	r3, #0
 801a924:	d102      	bne.n	801a92c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801a926:	f04f 33ff 	mov.w	r3, #4294967295
 801a92a:	e05d      	b.n	801a9e8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801a92c:	69bb      	ldr	r3, [r7, #24]
 801a92e:	895b      	ldrh	r3, [r3, #10]
 801a930:	2b1b      	cmp	r3, #27
 801a932:	d806      	bhi.n	801a942 <etharp_raw+0x56>
 801a934:	4b2e      	ldr	r3, [pc, #184]	@ (801a9f0 <etharp_raw+0x104>)
 801a936:	f240 4262 	movw	r2, #1122	@ 0x462
 801a93a:	4930      	ldr	r1, [pc, #192]	@ (801a9fc <etharp_raw+0x110>)
 801a93c:	482e      	ldr	r0, [pc, #184]	@ (801a9f8 <etharp_raw+0x10c>)
 801a93e:	f002 fd45 	bl	801d3cc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801a942:	69bb      	ldr	r3, [r7, #24]
 801a944:	685b      	ldr	r3, [r3, #4]
 801a946:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801a948:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801a94a:	4618      	mov	r0, r3
 801a94c:	f7f6 fdbe 	bl	80114cc <lwip_htons>
 801a950:	4603      	mov	r3, r0
 801a952:	461a      	mov	r2, r3
 801a954:	697b      	ldr	r3, [r7, #20]
 801a956:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a95e:	2b06      	cmp	r3, #6
 801a960:	d006      	beq.n	801a970 <etharp_raw+0x84>
 801a962:	4b23      	ldr	r3, [pc, #140]	@ (801a9f0 <etharp_raw+0x104>)
 801a964:	f240 4269 	movw	r2, #1129	@ 0x469
 801a968:	4925      	ldr	r1, [pc, #148]	@ (801aa00 <etharp_raw+0x114>)
 801a96a:	4823      	ldr	r0, [pc, #140]	@ (801a9f8 <etharp_raw+0x10c>)
 801a96c:	f002 fd2e 	bl	801d3cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801a970:	697b      	ldr	r3, [r7, #20]
 801a972:	3308      	adds	r3, #8
 801a974:	2206      	movs	r2, #6
 801a976:	6839      	ldr	r1, [r7, #0]
 801a978:	4618      	mov	r0, r3
 801a97a:	f002 febe 	bl	801d6fa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801a97e:	697b      	ldr	r3, [r7, #20]
 801a980:	3312      	adds	r3, #18
 801a982:	2206      	movs	r2, #6
 801a984:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a986:	4618      	mov	r0, r3
 801a988:	f002 feb7 	bl	801d6fa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801a98c:	697b      	ldr	r3, [r7, #20]
 801a98e:	330e      	adds	r3, #14
 801a990:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a992:	6812      	ldr	r2, [r2, #0]
 801a994:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801a996:	697b      	ldr	r3, [r7, #20]
 801a998:	3318      	adds	r3, #24
 801a99a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a99c:	6812      	ldr	r2, [r2, #0]
 801a99e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801a9a0:	697b      	ldr	r3, [r7, #20]
 801a9a2:	2200      	movs	r2, #0
 801a9a4:	701a      	strb	r2, [r3, #0]
 801a9a6:	2200      	movs	r2, #0
 801a9a8:	f042 0201 	orr.w	r2, r2, #1
 801a9ac:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801a9ae:	697b      	ldr	r3, [r7, #20]
 801a9b0:	2200      	movs	r2, #0
 801a9b2:	f042 0208 	orr.w	r2, r2, #8
 801a9b6:	709a      	strb	r2, [r3, #2]
 801a9b8:	2200      	movs	r2, #0
 801a9ba:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801a9bc:	697b      	ldr	r3, [r7, #20]
 801a9be:	2206      	movs	r2, #6
 801a9c0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801a9c2:	697b      	ldr	r3, [r7, #20]
 801a9c4:	2204      	movs	r2, #4
 801a9c6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801a9c8:	f640 0306 	movw	r3, #2054	@ 0x806
 801a9cc:	9300      	str	r3, [sp, #0]
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	68ba      	ldr	r2, [r7, #8]
 801a9d2:	69b9      	ldr	r1, [r7, #24]
 801a9d4:	68f8      	ldr	r0, [r7, #12]
 801a9d6:	f001 fb7b 	bl	801c0d0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801a9da:	69b8      	ldr	r0, [r7, #24]
 801a9dc:	f7f8 f964 	bl	8012ca8 <pbuf_free>
  p = NULL;
 801a9e0:	2300      	movs	r3, #0
 801a9e2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801a9e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a9e8:	4618      	mov	r0, r3
 801a9ea:	3720      	adds	r7, #32
 801a9ec:	46bd      	mov	sp, r7
 801a9ee:	bd80      	pop	{r7, pc}
 801a9f0:	0802156c 	.word	0x0802156c
 801a9f4:	080216bc 	.word	0x080216bc
 801a9f8:	080215e4 	.word	0x080215e4
 801a9fc:	0802176c 	.word	0x0802176c
 801aa00:	080217a0 	.word	0x080217a0

0801aa04 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801aa04:	b580      	push	{r7, lr}
 801aa06:	b088      	sub	sp, #32
 801aa08:	af04      	add	r7, sp, #16
 801aa0a:	60f8      	str	r0, [r7, #12]
 801aa0c:	60b9      	str	r1, [r7, #8]
 801aa0e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801aa10:	68fb      	ldr	r3, [r7, #12]
 801aa12:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801aa16:	68fb      	ldr	r3, [r7, #12]
 801aa18:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801aa1c:	68fb      	ldr	r3, [r7, #12]
 801aa1e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801aa20:	2201      	movs	r2, #1
 801aa22:	9203      	str	r2, [sp, #12]
 801aa24:	68ba      	ldr	r2, [r7, #8]
 801aa26:	9202      	str	r2, [sp, #8]
 801aa28:	4a06      	ldr	r2, [pc, #24]	@ (801aa44 <etharp_request_dst+0x40>)
 801aa2a:	9201      	str	r2, [sp, #4]
 801aa2c:	9300      	str	r3, [sp, #0]
 801aa2e:	4603      	mov	r3, r0
 801aa30:	687a      	ldr	r2, [r7, #4]
 801aa32:	68f8      	ldr	r0, [r7, #12]
 801aa34:	f7ff ff5a 	bl	801a8ec <etharp_raw>
 801aa38:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801aa3a:	4618      	mov	r0, r3
 801aa3c:	3710      	adds	r7, #16
 801aa3e:	46bd      	mov	sp, r7
 801aa40:	bd80      	pop	{r7, pc}
 801aa42:	bf00      	nop
 801aa44:	080334e0 	.word	0x080334e0

0801aa48 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801aa48:	b580      	push	{r7, lr}
 801aa4a:	b082      	sub	sp, #8
 801aa4c:	af00      	add	r7, sp, #0
 801aa4e:	6078      	str	r0, [r7, #4]
 801aa50:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801aa52:	4a05      	ldr	r2, [pc, #20]	@ (801aa68 <etharp_request+0x20>)
 801aa54:	6839      	ldr	r1, [r7, #0]
 801aa56:	6878      	ldr	r0, [r7, #4]
 801aa58:	f7ff ffd4 	bl	801aa04 <etharp_request_dst>
 801aa5c:	4603      	mov	r3, r0
}
 801aa5e:	4618      	mov	r0, r3
 801aa60:	3708      	adds	r7, #8
 801aa62:	46bd      	mov	sp, r7
 801aa64:	bd80      	pop	{r7, pc}
 801aa66:	bf00      	nop
 801aa68:	080334d8 	.word	0x080334d8

0801aa6c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801aa6c:	b580      	push	{r7, lr}
 801aa6e:	b08e      	sub	sp, #56	@ 0x38
 801aa70:	af04      	add	r7, sp, #16
 801aa72:	6078      	str	r0, [r7, #4]
 801aa74:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801aa76:	4b79      	ldr	r3, [pc, #484]	@ (801ac5c <icmp_input+0x1f0>)
 801aa78:	689b      	ldr	r3, [r3, #8]
 801aa7a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801aa7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa7e:	781b      	ldrb	r3, [r3, #0]
 801aa80:	f003 030f 	and.w	r3, r3, #15
 801aa84:	b2db      	uxtb	r3, r3
 801aa86:	009b      	lsls	r3, r3, #2
 801aa88:	b2db      	uxtb	r3, r3
 801aa8a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801aa8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801aa8e:	2b13      	cmp	r3, #19
 801aa90:	f240 80cd 	bls.w	801ac2e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	895b      	ldrh	r3, [r3, #10]
 801aa98:	2b03      	cmp	r3, #3
 801aa9a:	f240 80ca 	bls.w	801ac32 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	685b      	ldr	r3, [r3, #4]
 801aaa2:	781b      	ldrb	r3, [r3, #0]
 801aaa4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801aaa8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	f000 80b7 	beq.w	801ac20 <icmp_input+0x1b4>
 801aab2:	2b08      	cmp	r3, #8
 801aab4:	f040 80b7 	bne.w	801ac26 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801aab8:	4b69      	ldr	r3, [pc, #420]	@ (801ac60 <icmp_input+0x1f4>)
 801aaba:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801aabc:	4b67      	ldr	r3, [pc, #412]	@ (801ac5c <icmp_input+0x1f0>)
 801aabe:	695b      	ldr	r3, [r3, #20]
 801aac0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801aac4:	2be0      	cmp	r3, #224	@ 0xe0
 801aac6:	f000 80bb 	beq.w	801ac40 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801aaca:	4b64      	ldr	r3, [pc, #400]	@ (801ac5c <icmp_input+0x1f0>)
 801aacc:	695b      	ldr	r3, [r3, #20]
 801aace:	4a63      	ldr	r2, [pc, #396]	@ (801ac5c <icmp_input+0x1f0>)
 801aad0:	6812      	ldr	r2, [r2, #0]
 801aad2:	4611      	mov	r1, r2
 801aad4:	4618      	mov	r0, r3
 801aad6:	f000 fbed 	bl	801b2b4 <ip4_addr_isbroadcast_u32>
 801aada:	4603      	mov	r3, r0
 801aadc:	2b00      	cmp	r3, #0
 801aade:	f040 80b1 	bne.w	801ac44 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	891b      	ldrh	r3, [r3, #8]
 801aae6:	2b07      	cmp	r3, #7
 801aae8:	f240 80a5 	bls.w	801ac36 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801aaec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801aaee:	330e      	adds	r3, #14
 801aaf0:	4619      	mov	r1, r3
 801aaf2:	6878      	ldr	r0, [r7, #4]
 801aaf4:	f7f8 f842 	bl	8012b7c <pbuf_add_header>
 801aaf8:	4603      	mov	r3, r0
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	d04b      	beq.n	801ab96 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	891a      	ldrh	r2, [r3, #8]
 801ab02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ab04:	4413      	add	r3, r2
 801ab06:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	891b      	ldrh	r3, [r3, #8]
 801ab0c:	8b7a      	ldrh	r2, [r7, #26]
 801ab0e:	429a      	cmp	r2, r3
 801ab10:	f0c0 809a 	bcc.w	801ac48 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801ab14:	8b7b      	ldrh	r3, [r7, #26]
 801ab16:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ab1a:	4619      	mov	r1, r3
 801ab1c:	200e      	movs	r0, #14
 801ab1e:	f7f7 fddf 	bl	80126e0 <pbuf_alloc>
 801ab22:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801ab24:	697b      	ldr	r3, [r7, #20]
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	f000 8090 	beq.w	801ac4c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801ab2c:	697b      	ldr	r3, [r7, #20]
 801ab2e:	895b      	ldrh	r3, [r3, #10]
 801ab30:	461a      	mov	r2, r3
 801ab32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ab34:	3308      	adds	r3, #8
 801ab36:	429a      	cmp	r2, r3
 801ab38:	d203      	bcs.n	801ab42 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801ab3a:	6978      	ldr	r0, [r7, #20]
 801ab3c:	f7f8 f8b4 	bl	8012ca8 <pbuf_free>
          goto icmperr;
 801ab40:	e085      	b.n	801ac4e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801ab42:	697b      	ldr	r3, [r7, #20]
 801ab44:	685b      	ldr	r3, [r3, #4]
 801ab46:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801ab48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ab4a:	4618      	mov	r0, r3
 801ab4c:	f002 fdd5 	bl	801d6fa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801ab50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ab52:	4619      	mov	r1, r3
 801ab54:	6978      	ldr	r0, [r7, #20]
 801ab56:	f7f8 f821 	bl	8012b9c <pbuf_remove_header>
 801ab5a:	4603      	mov	r3, r0
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	d009      	beq.n	801ab74 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801ab60:	4b40      	ldr	r3, [pc, #256]	@ (801ac64 <icmp_input+0x1f8>)
 801ab62:	22b6      	movs	r2, #182	@ 0xb6
 801ab64:	4940      	ldr	r1, [pc, #256]	@ (801ac68 <icmp_input+0x1fc>)
 801ab66:	4841      	ldr	r0, [pc, #260]	@ (801ac6c <icmp_input+0x200>)
 801ab68:	f002 fc30 	bl	801d3cc <iprintf>
          pbuf_free(r);
 801ab6c:	6978      	ldr	r0, [r7, #20]
 801ab6e:	f7f8 f89b 	bl	8012ca8 <pbuf_free>
          goto icmperr;
 801ab72:	e06c      	b.n	801ac4e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801ab74:	6879      	ldr	r1, [r7, #4]
 801ab76:	6978      	ldr	r0, [r7, #20]
 801ab78:	f7f8 f9ba 	bl	8012ef0 <pbuf_copy>
 801ab7c:	4603      	mov	r3, r0
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d003      	beq.n	801ab8a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801ab82:	6978      	ldr	r0, [r7, #20]
 801ab84:	f7f8 f890 	bl	8012ca8 <pbuf_free>
          goto icmperr;
 801ab88:	e061      	b.n	801ac4e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801ab8a:	6878      	ldr	r0, [r7, #4]
 801ab8c:	f7f8 f88c 	bl	8012ca8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801ab90:	697b      	ldr	r3, [r7, #20]
 801ab92:	607b      	str	r3, [r7, #4]
 801ab94:	e00f      	b.n	801abb6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ab96:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ab98:	330e      	adds	r3, #14
 801ab9a:	4619      	mov	r1, r3
 801ab9c:	6878      	ldr	r0, [r7, #4]
 801ab9e:	f7f7 fffd 	bl	8012b9c <pbuf_remove_header>
 801aba2:	4603      	mov	r3, r0
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d006      	beq.n	801abb6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801aba8:	4b2e      	ldr	r3, [pc, #184]	@ (801ac64 <icmp_input+0x1f8>)
 801abaa:	22c7      	movs	r2, #199	@ 0xc7
 801abac:	4930      	ldr	r1, [pc, #192]	@ (801ac70 <icmp_input+0x204>)
 801abae:	482f      	ldr	r0, [pc, #188]	@ (801ac6c <icmp_input+0x200>)
 801abb0:	f002 fc0c 	bl	801d3cc <iprintf>
          goto icmperr;
 801abb4:	e04b      	b.n	801ac4e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	685b      	ldr	r3, [r3, #4]
 801abba:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801abbc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801abbe:	4619      	mov	r1, r3
 801abc0:	6878      	ldr	r0, [r7, #4]
 801abc2:	f7f7 ffdb 	bl	8012b7c <pbuf_add_header>
 801abc6:	4603      	mov	r3, r0
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d12b      	bne.n	801ac24 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	685b      	ldr	r3, [r3, #4]
 801abd0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801abd2:	69fb      	ldr	r3, [r7, #28]
 801abd4:	681a      	ldr	r2, [r3, #0]
 801abd6:	68fb      	ldr	r3, [r7, #12]
 801abd8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801abda:	4b20      	ldr	r3, [pc, #128]	@ (801ac5c <icmp_input+0x1f0>)
 801abdc:	691a      	ldr	r2, [r3, #16]
 801abde:	68fb      	ldr	r3, [r7, #12]
 801abe0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801abe2:	693b      	ldr	r3, [r7, #16]
 801abe4:	2200      	movs	r2, #0
 801abe6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801abe8:	693b      	ldr	r3, [r7, #16]
 801abea:	2200      	movs	r2, #0
 801abec:	709a      	strb	r2, [r3, #2]
 801abee:	2200      	movs	r2, #0
 801abf0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801abf2:	68fb      	ldr	r3, [r7, #12]
 801abf4:	22ff      	movs	r2, #255	@ 0xff
 801abf6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801abf8:	68fb      	ldr	r3, [r7, #12]
 801abfa:	2200      	movs	r2, #0
 801abfc:	729a      	strb	r2, [r3, #10]
 801abfe:	2200      	movs	r2, #0
 801ac00:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801ac02:	683b      	ldr	r3, [r7, #0]
 801ac04:	9302      	str	r3, [sp, #8]
 801ac06:	2301      	movs	r3, #1
 801ac08:	9301      	str	r3, [sp, #4]
 801ac0a:	2300      	movs	r3, #0
 801ac0c:	9300      	str	r3, [sp, #0]
 801ac0e:	23ff      	movs	r3, #255	@ 0xff
 801ac10:	2200      	movs	r2, #0
 801ac12:	69f9      	ldr	r1, [r7, #28]
 801ac14:	6878      	ldr	r0, [r7, #4]
 801ac16:	f000 fa75 	bl	801b104 <ip4_output_if>
 801ac1a:	4603      	mov	r3, r0
 801ac1c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801ac1e:	e001      	b.n	801ac24 <icmp_input+0x1b8>
      break;
 801ac20:	bf00      	nop
 801ac22:	e000      	b.n	801ac26 <icmp_input+0x1ba>
      break;
 801ac24:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801ac26:	6878      	ldr	r0, [r7, #4]
 801ac28:	f7f8 f83e 	bl	8012ca8 <pbuf_free>
  return;
 801ac2c:	e013      	b.n	801ac56 <icmp_input+0x1ea>
    goto lenerr;
 801ac2e:	bf00      	nop
 801ac30:	e002      	b.n	801ac38 <icmp_input+0x1cc>
    goto lenerr;
 801ac32:	bf00      	nop
 801ac34:	e000      	b.n	801ac38 <icmp_input+0x1cc>
        goto lenerr;
 801ac36:	bf00      	nop
lenerr:
  pbuf_free(p);
 801ac38:	6878      	ldr	r0, [r7, #4]
 801ac3a:	f7f8 f835 	bl	8012ca8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801ac3e:	e00a      	b.n	801ac56 <icmp_input+0x1ea>
        goto icmperr;
 801ac40:	bf00      	nop
 801ac42:	e004      	b.n	801ac4e <icmp_input+0x1e2>
        goto icmperr;
 801ac44:	bf00      	nop
 801ac46:	e002      	b.n	801ac4e <icmp_input+0x1e2>
          goto icmperr;
 801ac48:	bf00      	nop
 801ac4a:	e000      	b.n	801ac4e <icmp_input+0x1e2>
          goto icmperr;
 801ac4c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801ac4e:	6878      	ldr	r0, [r7, #4]
 801ac50:	f7f8 f82a 	bl	8012ca8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801ac54:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801ac56:	3728      	adds	r7, #40	@ 0x28
 801ac58:	46bd      	mov	sp, r7
 801ac5a:	bd80      	pop	{r7, pc}
 801ac5c:	2000b35c 	.word	0x2000b35c
 801ac60:	2000b370 	.word	0x2000b370
 801ac64:	080217e4 	.word	0x080217e4
 801ac68:	0802181c 	.word	0x0802181c
 801ac6c:	08021854 	.word	0x08021854
 801ac70:	0802187c 	.word	0x0802187c

0801ac74 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801ac74:	b580      	push	{r7, lr}
 801ac76:	b082      	sub	sp, #8
 801ac78:	af00      	add	r7, sp, #0
 801ac7a:	6078      	str	r0, [r7, #4]
 801ac7c:	460b      	mov	r3, r1
 801ac7e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801ac80:	78fb      	ldrb	r3, [r7, #3]
 801ac82:	461a      	mov	r2, r3
 801ac84:	2103      	movs	r1, #3
 801ac86:	6878      	ldr	r0, [r7, #4]
 801ac88:	f000 f814 	bl	801acb4 <icmp_send_response>
}
 801ac8c:	bf00      	nop
 801ac8e:	3708      	adds	r7, #8
 801ac90:	46bd      	mov	sp, r7
 801ac92:	bd80      	pop	{r7, pc}

0801ac94 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801ac94:	b580      	push	{r7, lr}
 801ac96:	b082      	sub	sp, #8
 801ac98:	af00      	add	r7, sp, #0
 801ac9a:	6078      	str	r0, [r7, #4]
 801ac9c:	460b      	mov	r3, r1
 801ac9e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801aca0:	78fb      	ldrb	r3, [r7, #3]
 801aca2:	461a      	mov	r2, r3
 801aca4:	210b      	movs	r1, #11
 801aca6:	6878      	ldr	r0, [r7, #4]
 801aca8:	f000 f804 	bl	801acb4 <icmp_send_response>
}
 801acac:	bf00      	nop
 801acae:	3708      	adds	r7, #8
 801acb0:	46bd      	mov	sp, r7
 801acb2:	bd80      	pop	{r7, pc}

0801acb4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801acb4:	b580      	push	{r7, lr}
 801acb6:	b08c      	sub	sp, #48	@ 0x30
 801acb8:	af04      	add	r7, sp, #16
 801acba:	6078      	str	r0, [r7, #4]
 801acbc:	460b      	mov	r3, r1
 801acbe:	70fb      	strb	r3, [r7, #3]
 801acc0:	4613      	mov	r3, r2
 801acc2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801acc4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801acc8:	2124      	movs	r1, #36	@ 0x24
 801acca:	2022      	movs	r0, #34	@ 0x22
 801accc:	f7f7 fd08 	bl	80126e0 <pbuf_alloc>
 801acd0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801acd2:	69fb      	ldr	r3, [r7, #28]
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	d04c      	beq.n	801ad72 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801acd8:	69fb      	ldr	r3, [r7, #28]
 801acda:	895b      	ldrh	r3, [r3, #10]
 801acdc:	2b23      	cmp	r3, #35	@ 0x23
 801acde:	d806      	bhi.n	801acee <icmp_send_response+0x3a>
 801ace0:	4b26      	ldr	r3, [pc, #152]	@ (801ad7c <icmp_send_response+0xc8>)
 801ace2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801ace6:	4926      	ldr	r1, [pc, #152]	@ (801ad80 <icmp_send_response+0xcc>)
 801ace8:	4826      	ldr	r0, [pc, #152]	@ (801ad84 <icmp_send_response+0xd0>)
 801acea:	f002 fb6f 	bl	801d3cc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	685b      	ldr	r3, [r3, #4]
 801acf2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801acf4:	69fb      	ldr	r3, [r7, #28]
 801acf6:	685b      	ldr	r3, [r3, #4]
 801acf8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801acfa:	697b      	ldr	r3, [r7, #20]
 801acfc:	78fa      	ldrb	r2, [r7, #3]
 801acfe:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801ad00:	697b      	ldr	r3, [r7, #20]
 801ad02:	78ba      	ldrb	r2, [r7, #2]
 801ad04:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801ad06:	697b      	ldr	r3, [r7, #20]
 801ad08:	2200      	movs	r2, #0
 801ad0a:	711a      	strb	r2, [r3, #4]
 801ad0c:	2200      	movs	r2, #0
 801ad0e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801ad10:	697b      	ldr	r3, [r7, #20]
 801ad12:	2200      	movs	r2, #0
 801ad14:	719a      	strb	r2, [r3, #6]
 801ad16:	2200      	movs	r2, #0
 801ad18:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801ad1a:	69fb      	ldr	r3, [r7, #28]
 801ad1c:	685b      	ldr	r3, [r3, #4]
 801ad1e:	f103 0008 	add.w	r0, r3, #8
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	685b      	ldr	r3, [r3, #4]
 801ad26:	221c      	movs	r2, #28
 801ad28:	4619      	mov	r1, r3
 801ad2a:	f002 fce6 	bl	801d6fa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801ad2e:	69bb      	ldr	r3, [r7, #24]
 801ad30:	68db      	ldr	r3, [r3, #12]
 801ad32:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801ad34:	f107 030c 	add.w	r3, r7, #12
 801ad38:	4618      	mov	r0, r3
 801ad3a:	f000 f825 	bl	801ad88 <ip4_route>
 801ad3e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801ad40:	693b      	ldr	r3, [r7, #16]
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d011      	beq.n	801ad6a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801ad46:	697b      	ldr	r3, [r7, #20]
 801ad48:	2200      	movs	r2, #0
 801ad4a:	709a      	strb	r2, [r3, #2]
 801ad4c:	2200      	movs	r2, #0
 801ad4e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801ad50:	f107 020c 	add.w	r2, r7, #12
 801ad54:	693b      	ldr	r3, [r7, #16]
 801ad56:	9302      	str	r3, [sp, #8]
 801ad58:	2301      	movs	r3, #1
 801ad5a:	9301      	str	r3, [sp, #4]
 801ad5c:	2300      	movs	r3, #0
 801ad5e:	9300      	str	r3, [sp, #0]
 801ad60:	23ff      	movs	r3, #255	@ 0xff
 801ad62:	2100      	movs	r1, #0
 801ad64:	69f8      	ldr	r0, [r7, #28]
 801ad66:	f000 f9cd 	bl	801b104 <ip4_output_if>
  }
  pbuf_free(q);
 801ad6a:	69f8      	ldr	r0, [r7, #28]
 801ad6c:	f7f7 ff9c 	bl	8012ca8 <pbuf_free>
 801ad70:	e000      	b.n	801ad74 <icmp_send_response+0xc0>
    return;
 801ad72:	bf00      	nop
}
 801ad74:	3720      	adds	r7, #32
 801ad76:	46bd      	mov	sp, r7
 801ad78:	bd80      	pop	{r7, pc}
 801ad7a:	bf00      	nop
 801ad7c:	080217e4 	.word	0x080217e4
 801ad80:	080218b0 	.word	0x080218b0
 801ad84:	08021854 	.word	0x08021854

0801ad88 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801ad88:	b480      	push	{r7}
 801ad8a:	b085      	sub	sp, #20
 801ad8c:	af00      	add	r7, sp, #0
 801ad8e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801ad90:	4b33      	ldr	r3, [pc, #204]	@ (801ae60 <ip4_route+0xd8>)
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	60fb      	str	r3, [r7, #12]
 801ad96:	e036      	b.n	801ae06 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ad9e:	f003 0301 	and.w	r3, r3, #1
 801ada2:	b2db      	uxtb	r3, r3
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d02b      	beq.n	801ae00 <ip4_route+0x78>
 801ada8:	68fb      	ldr	r3, [r7, #12]
 801adaa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801adae:	089b      	lsrs	r3, r3, #2
 801adb0:	f003 0301 	and.w	r3, r3, #1
 801adb4:	b2db      	uxtb	r3, r3
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d022      	beq.n	801ae00 <ip4_route+0x78>
 801adba:	68fb      	ldr	r3, [r7, #12]
 801adbc:	3304      	adds	r3, #4
 801adbe:	681b      	ldr	r3, [r3, #0]
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d01d      	beq.n	801ae00 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	681a      	ldr	r2, [r3, #0]
 801adc8:	68fb      	ldr	r3, [r7, #12]
 801adca:	3304      	adds	r3, #4
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	405a      	eors	r2, r3
 801add0:	68fb      	ldr	r3, [r7, #12]
 801add2:	3308      	adds	r3, #8
 801add4:	681b      	ldr	r3, [r3, #0]
 801add6:	4013      	ands	r3, r2
 801add8:	2b00      	cmp	r3, #0
 801adda:	d101      	bne.n	801ade0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801addc:	68fb      	ldr	r3, [r7, #12]
 801adde:	e038      	b.n	801ae52 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801ade0:	68fb      	ldr	r3, [r7, #12]
 801ade2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ade6:	f003 0302 	and.w	r3, r3, #2
 801adea:	2b00      	cmp	r3, #0
 801adec:	d108      	bne.n	801ae00 <ip4_route+0x78>
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	681a      	ldr	r2, [r3, #0]
 801adf2:	68fb      	ldr	r3, [r7, #12]
 801adf4:	330c      	adds	r3, #12
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	429a      	cmp	r2, r3
 801adfa:	d101      	bne.n	801ae00 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801adfc:	68fb      	ldr	r3, [r7, #12]
 801adfe:	e028      	b.n	801ae52 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801ae00:	68fb      	ldr	r3, [r7, #12]
 801ae02:	681b      	ldr	r3, [r3, #0]
 801ae04:	60fb      	str	r3, [r7, #12]
 801ae06:	68fb      	ldr	r3, [r7, #12]
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	d1c5      	bne.n	801ad98 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ae0c:	4b15      	ldr	r3, [pc, #84]	@ (801ae64 <ip4_route+0xdc>)
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	2b00      	cmp	r3, #0
 801ae12:	d01a      	beq.n	801ae4a <ip4_route+0xc2>
 801ae14:	4b13      	ldr	r3, [pc, #76]	@ (801ae64 <ip4_route+0xdc>)
 801ae16:	681b      	ldr	r3, [r3, #0]
 801ae18:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ae1c:	f003 0301 	and.w	r3, r3, #1
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d012      	beq.n	801ae4a <ip4_route+0xc2>
 801ae24:	4b0f      	ldr	r3, [pc, #60]	@ (801ae64 <ip4_route+0xdc>)
 801ae26:	681b      	ldr	r3, [r3, #0]
 801ae28:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ae2c:	f003 0304 	and.w	r3, r3, #4
 801ae30:	2b00      	cmp	r3, #0
 801ae32:	d00a      	beq.n	801ae4a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ae34:	4b0b      	ldr	r3, [pc, #44]	@ (801ae64 <ip4_route+0xdc>)
 801ae36:	681b      	ldr	r3, [r3, #0]
 801ae38:	3304      	adds	r3, #4
 801ae3a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d004      	beq.n	801ae4a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	b2db      	uxtb	r3, r3
 801ae46:	2b7f      	cmp	r3, #127	@ 0x7f
 801ae48:	d101      	bne.n	801ae4e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801ae4a:	2300      	movs	r3, #0
 801ae4c:	e001      	b.n	801ae52 <ip4_route+0xca>
  }

  return netif_default;
 801ae4e:	4b05      	ldr	r3, [pc, #20]	@ (801ae64 <ip4_route+0xdc>)
 801ae50:	681b      	ldr	r3, [r3, #0]
}
 801ae52:	4618      	mov	r0, r3
 801ae54:	3714      	adds	r7, #20
 801ae56:	46bd      	mov	sp, r7
 801ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae5c:	4770      	bx	lr
 801ae5e:	bf00      	nop
 801ae60:	2000e450 	.word	0x2000e450
 801ae64:	2000e454 	.word	0x2000e454

0801ae68 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801ae68:	b580      	push	{r7, lr}
 801ae6a:	b082      	sub	sp, #8
 801ae6c:	af00      	add	r7, sp, #0
 801ae6e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ae76:	f003 0301 	and.w	r3, r3, #1
 801ae7a:	b2db      	uxtb	r3, r3
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d016      	beq.n	801aeae <ip4_input_accept+0x46>
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	3304      	adds	r3, #4
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d011      	beq.n	801aeae <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ae8a:	4b0b      	ldr	r3, [pc, #44]	@ (801aeb8 <ip4_input_accept+0x50>)
 801ae8c:	695a      	ldr	r2, [r3, #20]
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	3304      	adds	r3, #4
 801ae92:	681b      	ldr	r3, [r3, #0]
 801ae94:	429a      	cmp	r2, r3
 801ae96:	d008      	beq.n	801aeaa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801ae98:	4b07      	ldr	r3, [pc, #28]	@ (801aeb8 <ip4_input_accept+0x50>)
 801ae9a:	695b      	ldr	r3, [r3, #20]
 801ae9c:	6879      	ldr	r1, [r7, #4]
 801ae9e:	4618      	mov	r0, r3
 801aea0:	f000 fa08 	bl	801b2b4 <ip4_addr_isbroadcast_u32>
 801aea4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	d001      	beq.n	801aeae <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801aeaa:	2301      	movs	r3, #1
 801aeac:	e000      	b.n	801aeb0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801aeae:	2300      	movs	r3, #0
}
 801aeb0:	4618      	mov	r0, r3
 801aeb2:	3708      	adds	r7, #8
 801aeb4:	46bd      	mov	sp, r7
 801aeb6:	bd80      	pop	{r7, pc}
 801aeb8:	2000b35c 	.word	0x2000b35c

0801aebc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801aebc:	b580      	push	{r7, lr}
 801aebe:	b086      	sub	sp, #24
 801aec0:	af00      	add	r7, sp, #0
 801aec2:	6078      	str	r0, [r7, #4]
 801aec4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	685b      	ldr	r3, [r3, #4]
 801aeca:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801aecc:	697b      	ldr	r3, [r7, #20]
 801aece:	781b      	ldrb	r3, [r3, #0]
 801aed0:	091b      	lsrs	r3, r3, #4
 801aed2:	b2db      	uxtb	r3, r3
 801aed4:	2b04      	cmp	r3, #4
 801aed6:	d004      	beq.n	801aee2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801aed8:	6878      	ldr	r0, [r7, #4]
 801aeda:	f7f7 fee5 	bl	8012ca8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801aede:	2300      	movs	r3, #0
 801aee0:	e107      	b.n	801b0f2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801aee2:	697b      	ldr	r3, [r7, #20]
 801aee4:	781b      	ldrb	r3, [r3, #0]
 801aee6:	f003 030f 	and.w	r3, r3, #15
 801aeea:	b2db      	uxtb	r3, r3
 801aeec:	009b      	lsls	r3, r3, #2
 801aeee:	b2db      	uxtb	r3, r3
 801aef0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801aef2:	697b      	ldr	r3, [r7, #20]
 801aef4:	885b      	ldrh	r3, [r3, #2]
 801aef6:	b29b      	uxth	r3, r3
 801aef8:	4618      	mov	r0, r3
 801aefa:	f7f6 fae7 	bl	80114cc <lwip_htons>
 801aefe:	4603      	mov	r3, r0
 801af00:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	891b      	ldrh	r3, [r3, #8]
 801af06:	89ba      	ldrh	r2, [r7, #12]
 801af08:	429a      	cmp	r2, r3
 801af0a:	d204      	bcs.n	801af16 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801af0c:	89bb      	ldrh	r3, [r7, #12]
 801af0e:	4619      	mov	r1, r3
 801af10:	6878      	ldr	r0, [r7, #4]
 801af12:	f7f7 fd43 	bl	801299c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	895b      	ldrh	r3, [r3, #10]
 801af1a:	89fa      	ldrh	r2, [r7, #14]
 801af1c:	429a      	cmp	r2, r3
 801af1e:	d807      	bhi.n	801af30 <ip4_input+0x74>
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	891b      	ldrh	r3, [r3, #8]
 801af24:	89ba      	ldrh	r2, [r7, #12]
 801af26:	429a      	cmp	r2, r3
 801af28:	d802      	bhi.n	801af30 <ip4_input+0x74>
 801af2a:	89fb      	ldrh	r3, [r7, #14]
 801af2c:	2b13      	cmp	r3, #19
 801af2e:	d804      	bhi.n	801af3a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801af30:	6878      	ldr	r0, [r7, #4]
 801af32:	f7f7 feb9 	bl	8012ca8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801af36:	2300      	movs	r3, #0
 801af38:	e0db      	b.n	801b0f2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801af3a:	697b      	ldr	r3, [r7, #20]
 801af3c:	691b      	ldr	r3, [r3, #16]
 801af3e:	4a6f      	ldr	r2, [pc, #444]	@ (801b0fc <ip4_input+0x240>)
 801af40:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801af42:	697b      	ldr	r3, [r7, #20]
 801af44:	68db      	ldr	r3, [r3, #12]
 801af46:	4a6d      	ldr	r2, [pc, #436]	@ (801b0fc <ip4_input+0x240>)
 801af48:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801af4a:	4b6c      	ldr	r3, [pc, #432]	@ (801b0fc <ip4_input+0x240>)
 801af4c:	695b      	ldr	r3, [r3, #20]
 801af4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801af52:	2be0      	cmp	r3, #224	@ 0xe0
 801af54:	d112      	bne.n	801af7c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801af56:	683b      	ldr	r3, [r7, #0]
 801af58:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801af5c:	f003 0301 	and.w	r3, r3, #1
 801af60:	b2db      	uxtb	r3, r3
 801af62:	2b00      	cmp	r3, #0
 801af64:	d007      	beq.n	801af76 <ip4_input+0xba>
 801af66:	683b      	ldr	r3, [r7, #0]
 801af68:	3304      	adds	r3, #4
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d002      	beq.n	801af76 <ip4_input+0xba>
      netif = inp;
 801af70:	683b      	ldr	r3, [r7, #0]
 801af72:	613b      	str	r3, [r7, #16]
 801af74:	e02a      	b.n	801afcc <ip4_input+0x110>
    } else {
      netif = NULL;
 801af76:	2300      	movs	r3, #0
 801af78:	613b      	str	r3, [r7, #16]
 801af7a:	e027      	b.n	801afcc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801af7c:	6838      	ldr	r0, [r7, #0]
 801af7e:	f7ff ff73 	bl	801ae68 <ip4_input_accept>
 801af82:	4603      	mov	r3, r0
 801af84:	2b00      	cmp	r3, #0
 801af86:	d002      	beq.n	801af8e <ip4_input+0xd2>
      netif = inp;
 801af88:	683b      	ldr	r3, [r7, #0]
 801af8a:	613b      	str	r3, [r7, #16]
 801af8c:	e01e      	b.n	801afcc <ip4_input+0x110>
    } else {
      netif = NULL;
 801af8e:	2300      	movs	r3, #0
 801af90:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801af92:	4b5a      	ldr	r3, [pc, #360]	@ (801b0fc <ip4_input+0x240>)
 801af94:	695b      	ldr	r3, [r3, #20]
 801af96:	b2db      	uxtb	r3, r3
 801af98:	2b7f      	cmp	r3, #127	@ 0x7f
 801af9a:	d017      	beq.n	801afcc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801af9c:	4b58      	ldr	r3, [pc, #352]	@ (801b100 <ip4_input+0x244>)
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	613b      	str	r3, [r7, #16]
 801afa2:	e00e      	b.n	801afc2 <ip4_input+0x106>
          if (netif == inp) {
 801afa4:	693a      	ldr	r2, [r7, #16]
 801afa6:	683b      	ldr	r3, [r7, #0]
 801afa8:	429a      	cmp	r2, r3
 801afaa:	d006      	beq.n	801afba <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801afac:	6938      	ldr	r0, [r7, #16]
 801afae:	f7ff ff5b 	bl	801ae68 <ip4_input_accept>
 801afb2:	4603      	mov	r3, r0
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	d108      	bne.n	801afca <ip4_input+0x10e>
 801afb8:	e000      	b.n	801afbc <ip4_input+0x100>
            continue;
 801afba:	bf00      	nop
        NETIF_FOREACH(netif) {
 801afbc:	693b      	ldr	r3, [r7, #16]
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	613b      	str	r3, [r7, #16]
 801afc2:	693b      	ldr	r3, [r7, #16]
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	d1ed      	bne.n	801afa4 <ip4_input+0xe8>
 801afc8:	e000      	b.n	801afcc <ip4_input+0x110>
            break;
 801afca:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801afcc:	4b4b      	ldr	r3, [pc, #300]	@ (801b0fc <ip4_input+0x240>)
 801afce:	691b      	ldr	r3, [r3, #16]
 801afd0:	6839      	ldr	r1, [r7, #0]
 801afd2:	4618      	mov	r0, r3
 801afd4:	f000 f96e 	bl	801b2b4 <ip4_addr_isbroadcast_u32>
 801afd8:	4603      	mov	r3, r0
 801afda:	2b00      	cmp	r3, #0
 801afdc:	d105      	bne.n	801afea <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801afde:	4b47      	ldr	r3, [pc, #284]	@ (801b0fc <ip4_input+0x240>)
 801afe0:	691b      	ldr	r3, [r3, #16]
 801afe2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801afe6:	2be0      	cmp	r3, #224	@ 0xe0
 801afe8:	d104      	bne.n	801aff4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801afea:	6878      	ldr	r0, [r7, #4]
 801afec:	f7f7 fe5c 	bl	8012ca8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801aff0:	2300      	movs	r3, #0
 801aff2:	e07e      	b.n	801b0f2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801aff4:	693b      	ldr	r3, [r7, #16]
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d104      	bne.n	801b004 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801affa:	6878      	ldr	r0, [r7, #4]
 801affc:	f7f7 fe54 	bl	8012ca8 <pbuf_free>
    return ERR_OK;
 801b000:	2300      	movs	r3, #0
 801b002:	e076      	b.n	801b0f2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801b004:	697b      	ldr	r3, [r7, #20]
 801b006:	88db      	ldrh	r3, [r3, #6]
 801b008:	b29b      	uxth	r3, r3
 801b00a:	461a      	mov	r2, r3
 801b00c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801b010:	4013      	ands	r3, r2
 801b012:	2b00      	cmp	r3, #0
 801b014:	d00b      	beq.n	801b02e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801b016:	6878      	ldr	r0, [r7, #4]
 801b018:	f000 fc92 	bl	801b940 <ip4_reass>
 801b01c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	2b00      	cmp	r3, #0
 801b022:	d101      	bne.n	801b028 <ip4_input+0x16c>
      return ERR_OK;
 801b024:	2300      	movs	r3, #0
 801b026:	e064      	b.n	801b0f2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	685b      	ldr	r3, [r3, #4]
 801b02c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801b02e:	4a33      	ldr	r2, [pc, #204]	@ (801b0fc <ip4_input+0x240>)
 801b030:	693b      	ldr	r3, [r7, #16]
 801b032:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801b034:	4a31      	ldr	r2, [pc, #196]	@ (801b0fc <ip4_input+0x240>)
 801b036:	683b      	ldr	r3, [r7, #0]
 801b038:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801b03a:	4a30      	ldr	r2, [pc, #192]	@ (801b0fc <ip4_input+0x240>)
 801b03c:	697b      	ldr	r3, [r7, #20]
 801b03e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801b040:	697b      	ldr	r3, [r7, #20]
 801b042:	781b      	ldrb	r3, [r3, #0]
 801b044:	f003 030f 	and.w	r3, r3, #15
 801b048:	b2db      	uxtb	r3, r3
 801b04a:	009b      	lsls	r3, r3, #2
 801b04c:	b2db      	uxtb	r3, r3
 801b04e:	461a      	mov	r2, r3
 801b050:	4b2a      	ldr	r3, [pc, #168]	@ (801b0fc <ip4_input+0x240>)
 801b052:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801b054:	89fb      	ldrh	r3, [r7, #14]
 801b056:	4619      	mov	r1, r3
 801b058:	6878      	ldr	r0, [r7, #4]
 801b05a:	f7f7 fd9f 	bl	8012b9c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801b05e:	697b      	ldr	r3, [r7, #20]
 801b060:	7a5b      	ldrb	r3, [r3, #9]
 801b062:	2b11      	cmp	r3, #17
 801b064:	d006      	beq.n	801b074 <ip4_input+0x1b8>
 801b066:	2b11      	cmp	r3, #17
 801b068:	dc13      	bgt.n	801b092 <ip4_input+0x1d6>
 801b06a:	2b01      	cmp	r3, #1
 801b06c:	d00c      	beq.n	801b088 <ip4_input+0x1cc>
 801b06e:	2b06      	cmp	r3, #6
 801b070:	d005      	beq.n	801b07e <ip4_input+0x1c2>
 801b072:	e00e      	b.n	801b092 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801b074:	6839      	ldr	r1, [r7, #0]
 801b076:	6878      	ldr	r0, [r7, #4]
 801b078:	f7fe fb5a 	bl	8019730 <udp_input>
        break;
 801b07c:	e026      	b.n	801b0cc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801b07e:	6839      	ldr	r1, [r7, #0]
 801b080:	6878      	ldr	r0, [r7, #4]
 801b082:	f7f9 ff19 	bl	8014eb8 <tcp_input>
        break;
 801b086:	e021      	b.n	801b0cc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801b088:	6839      	ldr	r1, [r7, #0]
 801b08a:	6878      	ldr	r0, [r7, #4]
 801b08c:	f7ff fcee 	bl	801aa6c <icmp_input>
        break;
 801b090:	e01c      	b.n	801b0cc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b092:	4b1a      	ldr	r3, [pc, #104]	@ (801b0fc <ip4_input+0x240>)
 801b094:	695b      	ldr	r3, [r3, #20]
 801b096:	6939      	ldr	r1, [r7, #16]
 801b098:	4618      	mov	r0, r3
 801b09a:	f000 f90b 	bl	801b2b4 <ip4_addr_isbroadcast_u32>
 801b09e:	4603      	mov	r3, r0
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	d10f      	bne.n	801b0c4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b0a4:	4b15      	ldr	r3, [pc, #84]	@ (801b0fc <ip4_input+0x240>)
 801b0a6:	695b      	ldr	r3, [r3, #20]
 801b0a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b0ac:	2be0      	cmp	r3, #224	@ 0xe0
 801b0ae:	d009      	beq.n	801b0c4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801b0b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b0b4:	4619      	mov	r1, r3
 801b0b6:	6878      	ldr	r0, [r7, #4]
 801b0b8:	f7f7 fde3 	bl	8012c82 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801b0bc:	2102      	movs	r1, #2
 801b0be:	6878      	ldr	r0, [r7, #4]
 801b0c0:	f7ff fdd8 	bl	801ac74 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801b0c4:	6878      	ldr	r0, [r7, #4]
 801b0c6:	f7f7 fdef 	bl	8012ca8 <pbuf_free>
        break;
 801b0ca:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801b0cc:	4b0b      	ldr	r3, [pc, #44]	@ (801b0fc <ip4_input+0x240>)
 801b0ce:	2200      	movs	r2, #0
 801b0d0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801b0d2:	4b0a      	ldr	r3, [pc, #40]	@ (801b0fc <ip4_input+0x240>)
 801b0d4:	2200      	movs	r2, #0
 801b0d6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801b0d8:	4b08      	ldr	r3, [pc, #32]	@ (801b0fc <ip4_input+0x240>)
 801b0da:	2200      	movs	r2, #0
 801b0dc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801b0de:	4b07      	ldr	r3, [pc, #28]	@ (801b0fc <ip4_input+0x240>)
 801b0e0:	2200      	movs	r2, #0
 801b0e2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801b0e4:	4b05      	ldr	r3, [pc, #20]	@ (801b0fc <ip4_input+0x240>)
 801b0e6:	2200      	movs	r2, #0
 801b0e8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801b0ea:	4b04      	ldr	r3, [pc, #16]	@ (801b0fc <ip4_input+0x240>)
 801b0ec:	2200      	movs	r2, #0
 801b0ee:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801b0f0:	2300      	movs	r3, #0
}
 801b0f2:	4618      	mov	r0, r3
 801b0f4:	3718      	adds	r7, #24
 801b0f6:	46bd      	mov	sp, r7
 801b0f8:	bd80      	pop	{r7, pc}
 801b0fa:	bf00      	nop
 801b0fc:	2000b35c 	.word	0x2000b35c
 801b100:	2000e450 	.word	0x2000e450

0801b104 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801b104:	b580      	push	{r7, lr}
 801b106:	b08a      	sub	sp, #40	@ 0x28
 801b108:	af04      	add	r7, sp, #16
 801b10a:	60f8      	str	r0, [r7, #12]
 801b10c:	60b9      	str	r1, [r7, #8]
 801b10e:	607a      	str	r2, [r7, #4]
 801b110:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801b112:	68bb      	ldr	r3, [r7, #8]
 801b114:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	2b00      	cmp	r3, #0
 801b11a:	d009      	beq.n	801b130 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801b11c:	68bb      	ldr	r3, [r7, #8]
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d003      	beq.n	801b12a <ip4_output_if+0x26>
 801b122:	68bb      	ldr	r3, [r7, #8]
 801b124:	681b      	ldr	r3, [r3, #0]
 801b126:	2b00      	cmp	r3, #0
 801b128:	d102      	bne.n	801b130 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801b12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b12c:	3304      	adds	r3, #4
 801b12e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801b130:	78fa      	ldrb	r2, [r7, #3]
 801b132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b134:	9302      	str	r3, [sp, #8]
 801b136:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801b13a:	9301      	str	r3, [sp, #4]
 801b13c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b140:	9300      	str	r3, [sp, #0]
 801b142:	4613      	mov	r3, r2
 801b144:	687a      	ldr	r2, [r7, #4]
 801b146:	6979      	ldr	r1, [r7, #20]
 801b148:	68f8      	ldr	r0, [r7, #12]
 801b14a:	f000 f805 	bl	801b158 <ip4_output_if_src>
 801b14e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801b150:	4618      	mov	r0, r3
 801b152:	3718      	adds	r7, #24
 801b154:	46bd      	mov	sp, r7
 801b156:	bd80      	pop	{r7, pc}

0801b158 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801b158:	b580      	push	{r7, lr}
 801b15a:	b088      	sub	sp, #32
 801b15c:	af00      	add	r7, sp, #0
 801b15e:	60f8      	str	r0, [r7, #12]
 801b160:	60b9      	str	r1, [r7, #8]
 801b162:	607a      	str	r2, [r7, #4]
 801b164:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	7b9b      	ldrb	r3, [r3, #14]
 801b16a:	2b01      	cmp	r3, #1
 801b16c:	d006      	beq.n	801b17c <ip4_output_if_src+0x24>
 801b16e:	4b4b      	ldr	r3, [pc, #300]	@ (801b29c <ip4_output_if_src+0x144>)
 801b170:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801b174:	494a      	ldr	r1, [pc, #296]	@ (801b2a0 <ip4_output_if_src+0x148>)
 801b176:	484b      	ldr	r0, [pc, #300]	@ (801b2a4 <ip4_output_if_src+0x14c>)
 801b178:	f002 f928 	bl	801d3cc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	2b00      	cmp	r3, #0
 801b180:	d060      	beq.n	801b244 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801b182:	2314      	movs	r3, #20
 801b184:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801b186:	2114      	movs	r1, #20
 801b188:	68f8      	ldr	r0, [r7, #12]
 801b18a:	f7f7 fcf7 	bl	8012b7c <pbuf_add_header>
 801b18e:	4603      	mov	r3, r0
 801b190:	2b00      	cmp	r3, #0
 801b192:	d002      	beq.n	801b19a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b194:	f06f 0301 	mvn.w	r3, #1
 801b198:	e07c      	b.n	801b294 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801b19a:	68fb      	ldr	r3, [r7, #12]
 801b19c:	685b      	ldr	r3, [r3, #4]
 801b19e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801b1a0:	68fb      	ldr	r3, [r7, #12]
 801b1a2:	895b      	ldrh	r3, [r3, #10]
 801b1a4:	2b13      	cmp	r3, #19
 801b1a6:	d806      	bhi.n	801b1b6 <ip4_output_if_src+0x5e>
 801b1a8:	4b3c      	ldr	r3, [pc, #240]	@ (801b29c <ip4_output_if_src+0x144>)
 801b1aa:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801b1ae:	493e      	ldr	r1, [pc, #248]	@ (801b2a8 <ip4_output_if_src+0x150>)
 801b1b0:	483c      	ldr	r0, [pc, #240]	@ (801b2a4 <ip4_output_if_src+0x14c>)
 801b1b2:	f002 f90b 	bl	801d3cc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801b1b6:	69fb      	ldr	r3, [r7, #28]
 801b1b8:	78fa      	ldrb	r2, [r7, #3]
 801b1ba:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801b1bc:	69fb      	ldr	r3, [r7, #28]
 801b1be:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801b1c2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	681a      	ldr	r2, [r3, #0]
 801b1c8:	69fb      	ldr	r3, [r7, #28]
 801b1ca:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801b1cc:	8b7b      	ldrh	r3, [r7, #26]
 801b1ce:	089b      	lsrs	r3, r3, #2
 801b1d0:	b29b      	uxth	r3, r3
 801b1d2:	b2db      	uxtb	r3, r3
 801b1d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b1d8:	b2da      	uxtb	r2, r3
 801b1da:	69fb      	ldr	r3, [r7, #28]
 801b1dc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801b1de:	69fb      	ldr	r3, [r7, #28]
 801b1e0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801b1e4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801b1e6:	68fb      	ldr	r3, [r7, #12]
 801b1e8:	891b      	ldrh	r3, [r3, #8]
 801b1ea:	4618      	mov	r0, r3
 801b1ec:	f7f6 f96e 	bl	80114cc <lwip_htons>
 801b1f0:	4603      	mov	r3, r0
 801b1f2:	461a      	mov	r2, r3
 801b1f4:	69fb      	ldr	r3, [r7, #28]
 801b1f6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801b1f8:	69fb      	ldr	r3, [r7, #28]
 801b1fa:	2200      	movs	r2, #0
 801b1fc:	719a      	strb	r2, [r3, #6]
 801b1fe:	2200      	movs	r2, #0
 801b200:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801b202:	4b2a      	ldr	r3, [pc, #168]	@ (801b2ac <ip4_output_if_src+0x154>)
 801b204:	881b      	ldrh	r3, [r3, #0]
 801b206:	4618      	mov	r0, r3
 801b208:	f7f6 f960 	bl	80114cc <lwip_htons>
 801b20c:	4603      	mov	r3, r0
 801b20e:	461a      	mov	r2, r3
 801b210:	69fb      	ldr	r3, [r7, #28]
 801b212:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801b214:	4b25      	ldr	r3, [pc, #148]	@ (801b2ac <ip4_output_if_src+0x154>)
 801b216:	881b      	ldrh	r3, [r3, #0]
 801b218:	3301      	adds	r3, #1
 801b21a:	b29a      	uxth	r2, r3
 801b21c:	4b23      	ldr	r3, [pc, #140]	@ (801b2ac <ip4_output_if_src+0x154>)
 801b21e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801b220:	68bb      	ldr	r3, [r7, #8]
 801b222:	2b00      	cmp	r3, #0
 801b224:	d104      	bne.n	801b230 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801b226:	4b22      	ldr	r3, [pc, #136]	@ (801b2b0 <ip4_output_if_src+0x158>)
 801b228:	681a      	ldr	r2, [r3, #0]
 801b22a:	69fb      	ldr	r3, [r7, #28]
 801b22c:	60da      	str	r2, [r3, #12]
 801b22e:	e003      	b.n	801b238 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b230:	68bb      	ldr	r3, [r7, #8]
 801b232:	681a      	ldr	r2, [r3, #0]
 801b234:	69fb      	ldr	r3, [r7, #28]
 801b236:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b238:	69fb      	ldr	r3, [r7, #28]
 801b23a:	2200      	movs	r2, #0
 801b23c:	729a      	strb	r2, [r3, #10]
 801b23e:	2200      	movs	r2, #0
 801b240:	72da      	strb	r2, [r3, #11]
 801b242:	e00f      	b.n	801b264 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b244:	68fb      	ldr	r3, [r7, #12]
 801b246:	895b      	ldrh	r3, [r3, #10]
 801b248:	2b13      	cmp	r3, #19
 801b24a:	d802      	bhi.n	801b252 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b24c:	f06f 0301 	mvn.w	r3, #1
 801b250:	e020      	b.n	801b294 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	685b      	ldr	r3, [r3, #4]
 801b256:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b258:	69fb      	ldr	r3, [r7, #28]
 801b25a:	691b      	ldr	r3, [r3, #16]
 801b25c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b25e:	f107 0314 	add.w	r3, r7, #20
 801b262:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b266:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d00c      	beq.n	801b286 <ip4_output_if_src+0x12e>
 801b26c:	68fb      	ldr	r3, [r7, #12]
 801b26e:	891a      	ldrh	r2, [r3, #8]
 801b270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b272:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801b274:	429a      	cmp	r2, r3
 801b276:	d906      	bls.n	801b286 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b278:	687a      	ldr	r2, [r7, #4]
 801b27a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801b27c:	68f8      	ldr	r0, [r7, #12]
 801b27e:	f000 fd53 	bl	801bd28 <ip4_frag>
 801b282:	4603      	mov	r3, r0
 801b284:	e006      	b.n	801b294 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b288:	695b      	ldr	r3, [r3, #20]
 801b28a:	687a      	ldr	r2, [r7, #4]
 801b28c:	68f9      	ldr	r1, [r7, #12]
 801b28e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b290:	4798      	blx	r3
 801b292:	4603      	mov	r3, r0
}
 801b294:	4618      	mov	r0, r3
 801b296:	3720      	adds	r7, #32
 801b298:	46bd      	mov	sp, r7
 801b29a:	bd80      	pop	{r7, pc}
 801b29c:	080218dc 	.word	0x080218dc
 801b2a0:	08021910 	.word	0x08021910
 801b2a4:	0802191c 	.word	0x0802191c
 801b2a8:	08021944 	.word	0x08021944
 801b2ac:	2000e5ae 	.word	0x2000e5ae
 801b2b0:	080334d4 	.word	0x080334d4

0801b2b4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b2b4:	b480      	push	{r7}
 801b2b6:	b085      	sub	sp, #20
 801b2b8:	af00      	add	r7, sp, #0
 801b2ba:	6078      	str	r0, [r7, #4]
 801b2bc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b2c8:	d002      	beq.n	801b2d0 <ip4_addr_isbroadcast_u32+0x1c>
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	d101      	bne.n	801b2d4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b2d0:	2301      	movs	r3, #1
 801b2d2:	e02a      	b.n	801b32a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b2d4:	683b      	ldr	r3, [r7, #0]
 801b2d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b2da:	f003 0302 	and.w	r3, r3, #2
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	d101      	bne.n	801b2e6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b2e2:	2300      	movs	r3, #0
 801b2e4:	e021      	b.n	801b32a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b2e6:	683b      	ldr	r3, [r7, #0]
 801b2e8:	3304      	adds	r3, #4
 801b2ea:	681b      	ldr	r3, [r3, #0]
 801b2ec:	687a      	ldr	r2, [r7, #4]
 801b2ee:	429a      	cmp	r2, r3
 801b2f0:	d101      	bne.n	801b2f6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b2f2:	2300      	movs	r3, #0
 801b2f4:	e019      	b.n	801b32a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b2f6:	68fa      	ldr	r2, [r7, #12]
 801b2f8:	683b      	ldr	r3, [r7, #0]
 801b2fa:	3304      	adds	r3, #4
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	405a      	eors	r2, r3
 801b300:	683b      	ldr	r3, [r7, #0]
 801b302:	3308      	adds	r3, #8
 801b304:	681b      	ldr	r3, [r3, #0]
 801b306:	4013      	ands	r3, r2
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d10d      	bne.n	801b328 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b30c:	683b      	ldr	r3, [r7, #0]
 801b30e:	3308      	adds	r3, #8
 801b310:	681b      	ldr	r3, [r3, #0]
 801b312:	43da      	mvns	r2, r3
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b318:	683b      	ldr	r3, [r7, #0]
 801b31a:	3308      	adds	r3, #8
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b320:	429a      	cmp	r2, r3
 801b322:	d101      	bne.n	801b328 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b324:	2301      	movs	r3, #1
 801b326:	e000      	b.n	801b32a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b328:	2300      	movs	r3, #0
  }
}
 801b32a:	4618      	mov	r0, r3
 801b32c:	3714      	adds	r7, #20
 801b32e:	46bd      	mov	sp, r7
 801b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b334:	4770      	bx	lr
	...

0801b338 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b338:	b580      	push	{r7, lr}
 801b33a:	b084      	sub	sp, #16
 801b33c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b33e:	2300      	movs	r3, #0
 801b340:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b342:	4b12      	ldr	r3, [pc, #72]	@ (801b38c <ip_reass_tmr+0x54>)
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b348:	e018      	b.n	801b37c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b34a:	68fb      	ldr	r3, [r7, #12]
 801b34c:	7fdb      	ldrb	r3, [r3, #31]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d00b      	beq.n	801b36a <ip_reass_tmr+0x32>
      r->timer--;
 801b352:	68fb      	ldr	r3, [r7, #12]
 801b354:	7fdb      	ldrb	r3, [r3, #31]
 801b356:	3b01      	subs	r3, #1
 801b358:	b2da      	uxtb	r2, r3
 801b35a:	68fb      	ldr	r3, [r7, #12]
 801b35c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b35e:	68fb      	ldr	r3, [r7, #12]
 801b360:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b362:	68fb      	ldr	r3, [r7, #12]
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	60fb      	str	r3, [r7, #12]
 801b368:	e008      	b.n	801b37c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b36a:	68fb      	ldr	r3, [r7, #12]
 801b36c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b36e:	68fb      	ldr	r3, [r7, #12]
 801b370:	681b      	ldr	r3, [r3, #0]
 801b372:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b374:	68b9      	ldr	r1, [r7, #8]
 801b376:	6878      	ldr	r0, [r7, #4]
 801b378:	f000 f80a 	bl	801b390 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b37c:	68fb      	ldr	r3, [r7, #12]
 801b37e:	2b00      	cmp	r3, #0
 801b380:	d1e3      	bne.n	801b34a <ip_reass_tmr+0x12>
    }
  }
}
 801b382:	bf00      	nop
 801b384:	bf00      	nop
 801b386:	3710      	adds	r7, #16
 801b388:	46bd      	mov	sp, r7
 801b38a:	bd80      	pop	{r7, pc}
 801b38c:	2000e5b0 	.word	0x2000e5b0

0801b390 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b390:	b580      	push	{r7, lr}
 801b392:	b088      	sub	sp, #32
 801b394:	af00      	add	r7, sp, #0
 801b396:	6078      	str	r0, [r7, #4]
 801b398:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801b39a:	2300      	movs	r3, #0
 801b39c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b39e:	683a      	ldr	r2, [r7, #0]
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	429a      	cmp	r2, r3
 801b3a4:	d105      	bne.n	801b3b2 <ip_reass_free_complete_datagram+0x22>
 801b3a6:	4b45      	ldr	r3, [pc, #276]	@ (801b4bc <ip_reass_free_complete_datagram+0x12c>)
 801b3a8:	22ab      	movs	r2, #171	@ 0xab
 801b3aa:	4945      	ldr	r1, [pc, #276]	@ (801b4c0 <ip_reass_free_complete_datagram+0x130>)
 801b3ac:	4845      	ldr	r0, [pc, #276]	@ (801b4c4 <ip_reass_free_complete_datagram+0x134>)
 801b3ae:	f002 f80d 	bl	801d3cc <iprintf>
  if (prev != NULL) {
 801b3b2:	683b      	ldr	r3, [r7, #0]
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d00a      	beq.n	801b3ce <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b3b8:	683b      	ldr	r3, [r7, #0]
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	687a      	ldr	r2, [r7, #4]
 801b3be:	429a      	cmp	r2, r3
 801b3c0:	d005      	beq.n	801b3ce <ip_reass_free_complete_datagram+0x3e>
 801b3c2:	4b3e      	ldr	r3, [pc, #248]	@ (801b4bc <ip_reass_free_complete_datagram+0x12c>)
 801b3c4:	22ad      	movs	r2, #173	@ 0xad
 801b3c6:	4940      	ldr	r1, [pc, #256]	@ (801b4c8 <ip_reass_free_complete_datagram+0x138>)
 801b3c8:	483e      	ldr	r0, [pc, #248]	@ (801b4c4 <ip_reass_free_complete_datagram+0x134>)
 801b3ca:	f001 ffff 	bl	801d3cc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	685b      	ldr	r3, [r3, #4]
 801b3d2:	685b      	ldr	r3, [r3, #4]
 801b3d4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801b3d6:	697b      	ldr	r3, [r7, #20]
 801b3d8:	889b      	ldrh	r3, [r3, #4]
 801b3da:	b29b      	uxth	r3, r3
 801b3dc:	2b00      	cmp	r3, #0
 801b3de:	d12a      	bne.n	801b436 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	685b      	ldr	r3, [r3, #4]
 801b3e4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801b3e6:	697b      	ldr	r3, [r7, #20]
 801b3e8:	681a      	ldr	r2, [r3, #0]
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b3ee:	69bb      	ldr	r3, [r7, #24]
 801b3f0:	6858      	ldr	r0, [r3, #4]
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	3308      	adds	r3, #8
 801b3f6:	2214      	movs	r2, #20
 801b3f8:	4619      	mov	r1, r3
 801b3fa:	f002 f97e 	bl	801d6fa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801b3fe:	2101      	movs	r1, #1
 801b400:	69b8      	ldr	r0, [r7, #24]
 801b402:	f7ff fc47 	bl	801ac94 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801b406:	69b8      	ldr	r0, [r7, #24]
 801b408:	f7f7 fcdc 	bl	8012dc4 <pbuf_clen>
 801b40c:	4603      	mov	r3, r0
 801b40e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b410:	8bfa      	ldrh	r2, [r7, #30]
 801b412:	8a7b      	ldrh	r3, [r7, #18]
 801b414:	4413      	add	r3, r2
 801b416:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b41a:	db05      	blt.n	801b428 <ip_reass_free_complete_datagram+0x98>
 801b41c:	4b27      	ldr	r3, [pc, #156]	@ (801b4bc <ip_reass_free_complete_datagram+0x12c>)
 801b41e:	22bc      	movs	r2, #188	@ 0xbc
 801b420:	492a      	ldr	r1, [pc, #168]	@ (801b4cc <ip_reass_free_complete_datagram+0x13c>)
 801b422:	4828      	ldr	r0, [pc, #160]	@ (801b4c4 <ip_reass_free_complete_datagram+0x134>)
 801b424:	f001 ffd2 	bl	801d3cc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b428:	8bfa      	ldrh	r2, [r7, #30]
 801b42a:	8a7b      	ldrh	r3, [r7, #18]
 801b42c:	4413      	add	r3, r2
 801b42e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801b430:	69b8      	ldr	r0, [r7, #24]
 801b432:	f7f7 fc39 	bl	8012ca8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	685b      	ldr	r3, [r3, #4]
 801b43a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801b43c:	e01f      	b.n	801b47e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801b43e:	69bb      	ldr	r3, [r7, #24]
 801b440:	685b      	ldr	r3, [r3, #4]
 801b442:	617b      	str	r3, [r7, #20]
    pcur = p;
 801b444:	69bb      	ldr	r3, [r7, #24]
 801b446:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801b448:	697b      	ldr	r3, [r7, #20]
 801b44a:	681b      	ldr	r3, [r3, #0]
 801b44c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801b44e:	68f8      	ldr	r0, [r7, #12]
 801b450:	f7f7 fcb8 	bl	8012dc4 <pbuf_clen>
 801b454:	4603      	mov	r3, r0
 801b456:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b458:	8bfa      	ldrh	r2, [r7, #30]
 801b45a:	8a7b      	ldrh	r3, [r7, #18]
 801b45c:	4413      	add	r3, r2
 801b45e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b462:	db05      	blt.n	801b470 <ip_reass_free_complete_datagram+0xe0>
 801b464:	4b15      	ldr	r3, [pc, #84]	@ (801b4bc <ip_reass_free_complete_datagram+0x12c>)
 801b466:	22cc      	movs	r2, #204	@ 0xcc
 801b468:	4918      	ldr	r1, [pc, #96]	@ (801b4cc <ip_reass_free_complete_datagram+0x13c>)
 801b46a:	4816      	ldr	r0, [pc, #88]	@ (801b4c4 <ip_reass_free_complete_datagram+0x134>)
 801b46c:	f001 ffae 	bl	801d3cc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b470:	8bfa      	ldrh	r2, [r7, #30]
 801b472:	8a7b      	ldrh	r3, [r7, #18]
 801b474:	4413      	add	r3, r2
 801b476:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801b478:	68f8      	ldr	r0, [r7, #12]
 801b47a:	f7f7 fc15 	bl	8012ca8 <pbuf_free>
  while (p != NULL) {
 801b47e:	69bb      	ldr	r3, [r7, #24]
 801b480:	2b00      	cmp	r3, #0
 801b482:	d1dc      	bne.n	801b43e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801b484:	6839      	ldr	r1, [r7, #0]
 801b486:	6878      	ldr	r0, [r7, #4]
 801b488:	f000 f8c2 	bl	801b610 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801b48c:	4b10      	ldr	r3, [pc, #64]	@ (801b4d0 <ip_reass_free_complete_datagram+0x140>)
 801b48e:	881b      	ldrh	r3, [r3, #0]
 801b490:	8bfa      	ldrh	r2, [r7, #30]
 801b492:	429a      	cmp	r2, r3
 801b494:	d905      	bls.n	801b4a2 <ip_reass_free_complete_datagram+0x112>
 801b496:	4b09      	ldr	r3, [pc, #36]	@ (801b4bc <ip_reass_free_complete_datagram+0x12c>)
 801b498:	22d2      	movs	r2, #210	@ 0xd2
 801b49a:	490e      	ldr	r1, [pc, #56]	@ (801b4d4 <ip_reass_free_complete_datagram+0x144>)
 801b49c:	4809      	ldr	r0, [pc, #36]	@ (801b4c4 <ip_reass_free_complete_datagram+0x134>)
 801b49e:	f001 ff95 	bl	801d3cc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801b4a2:	4b0b      	ldr	r3, [pc, #44]	@ (801b4d0 <ip_reass_free_complete_datagram+0x140>)
 801b4a4:	881a      	ldrh	r2, [r3, #0]
 801b4a6:	8bfb      	ldrh	r3, [r7, #30]
 801b4a8:	1ad3      	subs	r3, r2, r3
 801b4aa:	b29a      	uxth	r2, r3
 801b4ac:	4b08      	ldr	r3, [pc, #32]	@ (801b4d0 <ip_reass_free_complete_datagram+0x140>)
 801b4ae:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801b4b0:	8bfb      	ldrh	r3, [r7, #30]
}
 801b4b2:	4618      	mov	r0, r3
 801b4b4:	3720      	adds	r7, #32
 801b4b6:	46bd      	mov	sp, r7
 801b4b8:	bd80      	pop	{r7, pc}
 801b4ba:	bf00      	nop
 801b4bc:	08021974 	.word	0x08021974
 801b4c0:	080219b0 	.word	0x080219b0
 801b4c4:	080219bc 	.word	0x080219bc
 801b4c8:	080219e4 	.word	0x080219e4
 801b4cc:	080219f8 	.word	0x080219f8
 801b4d0:	2000e5b4 	.word	0x2000e5b4
 801b4d4:	08021a18 	.word	0x08021a18

0801b4d8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801b4d8:	b580      	push	{r7, lr}
 801b4da:	b08a      	sub	sp, #40	@ 0x28
 801b4dc:	af00      	add	r7, sp, #0
 801b4de:	6078      	str	r0, [r7, #4]
 801b4e0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801b4e2:	2300      	movs	r3, #0
 801b4e4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801b4e6:	2300      	movs	r3, #0
 801b4e8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801b4ea:	2300      	movs	r3, #0
 801b4ec:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801b4ee:	2300      	movs	r3, #0
 801b4f0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801b4f2:	2300      	movs	r3, #0
 801b4f4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801b4f6:	4b28      	ldr	r3, [pc, #160]	@ (801b598 <ip_reass_remove_oldest_datagram+0xc0>)
 801b4f8:	681b      	ldr	r3, [r3, #0]
 801b4fa:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801b4fc:	e030      	b.n	801b560 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801b4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b500:	695a      	ldr	r2, [r3, #20]
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	68db      	ldr	r3, [r3, #12]
 801b506:	429a      	cmp	r2, r3
 801b508:	d10c      	bne.n	801b524 <ip_reass_remove_oldest_datagram+0x4c>
 801b50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b50c:	699a      	ldr	r2, [r3, #24]
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	691b      	ldr	r3, [r3, #16]
 801b512:	429a      	cmp	r2, r3
 801b514:	d106      	bne.n	801b524 <ip_reass_remove_oldest_datagram+0x4c>
 801b516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b518:	899a      	ldrh	r2, [r3, #12]
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	889b      	ldrh	r3, [r3, #4]
 801b51e:	b29b      	uxth	r3, r3
 801b520:	429a      	cmp	r2, r3
 801b522:	d014      	beq.n	801b54e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801b524:	693b      	ldr	r3, [r7, #16]
 801b526:	3301      	adds	r3, #1
 801b528:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801b52a:	6a3b      	ldr	r3, [r7, #32]
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	d104      	bne.n	801b53a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801b530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b532:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b534:	69fb      	ldr	r3, [r7, #28]
 801b536:	61bb      	str	r3, [r7, #24]
 801b538:	e009      	b.n	801b54e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801b53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b53c:	7fda      	ldrb	r2, [r3, #31]
 801b53e:	6a3b      	ldr	r3, [r7, #32]
 801b540:	7fdb      	ldrb	r3, [r3, #31]
 801b542:	429a      	cmp	r2, r3
 801b544:	d803      	bhi.n	801b54e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801b546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b548:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b54a:	69fb      	ldr	r3, [r7, #28]
 801b54c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801b54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	2b00      	cmp	r3, #0
 801b554:	d001      	beq.n	801b55a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801b556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b558:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801b55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b55c:	681b      	ldr	r3, [r3, #0]
 801b55e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801b560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b562:	2b00      	cmp	r3, #0
 801b564:	d1cb      	bne.n	801b4fe <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801b566:	6a3b      	ldr	r3, [r7, #32]
 801b568:	2b00      	cmp	r3, #0
 801b56a:	d008      	beq.n	801b57e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801b56c:	69b9      	ldr	r1, [r7, #24]
 801b56e:	6a38      	ldr	r0, [r7, #32]
 801b570:	f7ff ff0e 	bl	801b390 <ip_reass_free_complete_datagram>
 801b574:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801b576:	697a      	ldr	r2, [r7, #20]
 801b578:	68fb      	ldr	r3, [r7, #12]
 801b57a:	4413      	add	r3, r2
 801b57c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801b57e:	697a      	ldr	r2, [r7, #20]
 801b580:	683b      	ldr	r3, [r7, #0]
 801b582:	429a      	cmp	r2, r3
 801b584:	da02      	bge.n	801b58c <ip_reass_remove_oldest_datagram+0xb4>
 801b586:	693b      	ldr	r3, [r7, #16]
 801b588:	2b01      	cmp	r3, #1
 801b58a:	dcac      	bgt.n	801b4e6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801b58c:	697b      	ldr	r3, [r7, #20]
}
 801b58e:	4618      	mov	r0, r3
 801b590:	3728      	adds	r7, #40	@ 0x28
 801b592:	46bd      	mov	sp, r7
 801b594:	bd80      	pop	{r7, pc}
 801b596:	bf00      	nop
 801b598:	2000e5b0 	.word	0x2000e5b0

0801b59c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801b59c:	b580      	push	{r7, lr}
 801b59e:	b084      	sub	sp, #16
 801b5a0:	af00      	add	r7, sp, #0
 801b5a2:	6078      	str	r0, [r7, #4]
 801b5a4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b5a6:	2004      	movs	r0, #4
 801b5a8:	f7f6 fc64 	bl	8011e74 <memp_malloc>
 801b5ac:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801b5ae:	68fb      	ldr	r3, [r7, #12]
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	d110      	bne.n	801b5d6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801b5b4:	6839      	ldr	r1, [r7, #0]
 801b5b6:	6878      	ldr	r0, [r7, #4]
 801b5b8:	f7ff ff8e 	bl	801b4d8 <ip_reass_remove_oldest_datagram>
 801b5bc:	4602      	mov	r2, r0
 801b5be:	683b      	ldr	r3, [r7, #0]
 801b5c0:	4293      	cmp	r3, r2
 801b5c2:	dc03      	bgt.n	801b5cc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b5c4:	2004      	movs	r0, #4
 801b5c6:	f7f6 fc55 	bl	8011e74 <memp_malloc>
 801b5ca:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801b5cc:	68fb      	ldr	r3, [r7, #12]
 801b5ce:	2b00      	cmp	r3, #0
 801b5d0:	d101      	bne.n	801b5d6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801b5d2:	2300      	movs	r3, #0
 801b5d4:	e016      	b.n	801b604 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801b5d6:	2220      	movs	r2, #32
 801b5d8:	2100      	movs	r1, #0
 801b5da:	68f8      	ldr	r0, [r7, #12]
 801b5dc:	f001 ff97 	bl	801d50e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801b5e0:	68fb      	ldr	r3, [r7, #12]
 801b5e2:	220f      	movs	r2, #15
 801b5e4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801b5e6:	4b09      	ldr	r3, [pc, #36]	@ (801b60c <ip_reass_enqueue_new_datagram+0x70>)
 801b5e8:	681a      	ldr	r2, [r3, #0]
 801b5ea:	68fb      	ldr	r3, [r7, #12]
 801b5ec:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801b5ee:	4a07      	ldr	r2, [pc, #28]	@ (801b60c <ip_reass_enqueue_new_datagram+0x70>)
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801b5f4:	68fb      	ldr	r3, [r7, #12]
 801b5f6:	3308      	adds	r3, #8
 801b5f8:	2214      	movs	r2, #20
 801b5fa:	6879      	ldr	r1, [r7, #4]
 801b5fc:	4618      	mov	r0, r3
 801b5fe:	f002 f87c 	bl	801d6fa <memcpy>
  return ipr;
 801b602:	68fb      	ldr	r3, [r7, #12]
}
 801b604:	4618      	mov	r0, r3
 801b606:	3710      	adds	r7, #16
 801b608:	46bd      	mov	sp, r7
 801b60a:	bd80      	pop	{r7, pc}
 801b60c:	2000e5b0 	.word	0x2000e5b0

0801b610 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b610:	b580      	push	{r7, lr}
 801b612:	b082      	sub	sp, #8
 801b614:	af00      	add	r7, sp, #0
 801b616:	6078      	str	r0, [r7, #4]
 801b618:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801b61a:	4b10      	ldr	r3, [pc, #64]	@ (801b65c <ip_reass_dequeue_datagram+0x4c>)
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	687a      	ldr	r2, [r7, #4]
 801b620:	429a      	cmp	r2, r3
 801b622:	d104      	bne.n	801b62e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	681b      	ldr	r3, [r3, #0]
 801b628:	4a0c      	ldr	r2, [pc, #48]	@ (801b65c <ip_reass_dequeue_datagram+0x4c>)
 801b62a:	6013      	str	r3, [r2, #0]
 801b62c:	e00d      	b.n	801b64a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801b62e:	683b      	ldr	r3, [r7, #0]
 801b630:	2b00      	cmp	r3, #0
 801b632:	d106      	bne.n	801b642 <ip_reass_dequeue_datagram+0x32>
 801b634:	4b0a      	ldr	r3, [pc, #40]	@ (801b660 <ip_reass_dequeue_datagram+0x50>)
 801b636:	f240 1245 	movw	r2, #325	@ 0x145
 801b63a:	490a      	ldr	r1, [pc, #40]	@ (801b664 <ip_reass_dequeue_datagram+0x54>)
 801b63c:	480a      	ldr	r0, [pc, #40]	@ (801b668 <ip_reass_dequeue_datagram+0x58>)
 801b63e:	f001 fec5 	bl	801d3cc <iprintf>
    prev->next = ipr->next;
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	681a      	ldr	r2, [r3, #0]
 801b646:	683b      	ldr	r3, [r7, #0]
 801b648:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801b64a:	6879      	ldr	r1, [r7, #4]
 801b64c:	2004      	movs	r0, #4
 801b64e:	f7f6 fc87 	bl	8011f60 <memp_free>
}
 801b652:	bf00      	nop
 801b654:	3708      	adds	r7, #8
 801b656:	46bd      	mov	sp, r7
 801b658:	bd80      	pop	{r7, pc}
 801b65a:	bf00      	nop
 801b65c:	2000e5b0 	.word	0x2000e5b0
 801b660:	08021974 	.word	0x08021974
 801b664:	08021a3c 	.word	0x08021a3c
 801b668:	080219bc 	.word	0x080219bc

0801b66c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801b66c:	b580      	push	{r7, lr}
 801b66e:	b08c      	sub	sp, #48	@ 0x30
 801b670:	af00      	add	r7, sp, #0
 801b672:	60f8      	str	r0, [r7, #12]
 801b674:	60b9      	str	r1, [r7, #8]
 801b676:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801b678:	2300      	movs	r3, #0
 801b67a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801b67c:	2301      	movs	r3, #1
 801b67e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801b680:	68bb      	ldr	r3, [r7, #8]
 801b682:	685b      	ldr	r3, [r3, #4]
 801b684:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b686:	69fb      	ldr	r3, [r7, #28]
 801b688:	885b      	ldrh	r3, [r3, #2]
 801b68a:	b29b      	uxth	r3, r3
 801b68c:	4618      	mov	r0, r3
 801b68e:	f7f5 ff1d 	bl	80114cc <lwip_htons>
 801b692:	4603      	mov	r3, r0
 801b694:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801b696:	69fb      	ldr	r3, [r7, #28]
 801b698:	781b      	ldrb	r3, [r3, #0]
 801b69a:	f003 030f 	and.w	r3, r3, #15
 801b69e:	b2db      	uxtb	r3, r3
 801b6a0:	009b      	lsls	r3, r3, #2
 801b6a2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801b6a4:	7e7b      	ldrb	r3, [r7, #25]
 801b6a6:	b29b      	uxth	r3, r3
 801b6a8:	8b7a      	ldrh	r2, [r7, #26]
 801b6aa:	429a      	cmp	r2, r3
 801b6ac:	d202      	bcs.n	801b6b4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b6ae:	f04f 33ff 	mov.w	r3, #4294967295
 801b6b2:	e135      	b.n	801b920 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801b6b4:	7e7b      	ldrb	r3, [r7, #25]
 801b6b6:	b29b      	uxth	r3, r3
 801b6b8:	8b7a      	ldrh	r2, [r7, #26]
 801b6ba:	1ad3      	subs	r3, r2, r3
 801b6bc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801b6be:	69fb      	ldr	r3, [r7, #28]
 801b6c0:	88db      	ldrh	r3, [r3, #6]
 801b6c2:	b29b      	uxth	r3, r3
 801b6c4:	4618      	mov	r0, r3
 801b6c6:	f7f5 ff01 	bl	80114cc <lwip_htons>
 801b6ca:	4603      	mov	r3, r0
 801b6cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b6d0:	b29b      	uxth	r3, r3
 801b6d2:	00db      	lsls	r3, r3, #3
 801b6d4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801b6d6:	68bb      	ldr	r3, [r7, #8]
 801b6d8:	685b      	ldr	r3, [r3, #4]
 801b6da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801b6dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6de:	2200      	movs	r2, #0
 801b6e0:	701a      	strb	r2, [r3, #0]
 801b6e2:	2200      	movs	r2, #0
 801b6e4:	705a      	strb	r2, [r3, #1]
 801b6e6:	2200      	movs	r2, #0
 801b6e8:	709a      	strb	r2, [r3, #2]
 801b6ea:	2200      	movs	r2, #0
 801b6ec:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801b6ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6f0:	8afa      	ldrh	r2, [r7, #22]
 801b6f2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801b6f4:	8afa      	ldrh	r2, [r7, #22]
 801b6f6:	8b7b      	ldrh	r3, [r7, #26]
 801b6f8:	4413      	add	r3, r2
 801b6fa:	b29a      	uxth	r2, r3
 801b6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6fe:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801b700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b702:	88db      	ldrh	r3, [r3, #6]
 801b704:	b29b      	uxth	r3, r3
 801b706:	8afa      	ldrh	r2, [r7, #22]
 801b708:	429a      	cmp	r2, r3
 801b70a:	d902      	bls.n	801b712 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b70c:	f04f 33ff 	mov.w	r3, #4294967295
 801b710:	e106      	b.n	801b920 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801b712:	68fb      	ldr	r3, [r7, #12]
 801b714:	685b      	ldr	r3, [r3, #4]
 801b716:	627b      	str	r3, [r7, #36]	@ 0x24
 801b718:	e068      	b.n	801b7ec <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801b71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b71c:	685b      	ldr	r3, [r3, #4]
 801b71e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801b720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b722:	889b      	ldrh	r3, [r3, #4]
 801b724:	b29a      	uxth	r2, r3
 801b726:	693b      	ldr	r3, [r7, #16]
 801b728:	889b      	ldrh	r3, [r3, #4]
 801b72a:	b29b      	uxth	r3, r3
 801b72c:	429a      	cmp	r2, r3
 801b72e:	d235      	bcs.n	801b79c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801b730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b734:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801b736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d020      	beq.n	801b77e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801b73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b73e:	889b      	ldrh	r3, [r3, #4]
 801b740:	b29a      	uxth	r2, r3
 801b742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b744:	88db      	ldrh	r3, [r3, #6]
 801b746:	b29b      	uxth	r3, r3
 801b748:	429a      	cmp	r2, r3
 801b74a:	d307      	bcc.n	801b75c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801b74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b74e:	88db      	ldrh	r3, [r3, #6]
 801b750:	b29a      	uxth	r2, r3
 801b752:	693b      	ldr	r3, [r7, #16]
 801b754:	889b      	ldrh	r3, [r3, #4]
 801b756:	b29b      	uxth	r3, r3
 801b758:	429a      	cmp	r2, r3
 801b75a:	d902      	bls.n	801b762 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b75c:	f04f 33ff 	mov.w	r3, #4294967295
 801b760:	e0de      	b.n	801b920 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801b762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b764:	68ba      	ldr	r2, [r7, #8]
 801b766:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801b768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b76a:	88db      	ldrh	r3, [r3, #6]
 801b76c:	b29a      	uxth	r2, r3
 801b76e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b770:	889b      	ldrh	r3, [r3, #4]
 801b772:	b29b      	uxth	r3, r3
 801b774:	429a      	cmp	r2, r3
 801b776:	d03d      	beq.n	801b7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b778:	2300      	movs	r3, #0
 801b77a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801b77c:	e03a      	b.n	801b7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801b77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b780:	88db      	ldrh	r3, [r3, #6]
 801b782:	b29a      	uxth	r2, r3
 801b784:	693b      	ldr	r3, [r7, #16]
 801b786:	889b      	ldrh	r3, [r3, #4]
 801b788:	b29b      	uxth	r3, r3
 801b78a:	429a      	cmp	r2, r3
 801b78c:	d902      	bls.n	801b794 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b78e:	f04f 33ff 	mov.w	r3, #4294967295
 801b792:	e0c5      	b.n	801b920 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801b794:	68fb      	ldr	r3, [r7, #12]
 801b796:	68ba      	ldr	r2, [r7, #8]
 801b798:	605a      	str	r2, [r3, #4]
      break;
 801b79a:	e02b      	b.n	801b7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801b79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b79e:	889b      	ldrh	r3, [r3, #4]
 801b7a0:	b29a      	uxth	r2, r3
 801b7a2:	693b      	ldr	r3, [r7, #16]
 801b7a4:	889b      	ldrh	r3, [r3, #4]
 801b7a6:	b29b      	uxth	r3, r3
 801b7a8:	429a      	cmp	r2, r3
 801b7aa:	d102      	bne.n	801b7b2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b7ac:	f04f 33ff 	mov.w	r3, #4294967295
 801b7b0:	e0b6      	b.n	801b920 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801b7b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7b4:	889b      	ldrh	r3, [r3, #4]
 801b7b6:	b29a      	uxth	r2, r3
 801b7b8:	693b      	ldr	r3, [r7, #16]
 801b7ba:	88db      	ldrh	r3, [r3, #6]
 801b7bc:	b29b      	uxth	r3, r3
 801b7be:	429a      	cmp	r2, r3
 801b7c0:	d202      	bcs.n	801b7c8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b7c2:	f04f 33ff 	mov.w	r3, #4294967295
 801b7c6:	e0ab      	b.n	801b920 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801b7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7ca:	2b00      	cmp	r3, #0
 801b7cc:	d009      	beq.n	801b7e2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801b7ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7d0:	88db      	ldrh	r3, [r3, #6]
 801b7d2:	b29a      	uxth	r2, r3
 801b7d4:	693b      	ldr	r3, [r7, #16]
 801b7d6:	889b      	ldrh	r3, [r3, #4]
 801b7d8:	b29b      	uxth	r3, r3
 801b7da:	429a      	cmp	r2, r3
 801b7dc:	d001      	beq.n	801b7e2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b7de:	2300      	movs	r3, #0
 801b7e0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801b7e2:	693b      	ldr	r3, [r7, #16]
 801b7e4:	681b      	ldr	r3, [r3, #0]
 801b7e6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801b7e8:	693b      	ldr	r3, [r7, #16]
 801b7ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801b7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	d193      	bne.n	801b71a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801b7f2:	e000      	b.n	801b7f6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801b7f4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801b7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	d12d      	bne.n	801b858 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801b7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7fe:	2b00      	cmp	r3, #0
 801b800:	d01c      	beq.n	801b83c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801b802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b804:	88db      	ldrh	r3, [r3, #6]
 801b806:	b29a      	uxth	r2, r3
 801b808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b80a:	889b      	ldrh	r3, [r3, #4]
 801b80c:	b29b      	uxth	r3, r3
 801b80e:	429a      	cmp	r2, r3
 801b810:	d906      	bls.n	801b820 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801b812:	4b45      	ldr	r3, [pc, #276]	@ (801b928 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b814:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801b818:	4944      	ldr	r1, [pc, #272]	@ (801b92c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801b81a:	4845      	ldr	r0, [pc, #276]	@ (801b930 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b81c:	f001 fdd6 	bl	801d3cc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801b820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b822:	68ba      	ldr	r2, [r7, #8]
 801b824:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801b826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b828:	88db      	ldrh	r3, [r3, #6]
 801b82a:	b29a      	uxth	r2, r3
 801b82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b82e:	889b      	ldrh	r3, [r3, #4]
 801b830:	b29b      	uxth	r3, r3
 801b832:	429a      	cmp	r2, r3
 801b834:	d010      	beq.n	801b858 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801b836:	2300      	movs	r3, #0
 801b838:	623b      	str	r3, [r7, #32]
 801b83a:	e00d      	b.n	801b858 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801b83c:	68fb      	ldr	r3, [r7, #12]
 801b83e:	685b      	ldr	r3, [r3, #4]
 801b840:	2b00      	cmp	r3, #0
 801b842:	d006      	beq.n	801b852 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801b844:	4b38      	ldr	r3, [pc, #224]	@ (801b928 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b846:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801b84a:	493a      	ldr	r1, [pc, #232]	@ (801b934 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801b84c:	4838      	ldr	r0, [pc, #224]	@ (801b930 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b84e:	f001 fdbd 	bl	801d3cc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801b852:	68fb      	ldr	r3, [r7, #12]
 801b854:	68ba      	ldr	r2, [r7, #8]
 801b856:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801b858:	687b      	ldr	r3, [r7, #4]
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d105      	bne.n	801b86a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801b85e:	68fb      	ldr	r3, [r7, #12]
 801b860:	7f9b      	ldrb	r3, [r3, #30]
 801b862:	f003 0301 	and.w	r3, r3, #1
 801b866:	2b00      	cmp	r3, #0
 801b868:	d059      	beq.n	801b91e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801b86a:	6a3b      	ldr	r3, [r7, #32]
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	d04f      	beq.n	801b910 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801b870:	68fb      	ldr	r3, [r7, #12]
 801b872:	685b      	ldr	r3, [r3, #4]
 801b874:	2b00      	cmp	r3, #0
 801b876:	d006      	beq.n	801b886 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801b878:	68fb      	ldr	r3, [r7, #12]
 801b87a:	685b      	ldr	r3, [r3, #4]
 801b87c:	685b      	ldr	r3, [r3, #4]
 801b87e:	889b      	ldrh	r3, [r3, #4]
 801b880:	b29b      	uxth	r3, r3
 801b882:	2b00      	cmp	r3, #0
 801b884:	d002      	beq.n	801b88c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801b886:	2300      	movs	r3, #0
 801b888:	623b      	str	r3, [r7, #32]
 801b88a:	e041      	b.n	801b910 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801b88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b88e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801b890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b892:	681b      	ldr	r3, [r3, #0]
 801b894:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801b896:	e012      	b.n	801b8be <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801b898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b89a:	685b      	ldr	r3, [r3, #4]
 801b89c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801b89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b8a0:	88db      	ldrh	r3, [r3, #6]
 801b8a2:	b29a      	uxth	r2, r3
 801b8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8a6:	889b      	ldrh	r3, [r3, #4]
 801b8a8:	b29b      	uxth	r3, r3
 801b8aa:	429a      	cmp	r2, r3
 801b8ac:	d002      	beq.n	801b8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801b8ae:	2300      	movs	r3, #0
 801b8b0:	623b      	str	r3, [r7, #32]
            break;
 801b8b2:	e007      	b.n	801b8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801b8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8b6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801b8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8ba:	681b      	ldr	r3, [r3, #0]
 801b8bc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801b8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	d1e9      	bne.n	801b898 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801b8c4:	6a3b      	ldr	r3, [r7, #32]
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	d022      	beq.n	801b910 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801b8ca:	68fb      	ldr	r3, [r7, #12]
 801b8cc:	685b      	ldr	r3, [r3, #4]
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d106      	bne.n	801b8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801b8d2:	4b15      	ldr	r3, [pc, #84]	@ (801b928 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b8d4:	f240 12df 	movw	r2, #479	@ 0x1df
 801b8d8:	4917      	ldr	r1, [pc, #92]	@ (801b938 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b8da:	4815      	ldr	r0, [pc, #84]	@ (801b930 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b8dc:	f001 fd76 	bl	801d3cc <iprintf>
          LWIP_ASSERT("sanity check",
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	685b      	ldr	r3, [r3, #4]
 801b8e4:	685b      	ldr	r3, [r3, #4]
 801b8e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b8e8:	429a      	cmp	r2, r3
 801b8ea:	d106      	bne.n	801b8fa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801b8ec:	4b0e      	ldr	r3, [pc, #56]	@ (801b928 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b8ee:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801b8f2:	4911      	ldr	r1, [pc, #68]	@ (801b938 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b8f4:	480e      	ldr	r0, [pc, #56]	@ (801b930 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b8f6:	f001 fd69 	bl	801d3cc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801b8fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	d006      	beq.n	801b910 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801b902:	4b09      	ldr	r3, [pc, #36]	@ (801b928 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b904:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801b908:	490c      	ldr	r1, [pc, #48]	@ (801b93c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801b90a:	4809      	ldr	r0, [pc, #36]	@ (801b930 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b90c:	f001 fd5e 	bl	801d3cc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801b910:	6a3b      	ldr	r3, [r7, #32]
 801b912:	2b00      	cmp	r3, #0
 801b914:	bf14      	ite	ne
 801b916:	2301      	movne	r3, #1
 801b918:	2300      	moveq	r3, #0
 801b91a:	b2db      	uxtb	r3, r3
 801b91c:	e000      	b.n	801b920 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801b91e:	2300      	movs	r3, #0
}
 801b920:	4618      	mov	r0, r3
 801b922:	3730      	adds	r7, #48	@ 0x30
 801b924:	46bd      	mov	sp, r7
 801b926:	bd80      	pop	{r7, pc}
 801b928:	08021974 	.word	0x08021974
 801b92c:	08021a58 	.word	0x08021a58
 801b930:	080219bc 	.word	0x080219bc
 801b934:	08021a78 	.word	0x08021a78
 801b938:	08021ab0 	.word	0x08021ab0
 801b93c:	08021ac0 	.word	0x08021ac0

0801b940 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801b940:	b580      	push	{r7, lr}
 801b942:	b08e      	sub	sp, #56	@ 0x38
 801b944:	af00      	add	r7, sp, #0
 801b946:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	685b      	ldr	r3, [r3, #4]
 801b94c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801b94e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b950:	781b      	ldrb	r3, [r3, #0]
 801b952:	f003 030f 	and.w	r3, r3, #15
 801b956:	b2db      	uxtb	r3, r3
 801b958:	009b      	lsls	r3, r3, #2
 801b95a:	b2db      	uxtb	r3, r3
 801b95c:	2b14      	cmp	r3, #20
 801b95e:	f040 8171 	bne.w	801bc44 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801b962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b964:	88db      	ldrh	r3, [r3, #6]
 801b966:	b29b      	uxth	r3, r3
 801b968:	4618      	mov	r0, r3
 801b96a:	f7f5 fdaf 	bl	80114cc <lwip_htons>
 801b96e:	4603      	mov	r3, r0
 801b970:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b974:	b29b      	uxth	r3, r3
 801b976:	00db      	lsls	r3, r3, #3
 801b978:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b97c:	885b      	ldrh	r3, [r3, #2]
 801b97e:	b29b      	uxth	r3, r3
 801b980:	4618      	mov	r0, r3
 801b982:	f7f5 fda3 	bl	80114cc <lwip_htons>
 801b986:	4603      	mov	r3, r0
 801b988:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801b98a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b98c:	781b      	ldrb	r3, [r3, #0]
 801b98e:	f003 030f 	and.w	r3, r3, #15
 801b992:	b2db      	uxtb	r3, r3
 801b994:	009b      	lsls	r3, r3, #2
 801b996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801b99a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b99e:	b29b      	uxth	r3, r3
 801b9a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801b9a2:	429a      	cmp	r2, r3
 801b9a4:	f0c0 8150 	bcc.w	801bc48 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801b9a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b9ac:	b29b      	uxth	r3, r3
 801b9ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801b9b0:	1ad3      	subs	r3, r2, r3
 801b9b2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801b9b4:	6878      	ldr	r0, [r7, #4]
 801b9b6:	f7f7 fa05 	bl	8012dc4 <pbuf_clen>
 801b9ba:	4603      	mov	r3, r0
 801b9bc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801b9be:	4b8c      	ldr	r3, [pc, #560]	@ (801bbf0 <ip4_reass+0x2b0>)
 801b9c0:	881b      	ldrh	r3, [r3, #0]
 801b9c2:	461a      	mov	r2, r3
 801b9c4:	8c3b      	ldrh	r3, [r7, #32]
 801b9c6:	4413      	add	r3, r2
 801b9c8:	2b0a      	cmp	r3, #10
 801b9ca:	dd10      	ble.n	801b9ee <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b9cc:	8c3b      	ldrh	r3, [r7, #32]
 801b9ce:	4619      	mov	r1, r3
 801b9d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b9d2:	f7ff fd81 	bl	801b4d8 <ip_reass_remove_oldest_datagram>
 801b9d6:	4603      	mov	r3, r0
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	f000 8137 	beq.w	801bc4c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801b9de:	4b84      	ldr	r3, [pc, #528]	@ (801bbf0 <ip4_reass+0x2b0>)
 801b9e0:	881b      	ldrh	r3, [r3, #0]
 801b9e2:	461a      	mov	r2, r3
 801b9e4:	8c3b      	ldrh	r3, [r7, #32]
 801b9e6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b9e8:	2b0a      	cmp	r3, #10
 801b9ea:	f300 812f 	bgt.w	801bc4c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b9ee:	4b81      	ldr	r3, [pc, #516]	@ (801bbf4 <ip4_reass+0x2b4>)
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	633b      	str	r3, [r7, #48]	@ 0x30
 801b9f4:	e015      	b.n	801ba22 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801b9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b9f8:	695a      	ldr	r2, [r3, #20]
 801b9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b9fc:	68db      	ldr	r3, [r3, #12]
 801b9fe:	429a      	cmp	r2, r3
 801ba00:	d10c      	bne.n	801ba1c <ip4_reass+0xdc>
 801ba02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba04:	699a      	ldr	r2, [r3, #24]
 801ba06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba08:	691b      	ldr	r3, [r3, #16]
 801ba0a:	429a      	cmp	r2, r3
 801ba0c:	d106      	bne.n	801ba1c <ip4_reass+0xdc>
 801ba0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba10:	899a      	ldrh	r2, [r3, #12]
 801ba12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba14:	889b      	ldrh	r3, [r3, #4]
 801ba16:	b29b      	uxth	r3, r3
 801ba18:	429a      	cmp	r2, r3
 801ba1a:	d006      	beq.n	801ba2a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ba1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	633b      	str	r3, [r7, #48]	@ 0x30
 801ba22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	d1e6      	bne.n	801b9f6 <ip4_reass+0xb6>
 801ba28:	e000      	b.n	801ba2c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801ba2a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801ba2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba2e:	2b00      	cmp	r3, #0
 801ba30:	d109      	bne.n	801ba46 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801ba32:	8c3b      	ldrh	r3, [r7, #32]
 801ba34:	4619      	mov	r1, r3
 801ba36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ba38:	f7ff fdb0 	bl	801b59c <ip_reass_enqueue_new_datagram>
 801ba3c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801ba3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d11c      	bne.n	801ba7e <ip4_reass+0x13e>
      goto nullreturn;
 801ba44:	e105      	b.n	801bc52 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ba46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba48:	88db      	ldrh	r3, [r3, #6]
 801ba4a:	b29b      	uxth	r3, r3
 801ba4c:	4618      	mov	r0, r3
 801ba4e:	f7f5 fd3d 	bl	80114cc <lwip_htons>
 801ba52:	4603      	mov	r3, r0
 801ba54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	d110      	bne.n	801ba7e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801ba5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba5e:	89db      	ldrh	r3, [r3, #14]
 801ba60:	4618      	mov	r0, r3
 801ba62:	f7f5 fd33 	bl	80114cc <lwip_htons>
 801ba66:	4603      	mov	r3, r0
 801ba68:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ba6c:	2b00      	cmp	r3, #0
 801ba6e:	d006      	beq.n	801ba7e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801ba70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba72:	3308      	adds	r3, #8
 801ba74:	2214      	movs	r2, #20
 801ba76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801ba78:	4618      	mov	r0, r3
 801ba7a:	f001 fe3e 	bl	801d6fa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801ba7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba80:	88db      	ldrh	r3, [r3, #6]
 801ba82:	b29b      	uxth	r3, r3
 801ba84:	f003 0320 	and.w	r3, r3, #32
 801ba88:	2b00      	cmp	r3, #0
 801ba8a:	bf0c      	ite	eq
 801ba8c:	2301      	moveq	r3, #1
 801ba8e:	2300      	movne	r3, #0
 801ba90:	b2db      	uxtb	r3, r3
 801ba92:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801ba94:	69fb      	ldr	r3, [r7, #28]
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d00e      	beq.n	801bab8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801ba9a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801ba9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ba9e:	4413      	add	r3, r2
 801baa0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801baa2:	8b7a      	ldrh	r2, [r7, #26]
 801baa4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801baa6:	429a      	cmp	r2, r3
 801baa8:	f0c0 80a0 	bcc.w	801bbec <ip4_reass+0x2ac>
 801baac:	8b7b      	ldrh	r3, [r7, #26]
 801baae:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801bab2:	4293      	cmp	r3, r2
 801bab4:	f200 809a 	bhi.w	801bbec <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801bab8:	69fa      	ldr	r2, [r7, #28]
 801baba:	6879      	ldr	r1, [r7, #4]
 801babc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801babe:	f7ff fdd5 	bl	801b66c <ip_reass_chain_frag_into_datagram_and_validate>
 801bac2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801bac4:	697b      	ldr	r3, [r7, #20]
 801bac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801baca:	f000 809b 	beq.w	801bc04 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801bace:	4b48      	ldr	r3, [pc, #288]	@ (801bbf0 <ip4_reass+0x2b0>)
 801bad0:	881a      	ldrh	r2, [r3, #0]
 801bad2:	8c3b      	ldrh	r3, [r7, #32]
 801bad4:	4413      	add	r3, r2
 801bad6:	b29a      	uxth	r2, r3
 801bad8:	4b45      	ldr	r3, [pc, #276]	@ (801bbf0 <ip4_reass+0x2b0>)
 801bada:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801badc:	69fb      	ldr	r3, [r7, #28]
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d00d      	beq.n	801bafe <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801bae2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801bae4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801bae6:	4413      	add	r3, r2
 801bae8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801baea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801baec:	8a7a      	ldrh	r2, [r7, #18]
 801baee:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801baf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801baf2:	7f9b      	ldrb	r3, [r3, #30]
 801baf4:	f043 0301 	orr.w	r3, r3, #1
 801baf8:	b2da      	uxtb	r2, r3
 801bafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bafc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801bafe:	697b      	ldr	r3, [r7, #20]
 801bb00:	2b01      	cmp	r3, #1
 801bb02:	d171      	bne.n	801bbe8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801bb04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bb06:	8b9b      	ldrh	r3, [r3, #28]
 801bb08:	3314      	adds	r3, #20
 801bb0a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801bb0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bb0e:	685b      	ldr	r3, [r3, #4]
 801bb10:	685b      	ldr	r3, [r3, #4]
 801bb12:	681b      	ldr	r3, [r3, #0]
 801bb14:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801bb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bb18:	685b      	ldr	r3, [r3, #4]
 801bb1a:	685b      	ldr	r3, [r3, #4]
 801bb1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801bb1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bb20:	3308      	adds	r3, #8
 801bb22:	2214      	movs	r2, #20
 801bb24:	4619      	mov	r1, r3
 801bb26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bb28:	f001 fde7 	bl	801d6fa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801bb2c:	8a3b      	ldrh	r3, [r7, #16]
 801bb2e:	4618      	mov	r0, r3
 801bb30:	f7f5 fccc 	bl	80114cc <lwip_htons>
 801bb34:	4603      	mov	r3, r0
 801bb36:	461a      	mov	r2, r3
 801bb38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb3a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801bb3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb3e:	2200      	movs	r2, #0
 801bb40:	719a      	strb	r2, [r3, #6]
 801bb42:	2200      	movs	r2, #0
 801bb44:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801bb46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb48:	2200      	movs	r2, #0
 801bb4a:	729a      	strb	r2, [r3, #10]
 801bb4c:	2200      	movs	r2, #0
 801bb4e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801bb50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bb52:	685b      	ldr	r3, [r3, #4]
 801bb54:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801bb56:	e00d      	b.n	801bb74 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801bb58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bb5a:	685b      	ldr	r3, [r3, #4]
 801bb5c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801bb5e:	2114      	movs	r1, #20
 801bb60:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801bb62:	f7f7 f81b 	bl	8012b9c <pbuf_remove_header>
      pbuf_cat(p, r);
 801bb66:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801bb68:	6878      	ldr	r0, [r7, #4]
 801bb6a:	f7f7 f96b 	bl	8012e44 <pbuf_cat>
      r = iprh->next_pbuf;
 801bb6e:	68fb      	ldr	r3, [r7, #12]
 801bb70:	681b      	ldr	r3, [r3, #0]
 801bb72:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801bb74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bb76:	2b00      	cmp	r3, #0
 801bb78:	d1ee      	bne.n	801bb58 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801bb7a:	4b1e      	ldr	r3, [pc, #120]	@ (801bbf4 <ip4_reass+0x2b4>)
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bb80:	429a      	cmp	r2, r3
 801bb82:	d102      	bne.n	801bb8a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801bb84:	2300      	movs	r3, #0
 801bb86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801bb88:	e010      	b.n	801bbac <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801bb8a:	4b1a      	ldr	r3, [pc, #104]	@ (801bbf4 <ip4_reass+0x2b4>)
 801bb8c:	681b      	ldr	r3, [r3, #0]
 801bb8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801bb90:	e007      	b.n	801bba2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801bb92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb94:	681b      	ldr	r3, [r3, #0]
 801bb96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bb98:	429a      	cmp	r2, r3
 801bb9a:	d006      	beq.n	801bbaa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801bb9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb9e:	681b      	ldr	r3, [r3, #0]
 801bba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801bba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d1f4      	bne.n	801bb92 <ip4_reass+0x252>
 801bba8:	e000      	b.n	801bbac <ip4_reass+0x26c>
          break;
 801bbaa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801bbac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801bbae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801bbb0:	f7ff fd2e 	bl	801b610 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801bbb4:	6878      	ldr	r0, [r7, #4]
 801bbb6:	f7f7 f905 	bl	8012dc4 <pbuf_clen>
 801bbba:	4603      	mov	r3, r0
 801bbbc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801bbbe:	4b0c      	ldr	r3, [pc, #48]	@ (801bbf0 <ip4_reass+0x2b0>)
 801bbc0:	881b      	ldrh	r3, [r3, #0]
 801bbc2:	8c3a      	ldrh	r2, [r7, #32]
 801bbc4:	429a      	cmp	r2, r3
 801bbc6:	d906      	bls.n	801bbd6 <ip4_reass+0x296>
 801bbc8:	4b0b      	ldr	r3, [pc, #44]	@ (801bbf8 <ip4_reass+0x2b8>)
 801bbca:	f240 229b 	movw	r2, #667	@ 0x29b
 801bbce:	490b      	ldr	r1, [pc, #44]	@ (801bbfc <ip4_reass+0x2bc>)
 801bbd0:	480b      	ldr	r0, [pc, #44]	@ (801bc00 <ip4_reass+0x2c0>)
 801bbd2:	f001 fbfb 	bl	801d3cc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801bbd6:	4b06      	ldr	r3, [pc, #24]	@ (801bbf0 <ip4_reass+0x2b0>)
 801bbd8:	881a      	ldrh	r2, [r3, #0]
 801bbda:	8c3b      	ldrh	r3, [r7, #32]
 801bbdc:	1ad3      	subs	r3, r2, r3
 801bbde:	b29a      	uxth	r2, r3
 801bbe0:	4b03      	ldr	r3, [pc, #12]	@ (801bbf0 <ip4_reass+0x2b0>)
 801bbe2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	e038      	b.n	801bc5a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801bbe8:	2300      	movs	r3, #0
 801bbea:	e036      	b.n	801bc5a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801bbec:	bf00      	nop
 801bbee:	e00a      	b.n	801bc06 <ip4_reass+0x2c6>
 801bbf0:	2000e5b4 	.word	0x2000e5b4
 801bbf4:	2000e5b0 	.word	0x2000e5b0
 801bbf8:	08021974 	.word	0x08021974
 801bbfc:	08021ae4 	.word	0x08021ae4
 801bc00:	080219bc 	.word	0x080219bc
    goto nullreturn_ipr;
 801bc04:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801bc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bc08:	2b00      	cmp	r3, #0
 801bc0a:	d106      	bne.n	801bc1a <ip4_reass+0x2da>
 801bc0c:	4b15      	ldr	r3, [pc, #84]	@ (801bc64 <ip4_reass+0x324>)
 801bc0e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801bc12:	4915      	ldr	r1, [pc, #84]	@ (801bc68 <ip4_reass+0x328>)
 801bc14:	4815      	ldr	r0, [pc, #84]	@ (801bc6c <ip4_reass+0x32c>)
 801bc16:	f001 fbd9 	bl	801d3cc <iprintf>
  if (ipr->p == NULL) {
 801bc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bc1c:	685b      	ldr	r3, [r3, #4]
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	d116      	bne.n	801bc50 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801bc22:	4b13      	ldr	r3, [pc, #76]	@ (801bc70 <ip4_reass+0x330>)
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bc28:	429a      	cmp	r2, r3
 801bc2a:	d006      	beq.n	801bc3a <ip4_reass+0x2fa>
 801bc2c:	4b0d      	ldr	r3, [pc, #52]	@ (801bc64 <ip4_reass+0x324>)
 801bc2e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801bc32:	4910      	ldr	r1, [pc, #64]	@ (801bc74 <ip4_reass+0x334>)
 801bc34:	480d      	ldr	r0, [pc, #52]	@ (801bc6c <ip4_reass+0x32c>)
 801bc36:	f001 fbc9 	bl	801d3cc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801bc3a:	2100      	movs	r1, #0
 801bc3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801bc3e:	f7ff fce7 	bl	801b610 <ip_reass_dequeue_datagram>
 801bc42:	e006      	b.n	801bc52 <ip4_reass+0x312>
    goto nullreturn;
 801bc44:	bf00      	nop
 801bc46:	e004      	b.n	801bc52 <ip4_reass+0x312>
    goto nullreturn;
 801bc48:	bf00      	nop
 801bc4a:	e002      	b.n	801bc52 <ip4_reass+0x312>
      goto nullreturn;
 801bc4c:	bf00      	nop
 801bc4e:	e000      	b.n	801bc52 <ip4_reass+0x312>
  }

nullreturn:
 801bc50:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801bc52:	6878      	ldr	r0, [r7, #4]
 801bc54:	f7f7 f828 	bl	8012ca8 <pbuf_free>
  return NULL;
 801bc58:	2300      	movs	r3, #0
}
 801bc5a:	4618      	mov	r0, r3
 801bc5c:	3738      	adds	r7, #56	@ 0x38
 801bc5e:	46bd      	mov	sp, r7
 801bc60:	bd80      	pop	{r7, pc}
 801bc62:	bf00      	nop
 801bc64:	08021974 	.word	0x08021974
 801bc68:	08021b00 	.word	0x08021b00
 801bc6c:	080219bc 	.word	0x080219bc
 801bc70:	2000e5b0 	.word	0x2000e5b0
 801bc74:	08021b0c 	.word	0x08021b0c

0801bc78 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801bc78:	b580      	push	{r7, lr}
 801bc7a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801bc7c:	2005      	movs	r0, #5
 801bc7e:	f7f6 f8f9 	bl	8011e74 <memp_malloc>
 801bc82:	4603      	mov	r3, r0
}
 801bc84:	4618      	mov	r0, r3
 801bc86:	bd80      	pop	{r7, pc}

0801bc88 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801bc88:	b580      	push	{r7, lr}
 801bc8a:	b082      	sub	sp, #8
 801bc8c:	af00      	add	r7, sp, #0
 801bc8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	d106      	bne.n	801bca4 <ip_frag_free_pbuf_custom_ref+0x1c>
 801bc96:	4b07      	ldr	r3, [pc, #28]	@ (801bcb4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801bc98:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801bc9c:	4906      	ldr	r1, [pc, #24]	@ (801bcb8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801bc9e:	4807      	ldr	r0, [pc, #28]	@ (801bcbc <ip_frag_free_pbuf_custom_ref+0x34>)
 801bca0:	f001 fb94 	bl	801d3cc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801bca4:	6879      	ldr	r1, [r7, #4]
 801bca6:	2005      	movs	r0, #5
 801bca8:	f7f6 f95a 	bl	8011f60 <memp_free>
}
 801bcac:	bf00      	nop
 801bcae:	3708      	adds	r7, #8
 801bcb0:	46bd      	mov	sp, r7
 801bcb2:	bd80      	pop	{r7, pc}
 801bcb4:	08021974 	.word	0x08021974
 801bcb8:	08021b2c 	.word	0x08021b2c
 801bcbc:	080219bc 	.word	0x080219bc

0801bcc0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801bcc0:	b580      	push	{r7, lr}
 801bcc2:	b084      	sub	sp, #16
 801bcc4:	af00      	add	r7, sp, #0
 801bcc6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801bccc:	68fb      	ldr	r3, [r7, #12]
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	d106      	bne.n	801bce0 <ipfrag_free_pbuf_custom+0x20>
 801bcd2:	4b11      	ldr	r3, [pc, #68]	@ (801bd18 <ipfrag_free_pbuf_custom+0x58>)
 801bcd4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801bcd8:	4910      	ldr	r1, [pc, #64]	@ (801bd1c <ipfrag_free_pbuf_custom+0x5c>)
 801bcda:	4811      	ldr	r0, [pc, #68]	@ (801bd20 <ipfrag_free_pbuf_custom+0x60>)
 801bcdc:	f001 fb76 	bl	801d3cc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801bce0:	68fa      	ldr	r2, [r7, #12]
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	429a      	cmp	r2, r3
 801bce6:	d006      	beq.n	801bcf6 <ipfrag_free_pbuf_custom+0x36>
 801bce8:	4b0b      	ldr	r3, [pc, #44]	@ (801bd18 <ipfrag_free_pbuf_custom+0x58>)
 801bcea:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801bcee:	490d      	ldr	r1, [pc, #52]	@ (801bd24 <ipfrag_free_pbuf_custom+0x64>)
 801bcf0:	480b      	ldr	r0, [pc, #44]	@ (801bd20 <ipfrag_free_pbuf_custom+0x60>)
 801bcf2:	f001 fb6b 	bl	801d3cc <iprintf>
  if (pcr->original != NULL) {
 801bcf6:	68fb      	ldr	r3, [r7, #12]
 801bcf8:	695b      	ldr	r3, [r3, #20]
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d004      	beq.n	801bd08 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801bcfe:	68fb      	ldr	r3, [r7, #12]
 801bd00:	695b      	ldr	r3, [r3, #20]
 801bd02:	4618      	mov	r0, r3
 801bd04:	f7f6 ffd0 	bl	8012ca8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801bd08:	68f8      	ldr	r0, [r7, #12]
 801bd0a:	f7ff ffbd 	bl	801bc88 <ip_frag_free_pbuf_custom_ref>
}
 801bd0e:	bf00      	nop
 801bd10:	3710      	adds	r7, #16
 801bd12:	46bd      	mov	sp, r7
 801bd14:	bd80      	pop	{r7, pc}
 801bd16:	bf00      	nop
 801bd18:	08021974 	.word	0x08021974
 801bd1c:	08021b38 	.word	0x08021b38
 801bd20:	080219bc 	.word	0x080219bc
 801bd24:	08021b44 	.word	0x08021b44

0801bd28 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801bd28:	b580      	push	{r7, lr}
 801bd2a:	b094      	sub	sp, #80	@ 0x50
 801bd2c:	af02      	add	r7, sp, #8
 801bd2e:	60f8      	str	r0, [r7, #12]
 801bd30:	60b9      	str	r1, [r7, #8]
 801bd32:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801bd34:	2300      	movs	r3, #0
 801bd36:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801bd3a:	68bb      	ldr	r3, [r7, #8]
 801bd3c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801bd3e:	3b14      	subs	r3, #20
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	da00      	bge.n	801bd46 <ip4_frag+0x1e>
 801bd44:	3307      	adds	r3, #7
 801bd46:	10db      	asrs	r3, r3, #3
 801bd48:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801bd4a:	2314      	movs	r3, #20
 801bd4c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801bd4e:	68fb      	ldr	r3, [r7, #12]
 801bd50:	685b      	ldr	r3, [r3, #4]
 801bd52:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801bd54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bd56:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801bd58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bd5a:	781b      	ldrb	r3, [r3, #0]
 801bd5c:	f003 030f 	and.w	r3, r3, #15
 801bd60:	b2db      	uxtb	r3, r3
 801bd62:	009b      	lsls	r3, r3, #2
 801bd64:	b2db      	uxtb	r3, r3
 801bd66:	2b14      	cmp	r3, #20
 801bd68:	d002      	beq.n	801bd70 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801bd6a:	f06f 0305 	mvn.w	r3, #5
 801bd6e:	e110      	b.n	801bf92 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801bd70:	68fb      	ldr	r3, [r7, #12]
 801bd72:	895b      	ldrh	r3, [r3, #10]
 801bd74:	2b13      	cmp	r3, #19
 801bd76:	d809      	bhi.n	801bd8c <ip4_frag+0x64>
 801bd78:	4b88      	ldr	r3, [pc, #544]	@ (801bf9c <ip4_frag+0x274>)
 801bd7a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801bd7e:	4988      	ldr	r1, [pc, #544]	@ (801bfa0 <ip4_frag+0x278>)
 801bd80:	4888      	ldr	r0, [pc, #544]	@ (801bfa4 <ip4_frag+0x27c>)
 801bd82:	f001 fb23 	bl	801d3cc <iprintf>
 801bd86:	f06f 0305 	mvn.w	r3, #5
 801bd8a:	e102      	b.n	801bf92 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801bd8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bd8e:	88db      	ldrh	r3, [r3, #6]
 801bd90:	b29b      	uxth	r3, r3
 801bd92:	4618      	mov	r0, r3
 801bd94:	f7f5 fb9a 	bl	80114cc <lwip_htons>
 801bd98:	4603      	mov	r3, r0
 801bd9a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801bd9c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801bd9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bda2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801bda6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801bda8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801bdac:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801bdae:	68fb      	ldr	r3, [r7, #12]
 801bdb0:	891b      	ldrh	r3, [r3, #8]
 801bdb2:	3b14      	subs	r3, #20
 801bdb4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801bdb8:	e0e1      	b.n	801bf7e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801bdba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801bdbc:	00db      	lsls	r3, r3, #3
 801bdbe:	b29b      	uxth	r3, r3
 801bdc0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801bdc4:	4293      	cmp	r3, r2
 801bdc6:	bf28      	it	cs
 801bdc8:	4613      	movcs	r3, r2
 801bdca:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801bdcc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bdd0:	2114      	movs	r1, #20
 801bdd2:	200e      	movs	r0, #14
 801bdd4:	f7f6 fc84 	bl	80126e0 <pbuf_alloc>
 801bdd8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801bdda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	f000 80d5 	beq.w	801bf8c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801bde2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bde4:	895b      	ldrh	r3, [r3, #10]
 801bde6:	2b13      	cmp	r3, #19
 801bde8:	d806      	bhi.n	801bdf8 <ip4_frag+0xd0>
 801bdea:	4b6c      	ldr	r3, [pc, #432]	@ (801bf9c <ip4_frag+0x274>)
 801bdec:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801bdf0:	496d      	ldr	r1, [pc, #436]	@ (801bfa8 <ip4_frag+0x280>)
 801bdf2:	486c      	ldr	r0, [pc, #432]	@ (801bfa4 <ip4_frag+0x27c>)
 801bdf4:	f001 faea 	bl	801d3cc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801bdf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdfa:	685b      	ldr	r3, [r3, #4]
 801bdfc:	2214      	movs	r2, #20
 801bdfe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801be00:	4618      	mov	r0, r3
 801be02:	f001 fc7a 	bl	801d6fa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801be06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be08:	685b      	ldr	r3, [r3, #4]
 801be0a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801be0c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801be0e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801be12:	e064      	b.n	801bede <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801be14:	68fb      	ldr	r3, [r7, #12]
 801be16:	895a      	ldrh	r2, [r3, #10]
 801be18:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801be1a:	1ad3      	subs	r3, r2, r3
 801be1c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801be1e:	68fb      	ldr	r3, [r7, #12]
 801be20:	895b      	ldrh	r3, [r3, #10]
 801be22:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801be24:	429a      	cmp	r2, r3
 801be26:	d906      	bls.n	801be36 <ip4_frag+0x10e>
 801be28:	4b5c      	ldr	r3, [pc, #368]	@ (801bf9c <ip4_frag+0x274>)
 801be2a:	f240 322d 	movw	r2, #813	@ 0x32d
 801be2e:	495f      	ldr	r1, [pc, #380]	@ (801bfac <ip4_frag+0x284>)
 801be30:	485c      	ldr	r0, [pc, #368]	@ (801bfa4 <ip4_frag+0x27c>)
 801be32:	f001 facb 	bl	801d3cc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801be36:	8bfa      	ldrh	r2, [r7, #30]
 801be38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801be3c:	4293      	cmp	r3, r2
 801be3e:	bf28      	it	cs
 801be40:	4613      	movcs	r3, r2
 801be42:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801be46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	d105      	bne.n	801be5a <ip4_frag+0x132>
        poff = 0;
 801be4e:	2300      	movs	r3, #0
 801be50:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801be52:	68fb      	ldr	r3, [r7, #12]
 801be54:	681b      	ldr	r3, [r3, #0]
 801be56:	60fb      	str	r3, [r7, #12]
        continue;
 801be58:	e041      	b.n	801bede <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801be5a:	f7ff ff0d 	bl	801bc78 <ip_frag_alloc_pbuf_custom_ref>
 801be5e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801be60:	69bb      	ldr	r3, [r7, #24]
 801be62:	2b00      	cmp	r3, #0
 801be64:	d103      	bne.n	801be6e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801be66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801be68:	f7f6 ff1e 	bl	8012ca8 <pbuf_free>
        goto memerr;
 801be6c:	e08f      	b.n	801bf8e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801be6e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801be70:	68fb      	ldr	r3, [r7, #12]
 801be72:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801be74:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801be76:	4413      	add	r3, r2
 801be78:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801be7c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801be80:	9201      	str	r2, [sp, #4]
 801be82:	9300      	str	r3, [sp, #0]
 801be84:	4603      	mov	r3, r0
 801be86:	2241      	movs	r2, #65	@ 0x41
 801be88:	2000      	movs	r0, #0
 801be8a:	f7f6 fd53 	bl	8012934 <pbuf_alloced_custom>
 801be8e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801be90:	697b      	ldr	r3, [r7, #20]
 801be92:	2b00      	cmp	r3, #0
 801be94:	d106      	bne.n	801bea4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801be96:	69b8      	ldr	r0, [r7, #24]
 801be98:	f7ff fef6 	bl	801bc88 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801be9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801be9e:	f7f6 ff03 	bl	8012ca8 <pbuf_free>
        goto memerr;
 801bea2:	e074      	b.n	801bf8e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801bea4:	68f8      	ldr	r0, [r7, #12]
 801bea6:	f7f6 ffa5 	bl	8012df4 <pbuf_ref>
      pcr->original = p;
 801beaa:	69bb      	ldr	r3, [r7, #24]
 801beac:	68fa      	ldr	r2, [r7, #12]
 801beae:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801beb0:	69bb      	ldr	r3, [r7, #24]
 801beb2:	4a3f      	ldr	r2, [pc, #252]	@ (801bfb0 <ip4_frag+0x288>)
 801beb4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801beb6:	6979      	ldr	r1, [r7, #20]
 801beb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801beba:	f7f6 ffc3 	bl	8012e44 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801bebe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801bec2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801bec6:	1ad3      	subs	r3, r2, r3
 801bec8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801becc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d004      	beq.n	801bede <ip4_frag+0x1b6>
        poff = 0;
 801bed4:	2300      	movs	r3, #0
 801bed6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801bed8:	68fb      	ldr	r3, [r7, #12]
 801beda:	681b      	ldr	r3, [r3, #0]
 801bedc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801bede:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	d196      	bne.n	801be14 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801bee6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801bee8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801beec:	4413      	add	r3, r2
 801beee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801bef0:	68bb      	ldr	r3, [r7, #8]
 801bef2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801bef4:	f1a3 0213 	sub.w	r2, r3, #19
 801bef8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801befc:	429a      	cmp	r2, r3
 801befe:	bfcc      	ite	gt
 801bf00:	2301      	movgt	r3, #1
 801bf02:	2300      	movle	r3, #0
 801bf04:	b2db      	uxtb	r3, r3
 801bf06:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801bf08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801bf0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bf10:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801bf12:	6a3b      	ldr	r3, [r7, #32]
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	d002      	beq.n	801bf1e <ip4_frag+0x1f6>
 801bf18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf1a:	2b00      	cmp	r3, #0
 801bf1c:	d003      	beq.n	801bf26 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801bf1e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801bf20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801bf24:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801bf26:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801bf28:	4618      	mov	r0, r3
 801bf2a:	f7f5 facf 	bl	80114cc <lwip_htons>
 801bf2e:	4603      	mov	r3, r0
 801bf30:	461a      	mov	r2, r3
 801bf32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf34:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801bf36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801bf38:	3314      	adds	r3, #20
 801bf3a:	b29b      	uxth	r3, r3
 801bf3c:	4618      	mov	r0, r3
 801bf3e:	f7f5 fac5 	bl	80114cc <lwip_htons>
 801bf42:	4603      	mov	r3, r0
 801bf44:	461a      	mov	r2, r3
 801bf46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf48:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801bf4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf4c:	2200      	movs	r2, #0
 801bf4e:	729a      	strb	r2, [r3, #10]
 801bf50:	2200      	movs	r2, #0
 801bf52:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801bf54:	68bb      	ldr	r3, [r7, #8]
 801bf56:	695b      	ldr	r3, [r3, #20]
 801bf58:	687a      	ldr	r2, [r7, #4]
 801bf5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801bf5c:	68b8      	ldr	r0, [r7, #8]
 801bf5e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801bf60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bf62:	f7f6 fea1 	bl	8012ca8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801bf66:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801bf6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801bf6c:	1ad3      	subs	r3, r2, r3
 801bf6e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801bf72:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801bf76:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801bf78:	4413      	add	r3, r2
 801bf7a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801bf7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	f47f af19 	bne.w	801bdba <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801bf88:	2300      	movs	r3, #0
 801bf8a:	e002      	b.n	801bf92 <ip4_frag+0x26a>
      goto memerr;
 801bf8c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801bf8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bf92:	4618      	mov	r0, r3
 801bf94:	3748      	adds	r7, #72	@ 0x48
 801bf96:	46bd      	mov	sp, r7
 801bf98:	bd80      	pop	{r7, pc}
 801bf9a:	bf00      	nop
 801bf9c:	08021974 	.word	0x08021974
 801bfa0:	08021b50 	.word	0x08021b50
 801bfa4:	080219bc 	.word	0x080219bc
 801bfa8:	08021b6c 	.word	0x08021b6c
 801bfac:	08021b8c 	.word	0x08021b8c
 801bfb0:	0801bcc1 	.word	0x0801bcc1

0801bfb4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801bfb4:	b580      	push	{r7, lr}
 801bfb6:	b086      	sub	sp, #24
 801bfb8:	af00      	add	r7, sp, #0
 801bfba:	6078      	str	r0, [r7, #4]
 801bfbc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801bfbe:	230e      	movs	r3, #14
 801bfc0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	895b      	ldrh	r3, [r3, #10]
 801bfc6:	2b0e      	cmp	r3, #14
 801bfc8:	d96e      	bls.n	801c0a8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	7bdb      	ldrb	r3, [r3, #15]
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d106      	bne.n	801bfe0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801bfd2:	683b      	ldr	r3, [r7, #0]
 801bfd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801bfd8:	3301      	adds	r3, #1
 801bfda:	b2da      	uxtb	r2, r3
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	685b      	ldr	r3, [r3, #4]
 801bfe4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801bfe6:	693b      	ldr	r3, [r7, #16]
 801bfe8:	7b1a      	ldrb	r2, [r3, #12]
 801bfea:	7b5b      	ldrb	r3, [r3, #13]
 801bfec:	021b      	lsls	r3, r3, #8
 801bfee:	4313      	orrs	r3, r2
 801bff0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801bff2:	693b      	ldr	r3, [r7, #16]
 801bff4:	781b      	ldrb	r3, [r3, #0]
 801bff6:	f003 0301 	and.w	r3, r3, #1
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d023      	beq.n	801c046 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801bffe:	693b      	ldr	r3, [r7, #16]
 801c000:	781b      	ldrb	r3, [r3, #0]
 801c002:	2b01      	cmp	r3, #1
 801c004:	d10f      	bne.n	801c026 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c006:	693b      	ldr	r3, [r7, #16]
 801c008:	785b      	ldrb	r3, [r3, #1]
 801c00a:	2b00      	cmp	r3, #0
 801c00c:	d11b      	bne.n	801c046 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c00e:	693b      	ldr	r3, [r7, #16]
 801c010:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c012:	2b5e      	cmp	r3, #94	@ 0x5e
 801c014:	d117      	bne.n	801c046 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	7b5b      	ldrb	r3, [r3, #13]
 801c01a:	f043 0310 	orr.w	r3, r3, #16
 801c01e:	b2da      	uxtb	r2, r3
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	735a      	strb	r2, [r3, #13]
 801c024:	e00f      	b.n	801c046 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c026:	693b      	ldr	r3, [r7, #16]
 801c028:	2206      	movs	r2, #6
 801c02a:	4928      	ldr	r1, [pc, #160]	@ (801c0cc <ethernet_input+0x118>)
 801c02c:	4618      	mov	r0, r3
 801c02e:	f001 fa44 	bl	801d4ba <memcmp>
 801c032:	4603      	mov	r3, r0
 801c034:	2b00      	cmp	r3, #0
 801c036:	d106      	bne.n	801c046 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	7b5b      	ldrb	r3, [r3, #13]
 801c03c:	f043 0308 	orr.w	r3, r3, #8
 801c040:	b2da      	uxtb	r2, r3
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801c046:	89fb      	ldrh	r3, [r7, #14]
 801c048:	2b08      	cmp	r3, #8
 801c04a:	d003      	beq.n	801c054 <ethernet_input+0xa0>
 801c04c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801c050:	d014      	beq.n	801c07c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801c052:	e032      	b.n	801c0ba <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c054:	683b      	ldr	r3, [r7, #0]
 801c056:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c05a:	f003 0308 	and.w	r3, r3, #8
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d024      	beq.n	801c0ac <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c062:	8afb      	ldrh	r3, [r7, #22]
 801c064:	4619      	mov	r1, r3
 801c066:	6878      	ldr	r0, [r7, #4]
 801c068:	f7f6 fd98 	bl	8012b9c <pbuf_remove_header>
 801c06c:	4603      	mov	r3, r0
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d11e      	bne.n	801c0b0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801c072:	6839      	ldr	r1, [r7, #0]
 801c074:	6878      	ldr	r0, [r7, #4]
 801c076:	f7fe ff21 	bl	801aebc <ip4_input>
      break;
 801c07a:	e013      	b.n	801c0a4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c07c:	683b      	ldr	r3, [r7, #0]
 801c07e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c082:	f003 0308 	and.w	r3, r3, #8
 801c086:	2b00      	cmp	r3, #0
 801c088:	d014      	beq.n	801c0b4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c08a:	8afb      	ldrh	r3, [r7, #22]
 801c08c:	4619      	mov	r1, r3
 801c08e:	6878      	ldr	r0, [r7, #4]
 801c090:	f7f6 fd84 	bl	8012b9c <pbuf_remove_header>
 801c094:	4603      	mov	r3, r0
 801c096:	2b00      	cmp	r3, #0
 801c098:	d10e      	bne.n	801c0b8 <ethernet_input+0x104>
        etharp_input(p, netif);
 801c09a:	6839      	ldr	r1, [r7, #0]
 801c09c:	6878      	ldr	r0, [r7, #4]
 801c09e:	f7fe f8c1 	bl	801a224 <etharp_input>
      break;
 801c0a2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801c0a4:	2300      	movs	r3, #0
 801c0a6:	e00c      	b.n	801c0c2 <ethernet_input+0x10e>
    goto free_and_return;
 801c0a8:	bf00      	nop
 801c0aa:	e006      	b.n	801c0ba <ethernet_input+0x106>
        goto free_and_return;
 801c0ac:	bf00      	nop
 801c0ae:	e004      	b.n	801c0ba <ethernet_input+0x106>
        goto free_and_return;
 801c0b0:	bf00      	nop
 801c0b2:	e002      	b.n	801c0ba <ethernet_input+0x106>
        goto free_and_return;
 801c0b4:	bf00      	nop
 801c0b6:	e000      	b.n	801c0ba <ethernet_input+0x106>
        goto free_and_return;
 801c0b8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801c0ba:	6878      	ldr	r0, [r7, #4]
 801c0bc:	f7f6 fdf4 	bl	8012ca8 <pbuf_free>
  return ERR_OK;
 801c0c0:	2300      	movs	r3, #0
}
 801c0c2:	4618      	mov	r0, r3
 801c0c4:	3718      	adds	r7, #24
 801c0c6:	46bd      	mov	sp, r7
 801c0c8:	bd80      	pop	{r7, pc}
 801c0ca:	bf00      	nop
 801c0cc:	080334d8 	.word	0x080334d8

0801c0d0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801c0d0:	b580      	push	{r7, lr}
 801c0d2:	b086      	sub	sp, #24
 801c0d4:	af00      	add	r7, sp, #0
 801c0d6:	60f8      	str	r0, [r7, #12]
 801c0d8:	60b9      	str	r1, [r7, #8]
 801c0da:	607a      	str	r2, [r7, #4]
 801c0dc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c0de:	8c3b      	ldrh	r3, [r7, #32]
 801c0e0:	4618      	mov	r0, r3
 801c0e2:	f7f5 f9f3 	bl	80114cc <lwip_htons>
 801c0e6:	4603      	mov	r3, r0
 801c0e8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801c0ea:	210e      	movs	r1, #14
 801c0ec:	68b8      	ldr	r0, [r7, #8]
 801c0ee:	f7f6 fd45 	bl	8012b7c <pbuf_add_header>
 801c0f2:	4603      	mov	r3, r0
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d125      	bne.n	801c144 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801c0f8:	68bb      	ldr	r3, [r7, #8]
 801c0fa:	685b      	ldr	r3, [r3, #4]
 801c0fc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801c0fe:	693b      	ldr	r3, [r7, #16]
 801c100:	8afa      	ldrh	r2, [r7, #22]
 801c102:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801c104:	693b      	ldr	r3, [r7, #16]
 801c106:	2206      	movs	r2, #6
 801c108:	6839      	ldr	r1, [r7, #0]
 801c10a:	4618      	mov	r0, r3
 801c10c:	f001 faf5 	bl	801d6fa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801c110:	693b      	ldr	r3, [r7, #16]
 801c112:	3306      	adds	r3, #6
 801c114:	2206      	movs	r2, #6
 801c116:	6879      	ldr	r1, [r7, #4]
 801c118:	4618      	mov	r0, r3
 801c11a:	f001 faee 	bl	801d6fa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c11e:	68fb      	ldr	r3, [r7, #12]
 801c120:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801c124:	2b06      	cmp	r3, #6
 801c126:	d006      	beq.n	801c136 <ethernet_output+0x66>
 801c128:	4b0a      	ldr	r3, [pc, #40]	@ (801c154 <ethernet_output+0x84>)
 801c12a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801c12e:	490a      	ldr	r1, [pc, #40]	@ (801c158 <ethernet_output+0x88>)
 801c130:	480a      	ldr	r0, [pc, #40]	@ (801c15c <ethernet_output+0x8c>)
 801c132:	f001 f94b 	bl	801d3cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c136:	68fb      	ldr	r3, [r7, #12]
 801c138:	699b      	ldr	r3, [r3, #24]
 801c13a:	68b9      	ldr	r1, [r7, #8]
 801c13c:	68f8      	ldr	r0, [r7, #12]
 801c13e:	4798      	blx	r3
 801c140:	4603      	mov	r3, r0
 801c142:	e002      	b.n	801c14a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801c144:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c146:	f06f 0301 	mvn.w	r3, #1
}
 801c14a:	4618      	mov	r0, r3
 801c14c:	3718      	adds	r7, #24
 801c14e:	46bd      	mov	sp, r7
 801c150:	bd80      	pop	{r7, pc}
 801c152:	bf00      	nop
 801c154:	08021b9c 	.word	0x08021b9c
 801c158:	08021bd4 	.word	0x08021bd4
 801c15c:	08021c08 	.word	0x08021c08

0801c160 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c160:	b580      	push	{r7, lr}
 801c162:	b086      	sub	sp, #24
 801c164:	af00      	add	r7, sp, #0
 801c166:	6078      	str	r0, [r7, #4]
 801c168:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801c16a:	683b      	ldr	r3, [r7, #0]
 801c16c:	60bb      	str	r3, [r7, #8]
 801c16e:	2304      	movs	r3, #4
 801c170:	60fb      	str	r3, [r7, #12]
 801c172:	2300      	movs	r3, #0
 801c174:	613b      	str	r3, [r7, #16]
 801c176:	2300      	movs	r3, #0
 801c178:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801c17a:	f107 0308 	add.w	r3, r7, #8
 801c17e:	2100      	movs	r1, #0
 801c180:	4618      	mov	r0, r3
 801c182:	f7ef ff54 	bl	800c02e <osMessageCreate>
 801c186:	4602      	mov	r2, r0
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	681b      	ldr	r3, [r3, #0]
 801c190:	2b00      	cmp	r3, #0
 801c192:	d102      	bne.n	801c19a <sys_mbox_new+0x3a>
    return ERR_MEM;
 801c194:	f04f 33ff 	mov.w	r3, #4294967295
 801c198:	e000      	b.n	801c19c <sys_mbox_new+0x3c>

  return ERR_OK;
 801c19a:	2300      	movs	r3, #0
}
 801c19c:	4618      	mov	r0, r3
 801c19e:	3718      	adds	r7, #24
 801c1a0:	46bd      	mov	sp, r7
 801c1a2:	bd80      	pop	{r7, pc}

0801c1a4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801c1a4:	b580      	push	{r7, lr}
 801c1a6:	b082      	sub	sp, #8
 801c1a8:	af00      	add	r7, sp, #0
 801c1aa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	4618      	mov	r0, r3
 801c1b2:	f7f0 f819 	bl	800c1e8 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	681b      	ldr	r3, [r3, #0]
 801c1ba:	4618      	mov	r0, r3
 801c1bc:	f7f0 f82a 	bl	800c214 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801c1c0:	bf00      	nop
 801c1c2:	3708      	adds	r7, #8
 801c1c4:	46bd      	mov	sp, r7
 801c1c6:	bd80      	pop	{r7, pc}

0801c1c8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c1c8:	b580      	push	{r7, lr}
 801c1ca:	b084      	sub	sp, #16
 801c1cc:	af00      	add	r7, sp, #0
 801c1ce:	6078      	str	r0, [r7, #4]
 801c1d0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	681b      	ldr	r3, [r3, #0]
 801c1d6:	6839      	ldr	r1, [r7, #0]
 801c1d8:	2200      	movs	r2, #0
 801c1da:	4618      	mov	r0, r3
 801c1dc:	f7ef ff50 	bl	800c080 <osMessagePut>
 801c1e0:	4603      	mov	r3, r0
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d102      	bne.n	801c1ec <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801c1e6:	2300      	movs	r3, #0
 801c1e8:	73fb      	strb	r3, [r7, #15]
 801c1ea:	e001      	b.n	801c1f0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801c1ec:	23ff      	movs	r3, #255	@ 0xff
 801c1ee:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801c1f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c1f4:	4618      	mov	r0, r3
 801c1f6:	3710      	adds	r7, #16
 801c1f8:	46bd      	mov	sp, r7
 801c1fa:	bd80      	pop	{r7, pc}

0801c1fc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c1fc:	b580      	push	{r7, lr}
 801c1fe:	b08c      	sub	sp, #48	@ 0x30
 801c200:	af00      	add	r7, sp, #0
 801c202:	61f8      	str	r0, [r7, #28]
 801c204:	61b9      	str	r1, [r7, #24]
 801c206:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801c208:	f7ef fd2f 	bl	800bc6a <osKernelSysTick>
 801c20c:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c20e:	697b      	ldr	r3, [r7, #20]
 801c210:	2b00      	cmp	r3, #0
 801c212:	d017      	beq.n	801c244 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801c214:	69fb      	ldr	r3, [r7, #28]
 801c216:	6819      	ldr	r1, [r3, #0]
 801c218:	f107 0320 	add.w	r3, r7, #32
 801c21c:	697a      	ldr	r2, [r7, #20]
 801c21e:	4618      	mov	r0, r3
 801c220:	f7ef ff6e 	bl	800c100 <osMessageGet>

    if(event.status == osEventMessage)
 801c224:	6a3b      	ldr	r3, [r7, #32]
 801c226:	2b10      	cmp	r3, #16
 801c228:	d109      	bne.n	801c23e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801c22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c22c:	461a      	mov	r2, r3
 801c22e:	69bb      	ldr	r3, [r7, #24]
 801c230:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801c232:	f7ef fd1a 	bl	800bc6a <osKernelSysTick>
 801c236:	4602      	mov	r2, r0
 801c238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c23a:	1ad3      	subs	r3, r2, r3
 801c23c:	e019      	b.n	801c272 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c23e:	f04f 33ff 	mov.w	r3, #4294967295
 801c242:	e016      	b.n	801c272 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801c244:	69fb      	ldr	r3, [r7, #28]
 801c246:	6819      	ldr	r1, [r3, #0]
 801c248:	463b      	mov	r3, r7
 801c24a:	f04f 32ff 	mov.w	r2, #4294967295
 801c24e:	4618      	mov	r0, r3
 801c250:	f7ef ff56 	bl	800c100 <osMessageGet>
 801c254:	f107 0320 	add.w	r3, r7, #32
 801c258:	463a      	mov	r2, r7
 801c25a:	ca07      	ldmia	r2, {r0, r1, r2}
 801c25c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801c260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c262:	461a      	mov	r2, r3
 801c264:	69bb      	ldr	r3, [r7, #24]
 801c266:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801c268:	f7ef fcff 	bl	800bc6a <osKernelSysTick>
 801c26c:	4602      	mov	r2, r0
 801c26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c270:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c272:	4618      	mov	r0, r3
 801c274:	3730      	adds	r7, #48	@ 0x30
 801c276:	46bd      	mov	sp, r7
 801c278:	bd80      	pop	{r7, pc}

0801c27a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801c27a:	b580      	push	{r7, lr}
 801c27c:	b086      	sub	sp, #24
 801c27e:	af00      	add	r7, sp, #0
 801c280:	6078      	str	r0, [r7, #4]
 801c282:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801c284:	687b      	ldr	r3, [r7, #4]
 801c286:	6819      	ldr	r1, [r3, #0]
 801c288:	f107 030c 	add.w	r3, r7, #12
 801c28c:	2200      	movs	r2, #0
 801c28e:	4618      	mov	r0, r3
 801c290:	f7ef ff36 	bl	800c100 <osMessageGet>

  if(event.status == osEventMessage)
 801c294:	68fb      	ldr	r3, [r7, #12]
 801c296:	2b10      	cmp	r3, #16
 801c298:	d105      	bne.n	801c2a6 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801c29a:	693b      	ldr	r3, [r7, #16]
 801c29c:	461a      	mov	r2, r3
 801c29e:	683b      	ldr	r3, [r7, #0]
 801c2a0:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801c2a2:	2300      	movs	r3, #0
 801c2a4:	e001      	b.n	801c2aa <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801c2a6:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801c2aa:	4618      	mov	r0, r3
 801c2ac:	3718      	adds	r7, #24
 801c2ae:	46bd      	mov	sp, r7
 801c2b0:	bd80      	pop	{r7, pc}

0801c2b2 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801c2b2:	b480      	push	{r7}
 801c2b4:	b083      	sub	sp, #12
 801c2b6:	af00      	add	r7, sp, #0
 801c2b8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	681b      	ldr	r3, [r3, #0]
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d101      	bne.n	801c2c6 <sys_mbox_valid+0x14>
    return 0;
 801c2c2:	2300      	movs	r3, #0
 801c2c4:	e000      	b.n	801c2c8 <sys_mbox_valid+0x16>
  else
    return 1;
 801c2c6:	2301      	movs	r3, #1
}
 801c2c8:	4618      	mov	r0, r3
 801c2ca:	370c      	adds	r7, #12
 801c2cc:	46bd      	mov	sp, r7
 801c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2d2:	4770      	bx	lr

0801c2d4 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801c2d4:	b480      	push	{r7}
 801c2d6:	b083      	sub	sp, #12
 801c2d8:	af00      	add	r7, sp, #0
 801c2da:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	2200      	movs	r2, #0
 801c2e0:	601a      	str	r2, [r3, #0]
}
 801c2e2:	bf00      	nop
 801c2e4:	370c      	adds	r7, #12
 801c2e6:	46bd      	mov	sp, r7
 801c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2ec:	4770      	bx	lr

0801c2ee <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801c2ee:	b580      	push	{r7, lr}
 801c2f0:	b084      	sub	sp, #16
 801c2f2:	af00      	add	r7, sp, #0
 801c2f4:	6078      	str	r0, [r7, #4]
 801c2f6:	460b      	mov	r3, r1
 801c2f8:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801c2fa:	2300      	movs	r3, #0
 801c2fc:	60bb      	str	r3, [r7, #8]
 801c2fe:	2300      	movs	r3, #0
 801c300:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801c302:	f107 0308 	add.w	r3, r7, #8
 801c306:	2101      	movs	r1, #1
 801c308:	4618      	mov	r0, r3
 801c30a:	f7ef fdc7 	bl	800be9c <osSemaphoreCreate>
 801c30e:	4602      	mov	r2, r0
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	2b00      	cmp	r3, #0
 801c31a:	d102      	bne.n	801c322 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c31c:	f04f 33ff 	mov.w	r3, #4294967295
 801c320:	e009      	b.n	801c336 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801c322:	78fb      	ldrb	r3, [r7, #3]
 801c324:	2b00      	cmp	r3, #0
 801c326:	d105      	bne.n	801c334 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	681b      	ldr	r3, [r3, #0]
 801c32c:	2100      	movs	r1, #0
 801c32e:	4618      	mov	r0, r3
 801c330:	f7ef fde6 	bl	800bf00 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801c334:	2300      	movs	r3, #0
}
 801c336:	4618      	mov	r0, r3
 801c338:	3710      	adds	r7, #16
 801c33a:	46bd      	mov	sp, r7
 801c33c:	bd80      	pop	{r7, pc}

0801c33e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801c33e:	b580      	push	{r7, lr}
 801c340:	b084      	sub	sp, #16
 801c342:	af00      	add	r7, sp, #0
 801c344:	6078      	str	r0, [r7, #4]
 801c346:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801c348:	f7ef fc8f 	bl	800bc6a <osKernelSysTick>
 801c34c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c34e:	683b      	ldr	r3, [r7, #0]
 801c350:	2b00      	cmp	r3, #0
 801c352:	d011      	beq.n	801c378 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	681b      	ldr	r3, [r3, #0]
 801c358:	6839      	ldr	r1, [r7, #0]
 801c35a:	4618      	mov	r0, r3
 801c35c:	f7ef fdd0 	bl	800bf00 <osSemaphoreWait>
 801c360:	4603      	mov	r3, r0
 801c362:	2b00      	cmp	r3, #0
 801c364:	d105      	bne.n	801c372 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801c366:	f7ef fc80 	bl	800bc6a <osKernelSysTick>
 801c36a:	4602      	mov	r2, r0
 801c36c:	68fb      	ldr	r3, [r7, #12]
 801c36e:	1ad3      	subs	r3, r2, r3
 801c370:	e012      	b.n	801c398 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c372:	f04f 33ff 	mov.w	r3, #4294967295
 801c376:	e00f      	b.n	801c398 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801c378:	bf00      	nop
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	681b      	ldr	r3, [r3, #0]
 801c37e:	f04f 31ff 	mov.w	r1, #4294967295
 801c382:	4618      	mov	r0, r3
 801c384:	f7ef fdbc 	bl	800bf00 <osSemaphoreWait>
 801c388:	4603      	mov	r3, r0
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	d1f5      	bne.n	801c37a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801c38e:	f7ef fc6c 	bl	800bc6a <osKernelSysTick>
 801c392:	4602      	mov	r2, r0
 801c394:	68fb      	ldr	r3, [r7, #12]
 801c396:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c398:	4618      	mov	r0, r3
 801c39a:	3710      	adds	r7, #16
 801c39c:	46bd      	mov	sp, r7
 801c39e:	bd80      	pop	{r7, pc}

0801c3a0 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801c3a0:	b580      	push	{r7, lr}
 801c3a2:	b082      	sub	sp, #8
 801c3a4:	af00      	add	r7, sp, #0
 801c3a6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	4618      	mov	r0, r3
 801c3ae:	f7ef fdf5 	bl	800bf9c <osSemaphoreRelease>
}
 801c3b2:	bf00      	nop
 801c3b4:	3708      	adds	r7, #8
 801c3b6:	46bd      	mov	sp, r7
 801c3b8:	bd80      	pop	{r7, pc}

0801c3ba <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801c3ba:	b580      	push	{r7, lr}
 801c3bc:	b082      	sub	sp, #8
 801c3be:	af00      	add	r7, sp, #0
 801c3c0:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801c3c2:	687b      	ldr	r3, [r7, #4]
 801c3c4:	681b      	ldr	r3, [r3, #0]
 801c3c6:	4618      	mov	r0, r3
 801c3c8:	f7ef fe1e 	bl	800c008 <osSemaphoreDelete>
}
 801c3cc:	bf00      	nop
 801c3ce:	3708      	adds	r7, #8
 801c3d0:	46bd      	mov	sp, r7
 801c3d2:	bd80      	pop	{r7, pc}

0801c3d4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801c3d4:	b480      	push	{r7}
 801c3d6:	b083      	sub	sp, #12
 801c3d8:	af00      	add	r7, sp, #0
 801c3da:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	681b      	ldr	r3, [r3, #0]
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	d101      	bne.n	801c3e8 <sys_sem_valid+0x14>
    return 0;
 801c3e4:	2300      	movs	r3, #0
 801c3e6:	e000      	b.n	801c3ea <sys_sem_valid+0x16>
  else
    return 1;
 801c3e8:	2301      	movs	r3, #1
}
 801c3ea:	4618      	mov	r0, r3
 801c3ec:	370c      	adds	r7, #12
 801c3ee:	46bd      	mov	sp, r7
 801c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3f4:	4770      	bx	lr

0801c3f6 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801c3f6:	b480      	push	{r7}
 801c3f8:	b083      	sub	sp, #12
 801c3fa:	af00      	add	r7, sp, #0
 801c3fc:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801c3fe:	687b      	ldr	r3, [r7, #4]
 801c400:	2200      	movs	r2, #0
 801c402:	601a      	str	r2, [r3, #0]
}
 801c404:	bf00      	nop
 801c406:	370c      	adds	r7, #12
 801c408:	46bd      	mov	sp, r7
 801c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c40e:	4770      	bx	lr

0801c410 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801c410:	b580      	push	{r7, lr}
 801c412:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801c414:	4803      	ldr	r0, [pc, #12]	@ (801c424 <sys_init+0x14>)
 801c416:	f7ef fca4 	bl	800bd62 <osMutexCreate>
 801c41a:	4603      	mov	r3, r0
 801c41c:	4a02      	ldr	r2, [pc, #8]	@ (801c428 <sys_init+0x18>)
 801c41e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801c420:	bf00      	nop
 801c422:	bd80      	pop	{r7, pc}
 801c424:	080334e8 	.word	0x080334e8
 801c428:	2000e5b8 	.word	0x2000e5b8

0801c42c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c42c:	b580      	push	{r7, lr}
 801c42e:	b084      	sub	sp, #16
 801c430:	af00      	add	r7, sp, #0
 801c432:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801c434:	2300      	movs	r3, #0
 801c436:	60bb      	str	r3, [r7, #8]
 801c438:	2300      	movs	r3, #0
 801c43a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801c43c:	f107 0308 	add.w	r3, r7, #8
 801c440:	4618      	mov	r0, r3
 801c442:	f7ef fc8e 	bl	800bd62 <osMutexCreate>
 801c446:	4602      	mov	r2, r0
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801c44c:	687b      	ldr	r3, [r7, #4]
 801c44e:	681b      	ldr	r3, [r3, #0]
 801c450:	2b00      	cmp	r3, #0
 801c452:	d102      	bne.n	801c45a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c454:	f04f 33ff 	mov.w	r3, #4294967295
 801c458:	e000      	b.n	801c45c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c45a:	2300      	movs	r3, #0
}
 801c45c:	4618      	mov	r0, r3
 801c45e:	3710      	adds	r7, #16
 801c460:	46bd      	mov	sp, r7
 801c462:	bd80      	pop	{r7, pc}

0801c464 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c464:	b580      	push	{r7, lr}
 801c466:	b082      	sub	sp, #8
 801c468:	af00      	add	r7, sp, #0
 801c46a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	681b      	ldr	r3, [r3, #0]
 801c470:	f04f 31ff 	mov.w	r1, #4294967295
 801c474:	4618      	mov	r0, r3
 801c476:	f7ef fc8d 	bl	800bd94 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801c47a:	bf00      	nop
 801c47c:	3708      	adds	r7, #8
 801c47e:	46bd      	mov	sp, r7
 801c480:	bd80      	pop	{r7, pc}

0801c482 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c482:	b580      	push	{r7, lr}
 801c484:	b082      	sub	sp, #8
 801c486:	af00      	add	r7, sp, #0
 801c488:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801c48a:	687b      	ldr	r3, [r7, #4]
 801c48c:	681b      	ldr	r3, [r3, #0]
 801c48e:	4618      	mov	r0, r3
 801c490:	f7ef fcce 	bl	800be30 <osMutexRelease>
}
 801c494:	bf00      	nop
 801c496:	3708      	adds	r7, #8
 801c498:	46bd      	mov	sp, r7
 801c49a:	bd80      	pop	{r7, pc}

0801c49c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c49c:	b580      	push	{r7, lr}
 801c49e:	b08c      	sub	sp, #48	@ 0x30
 801c4a0:	af00      	add	r7, sp, #0
 801c4a2:	60f8      	str	r0, [r7, #12]
 801c4a4:	60b9      	str	r1, [r7, #8]
 801c4a6:	607a      	str	r2, [r7, #4]
 801c4a8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801c4aa:	f107 0314 	add.w	r3, r7, #20
 801c4ae:	2200      	movs	r2, #0
 801c4b0:	601a      	str	r2, [r3, #0]
 801c4b2:	605a      	str	r2, [r3, #4]
 801c4b4:	609a      	str	r2, [r3, #8]
 801c4b6:	60da      	str	r2, [r3, #12]
 801c4b8:	611a      	str	r2, [r3, #16]
 801c4ba:	615a      	str	r2, [r3, #20]
 801c4bc:	619a      	str	r2, [r3, #24]
 801c4be:	68fb      	ldr	r3, [r7, #12]
 801c4c0:	617b      	str	r3, [r7, #20]
 801c4c2:	68bb      	ldr	r3, [r7, #8]
 801c4c4:	61bb      	str	r3, [r7, #24]
 801c4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c4c8:	b21b      	sxth	r3, r3
 801c4ca:	83bb      	strh	r3, [r7, #28]
 801c4cc:	683b      	ldr	r3, [r7, #0]
 801c4ce:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801c4d0:	f107 0314 	add.w	r3, r7, #20
 801c4d4:	6879      	ldr	r1, [r7, #4]
 801c4d6:	4618      	mov	r0, r3
 801c4d8:	f7ef fbd7 	bl	800bc8a <osThreadCreate>
 801c4dc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801c4de:	4618      	mov	r0, r3
 801c4e0:	3730      	adds	r7, #48	@ 0x30
 801c4e2:	46bd      	mov	sp, r7
 801c4e4:	bd80      	pop	{r7, pc}
	...

0801c4e8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c4e8:	b580      	push	{r7, lr}
 801c4ea:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801c4ec:	4b04      	ldr	r3, [pc, #16]	@ (801c500 <sys_arch_protect+0x18>)
 801c4ee:	681b      	ldr	r3, [r3, #0]
 801c4f0:	f04f 31ff 	mov.w	r1, #4294967295
 801c4f4:	4618      	mov	r0, r3
 801c4f6:	f7ef fc4d 	bl	800bd94 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801c4fa:	2301      	movs	r3, #1
}
 801c4fc:	4618      	mov	r0, r3
 801c4fe:	bd80      	pop	{r7, pc}
 801c500:	2000e5b8 	.word	0x2000e5b8

0801c504 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c504:	b580      	push	{r7, lr}
 801c506:	b082      	sub	sp, #8
 801c508:	af00      	add	r7, sp, #0
 801c50a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c50c:	4b04      	ldr	r3, [pc, #16]	@ (801c520 <sys_arch_unprotect+0x1c>)
 801c50e:	681b      	ldr	r3, [r3, #0]
 801c510:	4618      	mov	r0, r3
 801c512:	f7ef fc8d 	bl	800be30 <osMutexRelease>
}
 801c516:	bf00      	nop
 801c518:	3708      	adds	r7, #8
 801c51a:	46bd      	mov	sp, r7
 801c51c:	bd80      	pop	{r7, pc}
 801c51e:	bf00      	nop
 801c520:	2000e5b8 	.word	0x2000e5b8

0801c524 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801c524:	b580      	push	{r7, lr}
 801c526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801c528:	2200      	movs	r2, #0
 801c52a:	4912      	ldr	r1, [pc, #72]	@ (801c574 <MX_USB_DEVICE_Init+0x50>)
 801c52c:	4812      	ldr	r0, [pc, #72]	@ (801c578 <MX_USB_DEVICE_Init+0x54>)
 801c52e:	f7ee f83f 	bl	800a5b0 <USBD_Init>
 801c532:	4603      	mov	r3, r0
 801c534:	2b00      	cmp	r3, #0
 801c536:	d001      	beq.n	801c53c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801c538:	f7e5 fb44 	bl	8001bc4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801c53c:	490f      	ldr	r1, [pc, #60]	@ (801c57c <MX_USB_DEVICE_Init+0x58>)
 801c53e:	480e      	ldr	r0, [pc, #56]	@ (801c578 <MX_USB_DEVICE_Init+0x54>)
 801c540:	f7ee f866 	bl	800a610 <USBD_RegisterClass>
 801c544:	4603      	mov	r3, r0
 801c546:	2b00      	cmp	r3, #0
 801c548:	d001      	beq.n	801c54e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801c54a:	f7e5 fb3b 	bl	8001bc4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801c54e:	490c      	ldr	r1, [pc, #48]	@ (801c580 <MX_USB_DEVICE_Init+0x5c>)
 801c550:	4809      	ldr	r0, [pc, #36]	@ (801c578 <MX_USB_DEVICE_Init+0x54>)
 801c552:	f7ed ff5d 	bl	800a410 <USBD_CDC_RegisterInterface>
 801c556:	4603      	mov	r3, r0
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d001      	beq.n	801c560 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801c55c:	f7e5 fb32 	bl	8001bc4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801c560:	4805      	ldr	r0, [pc, #20]	@ (801c578 <MX_USB_DEVICE_Init+0x54>)
 801c562:	f7ee f88b 	bl	800a67c <USBD_Start>
 801c566:	4603      	mov	r3, r0
 801c568:	2b00      	cmp	r3, #0
 801c56a:	d001      	beq.n	801c570 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801c56c:	f7e5 fb2a 	bl	8001bc4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801c570:	bf00      	nop
 801c572:	bd80      	pop	{r7, pc}
 801c574:	200000d0 	.word	0x200000d0
 801c578:	2000e5bc 	.word	0x2000e5bc
 801c57c:	2000002c 	.word	0x2000002c
 801c580:	200000bc 	.word	0x200000bc

0801c584 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801c584:	b580      	push	{r7, lr}
 801c586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801c588:	2200      	movs	r2, #0
 801c58a:	4905      	ldr	r1, [pc, #20]	@ (801c5a0 <CDC_Init_FS+0x1c>)
 801c58c:	4805      	ldr	r0, [pc, #20]	@ (801c5a4 <CDC_Init_FS+0x20>)
 801c58e:	f7ed ff59 	bl	800a444 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801c592:	4905      	ldr	r1, [pc, #20]	@ (801c5a8 <CDC_Init_FS+0x24>)
 801c594:	4803      	ldr	r0, [pc, #12]	@ (801c5a4 <CDC_Init_FS+0x20>)
 801c596:	f7ed ff77 	bl	800a488 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801c59a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801c59c:	4618      	mov	r0, r3
 801c59e:	bd80      	pop	{r7, pc}
 801c5a0:	2000f098 	.word	0x2000f098
 801c5a4:	2000e5bc 	.word	0x2000e5bc
 801c5a8:	2000e898 	.word	0x2000e898

0801c5ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801c5ac:	b480      	push	{r7}
 801c5ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801c5b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801c5b2:	4618      	mov	r0, r3
 801c5b4:	46bd      	mov	sp, r7
 801c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5ba:	4770      	bx	lr

0801c5bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801c5bc:	b480      	push	{r7}
 801c5be:	b083      	sub	sp, #12
 801c5c0:	af00      	add	r7, sp, #0
 801c5c2:	4603      	mov	r3, r0
 801c5c4:	6039      	str	r1, [r7, #0]
 801c5c6:	71fb      	strb	r3, [r7, #7]
 801c5c8:	4613      	mov	r3, r2
 801c5ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801c5cc:	79fb      	ldrb	r3, [r7, #7]
 801c5ce:	2b23      	cmp	r3, #35	@ 0x23
 801c5d0:	d84a      	bhi.n	801c668 <CDC_Control_FS+0xac>
 801c5d2:	a201      	add	r2, pc, #4	@ (adr r2, 801c5d8 <CDC_Control_FS+0x1c>)
 801c5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c5d8:	0801c669 	.word	0x0801c669
 801c5dc:	0801c669 	.word	0x0801c669
 801c5e0:	0801c669 	.word	0x0801c669
 801c5e4:	0801c669 	.word	0x0801c669
 801c5e8:	0801c669 	.word	0x0801c669
 801c5ec:	0801c669 	.word	0x0801c669
 801c5f0:	0801c669 	.word	0x0801c669
 801c5f4:	0801c669 	.word	0x0801c669
 801c5f8:	0801c669 	.word	0x0801c669
 801c5fc:	0801c669 	.word	0x0801c669
 801c600:	0801c669 	.word	0x0801c669
 801c604:	0801c669 	.word	0x0801c669
 801c608:	0801c669 	.word	0x0801c669
 801c60c:	0801c669 	.word	0x0801c669
 801c610:	0801c669 	.word	0x0801c669
 801c614:	0801c669 	.word	0x0801c669
 801c618:	0801c669 	.word	0x0801c669
 801c61c:	0801c669 	.word	0x0801c669
 801c620:	0801c669 	.word	0x0801c669
 801c624:	0801c669 	.word	0x0801c669
 801c628:	0801c669 	.word	0x0801c669
 801c62c:	0801c669 	.word	0x0801c669
 801c630:	0801c669 	.word	0x0801c669
 801c634:	0801c669 	.word	0x0801c669
 801c638:	0801c669 	.word	0x0801c669
 801c63c:	0801c669 	.word	0x0801c669
 801c640:	0801c669 	.word	0x0801c669
 801c644:	0801c669 	.word	0x0801c669
 801c648:	0801c669 	.word	0x0801c669
 801c64c:	0801c669 	.word	0x0801c669
 801c650:	0801c669 	.word	0x0801c669
 801c654:	0801c669 	.word	0x0801c669
 801c658:	0801c669 	.word	0x0801c669
 801c65c:	0801c669 	.word	0x0801c669
 801c660:	0801c669 	.word	0x0801c669
 801c664:	0801c669 	.word	0x0801c669
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801c668:	bf00      	nop
  }

  return (USBD_OK);
 801c66a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801c66c:	4618      	mov	r0, r3
 801c66e:	370c      	adds	r7, #12
 801c670:	46bd      	mov	sp, r7
 801c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c676:	4770      	bx	lr

0801c678 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801c678:	b580      	push	{r7, lr}
 801c67a:	b082      	sub	sp, #8
 801c67c:	af00      	add	r7, sp, #0
 801c67e:	6078      	str	r0, [r7, #4]
 801c680:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801c682:	6879      	ldr	r1, [r7, #4]
 801c684:	4805      	ldr	r0, [pc, #20]	@ (801c69c <CDC_Receive_FS+0x24>)
 801c686:	f7ed feff 	bl	800a488 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c68a:	4804      	ldr	r0, [pc, #16]	@ (801c69c <CDC_Receive_FS+0x24>)
 801c68c:	f7ed ff5a 	bl	800a544 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801c690:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801c692:	4618      	mov	r0, r3
 801c694:	3708      	adds	r7, #8
 801c696:	46bd      	mov	sp, r7
 801c698:	bd80      	pop	{r7, pc}
 801c69a:	bf00      	nop
 801c69c:	2000e5bc 	.word	0x2000e5bc

0801c6a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801c6a0:	b580      	push	{r7, lr}
 801c6a2:	b084      	sub	sp, #16
 801c6a4:	af00      	add	r7, sp, #0
 801c6a6:	6078      	str	r0, [r7, #4]
 801c6a8:	460b      	mov	r3, r1
 801c6aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801c6ac:	2300      	movs	r3, #0
 801c6ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801c6b0:	4b0d      	ldr	r3, [pc, #52]	@ (801c6e8 <CDC_Transmit_FS+0x48>)
 801c6b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801c6b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801c6b8:	68bb      	ldr	r3, [r7, #8]
 801c6ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d001      	beq.n	801c6c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801c6c2:	2301      	movs	r3, #1
 801c6c4:	e00b      	b.n	801c6de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801c6c6:	887b      	ldrh	r3, [r7, #2]
 801c6c8:	461a      	mov	r2, r3
 801c6ca:	6879      	ldr	r1, [r7, #4]
 801c6cc:	4806      	ldr	r0, [pc, #24]	@ (801c6e8 <CDC_Transmit_FS+0x48>)
 801c6ce:	f7ed feb9 	bl	800a444 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801c6d2:	4805      	ldr	r0, [pc, #20]	@ (801c6e8 <CDC_Transmit_FS+0x48>)
 801c6d4:	f7ed fef6 	bl	800a4c4 <USBD_CDC_TransmitPacket>
 801c6d8:	4603      	mov	r3, r0
 801c6da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801c6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 801c6de:	4618      	mov	r0, r3
 801c6e0:	3710      	adds	r7, #16
 801c6e2:	46bd      	mov	sp, r7
 801c6e4:	bd80      	pop	{r7, pc}
 801c6e6:	bf00      	nop
 801c6e8:	2000e5bc 	.word	0x2000e5bc

0801c6ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801c6ec:	b480      	push	{r7}
 801c6ee:	b087      	sub	sp, #28
 801c6f0:	af00      	add	r7, sp, #0
 801c6f2:	60f8      	str	r0, [r7, #12]
 801c6f4:	60b9      	str	r1, [r7, #8]
 801c6f6:	4613      	mov	r3, r2
 801c6f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801c6fa:	2300      	movs	r3, #0
 801c6fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801c6fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c702:	4618      	mov	r0, r3
 801c704:	371c      	adds	r7, #28
 801c706:	46bd      	mov	sp, r7
 801c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c70c:	4770      	bx	lr
	...

0801c710 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c710:	b480      	push	{r7}
 801c712:	b083      	sub	sp, #12
 801c714:	af00      	add	r7, sp, #0
 801c716:	4603      	mov	r3, r0
 801c718:	6039      	str	r1, [r7, #0]
 801c71a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801c71c:	683b      	ldr	r3, [r7, #0]
 801c71e:	2212      	movs	r2, #18
 801c720:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801c722:	4b03      	ldr	r3, [pc, #12]	@ (801c730 <USBD_FS_DeviceDescriptor+0x20>)
}
 801c724:	4618      	mov	r0, r3
 801c726:	370c      	adds	r7, #12
 801c728:	46bd      	mov	sp, r7
 801c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c72e:	4770      	bx	lr
 801c730:	200000f0 	.word	0x200000f0

0801c734 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c734:	b480      	push	{r7}
 801c736:	b083      	sub	sp, #12
 801c738:	af00      	add	r7, sp, #0
 801c73a:	4603      	mov	r3, r0
 801c73c:	6039      	str	r1, [r7, #0]
 801c73e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801c740:	683b      	ldr	r3, [r7, #0]
 801c742:	2204      	movs	r2, #4
 801c744:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801c746:	4b03      	ldr	r3, [pc, #12]	@ (801c754 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801c748:	4618      	mov	r0, r3
 801c74a:	370c      	adds	r7, #12
 801c74c:	46bd      	mov	sp, r7
 801c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c752:	4770      	bx	lr
 801c754:	20000110 	.word	0x20000110

0801c758 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c758:	b580      	push	{r7, lr}
 801c75a:	b082      	sub	sp, #8
 801c75c:	af00      	add	r7, sp, #0
 801c75e:	4603      	mov	r3, r0
 801c760:	6039      	str	r1, [r7, #0]
 801c762:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801c764:	79fb      	ldrb	r3, [r7, #7]
 801c766:	2b00      	cmp	r3, #0
 801c768:	d105      	bne.n	801c776 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c76a:	683a      	ldr	r2, [r7, #0]
 801c76c:	4907      	ldr	r1, [pc, #28]	@ (801c78c <USBD_FS_ProductStrDescriptor+0x34>)
 801c76e:	4808      	ldr	r0, [pc, #32]	@ (801c790 <USBD_FS_ProductStrDescriptor+0x38>)
 801c770:	f7ef f95e 	bl	800ba30 <USBD_GetString>
 801c774:	e004      	b.n	801c780 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c776:	683a      	ldr	r2, [r7, #0]
 801c778:	4904      	ldr	r1, [pc, #16]	@ (801c78c <USBD_FS_ProductStrDescriptor+0x34>)
 801c77a:	4805      	ldr	r0, [pc, #20]	@ (801c790 <USBD_FS_ProductStrDescriptor+0x38>)
 801c77c:	f7ef f958 	bl	800ba30 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c780:	4b02      	ldr	r3, [pc, #8]	@ (801c78c <USBD_FS_ProductStrDescriptor+0x34>)
}
 801c782:	4618      	mov	r0, r3
 801c784:	3708      	adds	r7, #8
 801c786:	46bd      	mov	sp, r7
 801c788:	bd80      	pop	{r7, pc}
 801c78a:	bf00      	nop
 801c78c:	2000f898 	.word	0x2000f898
 801c790:	08021c30 	.word	0x08021c30

0801c794 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c794:	b580      	push	{r7, lr}
 801c796:	b082      	sub	sp, #8
 801c798:	af00      	add	r7, sp, #0
 801c79a:	4603      	mov	r3, r0
 801c79c:	6039      	str	r1, [r7, #0]
 801c79e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801c7a0:	683a      	ldr	r2, [r7, #0]
 801c7a2:	4904      	ldr	r1, [pc, #16]	@ (801c7b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801c7a4:	4804      	ldr	r0, [pc, #16]	@ (801c7b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801c7a6:	f7ef f943 	bl	800ba30 <USBD_GetString>
  return USBD_StrDesc;
 801c7aa:	4b02      	ldr	r3, [pc, #8]	@ (801c7b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801c7ac:	4618      	mov	r0, r3
 801c7ae:	3708      	adds	r7, #8
 801c7b0:	46bd      	mov	sp, r7
 801c7b2:	bd80      	pop	{r7, pc}
 801c7b4:	2000f898 	.word	0x2000f898
 801c7b8:	08021c48 	.word	0x08021c48

0801c7bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c7bc:	b580      	push	{r7, lr}
 801c7be:	b082      	sub	sp, #8
 801c7c0:	af00      	add	r7, sp, #0
 801c7c2:	4603      	mov	r3, r0
 801c7c4:	6039      	str	r1, [r7, #0]
 801c7c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801c7c8:	683b      	ldr	r3, [r7, #0]
 801c7ca:	221a      	movs	r2, #26
 801c7cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801c7ce:	f000 f855 	bl	801c87c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801c7d2:	4b02      	ldr	r3, [pc, #8]	@ (801c7dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 801c7d4:	4618      	mov	r0, r3
 801c7d6:	3708      	adds	r7, #8
 801c7d8:	46bd      	mov	sp, r7
 801c7da:	bd80      	pop	{r7, pc}
 801c7dc:	20000114 	.word	0x20000114

0801c7e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c7e0:	b580      	push	{r7, lr}
 801c7e2:	b082      	sub	sp, #8
 801c7e4:	af00      	add	r7, sp, #0
 801c7e6:	4603      	mov	r3, r0
 801c7e8:	6039      	str	r1, [r7, #0]
 801c7ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801c7ec:	79fb      	ldrb	r3, [r7, #7]
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	d105      	bne.n	801c7fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c7f2:	683a      	ldr	r2, [r7, #0]
 801c7f4:	4907      	ldr	r1, [pc, #28]	@ (801c814 <USBD_FS_ConfigStrDescriptor+0x34>)
 801c7f6:	4808      	ldr	r0, [pc, #32]	@ (801c818 <USBD_FS_ConfigStrDescriptor+0x38>)
 801c7f8:	f7ef f91a 	bl	800ba30 <USBD_GetString>
 801c7fc:	e004      	b.n	801c808 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c7fe:	683a      	ldr	r2, [r7, #0]
 801c800:	4904      	ldr	r1, [pc, #16]	@ (801c814 <USBD_FS_ConfigStrDescriptor+0x34>)
 801c802:	4805      	ldr	r0, [pc, #20]	@ (801c818 <USBD_FS_ConfigStrDescriptor+0x38>)
 801c804:	f7ef f914 	bl	800ba30 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c808:	4b02      	ldr	r3, [pc, #8]	@ (801c814 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801c80a:	4618      	mov	r0, r3
 801c80c:	3708      	adds	r7, #8
 801c80e:	46bd      	mov	sp, r7
 801c810:	bd80      	pop	{r7, pc}
 801c812:	bf00      	nop
 801c814:	2000f898 	.word	0x2000f898
 801c818:	08021c5c 	.word	0x08021c5c

0801c81c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c81c:	b580      	push	{r7, lr}
 801c81e:	b082      	sub	sp, #8
 801c820:	af00      	add	r7, sp, #0
 801c822:	4603      	mov	r3, r0
 801c824:	6039      	str	r1, [r7, #0]
 801c826:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801c828:	79fb      	ldrb	r3, [r7, #7]
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	d105      	bne.n	801c83a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c82e:	683a      	ldr	r2, [r7, #0]
 801c830:	4907      	ldr	r1, [pc, #28]	@ (801c850 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801c832:	4808      	ldr	r0, [pc, #32]	@ (801c854 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801c834:	f7ef f8fc 	bl	800ba30 <USBD_GetString>
 801c838:	e004      	b.n	801c844 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c83a:	683a      	ldr	r2, [r7, #0]
 801c83c:	4904      	ldr	r1, [pc, #16]	@ (801c850 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801c83e:	4805      	ldr	r0, [pc, #20]	@ (801c854 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801c840:	f7ef f8f6 	bl	800ba30 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c844:	4b02      	ldr	r3, [pc, #8]	@ (801c850 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801c846:	4618      	mov	r0, r3
 801c848:	3708      	adds	r7, #8
 801c84a:	46bd      	mov	sp, r7
 801c84c:	bd80      	pop	{r7, pc}
 801c84e:	bf00      	nop
 801c850:	2000f898 	.word	0x2000f898
 801c854:	08021c68 	.word	0x08021c68

0801c858 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c858:	b480      	push	{r7}
 801c85a:	b083      	sub	sp, #12
 801c85c:	af00      	add	r7, sp, #0
 801c85e:	4603      	mov	r3, r0
 801c860:	6039      	str	r1, [r7, #0]
 801c862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801c864:	683b      	ldr	r3, [r7, #0]
 801c866:	220c      	movs	r2, #12
 801c868:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801c86a:	4b03      	ldr	r3, [pc, #12]	@ (801c878 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801c86c:	4618      	mov	r0, r3
 801c86e:	370c      	adds	r7, #12
 801c870:	46bd      	mov	sp, r7
 801c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c876:	4770      	bx	lr
 801c878:	20000104 	.word	0x20000104

0801c87c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801c87c:	b580      	push	{r7, lr}
 801c87e:	b084      	sub	sp, #16
 801c880:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801c882:	4b0f      	ldr	r3, [pc, #60]	@ (801c8c0 <Get_SerialNum+0x44>)
 801c884:	681b      	ldr	r3, [r3, #0]
 801c886:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801c888:	4b0e      	ldr	r3, [pc, #56]	@ (801c8c4 <Get_SerialNum+0x48>)
 801c88a:	681b      	ldr	r3, [r3, #0]
 801c88c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801c88e:	4b0e      	ldr	r3, [pc, #56]	@ (801c8c8 <Get_SerialNum+0x4c>)
 801c890:	681b      	ldr	r3, [r3, #0]
 801c892:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801c894:	68fa      	ldr	r2, [r7, #12]
 801c896:	687b      	ldr	r3, [r7, #4]
 801c898:	4413      	add	r3, r2
 801c89a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801c89c:	68fb      	ldr	r3, [r7, #12]
 801c89e:	2b00      	cmp	r3, #0
 801c8a0:	d009      	beq.n	801c8b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801c8a2:	2208      	movs	r2, #8
 801c8a4:	4909      	ldr	r1, [pc, #36]	@ (801c8cc <Get_SerialNum+0x50>)
 801c8a6:	68f8      	ldr	r0, [r7, #12]
 801c8a8:	f000 f814 	bl	801c8d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801c8ac:	2204      	movs	r2, #4
 801c8ae:	4908      	ldr	r1, [pc, #32]	@ (801c8d0 <Get_SerialNum+0x54>)
 801c8b0:	68b8      	ldr	r0, [r7, #8]
 801c8b2:	f000 f80f 	bl	801c8d4 <IntToUnicode>
  }
}
 801c8b6:	bf00      	nop
 801c8b8:	3710      	adds	r7, #16
 801c8ba:	46bd      	mov	sp, r7
 801c8bc:	bd80      	pop	{r7, pc}
 801c8be:	bf00      	nop
 801c8c0:	1ff0f420 	.word	0x1ff0f420
 801c8c4:	1ff0f424 	.word	0x1ff0f424
 801c8c8:	1ff0f428 	.word	0x1ff0f428
 801c8cc:	20000116 	.word	0x20000116
 801c8d0:	20000126 	.word	0x20000126

0801c8d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801c8d4:	b480      	push	{r7}
 801c8d6:	b087      	sub	sp, #28
 801c8d8:	af00      	add	r7, sp, #0
 801c8da:	60f8      	str	r0, [r7, #12]
 801c8dc:	60b9      	str	r1, [r7, #8]
 801c8de:	4613      	mov	r3, r2
 801c8e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801c8e2:	2300      	movs	r3, #0
 801c8e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801c8e6:	2300      	movs	r3, #0
 801c8e8:	75fb      	strb	r3, [r7, #23]
 801c8ea:	e027      	b.n	801c93c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801c8ec:	68fb      	ldr	r3, [r7, #12]
 801c8ee:	0f1b      	lsrs	r3, r3, #28
 801c8f0:	2b09      	cmp	r3, #9
 801c8f2:	d80b      	bhi.n	801c90c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801c8f4:	68fb      	ldr	r3, [r7, #12]
 801c8f6:	0f1b      	lsrs	r3, r3, #28
 801c8f8:	b2da      	uxtb	r2, r3
 801c8fa:	7dfb      	ldrb	r3, [r7, #23]
 801c8fc:	005b      	lsls	r3, r3, #1
 801c8fe:	4619      	mov	r1, r3
 801c900:	68bb      	ldr	r3, [r7, #8]
 801c902:	440b      	add	r3, r1
 801c904:	3230      	adds	r2, #48	@ 0x30
 801c906:	b2d2      	uxtb	r2, r2
 801c908:	701a      	strb	r2, [r3, #0]
 801c90a:	e00a      	b.n	801c922 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	0f1b      	lsrs	r3, r3, #28
 801c910:	b2da      	uxtb	r2, r3
 801c912:	7dfb      	ldrb	r3, [r7, #23]
 801c914:	005b      	lsls	r3, r3, #1
 801c916:	4619      	mov	r1, r3
 801c918:	68bb      	ldr	r3, [r7, #8]
 801c91a:	440b      	add	r3, r1
 801c91c:	3237      	adds	r2, #55	@ 0x37
 801c91e:	b2d2      	uxtb	r2, r2
 801c920:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801c922:	68fb      	ldr	r3, [r7, #12]
 801c924:	011b      	lsls	r3, r3, #4
 801c926:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801c928:	7dfb      	ldrb	r3, [r7, #23]
 801c92a:	005b      	lsls	r3, r3, #1
 801c92c:	3301      	adds	r3, #1
 801c92e:	68ba      	ldr	r2, [r7, #8]
 801c930:	4413      	add	r3, r2
 801c932:	2200      	movs	r2, #0
 801c934:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801c936:	7dfb      	ldrb	r3, [r7, #23]
 801c938:	3301      	adds	r3, #1
 801c93a:	75fb      	strb	r3, [r7, #23]
 801c93c:	7dfa      	ldrb	r2, [r7, #23]
 801c93e:	79fb      	ldrb	r3, [r7, #7]
 801c940:	429a      	cmp	r2, r3
 801c942:	d3d3      	bcc.n	801c8ec <IntToUnicode+0x18>
  }
}
 801c944:	bf00      	nop
 801c946:	bf00      	nop
 801c948:	371c      	adds	r7, #28
 801c94a:	46bd      	mov	sp, r7
 801c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c950:	4770      	bx	lr
	...

0801c954 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801c954:	b580      	push	{r7, lr}
 801c956:	b0ae      	sub	sp, #184	@ 0xb8
 801c958:	af00      	add	r7, sp, #0
 801c95a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c95c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801c960:	2200      	movs	r2, #0
 801c962:	601a      	str	r2, [r3, #0]
 801c964:	605a      	str	r2, [r3, #4]
 801c966:	609a      	str	r2, [r3, #8]
 801c968:	60da      	str	r2, [r3, #12]
 801c96a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801c96c:	f107 0314 	add.w	r3, r7, #20
 801c970:	2290      	movs	r2, #144	@ 0x90
 801c972:	2100      	movs	r1, #0
 801c974:	4618      	mov	r0, r3
 801c976:	f000 fdca 	bl	801d50e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801c97a:	687b      	ldr	r3, [r7, #4]
 801c97c:	681b      	ldr	r3, [r3, #0]
 801c97e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801c982:	d161      	bne.n	801ca48 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 801c984:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801c988:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 801c98a:	2300      	movs	r3, #0
 801c98c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801c990:	f107 0314 	add.w	r3, r7, #20
 801c994:	4618      	mov	r0, r3
 801c996:	f7ea f85b 	bl	8006a50 <HAL_RCCEx_PeriphCLKConfig>
 801c99a:	4603      	mov	r3, r0
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d001      	beq.n	801c9a4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 801c9a0:	f7e5 f910 	bl	8001bc4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801c9a4:	4b2a      	ldr	r3, [pc, #168]	@ (801ca50 <HAL_PCD_MspInit+0xfc>)
 801c9a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c9a8:	4a29      	ldr	r2, [pc, #164]	@ (801ca50 <HAL_PCD_MspInit+0xfc>)
 801c9aa:	f043 0301 	orr.w	r3, r3, #1
 801c9ae:	6313      	str	r3, [r2, #48]	@ 0x30
 801c9b0:	4b27      	ldr	r3, [pc, #156]	@ (801ca50 <HAL_PCD_MspInit+0xfc>)
 801c9b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c9b4:	f003 0301 	and.w	r3, r3, #1
 801c9b8:	613b      	str	r3, [r7, #16]
 801c9ba:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 801c9bc:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 801c9c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c9c4:	2302      	movs	r3, #2
 801c9c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c9ca:	2300      	movs	r3, #0
 801c9cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c9d0:	2303      	movs	r3, #3
 801c9d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801c9d6:	230a      	movs	r3, #10
 801c9d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c9dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801c9e0:	4619      	mov	r1, r3
 801c9e2:	481c      	ldr	r0, [pc, #112]	@ (801ca54 <HAL_PCD_MspInit+0x100>)
 801c9e4:	f7e7 f866 	bl	8003ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801c9e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801c9ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801c9f0:	2300      	movs	r3, #0
 801c9f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c9f6:	2300      	movs	r3, #0
 801c9f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c9fc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801ca00:	4619      	mov	r1, r3
 801ca02:	4814      	ldr	r0, [pc, #80]	@ (801ca54 <HAL_PCD_MspInit+0x100>)
 801ca04:	f7e7 f856 	bl	8003ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801ca08:	4b11      	ldr	r3, [pc, #68]	@ (801ca50 <HAL_PCD_MspInit+0xfc>)
 801ca0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ca0c:	4a10      	ldr	r2, [pc, #64]	@ (801ca50 <HAL_PCD_MspInit+0xfc>)
 801ca0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ca12:	6353      	str	r3, [r2, #52]	@ 0x34
 801ca14:	4b0e      	ldr	r3, [pc, #56]	@ (801ca50 <HAL_PCD_MspInit+0xfc>)
 801ca16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ca18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801ca1c:	60fb      	str	r3, [r7, #12]
 801ca1e:	68fb      	ldr	r3, [r7, #12]
 801ca20:	4b0b      	ldr	r3, [pc, #44]	@ (801ca50 <HAL_PCD_MspInit+0xfc>)
 801ca22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ca24:	4a0a      	ldr	r2, [pc, #40]	@ (801ca50 <HAL_PCD_MspInit+0xfc>)
 801ca26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801ca2a:	6453      	str	r3, [r2, #68]	@ 0x44
 801ca2c:	4b08      	ldr	r3, [pc, #32]	@ (801ca50 <HAL_PCD_MspInit+0xfc>)
 801ca2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ca30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801ca34:	60bb      	str	r3, [r7, #8]
 801ca36:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801ca38:	2200      	movs	r2, #0
 801ca3a:	2105      	movs	r1, #5
 801ca3c:	2043      	movs	r0, #67	@ 0x43
 801ca3e:	f7e5 fd21 	bl	8002484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801ca42:	2043      	movs	r0, #67	@ 0x43
 801ca44:	f7e5 fd3a 	bl	80024bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801ca48:	bf00      	nop
 801ca4a:	37b8      	adds	r7, #184	@ 0xb8
 801ca4c:	46bd      	mov	sp, r7
 801ca4e:	bd80      	pop	{r7, pc}
 801ca50:	40023800 	.word	0x40023800
 801ca54:	40020000 	.word	0x40020000

0801ca58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ca58:	b580      	push	{r7, lr}
 801ca5a:	b082      	sub	sp, #8
 801ca5c:	af00      	add	r7, sp, #0
 801ca5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 801ca66:	687b      	ldr	r3, [r7, #4]
 801ca68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801ca6c:	4619      	mov	r1, r3
 801ca6e:	4610      	mov	r0, r2
 801ca70:	f7ed fe51 	bl	800a716 <USBD_LL_SetupStage>
}
 801ca74:	bf00      	nop
 801ca76:	3708      	adds	r7, #8
 801ca78:	46bd      	mov	sp, r7
 801ca7a:	bd80      	pop	{r7, pc}

0801ca7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ca7c:	b580      	push	{r7, lr}
 801ca7e:	b082      	sub	sp, #8
 801ca80:	af00      	add	r7, sp, #0
 801ca82:	6078      	str	r0, [r7, #4]
 801ca84:	460b      	mov	r3, r1
 801ca86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801ca88:	687b      	ldr	r3, [r7, #4]
 801ca8a:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 801ca8e:	78fa      	ldrb	r2, [r7, #3]
 801ca90:	6879      	ldr	r1, [r7, #4]
 801ca92:	4613      	mov	r3, r2
 801ca94:	00db      	lsls	r3, r3, #3
 801ca96:	4413      	add	r3, r2
 801ca98:	009b      	lsls	r3, r3, #2
 801ca9a:	440b      	add	r3, r1
 801ca9c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801caa0:	681a      	ldr	r2, [r3, #0]
 801caa2:	78fb      	ldrb	r3, [r7, #3]
 801caa4:	4619      	mov	r1, r3
 801caa6:	f7ed fe8b 	bl	800a7c0 <USBD_LL_DataOutStage>
}
 801caaa:	bf00      	nop
 801caac:	3708      	adds	r7, #8
 801caae:	46bd      	mov	sp, r7
 801cab0:	bd80      	pop	{r7, pc}

0801cab2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cab2:	b580      	push	{r7, lr}
 801cab4:	b082      	sub	sp, #8
 801cab6:	af00      	add	r7, sp, #0
 801cab8:	6078      	str	r0, [r7, #4]
 801caba:	460b      	mov	r3, r1
 801cabc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 801cac4:	78fa      	ldrb	r2, [r7, #3]
 801cac6:	6879      	ldr	r1, [r7, #4]
 801cac8:	4613      	mov	r3, r2
 801caca:	00db      	lsls	r3, r3, #3
 801cacc:	4413      	add	r3, r2
 801cace:	009b      	lsls	r3, r3, #2
 801cad0:	440b      	add	r3, r1
 801cad2:	3320      	adds	r3, #32
 801cad4:	681a      	ldr	r2, [r3, #0]
 801cad6:	78fb      	ldrb	r3, [r7, #3]
 801cad8:	4619      	mov	r1, r3
 801cada:	f7ed ff24 	bl	800a926 <USBD_LL_DataInStage>
}
 801cade:	bf00      	nop
 801cae0:	3708      	adds	r7, #8
 801cae2:	46bd      	mov	sp, r7
 801cae4:	bd80      	pop	{r7, pc}

0801cae6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cae6:	b580      	push	{r7, lr}
 801cae8:	b082      	sub	sp, #8
 801caea:	af00      	add	r7, sp, #0
 801caec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801caf4:	4618      	mov	r0, r3
 801caf6:	f7ee f85e 	bl	800abb6 <USBD_LL_SOF>
}
 801cafa:	bf00      	nop
 801cafc:	3708      	adds	r7, #8
 801cafe:	46bd      	mov	sp, r7
 801cb00:	bd80      	pop	{r7, pc}

0801cb02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cb02:	b580      	push	{r7, lr}
 801cb04:	b084      	sub	sp, #16
 801cb06:	af00      	add	r7, sp, #0
 801cb08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801cb0a:	2301      	movs	r3, #1
 801cb0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	79db      	ldrb	r3, [r3, #7]
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	d102      	bne.n	801cb1c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801cb16:	2300      	movs	r3, #0
 801cb18:	73fb      	strb	r3, [r7, #15]
 801cb1a:	e008      	b.n	801cb2e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801cb1c:	687b      	ldr	r3, [r7, #4]
 801cb1e:	79db      	ldrb	r3, [r3, #7]
 801cb20:	2b02      	cmp	r3, #2
 801cb22:	d102      	bne.n	801cb2a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801cb24:	2301      	movs	r3, #1
 801cb26:	73fb      	strb	r3, [r7, #15]
 801cb28:	e001      	b.n	801cb2e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801cb2a:	f7e5 f84b 	bl	8001bc4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801cb34:	7bfa      	ldrb	r2, [r7, #15]
 801cb36:	4611      	mov	r1, r2
 801cb38:	4618      	mov	r0, r3
 801cb3a:	f7ed fff8 	bl	800ab2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801cb44:	4618      	mov	r0, r3
 801cb46:	f7ed ffa0 	bl	800aa8a <USBD_LL_Reset>
}
 801cb4a:	bf00      	nop
 801cb4c:	3710      	adds	r7, #16
 801cb4e:	46bd      	mov	sp, r7
 801cb50:	bd80      	pop	{r7, pc}
	...

0801cb54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cb54:	b580      	push	{r7, lr}
 801cb56:	b082      	sub	sp, #8
 801cb58:	af00      	add	r7, sp, #0
 801cb5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801cb62:	4618      	mov	r0, r3
 801cb64:	f7ed fff3 	bl	800ab4e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	681b      	ldr	r3, [r3, #0]
 801cb6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801cb70:	681b      	ldr	r3, [r3, #0]
 801cb72:	687a      	ldr	r2, [r7, #4]
 801cb74:	6812      	ldr	r2, [r2, #0]
 801cb76:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801cb7a:	f043 0301 	orr.w	r3, r3, #1
 801cb7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	7adb      	ldrb	r3, [r3, #11]
 801cb84:	2b00      	cmp	r3, #0
 801cb86:	d005      	beq.n	801cb94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801cb88:	4b04      	ldr	r3, [pc, #16]	@ (801cb9c <HAL_PCD_SuspendCallback+0x48>)
 801cb8a:	691b      	ldr	r3, [r3, #16]
 801cb8c:	4a03      	ldr	r2, [pc, #12]	@ (801cb9c <HAL_PCD_SuspendCallback+0x48>)
 801cb8e:	f043 0306 	orr.w	r3, r3, #6
 801cb92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801cb94:	bf00      	nop
 801cb96:	3708      	adds	r7, #8
 801cb98:	46bd      	mov	sp, r7
 801cb9a:	bd80      	pop	{r7, pc}
 801cb9c:	e000ed00 	.word	0xe000ed00

0801cba0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cba0:	b580      	push	{r7, lr}
 801cba2:	b082      	sub	sp, #8
 801cba4:	af00      	add	r7, sp, #0
 801cba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801cba8:	687b      	ldr	r3, [r7, #4]
 801cbaa:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801cbae:	4618      	mov	r0, r3
 801cbb0:	f7ed ffe9 	bl	800ab86 <USBD_LL_Resume>
}
 801cbb4:	bf00      	nop
 801cbb6:	3708      	adds	r7, #8
 801cbb8:	46bd      	mov	sp, r7
 801cbba:	bd80      	pop	{r7, pc}

0801cbbc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cbbc:	b580      	push	{r7, lr}
 801cbbe:	b082      	sub	sp, #8
 801cbc0:	af00      	add	r7, sp, #0
 801cbc2:	6078      	str	r0, [r7, #4]
 801cbc4:	460b      	mov	r3, r1
 801cbc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801cbce:	78fa      	ldrb	r2, [r7, #3]
 801cbd0:	4611      	mov	r1, r2
 801cbd2:	4618      	mov	r0, r3
 801cbd4:	f7ee f841 	bl	800ac5a <USBD_LL_IsoOUTIncomplete>
}
 801cbd8:	bf00      	nop
 801cbda:	3708      	adds	r7, #8
 801cbdc:	46bd      	mov	sp, r7
 801cbde:	bd80      	pop	{r7, pc}

0801cbe0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cbe0:	b580      	push	{r7, lr}
 801cbe2:	b082      	sub	sp, #8
 801cbe4:	af00      	add	r7, sp, #0
 801cbe6:	6078      	str	r0, [r7, #4]
 801cbe8:	460b      	mov	r3, r1
 801cbea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801cbf2:	78fa      	ldrb	r2, [r7, #3]
 801cbf4:	4611      	mov	r1, r2
 801cbf6:	4618      	mov	r0, r3
 801cbf8:	f7ed fffd 	bl	800abf6 <USBD_LL_IsoINIncomplete>
}
 801cbfc:	bf00      	nop
 801cbfe:	3708      	adds	r7, #8
 801cc00:	46bd      	mov	sp, r7
 801cc02:	bd80      	pop	{r7, pc}

0801cc04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cc04:	b580      	push	{r7, lr}
 801cc06:	b082      	sub	sp, #8
 801cc08:	af00      	add	r7, sp, #0
 801cc0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801cc12:	4618      	mov	r0, r3
 801cc14:	f7ee f853 	bl	800acbe <USBD_LL_DevConnected>
}
 801cc18:	bf00      	nop
 801cc1a:	3708      	adds	r7, #8
 801cc1c:	46bd      	mov	sp, r7
 801cc1e:	bd80      	pop	{r7, pc}

0801cc20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cc20:	b580      	push	{r7, lr}
 801cc22:	b082      	sub	sp, #8
 801cc24:	af00      	add	r7, sp, #0
 801cc26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801cc28:	687b      	ldr	r3, [r7, #4]
 801cc2a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801cc2e:	4618      	mov	r0, r3
 801cc30:	f7ee f850 	bl	800acd4 <USBD_LL_DevDisconnected>
}
 801cc34:	bf00      	nop
 801cc36:	3708      	adds	r7, #8
 801cc38:	46bd      	mov	sp, r7
 801cc3a:	bd80      	pop	{r7, pc}

0801cc3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801cc3c:	b580      	push	{r7, lr}
 801cc3e:	b082      	sub	sp, #8
 801cc40:	af00      	add	r7, sp, #0
 801cc42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801cc44:	687b      	ldr	r3, [r7, #4]
 801cc46:	781b      	ldrb	r3, [r3, #0]
 801cc48:	2b00      	cmp	r3, #0
 801cc4a:	d13c      	bne.n	801ccc6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801cc4c:	4a20      	ldr	r2, [pc, #128]	@ (801ccd0 <USBD_LL_Init+0x94>)
 801cc4e:	687b      	ldr	r3, [r7, #4]
 801cc50:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	4a1e      	ldr	r2, [pc, #120]	@ (801ccd0 <USBD_LL_Init+0x94>)
 801cc58:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801cc5c:	4b1c      	ldr	r3, [pc, #112]	@ (801ccd0 <USBD_LL_Init+0x94>)
 801cc5e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801cc62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801cc64:	4b1a      	ldr	r3, [pc, #104]	@ (801ccd0 <USBD_LL_Init+0x94>)
 801cc66:	2206      	movs	r2, #6
 801cc68:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801cc6a:	4b19      	ldr	r3, [pc, #100]	@ (801ccd0 <USBD_LL_Init+0x94>)
 801cc6c:	2202      	movs	r2, #2
 801cc6e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801cc70:	4b17      	ldr	r3, [pc, #92]	@ (801ccd0 <USBD_LL_Init+0x94>)
 801cc72:	2200      	movs	r2, #0
 801cc74:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801cc76:	4b16      	ldr	r3, [pc, #88]	@ (801ccd0 <USBD_LL_Init+0x94>)
 801cc78:	2202      	movs	r2, #2
 801cc7a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801cc7c:	4b14      	ldr	r3, [pc, #80]	@ (801ccd0 <USBD_LL_Init+0x94>)
 801cc7e:	2201      	movs	r2, #1
 801cc80:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801cc82:	4b13      	ldr	r3, [pc, #76]	@ (801ccd0 <USBD_LL_Init+0x94>)
 801cc84:	2200      	movs	r2, #0
 801cc86:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801cc88:	4b11      	ldr	r3, [pc, #68]	@ (801ccd0 <USBD_LL_Init+0x94>)
 801cc8a:	2200      	movs	r2, #0
 801cc8c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801cc8e:	4b10      	ldr	r3, [pc, #64]	@ (801ccd0 <USBD_LL_Init+0x94>)
 801cc90:	2201      	movs	r2, #1
 801cc92:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801cc94:	4b0e      	ldr	r3, [pc, #56]	@ (801ccd0 <USBD_LL_Init+0x94>)
 801cc96:	2200      	movs	r2, #0
 801cc98:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801cc9a:	480d      	ldr	r0, [pc, #52]	@ (801ccd0 <USBD_LL_Init+0x94>)
 801cc9c:	f7e7 ff0d 	bl	8004aba <HAL_PCD_Init>
 801cca0:	4603      	mov	r3, r0
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d001      	beq.n	801ccaa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801cca6:	f7e4 ff8d 	bl	8001bc4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801ccaa:	2180      	movs	r1, #128	@ 0x80
 801ccac:	4808      	ldr	r0, [pc, #32]	@ (801ccd0 <USBD_LL_Init+0x94>)
 801ccae:	f7e9 f958 	bl	8005f62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801ccb2:	2240      	movs	r2, #64	@ 0x40
 801ccb4:	2100      	movs	r1, #0
 801ccb6:	4806      	ldr	r0, [pc, #24]	@ (801ccd0 <USBD_LL_Init+0x94>)
 801ccb8:	f7e9 f90c 	bl	8005ed4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801ccbc:	2280      	movs	r2, #128	@ 0x80
 801ccbe:	2101      	movs	r1, #1
 801ccc0:	4803      	ldr	r0, [pc, #12]	@ (801ccd0 <USBD_LL_Init+0x94>)
 801ccc2:	f7e9 f907 	bl	8005ed4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801ccc6:	2300      	movs	r3, #0
}
 801ccc8:	4618      	mov	r0, r3
 801ccca:	3708      	adds	r7, #8
 801cccc:	46bd      	mov	sp, r7
 801ccce:	bd80      	pop	{r7, pc}
 801ccd0:	2000fa98 	.word	0x2000fa98

0801ccd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801ccd4:	b580      	push	{r7, lr}
 801ccd6:	b084      	sub	sp, #16
 801ccd8:	af00      	add	r7, sp, #0
 801ccda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ccdc:	2300      	movs	r3, #0
 801ccde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cce0:	2300      	movs	r3, #0
 801cce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801cce4:	687b      	ldr	r3, [r7, #4]
 801cce6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801ccea:	4618      	mov	r0, r3
 801ccec:	f7e7 fffb 	bl	8004ce6 <HAL_PCD_Start>
 801ccf0:	4603      	mov	r3, r0
 801ccf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ccf4:	7bfb      	ldrb	r3, [r7, #15]
 801ccf6:	4618      	mov	r0, r3
 801ccf8:	f000 f97e 	bl	801cff8 <USBD_Get_USB_Status>
 801ccfc:	4603      	mov	r3, r0
 801ccfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cd00:	7bbb      	ldrb	r3, [r7, #14]
}
 801cd02:	4618      	mov	r0, r3
 801cd04:	3710      	adds	r7, #16
 801cd06:	46bd      	mov	sp, r7
 801cd08:	bd80      	pop	{r7, pc}

0801cd0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801cd0a:	b580      	push	{r7, lr}
 801cd0c:	b084      	sub	sp, #16
 801cd0e:	af00      	add	r7, sp, #0
 801cd10:	6078      	str	r0, [r7, #4]
 801cd12:	4608      	mov	r0, r1
 801cd14:	4611      	mov	r1, r2
 801cd16:	461a      	mov	r2, r3
 801cd18:	4603      	mov	r3, r0
 801cd1a:	70fb      	strb	r3, [r7, #3]
 801cd1c:	460b      	mov	r3, r1
 801cd1e:	70bb      	strb	r3, [r7, #2]
 801cd20:	4613      	mov	r3, r2
 801cd22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cd24:	2300      	movs	r3, #0
 801cd26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cd28:	2300      	movs	r3, #0
 801cd2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801cd32:	78bb      	ldrb	r3, [r7, #2]
 801cd34:	883a      	ldrh	r2, [r7, #0]
 801cd36:	78f9      	ldrb	r1, [r7, #3]
 801cd38:	f7e8 fce9 	bl	800570e <HAL_PCD_EP_Open>
 801cd3c:	4603      	mov	r3, r0
 801cd3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cd40:	7bfb      	ldrb	r3, [r7, #15]
 801cd42:	4618      	mov	r0, r3
 801cd44:	f000 f958 	bl	801cff8 <USBD_Get_USB_Status>
 801cd48:	4603      	mov	r3, r0
 801cd4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cd4c:	7bbb      	ldrb	r3, [r7, #14]
}
 801cd4e:	4618      	mov	r0, r3
 801cd50:	3710      	adds	r7, #16
 801cd52:	46bd      	mov	sp, r7
 801cd54:	bd80      	pop	{r7, pc}

0801cd56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cd56:	b580      	push	{r7, lr}
 801cd58:	b084      	sub	sp, #16
 801cd5a:	af00      	add	r7, sp, #0
 801cd5c:	6078      	str	r0, [r7, #4]
 801cd5e:	460b      	mov	r3, r1
 801cd60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cd62:	2300      	movs	r3, #0
 801cd64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cd66:	2300      	movs	r3, #0
 801cd68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801cd70:	78fa      	ldrb	r2, [r7, #3]
 801cd72:	4611      	mov	r1, r2
 801cd74:	4618      	mov	r0, r3
 801cd76:	f7e8 fd32 	bl	80057de <HAL_PCD_EP_Close>
 801cd7a:	4603      	mov	r3, r0
 801cd7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cd7e:	7bfb      	ldrb	r3, [r7, #15]
 801cd80:	4618      	mov	r0, r3
 801cd82:	f000 f939 	bl	801cff8 <USBD_Get_USB_Status>
 801cd86:	4603      	mov	r3, r0
 801cd88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cd8a:	7bbb      	ldrb	r3, [r7, #14]
}
 801cd8c:	4618      	mov	r0, r3
 801cd8e:	3710      	adds	r7, #16
 801cd90:	46bd      	mov	sp, r7
 801cd92:	bd80      	pop	{r7, pc}

0801cd94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cd94:	b580      	push	{r7, lr}
 801cd96:	b084      	sub	sp, #16
 801cd98:	af00      	add	r7, sp, #0
 801cd9a:	6078      	str	r0, [r7, #4]
 801cd9c:	460b      	mov	r3, r1
 801cd9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cda0:	2300      	movs	r3, #0
 801cda2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cda4:	2300      	movs	r3, #0
 801cda6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801cdae:	78fa      	ldrb	r2, [r7, #3]
 801cdb0:	4611      	mov	r1, r2
 801cdb2:	4618      	mov	r0, r3
 801cdb4:	f7e8 fdea 	bl	800598c <HAL_PCD_EP_SetStall>
 801cdb8:	4603      	mov	r3, r0
 801cdba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cdbc:	7bfb      	ldrb	r3, [r7, #15]
 801cdbe:	4618      	mov	r0, r3
 801cdc0:	f000 f91a 	bl	801cff8 <USBD_Get_USB_Status>
 801cdc4:	4603      	mov	r3, r0
 801cdc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cdc8:	7bbb      	ldrb	r3, [r7, #14]
}
 801cdca:	4618      	mov	r0, r3
 801cdcc:	3710      	adds	r7, #16
 801cdce:	46bd      	mov	sp, r7
 801cdd0:	bd80      	pop	{r7, pc}

0801cdd2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cdd2:	b580      	push	{r7, lr}
 801cdd4:	b084      	sub	sp, #16
 801cdd6:	af00      	add	r7, sp, #0
 801cdd8:	6078      	str	r0, [r7, #4]
 801cdda:	460b      	mov	r3, r1
 801cddc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cdde:	2300      	movs	r3, #0
 801cde0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cde2:	2300      	movs	r3, #0
 801cde4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801cde6:	687b      	ldr	r3, [r7, #4]
 801cde8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801cdec:	78fa      	ldrb	r2, [r7, #3]
 801cdee:	4611      	mov	r1, r2
 801cdf0:	4618      	mov	r0, r3
 801cdf2:	f7e8 fe2e 	bl	8005a52 <HAL_PCD_EP_ClrStall>
 801cdf6:	4603      	mov	r3, r0
 801cdf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cdfa:	7bfb      	ldrb	r3, [r7, #15]
 801cdfc:	4618      	mov	r0, r3
 801cdfe:	f000 f8fb 	bl	801cff8 <USBD_Get_USB_Status>
 801ce02:	4603      	mov	r3, r0
 801ce04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ce06:	7bbb      	ldrb	r3, [r7, #14]
}
 801ce08:	4618      	mov	r0, r3
 801ce0a:	3710      	adds	r7, #16
 801ce0c:	46bd      	mov	sp, r7
 801ce0e:	bd80      	pop	{r7, pc}

0801ce10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ce10:	b480      	push	{r7}
 801ce12:	b085      	sub	sp, #20
 801ce14:	af00      	add	r7, sp, #0
 801ce16:	6078      	str	r0, [r7, #4]
 801ce18:	460b      	mov	r3, r1
 801ce1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801ce22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801ce24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	da0b      	bge.n	801ce44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801ce2c:	78fb      	ldrb	r3, [r7, #3]
 801ce2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801ce32:	68f9      	ldr	r1, [r7, #12]
 801ce34:	4613      	mov	r3, r2
 801ce36:	00db      	lsls	r3, r3, #3
 801ce38:	4413      	add	r3, r2
 801ce3a:	009b      	lsls	r3, r3, #2
 801ce3c:	440b      	add	r3, r1
 801ce3e:	3316      	adds	r3, #22
 801ce40:	781b      	ldrb	r3, [r3, #0]
 801ce42:	e00b      	b.n	801ce5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ce44:	78fb      	ldrb	r3, [r7, #3]
 801ce46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801ce4a:	68f9      	ldr	r1, [r7, #12]
 801ce4c:	4613      	mov	r3, r2
 801ce4e:	00db      	lsls	r3, r3, #3
 801ce50:	4413      	add	r3, r2
 801ce52:	009b      	lsls	r3, r3, #2
 801ce54:	440b      	add	r3, r1
 801ce56:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801ce5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ce5c:	4618      	mov	r0, r3
 801ce5e:	3714      	adds	r7, #20
 801ce60:	46bd      	mov	sp, r7
 801ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce66:	4770      	bx	lr

0801ce68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ce68:	b580      	push	{r7, lr}
 801ce6a:	b084      	sub	sp, #16
 801ce6c:	af00      	add	r7, sp, #0
 801ce6e:	6078      	str	r0, [r7, #4]
 801ce70:	460b      	mov	r3, r1
 801ce72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ce74:	2300      	movs	r3, #0
 801ce76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ce78:	2300      	movs	r3, #0
 801ce7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ce7c:	687b      	ldr	r3, [r7, #4]
 801ce7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801ce82:	78fa      	ldrb	r2, [r7, #3]
 801ce84:	4611      	mov	r1, r2
 801ce86:	4618      	mov	r0, r3
 801ce88:	f7e8 fc1d 	bl	80056c6 <HAL_PCD_SetAddress>
 801ce8c:	4603      	mov	r3, r0
 801ce8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ce90:	7bfb      	ldrb	r3, [r7, #15]
 801ce92:	4618      	mov	r0, r3
 801ce94:	f000 f8b0 	bl	801cff8 <USBD_Get_USB_Status>
 801ce98:	4603      	mov	r3, r0
 801ce9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ce9c:	7bbb      	ldrb	r3, [r7, #14]
}
 801ce9e:	4618      	mov	r0, r3
 801cea0:	3710      	adds	r7, #16
 801cea2:	46bd      	mov	sp, r7
 801cea4:	bd80      	pop	{r7, pc}

0801cea6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801cea6:	b580      	push	{r7, lr}
 801cea8:	b086      	sub	sp, #24
 801ceaa:	af00      	add	r7, sp, #0
 801ceac:	60f8      	str	r0, [r7, #12]
 801ceae:	607a      	str	r2, [r7, #4]
 801ceb0:	603b      	str	r3, [r7, #0]
 801ceb2:	460b      	mov	r3, r1
 801ceb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ceb6:	2300      	movs	r3, #0
 801ceb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ceba:	2300      	movs	r3, #0
 801cebc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801cebe:	68fb      	ldr	r3, [r7, #12]
 801cec0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801cec4:	7af9      	ldrb	r1, [r7, #11]
 801cec6:	683b      	ldr	r3, [r7, #0]
 801cec8:	687a      	ldr	r2, [r7, #4]
 801ceca:	f7e8 fd25 	bl	8005918 <HAL_PCD_EP_Transmit>
 801cece:	4603      	mov	r3, r0
 801ced0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ced2:	7dfb      	ldrb	r3, [r7, #23]
 801ced4:	4618      	mov	r0, r3
 801ced6:	f000 f88f 	bl	801cff8 <USBD_Get_USB_Status>
 801ceda:	4603      	mov	r3, r0
 801cedc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801cede:	7dbb      	ldrb	r3, [r7, #22]
}
 801cee0:	4618      	mov	r0, r3
 801cee2:	3718      	adds	r7, #24
 801cee4:	46bd      	mov	sp, r7
 801cee6:	bd80      	pop	{r7, pc}

0801cee8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801cee8:	b580      	push	{r7, lr}
 801ceea:	b086      	sub	sp, #24
 801ceec:	af00      	add	r7, sp, #0
 801ceee:	60f8      	str	r0, [r7, #12]
 801cef0:	607a      	str	r2, [r7, #4]
 801cef2:	603b      	str	r3, [r7, #0]
 801cef4:	460b      	mov	r3, r1
 801cef6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cef8:	2300      	movs	r3, #0
 801cefa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cefc:	2300      	movs	r3, #0
 801cefe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801cf00:	68fb      	ldr	r3, [r7, #12]
 801cf02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801cf06:	7af9      	ldrb	r1, [r7, #11]
 801cf08:	683b      	ldr	r3, [r7, #0]
 801cf0a:	687a      	ldr	r2, [r7, #4]
 801cf0c:	f7e8 fcb1 	bl	8005872 <HAL_PCD_EP_Receive>
 801cf10:	4603      	mov	r3, r0
 801cf12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cf14:	7dfb      	ldrb	r3, [r7, #23]
 801cf16:	4618      	mov	r0, r3
 801cf18:	f000 f86e 	bl	801cff8 <USBD_Get_USB_Status>
 801cf1c:	4603      	mov	r3, r0
 801cf1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801cf20:	7dbb      	ldrb	r3, [r7, #22]
}
 801cf22:	4618      	mov	r0, r3
 801cf24:	3718      	adds	r7, #24
 801cf26:	46bd      	mov	sp, r7
 801cf28:	bd80      	pop	{r7, pc}

0801cf2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cf2a:	b580      	push	{r7, lr}
 801cf2c:	b082      	sub	sp, #8
 801cf2e:	af00      	add	r7, sp, #0
 801cf30:	6078      	str	r0, [r7, #4]
 801cf32:	460b      	mov	r3, r1
 801cf34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801cf3c:	78fa      	ldrb	r2, [r7, #3]
 801cf3e:	4611      	mov	r1, r2
 801cf40:	4618      	mov	r0, r3
 801cf42:	f7e8 fcd1 	bl	80058e8 <HAL_PCD_EP_GetRxCount>
 801cf46:	4603      	mov	r3, r0
}
 801cf48:	4618      	mov	r0, r3
 801cf4a:	3708      	adds	r7, #8
 801cf4c:	46bd      	mov	sp, r7
 801cf4e:	bd80      	pop	{r7, pc}

0801cf50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801cf50:	b580      	push	{r7, lr}
 801cf52:	b082      	sub	sp, #8
 801cf54:	af00      	add	r7, sp, #0
 801cf56:	6078      	str	r0, [r7, #4]
 801cf58:	460b      	mov	r3, r1
 801cf5a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801cf5c:	78fb      	ldrb	r3, [r7, #3]
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	d002      	beq.n	801cf68 <HAL_PCDEx_LPM_Callback+0x18>
 801cf62:	2b01      	cmp	r3, #1
 801cf64:	d01f      	beq.n	801cfa6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801cf66:	e03b      	b.n	801cfe0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	7adb      	ldrb	r3, [r3, #11]
 801cf6c:	2b00      	cmp	r3, #0
 801cf6e:	d007      	beq.n	801cf80 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801cf70:	f000 f83c 	bl	801cfec <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801cf74:	4b1c      	ldr	r3, [pc, #112]	@ (801cfe8 <HAL_PCDEx_LPM_Callback+0x98>)
 801cf76:	691b      	ldr	r3, [r3, #16]
 801cf78:	4a1b      	ldr	r2, [pc, #108]	@ (801cfe8 <HAL_PCDEx_LPM_Callback+0x98>)
 801cf7a:	f023 0306 	bic.w	r3, r3, #6
 801cf7e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	681b      	ldr	r3, [r3, #0]
 801cf84:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801cf88:	681b      	ldr	r3, [r3, #0]
 801cf8a:	687a      	ldr	r2, [r7, #4]
 801cf8c:	6812      	ldr	r2, [r2, #0]
 801cf8e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801cf92:	f023 0301 	bic.w	r3, r3, #1
 801cf96:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801cf9e:	4618      	mov	r0, r3
 801cfa0:	f7ed fdf1 	bl	800ab86 <USBD_LL_Resume>
    break;
 801cfa4:	e01c      	b.n	801cfe0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	681b      	ldr	r3, [r3, #0]
 801cfaa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801cfae:	681b      	ldr	r3, [r3, #0]
 801cfb0:	687a      	ldr	r2, [r7, #4]
 801cfb2:	6812      	ldr	r2, [r2, #0]
 801cfb4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801cfb8:	f043 0301 	orr.w	r3, r3, #1
 801cfbc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801cfc4:	4618      	mov	r0, r3
 801cfc6:	f7ed fdc2 	bl	800ab4e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	7adb      	ldrb	r3, [r3, #11]
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	d005      	beq.n	801cfde <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801cfd2:	4b05      	ldr	r3, [pc, #20]	@ (801cfe8 <HAL_PCDEx_LPM_Callback+0x98>)
 801cfd4:	691b      	ldr	r3, [r3, #16]
 801cfd6:	4a04      	ldr	r2, [pc, #16]	@ (801cfe8 <HAL_PCDEx_LPM_Callback+0x98>)
 801cfd8:	f043 0306 	orr.w	r3, r3, #6
 801cfdc:	6113      	str	r3, [r2, #16]
    break;
 801cfde:	bf00      	nop
}
 801cfe0:	bf00      	nop
 801cfe2:	3708      	adds	r7, #8
 801cfe4:	46bd      	mov	sp, r7
 801cfe6:	bd80      	pop	{r7, pc}
 801cfe8:	e000ed00 	.word	0xe000ed00

0801cfec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801cfec:	b580      	push	{r7, lr}
 801cfee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801cff0:	f7e4 fbb2 	bl	8001758 <SystemClock_Config>
}
 801cff4:	bf00      	nop
 801cff6:	bd80      	pop	{r7, pc}

0801cff8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801cff8:	b480      	push	{r7}
 801cffa:	b085      	sub	sp, #20
 801cffc:	af00      	add	r7, sp, #0
 801cffe:	4603      	mov	r3, r0
 801d000:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d002:	2300      	movs	r3, #0
 801d004:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801d006:	79fb      	ldrb	r3, [r7, #7]
 801d008:	2b03      	cmp	r3, #3
 801d00a:	d817      	bhi.n	801d03c <USBD_Get_USB_Status+0x44>
 801d00c:	a201      	add	r2, pc, #4	@ (adr r2, 801d014 <USBD_Get_USB_Status+0x1c>)
 801d00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d012:	bf00      	nop
 801d014:	0801d025 	.word	0x0801d025
 801d018:	0801d02b 	.word	0x0801d02b
 801d01c:	0801d031 	.word	0x0801d031
 801d020:	0801d037 	.word	0x0801d037
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d024:	2300      	movs	r3, #0
 801d026:	73fb      	strb	r3, [r7, #15]
    break;
 801d028:	e00b      	b.n	801d042 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d02a:	2303      	movs	r3, #3
 801d02c:	73fb      	strb	r3, [r7, #15]
    break;
 801d02e:	e008      	b.n	801d042 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d030:	2301      	movs	r3, #1
 801d032:	73fb      	strb	r3, [r7, #15]
    break;
 801d034:	e005      	b.n	801d042 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d036:	2303      	movs	r3, #3
 801d038:	73fb      	strb	r3, [r7, #15]
    break;
 801d03a:	e002      	b.n	801d042 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801d03c:	2303      	movs	r3, #3
 801d03e:	73fb      	strb	r3, [r7, #15]
    break;
 801d040:	bf00      	nop
  }
  return usb_status;
 801d042:	7bfb      	ldrb	r3, [r7, #15]
}
 801d044:	4618      	mov	r0, r3
 801d046:	3714      	adds	r7, #20
 801d048:	46bd      	mov	sp, r7
 801d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d04e:	4770      	bx	lr

0801d050 <malloc>:
 801d050:	4b02      	ldr	r3, [pc, #8]	@ (801d05c <malloc+0xc>)
 801d052:	4601      	mov	r1, r0
 801d054:	6818      	ldr	r0, [r3, #0]
 801d056:	f000 b82d 	b.w	801d0b4 <_malloc_r>
 801d05a:	bf00      	nop
 801d05c:	2000013c 	.word	0x2000013c

0801d060 <free>:
 801d060:	4b02      	ldr	r3, [pc, #8]	@ (801d06c <free+0xc>)
 801d062:	4601      	mov	r1, r0
 801d064:	6818      	ldr	r0, [r3, #0]
 801d066:	f000 bb75 	b.w	801d754 <_free_r>
 801d06a:	bf00      	nop
 801d06c:	2000013c 	.word	0x2000013c

0801d070 <sbrk_aligned>:
 801d070:	b570      	push	{r4, r5, r6, lr}
 801d072:	4e0f      	ldr	r6, [pc, #60]	@ (801d0b0 <sbrk_aligned+0x40>)
 801d074:	460c      	mov	r4, r1
 801d076:	6831      	ldr	r1, [r6, #0]
 801d078:	4605      	mov	r5, r0
 801d07a:	b911      	cbnz	r1, 801d082 <sbrk_aligned+0x12>
 801d07c:	f000 faf4 	bl	801d668 <_sbrk_r>
 801d080:	6030      	str	r0, [r6, #0]
 801d082:	4621      	mov	r1, r4
 801d084:	4628      	mov	r0, r5
 801d086:	f000 faef 	bl	801d668 <_sbrk_r>
 801d08a:	1c43      	adds	r3, r0, #1
 801d08c:	d103      	bne.n	801d096 <sbrk_aligned+0x26>
 801d08e:	f04f 34ff 	mov.w	r4, #4294967295
 801d092:	4620      	mov	r0, r4
 801d094:	bd70      	pop	{r4, r5, r6, pc}
 801d096:	1cc4      	adds	r4, r0, #3
 801d098:	f024 0403 	bic.w	r4, r4, #3
 801d09c:	42a0      	cmp	r0, r4
 801d09e:	d0f8      	beq.n	801d092 <sbrk_aligned+0x22>
 801d0a0:	1a21      	subs	r1, r4, r0
 801d0a2:	4628      	mov	r0, r5
 801d0a4:	f000 fae0 	bl	801d668 <_sbrk_r>
 801d0a8:	3001      	adds	r0, #1
 801d0aa:	d1f2      	bne.n	801d092 <sbrk_aligned+0x22>
 801d0ac:	e7ef      	b.n	801d08e <sbrk_aligned+0x1e>
 801d0ae:	bf00      	nop
 801d0b0:	2000ff78 	.word	0x2000ff78

0801d0b4 <_malloc_r>:
 801d0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d0b8:	1ccd      	adds	r5, r1, #3
 801d0ba:	f025 0503 	bic.w	r5, r5, #3
 801d0be:	3508      	adds	r5, #8
 801d0c0:	2d0c      	cmp	r5, #12
 801d0c2:	bf38      	it	cc
 801d0c4:	250c      	movcc	r5, #12
 801d0c6:	2d00      	cmp	r5, #0
 801d0c8:	4606      	mov	r6, r0
 801d0ca:	db01      	blt.n	801d0d0 <_malloc_r+0x1c>
 801d0cc:	42a9      	cmp	r1, r5
 801d0ce:	d904      	bls.n	801d0da <_malloc_r+0x26>
 801d0d0:	230c      	movs	r3, #12
 801d0d2:	6033      	str	r3, [r6, #0]
 801d0d4:	2000      	movs	r0, #0
 801d0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d0da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d1b0 <_malloc_r+0xfc>
 801d0de:	f000 f869 	bl	801d1b4 <__malloc_lock>
 801d0e2:	f8d8 3000 	ldr.w	r3, [r8]
 801d0e6:	461c      	mov	r4, r3
 801d0e8:	bb44      	cbnz	r4, 801d13c <_malloc_r+0x88>
 801d0ea:	4629      	mov	r1, r5
 801d0ec:	4630      	mov	r0, r6
 801d0ee:	f7ff ffbf 	bl	801d070 <sbrk_aligned>
 801d0f2:	1c43      	adds	r3, r0, #1
 801d0f4:	4604      	mov	r4, r0
 801d0f6:	d158      	bne.n	801d1aa <_malloc_r+0xf6>
 801d0f8:	f8d8 4000 	ldr.w	r4, [r8]
 801d0fc:	4627      	mov	r7, r4
 801d0fe:	2f00      	cmp	r7, #0
 801d100:	d143      	bne.n	801d18a <_malloc_r+0xd6>
 801d102:	2c00      	cmp	r4, #0
 801d104:	d04b      	beq.n	801d19e <_malloc_r+0xea>
 801d106:	6823      	ldr	r3, [r4, #0]
 801d108:	4639      	mov	r1, r7
 801d10a:	4630      	mov	r0, r6
 801d10c:	eb04 0903 	add.w	r9, r4, r3
 801d110:	f000 faaa 	bl	801d668 <_sbrk_r>
 801d114:	4581      	cmp	r9, r0
 801d116:	d142      	bne.n	801d19e <_malloc_r+0xea>
 801d118:	6821      	ldr	r1, [r4, #0]
 801d11a:	1a6d      	subs	r5, r5, r1
 801d11c:	4629      	mov	r1, r5
 801d11e:	4630      	mov	r0, r6
 801d120:	f7ff ffa6 	bl	801d070 <sbrk_aligned>
 801d124:	3001      	adds	r0, #1
 801d126:	d03a      	beq.n	801d19e <_malloc_r+0xea>
 801d128:	6823      	ldr	r3, [r4, #0]
 801d12a:	442b      	add	r3, r5
 801d12c:	6023      	str	r3, [r4, #0]
 801d12e:	f8d8 3000 	ldr.w	r3, [r8]
 801d132:	685a      	ldr	r2, [r3, #4]
 801d134:	bb62      	cbnz	r2, 801d190 <_malloc_r+0xdc>
 801d136:	f8c8 7000 	str.w	r7, [r8]
 801d13a:	e00f      	b.n	801d15c <_malloc_r+0xa8>
 801d13c:	6822      	ldr	r2, [r4, #0]
 801d13e:	1b52      	subs	r2, r2, r5
 801d140:	d420      	bmi.n	801d184 <_malloc_r+0xd0>
 801d142:	2a0b      	cmp	r2, #11
 801d144:	d917      	bls.n	801d176 <_malloc_r+0xc2>
 801d146:	1961      	adds	r1, r4, r5
 801d148:	42a3      	cmp	r3, r4
 801d14a:	6025      	str	r5, [r4, #0]
 801d14c:	bf18      	it	ne
 801d14e:	6059      	strne	r1, [r3, #4]
 801d150:	6863      	ldr	r3, [r4, #4]
 801d152:	bf08      	it	eq
 801d154:	f8c8 1000 	streq.w	r1, [r8]
 801d158:	5162      	str	r2, [r4, r5]
 801d15a:	604b      	str	r3, [r1, #4]
 801d15c:	4630      	mov	r0, r6
 801d15e:	f000 f82f 	bl	801d1c0 <__malloc_unlock>
 801d162:	f104 000b 	add.w	r0, r4, #11
 801d166:	1d23      	adds	r3, r4, #4
 801d168:	f020 0007 	bic.w	r0, r0, #7
 801d16c:	1ac2      	subs	r2, r0, r3
 801d16e:	bf1c      	itt	ne
 801d170:	1a1b      	subne	r3, r3, r0
 801d172:	50a3      	strne	r3, [r4, r2]
 801d174:	e7af      	b.n	801d0d6 <_malloc_r+0x22>
 801d176:	6862      	ldr	r2, [r4, #4]
 801d178:	42a3      	cmp	r3, r4
 801d17a:	bf0c      	ite	eq
 801d17c:	f8c8 2000 	streq.w	r2, [r8]
 801d180:	605a      	strne	r2, [r3, #4]
 801d182:	e7eb      	b.n	801d15c <_malloc_r+0xa8>
 801d184:	4623      	mov	r3, r4
 801d186:	6864      	ldr	r4, [r4, #4]
 801d188:	e7ae      	b.n	801d0e8 <_malloc_r+0x34>
 801d18a:	463c      	mov	r4, r7
 801d18c:	687f      	ldr	r7, [r7, #4]
 801d18e:	e7b6      	b.n	801d0fe <_malloc_r+0x4a>
 801d190:	461a      	mov	r2, r3
 801d192:	685b      	ldr	r3, [r3, #4]
 801d194:	42a3      	cmp	r3, r4
 801d196:	d1fb      	bne.n	801d190 <_malloc_r+0xdc>
 801d198:	2300      	movs	r3, #0
 801d19a:	6053      	str	r3, [r2, #4]
 801d19c:	e7de      	b.n	801d15c <_malloc_r+0xa8>
 801d19e:	230c      	movs	r3, #12
 801d1a0:	6033      	str	r3, [r6, #0]
 801d1a2:	4630      	mov	r0, r6
 801d1a4:	f000 f80c 	bl	801d1c0 <__malloc_unlock>
 801d1a8:	e794      	b.n	801d0d4 <_malloc_r+0x20>
 801d1aa:	6005      	str	r5, [r0, #0]
 801d1ac:	e7d6      	b.n	801d15c <_malloc_r+0xa8>
 801d1ae:	bf00      	nop
 801d1b0:	2000ff7c 	.word	0x2000ff7c

0801d1b4 <__malloc_lock>:
 801d1b4:	4801      	ldr	r0, [pc, #4]	@ (801d1bc <__malloc_lock+0x8>)
 801d1b6:	f000 ba9e 	b.w	801d6f6 <__retarget_lock_acquire_recursive>
 801d1ba:	bf00      	nop
 801d1bc:	200100c0 	.word	0x200100c0

0801d1c0 <__malloc_unlock>:
 801d1c0:	4801      	ldr	r0, [pc, #4]	@ (801d1c8 <__malloc_unlock+0x8>)
 801d1c2:	f000 ba99 	b.w	801d6f8 <__retarget_lock_release_recursive>
 801d1c6:	bf00      	nop
 801d1c8:	200100c0 	.word	0x200100c0

0801d1cc <rand>:
 801d1cc:	4b16      	ldr	r3, [pc, #88]	@ (801d228 <rand+0x5c>)
 801d1ce:	b510      	push	{r4, lr}
 801d1d0:	681c      	ldr	r4, [r3, #0]
 801d1d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d1d4:	b9b3      	cbnz	r3, 801d204 <rand+0x38>
 801d1d6:	2018      	movs	r0, #24
 801d1d8:	f7ff ff3a 	bl	801d050 <malloc>
 801d1dc:	4602      	mov	r2, r0
 801d1de:	6320      	str	r0, [r4, #48]	@ 0x30
 801d1e0:	b920      	cbnz	r0, 801d1ec <rand+0x20>
 801d1e2:	4b12      	ldr	r3, [pc, #72]	@ (801d22c <rand+0x60>)
 801d1e4:	4812      	ldr	r0, [pc, #72]	@ (801d230 <rand+0x64>)
 801d1e6:	2152      	movs	r1, #82	@ 0x52
 801d1e8:	f000 fa96 	bl	801d718 <__assert_func>
 801d1ec:	4911      	ldr	r1, [pc, #68]	@ (801d234 <rand+0x68>)
 801d1ee:	4b12      	ldr	r3, [pc, #72]	@ (801d238 <rand+0x6c>)
 801d1f0:	e9c0 1300 	strd	r1, r3, [r0]
 801d1f4:	4b11      	ldr	r3, [pc, #68]	@ (801d23c <rand+0x70>)
 801d1f6:	6083      	str	r3, [r0, #8]
 801d1f8:	230b      	movs	r3, #11
 801d1fa:	8183      	strh	r3, [r0, #12]
 801d1fc:	2100      	movs	r1, #0
 801d1fe:	2001      	movs	r0, #1
 801d200:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d204:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d206:	480e      	ldr	r0, [pc, #56]	@ (801d240 <rand+0x74>)
 801d208:	690b      	ldr	r3, [r1, #16]
 801d20a:	694c      	ldr	r4, [r1, #20]
 801d20c:	4a0d      	ldr	r2, [pc, #52]	@ (801d244 <rand+0x78>)
 801d20e:	4358      	muls	r0, r3
 801d210:	fb02 0004 	mla	r0, r2, r4, r0
 801d214:	fba3 3202 	umull	r3, r2, r3, r2
 801d218:	3301      	adds	r3, #1
 801d21a:	eb40 0002 	adc.w	r0, r0, r2
 801d21e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d222:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801d226:	bd10      	pop	{r4, pc}
 801d228:	2000013c 	.word	0x2000013c
 801d22c:	080334f0 	.word	0x080334f0
 801d230:	08033507 	.word	0x08033507
 801d234:	abcd330e 	.word	0xabcd330e
 801d238:	e66d1234 	.word	0xe66d1234
 801d23c:	0005deec 	.word	0x0005deec
 801d240:	5851f42d 	.word	0x5851f42d
 801d244:	4c957f2d 	.word	0x4c957f2d

0801d248 <std>:
 801d248:	2300      	movs	r3, #0
 801d24a:	b510      	push	{r4, lr}
 801d24c:	4604      	mov	r4, r0
 801d24e:	e9c0 3300 	strd	r3, r3, [r0]
 801d252:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d256:	6083      	str	r3, [r0, #8]
 801d258:	8181      	strh	r1, [r0, #12]
 801d25a:	6643      	str	r3, [r0, #100]	@ 0x64
 801d25c:	81c2      	strh	r2, [r0, #14]
 801d25e:	6183      	str	r3, [r0, #24]
 801d260:	4619      	mov	r1, r3
 801d262:	2208      	movs	r2, #8
 801d264:	305c      	adds	r0, #92	@ 0x5c
 801d266:	f000 f952 	bl	801d50e <memset>
 801d26a:	4b0d      	ldr	r3, [pc, #52]	@ (801d2a0 <std+0x58>)
 801d26c:	6263      	str	r3, [r4, #36]	@ 0x24
 801d26e:	4b0d      	ldr	r3, [pc, #52]	@ (801d2a4 <std+0x5c>)
 801d270:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d272:	4b0d      	ldr	r3, [pc, #52]	@ (801d2a8 <std+0x60>)
 801d274:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d276:	4b0d      	ldr	r3, [pc, #52]	@ (801d2ac <std+0x64>)
 801d278:	6323      	str	r3, [r4, #48]	@ 0x30
 801d27a:	4b0d      	ldr	r3, [pc, #52]	@ (801d2b0 <std+0x68>)
 801d27c:	6224      	str	r4, [r4, #32]
 801d27e:	429c      	cmp	r4, r3
 801d280:	d006      	beq.n	801d290 <std+0x48>
 801d282:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d286:	4294      	cmp	r4, r2
 801d288:	d002      	beq.n	801d290 <std+0x48>
 801d28a:	33d0      	adds	r3, #208	@ 0xd0
 801d28c:	429c      	cmp	r4, r3
 801d28e:	d105      	bne.n	801d29c <std+0x54>
 801d290:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d298:	f000 ba2c 	b.w	801d6f4 <__retarget_lock_init_recursive>
 801d29c:	bd10      	pop	{r4, pc}
 801d29e:	bf00      	nop
 801d2a0:	0801d435 	.word	0x0801d435
 801d2a4:	0801d457 	.word	0x0801d457
 801d2a8:	0801d48f 	.word	0x0801d48f
 801d2ac:	0801d4b3 	.word	0x0801d4b3
 801d2b0:	2000ff80 	.word	0x2000ff80

0801d2b4 <stdio_exit_handler>:
 801d2b4:	4a02      	ldr	r2, [pc, #8]	@ (801d2c0 <stdio_exit_handler+0xc>)
 801d2b6:	4903      	ldr	r1, [pc, #12]	@ (801d2c4 <stdio_exit_handler+0x10>)
 801d2b8:	4803      	ldr	r0, [pc, #12]	@ (801d2c8 <stdio_exit_handler+0x14>)
 801d2ba:	f000 b869 	b.w	801d390 <_fwalk_sglue>
 801d2be:	bf00      	nop
 801d2c0:	20000130 	.word	0x20000130
 801d2c4:	0801e13d 	.word	0x0801e13d
 801d2c8:	20000140 	.word	0x20000140

0801d2cc <cleanup_stdio>:
 801d2cc:	6841      	ldr	r1, [r0, #4]
 801d2ce:	4b0c      	ldr	r3, [pc, #48]	@ (801d300 <cleanup_stdio+0x34>)
 801d2d0:	4299      	cmp	r1, r3
 801d2d2:	b510      	push	{r4, lr}
 801d2d4:	4604      	mov	r4, r0
 801d2d6:	d001      	beq.n	801d2dc <cleanup_stdio+0x10>
 801d2d8:	f000 ff30 	bl	801e13c <_fflush_r>
 801d2dc:	68a1      	ldr	r1, [r4, #8]
 801d2de:	4b09      	ldr	r3, [pc, #36]	@ (801d304 <cleanup_stdio+0x38>)
 801d2e0:	4299      	cmp	r1, r3
 801d2e2:	d002      	beq.n	801d2ea <cleanup_stdio+0x1e>
 801d2e4:	4620      	mov	r0, r4
 801d2e6:	f000 ff29 	bl	801e13c <_fflush_r>
 801d2ea:	68e1      	ldr	r1, [r4, #12]
 801d2ec:	4b06      	ldr	r3, [pc, #24]	@ (801d308 <cleanup_stdio+0x3c>)
 801d2ee:	4299      	cmp	r1, r3
 801d2f0:	d004      	beq.n	801d2fc <cleanup_stdio+0x30>
 801d2f2:	4620      	mov	r0, r4
 801d2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d2f8:	f000 bf20 	b.w	801e13c <_fflush_r>
 801d2fc:	bd10      	pop	{r4, pc}
 801d2fe:	bf00      	nop
 801d300:	2000ff80 	.word	0x2000ff80
 801d304:	2000ffe8 	.word	0x2000ffe8
 801d308:	20010050 	.word	0x20010050

0801d30c <global_stdio_init.part.0>:
 801d30c:	b510      	push	{r4, lr}
 801d30e:	4b0b      	ldr	r3, [pc, #44]	@ (801d33c <global_stdio_init.part.0+0x30>)
 801d310:	4c0b      	ldr	r4, [pc, #44]	@ (801d340 <global_stdio_init.part.0+0x34>)
 801d312:	4a0c      	ldr	r2, [pc, #48]	@ (801d344 <global_stdio_init.part.0+0x38>)
 801d314:	601a      	str	r2, [r3, #0]
 801d316:	4620      	mov	r0, r4
 801d318:	2200      	movs	r2, #0
 801d31a:	2104      	movs	r1, #4
 801d31c:	f7ff ff94 	bl	801d248 <std>
 801d320:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d324:	2201      	movs	r2, #1
 801d326:	2109      	movs	r1, #9
 801d328:	f7ff ff8e 	bl	801d248 <std>
 801d32c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d330:	2202      	movs	r2, #2
 801d332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d336:	2112      	movs	r1, #18
 801d338:	f7ff bf86 	b.w	801d248 <std>
 801d33c:	200100b8 	.word	0x200100b8
 801d340:	2000ff80 	.word	0x2000ff80
 801d344:	0801d2b5 	.word	0x0801d2b5

0801d348 <__sfp_lock_acquire>:
 801d348:	4801      	ldr	r0, [pc, #4]	@ (801d350 <__sfp_lock_acquire+0x8>)
 801d34a:	f000 b9d4 	b.w	801d6f6 <__retarget_lock_acquire_recursive>
 801d34e:	bf00      	nop
 801d350:	200100c1 	.word	0x200100c1

0801d354 <__sfp_lock_release>:
 801d354:	4801      	ldr	r0, [pc, #4]	@ (801d35c <__sfp_lock_release+0x8>)
 801d356:	f000 b9cf 	b.w	801d6f8 <__retarget_lock_release_recursive>
 801d35a:	bf00      	nop
 801d35c:	200100c1 	.word	0x200100c1

0801d360 <__sinit>:
 801d360:	b510      	push	{r4, lr}
 801d362:	4604      	mov	r4, r0
 801d364:	f7ff fff0 	bl	801d348 <__sfp_lock_acquire>
 801d368:	6a23      	ldr	r3, [r4, #32]
 801d36a:	b11b      	cbz	r3, 801d374 <__sinit+0x14>
 801d36c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d370:	f7ff bff0 	b.w	801d354 <__sfp_lock_release>
 801d374:	4b04      	ldr	r3, [pc, #16]	@ (801d388 <__sinit+0x28>)
 801d376:	6223      	str	r3, [r4, #32]
 801d378:	4b04      	ldr	r3, [pc, #16]	@ (801d38c <__sinit+0x2c>)
 801d37a:	681b      	ldr	r3, [r3, #0]
 801d37c:	2b00      	cmp	r3, #0
 801d37e:	d1f5      	bne.n	801d36c <__sinit+0xc>
 801d380:	f7ff ffc4 	bl	801d30c <global_stdio_init.part.0>
 801d384:	e7f2      	b.n	801d36c <__sinit+0xc>
 801d386:	bf00      	nop
 801d388:	0801d2cd 	.word	0x0801d2cd
 801d38c:	200100b8 	.word	0x200100b8

0801d390 <_fwalk_sglue>:
 801d390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d394:	4607      	mov	r7, r0
 801d396:	4688      	mov	r8, r1
 801d398:	4614      	mov	r4, r2
 801d39a:	2600      	movs	r6, #0
 801d39c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d3a0:	f1b9 0901 	subs.w	r9, r9, #1
 801d3a4:	d505      	bpl.n	801d3b2 <_fwalk_sglue+0x22>
 801d3a6:	6824      	ldr	r4, [r4, #0]
 801d3a8:	2c00      	cmp	r4, #0
 801d3aa:	d1f7      	bne.n	801d39c <_fwalk_sglue+0xc>
 801d3ac:	4630      	mov	r0, r6
 801d3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d3b2:	89ab      	ldrh	r3, [r5, #12]
 801d3b4:	2b01      	cmp	r3, #1
 801d3b6:	d907      	bls.n	801d3c8 <_fwalk_sglue+0x38>
 801d3b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d3bc:	3301      	adds	r3, #1
 801d3be:	d003      	beq.n	801d3c8 <_fwalk_sglue+0x38>
 801d3c0:	4629      	mov	r1, r5
 801d3c2:	4638      	mov	r0, r7
 801d3c4:	47c0      	blx	r8
 801d3c6:	4306      	orrs	r6, r0
 801d3c8:	3568      	adds	r5, #104	@ 0x68
 801d3ca:	e7e9      	b.n	801d3a0 <_fwalk_sglue+0x10>

0801d3cc <iprintf>:
 801d3cc:	b40f      	push	{r0, r1, r2, r3}
 801d3ce:	b507      	push	{r0, r1, r2, lr}
 801d3d0:	4906      	ldr	r1, [pc, #24]	@ (801d3ec <iprintf+0x20>)
 801d3d2:	ab04      	add	r3, sp, #16
 801d3d4:	6808      	ldr	r0, [r1, #0]
 801d3d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d3da:	6881      	ldr	r1, [r0, #8]
 801d3dc:	9301      	str	r3, [sp, #4]
 801d3de:	f000 fb85 	bl	801daec <_vfiprintf_r>
 801d3e2:	b003      	add	sp, #12
 801d3e4:	f85d eb04 	ldr.w	lr, [sp], #4
 801d3e8:	b004      	add	sp, #16
 801d3ea:	4770      	bx	lr
 801d3ec:	2000013c 	.word	0x2000013c

0801d3f0 <siprintf>:
 801d3f0:	b40e      	push	{r1, r2, r3}
 801d3f2:	b510      	push	{r4, lr}
 801d3f4:	b09d      	sub	sp, #116	@ 0x74
 801d3f6:	ab1f      	add	r3, sp, #124	@ 0x7c
 801d3f8:	9002      	str	r0, [sp, #8]
 801d3fa:	9006      	str	r0, [sp, #24]
 801d3fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801d400:	480a      	ldr	r0, [pc, #40]	@ (801d42c <siprintf+0x3c>)
 801d402:	9107      	str	r1, [sp, #28]
 801d404:	9104      	str	r1, [sp, #16]
 801d406:	490a      	ldr	r1, [pc, #40]	@ (801d430 <siprintf+0x40>)
 801d408:	f853 2b04 	ldr.w	r2, [r3], #4
 801d40c:	9105      	str	r1, [sp, #20]
 801d40e:	2400      	movs	r4, #0
 801d410:	a902      	add	r1, sp, #8
 801d412:	6800      	ldr	r0, [r0, #0]
 801d414:	9301      	str	r3, [sp, #4]
 801d416:	941b      	str	r4, [sp, #108]	@ 0x6c
 801d418:	f000 fa42 	bl	801d8a0 <_svfiprintf_r>
 801d41c:	9b02      	ldr	r3, [sp, #8]
 801d41e:	701c      	strb	r4, [r3, #0]
 801d420:	b01d      	add	sp, #116	@ 0x74
 801d422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d426:	b003      	add	sp, #12
 801d428:	4770      	bx	lr
 801d42a:	bf00      	nop
 801d42c:	2000013c 	.word	0x2000013c
 801d430:	ffff0208 	.word	0xffff0208

0801d434 <__sread>:
 801d434:	b510      	push	{r4, lr}
 801d436:	460c      	mov	r4, r1
 801d438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d43c:	f000 f902 	bl	801d644 <_read_r>
 801d440:	2800      	cmp	r0, #0
 801d442:	bfab      	itete	ge
 801d444:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d446:	89a3      	ldrhlt	r3, [r4, #12]
 801d448:	181b      	addge	r3, r3, r0
 801d44a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d44e:	bfac      	ite	ge
 801d450:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d452:	81a3      	strhlt	r3, [r4, #12]
 801d454:	bd10      	pop	{r4, pc}

0801d456 <__swrite>:
 801d456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d45a:	461f      	mov	r7, r3
 801d45c:	898b      	ldrh	r3, [r1, #12]
 801d45e:	05db      	lsls	r3, r3, #23
 801d460:	4605      	mov	r5, r0
 801d462:	460c      	mov	r4, r1
 801d464:	4616      	mov	r6, r2
 801d466:	d505      	bpl.n	801d474 <__swrite+0x1e>
 801d468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d46c:	2302      	movs	r3, #2
 801d46e:	2200      	movs	r2, #0
 801d470:	f000 f8d6 	bl	801d620 <_lseek_r>
 801d474:	89a3      	ldrh	r3, [r4, #12]
 801d476:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d47a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d47e:	81a3      	strh	r3, [r4, #12]
 801d480:	4632      	mov	r2, r6
 801d482:	463b      	mov	r3, r7
 801d484:	4628      	mov	r0, r5
 801d486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d48a:	f000 b8fd 	b.w	801d688 <_write_r>

0801d48e <__sseek>:
 801d48e:	b510      	push	{r4, lr}
 801d490:	460c      	mov	r4, r1
 801d492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d496:	f000 f8c3 	bl	801d620 <_lseek_r>
 801d49a:	1c43      	adds	r3, r0, #1
 801d49c:	89a3      	ldrh	r3, [r4, #12]
 801d49e:	bf15      	itete	ne
 801d4a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d4a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d4a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d4aa:	81a3      	strheq	r3, [r4, #12]
 801d4ac:	bf18      	it	ne
 801d4ae:	81a3      	strhne	r3, [r4, #12]
 801d4b0:	bd10      	pop	{r4, pc}

0801d4b2 <__sclose>:
 801d4b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d4b6:	f000 b845 	b.w	801d544 <_close_r>

0801d4ba <memcmp>:
 801d4ba:	b510      	push	{r4, lr}
 801d4bc:	3901      	subs	r1, #1
 801d4be:	4402      	add	r2, r0
 801d4c0:	4290      	cmp	r0, r2
 801d4c2:	d101      	bne.n	801d4c8 <memcmp+0xe>
 801d4c4:	2000      	movs	r0, #0
 801d4c6:	e005      	b.n	801d4d4 <memcmp+0x1a>
 801d4c8:	7803      	ldrb	r3, [r0, #0]
 801d4ca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d4ce:	42a3      	cmp	r3, r4
 801d4d0:	d001      	beq.n	801d4d6 <memcmp+0x1c>
 801d4d2:	1b18      	subs	r0, r3, r4
 801d4d4:	bd10      	pop	{r4, pc}
 801d4d6:	3001      	adds	r0, #1
 801d4d8:	e7f2      	b.n	801d4c0 <memcmp+0x6>

0801d4da <memmove>:
 801d4da:	4288      	cmp	r0, r1
 801d4dc:	b510      	push	{r4, lr}
 801d4de:	eb01 0402 	add.w	r4, r1, r2
 801d4e2:	d902      	bls.n	801d4ea <memmove+0x10>
 801d4e4:	4284      	cmp	r4, r0
 801d4e6:	4623      	mov	r3, r4
 801d4e8:	d807      	bhi.n	801d4fa <memmove+0x20>
 801d4ea:	1e43      	subs	r3, r0, #1
 801d4ec:	42a1      	cmp	r1, r4
 801d4ee:	d008      	beq.n	801d502 <memmove+0x28>
 801d4f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d4f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d4f8:	e7f8      	b.n	801d4ec <memmove+0x12>
 801d4fa:	4402      	add	r2, r0
 801d4fc:	4601      	mov	r1, r0
 801d4fe:	428a      	cmp	r2, r1
 801d500:	d100      	bne.n	801d504 <memmove+0x2a>
 801d502:	bd10      	pop	{r4, pc}
 801d504:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d508:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d50c:	e7f7      	b.n	801d4fe <memmove+0x24>

0801d50e <memset>:
 801d50e:	4402      	add	r2, r0
 801d510:	4603      	mov	r3, r0
 801d512:	4293      	cmp	r3, r2
 801d514:	d100      	bne.n	801d518 <memset+0xa>
 801d516:	4770      	bx	lr
 801d518:	f803 1b01 	strb.w	r1, [r3], #1
 801d51c:	e7f9      	b.n	801d512 <memset+0x4>

0801d51e <strncmp>:
 801d51e:	b510      	push	{r4, lr}
 801d520:	b16a      	cbz	r2, 801d53e <strncmp+0x20>
 801d522:	3901      	subs	r1, #1
 801d524:	1884      	adds	r4, r0, r2
 801d526:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d52a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801d52e:	429a      	cmp	r2, r3
 801d530:	d103      	bne.n	801d53a <strncmp+0x1c>
 801d532:	42a0      	cmp	r0, r4
 801d534:	d001      	beq.n	801d53a <strncmp+0x1c>
 801d536:	2a00      	cmp	r2, #0
 801d538:	d1f5      	bne.n	801d526 <strncmp+0x8>
 801d53a:	1ad0      	subs	r0, r2, r3
 801d53c:	bd10      	pop	{r4, pc}
 801d53e:	4610      	mov	r0, r2
 801d540:	e7fc      	b.n	801d53c <strncmp+0x1e>
	...

0801d544 <_close_r>:
 801d544:	b538      	push	{r3, r4, r5, lr}
 801d546:	4d06      	ldr	r5, [pc, #24]	@ (801d560 <_close_r+0x1c>)
 801d548:	2300      	movs	r3, #0
 801d54a:	4604      	mov	r4, r0
 801d54c:	4608      	mov	r0, r1
 801d54e:	602b      	str	r3, [r5, #0]
 801d550:	f7e4 fcd6 	bl	8001f00 <_close>
 801d554:	1c43      	adds	r3, r0, #1
 801d556:	d102      	bne.n	801d55e <_close_r+0x1a>
 801d558:	682b      	ldr	r3, [r5, #0]
 801d55a:	b103      	cbz	r3, 801d55e <_close_r+0x1a>
 801d55c:	6023      	str	r3, [r4, #0]
 801d55e:	bd38      	pop	{r3, r4, r5, pc}
 801d560:	200100bc 	.word	0x200100bc

0801d564 <_reclaim_reent>:
 801d564:	4b2d      	ldr	r3, [pc, #180]	@ (801d61c <_reclaim_reent+0xb8>)
 801d566:	681b      	ldr	r3, [r3, #0]
 801d568:	4283      	cmp	r3, r0
 801d56a:	b570      	push	{r4, r5, r6, lr}
 801d56c:	4604      	mov	r4, r0
 801d56e:	d053      	beq.n	801d618 <_reclaim_reent+0xb4>
 801d570:	69c3      	ldr	r3, [r0, #28]
 801d572:	b31b      	cbz	r3, 801d5bc <_reclaim_reent+0x58>
 801d574:	68db      	ldr	r3, [r3, #12]
 801d576:	b163      	cbz	r3, 801d592 <_reclaim_reent+0x2e>
 801d578:	2500      	movs	r5, #0
 801d57a:	69e3      	ldr	r3, [r4, #28]
 801d57c:	68db      	ldr	r3, [r3, #12]
 801d57e:	5959      	ldr	r1, [r3, r5]
 801d580:	b9b1      	cbnz	r1, 801d5b0 <_reclaim_reent+0x4c>
 801d582:	3504      	adds	r5, #4
 801d584:	2d80      	cmp	r5, #128	@ 0x80
 801d586:	d1f8      	bne.n	801d57a <_reclaim_reent+0x16>
 801d588:	69e3      	ldr	r3, [r4, #28]
 801d58a:	4620      	mov	r0, r4
 801d58c:	68d9      	ldr	r1, [r3, #12]
 801d58e:	f000 f8e1 	bl	801d754 <_free_r>
 801d592:	69e3      	ldr	r3, [r4, #28]
 801d594:	6819      	ldr	r1, [r3, #0]
 801d596:	b111      	cbz	r1, 801d59e <_reclaim_reent+0x3a>
 801d598:	4620      	mov	r0, r4
 801d59a:	f000 f8db 	bl	801d754 <_free_r>
 801d59e:	69e3      	ldr	r3, [r4, #28]
 801d5a0:	689d      	ldr	r5, [r3, #8]
 801d5a2:	b15d      	cbz	r5, 801d5bc <_reclaim_reent+0x58>
 801d5a4:	4629      	mov	r1, r5
 801d5a6:	4620      	mov	r0, r4
 801d5a8:	682d      	ldr	r5, [r5, #0]
 801d5aa:	f000 f8d3 	bl	801d754 <_free_r>
 801d5ae:	e7f8      	b.n	801d5a2 <_reclaim_reent+0x3e>
 801d5b0:	680e      	ldr	r6, [r1, #0]
 801d5b2:	4620      	mov	r0, r4
 801d5b4:	f000 f8ce 	bl	801d754 <_free_r>
 801d5b8:	4631      	mov	r1, r6
 801d5ba:	e7e1      	b.n	801d580 <_reclaim_reent+0x1c>
 801d5bc:	6961      	ldr	r1, [r4, #20]
 801d5be:	b111      	cbz	r1, 801d5c6 <_reclaim_reent+0x62>
 801d5c0:	4620      	mov	r0, r4
 801d5c2:	f000 f8c7 	bl	801d754 <_free_r>
 801d5c6:	69e1      	ldr	r1, [r4, #28]
 801d5c8:	b111      	cbz	r1, 801d5d0 <_reclaim_reent+0x6c>
 801d5ca:	4620      	mov	r0, r4
 801d5cc:	f000 f8c2 	bl	801d754 <_free_r>
 801d5d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d5d2:	b111      	cbz	r1, 801d5da <_reclaim_reent+0x76>
 801d5d4:	4620      	mov	r0, r4
 801d5d6:	f000 f8bd 	bl	801d754 <_free_r>
 801d5da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d5dc:	b111      	cbz	r1, 801d5e4 <_reclaim_reent+0x80>
 801d5de:	4620      	mov	r0, r4
 801d5e0:	f000 f8b8 	bl	801d754 <_free_r>
 801d5e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801d5e6:	b111      	cbz	r1, 801d5ee <_reclaim_reent+0x8a>
 801d5e8:	4620      	mov	r0, r4
 801d5ea:	f000 f8b3 	bl	801d754 <_free_r>
 801d5ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801d5f0:	b111      	cbz	r1, 801d5f8 <_reclaim_reent+0x94>
 801d5f2:	4620      	mov	r0, r4
 801d5f4:	f000 f8ae 	bl	801d754 <_free_r>
 801d5f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801d5fa:	b111      	cbz	r1, 801d602 <_reclaim_reent+0x9e>
 801d5fc:	4620      	mov	r0, r4
 801d5fe:	f000 f8a9 	bl	801d754 <_free_r>
 801d602:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801d604:	b111      	cbz	r1, 801d60c <_reclaim_reent+0xa8>
 801d606:	4620      	mov	r0, r4
 801d608:	f000 f8a4 	bl	801d754 <_free_r>
 801d60c:	6a23      	ldr	r3, [r4, #32]
 801d60e:	b11b      	cbz	r3, 801d618 <_reclaim_reent+0xb4>
 801d610:	4620      	mov	r0, r4
 801d612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d616:	4718      	bx	r3
 801d618:	bd70      	pop	{r4, r5, r6, pc}
 801d61a:	bf00      	nop
 801d61c:	2000013c 	.word	0x2000013c

0801d620 <_lseek_r>:
 801d620:	b538      	push	{r3, r4, r5, lr}
 801d622:	4d07      	ldr	r5, [pc, #28]	@ (801d640 <_lseek_r+0x20>)
 801d624:	4604      	mov	r4, r0
 801d626:	4608      	mov	r0, r1
 801d628:	4611      	mov	r1, r2
 801d62a:	2200      	movs	r2, #0
 801d62c:	602a      	str	r2, [r5, #0]
 801d62e:	461a      	mov	r2, r3
 801d630:	f7e4 fc8d 	bl	8001f4e <_lseek>
 801d634:	1c43      	adds	r3, r0, #1
 801d636:	d102      	bne.n	801d63e <_lseek_r+0x1e>
 801d638:	682b      	ldr	r3, [r5, #0]
 801d63a:	b103      	cbz	r3, 801d63e <_lseek_r+0x1e>
 801d63c:	6023      	str	r3, [r4, #0]
 801d63e:	bd38      	pop	{r3, r4, r5, pc}
 801d640:	200100bc 	.word	0x200100bc

0801d644 <_read_r>:
 801d644:	b538      	push	{r3, r4, r5, lr}
 801d646:	4d07      	ldr	r5, [pc, #28]	@ (801d664 <_read_r+0x20>)
 801d648:	4604      	mov	r4, r0
 801d64a:	4608      	mov	r0, r1
 801d64c:	4611      	mov	r1, r2
 801d64e:	2200      	movs	r2, #0
 801d650:	602a      	str	r2, [r5, #0]
 801d652:	461a      	mov	r2, r3
 801d654:	f7e4 fc1b 	bl	8001e8e <_read>
 801d658:	1c43      	adds	r3, r0, #1
 801d65a:	d102      	bne.n	801d662 <_read_r+0x1e>
 801d65c:	682b      	ldr	r3, [r5, #0]
 801d65e:	b103      	cbz	r3, 801d662 <_read_r+0x1e>
 801d660:	6023      	str	r3, [r4, #0]
 801d662:	bd38      	pop	{r3, r4, r5, pc}
 801d664:	200100bc 	.word	0x200100bc

0801d668 <_sbrk_r>:
 801d668:	b538      	push	{r3, r4, r5, lr}
 801d66a:	4d06      	ldr	r5, [pc, #24]	@ (801d684 <_sbrk_r+0x1c>)
 801d66c:	2300      	movs	r3, #0
 801d66e:	4604      	mov	r4, r0
 801d670:	4608      	mov	r0, r1
 801d672:	602b      	str	r3, [r5, #0]
 801d674:	f7e4 fc78 	bl	8001f68 <_sbrk>
 801d678:	1c43      	adds	r3, r0, #1
 801d67a:	d102      	bne.n	801d682 <_sbrk_r+0x1a>
 801d67c:	682b      	ldr	r3, [r5, #0]
 801d67e:	b103      	cbz	r3, 801d682 <_sbrk_r+0x1a>
 801d680:	6023      	str	r3, [r4, #0]
 801d682:	bd38      	pop	{r3, r4, r5, pc}
 801d684:	200100bc 	.word	0x200100bc

0801d688 <_write_r>:
 801d688:	b538      	push	{r3, r4, r5, lr}
 801d68a:	4d07      	ldr	r5, [pc, #28]	@ (801d6a8 <_write_r+0x20>)
 801d68c:	4604      	mov	r4, r0
 801d68e:	4608      	mov	r0, r1
 801d690:	4611      	mov	r1, r2
 801d692:	2200      	movs	r2, #0
 801d694:	602a      	str	r2, [r5, #0]
 801d696:	461a      	mov	r2, r3
 801d698:	f7e4 fc16 	bl	8001ec8 <_write>
 801d69c:	1c43      	adds	r3, r0, #1
 801d69e:	d102      	bne.n	801d6a6 <_write_r+0x1e>
 801d6a0:	682b      	ldr	r3, [r5, #0]
 801d6a2:	b103      	cbz	r3, 801d6a6 <_write_r+0x1e>
 801d6a4:	6023      	str	r3, [r4, #0]
 801d6a6:	bd38      	pop	{r3, r4, r5, pc}
 801d6a8:	200100bc 	.word	0x200100bc

0801d6ac <__libc_init_array>:
 801d6ac:	b570      	push	{r4, r5, r6, lr}
 801d6ae:	4d0d      	ldr	r5, [pc, #52]	@ (801d6e4 <__libc_init_array+0x38>)
 801d6b0:	4c0d      	ldr	r4, [pc, #52]	@ (801d6e8 <__libc_init_array+0x3c>)
 801d6b2:	1b64      	subs	r4, r4, r5
 801d6b4:	10a4      	asrs	r4, r4, #2
 801d6b6:	2600      	movs	r6, #0
 801d6b8:	42a6      	cmp	r6, r4
 801d6ba:	d109      	bne.n	801d6d0 <__libc_init_array+0x24>
 801d6bc:	4d0b      	ldr	r5, [pc, #44]	@ (801d6ec <__libc_init_array+0x40>)
 801d6be:	4c0c      	ldr	r4, [pc, #48]	@ (801d6f0 <__libc_init_array+0x44>)
 801d6c0:	f000 ff10 	bl	801e4e4 <_init>
 801d6c4:	1b64      	subs	r4, r4, r5
 801d6c6:	10a4      	asrs	r4, r4, #2
 801d6c8:	2600      	movs	r6, #0
 801d6ca:	42a6      	cmp	r6, r4
 801d6cc:	d105      	bne.n	801d6da <__libc_init_array+0x2e>
 801d6ce:	bd70      	pop	{r4, r5, r6, pc}
 801d6d0:	f855 3b04 	ldr.w	r3, [r5], #4
 801d6d4:	4798      	blx	r3
 801d6d6:	3601      	adds	r6, #1
 801d6d8:	e7ee      	b.n	801d6b8 <__libc_init_array+0xc>
 801d6da:	f855 3b04 	ldr.w	r3, [r5], #4
 801d6de:	4798      	blx	r3
 801d6e0:	3601      	adds	r6, #1
 801d6e2:	e7f2      	b.n	801d6ca <__libc_init_array+0x1e>
 801d6e4:	080335d8 	.word	0x080335d8
 801d6e8:	080335d8 	.word	0x080335d8
 801d6ec:	080335d8 	.word	0x080335d8
 801d6f0:	080335dc 	.word	0x080335dc

0801d6f4 <__retarget_lock_init_recursive>:
 801d6f4:	4770      	bx	lr

0801d6f6 <__retarget_lock_acquire_recursive>:
 801d6f6:	4770      	bx	lr

0801d6f8 <__retarget_lock_release_recursive>:
 801d6f8:	4770      	bx	lr

0801d6fa <memcpy>:
 801d6fa:	440a      	add	r2, r1
 801d6fc:	4291      	cmp	r1, r2
 801d6fe:	f100 33ff 	add.w	r3, r0, #4294967295
 801d702:	d100      	bne.n	801d706 <memcpy+0xc>
 801d704:	4770      	bx	lr
 801d706:	b510      	push	{r4, lr}
 801d708:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d70c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d710:	4291      	cmp	r1, r2
 801d712:	d1f9      	bne.n	801d708 <memcpy+0xe>
 801d714:	bd10      	pop	{r4, pc}
	...

0801d718 <__assert_func>:
 801d718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d71a:	4614      	mov	r4, r2
 801d71c:	461a      	mov	r2, r3
 801d71e:	4b09      	ldr	r3, [pc, #36]	@ (801d744 <__assert_func+0x2c>)
 801d720:	681b      	ldr	r3, [r3, #0]
 801d722:	4605      	mov	r5, r0
 801d724:	68d8      	ldr	r0, [r3, #12]
 801d726:	b14c      	cbz	r4, 801d73c <__assert_func+0x24>
 801d728:	4b07      	ldr	r3, [pc, #28]	@ (801d748 <__assert_func+0x30>)
 801d72a:	9100      	str	r1, [sp, #0]
 801d72c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d730:	4906      	ldr	r1, [pc, #24]	@ (801d74c <__assert_func+0x34>)
 801d732:	462b      	mov	r3, r5
 801d734:	f000 fd2a 	bl	801e18c <fiprintf>
 801d738:	f000 fdce 	bl	801e2d8 <abort>
 801d73c:	4b04      	ldr	r3, [pc, #16]	@ (801d750 <__assert_func+0x38>)
 801d73e:	461c      	mov	r4, r3
 801d740:	e7f3      	b.n	801d72a <__assert_func+0x12>
 801d742:	bf00      	nop
 801d744:	2000013c 	.word	0x2000013c
 801d748:	0803355f 	.word	0x0803355f
 801d74c:	0803356c 	.word	0x0803356c
 801d750:	0803359a 	.word	0x0803359a

0801d754 <_free_r>:
 801d754:	b538      	push	{r3, r4, r5, lr}
 801d756:	4605      	mov	r5, r0
 801d758:	2900      	cmp	r1, #0
 801d75a:	d041      	beq.n	801d7e0 <_free_r+0x8c>
 801d75c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d760:	1f0c      	subs	r4, r1, #4
 801d762:	2b00      	cmp	r3, #0
 801d764:	bfb8      	it	lt
 801d766:	18e4      	addlt	r4, r4, r3
 801d768:	f7ff fd24 	bl	801d1b4 <__malloc_lock>
 801d76c:	4a1d      	ldr	r2, [pc, #116]	@ (801d7e4 <_free_r+0x90>)
 801d76e:	6813      	ldr	r3, [r2, #0]
 801d770:	b933      	cbnz	r3, 801d780 <_free_r+0x2c>
 801d772:	6063      	str	r3, [r4, #4]
 801d774:	6014      	str	r4, [r2, #0]
 801d776:	4628      	mov	r0, r5
 801d778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d77c:	f7ff bd20 	b.w	801d1c0 <__malloc_unlock>
 801d780:	42a3      	cmp	r3, r4
 801d782:	d908      	bls.n	801d796 <_free_r+0x42>
 801d784:	6820      	ldr	r0, [r4, #0]
 801d786:	1821      	adds	r1, r4, r0
 801d788:	428b      	cmp	r3, r1
 801d78a:	bf01      	itttt	eq
 801d78c:	6819      	ldreq	r1, [r3, #0]
 801d78e:	685b      	ldreq	r3, [r3, #4]
 801d790:	1809      	addeq	r1, r1, r0
 801d792:	6021      	streq	r1, [r4, #0]
 801d794:	e7ed      	b.n	801d772 <_free_r+0x1e>
 801d796:	461a      	mov	r2, r3
 801d798:	685b      	ldr	r3, [r3, #4]
 801d79a:	b10b      	cbz	r3, 801d7a0 <_free_r+0x4c>
 801d79c:	42a3      	cmp	r3, r4
 801d79e:	d9fa      	bls.n	801d796 <_free_r+0x42>
 801d7a0:	6811      	ldr	r1, [r2, #0]
 801d7a2:	1850      	adds	r0, r2, r1
 801d7a4:	42a0      	cmp	r0, r4
 801d7a6:	d10b      	bne.n	801d7c0 <_free_r+0x6c>
 801d7a8:	6820      	ldr	r0, [r4, #0]
 801d7aa:	4401      	add	r1, r0
 801d7ac:	1850      	adds	r0, r2, r1
 801d7ae:	4283      	cmp	r3, r0
 801d7b0:	6011      	str	r1, [r2, #0]
 801d7b2:	d1e0      	bne.n	801d776 <_free_r+0x22>
 801d7b4:	6818      	ldr	r0, [r3, #0]
 801d7b6:	685b      	ldr	r3, [r3, #4]
 801d7b8:	6053      	str	r3, [r2, #4]
 801d7ba:	4408      	add	r0, r1
 801d7bc:	6010      	str	r0, [r2, #0]
 801d7be:	e7da      	b.n	801d776 <_free_r+0x22>
 801d7c0:	d902      	bls.n	801d7c8 <_free_r+0x74>
 801d7c2:	230c      	movs	r3, #12
 801d7c4:	602b      	str	r3, [r5, #0]
 801d7c6:	e7d6      	b.n	801d776 <_free_r+0x22>
 801d7c8:	6820      	ldr	r0, [r4, #0]
 801d7ca:	1821      	adds	r1, r4, r0
 801d7cc:	428b      	cmp	r3, r1
 801d7ce:	bf04      	itt	eq
 801d7d0:	6819      	ldreq	r1, [r3, #0]
 801d7d2:	685b      	ldreq	r3, [r3, #4]
 801d7d4:	6063      	str	r3, [r4, #4]
 801d7d6:	bf04      	itt	eq
 801d7d8:	1809      	addeq	r1, r1, r0
 801d7da:	6021      	streq	r1, [r4, #0]
 801d7dc:	6054      	str	r4, [r2, #4]
 801d7de:	e7ca      	b.n	801d776 <_free_r+0x22>
 801d7e0:	bd38      	pop	{r3, r4, r5, pc}
 801d7e2:	bf00      	nop
 801d7e4:	2000ff7c 	.word	0x2000ff7c

0801d7e8 <__ssputs_r>:
 801d7e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d7ec:	688e      	ldr	r6, [r1, #8]
 801d7ee:	461f      	mov	r7, r3
 801d7f0:	42be      	cmp	r6, r7
 801d7f2:	680b      	ldr	r3, [r1, #0]
 801d7f4:	4682      	mov	sl, r0
 801d7f6:	460c      	mov	r4, r1
 801d7f8:	4690      	mov	r8, r2
 801d7fa:	d82d      	bhi.n	801d858 <__ssputs_r+0x70>
 801d7fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d800:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d804:	d026      	beq.n	801d854 <__ssputs_r+0x6c>
 801d806:	6965      	ldr	r5, [r4, #20]
 801d808:	6909      	ldr	r1, [r1, #16]
 801d80a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d80e:	eba3 0901 	sub.w	r9, r3, r1
 801d812:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d816:	1c7b      	adds	r3, r7, #1
 801d818:	444b      	add	r3, r9
 801d81a:	106d      	asrs	r5, r5, #1
 801d81c:	429d      	cmp	r5, r3
 801d81e:	bf38      	it	cc
 801d820:	461d      	movcc	r5, r3
 801d822:	0553      	lsls	r3, r2, #21
 801d824:	d527      	bpl.n	801d876 <__ssputs_r+0x8e>
 801d826:	4629      	mov	r1, r5
 801d828:	f7ff fc44 	bl	801d0b4 <_malloc_r>
 801d82c:	4606      	mov	r6, r0
 801d82e:	b360      	cbz	r0, 801d88a <__ssputs_r+0xa2>
 801d830:	6921      	ldr	r1, [r4, #16]
 801d832:	464a      	mov	r2, r9
 801d834:	f7ff ff61 	bl	801d6fa <memcpy>
 801d838:	89a3      	ldrh	r3, [r4, #12]
 801d83a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d83e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d842:	81a3      	strh	r3, [r4, #12]
 801d844:	6126      	str	r6, [r4, #16]
 801d846:	6165      	str	r5, [r4, #20]
 801d848:	444e      	add	r6, r9
 801d84a:	eba5 0509 	sub.w	r5, r5, r9
 801d84e:	6026      	str	r6, [r4, #0]
 801d850:	60a5      	str	r5, [r4, #8]
 801d852:	463e      	mov	r6, r7
 801d854:	42be      	cmp	r6, r7
 801d856:	d900      	bls.n	801d85a <__ssputs_r+0x72>
 801d858:	463e      	mov	r6, r7
 801d85a:	6820      	ldr	r0, [r4, #0]
 801d85c:	4632      	mov	r2, r6
 801d85e:	4641      	mov	r1, r8
 801d860:	f7ff fe3b 	bl	801d4da <memmove>
 801d864:	68a3      	ldr	r3, [r4, #8]
 801d866:	1b9b      	subs	r3, r3, r6
 801d868:	60a3      	str	r3, [r4, #8]
 801d86a:	6823      	ldr	r3, [r4, #0]
 801d86c:	4433      	add	r3, r6
 801d86e:	6023      	str	r3, [r4, #0]
 801d870:	2000      	movs	r0, #0
 801d872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d876:	462a      	mov	r2, r5
 801d878:	f000 fd35 	bl	801e2e6 <_realloc_r>
 801d87c:	4606      	mov	r6, r0
 801d87e:	2800      	cmp	r0, #0
 801d880:	d1e0      	bne.n	801d844 <__ssputs_r+0x5c>
 801d882:	6921      	ldr	r1, [r4, #16]
 801d884:	4650      	mov	r0, sl
 801d886:	f7ff ff65 	bl	801d754 <_free_r>
 801d88a:	230c      	movs	r3, #12
 801d88c:	f8ca 3000 	str.w	r3, [sl]
 801d890:	89a3      	ldrh	r3, [r4, #12]
 801d892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d896:	81a3      	strh	r3, [r4, #12]
 801d898:	f04f 30ff 	mov.w	r0, #4294967295
 801d89c:	e7e9      	b.n	801d872 <__ssputs_r+0x8a>
	...

0801d8a0 <_svfiprintf_r>:
 801d8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8a4:	4698      	mov	r8, r3
 801d8a6:	898b      	ldrh	r3, [r1, #12]
 801d8a8:	061b      	lsls	r3, r3, #24
 801d8aa:	b09d      	sub	sp, #116	@ 0x74
 801d8ac:	4607      	mov	r7, r0
 801d8ae:	460d      	mov	r5, r1
 801d8b0:	4614      	mov	r4, r2
 801d8b2:	d510      	bpl.n	801d8d6 <_svfiprintf_r+0x36>
 801d8b4:	690b      	ldr	r3, [r1, #16]
 801d8b6:	b973      	cbnz	r3, 801d8d6 <_svfiprintf_r+0x36>
 801d8b8:	2140      	movs	r1, #64	@ 0x40
 801d8ba:	f7ff fbfb 	bl	801d0b4 <_malloc_r>
 801d8be:	6028      	str	r0, [r5, #0]
 801d8c0:	6128      	str	r0, [r5, #16]
 801d8c2:	b930      	cbnz	r0, 801d8d2 <_svfiprintf_r+0x32>
 801d8c4:	230c      	movs	r3, #12
 801d8c6:	603b      	str	r3, [r7, #0]
 801d8c8:	f04f 30ff 	mov.w	r0, #4294967295
 801d8cc:	b01d      	add	sp, #116	@ 0x74
 801d8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8d2:	2340      	movs	r3, #64	@ 0x40
 801d8d4:	616b      	str	r3, [r5, #20]
 801d8d6:	2300      	movs	r3, #0
 801d8d8:	9309      	str	r3, [sp, #36]	@ 0x24
 801d8da:	2320      	movs	r3, #32
 801d8dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d8e0:	f8cd 800c 	str.w	r8, [sp, #12]
 801d8e4:	2330      	movs	r3, #48	@ 0x30
 801d8e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801da84 <_svfiprintf_r+0x1e4>
 801d8ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d8ee:	f04f 0901 	mov.w	r9, #1
 801d8f2:	4623      	mov	r3, r4
 801d8f4:	469a      	mov	sl, r3
 801d8f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d8fa:	b10a      	cbz	r2, 801d900 <_svfiprintf_r+0x60>
 801d8fc:	2a25      	cmp	r2, #37	@ 0x25
 801d8fe:	d1f9      	bne.n	801d8f4 <_svfiprintf_r+0x54>
 801d900:	ebba 0b04 	subs.w	fp, sl, r4
 801d904:	d00b      	beq.n	801d91e <_svfiprintf_r+0x7e>
 801d906:	465b      	mov	r3, fp
 801d908:	4622      	mov	r2, r4
 801d90a:	4629      	mov	r1, r5
 801d90c:	4638      	mov	r0, r7
 801d90e:	f7ff ff6b 	bl	801d7e8 <__ssputs_r>
 801d912:	3001      	adds	r0, #1
 801d914:	f000 80a7 	beq.w	801da66 <_svfiprintf_r+0x1c6>
 801d918:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d91a:	445a      	add	r2, fp
 801d91c:	9209      	str	r2, [sp, #36]	@ 0x24
 801d91e:	f89a 3000 	ldrb.w	r3, [sl]
 801d922:	2b00      	cmp	r3, #0
 801d924:	f000 809f 	beq.w	801da66 <_svfiprintf_r+0x1c6>
 801d928:	2300      	movs	r3, #0
 801d92a:	f04f 32ff 	mov.w	r2, #4294967295
 801d92e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d932:	f10a 0a01 	add.w	sl, sl, #1
 801d936:	9304      	str	r3, [sp, #16]
 801d938:	9307      	str	r3, [sp, #28]
 801d93a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d93e:	931a      	str	r3, [sp, #104]	@ 0x68
 801d940:	4654      	mov	r4, sl
 801d942:	2205      	movs	r2, #5
 801d944:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d948:	484e      	ldr	r0, [pc, #312]	@ (801da84 <_svfiprintf_r+0x1e4>)
 801d94a:	f7e2 fc91 	bl	8000270 <memchr>
 801d94e:	9a04      	ldr	r2, [sp, #16]
 801d950:	b9d8      	cbnz	r0, 801d98a <_svfiprintf_r+0xea>
 801d952:	06d0      	lsls	r0, r2, #27
 801d954:	bf44      	itt	mi
 801d956:	2320      	movmi	r3, #32
 801d958:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d95c:	0711      	lsls	r1, r2, #28
 801d95e:	bf44      	itt	mi
 801d960:	232b      	movmi	r3, #43	@ 0x2b
 801d962:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d966:	f89a 3000 	ldrb.w	r3, [sl]
 801d96a:	2b2a      	cmp	r3, #42	@ 0x2a
 801d96c:	d015      	beq.n	801d99a <_svfiprintf_r+0xfa>
 801d96e:	9a07      	ldr	r2, [sp, #28]
 801d970:	4654      	mov	r4, sl
 801d972:	2000      	movs	r0, #0
 801d974:	f04f 0c0a 	mov.w	ip, #10
 801d978:	4621      	mov	r1, r4
 801d97a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d97e:	3b30      	subs	r3, #48	@ 0x30
 801d980:	2b09      	cmp	r3, #9
 801d982:	d94b      	bls.n	801da1c <_svfiprintf_r+0x17c>
 801d984:	b1b0      	cbz	r0, 801d9b4 <_svfiprintf_r+0x114>
 801d986:	9207      	str	r2, [sp, #28]
 801d988:	e014      	b.n	801d9b4 <_svfiprintf_r+0x114>
 801d98a:	eba0 0308 	sub.w	r3, r0, r8
 801d98e:	fa09 f303 	lsl.w	r3, r9, r3
 801d992:	4313      	orrs	r3, r2
 801d994:	9304      	str	r3, [sp, #16]
 801d996:	46a2      	mov	sl, r4
 801d998:	e7d2      	b.n	801d940 <_svfiprintf_r+0xa0>
 801d99a:	9b03      	ldr	r3, [sp, #12]
 801d99c:	1d19      	adds	r1, r3, #4
 801d99e:	681b      	ldr	r3, [r3, #0]
 801d9a0:	9103      	str	r1, [sp, #12]
 801d9a2:	2b00      	cmp	r3, #0
 801d9a4:	bfbb      	ittet	lt
 801d9a6:	425b      	neglt	r3, r3
 801d9a8:	f042 0202 	orrlt.w	r2, r2, #2
 801d9ac:	9307      	strge	r3, [sp, #28]
 801d9ae:	9307      	strlt	r3, [sp, #28]
 801d9b0:	bfb8      	it	lt
 801d9b2:	9204      	strlt	r2, [sp, #16]
 801d9b4:	7823      	ldrb	r3, [r4, #0]
 801d9b6:	2b2e      	cmp	r3, #46	@ 0x2e
 801d9b8:	d10a      	bne.n	801d9d0 <_svfiprintf_r+0x130>
 801d9ba:	7863      	ldrb	r3, [r4, #1]
 801d9bc:	2b2a      	cmp	r3, #42	@ 0x2a
 801d9be:	d132      	bne.n	801da26 <_svfiprintf_r+0x186>
 801d9c0:	9b03      	ldr	r3, [sp, #12]
 801d9c2:	1d1a      	adds	r2, r3, #4
 801d9c4:	681b      	ldr	r3, [r3, #0]
 801d9c6:	9203      	str	r2, [sp, #12]
 801d9c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d9cc:	3402      	adds	r4, #2
 801d9ce:	9305      	str	r3, [sp, #20]
 801d9d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801da94 <_svfiprintf_r+0x1f4>
 801d9d4:	7821      	ldrb	r1, [r4, #0]
 801d9d6:	2203      	movs	r2, #3
 801d9d8:	4650      	mov	r0, sl
 801d9da:	f7e2 fc49 	bl	8000270 <memchr>
 801d9de:	b138      	cbz	r0, 801d9f0 <_svfiprintf_r+0x150>
 801d9e0:	9b04      	ldr	r3, [sp, #16]
 801d9e2:	eba0 000a 	sub.w	r0, r0, sl
 801d9e6:	2240      	movs	r2, #64	@ 0x40
 801d9e8:	4082      	lsls	r2, r0
 801d9ea:	4313      	orrs	r3, r2
 801d9ec:	3401      	adds	r4, #1
 801d9ee:	9304      	str	r3, [sp, #16]
 801d9f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d9f4:	4824      	ldr	r0, [pc, #144]	@ (801da88 <_svfiprintf_r+0x1e8>)
 801d9f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d9fa:	2206      	movs	r2, #6
 801d9fc:	f7e2 fc38 	bl	8000270 <memchr>
 801da00:	2800      	cmp	r0, #0
 801da02:	d036      	beq.n	801da72 <_svfiprintf_r+0x1d2>
 801da04:	4b21      	ldr	r3, [pc, #132]	@ (801da8c <_svfiprintf_r+0x1ec>)
 801da06:	bb1b      	cbnz	r3, 801da50 <_svfiprintf_r+0x1b0>
 801da08:	9b03      	ldr	r3, [sp, #12]
 801da0a:	3307      	adds	r3, #7
 801da0c:	f023 0307 	bic.w	r3, r3, #7
 801da10:	3308      	adds	r3, #8
 801da12:	9303      	str	r3, [sp, #12]
 801da14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da16:	4433      	add	r3, r6
 801da18:	9309      	str	r3, [sp, #36]	@ 0x24
 801da1a:	e76a      	b.n	801d8f2 <_svfiprintf_r+0x52>
 801da1c:	fb0c 3202 	mla	r2, ip, r2, r3
 801da20:	460c      	mov	r4, r1
 801da22:	2001      	movs	r0, #1
 801da24:	e7a8      	b.n	801d978 <_svfiprintf_r+0xd8>
 801da26:	2300      	movs	r3, #0
 801da28:	3401      	adds	r4, #1
 801da2a:	9305      	str	r3, [sp, #20]
 801da2c:	4619      	mov	r1, r3
 801da2e:	f04f 0c0a 	mov.w	ip, #10
 801da32:	4620      	mov	r0, r4
 801da34:	f810 2b01 	ldrb.w	r2, [r0], #1
 801da38:	3a30      	subs	r2, #48	@ 0x30
 801da3a:	2a09      	cmp	r2, #9
 801da3c:	d903      	bls.n	801da46 <_svfiprintf_r+0x1a6>
 801da3e:	2b00      	cmp	r3, #0
 801da40:	d0c6      	beq.n	801d9d0 <_svfiprintf_r+0x130>
 801da42:	9105      	str	r1, [sp, #20]
 801da44:	e7c4      	b.n	801d9d0 <_svfiprintf_r+0x130>
 801da46:	fb0c 2101 	mla	r1, ip, r1, r2
 801da4a:	4604      	mov	r4, r0
 801da4c:	2301      	movs	r3, #1
 801da4e:	e7f0      	b.n	801da32 <_svfiprintf_r+0x192>
 801da50:	ab03      	add	r3, sp, #12
 801da52:	9300      	str	r3, [sp, #0]
 801da54:	462a      	mov	r2, r5
 801da56:	4b0e      	ldr	r3, [pc, #56]	@ (801da90 <_svfiprintf_r+0x1f0>)
 801da58:	a904      	add	r1, sp, #16
 801da5a:	4638      	mov	r0, r7
 801da5c:	f3af 8000 	nop.w
 801da60:	1c42      	adds	r2, r0, #1
 801da62:	4606      	mov	r6, r0
 801da64:	d1d6      	bne.n	801da14 <_svfiprintf_r+0x174>
 801da66:	89ab      	ldrh	r3, [r5, #12]
 801da68:	065b      	lsls	r3, r3, #25
 801da6a:	f53f af2d 	bmi.w	801d8c8 <_svfiprintf_r+0x28>
 801da6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801da70:	e72c      	b.n	801d8cc <_svfiprintf_r+0x2c>
 801da72:	ab03      	add	r3, sp, #12
 801da74:	9300      	str	r3, [sp, #0]
 801da76:	462a      	mov	r2, r5
 801da78:	4b05      	ldr	r3, [pc, #20]	@ (801da90 <_svfiprintf_r+0x1f0>)
 801da7a:	a904      	add	r1, sp, #16
 801da7c:	4638      	mov	r0, r7
 801da7e:	f000 f9bb 	bl	801ddf8 <_printf_i>
 801da82:	e7ed      	b.n	801da60 <_svfiprintf_r+0x1c0>
 801da84:	0803359b 	.word	0x0803359b
 801da88:	080335a5 	.word	0x080335a5
 801da8c:	00000000 	.word	0x00000000
 801da90:	0801d7e9 	.word	0x0801d7e9
 801da94:	080335a1 	.word	0x080335a1

0801da98 <__sfputc_r>:
 801da98:	6893      	ldr	r3, [r2, #8]
 801da9a:	3b01      	subs	r3, #1
 801da9c:	2b00      	cmp	r3, #0
 801da9e:	b410      	push	{r4}
 801daa0:	6093      	str	r3, [r2, #8]
 801daa2:	da08      	bge.n	801dab6 <__sfputc_r+0x1e>
 801daa4:	6994      	ldr	r4, [r2, #24]
 801daa6:	42a3      	cmp	r3, r4
 801daa8:	db01      	blt.n	801daae <__sfputc_r+0x16>
 801daaa:	290a      	cmp	r1, #10
 801daac:	d103      	bne.n	801dab6 <__sfputc_r+0x1e>
 801daae:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dab2:	f000 bb7d 	b.w	801e1b0 <__swbuf_r>
 801dab6:	6813      	ldr	r3, [r2, #0]
 801dab8:	1c58      	adds	r0, r3, #1
 801daba:	6010      	str	r0, [r2, #0]
 801dabc:	7019      	strb	r1, [r3, #0]
 801dabe:	4608      	mov	r0, r1
 801dac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dac4:	4770      	bx	lr

0801dac6 <__sfputs_r>:
 801dac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dac8:	4606      	mov	r6, r0
 801daca:	460f      	mov	r7, r1
 801dacc:	4614      	mov	r4, r2
 801dace:	18d5      	adds	r5, r2, r3
 801dad0:	42ac      	cmp	r4, r5
 801dad2:	d101      	bne.n	801dad8 <__sfputs_r+0x12>
 801dad4:	2000      	movs	r0, #0
 801dad6:	e007      	b.n	801dae8 <__sfputs_r+0x22>
 801dad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dadc:	463a      	mov	r2, r7
 801dade:	4630      	mov	r0, r6
 801dae0:	f7ff ffda 	bl	801da98 <__sfputc_r>
 801dae4:	1c43      	adds	r3, r0, #1
 801dae6:	d1f3      	bne.n	801dad0 <__sfputs_r+0xa>
 801dae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801daec <_vfiprintf_r>:
 801daec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801daf0:	460d      	mov	r5, r1
 801daf2:	b09d      	sub	sp, #116	@ 0x74
 801daf4:	4614      	mov	r4, r2
 801daf6:	4698      	mov	r8, r3
 801daf8:	4606      	mov	r6, r0
 801dafa:	b118      	cbz	r0, 801db04 <_vfiprintf_r+0x18>
 801dafc:	6a03      	ldr	r3, [r0, #32]
 801dafe:	b90b      	cbnz	r3, 801db04 <_vfiprintf_r+0x18>
 801db00:	f7ff fc2e 	bl	801d360 <__sinit>
 801db04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801db06:	07d9      	lsls	r1, r3, #31
 801db08:	d405      	bmi.n	801db16 <_vfiprintf_r+0x2a>
 801db0a:	89ab      	ldrh	r3, [r5, #12]
 801db0c:	059a      	lsls	r2, r3, #22
 801db0e:	d402      	bmi.n	801db16 <_vfiprintf_r+0x2a>
 801db10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801db12:	f7ff fdf0 	bl	801d6f6 <__retarget_lock_acquire_recursive>
 801db16:	89ab      	ldrh	r3, [r5, #12]
 801db18:	071b      	lsls	r3, r3, #28
 801db1a:	d501      	bpl.n	801db20 <_vfiprintf_r+0x34>
 801db1c:	692b      	ldr	r3, [r5, #16]
 801db1e:	b99b      	cbnz	r3, 801db48 <_vfiprintf_r+0x5c>
 801db20:	4629      	mov	r1, r5
 801db22:	4630      	mov	r0, r6
 801db24:	f000 fb82 	bl	801e22c <__swsetup_r>
 801db28:	b170      	cbz	r0, 801db48 <_vfiprintf_r+0x5c>
 801db2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801db2c:	07dc      	lsls	r4, r3, #31
 801db2e:	d504      	bpl.n	801db3a <_vfiprintf_r+0x4e>
 801db30:	f04f 30ff 	mov.w	r0, #4294967295
 801db34:	b01d      	add	sp, #116	@ 0x74
 801db36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db3a:	89ab      	ldrh	r3, [r5, #12]
 801db3c:	0598      	lsls	r0, r3, #22
 801db3e:	d4f7      	bmi.n	801db30 <_vfiprintf_r+0x44>
 801db40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801db42:	f7ff fdd9 	bl	801d6f8 <__retarget_lock_release_recursive>
 801db46:	e7f3      	b.n	801db30 <_vfiprintf_r+0x44>
 801db48:	2300      	movs	r3, #0
 801db4a:	9309      	str	r3, [sp, #36]	@ 0x24
 801db4c:	2320      	movs	r3, #32
 801db4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801db52:	f8cd 800c 	str.w	r8, [sp, #12]
 801db56:	2330      	movs	r3, #48	@ 0x30
 801db58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801dd08 <_vfiprintf_r+0x21c>
 801db5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801db60:	f04f 0901 	mov.w	r9, #1
 801db64:	4623      	mov	r3, r4
 801db66:	469a      	mov	sl, r3
 801db68:	f813 2b01 	ldrb.w	r2, [r3], #1
 801db6c:	b10a      	cbz	r2, 801db72 <_vfiprintf_r+0x86>
 801db6e:	2a25      	cmp	r2, #37	@ 0x25
 801db70:	d1f9      	bne.n	801db66 <_vfiprintf_r+0x7a>
 801db72:	ebba 0b04 	subs.w	fp, sl, r4
 801db76:	d00b      	beq.n	801db90 <_vfiprintf_r+0xa4>
 801db78:	465b      	mov	r3, fp
 801db7a:	4622      	mov	r2, r4
 801db7c:	4629      	mov	r1, r5
 801db7e:	4630      	mov	r0, r6
 801db80:	f7ff ffa1 	bl	801dac6 <__sfputs_r>
 801db84:	3001      	adds	r0, #1
 801db86:	f000 80a7 	beq.w	801dcd8 <_vfiprintf_r+0x1ec>
 801db8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801db8c:	445a      	add	r2, fp
 801db8e:	9209      	str	r2, [sp, #36]	@ 0x24
 801db90:	f89a 3000 	ldrb.w	r3, [sl]
 801db94:	2b00      	cmp	r3, #0
 801db96:	f000 809f 	beq.w	801dcd8 <_vfiprintf_r+0x1ec>
 801db9a:	2300      	movs	r3, #0
 801db9c:	f04f 32ff 	mov.w	r2, #4294967295
 801dba0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dba4:	f10a 0a01 	add.w	sl, sl, #1
 801dba8:	9304      	str	r3, [sp, #16]
 801dbaa:	9307      	str	r3, [sp, #28]
 801dbac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801dbb0:	931a      	str	r3, [sp, #104]	@ 0x68
 801dbb2:	4654      	mov	r4, sl
 801dbb4:	2205      	movs	r2, #5
 801dbb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dbba:	4853      	ldr	r0, [pc, #332]	@ (801dd08 <_vfiprintf_r+0x21c>)
 801dbbc:	f7e2 fb58 	bl	8000270 <memchr>
 801dbc0:	9a04      	ldr	r2, [sp, #16]
 801dbc2:	b9d8      	cbnz	r0, 801dbfc <_vfiprintf_r+0x110>
 801dbc4:	06d1      	lsls	r1, r2, #27
 801dbc6:	bf44      	itt	mi
 801dbc8:	2320      	movmi	r3, #32
 801dbca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dbce:	0713      	lsls	r3, r2, #28
 801dbd0:	bf44      	itt	mi
 801dbd2:	232b      	movmi	r3, #43	@ 0x2b
 801dbd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dbd8:	f89a 3000 	ldrb.w	r3, [sl]
 801dbdc:	2b2a      	cmp	r3, #42	@ 0x2a
 801dbde:	d015      	beq.n	801dc0c <_vfiprintf_r+0x120>
 801dbe0:	9a07      	ldr	r2, [sp, #28]
 801dbe2:	4654      	mov	r4, sl
 801dbe4:	2000      	movs	r0, #0
 801dbe6:	f04f 0c0a 	mov.w	ip, #10
 801dbea:	4621      	mov	r1, r4
 801dbec:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dbf0:	3b30      	subs	r3, #48	@ 0x30
 801dbf2:	2b09      	cmp	r3, #9
 801dbf4:	d94b      	bls.n	801dc8e <_vfiprintf_r+0x1a2>
 801dbf6:	b1b0      	cbz	r0, 801dc26 <_vfiprintf_r+0x13a>
 801dbf8:	9207      	str	r2, [sp, #28]
 801dbfa:	e014      	b.n	801dc26 <_vfiprintf_r+0x13a>
 801dbfc:	eba0 0308 	sub.w	r3, r0, r8
 801dc00:	fa09 f303 	lsl.w	r3, r9, r3
 801dc04:	4313      	orrs	r3, r2
 801dc06:	9304      	str	r3, [sp, #16]
 801dc08:	46a2      	mov	sl, r4
 801dc0a:	e7d2      	b.n	801dbb2 <_vfiprintf_r+0xc6>
 801dc0c:	9b03      	ldr	r3, [sp, #12]
 801dc0e:	1d19      	adds	r1, r3, #4
 801dc10:	681b      	ldr	r3, [r3, #0]
 801dc12:	9103      	str	r1, [sp, #12]
 801dc14:	2b00      	cmp	r3, #0
 801dc16:	bfbb      	ittet	lt
 801dc18:	425b      	neglt	r3, r3
 801dc1a:	f042 0202 	orrlt.w	r2, r2, #2
 801dc1e:	9307      	strge	r3, [sp, #28]
 801dc20:	9307      	strlt	r3, [sp, #28]
 801dc22:	bfb8      	it	lt
 801dc24:	9204      	strlt	r2, [sp, #16]
 801dc26:	7823      	ldrb	r3, [r4, #0]
 801dc28:	2b2e      	cmp	r3, #46	@ 0x2e
 801dc2a:	d10a      	bne.n	801dc42 <_vfiprintf_r+0x156>
 801dc2c:	7863      	ldrb	r3, [r4, #1]
 801dc2e:	2b2a      	cmp	r3, #42	@ 0x2a
 801dc30:	d132      	bne.n	801dc98 <_vfiprintf_r+0x1ac>
 801dc32:	9b03      	ldr	r3, [sp, #12]
 801dc34:	1d1a      	adds	r2, r3, #4
 801dc36:	681b      	ldr	r3, [r3, #0]
 801dc38:	9203      	str	r2, [sp, #12]
 801dc3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801dc3e:	3402      	adds	r4, #2
 801dc40:	9305      	str	r3, [sp, #20]
 801dc42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801dd18 <_vfiprintf_r+0x22c>
 801dc46:	7821      	ldrb	r1, [r4, #0]
 801dc48:	2203      	movs	r2, #3
 801dc4a:	4650      	mov	r0, sl
 801dc4c:	f7e2 fb10 	bl	8000270 <memchr>
 801dc50:	b138      	cbz	r0, 801dc62 <_vfiprintf_r+0x176>
 801dc52:	9b04      	ldr	r3, [sp, #16]
 801dc54:	eba0 000a 	sub.w	r0, r0, sl
 801dc58:	2240      	movs	r2, #64	@ 0x40
 801dc5a:	4082      	lsls	r2, r0
 801dc5c:	4313      	orrs	r3, r2
 801dc5e:	3401      	adds	r4, #1
 801dc60:	9304      	str	r3, [sp, #16]
 801dc62:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dc66:	4829      	ldr	r0, [pc, #164]	@ (801dd0c <_vfiprintf_r+0x220>)
 801dc68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801dc6c:	2206      	movs	r2, #6
 801dc6e:	f7e2 faff 	bl	8000270 <memchr>
 801dc72:	2800      	cmp	r0, #0
 801dc74:	d03f      	beq.n	801dcf6 <_vfiprintf_r+0x20a>
 801dc76:	4b26      	ldr	r3, [pc, #152]	@ (801dd10 <_vfiprintf_r+0x224>)
 801dc78:	bb1b      	cbnz	r3, 801dcc2 <_vfiprintf_r+0x1d6>
 801dc7a:	9b03      	ldr	r3, [sp, #12]
 801dc7c:	3307      	adds	r3, #7
 801dc7e:	f023 0307 	bic.w	r3, r3, #7
 801dc82:	3308      	adds	r3, #8
 801dc84:	9303      	str	r3, [sp, #12]
 801dc86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc88:	443b      	add	r3, r7
 801dc8a:	9309      	str	r3, [sp, #36]	@ 0x24
 801dc8c:	e76a      	b.n	801db64 <_vfiprintf_r+0x78>
 801dc8e:	fb0c 3202 	mla	r2, ip, r2, r3
 801dc92:	460c      	mov	r4, r1
 801dc94:	2001      	movs	r0, #1
 801dc96:	e7a8      	b.n	801dbea <_vfiprintf_r+0xfe>
 801dc98:	2300      	movs	r3, #0
 801dc9a:	3401      	adds	r4, #1
 801dc9c:	9305      	str	r3, [sp, #20]
 801dc9e:	4619      	mov	r1, r3
 801dca0:	f04f 0c0a 	mov.w	ip, #10
 801dca4:	4620      	mov	r0, r4
 801dca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dcaa:	3a30      	subs	r2, #48	@ 0x30
 801dcac:	2a09      	cmp	r2, #9
 801dcae:	d903      	bls.n	801dcb8 <_vfiprintf_r+0x1cc>
 801dcb0:	2b00      	cmp	r3, #0
 801dcb2:	d0c6      	beq.n	801dc42 <_vfiprintf_r+0x156>
 801dcb4:	9105      	str	r1, [sp, #20]
 801dcb6:	e7c4      	b.n	801dc42 <_vfiprintf_r+0x156>
 801dcb8:	fb0c 2101 	mla	r1, ip, r1, r2
 801dcbc:	4604      	mov	r4, r0
 801dcbe:	2301      	movs	r3, #1
 801dcc0:	e7f0      	b.n	801dca4 <_vfiprintf_r+0x1b8>
 801dcc2:	ab03      	add	r3, sp, #12
 801dcc4:	9300      	str	r3, [sp, #0]
 801dcc6:	462a      	mov	r2, r5
 801dcc8:	4b12      	ldr	r3, [pc, #72]	@ (801dd14 <_vfiprintf_r+0x228>)
 801dcca:	a904      	add	r1, sp, #16
 801dccc:	4630      	mov	r0, r6
 801dcce:	f3af 8000 	nop.w
 801dcd2:	4607      	mov	r7, r0
 801dcd4:	1c78      	adds	r0, r7, #1
 801dcd6:	d1d6      	bne.n	801dc86 <_vfiprintf_r+0x19a>
 801dcd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dcda:	07d9      	lsls	r1, r3, #31
 801dcdc:	d405      	bmi.n	801dcea <_vfiprintf_r+0x1fe>
 801dcde:	89ab      	ldrh	r3, [r5, #12]
 801dce0:	059a      	lsls	r2, r3, #22
 801dce2:	d402      	bmi.n	801dcea <_vfiprintf_r+0x1fe>
 801dce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dce6:	f7ff fd07 	bl	801d6f8 <__retarget_lock_release_recursive>
 801dcea:	89ab      	ldrh	r3, [r5, #12]
 801dcec:	065b      	lsls	r3, r3, #25
 801dcee:	f53f af1f 	bmi.w	801db30 <_vfiprintf_r+0x44>
 801dcf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dcf4:	e71e      	b.n	801db34 <_vfiprintf_r+0x48>
 801dcf6:	ab03      	add	r3, sp, #12
 801dcf8:	9300      	str	r3, [sp, #0]
 801dcfa:	462a      	mov	r2, r5
 801dcfc:	4b05      	ldr	r3, [pc, #20]	@ (801dd14 <_vfiprintf_r+0x228>)
 801dcfe:	a904      	add	r1, sp, #16
 801dd00:	4630      	mov	r0, r6
 801dd02:	f000 f879 	bl	801ddf8 <_printf_i>
 801dd06:	e7e4      	b.n	801dcd2 <_vfiprintf_r+0x1e6>
 801dd08:	0803359b 	.word	0x0803359b
 801dd0c:	080335a5 	.word	0x080335a5
 801dd10:	00000000 	.word	0x00000000
 801dd14:	0801dac7 	.word	0x0801dac7
 801dd18:	080335a1 	.word	0x080335a1

0801dd1c <_printf_common>:
 801dd1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dd20:	4616      	mov	r6, r2
 801dd22:	4698      	mov	r8, r3
 801dd24:	688a      	ldr	r2, [r1, #8]
 801dd26:	690b      	ldr	r3, [r1, #16]
 801dd28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801dd2c:	4293      	cmp	r3, r2
 801dd2e:	bfb8      	it	lt
 801dd30:	4613      	movlt	r3, r2
 801dd32:	6033      	str	r3, [r6, #0]
 801dd34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801dd38:	4607      	mov	r7, r0
 801dd3a:	460c      	mov	r4, r1
 801dd3c:	b10a      	cbz	r2, 801dd42 <_printf_common+0x26>
 801dd3e:	3301      	adds	r3, #1
 801dd40:	6033      	str	r3, [r6, #0]
 801dd42:	6823      	ldr	r3, [r4, #0]
 801dd44:	0699      	lsls	r1, r3, #26
 801dd46:	bf42      	ittt	mi
 801dd48:	6833      	ldrmi	r3, [r6, #0]
 801dd4a:	3302      	addmi	r3, #2
 801dd4c:	6033      	strmi	r3, [r6, #0]
 801dd4e:	6825      	ldr	r5, [r4, #0]
 801dd50:	f015 0506 	ands.w	r5, r5, #6
 801dd54:	d106      	bne.n	801dd64 <_printf_common+0x48>
 801dd56:	f104 0a19 	add.w	sl, r4, #25
 801dd5a:	68e3      	ldr	r3, [r4, #12]
 801dd5c:	6832      	ldr	r2, [r6, #0]
 801dd5e:	1a9b      	subs	r3, r3, r2
 801dd60:	42ab      	cmp	r3, r5
 801dd62:	dc26      	bgt.n	801ddb2 <_printf_common+0x96>
 801dd64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801dd68:	6822      	ldr	r2, [r4, #0]
 801dd6a:	3b00      	subs	r3, #0
 801dd6c:	bf18      	it	ne
 801dd6e:	2301      	movne	r3, #1
 801dd70:	0692      	lsls	r2, r2, #26
 801dd72:	d42b      	bmi.n	801ddcc <_printf_common+0xb0>
 801dd74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801dd78:	4641      	mov	r1, r8
 801dd7a:	4638      	mov	r0, r7
 801dd7c:	47c8      	blx	r9
 801dd7e:	3001      	adds	r0, #1
 801dd80:	d01e      	beq.n	801ddc0 <_printf_common+0xa4>
 801dd82:	6823      	ldr	r3, [r4, #0]
 801dd84:	6922      	ldr	r2, [r4, #16]
 801dd86:	f003 0306 	and.w	r3, r3, #6
 801dd8a:	2b04      	cmp	r3, #4
 801dd8c:	bf02      	ittt	eq
 801dd8e:	68e5      	ldreq	r5, [r4, #12]
 801dd90:	6833      	ldreq	r3, [r6, #0]
 801dd92:	1aed      	subeq	r5, r5, r3
 801dd94:	68a3      	ldr	r3, [r4, #8]
 801dd96:	bf0c      	ite	eq
 801dd98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801dd9c:	2500      	movne	r5, #0
 801dd9e:	4293      	cmp	r3, r2
 801dda0:	bfc4      	itt	gt
 801dda2:	1a9b      	subgt	r3, r3, r2
 801dda4:	18ed      	addgt	r5, r5, r3
 801dda6:	2600      	movs	r6, #0
 801dda8:	341a      	adds	r4, #26
 801ddaa:	42b5      	cmp	r5, r6
 801ddac:	d11a      	bne.n	801dde4 <_printf_common+0xc8>
 801ddae:	2000      	movs	r0, #0
 801ddb0:	e008      	b.n	801ddc4 <_printf_common+0xa8>
 801ddb2:	2301      	movs	r3, #1
 801ddb4:	4652      	mov	r2, sl
 801ddb6:	4641      	mov	r1, r8
 801ddb8:	4638      	mov	r0, r7
 801ddba:	47c8      	blx	r9
 801ddbc:	3001      	adds	r0, #1
 801ddbe:	d103      	bne.n	801ddc8 <_printf_common+0xac>
 801ddc0:	f04f 30ff 	mov.w	r0, #4294967295
 801ddc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ddc8:	3501      	adds	r5, #1
 801ddca:	e7c6      	b.n	801dd5a <_printf_common+0x3e>
 801ddcc:	18e1      	adds	r1, r4, r3
 801ddce:	1c5a      	adds	r2, r3, #1
 801ddd0:	2030      	movs	r0, #48	@ 0x30
 801ddd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ddd6:	4422      	add	r2, r4
 801ddd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801dddc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801dde0:	3302      	adds	r3, #2
 801dde2:	e7c7      	b.n	801dd74 <_printf_common+0x58>
 801dde4:	2301      	movs	r3, #1
 801dde6:	4622      	mov	r2, r4
 801dde8:	4641      	mov	r1, r8
 801ddea:	4638      	mov	r0, r7
 801ddec:	47c8      	blx	r9
 801ddee:	3001      	adds	r0, #1
 801ddf0:	d0e6      	beq.n	801ddc0 <_printf_common+0xa4>
 801ddf2:	3601      	adds	r6, #1
 801ddf4:	e7d9      	b.n	801ddaa <_printf_common+0x8e>
	...

0801ddf8 <_printf_i>:
 801ddf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ddfc:	7e0f      	ldrb	r7, [r1, #24]
 801ddfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801de00:	2f78      	cmp	r7, #120	@ 0x78
 801de02:	4691      	mov	r9, r2
 801de04:	4680      	mov	r8, r0
 801de06:	460c      	mov	r4, r1
 801de08:	469a      	mov	sl, r3
 801de0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801de0e:	d807      	bhi.n	801de20 <_printf_i+0x28>
 801de10:	2f62      	cmp	r7, #98	@ 0x62
 801de12:	d80a      	bhi.n	801de2a <_printf_i+0x32>
 801de14:	2f00      	cmp	r7, #0
 801de16:	f000 80d1 	beq.w	801dfbc <_printf_i+0x1c4>
 801de1a:	2f58      	cmp	r7, #88	@ 0x58
 801de1c:	f000 80b8 	beq.w	801df90 <_printf_i+0x198>
 801de20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801de24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801de28:	e03a      	b.n	801dea0 <_printf_i+0xa8>
 801de2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801de2e:	2b15      	cmp	r3, #21
 801de30:	d8f6      	bhi.n	801de20 <_printf_i+0x28>
 801de32:	a101      	add	r1, pc, #4	@ (adr r1, 801de38 <_printf_i+0x40>)
 801de34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801de38:	0801de91 	.word	0x0801de91
 801de3c:	0801dea5 	.word	0x0801dea5
 801de40:	0801de21 	.word	0x0801de21
 801de44:	0801de21 	.word	0x0801de21
 801de48:	0801de21 	.word	0x0801de21
 801de4c:	0801de21 	.word	0x0801de21
 801de50:	0801dea5 	.word	0x0801dea5
 801de54:	0801de21 	.word	0x0801de21
 801de58:	0801de21 	.word	0x0801de21
 801de5c:	0801de21 	.word	0x0801de21
 801de60:	0801de21 	.word	0x0801de21
 801de64:	0801dfa3 	.word	0x0801dfa3
 801de68:	0801decf 	.word	0x0801decf
 801de6c:	0801df5d 	.word	0x0801df5d
 801de70:	0801de21 	.word	0x0801de21
 801de74:	0801de21 	.word	0x0801de21
 801de78:	0801dfc5 	.word	0x0801dfc5
 801de7c:	0801de21 	.word	0x0801de21
 801de80:	0801decf 	.word	0x0801decf
 801de84:	0801de21 	.word	0x0801de21
 801de88:	0801de21 	.word	0x0801de21
 801de8c:	0801df65 	.word	0x0801df65
 801de90:	6833      	ldr	r3, [r6, #0]
 801de92:	1d1a      	adds	r2, r3, #4
 801de94:	681b      	ldr	r3, [r3, #0]
 801de96:	6032      	str	r2, [r6, #0]
 801de98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801de9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801dea0:	2301      	movs	r3, #1
 801dea2:	e09c      	b.n	801dfde <_printf_i+0x1e6>
 801dea4:	6833      	ldr	r3, [r6, #0]
 801dea6:	6820      	ldr	r0, [r4, #0]
 801dea8:	1d19      	adds	r1, r3, #4
 801deaa:	6031      	str	r1, [r6, #0]
 801deac:	0606      	lsls	r6, r0, #24
 801deae:	d501      	bpl.n	801deb4 <_printf_i+0xbc>
 801deb0:	681d      	ldr	r5, [r3, #0]
 801deb2:	e003      	b.n	801debc <_printf_i+0xc4>
 801deb4:	0645      	lsls	r5, r0, #25
 801deb6:	d5fb      	bpl.n	801deb0 <_printf_i+0xb8>
 801deb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801debc:	2d00      	cmp	r5, #0
 801debe:	da03      	bge.n	801dec8 <_printf_i+0xd0>
 801dec0:	232d      	movs	r3, #45	@ 0x2d
 801dec2:	426d      	negs	r5, r5
 801dec4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dec8:	4858      	ldr	r0, [pc, #352]	@ (801e02c <_printf_i+0x234>)
 801deca:	230a      	movs	r3, #10
 801decc:	e011      	b.n	801def2 <_printf_i+0xfa>
 801dece:	6821      	ldr	r1, [r4, #0]
 801ded0:	6833      	ldr	r3, [r6, #0]
 801ded2:	0608      	lsls	r0, r1, #24
 801ded4:	f853 5b04 	ldr.w	r5, [r3], #4
 801ded8:	d402      	bmi.n	801dee0 <_printf_i+0xe8>
 801deda:	0649      	lsls	r1, r1, #25
 801dedc:	bf48      	it	mi
 801dede:	b2ad      	uxthmi	r5, r5
 801dee0:	2f6f      	cmp	r7, #111	@ 0x6f
 801dee2:	4852      	ldr	r0, [pc, #328]	@ (801e02c <_printf_i+0x234>)
 801dee4:	6033      	str	r3, [r6, #0]
 801dee6:	bf14      	ite	ne
 801dee8:	230a      	movne	r3, #10
 801deea:	2308      	moveq	r3, #8
 801deec:	2100      	movs	r1, #0
 801deee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801def2:	6866      	ldr	r6, [r4, #4]
 801def4:	60a6      	str	r6, [r4, #8]
 801def6:	2e00      	cmp	r6, #0
 801def8:	db05      	blt.n	801df06 <_printf_i+0x10e>
 801defa:	6821      	ldr	r1, [r4, #0]
 801defc:	432e      	orrs	r6, r5
 801defe:	f021 0104 	bic.w	r1, r1, #4
 801df02:	6021      	str	r1, [r4, #0]
 801df04:	d04b      	beq.n	801df9e <_printf_i+0x1a6>
 801df06:	4616      	mov	r6, r2
 801df08:	fbb5 f1f3 	udiv	r1, r5, r3
 801df0c:	fb03 5711 	mls	r7, r3, r1, r5
 801df10:	5dc7      	ldrb	r7, [r0, r7]
 801df12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801df16:	462f      	mov	r7, r5
 801df18:	42bb      	cmp	r3, r7
 801df1a:	460d      	mov	r5, r1
 801df1c:	d9f4      	bls.n	801df08 <_printf_i+0x110>
 801df1e:	2b08      	cmp	r3, #8
 801df20:	d10b      	bne.n	801df3a <_printf_i+0x142>
 801df22:	6823      	ldr	r3, [r4, #0]
 801df24:	07df      	lsls	r7, r3, #31
 801df26:	d508      	bpl.n	801df3a <_printf_i+0x142>
 801df28:	6923      	ldr	r3, [r4, #16]
 801df2a:	6861      	ldr	r1, [r4, #4]
 801df2c:	4299      	cmp	r1, r3
 801df2e:	bfde      	ittt	le
 801df30:	2330      	movle	r3, #48	@ 0x30
 801df32:	f806 3c01 	strble.w	r3, [r6, #-1]
 801df36:	f106 36ff 	addle.w	r6, r6, #4294967295
 801df3a:	1b92      	subs	r2, r2, r6
 801df3c:	6122      	str	r2, [r4, #16]
 801df3e:	f8cd a000 	str.w	sl, [sp]
 801df42:	464b      	mov	r3, r9
 801df44:	aa03      	add	r2, sp, #12
 801df46:	4621      	mov	r1, r4
 801df48:	4640      	mov	r0, r8
 801df4a:	f7ff fee7 	bl	801dd1c <_printf_common>
 801df4e:	3001      	adds	r0, #1
 801df50:	d14a      	bne.n	801dfe8 <_printf_i+0x1f0>
 801df52:	f04f 30ff 	mov.w	r0, #4294967295
 801df56:	b004      	add	sp, #16
 801df58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df5c:	6823      	ldr	r3, [r4, #0]
 801df5e:	f043 0320 	orr.w	r3, r3, #32
 801df62:	6023      	str	r3, [r4, #0]
 801df64:	4832      	ldr	r0, [pc, #200]	@ (801e030 <_printf_i+0x238>)
 801df66:	2778      	movs	r7, #120	@ 0x78
 801df68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801df6c:	6823      	ldr	r3, [r4, #0]
 801df6e:	6831      	ldr	r1, [r6, #0]
 801df70:	061f      	lsls	r7, r3, #24
 801df72:	f851 5b04 	ldr.w	r5, [r1], #4
 801df76:	d402      	bmi.n	801df7e <_printf_i+0x186>
 801df78:	065f      	lsls	r7, r3, #25
 801df7a:	bf48      	it	mi
 801df7c:	b2ad      	uxthmi	r5, r5
 801df7e:	6031      	str	r1, [r6, #0]
 801df80:	07d9      	lsls	r1, r3, #31
 801df82:	bf44      	itt	mi
 801df84:	f043 0320 	orrmi.w	r3, r3, #32
 801df88:	6023      	strmi	r3, [r4, #0]
 801df8a:	b11d      	cbz	r5, 801df94 <_printf_i+0x19c>
 801df8c:	2310      	movs	r3, #16
 801df8e:	e7ad      	b.n	801deec <_printf_i+0xf4>
 801df90:	4826      	ldr	r0, [pc, #152]	@ (801e02c <_printf_i+0x234>)
 801df92:	e7e9      	b.n	801df68 <_printf_i+0x170>
 801df94:	6823      	ldr	r3, [r4, #0]
 801df96:	f023 0320 	bic.w	r3, r3, #32
 801df9a:	6023      	str	r3, [r4, #0]
 801df9c:	e7f6      	b.n	801df8c <_printf_i+0x194>
 801df9e:	4616      	mov	r6, r2
 801dfa0:	e7bd      	b.n	801df1e <_printf_i+0x126>
 801dfa2:	6833      	ldr	r3, [r6, #0]
 801dfa4:	6825      	ldr	r5, [r4, #0]
 801dfa6:	6961      	ldr	r1, [r4, #20]
 801dfa8:	1d18      	adds	r0, r3, #4
 801dfaa:	6030      	str	r0, [r6, #0]
 801dfac:	062e      	lsls	r6, r5, #24
 801dfae:	681b      	ldr	r3, [r3, #0]
 801dfb0:	d501      	bpl.n	801dfb6 <_printf_i+0x1be>
 801dfb2:	6019      	str	r1, [r3, #0]
 801dfb4:	e002      	b.n	801dfbc <_printf_i+0x1c4>
 801dfb6:	0668      	lsls	r0, r5, #25
 801dfb8:	d5fb      	bpl.n	801dfb2 <_printf_i+0x1ba>
 801dfba:	8019      	strh	r1, [r3, #0]
 801dfbc:	2300      	movs	r3, #0
 801dfbe:	6123      	str	r3, [r4, #16]
 801dfc0:	4616      	mov	r6, r2
 801dfc2:	e7bc      	b.n	801df3e <_printf_i+0x146>
 801dfc4:	6833      	ldr	r3, [r6, #0]
 801dfc6:	1d1a      	adds	r2, r3, #4
 801dfc8:	6032      	str	r2, [r6, #0]
 801dfca:	681e      	ldr	r6, [r3, #0]
 801dfcc:	6862      	ldr	r2, [r4, #4]
 801dfce:	2100      	movs	r1, #0
 801dfd0:	4630      	mov	r0, r6
 801dfd2:	f7e2 f94d 	bl	8000270 <memchr>
 801dfd6:	b108      	cbz	r0, 801dfdc <_printf_i+0x1e4>
 801dfd8:	1b80      	subs	r0, r0, r6
 801dfda:	6060      	str	r0, [r4, #4]
 801dfdc:	6863      	ldr	r3, [r4, #4]
 801dfde:	6123      	str	r3, [r4, #16]
 801dfe0:	2300      	movs	r3, #0
 801dfe2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dfe6:	e7aa      	b.n	801df3e <_printf_i+0x146>
 801dfe8:	6923      	ldr	r3, [r4, #16]
 801dfea:	4632      	mov	r2, r6
 801dfec:	4649      	mov	r1, r9
 801dfee:	4640      	mov	r0, r8
 801dff0:	47d0      	blx	sl
 801dff2:	3001      	adds	r0, #1
 801dff4:	d0ad      	beq.n	801df52 <_printf_i+0x15a>
 801dff6:	6823      	ldr	r3, [r4, #0]
 801dff8:	079b      	lsls	r3, r3, #30
 801dffa:	d413      	bmi.n	801e024 <_printf_i+0x22c>
 801dffc:	68e0      	ldr	r0, [r4, #12]
 801dffe:	9b03      	ldr	r3, [sp, #12]
 801e000:	4298      	cmp	r0, r3
 801e002:	bfb8      	it	lt
 801e004:	4618      	movlt	r0, r3
 801e006:	e7a6      	b.n	801df56 <_printf_i+0x15e>
 801e008:	2301      	movs	r3, #1
 801e00a:	4632      	mov	r2, r6
 801e00c:	4649      	mov	r1, r9
 801e00e:	4640      	mov	r0, r8
 801e010:	47d0      	blx	sl
 801e012:	3001      	adds	r0, #1
 801e014:	d09d      	beq.n	801df52 <_printf_i+0x15a>
 801e016:	3501      	adds	r5, #1
 801e018:	68e3      	ldr	r3, [r4, #12]
 801e01a:	9903      	ldr	r1, [sp, #12]
 801e01c:	1a5b      	subs	r3, r3, r1
 801e01e:	42ab      	cmp	r3, r5
 801e020:	dcf2      	bgt.n	801e008 <_printf_i+0x210>
 801e022:	e7eb      	b.n	801dffc <_printf_i+0x204>
 801e024:	2500      	movs	r5, #0
 801e026:	f104 0619 	add.w	r6, r4, #25
 801e02a:	e7f5      	b.n	801e018 <_printf_i+0x220>
 801e02c:	080335ac 	.word	0x080335ac
 801e030:	080335bd 	.word	0x080335bd

0801e034 <__sflush_r>:
 801e034:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e03c:	0716      	lsls	r6, r2, #28
 801e03e:	4605      	mov	r5, r0
 801e040:	460c      	mov	r4, r1
 801e042:	d454      	bmi.n	801e0ee <__sflush_r+0xba>
 801e044:	684b      	ldr	r3, [r1, #4]
 801e046:	2b00      	cmp	r3, #0
 801e048:	dc02      	bgt.n	801e050 <__sflush_r+0x1c>
 801e04a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e04c:	2b00      	cmp	r3, #0
 801e04e:	dd48      	ble.n	801e0e2 <__sflush_r+0xae>
 801e050:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e052:	2e00      	cmp	r6, #0
 801e054:	d045      	beq.n	801e0e2 <__sflush_r+0xae>
 801e056:	2300      	movs	r3, #0
 801e058:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e05c:	682f      	ldr	r7, [r5, #0]
 801e05e:	6a21      	ldr	r1, [r4, #32]
 801e060:	602b      	str	r3, [r5, #0]
 801e062:	d030      	beq.n	801e0c6 <__sflush_r+0x92>
 801e064:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e066:	89a3      	ldrh	r3, [r4, #12]
 801e068:	0759      	lsls	r1, r3, #29
 801e06a:	d505      	bpl.n	801e078 <__sflush_r+0x44>
 801e06c:	6863      	ldr	r3, [r4, #4]
 801e06e:	1ad2      	subs	r2, r2, r3
 801e070:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e072:	b10b      	cbz	r3, 801e078 <__sflush_r+0x44>
 801e074:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e076:	1ad2      	subs	r2, r2, r3
 801e078:	2300      	movs	r3, #0
 801e07a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e07c:	6a21      	ldr	r1, [r4, #32]
 801e07e:	4628      	mov	r0, r5
 801e080:	47b0      	blx	r6
 801e082:	1c43      	adds	r3, r0, #1
 801e084:	89a3      	ldrh	r3, [r4, #12]
 801e086:	d106      	bne.n	801e096 <__sflush_r+0x62>
 801e088:	6829      	ldr	r1, [r5, #0]
 801e08a:	291d      	cmp	r1, #29
 801e08c:	d82b      	bhi.n	801e0e6 <__sflush_r+0xb2>
 801e08e:	4a2a      	ldr	r2, [pc, #168]	@ (801e138 <__sflush_r+0x104>)
 801e090:	40ca      	lsrs	r2, r1
 801e092:	07d6      	lsls	r6, r2, #31
 801e094:	d527      	bpl.n	801e0e6 <__sflush_r+0xb2>
 801e096:	2200      	movs	r2, #0
 801e098:	6062      	str	r2, [r4, #4]
 801e09a:	04d9      	lsls	r1, r3, #19
 801e09c:	6922      	ldr	r2, [r4, #16]
 801e09e:	6022      	str	r2, [r4, #0]
 801e0a0:	d504      	bpl.n	801e0ac <__sflush_r+0x78>
 801e0a2:	1c42      	adds	r2, r0, #1
 801e0a4:	d101      	bne.n	801e0aa <__sflush_r+0x76>
 801e0a6:	682b      	ldr	r3, [r5, #0]
 801e0a8:	b903      	cbnz	r3, 801e0ac <__sflush_r+0x78>
 801e0aa:	6560      	str	r0, [r4, #84]	@ 0x54
 801e0ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e0ae:	602f      	str	r7, [r5, #0]
 801e0b0:	b1b9      	cbz	r1, 801e0e2 <__sflush_r+0xae>
 801e0b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e0b6:	4299      	cmp	r1, r3
 801e0b8:	d002      	beq.n	801e0c0 <__sflush_r+0x8c>
 801e0ba:	4628      	mov	r0, r5
 801e0bc:	f7ff fb4a 	bl	801d754 <_free_r>
 801e0c0:	2300      	movs	r3, #0
 801e0c2:	6363      	str	r3, [r4, #52]	@ 0x34
 801e0c4:	e00d      	b.n	801e0e2 <__sflush_r+0xae>
 801e0c6:	2301      	movs	r3, #1
 801e0c8:	4628      	mov	r0, r5
 801e0ca:	47b0      	blx	r6
 801e0cc:	4602      	mov	r2, r0
 801e0ce:	1c50      	adds	r0, r2, #1
 801e0d0:	d1c9      	bne.n	801e066 <__sflush_r+0x32>
 801e0d2:	682b      	ldr	r3, [r5, #0]
 801e0d4:	2b00      	cmp	r3, #0
 801e0d6:	d0c6      	beq.n	801e066 <__sflush_r+0x32>
 801e0d8:	2b1d      	cmp	r3, #29
 801e0da:	d001      	beq.n	801e0e0 <__sflush_r+0xac>
 801e0dc:	2b16      	cmp	r3, #22
 801e0de:	d11e      	bne.n	801e11e <__sflush_r+0xea>
 801e0e0:	602f      	str	r7, [r5, #0]
 801e0e2:	2000      	movs	r0, #0
 801e0e4:	e022      	b.n	801e12c <__sflush_r+0xf8>
 801e0e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e0ea:	b21b      	sxth	r3, r3
 801e0ec:	e01b      	b.n	801e126 <__sflush_r+0xf2>
 801e0ee:	690f      	ldr	r7, [r1, #16]
 801e0f0:	2f00      	cmp	r7, #0
 801e0f2:	d0f6      	beq.n	801e0e2 <__sflush_r+0xae>
 801e0f4:	0793      	lsls	r3, r2, #30
 801e0f6:	680e      	ldr	r6, [r1, #0]
 801e0f8:	bf08      	it	eq
 801e0fa:	694b      	ldreq	r3, [r1, #20]
 801e0fc:	600f      	str	r7, [r1, #0]
 801e0fe:	bf18      	it	ne
 801e100:	2300      	movne	r3, #0
 801e102:	eba6 0807 	sub.w	r8, r6, r7
 801e106:	608b      	str	r3, [r1, #8]
 801e108:	f1b8 0f00 	cmp.w	r8, #0
 801e10c:	dde9      	ble.n	801e0e2 <__sflush_r+0xae>
 801e10e:	6a21      	ldr	r1, [r4, #32]
 801e110:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e112:	4643      	mov	r3, r8
 801e114:	463a      	mov	r2, r7
 801e116:	4628      	mov	r0, r5
 801e118:	47b0      	blx	r6
 801e11a:	2800      	cmp	r0, #0
 801e11c:	dc08      	bgt.n	801e130 <__sflush_r+0xfc>
 801e11e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e126:	81a3      	strh	r3, [r4, #12]
 801e128:	f04f 30ff 	mov.w	r0, #4294967295
 801e12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e130:	4407      	add	r7, r0
 801e132:	eba8 0800 	sub.w	r8, r8, r0
 801e136:	e7e7      	b.n	801e108 <__sflush_r+0xd4>
 801e138:	20400001 	.word	0x20400001

0801e13c <_fflush_r>:
 801e13c:	b538      	push	{r3, r4, r5, lr}
 801e13e:	690b      	ldr	r3, [r1, #16]
 801e140:	4605      	mov	r5, r0
 801e142:	460c      	mov	r4, r1
 801e144:	b913      	cbnz	r3, 801e14c <_fflush_r+0x10>
 801e146:	2500      	movs	r5, #0
 801e148:	4628      	mov	r0, r5
 801e14a:	bd38      	pop	{r3, r4, r5, pc}
 801e14c:	b118      	cbz	r0, 801e156 <_fflush_r+0x1a>
 801e14e:	6a03      	ldr	r3, [r0, #32]
 801e150:	b90b      	cbnz	r3, 801e156 <_fflush_r+0x1a>
 801e152:	f7ff f905 	bl	801d360 <__sinit>
 801e156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e15a:	2b00      	cmp	r3, #0
 801e15c:	d0f3      	beq.n	801e146 <_fflush_r+0xa>
 801e15e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e160:	07d0      	lsls	r0, r2, #31
 801e162:	d404      	bmi.n	801e16e <_fflush_r+0x32>
 801e164:	0599      	lsls	r1, r3, #22
 801e166:	d402      	bmi.n	801e16e <_fflush_r+0x32>
 801e168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e16a:	f7ff fac4 	bl	801d6f6 <__retarget_lock_acquire_recursive>
 801e16e:	4628      	mov	r0, r5
 801e170:	4621      	mov	r1, r4
 801e172:	f7ff ff5f 	bl	801e034 <__sflush_r>
 801e176:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e178:	07da      	lsls	r2, r3, #31
 801e17a:	4605      	mov	r5, r0
 801e17c:	d4e4      	bmi.n	801e148 <_fflush_r+0xc>
 801e17e:	89a3      	ldrh	r3, [r4, #12]
 801e180:	059b      	lsls	r3, r3, #22
 801e182:	d4e1      	bmi.n	801e148 <_fflush_r+0xc>
 801e184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e186:	f7ff fab7 	bl	801d6f8 <__retarget_lock_release_recursive>
 801e18a:	e7dd      	b.n	801e148 <_fflush_r+0xc>

0801e18c <fiprintf>:
 801e18c:	b40e      	push	{r1, r2, r3}
 801e18e:	b503      	push	{r0, r1, lr}
 801e190:	4601      	mov	r1, r0
 801e192:	ab03      	add	r3, sp, #12
 801e194:	4805      	ldr	r0, [pc, #20]	@ (801e1ac <fiprintf+0x20>)
 801e196:	f853 2b04 	ldr.w	r2, [r3], #4
 801e19a:	6800      	ldr	r0, [r0, #0]
 801e19c:	9301      	str	r3, [sp, #4]
 801e19e:	f7ff fca5 	bl	801daec <_vfiprintf_r>
 801e1a2:	b002      	add	sp, #8
 801e1a4:	f85d eb04 	ldr.w	lr, [sp], #4
 801e1a8:	b003      	add	sp, #12
 801e1aa:	4770      	bx	lr
 801e1ac:	2000013c 	.word	0x2000013c

0801e1b0 <__swbuf_r>:
 801e1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1b2:	460e      	mov	r6, r1
 801e1b4:	4614      	mov	r4, r2
 801e1b6:	4605      	mov	r5, r0
 801e1b8:	b118      	cbz	r0, 801e1c2 <__swbuf_r+0x12>
 801e1ba:	6a03      	ldr	r3, [r0, #32]
 801e1bc:	b90b      	cbnz	r3, 801e1c2 <__swbuf_r+0x12>
 801e1be:	f7ff f8cf 	bl	801d360 <__sinit>
 801e1c2:	69a3      	ldr	r3, [r4, #24]
 801e1c4:	60a3      	str	r3, [r4, #8]
 801e1c6:	89a3      	ldrh	r3, [r4, #12]
 801e1c8:	071a      	lsls	r2, r3, #28
 801e1ca:	d501      	bpl.n	801e1d0 <__swbuf_r+0x20>
 801e1cc:	6923      	ldr	r3, [r4, #16]
 801e1ce:	b943      	cbnz	r3, 801e1e2 <__swbuf_r+0x32>
 801e1d0:	4621      	mov	r1, r4
 801e1d2:	4628      	mov	r0, r5
 801e1d4:	f000 f82a 	bl	801e22c <__swsetup_r>
 801e1d8:	b118      	cbz	r0, 801e1e2 <__swbuf_r+0x32>
 801e1da:	f04f 37ff 	mov.w	r7, #4294967295
 801e1de:	4638      	mov	r0, r7
 801e1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e1e2:	6823      	ldr	r3, [r4, #0]
 801e1e4:	6922      	ldr	r2, [r4, #16]
 801e1e6:	1a98      	subs	r0, r3, r2
 801e1e8:	6963      	ldr	r3, [r4, #20]
 801e1ea:	b2f6      	uxtb	r6, r6
 801e1ec:	4283      	cmp	r3, r0
 801e1ee:	4637      	mov	r7, r6
 801e1f0:	dc05      	bgt.n	801e1fe <__swbuf_r+0x4e>
 801e1f2:	4621      	mov	r1, r4
 801e1f4:	4628      	mov	r0, r5
 801e1f6:	f7ff ffa1 	bl	801e13c <_fflush_r>
 801e1fa:	2800      	cmp	r0, #0
 801e1fc:	d1ed      	bne.n	801e1da <__swbuf_r+0x2a>
 801e1fe:	68a3      	ldr	r3, [r4, #8]
 801e200:	3b01      	subs	r3, #1
 801e202:	60a3      	str	r3, [r4, #8]
 801e204:	6823      	ldr	r3, [r4, #0]
 801e206:	1c5a      	adds	r2, r3, #1
 801e208:	6022      	str	r2, [r4, #0]
 801e20a:	701e      	strb	r6, [r3, #0]
 801e20c:	6962      	ldr	r2, [r4, #20]
 801e20e:	1c43      	adds	r3, r0, #1
 801e210:	429a      	cmp	r2, r3
 801e212:	d004      	beq.n	801e21e <__swbuf_r+0x6e>
 801e214:	89a3      	ldrh	r3, [r4, #12]
 801e216:	07db      	lsls	r3, r3, #31
 801e218:	d5e1      	bpl.n	801e1de <__swbuf_r+0x2e>
 801e21a:	2e0a      	cmp	r6, #10
 801e21c:	d1df      	bne.n	801e1de <__swbuf_r+0x2e>
 801e21e:	4621      	mov	r1, r4
 801e220:	4628      	mov	r0, r5
 801e222:	f7ff ff8b 	bl	801e13c <_fflush_r>
 801e226:	2800      	cmp	r0, #0
 801e228:	d0d9      	beq.n	801e1de <__swbuf_r+0x2e>
 801e22a:	e7d6      	b.n	801e1da <__swbuf_r+0x2a>

0801e22c <__swsetup_r>:
 801e22c:	b538      	push	{r3, r4, r5, lr}
 801e22e:	4b29      	ldr	r3, [pc, #164]	@ (801e2d4 <__swsetup_r+0xa8>)
 801e230:	4605      	mov	r5, r0
 801e232:	6818      	ldr	r0, [r3, #0]
 801e234:	460c      	mov	r4, r1
 801e236:	b118      	cbz	r0, 801e240 <__swsetup_r+0x14>
 801e238:	6a03      	ldr	r3, [r0, #32]
 801e23a:	b90b      	cbnz	r3, 801e240 <__swsetup_r+0x14>
 801e23c:	f7ff f890 	bl	801d360 <__sinit>
 801e240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e244:	0719      	lsls	r1, r3, #28
 801e246:	d422      	bmi.n	801e28e <__swsetup_r+0x62>
 801e248:	06da      	lsls	r2, r3, #27
 801e24a:	d407      	bmi.n	801e25c <__swsetup_r+0x30>
 801e24c:	2209      	movs	r2, #9
 801e24e:	602a      	str	r2, [r5, #0]
 801e250:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e254:	81a3      	strh	r3, [r4, #12]
 801e256:	f04f 30ff 	mov.w	r0, #4294967295
 801e25a:	e033      	b.n	801e2c4 <__swsetup_r+0x98>
 801e25c:	0758      	lsls	r0, r3, #29
 801e25e:	d512      	bpl.n	801e286 <__swsetup_r+0x5a>
 801e260:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e262:	b141      	cbz	r1, 801e276 <__swsetup_r+0x4a>
 801e264:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e268:	4299      	cmp	r1, r3
 801e26a:	d002      	beq.n	801e272 <__swsetup_r+0x46>
 801e26c:	4628      	mov	r0, r5
 801e26e:	f7ff fa71 	bl	801d754 <_free_r>
 801e272:	2300      	movs	r3, #0
 801e274:	6363      	str	r3, [r4, #52]	@ 0x34
 801e276:	89a3      	ldrh	r3, [r4, #12]
 801e278:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e27c:	81a3      	strh	r3, [r4, #12]
 801e27e:	2300      	movs	r3, #0
 801e280:	6063      	str	r3, [r4, #4]
 801e282:	6923      	ldr	r3, [r4, #16]
 801e284:	6023      	str	r3, [r4, #0]
 801e286:	89a3      	ldrh	r3, [r4, #12]
 801e288:	f043 0308 	orr.w	r3, r3, #8
 801e28c:	81a3      	strh	r3, [r4, #12]
 801e28e:	6923      	ldr	r3, [r4, #16]
 801e290:	b94b      	cbnz	r3, 801e2a6 <__swsetup_r+0x7a>
 801e292:	89a3      	ldrh	r3, [r4, #12]
 801e294:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e29c:	d003      	beq.n	801e2a6 <__swsetup_r+0x7a>
 801e29e:	4621      	mov	r1, r4
 801e2a0:	4628      	mov	r0, r5
 801e2a2:	f000 f874 	bl	801e38e <__smakebuf_r>
 801e2a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e2aa:	f013 0201 	ands.w	r2, r3, #1
 801e2ae:	d00a      	beq.n	801e2c6 <__swsetup_r+0x9a>
 801e2b0:	2200      	movs	r2, #0
 801e2b2:	60a2      	str	r2, [r4, #8]
 801e2b4:	6962      	ldr	r2, [r4, #20]
 801e2b6:	4252      	negs	r2, r2
 801e2b8:	61a2      	str	r2, [r4, #24]
 801e2ba:	6922      	ldr	r2, [r4, #16]
 801e2bc:	b942      	cbnz	r2, 801e2d0 <__swsetup_r+0xa4>
 801e2be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e2c2:	d1c5      	bne.n	801e250 <__swsetup_r+0x24>
 801e2c4:	bd38      	pop	{r3, r4, r5, pc}
 801e2c6:	0799      	lsls	r1, r3, #30
 801e2c8:	bf58      	it	pl
 801e2ca:	6962      	ldrpl	r2, [r4, #20]
 801e2cc:	60a2      	str	r2, [r4, #8]
 801e2ce:	e7f4      	b.n	801e2ba <__swsetup_r+0x8e>
 801e2d0:	2000      	movs	r0, #0
 801e2d2:	e7f7      	b.n	801e2c4 <__swsetup_r+0x98>
 801e2d4:	2000013c 	.word	0x2000013c

0801e2d8 <abort>:
 801e2d8:	b508      	push	{r3, lr}
 801e2da:	2006      	movs	r0, #6
 801e2dc:	f000 f8bc 	bl	801e458 <raise>
 801e2e0:	2001      	movs	r0, #1
 801e2e2:	f7e3 fdc9 	bl	8001e78 <_exit>

0801e2e6 <_realloc_r>:
 801e2e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e2ea:	4607      	mov	r7, r0
 801e2ec:	4614      	mov	r4, r2
 801e2ee:	460d      	mov	r5, r1
 801e2f0:	b921      	cbnz	r1, 801e2fc <_realloc_r+0x16>
 801e2f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e2f6:	4611      	mov	r1, r2
 801e2f8:	f7fe bedc 	b.w	801d0b4 <_malloc_r>
 801e2fc:	b92a      	cbnz	r2, 801e30a <_realloc_r+0x24>
 801e2fe:	f7ff fa29 	bl	801d754 <_free_r>
 801e302:	4625      	mov	r5, r4
 801e304:	4628      	mov	r0, r5
 801e306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e30a:	f000 f8e3 	bl	801e4d4 <_malloc_usable_size_r>
 801e30e:	4284      	cmp	r4, r0
 801e310:	4606      	mov	r6, r0
 801e312:	d802      	bhi.n	801e31a <_realloc_r+0x34>
 801e314:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e318:	d8f4      	bhi.n	801e304 <_realloc_r+0x1e>
 801e31a:	4621      	mov	r1, r4
 801e31c:	4638      	mov	r0, r7
 801e31e:	f7fe fec9 	bl	801d0b4 <_malloc_r>
 801e322:	4680      	mov	r8, r0
 801e324:	b908      	cbnz	r0, 801e32a <_realloc_r+0x44>
 801e326:	4645      	mov	r5, r8
 801e328:	e7ec      	b.n	801e304 <_realloc_r+0x1e>
 801e32a:	42b4      	cmp	r4, r6
 801e32c:	4622      	mov	r2, r4
 801e32e:	4629      	mov	r1, r5
 801e330:	bf28      	it	cs
 801e332:	4632      	movcs	r2, r6
 801e334:	f7ff f9e1 	bl	801d6fa <memcpy>
 801e338:	4629      	mov	r1, r5
 801e33a:	4638      	mov	r0, r7
 801e33c:	f7ff fa0a 	bl	801d754 <_free_r>
 801e340:	e7f1      	b.n	801e326 <_realloc_r+0x40>

0801e342 <__swhatbuf_r>:
 801e342:	b570      	push	{r4, r5, r6, lr}
 801e344:	460c      	mov	r4, r1
 801e346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e34a:	2900      	cmp	r1, #0
 801e34c:	b096      	sub	sp, #88	@ 0x58
 801e34e:	4615      	mov	r5, r2
 801e350:	461e      	mov	r6, r3
 801e352:	da0d      	bge.n	801e370 <__swhatbuf_r+0x2e>
 801e354:	89a3      	ldrh	r3, [r4, #12]
 801e356:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e35a:	f04f 0100 	mov.w	r1, #0
 801e35e:	bf14      	ite	ne
 801e360:	2340      	movne	r3, #64	@ 0x40
 801e362:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e366:	2000      	movs	r0, #0
 801e368:	6031      	str	r1, [r6, #0]
 801e36a:	602b      	str	r3, [r5, #0]
 801e36c:	b016      	add	sp, #88	@ 0x58
 801e36e:	bd70      	pop	{r4, r5, r6, pc}
 801e370:	466a      	mov	r2, sp
 801e372:	f000 f879 	bl	801e468 <_fstat_r>
 801e376:	2800      	cmp	r0, #0
 801e378:	dbec      	blt.n	801e354 <__swhatbuf_r+0x12>
 801e37a:	9901      	ldr	r1, [sp, #4]
 801e37c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e380:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e384:	4259      	negs	r1, r3
 801e386:	4159      	adcs	r1, r3
 801e388:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e38c:	e7eb      	b.n	801e366 <__swhatbuf_r+0x24>

0801e38e <__smakebuf_r>:
 801e38e:	898b      	ldrh	r3, [r1, #12]
 801e390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e392:	079d      	lsls	r5, r3, #30
 801e394:	4606      	mov	r6, r0
 801e396:	460c      	mov	r4, r1
 801e398:	d507      	bpl.n	801e3aa <__smakebuf_r+0x1c>
 801e39a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e39e:	6023      	str	r3, [r4, #0]
 801e3a0:	6123      	str	r3, [r4, #16]
 801e3a2:	2301      	movs	r3, #1
 801e3a4:	6163      	str	r3, [r4, #20]
 801e3a6:	b003      	add	sp, #12
 801e3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e3aa:	ab01      	add	r3, sp, #4
 801e3ac:	466a      	mov	r2, sp
 801e3ae:	f7ff ffc8 	bl	801e342 <__swhatbuf_r>
 801e3b2:	9f00      	ldr	r7, [sp, #0]
 801e3b4:	4605      	mov	r5, r0
 801e3b6:	4639      	mov	r1, r7
 801e3b8:	4630      	mov	r0, r6
 801e3ba:	f7fe fe7b 	bl	801d0b4 <_malloc_r>
 801e3be:	b948      	cbnz	r0, 801e3d4 <__smakebuf_r+0x46>
 801e3c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e3c4:	059a      	lsls	r2, r3, #22
 801e3c6:	d4ee      	bmi.n	801e3a6 <__smakebuf_r+0x18>
 801e3c8:	f023 0303 	bic.w	r3, r3, #3
 801e3cc:	f043 0302 	orr.w	r3, r3, #2
 801e3d0:	81a3      	strh	r3, [r4, #12]
 801e3d2:	e7e2      	b.n	801e39a <__smakebuf_r+0xc>
 801e3d4:	89a3      	ldrh	r3, [r4, #12]
 801e3d6:	6020      	str	r0, [r4, #0]
 801e3d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e3dc:	81a3      	strh	r3, [r4, #12]
 801e3de:	9b01      	ldr	r3, [sp, #4]
 801e3e0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e3e4:	b15b      	cbz	r3, 801e3fe <__smakebuf_r+0x70>
 801e3e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e3ea:	4630      	mov	r0, r6
 801e3ec:	f000 f84e 	bl	801e48c <_isatty_r>
 801e3f0:	b128      	cbz	r0, 801e3fe <__smakebuf_r+0x70>
 801e3f2:	89a3      	ldrh	r3, [r4, #12]
 801e3f4:	f023 0303 	bic.w	r3, r3, #3
 801e3f8:	f043 0301 	orr.w	r3, r3, #1
 801e3fc:	81a3      	strh	r3, [r4, #12]
 801e3fe:	89a3      	ldrh	r3, [r4, #12]
 801e400:	431d      	orrs	r5, r3
 801e402:	81a5      	strh	r5, [r4, #12]
 801e404:	e7cf      	b.n	801e3a6 <__smakebuf_r+0x18>

0801e406 <_raise_r>:
 801e406:	291f      	cmp	r1, #31
 801e408:	b538      	push	{r3, r4, r5, lr}
 801e40a:	4605      	mov	r5, r0
 801e40c:	460c      	mov	r4, r1
 801e40e:	d904      	bls.n	801e41a <_raise_r+0x14>
 801e410:	2316      	movs	r3, #22
 801e412:	6003      	str	r3, [r0, #0]
 801e414:	f04f 30ff 	mov.w	r0, #4294967295
 801e418:	bd38      	pop	{r3, r4, r5, pc}
 801e41a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e41c:	b112      	cbz	r2, 801e424 <_raise_r+0x1e>
 801e41e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e422:	b94b      	cbnz	r3, 801e438 <_raise_r+0x32>
 801e424:	4628      	mov	r0, r5
 801e426:	f000 f853 	bl	801e4d0 <_getpid_r>
 801e42a:	4622      	mov	r2, r4
 801e42c:	4601      	mov	r1, r0
 801e42e:	4628      	mov	r0, r5
 801e430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e434:	f000 b83a 	b.w	801e4ac <_kill_r>
 801e438:	2b01      	cmp	r3, #1
 801e43a:	d00a      	beq.n	801e452 <_raise_r+0x4c>
 801e43c:	1c59      	adds	r1, r3, #1
 801e43e:	d103      	bne.n	801e448 <_raise_r+0x42>
 801e440:	2316      	movs	r3, #22
 801e442:	6003      	str	r3, [r0, #0]
 801e444:	2001      	movs	r0, #1
 801e446:	e7e7      	b.n	801e418 <_raise_r+0x12>
 801e448:	2100      	movs	r1, #0
 801e44a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e44e:	4620      	mov	r0, r4
 801e450:	4798      	blx	r3
 801e452:	2000      	movs	r0, #0
 801e454:	e7e0      	b.n	801e418 <_raise_r+0x12>
	...

0801e458 <raise>:
 801e458:	4b02      	ldr	r3, [pc, #8]	@ (801e464 <raise+0xc>)
 801e45a:	4601      	mov	r1, r0
 801e45c:	6818      	ldr	r0, [r3, #0]
 801e45e:	f7ff bfd2 	b.w	801e406 <_raise_r>
 801e462:	bf00      	nop
 801e464:	2000013c 	.word	0x2000013c

0801e468 <_fstat_r>:
 801e468:	b538      	push	{r3, r4, r5, lr}
 801e46a:	4d07      	ldr	r5, [pc, #28]	@ (801e488 <_fstat_r+0x20>)
 801e46c:	2300      	movs	r3, #0
 801e46e:	4604      	mov	r4, r0
 801e470:	4608      	mov	r0, r1
 801e472:	4611      	mov	r1, r2
 801e474:	602b      	str	r3, [r5, #0]
 801e476:	f7e3 fd4f 	bl	8001f18 <_fstat>
 801e47a:	1c43      	adds	r3, r0, #1
 801e47c:	d102      	bne.n	801e484 <_fstat_r+0x1c>
 801e47e:	682b      	ldr	r3, [r5, #0]
 801e480:	b103      	cbz	r3, 801e484 <_fstat_r+0x1c>
 801e482:	6023      	str	r3, [r4, #0]
 801e484:	bd38      	pop	{r3, r4, r5, pc}
 801e486:	bf00      	nop
 801e488:	200100bc 	.word	0x200100bc

0801e48c <_isatty_r>:
 801e48c:	b538      	push	{r3, r4, r5, lr}
 801e48e:	4d06      	ldr	r5, [pc, #24]	@ (801e4a8 <_isatty_r+0x1c>)
 801e490:	2300      	movs	r3, #0
 801e492:	4604      	mov	r4, r0
 801e494:	4608      	mov	r0, r1
 801e496:	602b      	str	r3, [r5, #0]
 801e498:	f7e3 fd4e 	bl	8001f38 <_isatty>
 801e49c:	1c43      	adds	r3, r0, #1
 801e49e:	d102      	bne.n	801e4a6 <_isatty_r+0x1a>
 801e4a0:	682b      	ldr	r3, [r5, #0]
 801e4a2:	b103      	cbz	r3, 801e4a6 <_isatty_r+0x1a>
 801e4a4:	6023      	str	r3, [r4, #0]
 801e4a6:	bd38      	pop	{r3, r4, r5, pc}
 801e4a8:	200100bc 	.word	0x200100bc

0801e4ac <_kill_r>:
 801e4ac:	b538      	push	{r3, r4, r5, lr}
 801e4ae:	4d07      	ldr	r5, [pc, #28]	@ (801e4cc <_kill_r+0x20>)
 801e4b0:	2300      	movs	r3, #0
 801e4b2:	4604      	mov	r4, r0
 801e4b4:	4608      	mov	r0, r1
 801e4b6:	4611      	mov	r1, r2
 801e4b8:	602b      	str	r3, [r5, #0]
 801e4ba:	f7e3 fccb 	bl	8001e54 <_kill>
 801e4be:	1c43      	adds	r3, r0, #1
 801e4c0:	d102      	bne.n	801e4c8 <_kill_r+0x1c>
 801e4c2:	682b      	ldr	r3, [r5, #0]
 801e4c4:	b103      	cbz	r3, 801e4c8 <_kill_r+0x1c>
 801e4c6:	6023      	str	r3, [r4, #0]
 801e4c8:	bd38      	pop	{r3, r4, r5, pc}
 801e4ca:	bf00      	nop
 801e4cc:	200100bc 	.word	0x200100bc

0801e4d0 <_getpid_r>:
 801e4d0:	f7e3 bcb8 	b.w	8001e44 <_getpid>

0801e4d4 <_malloc_usable_size_r>:
 801e4d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e4d8:	1f18      	subs	r0, r3, #4
 801e4da:	2b00      	cmp	r3, #0
 801e4dc:	bfbc      	itt	lt
 801e4de:	580b      	ldrlt	r3, [r1, r0]
 801e4e0:	18c0      	addlt	r0, r0, r3
 801e4e2:	4770      	bx	lr

0801e4e4 <_init>:
 801e4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e4e6:	bf00      	nop
 801e4e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e4ea:	bc08      	pop	{r3}
 801e4ec:	469e      	mov	lr, r3
 801e4ee:	4770      	bx	lr

0801e4f0 <_fini>:
 801e4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e4f2:	bf00      	nop
 801e4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e4f6:	bc08      	pop	{r3}
 801e4f8:	469e      	mov	lr, r3
 801e4fa:	4770      	bx	lr
