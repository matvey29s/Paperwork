
ethernet_http.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f07c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00049308  0801f27c  0801f27c  0002027c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08068584  08068584  0006a2d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08068584  08068584  00069584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806858c  0806858c  0006a2d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806858c  0806858c  0006958c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08068590  08068590  00069590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000194  20000000  08068594  0006a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000194  08068728  0006a194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000234  080687c8  0006a234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000fe84  200002d4  08068868  0006a2d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20010158  08068868  0006b158  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0006a2d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00042339  00000000  00000000  0006a302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a142  00000000  00000000  000ac63b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002ee8  00000000  00000000  000b6780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000024e4  00000000  00000000  000b9668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003e376  00000000  00000000  000bbb4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00049fee  00000000  00000000  000f9ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00126bbc  00000000  00000000  00143eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0026aa6c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ccc4  00000000  00000000  0026aab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000058  00000000  00000000  00277774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002d4 	.word	0x200002d4
 800021c:	00000000 	.word	0x00000000
 8000220:	0801f264 	.word	0x0801f264

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002d8 	.word	0x200002d8
 800023c:	0801f264 	.word	0x0801f264

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9d3 	b.w	80006d8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b988 	b.w	80006d8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	468e      	mov	lr, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	4688      	mov	r8, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d962      	bls.n	80004bc <__udivmoddi4+0xdc>
 80003f6:	fab2 f682 	clz	r6, r2
 80003fa:	b14e      	cbz	r6, 8000410 <__udivmoddi4+0x30>
 80003fc:	f1c6 0320 	rsb	r3, r6, #32
 8000400:	fa01 f806 	lsl.w	r8, r1, r6
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	40b7      	lsls	r7, r6
 800040a:	ea43 0808 	orr.w	r8, r3, r8
 800040e:	40b4      	lsls	r4, r6
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fbb8 f1fe 	udiv	r1, r8, lr
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fb01 f20c 	mul.w	r2, r1, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0x62>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f101 30ff 	add.w	r0, r1, #4294967295
 8000434:	f080 80ea 	bcs.w	800060c <__udivmoddi4+0x22c>
 8000438:	429a      	cmp	r2, r3
 800043a:	f240 80e7 	bls.w	800060c <__udivmoddi4+0x22c>
 800043e:	3902      	subs	r1, #2
 8000440:	443b      	add	r3, r7
 8000442:	1a9a      	subs	r2, r3, r2
 8000444:	b2a3      	uxth	r3, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000452:	fb00 fc0c 	mul.w	ip, r0, ip
 8000456:	459c      	cmp	ip, r3
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x8e>
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	f080 80d6 	bcs.w	8000610 <__udivmoddi4+0x230>
 8000464:	459c      	cmp	ip, r3
 8000466:	f240 80d3 	bls.w	8000610 <__udivmoddi4+0x230>
 800046a:	443b      	add	r3, r7
 800046c:	3802      	subs	r0, #2
 800046e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000472:	eba3 030c 	sub.w	r3, r3, ip
 8000476:	2100      	movs	r1, #0
 8000478:	b11d      	cbz	r5, 8000482 <__udivmoddi4+0xa2>
 800047a:	40f3      	lsrs	r3, r6
 800047c:	2200      	movs	r2, #0
 800047e:	e9c5 3200 	strd	r3, r2, [r5]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d905      	bls.n	8000496 <__udivmoddi4+0xb6>
 800048a:	b10d      	cbz	r5, 8000490 <__udivmoddi4+0xb0>
 800048c:	e9c5 0100 	strd	r0, r1, [r5]
 8000490:	2100      	movs	r1, #0
 8000492:	4608      	mov	r0, r1
 8000494:	e7f5      	b.n	8000482 <__udivmoddi4+0xa2>
 8000496:	fab3 f183 	clz	r1, r3
 800049a:	2900      	cmp	r1, #0
 800049c:	d146      	bne.n	800052c <__udivmoddi4+0x14c>
 800049e:	4573      	cmp	r3, lr
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xc8>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 8105 	bhi.w	80006b2 <__udivmoddi4+0x2d2>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	4690      	mov	r8, r2
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e5      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004b6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ba:	e7e2      	b.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	f000 8090 	beq.w	80005e2 <__udivmoddi4+0x202>
 80004c2:	fab2 f682 	clz	r6, r2
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	f040 80a4 	bne.w	8000614 <__udivmoddi4+0x234>
 80004cc:	1a8a      	subs	r2, r1, r2
 80004ce:	0c03      	lsrs	r3, r0, #16
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	b280      	uxth	r0, r0
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	2101      	movs	r1, #1
 80004da:	fbb2 fcfe 	udiv	ip, r2, lr
 80004de:	fb0e 221c 	mls	r2, lr, ip, r2
 80004e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x11e>
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x11c>
 80004f6:	429a      	cmp	r2, r3
 80004f8:	f200 80e0 	bhi.w	80006bc <__udivmoddi4+0x2dc>
 80004fc:	46c4      	mov	ip, r8
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	fbb3 f2fe 	udiv	r2, r3, lr
 8000504:	fb0e 3312 	mls	r3, lr, r2, r3
 8000508:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800050c:	fb02 f404 	mul.w	r4, r2, r4
 8000510:	429c      	cmp	r4, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x144>
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	f102 30ff 	add.w	r0, r2, #4294967295
 800051a:	d202      	bcs.n	8000522 <__udivmoddi4+0x142>
 800051c:	429c      	cmp	r4, r3
 800051e:	f200 80ca 	bhi.w	80006b6 <__udivmoddi4+0x2d6>
 8000522:	4602      	mov	r2, r0
 8000524:	1b1b      	subs	r3, r3, r4
 8000526:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800052a:	e7a5      	b.n	8000478 <__udivmoddi4+0x98>
 800052c:	f1c1 0620 	rsb	r6, r1, #32
 8000530:	408b      	lsls	r3, r1
 8000532:	fa22 f706 	lsr.w	r7, r2, r6
 8000536:	431f      	orrs	r7, r3
 8000538:	fa0e f401 	lsl.w	r4, lr, r1
 800053c:	fa20 f306 	lsr.w	r3, r0, r6
 8000540:	fa2e fe06 	lsr.w	lr, lr, r6
 8000544:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000548:	4323      	orrs	r3, r4
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	fa1f fc87 	uxth.w	ip, r7
 8000552:	fbbe f0f9 	udiv	r0, lr, r9
 8000556:	0c1c      	lsrs	r4, r3, #16
 8000558:	fb09 ee10 	mls	lr, r9, r0, lr
 800055c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000560:	fb00 fe0c 	mul.w	lr, r0, ip
 8000564:	45a6      	cmp	lr, r4
 8000566:	fa02 f201 	lsl.w	r2, r2, r1
 800056a:	d909      	bls.n	8000580 <__udivmoddi4+0x1a0>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000572:	f080 809c 	bcs.w	80006ae <__udivmoddi4+0x2ce>
 8000576:	45a6      	cmp	lr, r4
 8000578:	f240 8099 	bls.w	80006ae <__udivmoddi4+0x2ce>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	eba4 040e 	sub.w	r4, r4, lr
 8000584:	fa1f fe83 	uxth.w	lr, r3
 8000588:	fbb4 f3f9 	udiv	r3, r4, r9
 800058c:	fb09 4413 	mls	r4, r9, r3, r4
 8000590:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000594:	fb03 fc0c 	mul.w	ip, r3, ip
 8000598:	45a4      	cmp	ip, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x1ce>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f103 3eff 	add.w	lr, r3, #4294967295
 80005a2:	f080 8082 	bcs.w	80006aa <__udivmoddi4+0x2ca>
 80005a6:	45a4      	cmp	ip, r4
 80005a8:	d97f      	bls.n	80006aa <__udivmoddi4+0x2ca>
 80005aa:	3b02      	subs	r3, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005b2:	eba4 040c 	sub.w	r4, r4, ip
 80005b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ba:	4564      	cmp	r4, ip
 80005bc:	4673      	mov	r3, lr
 80005be:	46e1      	mov	r9, ip
 80005c0:	d362      	bcc.n	8000688 <__udivmoddi4+0x2a8>
 80005c2:	d05f      	beq.n	8000684 <__udivmoddi4+0x2a4>
 80005c4:	b15d      	cbz	r5, 80005de <__udivmoddi4+0x1fe>
 80005c6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ca:	eb64 0409 	sbc.w	r4, r4, r9
 80005ce:	fa04 f606 	lsl.w	r6, r4, r6
 80005d2:	fa22 f301 	lsr.w	r3, r2, r1
 80005d6:	431e      	orrs	r6, r3
 80005d8:	40cc      	lsrs	r4, r1
 80005da:	e9c5 6400 	strd	r6, r4, [r5]
 80005de:	2100      	movs	r1, #0
 80005e0:	e74f      	b.n	8000482 <__udivmoddi4+0xa2>
 80005e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005e6:	0c01      	lsrs	r1, r0, #16
 80005e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005ec:	b280      	uxth	r0, r0
 80005ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005f2:	463b      	mov	r3, r7
 80005f4:	4638      	mov	r0, r7
 80005f6:	463c      	mov	r4, r7
 80005f8:	46b8      	mov	r8, r7
 80005fa:	46be      	mov	lr, r7
 80005fc:	2620      	movs	r6, #32
 80005fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000602:	eba2 0208 	sub.w	r2, r2, r8
 8000606:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800060a:	e766      	b.n	80004da <__udivmoddi4+0xfa>
 800060c:	4601      	mov	r1, r0
 800060e:	e718      	b.n	8000442 <__udivmoddi4+0x62>
 8000610:	4610      	mov	r0, r2
 8000612:	e72c      	b.n	800046e <__udivmoddi4+0x8e>
 8000614:	f1c6 0220 	rsb	r2, r6, #32
 8000618:	fa2e f302 	lsr.w	r3, lr, r2
 800061c:	40b7      	lsls	r7, r6
 800061e:	40b1      	lsls	r1, r6
 8000620:	fa20 f202 	lsr.w	r2, r0, r2
 8000624:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000628:	430a      	orrs	r2, r1
 800062a:	fbb3 f8fe 	udiv	r8, r3, lr
 800062e:	b2bc      	uxth	r4, r7
 8000630:	fb0e 3318 	mls	r3, lr, r8, r3
 8000634:	0c11      	lsrs	r1, r2, #16
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb08 f904 	mul.w	r9, r8, r4
 800063e:	40b0      	lsls	r0, r6
 8000640:	4589      	cmp	r9, r1
 8000642:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000646:	b280      	uxth	r0, r0
 8000648:	d93e      	bls.n	80006c8 <__udivmoddi4+0x2e8>
 800064a:	1879      	adds	r1, r7, r1
 800064c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000650:	d201      	bcs.n	8000656 <__udivmoddi4+0x276>
 8000652:	4589      	cmp	r9, r1
 8000654:	d81f      	bhi.n	8000696 <__udivmoddi4+0x2b6>
 8000656:	eba1 0109 	sub.w	r1, r1, r9
 800065a:	fbb1 f9fe 	udiv	r9, r1, lr
 800065e:	fb09 f804 	mul.w	r8, r9, r4
 8000662:	fb0e 1119 	mls	r1, lr, r9, r1
 8000666:	b292      	uxth	r2, r2
 8000668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800066c:	4542      	cmp	r2, r8
 800066e:	d229      	bcs.n	80006c4 <__udivmoddi4+0x2e4>
 8000670:	18ba      	adds	r2, r7, r2
 8000672:	f109 31ff 	add.w	r1, r9, #4294967295
 8000676:	d2c4      	bcs.n	8000602 <__udivmoddi4+0x222>
 8000678:	4542      	cmp	r2, r8
 800067a:	d2c2      	bcs.n	8000602 <__udivmoddi4+0x222>
 800067c:	f1a9 0102 	sub.w	r1, r9, #2
 8000680:	443a      	add	r2, r7
 8000682:	e7be      	b.n	8000602 <__udivmoddi4+0x222>
 8000684:	45f0      	cmp	r8, lr
 8000686:	d29d      	bcs.n	80005c4 <__udivmoddi4+0x1e4>
 8000688:	ebbe 0302 	subs.w	r3, lr, r2
 800068c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000690:	3801      	subs	r0, #1
 8000692:	46e1      	mov	r9, ip
 8000694:	e796      	b.n	80005c4 <__udivmoddi4+0x1e4>
 8000696:	eba7 0909 	sub.w	r9, r7, r9
 800069a:	4449      	add	r1, r9
 800069c:	f1a8 0c02 	sub.w	ip, r8, #2
 80006a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a4:	fb09 f804 	mul.w	r8, r9, r4
 80006a8:	e7db      	b.n	8000662 <__udivmoddi4+0x282>
 80006aa:	4673      	mov	r3, lr
 80006ac:	e77f      	b.n	80005ae <__udivmoddi4+0x1ce>
 80006ae:	4650      	mov	r0, sl
 80006b0:	e766      	b.n	8000580 <__udivmoddi4+0x1a0>
 80006b2:	4608      	mov	r0, r1
 80006b4:	e6fd      	b.n	80004b2 <__udivmoddi4+0xd2>
 80006b6:	443b      	add	r3, r7
 80006b8:	3a02      	subs	r2, #2
 80006ba:	e733      	b.n	8000524 <__udivmoddi4+0x144>
 80006bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c0:	443b      	add	r3, r7
 80006c2:	e71c      	b.n	80004fe <__udivmoddi4+0x11e>
 80006c4:	4649      	mov	r1, r9
 80006c6:	e79c      	b.n	8000602 <__udivmoddi4+0x222>
 80006c8:	eba1 0109 	sub.w	r1, r1, r9
 80006cc:	46c4      	mov	ip, r8
 80006ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d2:	fb09 f804 	mul.w	r8, r9, r4
 80006d6:	e7c4      	b.n	8000662 <__udivmoddi4+0x282>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08c      	sub	sp, #48	@ 0x30
 80006e0:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	9302      	str	r3, [sp, #8]
 80006e8:	2319      	movs	r3, #25
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	463b      	mov	r3, r7
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	2288      	movs	r2, #136	@ 0x88
 80006f4:	21ec      	movs	r1, #236	@ 0xec
 80006f6:	485f      	ldr	r0, [pc, #380]	@ (8000874 <TrimRead+0x198>)
 80006f8:	f003 febc 	bl	8004474 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80006fc:	463b      	mov	r3, r7
 80006fe:	3319      	adds	r3, #25
 8000700:	f04f 32ff 	mov.w	r2, #4294967295
 8000704:	9202      	str	r2, [sp, #8]
 8000706:	2207      	movs	r2, #7
 8000708:	9201      	str	r2, [sp, #4]
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2301      	movs	r3, #1
 800070e:	22e1      	movs	r2, #225	@ 0xe1
 8000710:	21ec      	movs	r1, #236	@ 0xec
 8000712:	4858      	ldr	r0, [pc, #352]	@ (8000874 <TrimRead+0x198>)
 8000714:	f003 feae 	bl	8004474 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8000718:	787b      	ldrb	r3, [r7, #1]
 800071a:	b21b      	sxth	r3, r3
 800071c:	021b      	lsls	r3, r3, #8
 800071e:	b21a      	sxth	r2, r3
 8000720:	783b      	ldrb	r3, [r7, #0]
 8000722:	b21b      	sxth	r3, r3
 8000724:	4313      	orrs	r3, r2
 8000726:	b21b      	sxth	r3, r3
 8000728:	b29a      	uxth	r2, r3
 800072a:	4b53      	ldr	r3, [pc, #332]	@ (8000878 <TrimRead+0x19c>)
 800072c:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	b21b      	sxth	r3, r3
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	b21a      	sxth	r2, r3
 8000736:	78bb      	ldrb	r3, [r7, #2]
 8000738:	b21b      	sxth	r3, r3
 800073a:	4313      	orrs	r3, r2
 800073c:	b21a      	sxth	r2, r3
 800073e:	4b4f      	ldr	r3, [pc, #316]	@ (800087c <TrimRead+0x1a0>)
 8000740:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8000742:	797b      	ldrb	r3, [r7, #5]
 8000744:	b21b      	sxth	r3, r3
 8000746:	021b      	lsls	r3, r3, #8
 8000748:	b21a      	sxth	r2, r3
 800074a:	793b      	ldrb	r3, [r7, #4]
 800074c:	b21b      	sxth	r3, r3
 800074e:	4313      	orrs	r3, r2
 8000750:	b21a      	sxth	r2, r3
 8000752:	4b4b      	ldr	r3, [pc, #300]	@ (8000880 <TrimRead+0x1a4>)
 8000754:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	b21b      	sxth	r3, r3
 800075a:	021b      	lsls	r3, r3, #8
 800075c:	b21a      	sxth	r2, r3
 800075e:	797b      	ldrb	r3, [r7, #5]
 8000760:	b21b      	sxth	r3, r3
 8000762:	4313      	orrs	r3, r2
 8000764:	b21b      	sxth	r3, r3
 8000766:	b29a      	uxth	r2, r3
 8000768:	4b46      	ldr	r3, [pc, #280]	@ (8000884 <TrimRead+0x1a8>)
 800076a:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 800076c:	7a7b      	ldrb	r3, [r7, #9]
 800076e:	b21b      	sxth	r3, r3
 8000770:	021b      	lsls	r3, r3, #8
 8000772:	b21a      	sxth	r2, r3
 8000774:	79bb      	ldrb	r3, [r7, #6]
 8000776:	b21b      	sxth	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b21a      	sxth	r2, r3
 800077c:	4b42      	ldr	r3, [pc, #264]	@ (8000888 <TrimRead+0x1ac>)
 800077e:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8000780:	7afb      	ldrb	r3, [r7, #11]
 8000782:	b21b      	sxth	r3, r3
 8000784:	021b      	lsls	r3, r3, #8
 8000786:	b21a      	sxth	r2, r3
 8000788:	7abb      	ldrb	r3, [r7, #10]
 800078a:	b21b      	sxth	r3, r3
 800078c:	4313      	orrs	r3, r2
 800078e:	b21a      	sxth	r2, r3
 8000790:	4b3e      	ldr	r3, [pc, #248]	@ (800088c <TrimRead+0x1b0>)
 8000792:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	b21b      	sxth	r3, r3
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	b21a      	sxth	r2, r3
 800079c:	7b3b      	ldrb	r3, [r7, #12]
 800079e:	b21b      	sxth	r3, r3
 80007a0:	4313      	orrs	r3, r2
 80007a2:	b21a      	sxth	r2, r3
 80007a4:	4b3a      	ldr	r3, [pc, #232]	@ (8000890 <TrimRead+0x1b4>)
 80007a6:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	b21b      	sxth	r3, r3
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	b21a      	sxth	r2, r3
 80007b0:	7bbb      	ldrb	r3, [r7, #14]
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	4313      	orrs	r3, r2
 80007b6:	b21a      	sxth	r2, r3
 80007b8:	4b36      	ldr	r3, [pc, #216]	@ (8000894 <TrimRead+0x1b8>)
 80007ba:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80007bc:	7c7b      	ldrb	r3, [r7, #17]
 80007be:	b21b      	sxth	r3, r3
 80007c0:	021b      	lsls	r3, r3, #8
 80007c2:	b21a      	sxth	r2, r3
 80007c4:	7c3b      	ldrb	r3, [r7, #16]
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	4313      	orrs	r3, r2
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	4b32      	ldr	r3, [pc, #200]	@ (8000898 <TrimRead+0x1bc>)
 80007ce:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80007d0:	7cfb      	ldrb	r3, [r7, #19]
 80007d2:	b21b      	sxth	r3, r3
 80007d4:	021b      	lsls	r3, r3, #8
 80007d6:	b21a      	sxth	r2, r3
 80007d8:	7cbb      	ldrb	r3, [r7, #18]
 80007da:	b21b      	sxth	r3, r3
 80007dc:	4313      	orrs	r3, r2
 80007de:	b21a      	sxth	r2, r3
 80007e0:	4b2e      	ldr	r3, [pc, #184]	@ (800089c <TrimRead+0x1c0>)
 80007e2:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80007e4:	7d7b      	ldrb	r3, [r7, #21]
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	021b      	lsls	r3, r3, #8
 80007ea:	b21a      	sxth	r2, r3
 80007ec:	7d3b      	ldrb	r3, [r7, #20]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <TrimRead+0x1c4>)
 80007f6:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80007f8:	7dfb      	ldrb	r3, [r7, #23]
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b21a      	sxth	r2, r3
 8000800:	7dbb      	ldrb	r3, [r7, #22]
 8000802:	b21b      	sxth	r3, r3
 8000804:	4313      	orrs	r3, r2
 8000806:	b21a      	sxth	r2, r3
 8000808:	4b26      	ldr	r3, [pc, #152]	@ (80008a4 <TrimRead+0x1c8>)
 800080a:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 800080c:	7e3b      	ldrb	r3, [r7, #24]
 800080e:	461a      	mov	r2, r3
 8000810:	4b25      	ldr	r3, [pc, #148]	@ (80008a8 <TrimRead+0x1cc>)
 8000812:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8000814:	7ebb      	ldrb	r3, [r7, #26]
 8000816:	b21b      	sxth	r3, r3
 8000818:	021b      	lsls	r3, r3, #8
 800081a:	b21a      	sxth	r2, r3
 800081c:	7e7b      	ldrb	r3, [r7, #25]
 800081e:	b21b      	sxth	r3, r3
 8000820:	4313      	orrs	r3, r2
 8000822:	b21a      	sxth	r2, r3
 8000824:	4b21      	ldr	r3, [pc, #132]	@ (80008ac <TrimRead+0x1d0>)
 8000826:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8000828:	7efb      	ldrb	r3, [r7, #27]
 800082a:	461a      	mov	r2, r3
 800082c:	4b20      	ldr	r3, [pc, #128]	@ (80008b0 <TrimRead+0x1d4>)
 800082e:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8000830:	7f3b      	ldrb	r3, [r7, #28]
 8000832:	b21b      	sxth	r3, r3
 8000834:	011b      	lsls	r3, r3, #4
 8000836:	b21a      	sxth	r2, r3
 8000838:	7f7b      	ldrb	r3, [r7, #29]
 800083a:	b21b      	sxth	r3, r3
 800083c:	f003 030f 	and.w	r3, r3, #15
 8000840:	b21b      	sxth	r3, r3
 8000842:	4313      	orrs	r3, r2
 8000844:	b21a      	sxth	r2, r3
 8000846:	4b1b      	ldr	r3, [pc, #108]	@ (80008b4 <TrimRead+0x1d8>)
 8000848:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800084a:	7fbb      	ldrb	r3, [r7, #30]
 800084c:	b21b      	sxth	r3, r3
 800084e:	011b      	lsls	r3, r3, #4
 8000850:	b21a      	sxth	r2, r3
 8000852:	7f7b      	ldrb	r3, [r7, #29]
 8000854:	091b      	lsrs	r3, r3, #4
 8000856:	b2db      	uxtb	r3, r3
 8000858:	b21b      	sxth	r3, r3
 800085a:	4313      	orrs	r3, r2
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <TrimRead+0x1dc>)
 8000860:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8000862:	7ffb      	ldrb	r3, [r7, #31]
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <TrimRead+0x1e0>)
 8000868:	801a      	strh	r2, [r3, #0]
}
 800086a:	bf00      	nop
 800086c:	3720      	adds	r7, #32
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200005dc 	.word	0x200005dc
 8000878:	20000300 	.word	0x20000300
 800087c:	20000308 	.word	0x20000308
 8000880:	2000030a 	.word	0x2000030a
 8000884:	20000302 	.word	0x20000302
 8000888:	2000030c 	.word	0x2000030c
 800088c:	2000030e 	.word	0x2000030e
 8000890:	20000310 	.word	0x20000310
 8000894:	20000312 	.word	0x20000312
 8000898:	20000314 	.word	0x20000314
 800089c:	20000316 	.word	0x20000316
 80008a0:	20000318 	.word	0x20000318
 80008a4:	2000031a 	.word	0x2000031a
 80008a8:	20000304 	.word	0x20000304
 80008ac:	2000031c 	.word	0x2000031c
 80008b0:	20000306 	.word	0x20000306
 80008b4:	2000031e 	.word	0x2000031e
 80008b8:	20000320 	.word	0x20000320
 80008bc:	20000322 	.word	0x20000322

080008c0 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b089      	sub	sp, #36	@ 0x24
 80008c4:	af04      	add	r7, sp, #16
 80008c6:	4604      	mov	r4, r0
 80008c8:	4608      	mov	r0, r1
 80008ca:	4611      	mov	r1, r2
 80008cc:	461a      	mov	r2, r3
 80008ce:	4623      	mov	r3, r4
 80008d0:	71fb      	strb	r3, [r7, #7]
 80008d2:	4603      	mov	r3, r0
 80008d4:	71bb      	strb	r3, [r7, #6]
 80008d6:	460b      	mov	r3, r1
 80008d8:	717b      	strb	r3, [r7, #5]
 80008da:	4613      	mov	r3, r2
 80008dc:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80008de:	f7ff fefd 	bl	80006dc <TrimRead>


	uint8_t datatowrite = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80008ea:	23b6      	movs	r3, #182	@ 0xb6
 80008ec:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80008ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f2:	9302      	str	r3, [sp, #8]
 80008f4:	2301      	movs	r3, #1
 80008f6:	9301      	str	r3, [sp, #4]
 80008f8:	f107 030f 	add.w	r3, r7, #15
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2301      	movs	r3, #1
 8000900:	22e0      	movs	r2, #224	@ 0xe0
 8000902:	21ec      	movs	r1, #236	@ 0xec
 8000904:	4859      	ldr	r0, [pc, #356]	@ (8000a6c <BME280_Config+0x1ac>)
 8000906:	f003 fca1 	bl	800424c <HAL_I2C_Mem_Write>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d002      	beq.n	8000916 <BME280_Config+0x56>
	{
		return -1;
 8000910:	f04f 33ff 	mov.w	r3, #4294967295
 8000914:	e0a5      	b.n	8000a62 <BME280_Config+0x1a2>
	}

	HAL_Delay (100);
 8000916:	2064      	movs	r0, #100	@ 0x64
 8000918:	f001 fe1c 	bl	8002554 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 800091c:	797b      	ldrb	r3, [r7, #5]
 800091e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000920:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000924:	9302      	str	r3, [sp, #8]
 8000926:	2301      	movs	r3, #1
 8000928:	9301      	str	r3, [sp, #4]
 800092a:	f107 030f 	add.w	r3, r7, #15
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2301      	movs	r3, #1
 8000932:	22f2      	movs	r2, #242	@ 0xf2
 8000934:	21ec      	movs	r1, #236	@ 0xec
 8000936:	484d      	ldr	r0, [pc, #308]	@ (8000a6c <BME280_Config+0x1ac>)
 8000938:	f003 fc88 	bl	800424c <HAL_I2C_Mem_Write>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d002      	beq.n	8000948 <BME280_Config+0x88>
	{
		return -1;
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	e08c      	b.n	8000a62 <BME280_Config+0x1a2>
	}
	HAL_Delay (100);
 8000948:	2064      	movs	r0, #100	@ 0x64
 800094a:	f001 fe03 	bl	8002554 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800094e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000952:	9302      	str	r3, [sp, #8]
 8000954:	2301      	movs	r3, #1
 8000956:	9301      	str	r3, [sp, #4]
 8000958:	f107 030e 	add.w	r3, r7, #14
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2301      	movs	r3, #1
 8000960:	22f2      	movs	r2, #242	@ 0xf2
 8000962:	21ec      	movs	r1, #236	@ 0xec
 8000964:	4841      	ldr	r0, [pc, #260]	@ (8000a6c <BME280_Config+0x1ac>)
 8000966:	f003 fd85 	bl	8004474 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800096a:	7bba      	ldrb	r2, [r7, #14]
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	429a      	cmp	r2, r3
 8000970:	d002      	beq.n	8000978 <BME280_Config+0xb8>
	{
		return -1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
 8000976:	e074      	b.n	8000a62 <BME280_Config+0x1a2>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8000978:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800097c:	015b      	lsls	r3, r3, #5
 800097e:	b25a      	sxtb	r2, r3
 8000980:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	b25b      	sxtb	r3, r3
 8000988:	4313      	orrs	r3, r2
 800098a:	b25b      	sxtb	r3, r3
 800098c:	b2db      	uxtb	r3, r3
 800098e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000990:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000994:	9302      	str	r3, [sp, #8]
 8000996:	2301      	movs	r3, #1
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	f107 030f 	add.w	r3, r7, #15
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	2301      	movs	r3, #1
 80009a2:	22f5      	movs	r2, #245	@ 0xf5
 80009a4:	21ec      	movs	r1, #236	@ 0xec
 80009a6:	4831      	ldr	r0, [pc, #196]	@ (8000a6c <BME280_Config+0x1ac>)
 80009a8:	f003 fc50 	bl	800424c <HAL_I2C_Mem_Write>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d002      	beq.n	80009b8 <BME280_Config+0xf8>
	{
		return -1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	e054      	b.n	8000a62 <BME280_Config+0x1a2>
	}
	HAL_Delay (100);
 80009b8:	2064      	movs	r0, #100	@ 0x64
 80009ba:	f001 fdcb 	bl	8002554 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80009be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c2:	9302      	str	r3, [sp, #8]
 80009c4:	2301      	movs	r3, #1
 80009c6:	9301      	str	r3, [sp, #4]
 80009c8:	f107 030e 	add.w	r3, r7, #14
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2301      	movs	r3, #1
 80009d0:	22f5      	movs	r2, #245	@ 0xf5
 80009d2:	21ec      	movs	r1, #236	@ 0xec
 80009d4:	4825      	ldr	r0, [pc, #148]	@ (8000a6c <BME280_Config+0x1ac>)
 80009d6:	f003 fd4d 	bl	8004474 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80009da:	7bba      	ldrb	r2, [r7, #14]
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d002      	beq.n	80009e8 <BME280_Config+0x128>
	{
		return -1;
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	e03c      	b.n	8000a62 <BME280_Config+0x1a2>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	015b      	lsls	r3, r3, #5
 80009ee:	b25a      	sxtb	r2, r3
 80009f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b25a      	sxtb	r2, r3
 80009fc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000a08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0c:	9302      	str	r3, [sp, #8]
 8000a0e:	2301      	movs	r3, #1
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	f107 030f 	add.w	r3, r7, #15
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	22f4      	movs	r2, #244	@ 0xf4
 8000a1c:	21ec      	movs	r1, #236	@ 0xec
 8000a1e:	4813      	ldr	r0, [pc, #76]	@ (8000a6c <BME280_Config+0x1ac>)
 8000a20:	f003 fc14 	bl	800424c <HAL_I2C_Mem_Write>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d002      	beq.n	8000a30 <BME280_Config+0x170>
	{
		return -1;
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	e018      	b.n	8000a62 <BME280_Config+0x1a2>
	}
	HAL_Delay (100);
 8000a30:	2064      	movs	r0, #100	@ 0x64
 8000a32:	f001 fd8f 	bl	8002554 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8000a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a3a:	9302      	str	r3, [sp, #8]
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	9301      	str	r3, [sp, #4]
 8000a40:	f107 030e 	add.w	r3, r7, #14
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2301      	movs	r3, #1
 8000a48:	22f4      	movs	r2, #244	@ 0xf4
 8000a4a:	21ec      	movs	r1, #236	@ 0xec
 8000a4c:	4807      	ldr	r0, [pc, #28]	@ (8000a6c <BME280_Config+0x1ac>)
 8000a4e:	f003 fd11 	bl	8004474 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8000a52:	7bba      	ldrb	r2, [r7, #14]
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d002      	beq.n	8000a60 <BME280_Config+0x1a0>
	{
		return -1;
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5e:	e000      	b.n	8000a62 <BME280_Config+0x1a2>
	}

	return 0;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd90      	pop	{r4, r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200005dc 	.word	0x200005dc

08000a70 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c2, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8000a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a7a:	9302      	str	r3, [sp, #8]
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	9301      	str	r3, [sp, #4]
 8000a80:	4b1e      	ldr	r3, [pc, #120]	@ (8000afc <BMEReadRaw+0x8c>)
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2301      	movs	r3, #1
 8000a86:	22d0      	movs	r2, #208	@ 0xd0
 8000a88:	21ec      	movs	r1, #236	@ 0xec
 8000a8a:	481d      	ldr	r0, [pc, #116]	@ (8000b00 <BMEReadRaw+0x90>)
 8000a8c:	f003 fcf2 	bl	8004474 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8000a90:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <BMEReadRaw+0x8c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b60      	cmp	r3, #96	@ 0x60
 8000a96:	d12a      	bne.n	8000aee <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	9302      	str	r3, [sp, #8]
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	9301      	str	r3, [sp, #4]
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	22f7      	movs	r2, #247	@ 0xf7
 8000aaa:	21ec      	movs	r1, #236	@ 0xec
 8000aac:	4814      	ldr	r0, [pc, #80]	@ (8000b00 <BMEReadRaw+0x90>)
 8000aae:	f003 fce1 	bl	8004474 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8000ab2:	783b      	ldrb	r3, [r7, #0]
 8000ab4:	031a      	lsls	r2, r3, #12
 8000ab6:	787b      	ldrb	r3, [r7, #1]
 8000ab8:	011b      	lsls	r3, r3, #4
 8000aba:	4313      	orrs	r3, r2
 8000abc:	78ba      	ldrb	r2, [r7, #2]
 8000abe:	0912      	lsrs	r2, r2, #4
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	4a0f      	ldr	r2, [pc, #60]	@ (8000b04 <BMEReadRaw+0x94>)
 8000ac6:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8000ac8:	78fb      	ldrb	r3, [r7, #3]
 8000aca:	031a      	lsls	r2, r3, #12
 8000acc:	793b      	ldrb	r3, [r7, #4]
 8000ace:	011b      	lsls	r3, r3, #4
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	797a      	ldrb	r2, [r7, #5]
 8000ad4:	0912      	lsrs	r2, r2, #4
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	4a0b      	ldr	r2, [pc, #44]	@ (8000b08 <BMEReadRaw+0x98>)
 8000adc:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8000ade:	79bb      	ldrb	r3, [r7, #6]
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	79fa      	ldrb	r2, [r7, #7]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	4a09      	ldr	r2, [pc, #36]	@ (8000b0c <BMEReadRaw+0x9c>)
 8000ae8:	6013      	str	r3, [r2, #0]

		return 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e001      	b.n	8000af2 <BMEReadRaw+0x82>
	}

	else return -1;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200002f0 	.word	0x200002f0
 8000b00:	200005dc 	.word	0x200005dc
 8000b04:	200002f8 	.word	0x200002f8
 8000b08:	200002f4 	.word	0x200002f4
 8000b0c:	200002fc 	.word	0x200002fc

08000b10 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b087      	sub	sp, #28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	10da      	asrs	r2, r3, #3
 8000b1c:	4b19      	ldr	r3, [pc, #100]	@ (8000b84 <BME280_compensate_T_int32+0x74>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	4a18      	ldr	r2, [pc, #96]	@ (8000b88 <BME280_compensate_T_int32+0x78>)
 8000b26:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b2a:	fb02 f303 	mul.w	r3, r2, r3
 8000b2e:	12db      	asrs	r3, r3, #11
 8000b30:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	111b      	asrs	r3, r3, #4
 8000b36:	4a13      	ldr	r2, [pc, #76]	@ (8000b84 <BME280_compensate_T_int32+0x74>)
 8000b38:	8812      	ldrh	r2, [r2, #0]
 8000b3a:	1a9b      	subs	r3, r3, r2
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	1112      	asrs	r2, r2, #4
 8000b40:	4910      	ldr	r1, [pc, #64]	@ (8000b84 <BME280_compensate_T_int32+0x74>)
 8000b42:	8809      	ldrh	r1, [r1, #0]
 8000b44:	1a52      	subs	r2, r2, r1
 8000b46:	fb02 f303 	mul.w	r3, r2, r3
 8000b4a:	131b      	asrs	r3, r3, #12
 8000b4c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b8c <BME280_compensate_T_int32+0x7c>)
 8000b4e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b52:	fb02 f303 	mul.w	r3, r2, r3
 8000b56:	139b      	asrs	r3, r3, #14
 8000b58:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a0b      	ldr	r2, [pc, #44]	@ (8000b90 <BME280_compensate_T_int32+0x80>)
 8000b62:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <BME280_compensate_T_int32+0x80>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	4413      	add	r3, r2
 8000b6e:	3380      	adds	r3, #128	@ 0x80
 8000b70:	121b      	asrs	r3, r3, #8
 8000b72:	60fb      	str	r3, [r7, #12]
	return T;
 8000b74:	68fb      	ldr	r3, [r7, #12]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	371c      	adds	r7, #28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000300 	.word	0x20000300
 8000b88:	20000308 	.word	0x20000308
 8000b8c:	2000030a 	.word	0x2000030a
 8000b90:	20000324 	.word	0x20000324

08000b94 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8000b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b98:	b0ca      	sub	sp, #296	@ 0x128
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8000ba0:	4baf      	ldr	r3, [pc, #700]	@ (8000e60 <BME280_compensate_P_int64+0x2cc>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	17da      	asrs	r2, r3, #31
 8000ba6:	461c      	mov	r4, r3
 8000ba8:	4615      	mov	r5, r2
 8000baa:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000bae:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000bb2:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8000bb6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000bba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bbe:	fb03 f102 	mul.w	r1, r3, r2
 8000bc2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000bc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bca:	fb02 f303 	mul.w	r3, r2, r3
 8000bce:	18ca      	adds	r2, r1, r3
 8000bd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bd4:	fba3 8903 	umull	r8, r9, r3, r3
 8000bd8:	eb02 0309 	add.w	r3, r2, r9
 8000bdc:	4699      	mov	r9, r3
 8000bde:	4ba1      	ldr	r3, [pc, #644]	@ (8000e64 <BME280_compensate_P_int64+0x2d0>)
 8000be0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	17da      	asrs	r2, r3, #31
 8000be8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000bec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000bf0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	fb03 f209 	mul.w	r2, r3, r9
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	fb08 f303 	mul.w	r3, r8, r3
 8000c00:	4413      	add	r3, r2
 8000c02:	4602      	mov	r2, r0
 8000c04:	fba8 1202 	umull	r1, r2, r8, r2
 8000c08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000c0c:	460a      	mov	r2, r1
 8000c0e:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000c12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000c16:	4413      	add	r3, r2
 8000c18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000c1c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000c20:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000c24:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000c28:	4b8f      	ldr	r3, [pc, #572]	@ (8000e68 <BME280_compensate_P_int64+0x2d4>)
 8000c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c2e:	b21b      	sxth	r3, r3
 8000c30:	17da      	asrs	r2, r3, #31
 8000c32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000c36:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000c3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000c3e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000c42:	462a      	mov	r2, r5
 8000c44:	fb02 f203 	mul.w	r2, r2, r3
 8000c48:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	fb01 f303 	mul.w	r3, r1, r3
 8000c52:	441a      	add	r2, r3
 8000c54:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000c58:	4621      	mov	r1, r4
 8000c5a:	fba3 1301 	umull	r1, r3, r3, r1
 8000c5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000c62:	460b      	mov	r3, r1
 8000c64:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000c6c:	18d3      	adds	r3, r2, r3
 8000c6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000c72:	f04f 0000 	mov.w	r0, #0
 8000c76:	f04f 0100 	mov.w	r1, #0
 8000c7a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000c7e:	462b      	mov	r3, r5
 8000c80:	0459      	lsls	r1, r3, #17
 8000c82:	4623      	mov	r3, r4
 8000c84:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000c88:	4623      	mov	r3, r4
 8000c8a:	0458      	lsls	r0, r3, #17
 8000c8c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000c90:	1814      	adds	r4, r2, r0
 8000c92:	643c      	str	r4, [r7, #64]	@ 0x40
 8000c94:	414b      	adcs	r3, r1
 8000c96:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c98:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000c9c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000ca0:	4b72      	ldr	r3, [pc, #456]	@ (8000e6c <BME280_compensate_P_int64+0x2d8>)
 8000ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca6:	b21b      	sxth	r3, r3
 8000ca8:	17da      	asrs	r2, r3, #31
 8000caa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000cae:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	f04f 0100 	mov.w	r1, #0
 8000cba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000cbe:	00d9      	lsls	r1, r3, #3
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000cc6:	1814      	adds	r4, r2, r0
 8000cc8:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000cca:	414b      	adcs	r3, r1
 8000ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000cce:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000cd2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000cd6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000cda:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000cde:	fb03 f102 	mul.w	r1, r3, r2
 8000ce2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000ce6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000cea:	fb02 f303 	mul.w	r3, r2, r3
 8000cee:	18ca      	adds	r2, r1, r3
 8000cf0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000cf4:	fba3 1303 	umull	r1, r3, r3, r3
 8000cf8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000d06:	18d3      	adds	r3, r2, r3
 8000d08:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000d0c:	4b58      	ldr	r3, [pc, #352]	@ (8000e70 <BME280_compensate_P_int64+0x2dc>)
 8000d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	17da      	asrs	r2, r3, #31
 8000d16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000d1a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000d1e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000d22:	462b      	mov	r3, r5
 8000d24:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000d28:	4642      	mov	r2, r8
 8000d2a:	fb02 f203 	mul.w	r2, r2, r3
 8000d2e:	464b      	mov	r3, r9
 8000d30:	4621      	mov	r1, r4
 8000d32:	fb01 f303 	mul.w	r3, r1, r3
 8000d36:	4413      	add	r3, r2
 8000d38:	4622      	mov	r2, r4
 8000d3a:	4641      	mov	r1, r8
 8000d3c:	fba2 1201 	umull	r1, r2, r2, r1
 8000d40:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000d44:	460a      	mov	r2, r1
 8000d46:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000d4a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000d4e:	4413      	add	r3, r2
 8000d50:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000d54:	f04f 0000 	mov.w	r0, #0
 8000d58:	f04f 0100 	mov.w	r1, #0
 8000d5c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000d60:	4623      	mov	r3, r4
 8000d62:	0a18      	lsrs	r0, r3, #8
 8000d64:	462b      	mov	r3, r5
 8000d66:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000d6a:	462b      	mov	r3, r5
 8000d6c:	1219      	asrs	r1, r3, #8
 8000d6e:	4b41      	ldr	r3, [pc, #260]	@ (8000e74 <BME280_compensate_P_int64+0x2e0>)
 8000d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d74:	b21b      	sxth	r3, r3
 8000d76:	17da      	asrs	r2, r3, #31
 8000d78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000d7c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000d80:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000d84:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000d88:	464a      	mov	r2, r9
 8000d8a:	fb02 f203 	mul.w	r2, r2, r3
 8000d8e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000d92:	4644      	mov	r4, r8
 8000d94:	fb04 f303 	mul.w	r3, r4, r3
 8000d98:	441a      	add	r2, r3
 8000d9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000d9e:	4644      	mov	r4, r8
 8000da0:	fba3 4304 	umull	r4, r3, r3, r4
 8000da4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000da8:	4623      	mov	r3, r4
 8000daa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000dae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000db2:	18d3      	adds	r3, r2, r3
 8000db4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000db8:	f04f 0200 	mov.w	r2, #0
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000dc4:	464c      	mov	r4, r9
 8000dc6:	0323      	lsls	r3, r4, #12
 8000dc8:	4644      	mov	r4, r8
 8000dca:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000dce:	4644      	mov	r4, r8
 8000dd0:	0322      	lsls	r2, r4, #12
 8000dd2:	1884      	adds	r4, r0, r2
 8000dd4:	633c      	str	r4, [r7, #48]	@ 0x30
 8000dd6:	eb41 0303 	adc.w	r3, r1, r3
 8000dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ddc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000de0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000de4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000de8:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000dec:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000df0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000df4:	4b20      	ldr	r3, [pc, #128]	@ (8000e78 <BME280_compensate_P_int64+0x2e4>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000e00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000e04:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000e08:	462b      	mov	r3, r5
 8000e0a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000e0e:	4642      	mov	r2, r8
 8000e10:	fb02 f203 	mul.w	r2, r2, r3
 8000e14:	464b      	mov	r3, r9
 8000e16:	4621      	mov	r1, r4
 8000e18:	fb01 f303 	mul.w	r3, r1, r3
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4622      	mov	r2, r4
 8000e20:	4641      	mov	r1, r8
 8000e22:	fba2 1201 	umull	r1, r2, r2, r1
 8000e26:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000e2a:	460a      	mov	r2, r1
 8000e2c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000e30:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000e34:	4413      	add	r3, r2
 8000e36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000e3a:	f04f 0200 	mov.w	r2, #0
 8000e3e:	f04f 0300 	mov.w	r3, #0
 8000e42:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000e46:	4629      	mov	r1, r5
 8000e48:	104a      	asrs	r2, r1, #1
 8000e4a:	4629      	mov	r1, r5
 8000e4c:	17cb      	asrs	r3, r1, #31
 8000e4e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000e52:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000e56:	4313      	orrs	r3, r2
 8000e58:	d110      	bne.n	8000e7c <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e154      	b.n	8001108 <BME280_compensate_P_int64+0x574>
 8000e5e:	bf00      	nop
 8000e60:	20000324 	.word	0x20000324
 8000e64:	20000314 	.word	0x20000314
 8000e68:	20000312 	.word	0x20000312
 8000e6c:	20000310 	.word	0x20000310
 8000e70:	2000030e 	.word	0x2000030e
 8000e74:	2000030c 	.word	0x2000030c
 8000e78:	20000302 	.word	0x20000302
	}
	p = 1048576-adc_P;
 8000e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000e80:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000e84:	17da      	asrs	r2, r3, #31
 8000e86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000e8a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000e8e:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000e92:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e96:	105b      	asrs	r3, r3, #1
 8000e98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000e9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000ea0:	07db      	lsls	r3, r3, #31
 8000ea2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000ea6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000eaa:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000eae:	4621      	mov	r1, r4
 8000eb0:	1a89      	subs	r1, r1, r2
 8000eb2:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000eb4:	4629      	mov	r1, r5
 8000eb6:	eb61 0303 	sbc.w	r3, r1, r3
 8000eba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000ebc:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000ec0:	4622      	mov	r2, r4
 8000ec2:	462b      	mov	r3, r5
 8000ec4:	1891      	adds	r1, r2, r2
 8000ec6:	6239      	str	r1, [r7, #32]
 8000ec8:	415b      	adcs	r3, r3
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ecc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ed0:	4621      	mov	r1, r4
 8000ed2:	1851      	adds	r1, r2, r1
 8000ed4:	61b9      	str	r1, [r7, #24]
 8000ed6:	4629      	mov	r1, r5
 8000ed8:	414b      	adcs	r3, r1
 8000eda:	61fb      	str	r3, [r7, #28]
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000ee8:	4649      	mov	r1, r9
 8000eea:	018b      	lsls	r3, r1, #6
 8000eec:	4641      	mov	r1, r8
 8000eee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000ef2:	4641      	mov	r1, r8
 8000ef4:	018a      	lsls	r2, r1, #6
 8000ef6:	4641      	mov	r1, r8
 8000ef8:	1889      	adds	r1, r1, r2
 8000efa:	6139      	str	r1, [r7, #16]
 8000efc:	4649      	mov	r1, r9
 8000efe:	eb43 0101 	adc.w	r1, r3, r1
 8000f02:	6179      	str	r1, [r7, #20]
 8000f04:	f04f 0200 	mov.w	r2, #0
 8000f08:	f04f 0300 	mov.w	r3, #0
 8000f0c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000f10:	4649      	mov	r1, r9
 8000f12:	008b      	lsls	r3, r1, #2
 8000f14:	4641      	mov	r1, r8
 8000f16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000f1a:	4641      	mov	r1, r8
 8000f1c:	008a      	lsls	r2, r1, #2
 8000f1e:	4610      	mov	r0, r2
 8000f20:	4619      	mov	r1, r3
 8000f22:	4603      	mov	r3, r0
 8000f24:	4622      	mov	r2, r4
 8000f26:	189b      	adds	r3, r3, r2
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	462a      	mov	r2, r5
 8000f2e:	eb42 0303 	adc.w	r3, r2, r3
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000f40:	4649      	mov	r1, r9
 8000f42:	008b      	lsls	r3, r1, #2
 8000f44:	4641      	mov	r1, r8
 8000f46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000f4a:	4641      	mov	r1, r8
 8000f4c:	008a      	lsls	r2, r1, #2
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	4603      	mov	r3, r0
 8000f54:	4622      	mov	r2, r4
 8000f56:	189b      	adds	r3, r3, r2
 8000f58:	673b      	str	r3, [r7, #112]	@ 0x70
 8000f5a:	462b      	mov	r3, r5
 8000f5c:	460a      	mov	r2, r1
 8000f5e:	eb42 0303 	adc.w	r3, r2, r3
 8000f62:	677b      	str	r3, [r7, #116]	@ 0x74
 8000f64:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000f68:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000f6c:	f7ff f9d0 	bl	8000310 <__aeabi_ldivmod>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000f78:	4b66      	ldr	r3, [pc, #408]	@ (8001114 <BME280_compensate_P_int64+0x580>)
 8000f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	17da      	asrs	r2, r3, #31
 8000f82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000f84:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000f86:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	f04f 0100 	mov.w	r1, #0
 8000f92:	0b50      	lsrs	r0, r2, #13
 8000f94:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000f98:	1359      	asrs	r1, r3, #13
 8000f9a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000f9e:	462b      	mov	r3, r5
 8000fa0:	fb00 f203 	mul.w	r2, r0, r3
 8000fa4:	4623      	mov	r3, r4
 8000fa6:	fb03 f301 	mul.w	r3, r3, r1
 8000faa:	4413      	add	r3, r2
 8000fac:	4622      	mov	r2, r4
 8000fae:	fba2 1200 	umull	r1, r2, r2, r0
 8000fb2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000fb6:	460a      	mov	r2, r1
 8000fb8:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000fbc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000fc0:	4413      	add	r3, r2
 8000fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000fc6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	f04f 0100 	mov.w	r1, #0
 8000fd2:	0b50      	lsrs	r0, r2, #13
 8000fd4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000fd8:	1359      	asrs	r1, r3, #13
 8000fda:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000fde:	462b      	mov	r3, r5
 8000fe0:	fb00 f203 	mul.w	r2, r0, r3
 8000fe4:	4623      	mov	r3, r4
 8000fe6:	fb03 f301 	mul.w	r3, r3, r1
 8000fea:	4413      	add	r3, r2
 8000fec:	4622      	mov	r2, r4
 8000fee:	fba2 1200 	umull	r1, r2, r2, r0
 8000ff2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000ff6:	460a      	mov	r2, r1
 8000ff8:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000ffc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001000:	4413      	add	r3, r2
 8001002:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001012:	4621      	mov	r1, r4
 8001014:	0e4a      	lsrs	r2, r1, #25
 8001016:	4629      	mov	r1, r5
 8001018:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800101c:	4629      	mov	r1, r5
 800101e:	164b      	asrs	r3, r1, #25
 8001020:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001024:	4b3c      	ldr	r3, [pc, #240]	@ (8001118 <BME280_compensate_P_int64+0x584>)
 8001026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102a:	b21b      	sxth	r3, r3
 800102c:	17da      	asrs	r2, r3, #31
 800102e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001030:	667a      	str	r2, [r7, #100]	@ 0x64
 8001032:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001036:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800103a:	462a      	mov	r2, r5
 800103c:	fb02 f203 	mul.w	r2, r2, r3
 8001040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001044:	4621      	mov	r1, r4
 8001046:	fb01 f303 	mul.w	r3, r1, r3
 800104a:	4413      	add	r3, r2
 800104c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001050:	4621      	mov	r1, r4
 8001052:	fba2 1201 	umull	r1, r2, r2, r1
 8001056:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800105a:	460a      	mov	r2, r1
 800105c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001060:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001064:	4413      	add	r3, r2
 8001066:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001076:	4621      	mov	r1, r4
 8001078:	0cca      	lsrs	r2, r1, #19
 800107a:	4629      	mov	r1, r5
 800107c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001080:	4629      	mov	r1, r5
 8001082:	14cb      	asrs	r3, r1, #19
 8001084:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001088:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800108c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001090:	1884      	adds	r4, r0, r2
 8001092:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001094:	eb41 0303 	adc.w	r3, r1, r3
 8001098:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800109a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800109e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80010a2:	4621      	mov	r1, r4
 80010a4:	1889      	adds	r1, r1, r2
 80010a6:	6539      	str	r1, [r7, #80]	@ 0x50
 80010a8:	4629      	mov	r1, r5
 80010aa:	eb43 0101 	adc.w	r1, r3, r1
 80010ae:	6579      	str	r1, [r7, #84]	@ 0x54
 80010b0:	f04f 0000 	mov.w	r0, #0
 80010b4:	f04f 0100 	mov.w	r1, #0
 80010b8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80010bc:	4623      	mov	r3, r4
 80010be:	0a18      	lsrs	r0, r3, #8
 80010c0:	462b      	mov	r3, r5
 80010c2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80010c6:	462b      	mov	r3, r5
 80010c8:	1219      	asrs	r1, r3, #8
 80010ca:	4b14      	ldr	r3, [pc, #80]	@ (800111c <BME280_compensate_P_int64+0x588>)
 80010cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	17da      	asrs	r2, r3, #31
 80010d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80010d6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80010e4:	464c      	mov	r4, r9
 80010e6:	0123      	lsls	r3, r4, #4
 80010e8:	4644      	mov	r4, r8
 80010ea:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80010ee:	4644      	mov	r4, r8
 80010f0:	0122      	lsls	r2, r4, #4
 80010f2:	1884      	adds	r4, r0, r2
 80010f4:	603c      	str	r4, [r7, #0]
 80010f6:	eb41 0303 	adc.w	r3, r1, r3
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001100:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8001104:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001108:	4618      	mov	r0, r3
 800110a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800110e:	46bd      	mov	sp, r7
 8001110:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001114:	2000031a 	.word	0x2000031a
 8001118:	20000318 	.word	0x20000318
 800111c:	20000316 	.word	0x20000316

08001120 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001128:	4b2c      	ldr	r3, [pc, #176]	@ (80011dc <bme280_compensate_H_int32+0xbc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001130:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	039a      	lsls	r2, r3, #14
 8001136:	4b2a      	ldr	r3, [pc, #168]	@ (80011e0 <bme280_compensate_H_int32+0xc0>)
 8001138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113c:	051b      	lsls	r3, r3, #20
 800113e:	1ad2      	subs	r2, r2, r3
 8001140:	4b28      	ldr	r3, [pc, #160]	@ (80011e4 <bme280_compensate_H_int32+0xc4>)
 8001142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001146:	4619      	mov	r1, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	fb01 f303 	mul.w	r3, r1, r3
 800114e:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001150:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001154:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001156:	4a24      	ldr	r2, [pc, #144]	@ (80011e8 <bme280_compensate_H_int32+0xc8>)
 8001158:	f9b2 2000 	ldrsh.w	r2, [r2]
 800115c:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001164:	1292      	asrs	r2, r2, #10
 8001166:	4921      	ldr	r1, [pc, #132]	@ (80011ec <bme280_compensate_H_int32+0xcc>)
 8001168:	8809      	ldrh	r1, [r1, #0]
 800116a:	4608      	mov	r0, r1
 800116c:	68f9      	ldr	r1, [r7, #12]
 800116e:	fb00 f101 	mul.w	r1, r0, r1
 8001172:	12c9      	asrs	r1, r1, #11
 8001174:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001178:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 800117c:	1292      	asrs	r2, r2, #10
 800117e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001182:	491b      	ldr	r1, [pc, #108]	@ (80011f0 <bme280_compensate_H_int32+0xd0>)
 8001184:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001188:	fb01 f202 	mul.w	r2, r1, r2
 800118c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 8001190:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001192:	fb02 f303 	mul.w	r3, r2, r3
 8001196:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	13db      	asrs	r3, r3, #15
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	13d2      	asrs	r2, r2, #15
 80011a0:	fb02 f303 	mul.w	r3, r2, r3
 80011a4:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 80011a6:	4a13      	ldr	r2, [pc, #76]	@ (80011f4 <bme280_compensate_H_int32+0xd4>)
 80011a8:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 80011aa:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 80011ae:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80011bc:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 80011c4:	bfa8      	it	ge
 80011c6:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 80011ca:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	131b      	asrs	r3, r3, #12
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	20000324 	.word	0x20000324
 80011e0:	2000031e 	.word	0x2000031e
 80011e4:	20000320 	.word	0x20000320
 80011e8:	20000322 	.word	0x20000322
 80011ec:	20000306 	.word	0x20000306
 80011f0:	2000031c 	.word	0x2000031c
 80011f4:	20000304 	.word	0x20000304

080011f8 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 80011fc:	f7ff fc38 	bl	8000a70 <BMEReadRaw>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d154      	bne.n	80012b0 <BME280_Measure+0xb8>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001206:	4b38      	ldr	r3, [pc, #224]	@ (80012e8 <BME280_Measure+0xf0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800120e:	d104      	bne.n	800121a <BME280_Measure+0x22>
 8001210:	4b36      	ldr	r3, [pc, #216]	@ (80012ec <BME280_Measure+0xf4>)
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	e011      	b.n	800123e <BME280_Measure+0x46>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 800121a:	4b33      	ldr	r3, [pc, #204]	@ (80012e8 <BME280_Measure+0xf0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fc76 	bl	8000b10 <BME280_compensate_T_int32>
 8001224:	ee07 0a90 	vmov	s15, r0
 8001228:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800122c:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 80012d0 <BME280_Measure+0xd8>
 8001230:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001234:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001238:	4b2c      	ldr	r3, [pc, #176]	@ (80012ec <BME280_Measure+0xf4>)
 800123a:	edc3 7a00 	vstr	s15, [r3]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 800123e:	4b2c      	ldr	r3, [pc, #176]	@ (80012f0 <BME280_Measure+0xf8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001246:	d104      	bne.n	8001252 <BME280_Measure+0x5a>
 8001248:	4b2a      	ldr	r3, [pc, #168]	@ (80012f4 <BME280_Measure+0xfc>)
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	e011      	b.n	8001276 <BME280_Measure+0x7e>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001252:	4b27      	ldr	r3, [pc, #156]	@ (80012f0 <BME280_Measure+0xf8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fc9c 	bl	8000b94 <BME280_compensate_P_int64>
 800125c:	ee07 0a90 	vmov	s15, r0
 8001260:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001264:	ed9f 5b1c 	vldr	d5, [pc, #112]	@ 80012d8 <BME280_Measure+0xe0>
 8001268:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800126c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001270:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <BME280_Measure+0xfc>)
 8001272:	edc3 7a00 	vstr	s15, [r3]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001276:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <BME280_Measure+0x100>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800127e:	d104      	bne.n	800128a <BME280_Measure+0x92>
 8001280:	4b1e      	ldr	r3, [pc, #120]	@ (80012fc <BME280_Measure+0x104>)
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001288:	e01e      	b.n	80012c8 <BME280_Measure+0xd0>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 800128a:	4b1b      	ldr	r3, [pc, #108]	@ (80012f8 <BME280_Measure+0x100>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff46 	bl	8001120 <bme280_compensate_H_int32>
 8001294:	ee07 0a90 	vmov	s15, r0
 8001298:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800129c:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 80012e0 <BME280_Measure+0xe8>
 80012a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012a8:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <BME280_Measure+0x104>)
 80012aa:	edc3 7a00 	vstr	s15, [r3]
}
 80012ae:	e00b      	b.n	80012c8 <BME280_Measure+0xd0>
		Temperature = Pressure = Humidity = 0;
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <BME280_Measure+0x104>)
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <BME280_Measure+0x104>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0d      	ldr	r2, [pc, #52]	@ (80012f4 <BME280_Measure+0xfc>)
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <BME280_Measure+0xfc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a09      	ldr	r2, [pc, #36]	@ (80012ec <BME280_Measure+0xf4>)
 80012c6:	6013      	str	r3, [r2, #0]
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	f3af 8000 	nop.w
 80012d0:	00000000 	.word	0x00000000
 80012d4:	40590000 	.word	0x40590000
 80012d8:	00000000 	.word	0x00000000
 80012dc:	40700000 	.word	0x40700000
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40900000 	.word	0x40900000
 80012e8:	200002f4 	.word	0x200002f4
 80012ec:	200005c8 	.word	0x200005c8
 80012f0:	200002f8 	.word	0x200002f8
 80012f4:	200005cc 	.word	0x200005cc
 80012f8:	200002fc 	.word	0x200002fc
 80012fc:	200005d0 	.word	0x200005d0

08001300 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4a07      	ldr	r2, [pc, #28]	@ (800132c <vApplicationGetIdleTaskMemory+0x2c>)
 8001310:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	4a06      	ldr	r2, [pc, #24]	@ (8001330 <vApplicationGetIdleTaskMemory+0x30>)
 8001316:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2280      	movs	r2, #128	@ 0x80
 800131c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000328 	.word	0x20000328
 8001330:	200003c8 	.word	0x200003c8

08001334 <http_server>:

extern float Temperature, Pressure, Humidity;
extern uint8_t alert[3];
uint8_t datatest[50];
static void http_server(struct netconn *conn)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b090      	sub	sp, #64	@ 0x40
 8001338:	af02      	add	r7, sp, #8
 800133a:	6078      	str	r0, [r7, #4]
	char* buf;
	u16_t buflen;
	struct fs_file file;

	/* Read the data from the port, blocking if nothing yet there */
	recv_err = netconn_recv(conn, &inbuf);
 800133c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001340:	4619      	mov	r1, r3
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f00e ff9e 	bl	8010284 <netconn_recv>
 8001348:	4603      	mov	r3, r0
 800134a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (recv_err == ERR_OK)
 800134e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001352:	2b00      	cmp	r3, #0
 8001354:	f040 8112 	bne.w	800157c <http_server+0x248>
	{
		if (netconn_err(conn) == ERR_OK)
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f00f f91c 	bl	8010596 <netconn_err>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	f040 810b 	bne.w	800157c <http_server+0x248>
		{
			/* Get the data pointer and length of the data inside a netbuf */
			netbuf_data(inbuf, (void**)&buf, &buflen);
 8001366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001368:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 800136c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001370:	4618      	mov	r0, r3
 8001372:	f010 fd21 	bl	8011db8 <netbuf_data>

			/* Check if request to get the index.html */
			if (strncmp((char const *)buf,"GET /index.html",15)==0)
 8001376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001378:	220f      	movs	r2, #15
 800137a:	4986      	ldr	r1, [pc, #536]	@ (8001594 <http_server+0x260>)
 800137c:	4618      	mov	r0, r3
 800137e:	f01c ff8e 	bl	801e29e <strncmp>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d113      	bne.n	80013b0 <http_server+0x7c>
			{
				fs_open(&file, "/index.html");
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4982      	ldr	r1, [pc, #520]	@ (8001598 <http_server+0x264>)
 800138e:	4618      	mov	r0, r3
 8001390:	f010 ff14 	bl	80121bc <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001394:	68f9      	ldr	r1, [r7, #12]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	461a      	mov	r2, r3
 800139a:	2300      	movs	r3, #0
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2300      	movs	r3, #0
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f00e ffe9 	bl	8010378 <netconn_write_partly>
				fs_close(&file);
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	4618      	mov	r0, r3
 80013ac:	f010 ff44 	bl	8012238 <fs_close>
			}
			if (strncmp((char const *)buf,"GET /chart.js",13)==0)
 80013b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b2:	220d      	movs	r2, #13
 80013b4:	4979      	ldr	r1, [pc, #484]	@ (800159c <http_server+0x268>)
 80013b6:	4618      	mov	r0, r3
 80013b8:	f01c ff71 	bl	801e29e <strncmp>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d113      	bne.n	80013ea <http_server+0xb6>
						{
							fs_open(&file, "/chart.js");
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	4976      	ldr	r1, [pc, #472]	@ (80015a0 <http_server+0x26c>)
 80013c8:	4618      	mov	r0, r3
 80013ca:	f010 fef7 	bl	80121bc <fs_open>
							netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 80013ce:	68f9      	ldr	r1, [r7, #12]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	461a      	mov	r2, r3
 80013d4:	2300      	movs	r3, #0
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2300      	movs	r3, #0
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f00e ffcc 	bl	8010378 <netconn_write_partly>
							fs_close(&file);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4618      	mov	r0, r3
 80013e6:	f010 ff27 	bl	8012238 <fs_close>
						}

			if (strncmp((char const *)buf,"GET /img/humidity.png",21)==0)
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	2215      	movs	r2, #21
 80013ee:	496d      	ldr	r1, [pc, #436]	@ (80015a4 <http_server+0x270>)
 80013f0:	4618      	mov	r0, r3
 80013f2:	f01c ff54 	bl	801e29e <strncmp>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d113      	bne.n	8001424 <http_server+0xf0>
			{

				fs_open(&file, "/img/humidity.png");
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	4969      	ldr	r1, [pc, #420]	@ (80015a8 <http_server+0x274>)
 8001402:	4618      	mov	r0, r3
 8001404:	f010 feda 	bl	80121bc <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001408:	68f9      	ldr	r1, [r7, #12]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	461a      	mov	r2, r3
 800140e:	2300      	movs	r3, #0
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2300      	movs	r3, #0
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f00e ffaf 	bl	8010378 <netconn_write_partly>
				fs_close(&file);
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	4618      	mov	r0, r3
 8001420:	f010 ff0a 	bl	8012238 <fs_close>

			}
			if (strncmp((char const *)buf,"GET /img/pressure.png",21)==0)
 8001424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001426:	2215      	movs	r2, #21
 8001428:	4960      	ldr	r1, [pc, #384]	@ (80015ac <http_server+0x278>)
 800142a:	4618      	mov	r0, r3
 800142c:	f01c ff37 	bl	801e29e <strncmp>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d113      	bne.n	800145e <http_server+0x12a>
			{
				fs_open(&file, "/img/pressure.png");
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	495d      	ldr	r1, [pc, #372]	@ (80015b0 <http_server+0x27c>)
 800143c:	4618      	mov	r0, r3
 800143e:	f010 febd 	bl	80121bc <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001442:	68f9      	ldr	r1, [r7, #12]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	461a      	mov	r2, r3
 8001448:	2300      	movs	r3, #0
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2300      	movs	r3, #0
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f00e ff92 	bl	8010378 <netconn_write_partly>
				fs_close(&file);
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	4618      	mov	r0, r3
 800145a:	f010 feed 	bl	8012238 <fs_close>

			}
			if (strncmp((char const *)buf,"GET /img/temperature.png",24)==0)
 800145e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001460:	2218      	movs	r2, #24
 8001462:	4954      	ldr	r1, [pc, #336]	@ (80015b4 <http_server+0x280>)
 8001464:	4618      	mov	r0, r3
 8001466:	f01c ff1a 	bl	801e29e <strncmp>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d113      	bne.n	8001498 <http_server+0x164>
			{
				fs_open(&file, "/img/temperature.png");
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	4950      	ldr	r1, [pc, #320]	@ (80015b8 <http_server+0x284>)
 8001476:	4618      	mov	r0, r3
 8001478:	f010 fea0 	bl	80121bc <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 800147c:	68f9      	ldr	r1, [r7, #12]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	461a      	mov	r2, r3
 8001482:	2300      	movs	r3, #0
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2300      	movs	r3, #0
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f00e ff75 	bl	8010378 <netconn_write_partly>
				fs_close(&file);
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	4618      	mov	r0, r3
 8001494:	f010 fed0 	bl	8012238 <fs_close>
			}

			if (strncmp((char const *)buf,"GET /get_value",14)==0)
 8001498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149a:	220e      	movs	r2, #14
 800149c:	4947      	ldr	r1, [pc, #284]	@ (80015bc <http_server+0x288>)
 800149e:	4618      	mov	r0, r3
 80014a0:	f01c fefd 	bl	801e29e <strncmp>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d129      	bne.n	80014fe <http_server+0x1ca>
			{
				char *pagedata;
				pagedata = pvPortMalloc(10);
 80014aa:	200a      	movs	r0, #10
 80014ac:	f00e f9bc 	bl	800f828 <pvPortMalloc>
 80014b0:	6338      	str	r0, [r7, #48]	@ 0x30
				int len = sprintf (pagedata, "%d %d %d", (int)Temperature, (int)Pressure, (int)Humidity);
 80014b2:	4b43      	ldr	r3, [pc, #268]	@ (80015c0 <http_server+0x28c>)
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80014bc:	4b41      	ldr	r3, [pc, #260]	@ (80015c4 <http_server+0x290>)
 80014be:	edd3 7a00 	vldr	s15, [r3]
 80014c2:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80014c6:	4b40      	ldr	r3, [pc, #256]	@ (80015c8 <http_server+0x294>)
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014d0:	ee17 3a90 	vmov	r3, s15
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	ee16 3a90 	vmov	r3, s13
 80014da:	ee17 2a10 	vmov	r2, s14
 80014de:	493b      	ldr	r1, [pc, #236]	@ (80015cc <http_server+0x298>)
 80014e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80014e2:	f01c fe45 	bl	801e170 <siprintf>
 80014e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
				netconn_write(conn, (const unsigned char*)pagedata, (size_t)len, NETCONN_NOCOPY);
 80014e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014ea:	2300      	movs	r3, #0
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2300      	movs	r3, #0
 80014f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f00e ff40 	bl	8010378 <netconn_write_partly>
				vPortFree(pagedata);
 80014f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80014fa:	f00e fa63 	bl	800f9c4 <vPortFree>
			}
			if (strncmp((char const *)buf,"GET /TEMP=",10)==0)
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	220a      	movs	r2, #10
 8001502:	4933      	ldr	r1, [pc, #204]	@ (80015d0 <http_server+0x29c>)
 8001504:	4618      	mov	r0, r3
 8001506:	f01c feca 	bl	801e29e <strncmp>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d104      	bne.n	800151a <http_server+0x1e6>
			{
				alert[0]=buf[10];
 8001510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001512:	330a      	adds	r3, #10
 8001514:	781a      	ldrb	r2, [r3, #0]
 8001516:	4b2f      	ldr	r3, [pc, #188]	@ (80015d4 <http_server+0x2a0>)
 8001518:	701a      	strb	r2, [r3, #0]

			}
			if (strncmp((char const *)buf,"GET /PRES=",10)==0)
 800151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151c:	220a      	movs	r2, #10
 800151e:	492e      	ldr	r1, [pc, #184]	@ (80015d8 <http_server+0x2a4>)
 8001520:	4618      	mov	r0, r3
 8001522:	f01c febc 	bl	801e29e <strncmp>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d104      	bne.n	8001536 <http_server+0x202>
						{

							alert[1]=buf[10];
 800152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152e:	330a      	adds	r3, #10
 8001530:	781a      	ldrb	r2, [r3, #0]
 8001532:	4b28      	ldr	r3, [pc, #160]	@ (80015d4 <http_server+0x2a0>)
 8001534:	705a      	strb	r2, [r3, #1]

						}
			if (strncmp((char const *)buf,"GET /HUMID=",11)==0)
 8001536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001538:	220b      	movs	r2, #11
 800153a:	4928      	ldr	r1, [pc, #160]	@ (80015dc <http_server+0x2a8>)
 800153c:	4618      	mov	r0, r3
 800153e:	f01c feae 	bl	801e29e <strncmp>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d105      	bne.n	8001554 <http_server+0x220>
						{
							//memcpy(datatest,buf,50);
							alert[2]=buf[11];
 8001548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154a:	330b      	adds	r3, #11
 800154c:	781a      	ldrb	r2, [r3, #0]
 800154e:	4b21      	ldr	r3, [pc, #132]	@ (80015d4 <http_server+0x2a0>)
 8001550:	709a      	strb	r2, [r3, #2]
 8001552:	e013      	b.n	800157c <http_server+0x248>
						}
			else
			{
				fs_open(&file, "/404.html");
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	4921      	ldr	r1, [pc, #132]	@ (80015e0 <http_server+0x2ac>)
 800155a:	4618      	mov	r0, r3
 800155c:	f010 fe2e 	bl	80121bc <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001560:	68f9      	ldr	r1, [r7, #12]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	461a      	mov	r2, r3
 8001566:	2300      	movs	r3, #0
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2300      	movs	r3, #0
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f00e ff03 	bl	8010378 <netconn_write_partly>
				fs_close(&file);
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	4618      	mov	r0, r3
 8001578:	f010 fe5e 	bl	8012238 <fs_close>
			}
		}
	}
	/* Close the connection (server closes in HTTP) */
	netconn_close(conn);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f00e fffd 	bl	801057c <netconn_close>

	/* Delete the buffer (netconn_recv gives us ownership,
   so we have to make sure to deallocate the buffer) */
	netbuf_delete(inbuf);
 8001582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001584:	4618      	mov	r0, r3
 8001586:	f010 fbf7 	bl	8011d78 <netbuf_delete>
}
 800158a:	bf00      	nop
 800158c:	3738      	adds	r7, #56	@ 0x38
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	0801f27c 	.word	0x0801f27c
 8001598:	0801f28c 	.word	0x0801f28c
 800159c:	0801f298 	.word	0x0801f298
 80015a0:	0801f2a8 	.word	0x0801f2a8
 80015a4:	0801f2b4 	.word	0x0801f2b4
 80015a8:	0801f2cc 	.word	0x0801f2cc
 80015ac:	0801f2e0 	.word	0x0801f2e0
 80015b0:	0801f2f8 	.word	0x0801f2f8
 80015b4:	0801f30c 	.word	0x0801f30c
 80015b8:	0801f328 	.word	0x0801f328
 80015bc:	0801f340 	.word	0x0801f340
 80015c0:	200005c8 	.word	0x200005c8
 80015c4:	200005cc 	.word	0x200005cc
 80015c8:	200005d0 	.word	0x200005d0
 80015cc:	0801f350 	.word	0x0801f350
 80015d0:	0801f35c 	.word	0x0801f35c
 80015d4:	200005d8 	.word	0x200005d8
 80015d8:	0801f368 	.word	0x0801f368
 80015dc:	0801f374 	.word	0x0801f374
 80015e0:	0801f380 	.word	0x0801f380

080015e4 <http_thread>:


static void http_thread(void *arg)
{ 
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  
  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	2010      	movs	r0, #16
 80015f2:	f00e fb21 	bl	800fc38 <netconn_new_with_proto_and_callback>
 80015f6:	6178      	str	r0, [r7, #20]
  
  if (conn!= NULL)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d023      	beq.n	8001646 <http_thread+0x62>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, IP_ADDR_ANY, 80);
 80015fe:	2250      	movs	r2, #80	@ 0x50
 8001600:	4913      	ldr	r1, [pc, #76]	@ (8001650 <http_thread+0x6c>)
 8001602:	6978      	ldr	r0, [r7, #20]
 8001604:	f00e fbd2 	bl	800fdac <netconn_bind>
 8001608:	4603      	mov	r3, r0
 800160a:	74fb      	strb	r3, [r7, #19]
    
    if (err == ERR_OK)
 800160c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d118      	bne.n	8001646 <http_thread+0x62>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 8001614:	21ff      	movs	r1, #255	@ 0xff
 8001616:	6978      	ldr	r0, [r7, #20]
 8001618:	f00e fc00 	bl	800fe1c <netconn_listen_with_backlog>
  
      while(1) 
      {
        /* accept any incoming connection */
        accept_err = netconn_accept(conn, &newconn);
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	4619      	mov	r1, r3
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f00e fc26 	bl	800fe74 <netconn_accept>
 8001628:	4603      	mov	r3, r0
 800162a:	74bb      	strb	r3, [r7, #18]
        if(accept_err == ERR_OK)
 800162c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f3      	bne.n	800161c <http_thread+0x38>
        {
          /* serve connection */
          http_server(newconn);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fe7c 	bl	8001334 <http_server>

          /* delete connection */
          netconn_delete(newconn);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4618      	mov	r0, r3
 8001640:	f00e fb98 	bl	800fd74 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
 8001644:	e7ea      	b.n	800161c <http_thread+0x38>
        }
      }
    }
  }
}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	08068488 	.word	0x08068488

08001654 <http_server_init>:



void http_server_init()
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af02      	add	r7, sp, #8
  sys_thread_new("http_thread", http_thread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
 800165a:	2300      	movs	r3, #0
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001662:	2200      	movs	r2, #0
 8001664:	4903      	ldr	r1, [pc, #12]	@ (8001674 <http_server_init+0x20>)
 8001666:	4804      	ldr	r0, [pc, #16]	@ (8001678 <http_server_init+0x24>)
 8001668:	f01b fdd8 	bl	801d21c <sys_thread_new>
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	080015e5 	.word	0x080015e5
 8001678:	0801f38c 	.word	0x0801f38c

0800167c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001680:	f3bf 8f4f 	dsb	sy
}
 8001684:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001686:	f3bf 8f6f 	isb	sy
}
 800168a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800168c:	4b0d      	ldr	r3, [pc, #52]	@ (80016c4 <SCB_EnableICache+0x48>)
 800168e:	2200      	movs	r2, #0
 8001690:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001694:	f3bf 8f4f 	dsb	sy
}
 8001698:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800169a:	f3bf 8f6f 	isb	sy
}
 800169e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80016a0:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <SCB_EnableICache+0x48>)
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <SCB_EnableICache+0x48>)
 80016a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016aa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80016ac:	f3bf 8f4f 	dsb	sy
}
 80016b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016b2:	f3bf 8f6f 	isb	sy
}
 80016b6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80016ce:	4b1f      	ldr	r3, [pc, #124]	@ (800174c <SCB_EnableDCache+0x84>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80016d6:	f3bf 8f4f 	dsb	sy
}
 80016da:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <SCB_EnableDCache+0x84>)
 80016de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016e2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	0b5b      	lsrs	r3, r3, #13
 80016e8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016ec:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	08db      	lsrs	r3, r3, #3
 80016f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016f6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	015a      	lsls	r2, r3, #5
 80016fc:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001700:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001706:	4911      	ldr	r1, [pc, #68]	@ (800174c <SCB_EnableDCache+0x84>)
 8001708:	4313      	orrs	r3, r2
 800170a:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	1e5a      	subs	r2, r3, #1
 8001712:	60ba      	str	r2, [r7, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1ef      	bne.n	80016f8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	1e5a      	subs	r2, r3, #1
 800171c:	60fa      	str	r2, [r7, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1e5      	bne.n	80016ee <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001722:	f3bf 8f4f 	dsb	sy
}
 8001726:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001728:	4b08      	ldr	r3, [pc, #32]	@ (800174c <SCB_EnableDCache+0x84>)
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	4a07      	ldr	r2, [pc, #28]	@ (800174c <SCB_EnableDCache+0x84>)
 800172e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001732:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001734:	f3bf 8f4f 	dsb	sy
}
 8001738:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800173a:	f3bf 8f6f 	isb	sy
}
 800173e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001750:	b5b0      	push	{r4, r5, r7, lr}
 8001752:	b096      	sub	sp, #88	@ 0x58
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001756:	f000 fad9 	bl	8001d0c <MPU_Config>

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800175a:	f7ff ff8f 	bl	800167c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800175e:	f7ff ffb3 	bl	80016c8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001762:	f000 feca 	bl	80024fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001766:	f000 f84d 	bl	8001804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800176a:	f000 f92f 	bl	80019cc <MX_GPIO_Init>
  MX_I2C2_Init();
 800176e:	f000 f8bd 	bl	80018ec <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001772:	f000 f8fb 	bl	800196c <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 512);
 8001776:	4b1d      	ldr	r3, [pc, #116]	@ (80017ec <main+0x9c>)
 8001778:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800177c:	461d      	mov	r5, r3
 800177e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001782:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001786:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800178a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f00b f936 	bl	800ca02 <osThreadCreate>
 8001796:	4603      	mov	r3, r0
 8001798:	4a15      	ldr	r2, [pc, #84]	@ (80017f0 <main+0xa0>)
 800179a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 800179c:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <main+0xa4>)
 800179e:	f107 0420 	add.w	r4, r7, #32
 80017a2:	461d      	mov	r5, r3
 80017a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80017b0:	f107 0320 	add.w	r3, r7, #32
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f00b f923 	bl	800ca02 <osThreadCreate>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a0e      	ldr	r2, [pc, #56]	@ (80017f8 <main+0xa8>)
 80017c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <main+0xac>)
 80017c4:	1d3c      	adds	r4, r7, #4
 80017c6:	461d      	mov	r5, r3
 80017c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f00b f912 	bl	800ca02 <osThreadCreate>
 80017de:	4603      	mov	r3, r0
 80017e0:	4a07      	ldr	r2, [pc, #28]	@ (8001800 <main+0xb0>)
 80017e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80017e4:	f00b f8f6 	bl	800c9d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <main+0x98>
 80017ec:	0801f3a4 	.word	0x0801f3a4
 80017f0:	200006b8 	.word	0x200006b8
 80017f4:	0801f3cc 	.word	0x0801f3cc
 80017f8:	200006bc 	.word	0x200006bc
 80017fc:	0801f3f4 	.word	0x0801f3f4
 8001800:	200006c0 	.word	0x200006c0

08001804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b094      	sub	sp, #80	@ 0x50
 8001808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180a:	f107 031c 	add.w	r3, r7, #28
 800180e:	2234      	movs	r2, #52	@ 0x34
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f01c fd3b 	bl	801e28e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001818:	f107 0308 	add.w	r3, r7, #8
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001828:	4b2e      	ldr	r3, [pc, #184]	@ (80018e4 <SystemClock_Config+0xe0>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182c:	4a2d      	ldr	r2, [pc, #180]	@ (80018e4 <SystemClock_Config+0xe0>)
 800182e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001832:	6413      	str	r3, [r2, #64]	@ 0x40
 8001834:	4b2b      	ldr	r3, [pc, #172]	@ (80018e4 <SystemClock_Config+0xe0>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001840:	4b29      	ldr	r3, [pc, #164]	@ (80018e8 <SystemClock_Config+0xe4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001848:	4a27      	ldr	r2, [pc, #156]	@ (80018e8 <SystemClock_Config+0xe4>)
 800184a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <SystemClock_Config+0xe4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800185c:	2303      	movs	r3, #3
 800185e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001860:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001864:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001866:	2301      	movs	r3, #1
 8001868:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800186a:	2310      	movs	r3, #16
 800186c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800186e:	2302      	movs	r3, #2
 8001870:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001872:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001876:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001878:	2304      	movs	r3, #4
 800187a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800187c:	2360      	movs	r3, #96	@ 0x60
 800187e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001880:	2302      	movs	r3, #2
 8001882:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001884:	2304      	movs	r3, #4
 8001886:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001888:	2302      	movs	r3, #2
 800188a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	4618      	mov	r0, r3
 8001892:	f004 fd3b 	bl	800630c <HAL_RCC_OscConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800189c:	f000 fa84 	bl	8001da8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018a0:	f004 fce4 	bl	800626c <HAL_PWREx_EnableOverDrive>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80018aa:	f000 fa7d 	bl	8001da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ae:	230f      	movs	r3, #15
 80018b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b2:	2302      	movs	r3, #2
 80018b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018c4:	f107 0308 	add.w	r3, r7, #8
 80018c8:	2103      	movs	r1, #3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f004 ffcc 	bl	8006868 <HAL_RCC_ClockConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80018d6:	f000 fa67 	bl	8001da8 <Error_Handler>
  }
}
 80018da:	bf00      	nop
 80018dc:	3750      	adds	r7, #80	@ 0x50
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40007000 	.word	0x40007000

080018ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <MX_I2C2_Init+0x74>)
 80018f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001964 <MX_I2C2_Init+0x78>)
 80018f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001960 <MX_I2C2_Init+0x74>)
 80018f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001968 <MX_I2C2_Init+0x7c>)
 80018fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80018fc:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <MX_I2C2_Init+0x74>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001902:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <MX_I2C2_Init+0x74>)
 8001904:	2201      	movs	r2, #1
 8001906:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001908:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <MX_I2C2_Init+0x74>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800190e:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <MX_I2C2_Init+0x74>)
 8001910:	2200      	movs	r2, #0
 8001912:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <MX_I2C2_Init+0x74>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800191a:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <MX_I2C2_Init+0x74>)
 800191c:	2200      	movs	r2, #0
 800191e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001920:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <MX_I2C2_Init+0x74>)
 8001922:	2200      	movs	r2, #0
 8001924:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001926:	480e      	ldr	r0, [pc, #56]	@ (8001960 <MX_I2C2_Init+0x74>)
 8001928:	f002 fbf4 	bl	8004114 <HAL_I2C_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001932:	f000 fa39 	bl	8001da8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001936:	2100      	movs	r1, #0
 8001938:	4809      	ldr	r0, [pc, #36]	@ (8001960 <MX_I2C2_Init+0x74>)
 800193a:	f003 f977 	bl	8004c2c <HAL_I2CEx_ConfigAnalogFilter>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001944:	f000 fa30 	bl	8001da8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001948:	2100      	movs	r1, #0
 800194a:	4805      	ldr	r0, [pc, #20]	@ (8001960 <MX_I2C2_Init+0x74>)
 800194c:	f003 f9b9 	bl	8004cc2 <HAL_I2CEx_ConfigDigitalFilter>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001956:	f000 fa27 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200005dc 	.word	0x200005dc
 8001964:	40005800 	.word	0x40005800
 8001968:	20303e5d 	.word	0x20303e5d

0800196c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001970:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <MX_USART2_UART_Init+0x58>)
 8001972:	4a15      	ldr	r2, [pc, #84]	@ (80019c8 <MX_USART2_UART_Init+0x5c>)
 8001974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001976:	4b13      	ldr	r3, [pc, #76]	@ (80019c4 <MX_USART2_UART_Init+0x58>)
 8001978:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800197c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800197e:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <MX_USART2_UART_Init+0x58>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001984:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <MX_USART2_UART_Init+0x58>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800198a:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <MX_USART2_UART_Init+0x58>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001990:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <MX_USART2_UART_Init+0x58>)
 8001992:	2208      	movs	r2, #8
 8001994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001996:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <MX_USART2_UART_Init+0x58>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800199c:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <MX_USART2_UART_Init+0x58>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019a2:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <MX_USART2_UART_Init+0x58>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a8:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <MX_USART2_UART_Init+0x58>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ae:	4805      	ldr	r0, [pc, #20]	@ (80019c4 <MX_USART2_UART_Init+0x58>)
 80019b0:	f006 f8ae 	bl	8007b10 <HAL_UART_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019ba:	f000 f9f5 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000630 	.word	0x20000630
 80019c8:	40004400 	.word	0x40004400

080019cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08c      	sub	sp, #48	@ 0x30
 80019d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	4a3c      	ldr	r2, [pc, #240]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ee:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	61bb      	str	r3, [r7, #24]
 80019f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019fa:	4b37      	ldr	r3, [pc, #220]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	4a36      	ldr	r2, [pc, #216]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 8001a00:	f043 0320 	orr.w	r3, r3, #32
 8001a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a06:	4b34      	ldr	r3, [pc, #208]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	f003 0320 	and.w	r3, r3, #32
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a12:	4b31      	ldr	r3, [pc, #196]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	4a30      	ldr	r2, [pc, #192]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 8001a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b28      	ldr	r3, [pc, #160]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	4b25      	ldr	r3, [pc, #148]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	4a24      	ldr	r2, [pc, #144]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4e:	4b22      	ldr	r3, [pc, #136]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 8001a60:	f043 0308 	orr.w	r3, r3, #8
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a72:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	4a18      	ldr	r2, [pc, #96]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 8001a78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7e:	4b16      	ldr	r3, [pc, #88]	@ (8001ad8 <MX_GPIO_Init+0x10c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001a90:	4812      	ldr	r0, [pc, #72]	@ (8001adc <MX_GPIO_Init+0x110>)
 8001a92:	f002 fb0b 	bl	80040ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001a96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a9c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	f107 031c 	add.w	r3, r7, #28
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480c      	ldr	r0, [pc, #48]	@ (8001ae0 <MX_GPIO_Init+0x114>)
 8001aae:	f002 f951 	bl	8003d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8001ab2:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac4:	f107 031c 	add.w	r3, r7, #28
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4804      	ldr	r0, [pc, #16]	@ (8001adc <MX_GPIO_Init+0x110>)
 8001acc:	f002 f942 	bl	8003d54 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ad0:	bf00      	nop
 8001ad2:	3730      	adds	r7, #48	@ 0x30
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020400 	.word	0x40020400
 8001ae0:	40020800 	.word	0x40020800

08001ae4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af02      	add	r7, sp, #8
 8001aea:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001aec:	f008 f8a4 	bl	8009c38 <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001af0:	f01b fbd8 	bl	801d2a4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  http_server_init();
 8001af4:	f7ff fdae 	bl	8001654 <http_server_init>
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001af8:	2304      	movs	r3, #4
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	2300      	movs	r3, #0
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2303      	movs	r3, #3
 8001b02:	2201      	movs	r2, #1
 8001b04:	2105      	movs	r1, #5
 8001b06:	2002      	movs	r0, #2
 8001b08:	f7fe feda 	bl	80008c0 <BME280_Config>
  //CDC_Transmit_FS(USB_secondMessage,strlen(USB_firstMessage));
  /* Infinite loop */
  for(;;)
  {
	//Температура
	if (alert[0]==49) {
 8001b0c:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <StartDefaultTask+0x70>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b31      	cmp	r3, #49	@ 0x31
 8001b12:	d105      	bne.n	8001b20 <StartDefaultTask+0x3c>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	2101      	movs	r1, #1
 8001b18:	480f      	ldr	r0, [pc, #60]	@ (8001b58 <StartDefaultTask+0x74>)
 8001b1a:	f002 fac7 	bl	80040ac <HAL_GPIO_WritePin>
 8001b1e:	e004      	b.n	8001b2a <StartDefaultTask+0x46>
	}
	else {
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2101      	movs	r1, #1
 8001b24:	480c      	ldr	r0, [pc, #48]	@ (8001b58 <StartDefaultTask+0x74>)
 8001b26:	f002 fac1 	bl	80040ac <HAL_GPIO_WritePin>
		}

	if (alert[0]==50) {
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <StartDefaultTask+0x70>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b32      	cmp	r3, #50	@ 0x32
 8001b30:	d106      	bne.n	8001b40 <StartDefaultTask+0x5c>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8001b32:	2201      	movs	r2, #1
 8001b34:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b38:	4807      	ldr	r0, [pc, #28]	@ (8001b58 <StartDefaultTask+0x74>)
 8001b3a:	f002 fab7 	bl	80040ac <HAL_GPIO_WritePin>
 8001b3e:	e005      	b.n	8001b4c <StartDefaultTask+0x68>
		}
	else{
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b46:	4804      	ldr	r0, [pc, #16]	@ (8001b58 <StartDefaultTask+0x74>)
 8001b48:	f002 fab0 	bl	80040ac <HAL_GPIO_WritePin>
			}
    osDelay(1);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f00a ffb0 	bl	800cab2 <osDelay>
	if (alert[0]==49) {
 8001b52:	e7db      	b.n	8001b0c <StartDefaultTask+0x28>
 8001b54:	200005d8 	.word	0x200005d8
 8001b58:	40020400 	.word	0x40020400

08001b5c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	BME280_Measure();
 8001b64:	f7ff fb48 	bl	80011f8 <BME280_Measure>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001b68:	2180      	movs	r1, #128	@ 0x80
 8001b6a:	4824      	ldr	r0, [pc, #144]	@ (8001bfc <StartTask02+0xa0>)
 8001b6c:	f002 fab7 	bl	80040de <HAL_GPIO_TogglePin>
	int Temperature_rest = (int)((Temperature - (int)Temperature) * 100);
 8001b70:	4b23      	ldr	r3, [pc, #140]	@ (8001c00 <StartTask02+0xa4>)
 8001b72:	ed93 7a00 	vldr	s14, [r3]
 8001b76:	4b22      	ldr	r3, [pc, #136]	@ (8001c00 <StartTask02+0xa4>)
 8001b78:	edd3 7a00 	vldr	s15, [r3]
 8001b7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b88:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001c04 <StartTask02+0xa8>
 8001b8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b94:	ee17 3a90 	vmov	r3, s15
 8001b98:	617b      	str	r3, [r7, #20]
	int Pressure_rest = (int)((Pressure - (int)Pressure) * 100);
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c08 <StartTask02+0xac>)
 8001b9c:	ed93 7a00 	vldr	s14, [r3]
 8001ba0:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <StartTask02+0xac>)
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001c04 <StartTask02+0xa8>
 8001bb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bbe:	ee17 3a90 	vmov	r3, s15
 8001bc2:	613b      	str	r3, [r7, #16]
	int Humidity_rest = (int)((Humidity - (int)Humidity) * 100);
 8001bc4:	4b11      	ldr	r3, [pc, #68]	@ (8001c0c <StartTask02+0xb0>)
 8001bc6:	ed93 7a00 	vldr	s14, [r3]
 8001bca:	4b10      	ldr	r3, [pc, #64]	@ (8001c0c <StartTask02+0xb0>)
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bdc:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001c04 <StartTask02+0xa8>
 8001be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001be8:	ee17 3a90 	vmov	r3, s15
 8001bec:	60fb      	str	r3, [r7, #12]
    osDelay(500);
 8001bee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bf2:	f00a ff5e 	bl	800cab2 <osDelay>
  {
 8001bf6:	bf00      	nop
 8001bf8:	e7b4      	b.n	8001b64 <StartTask02+0x8>
 8001bfa:	bf00      	nop
 8001bfc:	40020400 	.word	0x40020400
 8001c00:	200005c8 	.word	0x200005c8
 8001c04:	42c80000 	.word	0x42c80000
 8001c08:	200005cc 	.word	0x200005cc
 8001c0c:	200005d0 	.word	0x200005d0

08001c10 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af04      	add	r7, sp, #16
 8001c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	sprintf(USB_TxData,"Temperature- %d.%d,     Pressure- %d.%d,     Humidity- %d.%d\n\r", (int)Temperature, Temperature_rest, (int)Pressure, Pressure_rest, (int)Humidity, Humidity_rest);
 8001c18:	4b31      	ldr	r3, [pc, #196]	@ (8001ce0 <StartTask03+0xd0>)
 8001c1a:	edd3 7a00 	vldr	s15, [r3]
 8001c1e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001c22:	4b30      	ldr	r3, [pc, #192]	@ (8001ce4 <StartTask03+0xd4>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	4619      	mov	r1, r3
 8001c28:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce8 <StartTask03+0xd8>)
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c32:	ee17 0a90 	vmov	r0, s15
 8001c36:	4b2d      	ldr	r3, [pc, #180]	@ (8001cec <StartTask03+0xdc>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf0 <StartTask03+0xe0>)
 8001c3e:	edd3 7a00 	vldr	s15, [r3]
 8001c42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c46:	ee17 4a90 	vmov	r4, s15
 8001c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf4 <StartTask03+0xe4>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	9303      	str	r3, [sp, #12]
 8001c50:	9402      	str	r4, [sp, #8]
 8001c52:	9201      	str	r2, [sp, #4]
 8001c54:	9000      	str	r0, [sp, #0]
 8001c56:	460b      	mov	r3, r1
 8001c58:	ee17 2a10 	vmov	r2, s14
 8001c5c:	4926      	ldr	r1, [pc, #152]	@ (8001cf8 <StartTask03+0xe8>)
 8001c5e:	4827      	ldr	r0, [pc, #156]	@ (8001cfc <StartTask03+0xec>)
 8001c60:	f01c fa86 	bl	801e170 <siprintf>
	CDC_Transmit_FS(USB_TxData, strlen(USB_TxData));
 8001c64:	4825      	ldr	r0, [pc, #148]	@ (8001cfc <StartTask03+0xec>)
 8001c66:	f7fe faf5 	bl	8000254 <strlen>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4823      	ldr	r0, [pc, #140]	@ (8001cfc <StartTask03+0xec>)
 8001c70:	f01b fbd6 	bl	801d420 <CDC_Transmit_FS>
	data[0]=160;
 8001c74:	4b22      	ldr	r3, [pc, #136]	@ (8001d00 <StartTask03+0xf0>)
 8001c76:	22a0      	movs	r2, #160	@ 0xa0
 8001c78:	701a      	strb	r2, [r3, #0]
	data[1]=(int)Temperature;
 8001c7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ce0 <StartTask03+0xd0>)
 8001c7c:	edd3 7a00 	vldr	s15, [r3]
 8001c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c84:	edc7 7a00 	vstr	s15, [r7]
 8001c88:	783a      	ldrb	r2, [r7, #0]
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d00 <StartTask03+0xf0>)
 8001c8c:	705a      	strb	r2, [r3, #1]
	data[2]=(uint8_t)(Pressure/1000);
 8001c8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ce8 <StartTask03+0xd8>)
 8001c90:	ed93 7a00 	vldr	s14, [r3]
 8001c94:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001d04 <StartTask03+0xf4>
 8001c98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca0:	edc7 7a00 	vstr	s15, [r7]
 8001ca4:	783b      	ldrb	r3, [r7, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <StartTask03+0xf0>)
 8001caa:	709a      	strb	r2, [r3, #2]
	data[3]=(int)Humidity;
 8001cac:	4b10      	ldr	r3, [pc, #64]	@ (8001cf0 <StartTask03+0xe0>)
 8001cae:	edd3 7a00 	vldr	s15, [r3]
 8001cb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cb6:	edc7 7a00 	vstr	s15, [r7]
 8001cba:	783a      	ldrb	r2, [r7, #0]
 8001cbc:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <StartTask03+0xf0>)
 8001cbe:	70da      	strb	r2, [r3, #3]
	data[4]=254;
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d00 <StartTask03+0xf0>)
 8001cc2:	22fe      	movs	r2, #254	@ 0xfe
 8001cc4:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart2, data, sizeof(data), HAL_MAX_DELAY);
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cca:	2205      	movs	r2, #5
 8001ccc:	490c      	ldr	r1, [pc, #48]	@ (8001d00 <StartTask03+0xf0>)
 8001cce:	480e      	ldr	r0, [pc, #56]	@ (8001d08 <StartTask03+0xf8>)
 8001cd0:	f005 ff6c 	bl	8007bac <HAL_UART_Transmit>
    osDelay(800);
 8001cd4:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001cd8:	f00a feeb 	bl	800cab2 <osDelay>
  {
 8001cdc:	bf00      	nop
 8001cde:	e79b      	b.n	8001c18 <StartTask03+0x8>
 8001ce0:	200005c8 	.word	0x200005c8
 8001ce4:	200005d4 	.word	0x200005d4
 8001ce8:	200005cc 	.word	0x200005cc
 8001cec:	200005d5 	.word	0x200005d5
 8001cf0:	200005d0 	.word	0x200005d0
 8001cf4:	200005d6 	.word	0x200005d6
 8001cf8:	0801f410 	.word	0x0801f410
 8001cfc:	200006c4 	.word	0x200006c4
 8001d00:	20000000 	.word	0x20000000
 8001d04:	447a0000 	.word	0x447a0000
 8001d08:	20000630 	.word	0x20000630

08001d0c <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001d12:	463b      	mov	r3, r7
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001d1e:	f000 fd2b 	bl	8002778 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d22:	2301      	movs	r3, #1
 8001d24:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20020000;
 8001d2a:	4b14      	ldr	r3, [pc, #80]	@ (8001d7c <MPU_Config+0x70>)
 8001d2c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001d2e:	230d      	movs	r3, #13
 8001d30:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001d36:	2301      	movs	r3, #1
 8001d38:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d4e:	463b      	mov	r3, r7
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 fd49 	bl	80027e8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001d56:	2301      	movs	r3, #1
 8001d58:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20040000;
 8001d5a:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <MPU_Config+0x74>)
 8001d5c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001d5e:	230e      	movs	r3, #14
 8001d60:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001d62:	2301      	movs	r3, #1
 8001d64:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d66:	463b      	mov	r3, r7
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 fd3d 	bl	80027e8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001d6e:	2004      	movs	r0, #4
 8001d70:	f000 fd1a 	bl	80027a8 <HAL_MPU_Enable>

}
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20020000 	.word	0x20020000
 8001d80:	20040000 	.word	0x20040000

08001d84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a04      	ldr	r2, [pc, #16]	@ (8001da4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d101      	bne.n	8001d9a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001d96:	f000 fbbd 	bl	8002514 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40001000 	.word	0x40001000

08001da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001dac:	b672      	cpsid	i
}
 8001dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <Error_Handler+0x8>

08001db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <HAL_MspInit+0x4c>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	4a10      	ldr	r2, [pc, #64]	@ (8001e00 <HAL_MspInit+0x4c>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e00 <HAL_MspInit+0x4c>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <HAL_MspInit+0x4c>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <HAL_MspInit+0x4c>)
 8001dd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ddc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dde:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <HAL_MspInit+0x4c>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	210f      	movs	r1, #15
 8001dee:	f06f 0001 	mvn.w	r0, #1
 8001df2:	f000 fc97 	bl	8002724 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800

08001e04 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b0ae      	sub	sp, #184	@ 0xb8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2290      	movs	r2, #144	@ 0x90
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f01c fa32 	bl	801e28e <memset>
  if(hi2c->Instance==I2C2)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a21      	ldr	r2, [pc, #132]	@ (8001eb4 <HAL_I2C_MspInit+0xb0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d13b      	bne.n	8001eac <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e38:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4618      	mov	r0, r3
 8001e44:	f004 ff68 	bl	8006d18 <HAL_RCCEx_PeriphCLKConfig>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e4e:	f7ff ffab 	bl	8001da8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e52:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <HAL_I2C_MspInit+0xb4>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	4a18      	ldr	r2, [pc, #96]	@ (8001eb8 <HAL_I2C_MspInit+0xb4>)
 8001e58:	f043 0320 	orr.w	r3, r3, #32
 8001e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5e:	4b16      	ldr	r3, [pc, #88]	@ (8001eb8 <HAL_I2C_MspInit+0xb4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e70:	2312      	movs	r3, #18
 8001e72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e82:	2304      	movs	r3, #4
 8001e84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e88:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	480b      	ldr	r0, [pc, #44]	@ (8001ebc <HAL_I2C_MspInit+0xb8>)
 8001e90:	f001 ff60 	bl	8003d54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e94:	4b08      	ldr	r3, [pc, #32]	@ (8001eb8 <HAL_I2C_MspInit+0xb4>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	4a07      	ldr	r2, [pc, #28]	@ (8001eb8 <HAL_I2C_MspInit+0xb4>)
 8001e9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea0:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <HAL_I2C_MspInit+0xb4>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001eac:	bf00      	nop
 8001eae:	37b8      	adds	r7, #184	@ 0xb8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40005800 	.word	0x40005800
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40021400 	.word	0x40021400

08001ec0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b0ae      	sub	sp, #184	@ 0xb8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	2290      	movs	r2, #144	@ 0x90
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f01c f9d4 	bl	801e28e <memset>
  if(huart->Instance==USART2)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a21      	ldr	r2, [pc, #132]	@ (8001f70 <HAL_UART_MspInit+0xb0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d13a      	bne.n	8001f66 <HAL_UART_MspInit+0xa6>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ef0:	2380      	movs	r3, #128	@ 0x80
 8001ef2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	4618      	mov	r0, r3
 8001efe:	f004 ff0b 	bl	8006d18 <HAL_RCCEx_PeriphCLKConfig>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f08:	f7ff ff4e 	bl	8001da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f0c:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <HAL_UART_MspInit+0xb4>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	4a18      	ldr	r2, [pc, #96]	@ (8001f74 <HAL_UART_MspInit+0xb4>)
 8001f12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f16:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f18:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <HAL_UART_MspInit+0xb4>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f24:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <HAL_UART_MspInit+0xb4>)
 8001f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f28:	4a12      	ldr	r2, [pc, #72]	@ (8001f74 <HAL_UART_MspInit+0xb4>)
 8001f2a:	f043 0308 	orr.w	r3, r3, #8
 8001f2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f30:	4b10      	ldr	r3, [pc, #64]	@ (8001f74 <HAL_UART_MspInit+0xb4>)
 8001f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001f3c:	2360      	movs	r3, #96	@ 0x60
 8001f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f54:	2307      	movs	r3, #7
 8001f56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f5a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4805      	ldr	r0, [pc, #20]	@ (8001f78 <HAL_UART_MspInit+0xb8>)
 8001f62:	f001 fef7 	bl	8003d54 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f66:	bf00      	nop
 8001f68:	37b8      	adds	r7, #184	@ 0xb8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40004400 	.word	0x40004400
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40020c00 	.word	0x40020c00

08001f7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08e      	sub	sp, #56	@ 0x38
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f8c:	4b33      	ldr	r3, [pc, #204]	@ (800205c <HAL_InitTick+0xe0>)
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	4a32      	ldr	r2, [pc, #200]	@ (800205c <HAL_InitTick+0xe0>)
 8001f92:	f043 0310 	orr.w	r3, r3, #16
 8001f96:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f98:	4b30      	ldr	r3, [pc, #192]	@ (800205c <HAL_InitTick+0xe0>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fa4:	f107 0210 	add.w	r2, r7, #16
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f004 fe80 	bl	8006cb4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d103      	bne.n	8001fc6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fbe:	f004 fe51 	bl	8006c64 <HAL_RCC_GetPCLK1Freq>
 8001fc2:	6378      	str	r0, [r7, #52]	@ 0x34
 8001fc4:	e004      	b.n	8001fd0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001fc6:	f004 fe4d 	bl	8006c64 <HAL_RCC_GetPCLK1Freq>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fd2:	4a23      	ldr	r2, [pc, #140]	@ (8002060 <HAL_InitTick+0xe4>)
 8001fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd8:	0c9b      	lsrs	r3, r3, #18
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001fde:	4b21      	ldr	r3, [pc, #132]	@ (8002064 <HAL_InitTick+0xe8>)
 8001fe0:	4a21      	ldr	r2, [pc, #132]	@ (8002068 <HAL_InitTick+0xec>)
 8001fe2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8002064 <HAL_InitTick+0xe8>)
 8001fe6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001fec:	4a1d      	ldr	r2, [pc, #116]	@ (8002064 <HAL_InitTick+0xe8>)
 8001fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8002064 <HAL_InitTick+0xe8>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8002064 <HAL_InitTick+0xe8>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffe:	4b19      	ldr	r3, [pc, #100]	@ (8002064 <HAL_InitTick+0xe8>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002004:	4817      	ldr	r0, [pc, #92]	@ (8002064 <HAL_InitTick+0xe8>)
 8002006:	f005 faaf 	bl	8007568 <HAL_TIM_Base_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002010:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002014:	2b00      	cmp	r3, #0
 8002016:	d11b      	bne.n	8002050 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002018:	4812      	ldr	r0, [pc, #72]	@ (8002064 <HAL_InitTick+0xe8>)
 800201a:	f005 fb07 	bl	800762c <HAL_TIM_Base_Start_IT>
 800201e:	4603      	mov	r3, r0
 8002020:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002024:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002028:	2b00      	cmp	r3, #0
 800202a:	d111      	bne.n	8002050 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800202c:	2036      	movs	r0, #54	@ 0x36
 800202e:	f000 fb95 	bl	800275c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b0f      	cmp	r3, #15
 8002036:	d808      	bhi.n	800204a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002038:	2200      	movs	r2, #0
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	2036      	movs	r0, #54	@ 0x36
 800203e:	f000 fb71 	bl	8002724 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002042:	4a0a      	ldr	r2, [pc, #40]	@ (800206c <HAL_InitTick+0xf0>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	e002      	b.n	8002050 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002050:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002054:	4618      	mov	r0, r3
 8002056:	3738      	adds	r7, #56	@ 0x38
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40023800 	.word	0x40023800
 8002060:	431bde83 	.word	0x431bde83
 8002064:	20000714 	.word	0x20000714
 8002068:	40001000 	.word	0x40001000
 800206c:	2000000c 	.word	0x2000000c

08002070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <NMI_Handler+0x4>

08002078 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <HardFault_Handler+0x4>

08002080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <MemManage_Handler+0x4>

08002088 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <BusFault_Handler+0x4>

08002090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <UsageFault_Handler+0x4>

08002098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020ac:	4802      	ldr	r0, [pc, #8]	@ (80020b8 <TIM6_DAC_IRQHandler+0x10>)
 80020ae:	f005 fb35 	bl	800771c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000714 	.word	0x20000714

080020bc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80020c0:	4802      	ldr	r0, [pc, #8]	@ (80020cc <ETH_IRQHandler+0x10>)
 80020c2:	f000 ff5f 	bl	8002f84 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20005148 	.word	0x20005148

080020d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020d4:	4802      	ldr	r0, [pc, #8]	@ (80020e0 <OTG_FS_IRQHandler+0x10>)
 80020d6:	f002 ff78 	bl	8004fca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	2000fb2c 	.word	0x2000fb2c

080020e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return 1;
 80020e8:	2301      	movs	r3, #1
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <_kill>:

int _kill(int pid, int sig)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020fe:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <_kill+0x20>)
 8002100:	2216      	movs	r2, #22
 8002102:	601a      	str	r2, [r3, #0]
  return -1;
 8002104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	20010150 	.word	0x20010150

08002118 <_exit>:

void _exit (int status)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ffe5 	bl	80020f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800212a:	bf00      	nop
 800212c:	e7fd      	b.n	800212a <_exit+0x12>

0800212e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	e00a      	b.n	8002156 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002140:	f3af 8000 	nop.w
 8002144:	4601      	mov	r1, r0
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	60ba      	str	r2, [r7, #8]
 800214c:	b2ca      	uxtb	r2, r1
 800214e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	3301      	adds	r3, #1
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	429a      	cmp	r2, r3
 800215c:	dbf0      	blt.n	8002140 <_read+0x12>
  }

  return len;
 800215e:	687b      	ldr	r3, [r7, #4]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	e009      	b.n	800218e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	60ba      	str	r2, [r7, #8]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	3301      	adds	r3, #1
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	429a      	cmp	r2, r3
 8002194:	dbf1      	blt.n	800217a <_write+0x12>
  }
  return len;
 8002196:	687b      	ldr	r3, [r7, #4]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <_close>:

int _close(int file)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021c8:	605a      	str	r2, [r3, #4]
  return 0;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <_isatty>:

int _isatty(int file)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021e0:	2301      	movs	r3, #1
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b085      	sub	sp, #20
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002210:	4a14      	ldr	r2, [pc, #80]	@ (8002264 <_sbrk+0x5c>)
 8002212:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <_sbrk+0x60>)
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800221c:	4b13      	ldr	r3, [pc, #76]	@ (800226c <_sbrk+0x64>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002224:	4b11      	ldr	r3, [pc, #68]	@ (800226c <_sbrk+0x64>)
 8002226:	4a12      	ldr	r2, [pc, #72]	@ (8002270 <_sbrk+0x68>)
 8002228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800222a:	4b10      	ldr	r3, [pc, #64]	@ (800226c <_sbrk+0x64>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	429a      	cmp	r2, r3
 8002236:	d205      	bcs.n	8002244 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002238:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <_sbrk+0x6c>)
 800223a:	220c      	movs	r2, #12
 800223c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800223e:	f04f 33ff 	mov.w	r3, #4294967295
 8002242:	e009      	b.n	8002258 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002244:	4b09      	ldr	r3, [pc, #36]	@ (800226c <_sbrk+0x64>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800224a:	4b08      	ldr	r3, [pc, #32]	@ (800226c <_sbrk+0x64>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	4a06      	ldr	r2, [pc, #24]	@ (800226c <_sbrk+0x64>)
 8002254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002256:	68fb      	ldr	r3, [r7, #12]
}
 8002258:	4618      	mov	r0, r3
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	20080000 	.word	0x20080000
 8002268:	00000400 	.word	0x00000400
 800226c:	20000760 	.word	0x20000760
 8002270:	20010158 	.word	0x20010158
 8002274:	20010150 	.word	0x20010150

08002278 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800227c:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <SystemInit+0x20>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002282:	4a05      	ldr	r2, [pc, #20]	@ (8002298 <SystemInit+0x20>)
 8002284:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002288:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800229c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022a0:	f7ff ffea 	bl	8002278 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022a4:	480c      	ldr	r0, [pc, #48]	@ (80022d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022a6:	490d      	ldr	r1, [pc, #52]	@ (80022dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022a8:	4a0d      	ldr	r2, [pc, #52]	@ (80022e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ac:	e002      	b.n	80022b4 <LoopCopyDataInit>

080022ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022b2:	3304      	adds	r3, #4

080022b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b8:	d3f9      	bcc.n	80022ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ba:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022bc:	4c0a      	ldr	r4, [pc, #40]	@ (80022e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c0:	e001      	b.n	80022c6 <LoopFillZerobss>

080022c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c4:	3204      	adds	r2, #4

080022c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c8:	d3fb      	bcc.n	80022c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022ca:	f01c f8af 	bl	801e42c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ce:	f7ff fa3f 	bl	8001750 <main>
  bx  lr    
 80022d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022d4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80022d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022dc:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 80022e0:	08068594 	.word	0x08068594
  ldr r2, =_sbss
 80022e4:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 80022e8:	20010158 	.word	0x20010158

080022ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022ec:	e7fe      	b.n	80022ec <ADC_IRQHandler>

080022ee <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <LAN8742_RegisterBusIO+0x28>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <LAN8742_RegisterBusIO+0x28>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <LAN8742_RegisterBusIO+0x28>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d102      	bne.n	800231c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002316:	f04f 33ff 	mov.w	r3, #4294967295
 800231a:	e014      	b.n	8002346 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d139      	bne.n	80023e2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2220      	movs	r2, #32
 8002380:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e01c      	b.n	80023c2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	f107 020c 	add.w	r2, r7, #12
 8002390:	2112      	movs	r1, #18
 8002392:	6978      	ldr	r0, [r7, #20]
 8002394:	4798      	blx	r3
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	da03      	bge.n	80023a4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 800239c:	f06f 0304 	mvn.w	r3, #4
 80023a0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80023a2:	e00b      	b.n	80023bc <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d105      	bne.n	80023bc <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
         break;
 80023ba:	e005      	b.n	80023c8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	3301      	adds	r3, #1
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b1f      	cmp	r3, #31
 80023c6:	d9df      	bls.n	8002388 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b1f      	cmp	r3, #31
 80023ce:	d902      	bls.n	80023d6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80023d0:	f06f 0302 	mvn.w	r3, #2
 80023d4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80023e2:	693b      	ldr	r3, [r7, #16]
 }
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6810      	ldr	r0, [r2, #0]
 8002400:	f107 020c 	add.w	r2, r7, #12
 8002404:	2101      	movs	r1, #1
 8002406:	4798      	blx	r3
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	da02      	bge.n	8002414 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800240e:	f06f 0304 	mvn.w	r3, #4
 8002412:	e06e      	b.n	80024f2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6810      	ldr	r0, [r2, #0]
 800241c:	f107 020c 	add.w	r2, r7, #12
 8002420:	2101      	movs	r1, #1
 8002422:	4798      	blx	r3
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	da02      	bge.n	8002430 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800242a:	f06f 0304 	mvn.w	r3, #4
 800242e:	e060      	b.n	80024f2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800243a:	2301      	movs	r3, #1
 800243c:	e059      	b.n	80024f2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6810      	ldr	r0, [r2, #0]
 8002446:	f107 020c 	add.w	r2, r7, #12
 800244a:	2100      	movs	r1, #0
 800244c:	4798      	blx	r3
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	da02      	bge.n	800245a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002454:	f06f 0304 	mvn.w	r3, #4
 8002458:	e04b      	b.n	80024f2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d11b      	bne.n	800249c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d006      	beq.n	800247c <LAN8742_GetLinkState+0x90>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002478:	2302      	movs	r3, #2
 800247a:	e03a      	b.n	80024f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002486:	2303      	movs	r3, #3
 8002488:	e033      	b.n	80024f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002494:	2304      	movs	r3, #4
 8002496:	e02c      	b.n	80024f2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002498:	2305      	movs	r3, #5
 800249a:	e02a      	b.n	80024f2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6810      	ldr	r0, [r2, #0]
 80024a4:	f107 020c 	add.w	r2, r7, #12
 80024a8:	211f      	movs	r1, #31
 80024aa:	4798      	blx	r3
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	da02      	bge.n	80024b8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80024b2:	f06f 0304 	mvn.w	r3, #4
 80024b6:	e01c      	b.n	80024f2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80024c2:	2306      	movs	r3, #6
 80024c4:	e015      	b.n	80024f2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 031c 	and.w	r3, r3, #28
 80024cc:	2b18      	cmp	r3, #24
 80024ce:	d101      	bne.n	80024d4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80024d0:	2302      	movs	r3, #2
 80024d2:	e00e      	b.n	80024f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 031c 	and.w	r3, r3, #28
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d101      	bne.n	80024e2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80024de:	2303      	movs	r3, #3
 80024e0:	e007      	b.n	80024f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f003 031c 	and.w	r3, r3, #28
 80024e8:	2b14      	cmp	r3, #20
 80024ea:	d101      	bne.n	80024f0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80024ec:	2304      	movs	r3, #4
 80024ee:	e000      	b.n	80024f2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80024f0:	2305      	movs	r3, #5
    }
  }
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024fe:	2003      	movs	r0, #3
 8002500:	f000 f905 	bl	800270e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002504:	200f      	movs	r0, #15
 8002506:	f7ff fd39 	bl	8001f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800250a:	f7ff fc53 	bl	8001db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002518:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <HAL_IncTick+0x20>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <HAL_IncTick+0x24>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4413      	add	r3, r2
 8002524:	4a04      	ldr	r2, [pc, #16]	@ (8002538 <HAL_IncTick+0x24>)
 8002526:	6013      	str	r3, [r2, #0]
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20000010 	.word	0x20000010
 8002538:	20000764 	.word	0x20000764

0800253c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return uwTick;
 8002540:	4b03      	ldr	r3, [pc, #12]	@ (8002550 <HAL_GetTick+0x14>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20000764 	.word	0x20000764

08002554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800255c:	f7ff ffee 	bl	800253c <HAL_GetTick>
 8002560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256c:	d005      	beq.n	800257a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800256e:	4b0a      	ldr	r3, [pc, #40]	@ (8002598 <HAL_Delay+0x44>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4413      	add	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800257a:	bf00      	nop
 800257c:	f7ff ffde 	bl	800253c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	429a      	cmp	r2, r3
 800258a:	d8f7      	bhi.n	800257c <HAL_Delay+0x28>
  {
  }
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000010 	.word	0x20000010

0800259c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 80025a0:	4b03      	ldr	r3, [pc, #12]	@ (80025b0 <HAL_GetREVID+0x14>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	0c1b      	lsrs	r3, r3, #16
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e0042000 	.word	0xe0042000

080025b4 <__NVIC_SetPriorityGrouping>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c4:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <__NVIC_SetPriorityGrouping+0x40>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025d0:	4013      	ands	r3, r2
 80025d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025dc:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <__NVIC_SetPriorityGrouping+0x44>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025e2:	4a04      	ldr	r2, [pc, #16]	@ (80025f4 <__NVIC_SetPriorityGrouping+0x40>)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	60d3      	str	r3, [r2, #12]
}
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000ed00 	.word	0xe000ed00
 80025f8:	05fa0000 	.word	0x05fa0000

080025fc <__NVIC_GetPriorityGrouping>:
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002600:	4b04      	ldr	r3, [pc, #16]	@ (8002614 <__NVIC_GetPriorityGrouping+0x18>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	f003 0307 	and.w	r3, r3, #7
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_EnableIRQ>:
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	2b00      	cmp	r3, #0
 8002628:	db0b      	blt.n	8002642 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	f003 021f 	and.w	r2, r3, #31
 8002630:	4907      	ldr	r1, [pc, #28]	@ (8002650 <__NVIC_EnableIRQ+0x38>)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	2001      	movs	r0, #1
 800263a:	fa00 f202 	lsl.w	r2, r0, r2
 800263e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000e100 	.word	0xe000e100

08002654 <__NVIC_SetPriority>:
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	6039      	str	r1, [r7, #0]
 800265e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	2b00      	cmp	r3, #0
 8002666:	db0a      	blt.n	800267e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	b2da      	uxtb	r2, r3
 800266c:	490c      	ldr	r1, [pc, #48]	@ (80026a0 <__NVIC_SetPriority+0x4c>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	0112      	lsls	r2, r2, #4
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	440b      	add	r3, r1
 8002678:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800267c:	e00a      	b.n	8002694 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4908      	ldr	r1, [pc, #32]	@ (80026a4 <__NVIC_SetPriority+0x50>)
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	3b04      	subs	r3, #4
 800268c:	0112      	lsls	r2, r2, #4
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	440b      	add	r3, r1
 8002692:	761a      	strb	r2, [r3, #24]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000e100 	.word	0xe000e100
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <NVIC_EncodePriority>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	@ 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f1c3 0307 	rsb	r3, r3, #7
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	bf28      	it	cs
 80026c6:	2304      	movcs	r3, #4
 80026c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3304      	adds	r3, #4
 80026ce:	2b06      	cmp	r3, #6
 80026d0:	d902      	bls.n	80026d8 <NVIC_EncodePriority+0x30>
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3b03      	subs	r3, #3
 80026d6:	e000      	b.n	80026da <NVIC_EncodePriority+0x32>
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	f04f 32ff 	mov.w	r2, #4294967295
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43da      	mvns	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	401a      	ands	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f0:	f04f 31ff 	mov.w	r1, #4294967295
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	43d9      	mvns	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	4313      	orrs	r3, r2
}
 8002702:	4618      	mov	r0, r3
 8002704:	3724      	adds	r7, #36	@ 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ff4c 	bl	80025b4 <__NVIC_SetPriorityGrouping>
}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002736:	f7ff ff61 	bl	80025fc <__NVIC_GetPriorityGrouping>
 800273a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	6978      	ldr	r0, [r7, #20]
 8002742:	f7ff ffb1 	bl	80026a8 <NVIC_EncodePriority>
 8002746:	4602      	mov	r2, r0
 8002748:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff ff80 	bl	8002654 <__NVIC_SetPriority>
}
 8002754:	bf00      	nop
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff ff54 	bl	8002618 <__NVIC_EnableIRQ>
}
 8002770:	bf00      	nop
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800277c:	f3bf 8f5f 	dmb	sy
}
 8002780:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002782:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <HAL_MPU_Disable+0x28>)
 8002784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002786:	4a06      	ldr	r2, [pc, #24]	@ (80027a0 <HAL_MPU_Disable+0x28>)
 8002788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800278c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800278e:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <HAL_MPU_Disable+0x2c>)
 8002790:	2200      	movs	r2, #0
 8002792:	605a      	str	r2, [r3, #4]
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	e000ed00 	.word	0xe000ed00
 80027a4:	e000ed90 	.word	0xe000ed90

080027a8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80027b0:	4a0b      	ldr	r2, [pc, #44]	@ (80027e0 <HAL_MPU_Enable+0x38>)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80027ba:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <HAL_MPU_Enable+0x3c>)
 80027bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027be:	4a09      	ldr	r2, [pc, #36]	@ (80027e4 <HAL_MPU_Enable+0x3c>)
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80027c6:	f3bf 8f4f 	dsb	sy
}
 80027ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027cc:	f3bf 8f6f 	isb	sy
}
 80027d0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000ed90 	.word	0xe000ed90
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	785a      	ldrb	r2, [r3, #1]
 80027f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002864 <HAL_MPU_ConfigRegion+0x7c>)
 80027f6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80027f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002864 <HAL_MPU_ConfigRegion+0x7c>)
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	4a19      	ldr	r2, [pc, #100]	@ (8002864 <HAL_MPU_ConfigRegion+0x7c>)
 80027fe:	f023 0301 	bic.w	r3, r3, #1
 8002802:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002804:	4a17      	ldr	r2, [pc, #92]	@ (8002864 <HAL_MPU_ConfigRegion+0x7c>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	7b1b      	ldrb	r3, [r3, #12]
 8002810:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	7adb      	ldrb	r3, [r3, #11]
 8002816:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002818:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	7a9b      	ldrb	r3, [r3, #10]
 800281e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002820:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	7b5b      	ldrb	r3, [r3, #13]
 8002826:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002828:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	7b9b      	ldrb	r3, [r3, #14]
 800282e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002830:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	7bdb      	ldrb	r3, [r3, #15]
 8002836:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002838:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	7a5b      	ldrb	r3, [r3, #9]
 800283e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002840:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	7a1b      	ldrb	r3, [r3, #8]
 8002846:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002848:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	7812      	ldrb	r2, [r2, #0]
 800284e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002850:	4a04      	ldr	r2, [pc, #16]	@ (8002864 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002852:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002854:	6113      	str	r3, [r2, #16]
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000ed90 	.word	0xe000ed90

08002868 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e086      	b.n	8002988 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002880:	2b00      	cmp	r3, #0
 8002882:	d106      	bne.n	8002892 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2223      	movs	r2, #35	@ 0x23
 8002888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f007 fe2d 	bl	800a4ec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002892:	4b3f      	ldr	r3, [pc, #252]	@ (8002990 <HAL_ETH_Init+0x128>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002896:	4a3e      	ldr	r2, [pc, #248]	@ (8002990 <HAL_ETH_Init+0x128>)
 8002898:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800289c:	6453      	str	r3, [r2, #68]	@ 0x44
 800289e:	4b3c      	ldr	r3, [pc, #240]	@ (8002990 <HAL_ETH_Init+0x128>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80028aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002994 <HAL_ETH_Init+0x12c>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4a39      	ldr	r2, [pc, #228]	@ (8002994 <HAL_ETH_Init+0x12c>)
 80028b0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80028b4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80028b6:	4b37      	ldr	r3, [pc, #220]	@ (8002994 <HAL_ETH_Init+0x12c>)
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	4935      	ldr	r1, [pc, #212]	@ (8002994 <HAL_ETH_Init+0x12c>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80028c4:	4b33      	ldr	r3, [pc, #204]	@ (8002994 <HAL_ETH_Init+0x12c>)
 80028c6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028e0:	f7ff fe2c 	bl	800253c <HAL_GetTick>
 80028e4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028e6:	e011      	b.n	800290c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80028e8:	f7ff fe28 	bl	800253c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80028f6:	d909      	bls.n	800290c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2204      	movs	r2, #4
 80028fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	22e0      	movs	r2, #224	@ 0xe0
 8002904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e03d      	b.n	8002988 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1e4      	bne.n	80028e8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 ff5c 	bl	80037dc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f001 f807 	bl	8003938 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f001 f85d 	bl	80039ea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	461a      	mov	r2, r3
 8002936:	2100      	movs	r1, #0
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 ffc5 	bl	80038c8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800294c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	4b0f      	ldr	r3, [pc, #60]	@ (8002998 <HAL_ETH_Init+0x130>)
 800295c:	430b      	orrs	r3, r1
 800295e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002972:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2210      	movs	r2, #16
 8002982:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40023800 	.word	0x40023800
 8002994:	40013800 	.word	0x40013800
 8002998:	00020060 	.word	0x00020060

0800299c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029aa:	2b10      	cmp	r3, #16
 80029ac:	d15f      	bne.n	8002a6e <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2223      	movs	r2, #35	@ 0x23
 80029b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2204      	movs	r2, #4
 80029c0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f9f6 	bl	8002db4 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80029d0:	2001      	movs	r0, #1
 80029d2:	f7ff fdbf 	bl	8002554 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80029f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029f4:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a0c:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fd80 	bl	8003514 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0208 	orr.w	r2, r2, #8
 8002a22:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	f7ff fd91 	bl	8002554 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0204 	orr.w	r2, r2, #4
 8002a48:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a52:	69d9      	ldr	r1, [r3, #28]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b07      	ldr	r3, [pc, #28]	@ (8002a78 <HAL_ETH_Start_IT+0xdc>)
 8002a5a:	430b      	orrs	r3, r1
 8002a5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a60:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2223      	movs	r2, #35	@ 0x23
 8002a66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e000      	b.n	8002a70 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
  }
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	0001a0c1 	.word	0x0001a0c1

08002a7c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a8a:	2b23      	cmp	r3, #35	@ 0x23
 8002a8c:	d16e      	bne.n	8002b6c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2223      	movs	r2, #35	@ 0x23
 8002a92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a9e:	69d9      	ldr	r1, [r3, #28]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b34      	ldr	r3, [pc, #208]	@ (8002b78 <HAL_ETH_Stop_IT+0xfc>)
 8002aa6:	400b      	ands	r3, r1
 8002aa8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002aac:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ac0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ac4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	f023 0302 	bic.w	r3, r3, #2
 8002ad8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002adc:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0204 	bic.w	r2, r2, #4
 8002aec:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002af6:	2001      	movs	r0, #1
 8002af8:	f7ff fd2c 	bl	8002554 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 fd05 	bl	8003514 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0208 	bic.w	r2, r2, #8
 8002b18:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b22:	2001      	movs	r0, #1
 8002b24:	f7ff fd16 	bl	8002554 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	e00e      	b.n	8002b54 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	3212      	adds	r2, #18
 8002b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b40:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	3301      	adds	r3, #1
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d9ed      	bls.n	8002b36 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2210      	movs	r2, #16
 8002b64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	e000      	b.n	8002b6e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
  }
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	fffe5f3e 	.word	0xfffe5f3e

08002b7c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d109      	bne.n	8002ba0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b92:	f043 0201 	orr.w	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e045      	b.n	8002c2c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ba6:	2b23      	cmp	r3, #35	@ 0x23
 8002ba8:	d13f      	bne.n	8002c2a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	6839      	ldr	r1, [r7, #0]
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 ff86 	bl	8003ac8 <ETH_Prepare_Tx_Descriptors>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc8:	f043 0202 	orr.w	r2, r3, #2
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e02a      	b.n	8002c2c <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8002bd6:	f3bf 8f4f 	dsb	sy
}
 8002bda:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d904      	bls.n	8002bf8 <HAL_ETH_Transmit_IT+0x7c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf2:	1f1a      	subs	r2, r3, #4
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00d      	beq.n	8002c26 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c12:	461a      	mov	r2, r3
 8002c14:	2304      	movs	r3, #4
 8002c16:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c20:	461a      	mov	r2, r3
 8002c22:	2300      	movs	r3, #0
 8002c24:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e000      	b.n	8002c2c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
  }
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d109      	bne.n	8002c60 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c52:	f043 0201 	orr.w	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0a4      	b.n	8002daa <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c66:	2b23      	cmp	r3, #35	@ 0x23
 8002c68:	d001      	beq.n	8002c6e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e09d      	b.n	8002daa <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c72:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	3212      	adds	r2, #18
 8002c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c7e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c84:	f1c3 0304 	rsb	r3, r3, #4
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002c8a:	e066      	b.n	8002d5a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d007      	beq.n	8002ca8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	699a      	ldr	r2, [r3, #24]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d103      	bne.n	8002cbc <HAL_ETH_ReadData+0x88>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d03c      	beq.n	8002d36 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002cde:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002d10:	461a      	mov	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	f007 fdb5 	bl	800a884 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	441a      	add	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2200      	movs	r2, #0
 8002d34:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	61fb      	str	r3, [r7, #28]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d902      	bls.n	8002d48 <HAL_ETH_ReadData+0x114>
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3b04      	subs	r3, #4
 8002d46:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	3212      	adds	r2, #18
 8002d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d52:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	3301      	adds	r3, #1
 8002d58:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	db06      	blt.n	8002d70 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d202      	bcs.n	8002d70 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002d6a:	7cfb      	ldrb	r3, [r7, #19]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d08d      	beq.n	8002c8c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	441a      	add	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f815 	bl	8002db4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002d90:	7cfb      	ldrb	r3, [r7, #19]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d108      	bne.n	8002da8 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e000      	b.n	8002daa <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3720      	adds	r7, #32
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dc8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	3212      	adds	r2, #18
 8002dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dda:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002ddc:	e042      	b.n	8002e64 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d112      	bne.n	8002e0c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002de6:	f107 0308 	add.w	r3, r7, #8
 8002dea:	4618      	mov	r0, r3
 8002dec:	f007 fd1a 	bl	800a824 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d102      	bne.n	8002dfc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	74fb      	strb	r3, [r7, #19]
 8002dfa:	e007      	b.n	8002e0c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	461a      	mov	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002e0c:	7cfb      	ldrb	r3, [r7, #19]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d028      	beq.n	8002e64 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	4b26      	ldr	r3, [pc, #152]	@ (8002eb8 <ETH_UpdateDescriptor+0x104>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	6053      	str	r3, [r2, #4]
 8002e26:	e005      	b.n	8002e34 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	3301      	adds	r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	2b03      	cmp	r3, #3
 8002e4a:	d902      	bls.n	8002e52 <ETH_UpdateDescriptor+0x9e>
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	3b04      	subs	r3, #4
 8002e50:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69fa      	ldr	r2, [r7, #28]
 8002e56:	3212      	adds	r2, #18
 8002e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e5c:	617b      	str	r3, [r7, #20]
      desccount--;
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <ETH_UpdateDescriptor+0xbc>
 8002e6a:	7cfb      	ldrb	r3, [r7, #19]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1b6      	bne.n	8002dde <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d01a      	beq.n	8002eb0 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e84:	f3bf 8f5f 	dmb	sy
}
 8002e88:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6919      	ldr	r1, [r3, #16]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	18ca      	adds	r2, r1, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ea2:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	80004000 	.word	0x80004000

08002ebc <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3318      	adds	r3, #24
 8002ec8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ece:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002eda:	e047      	b.n	8002f6c <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	3304      	adds	r3, #4
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10a      	bne.n	8002f0c <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d902      	bls.n	8002f08 <HAL_ETH_ReleaseTxPacket+0x4c>
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	3b04      	subs	r3, #4
 8002f06:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002f0c:	7bbb      	ldrb	r3, [r7, #14]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d02c      	beq.n	8002f6c <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68d9      	ldr	r1, [r3, #12]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	440b      	add	r3, r1
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	db1f      	blt.n	8002f68 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f007 fce7 	bl	800a908 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	2200      	movs	r2, #0
 8002f46:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d902      	bls.n	8002f5a <HAL_ETH_ReleaseTxPacket+0x9e>
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	3b04      	subs	r3, #4
 8002f58:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f66:	e001      	b.n	8002f6c <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <HAL_ETH_ReleaseTxPacket+0xbc>
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1b1      	bne.n	8002edc <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f92:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002fac:	4b4b      	ldr	r3, [pc, #300]	@ (80030dc <HAL_ETH_IRQHandler+0x158>)
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00e      	beq.n	8002fda <HAL_ETH_IRQHandler+0x56>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d009      	beq.n	8002fda <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4b43      	ldr	r3, [pc, #268]	@ (80030e0 <HAL_ETH_IRQHandler+0x15c>)
 8002fd2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f006 ff9d 	bl	8009f14 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00f      	beq.n	8003004 <HAL_ETH_IRQHandler+0x80>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002ffc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f006 ff98 	bl	8009f34 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d042      	beq.n	8003094 <HAL_ETH_IRQHandler+0x110>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d03d      	beq.n	8003094 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301e:	f043 0208 	orr.w	r2, r3, #8
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01a      	beq.n	8003068 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800303a:	695a      	ldr	r2, [r3, #20]
 800303c:	4b29      	ldr	r3, [pc, #164]	@ (80030e4 <HAL_ETH_IRQHandler+0x160>)
 800303e:	4013      	ands	r3, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8003058:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800305c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	22e0      	movs	r2, #224	@ 0xe0
 8003062:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003066:	e012      	b.n	800308e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003076:	4013      	ands	r3, r2
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003086:	461a      	mov	r2, r3
 8003088:	f248 6380 	movw	r3, #34432	@ 0x8680
 800308c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f006 ff60 	bl	8009f54 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00e      	beq.n	80030bc <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f81a 	bl	80030e8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d006      	beq.n	80030d4 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80030c6:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <HAL_ETH_IRQHandler+0x158>)
 80030c8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80030cc:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f814 	bl	80030fc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80030d4:	bf00      	nop
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40013c00 	.word	0x40013c00
 80030e0:	00010040 	.word	0x00010040
 80030e4:	007e2000 	.word	0x007e2000

080030e8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f003 031c 	and.w	r3, r3, #28
 800312c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	02db      	lsls	r3, r3, #11
 8003132:	b29b      	uxth	r3, r3
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	4313      	orrs	r3, r2
 8003138:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	019b      	lsls	r3, r3, #6
 800313e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f023 0302 	bic.w	r3, r3, #2
 800314e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003160:	f7ff f9ec 	bl	800253c <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003166:	e00d      	b.n	8003184 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003168:	f7ff f9e8 	bl	800253c <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003176:	d301      	bcc.n	800317c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e010      	b.n	800319e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1ec      	bne.n	8003168 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	b29b      	uxth	r3, r3
 8003196:	461a      	mov	r2, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f003 031c 	and.w	r3, r3, #28
 80031c2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	02db      	lsls	r3, r3, #11
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	019b      	lsls	r3, r3, #6
 80031d4:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f043 0302 	orr.w	r3, r3, #2
 80031e4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003200:	f7ff f99c 	bl	800253c <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003206:	e00d      	b.n	8003224 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003208:	f7ff f998 	bl	800253c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003216:	d301      	bcc.n	800321c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e009      	b.n	8003230 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1ec      	bne.n	8003208 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0e6      	b.n	800341a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	2b00      	cmp	r3, #0
 8003258:	bf14      	ite	ne
 800325a:	2301      	movne	r3, #1
 800325c:	2300      	moveq	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	461a      	mov	r2, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 800329c:	2b00      	cmp	r3, #0
 800329e:	bf14      	ite	ne
 80032a0:	2301      	movne	r3, #1
 80032a2:	2300      	moveq	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	bf0c      	ite	eq
 80032ba:	2301      	moveq	r3, #1
 80032bc:	2300      	movne	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf14      	ite	ne
 80032d4:	2301      	movne	r3, #1
 80032d6:	2300      	moveq	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003306:	2b00      	cmp	r3, #0
 8003308:	bf0c      	ite	eq
 800330a:	2301      	moveq	r3, #1
 800330c:	2300      	movne	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	461a      	mov	r2, r3
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800333a:	2b00      	cmp	r3, #0
 800333c:	bf14      	ite	ne
 800333e:	2301      	movne	r3, #1
 8003340:	2300      	moveq	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003362:	2b00      	cmp	r3, #0
 8003364:	bf14      	ite	ne
 8003366:	2301      	movne	r3, #1
 8003368:	2300      	moveq	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	bf14      	ite	ne
 8003380:	2301      	movne	r3, #1
 8003382:	2300      	moveq	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	461a      	mov	r2, r3
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	bf14      	ite	ne
 800339a:	2301      	movne	r3, #1
 800339c:	2300      	moveq	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	bf0c      	ite	eq
 80033b6:	2301      	moveq	r3, #1
 80033b8:	2300      	movne	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	0c1b      	lsrs	r3, r3, #16
 80033da:	b29a      	uxth	r2, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	bf14      	ite	ne
 80033ee:	2301      	movne	r3, #1
 80033f0:	2300      	moveq	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	461a      	mov	r2, r3
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003406:	2b00      	cmp	r3, #0
 8003408:	bf14      	ite	ne
 800340a:	2301      	movne	r3, #1
 800340c:	2300      	moveq	r3, #0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b082      	sub	sp, #8
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e00b      	b.n	8003452 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003440:	2b10      	cmp	r3, #16
 8003442:	d105      	bne.n	8003450 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003444:	6839      	ldr	r1, [r7, #0]
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f88a 	bl	8003560 <ETH_SetMACConfig>

    return HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	e000      	b.n	8003452 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
  }
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 031c 	bic.w	r3, r3, #28
 8003472:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003474:	f003 fbea 	bl	8006c4c <HAL_RCC_GetHCLKFreq>
 8003478:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	4a14      	ldr	r2, [pc, #80]	@ (80034d0 <HAL_ETH_SetMDIOClockRange+0x74>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d804      	bhi.n	800348c <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f043 0308 	orr.w	r3, r3, #8
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	e019      	b.n	80034c0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	4a11      	ldr	r2, [pc, #68]	@ (80034d4 <HAL_ETH_SetMDIOClockRange+0x78>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d204      	bcs.n	800349e <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f043 030c 	orr.w	r3, r3, #12
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	e010      	b.n	80034c0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	4a0d      	ldr	r2, [pc, #52]	@ (80034d8 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d90c      	bls.n	80034c0 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4a0c      	ldr	r2, [pc, #48]	@ (80034dc <HAL_ETH_SetMDIOClockRange+0x80>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d804      	bhi.n	80034b8 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f043 0304 	orr.w	r3, r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	e003      	b.n	80034c0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f043 0310 	orr.w	r3, r3, #16
 80034be:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	611a      	str	r2, [r3, #16]
}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	02160ebf 	.word	0x02160ebf
 80034d4:	03938700 	.word	0x03938700
 80034d8:	05f5e0ff 	.word	0x05f5e0ff
 80034dc:	08f0d17f 	.word	0x08f0d17f

080034e0 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6812      	ldr	r2, [r2, #0]
 800352e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003532:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003536:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003544:	2001      	movs	r0, #1
 8003546:	f7ff f805 	bl	8002554 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003554:	6193      	str	r3, [r2, #24]
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4b53      	ldr	r3, [pc, #332]	@ (80036c4 <ETH_SetMACConfig+0x164>)
 8003576:	4013      	ands	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	7b9b      	ldrb	r3, [r3, #14]
 800357e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	7c12      	ldrb	r2, [r2, #16]
 8003584:	2a00      	cmp	r2, #0
 8003586:	d102      	bne.n	800358e <ETH_SetMACConfig+0x2e>
 8003588:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800358c:	e000      	b.n	8003590 <ETH_SetMACConfig+0x30>
 800358e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003590:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	7c52      	ldrb	r2, [r2, #17]
 8003596:	2a00      	cmp	r2, #0
 8003598:	d102      	bne.n	80035a0 <ETH_SetMACConfig+0x40>
 800359a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800359e:	e000      	b.n	80035a2 <ETH_SetMACConfig+0x42>
 80035a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80035a2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80035a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	7fdb      	ldrb	r3, [r3, #31]
 80035ae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80035b0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80035b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	7f92      	ldrb	r2, [r2, #30]
 80035bc:	2a00      	cmp	r2, #0
 80035be:	d102      	bne.n	80035c6 <ETH_SetMACConfig+0x66>
 80035c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035c4:	e000      	b.n	80035c8 <ETH_SetMACConfig+0x68>
 80035c6:	2200      	movs	r2, #0
                        macconf->Speed |
 80035c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	7f1b      	ldrb	r3, [r3, #28]
 80035ce:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80035d0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80035d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	791b      	ldrb	r3, [r3, #4]
 80035dc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80035de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80035e6:	2a00      	cmp	r2, #0
 80035e8:	d102      	bne.n	80035f0 <ETH_SetMACConfig+0x90>
 80035ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035ee:	e000      	b.n	80035f2 <ETH_SetMACConfig+0x92>
 80035f0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80035f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	7bdb      	ldrb	r3, [r3, #15]
 80035f8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80035fa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003600:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003608:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800360a:	4313      	orrs	r3, r2
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003622:	2001      	movs	r0, #1
 8003624:	f7fe ff96 	bl	8002554 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800363e:	4013      	ands	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003646:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800364e:	2a00      	cmp	r2, #0
 8003650:	d101      	bne.n	8003656 <ETH_SetMACConfig+0xf6>
 8003652:	2280      	movs	r2, #128	@ 0x80
 8003654:	e000      	b.n	8003658 <ETH_SetMACConfig+0xf8>
 8003656:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003658:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800365e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003666:	2a01      	cmp	r2, #1
 8003668:	d101      	bne.n	800366e <ETH_SetMACConfig+0x10e>
 800366a:	2208      	movs	r2, #8
 800366c:	e000      	b.n	8003670 <ETH_SetMACConfig+0x110>
 800366e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003670:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003678:	2a01      	cmp	r2, #1
 800367a:	d101      	bne.n	8003680 <ETH_SetMACConfig+0x120>
 800367c:	2204      	movs	r2, #4
 800367e:	e000      	b.n	8003682 <ETH_SetMACConfig+0x122>
 8003680:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003682:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800368a:	2a01      	cmp	r2, #1
 800368c:	d101      	bne.n	8003692 <ETH_SetMACConfig+0x132>
 800368e:	2202      	movs	r2, #2
 8003690:	e000      	b.n	8003694 <ETH_SetMACConfig+0x134>
 8003692:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003694:	4313      	orrs	r3, r2
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4313      	orrs	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036ac:	2001      	movs	r0, #1
 80036ae:	f7fe ff51 	bl	8002554 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	619a      	str	r2, [r3, #24]
}
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	fd20810f 	.word	0xfd20810f

080036c8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4b3d      	ldr	r3, [pc, #244]	@ (80037d8 <ETH_SetDMAConfig+0x110>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	7b1b      	ldrb	r3, [r3, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d102      	bne.n	80036f4 <ETH_SetDMAConfig+0x2c>
 80036ee:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80036f2:	e000      	b.n	80036f6 <ETH_SetDMAConfig+0x2e>
 80036f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	7b5b      	ldrb	r3, [r3, #13]
 80036fa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80036fc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	7f52      	ldrb	r2, [r2, #29]
 8003702:	2a00      	cmp	r2, #0
 8003704:	d102      	bne.n	800370c <ETH_SetDMAConfig+0x44>
 8003706:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800370a:	e000      	b.n	800370e <ETH_SetDMAConfig+0x46>
 800370c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800370e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	7b9b      	ldrb	r3, [r3, #14]
 8003714:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003716:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800371c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	7f1b      	ldrb	r3, [r3, #28]
 8003722:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003724:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	7f9b      	ldrb	r3, [r3, #30]
 800372a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800372c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003732:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800373a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800373c:	4313      	orrs	r3, r2
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800374c:	461a      	mov	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800375e:	2001      	movs	r0, #1
 8003760:	f7fe fef8 	bl	8002554 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800376c:	461a      	mov	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	791b      	ldrb	r3, [r3, #4]
 8003776:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800377c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003782:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003788:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003790:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003792:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003798:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800379a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80037a0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80037ae:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037bc:	2001      	movs	r0, #1
 80037be:	f7fe fec9 	bl	8002554 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037ca:	461a      	mov	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6013      	str	r3, [r2, #0]
}
 80037d0:	bf00      	nop
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	f8de3f23 	.word	0xf8de3f23

080037dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b0a6      	sub	sp, #152	@ 0x98
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80037e4:	2301      	movs	r3, #1
 80037e6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80037ea:	2301      	movs	r3, #1
 80037ec:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80037f0:	2300      	movs	r3, #0
 80037f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80037fa:	2301      	movs	r3, #1
 80037fc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003800:	2300      	movs	r3, #0
 8003802:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003806:	2301      	movs	r3, #1
 8003808:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800380c:	2301      	movs	r3, #1
 800380e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003812:	2300      	movs	r3, #0
 8003814:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003818:	2300      	movs	r3, #0
 800381a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800381e:	2300      	movs	r3, #0
 8003820:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003822:	2300      	movs	r3, #0
 8003824:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003828:	2300      	movs	r3, #0
 800382a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800382c:	2300      	movs	r3, #0
 800382e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003832:	2300      	movs	r3, #0
 8003834:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003838:	2300      	movs	r3, #0
 800383a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800383e:	2300      	movs	r3, #0
 8003840:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003844:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003848:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800384a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800384e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003850:	2300      	movs	r3, #0
 8003852:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003856:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800385a:	4619      	mov	r1, r3
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff fe7f 	bl	8003560 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003862:	2301      	movs	r3, #1
 8003864:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003866:	2301      	movs	r3, #1
 8003868:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800386a:	2301      	movs	r3, #1
 800386c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003870:	2301      	movs	r3, #1
 8003872:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003874:	2300      	movs	r3, #0
 8003876:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003878:	2300      	movs	r3, #0
 800387a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800387e:	2300      	movs	r3, #0
 8003880:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003884:	2300      	movs	r3, #0
 8003886:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003888:	2301      	movs	r3, #1
 800388a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800388e:	2301      	movs	r3, #1
 8003890:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003892:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003896:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003898:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800389c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800389e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038a2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80038b2:	f107 0308 	add.w	r3, r7, #8
 80038b6:	4619      	mov	r1, r3
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff ff05 	bl	80036c8 <ETH_SetDMAConfig>
}
 80038be:	bf00      	nop
 80038c0:	3798      	adds	r7, #152	@ 0x98
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
	...

080038c8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3305      	adds	r3, #5
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	3204      	adds	r2, #4
 80038e0:	7812      	ldrb	r2, [r2, #0]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	4b11      	ldr	r3, [pc, #68]	@ (8003930 <ETH_MACAddressConfig+0x68>)
 80038ea:	4413      	add	r3, r2
 80038ec:	461a      	mov	r2, r3
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3303      	adds	r3, #3
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	061a      	lsls	r2, r3, #24
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3302      	adds	r3, #2
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	041b      	lsls	r3, r3, #16
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3301      	adds	r3, #1
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	021b      	lsls	r3, r3, #8
 800390c:	4313      	orrs	r3, r2
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	7812      	ldrb	r2, [r2, #0]
 8003912:	4313      	orrs	r3, r2
 8003914:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	4b06      	ldr	r3, [pc, #24]	@ (8003934 <ETH_MACAddressConfig+0x6c>)
 800391a:	4413      	add	r3, r2
 800391c:	461a      	mov	r2, r3
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	6013      	str	r3, [r2, #0]
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40028040 	.word	0x40028040
 8003934:	40028044 	.word	0x40028044

08003938 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	e03e      	b.n	80039c4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68d9      	ldr	r1, [r3, #12]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	440b      	add	r3, r1
 8003956:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2200      	movs	r2, #0
 8003962:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2200      	movs	r2, #0
 8003968:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2200      	movs	r2, #0
 800396e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	3206      	adds	r2, #6
 8003978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d80c      	bhi.n	80039a8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68d9      	ldr	r1, [r3, #12]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	440b      	add	r3, r1
 80039a0:	461a      	mov	r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	e004      	b.n	80039b2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	461a      	mov	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3301      	adds	r3, #1
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d9bd      	bls.n	8003946 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039dc:	611a      	str	r2, [r3, #16]
}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b085      	sub	sp, #20
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	e048      	b.n	8003a8a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6919      	ldr	r1, [r3, #16]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	440b      	add	r3, r1
 8003a08:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2200      	movs	r2, #0
 8003a14:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2200      	movs	r2, #0
 8003a26:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003a34:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	3212      	adds	r2, #18
 8003a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d80c      	bhi.n	8003a7a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6919      	ldr	r1, [r3, #16]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	440b      	add	r3, r1
 8003a72:	461a      	mov	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	60da      	str	r2, [r3, #12]
 8003a78:	e004      	b.n	8003a84 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3301      	adds	r3, #1
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d9b3      	bls.n	80039f8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003aba:	60da      	str	r2, [r3, #12]
}
 8003abc:	bf00      	nop
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b091      	sub	sp, #68	@ 0x44
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	3318      	adds	r3, #24
 8003ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af2:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b0a:	d007      	beq.n	8003b1c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b10:	3304      	adds	r3, #4
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e111      	b.n	8003d44 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b22:	3301      	adds	r3, #1
 8003b24:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	4b86      	ldr	r3, [pc, #536]	@ (8003d50 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b3a:	6852      	ldr	r2, [r2, #4]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b40:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d008      	beq.n	8003b60 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b94:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba0:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003ba2:	e082      	b.n	8003caa <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bae:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d006      	beq.n	8003bc4 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e005      	b.n	8003bd0 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bce:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d902      	bls.n	8003be2 <ETH_Prepare_Tx_Descriptors+0x11a>
 8003bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bde:	3b04      	subs	r3, #4
 8003be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bea:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bf8:	d007      	beq.n	8003c0a <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bfe:	3304      	adds	r3, #4
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d029      	beq.n	8003c5e <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c16:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003c18:	2300      	movs	r3, #0
 8003c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c1c:	e019      	b.n	8003c52 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8003c1e:	f3bf 8f5f 	dmb	sy
}
 8003c22:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c32:	3301      	adds	r3, #1
 8003c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d902      	bls.n	8003c42 <ETH_Prepare_Tx_Descriptors+0x17a>
 8003c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c3e:	3b04      	subs	r3, #4
 8003c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c4a:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c4e:	3301      	adds	r3, #1
 8003c50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d3e1      	bcc.n	8003c1e <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e072      	b.n	8003d44 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c68:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7e:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	4b32      	ldr	r3, [pc, #200]	@ (8003d50 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c8a:	6852      	ldr	r2, [r2, #4]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c90:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c94:	3301      	adds	r3, #1
 8003c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003c98:	f3bf 8f5f 	dmb	sy
}
 8003c9c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca8:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f47f af78 	bne.w	8003ba4 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d006      	beq.n	8003cc8 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	e005      	b.n	8003cd4 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd2:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cde:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce2:	6a3a      	ldr	r2, [r7, #32]
 8003ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003cea:	f3bf 8f5f 	dmb	sy
}
 8003cee:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfa:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d04:	3304      	adds	r3, #4
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d10:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d12:	f3ef 8310 	mrs	r3, PRIMASK
 8003d16:	613b      	str	r3, [r7, #16]
  return(result);
 8003d18:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003d1a:	61fb      	str	r3, [r7, #28]
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f383 8810 	msr	PRIMASK, r3
}
 8003d26:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2e:	4413      	add	r3, r2
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d34:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	f383 8810 	msr	PRIMASK, r3
}
 8003d40:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3744      	adds	r7, #68	@ 0x44
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	ffffe000 	.word	0xffffe000

08003d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b089      	sub	sp, #36	@ 0x24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d66:	2300      	movs	r3, #0
 8003d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
 8003d72:	e175      	b.n	8004060 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d74:	2201      	movs	r2, #1
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4013      	ands	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	f040 8164 	bne.w	800405a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d005      	beq.n	8003daa <HAL_GPIO_Init+0x56>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d130      	bne.n	8003e0c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	2203      	movs	r2, #3
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003de0:	2201      	movs	r2, #1
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	43db      	mvns	r3, r3
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	4013      	ands	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	091b      	lsrs	r3, r3, #4
 8003df6:	f003 0201 	and.w	r2, r3, #1
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 0303 	and.w	r3, r3, #3
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d017      	beq.n	8003e48 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	2203      	movs	r2, #3
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d123      	bne.n	8003e9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	08da      	lsrs	r2, r3, #3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3208      	adds	r2, #8
 8003e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	220f      	movs	r2, #15
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4013      	ands	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	08da      	lsrs	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3208      	adds	r2, #8
 8003e96:	69b9      	ldr	r1, [r7, #24]
 8003e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 0203 	and.w	r2, r3, #3
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80be 	beq.w	800405a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ede:	4b66      	ldr	r3, [pc, #408]	@ (8004078 <HAL_GPIO_Init+0x324>)
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee2:	4a65      	ldr	r2, [pc, #404]	@ (8004078 <HAL_GPIO_Init+0x324>)
 8003ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003eea:	4b63      	ldr	r3, [pc, #396]	@ (8004078 <HAL_GPIO_Init+0x324>)
 8003eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ef6:	4a61      	ldr	r2, [pc, #388]	@ (800407c <HAL_GPIO_Init+0x328>)
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	089b      	lsrs	r3, r3, #2
 8003efc:	3302      	adds	r3, #2
 8003efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	220f      	movs	r2, #15
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43db      	mvns	r3, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4013      	ands	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a58      	ldr	r2, [pc, #352]	@ (8004080 <HAL_GPIO_Init+0x32c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d037      	beq.n	8003f92 <HAL_GPIO_Init+0x23e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a57      	ldr	r2, [pc, #348]	@ (8004084 <HAL_GPIO_Init+0x330>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d031      	beq.n	8003f8e <HAL_GPIO_Init+0x23a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a56      	ldr	r2, [pc, #344]	@ (8004088 <HAL_GPIO_Init+0x334>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d02b      	beq.n	8003f8a <HAL_GPIO_Init+0x236>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a55      	ldr	r2, [pc, #340]	@ (800408c <HAL_GPIO_Init+0x338>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d025      	beq.n	8003f86 <HAL_GPIO_Init+0x232>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a54      	ldr	r2, [pc, #336]	@ (8004090 <HAL_GPIO_Init+0x33c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01f      	beq.n	8003f82 <HAL_GPIO_Init+0x22e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a53      	ldr	r2, [pc, #332]	@ (8004094 <HAL_GPIO_Init+0x340>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d019      	beq.n	8003f7e <HAL_GPIO_Init+0x22a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a52      	ldr	r2, [pc, #328]	@ (8004098 <HAL_GPIO_Init+0x344>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d013      	beq.n	8003f7a <HAL_GPIO_Init+0x226>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a51      	ldr	r2, [pc, #324]	@ (800409c <HAL_GPIO_Init+0x348>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00d      	beq.n	8003f76 <HAL_GPIO_Init+0x222>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a50      	ldr	r2, [pc, #320]	@ (80040a0 <HAL_GPIO_Init+0x34c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d007      	beq.n	8003f72 <HAL_GPIO_Init+0x21e>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a4f      	ldr	r2, [pc, #316]	@ (80040a4 <HAL_GPIO_Init+0x350>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d101      	bne.n	8003f6e <HAL_GPIO_Init+0x21a>
 8003f6a:	2309      	movs	r3, #9
 8003f6c:	e012      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f6e:	230a      	movs	r3, #10
 8003f70:	e010      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f72:	2308      	movs	r3, #8
 8003f74:	e00e      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f76:	2307      	movs	r3, #7
 8003f78:	e00c      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f7a:	2306      	movs	r3, #6
 8003f7c:	e00a      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f7e:	2305      	movs	r3, #5
 8003f80:	e008      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f82:	2304      	movs	r3, #4
 8003f84:	e006      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f86:	2303      	movs	r3, #3
 8003f88:	e004      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e002      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f92:	2300      	movs	r3, #0
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	f002 0203 	and.w	r2, r2, #3
 8003f9a:	0092      	lsls	r2, r2, #2
 8003f9c:	4093      	lsls	r3, r2
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003fa4:	4935      	ldr	r1, [pc, #212]	@ (800407c <HAL_GPIO_Init+0x328>)
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	089b      	lsrs	r3, r3, #2
 8003faa:	3302      	adds	r3, #2
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80040a8 <HAL_GPIO_Init+0x354>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fd6:	4a34      	ldr	r2, [pc, #208]	@ (80040a8 <HAL_GPIO_Init+0x354>)
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fdc:	4b32      	ldr	r3, [pc, #200]	@ (80040a8 <HAL_GPIO_Init+0x354>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004000:	4a29      	ldr	r2, [pc, #164]	@ (80040a8 <HAL_GPIO_Init+0x354>)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004006:	4b28      	ldr	r3, [pc, #160]	@ (80040a8 <HAL_GPIO_Init+0x354>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	43db      	mvns	r3, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4013      	ands	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800402a:	4a1f      	ldr	r2, [pc, #124]	@ (80040a8 <HAL_GPIO_Init+0x354>)
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004030:	4b1d      	ldr	r3, [pc, #116]	@ (80040a8 <HAL_GPIO_Init+0x354>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	43db      	mvns	r3, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4013      	ands	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004054:	4a14      	ldr	r2, [pc, #80]	@ (80040a8 <HAL_GPIO_Init+0x354>)
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	3301      	adds	r3, #1
 800405e:	61fb      	str	r3, [r7, #28]
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	2b0f      	cmp	r3, #15
 8004064:	f67f ae86 	bls.w	8003d74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004068:	bf00      	nop
 800406a:	bf00      	nop
 800406c:	3724      	adds	r7, #36	@ 0x24
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40023800 	.word	0x40023800
 800407c:	40013800 	.word	0x40013800
 8004080:	40020000 	.word	0x40020000
 8004084:	40020400 	.word	0x40020400
 8004088:	40020800 	.word	0x40020800
 800408c:	40020c00 	.word	0x40020c00
 8004090:	40021000 	.word	0x40021000
 8004094:	40021400 	.word	0x40021400
 8004098:	40021800 	.word	0x40021800
 800409c:	40021c00 	.word	0x40021c00
 80040a0:	40022000 	.word	0x40022000
 80040a4:	40022400 	.word	0x40022400
 80040a8:	40013c00 	.word	0x40013c00

080040ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	807b      	strh	r3, [r7, #2]
 80040b8:	4613      	mov	r3, r2
 80040ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040bc:	787b      	ldrb	r3, [r7, #1]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040c2:	887a      	ldrh	r2, [r7, #2]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80040c8:	e003      	b.n	80040d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80040ca:	887b      	ldrh	r3, [r7, #2]
 80040cc:	041a      	lsls	r2, r3, #16
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	619a      	str	r2, [r3, #24]
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040de:	b480      	push	{r7}
 80040e0:	b085      	sub	sp, #20
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	460b      	mov	r3, r1
 80040e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040f0:	887a      	ldrh	r2, [r7, #2]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4013      	ands	r3, r2
 80040f6:	041a      	lsls	r2, r3, #16
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	43d9      	mvns	r1, r3
 80040fc:	887b      	ldrh	r3, [r7, #2]
 80040fe:	400b      	ands	r3, r1
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	619a      	str	r2, [r3, #24]
}
 8004106:	bf00      	nop
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e08b      	b.n	800423e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fd fe62 	bl	8001e04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2224      	movs	r2, #36	@ 0x24
 8004144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0201 	bic.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004164:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004174:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d107      	bne.n	800418e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800418a:	609a      	str	r2, [r3, #8]
 800418c:	e006      	b.n	800419c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800419a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d108      	bne.n	80041b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041b2:	605a      	str	r2, [r3, #4]
 80041b4:	e007      	b.n	80041c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6859      	ldr	r1, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004248 <HAL_I2C_Init+0x134>)
 80041d2:	430b      	orrs	r3, r1
 80041d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69d9      	ldr	r1, [r3, #28]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1a      	ldr	r2, [r3, #32]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	02008000 	.word	0x02008000

0800424c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af02      	add	r7, sp, #8
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	4608      	mov	r0, r1
 8004256:	4611      	mov	r1, r2
 8004258:	461a      	mov	r2, r3
 800425a:	4603      	mov	r3, r0
 800425c:	817b      	strh	r3, [r7, #10]
 800425e:	460b      	mov	r3, r1
 8004260:	813b      	strh	r3, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b20      	cmp	r3, #32
 8004270:	f040 80f9 	bne.w	8004466 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_I2C_Mem_Write+0x34>
 800427a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800427c:	2b00      	cmp	r3, #0
 800427e:	d105      	bne.n	800428c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004286:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0ed      	b.n	8004468 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_I2C_Mem_Write+0x4e>
 8004296:	2302      	movs	r3, #2
 8004298:	e0e6      	b.n	8004468 <HAL_I2C_Mem_Write+0x21c>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042a2:	f7fe f94b 	bl	800253c <HAL_GetTick>
 80042a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	2319      	movs	r3, #25
 80042ae:	2201      	movs	r2, #1
 80042b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fac3 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0d1      	b.n	8004468 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2221      	movs	r2, #33	@ 0x21
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2240      	movs	r2, #64	@ 0x40
 80042d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a3a      	ldr	r2, [r7, #32]
 80042de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042ec:	88f8      	ldrh	r0, [r7, #6]
 80042ee:	893a      	ldrh	r2, [r7, #8]
 80042f0:	8979      	ldrh	r1, [r7, #10]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	9301      	str	r3, [sp, #4]
 80042f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	4603      	mov	r3, r0
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f9d3 	bl	80046a8 <I2C_RequestMemoryWrite>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e0a9      	b.n	8004468 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2bff      	cmp	r3, #255	@ 0xff
 800431c:	d90e      	bls.n	800433c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	22ff      	movs	r2, #255	@ 0xff
 8004322:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004328:	b2da      	uxtb	r2, r3
 800432a:	8979      	ldrh	r1, [r7, #10]
 800432c:	2300      	movs	r3, #0
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 fc47 	bl	8004bc8 <I2C_TransferConfig>
 800433a:	e00f      	b.n	800435c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434a:	b2da      	uxtb	r2, r3
 800434c:	8979      	ldrh	r1, [r7, #10]
 800434e:	2300      	movs	r3, #0
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 fc36 	bl	8004bc8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 fac6 	bl	80048f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e07b      	b.n	8004468 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004374:	781a      	ldrb	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d034      	beq.n	8004414 <HAL_I2C_Mem_Write+0x1c8>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d130      	bne.n	8004414 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b8:	2200      	movs	r2, #0
 80043ba:	2180      	movs	r1, #128	@ 0x80
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 fa3f 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e04d      	b.n	8004468 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2bff      	cmp	r3, #255	@ 0xff
 80043d4:	d90e      	bls.n	80043f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	22ff      	movs	r2, #255	@ 0xff
 80043da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	8979      	ldrh	r1, [r7, #10]
 80043e4:	2300      	movs	r3, #0
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 fbeb 	bl	8004bc8 <I2C_TransferConfig>
 80043f2:	e00f      	b.n	8004414 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004402:	b2da      	uxtb	r2, r3
 8004404:	8979      	ldrh	r1, [r7, #10]
 8004406:	2300      	movs	r3, #0
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 fbda 	bl	8004bc8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d19e      	bne.n	800435c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 faac 	bl	8004980 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e01a      	b.n	8004468 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2220      	movs	r2, #32
 8004438:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6859      	ldr	r1, [r3, #4]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4b0a      	ldr	r3, [pc, #40]	@ (8004470 <HAL_I2C_Mem_Write+0x224>)
 8004446:	400b      	ands	r3, r1
 8004448:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	e000      	b.n	8004468 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004466:	2302      	movs	r3, #2
  }
}
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	fe00e800 	.word	0xfe00e800

08004474 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af02      	add	r7, sp, #8
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	4608      	mov	r0, r1
 800447e:	4611      	mov	r1, r2
 8004480:	461a      	mov	r2, r3
 8004482:	4603      	mov	r3, r0
 8004484:	817b      	strh	r3, [r7, #10]
 8004486:	460b      	mov	r3, r1
 8004488:	813b      	strh	r3, [r7, #8]
 800448a:	4613      	mov	r3, r2
 800448c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b20      	cmp	r3, #32
 8004498:	f040 80fd 	bne.w	8004696 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <HAL_I2C_Mem_Read+0x34>
 80044a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d105      	bne.n	80044b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e0f1      	b.n	8004698 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_I2C_Mem_Read+0x4e>
 80044be:	2302      	movs	r3, #2
 80044c0:	e0ea      	b.n	8004698 <HAL_I2C_Mem_Read+0x224>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044ca:	f7fe f837 	bl	800253c <HAL_GetTick>
 80044ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	2319      	movs	r3, #25
 80044d6:	2201      	movs	r2, #1
 80044d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f9af 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0d5      	b.n	8004698 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2222      	movs	r2, #34	@ 0x22
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2240      	movs	r2, #64	@ 0x40
 80044f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a3a      	ldr	r2, [r7, #32]
 8004506:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800450c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004514:	88f8      	ldrh	r0, [r7, #6]
 8004516:	893a      	ldrh	r2, [r7, #8]
 8004518:	8979      	ldrh	r1, [r7, #10]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	9301      	str	r3, [sp, #4]
 800451e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	4603      	mov	r3, r0
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 f913 	bl	8004750 <I2C_RequestMemoryRead>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e0ad      	b.n	8004698 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004540:	b29b      	uxth	r3, r3
 8004542:	2bff      	cmp	r3, #255	@ 0xff
 8004544:	d90e      	bls.n	8004564 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004550:	b2da      	uxtb	r2, r3
 8004552:	8979      	ldrh	r1, [r7, #10]
 8004554:	4b52      	ldr	r3, [pc, #328]	@ (80046a0 <HAL_I2C_Mem_Read+0x22c>)
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 fb33 	bl	8004bc8 <I2C_TransferConfig>
 8004562:	e00f      	b.n	8004584 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004572:	b2da      	uxtb	r2, r3
 8004574:	8979      	ldrh	r1, [r7, #10]
 8004576:	4b4a      	ldr	r3, [pc, #296]	@ (80046a0 <HAL_I2C_Mem_Read+0x22c>)
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 fb22 	bl	8004bc8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458a:	2200      	movs	r2, #0
 800458c:	2104      	movs	r1, #4
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f956 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e07c      	b.n	8004698 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d034      	beq.n	8004644 <HAL_I2C_Mem_Read+0x1d0>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d130      	bne.n	8004644 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e8:	2200      	movs	r2, #0
 80045ea:	2180      	movs	r1, #128	@ 0x80
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f927 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e04d      	b.n	8004698 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	2bff      	cmp	r3, #255	@ 0xff
 8004604:	d90e      	bls.n	8004624 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004610:	b2da      	uxtb	r2, r3
 8004612:	8979      	ldrh	r1, [r7, #10]
 8004614:	2300      	movs	r3, #0
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 fad3 	bl	8004bc8 <I2C_TransferConfig>
 8004622:	e00f      	b.n	8004644 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004632:	b2da      	uxtb	r2, r3
 8004634:	8979      	ldrh	r1, [r7, #10]
 8004636:	2300      	movs	r3, #0
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 fac2 	bl	8004bc8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d19a      	bne.n	8004584 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 f994 	bl	8004980 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e01a      	b.n	8004698 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2220      	movs	r2, #32
 8004668:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6859      	ldr	r1, [r3, #4]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	4b0b      	ldr	r3, [pc, #44]	@ (80046a4 <HAL_I2C_Mem_Read+0x230>)
 8004676:	400b      	ands	r3, r1
 8004678:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	e000      	b.n	8004698 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004696:	2302      	movs	r3, #2
  }
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	80002400 	.word	0x80002400
 80046a4:	fe00e800 	.word	0xfe00e800

080046a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	4608      	mov	r0, r1
 80046b2:	4611      	mov	r1, r2
 80046b4:	461a      	mov	r2, r3
 80046b6:	4603      	mov	r3, r0
 80046b8:	817b      	strh	r3, [r7, #10]
 80046ba:	460b      	mov	r3, r1
 80046bc:	813b      	strh	r3, [r7, #8]
 80046be:	4613      	mov	r3, r2
 80046c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80046c2:	88fb      	ldrh	r3, [r7, #6]
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	8979      	ldrh	r1, [r7, #10]
 80046c8:	4b20      	ldr	r3, [pc, #128]	@ (800474c <I2C_RequestMemoryWrite+0xa4>)
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fa79 	bl	8004bc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	69b9      	ldr	r1, [r7, #24]
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 f909 	bl	80048f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e02c      	b.n	8004744 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046ea:	88fb      	ldrh	r3, [r7, #6]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d105      	bne.n	80046fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046f0:	893b      	ldrh	r3, [r7, #8]
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80046fa:	e015      	b.n	8004728 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80046fc:	893b      	ldrh	r3, [r7, #8]
 80046fe:	0a1b      	lsrs	r3, r3, #8
 8004700:	b29b      	uxth	r3, r3
 8004702:	b2da      	uxtb	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	69b9      	ldr	r1, [r7, #24]
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f8ef 	bl	80048f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e012      	b.n	8004744 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800471e:	893b      	ldrh	r3, [r7, #8]
 8004720:	b2da      	uxtb	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	2200      	movs	r2, #0
 8004730:	2180      	movs	r1, #128	@ 0x80
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 f884 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	80002000 	.word	0x80002000

08004750 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	4608      	mov	r0, r1
 800475a:	4611      	mov	r1, r2
 800475c:	461a      	mov	r2, r3
 800475e:	4603      	mov	r3, r0
 8004760:	817b      	strh	r3, [r7, #10]
 8004762:	460b      	mov	r3, r1
 8004764:	813b      	strh	r3, [r7, #8]
 8004766:	4613      	mov	r3, r2
 8004768:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	b2da      	uxtb	r2, r3
 800476e:	8979      	ldrh	r1, [r7, #10]
 8004770:	4b20      	ldr	r3, [pc, #128]	@ (80047f4 <I2C_RequestMemoryRead+0xa4>)
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	2300      	movs	r3, #0
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 fa26 	bl	8004bc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800477c:	69fa      	ldr	r2, [r7, #28]
 800477e:	69b9      	ldr	r1, [r7, #24]
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 f8b6 	bl	80048f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e02c      	b.n	80047ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004790:	88fb      	ldrh	r3, [r7, #6]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d105      	bne.n	80047a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004796:	893b      	ldrh	r3, [r7, #8]
 8004798:	b2da      	uxtb	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	629a      	str	r2, [r3, #40]	@ 0x28
 80047a0:	e015      	b.n	80047ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047a2:	893b      	ldrh	r3, [r7, #8]
 80047a4:	0a1b      	lsrs	r3, r3, #8
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047b0:	69fa      	ldr	r2, [r7, #28]
 80047b2:	69b9      	ldr	r1, [r7, #24]
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 f89c 	bl	80048f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e012      	b.n	80047ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047c4:	893b      	ldrh	r3, [r7, #8]
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	2200      	movs	r2, #0
 80047d6:	2140      	movs	r1, #64	@ 0x40
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 f831 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e000      	b.n	80047ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	80002000 	.word	0x80002000

080047f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b02      	cmp	r3, #2
 800480c:	d103      	bne.n	8004816 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2200      	movs	r2, #0
 8004814:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b01      	cmp	r3, #1
 8004822:	d007      	beq.n	8004834 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699a      	ldr	r2, [r3, #24]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0201 	orr.w	r2, r2, #1
 8004832:	619a      	str	r2, [r3, #24]
  }
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	4613      	mov	r3, r2
 800484e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004850:	e03b      	b.n	80048ca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	6839      	ldr	r1, [r7, #0]
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 f8d6 	bl	8004a08 <I2C_IsErrorOccurred>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e041      	b.n	80048ea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486c:	d02d      	beq.n	80048ca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486e:	f7fd fe65 	bl	800253c <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d302      	bcc.n	8004884 <I2C_WaitOnFlagUntilTimeout+0x44>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d122      	bne.n	80048ca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	4013      	ands	r3, r2
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	429a      	cmp	r2, r3
 8004892:	bf0c      	ite	eq
 8004894:	2301      	moveq	r3, #1
 8004896:	2300      	movne	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	461a      	mov	r2, r3
 800489c:	79fb      	ldrb	r3, [r7, #7]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d113      	bne.n	80048ca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a6:	f043 0220 	orr.w	r2, r3, #32
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e00f      	b.n	80048ea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699a      	ldr	r2, [r3, #24]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4013      	ands	r3, r2
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	bf0c      	ite	eq
 80048da:	2301      	moveq	r3, #1
 80048dc:	2300      	movne	r3, #0
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	461a      	mov	r2, r3
 80048e2:	79fb      	ldrb	r3, [r7, #7]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d0b4      	beq.n	8004852 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048fe:	e033      	b.n	8004968 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 f87f 	bl	8004a08 <I2C_IsErrorOccurred>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e031      	b.n	8004978 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491a:	d025      	beq.n	8004968 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491c:	f7fd fe0e 	bl	800253c <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	429a      	cmp	r2, r3
 800492a:	d302      	bcc.n	8004932 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d11a      	bne.n	8004968 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b02      	cmp	r3, #2
 800493e:	d013      	beq.n	8004968 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004944:	f043 0220 	orr.w	r2, r3, #32
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e007      	b.n	8004978 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b02      	cmp	r3, #2
 8004974:	d1c4      	bne.n	8004900 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800498c:	e02f      	b.n	80049ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 f838 	bl	8004a08 <I2C_IsErrorOccurred>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e02d      	b.n	80049fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a2:	f7fd fdcb 	bl	800253c <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d302      	bcc.n	80049b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d11a      	bne.n	80049ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d013      	beq.n	80049ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ca:	f043 0220 	orr.w	r2, r3, #32
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e007      	b.n	80049fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d1c8      	bne.n	800498e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08a      	sub	sp, #40	@ 0x28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004a22:	2300      	movs	r3, #0
 8004a24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d068      	beq.n	8004b06 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2210      	movs	r2, #16
 8004a3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a3c:	e049      	b.n	8004ad2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a44:	d045      	beq.n	8004ad2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a46:	f7fd fd79 	bl	800253c <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d302      	bcc.n	8004a5c <I2C_IsErrorOccurred+0x54>
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d13a      	bne.n	8004ad2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a7e:	d121      	bne.n	8004ac4 <I2C_IsErrorOccurred+0xbc>
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a86:	d01d      	beq.n	8004ac4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004a88:	7cfb      	ldrb	r3, [r7, #19]
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d01a      	beq.n	8004ac4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004a9e:	f7fd fd4d 	bl	800253c <HAL_GetTick>
 8004aa2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aa4:	e00e      	b.n	8004ac4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004aa6:	f7fd fd49 	bl	800253c <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b19      	cmp	r3, #25
 8004ab2:	d907      	bls.n	8004ac4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	f043 0320 	orr.w	r3, r3, #32
 8004aba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004ac2:	e006      	b.n	8004ad2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	f003 0320 	and.w	r3, r3, #32
 8004ace:	2b20      	cmp	r3, #32
 8004ad0:	d1e9      	bne.n	8004aa6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	f003 0320 	and.w	r3, r3, #32
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	d003      	beq.n	8004ae8 <I2C_IsErrorOccurred+0xe0>
 8004ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0aa      	beq.n	8004a3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d103      	bne.n	8004af8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2220      	movs	r2, #32
 8004af6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	f043 0304 	orr.w	r3, r3, #4
 8004afe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00b      	beq.n	8004b30 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00b      	beq.n	8004b52 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	f043 0308 	orr.w	r3, r3, #8
 8004b40:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00b      	beq.n	8004b74 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	f043 0302 	orr.w	r3, r3, #2
 8004b62:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004b74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d01c      	beq.n	8004bb6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f7ff fe3b 	bl	80047f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6859      	ldr	r1, [r3, #4]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc4 <I2C_IsErrorOccurred+0x1bc>)
 8004b8e:	400b      	ands	r3, r1
 8004b90:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3728      	adds	r7, #40	@ 0x28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	fe00e800 	.word	0xfe00e800

08004bc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	607b      	str	r3, [r7, #4]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	817b      	strh	r3, [r7, #10]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004bda:	897b      	ldrh	r3, [r7, #10]
 8004bdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004be0:	7a7b      	ldrb	r3, [r7, #9]
 8004be2:	041b      	lsls	r3, r3, #16
 8004be4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004be8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004bf6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	0d5b      	lsrs	r3, r3, #21
 8004c02:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004c06:	4b08      	ldr	r3, [pc, #32]	@ (8004c28 <I2C_TransferConfig+0x60>)
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	ea02 0103 	and.w	r1, r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004c1a:	bf00      	nop
 8004c1c:	371c      	adds	r7, #28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	03ff63ff 	.word	0x03ff63ff

08004c2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	d138      	bne.n	8004cb4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e032      	b.n	8004cb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2224      	movs	r2, #36	@ 0x24
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0201 	bic.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6819      	ldr	r1, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e000      	b.n	8004cb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004cb4:	2302      	movs	r3, #2
  }
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b085      	sub	sp, #20
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d139      	bne.n	8004d4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d101      	bne.n	8004ce6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e033      	b.n	8004d4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2224      	movs	r2, #36	@ 0x24
 8004cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0201 	bic.w	r2, r2, #1
 8004d04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004d14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	021b      	lsls	r3, r3, #8
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e000      	b.n	8004d4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d4c:	2302      	movs	r3, #2
  }
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b086      	sub	sp, #24
 8004d5e:	af02      	add	r7, sp, #8
 8004d60:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e108      	b.n	8004f7e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d106      	bne.n	8004d8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f018 fca4 	bl	801d6d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2203      	movs	r2, #3
 8004d90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d9a:	d102      	bne.n	8004da2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f003 fd17 	bl	80087da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	7c1a      	ldrb	r2, [r3, #16]
 8004db4:	f88d 2000 	strb.w	r2, [sp]
 8004db8:	3304      	adds	r3, #4
 8004dba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dbc:	f003 fc00 	bl	80085c0 <USB_CoreInit>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d005      	beq.n	8004dd2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e0d5      	b.n	8004f7e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f003 fd0f 	bl	80087fc <USB_SetCurrentMode>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d005      	beq.n	8004df0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e0c6      	b.n	8004f7e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004df0:	2300      	movs	r3, #0
 8004df2:	73fb      	strb	r3, [r7, #15]
 8004df4:	e04a      	b.n	8004e8c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004df6:	7bfa      	ldrb	r2, [r7, #15]
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	4413      	add	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	3315      	adds	r3, #21
 8004e06:	2201      	movs	r2, #1
 8004e08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e0a:	7bfa      	ldrb	r2, [r7, #15]
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	3314      	adds	r3, #20
 8004e1a:	7bfa      	ldrb	r2, [r7, #15]
 8004e1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e1e:	7bfa      	ldrb	r2, [r7, #15]
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
 8004e22:	b298      	uxth	r0, r3
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	332e      	adds	r3, #46	@ 0x2e
 8004e32:	4602      	mov	r2, r0
 8004e34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e36:	7bfa      	ldrb	r2, [r7, #15]
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	440b      	add	r3, r1
 8004e44:	3318      	adds	r3, #24
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e4a:	7bfa      	ldrb	r2, [r7, #15]
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	4413      	add	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	440b      	add	r3, r1
 8004e58:	331c      	adds	r3, #28
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e5e:	7bfa      	ldrb	r2, [r7, #15]
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	3320      	adds	r3, #32
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e72:	7bfa      	ldrb	r2, [r7, #15]
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	3324      	adds	r3, #36	@ 0x24
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	73fb      	strb	r3, [r7, #15]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	791b      	ldrb	r3, [r3, #4]
 8004e90:	7bfa      	ldrb	r2, [r7, #15]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d3af      	bcc.n	8004df6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e96:	2300      	movs	r3, #0
 8004e98:	73fb      	strb	r3, [r7, #15]
 8004e9a:	e044      	b.n	8004f26 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e9c:	7bfa      	ldrb	r2, [r7, #15]
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	4413      	add	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004eae:	2200      	movs	r2, #0
 8004eb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004eb2:	7bfa      	ldrb	r2, [r7, #15]
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	4413      	add	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004ec4:	7bfa      	ldrb	r2, [r7, #15]
 8004ec6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ec8:	7bfa      	ldrb	r2, [r7, #15]
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004eda:	2200      	movs	r2, #0
 8004edc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ede:	7bfa      	ldrb	r2, [r7, #15]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ef4:	7bfa      	ldrb	r2, [r7, #15]
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f0a:	7bfa      	ldrb	r2, [r7, #15]
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
 8004f22:	3301      	adds	r3, #1
 8004f24:	73fb      	strb	r3, [r7, #15]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	791b      	ldrb	r3, [r3, #4]
 8004f2a:	7bfa      	ldrb	r2, [r7, #15]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d3b5      	bcc.n	8004e9c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6818      	ldr	r0, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	7c1a      	ldrb	r2, [r3, #16]
 8004f38:	f88d 2000 	strb.w	r2, [sp]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f40:	f003 fca8 	bl	8008894 <USB_DevInit>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d005      	beq.n	8004f56 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e013      	b.n	8004f7e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	7b1b      	ldrb	r3, [r3, #12]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d102      	bne.n	8004f72 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f001 f959 	bl	8006224 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f004 fce7 	bl	800994a <USB_DevDisconnect>

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b082      	sub	sp, #8
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_PCD_Start+0x16>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e012      	b.n	8004fc2 <HAL_PCD_Start+0x3c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f003 fc05 	bl	80087b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f004 fca8 	bl	8009908 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004fca:	b590      	push	{r4, r7, lr}
 8004fcc:	b08d      	sub	sp, #52	@ 0x34
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f004 fd66 	bl	8009ab2 <USB_GetMode>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f040 84b9 	bne.w	8005960 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f004 fcca 	bl	800998c <USB_ReadInterrupts>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 84af 	beq.w	800595e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	0a1b      	lsrs	r3, r3, #8
 800500a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f004 fcb7 	bl	800998c <USB_ReadInterrupts>
 800501e:	4603      	mov	r3, r0
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b02      	cmp	r3, #2
 8005026:	d107      	bne.n	8005038 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695a      	ldr	r2, [r3, #20]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f002 0202 	and.w	r2, r2, #2
 8005036:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4618      	mov	r0, r3
 800503e:	f004 fca5 	bl	800998c <USB_ReadInterrupts>
 8005042:	4603      	mov	r3, r0
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b10      	cmp	r3, #16
 800504a:	d161      	bne.n	8005110 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699a      	ldr	r2, [r3, #24]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0210 	bic.w	r2, r2, #16
 800505a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	f003 020f 	and.w	r2, r3, #15
 8005068:	4613      	mov	r3, r2
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	4413      	add	r3, r2
 8005078:	3304      	adds	r3, #4
 800507a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005082:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005086:	d124      	bne.n	80050d2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800508e:	4013      	ands	r3, r2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d035      	beq.n	8005100 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	091b      	lsrs	r3, r3, #4
 800509c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800509e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	461a      	mov	r2, r3
 80050a6:	6a38      	ldr	r0, [r7, #32]
 80050a8:	f004 fadc 	bl	8009664 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	091b      	lsrs	r3, r3, #4
 80050b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050b8:	441a      	add	r2, r3
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	695a      	ldr	r2, [r3, #20]
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050ca:	441a      	add	r2, r3
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	615a      	str	r2, [r3, #20]
 80050d0:	e016      	b.n	8005100 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80050d8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80050dc:	d110      	bne.n	8005100 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80050e4:	2208      	movs	r2, #8
 80050e6:	4619      	mov	r1, r3
 80050e8:	6a38      	ldr	r0, [r7, #32]
 80050ea:	f004 fabb 	bl	8009664 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	695a      	ldr	r2, [r3, #20]
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	091b      	lsrs	r3, r3, #4
 80050f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050fa:	441a      	add	r2, r3
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0210 	orr.w	r2, r2, #16
 800510e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4618      	mov	r0, r3
 8005116:	f004 fc39 	bl	800998c <USB_ReadInterrupts>
 800511a:	4603      	mov	r3, r0
 800511c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005120:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005124:	f040 80a7 	bne.w	8005276 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4618      	mov	r0, r3
 8005132:	f004 fc3e 	bl	80099b2 <USB_ReadDevAllOutEpInterrupt>
 8005136:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005138:	e099      	b.n	800526e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800513a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 808e 	beq.w	8005262 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	4611      	mov	r1, r2
 8005150:	4618      	mov	r0, r3
 8005152:	f004 fc62 	bl	8009a1a <USB_ReadDevOutEPInterrupt>
 8005156:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00c      	beq.n	800517c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800516e:	461a      	mov	r2, r3
 8005170:	2301      	movs	r3, #1
 8005172:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005174:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fece 	bl	8005f18 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00c      	beq.n	80051a0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005192:	461a      	mov	r2, r3
 8005194:	2308      	movs	r3, #8
 8005196:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005198:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 ffa4 	bl	80060e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f003 0310 	and.w	r3, r3, #16
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d008      	beq.n	80051bc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b6:	461a      	mov	r2, r3
 80051b8:	2310      	movs	r3, #16
 80051ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d030      	beq.n	8005228 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ce:	2b80      	cmp	r3, #128	@ 0x80
 80051d0:	d109      	bne.n	80051e6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	69fa      	ldr	r2, [r7, #28]
 80051dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051e4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80051e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051e8:	4613      	mov	r3, r2
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	4413      	add	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	4413      	add	r3, r2
 80051f8:	3304      	adds	r3, #4
 80051fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	78db      	ldrb	r3, [r3, #3]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d108      	bne.n	8005216 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	2200      	movs	r2, #0
 8005208:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520c:	b2db      	uxtb	r3, r3
 800520e:	4619      	mov	r1, r3
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f018 fb93 	bl	801d93c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005222:	461a      	mov	r2, r3
 8005224:	2302      	movs	r3, #2
 8005226:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	d008      	beq.n	8005244 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800523e:	461a      	mov	r2, r3
 8005240:	2320      	movs	r3, #32
 8005242:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d009      	beq.n	8005262 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800525a:	461a      	mov	r2, r3
 800525c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005260:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005264:	3301      	adds	r3, #1
 8005266:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526a:	085b      	lsrs	r3, r3, #1
 800526c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800526e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005270:	2b00      	cmp	r3, #0
 8005272:	f47f af62 	bne.w	800513a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4618      	mov	r0, r3
 800527c:	f004 fb86 	bl	800998c <USB_ReadInterrupts>
 8005280:	4603      	mov	r3, r0
 8005282:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005286:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800528a:	f040 80db 	bne.w	8005444 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f004 fba7 	bl	80099e6 <USB_ReadDevAllInEpInterrupt>
 8005298:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800529e:	e0cd      	b.n	800543c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80052a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 80c2 	beq.w	8005430 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	4611      	mov	r1, r2
 80052b6:	4618      	mov	r0, r3
 80052b8:	f004 fbcd 	bl	8009a56 <USB_ReadDevInEPInterrupt>
 80052bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d057      	beq.n	8005378 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	2201      	movs	r2, #1
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	43db      	mvns	r3, r3
 80052e2:	69f9      	ldr	r1, [r7, #28]
 80052e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052e8:	4013      	ands	r3, r2
 80052ea:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80052ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f8:	461a      	mov	r2, r3
 80052fa:	2301      	movs	r3, #1
 80052fc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	799b      	ldrb	r3, [r3, #6]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d132      	bne.n	800536c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800530a:	4613      	mov	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	3320      	adds	r3, #32
 8005316:	6819      	ldr	r1, [r3, #0]
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800531c:	4613      	mov	r3, r2
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4403      	add	r3, r0
 8005326:	331c      	adds	r3, #28
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4419      	add	r1, r3
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005330:	4613      	mov	r3, r2
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	4413      	add	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4403      	add	r3, r0
 800533a:	3320      	adds	r3, #32
 800533c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	2b00      	cmp	r3, #0
 8005342:	d113      	bne.n	800536c <HAL_PCD_IRQHandler+0x3a2>
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005348:	4613      	mov	r3, r2
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	4413      	add	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	440b      	add	r3, r1
 8005352:	3324      	adds	r3, #36	@ 0x24
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d108      	bne.n	800536c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6818      	ldr	r0, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005364:	461a      	mov	r2, r3
 8005366:	2101      	movs	r1, #1
 8005368:	f004 fbd6 	bl	8009b18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800536c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536e:	b2db      	uxtb	r3, r3
 8005370:	4619      	mov	r1, r3
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f018 fa5d 	bl	801d832 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d008      	beq.n	8005394 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800538e:	461a      	mov	r2, r3
 8005390:	2308      	movs	r3, #8
 8005392:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f003 0310 	and.w	r3, r3, #16
 800539a:	2b00      	cmp	r3, #0
 800539c:	d008      	beq.n	80053b0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053aa:	461a      	mov	r2, r3
 80053ac:	2310      	movs	r3, #16
 80053ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d008      	beq.n	80053cc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80053ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053c6:	461a      	mov	r2, r3
 80053c8:	2340      	movs	r3, #64	@ 0x40
 80053ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d023      	beq.n	800541e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80053d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053d8:	6a38      	ldr	r0, [r7, #32]
 80053da:	f003 fbb9 	bl	8008b50 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80053de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053e0:	4613      	mov	r3, r2
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	4413      	add	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	3310      	adds	r3, #16
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	4413      	add	r3, r2
 80053ee:	3304      	adds	r3, #4
 80053f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	78db      	ldrb	r3, [r3, #3]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d108      	bne.n	800540c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2200      	movs	r2, #0
 80053fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005402:	b2db      	uxtb	r3, r3
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f018 faaa 	bl	801d960 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800540c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005418:	461a      	mov	r2, r3
 800541a:	2302      	movs	r3, #2
 800541c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005428:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fce8 	bl	8005e00 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005432:	3301      	adds	r3, #1
 8005434:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005438:	085b      	lsrs	r3, r3, #1
 800543a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800543c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543e:	2b00      	cmp	r3, #0
 8005440:	f47f af2e 	bne.w	80052a0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4618      	mov	r0, r3
 800544a:	f004 fa9f 	bl	800998c <USB_ReadInterrupts>
 800544e:	4603      	mov	r3, r0
 8005450:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005454:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005458:	d122      	bne.n	80054a0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	69fa      	ldr	r2, [r7, #28]
 8005464:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005468:	f023 0301 	bic.w	r3, r3, #1
 800546c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005474:	2b01      	cmp	r3, #1
 8005476:	d108      	bne.n	800548a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005480:	2100      	movs	r1, #0
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f018 fc24 	bl	801dcd0 <HAL_PCDEx_LPM_Callback>
 8005488:	e002      	b.n	8005490 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f018 fa48 	bl	801d920 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695a      	ldr	r2, [r3, #20]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800549e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f004 fa71 	bl	800998c <USB_ReadInterrupts>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054b4:	d112      	bne.n	80054dc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d102      	bne.n	80054cc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f018 fa04 	bl	801d8d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695a      	ldr	r2, [r3, #20]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80054da:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f004 fa53 	bl	800998c <USB_ReadInterrupts>
 80054e6:	4603      	mov	r3, r0
 80054e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054f0:	d121      	bne.n	8005536 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695a      	ldr	r2, [r3, #20]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005500:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005508:	2b00      	cmp	r3, #0
 800550a:	d111      	bne.n	8005530 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800551a:	089b      	lsrs	r3, r3, #2
 800551c:	f003 020f 	and.w	r2, r3, #15
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005526:	2101      	movs	r1, #1
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f018 fbd1 	bl	801dcd0 <HAL_PCDEx_LPM_Callback>
 800552e:	e002      	b.n	8005536 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f018 f9cf 	bl	801d8d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4618      	mov	r0, r3
 800553c:	f004 fa26 	bl	800998c <USB_ReadInterrupts>
 8005540:	4603      	mov	r3, r0
 8005542:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800554a:	f040 80b7 	bne.w	80056bc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	69fa      	ldr	r2, [r7, #28]
 8005558:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800555c:	f023 0301 	bic.w	r3, r3, #1
 8005560:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2110      	movs	r1, #16
 8005568:	4618      	mov	r0, r3
 800556a:	f003 faf1 	bl	8008b50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800556e:	2300      	movs	r3, #0
 8005570:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005572:	e046      	b.n	8005602 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005580:	461a      	mov	r2, r3
 8005582:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005586:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	440a      	add	r2, r1
 800559e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80055a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80055a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055b4:	461a      	mov	r2, r3
 80055b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80055ba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80055da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055ec:	0151      	lsls	r1, r2, #5
 80055ee:	69fa      	ldr	r2, [r7, #28]
 80055f0:	440a      	add	r2, r1
 80055f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055fa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fe:	3301      	adds	r3, #1
 8005600:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	791b      	ldrb	r3, [r3, #4]
 8005606:	461a      	mov	r2, r3
 8005608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800560a:	4293      	cmp	r3, r2
 800560c:	d3b2      	bcc.n	8005574 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800561c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005620:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	7bdb      	ldrb	r3, [r3, #15]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d016      	beq.n	8005658 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005630:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800563a:	f043 030b 	orr.w	r3, r3, #11
 800563e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005650:	f043 030b 	orr.w	r3, r3, #11
 8005654:	6453      	str	r3, [r2, #68]	@ 0x44
 8005656:	e015      	b.n	8005684 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800565e:	695a      	ldr	r2, [r3, #20]
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005666:	4619      	mov	r1, r3
 8005668:	f242 032b 	movw	r3, #8235	@ 0x202b
 800566c:	4313      	orrs	r3, r2
 800566e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	69fa      	ldr	r2, [r7, #28]
 800567a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800567e:	f043 030b 	orr.w	r3, r3, #11
 8005682:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005692:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005696:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6818      	ldr	r0, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80056a6:	461a      	mov	r2, r3
 80056a8:	f004 fa36 	bl	8009b18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80056ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f004 f963 	bl	800998c <USB_ReadInterrupts>
 80056c6:	4603      	mov	r3, r0
 80056c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056d0:	d123      	bne.n	800571a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f004 f9fa 	bl	8009ad0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f003 faae 	bl	8008c42 <USB_GetDevSpeed>
 80056e6:	4603      	mov	r3, r0
 80056e8:	461a      	mov	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681c      	ldr	r4, [r3, #0]
 80056f2:	f001 faab 	bl	8006c4c <HAL_RCC_GetHCLKFreq>
 80056f6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056fc:	461a      	mov	r2, r3
 80056fe:	4620      	mov	r0, r4
 8005700:	f002 ffb8 	bl	8008674 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f018 f8bc 	bl	801d882 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	695a      	ldr	r2, [r3, #20]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005718:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4618      	mov	r0, r3
 8005720:	f004 f934 	bl	800998c <USB_ReadInterrupts>
 8005724:	4603      	mov	r3, r0
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b08      	cmp	r3, #8
 800572c:	d10a      	bne.n	8005744 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f018 f899 	bl	801d866 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695a      	ldr	r2, [r3, #20]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f002 0208 	and.w	r2, r2, #8
 8005742:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f004 f91f 	bl	800998c <USB_ReadInterrupts>
 800574e:	4603      	mov	r3, r0
 8005750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005754:	2b80      	cmp	r3, #128	@ 0x80
 8005756:	d123      	bne.n	80057a0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005764:	2301      	movs	r3, #1
 8005766:	627b      	str	r3, [r7, #36]	@ 0x24
 8005768:	e014      	b.n	8005794 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800576e:	4613      	mov	r3, r2
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	4413      	add	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d105      	bne.n	800578e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005784:	b2db      	uxtb	r3, r3
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fb08 	bl	8005d9e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	3301      	adds	r3, #1
 8005792:	627b      	str	r3, [r7, #36]	@ 0x24
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	791b      	ldrb	r3, [r3, #4]
 8005798:	461a      	mov	r2, r3
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	4293      	cmp	r3, r2
 800579e:	d3e4      	bcc.n	800576a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f004 f8f1 	bl	800998c <USB_ReadInterrupts>
 80057aa:	4603      	mov	r3, r0
 80057ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057b4:	d13c      	bne.n	8005830 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057b6:	2301      	movs	r3, #1
 80057b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ba:	e02b      	b.n	8005814 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80057bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057d0:	4613      	mov	r3, r2
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	4413      	add	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	440b      	add	r3, r1
 80057da:	3318      	adds	r3, #24
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d115      	bne.n	800580e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80057e2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	da12      	bge.n	800580e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ec:	4613      	mov	r3, r2
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	4413      	add	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	440b      	add	r3, r1
 80057f6:	3317      	adds	r3, #23
 80057f8:	2201      	movs	r2, #1
 80057fa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80057fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005804:	b2db      	uxtb	r3, r3
 8005806:	4619      	mov	r1, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fac8 	bl	8005d9e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	3301      	adds	r3, #1
 8005812:	627b      	str	r3, [r7, #36]	@ 0x24
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	791b      	ldrb	r3, [r3, #4]
 8005818:	461a      	mov	r2, r3
 800581a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581c:	4293      	cmp	r3, r2
 800581e:	d3cd      	bcc.n	80057bc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695a      	ldr	r2, [r3, #20]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800582e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f004 f8a9 	bl	800998c <USB_ReadInterrupts>
 800583a:	4603      	mov	r3, r0
 800583c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005840:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005844:	d156      	bne.n	80058f4 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005846:	2301      	movs	r3, #1
 8005848:	627b      	str	r3, [r7, #36]	@ 0x24
 800584a:	e045      	b.n	80058d8 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800584c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800585c:	6879      	ldr	r1, [r7, #4]
 800585e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005860:	4613      	mov	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	440b      	add	r3, r1
 800586a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d12e      	bne.n	80058d2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005874:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005876:	2b00      	cmp	r3, #0
 8005878:	da2b      	bge.n	80058d2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005886:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800588a:	429a      	cmp	r2, r3
 800588c:	d121      	bne.n	80058d2 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005892:	4613      	mov	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80058a0:	2201      	movs	r2, #1
 80058a2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	69fa      	ldr	r2, [r7, #28]
 80058c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80058ce:	6053      	str	r3, [r2, #4]
            break;
 80058d0:	e008      	b.n	80058e4 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	3301      	adds	r3, #1
 80058d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	791b      	ldrb	r3, [r3, #4]
 80058dc:	461a      	mov	r2, r3
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d3b3      	bcc.n	800584c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695a      	ldr	r2, [r3, #20]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80058f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f004 f847 	bl	800998c <USB_ReadInterrupts>
 80058fe:	4603      	mov	r3, r0
 8005900:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005908:	d10a      	bne.n	8005920 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f018 f83a 	bl	801d984 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695a      	ldr	r2, [r3, #20]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800591e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4618      	mov	r0, r3
 8005926:	f004 f831 	bl	800998c <USB_ReadInterrupts>
 800592a:	4603      	mov	r3, r0
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b04      	cmp	r3, #4
 8005932:	d115      	bne.n	8005960 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f018 f82a 	bl	801d9a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6859      	ldr	r1, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	430a      	orrs	r2, r1
 800595a:	605a      	str	r2, [r3, #4]
 800595c:	e000      	b.n	8005960 <HAL_PCD_IRQHandler+0x996>
      return;
 800595e:	bf00      	nop
    }
  }
}
 8005960:	3734      	adds	r7, #52	@ 0x34
 8005962:	46bd      	mov	sp, r7
 8005964:	bd90      	pop	{r4, r7, pc}

08005966 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	460b      	mov	r3, r1
 8005970:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005978:	2b01      	cmp	r3, #1
 800597a:	d101      	bne.n	8005980 <HAL_PCD_SetAddress+0x1a>
 800597c:	2302      	movs	r3, #2
 800597e:	e012      	b.n	80059a6 <HAL_PCD_SetAddress+0x40>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	78fa      	ldrb	r2, [r7, #3]
 800598c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	78fa      	ldrb	r2, [r7, #3]
 8005994:	4611      	mov	r1, r2
 8005996:	4618      	mov	r0, r3
 8005998:	f003 ff90 	bl	80098bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b084      	sub	sp, #16
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	4608      	mov	r0, r1
 80059b8:	4611      	mov	r1, r2
 80059ba:	461a      	mov	r2, r3
 80059bc:	4603      	mov	r3, r0
 80059be:	70fb      	strb	r3, [r7, #3]
 80059c0:	460b      	mov	r3, r1
 80059c2:	803b      	strh	r3, [r7, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	da0f      	bge.n	80059f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059d4:	78fb      	ldrb	r3, [r7, #3]
 80059d6:	f003 020f 	and.w	r2, r3, #15
 80059da:	4613      	mov	r3, r2
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	4413      	add	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	3310      	adds	r3, #16
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	4413      	add	r3, r2
 80059e8:	3304      	adds	r3, #4
 80059ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	705a      	strb	r2, [r3, #1]
 80059f2:	e00f      	b.n	8005a14 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	f003 020f 	and.w	r2, r3, #15
 80059fa:	4613      	mov	r3, r2
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	4413      	add	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	4413      	add	r3, r2
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005a14:	78fb      	ldrb	r3, [r7, #3]
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005a20:	883a      	ldrh	r2, [r7, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	78ba      	ldrb	r2, [r7, #2]
 8005a2a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	785b      	ldrb	r3, [r3, #1]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d004      	beq.n	8005a3e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a3e:	78bb      	ldrb	r3, [r7, #2]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d102      	bne.n	8005a4a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_PCD_EP_Open+0xaa>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e00e      	b.n	8005a76 <HAL_PCD_EP_Open+0xc8>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68f9      	ldr	r1, [r7, #12]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f003 f910 	bl	8008c8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005a74:	7afb      	ldrb	r3, [r7, #11]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	460b      	mov	r3, r1
 8005a88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	da0f      	bge.n	8005ab2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	f003 020f 	and.w	r2, r3, #15
 8005a98:	4613      	mov	r3, r2
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	4413      	add	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	3310      	adds	r3, #16
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2201      	movs	r2, #1
 8005aae:	705a      	strb	r2, [r3, #1]
 8005ab0:	e00f      	b.n	8005ad2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ab2:	78fb      	ldrb	r3, [r7, #3]
 8005ab4:	f003 020f 	and.w	r2, r3, #15
 8005ab8:	4613      	mov	r3, r2
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	4413      	add	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	3304      	adds	r3, #4
 8005aca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ad2:	78fb      	ldrb	r3, [r7, #3]
 8005ad4:	f003 030f 	and.w	r3, r3, #15
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_PCD_EP_Close+0x6e>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e00e      	b.n	8005b0a <HAL_PCD_EP_Close+0x8c>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68f9      	ldr	r1, [r7, #12]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f003 f94e 	bl	8008d9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b086      	sub	sp, #24
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	60f8      	str	r0, [r7, #12]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	603b      	str	r3, [r7, #0]
 8005b1e:	460b      	mov	r3, r1
 8005b20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b22:	7afb      	ldrb	r3, [r7, #11]
 8005b24:	f003 020f 	and.w	r2, r3, #15
 8005b28:	4613      	mov	r3, r2
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	4413      	add	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	3304      	adds	r3, #4
 8005b3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2200      	movs	r2, #0
 8005b52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b54:	7afb      	ldrb	r3, [r7, #11]
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	799b      	ldrb	r3, [r3, #6]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d102      	bne.n	8005b6e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6818      	ldr	r0, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	799b      	ldrb	r3, [r3, #6]
 8005b76:	461a      	mov	r2, r3
 8005b78:	6979      	ldr	r1, [r7, #20]
 8005b7a:	f003 f9eb 	bl	8008f54 <USB_EPStartXfer>

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	f003 020f 	and.w	r2, r3, #15
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005baa:	681b      	ldr	r3, [r3, #0]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bc8:	7afb      	ldrb	r3, [r7, #11]
 8005bca:	f003 020f 	and.w	r2, r3, #15
 8005bce:	4613      	mov	r3, r2
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	3310      	adds	r3, #16
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4413      	add	r3, r2
 8005bdc:	3304      	adds	r3, #4
 8005bde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bf8:	7afb      	ldrb	r3, [r7, #11]
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	799b      	ldrb	r3, [r3, #6]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d102      	bne.n	8005c12 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6818      	ldr	r0, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	799b      	ldrb	r3, [r3, #6]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	6979      	ldr	r1, [r7, #20]
 8005c1e:	f003 f999 	bl	8008f54 <USB_EPStartXfer>

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3718      	adds	r7, #24
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	460b      	mov	r3, r1
 8005c36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	f003 030f 	and.w	r3, r3, #15
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	7912      	ldrb	r2, [r2, #4]
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d901      	bls.n	8005c4a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e04f      	b.n	8005cea <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	da0f      	bge.n	8005c72 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c52:	78fb      	ldrb	r3, [r7, #3]
 8005c54:	f003 020f 	and.w	r2, r3, #15
 8005c58:	4613      	mov	r3, r2
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	4413      	add	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	3310      	adds	r3, #16
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	4413      	add	r3, r2
 8005c66:	3304      	adds	r3, #4
 8005c68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	705a      	strb	r2, [r3, #1]
 8005c70:	e00d      	b.n	8005c8e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c72:	78fa      	ldrb	r2, [r7, #3]
 8005c74:	4613      	mov	r3, r2
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	4413      	add	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	4413      	add	r3, r2
 8005c84:	3304      	adds	r3, #4
 8005c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d101      	bne.n	8005cae <HAL_PCD_EP_SetStall+0x82>
 8005caa:	2302      	movs	r3, #2
 8005cac:	e01d      	b.n	8005cea <HAL_PCD_EP_SetStall+0xbe>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68f9      	ldr	r1, [r7, #12]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f003 fd29 	bl	8009714 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d109      	bne.n	8005ce0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6818      	ldr	r0, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	7999      	ldrb	r1, [r3, #6]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f003 ff1c 	bl	8009b18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005cfe:	78fb      	ldrb	r3, [r7, #3]
 8005d00:	f003 030f 	and.w	r3, r3, #15
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	7912      	ldrb	r2, [r2, #4]
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d901      	bls.n	8005d10 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e042      	b.n	8005d96 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	da0f      	bge.n	8005d38 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	f003 020f 	and.w	r2, r3, #15
 8005d1e:	4613      	mov	r3, r2
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	4413      	add	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	3310      	adds	r3, #16
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2201      	movs	r2, #1
 8005d34:	705a      	strb	r2, [r3, #1]
 8005d36:	e00f      	b.n	8005d58 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	f003 020f 	and.w	r2, r3, #15
 8005d3e:	4613      	mov	r3, r2
 8005d40:	00db      	lsls	r3, r3, #3
 8005d42:	4413      	add	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	3304      	adds	r3, #4
 8005d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d5e:	78fb      	ldrb	r3, [r7, #3]
 8005d60:	f003 030f 	and.w	r3, r3, #15
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_PCD_EP_ClrStall+0x86>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e00e      	b.n	8005d96 <HAL_PCD_EP_ClrStall+0xa4>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68f9      	ldr	r1, [r7, #12]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f003 fd32 	bl	80097f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b084      	sub	sp, #16
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	460b      	mov	r3, r1
 8005da8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005daa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	da0c      	bge.n	8005dcc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005db2:	78fb      	ldrb	r3, [r7, #3]
 8005db4:	f003 020f 	and.w	r2, r3, #15
 8005db8:	4613      	mov	r3, r2
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	3310      	adds	r3, #16
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	e00c      	b.n	8005de6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005dcc:	78fb      	ldrb	r3, [r7, #3]
 8005dce:	f003 020f 	and.w	r2, r3, #15
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	4413      	add	r3, r2
 8005de2:	3304      	adds	r3, #4
 8005de4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68f9      	ldr	r1, [r7, #12]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f003 fb51 	bl	8009494 <USB_EPStopXfer>
 8005df2:	4603      	mov	r3, r0
 8005df4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005df6:	7afb      	ldrb	r3, [r7, #11]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08a      	sub	sp, #40	@ 0x28
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	4613      	mov	r3, r2
 8005e18:	00db      	lsls	r3, r3, #3
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	3310      	adds	r3, #16
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	4413      	add	r3, r2
 8005e24:	3304      	adds	r3, #4
 8005e26:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	695a      	ldr	r2, [r3, #20]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d901      	bls.n	8005e38 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e06b      	b.n	8005f10 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	691a      	ldr	r2, [r3, #16]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d902      	bls.n	8005e54 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	3303      	adds	r3, #3
 8005e58:	089b      	lsrs	r3, r3, #2
 8005e5a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e5c:	e02a      	b.n	8005eb4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	691a      	ldr	r2, [r3, #16]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d902      	bls.n	8005e7a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	3303      	adds	r3, #3
 8005e7e:	089b      	lsrs	r3, r3, #2
 8005e80:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	68d9      	ldr	r1, [r3, #12]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	4603      	mov	r3, r0
 8005e96:	6978      	ldr	r0, [r7, #20]
 8005e98:	f003 fba6 	bl	80095e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	441a      	add	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	695a      	ldr	r2, [r3, #20]
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	441a      	add	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d809      	bhi.n	8005ede <PCD_WriteEmptyTxFifo+0xde>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	695a      	ldr	r2, [r3, #20]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d203      	bcs.n	8005ede <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1bf      	bne.n	8005e5e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	691a      	ldr	r2, [r3, #16]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d811      	bhi.n	8005f0e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	43db      	mvns	r3, r3
 8005f04:	6939      	ldr	r1, [r7, #16]
 8005f06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3720      	adds	r7, #32
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	333c      	adds	r3, #60	@ 0x3c
 8005f30:	3304      	adds	r3, #4
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	799b      	ldrb	r3, [r3, #6]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d17b      	bne.n	8006046 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d015      	beq.n	8005f84 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	4a61      	ldr	r2, [pc, #388]	@ (80060e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	f240 80b9 	bls.w	80060d4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 80b3 	beq.w	80060d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f80:	6093      	str	r3, [r2, #8]
 8005f82:	e0a7      	b.n	80060d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f003 0320 	and.w	r3, r3, #32
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d009      	beq.n	8005fa2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	2320      	movs	r3, #32
 8005f9e:	6093      	str	r3, [r2, #8]
 8005fa0:	e098      	b.n	80060d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f040 8093 	bne.w	80060d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	4a4b      	ldr	r2, [pc, #300]	@ (80060e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d90f      	bls.n	8005fd6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00a      	beq.n	8005fd6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fcc:	461a      	mov	r2, r3
 8005fce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fd2:	6093      	str	r3, [r2, #8]
 8005fd4:	e07e      	b.n	80060d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	3304      	adds	r3, #4
 8005fea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a1a      	ldr	r2, [r3, #32]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	0159      	lsls	r1, r3, #5
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	440b      	add	r3, r1
 8005ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006002:	1ad2      	subs	r2, r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d114      	bne.n	8006038 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d109      	bne.n	800602a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006020:	461a      	mov	r2, r3
 8006022:	2101      	movs	r1, #1
 8006024:	f003 fd78 	bl	8009b18 <USB_EP0_OutStart>
 8006028:	e006      	b.n	8006038 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	441a      	add	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	b2db      	uxtb	r3, r3
 800603c:	4619      	mov	r1, r3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f017 fbdc 	bl	801d7fc <HAL_PCD_DataOutStageCallback>
 8006044:	e046      	b.n	80060d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	4a26      	ldr	r2, [pc, #152]	@ (80060e4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d124      	bne.n	8006098 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00a      	beq.n	800606e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006064:	461a      	mov	r2, r3
 8006066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800606a:	6093      	str	r3, [r2, #8]
 800606c:	e032      	b.n	80060d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f003 0320 	and.w	r3, r3, #32
 8006074:	2b00      	cmp	r3, #0
 8006076:	d008      	beq.n	800608a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006084:	461a      	mov	r2, r3
 8006086:	2320      	movs	r3, #32
 8006088:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	b2db      	uxtb	r3, r3
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f017 fbb3 	bl	801d7fc <HAL_PCD_DataOutStageCallback>
 8006096:	e01d      	b.n	80060d4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d114      	bne.n	80060c8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	4613      	mov	r3, r2
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	440b      	add	r3, r1
 80060ac:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d108      	bne.n	80060c8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6818      	ldr	r0, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80060c0:	461a      	mov	r2, r3
 80060c2:	2100      	movs	r1, #0
 80060c4:	f003 fd28 	bl	8009b18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f017 fb94 	bl	801d7fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3720      	adds	r7, #32
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	4f54300a 	.word	0x4f54300a
 80060e4:	4f54310a 	.word	0x4f54310a

080060e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	333c      	adds	r3, #60	@ 0x3c
 8006100:	3304      	adds	r3, #4
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	4413      	add	r3, r2
 800610e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4a15      	ldr	r2, [pc, #84]	@ (8006170 <PCD_EP_OutSetupPacket_int+0x88>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d90e      	bls.n	800613c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006124:	2b00      	cmp	r3, #0
 8006126:	d009      	beq.n	800613c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006134:	461a      	mov	r2, r3
 8006136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800613a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f017 fb4b 	bl	801d7d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4a0a      	ldr	r2, [pc, #40]	@ (8006170 <PCD_EP_OutSetupPacket_int+0x88>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d90c      	bls.n	8006164 <PCD_EP_OutSetupPacket_int+0x7c>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	799b      	ldrb	r3, [r3, #6]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d108      	bne.n	8006164 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6818      	ldr	r0, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800615c:	461a      	mov	r2, r3
 800615e:	2101      	movs	r1, #1
 8006160:	f003 fcda 	bl	8009b18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	4f54300a 	.word	0x4f54300a

08006174 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	70fb      	strb	r3, [r7, #3]
 8006180:	4613      	mov	r3, r2
 8006182:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d107      	bne.n	80061a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006192:	883b      	ldrh	r3, [r7, #0]
 8006194:	0419      	lsls	r1, r3, #16
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	430a      	orrs	r2, r1
 800619e:	629a      	str	r2, [r3, #40]	@ 0x28
 80061a0:	e028      	b.n	80061f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a8:	0c1b      	lsrs	r3, r3, #16
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	4413      	add	r3, r2
 80061ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80061b0:	2300      	movs	r3, #0
 80061b2:	73fb      	strb	r3, [r7, #15]
 80061b4:	e00d      	b.n	80061d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
 80061bc:	3340      	adds	r3, #64	@ 0x40
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	0c1b      	lsrs	r3, r3, #16
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	4413      	add	r3, r2
 80061ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
 80061ce:	3301      	adds	r3, #1
 80061d0:	73fb      	strb	r3, [r7, #15]
 80061d2:	7bfa      	ldrb	r2, [r7, #15]
 80061d4:	78fb      	ldrb	r3, [r7, #3]
 80061d6:	3b01      	subs	r3, #1
 80061d8:	429a      	cmp	r2, r3
 80061da:	d3ec      	bcc.n	80061b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80061dc:	883b      	ldrh	r3, [r7, #0]
 80061de:	0418      	lsls	r0, r3, #16
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6819      	ldr	r1, [r3, #0]
 80061e4:	78fb      	ldrb	r3, [r7, #3]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	4302      	orrs	r2, r0
 80061ec:	3340      	adds	r3, #64	@ 0x40
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	440b      	add	r3, r1
 80061f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006202:	b480      	push	{r7}
 8006204:	b083      	sub	sp, #12
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	460b      	mov	r3, r1
 800620c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	887a      	ldrh	r2, [r7, #2]
 8006214:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006252:	4b05      	ldr	r3, [pc, #20]	@ (8006268 <HAL_PCDEx_ActivateLPM+0x44>)
 8006254:	4313      	orrs	r3, r2
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	10000003 	.word	0x10000003

0800626c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006272:	2300      	movs	r3, #0
 8006274:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006276:	4b23      	ldr	r3, [pc, #140]	@ (8006304 <HAL_PWREx_EnableOverDrive+0x98>)
 8006278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627a:	4a22      	ldr	r2, [pc, #136]	@ (8006304 <HAL_PWREx_EnableOverDrive+0x98>)
 800627c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006280:	6413      	str	r3, [r2, #64]	@ 0x40
 8006282:	4b20      	ldr	r3, [pc, #128]	@ (8006304 <HAL_PWREx_EnableOverDrive+0x98>)
 8006284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800628e:	4b1e      	ldr	r3, [pc, #120]	@ (8006308 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a1d      	ldr	r2, [pc, #116]	@ (8006308 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006298:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800629a:	f7fc f94f 	bl	800253c <HAL_GetTick>
 800629e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80062a0:	e009      	b.n	80062b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062a2:	f7fc f94b 	bl	800253c <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062b0:	d901      	bls.n	80062b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e022      	b.n	80062fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80062b6:	4b14      	ldr	r3, [pc, #80]	@ (8006308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062c2:	d1ee      	bne.n	80062a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80062c4:	4b10      	ldr	r3, [pc, #64]	@ (8006308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a0f      	ldr	r2, [pc, #60]	@ (8006308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80062ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062d0:	f7fc f934 	bl	800253c <HAL_GetTick>
 80062d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80062d6:	e009      	b.n	80062ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062d8:	f7fc f930 	bl	800253c <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062e6:	d901      	bls.n	80062ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e007      	b.n	80062fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80062ec:	4b06      	ldr	r3, [pc, #24]	@ (8006308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062f8:	d1ee      	bne.n	80062d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	40023800 	.word	0x40023800
 8006308:	40007000 	.word	0x40007000

0800630c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006314:	2300      	movs	r3, #0
 8006316:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e29b      	b.n	800685a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 8087 	beq.w	800643e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006330:	4b96      	ldr	r3, [pc, #600]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f003 030c 	and.w	r3, r3, #12
 8006338:	2b04      	cmp	r3, #4
 800633a:	d00c      	beq.n	8006356 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800633c:	4b93      	ldr	r3, [pc, #588]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f003 030c 	and.w	r3, r3, #12
 8006344:	2b08      	cmp	r3, #8
 8006346:	d112      	bne.n	800636e <HAL_RCC_OscConfig+0x62>
 8006348:	4b90      	ldr	r3, [pc, #576]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006350:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006354:	d10b      	bne.n	800636e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006356:	4b8d      	ldr	r3, [pc, #564]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d06c      	beq.n	800643c <HAL_RCC_OscConfig+0x130>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d168      	bne.n	800643c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e275      	b.n	800685a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006376:	d106      	bne.n	8006386 <HAL_RCC_OscConfig+0x7a>
 8006378:	4b84      	ldr	r3, [pc, #528]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a83      	ldr	r2, [pc, #524]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 800637e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	e02e      	b.n	80063e4 <HAL_RCC_OscConfig+0xd8>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10c      	bne.n	80063a8 <HAL_RCC_OscConfig+0x9c>
 800638e:	4b7f      	ldr	r3, [pc, #508]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a7e      	ldr	r2, [pc, #504]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 8006394:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	4b7c      	ldr	r3, [pc, #496]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a7b      	ldr	r2, [pc, #492]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 80063a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	e01d      	b.n	80063e4 <HAL_RCC_OscConfig+0xd8>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063b0:	d10c      	bne.n	80063cc <HAL_RCC_OscConfig+0xc0>
 80063b2:	4b76      	ldr	r3, [pc, #472]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a75      	ldr	r2, [pc, #468]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 80063b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	4b73      	ldr	r3, [pc, #460]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a72      	ldr	r2, [pc, #456]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 80063c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	e00b      	b.n	80063e4 <HAL_RCC_OscConfig+0xd8>
 80063cc:	4b6f      	ldr	r3, [pc, #444]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a6e      	ldr	r2, [pc, #440]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 80063d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	4b6c      	ldr	r3, [pc, #432]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a6b      	ldr	r2, [pc, #428]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 80063de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d013      	beq.n	8006414 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ec:	f7fc f8a6 	bl	800253c <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063f2:	e008      	b.n	8006406 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063f4:	f7fc f8a2 	bl	800253c <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b64      	cmp	r3, #100	@ 0x64
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e229      	b.n	800685a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006406:	4b61      	ldr	r3, [pc, #388]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0f0      	beq.n	80063f4 <HAL_RCC_OscConfig+0xe8>
 8006412:	e014      	b.n	800643e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006414:	f7fc f892 	bl	800253c <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800641c:	f7fc f88e 	bl	800253c <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b64      	cmp	r3, #100	@ 0x64
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e215      	b.n	800685a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800642e:	4b57      	ldr	r3, [pc, #348]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1f0      	bne.n	800641c <HAL_RCC_OscConfig+0x110>
 800643a:	e000      	b.n	800643e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800643c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d069      	beq.n	800651e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800644a:	4b50      	ldr	r3, [pc, #320]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 030c 	and.w	r3, r3, #12
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00b      	beq.n	800646e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006456:	4b4d      	ldr	r3, [pc, #308]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 030c 	and.w	r3, r3, #12
 800645e:	2b08      	cmp	r3, #8
 8006460:	d11c      	bne.n	800649c <HAL_RCC_OscConfig+0x190>
 8006462:	4b4a      	ldr	r3, [pc, #296]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d116      	bne.n	800649c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800646e:	4b47      	ldr	r3, [pc, #284]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <HAL_RCC_OscConfig+0x17a>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d001      	beq.n	8006486 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e1e9      	b.n	800685a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006486:	4b41      	ldr	r3, [pc, #260]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	493d      	ldr	r1, [pc, #244]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 8006496:	4313      	orrs	r3, r2
 8006498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800649a:	e040      	b.n	800651e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d023      	beq.n	80064ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064a4:	4b39      	ldr	r3, [pc, #228]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a38      	ldr	r2, [pc, #224]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 80064aa:	f043 0301 	orr.w	r3, r3, #1
 80064ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b0:	f7fc f844 	bl	800253c <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064b8:	f7fc f840 	bl	800253c <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e1c7      	b.n	800685a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ca:	4b30      	ldr	r3, [pc, #192]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0f0      	beq.n	80064b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d6:	4b2d      	ldr	r3, [pc, #180]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	4929      	ldr	r1, [pc, #164]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	600b      	str	r3, [r1, #0]
 80064ea:	e018      	b.n	800651e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064ec:	4b27      	ldr	r3, [pc, #156]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a26      	ldr	r2, [pc, #152]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 80064f2:	f023 0301 	bic.w	r3, r3, #1
 80064f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f8:	f7fc f820 	bl	800253c <HAL_GetTick>
 80064fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064fe:	e008      	b.n	8006512 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006500:	f7fc f81c 	bl	800253c <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b02      	cmp	r3, #2
 800650c:	d901      	bls.n	8006512 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e1a3      	b.n	800685a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006512:	4b1e      	ldr	r3, [pc, #120]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1f0      	bne.n	8006500 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	2b00      	cmp	r3, #0
 8006528:	d038      	beq.n	800659c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d019      	beq.n	8006566 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006532:	4b16      	ldr	r3, [pc, #88]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 8006534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006536:	4a15      	ldr	r2, [pc, #84]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 8006538:	f043 0301 	orr.w	r3, r3, #1
 800653c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800653e:	f7fb fffd 	bl	800253c <HAL_GetTick>
 8006542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006544:	e008      	b.n	8006558 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006546:	f7fb fff9 	bl	800253c <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b02      	cmp	r3, #2
 8006552:	d901      	bls.n	8006558 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e180      	b.n	800685a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006558:	4b0c      	ldr	r3, [pc, #48]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 800655a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b00      	cmp	r3, #0
 8006562:	d0f0      	beq.n	8006546 <HAL_RCC_OscConfig+0x23a>
 8006564:	e01a      	b.n	800659c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006566:	4b09      	ldr	r3, [pc, #36]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 8006568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800656a:	4a08      	ldr	r2, [pc, #32]	@ (800658c <HAL_RCC_OscConfig+0x280>)
 800656c:	f023 0301 	bic.w	r3, r3, #1
 8006570:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006572:	f7fb ffe3 	bl	800253c <HAL_GetTick>
 8006576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006578:	e00a      	b.n	8006590 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800657a:	f7fb ffdf 	bl	800253c <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d903      	bls.n	8006590 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e166      	b.n	800685a <HAL_RCC_OscConfig+0x54e>
 800658c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006590:	4b92      	ldr	r3, [pc, #584]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 8006592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1ee      	bne.n	800657a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0304 	and.w	r3, r3, #4
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 80a4 	beq.w	80066f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065aa:	4b8c      	ldr	r3, [pc, #560]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 80065ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10d      	bne.n	80065d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80065b6:	4b89      	ldr	r3, [pc, #548]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 80065b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ba:	4a88      	ldr	r2, [pc, #544]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 80065bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80065c2:	4b86      	ldr	r3, [pc, #536]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 80065c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065ca:	60bb      	str	r3, [r7, #8]
 80065cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065ce:	2301      	movs	r3, #1
 80065d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065d2:	4b83      	ldr	r3, [pc, #524]	@ (80067e0 <HAL_RCC_OscConfig+0x4d4>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d118      	bne.n	8006610 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80065de:	4b80      	ldr	r3, [pc, #512]	@ (80067e0 <HAL_RCC_OscConfig+0x4d4>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a7f      	ldr	r2, [pc, #508]	@ (80067e0 <HAL_RCC_OscConfig+0x4d4>)
 80065e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065ea:	f7fb ffa7 	bl	800253c <HAL_GetTick>
 80065ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065f0:	e008      	b.n	8006604 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065f2:	f7fb ffa3 	bl	800253c <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b64      	cmp	r3, #100	@ 0x64
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e12a      	b.n	800685a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006604:	4b76      	ldr	r3, [pc, #472]	@ (80067e0 <HAL_RCC_OscConfig+0x4d4>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0f0      	beq.n	80065f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d106      	bne.n	8006626 <HAL_RCC_OscConfig+0x31a>
 8006618:	4b70      	ldr	r3, [pc, #448]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 800661a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800661c:	4a6f      	ldr	r2, [pc, #444]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 800661e:	f043 0301 	orr.w	r3, r3, #1
 8006622:	6713      	str	r3, [r2, #112]	@ 0x70
 8006624:	e02d      	b.n	8006682 <HAL_RCC_OscConfig+0x376>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10c      	bne.n	8006648 <HAL_RCC_OscConfig+0x33c>
 800662e:	4b6b      	ldr	r3, [pc, #428]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 8006630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006632:	4a6a      	ldr	r2, [pc, #424]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 8006634:	f023 0301 	bic.w	r3, r3, #1
 8006638:	6713      	str	r3, [r2, #112]	@ 0x70
 800663a:	4b68      	ldr	r3, [pc, #416]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 800663c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800663e:	4a67      	ldr	r2, [pc, #412]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 8006640:	f023 0304 	bic.w	r3, r3, #4
 8006644:	6713      	str	r3, [r2, #112]	@ 0x70
 8006646:	e01c      	b.n	8006682 <HAL_RCC_OscConfig+0x376>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	2b05      	cmp	r3, #5
 800664e:	d10c      	bne.n	800666a <HAL_RCC_OscConfig+0x35e>
 8006650:	4b62      	ldr	r3, [pc, #392]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 8006652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006654:	4a61      	ldr	r2, [pc, #388]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 8006656:	f043 0304 	orr.w	r3, r3, #4
 800665a:	6713      	str	r3, [r2, #112]	@ 0x70
 800665c:	4b5f      	ldr	r3, [pc, #380]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 800665e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006660:	4a5e      	ldr	r2, [pc, #376]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 8006662:	f043 0301 	orr.w	r3, r3, #1
 8006666:	6713      	str	r3, [r2, #112]	@ 0x70
 8006668:	e00b      	b.n	8006682 <HAL_RCC_OscConfig+0x376>
 800666a:	4b5c      	ldr	r3, [pc, #368]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 800666c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800666e:	4a5b      	ldr	r2, [pc, #364]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 8006670:	f023 0301 	bic.w	r3, r3, #1
 8006674:	6713      	str	r3, [r2, #112]	@ 0x70
 8006676:	4b59      	ldr	r3, [pc, #356]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 8006678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800667a:	4a58      	ldr	r2, [pc, #352]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 800667c:	f023 0304 	bic.w	r3, r3, #4
 8006680:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d015      	beq.n	80066b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800668a:	f7fb ff57 	bl	800253c <HAL_GetTick>
 800668e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006690:	e00a      	b.n	80066a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006692:	f7fb ff53 	bl	800253c <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e0d8      	b.n	800685a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a8:	4b4c      	ldr	r3, [pc, #304]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 80066aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0ee      	beq.n	8006692 <HAL_RCC_OscConfig+0x386>
 80066b4:	e014      	b.n	80066e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b6:	f7fb ff41 	bl	800253c <HAL_GetTick>
 80066ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066bc:	e00a      	b.n	80066d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066be:	f7fb ff3d 	bl	800253c <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e0c2      	b.n	800685a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066d4:	4b41      	ldr	r3, [pc, #260]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 80066d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1ee      	bne.n	80066be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066e0:	7dfb      	ldrb	r3, [r7, #23]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d105      	bne.n	80066f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066e6:	4b3d      	ldr	r3, [pc, #244]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 80066e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ea:	4a3c      	ldr	r2, [pc, #240]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 80066ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066f0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 80ae 	beq.w	8006858 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066fc:	4b37      	ldr	r3, [pc, #220]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 030c 	and.w	r3, r3, #12
 8006704:	2b08      	cmp	r3, #8
 8006706:	d06d      	beq.n	80067e4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d14b      	bne.n	80067a8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006710:	4b32      	ldr	r3, [pc, #200]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a31      	ldr	r2, [pc, #196]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 8006716:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800671a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671c:	f7fb ff0e 	bl	800253c <HAL_GetTick>
 8006720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006724:	f7fb ff0a 	bl	800253c <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e091      	b.n	800685a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006736:	4b29      	ldr	r3, [pc, #164]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1f0      	bne.n	8006724 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	69da      	ldr	r2, [r3, #28]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	431a      	orrs	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006750:	019b      	lsls	r3, r3, #6
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006758:	085b      	lsrs	r3, r3, #1
 800675a:	3b01      	subs	r3, #1
 800675c:	041b      	lsls	r3, r3, #16
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006764:	061b      	lsls	r3, r3, #24
 8006766:	431a      	orrs	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800676c:	071b      	lsls	r3, r3, #28
 800676e:	491b      	ldr	r1, [pc, #108]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 8006770:	4313      	orrs	r3, r2
 8006772:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006774:	4b19      	ldr	r3, [pc, #100]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a18      	ldr	r2, [pc, #96]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 800677a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800677e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006780:	f7fb fedc 	bl	800253c <HAL_GetTick>
 8006784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006786:	e008      	b.n	800679a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006788:	f7fb fed8 	bl	800253c <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b02      	cmp	r3, #2
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e05f      	b.n	800685a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800679a:	4b10      	ldr	r3, [pc, #64]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0f0      	beq.n	8006788 <HAL_RCC_OscConfig+0x47c>
 80067a6:	e057      	b.n	8006858 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067a8:	4b0c      	ldr	r3, [pc, #48]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a0b      	ldr	r2, [pc, #44]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 80067ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b4:	f7fb fec2 	bl	800253c <HAL_GetTick>
 80067b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ba:	e008      	b.n	80067ce <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067bc:	f7fb febe 	bl	800253c <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e045      	b.n	800685a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ce:	4b03      	ldr	r3, [pc, #12]	@ (80067dc <HAL_RCC_OscConfig+0x4d0>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1f0      	bne.n	80067bc <HAL_RCC_OscConfig+0x4b0>
 80067da:	e03d      	b.n	8006858 <HAL_RCC_OscConfig+0x54c>
 80067dc:	40023800 	.word	0x40023800
 80067e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80067e4:	4b1f      	ldr	r3, [pc, #124]	@ (8006864 <HAL_RCC_OscConfig+0x558>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d030      	beq.n	8006854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d129      	bne.n	8006854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800680a:	429a      	cmp	r2, r3
 800680c:	d122      	bne.n	8006854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006814:	4013      	ands	r3, r2
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800681a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800681c:	4293      	cmp	r3, r2
 800681e:	d119      	bne.n	8006854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682a:	085b      	lsrs	r3, r3, #1
 800682c:	3b01      	subs	r3, #1
 800682e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006830:	429a      	cmp	r2, r3
 8006832:	d10f      	bne.n	8006854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006840:	429a      	cmp	r2, r3
 8006842:	d107      	bne.n	8006854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006850:	429a      	cmp	r2, r3
 8006852:	d001      	beq.n	8006858 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e000      	b.n	800685a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	40023800 	.word	0x40023800

08006868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006872:	2300      	movs	r3, #0
 8006874:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e0d0      	b.n	8006a22 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006880:	4b6a      	ldr	r3, [pc, #424]	@ (8006a2c <HAL_RCC_ClockConfig+0x1c4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 030f 	and.w	r3, r3, #15
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	429a      	cmp	r2, r3
 800688c:	d910      	bls.n	80068b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800688e:	4b67      	ldr	r3, [pc, #412]	@ (8006a2c <HAL_RCC_ClockConfig+0x1c4>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f023 020f 	bic.w	r2, r3, #15
 8006896:	4965      	ldr	r1, [pc, #404]	@ (8006a2c <HAL_RCC_ClockConfig+0x1c4>)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	4313      	orrs	r3, r2
 800689c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800689e:	4b63      	ldr	r3, [pc, #396]	@ (8006a2c <HAL_RCC_ClockConfig+0x1c4>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 030f 	and.w	r3, r3, #15
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d001      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e0b8      	b.n	8006a22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d020      	beq.n	80068fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d005      	beq.n	80068d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068c8:	4b59      	ldr	r3, [pc, #356]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c8>)
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	4a58      	ldr	r2, [pc, #352]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c8>)
 80068ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80068d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0308 	and.w	r3, r3, #8
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d005      	beq.n	80068ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068e0:	4b53      	ldr	r3, [pc, #332]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c8>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	4a52      	ldr	r2, [pc, #328]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c8>)
 80068e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80068ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068ec:	4b50      	ldr	r3, [pc, #320]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c8>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	494d      	ldr	r1, [pc, #308]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c8>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d040      	beq.n	800698c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d107      	bne.n	8006922 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006912:	4b47      	ldr	r3, [pc, #284]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c8>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d115      	bne.n	800694a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e07f      	b.n	8006a22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2b02      	cmp	r3, #2
 8006928:	d107      	bne.n	800693a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800692a:	4b41      	ldr	r3, [pc, #260]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c8>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d109      	bne.n	800694a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e073      	b.n	8006a22 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800693a:	4b3d      	ldr	r3, [pc, #244]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e06b      	b.n	8006a22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800694a:	4b39      	ldr	r3, [pc, #228]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c8>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f023 0203 	bic.w	r2, r3, #3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	4936      	ldr	r1, [pc, #216]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c8>)
 8006958:	4313      	orrs	r3, r2
 800695a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800695c:	f7fb fdee 	bl	800253c <HAL_GetTick>
 8006960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006962:	e00a      	b.n	800697a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006964:	f7fb fdea 	bl	800253c <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006972:	4293      	cmp	r3, r2
 8006974:	d901      	bls.n	800697a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e053      	b.n	8006a22 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800697a:	4b2d      	ldr	r3, [pc, #180]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c8>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f003 020c 	and.w	r2, r3, #12
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	429a      	cmp	r2, r3
 800698a:	d1eb      	bne.n	8006964 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800698c:	4b27      	ldr	r3, [pc, #156]	@ (8006a2c <HAL_RCC_ClockConfig+0x1c4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 030f 	and.w	r3, r3, #15
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d210      	bcs.n	80069bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800699a:	4b24      	ldr	r3, [pc, #144]	@ (8006a2c <HAL_RCC_ClockConfig+0x1c4>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f023 020f 	bic.w	r2, r3, #15
 80069a2:	4922      	ldr	r1, [pc, #136]	@ (8006a2c <HAL_RCC_ClockConfig+0x1c4>)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069aa:	4b20      	ldr	r3, [pc, #128]	@ (8006a2c <HAL_RCC_ClockConfig+0x1c4>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d001      	beq.n	80069bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e032      	b.n	8006a22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d008      	beq.n	80069da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069c8:	4b19      	ldr	r3, [pc, #100]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c8>)
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	4916      	ldr	r1, [pc, #88]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c8>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0308 	and.w	r3, r3, #8
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d009      	beq.n	80069fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80069e6:	4b12      	ldr	r3, [pc, #72]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c8>)
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	490e      	ldr	r1, [pc, #56]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c8>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069fa:	f000 f821 	bl	8006a40 <HAL_RCC_GetSysClockFreq>
 80069fe:	4602      	mov	r2, r0
 8006a00:	4b0b      	ldr	r3, [pc, #44]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c8>)
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	091b      	lsrs	r3, r3, #4
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	490a      	ldr	r1, [pc, #40]	@ (8006a34 <HAL_RCC_ClockConfig+0x1cc>)
 8006a0c:	5ccb      	ldrb	r3, [r1, r3]
 8006a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a12:	4a09      	ldr	r2, [pc, #36]	@ (8006a38 <HAL_RCC_ClockConfig+0x1d0>)
 8006a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a16:	4b09      	ldr	r3, [pc, #36]	@ (8006a3c <HAL_RCC_ClockConfig+0x1d4>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fb faae 	bl	8001f7c <HAL_InitTick>

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	40023c00 	.word	0x40023c00
 8006a30:	40023800 	.word	0x40023800
 8006a34:	08022a38 	.word	0x08022a38
 8006a38:	20000008 	.word	0x20000008
 8006a3c:	2000000c 	.word	0x2000000c

08006a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a44:	b094      	sub	sp, #80	@ 0x50
 8006a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a50:	2300      	movs	r3, #0
 8006a52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8006a54:	2300      	movs	r3, #0
 8006a56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a58:	4b79      	ldr	r3, [pc, #484]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f003 030c 	and.w	r3, r3, #12
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d00d      	beq.n	8006a80 <HAL_RCC_GetSysClockFreq+0x40>
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	f200 80e1 	bhi.w	8006c2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d002      	beq.n	8006a74 <HAL_RCC_GetSysClockFreq+0x34>
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	d003      	beq.n	8006a7a <HAL_RCC_GetSysClockFreq+0x3a>
 8006a72:	e0db      	b.n	8006c2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a74:	4b73      	ldr	r3, [pc, #460]	@ (8006c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a78:	e0db      	b.n	8006c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a7a:	4b73      	ldr	r3, [pc, #460]	@ (8006c48 <HAL_RCC_GetSysClockFreq+0x208>)
 8006a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a7e:	e0d8      	b.n	8006c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a80:	4b6f      	ldr	r3, [pc, #444]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a88:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006a8a:	4b6d      	ldr	r3, [pc, #436]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d063      	beq.n	8006b5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a96:	4b6a      	ldr	r3, [pc, #424]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	099b      	lsrs	r3, r3, #6
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006aa0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006aaa:	2300      	movs	r3, #0
 8006aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006ab2:	4622      	mov	r2, r4
 8006ab4:	462b      	mov	r3, r5
 8006ab6:	f04f 0000 	mov.w	r0, #0
 8006aba:	f04f 0100 	mov.w	r1, #0
 8006abe:	0159      	lsls	r1, r3, #5
 8006ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ac4:	0150      	lsls	r0, r2, #5
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4621      	mov	r1, r4
 8006acc:	1a51      	subs	r1, r2, r1
 8006ace:	6139      	str	r1, [r7, #16]
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	f04f 0200 	mov.w	r2, #0
 8006adc:	f04f 0300 	mov.w	r3, #0
 8006ae0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ae4:	4659      	mov	r1, fp
 8006ae6:	018b      	lsls	r3, r1, #6
 8006ae8:	4651      	mov	r1, sl
 8006aea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006aee:	4651      	mov	r1, sl
 8006af0:	018a      	lsls	r2, r1, #6
 8006af2:	4651      	mov	r1, sl
 8006af4:	ebb2 0801 	subs.w	r8, r2, r1
 8006af8:	4659      	mov	r1, fp
 8006afa:	eb63 0901 	sbc.w	r9, r3, r1
 8006afe:	f04f 0200 	mov.w	r2, #0
 8006b02:	f04f 0300 	mov.w	r3, #0
 8006b06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b12:	4690      	mov	r8, r2
 8006b14:	4699      	mov	r9, r3
 8006b16:	4623      	mov	r3, r4
 8006b18:	eb18 0303 	adds.w	r3, r8, r3
 8006b1c:	60bb      	str	r3, [r7, #8]
 8006b1e:	462b      	mov	r3, r5
 8006b20:	eb49 0303 	adc.w	r3, r9, r3
 8006b24:	60fb      	str	r3, [r7, #12]
 8006b26:	f04f 0200 	mov.w	r2, #0
 8006b2a:	f04f 0300 	mov.w	r3, #0
 8006b2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b32:	4629      	mov	r1, r5
 8006b34:	024b      	lsls	r3, r1, #9
 8006b36:	4621      	mov	r1, r4
 8006b38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	024a      	lsls	r2, r1, #9
 8006b40:	4610      	mov	r0, r2
 8006b42:	4619      	mov	r1, r3
 8006b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b46:	2200      	movs	r2, #0
 8006b48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b50:	f7f9 fc2e 	bl	80003b0 <__aeabi_uldivmod>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4613      	mov	r3, r2
 8006b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b5c:	e058      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b5e:	4b38      	ldr	r3, [pc, #224]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	099b      	lsrs	r3, r3, #6
 8006b64:	2200      	movs	r2, #0
 8006b66:	4618      	mov	r0, r3
 8006b68:	4611      	mov	r1, r2
 8006b6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b6e:	623b      	str	r3, [r7, #32]
 8006b70:	2300      	movs	r3, #0
 8006b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b78:	4642      	mov	r2, r8
 8006b7a:	464b      	mov	r3, r9
 8006b7c:	f04f 0000 	mov.w	r0, #0
 8006b80:	f04f 0100 	mov.w	r1, #0
 8006b84:	0159      	lsls	r1, r3, #5
 8006b86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b8a:	0150      	lsls	r0, r2, #5
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4641      	mov	r1, r8
 8006b92:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b96:	4649      	mov	r1, r9
 8006b98:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b9c:	f04f 0200 	mov.w	r2, #0
 8006ba0:	f04f 0300 	mov.w	r3, #0
 8006ba4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ba8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006bac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006bb0:	ebb2 040a 	subs.w	r4, r2, sl
 8006bb4:	eb63 050b 	sbc.w	r5, r3, fp
 8006bb8:	f04f 0200 	mov.w	r2, #0
 8006bbc:	f04f 0300 	mov.w	r3, #0
 8006bc0:	00eb      	lsls	r3, r5, #3
 8006bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bc6:	00e2      	lsls	r2, r4, #3
 8006bc8:	4614      	mov	r4, r2
 8006bca:	461d      	mov	r5, r3
 8006bcc:	4643      	mov	r3, r8
 8006bce:	18e3      	adds	r3, r4, r3
 8006bd0:	603b      	str	r3, [r7, #0]
 8006bd2:	464b      	mov	r3, r9
 8006bd4:	eb45 0303 	adc.w	r3, r5, r3
 8006bd8:	607b      	str	r3, [r7, #4]
 8006bda:	f04f 0200 	mov.w	r2, #0
 8006bde:	f04f 0300 	mov.w	r3, #0
 8006be2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006be6:	4629      	mov	r1, r5
 8006be8:	028b      	lsls	r3, r1, #10
 8006bea:	4621      	mov	r1, r4
 8006bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bf0:	4621      	mov	r1, r4
 8006bf2:	028a      	lsls	r2, r1, #10
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	61bb      	str	r3, [r7, #24]
 8006bfe:	61fa      	str	r2, [r7, #28]
 8006c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c04:	f7f9 fbd4 	bl	80003b0 <__aeabi_uldivmod>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006c10:	4b0b      	ldr	r3, [pc, #44]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	0c1b      	lsrs	r3, r3, #16
 8006c16:	f003 0303 	and.w	r3, r3, #3
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006c20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c2a:	e002      	b.n	8006c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c2c:	4b05      	ldr	r3, [pc, #20]	@ (8006c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3750      	adds	r7, #80	@ 0x50
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c3e:	bf00      	nop
 8006c40:	40023800 	.word	0x40023800
 8006c44:	00f42400 	.word	0x00f42400
 8006c48:	007a1200 	.word	0x007a1200

08006c4c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c50:	4b03      	ldr	r3, [pc, #12]	@ (8006c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c52:	681b      	ldr	r3, [r3, #0]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	20000008 	.word	0x20000008

08006c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c68:	f7ff fff0 	bl	8006c4c <HAL_RCC_GetHCLKFreq>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	4b05      	ldr	r3, [pc, #20]	@ (8006c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	0a9b      	lsrs	r3, r3, #10
 8006c74:	f003 0307 	and.w	r3, r3, #7
 8006c78:	4903      	ldr	r1, [pc, #12]	@ (8006c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c7a:	5ccb      	ldrb	r3, [r1, r3]
 8006c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	40023800 	.word	0x40023800
 8006c88:	08022a48 	.word	0x08022a48

08006c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c90:	f7ff ffdc 	bl	8006c4c <HAL_RCC_GetHCLKFreq>
 8006c94:	4602      	mov	r2, r0
 8006c96:	4b05      	ldr	r3, [pc, #20]	@ (8006cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	0b5b      	lsrs	r3, r3, #13
 8006c9c:	f003 0307 	and.w	r3, r3, #7
 8006ca0:	4903      	ldr	r1, [pc, #12]	@ (8006cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ca2:	5ccb      	ldrb	r3, [r1, r3]
 8006ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	40023800 	.word	0x40023800
 8006cb0:	08022a48 	.word	0x08022a48

08006cb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	220f      	movs	r2, #15
 8006cc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006cc4:	4b12      	ldr	r3, [pc, #72]	@ (8006d10 <HAL_RCC_GetClockConfig+0x5c>)
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f003 0203 	and.w	r2, r3, #3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8006d10 <HAL_RCC_GetClockConfig+0x5c>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8006d10 <HAL_RCC_GetClockConfig+0x5c>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006ce8:	4b09      	ldr	r3, [pc, #36]	@ (8006d10 <HAL_RCC_GetClockConfig+0x5c>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	08db      	lsrs	r3, r3, #3
 8006cee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006cf6:	4b07      	ldr	r3, [pc, #28]	@ (8006d14 <HAL_RCC_GetClockConfig+0x60>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 020f 	and.w	r2, r3, #15
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	601a      	str	r2, [r3, #0]
}
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	40023800 	.word	0x40023800
 8006d14:	40023c00 	.word	0x40023c00

08006d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b088      	sub	sp, #32
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006d24:	2300      	movs	r3, #0
 8006d26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006d30:	2300      	movs	r3, #0
 8006d32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0301 	and.w	r3, r3, #1
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d012      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006d40:	4b69      	ldr	r3, [pc, #420]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	4a68      	ldr	r2, [pc, #416]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d46:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006d4a:	6093      	str	r3, [r2, #8]
 8006d4c:	4b66      	ldr	r3, [pc, #408]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d54:	4964      	ldr	r1, [pc, #400]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006d62:	2301      	movs	r3, #1
 8006d64:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d017      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d72:	4b5d      	ldr	r3, [pc, #372]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d78:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d80:	4959      	ldr	r1, [pc, #356]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d90:	d101      	bne.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006d92:	2301      	movs	r3, #1
 8006d94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d017      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006dae:	4b4e      	ldr	r3, [pc, #312]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006db4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dbc:	494a      	ldr	r1, [pc, #296]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dcc:	d101      	bne.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006dea:	2301      	movs	r3, #1
 8006dec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 808b 	beq.w	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e00:	4a39      	ldr	r2, [pc, #228]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e06:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e08:	4b37      	ldr	r3, [pc, #220]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e10:	60bb      	str	r3, [r7, #8]
 8006e12:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e14:	4b35      	ldr	r3, [pc, #212]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a34      	ldr	r2, [pc, #208]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e20:	f7fb fb8c 	bl	800253c <HAL_GetTick>
 8006e24:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006e26:	e008      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e28:	f7fb fb88 	bl	800253c <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b64      	cmp	r3, #100	@ 0x64
 8006e34:	d901      	bls.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e38f      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0f0      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e46:	4b28      	ldr	r3, [pc, #160]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e4e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d035      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d02e      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e64:	4b20      	ldr	r3, [pc, #128]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e6c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e72:	4a1d      	ldr	r2, [pc, #116]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e78:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e84:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006e86:	4a18      	ldr	r2, [pc, #96]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e8c:	4b16      	ldr	r3, [pc, #88]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d114      	bne.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e98:	f7fb fb50 	bl	800253c <HAL_GetTick>
 8006e9c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e9e:	e00a      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ea0:	f7fb fb4c 	bl	800253c <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e351      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0ee      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ece:	d111      	bne.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006ed0:	4b05      	ldr	r3, [pc, #20]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006edc:	4b04      	ldr	r3, [pc, #16]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006ede:	400b      	ands	r3, r1
 8006ee0:	4901      	ldr	r1, [pc, #4]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	608b      	str	r3, [r1, #8]
 8006ee6:	e00b      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006ee8:	40023800 	.word	0x40023800
 8006eec:	40007000 	.word	0x40007000
 8006ef0:	0ffffcff 	.word	0x0ffffcff
 8006ef4:	4bac      	ldr	r3, [pc, #688]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	4aab      	ldr	r2, [pc, #684]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006efa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006efe:	6093      	str	r3, [r2, #8]
 8006f00:	4ba9      	ldr	r3, [pc, #676]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f0c:	49a6      	ldr	r1, [pc, #664]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0310 	and.w	r3, r3, #16
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d010      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f1e:	4ba2      	ldr	r3, [pc, #648]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f24:	4aa0      	ldr	r2, [pc, #640]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006f2e:	4b9e      	ldr	r3, [pc, #632]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f30:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f38:	499b      	ldr	r1, [pc, #620]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f4c:	4b96      	ldr	r3, [pc, #600]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f52:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f5a:	4993      	ldr	r1, [pc, #588]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f6e:	4b8e      	ldr	r3, [pc, #568]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f7c:	498a      	ldr	r1, [pc, #552]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00a      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f90:	4b85      	ldr	r3, [pc, #532]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f9e:	4982      	ldr	r1, [pc, #520]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006fb2:	4b7d      	ldr	r3, [pc, #500]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc0:	4979      	ldr	r1, [pc, #484]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00a      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fd4:	4b74      	ldr	r3, [pc, #464]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fda:	f023 0203 	bic.w	r2, r3, #3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe2:	4971      	ldr	r1, [pc, #452]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00a      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ff6:	4b6c      	ldr	r3, [pc, #432]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ffc:	f023 020c 	bic.w	r2, r3, #12
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007004:	4968      	ldr	r1, [pc, #416]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007006:	4313      	orrs	r3, r2
 8007008:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00a      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007018:	4b63      	ldr	r3, [pc, #396]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800701a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800701e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007026:	4960      	ldr	r1, [pc, #384]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007028:	4313      	orrs	r3, r2
 800702a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00a      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800703a:	4b5b      	ldr	r3, [pc, #364]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800703c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007040:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007048:	4957      	ldr	r1, [pc, #348]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800704a:	4313      	orrs	r3, r2
 800704c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00a      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800705c:	4b52      	ldr	r3, [pc, #328]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800705e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007062:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800706a:	494f      	ldr	r1, [pc, #316]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800706c:	4313      	orrs	r3, r2
 800706e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800707e:	4b4a      	ldr	r3, [pc, #296]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007084:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800708c:	4946      	ldr	r1, [pc, #280]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800708e:	4313      	orrs	r3, r2
 8007090:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00a      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80070a0:	4b41      	ldr	r3, [pc, #260]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070a6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ae:	493e      	ldr	r1, [pc, #248]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00a      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80070c2:	4b39      	ldr	r3, [pc, #228]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070d0:	4935      	ldr	r1, [pc, #212]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00a      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80070e4:	4b30      	ldr	r3, [pc, #192]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ea:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070f2:	492d      	ldr	r1, [pc, #180]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d011      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007106:	4b28      	ldr	r3, [pc, #160]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800710c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007114:	4924      	ldr	r1, [pc, #144]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007116:	4313      	orrs	r3, r2
 8007118:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007120:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007124:	d101      	bne.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007126:	2301      	movs	r3, #1
 8007128:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007136:	2301      	movs	r3, #1
 8007138:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00a      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007146:	4b18      	ldr	r3, [pc, #96]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800714c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007154:	4914      	ldr	r1, [pc, #80]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007156:	4313      	orrs	r3, r2
 8007158:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00b      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007168:	4b0f      	ldr	r3, [pc, #60]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800716a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800716e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007178:	490b      	ldr	r1, [pc, #44]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800717a:	4313      	orrs	r3, r2
 800717c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00f      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800718c:	4b06      	ldr	r3, [pc, #24]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800718e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007192:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800719c:	4902      	ldr	r1, [pc, #8]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80071a4:	e002      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x494>
 80071a6:	bf00      	nop
 80071a8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00b      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80071b8:	4b8a      	ldr	r3, [pc, #552]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c8:	4986      	ldr	r1, [pc, #536]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00b      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80071dc:	4b81      	ldr	r3, [pc, #516]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071e2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071ec:	497d      	ldr	r1, [pc, #500]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d006      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 80d6 	beq.w	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007208:	4b76      	ldr	r3, [pc, #472]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a75      	ldr	r2, [pc, #468]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800720e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007212:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007214:	f7fb f992 	bl	800253c <HAL_GetTick>
 8007218:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800721a:	e008      	b.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800721c:	f7fb f98e 	bl	800253c <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b64      	cmp	r3, #100	@ 0x64
 8007228:	d901      	bls.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e195      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800722e:	4b6d      	ldr	r3, [pc, #436]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1f0      	bne.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d021      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800724a:	2b00      	cmp	r3, #0
 800724c:	d11d      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800724e:	4b65      	ldr	r3, [pc, #404]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007250:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007254:	0c1b      	lsrs	r3, r3, #16
 8007256:	f003 0303 	and.w	r3, r3, #3
 800725a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800725c:	4b61      	ldr	r3, [pc, #388]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800725e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007262:	0e1b      	lsrs	r3, r3, #24
 8007264:	f003 030f 	and.w	r3, r3, #15
 8007268:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	019a      	lsls	r2, r3, #6
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	041b      	lsls	r3, r3, #16
 8007274:	431a      	orrs	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	061b      	lsls	r3, r3, #24
 800727a:	431a      	orrs	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	071b      	lsls	r3, r3, #28
 8007282:	4958      	ldr	r1, [pc, #352]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007284:	4313      	orrs	r3, r2
 8007286:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d004      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800729a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800729e:	d00a      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d02e      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072b4:	d129      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80072b6:	4b4b      	ldr	r3, [pc, #300]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80072b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072bc:	0c1b      	lsrs	r3, r3, #16
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80072c4:	4b47      	ldr	r3, [pc, #284]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80072c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072ca:	0f1b      	lsrs	r3, r3, #28
 80072cc:	f003 0307 	and.w	r3, r3, #7
 80072d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	019a      	lsls	r2, r3, #6
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	041b      	lsls	r3, r3, #16
 80072dc:	431a      	orrs	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	061b      	lsls	r3, r3, #24
 80072e4:	431a      	orrs	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	071b      	lsls	r3, r3, #28
 80072ea:	493e      	ldr	r1, [pc, #248]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80072ec:	4313      	orrs	r3, r2
 80072ee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80072f2:	4b3c      	ldr	r3, [pc, #240]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80072f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072f8:	f023 021f 	bic.w	r2, r3, #31
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007300:	3b01      	subs	r3, #1
 8007302:	4938      	ldr	r1, [pc, #224]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007304:	4313      	orrs	r3, r2
 8007306:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d01d      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007316:	4b33      	ldr	r3, [pc, #204]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007318:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800731c:	0e1b      	lsrs	r3, r3, #24
 800731e:	f003 030f 	and.w	r3, r3, #15
 8007322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007324:	4b2f      	ldr	r3, [pc, #188]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800732a:	0f1b      	lsrs	r3, r3, #28
 800732c:	f003 0307 	and.w	r3, r3, #7
 8007330:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	019a      	lsls	r2, r3, #6
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	041b      	lsls	r3, r3, #16
 800733e:	431a      	orrs	r2, r3
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	061b      	lsls	r3, r3, #24
 8007344:	431a      	orrs	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	071b      	lsls	r3, r3, #28
 800734a:	4926      	ldr	r1, [pc, #152]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800734c:	4313      	orrs	r3, r2
 800734e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d011      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	019a      	lsls	r2, r3, #6
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	041b      	lsls	r3, r3, #16
 800736a:	431a      	orrs	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	061b      	lsls	r3, r3, #24
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	071b      	lsls	r3, r3, #28
 800737a:	491a      	ldr	r1, [pc, #104]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800737c:	4313      	orrs	r3, r2
 800737e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007382:	4b18      	ldr	r3, [pc, #96]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a17      	ldr	r2, [pc, #92]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007388:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800738c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800738e:	f7fb f8d5 	bl	800253c <HAL_GetTick>
 8007392:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007394:	e008      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007396:	f7fb f8d1 	bl	800253c <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b64      	cmp	r3, #100	@ 0x64
 80073a2:	d901      	bls.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e0d8      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073a8:	4b0e      	ldr	r3, [pc, #56]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d0f0      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	f040 80ce 	bne.w	8007558 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80073bc:	4b09      	ldr	r3, [pc, #36]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a08      	ldr	r2, [pc, #32]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073c8:	f7fb f8b8 	bl	800253c <HAL_GetTick>
 80073cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80073ce:	e00b      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80073d0:	f7fb f8b4 	bl	800253c <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b64      	cmp	r3, #100	@ 0x64
 80073dc:	d904      	bls.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e0bb      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80073e2:	bf00      	nop
 80073e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80073e8:	4b5e      	ldr	r3, [pc, #376]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073f4:	d0ec      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007406:	2b00      	cmp	r3, #0
 8007408:	d009      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007412:	2b00      	cmp	r3, #0
 8007414:	d02e      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741a:	2b00      	cmp	r3, #0
 800741c:	d12a      	bne.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800741e:	4b51      	ldr	r3, [pc, #324]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007424:	0c1b      	lsrs	r3, r3, #16
 8007426:	f003 0303 	and.w	r3, r3, #3
 800742a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800742c:	4b4d      	ldr	r3, [pc, #308]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800742e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007432:	0f1b      	lsrs	r3, r3, #28
 8007434:	f003 0307 	and.w	r3, r3, #7
 8007438:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	019a      	lsls	r2, r3, #6
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	041b      	lsls	r3, r3, #16
 8007444:	431a      	orrs	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	061b      	lsls	r3, r3, #24
 800744c:	431a      	orrs	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	071b      	lsls	r3, r3, #28
 8007452:	4944      	ldr	r1, [pc, #272]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007454:	4313      	orrs	r3, r2
 8007456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800745a:	4b42      	ldr	r3, [pc, #264]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800745c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007460:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007468:	3b01      	subs	r3, #1
 800746a:	021b      	lsls	r3, r3, #8
 800746c:	493d      	ldr	r1, [pc, #244]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800746e:	4313      	orrs	r3, r2
 8007470:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d022      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007484:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007488:	d11d      	bne.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800748a:	4b36      	ldr	r3, [pc, #216]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800748c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007490:	0e1b      	lsrs	r3, r3, #24
 8007492:	f003 030f 	and.w	r3, r3, #15
 8007496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007498:	4b32      	ldr	r3, [pc, #200]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800749a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800749e:	0f1b      	lsrs	r3, r3, #28
 80074a0:	f003 0307 	and.w	r3, r3, #7
 80074a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	019a      	lsls	r2, r3, #6
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a1b      	ldr	r3, [r3, #32]
 80074b0:	041b      	lsls	r3, r3, #16
 80074b2:	431a      	orrs	r2, r3
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	061b      	lsls	r3, r3, #24
 80074b8:	431a      	orrs	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	071b      	lsls	r3, r3, #28
 80074be:	4929      	ldr	r1, [pc, #164]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0308 	and.w	r3, r3, #8
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d028      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80074d2:	4b24      	ldr	r3, [pc, #144]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80074d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d8:	0e1b      	lsrs	r3, r3, #24
 80074da:	f003 030f 	and.w	r3, r3, #15
 80074de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80074e0:	4b20      	ldr	r3, [pc, #128]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80074e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074e6:	0c1b      	lsrs	r3, r3, #16
 80074e8:	f003 0303 	and.w	r3, r3, #3
 80074ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	019a      	lsls	r2, r3, #6
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	041b      	lsls	r3, r3, #16
 80074f8:	431a      	orrs	r2, r3
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	061b      	lsls	r3, r3, #24
 80074fe:	431a      	orrs	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	071b      	lsls	r3, r3, #28
 8007506:	4917      	ldr	r1, [pc, #92]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007508:	4313      	orrs	r3, r2
 800750a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800750e:	4b15      	ldr	r3, [pc, #84]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007510:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007514:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751c:	4911      	ldr	r1, [pc, #68]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800751e:	4313      	orrs	r3, r2
 8007520:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007524:	4b0f      	ldr	r3, [pc, #60]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a0e      	ldr	r2, [pc, #56]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800752a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800752e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007530:	f7fb f804 	bl	800253c <HAL_GetTick>
 8007534:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007536:	e008      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007538:	f7fb f800 	bl	800253c <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b64      	cmp	r3, #100	@ 0x64
 8007544:	d901      	bls.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e007      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800754a:	4b06      	ldr	r3, [pc, #24]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007556:	d1ef      	bne.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3720      	adds	r7, #32
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	40023800 	.word	0x40023800

08007568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e049      	b.n	800760e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d106      	bne.n	8007594 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f841 	bl	8007616 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2202      	movs	r2, #2
 8007598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3304      	adds	r3, #4
 80075a4:	4619      	mov	r1, r3
 80075a6:	4610      	mov	r0, r2
 80075a8:	f000 f9e8 	bl	800797c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
	...

0800762c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b01      	cmp	r3, #1
 800763e:	d001      	beq.n	8007644 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e054      	b.n	80076ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 0201 	orr.w	r2, r2, #1
 800765a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a26      	ldr	r2, [pc, #152]	@ (80076fc <HAL_TIM_Base_Start_IT+0xd0>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d022      	beq.n	80076ac <HAL_TIM_Base_Start_IT+0x80>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800766e:	d01d      	beq.n	80076ac <HAL_TIM_Base_Start_IT+0x80>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a22      	ldr	r2, [pc, #136]	@ (8007700 <HAL_TIM_Base_Start_IT+0xd4>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d018      	beq.n	80076ac <HAL_TIM_Base_Start_IT+0x80>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a21      	ldr	r2, [pc, #132]	@ (8007704 <HAL_TIM_Base_Start_IT+0xd8>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d013      	beq.n	80076ac <HAL_TIM_Base_Start_IT+0x80>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a1f      	ldr	r2, [pc, #124]	@ (8007708 <HAL_TIM_Base_Start_IT+0xdc>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d00e      	beq.n	80076ac <HAL_TIM_Base_Start_IT+0x80>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a1e      	ldr	r2, [pc, #120]	@ (800770c <HAL_TIM_Base_Start_IT+0xe0>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d009      	beq.n	80076ac <HAL_TIM_Base_Start_IT+0x80>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a1c      	ldr	r2, [pc, #112]	@ (8007710 <HAL_TIM_Base_Start_IT+0xe4>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d004      	beq.n	80076ac <HAL_TIM_Base_Start_IT+0x80>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a1b      	ldr	r2, [pc, #108]	@ (8007714 <HAL_TIM_Base_Start_IT+0xe8>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d115      	bne.n	80076d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	689a      	ldr	r2, [r3, #8]
 80076b2:	4b19      	ldr	r3, [pc, #100]	@ (8007718 <HAL_TIM_Base_Start_IT+0xec>)
 80076b4:	4013      	ands	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2b06      	cmp	r3, #6
 80076bc:	d015      	beq.n	80076ea <HAL_TIM_Base_Start_IT+0xbe>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076c4:	d011      	beq.n	80076ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f042 0201 	orr.w	r2, r2, #1
 80076d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d6:	e008      	b.n	80076ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f042 0201 	orr.w	r2, r2, #1
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	e000      	b.n	80076ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	40010000 	.word	0x40010000
 8007700:	40000400 	.word	0x40000400
 8007704:	40000800 	.word	0x40000800
 8007708:	40000c00 	.word	0x40000c00
 800770c:	40010400 	.word	0x40010400
 8007710:	40014000 	.word	0x40014000
 8007714:	40001800 	.word	0x40001800
 8007718:	00010007 	.word	0x00010007

0800771c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d020      	beq.n	8007780 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b00      	cmp	r3, #0
 8007746:	d01b      	beq.n	8007780 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f06f 0202 	mvn.w	r2, #2
 8007750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f8e9 	bl	800793e <HAL_TIM_IC_CaptureCallback>
 800776c:	e005      	b.n	800777a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f8db 	bl	800792a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f8ec 	bl	8007952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f003 0304 	and.w	r3, r3, #4
 8007786:	2b00      	cmp	r3, #0
 8007788:	d020      	beq.n	80077cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f003 0304 	and.w	r3, r3, #4
 8007790:	2b00      	cmp	r3, #0
 8007792:	d01b      	beq.n	80077cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f06f 0204 	mvn.w	r2, #4
 800779c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2202      	movs	r2, #2
 80077a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d003      	beq.n	80077ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f8c3 	bl	800793e <HAL_TIM_IC_CaptureCallback>
 80077b8:	e005      	b.n	80077c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f8b5 	bl	800792a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f8c6 	bl	8007952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	f003 0308 	and.w	r3, r3, #8
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d020      	beq.n	8007818 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f003 0308 	and.w	r3, r3, #8
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d01b      	beq.n	8007818 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f06f 0208 	mvn.w	r2, #8
 80077e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2204      	movs	r2, #4
 80077ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	69db      	ldr	r3, [r3, #28]
 80077f6:	f003 0303 	and.w	r3, r3, #3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f89d 	bl	800793e <HAL_TIM_IC_CaptureCallback>
 8007804:	e005      	b.n	8007812 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f88f 	bl	800792a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f8a0 	bl	8007952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f003 0310 	and.w	r3, r3, #16
 800781e:	2b00      	cmp	r3, #0
 8007820:	d020      	beq.n	8007864 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f003 0310 	and.w	r3, r3, #16
 8007828:	2b00      	cmp	r3, #0
 800782a:	d01b      	beq.n	8007864 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f06f 0210 	mvn.w	r2, #16
 8007834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2208      	movs	r2, #8
 800783a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f877 	bl	800793e <HAL_TIM_IC_CaptureCallback>
 8007850:	e005      	b.n	800785e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f869 	bl	800792a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f87a 	bl	8007952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00c      	beq.n	8007888 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b00      	cmp	r3, #0
 8007876:	d007      	beq.n	8007888 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f06f 0201 	mvn.w	r2, #1
 8007880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7fa fa7e 	bl	8001d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800788e:	2b00      	cmp	r3, #0
 8007890:	d104      	bne.n	800789c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00c      	beq.n	80078b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d007      	beq.n	80078b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80078ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f919 	bl	8007ae8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00c      	beq.n	80078da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d007      	beq.n	80078da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80078d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f911 	bl	8007afc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00c      	beq.n	80078fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d007      	beq.n	80078fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80078f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f834 	bl	8007966 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	f003 0320 	and.w	r3, r3, #32
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00c      	beq.n	8007922 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f003 0320 	and.w	r3, r3, #32
 800790e:	2b00      	cmp	r3, #0
 8007910:	d007      	beq.n	8007922 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f06f 0220 	mvn.w	r2, #32
 800791a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f8d9 	bl	8007ad4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007922:	bf00      	nop
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800792a:	b480      	push	{r7}
 800792c:	b083      	sub	sp, #12
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007932:	bf00      	nop
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800793e:	b480      	push	{r7}
 8007940:	b083      	sub	sp, #12
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007966:	b480      	push	{r7}
 8007968:	b083      	sub	sp, #12
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800796e:	bf00      	nop
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
	...

0800797c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a46      	ldr	r2, [pc, #280]	@ (8007aa8 <TIM_Base_SetConfig+0x12c>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d013      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800799a:	d00f      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a43      	ldr	r2, [pc, #268]	@ (8007aac <TIM_Base_SetConfig+0x130>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d00b      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a42      	ldr	r2, [pc, #264]	@ (8007ab0 <TIM_Base_SetConfig+0x134>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d007      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a41      	ldr	r2, [pc, #260]	@ (8007ab4 <TIM_Base_SetConfig+0x138>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d003      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a40      	ldr	r2, [pc, #256]	@ (8007ab8 <TIM_Base_SetConfig+0x13c>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d108      	bne.n	80079ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a35      	ldr	r2, [pc, #212]	@ (8007aa8 <TIM_Base_SetConfig+0x12c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d02b      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079dc:	d027      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a32      	ldr	r2, [pc, #200]	@ (8007aac <TIM_Base_SetConfig+0x130>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d023      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a31      	ldr	r2, [pc, #196]	@ (8007ab0 <TIM_Base_SetConfig+0x134>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d01f      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a30      	ldr	r2, [pc, #192]	@ (8007ab4 <TIM_Base_SetConfig+0x138>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d01b      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a2f      	ldr	r2, [pc, #188]	@ (8007ab8 <TIM_Base_SetConfig+0x13c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d017      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a2e      	ldr	r2, [pc, #184]	@ (8007abc <TIM_Base_SetConfig+0x140>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d013      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a2d      	ldr	r2, [pc, #180]	@ (8007ac0 <TIM_Base_SetConfig+0x144>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d00f      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a2c      	ldr	r2, [pc, #176]	@ (8007ac4 <TIM_Base_SetConfig+0x148>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d00b      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a2b      	ldr	r2, [pc, #172]	@ (8007ac8 <TIM_Base_SetConfig+0x14c>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d007      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a2a      	ldr	r2, [pc, #168]	@ (8007acc <TIM_Base_SetConfig+0x150>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d003      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a29      	ldr	r2, [pc, #164]	@ (8007ad0 <TIM_Base_SetConfig+0x154>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d108      	bne.n	8007a40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	689a      	ldr	r2, [r3, #8]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a10      	ldr	r2, [pc, #64]	@ (8007aa8 <TIM_Base_SetConfig+0x12c>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d003      	beq.n	8007a74 <TIM_Base_SetConfig+0xf8>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a12      	ldr	r2, [pc, #72]	@ (8007ab8 <TIM_Base_SetConfig+0x13c>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d103      	bne.n	8007a7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	691a      	ldr	r2, [r3, #16]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d105      	bne.n	8007a9a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f023 0201 	bic.w	r2, r3, #1
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	611a      	str	r2, [r3, #16]
  }
}
 8007a9a:	bf00      	nop
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	40010000 	.word	0x40010000
 8007aac:	40000400 	.word	0x40000400
 8007ab0:	40000800 	.word	0x40000800
 8007ab4:	40000c00 	.word	0x40000c00
 8007ab8:	40010400 	.word	0x40010400
 8007abc:	40014000 	.word	0x40014000
 8007ac0:	40014400 	.word	0x40014400
 8007ac4:	40014800 	.word	0x40014800
 8007ac8:	40001800 	.word	0x40001800
 8007acc:	40001c00 	.word	0x40001c00
 8007ad0:	40002000 	.word	0x40002000

08007ad4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e040      	b.n	8007ba4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d106      	bne.n	8007b38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7fa f9c4 	bl	8001ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2224      	movs	r2, #36	@ 0x24
 8007b3c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 0201 	bic.w	r2, r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fb16 	bl	8008188 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f8af 	bl	8007cc0 <UART_SetConfig>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d101      	bne.n	8007b6c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e01b      	b.n	8007ba4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	689a      	ldr	r2, [r3, #8]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f042 0201 	orr.w	r2, r2, #1
 8007b9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fb95 	bl	80082cc <UART_CheckIdleState>
 8007ba2:	4603      	mov	r3, r0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b08a      	sub	sp, #40	@ 0x28
 8007bb0:	af02      	add	r7, sp, #8
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007bc0:	2b20      	cmp	r3, #32
 8007bc2:	d177      	bne.n	8007cb4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d002      	beq.n	8007bd0 <HAL_UART_Transmit+0x24>
 8007bca:	88fb      	ldrh	r3, [r7, #6]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e070      	b.n	8007cb6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2221      	movs	r2, #33	@ 0x21
 8007be0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007be2:	f7fa fcab 	bl	800253c <HAL_GetTick>
 8007be6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	88fa      	ldrh	r2, [r7, #6]
 8007bec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	88fa      	ldrh	r2, [r7, #6]
 8007bf4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c00:	d108      	bne.n	8007c14 <HAL_UART_Transmit+0x68>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d104      	bne.n	8007c14 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	61bb      	str	r3, [r7, #24]
 8007c12:	e003      	b.n	8007c1c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c1c:	e02f      	b.n	8007c7e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2200      	movs	r2, #0
 8007c26:	2180      	movs	r1, #128	@ 0x80
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 fbf7 	bl	800841c <UART_WaitOnFlagUntilTimeout>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d004      	beq.n	8007c3e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2220      	movs	r2, #32
 8007c38:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e03b      	b.n	8007cb6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10b      	bne.n	8007c5c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c52:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	3302      	adds	r3, #2
 8007c58:	61bb      	str	r3, [r7, #24]
 8007c5a:	e007      	b.n	8007c6c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	781a      	ldrb	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	3b01      	subs	r3, #1
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1c9      	bne.n	8007c1e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	2200      	movs	r2, #0
 8007c92:	2140      	movs	r1, #64	@ 0x40
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f000 fbc1 	bl	800841c <UART_WaitOnFlagUntilTimeout>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d004      	beq.n	8007caa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e005      	b.n	8007cb6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2220      	movs	r2, #32
 8007cae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	e000      	b.n	8007cb6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007cb4:	2302      	movs	r3, #2
  }
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3720      	adds	r7, #32
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
	...

08007cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b088      	sub	sp, #32
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	431a      	orrs	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	4ba6      	ldr	r3, [pc, #664]	@ (8007f84 <UART_SetConfig+0x2c4>)
 8007cec:	4013      	ands	r3, r2
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	6812      	ldr	r2, [r2, #0]
 8007cf2:	6979      	ldr	r1, [r7, #20]
 8007cf4:	430b      	orrs	r3, r1
 8007cf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68da      	ldr	r2, [r3, #12]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a1b      	ldr	r3, [r3, #32]
 8007d18:	697a      	ldr	r2, [r7, #20]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a94      	ldr	r2, [pc, #592]	@ (8007f88 <UART_SetConfig+0x2c8>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d120      	bne.n	8007d7e <UART_SetConfig+0xbe>
 8007d3c:	4b93      	ldr	r3, [pc, #588]	@ (8007f8c <UART_SetConfig+0x2cc>)
 8007d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d42:	f003 0303 	and.w	r3, r3, #3
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d816      	bhi.n	8007d78 <UART_SetConfig+0xb8>
 8007d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d50 <UART_SetConfig+0x90>)
 8007d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d50:	08007d61 	.word	0x08007d61
 8007d54:	08007d6d 	.word	0x08007d6d
 8007d58:	08007d67 	.word	0x08007d67
 8007d5c:	08007d73 	.word	0x08007d73
 8007d60:	2301      	movs	r3, #1
 8007d62:	77fb      	strb	r3, [r7, #31]
 8007d64:	e150      	b.n	8008008 <UART_SetConfig+0x348>
 8007d66:	2302      	movs	r3, #2
 8007d68:	77fb      	strb	r3, [r7, #31]
 8007d6a:	e14d      	b.n	8008008 <UART_SetConfig+0x348>
 8007d6c:	2304      	movs	r3, #4
 8007d6e:	77fb      	strb	r3, [r7, #31]
 8007d70:	e14a      	b.n	8008008 <UART_SetConfig+0x348>
 8007d72:	2308      	movs	r3, #8
 8007d74:	77fb      	strb	r3, [r7, #31]
 8007d76:	e147      	b.n	8008008 <UART_SetConfig+0x348>
 8007d78:	2310      	movs	r3, #16
 8007d7a:	77fb      	strb	r3, [r7, #31]
 8007d7c:	e144      	b.n	8008008 <UART_SetConfig+0x348>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a83      	ldr	r2, [pc, #524]	@ (8007f90 <UART_SetConfig+0x2d0>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d132      	bne.n	8007dee <UART_SetConfig+0x12e>
 8007d88:	4b80      	ldr	r3, [pc, #512]	@ (8007f8c <UART_SetConfig+0x2cc>)
 8007d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d8e:	f003 030c 	and.w	r3, r3, #12
 8007d92:	2b0c      	cmp	r3, #12
 8007d94:	d828      	bhi.n	8007de8 <UART_SetConfig+0x128>
 8007d96:	a201      	add	r2, pc, #4	@ (adr r2, 8007d9c <UART_SetConfig+0xdc>)
 8007d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9c:	08007dd1 	.word	0x08007dd1
 8007da0:	08007de9 	.word	0x08007de9
 8007da4:	08007de9 	.word	0x08007de9
 8007da8:	08007de9 	.word	0x08007de9
 8007dac:	08007ddd 	.word	0x08007ddd
 8007db0:	08007de9 	.word	0x08007de9
 8007db4:	08007de9 	.word	0x08007de9
 8007db8:	08007de9 	.word	0x08007de9
 8007dbc:	08007dd7 	.word	0x08007dd7
 8007dc0:	08007de9 	.word	0x08007de9
 8007dc4:	08007de9 	.word	0x08007de9
 8007dc8:	08007de9 	.word	0x08007de9
 8007dcc:	08007de3 	.word	0x08007de3
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	77fb      	strb	r3, [r7, #31]
 8007dd4:	e118      	b.n	8008008 <UART_SetConfig+0x348>
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	77fb      	strb	r3, [r7, #31]
 8007dda:	e115      	b.n	8008008 <UART_SetConfig+0x348>
 8007ddc:	2304      	movs	r3, #4
 8007dde:	77fb      	strb	r3, [r7, #31]
 8007de0:	e112      	b.n	8008008 <UART_SetConfig+0x348>
 8007de2:	2308      	movs	r3, #8
 8007de4:	77fb      	strb	r3, [r7, #31]
 8007de6:	e10f      	b.n	8008008 <UART_SetConfig+0x348>
 8007de8:	2310      	movs	r3, #16
 8007dea:	77fb      	strb	r3, [r7, #31]
 8007dec:	e10c      	b.n	8008008 <UART_SetConfig+0x348>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a68      	ldr	r2, [pc, #416]	@ (8007f94 <UART_SetConfig+0x2d4>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d120      	bne.n	8007e3a <UART_SetConfig+0x17a>
 8007df8:	4b64      	ldr	r3, [pc, #400]	@ (8007f8c <UART_SetConfig+0x2cc>)
 8007dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dfe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007e02:	2b30      	cmp	r3, #48	@ 0x30
 8007e04:	d013      	beq.n	8007e2e <UART_SetConfig+0x16e>
 8007e06:	2b30      	cmp	r3, #48	@ 0x30
 8007e08:	d814      	bhi.n	8007e34 <UART_SetConfig+0x174>
 8007e0a:	2b20      	cmp	r3, #32
 8007e0c:	d009      	beq.n	8007e22 <UART_SetConfig+0x162>
 8007e0e:	2b20      	cmp	r3, #32
 8007e10:	d810      	bhi.n	8007e34 <UART_SetConfig+0x174>
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d002      	beq.n	8007e1c <UART_SetConfig+0x15c>
 8007e16:	2b10      	cmp	r3, #16
 8007e18:	d006      	beq.n	8007e28 <UART_SetConfig+0x168>
 8007e1a:	e00b      	b.n	8007e34 <UART_SetConfig+0x174>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	77fb      	strb	r3, [r7, #31]
 8007e20:	e0f2      	b.n	8008008 <UART_SetConfig+0x348>
 8007e22:	2302      	movs	r3, #2
 8007e24:	77fb      	strb	r3, [r7, #31]
 8007e26:	e0ef      	b.n	8008008 <UART_SetConfig+0x348>
 8007e28:	2304      	movs	r3, #4
 8007e2a:	77fb      	strb	r3, [r7, #31]
 8007e2c:	e0ec      	b.n	8008008 <UART_SetConfig+0x348>
 8007e2e:	2308      	movs	r3, #8
 8007e30:	77fb      	strb	r3, [r7, #31]
 8007e32:	e0e9      	b.n	8008008 <UART_SetConfig+0x348>
 8007e34:	2310      	movs	r3, #16
 8007e36:	77fb      	strb	r3, [r7, #31]
 8007e38:	e0e6      	b.n	8008008 <UART_SetConfig+0x348>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a56      	ldr	r2, [pc, #344]	@ (8007f98 <UART_SetConfig+0x2d8>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d120      	bne.n	8007e86 <UART_SetConfig+0x1c6>
 8007e44:	4b51      	ldr	r3, [pc, #324]	@ (8007f8c <UART_SetConfig+0x2cc>)
 8007e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007e4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e50:	d013      	beq.n	8007e7a <UART_SetConfig+0x1ba>
 8007e52:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e54:	d814      	bhi.n	8007e80 <UART_SetConfig+0x1c0>
 8007e56:	2b80      	cmp	r3, #128	@ 0x80
 8007e58:	d009      	beq.n	8007e6e <UART_SetConfig+0x1ae>
 8007e5a:	2b80      	cmp	r3, #128	@ 0x80
 8007e5c:	d810      	bhi.n	8007e80 <UART_SetConfig+0x1c0>
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d002      	beq.n	8007e68 <UART_SetConfig+0x1a8>
 8007e62:	2b40      	cmp	r3, #64	@ 0x40
 8007e64:	d006      	beq.n	8007e74 <UART_SetConfig+0x1b4>
 8007e66:	e00b      	b.n	8007e80 <UART_SetConfig+0x1c0>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	77fb      	strb	r3, [r7, #31]
 8007e6c:	e0cc      	b.n	8008008 <UART_SetConfig+0x348>
 8007e6e:	2302      	movs	r3, #2
 8007e70:	77fb      	strb	r3, [r7, #31]
 8007e72:	e0c9      	b.n	8008008 <UART_SetConfig+0x348>
 8007e74:	2304      	movs	r3, #4
 8007e76:	77fb      	strb	r3, [r7, #31]
 8007e78:	e0c6      	b.n	8008008 <UART_SetConfig+0x348>
 8007e7a:	2308      	movs	r3, #8
 8007e7c:	77fb      	strb	r3, [r7, #31]
 8007e7e:	e0c3      	b.n	8008008 <UART_SetConfig+0x348>
 8007e80:	2310      	movs	r3, #16
 8007e82:	77fb      	strb	r3, [r7, #31]
 8007e84:	e0c0      	b.n	8008008 <UART_SetConfig+0x348>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a44      	ldr	r2, [pc, #272]	@ (8007f9c <UART_SetConfig+0x2dc>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d125      	bne.n	8007edc <UART_SetConfig+0x21c>
 8007e90:	4b3e      	ldr	r3, [pc, #248]	@ (8007f8c <UART_SetConfig+0x2cc>)
 8007e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e9e:	d017      	beq.n	8007ed0 <UART_SetConfig+0x210>
 8007ea0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ea4:	d817      	bhi.n	8007ed6 <UART_SetConfig+0x216>
 8007ea6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eaa:	d00b      	beq.n	8007ec4 <UART_SetConfig+0x204>
 8007eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eb0:	d811      	bhi.n	8007ed6 <UART_SetConfig+0x216>
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d003      	beq.n	8007ebe <UART_SetConfig+0x1fe>
 8007eb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eba:	d006      	beq.n	8007eca <UART_SetConfig+0x20a>
 8007ebc:	e00b      	b.n	8007ed6 <UART_SetConfig+0x216>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	77fb      	strb	r3, [r7, #31]
 8007ec2:	e0a1      	b.n	8008008 <UART_SetConfig+0x348>
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	77fb      	strb	r3, [r7, #31]
 8007ec8:	e09e      	b.n	8008008 <UART_SetConfig+0x348>
 8007eca:	2304      	movs	r3, #4
 8007ecc:	77fb      	strb	r3, [r7, #31]
 8007ece:	e09b      	b.n	8008008 <UART_SetConfig+0x348>
 8007ed0:	2308      	movs	r3, #8
 8007ed2:	77fb      	strb	r3, [r7, #31]
 8007ed4:	e098      	b.n	8008008 <UART_SetConfig+0x348>
 8007ed6:	2310      	movs	r3, #16
 8007ed8:	77fb      	strb	r3, [r7, #31]
 8007eda:	e095      	b.n	8008008 <UART_SetConfig+0x348>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a2f      	ldr	r2, [pc, #188]	@ (8007fa0 <UART_SetConfig+0x2e0>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d125      	bne.n	8007f32 <UART_SetConfig+0x272>
 8007ee6:	4b29      	ldr	r3, [pc, #164]	@ (8007f8c <UART_SetConfig+0x2cc>)
 8007ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007ef0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ef4:	d017      	beq.n	8007f26 <UART_SetConfig+0x266>
 8007ef6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007efa:	d817      	bhi.n	8007f2c <UART_SetConfig+0x26c>
 8007efc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f00:	d00b      	beq.n	8007f1a <UART_SetConfig+0x25a>
 8007f02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f06:	d811      	bhi.n	8007f2c <UART_SetConfig+0x26c>
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d003      	beq.n	8007f14 <UART_SetConfig+0x254>
 8007f0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f10:	d006      	beq.n	8007f20 <UART_SetConfig+0x260>
 8007f12:	e00b      	b.n	8007f2c <UART_SetConfig+0x26c>
 8007f14:	2301      	movs	r3, #1
 8007f16:	77fb      	strb	r3, [r7, #31]
 8007f18:	e076      	b.n	8008008 <UART_SetConfig+0x348>
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	77fb      	strb	r3, [r7, #31]
 8007f1e:	e073      	b.n	8008008 <UART_SetConfig+0x348>
 8007f20:	2304      	movs	r3, #4
 8007f22:	77fb      	strb	r3, [r7, #31]
 8007f24:	e070      	b.n	8008008 <UART_SetConfig+0x348>
 8007f26:	2308      	movs	r3, #8
 8007f28:	77fb      	strb	r3, [r7, #31]
 8007f2a:	e06d      	b.n	8008008 <UART_SetConfig+0x348>
 8007f2c:	2310      	movs	r3, #16
 8007f2e:	77fb      	strb	r3, [r7, #31]
 8007f30:	e06a      	b.n	8008008 <UART_SetConfig+0x348>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a1b      	ldr	r2, [pc, #108]	@ (8007fa4 <UART_SetConfig+0x2e4>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d138      	bne.n	8007fae <UART_SetConfig+0x2ee>
 8007f3c:	4b13      	ldr	r3, [pc, #76]	@ (8007f8c <UART_SetConfig+0x2cc>)
 8007f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f42:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007f46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f4a:	d017      	beq.n	8007f7c <UART_SetConfig+0x2bc>
 8007f4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f50:	d82a      	bhi.n	8007fa8 <UART_SetConfig+0x2e8>
 8007f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f56:	d00b      	beq.n	8007f70 <UART_SetConfig+0x2b0>
 8007f58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f5c:	d824      	bhi.n	8007fa8 <UART_SetConfig+0x2e8>
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d003      	beq.n	8007f6a <UART_SetConfig+0x2aa>
 8007f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f66:	d006      	beq.n	8007f76 <UART_SetConfig+0x2b6>
 8007f68:	e01e      	b.n	8007fa8 <UART_SetConfig+0x2e8>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	77fb      	strb	r3, [r7, #31]
 8007f6e:	e04b      	b.n	8008008 <UART_SetConfig+0x348>
 8007f70:	2302      	movs	r3, #2
 8007f72:	77fb      	strb	r3, [r7, #31]
 8007f74:	e048      	b.n	8008008 <UART_SetConfig+0x348>
 8007f76:	2304      	movs	r3, #4
 8007f78:	77fb      	strb	r3, [r7, #31]
 8007f7a:	e045      	b.n	8008008 <UART_SetConfig+0x348>
 8007f7c:	2308      	movs	r3, #8
 8007f7e:	77fb      	strb	r3, [r7, #31]
 8007f80:	e042      	b.n	8008008 <UART_SetConfig+0x348>
 8007f82:	bf00      	nop
 8007f84:	efff69f3 	.word	0xefff69f3
 8007f88:	40011000 	.word	0x40011000
 8007f8c:	40023800 	.word	0x40023800
 8007f90:	40004400 	.word	0x40004400
 8007f94:	40004800 	.word	0x40004800
 8007f98:	40004c00 	.word	0x40004c00
 8007f9c:	40005000 	.word	0x40005000
 8007fa0:	40011400 	.word	0x40011400
 8007fa4:	40007800 	.word	0x40007800
 8007fa8:	2310      	movs	r3, #16
 8007faa:	77fb      	strb	r3, [r7, #31]
 8007fac:	e02c      	b.n	8008008 <UART_SetConfig+0x348>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a72      	ldr	r2, [pc, #456]	@ (800817c <UART_SetConfig+0x4bc>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d125      	bne.n	8008004 <UART_SetConfig+0x344>
 8007fb8:	4b71      	ldr	r3, [pc, #452]	@ (8008180 <UART_SetConfig+0x4c0>)
 8007fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fbe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007fc2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007fc6:	d017      	beq.n	8007ff8 <UART_SetConfig+0x338>
 8007fc8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007fcc:	d817      	bhi.n	8007ffe <UART_SetConfig+0x33e>
 8007fce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fd2:	d00b      	beq.n	8007fec <UART_SetConfig+0x32c>
 8007fd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fd8:	d811      	bhi.n	8007ffe <UART_SetConfig+0x33e>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <UART_SetConfig+0x326>
 8007fde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fe2:	d006      	beq.n	8007ff2 <UART_SetConfig+0x332>
 8007fe4:	e00b      	b.n	8007ffe <UART_SetConfig+0x33e>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	77fb      	strb	r3, [r7, #31]
 8007fea:	e00d      	b.n	8008008 <UART_SetConfig+0x348>
 8007fec:	2302      	movs	r3, #2
 8007fee:	77fb      	strb	r3, [r7, #31]
 8007ff0:	e00a      	b.n	8008008 <UART_SetConfig+0x348>
 8007ff2:	2304      	movs	r3, #4
 8007ff4:	77fb      	strb	r3, [r7, #31]
 8007ff6:	e007      	b.n	8008008 <UART_SetConfig+0x348>
 8007ff8:	2308      	movs	r3, #8
 8007ffa:	77fb      	strb	r3, [r7, #31]
 8007ffc:	e004      	b.n	8008008 <UART_SetConfig+0x348>
 8007ffe:	2310      	movs	r3, #16
 8008000:	77fb      	strb	r3, [r7, #31]
 8008002:	e001      	b.n	8008008 <UART_SetConfig+0x348>
 8008004:	2310      	movs	r3, #16
 8008006:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008010:	d15b      	bne.n	80080ca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008012:	7ffb      	ldrb	r3, [r7, #31]
 8008014:	2b08      	cmp	r3, #8
 8008016:	d828      	bhi.n	800806a <UART_SetConfig+0x3aa>
 8008018:	a201      	add	r2, pc, #4	@ (adr r2, 8008020 <UART_SetConfig+0x360>)
 800801a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801e:	bf00      	nop
 8008020:	08008045 	.word	0x08008045
 8008024:	0800804d 	.word	0x0800804d
 8008028:	08008055 	.word	0x08008055
 800802c:	0800806b 	.word	0x0800806b
 8008030:	0800805b 	.word	0x0800805b
 8008034:	0800806b 	.word	0x0800806b
 8008038:	0800806b 	.word	0x0800806b
 800803c:	0800806b 	.word	0x0800806b
 8008040:	08008063 	.word	0x08008063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008044:	f7fe fe0e 	bl	8006c64 <HAL_RCC_GetPCLK1Freq>
 8008048:	61b8      	str	r0, [r7, #24]
        break;
 800804a:	e013      	b.n	8008074 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800804c:	f7fe fe1e 	bl	8006c8c <HAL_RCC_GetPCLK2Freq>
 8008050:	61b8      	str	r0, [r7, #24]
        break;
 8008052:	e00f      	b.n	8008074 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008054:	4b4b      	ldr	r3, [pc, #300]	@ (8008184 <UART_SetConfig+0x4c4>)
 8008056:	61bb      	str	r3, [r7, #24]
        break;
 8008058:	e00c      	b.n	8008074 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800805a:	f7fe fcf1 	bl	8006a40 <HAL_RCC_GetSysClockFreq>
 800805e:	61b8      	str	r0, [r7, #24]
        break;
 8008060:	e008      	b.n	8008074 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008062:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008066:	61bb      	str	r3, [r7, #24]
        break;
 8008068:	e004      	b.n	8008074 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800806a:	2300      	movs	r3, #0
 800806c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	77bb      	strb	r3, [r7, #30]
        break;
 8008072:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d074      	beq.n	8008164 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	005a      	lsls	r2, r3, #1
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	085b      	lsrs	r3, r3, #1
 8008084:	441a      	add	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	fbb2 f3f3 	udiv	r3, r2, r3
 800808e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	2b0f      	cmp	r3, #15
 8008094:	d916      	bls.n	80080c4 <UART_SetConfig+0x404>
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800809c:	d212      	bcs.n	80080c4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	f023 030f 	bic.w	r3, r3, #15
 80080a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	085b      	lsrs	r3, r3, #1
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	f003 0307 	and.w	r3, r3, #7
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	89fb      	ldrh	r3, [r7, #14]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	89fa      	ldrh	r2, [r7, #14]
 80080c0:	60da      	str	r2, [r3, #12]
 80080c2:	e04f      	b.n	8008164 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	77bb      	strb	r3, [r7, #30]
 80080c8:	e04c      	b.n	8008164 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080ca:	7ffb      	ldrb	r3, [r7, #31]
 80080cc:	2b08      	cmp	r3, #8
 80080ce:	d828      	bhi.n	8008122 <UART_SetConfig+0x462>
 80080d0:	a201      	add	r2, pc, #4	@ (adr r2, 80080d8 <UART_SetConfig+0x418>)
 80080d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d6:	bf00      	nop
 80080d8:	080080fd 	.word	0x080080fd
 80080dc:	08008105 	.word	0x08008105
 80080e0:	0800810d 	.word	0x0800810d
 80080e4:	08008123 	.word	0x08008123
 80080e8:	08008113 	.word	0x08008113
 80080ec:	08008123 	.word	0x08008123
 80080f0:	08008123 	.word	0x08008123
 80080f4:	08008123 	.word	0x08008123
 80080f8:	0800811b 	.word	0x0800811b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080fc:	f7fe fdb2 	bl	8006c64 <HAL_RCC_GetPCLK1Freq>
 8008100:	61b8      	str	r0, [r7, #24]
        break;
 8008102:	e013      	b.n	800812c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008104:	f7fe fdc2 	bl	8006c8c <HAL_RCC_GetPCLK2Freq>
 8008108:	61b8      	str	r0, [r7, #24]
        break;
 800810a:	e00f      	b.n	800812c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800810c:	4b1d      	ldr	r3, [pc, #116]	@ (8008184 <UART_SetConfig+0x4c4>)
 800810e:	61bb      	str	r3, [r7, #24]
        break;
 8008110:	e00c      	b.n	800812c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008112:	f7fe fc95 	bl	8006a40 <HAL_RCC_GetSysClockFreq>
 8008116:	61b8      	str	r0, [r7, #24]
        break;
 8008118:	e008      	b.n	800812c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800811a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800811e:	61bb      	str	r3, [r7, #24]
        break;
 8008120:	e004      	b.n	800812c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	77bb      	strb	r3, [r7, #30]
        break;
 800812a:	bf00      	nop
    }

    if (pclk != 0U)
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d018      	beq.n	8008164 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	085a      	lsrs	r2, r3, #1
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	441a      	add	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	fbb2 f3f3 	udiv	r3, r2, r3
 8008144:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	2b0f      	cmp	r3, #15
 800814a:	d909      	bls.n	8008160 <UART_SetConfig+0x4a0>
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008152:	d205      	bcs.n	8008160 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	b29a      	uxth	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	60da      	str	r2, [r3, #12]
 800815e:	e001      	b.n	8008164 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008170:	7fbb      	ldrb	r3, [r7, #30]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3720      	adds	r7, #32
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	40007c00 	.word	0x40007c00
 8008180:	40023800 	.word	0x40023800
 8008184:	00f42400 	.word	0x00f42400

08008188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008194:	f003 0308 	and.w	r3, r3, #8
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00a      	beq.n	80081b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00a      	beq.n	80081d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	430a      	orrs	r2, r1
 80081d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d8:	f003 0302 	and.w	r3, r3, #2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00a      	beq.n	80081f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	430a      	orrs	r2, r1
 80081f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081fa:	f003 0304 	and.w	r3, r3, #4
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00a      	beq.n	8008218 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	430a      	orrs	r2, r1
 8008216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800821c:	f003 0310 	and.w	r3, r3, #16
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00a      	beq.n	800823a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	430a      	orrs	r2, r1
 8008238:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800823e:	f003 0320 	and.w	r3, r3, #32
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00a      	beq.n	800825c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	430a      	orrs	r2, r1
 800825a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008264:	2b00      	cmp	r3, #0
 8008266:	d01a      	beq.n	800829e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008282:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008286:	d10a      	bne.n	800829e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	430a      	orrs	r2, r1
 800829c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00a      	beq.n	80082c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	430a      	orrs	r2, r1
 80082be:	605a      	str	r2, [r3, #4]
  }
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b098      	sub	sp, #96	@ 0x60
 80082d0:	af02      	add	r7, sp, #8
 80082d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082dc:	f7fa f92e 	bl	800253c <HAL_GetTick>
 80082e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0308 	and.w	r3, r3, #8
 80082ec:	2b08      	cmp	r3, #8
 80082ee:	d12e      	bne.n	800834e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082f8:	2200      	movs	r2, #0
 80082fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f88c 	bl	800841c <UART_WaitOnFlagUntilTimeout>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d021      	beq.n	800834e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800831a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800831e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	461a      	mov	r2, r3
 8008326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008328:	647b      	str	r3, [r7, #68]	@ 0x44
 800832a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800832e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e6      	bne.n	800830a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2220      	movs	r2, #32
 8008340:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e062      	b.n	8008414 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0304 	and.w	r3, r3, #4
 8008358:	2b04      	cmp	r3, #4
 800835a:	d149      	bne.n	80083f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800835c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008364:	2200      	movs	r2, #0
 8008366:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f856 	bl	800841c <UART_WaitOnFlagUntilTimeout>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d03c      	beq.n	80083f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837e:	e853 3f00 	ldrex	r3, [r3]
 8008382:	623b      	str	r3, [r7, #32]
   return(result);
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800838a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	461a      	mov	r2, r3
 8008392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008394:	633b      	str	r3, [r7, #48]	@ 0x30
 8008396:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008398:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800839a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800839c:	e841 2300 	strex	r3, r2, [r1]
 80083a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1e6      	bne.n	8008376 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3308      	adds	r3, #8
 80083ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	e853 3f00 	ldrex	r3, [r3]
 80083b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 0301 	bic.w	r3, r3, #1
 80083be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3308      	adds	r3, #8
 80083c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083c8:	61fa      	str	r2, [r7, #28]
 80083ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083cc:	69b9      	ldr	r1, [r7, #24]
 80083ce:	69fa      	ldr	r2, [r7, #28]
 80083d0:	e841 2300 	strex	r3, r2, [r1]
 80083d4:	617b      	str	r3, [r7, #20]
   return(result);
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1e5      	bne.n	80083a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2220      	movs	r2, #32
 80083e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083ec:	2303      	movs	r3, #3
 80083ee:	e011      	b.n	8008414 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2220      	movs	r2, #32
 80083f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3758      	adds	r7, #88	@ 0x58
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	603b      	str	r3, [r7, #0]
 8008428:	4613      	mov	r3, r2
 800842a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800842c:	e04f      	b.n	80084ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008434:	d04b      	beq.n	80084ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008436:	f7fa f881 	bl	800253c <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	69ba      	ldr	r2, [r7, #24]
 8008442:	429a      	cmp	r2, r3
 8008444:	d302      	bcc.n	800844c <UART_WaitOnFlagUntilTimeout+0x30>
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d101      	bne.n	8008450 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	e04e      	b.n	80084ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0304 	and.w	r3, r3, #4
 800845a:	2b00      	cmp	r3, #0
 800845c:	d037      	beq.n	80084ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b80      	cmp	r3, #128	@ 0x80
 8008462:	d034      	beq.n	80084ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b40      	cmp	r3, #64	@ 0x40
 8008468:	d031      	beq.n	80084ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	69db      	ldr	r3, [r3, #28]
 8008470:	f003 0308 	and.w	r3, r3, #8
 8008474:	2b08      	cmp	r3, #8
 8008476:	d110      	bne.n	800849a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2208      	movs	r2, #8
 800847e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 f838 	bl	80084f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2208      	movs	r2, #8
 800848a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e029      	b.n	80084ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	69db      	ldr	r3, [r3, #28]
 80084a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084a8:	d111      	bne.n	80084ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80084b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 f81e 	bl	80084f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2220      	movs	r2, #32
 80084be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80084ca:	2303      	movs	r3, #3
 80084cc:	e00f      	b.n	80084ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	69da      	ldr	r2, [r3, #28]
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	4013      	ands	r3, r2
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	429a      	cmp	r2, r3
 80084dc:	bf0c      	ite	eq
 80084de:	2301      	moveq	r3, #1
 80084e0:	2300      	movne	r3, #0
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	461a      	mov	r2, r3
 80084e6:	79fb      	ldrb	r3, [r7, #7]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d0a0      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b095      	sub	sp, #84	@ 0x54
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008506:	e853 3f00 	ldrex	r3, [r3]
 800850a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800850c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008512:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	461a      	mov	r2, r3
 800851a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800851c:	643b      	str	r3, [r7, #64]	@ 0x40
 800851e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008520:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008522:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008524:	e841 2300 	strex	r3, r2, [r1]
 8008528:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800852a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1e6      	bne.n	80084fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3308      	adds	r3, #8
 8008536:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008538:	6a3b      	ldr	r3, [r7, #32]
 800853a:	e853 3f00 	ldrex	r3, [r3]
 800853e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	f023 0301 	bic.w	r3, r3, #1
 8008546:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3308      	adds	r3, #8
 800854e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008550:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008552:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008554:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008558:	e841 2300 	strex	r3, r2, [r1]
 800855c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800855e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1e5      	bne.n	8008530 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008568:	2b01      	cmp	r3, #1
 800856a:	d118      	bne.n	800859e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	60bb      	str	r3, [r7, #8]
   return(result);
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f023 0310 	bic.w	r3, r3, #16
 8008580:	647b      	str	r3, [r7, #68]	@ 0x44
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800858a:	61bb      	str	r3, [r7, #24]
 800858c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858e:	6979      	ldr	r1, [r7, #20]
 8008590:	69ba      	ldr	r2, [r7, #24]
 8008592:	e841 2300 	strex	r3, r2, [r1]
 8008596:	613b      	str	r3, [r7, #16]
   return(result);
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e6      	bne.n	800856c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2220      	movs	r2, #32
 80085a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80085b2:	bf00      	nop
 80085b4:	3754      	adds	r7, #84	@ 0x54
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
	...

080085c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085c0:	b084      	sub	sp, #16
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	f107 001c 	add.w	r0, r7, #28
 80085ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80085d2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d121      	bne.n	800861e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68da      	ldr	r2, [r3, #12]
 80085ea:	4b21      	ldr	r3, [pc, #132]	@ (8008670 <USB_CoreInit+0xb0>)
 80085ec:	4013      	ands	r3, r2
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80085fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008602:	2b01      	cmp	r3, #1
 8008604:	d105      	bne.n	8008612 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f001 fade 	bl	8009bd4 <USB_CoreReset>
 8008618:	4603      	mov	r3, r0
 800861a:	73fb      	strb	r3, [r7, #15]
 800861c:	e010      	b.n	8008640 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f001 fad2 	bl	8009bd4 <USB_CoreReset>
 8008630:	4603      	mov	r3, r0
 8008632:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008638:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8008640:	7fbb      	ldrb	r3, [r7, #30]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d10b      	bne.n	800865e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f043 0206 	orr.w	r2, r3, #6
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f043 0220 	orr.w	r2, r3, #32
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800865e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800866a:	b004      	add	sp, #16
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	ffbdffbf 	.word	0xffbdffbf

08008674 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008674:	b480      	push	{r7}
 8008676:	b087      	sub	sp, #28
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	4613      	mov	r3, r2
 8008680:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008682:	79fb      	ldrb	r3, [r7, #7]
 8008684:	2b02      	cmp	r3, #2
 8008686:	d165      	bne.n	8008754 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	4a41      	ldr	r2, [pc, #260]	@ (8008790 <USB_SetTurnaroundTime+0x11c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d906      	bls.n	800869e <USB_SetTurnaroundTime+0x2a>
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	4a40      	ldr	r2, [pc, #256]	@ (8008794 <USB_SetTurnaroundTime+0x120>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d202      	bcs.n	800869e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008698:	230f      	movs	r3, #15
 800869a:	617b      	str	r3, [r7, #20]
 800869c:	e062      	b.n	8008764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	4a3c      	ldr	r2, [pc, #240]	@ (8008794 <USB_SetTurnaroundTime+0x120>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d306      	bcc.n	80086b4 <USB_SetTurnaroundTime+0x40>
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	4a3b      	ldr	r2, [pc, #236]	@ (8008798 <USB_SetTurnaroundTime+0x124>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d202      	bcs.n	80086b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80086ae:	230e      	movs	r3, #14
 80086b0:	617b      	str	r3, [r7, #20]
 80086b2:	e057      	b.n	8008764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	4a38      	ldr	r2, [pc, #224]	@ (8008798 <USB_SetTurnaroundTime+0x124>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d306      	bcc.n	80086ca <USB_SetTurnaroundTime+0x56>
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	4a37      	ldr	r2, [pc, #220]	@ (800879c <USB_SetTurnaroundTime+0x128>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d202      	bcs.n	80086ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80086c4:	230d      	movs	r3, #13
 80086c6:	617b      	str	r3, [r7, #20]
 80086c8:	e04c      	b.n	8008764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	4a33      	ldr	r2, [pc, #204]	@ (800879c <USB_SetTurnaroundTime+0x128>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d306      	bcc.n	80086e0 <USB_SetTurnaroundTime+0x6c>
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	4a32      	ldr	r2, [pc, #200]	@ (80087a0 <USB_SetTurnaroundTime+0x12c>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d802      	bhi.n	80086e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80086da:	230c      	movs	r3, #12
 80086dc:	617b      	str	r3, [r7, #20]
 80086de:	e041      	b.n	8008764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	4a2f      	ldr	r2, [pc, #188]	@ (80087a0 <USB_SetTurnaroundTime+0x12c>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d906      	bls.n	80086f6 <USB_SetTurnaroundTime+0x82>
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	4a2e      	ldr	r2, [pc, #184]	@ (80087a4 <USB_SetTurnaroundTime+0x130>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d802      	bhi.n	80086f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80086f0:	230b      	movs	r3, #11
 80086f2:	617b      	str	r3, [r7, #20]
 80086f4:	e036      	b.n	8008764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	4a2a      	ldr	r2, [pc, #168]	@ (80087a4 <USB_SetTurnaroundTime+0x130>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d906      	bls.n	800870c <USB_SetTurnaroundTime+0x98>
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	4a29      	ldr	r2, [pc, #164]	@ (80087a8 <USB_SetTurnaroundTime+0x134>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d802      	bhi.n	800870c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008706:	230a      	movs	r3, #10
 8008708:	617b      	str	r3, [r7, #20]
 800870a:	e02b      	b.n	8008764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	4a26      	ldr	r2, [pc, #152]	@ (80087a8 <USB_SetTurnaroundTime+0x134>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d906      	bls.n	8008722 <USB_SetTurnaroundTime+0xae>
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	4a25      	ldr	r2, [pc, #148]	@ (80087ac <USB_SetTurnaroundTime+0x138>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d202      	bcs.n	8008722 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800871c:	2309      	movs	r3, #9
 800871e:	617b      	str	r3, [r7, #20]
 8008720:	e020      	b.n	8008764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	4a21      	ldr	r2, [pc, #132]	@ (80087ac <USB_SetTurnaroundTime+0x138>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d306      	bcc.n	8008738 <USB_SetTurnaroundTime+0xc4>
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	4a20      	ldr	r2, [pc, #128]	@ (80087b0 <USB_SetTurnaroundTime+0x13c>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d802      	bhi.n	8008738 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008732:	2308      	movs	r3, #8
 8008734:	617b      	str	r3, [r7, #20]
 8008736:	e015      	b.n	8008764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	4a1d      	ldr	r2, [pc, #116]	@ (80087b0 <USB_SetTurnaroundTime+0x13c>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d906      	bls.n	800874e <USB_SetTurnaroundTime+0xda>
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	4a1c      	ldr	r2, [pc, #112]	@ (80087b4 <USB_SetTurnaroundTime+0x140>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d202      	bcs.n	800874e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008748:	2307      	movs	r3, #7
 800874a:	617b      	str	r3, [r7, #20]
 800874c:	e00a      	b.n	8008764 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800874e:	2306      	movs	r3, #6
 8008750:	617b      	str	r3, [r7, #20]
 8008752:	e007      	b.n	8008764 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008754:	79fb      	ldrb	r3, [r7, #7]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d102      	bne.n	8008760 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800875a:	2309      	movs	r3, #9
 800875c:	617b      	str	r3, [r7, #20]
 800875e:	e001      	b.n	8008764 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008760:	2309      	movs	r3, #9
 8008762:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	68da      	ldr	r2, [r3, #12]
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	029b      	lsls	r3, r3, #10
 8008778:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800877c:	431a      	orrs	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	371c      	adds	r7, #28
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	00d8acbf 	.word	0x00d8acbf
 8008794:	00e4e1c0 	.word	0x00e4e1c0
 8008798:	00f42400 	.word	0x00f42400
 800879c:	01067380 	.word	0x01067380
 80087a0:	011a499f 	.word	0x011a499f
 80087a4:	01312cff 	.word	0x01312cff
 80087a8:	014ca43f 	.word	0x014ca43f
 80087ac:	016e3600 	.word	0x016e3600
 80087b0:	01a6ab1f 	.word	0x01a6ab1f
 80087b4:	01e84800 	.word	0x01e84800

080087b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	f043 0201 	orr.w	r2, r3, #1
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f023 0201 	bic.w	r2, r3, #1
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	460b      	mov	r3, r1
 8008806:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008818:	78fb      	ldrb	r3, [r7, #3]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d115      	bne.n	800884a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800882a:	200a      	movs	r0, #10
 800882c:	f7f9 fe92 	bl	8002554 <HAL_Delay>
      ms += 10U;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	330a      	adds	r3, #10
 8008834:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f001 f93b 	bl	8009ab2 <USB_GetMode>
 800883c:	4603      	mov	r3, r0
 800883e:	2b01      	cmp	r3, #1
 8008840:	d01e      	beq.n	8008880 <USB_SetCurrentMode+0x84>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2bc7      	cmp	r3, #199	@ 0xc7
 8008846:	d9f0      	bls.n	800882a <USB_SetCurrentMode+0x2e>
 8008848:	e01a      	b.n	8008880 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800884a:	78fb      	ldrb	r3, [r7, #3]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d115      	bne.n	800887c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800885c:	200a      	movs	r0, #10
 800885e:	f7f9 fe79 	bl	8002554 <HAL_Delay>
      ms += 10U;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	330a      	adds	r3, #10
 8008866:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f001 f922 	bl	8009ab2 <USB_GetMode>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d005      	beq.n	8008880 <USB_SetCurrentMode+0x84>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2bc7      	cmp	r3, #199	@ 0xc7
 8008878:	d9f0      	bls.n	800885c <USB_SetCurrentMode+0x60>
 800887a:	e001      	b.n	8008880 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e005      	b.n	800888c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2bc8      	cmp	r3, #200	@ 0xc8
 8008884:	d101      	bne.n	800888a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e000      	b.n	800888c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008894:	b084      	sub	sp, #16
 8008896:	b580      	push	{r7, lr}
 8008898:	b086      	sub	sp, #24
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80088a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80088a6:	2300      	movs	r3, #0
 80088a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80088ae:	2300      	movs	r3, #0
 80088b0:	613b      	str	r3, [r7, #16]
 80088b2:	e009      	b.n	80088c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	3340      	adds	r3, #64	@ 0x40
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4413      	add	r3, r2
 80088be:	2200      	movs	r2, #0
 80088c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	3301      	adds	r3, #1
 80088c6:	613b      	str	r3, [r7, #16]
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	2b0e      	cmp	r3, #14
 80088cc:	d9f2      	bls.n	80088b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80088ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d11c      	bne.n	8008910 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088e4:	f043 0302 	orr.w	r3, r3, #2
 80088e8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ee:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	e005      	b.n	800891c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008914:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008922:	461a      	mov	r2, r3
 8008924:	2300      	movs	r3, #0
 8008926:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008928:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800892c:	2b01      	cmp	r3, #1
 800892e:	d10d      	bne.n	800894c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008934:	2b00      	cmp	r3, #0
 8008936:	d104      	bne.n	8008942 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008938:	2100      	movs	r1, #0
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f968 	bl	8008c10 <USB_SetDevSpeed>
 8008940:	e008      	b.n	8008954 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008942:	2101      	movs	r1, #1
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f963 	bl	8008c10 <USB_SetDevSpeed>
 800894a:	e003      	b.n	8008954 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800894c:	2103      	movs	r1, #3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f95e 	bl	8008c10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008954:	2110      	movs	r1, #16
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f8fa 	bl	8008b50 <USB_FlushTxFifo>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d001      	beq.n	8008966 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f924 	bl	8008bb4 <USB_FlushRxFifo>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800897c:	461a      	mov	r2, r3
 800897e:	2300      	movs	r3, #0
 8008980:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008988:	461a      	mov	r2, r3
 800898a:	2300      	movs	r3, #0
 800898c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008994:	461a      	mov	r2, r3
 8008996:	2300      	movs	r3, #0
 8008998:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800899a:	2300      	movs	r3, #0
 800899c:	613b      	str	r3, [r7, #16]
 800899e:	e043      	b.n	8008a28 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	015a      	lsls	r2, r3, #5
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	4413      	add	r3, r2
 80089a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089b6:	d118      	bne.n	80089ea <USB_DevInit+0x156>
    {
      if (i == 0U)
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10a      	bne.n	80089d4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	015a      	lsls	r2, r3, #5
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089ca:	461a      	mov	r2, r3
 80089cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80089d0:	6013      	str	r3, [r2, #0]
 80089d2:	e013      	b.n	80089fc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089e0:	461a      	mov	r2, r3
 80089e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	e008      	b.n	80089fc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	015a      	lsls	r2, r3, #5
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	4413      	add	r3, r2
 80089f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089f6:	461a      	mov	r2, r3
 80089f8:	2300      	movs	r3, #0
 80089fa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a08:	461a      	mov	r2, r3
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	015a      	lsls	r2, r3, #5
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	4413      	add	r3, r2
 8008a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008a20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	3301      	adds	r3, #1
 8008a26:	613b      	str	r3, [r7, #16]
 8008a28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d3b5      	bcc.n	80089a0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a34:	2300      	movs	r3, #0
 8008a36:	613b      	str	r3, [r7, #16]
 8008a38:	e043      	b.n	8008ac2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a50:	d118      	bne.n	8008a84 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10a      	bne.n	8008a6e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	015a      	lsls	r2, r3, #5
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a64:	461a      	mov	r2, r3
 8008a66:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008a6a:	6013      	str	r3, [r2, #0]
 8008a6c:	e013      	b.n	8008a96 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	015a      	lsls	r2, r3, #5
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	4413      	add	r3, r2
 8008a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008a80:	6013      	str	r3, [r2, #0]
 8008a82:	e008      	b.n	8008a96 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a90:	461a      	mov	r2, r3
 8008a92:	2300      	movs	r3, #0
 8008a94:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008aba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	613b      	str	r3, [r7, #16]
 8008ac2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d3b5      	bcc.n	8008a3a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ae0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008aee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008af0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d105      	bne.n	8008b04 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	f043 0210 	orr.w	r2, r3, #16
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	699a      	ldr	r2, [r3, #24]
 8008b08:	4b0f      	ldr	r3, [pc, #60]	@ (8008b48 <USB_DevInit+0x2b4>)
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b10:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d005      	beq.n	8008b24 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	f043 0208 	orr.w	r2, r3, #8
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008b24:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d105      	bne.n	8008b38 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	699a      	ldr	r2, [r3, #24]
 8008b30:	4b06      	ldr	r3, [pc, #24]	@ (8008b4c <USB_DevInit+0x2b8>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3718      	adds	r7, #24
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b44:	b004      	add	sp, #16
 8008b46:	4770      	bx	lr
 8008b48:	803c3800 	.word	0x803c3800
 8008b4c:	40000004 	.word	0x40000004

08008b50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3301      	adds	r3, #1
 8008b62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b6a:	d901      	bls.n	8008b70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e01b      	b.n	8008ba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	daf2      	bge.n	8008b5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	019b      	lsls	r3, r3, #6
 8008b80:	f043 0220 	orr.w	r2, r3, #32
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b94:	d901      	bls.n	8008b9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e006      	b.n	8008ba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	f003 0320 	and.w	r3, r3, #32
 8008ba2:	2b20      	cmp	r3, #32
 8008ba4:	d0f0      	beq.n	8008b88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008bcc:	d901      	bls.n	8008bd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e018      	b.n	8008c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	daf2      	bge.n	8008bc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2210      	movs	r2, #16
 8008be2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	3301      	adds	r3, #1
 8008be8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008bf0:	d901      	bls.n	8008bf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e006      	b.n	8008c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	f003 0310 	and.w	r3, r3, #16
 8008bfe:	2b10      	cmp	r3, #16
 8008c00:	d0f0      	beq.n	8008be4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	78fb      	ldrb	r3, [r7, #3]
 8008c2a:	68f9      	ldr	r1, [r7, #12]
 8008c2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c30:	4313      	orrs	r3, r2
 8008c32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b087      	sub	sp, #28
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f003 0306 	and.w	r3, r3, #6
 8008c5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d102      	bne.n	8008c68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008c62:	2300      	movs	r3, #0
 8008c64:	75fb      	strb	r3, [r7, #23]
 8008c66:	e00a      	b.n	8008c7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d002      	beq.n	8008c74 <USB_GetDevSpeed+0x32>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2b06      	cmp	r3, #6
 8008c72:	d102      	bne.n	8008c7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008c74:	2302      	movs	r3, #2
 8008c76:	75fb      	strb	r3, [r7, #23]
 8008c78:	e001      	b.n	8008c7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008c7a:	230f      	movs	r3, #15
 8008c7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	371c      	adds	r7, #28
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	785b      	ldrb	r3, [r3, #1]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d139      	bne.n	8008d1c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cae:	69da      	ldr	r2, [r3, #28]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	f003 030f 	and.w	r3, r3, #15
 8008cb8:	2101      	movs	r1, #1
 8008cba:	fa01 f303 	lsl.w	r3, r1, r3
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	68f9      	ldr	r1, [r7, #12]
 8008cc2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	015a      	lsls	r2, r3, #5
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d153      	bne.n	8008d88 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	791b      	ldrb	r3, [r3, #4]
 8008cfa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008cfc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	059b      	lsls	r3, r3, #22
 8008d02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d04:	431a      	orrs	r2, r3
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	0159      	lsls	r1, r3, #5
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	440b      	add	r3, r1
 8008d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d12:	4619      	mov	r1, r3
 8008d14:	4b20      	ldr	r3, [pc, #128]	@ (8008d98 <USB_ActivateEndpoint+0x10c>)
 8008d16:	4313      	orrs	r3, r2
 8008d18:	600b      	str	r3, [r1, #0]
 8008d1a:	e035      	b.n	8008d88 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d22:	69da      	ldr	r2, [r3, #28]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	f003 030f 	and.w	r3, r3, #15
 8008d2c:	2101      	movs	r1, #1
 8008d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d32:	041b      	lsls	r3, r3, #16
 8008d34:	68f9      	ldr	r1, [r7, #12]
 8008d36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	015a      	lsls	r2, r3, #5
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	4413      	add	r3, r2
 8008d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d119      	bne.n	8008d88 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	015a      	lsls	r2, r3, #5
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	791b      	ldrb	r3, [r3, #4]
 8008d6e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008d70:	430b      	orrs	r3, r1
 8008d72:	431a      	orrs	r2, r3
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	0159      	lsls	r1, r3, #5
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	440b      	add	r3, r1
 8008d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d80:	4619      	mov	r1, r3
 8008d82:	4b05      	ldr	r3, [pc, #20]	@ (8008d98 <USB_ActivateEndpoint+0x10c>)
 8008d84:	4313      	orrs	r3, r2
 8008d86:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	10008000 	.word	0x10008000

08008d9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	785b      	ldrb	r3, [r3, #1]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d161      	bne.n	8008e7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	015a      	lsls	r2, r3, #5
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008dce:	d11f      	bne.n	8008e10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	015a      	lsls	r2, r3, #5
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	0151      	lsls	r1, r2, #5
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	440a      	add	r2, r1
 8008de6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008dee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	015a      	lsls	r2, r3, #5
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	0151      	lsls	r1, r2, #5
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	440a      	add	r2, r1
 8008e06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	f003 030f 	and.w	r3, r3, #15
 8008e20:	2101      	movs	r1, #1
 8008e22:	fa01 f303 	lsl.w	r3, r1, r3
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	43db      	mvns	r3, r3
 8008e2a:	68f9      	ldr	r1, [r7, #12]
 8008e2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e30:	4013      	ands	r3, r2
 8008e32:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e3a:	69da      	ldr	r2, [r3, #28]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	f003 030f 	and.w	r3, r3, #15
 8008e44:	2101      	movs	r1, #1
 8008e46:	fa01 f303 	lsl.w	r3, r1, r3
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	43db      	mvns	r3, r3
 8008e4e:	68f9      	ldr	r1, [r7, #12]
 8008e50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e54:	4013      	ands	r3, r2
 8008e56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	015a      	lsls	r2, r3, #5
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	0159      	lsls	r1, r3, #5
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	440b      	add	r3, r1
 8008e6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e72:	4619      	mov	r1, r3
 8008e74:	4b35      	ldr	r3, [pc, #212]	@ (8008f4c <USB_DeactivateEndpoint+0x1b0>)
 8008e76:	4013      	ands	r3, r2
 8008e78:	600b      	str	r3, [r1, #0]
 8008e7a:	e060      	b.n	8008f3e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e92:	d11f      	bne.n	8008ed4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68ba      	ldr	r2, [r7, #8]
 8008ea4:	0151      	lsls	r1, r2, #5
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	440a      	add	r2, r1
 8008eaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008eae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008eb2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68ba      	ldr	r2, [r7, #8]
 8008ec4:	0151      	lsls	r1, r2, #5
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	440a      	add	r2, r1
 8008eca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ece:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ed2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008eda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	f003 030f 	and.w	r3, r3, #15
 8008ee4:	2101      	movs	r1, #1
 8008ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8008eea:	041b      	lsls	r3, r3, #16
 8008eec:	43db      	mvns	r3, r3
 8008eee:	68f9      	ldr	r1, [r7, #12]
 8008ef0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008efe:	69da      	ldr	r2, [r3, #28]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	f003 030f 	and.w	r3, r3, #15
 8008f08:	2101      	movs	r1, #1
 8008f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f0e:	041b      	lsls	r3, r3, #16
 8008f10:	43db      	mvns	r3, r3
 8008f12:	68f9      	ldr	r1, [r7, #12]
 8008f14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f18:	4013      	ands	r3, r2
 8008f1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	0159      	lsls	r1, r3, #5
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	440b      	add	r3, r1
 8008f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f36:	4619      	mov	r1, r3
 8008f38:	4b05      	ldr	r3, [pc, #20]	@ (8008f50 <USB_DeactivateEndpoint+0x1b4>)
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	ec337800 	.word	0xec337800
 8008f50:	eff37800 	.word	0xeff37800

08008f54 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b08a      	sub	sp, #40	@ 0x28
 8008f58:	af02      	add	r7, sp, #8
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	785b      	ldrb	r3, [r3, #1]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	f040 8181 	bne.w	8009278 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d132      	bne.n	8008fe4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f8a:	691a      	ldr	r2, [r3, #16]
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	0159      	lsls	r1, r3, #5
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	440b      	add	r3, r1
 8008f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f98:	4619      	mov	r1, r3
 8008f9a:	4ba5      	ldr	r3, [pc, #660]	@ (8009230 <USB_EPStartXfer+0x2dc>)
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	015a      	lsls	r2, r3, #5
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	69ba      	ldr	r2, [r7, #24]
 8008fb0:	0151      	lsls	r1, r2, #5
 8008fb2:	69fa      	ldr	r2, [r7, #28]
 8008fb4:	440a      	add	r2, r1
 8008fb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008fbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	015a      	lsls	r2, r3, #5
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fcc:	691a      	ldr	r2, [r3, #16]
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	0159      	lsls	r1, r3, #5
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	440b      	add	r3, r1
 8008fd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fda:	4619      	mov	r1, r3
 8008fdc:	4b95      	ldr	r3, [pc, #596]	@ (8009234 <USB_EPStartXfer+0x2e0>)
 8008fde:	4013      	ands	r3, r2
 8008fe0:	610b      	str	r3, [r1, #16]
 8008fe2:	e092      	b.n	800910a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ff0:	691a      	ldr	r2, [r3, #16]
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	0159      	lsls	r1, r3, #5
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	440b      	add	r3, r1
 8008ffa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ffe:	4619      	mov	r1, r3
 8009000:	4b8c      	ldr	r3, [pc, #560]	@ (8009234 <USB_EPStartXfer+0x2e0>)
 8009002:	4013      	ands	r3, r2
 8009004:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	4413      	add	r3, r2
 800900e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009012:	691a      	ldr	r2, [r3, #16]
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	0159      	lsls	r1, r3, #5
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	440b      	add	r3, r1
 800901c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009020:	4619      	mov	r1, r3
 8009022:	4b83      	ldr	r3, [pc, #524]	@ (8009230 <USB_EPStartXfer+0x2dc>)
 8009024:	4013      	ands	r3, r2
 8009026:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d11a      	bne.n	8009064 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	691a      	ldr	r2, [r3, #16]
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	429a      	cmp	r2, r3
 8009038:	d903      	bls.n	8009042 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	689a      	ldr	r2, [r3, #8]
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	015a      	lsls	r2, r3, #5
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	4413      	add	r3, r2
 800904a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	69ba      	ldr	r2, [r7, #24]
 8009052:	0151      	lsls	r1, r2, #5
 8009054:	69fa      	ldr	r2, [r7, #28]
 8009056:	440a      	add	r2, r1
 8009058:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800905c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009060:	6113      	str	r3, [r2, #16]
 8009062:	e01b      	b.n	800909c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	015a      	lsls	r2, r3, #5
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	4413      	add	r3, r2
 800906c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009070:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	6919      	ldr	r1, [r3, #16]
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	440b      	add	r3, r1
 800907c:	1e59      	subs	r1, r3, #1
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	fbb1 f3f3 	udiv	r3, r1, r3
 8009086:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009088:	4b6b      	ldr	r3, [pc, #428]	@ (8009238 <USB_EPStartXfer+0x2e4>)
 800908a:	400b      	ands	r3, r1
 800908c:	69b9      	ldr	r1, [r7, #24]
 800908e:	0148      	lsls	r0, r1, #5
 8009090:	69f9      	ldr	r1, [r7, #28]
 8009092:	4401      	add	r1, r0
 8009094:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009098:	4313      	orrs	r3, r2
 800909a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	015a      	lsls	r2, r3, #5
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	4413      	add	r3, r2
 80090a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090a8:	691a      	ldr	r2, [r3, #16]
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090b2:	69b9      	ldr	r1, [r7, #24]
 80090b4:	0148      	lsls	r0, r1, #5
 80090b6:	69f9      	ldr	r1, [r7, #28]
 80090b8:	4401      	add	r1, r0
 80090ba:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80090be:	4313      	orrs	r3, r2
 80090c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	791b      	ldrb	r3, [r3, #4]
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d11f      	bne.n	800910a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	015a      	lsls	r2, r3, #5
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	4413      	add	r3, r2
 80090d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	69ba      	ldr	r2, [r7, #24]
 80090da:	0151      	lsls	r1, r2, #5
 80090dc:	69fa      	ldr	r2, [r7, #28]
 80090de:	440a      	add	r2, r1
 80090e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090e4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80090e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	015a      	lsls	r2, r3, #5
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	4413      	add	r3, r2
 80090f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	69ba      	ldr	r2, [r7, #24]
 80090fa:	0151      	lsls	r1, r2, #5
 80090fc:	69fa      	ldr	r2, [r7, #28]
 80090fe:	440a      	add	r2, r1
 8009100:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009104:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009108:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800910a:	79fb      	ldrb	r3, [r7, #7]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d14b      	bne.n	80091a8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	69db      	ldr	r3, [r3, #28]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d009      	beq.n	800912c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	015a      	lsls	r2, r3, #5
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	4413      	add	r3, r2
 8009120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009124:	461a      	mov	r2, r3
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	69db      	ldr	r3, [r3, #28]
 800912a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	791b      	ldrb	r3, [r3, #4]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d128      	bne.n	8009186 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009140:	2b00      	cmp	r3, #0
 8009142:	d110      	bne.n	8009166 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	015a      	lsls	r2, r3, #5
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	4413      	add	r3, r2
 800914c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	69ba      	ldr	r2, [r7, #24]
 8009154:	0151      	lsls	r1, r2, #5
 8009156:	69fa      	ldr	r2, [r7, #28]
 8009158:	440a      	add	r2, r1
 800915a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800915e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009162:	6013      	str	r3, [r2, #0]
 8009164:	e00f      	b.n	8009186 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	015a      	lsls	r2, r3, #5
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	4413      	add	r3, r2
 800916e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	69ba      	ldr	r2, [r7, #24]
 8009176:	0151      	lsls	r1, r2, #5
 8009178:	69fa      	ldr	r2, [r7, #28]
 800917a:	440a      	add	r2, r1
 800917c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009184:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	4413      	add	r3, r2
 800918e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	69ba      	ldr	r2, [r7, #24]
 8009196:	0151      	lsls	r1, r2, #5
 8009198:	69fa      	ldr	r2, [r7, #28]
 800919a:	440a      	add	r2, r1
 800919c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80091a4:	6013      	str	r3, [r2, #0]
 80091a6:	e16a      	b.n	800947e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	69ba      	ldr	r2, [r7, #24]
 80091b8:	0151      	lsls	r1, r2, #5
 80091ba:	69fa      	ldr	r2, [r7, #28]
 80091bc:	440a      	add	r2, r1
 80091be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80091c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	791b      	ldrb	r3, [r3, #4]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d015      	beq.n	80091fc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f000 8152 	beq.w	800947e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	f003 030f 	and.w	r3, r3, #15
 80091ea:	2101      	movs	r1, #1
 80091ec:	fa01 f303 	lsl.w	r3, r1, r3
 80091f0:	69f9      	ldr	r1, [r7, #28]
 80091f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80091f6:	4313      	orrs	r3, r2
 80091f8:	634b      	str	r3, [r1, #52]	@ 0x34
 80091fa:	e140      	b.n	800947e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009208:	2b00      	cmp	r3, #0
 800920a:	d117      	bne.n	800923c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	4413      	add	r3, r2
 8009214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	69ba      	ldr	r2, [r7, #24]
 800921c:	0151      	lsls	r1, r2, #5
 800921e:	69fa      	ldr	r2, [r7, #28]
 8009220:	440a      	add	r2, r1
 8009222:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009226:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800922a:	6013      	str	r3, [r2, #0]
 800922c:	e016      	b.n	800925c <USB_EPStartXfer+0x308>
 800922e:	bf00      	nop
 8009230:	e007ffff 	.word	0xe007ffff
 8009234:	fff80000 	.word	0xfff80000
 8009238:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	015a      	lsls	r2, r3, #5
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	4413      	add	r3, r2
 8009244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	69ba      	ldr	r2, [r7, #24]
 800924c:	0151      	lsls	r1, r2, #5
 800924e:	69fa      	ldr	r2, [r7, #28]
 8009250:	440a      	add	r2, r1
 8009252:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800925a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	68d9      	ldr	r1, [r3, #12]
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	781a      	ldrb	r2, [r3, #0]
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	b298      	uxth	r0, r3
 800926a:	79fb      	ldrb	r3, [r7, #7]
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	4603      	mov	r3, r0
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f000 f9b9 	bl	80095e8 <USB_WritePacket>
 8009276:	e102      	b.n	800947e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	015a      	lsls	r2, r3, #5
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	4413      	add	r3, r2
 8009280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009284:	691a      	ldr	r2, [r3, #16]
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	0159      	lsls	r1, r3, #5
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	440b      	add	r3, r1
 800928e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009292:	4619      	mov	r1, r3
 8009294:	4b7c      	ldr	r3, [pc, #496]	@ (8009488 <USB_EPStartXfer+0x534>)
 8009296:	4013      	ands	r3, r2
 8009298:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	015a      	lsls	r2, r3, #5
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	4413      	add	r3, r2
 80092a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092a6:	691a      	ldr	r2, [r3, #16]
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	0159      	lsls	r1, r3, #5
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	440b      	add	r3, r1
 80092b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092b4:	4619      	mov	r1, r3
 80092b6:	4b75      	ldr	r3, [pc, #468]	@ (800948c <USB_EPStartXfer+0x538>)
 80092b8:	4013      	ands	r3, r2
 80092ba:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d12f      	bne.n	8009322 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d003      	beq.n	80092d2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	689a      	ldr	r2, [r3, #8]
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	689a      	ldr	r2, [r3, #8]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	015a      	lsls	r2, r3, #5
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	4413      	add	r3, r2
 80092e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092e6:	691a      	ldr	r2, [r3, #16]
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092f0:	69b9      	ldr	r1, [r7, #24]
 80092f2:	0148      	lsls	r0, r1, #5
 80092f4:	69f9      	ldr	r1, [r7, #28]
 80092f6:	4401      	add	r1, r0
 80092f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80092fc:	4313      	orrs	r3, r2
 80092fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	4413      	add	r3, r2
 8009308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	69ba      	ldr	r2, [r7, #24]
 8009310:	0151      	lsls	r1, r2, #5
 8009312:	69fa      	ldr	r2, [r7, #28]
 8009314:	440a      	add	r2, r1
 8009316:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800931a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800931e:	6113      	str	r3, [r2, #16]
 8009320:	e05f      	b.n	80093e2 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d123      	bne.n	8009372 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	015a      	lsls	r2, r3, #5
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	4413      	add	r3, r2
 8009332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009336:	691a      	ldr	r2, [r3, #16]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009340:	69b9      	ldr	r1, [r7, #24]
 8009342:	0148      	lsls	r0, r1, #5
 8009344:	69f9      	ldr	r1, [r7, #28]
 8009346:	4401      	add	r1, r0
 8009348:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800934c:	4313      	orrs	r3, r2
 800934e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	015a      	lsls	r2, r3, #5
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	4413      	add	r3, r2
 8009358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	69ba      	ldr	r2, [r7, #24]
 8009360:	0151      	lsls	r1, r2, #5
 8009362:	69fa      	ldr	r2, [r7, #28]
 8009364:	440a      	add	r2, r1
 8009366:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800936a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800936e:	6113      	str	r3, [r2, #16]
 8009370:	e037      	b.n	80093e2 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	691a      	ldr	r2, [r3, #16]
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	4413      	add	r3, r2
 800937c:	1e5a      	subs	r2, r3, #1
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	fbb2 f3f3 	udiv	r3, r2, r3
 8009386:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	8afa      	ldrh	r2, [r7, #22]
 800938e:	fb03 f202 	mul.w	r2, r3, r2
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	015a      	lsls	r2, r3, #5
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	4413      	add	r3, r2
 800939e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093a2:	691a      	ldr	r2, [r3, #16]
 80093a4:	8afb      	ldrh	r3, [r7, #22]
 80093a6:	04d9      	lsls	r1, r3, #19
 80093a8:	4b39      	ldr	r3, [pc, #228]	@ (8009490 <USB_EPStartXfer+0x53c>)
 80093aa:	400b      	ands	r3, r1
 80093ac:	69b9      	ldr	r1, [r7, #24]
 80093ae:	0148      	lsls	r0, r1, #5
 80093b0:	69f9      	ldr	r1, [r7, #28]
 80093b2:	4401      	add	r1, r0
 80093b4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80093b8:	4313      	orrs	r3, r2
 80093ba:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093c8:	691a      	ldr	r2, [r3, #16]
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	6a1b      	ldr	r3, [r3, #32]
 80093ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093d2:	69b9      	ldr	r1, [r7, #24]
 80093d4:	0148      	lsls	r0, r1, #5
 80093d6:	69f9      	ldr	r1, [r7, #28]
 80093d8:	4401      	add	r1, r0
 80093da:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80093de:	4313      	orrs	r3, r2
 80093e0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80093e2:	79fb      	ldrb	r3, [r7, #7]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d10d      	bne.n	8009404 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d009      	beq.n	8009404 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	68d9      	ldr	r1, [r3, #12]
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	015a      	lsls	r2, r3, #5
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	4413      	add	r3, r2
 80093fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009400:	460a      	mov	r2, r1
 8009402:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	791b      	ldrb	r3, [r3, #4]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d128      	bne.n	800945e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009418:	2b00      	cmp	r3, #0
 800941a:	d110      	bne.n	800943e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	015a      	lsls	r2, r3, #5
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	4413      	add	r3, r2
 8009424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69ba      	ldr	r2, [r7, #24]
 800942c:	0151      	lsls	r1, r2, #5
 800942e:	69fa      	ldr	r2, [r7, #28]
 8009430:	440a      	add	r2, r1
 8009432:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009436:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800943a:	6013      	str	r3, [r2, #0]
 800943c:	e00f      	b.n	800945e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	015a      	lsls	r2, r3, #5
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	4413      	add	r3, r2
 8009446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	69ba      	ldr	r2, [r7, #24]
 800944e:	0151      	lsls	r1, r2, #5
 8009450:	69fa      	ldr	r2, [r7, #28]
 8009452:	440a      	add	r2, r1
 8009454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800945c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	015a      	lsls	r2, r3, #5
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	4413      	add	r3, r2
 8009466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	0151      	lsls	r1, r2, #5
 8009470:	69fa      	ldr	r2, [r7, #28]
 8009472:	440a      	add	r2, r1
 8009474:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009478:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800947c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3720      	adds	r7, #32
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	fff80000 	.word	0xfff80000
 800948c:	e007ffff 	.word	0xe007ffff
 8009490:	1ff80000 	.word	0x1ff80000

08009494 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009494:	b480      	push	{r7}
 8009496:	b087      	sub	sp, #28
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800949e:	2300      	movs	r3, #0
 80094a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80094a2:	2300      	movs	r3, #0
 80094a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	785b      	ldrb	r3, [r3, #1]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d14a      	bne.n	8009548 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	015a      	lsls	r2, r3, #5
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	4413      	add	r3, r2
 80094bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094ca:	f040 8086 	bne.w	80095da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	7812      	ldrb	r2, [r2, #0]
 80094e2:	0151      	lsls	r1, r2, #5
 80094e4:	693a      	ldr	r2, [r7, #16]
 80094e6:	440a      	add	r2, r1
 80094e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80094f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	015a      	lsls	r2, r3, #5
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	4413      	add	r3, r2
 80094fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	7812      	ldrb	r2, [r2, #0]
 8009506:	0151      	lsls	r1, r2, #5
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	440a      	add	r2, r1
 800950c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009510:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009514:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	3301      	adds	r3, #1
 800951a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009522:	4293      	cmp	r3, r2
 8009524:	d902      	bls.n	800952c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	75fb      	strb	r3, [r7, #23]
          break;
 800952a:	e056      	b.n	80095da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	015a      	lsls	r2, r3, #5
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	4413      	add	r3, r2
 8009536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009540:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009544:	d0e7      	beq.n	8009516 <USB_EPStopXfer+0x82>
 8009546:	e048      	b.n	80095da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	015a      	lsls	r2, r3, #5
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	4413      	add	r3, r2
 8009552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800955c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009560:	d13b      	bne.n	80095da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	015a      	lsls	r2, r3, #5
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	4413      	add	r3, r2
 800956c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	7812      	ldrb	r2, [r2, #0]
 8009576:	0151      	lsls	r1, r2, #5
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	440a      	add	r2, r1
 800957c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009580:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009584:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	4413      	add	r3, r2
 8009590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	683a      	ldr	r2, [r7, #0]
 8009598:	7812      	ldrb	r2, [r2, #0]
 800959a:	0151      	lsls	r1, r2, #5
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	440a      	add	r2, r1
 80095a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	3301      	adds	r3, #1
 80095ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d902      	bls.n	80095c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	75fb      	strb	r3, [r7, #23]
          break;
 80095be:	e00c      	b.n	80095da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	015a      	lsls	r2, r3, #5
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	4413      	add	r3, r2
 80095ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095d8:	d0e7      	beq.n	80095aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80095da:	7dfb      	ldrb	r3, [r7, #23]
}
 80095dc:	4618      	mov	r0, r3
 80095de:	371c      	adds	r7, #28
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b089      	sub	sp, #36	@ 0x24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	4611      	mov	r1, r2
 80095f4:	461a      	mov	r2, r3
 80095f6:	460b      	mov	r3, r1
 80095f8:	71fb      	strb	r3, [r7, #7]
 80095fa:	4613      	mov	r3, r2
 80095fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009606:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800960a:	2b00      	cmp	r3, #0
 800960c:	d123      	bne.n	8009656 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800960e:	88bb      	ldrh	r3, [r7, #4]
 8009610:	3303      	adds	r3, #3
 8009612:	089b      	lsrs	r3, r3, #2
 8009614:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009616:	2300      	movs	r3, #0
 8009618:	61bb      	str	r3, [r7, #24]
 800961a:	e018      	b.n	800964e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800961c:	79fb      	ldrb	r3, [r7, #7]
 800961e:	031a      	lsls	r2, r3, #12
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	4413      	add	r3, r2
 8009624:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009628:	461a      	mov	r2, r3
 800962a:	69fb      	ldr	r3, [r7, #28]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	3301      	adds	r3, #1
 8009634:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	3301      	adds	r3, #1
 800963a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	3301      	adds	r3, #1
 8009640:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	3301      	adds	r3, #1
 8009646:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	3301      	adds	r3, #1
 800964c:	61bb      	str	r3, [r7, #24]
 800964e:	69ba      	ldr	r2, [r7, #24]
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	429a      	cmp	r2, r3
 8009654:	d3e2      	bcc.n	800961c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3724      	adds	r7, #36	@ 0x24
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009664:	b480      	push	{r7}
 8009666:	b08b      	sub	sp, #44	@ 0x2c
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	4613      	mov	r3, r2
 8009670:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800967a:	88fb      	ldrh	r3, [r7, #6]
 800967c:	089b      	lsrs	r3, r3, #2
 800967e:	b29b      	uxth	r3, r3
 8009680:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009682:	88fb      	ldrh	r3, [r7, #6]
 8009684:	f003 0303 	and.w	r3, r3, #3
 8009688:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800968a:	2300      	movs	r3, #0
 800968c:	623b      	str	r3, [r7, #32]
 800968e:	e014      	b.n	80096ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969a:	601a      	str	r2, [r3, #0]
    pDest++;
 800969c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969e:	3301      	adds	r3, #1
 80096a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80096a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a4:	3301      	adds	r3, #1
 80096a6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80096a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096aa:	3301      	adds	r3, #1
 80096ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80096ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b0:	3301      	adds	r3, #1
 80096b2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	3301      	adds	r3, #1
 80096b8:	623b      	str	r3, [r7, #32]
 80096ba:	6a3a      	ldr	r2, [r7, #32]
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d3e6      	bcc.n	8009690 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80096c2:	8bfb      	ldrh	r3, [r7, #30]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d01e      	beq.n	8009706 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80096c8:	2300      	movs	r3, #0
 80096ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096d2:	461a      	mov	r2, r3
 80096d4:	f107 0310 	add.w	r3, r7, #16
 80096d8:	6812      	ldr	r2, [r2, #0]
 80096da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	6a3b      	ldr	r3, [r7, #32]
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	00db      	lsls	r3, r3, #3
 80096e4:	fa22 f303 	lsr.w	r3, r2, r3
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ec:	701a      	strb	r2, [r3, #0]
      i++;
 80096ee:	6a3b      	ldr	r3, [r7, #32]
 80096f0:	3301      	adds	r3, #1
 80096f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80096f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f6:	3301      	adds	r3, #1
 80096f8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80096fa:	8bfb      	ldrh	r3, [r7, #30]
 80096fc:	3b01      	subs	r3, #1
 80096fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009700:	8bfb      	ldrh	r3, [r7, #30]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1ea      	bne.n	80096dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009708:	4618      	mov	r0, r3
 800970a:	372c      	adds	r7, #44	@ 0x2c
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	785b      	ldrb	r3, [r3, #1]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d12c      	bne.n	800978a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	015a      	lsls	r2, r3, #5
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4413      	add	r3, r2
 8009738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	db12      	blt.n	8009768 <USB_EPSetStall+0x54>
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00f      	beq.n	8009768 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	015a      	lsls	r2, r3, #5
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	4413      	add	r3, r2
 8009750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	0151      	lsls	r1, r2, #5
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	440a      	add	r2, r1
 800975e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009762:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009766:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	4413      	add	r3, r2
 8009770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	0151      	lsls	r1, r2, #5
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	440a      	add	r2, r1
 800977e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009782:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009786:	6013      	str	r3, [r2, #0]
 8009788:	e02b      	b.n	80097e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	015a      	lsls	r2, r3, #5
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	4413      	add	r3, r2
 8009792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	db12      	blt.n	80097c2 <USB_EPSetStall+0xae>
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d00f      	beq.n	80097c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	015a      	lsls	r2, r3, #5
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	0151      	lsls	r1, r2, #5
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	440a      	add	r2, r1
 80097b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80097c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	015a      	lsls	r2, r3, #5
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	4413      	add	r3, r2
 80097ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	0151      	lsls	r1, r2, #5
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	440a      	add	r2, r1
 80097d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80097e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3714      	adds	r7, #20
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	785b      	ldrb	r3, [r3, #1]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d128      	bne.n	800985e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	015a      	lsls	r2, r3, #5
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4413      	add	r3, r2
 8009814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	0151      	lsls	r1, r2, #5
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	440a      	add	r2, r1
 8009822:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009826:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800982a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	791b      	ldrb	r3, [r3, #4]
 8009830:	2b03      	cmp	r3, #3
 8009832:	d003      	beq.n	800983c <USB_EPClearStall+0x4c>
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	791b      	ldrb	r3, [r3, #4]
 8009838:	2b02      	cmp	r3, #2
 800983a:	d138      	bne.n	80098ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	015a      	lsls	r2, r3, #5
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	4413      	add	r3, r2
 8009844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	0151      	lsls	r1, r2, #5
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	440a      	add	r2, r1
 8009852:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800985a:	6013      	str	r3, [r2, #0]
 800985c:	e027      	b.n	80098ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	015a      	lsls	r2, r3, #5
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	4413      	add	r3, r2
 8009866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68ba      	ldr	r2, [r7, #8]
 800986e:	0151      	lsls	r1, r2, #5
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	440a      	add	r2, r1
 8009874:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009878:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800987c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	791b      	ldrb	r3, [r3, #4]
 8009882:	2b03      	cmp	r3, #3
 8009884:	d003      	beq.n	800988e <USB_EPClearStall+0x9e>
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	791b      	ldrb	r3, [r3, #4]
 800988a:	2b02      	cmp	r3, #2
 800988c:	d10f      	bne.n	80098ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	015a      	lsls	r2, r3, #5
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	4413      	add	r3, r2
 8009896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	0151      	lsls	r1, r2, #5
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	440a      	add	r2, r1
 80098a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3714      	adds	r7, #20
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098da:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80098de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	78fb      	ldrb	r3, [r7, #3]
 80098ea:	011b      	lsls	r3, r3, #4
 80098ec:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80098f0:	68f9      	ldr	r1, [r7, #12]
 80098f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80098f6:	4313      	orrs	r3, r2
 80098f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80098fa:	2300      	movs	r3, #0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3714      	adds	r7, #20
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009922:	f023 0303 	bic.w	r3, r3, #3
 8009926:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009936:	f023 0302 	bic.w	r3, r3, #2
 800993a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3714      	adds	r7, #20
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800994a:	b480      	push	{r7}
 800994c:	b085      	sub	sp, #20
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009964:	f023 0303 	bic.w	r3, r3, #3
 8009968:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009978:	f043 0302 	orr.w	r3, r3, #2
 800997c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3714      	adds	r7, #20
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	695b      	ldr	r3, [r3, #20]
 8009998:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	4013      	ands	r3, r2
 80099a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80099a4:	68fb      	ldr	r3, [r7, #12]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b085      	sub	sp, #20
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099ce:	69db      	ldr	r3, [r3, #28]
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	4013      	ands	r3, r2
 80099d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	0c1b      	lsrs	r3, r3, #16
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3714      	adds	r7, #20
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b085      	sub	sp, #20
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a02:	69db      	ldr	r3, [r3, #28]
 8009a04:	68ba      	ldr	r2, [r7, #8]
 8009a06:	4013      	ands	r3, r2
 8009a08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	b29b      	uxth	r3, r3
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3714      	adds	r7, #20
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr

08009a1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a1a:	b480      	push	{r7}
 8009a1c:	b085      	sub	sp, #20
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	460b      	mov	r3, r1
 8009a24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009a2a:	78fb      	ldrb	r3, [r7, #3]
 8009a2c:	015a      	lsls	r2, r3, #5
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	4413      	add	r3, r2
 8009a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	4013      	ands	r3, r2
 8009a46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a48:	68bb      	ldr	r3, [r7, #8]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b087      	sub	sp, #28
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	460b      	mov	r3, r1
 8009a60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009a7a:	78fb      	ldrb	r3, [r7, #3]
 8009a7c:	f003 030f 	and.w	r3, r3, #15
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	fa22 f303 	lsr.w	r3, r2, r3
 8009a86:	01db      	lsls	r3, r3, #7
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	693a      	ldr	r2, [r7, #16]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	015a      	lsls	r2, r3, #5
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	4413      	add	r3, r2
 8009a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009aa4:	68bb      	ldr	r3, [r7, #8]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	371c      	adds	r7, #28
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr

08009ab2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ab2:	b480      	push	{r7}
 8009ab4:	b083      	sub	sp, #12
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	695b      	ldr	r3, [r3, #20]
 8009abe:	f003 0301 	and.w	r3, r3, #1
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
	...

08009ad0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aea:	4619      	mov	r1, r3
 8009aec:	4b09      	ldr	r3, [pc, #36]	@ (8009b14 <USB_ActivateSetup+0x44>)
 8009aee:	4013      	ands	r3, r2
 8009af0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3714      	adds	r7, #20
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr
 8009b14:	fffff800 	.word	0xfffff800

08009b18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b087      	sub	sp, #28
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	460b      	mov	r3, r1
 8009b22:	607a      	str	r2, [r7, #4]
 8009b24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	333c      	adds	r3, #60	@ 0x3c
 8009b2e:	3304      	adds	r3, #4
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	4a26      	ldr	r2, [pc, #152]	@ (8009bd0 <USB_EP0_OutStart+0xb8>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d90a      	bls.n	8009b52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b4c:	d101      	bne.n	8009b52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	e037      	b.n	8009bc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b58:	461a      	mov	r2, r3
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b80:	f043 0318 	orr.w	r3, r3, #24
 8009b84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	697a      	ldr	r2, [r7, #20]
 8009b90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b94:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009b98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009b9a:	7afb      	ldrb	r3, [r7, #11]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d10f      	bne.n	8009bc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bba:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009bbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	371c      	adds	r7, #28
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	4f54300a 	.word	0x4f54300a

08009bd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	3301      	adds	r3, #1
 8009be4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009bec:	d901      	bls.n	8009bf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	e01b      	b.n	8009c2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	daf2      	bge.n	8009be0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	691b      	ldr	r3, [r3, #16]
 8009c02:	f043 0201 	orr.w	r2, r3, #1
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c16:	d901      	bls.n	8009c1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	e006      	b.n	8009c2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	f003 0301 	and.w	r3, r3, #1
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d0f0      	beq.n	8009c0a <USB_CoreReset+0x36>

  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
	...

08009c38 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009c38:	b5b0      	push	{r4, r5, r7, lr}
 8009c3a:	b08c      	sub	sp, #48	@ 0x30
 8009c3c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009c3e:	4b8f      	ldr	r3, [pc, #572]	@ (8009e7c <MX_LWIP_Init+0x244>)
 8009c40:	22c0      	movs	r2, #192	@ 0xc0
 8009c42:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009c44:	4b8d      	ldr	r3, [pc, #564]	@ (8009e7c <MX_LWIP_Init+0x244>)
 8009c46:	22a8      	movs	r2, #168	@ 0xa8
 8009c48:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8009c4a:	4b8c      	ldr	r3, [pc, #560]	@ (8009e7c <MX_LWIP_Init+0x244>)
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8009c50:	4b8a      	ldr	r3, [pc, #552]	@ (8009e7c <MX_LWIP_Init+0x244>)
 8009c52:	227b      	movs	r2, #123	@ 0x7b
 8009c54:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009c56:	4b8a      	ldr	r3, [pc, #552]	@ (8009e80 <MX_LWIP_Init+0x248>)
 8009c58:	22ff      	movs	r2, #255	@ 0xff
 8009c5a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009c5c:	4b88      	ldr	r3, [pc, #544]	@ (8009e80 <MX_LWIP_Init+0x248>)
 8009c5e:	22ff      	movs	r2, #255	@ 0xff
 8009c60:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009c62:	4b87      	ldr	r3, [pc, #540]	@ (8009e80 <MX_LWIP_Init+0x248>)
 8009c64:	22ff      	movs	r2, #255	@ 0xff
 8009c66:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009c68:	4b85      	ldr	r3, [pc, #532]	@ (8009e80 <MX_LWIP_Init+0x248>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8009c6e:	4b85      	ldr	r3, [pc, #532]	@ (8009e84 <MX_LWIP_Init+0x24c>)
 8009c70:	22c0      	movs	r2, #192	@ 0xc0
 8009c72:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009c74:	4b83      	ldr	r3, [pc, #524]	@ (8009e84 <MX_LWIP_Init+0x24c>)
 8009c76:	22a8      	movs	r2, #168	@ 0xa8
 8009c78:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8009c7a:	4b82      	ldr	r3, [pc, #520]	@ (8009e84 <MX_LWIP_Init+0x24c>)
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8009c80:	4b80      	ldr	r3, [pc, #512]	@ (8009e84 <MX_LWIP_Init+0x24c>)
 8009c82:	2201      	movs	r2, #1
 8009c84:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009c86:	2100      	movs	r1, #0
 8009c88:	2000      	movs	r0, #0
 8009c8a:	f008 fa4d 	bl	8012128 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009c8e:	4b7b      	ldr	r3, [pc, #492]	@ (8009e7c <MX_LWIP_Init+0x244>)
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	061a      	lsls	r2, r3, #24
 8009c94:	4b79      	ldr	r3, [pc, #484]	@ (8009e7c <MX_LWIP_Init+0x244>)
 8009c96:	785b      	ldrb	r3, [r3, #1]
 8009c98:	041b      	lsls	r3, r3, #16
 8009c9a:	431a      	orrs	r2, r3
 8009c9c:	4b77      	ldr	r3, [pc, #476]	@ (8009e7c <MX_LWIP_Init+0x244>)
 8009c9e:	789b      	ldrb	r3, [r3, #2]
 8009ca0:	021b      	lsls	r3, r3, #8
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	4a75      	ldr	r2, [pc, #468]	@ (8009e7c <MX_LWIP_Init+0x244>)
 8009ca6:	78d2      	ldrb	r2, [r2, #3]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	061a      	lsls	r2, r3, #24
 8009cac:	4b73      	ldr	r3, [pc, #460]	@ (8009e7c <MX_LWIP_Init+0x244>)
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	0619      	lsls	r1, r3, #24
 8009cb2:	4b72      	ldr	r3, [pc, #456]	@ (8009e7c <MX_LWIP_Init+0x244>)
 8009cb4:	785b      	ldrb	r3, [r3, #1]
 8009cb6:	041b      	lsls	r3, r3, #16
 8009cb8:	4319      	orrs	r1, r3
 8009cba:	4b70      	ldr	r3, [pc, #448]	@ (8009e7c <MX_LWIP_Init+0x244>)
 8009cbc:	789b      	ldrb	r3, [r3, #2]
 8009cbe:	021b      	lsls	r3, r3, #8
 8009cc0:	430b      	orrs	r3, r1
 8009cc2:	496e      	ldr	r1, [pc, #440]	@ (8009e7c <MX_LWIP_Init+0x244>)
 8009cc4:	78c9      	ldrb	r1, [r1, #3]
 8009cc6:	430b      	orrs	r3, r1
 8009cc8:	021b      	lsls	r3, r3, #8
 8009cca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009cce:	431a      	orrs	r2, r3
 8009cd0:	4b6a      	ldr	r3, [pc, #424]	@ (8009e7c <MX_LWIP_Init+0x244>)
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	0619      	lsls	r1, r3, #24
 8009cd6:	4b69      	ldr	r3, [pc, #420]	@ (8009e7c <MX_LWIP_Init+0x244>)
 8009cd8:	785b      	ldrb	r3, [r3, #1]
 8009cda:	041b      	lsls	r3, r3, #16
 8009cdc:	4319      	orrs	r1, r3
 8009cde:	4b67      	ldr	r3, [pc, #412]	@ (8009e7c <MX_LWIP_Init+0x244>)
 8009ce0:	789b      	ldrb	r3, [r3, #2]
 8009ce2:	021b      	lsls	r3, r3, #8
 8009ce4:	430b      	orrs	r3, r1
 8009ce6:	4965      	ldr	r1, [pc, #404]	@ (8009e7c <MX_LWIP_Init+0x244>)
 8009ce8:	78c9      	ldrb	r1, [r1, #3]
 8009cea:	430b      	orrs	r3, r1
 8009cec:	0a1b      	lsrs	r3, r3, #8
 8009cee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009cf2:	431a      	orrs	r2, r3
 8009cf4:	4b61      	ldr	r3, [pc, #388]	@ (8009e7c <MX_LWIP_Init+0x244>)
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	0619      	lsls	r1, r3, #24
 8009cfa:	4b60      	ldr	r3, [pc, #384]	@ (8009e7c <MX_LWIP_Init+0x244>)
 8009cfc:	785b      	ldrb	r3, [r3, #1]
 8009cfe:	041b      	lsls	r3, r3, #16
 8009d00:	4319      	orrs	r1, r3
 8009d02:	4b5e      	ldr	r3, [pc, #376]	@ (8009e7c <MX_LWIP_Init+0x244>)
 8009d04:	789b      	ldrb	r3, [r3, #2]
 8009d06:	021b      	lsls	r3, r3, #8
 8009d08:	430b      	orrs	r3, r1
 8009d0a:	495c      	ldr	r1, [pc, #368]	@ (8009e7c <MX_LWIP_Init+0x244>)
 8009d0c:	78c9      	ldrb	r1, [r1, #3]
 8009d0e:	430b      	orrs	r3, r1
 8009d10:	0e1b      	lsrs	r3, r3, #24
 8009d12:	4313      	orrs	r3, r2
 8009d14:	4a5c      	ldr	r2, [pc, #368]	@ (8009e88 <MX_LWIP_Init+0x250>)
 8009d16:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009d18:	4b59      	ldr	r3, [pc, #356]	@ (8009e80 <MX_LWIP_Init+0x248>)
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	061a      	lsls	r2, r3, #24
 8009d1e:	4b58      	ldr	r3, [pc, #352]	@ (8009e80 <MX_LWIP_Init+0x248>)
 8009d20:	785b      	ldrb	r3, [r3, #1]
 8009d22:	041b      	lsls	r3, r3, #16
 8009d24:	431a      	orrs	r2, r3
 8009d26:	4b56      	ldr	r3, [pc, #344]	@ (8009e80 <MX_LWIP_Init+0x248>)
 8009d28:	789b      	ldrb	r3, [r3, #2]
 8009d2a:	021b      	lsls	r3, r3, #8
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	4a54      	ldr	r2, [pc, #336]	@ (8009e80 <MX_LWIP_Init+0x248>)
 8009d30:	78d2      	ldrb	r2, [r2, #3]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	061a      	lsls	r2, r3, #24
 8009d36:	4b52      	ldr	r3, [pc, #328]	@ (8009e80 <MX_LWIP_Init+0x248>)
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	0619      	lsls	r1, r3, #24
 8009d3c:	4b50      	ldr	r3, [pc, #320]	@ (8009e80 <MX_LWIP_Init+0x248>)
 8009d3e:	785b      	ldrb	r3, [r3, #1]
 8009d40:	041b      	lsls	r3, r3, #16
 8009d42:	4319      	orrs	r1, r3
 8009d44:	4b4e      	ldr	r3, [pc, #312]	@ (8009e80 <MX_LWIP_Init+0x248>)
 8009d46:	789b      	ldrb	r3, [r3, #2]
 8009d48:	021b      	lsls	r3, r3, #8
 8009d4a:	430b      	orrs	r3, r1
 8009d4c:	494c      	ldr	r1, [pc, #304]	@ (8009e80 <MX_LWIP_Init+0x248>)
 8009d4e:	78c9      	ldrb	r1, [r1, #3]
 8009d50:	430b      	orrs	r3, r1
 8009d52:	021b      	lsls	r3, r3, #8
 8009d54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009d58:	431a      	orrs	r2, r3
 8009d5a:	4b49      	ldr	r3, [pc, #292]	@ (8009e80 <MX_LWIP_Init+0x248>)
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	0619      	lsls	r1, r3, #24
 8009d60:	4b47      	ldr	r3, [pc, #284]	@ (8009e80 <MX_LWIP_Init+0x248>)
 8009d62:	785b      	ldrb	r3, [r3, #1]
 8009d64:	041b      	lsls	r3, r3, #16
 8009d66:	4319      	orrs	r1, r3
 8009d68:	4b45      	ldr	r3, [pc, #276]	@ (8009e80 <MX_LWIP_Init+0x248>)
 8009d6a:	789b      	ldrb	r3, [r3, #2]
 8009d6c:	021b      	lsls	r3, r3, #8
 8009d6e:	430b      	orrs	r3, r1
 8009d70:	4943      	ldr	r1, [pc, #268]	@ (8009e80 <MX_LWIP_Init+0x248>)
 8009d72:	78c9      	ldrb	r1, [r1, #3]
 8009d74:	430b      	orrs	r3, r1
 8009d76:	0a1b      	lsrs	r3, r3, #8
 8009d78:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009d7c:	431a      	orrs	r2, r3
 8009d7e:	4b40      	ldr	r3, [pc, #256]	@ (8009e80 <MX_LWIP_Init+0x248>)
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	0619      	lsls	r1, r3, #24
 8009d84:	4b3e      	ldr	r3, [pc, #248]	@ (8009e80 <MX_LWIP_Init+0x248>)
 8009d86:	785b      	ldrb	r3, [r3, #1]
 8009d88:	041b      	lsls	r3, r3, #16
 8009d8a:	4319      	orrs	r1, r3
 8009d8c:	4b3c      	ldr	r3, [pc, #240]	@ (8009e80 <MX_LWIP_Init+0x248>)
 8009d8e:	789b      	ldrb	r3, [r3, #2]
 8009d90:	021b      	lsls	r3, r3, #8
 8009d92:	430b      	orrs	r3, r1
 8009d94:	493a      	ldr	r1, [pc, #232]	@ (8009e80 <MX_LWIP_Init+0x248>)
 8009d96:	78c9      	ldrb	r1, [r1, #3]
 8009d98:	430b      	orrs	r3, r1
 8009d9a:	0e1b      	lsrs	r3, r3, #24
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	4a3b      	ldr	r2, [pc, #236]	@ (8009e8c <MX_LWIP_Init+0x254>)
 8009da0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009da2:	4b38      	ldr	r3, [pc, #224]	@ (8009e84 <MX_LWIP_Init+0x24c>)
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	061a      	lsls	r2, r3, #24
 8009da8:	4b36      	ldr	r3, [pc, #216]	@ (8009e84 <MX_LWIP_Init+0x24c>)
 8009daa:	785b      	ldrb	r3, [r3, #1]
 8009dac:	041b      	lsls	r3, r3, #16
 8009dae:	431a      	orrs	r2, r3
 8009db0:	4b34      	ldr	r3, [pc, #208]	@ (8009e84 <MX_LWIP_Init+0x24c>)
 8009db2:	789b      	ldrb	r3, [r3, #2]
 8009db4:	021b      	lsls	r3, r3, #8
 8009db6:	4313      	orrs	r3, r2
 8009db8:	4a32      	ldr	r2, [pc, #200]	@ (8009e84 <MX_LWIP_Init+0x24c>)
 8009dba:	78d2      	ldrb	r2, [r2, #3]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	061a      	lsls	r2, r3, #24
 8009dc0:	4b30      	ldr	r3, [pc, #192]	@ (8009e84 <MX_LWIP_Init+0x24c>)
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	0619      	lsls	r1, r3, #24
 8009dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8009e84 <MX_LWIP_Init+0x24c>)
 8009dc8:	785b      	ldrb	r3, [r3, #1]
 8009dca:	041b      	lsls	r3, r3, #16
 8009dcc:	4319      	orrs	r1, r3
 8009dce:	4b2d      	ldr	r3, [pc, #180]	@ (8009e84 <MX_LWIP_Init+0x24c>)
 8009dd0:	789b      	ldrb	r3, [r3, #2]
 8009dd2:	021b      	lsls	r3, r3, #8
 8009dd4:	430b      	orrs	r3, r1
 8009dd6:	492b      	ldr	r1, [pc, #172]	@ (8009e84 <MX_LWIP_Init+0x24c>)
 8009dd8:	78c9      	ldrb	r1, [r1, #3]
 8009dda:	430b      	orrs	r3, r1
 8009ddc:	021b      	lsls	r3, r3, #8
 8009dde:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009de2:	431a      	orrs	r2, r3
 8009de4:	4b27      	ldr	r3, [pc, #156]	@ (8009e84 <MX_LWIP_Init+0x24c>)
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	0619      	lsls	r1, r3, #24
 8009dea:	4b26      	ldr	r3, [pc, #152]	@ (8009e84 <MX_LWIP_Init+0x24c>)
 8009dec:	785b      	ldrb	r3, [r3, #1]
 8009dee:	041b      	lsls	r3, r3, #16
 8009df0:	4319      	orrs	r1, r3
 8009df2:	4b24      	ldr	r3, [pc, #144]	@ (8009e84 <MX_LWIP_Init+0x24c>)
 8009df4:	789b      	ldrb	r3, [r3, #2]
 8009df6:	021b      	lsls	r3, r3, #8
 8009df8:	430b      	orrs	r3, r1
 8009dfa:	4922      	ldr	r1, [pc, #136]	@ (8009e84 <MX_LWIP_Init+0x24c>)
 8009dfc:	78c9      	ldrb	r1, [r1, #3]
 8009dfe:	430b      	orrs	r3, r1
 8009e00:	0a1b      	lsrs	r3, r3, #8
 8009e02:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009e06:	431a      	orrs	r2, r3
 8009e08:	4b1e      	ldr	r3, [pc, #120]	@ (8009e84 <MX_LWIP_Init+0x24c>)
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	0619      	lsls	r1, r3, #24
 8009e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8009e84 <MX_LWIP_Init+0x24c>)
 8009e10:	785b      	ldrb	r3, [r3, #1]
 8009e12:	041b      	lsls	r3, r3, #16
 8009e14:	4319      	orrs	r1, r3
 8009e16:	4b1b      	ldr	r3, [pc, #108]	@ (8009e84 <MX_LWIP_Init+0x24c>)
 8009e18:	789b      	ldrb	r3, [r3, #2]
 8009e1a:	021b      	lsls	r3, r3, #8
 8009e1c:	430b      	orrs	r3, r1
 8009e1e:	4919      	ldr	r1, [pc, #100]	@ (8009e84 <MX_LWIP_Init+0x24c>)
 8009e20:	78c9      	ldrb	r1, [r1, #3]
 8009e22:	430b      	orrs	r3, r1
 8009e24:	0e1b      	lsrs	r3, r3, #24
 8009e26:	4313      	orrs	r3, r2
 8009e28:	4a19      	ldr	r2, [pc, #100]	@ (8009e90 <MX_LWIP_Init+0x258>)
 8009e2a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009e2c:	4b19      	ldr	r3, [pc, #100]	@ (8009e94 <MX_LWIP_Init+0x25c>)
 8009e2e:	9302      	str	r3, [sp, #8]
 8009e30:	4b19      	ldr	r3, [pc, #100]	@ (8009e98 <MX_LWIP_Init+0x260>)
 8009e32:	9301      	str	r3, [sp, #4]
 8009e34:	2300      	movs	r3, #0
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	4b15      	ldr	r3, [pc, #84]	@ (8009e90 <MX_LWIP_Init+0x258>)
 8009e3a:	4a14      	ldr	r2, [pc, #80]	@ (8009e8c <MX_LWIP_Init+0x254>)
 8009e3c:	4912      	ldr	r1, [pc, #72]	@ (8009e88 <MX_LWIP_Init+0x250>)
 8009e3e:	4817      	ldr	r0, [pc, #92]	@ (8009e9c <MX_LWIP_Init+0x264>)
 8009e40:	f008 ff80 	bl	8012d44 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009e44:	4815      	ldr	r0, [pc, #84]	@ (8009e9c <MX_LWIP_Init+0x264>)
 8009e46:	f009 f92f 	bl	80130a8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8009e4a:	4814      	ldr	r0, [pc, #80]	@ (8009e9c <MX_LWIP_Init+0x264>)
 8009e4c:	f009 f93c 	bl	80130c8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009e50:	4913      	ldr	r1, [pc, #76]	@ (8009ea0 <MX_LWIP_Init+0x268>)
 8009e52:	4812      	ldr	r0, [pc, #72]	@ (8009e9c <MX_LWIP_Init+0x264>)
 8009e54:	f009 fa3a 	bl	80132cc <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8009e58:	4b12      	ldr	r3, [pc, #72]	@ (8009ea4 <MX_LWIP_Init+0x26c>)
 8009e5a:	1d3c      	adds	r4, r7, #4
 8009e5c:	461d      	mov	r5, r3
 8009e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009e66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8009e6a:	1d3b      	adds	r3, r7, #4
 8009e6c:	490b      	ldr	r1, [pc, #44]	@ (8009e9c <MX_LWIP_Init+0x264>)
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f002 fdc7 	bl	800ca02 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009e74:	bf00      	nop
 8009e76:	3720      	adds	r7, #32
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8009e7c:	200007a8 	.word	0x200007a8
 8009e80:	200007ac 	.word	0x200007ac
 8009e84:	200007b0 	.word	0x200007b0
 8009e88:	2000079c 	.word	0x2000079c
 8009e8c:	200007a0 	.word	0x200007a0
 8009e90:	200007a4 	.word	0x200007a4
 8009e94:	08012039 	.word	0x08012039
 8009e98:	0800a441 	.word	0x0800a441
 8009e9c:	20000768 	.word	0x20000768
 8009ea0:	08009ea9 	.word	0x08009ea9
 8009ea4:	0801f458 	.word	0x0801f458

08009ea8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b087      	sub	sp, #28
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8009ece:	2320      	movs	r3, #32
 8009ed0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009ed2:	f3bf 8f4f 	dsb	sy
}
 8009ed6:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8009ed8:	e00b      	b.n	8009ef2 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8009eda:	4a0d      	ldr	r2, [pc, #52]	@ (8009f10 <SCB_InvalidateDCache_by_Addr+0x54>)
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	1ad3      	subs	r3, r2, r3
 8009ef0:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	dcf0      	bgt.n	8009eda <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8009ef8:	f3bf 8f4f 	dsb	sy
}
 8009efc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009efe:	f3bf 8f6f 	isb	sy
}
 8009f02:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8009f04:	bf00      	nop
 8009f06:	371c      	adds	r7, #28
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr
 8009f10:	e000ed00 	.word	0xe000ed00

08009f14 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8009f1c:	4b04      	ldr	r3, [pc, #16]	@ (8009f30 <HAL_ETH_RxCpltCallback+0x1c>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f002 fef7 	bl	800cd14 <osSemaphoreRelease>
}
 8009f26:	bf00      	nop
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	20005140 	.word	0x20005140

08009f34 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8009f3c:	4b04      	ldr	r3, [pc, #16]	@ (8009f50 <HAL_ETH_TxCpltCallback+0x1c>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4618      	mov	r0, r3
 8009f42:	f002 fee7 	bl	800cd14 <osSemaphoreRelease>
}
 8009f46:	bf00      	nop
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	20005144 	.word	0x20005144

08009f54 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7f9 facc 	bl	80034fa <HAL_ETH_GetDMAError>
 8009f62:	4603      	mov	r3, r0
 8009f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f68:	2b80      	cmp	r3, #128	@ 0x80
 8009f6a:	d104      	bne.n	8009f76 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8009f6c:	4b04      	ldr	r3, [pc, #16]	@ (8009f80 <HAL_ETH_ErrorCallback+0x2c>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f002 fecf 	bl	800cd14 <osSemaphoreRelease>
  }
}
 8009f76:	bf00      	nop
 8009f78:	3708      	adds	r7, #8
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	20005140 	.word	0x20005140

08009f84 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009f84:	b5b0      	push	{r4, r5, r7, lr}
 8009f86:	b0b4      	sub	sp, #208	@ 0xd0
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 8009f92:	2300      	movs	r3, #0
 8009f94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 8009f9e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009fa2:	2264      	movs	r2, #100	@ 0x64
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f014 f971 	bl	801e28e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009fac:	4b9f      	ldr	r3, [pc, #636]	@ (800a22c <low_level_init+0x2a8>)
 8009fae:	4aa0      	ldr	r2, [pc, #640]	@ (800a230 <low_level_init+0x2ac>)
 8009fb0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x80;
 8009fb8:	2380      	movs	r3, #128	@ 0x80
 8009fba:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0xE1;
 8009fbe:	23e1      	movs	r3, #225	@ 0xe1
 8009fc0:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x00;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0x00;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0x00;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 8009fd6:	4a95      	ldr	r2, [pc, #596]	@ (800a22c <low_level_init+0x2a8>)
 8009fd8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009fdc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009fde:	4b93      	ldr	r3, [pc, #588]	@ (800a22c <low_level_init+0x2a8>)
 8009fe0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8009fe4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009fe6:	4b91      	ldr	r3, [pc, #580]	@ (800a22c <low_level_init+0x2a8>)
 8009fe8:	4a92      	ldr	r2, [pc, #584]	@ (800a234 <low_level_init+0x2b0>)
 8009fea:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009fec:	4b8f      	ldr	r3, [pc, #572]	@ (800a22c <low_level_init+0x2a8>)
 8009fee:	4a92      	ldr	r2, [pc, #584]	@ (800a238 <low_level_init+0x2b4>)
 8009ff0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8009ff2:	4b8e      	ldr	r3, [pc, #568]	@ (800a22c <low_level_init+0x2a8>)
 8009ff4:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8009ff8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009ffa:	488c      	ldr	r0, [pc, #560]	@ (800a22c <low_level_init+0x2a8>)
 8009ffc:	f7f8 fc34 	bl	8002868 <HAL_ETH_Init>
 800a000:	4603      	mov	r3, r0
 800a002:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a006:	2238      	movs	r2, #56	@ 0x38
 800a008:	2100      	movs	r1, #0
 800a00a:	488c      	ldr	r0, [pc, #560]	@ (800a23c <low_level_init+0x2b8>)
 800a00c:	f014 f93f 	bl	801e28e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a010:	4b8a      	ldr	r3, [pc, #552]	@ (800a23c <low_level_init+0x2b8>)
 800a012:	2221      	movs	r2, #33	@ 0x21
 800a014:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a016:	4b89      	ldr	r3, [pc, #548]	@ (800a23c <low_level_init+0x2b8>)
 800a018:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800a01c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a01e:	4b87      	ldr	r3, [pc, #540]	@ (800a23c <low_level_init+0x2b8>)
 800a020:	2200      	movs	r2, #0
 800a022:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a024:	4886      	ldr	r0, [pc, #536]	@ (800a240 <low_level_init+0x2bc>)
 800a026:	f008 fd47 	bl	8012ab8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2206      	movs	r2, #6
 800a02e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a032:	4b7e      	ldr	r3, [pc, #504]	@ (800a22c <low_level_init+0x2a8>)
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	781a      	ldrb	r2, [r3, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a03e:	4b7b      	ldr	r3, [pc, #492]	@ (800a22c <low_level_init+0x2a8>)
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	785a      	ldrb	r2, [r3, #1]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a04a:	4b78      	ldr	r3, [pc, #480]	@ (800a22c <low_level_init+0x2a8>)
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	789a      	ldrb	r2, [r3, #2]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a056:	4b75      	ldr	r3, [pc, #468]	@ (800a22c <low_level_init+0x2a8>)
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	78da      	ldrb	r2, [r3, #3]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a062:	4b72      	ldr	r3, [pc, #456]	@ (800a22c <low_level_init+0x2a8>)
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	791a      	ldrb	r2, [r3, #4]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a06e:	4b6f      	ldr	r3, [pc, #444]	@ (800a22c <low_level_init+0x2a8>)
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	795a      	ldrb	r2, [r3, #5]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800a080:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a088:	f043 030a 	orr.w	r3, r3, #10
 800a08c:	b2da      	uxtb	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800a094:	2300      	movs	r3, #0
 800a096:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a098:	2300      	movs	r3, #0
 800a09a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 800a09c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a0a0:	2101      	movs	r1, #1
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f002 fdb6 	bl	800cc14 <osSemaphoreCreate>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	4a66      	ldr	r2, [pc, #408]	@ (800a244 <low_level_init+0x2c0>)
 800a0ac:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800a0b6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800a0ba:	2101      	movs	r1, #1
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f002 fda9 	bl	800cc14 <osSemaphoreCreate>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	4a60      	ldr	r2, [pc, #384]	@ (800a248 <low_level_init+0x2c4>)
 800a0c6:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 800a0c8:	4b5e      	ldr	r3, [pc, #376]	@ (800a244 <low_level_init+0x2c0>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f002 fdd2 	bl	800cc78 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800a0d4:	4b5c      	ldr	r3, [pc, #368]	@ (800a248 <low_level_init+0x2c4>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2100      	movs	r1, #0
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f002 fdcc 	bl	800cc78 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a0e0:	4b5a      	ldr	r3, [pc, #360]	@ (800a24c <low_level_init+0x2c8>)
 800a0e2:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800a0e6:	461d      	mov	r5, r3
 800a0e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a0f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800a0f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a0f8:	6879      	ldr	r1, [r7, #4]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f002 fc81 	bl	800ca02 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a100:	4953      	ldr	r1, [pc, #332]	@ (800a250 <low_level_init+0x2cc>)
 800a102:	4854      	ldr	r0, [pc, #336]	@ (800a254 <low_level_init+0x2d0>)
 800a104:	f7f8 f8f3 	bl	80022ee <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800a108:	4852      	ldr	r0, [pc, #328]	@ (800a254 <low_level_init+0x2d0>)
 800a10a:	f7f8 f922 	bl	8002352 <LAN8742_Init>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d006      	beq.n	800a122 <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f009 f8a9 	bl	801326c <netif_set_link_down>
    netif_set_down(netif);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f009 f840 	bl	80131a0 <netif_set_down>
 800a120:	e081      	b.n	800a226 <low_level_init+0x2a2>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800a122:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800a126:	2b00      	cmp	r3, #0
 800a128:	d165      	bne.n	800a1f6 <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a12a:	484a      	ldr	r0, [pc, #296]	@ (800a254 <low_level_init+0x2d0>)
 800a12c:	f7f8 f95e 	bl	80023ec <LAN8742_GetLinkState>
 800a130:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a134:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a138:	2b01      	cmp	r3, #1
 800a13a:	dc06      	bgt.n	800a14a <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f009 f895 	bl	801326c <netif_set_link_down>
      netif_set_down(netif);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f009 f82c 	bl	80131a0 <netif_set_down>
 800a148:	e057      	b.n	800a1fa <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 800a14a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a14e:	3b02      	subs	r3, #2
 800a150:	2b03      	cmp	r3, #3
 800a152:	d82b      	bhi.n	800a1ac <low_level_init+0x228>
 800a154:	a201      	add	r2, pc, #4	@ (adr r2, 800a15c <low_level_init+0x1d8>)
 800a156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a15a:	bf00      	nop
 800a15c:	0800a16d 	.word	0x0800a16d
 800a160:	0800a17f 	.word	0x0800a17f
 800a164:	0800a18f 	.word	0x0800a18f
 800a168:	0800a19f 	.word	0x0800a19f
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800a16c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a170:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 800a174:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a178:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 800a17c:	e01f      	b.n	800a1be <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800a17e:	2300      	movs	r3, #0
 800a180:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 800a184:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a188:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 800a18c:	e017      	b.n	800a1be <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800a18e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a192:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 800a196:	2300      	movs	r3, #0
 800a198:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 800a19c:	e00f      	b.n	800a1be <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 800a1aa:	e008      	b.n	800a1be <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800a1ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a1b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 800a1b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a1b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 800a1bc:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a1be:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	4819      	ldr	r0, [pc, #100]	@ (800a22c <low_level_init+0x2a8>)
 800a1c6:	f7f9 f837 	bl	8003238 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a1ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a1ce:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 800a1d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a1d4:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a1d6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800a1da:	4619      	mov	r1, r3
 800a1dc:	4813      	ldr	r0, [pc, #76]	@ (800a22c <low_level_init+0x2a8>)
 800a1de:	f7f9 f922 	bl	8003426 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800a1e2:	4812      	ldr	r0, [pc, #72]	@ (800a22c <low_level_init+0x2a8>)
 800a1e4:	f7f8 fbda 	bl	800299c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f008 ff6d 	bl	80130c8 <netif_set_up>
    netif_set_link_up(netif);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f009 f808 	bl	8013204 <netif_set_link_up>
 800a1f4:	e001      	b.n	800a1fa <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 800a1f6:	f7f7 fdd7 	bl	8001da8 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 800a1fa:	f7f8 f9cf 	bl	800259c <HAL_GetREVID>
 800a1fe:	4603      	mov	r3, r0
 800a200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a204:	d10f      	bne.n	800a226 <low_level_init+0x2a2>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 800a206:	4b14      	ldr	r3, [pc, #80]	@ (800a258 <low_level_init+0x2d4>)
 800a208:	f107 040c 	add.w	r4, r7, #12
 800a20c:	461d      	mov	r5, r3
 800a20e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a212:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a216:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 800a21a:	f107 030c 	add.w	r3, r7, #12
 800a21e:	2100      	movs	r1, #0
 800a220:	4618      	mov	r0, r3
 800a222:	f002 fbee 	bl	800ca02 <osThreadCreate>
  }
}
 800a226:	37d0      	adds	r7, #208	@ 0xd0
 800a228:	46bd      	mov	sp, r7
 800a22a:	bdb0      	pop	{r4, r5, r7, pc}
 800a22c:	20005148 	.word	0x20005148
 800a230:	40028000 	.word	0x40028000
 800a234:	20000234 	.word	0x20000234
 800a238:	20000194 	.word	0x20000194
 800a23c:	200051f8 	.word	0x200051f8
 800a240:	08022a50 	.word	0x08022a50
 800a244:	20005140 	.word	0x20005140
 800a248:	20005144 	.word	0x20005144
 800a24c:	0801f47c 	.word	0x0801f47c
 800a250:	20000014 	.word	0x20000014
 800a254:	20005230 	.word	0x20005230
 800a258:	0801f4a8 	.word	0x0801f4a8

0800a25c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b092      	sub	sp, #72	@ 0x48
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a266:	2300      	movs	r3, #0
 800a268:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800a26a:	2300      	movs	r3, #0
 800a26c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800a26e:	2300      	movs	r3, #0
 800a270:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a274:	f107 030c 	add.w	r3, r7, #12
 800a278:	2230      	movs	r2, #48	@ 0x30
 800a27a:	2100      	movs	r1, #0
 800a27c:	4618      	mov	r0, r3
 800a27e:	f014 f806 	bl	801e28e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a282:	f107 030c 	add.w	r3, r7, #12
 800a286:	2230      	movs	r2, #48	@ 0x30
 800a288:	2100      	movs	r1, #0
 800a28a:	4618      	mov	r0, r3
 800a28c:	f013 ffff 	bl	801e28e <memset>

  for(q = p; q != NULL; q = q->next)
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	643b      	str	r3, [r7, #64]	@ 0x40
 800a294:	e045      	b.n	800a322 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a296:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a298:	2b03      	cmp	r3, #3
 800a29a:	d902      	bls.n	800a2a2 <low_level_output+0x46>
      return ERR_IF;
 800a29c:	f06f 030b 	mvn.w	r3, #11
 800a2a0:	e07f      	b.n	800a3a2 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800a2a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2a4:	6859      	ldr	r1, [r3, #4]
 800a2a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	005b      	lsls	r3, r3, #1
 800a2ac:	4413      	add	r3, r2
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	3348      	adds	r3, #72	@ 0x48
 800a2b2:	443b      	add	r3, r7
 800a2b4:	3b3c      	subs	r3, #60	@ 0x3c
 800a2b6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a2b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2ba:	895b      	ldrh	r3, [r3, #10]
 800a2bc:	4619      	mov	r1, r3
 800a2be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	005b      	lsls	r3, r3, #1
 800a2c4:	4413      	add	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	3348      	adds	r3, #72	@ 0x48
 800a2ca:	443b      	add	r3, r7
 800a2cc:	3b38      	subs	r3, #56	@ 0x38
 800a2ce:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a2d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d011      	beq.n	800a2fa <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a2d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2d8:	1e5a      	subs	r2, r3, #1
 800a2da:	f107 000c 	add.w	r0, r7, #12
 800a2de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	005b      	lsls	r3, r3, #1
 800a2e4:	440b      	add	r3, r1
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	18c1      	adds	r1, r0, r3
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	005b      	lsls	r3, r3, #1
 800a2ee:	4413      	add	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	3348      	adds	r3, #72	@ 0x48
 800a2f4:	443b      	add	r3, r7
 800a2f6:	3b34      	subs	r3, #52	@ 0x34
 800a2f8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a2fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d109      	bne.n	800a316 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800a302:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a304:	4613      	mov	r3, r2
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	4413      	add	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	3348      	adds	r3, #72	@ 0x48
 800a30e:	443b      	add	r3, r7
 800a310:	3b34      	subs	r3, #52	@ 0x34
 800a312:	2200      	movs	r2, #0
 800a314:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a318:	3301      	adds	r3, #1
 800a31a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800a31c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	643b      	str	r3, [r7, #64]	@ 0x40
 800a322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1b6      	bne.n	800a296 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	891b      	ldrh	r3, [r3, #8]
 800a32c:	461a      	mov	r2, r3
 800a32e:	4b1f      	ldr	r3, [pc, #124]	@ (800a3ac <low_level_output+0x150>)
 800a330:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a332:	4a1e      	ldr	r2, [pc, #120]	@ (800a3ac <low_level_output+0x150>)
 800a334:	f107 030c 	add.w	r3, r7, #12
 800a338:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800a33a:	4a1c      	ldr	r2, [pc, #112]	@ (800a3ac <low_level_output+0x150>)
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800a340:	6838      	ldr	r0, [r7, #0]
 800a342:	f009 fc17 	bl	8013b74 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800a346:	4919      	ldr	r1, [pc, #100]	@ (800a3ac <low_level_output+0x150>)
 800a348:	4819      	ldr	r0, [pc, #100]	@ (800a3b0 <low_level_output+0x154>)
 800a34a:	f7f8 fc17 	bl	8002b7c <HAL_ETH_Transmit_IT>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d103      	bne.n	800a35c <low_level_output+0x100>
    {
      errval = ERR_OK;
 800a354:	2300      	movs	r3, #0
 800a356:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a35a:	e01b      	b.n	800a394 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800a35c:	4814      	ldr	r0, [pc, #80]	@ (800a3b0 <low_level_output+0x154>)
 800a35e:	f7f9 f8bf 	bl	80034e0 <HAL_ETH_GetError>
 800a362:	4603      	mov	r3, r0
 800a364:	f003 0302 	and.w	r3, r3, #2
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d00d      	beq.n	800a388 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800a36c:	4b11      	ldr	r3, [pc, #68]	@ (800a3b4 <low_level_output+0x158>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800a374:	4618      	mov	r0, r3
 800a376:	f002 fc7f 	bl	800cc78 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 800a37a:	480d      	ldr	r0, [pc, #52]	@ (800a3b0 <low_level_output+0x154>)
 800a37c:	f7f8 fd9e 	bl	8002ebc <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800a380:	23fe      	movs	r3, #254	@ 0xfe
 800a382:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a386:	e005      	b.n	800a394 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800a388:	6838      	ldr	r0, [r7, #0]
 800a38a:	f009 fb4d 	bl	8013a28 <pbuf_free>
        errval =  ERR_IF;
 800a38e:	23f4      	movs	r3, #244	@ 0xf4
 800a390:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800a394:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a398:	f113 0f02 	cmn.w	r3, #2
 800a39c:	d0d3      	beq.n	800a346 <low_level_output+0xea>

  return errval;
 800a39e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3748      	adds	r7, #72	@ 0x48
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	200051f8 	.word	0x200051f8
 800a3b0:	20005148 	.word	0x20005148
 800a3b4:	20005144 	.word	0x20005144

0800a3b8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800a3c4:	4b07      	ldr	r3, [pc, #28]	@ (800a3e4 <low_level_input+0x2c>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d105      	bne.n	800a3d8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800a3cc:	f107 030c 	add.w	r3, r7, #12
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	4805      	ldr	r0, [pc, #20]	@ (800a3e8 <low_level_input+0x30>)
 800a3d4:	f7f8 fc2e 	bl	8002c34 <HAL_ETH_ReadData>
  }

  return p;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	2000513c 	.word	0x2000513c
 800a3e8:	20005148 	.word	0x20005148

0800a3ec <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a3fc:	4b0f      	ldr	r3, [pc, #60]	@ (800a43c <ethernetif_input+0x50>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f04f 31ff 	mov.w	r1, #4294967295
 800a404:	4618      	mov	r0, r3
 800a406:	f002 fc37 	bl	800cc78 <osSemaphoreWait>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1f5      	bne.n	800a3fc <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800a410:	68b8      	ldr	r0, [r7, #8]
 800a412:	f7ff ffd1 	bl	800a3b8 <low_level_input>
 800a416:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00a      	beq.n	800a434 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	68b9      	ldr	r1, [r7, #8]
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	4798      	blx	r3
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d002      	beq.n	800a434 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f009 fafa 	bl	8013a28 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1ea      	bne.n	800a410 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a43a:	e7df      	b.n	800a3fc <ethernetif_input+0x10>
 800a43c:	20005140 	.word	0x20005140

0800a440 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d106      	bne.n	800a45c <ethernetif_init+0x1c>
 800a44e:	4b0e      	ldr	r3, [pc, #56]	@ (800a488 <ethernetif_init+0x48>)
 800a450:	f240 2217 	movw	r2, #535	@ 0x217
 800a454:	490d      	ldr	r1, [pc, #52]	@ (800a48c <ethernetif_init+0x4c>)
 800a456:	480e      	ldr	r0, [pc, #56]	@ (800a490 <ethernetif_init+0x50>)
 800a458:	f013 fe78 	bl	801e14c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2273      	movs	r2, #115	@ 0x73
 800a460:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2274      	movs	r2, #116	@ 0x74
 800a468:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a09      	ldr	r2, [pc, #36]	@ (800a494 <ethernetif_init+0x54>)
 800a470:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a08      	ldr	r2, [pc, #32]	@ (800a498 <ethernetif_init+0x58>)
 800a476:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f7ff fd83 	bl	8009f84 <low_level_init>

  return ERR_OK;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	0801f4c4 	.word	0x0801f4c4
 800a48c:	0801f4e0 	.word	0x0801f4e0
 800a490:	0801f4f0 	.word	0x0801f4f0
 800a494:	0801b1ed 	.word	0x0801b1ed
 800a498:	0800a25d 	.word	0x0800a25d

0800a49c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a4a8:	68f9      	ldr	r1, [r7, #12]
 800a4aa:	4809      	ldr	r0, [pc, #36]	@ (800a4d0 <pbuf_free_custom+0x34>)
 800a4ac:	f008 fbf4 	bl	8012c98 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800a4b0:	4b08      	ldr	r3, [pc, #32]	@ (800a4d4 <pbuf_free_custom+0x38>)
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d107      	bne.n	800a4c8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800a4b8:	4b06      	ldr	r3, [pc, #24]	@ (800a4d4 <pbuf_free_custom+0x38>)
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800a4be:	4b06      	ldr	r3, [pc, #24]	@ (800a4d8 <pbuf_free_custom+0x3c>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f002 fc26 	bl	800cd14 <osSemaphoreRelease>
  }
}
 800a4c8:	bf00      	nop
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	08022a50 	.word	0x08022a50
 800a4d4:	2000513c 	.word	0x2000513c
 800a4d8:	20005140 	.word	0x20005140

0800a4dc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a4e0:	f7f8 f82c 	bl	800253c <HAL_GetTick>
 800a4e4:	4603      	mov	r3, r0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	bd80      	pop	{r7, pc}
	...

0800a4ec <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b08e      	sub	sp, #56	@ 0x38
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	601a      	str	r2, [r3, #0]
 800a4fc:	605a      	str	r2, [r3, #4]
 800a4fe:	609a      	str	r2, [r3, #8]
 800a500:	60da      	str	r2, [r3, #12]
 800a502:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a52      	ldr	r2, [pc, #328]	@ (800a654 <HAL_ETH_MspInit+0x168>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	f040 809e 	bne.w	800a64c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a510:	4b51      	ldr	r3, [pc, #324]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a514:	4a50      	ldr	r2, [pc, #320]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a516:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a51a:	6313      	str	r3, [r2, #48]	@ 0x30
 800a51c:	4b4e      	ldr	r3, [pc, #312]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a51e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a524:	623b      	str	r3, [r7, #32]
 800a526:	6a3b      	ldr	r3, [r7, #32]
 800a528:	4b4b      	ldr	r3, [pc, #300]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a52a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a52c:	4a4a      	ldr	r2, [pc, #296]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a52e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a532:	6313      	str	r3, [r2, #48]	@ 0x30
 800a534:	4b48      	ldr	r3, [pc, #288]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a538:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a53c:	61fb      	str	r3, [r7, #28]
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	4b45      	ldr	r3, [pc, #276]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a544:	4a44      	ldr	r2, [pc, #272]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a546:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a54a:	6313      	str	r3, [r2, #48]	@ 0x30
 800a54c:	4b42      	ldr	r3, [pc, #264]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a54e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a554:	61bb      	str	r3, [r7, #24]
 800a556:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a558:	4b3f      	ldr	r3, [pc, #252]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a55a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a55c:	4a3e      	ldr	r2, [pc, #248]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a55e:	f043 0304 	orr.w	r3, r3, #4
 800a562:	6313      	str	r3, [r2, #48]	@ 0x30
 800a564:	4b3c      	ldr	r3, [pc, #240]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a568:	f003 0304 	and.w	r3, r3, #4
 800a56c:	617b      	str	r3, [r7, #20]
 800a56e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a570:	4b39      	ldr	r3, [pc, #228]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a574:	4a38      	ldr	r2, [pc, #224]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a576:	f043 0301 	orr.w	r3, r3, #1
 800a57a:	6313      	str	r3, [r2, #48]	@ 0x30
 800a57c:	4b36      	ldr	r3, [pc, #216]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a57e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a580:	f003 0301 	and.w	r3, r3, #1
 800a584:	613b      	str	r3, [r7, #16]
 800a586:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a588:	4b33      	ldr	r3, [pc, #204]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a58a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a58c:	4a32      	ldr	r2, [pc, #200]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a58e:	f043 0302 	orr.w	r3, r3, #2
 800a592:	6313      	str	r3, [r2, #48]	@ 0x30
 800a594:	4b30      	ldr	r3, [pc, #192]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a598:	f003 0302 	and.w	r3, r3, #2
 800a59c:	60fb      	str	r3, [r7, #12]
 800a59e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a5a0:	4b2d      	ldr	r3, [pc, #180]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a5a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5a4:	4a2c      	ldr	r2, [pc, #176]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a5a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5aa:	6313      	str	r3, [r2, #48]	@ 0x30
 800a5ac:	4b2a      	ldr	r3, [pc, #168]	@ (800a658 <HAL_ETH_MspInit+0x16c>)
 800a5ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5b4:	60bb      	str	r3, [r7, #8]
 800a5b6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a5b8:	2332      	movs	r3, #50	@ 0x32
 800a5ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5bc:	2302      	movs	r3, #2
 800a5be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a5c8:	230b      	movs	r3, #11
 800a5ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	4822      	ldr	r0, [pc, #136]	@ (800a65c <HAL_ETH_MspInit+0x170>)
 800a5d4:	f7f9 fbbe 	bl	8003d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a5d8:	2386      	movs	r3, #134	@ 0x86
 800a5da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5dc:	2302      	movs	r3, #2
 800a5de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5e4:	2303      	movs	r3, #3
 800a5e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a5e8:	230b      	movs	r3, #11
 800a5ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	481b      	ldr	r0, [pc, #108]	@ (800a660 <HAL_ETH_MspInit+0x174>)
 800a5f4:	f7f9 fbae 	bl	8003d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800a5f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a5fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5fe:	2302      	movs	r3, #2
 800a600:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a602:	2300      	movs	r3, #0
 800a604:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a606:	2303      	movs	r3, #3
 800a608:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a60a:	230b      	movs	r3, #11
 800a60c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a60e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a612:	4619      	mov	r1, r3
 800a614:	4813      	ldr	r0, [pc, #76]	@ (800a664 <HAL_ETH_MspInit+0x178>)
 800a616:	f7f9 fb9d 	bl	8003d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800a61a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800a61e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a620:	2302      	movs	r3, #2
 800a622:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a624:	2300      	movs	r3, #0
 800a626:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a628:	2303      	movs	r3, #3
 800a62a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a62c:	230b      	movs	r3, #11
 800a62e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a630:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a634:	4619      	mov	r1, r3
 800a636:	480c      	ldr	r0, [pc, #48]	@ (800a668 <HAL_ETH_MspInit+0x17c>)
 800a638:	f7f9 fb8c 	bl	8003d54 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800a63c:	2200      	movs	r2, #0
 800a63e:	2105      	movs	r1, #5
 800a640:	203d      	movs	r0, #61	@ 0x3d
 800a642:	f7f8 f86f 	bl	8002724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a646:	203d      	movs	r0, #61	@ 0x3d
 800a648:	f7f8 f888 	bl	800275c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a64c:	bf00      	nop
 800a64e:	3738      	adds	r7, #56	@ 0x38
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	40028000 	.word	0x40028000
 800a658:	40023800 	.word	0x40023800
 800a65c:	40020800 	.word	0x40020800
 800a660:	40020000 	.word	0x40020000
 800a664:	40020400 	.word	0x40020400
 800a668:	40021800 	.word	0x40021800

0800a66c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a670:	4802      	ldr	r0, [pc, #8]	@ (800a67c <ETH_PHY_IO_Init+0x10>)
 800a672:	f7f8 fef3 	bl	800345c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	20005148 	.word	0x20005148

0800a680 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a680:	b480      	push	{r7}
 800a682:	af00      	add	r7, sp, #0
  return 0;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	68f9      	ldr	r1, [r7, #12]
 800a6a2:	4807      	ldr	r0, [pc, #28]	@ (800a6c0 <ETH_PHY_IO_ReadReg+0x30>)
 800a6a4:	f7f8 fd34 	bl	8003110 <HAL_ETH_ReadPHYRegister>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d002      	beq.n	800a6b4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a6ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b2:	e000      	b.n	800a6b6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3710      	adds	r7, #16
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	20005148 	.word	0x20005148

0800a6c4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	68ba      	ldr	r2, [r7, #8]
 800a6d4:	68f9      	ldr	r1, [r7, #12]
 800a6d6:	4807      	ldr	r0, [pc, #28]	@ (800a6f4 <ETH_PHY_IO_WriteReg+0x30>)
 800a6d8:	f7f8 fd65 	bl	80031a6 <HAL_ETH_WritePHYRegister>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d002      	beq.n	800a6e8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e6:	e000      	b.n	800a6ea <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	20005148 	.word	0x20005148

0800a6f8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a6fc:	f7f7 ff1e 	bl	800253c <HAL_GetTick>
 800a700:	4603      	mov	r3, r0
}
 800a702:	4618      	mov	r0, r3
 800a704:	bd80      	pop	{r7, pc}
	...

0800a708 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b0a0      	sub	sp, #128	@ 0x80
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800a710:	f107 0308 	add.w	r3, r7, #8
 800a714:	2264      	movs	r2, #100	@ 0x64
 800a716:	2100      	movs	r1, #0
 800a718:	4618      	mov	r0, r3
 800a71a:	f013 fdb8 	bl	801e28e <memset>
  int32_t PHYLinkState = 0;
 800a71e:	2300      	movs	r3, #0
 800a720:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800a722:	2300      	movs	r3, #0
 800a724:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a726:	2300      	movs	r3, #0
 800a728:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a72a:	2300      	movs	r3, #0
 800a72c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a732:	483a      	ldr	r0, [pc, #232]	@ (800a81c <ethernet_link_thread+0x114>)
 800a734:	f7f7 fe5a 	bl	80023ec <LAN8742_GetLinkState>
 800a738:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a73a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a73c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a740:	089b      	lsrs	r3, r3, #2
 800a742:	f003 0301 	and.w	r3, r3, #1
 800a746:	b2db      	uxtb	r3, r3
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00c      	beq.n	800a766 <ethernet_link_thread+0x5e>
 800a74c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a74e:	2b01      	cmp	r3, #1
 800a750:	dc09      	bgt.n	800a766 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800a752:	4833      	ldr	r0, [pc, #204]	@ (800a820 <ethernet_link_thread+0x118>)
 800a754:	f7f8 f992 	bl	8002a7c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800a758:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a75a:	f008 fd21 	bl	80131a0 <netif_set_down>
    netif_set_link_down(netif);
 800a75e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a760:	f008 fd84 	bl	801326c <netif_set_link_down>
 800a764:	e055      	b.n	800a812 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a766:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a768:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a76c:	f003 0304 	and.w	r3, r3, #4
 800a770:	2b00      	cmp	r3, #0
 800a772:	d14e      	bne.n	800a812 <ethernet_link_thread+0x10a>
 800a774:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a776:	2b01      	cmp	r3, #1
 800a778:	dd4b      	ble.n	800a812 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800a77a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a77c:	3b02      	subs	r3, #2
 800a77e:	2b03      	cmp	r3, #3
 800a780:	d82a      	bhi.n	800a7d8 <ethernet_link_thread+0xd0>
 800a782:	a201      	add	r2, pc, #4	@ (adr r2, 800a788 <ethernet_link_thread+0x80>)
 800a784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a788:	0800a799 	.word	0x0800a799
 800a78c:	0800a7ab 	.word	0x0800a7ab
 800a790:	0800a7bb 	.word	0x0800a7bb
 800a794:	0800a7cb 	.word	0x0800a7cb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a798:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a79c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800a79e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a7a2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a7a8:	e017      	b.n	800a7da <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800a7ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a7b2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a7b8:	e00f      	b.n	800a7da <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a7ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a7be:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a7c8:	e007      	b.n	800a7da <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a7d6:	e000      	b.n	800a7da <ethernet_link_thread+0xd2>
    default:
      break;
 800a7d8:	bf00      	nop
    }

    if(linkchanged)
 800a7da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d018      	beq.n	800a812 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a7e0:	f107 0308 	add.w	r3, r7, #8
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	480e      	ldr	r0, [pc, #56]	@ (800a820 <ethernet_link_thread+0x118>)
 800a7e8:	f7f8 fd26 	bl	8003238 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a7ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a7ee:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800a7f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a7f2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a7f4:	f107 0308 	add.w	r3, r7, #8
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	4809      	ldr	r0, [pc, #36]	@ (800a820 <ethernet_link_thread+0x118>)
 800a7fc:	f7f8 fe13 	bl	8003426 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800a800:	4807      	ldr	r0, [pc, #28]	@ (800a820 <ethernet_link_thread+0x118>)
 800a802:	f7f8 f8cb 	bl	800299c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800a806:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a808:	f008 fc5e 	bl	80130c8 <netif_set_up>
      netif_set_link_up(netif);
 800a80c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a80e:	f008 fcf9 	bl	8013204 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800a812:	2064      	movs	r0, #100	@ 0x64
 800a814:	f002 f94d 	bl	800cab2 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a818:	e78b      	b.n	800a732 <ethernet_link_thread+0x2a>
 800a81a:	bf00      	nop
 800a81c:	20005230 	.word	0x20005230
 800a820:	20005148 	.word	0x20005148

0800a824 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af02      	add	r7, sp, #8
 800a82a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a82c:	4812      	ldr	r0, [pc, #72]	@ (800a878 <HAL_ETH_RxAllocateCallback+0x54>)
 800a82e:	f008 f9bf 	bl	8012bb0 <memp_malloc_pool>
 800a832:	60f8      	str	r0, [r7, #12]
  if (p)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d014      	beq.n	800a864 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f103 0220 	add.w	r2, r3, #32
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	4a0d      	ldr	r2, [pc, #52]	@ (800a87c <HAL_ETH_RxAllocateCallback+0x58>)
 800a848:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a852:	9201      	str	r2, [sp, #4]
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2241      	movs	r2, #65	@ 0x41
 800a85a:	2100      	movs	r1, #0
 800a85c:	2000      	movs	r0, #0
 800a85e:	f008 ff29 	bl	80136b4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800a862:	e005      	b.n	800a870 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800a864:	4b06      	ldr	r3, [pc, #24]	@ (800a880 <HAL_ETH_RxAllocateCallback+0x5c>)
 800a866:	2201      	movs	r2, #1
 800a868:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	601a      	str	r2, [r3, #0]
}
 800a870:	bf00      	nop
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	08022a50 	.word	0x08022a50
 800a87c:	0800a49d 	.word	0x0800a49d
 800a880:	2000513c 	.word	0x2000513c

0800a884 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b088      	sub	sp, #32
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	607a      	str	r2, [r7, #4]
 800a890:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a89a:	2300      	movs	r3, #0
 800a89c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	3b20      	subs	r3, #32
 800a8a2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	887a      	ldrh	r2, [r7, #2]
 800a8b4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800a8b6:	69bb      	ldr	r3, [r7, #24]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d103      	bne.n	800a8c6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	69fa      	ldr	r2, [r7, #28]
 800a8c2:	601a      	str	r2, [r3, #0]
 800a8c4:	e003      	b.n	800a8ce <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	69fa      	ldr	r2, [r7, #28]
 800a8cc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	69fa      	ldr	r2, [r7, #28]
 800a8d2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	61fb      	str	r3, [r7, #28]
 800a8da:	e009      	b.n	800a8f0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	891a      	ldrh	r2, [r3, #8]
 800a8e0:	887b      	ldrh	r3, [r7, #2]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	b29a      	uxth	r2, r3
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800a8ea:	69fb      	ldr	r3, [r7, #28]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	61fb      	str	r3, [r7, #28]
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1f2      	bne.n	800a8dc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800a8f6:	887b      	ldrh	r3, [r7, #2]
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f7ff fade 	bl	8009ebc <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800a900:	bf00      	nop
 800a902:	3720      	adds	r7, #32
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f009 f889 	bl	8013a28 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800a916:	bf00      	nop
 800a918:	3708      	adds	r7, #8
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
	...

0800a920 <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 800a928:	4b15      	ldr	r3, [pc, #84]	@ (800a980 <RMII_Thread+0x60>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800a930:	2b00      	cmp	r3, #0
 800a932:	d003      	beq.n	800a93c <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 800a934:	2000      	movs	r0, #0
 800a936:	f002 f8b0 	bl	800ca9a <osThreadTerminate>
 800a93a:	e7f5      	b.n	800a928 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 800a93c:	4b10      	ldr	r3, [pc, #64]	@ (800a980 <RMII_Thread+0x60>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 800a944:	2b0a      	cmp	r3, #10
 800a946:	d916      	bls.n	800a976 <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 800a948:	4b0e      	ldr	r3, [pc, #56]	@ (800a984 <RMII_Thread+0x64>)
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	4a0d      	ldr	r2, [pc, #52]	@ (800a984 <RMII_Thread+0x64>)
 800a94e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a952:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 800a954:	4b0b      	ldr	r3, [pc, #44]	@ (800a984 <RMII_Thread+0x64>)
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	4a0a      	ldr	r2, [pc, #40]	@ (800a984 <RMII_Thread+0x64>)
 800a95a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a95e:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 800a960:	4b07      	ldr	r3, [pc, #28]	@ (800a980 <RMII_Thread+0x60>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800a968:	4b05      	ldr	r3, [pc, #20]	@ (800a980 <RMII_Thread+0x60>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f042 0201 	orr.w	r2, r2, #1
 800a970:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800a974:	e7d8      	b.n	800a928 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 800a976:	20c8      	movs	r0, #200	@ 0xc8
 800a978:	f002 f89b 	bl	800cab2 <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 800a97c:	e7d4      	b.n	800a928 <RMII_Thread+0x8>
 800a97e:	bf00      	nop
 800a980:	20005148 	.word	0x20005148
 800a984:	40013800 	.word	0x40013800

0800a988 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	460b      	mov	r3, r1
 800a992:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a994:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a998:	f013 fa1a 	bl	801ddd0 <malloc>
 800a99c:	4603      	mov	r3, r0
 800a99e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d109      	bne.n	800a9ba <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	32b0      	adds	r2, #176	@ 0xb0
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a9b6:	2302      	movs	r3, #2
 800a9b8:	e0d4      	b.n	800ab64 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a9ba:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a9be:	2100      	movs	r1, #0
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f013 fc64 	bl	801e28e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	32b0      	adds	r2, #176	@ 0xb0
 800a9d0:	68f9      	ldr	r1, [r7, #12]
 800a9d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	32b0      	adds	r2, #176	@ 0xb0
 800a9e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	7c1b      	ldrb	r3, [r3, #16]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d138      	bne.n	800aa64 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a9f2:	4b5e      	ldr	r3, [pc, #376]	@ (800ab6c <USBD_CDC_Init+0x1e4>)
 800a9f4:	7819      	ldrb	r1, [r3, #0]
 800a9f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a9fa:	2202      	movs	r2, #2
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f013 f844 	bl	801da8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aa02:	4b5a      	ldr	r3, [pc, #360]	@ (800ab6c <USBD_CDC_Init+0x1e4>)
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	f003 020f 	and.w	r2, r3, #15
 800aa0a:	6879      	ldr	r1, [r7, #4]
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	4413      	add	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	440b      	add	r3, r1
 800aa16:	3324      	adds	r3, #36	@ 0x24
 800aa18:	2201      	movs	r2, #1
 800aa1a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aa1c:	4b54      	ldr	r3, [pc, #336]	@ (800ab70 <USBD_CDC_Init+0x1e8>)
 800aa1e:	7819      	ldrb	r1, [r3, #0]
 800aa20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa24:	2202      	movs	r2, #2
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f013 f82f 	bl	801da8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aa2c:	4b50      	ldr	r3, [pc, #320]	@ (800ab70 <USBD_CDC_Init+0x1e8>)
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	f003 020f 	and.w	r2, r3, #15
 800aa34:	6879      	ldr	r1, [r7, #4]
 800aa36:	4613      	mov	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	4413      	add	r3, r2
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	440b      	add	r3, r1
 800aa40:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa44:	2201      	movs	r2, #1
 800aa46:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aa48:	4b4a      	ldr	r3, [pc, #296]	@ (800ab74 <USBD_CDC_Init+0x1ec>)
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	f003 020f 	and.w	r2, r3, #15
 800aa50:	6879      	ldr	r1, [r7, #4]
 800aa52:	4613      	mov	r3, r2
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	4413      	add	r3, r2
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	440b      	add	r3, r1
 800aa5c:	3326      	adds	r3, #38	@ 0x26
 800aa5e:	2210      	movs	r2, #16
 800aa60:	801a      	strh	r2, [r3, #0]
 800aa62:	e035      	b.n	800aad0 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aa64:	4b41      	ldr	r3, [pc, #260]	@ (800ab6c <USBD_CDC_Init+0x1e4>)
 800aa66:	7819      	ldrb	r1, [r3, #0]
 800aa68:	2340      	movs	r3, #64	@ 0x40
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f013 f80c 	bl	801da8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aa72:	4b3e      	ldr	r3, [pc, #248]	@ (800ab6c <USBD_CDC_Init+0x1e4>)
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	f003 020f 	and.w	r2, r3, #15
 800aa7a:	6879      	ldr	r1, [r7, #4]
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	4413      	add	r3, r2
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	440b      	add	r3, r1
 800aa86:	3324      	adds	r3, #36	@ 0x24
 800aa88:	2201      	movs	r2, #1
 800aa8a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aa8c:	4b38      	ldr	r3, [pc, #224]	@ (800ab70 <USBD_CDC_Init+0x1e8>)
 800aa8e:	7819      	ldrb	r1, [r3, #0]
 800aa90:	2340      	movs	r3, #64	@ 0x40
 800aa92:	2202      	movs	r2, #2
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f012 fff8 	bl	801da8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aa9a:	4b35      	ldr	r3, [pc, #212]	@ (800ab70 <USBD_CDC_Init+0x1e8>)
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	f003 020f 	and.w	r2, r3, #15
 800aaa2:	6879      	ldr	r1, [r7, #4]
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	440b      	add	r3, r1
 800aaae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aab2:	2201      	movs	r2, #1
 800aab4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aab6:	4b2f      	ldr	r3, [pc, #188]	@ (800ab74 <USBD_CDC_Init+0x1ec>)
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	f003 020f 	and.w	r2, r3, #15
 800aabe:	6879      	ldr	r1, [r7, #4]
 800aac0:	4613      	mov	r3, r2
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4413      	add	r3, r2
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	440b      	add	r3, r1
 800aaca:	3326      	adds	r3, #38	@ 0x26
 800aacc:	2210      	movs	r2, #16
 800aace:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aad0:	4b28      	ldr	r3, [pc, #160]	@ (800ab74 <USBD_CDC_Init+0x1ec>)
 800aad2:	7819      	ldrb	r1, [r3, #0]
 800aad4:	2308      	movs	r3, #8
 800aad6:	2203      	movs	r2, #3
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f012 ffd6 	bl	801da8a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800aade:	4b25      	ldr	r3, [pc, #148]	@ (800ab74 <USBD_CDC_Init+0x1ec>)
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	f003 020f 	and.w	r2, r3, #15
 800aae6:	6879      	ldr	r1, [r7, #4]
 800aae8:	4613      	mov	r3, r2
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	4413      	add	r3, r2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	440b      	add	r3, r1
 800aaf2:	3324      	adds	r3, #36	@ 0x24
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	33b0      	adds	r3, #176	@ 0xb0
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	4413      	add	r3, r2
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d101      	bne.n	800ab32 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800ab2e:	2302      	movs	r3, #2
 800ab30:	e018      	b.n	800ab64 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	7c1b      	ldrb	r3, [r3, #16]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d10a      	bne.n	800ab50 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab70 <USBD_CDC_Init+0x1e8>)
 800ab3c:	7819      	ldrb	r1, [r3, #0]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ab44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f013 f88d 	bl	801dc68 <USBD_LL_PrepareReceive>
 800ab4e:	e008      	b.n	800ab62 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab50:	4b07      	ldr	r3, [pc, #28]	@ (800ab70 <USBD_CDC_Init+0x1e8>)
 800ab52:	7819      	ldrb	r1, [r3, #0]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ab5a:	2340      	movs	r3, #64	@ 0x40
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f013 f883 	bl	801dc68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	200000af 	.word	0x200000af
 800ab70:	200000b0 	.word	0x200000b0
 800ab74:	200000b1 	.word	0x200000b1

0800ab78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	460b      	mov	r3, r1
 800ab82:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ab84:	4b3a      	ldr	r3, [pc, #232]	@ (800ac70 <USBD_CDC_DeInit+0xf8>)
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	4619      	mov	r1, r3
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f012 ffa3 	bl	801dad6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ab90:	4b37      	ldr	r3, [pc, #220]	@ (800ac70 <USBD_CDC_DeInit+0xf8>)
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	f003 020f 	and.w	r2, r3, #15
 800ab98:	6879      	ldr	r1, [r7, #4]
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	4413      	add	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	440b      	add	r3, r1
 800aba4:	3324      	adds	r3, #36	@ 0x24
 800aba6:	2200      	movs	r2, #0
 800aba8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800abaa:	4b32      	ldr	r3, [pc, #200]	@ (800ac74 <USBD_CDC_DeInit+0xfc>)
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	4619      	mov	r1, r3
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f012 ff90 	bl	801dad6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800abb6:	4b2f      	ldr	r3, [pc, #188]	@ (800ac74 <USBD_CDC_DeInit+0xfc>)
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	f003 020f 	and.w	r2, r3, #15
 800abbe:	6879      	ldr	r1, [r7, #4]
 800abc0:	4613      	mov	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4413      	add	r3, r2
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	440b      	add	r3, r1
 800abca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800abce:	2200      	movs	r2, #0
 800abd0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800abd2:	4b29      	ldr	r3, [pc, #164]	@ (800ac78 <USBD_CDC_DeInit+0x100>)
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	4619      	mov	r1, r3
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f012 ff7c 	bl	801dad6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800abde:	4b26      	ldr	r3, [pc, #152]	@ (800ac78 <USBD_CDC_DeInit+0x100>)
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	f003 020f 	and.w	r2, r3, #15
 800abe6:	6879      	ldr	r1, [r7, #4]
 800abe8:	4613      	mov	r3, r2
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	4413      	add	r3, r2
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	440b      	add	r3, r1
 800abf2:	3324      	adds	r3, #36	@ 0x24
 800abf4:	2200      	movs	r2, #0
 800abf6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800abf8:	4b1f      	ldr	r3, [pc, #124]	@ (800ac78 <USBD_CDC_DeInit+0x100>)
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	f003 020f 	and.w	r2, r3, #15
 800ac00:	6879      	ldr	r1, [r7, #4]
 800ac02:	4613      	mov	r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	4413      	add	r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	440b      	add	r3, r1
 800ac0c:	3326      	adds	r3, #38	@ 0x26
 800ac0e:	2200      	movs	r2, #0
 800ac10:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	32b0      	adds	r2, #176	@ 0xb0
 800ac1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d01f      	beq.n	800ac64 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	33b0      	adds	r3, #176	@ 0xb0
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	4413      	add	r3, r2
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	32b0      	adds	r2, #176	@ 0xb0
 800ac42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac46:	4618      	mov	r0, r3
 800ac48:	f013 f8ca 	bl	801dde0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	32b0      	adds	r2, #176	@ 0xb0
 800ac56:	2100      	movs	r1, #0
 800ac58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	200000af 	.word	0x200000af
 800ac74:	200000b0 	.word	0x200000b0
 800ac78:	200000b1 	.word	0x200000b1

0800ac7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b086      	sub	sp, #24
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	32b0      	adds	r2, #176	@ 0xb0
 800ac90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac94:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ac96:	2300      	movs	r3, #0
 800ac98:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d101      	bne.n	800acac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800aca8:	2303      	movs	r3, #3
 800acaa:	e0bf      	b.n	800ae2c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d050      	beq.n	800ad5a <USBD_CDC_Setup+0xde>
 800acb8:	2b20      	cmp	r3, #32
 800acba:	f040 80af 	bne.w	800ae1c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	88db      	ldrh	r3, [r3, #6]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d03a      	beq.n	800ad3c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	b25b      	sxtb	r3, r3
 800accc:	2b00      	cmp	r3, #0
 800acce:	da1b      	bge.n	800ad08 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	33b0      	adds	r3, #176	@ 0xb0
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	4413      	add	r3, r2
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	683a      	ldr	r2, [r7, #0]
 800ace4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ace6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ace8:	683a      	ldr	r2, [r7, #0]
 800acea:	88d2      	ldrh	r2, [r2, #6]
 800acec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	88db      	ldrh	r3, [r3, #6]
 800acf2:	2b07      	cmp	r3, #7
 800acf4:	bf28      	it	cs
 800acf6:	2307      	movcs	r3, #7
 800acf8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	89fa      	ldrh	r2, [r7, #14]
 800acfe:	4619      	mov	r1, r3
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f001 fdbd 	bl	800c880 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ad06:	e090      	b.n	800ae2a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	785a      	ldrb	r2, [r3, #1]
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	88db      	ldrh	r3, [r3, #6]
 800ad16:	2b3f      	cmp	r3, #63	@ 0x3f
 800ad18:	d803      	bhi.n	800ad22 <USBD_CDC_Setup+0xa6>
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	88db      	ldrh	r3, [r3, #6]
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	e000      	b.n	800ad24 <USBD_CDC_Setup+0xa8>
 800ad22:	2240      	movs	r2, #64	@ 0x40
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ad2a:	6939      	ldr	r1, [r7, #16]
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ad32:	461a      	mov	r2, r3
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f001 fdcf 	bl	800c8d8 <USBD_CtlPrepareRx>
      break;
 800ad3a:	e076      	b.n	800ae2a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	33b0      	adds	r3, #176	@ 0xb0
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	4413      	add	r3, r2
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	7850      	ldrb	r0, [r2, #1]
 800ad52:	2200      	movs	r2, #0
 800ad54:	6839      	ldr	r1, [r7, #0]
 800ad56:	4798      	blx	r3
      break;
 800ad58:	e067      	b.n	800ae2a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	785b      	ldrb	r3, [r3, #1]
 800ad5e:	2b0b      	cmp	r3, #11
 800ad60:	d851      	bhi.n	800ae06 <USBD_CDC_Setup+0x18a>
 800ad62:	a201      	add	r2, pc, #4	@ (adr r2, 800ad68 <USBD_CDC_Setup+0xec>)
 800ad64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad68:	0800ad99 	.word	0x0800ad99
 800ad6c:	0800ae15 	.word	0x0800ae15
 800ad70:	0800ae07 	.word	0x0800ae07
 800ad74:	0800ae07 	.word	0x0800ae07
 800ad78:	0800ae07 	.word	0x0800ae07
 800ad7c:	0800ae07 	.word	0x0800ae07
 800ad80:	0800ae07 	.word	0x0800ae07
 800ad84:	0800ae07 	.word	0x0800ae07
 800ad88:	0800ae07 	.word	0x0800ae07
 800ad8c:	0800ae07 	.word	0x0800ae07
 800ad90:	0800adc3 	.word	0x0800adc3
 800ad94:	0800aded 	.word	0x0800aded
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	2b03      	cmp	r3, #3
 800ada2:	d107      	bne.n	800adb4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ada4:	f107 030a 	add.w	r3, r7, #10
 800ada8:	2202      	movs	r2, #2
 800adaa:	4619      	mov	r1, r3
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f001 fd67 	bl	800c880 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800adb2:	e032      	b.n	800ae1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800adb4:	6839      	ldr	r1, [r7, #0]
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f001 fce5 	bl	800c786 <USBD_CtlError>
            ret = USBD_FAIL;
 800adbc:	2303      	movs	r3, #3
 800adbe:	75fb      	strb	r3, [r7, #23]
          break;
 800adc0:	e02b      	b.n	800ae1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	2b03      	cmp	r3, #3
 800adcc:	d107      	bne.n	800adde <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800adce:	f107 030d 	add.w	r3, r7, #13
 800add2:	2201      	movs	r2, #1
 800add4:	4619      	mov	r1, r3
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f001 fd52 	bl	800c880 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800addc:	e01d      	b.n	800ae1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800adde:	6839      	ldr	r1, [r7, #0]
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f001 fcd0 	bl	800c786 <USBD_CtlError>
            ret = USBD_FAIL;
 800ade6:	2303      	movs	r3, #3
 800ade8:	75fb      	strb	r3, [r7, #23]
          break;
 800adea:	e016      	b.n	800ae1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	2b03      	cmp	r3, #3
 800adf6:	d00f      	beq.n	800ae18 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800adf8:	6839      	ldr	r1, [r7, #0]
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f001 fcc3 	bl	800c786 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae00:	2303      	movs	r3, #3
 800ae02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ae04:	e008      	b.n	800ae18 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ae06:	6839      	ldr	r1, [r7, #0]
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f001 fcbc 	bl	800c786 <USBD_CtlError>
          ret = USBD_FAIL;
 800ae0e:	2303      	movs	r3, #3
 800ae10:	75fb      	strb	r3, [r7, #23]
          break;
 800ae12:	e002      	b.n	800ae1a <USBD_CDC_Setup+0x19e>
          break;
 800ae14:	bf00      	nop
 800ae16:	e008      	b.n	800ae2a <USBD_CDC_Setup+0x1ae>
          break;
 800ae18:	bf00      	nop
      }
      break;
 800ae1a:	e006      	b.n	800ae2a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ae1c:	6839      	ldr	r1, [r7, #0]
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f001 fcb1 	bl	800c786 <USBD_CtlError>
      ret = USBD_FAIL;
 800ae24:	2303      	movs	r3, #3
 800ae26:	75fb      	strb	r3, [r7, #23]
      break;
 800ae28:	bf00      	nop
  }

  return (uint8_t)ret;
 800ae2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3718      	adds	r7, #24
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	32b0      	adds	r2, #176	@ 0xb0
 800ae52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d101      	bne.n	800ae5e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ae5a:	2303      	movs	r3, #3
 800ae5c:	e065      	b.n	800af2a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	32b0      	adds	r2, #176	@ 0xb0
 800ae68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ae6e:	78fb      	ldrb	r3, [r7, #3]
 800ae70:	f003 020f 	and.w	r2, r3, #15
 800ae74:	6879      	ldr	r1, [r7, #4]
 800ae76:	4613      	mov	r3, r2
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	4413      	add	r3, r2
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	440b      	add	r3, r1
 800ae80:	3318      	adds	r3, #24
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d02f      	beq.n	800aee8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ae88:	78fb      	ldrb	r3, [r7, #3]
 800ae8a:	f003 020f 	and.w	r2, r3, #15
 800ae8e:	6879      	ldr	r1, [r7, #4]
 800ae90:	4613      	mov	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	4413      	add	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	440b      	add	r3, r1
 800ae9a:	3318      	adds	r3, #24
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	78fb      	ldrb	r3, [r7, #3]
 800aea0:	f003 010f 	and.w	r1, r3, #15
 800aea4:	68f8      	ldr	r0, [r7, #12]
 800aea6:	460b      	mov	r3, r1
 800aea8:	00db      	lsls	r3, r3, #3
 800aeaa:	440b      	add	r3, r1
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	4403      	add	r3, r0
 800aeb0:	331c      	adds	r3, #28
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	fbb2 f1f3 	udiv	r1, r2, r3
 800aeb8:	fb01 f303 	mul.w	r3, r1, r3
 800aebc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d112      	bne.n	800aee8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800aec2:	78fb      	ldrb	r3, [r7, #3]
 800aec4:	f003 020f 	and.w	r2, r3, #15
 800aec8:	6879      	ldr	r1, [r7, #4]
 800aeca:	4613      	mov	r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4413      	add	r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	440b      	add	r3, r1
 800aed4:	3318      	adds	r3, #24
 800aed6:	2200      	movs	r2, #0
 800aed8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aeda:	78f9      	ldrb	r1, [r7, #3]
 800aedc:	2300      	movs	r3, #0
 800aede:	2200      	movs	r2, #0
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f012 fea0 	bl	801dc26 <USBD_LL_Transmit>
 800aee6:	e01f      	b.n	800af28 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	33b0      	adds	r3, #176	@ 0xb0
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4413      	add	r3, r2
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	691b      	ldr	r3, [r3, #16]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d010      	beq.n	800af28 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	33b0      	adds	r3, #176	@ 0xb0
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	4413      	add	r3, r2
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	691b      	ldr	r3, [r3, #16]
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800af1e:	68ba      	ldr	r2, [r7, #8]
 800af20:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800af24:	78fa      	ldrb	r2, [r7, #3]
 800af26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b084      	sub	sp, #16
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	460b      	mov	r3, r1
 800af3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	32b0      	adds	r2, #176	@ 0xb0
 800af48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	32b0      	adds	r2, #176	@ 0xb0
 800af58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d101      	bne.n	800af64 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800af60:	2303      	movs	r3, #3
 800af62:	e01a      	b.n	800af9a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800af64:	78fb      	ldrb	r3, [r7, #3]
 800af66:	4619      	mov	r1, r3
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f012 fe9e 	bl	801dcaa <USBD_LL_GetRxDataSize>
 800af6e:	4602      	mov	r2, r0
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	33b0      	adds	r3, #176	@ 0xb0
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	4413      	add	r3, r2
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800af8e:	68fa      	ldr	r2, [r7, #12]
 800af90:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800af94:	4611      	mov	r1, r2
 800af96:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800af98:	2300      	movs	r3, #0
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b084      	sub	sp, #16
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	32b0      	adds	r2, #176	@ 0xb0
 800afb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d101      	bne.n	800afc4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800afc0:	2303      	movs	r3, #3
 800afc2:	e024      	b.n	800b00e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	33b0      	adds	r3, #176	@ 0xb0
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4413      	add	r3, r2
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d019      	beq.n	800b00c <USBD_CDC_EP0_RxReady+0x6a>
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800afde:	2bff      	cmp	r3, #255	@ 0xff
 800afe0:	d014      	beq.n	800b00c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	33b0      	adds	r3, #176	@ 0xb0
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	4413      	add	r3, r2
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800affa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b002:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	22ff      	movs	r2, #255	@ 0xff
 800b008:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
	...

0800b018 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b086      	sub	sp, #24
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b020:	2182      	movs	r1, #130	@ 0x82
 800b022:	4818      	ldr	r0, [pc, #96]	@ (800b084 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b024:	f000 fd4f 	bl	800bac6 <USBD_GetEpDesc>
 800b028:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b02a:	2101      	movs	r1, #1
 800b02c:	4815      	ldr	r0, [pc, #84]	@ (800b084 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b02e:	f000 fd4a 	bl	800bac6 <USBD_GetEpDesc>
 800b032:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b034:	2181      	movs	r1, #129	@ 0x81
 800b036:	4813      	ldr	r0, [pc, #76]	@ (800b084 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b038:	f000 fd45 	bl	800bac6 <USBD_GetEpDesc>
 800b03c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	2210      	movs	r2, #16
 800b048:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d006      	beq.n	800b05e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	2200      	movs	r2, #0
 800b054:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b058:	711a      	strb	r2, [r3, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d006      	beq.n	800b072 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2200      	movs	r2, #0
 800b068:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b06c:	711a      	strb	r2, [r3, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2243      	movs	r2, #67	@ 0x43
 800b076:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b078:	4b02      	ldr	r3, [pc, #8]	@ (800b084 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	2000006c 	.word	0x2000006c

0800b088 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b086      	sub	sp, #24
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b090:	2182      	movs	r1, #130	@ 0x82
 800b092:	4818      	ldr	r0, [pc, #96]	@ (800b0f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b094:	f000 fd17 	bl	800bac6 <USBD_GetEpDesc>
 800b098:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b09a:	2101      	movs	r1, #1
 800b09c:	4815      	ldr	r0, [pc, #84]	@ (800b0f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b09e:	f000 fd12 	bl	800bac6 <USBD_GetEpDesc>
 800b0a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b0a4:	2181      	movs	r1, #129	@ 0x81
 800b0a6:	4813      	ldr	r0, [pc, #76]	@ (800b0f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b0a8:	f000 fd0d 	bl	800bac6 <USBD_GetEpDesc>
 800b0ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d002      	beq.n	800b0ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	2210      	movs	r2, #16
 800b0b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d006      	beq.n	800b0ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	711a      	strb	r2, [r3, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f042 0202 	orr.w	r2, r2, #2
 800b0cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d006      	beq.n	800b0e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	711a      	strb	r2, [r3, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f042 0202 	orr.w	r2, r2, #2
 800b0e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2243      	movs	r2, #67	@ 0x43
 800b0e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b0e8:	4b02      	ldr	r3, [pc, #8]	@ (800b0f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3718      	adds	r7, #24
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	2000006c 	.word	0x2000006c

0800b0f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b086      	sub	sp, #24
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b100:	2182      	movs	r1, #130	@ 0x82
 800b102:	4818      	ldr	r0, [pc, #96]	@ (800b164 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b104:	f000 fcdf 	bl	800bac6 <USBD_GetEpDesc>
 800b108:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b10a:	2101      	movs	r1, #1
 800b10c:	4815      	ldr	r0, [pc, #84]	@ (800b164 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b10e:	f000 fcda 	bl	800bac6 <USBD_GetEpDesc>
 800b112:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b114:	2181      	movs	r1, #129	@ 0x81
 800b116:	4813      	ldr	r0, [pc, #76]	@ (800b164 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b118:	f000 fcd5 	bl	800bac6 <USBD_GetEpDesc>
 800b11c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	2210      	movs	r2, #16
 800b128:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d006      	beq.n	800b13e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	2200      	movs	r2, #0
 800b134:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b138:	711a      	strb	r2, [r3, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d006      	beq.n	800b152 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2200      	movs	r2, #0
 800b148:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b14c:	711a      	strb	r2, [r3, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2243      	movs	r2, #67	@ 0x43
 800b156:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b158:	4b02      	ldr	r3, [pc, #8]	@ (800b164 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3718      	adds	r7, #24
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	2000006c 	.word	0x2000006c

0800b168 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	220a      	movs	r2, #10
 800b174:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b176:	4b03      	ldr	r3, [pc, #12]	@ (800b184 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b178:	4618      	mov	r0, r3
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr
 800b184:	20000028 	.word	0x20000028

0800b188 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d101      	bne.n	800b19c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b198:	2303      	movs	r3, #3
 800b19a:	e009      	b.n	800b1b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	33b0      	adds	r3, #176	@ 0xb0
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	4413      	add	r3, r2
 800b1aa:	683a      	ldr	r2, [r7, #0]
 800b1ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b087      	sub	sp, #28
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	32b0      	adds	r2, #176	@ 0xb0
 800b1d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d101      	bne.n	800b1e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b1de:	2303      	movs	r3, #3
 800b1e0:	e008      	b.n	800b1f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	68ba      	ldr	r2, [r7, #8]
 800b1e6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	371c      	adds	r7, #28
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	32b0      	adds	r2, #176	@ 0xb0
 800b214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b218:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d101      	bne.n	800b224 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b220:	2303      	movs	r3, #3
 800b222:	e004      	b.n	800b22e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	683a      	ldr	r2, [r7, #0]
 800b228:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3714      	adds	r7, #20
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr
	...

0800b23c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	32b0      	adds	r2, #176	@ 0xb0
 800b24e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b252:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b254:	2301      	movs	r3, #1
 800b256:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d101      	bne.n	800b262 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b25e:	2303      	movs	r3, #3
 800b260:	e025      	b.n	800b2ae <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d11f      	bne.n	800b2ac <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	2201      	movs	r2, #1
 800b270:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b274:	4b10      	ldr	r3, [pc, #64]	@ (800b2b8 <USBD_CDC_TransmitPacket+0x7c>)
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	f003 020f 	and.w	r2, r3, #15
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	4613      	mov	r3, r2
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	4413      	add	r3, r2
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	4403      	add	r3, r0
 800b28e:	3318      	adds	r3, #24
 800b290:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b292:	4b09      	ldr	r3, [pc, #36]	@ (800b2b8 <USBD_CDC_TransmitPacket+0x7c>)
 800b294:	7819      	ldrb	r1, [r3, #0]
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f012 fcbf 	bl	801dc26 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	200000af 	.word	0x200000af

0800b2bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	32b0      	adds	r2, #176	@ 0xb0
 800b2ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	32b0      	adds	r2, #176	@ 0xb0
 800b2de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d101      	bne.n	800b2ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b2e6:	2303      	movs	r3, #3
 800b2e8:	e018      	b.n	800b31c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	7c1b      	ldrb	r3, [r3, #16]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10a      	bne.n	800b308 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b2f2:	4b0c      	ldr	r3, [pc, #48]	@ (800b324 <USBD_CDC_ReceivePacket+0x68>)
 800b2f4:	7819      	ldrb	r1, [r3, #0]
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b2fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f012 fcb1 	bl	801dc68 <USBD_LL_PrepareReceive>
 800b306:	e008      	b.n	800b31a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b308:	4b06      	ldr	r3, [pc, #24]	@ (800b324 <USBD_CDC_ReceivePacket+0x68>)
 800b30a:	7819      	ldrb	r1, [r3, #0]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b312:	2340      	movs	r3, #64	@ 0x40
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f012 fca7 	bl	801dc68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	200000b0 	.word	0x200000b0

0800b328 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b086      	sub	sp, #24
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	4613      	mov	r3, r2
 800b334:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d101      	bne.n	800b340 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b33c:	2303      	movs	r3, #3
 800b33e:	e01f      	b.n	800b380 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2200      	movs	r2, #0
 800b344:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2200      	movs	r2, #0
 800b354:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d003      	beq.n	800b366 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	68ba      	ldr	r2, [r7, #8]
 800b362:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2201      	movs	r2, #1
 800b36a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	79fa      	ldrb	r2, [r7, #7]
 800b372:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f012 fb21 	bl	801d9bc <USBD_LL_Init>
 800b37a:	4603      	mov	r3, r0
 800b37c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b37e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b380:	4618      	mov	r0, r3
 800b382:	3718      	adds	r7, #24
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b392:	2300      	movs	r3, #0
 800b394:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d101      	bne.n	800b3a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b39c:	2303      	movs	r3, #3
 800b39e:	e025      	b.n	800b3ec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	683a      	ldr	r2, [r7, #0]
 800b3a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	32ae      	adds	r2, #174	@ 0xae
 800b3b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00f      	beq.n	800b3dc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	32ae      	adds	r2, #174	@ 0xae
 800b3c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3cc:	f107 020e 	add.w	r2, r7, #14
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	4798      	blx	r3
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b3e2:	1c5a      	adds	r2, r3, #1
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f012 fb29 	bl	801da54 <USBD_LL_Start>
 800b402:	4603      	mov	r3, r0
}
 800b404:	4618      	mov	r0, r3
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b414:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b416:	4618      	mov	r0, r3
 800b418:	370c      	adds	r7, #12
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr

0800b422 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b422:	b580      	push	{r7, lr}
 800b424:	b084      	sub	sp, #16
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
 800b42a:	460b      	mov	r3, r1
 800b42c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b42e:	2300      	movs	r3, #0
 800b430:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d009      	beq.n	800b450 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	78fa      	ldrb	r2, [r7, #3]
 800b446:	4611      	mov	r1, r2
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	4798      	blx	r3
 800b44c:	4603      	mov	r3, r0
 800b44e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b450:	7bfb      	ldrb	r3, [r7, #15]
}
 800b452:	4618      	mov	r0, r3
 800b454:	3710      	adds	r7, #16
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b084      	sub	sp, #16
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
 800b462:	460b      	mov	r3, r1
 800b464:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b466:	2300      	movs	r3, #0
 800b468:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	78fa      	ldrb	r2, [r7, #3]
 800b474:	4611      	mov	r1, r2
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	4798      	blx	r3
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b480:	2303      	movs	r3, #3
 800b482:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b484:	7bfb      	ldrb	r3, [r7, #15]
}
 800b486:	4618      	mov	r0, r3
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b084      	sub	sp, #16
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
 800b496:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b49e:	6839      	ldr	r1, [r7, #0]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f001 f936 	bl	800c712 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b4c2:	f003 031f 	and.w	r3, r3, #31
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	d01a      	beq.n	800b500 <USBD_LL_SetupStage+0x72>
 800b4ca:	2b02      	cmp	r3, #2
 800b4cc:	d822      	bhi.n	800b514 <USBD_LL_SetupStage+0x86>
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d002      	beq.n	800b4d8 <USBD_LL_SetupStage+0x4a>
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d00a      	beq.n	800b4ec <USBD_LL_SetupStage+0x5e>
 800b4d6:	e01d      	b.n	800b514 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b4de:	4619      	mov	r1, r3
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 fb63 	bl	800bbac <USBD_StdDevReq>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ea:	e020      	b.n	800b52e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 fbcb 	bl	800bc90 <USBD_StdItfReq>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	73fb      	strb	r3, [r7, #15]
      break;
 800b4fe:	e016      	b.n	800b52e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b506:	4619      	mov	r1, r3
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 fc2d 	bl	800bd68 <USBD_StdEPReq>
 800b50e:	4603      	mov	r3, r0
 800b510:	73fb      	strb	r3, [r7, #15]
      break;
 800b512:	e00c      	b.n	800b52e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b51a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	4619      	mov	r1, r3
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f012 faf6 	bl	801db14 <USBD_LL_StallEP>
 800b528:	4603      	mov	r3, r0
 800b52a:	73fb      	strb	r3, [r7, #15]
      break;
 800b52c:	bf00      	nop
  }

  return ret;
 800b52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b530:	4618      	mov	r0, r3
 800b532:	3710      	adds	r7, #16
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b086      	sub	sp, #24
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	460b      	mov	r3, r1
 800b542:	607a      	str	r2, [r7, #4]
 800b544:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b546:	2300      	movs	r3, #0
 800b548:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b54a:	7afb      	ldrb	r3, [r7, #11]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d16e      	bne.n	800b62e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b556:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b55e:	2b03      	cmp	r3, #3
 800b560:	f040 8098 	bne.w	800b694 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	689a      	ldr	r2, [r3, #8]
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	68db      	ldr	r3, [r3, #12]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d913      	bls.n	800b598 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	689a      	ldr	r2, [r3, #8]
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	1ad2      	subs	r2, r2, r3
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	68da      	ldr	r2, [r3, #12]
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	4293      	cmp	r3, r2
 800b588:	bf28      	it	cs
 800b58a:	4613      	movcs	r3, r2
 800b58c:	461a      	mov	r2, r3
 800b58e:	6879      	ldr	r1, [r7, #4]
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f001 f9be 	bl	800c912 <USBD_CtlContinueRx>
 800b596:	e07d      	b.n	800b694 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b59e:	f003 031f 	and.w	r3, r3, #31
 800b5a2:	2b02      	cmp	r3, #2
 800b5a4:	d014      	beq.n	800b5d0 <USBD_LL_DataOutStage+0x98>
 800b5a6:	2b02      	cmp	r3, #2
 800b5a8:	d81d      	bhi.n	800b5e6 <USBD_LL_DataOutStage+0xae>
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d002      	beq.n	800b5b4 <USBD_LL_DataOutStage+0x7c>
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d003      	beq.n	800b5ba <USBD_LL_DataOutStage+0x82>
 800b5b2:	e018      	b.n	800b5e6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	75bb      	strb	r3, [r7, #22]
            break;
 800b5b8:	e018      	b.n	800b5ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f000 fa64 	bl	800ba92 <USBD_CoreFindIF>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	75bb      	strb	r3, [r7, #22]
            break;
 800b5ce:	e00d      	b.n	800b5ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	4619      	mov	r1, r3
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f000 fa66 	bl	800baac <USBD_CoreFindEP>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	75bb      	strb	r3, [r7, #22]
            break;
 800b5e4:	e002      	b.n	800b5ec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	75bb      	strb	r3, [r7, #22]
            break;
 800b5ea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b5ec:	7dbb      	ldrb	r3, [r7, #22]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d119      	bne.n	800b626 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	2b03      	cmp	r3, #3
 800b5fc:	d113      	bne.n	800b626 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b5fe:	7dba      	ldrb	r2, [r7, #22]
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	32ae      	adds	r2, #174	@ 0xae
 800b604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d00b      	beq.n	800b626 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b60e:	7dba      	ldrb	r2, [r7, #22]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b616:	7dba      	ldrb	r2, [r7, #22]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	32ae      	adds	r2, #174	@ 0xae
 800b61c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	68f8      	ldr	r0, [r7, #12]
 800b624:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f001 f984 	bl	800c934 <USBD_CtlSendStatus>
 800b62c:	e032      	b.n	800b694 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b62e:	7afb      	ldrb	r3, [r7, #11]
 800b630:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b634:	b2db      	uxtb	r3, r3
 800b636:	4619      	mov	r1, r3
 800b638:	68f8      	ldr	r0, [r7, #12]
 800b63a:	f000 fa37 	bl	800baac <USBD_CoreFindEP>
 800b63e:	4603      	mov	r3, r0
 800b640:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b642:	7dbb      	ldrb	r3, [r7, #22]
 800b644:	2bff      	cmp	r3, #255	@ 0xff
 800b646:	d025      	beq.n	800b694 <USBD_LL_DataOutStage+0x15c>
 800b648:	7dbb      	ldrb	r3, [r7, #22]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d122      	bne.n	800b694 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b654:	b2db      	uxtb	r3, r3
 800b656:	2b03      	cmp	r3, #3
 800b658:	d117      	bne.n	800b68a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b65a:	7dba      	ldrb	r2, [r7, #22]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	32ae      	adds	r2, #174	@ 0xae
 800b660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b664:	699b      	ldr	r3, [r3, #24]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00f      	beq.n	800b68a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b66a:	7dba      	ldrb	r2, [r7, #22]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b672:	7dba      	ldrb	r2, [r7, #22]
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	32ae      	adds	r2, #174	@ 0xae
 800b678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b67c:	699b      	ldr	r3, [r3, #24]
 800b67e:	7afa      	ldrb	r2, [r7, #11]
 800b680:	4611      	mov	r1, r2
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	4798      	blx	r3
 800b686:	4603      	mov	r3, r0
 800b688:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b68a:	7dfb      	ldrb	r3, [r7, #23]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d001      	beq.n	800b694 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b690:	7dfb      	ldrb	r3, [r7, #23]
 800b692:	e000      	b.n	800b696 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3718      	adds	r7, #24
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b086      	sub	sp, #24
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	60f8      	str	r0, [r7, #12]
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	607a      	str	r2, [r7, #4]
 800b6aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b6ac:	7afb      	ldrb	r3, [r7, #11]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d16f      	bne.n	800b792 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	3314      	adds	r3, #20
 800b6b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b6be:	2b02      	cmp	r3, #2
 800b6c0:	d15a      	bne.n	800b778 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	689a      	ldr	r2, [r3, #8]
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	68db      	ldr	r3, [r3, #12]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d914      	bls.n	800b6f8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	689a      	ldr	r2, [r3, #8]
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	68db      	ldr	r3, [r3, #12]
 800b6d6:	1ad2      	subs	r2, r2, r3
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	6879      	ldr	r1, [r7, #4]
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f001 f8e6 	bl	800c8b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	2100      	movs	r1, #0
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	f012 fab9 	bl	801dc68 <USBD_LL_PrepareReceive>
 800b6f6:	e03f      	b.n	800b778 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	68da      	ldr	r2, [r3, #12]
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	429a      	cmp	r2, r3
 800b702:	d11c      	bne.n	800b73e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	685a      	ldr	r2, [r3, #4]
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d316      	bcc.n	800b73e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d20f      	bcs.n	800b73e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b71e:	2200      	movs	r2, #0
 800b720:	2100      	movs	r1, #0
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	f001 f8c7 	bl	800c8b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b730:	2300      	movs	r3, #0
 800b732:	2200      	movs	r2, #0
 800b734:	2100      	movs	r1, #0
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f012 fa96 	bl	801dc68 <USBD_LL_PrepareReceive>
 800b73c:	e01c      	b.n	800b778 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b744:	b2db      	uxtb	r3, r3
 800b746:	2b03      	cmp	r3, #3
 800b748:	d10f      	bne.n	800b76a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d009      	beq.n	800b76a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2200      	movs	r2, #0
 800b75a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b76a:	2180      	movs	r1, #128	@ 0x80
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f012 f9d1 	bl	801db14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f001 f8f1 	bl	800c95a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d03a      	beq.n	800b7f8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b782:	68f8      	ldr	r0, [r7, #12]
 800b784:	f7ff fe42 	bl	800b40c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2200      	movs	r2, #0
 800b78c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b790:	e032      	b.n	800b7f8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b792:	7afb      	ldrb	r3, [r7, #11]
 800b794:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	4619      	mov	r1, r3
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f000 f985 	bl	800baac <USBD_CoreFindEP>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7a6:	7dfb      	ldrb	r3, [r7, #23]
 800b7a8:	2bff      	cmp	r3, #255	@ 0xff
 800b7aa:	d025      	beq.n	800b7f8 <USBD_LL_DataInStage+0x15a>
 800b7ac:	7dfb      	ldrb	r3, [r7, #23]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d122      	bne.n	800b7f8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	2b03      	cmp	r3, #3
 800b7bc:	d11c      	bne.n	800b7f8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b7be:	7dfa      	ldrb	r2, [r7, #23]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	32ae      	adds	r2, #174	@ 0xae
 800b7c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c8:	695b      	ldr	r3, [r3, #20]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d014      	beq.n	800b7f8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b7ce:	7dfa      	ldrb	r2, [r7, #23]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b7d6:	7dfa      	ldrb	r2, [r7, #23]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	32ae      	adds	r2, #174	@ 0xae
 800b7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7e0:	695b      	ldr	r3, [r3, #20]
 800b7e2:	7afa      	ldrb	r2, [r7, #11]
 800b7e4:	4611      	mov	r1, r2
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	4798      	blx	r3
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b7ee:	7dbb      	ldrb	r3, [r7, #22]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d001      	beq.n	800b7f8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b7f4:	7dbb      	ldrb	r3, [r7, #22]
 800b7f6:	e000      	b.n	800b7fa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b7f8:	2300      	movs	r3, #0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3718      	adds	r7, #24
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b084      	sub	sp, #16
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b80a:	2300      	movs	r3, #0
 800b80c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2201      	movs	r2, #1
 800b812:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2200      	movs	r2, #0
 800b822:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d014      	beq.n	800b868 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00e      	beq.n	800b868 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	6852      	ldr	r2, [r2, #4]
 800b856:	b2d2      	uxtb	r2, r2
 800b858:	4611      	mov	r1, r2
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	4798      	blx	r3
 800b85e:	4603      	mov	r3, r0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d001      	beq.n	800b868 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b864:	2303      	movs	r3, #3
 800b866:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b868:	2340      	movs	r3, #64	@ 0x40
 800b86a:	2200      	movs	r2, #0
 800b86c:	2100      	movs	r1, #0
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f012 f90b 	bl	801da8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2201      	movs	r2, #1
 800b878:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2240      	movs	r2, #64	@ 0x40
 800b880:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b884:	2340      	movs	r3, #64	@ 0x40
 800b886:	2200      	movs	r2, #0
 800b888:	2180      	movs	r1, #128	@ 0x80
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f012 f8fd 	bl	801da8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2240      	movs	r2, #64	@ 0x40
 800b89a:	621a      	str	r2, [r3, #32]

  return ret;
 800b89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b8a6:	b480      	push	{r7}
 800b8a8:	b083      	sub	sp, #12
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	78fa      	ldrb	r2, [r7, #3]
 800b8b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	370c      	adds	r7, #12
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr

0800b8c6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b8c6:	b480      	push	{r7}
 800b8c8:	b083      	sub	sp, #12
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	2b04      	cmp	r3, #4
 800b8d8:	d006      	beq.n	800b8e8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8e0:	b2da      	uxtb	r2, r3
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2204      	movs	r2, #4
 800b8ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b8f0:	2300      	movs	r3, #0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	370c      	adds	r7, #12
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr

0800b8fe <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b8fe:	b480      	push	{r7}
 800b900:	b083      	sub	sp, #12
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	2b04      	cmp	r3, #4
 800b910:	d106      	bne.n	800b920 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b918:	b2da      	uxtb	r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b920:	2300      	movs	r3, #0
}
 800b922:	4618      	mov	r0, r3
 800b924:	370c      	adds	r7, #12
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr

0800b92e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b082      	sub	sp, #8
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	2b03      	cmp	r3, #3
 800b940:	d110      	bne.n	800b964 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00b      	beq.n	800b964 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b952:	69db      	ldr	r3, [r3, #28]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d005      	beq.n	800b964 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b95e:	69db      	ldr	r3, [r3, #28]
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b964:	2300      	movs	r3, #0
}
 800b966:	4618      	mov	r0, r3
 800b968:	3708      	adds	r7, #8
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b082      	sub	sp, #8
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
 800b976:	460b      	mov	r3, r1
 800b978:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	32ae      	adds	r2, #174	@ 0xae
 800b984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d101      	bne.n	800b990 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b98c:	2303      	movs	r3, #3
 800b98e:	e01c      	b.n	800b9ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b996:	b2db      	uxtb	r3, r3
 800b998:	2b03      	cmp	r3, #3
 800b99a:	d115      	bne.n	800b9c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	32ae      	adds	r2, #174	@ 0xae
 800b9a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9aa:	6a1b      	ldr	r3, [r3, #32]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00b      	beq.n	800b9c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	32ae      	adds	r2, #174	@ 0xae
 800b9ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9be:	6a1b      	ldr	r3, [r3, #32]
 800b9c0:	78fa      	ldrb	r2, [r7, #3]
 800b9c2:	4611      	mov	r1, r2
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b9c8:	2300      	movs	r3, #0
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b082      	sub	sp, #8
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
 800b9da:	460b      	mov	r3, r1
 800b9dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	32ae      	adds	r2, #174	@ 0xae
 800b9e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d101      	bne.n	800b9f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b9f0:	2303      	movs	r3, #3
 800b9f2:	e01c      	b.n	800ba2e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	2b03      	cmp	r3, #3
 800b9fe:	d115      	bne.n	800ba2c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	32ae      	adds	r2, #174	@ 0xae
 800ba0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d00b      	beq.n	800ba2c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	32ae      	adds	r2, #174	@ 0xae
 800ba1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba24:	78fa      	ldrb	r2, [r7, #3]
 800ba26:	4611      	mov	r1, r2
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3708      	adds	r7, #8
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ba36:	b480      	push	{r7}
 800ba38:	b083      	sub	sp, #12
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	370c      	adds	r7, #12
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr

0800ba4c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ba54:	2300      	movs	r3, #0
 800ba56:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d00e      	beq.n	800ba88 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	687a      	ldr	r2, [r7, #4]
 800ba74:	6852      	ldr	r2, [r2, #4]
 800ba76:	b2d2      	uxtb	r2, r2
 800ba78:	4611      	mov	r1, r2
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	4798      	blx	r3
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d001      	beq.n	800ba88 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ba84:	2303      	movs	r3, #3
 800ba86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ba92:	b480      	push	{r7}
 800ba94:	b083      	sub	sp, #12
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ba9e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	370c      	adds	r7, #12
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	460b      	mov	r3, r1
 800bab6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bab8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800baba:	4618      	mov	r0, r3
 800babc:	370c      	adds	r7, #12
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr

0800bac6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bac6:	b580      	push	{r7, lr}
 800bac8:	b086      	sub	sp, #24
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
 800bace:	460b      	mov	r3, r1
 800bad0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bada:	2300      	movs	r3, #0
 800badc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	885b      	ldrh	r3, [r3, #2]
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	7812      	ldrb	r2, [r2, #0]
 800bae8:	4293      	cmp	r3, r2
 800baea:	d91f      	bls.n	800bb2c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800baf2:	e013      	b.n	800bb1c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800baf4:	f107 030a 	add.w	r3, r7, #10
 800baf8:	4619      	mov	r1, r3
 800bafa:	6978      	ldr	r0, [r7, #20]
 800bafc:	f000 f81b 	bl	800bb36 <USBD_GetNextDesc>
 800bb00:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	785b      	ldrb	r3, [r3, #1]
 800bb06:	2b05      	cmp	r3, #5
 800bb08:	d108      	bne.n	800bb1c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	789b      	ldrb	r3, [r3, #2]
 800bb12:	78fa      	ldrb	r2, [r7, #3]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d008      	beq.n	800bb2a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	885b      	ldrh	r3, [r3, #2]
 800bb20:	b29a      	uxth	r2, r3
 800bb22:	897b      	ldrh	r3, [r7, #10]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d8e5      	bhi.n	800baf4 <USBD_GetEpDesc+0x2e>
 800bb28:	e000      	b.n	800bb2c <USBD_GetEpDesc+0x66>
          break;
 800bb2a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bb2c:	693b      	ldr	r3, [r7, #16]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3718      	adds	r7, #24
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bb36:	b480      	push	{r7}
 800bb38:	b085      	sub	sp, #20
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
 800bb3e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	881b      	ldrh	r3, [r3, #0]
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	7812      	ldrb	r2, [r2, #0]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	461a      	mov	r2, r3
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4413      	add	r3, r2
 800bb5e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bb60:	68fb      	ldr	r3, [r7, #12]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3714      	adds	r7, #20
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr

0800bb6e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bb6e:	b480      	push	{r7}
 800bb70:	b087      	sub	sp, #28
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	3301      	adds	r3, #1
 800bb84:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bb8c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bb90:	021b      	lsls	r3, r3, #8
 800bb92:	b21a      	sxth	r2, r3
 800bb94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	b21b      	sxth	r3, r3
 800bb9c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bb9e:	89fb      	ldrh	r3, [r7, #14]
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	371c      	adds	r7, #28
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bbc2:	2b40      	cmp	r3, #64	@ 0x40
 800bbc4:	d005      	beq.n	800bbd2 <USBD_StdDevReq+0x26>
 800bbc6:	2b40      	cmp	r3, #64	@ 0x40
 800bbc8:	d857      	bhi.n	800bc7a <USBD_StdDevReq+0xce>
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d00f      	beq.n	800bbee <USBD_StdDevReq+0x42>
 800bbce:	2b20      	cmp	r3, #32
 800bbd0:	d153      	bne.n	800bc7a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	32ae      	adds	r2, #174	@ 0xae
 800bbdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbe0:	689b      	ldr	r3, [r3, #8]
 800bbe2:	6839      	ldr	r1, [r7, #0]
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	4798      	blx	r3
 800bbe8:	4603      	mov	r3, r0
 800bbea:	73fb      	strb	r3, [r7, #15]
      break;
 800bbec:	e04a      	b.n	800bc84 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	785b      	ldrb	r3, [r3, #1]
 800bbf2:	2b09      	cmp	r3, #9
 800bbf4:	d83b      	bhi.n	800bc6e <USBD_StdDevReq+0xc2>
 800bbf6:	a201      	add	r2, pc, #4	@ (adr r2, 800bbfc <USBD_StdDevReq+0x50>)
 800bbf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbfc:	0800bc51 	.word	0x0800bc51
 800bc00:	0800bc65 	.word	0x0800bc65
 800bc04:	0800bc6f 	.word	0x0800bc6f
 800bc08:	0800bc5b 	.word	0x0800bc5b
 800bc0c:	0800bc6f 	.word	0x0800bc6f
 800bc10:	0800bc2f 	.word	0x0800bc2f
 800bc14:	0800bc25 	.word	0x0800bc25
 800bc18:	0800bc6f 	.word	0x0800bc6f
 800bc1c:	0800bc47 	.word	0x0800bc47
 800bc20:	0800bc39 	.word	0x0800bc39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bc24:	6839      	ldr	r1, [r7, #0]
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 fa3c 	bl	800c0a4 <USBD_GetDescriptor>
          break;
 800bc2c:	e024      	b.n	800bc78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bc2e:	6839      	ldr	r1, [r7, #0]
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 fbcb 	bl	800c3cc <USBD_SetAddress>
          break;
 800bc36:	e01f      	b.n	800bc78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bc38:	6839      	ldr	r1, [r7, #0]
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 fc0a 	bl	800c454 <USBD_SetConfig>
 800bc40:	4603      	mov	r3, r0
 800bc42:	73fb      	strb	r3, [r7, #15]
          break;
 800bc44:	e018      	b.n	800bc78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bc46:	6839      	ldr	r1, [r7, #0]
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 fcad 	bl	800c5a8 <USBD_GetConfig>
          break;
 800bc4e:	e013      	b.n	800bc78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bc50:	6839      	ldr	r1, [r7, #0]
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 fcde 	bl	800c614 <USBD_GetStatus>
          break;
 800bc58:	e00e      	b.n	800bc78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bc5a:	6839      	ldr	r1, [r7, #0]
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 fd0d 	bl	800c67c <USBD_SetFeature>
          break;
 800bc62:	e009      	b.n	800bc78 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bc64:	6839      	ldr	r1, [r7, #0]
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 fd31 	bl	800c6ce <USBD_ClrFeature>
          break;
 800bc6c:	e004      	b.n	800bc78 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bc6e:	6839      	ldr	r1, [r7, #0]
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 fd88 	bl	800c786 <USBD_CtlError>
          break;
 800bc76:	bf00      	nop
      }
      break;
 800bc78:	e004      	b.n	800bc84 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bc7a:	6839      	ldr	r1, [r7, #0]
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 fd82 	bl	800c786 <USBD_CtlError>
      break;
 800bc82:	bf00      	nop
  }

  return ret;
 800bc84:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop

0800bc90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bca6:	2b40      	cmp	r3, #64	@ 0x40
 800bca8:	d005      	beq.n	800bcb6 <USBD_StdItfReq+0x26>
 800bcaa:	2b40      	cmp	r3, #64	@ 0x40
 800bcac:	d852      	bhi.n	800bd54 <USBD_StdItfReq+0xc4>
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d001      	beq.n	800bcb6 <USBD_StdItfReq+0x26>
 800bcb2:	2b20      	cmp	r3, #32
 800bcb4:	d14e      	bne.n	800bd54 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	2b02      	cmp	r3, #2
 800bcc2:	d840      	bhi.n	800bd46 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	889b      	ldrh	r3, [r3, #4]
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d836      	bhi.n	800bd3c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	889b      	ldrh	r3, [r3, #4]
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f7ff fedb 	bl	800ba92 <USBD_CoreFindIF>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bce0:	7bbb      	ldrb	r3, [r7, #14]
 800bce2:	2bff      	cmp	r3, #255	@ 0xff
 800bce4:	d01d      	beq.n	800bd22 <USBD_StdItfReq+0x92>
 800bce6:	7bbb      	ldrb	r3, [r7, #14]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d11a      	bne.n	800bd22 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bcec:	7bba      	ldrb	r2, [r7, #14]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	32ae      	adds	r2, #174	@ 0xae
 800bcf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d00f      	beq.n	800bd1c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bcfc:	7bba      	ldrb	r2, [r7, #14]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bd04:	7bba      	ldrb	r2, [r7, #14]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	32ae      	adds	r2, #174	@ 0xae
 800bd0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	6839      	ldr	r1, [r7, #0]
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	4798      	blx	r3
 800bd16:	4603      	mov	r3, r0
 800bd18:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bd1a:	e004      	b.n	800bd26 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bd1c:	2303      	movs	r3, #3
 800bd1e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bd20:	e001      	b.n	800bd26 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bd22:	2303      	movs	r3, #3
 800bd24:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	88db      	ldrh	r3, [r3, #6]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d110      	bne.n	800bd50 <USBD_StdItfReq+0xc0>
 800bd2e:	7bfb      	ldrb	r3, [r7, #15]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10d      	bne.n	800bd50 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 fdfd 	bl	800c934 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bd3a:	e009      	b.n	800bd50 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bd3c:	6839      	ldr	r1, [r7, #0]
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 fd21 	bl	800c786 <USBD_CtlError>
          break;
 800bd44:	e004      	b.n	800bd50 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bd46:	6839      	ldr	r1, [r7, #0]
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 fd1c 	bl	800c786 <USBD_CtlError>
          break;
 800bd4e:	e000      	b.n	800bd52 <USBD_StdItfReq+0xc2>
          break;
 800bd50:	bf00      	nop
      }
      break;
 800bd52:	e004      	b.n	800bd5e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bd54:	6839      	ldr	r1, [r7, #0]
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 fd15 	bl	800c786 <USBD_CtlError>
      break;
 800bd5c:	bf00      	nop
  }

  return ret;
 800bd5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3710      	adds	r7, #16
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bd72:	2300      	movs	r3, #0
 800bd74:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	889b      	ldrh	r3, [r3, #4]
 800bd7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd84:	2b40      	cmp	r3, #64	@ 0x40
 800bd86:	d007      	beq.n	800bd98 <USBD_StdEPReq+0x30>
 800bd88:	2b40      	cmp	r3, #64	@ 0x40
 800bd8a:	f200 817f 	bhi.w	800c08c <USBD_StdEPReq+0x324>
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d02a      	beq.n	800bde8 <USBD_StdEPReq+0x80>
 800bd92:	2b20      	cmp	r3, #32
 800bd94:	f040 817a 	bne.w	800c08c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bd98:	7bbb      	ldrb	r3, [r7, #14]
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f7ff fe85 	bl	800baac <USBD_CoreFindEP>
 800bda2:	4603      	mov	r3, r0
 800bda4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bda6:	7b7b      	ldrb	r3, [r7, #13]
 800bda8:	2bff      	cmp	r3, #255	@ 0xff
 800bdaa:	f000 8174 	beq.w	800c096 <USBD_StdEPReq+0x32e>
 800bdae:	7b7b      	ldrb	r3, [r7, #13]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f040 8170 	bne.w	800c096 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bdb6:	7b7a      	ldrb	r2, [r7, #13]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bdbe:	7b7a      	ldrb	r2, [r7, #13]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	32ae      	adds	r2, #174	@ 0xae
 800bdc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	f000 8163 	beq.w	800c096 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bdd0:	7b7a      	ldrb	r2, [r7, #13]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	32ae      	adds	r2, #174	@ 0xae
 800bdd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	4798      	blx	r3
 800bde2:	4603      	mov	r3, r0
 800bde4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bde6:	e156      	b.n	800c096 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	785b      	ldrb	r3, [r3, #1]
 800bdec:	2b03      	cmp	r3, #3
 800bdee:	d008      	beq.n	800be02 <USBD_StdEPReq+0x9a>
 800bdf0:	2b03      	cmp	r3, #3
 800bdf2:	f300 8145 	bgt.w	800c080 <USBD_StdEPReq+0x318>
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f000 809b 	beq.w	800bf32 <USBD_StdEPReq+0x1ca>
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d03c      	beq.n	800be7a <USBD_StdEPReq+0x112>
 800be00:	e13e      	b.n	800c080 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	2b02      	cmp	r3, #2
 800be0c:	d002      	beq.n	800be14 <USBD_StdEPReq+0xac>
 800be0e:	2b03      	cmp	r3, #3
 800be10:	d016      	beq.n	800be40 <USBD_StdEPReq+0xd8>
 800be12:	e02c      	b.n	800be6e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be14:	7bbb      	ldrb	r3, [r7, #14]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d00d      	beq.n	800be36 <USBD_StdEPReq+0xce>
 800be1a:	7bbb      	ldrb	r3, [r7, #14]
 800be1c:	2b80      	cmp	r3, #128	@ 0x80
 800be1e:	d00a      	beq.n	800be36 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800be20:	7bbb      	ldrb	r3, [r7, #14]
 800be22:	4619      	mov	r1, r3
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f011 fe75 	bl	801db14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800be2a:	2180      	movs	r1, #128	@ 0x80
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f011 fe71 	bl	801db14 <USBD_LL_StallEP>
 800be32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be34:	e020      	b.n	800be78 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800be36:	6839      	ldr	r1, [r7, #0]
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 fca4 	bl	800c786 <USBD_CtlError>
              break;
 800be3e:	e01b      	b.n	800be78 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	885b      	ldrh	r3, [r3, #2]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d10e      	bne.n	800be66 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800be48:	7bbb      	ldrb	r3, [r7, #14]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d00b      	beq.n	800be66 <USBD_StdEPReq+0xfe>
 800be4e:	7bbb      	ldrb	r3, [r7, #14]
 800be50:	2b80      	cmp	r3, #128	@ 0x80
 800be52:	d008      	beq.n	800be66 <USBD_StdEPReq+0xfe>
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	88db      	ldrh	r3, [r3, #6]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d104      	bne.n	800be66 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800be5c:	7bbb      	ldrb	r3, [r7, #14]
 800be5e:	4619      	mov	r1, r3
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f011 fe57 	bl	801db14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 fd64 	bl	800c934 <USBD_CtlSendStatus>

              break;
 800be6c:	e004      	b.n	800be78 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800be6e:	6839      	ldr	r1, [r7, #0]
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 fc88 	bl	800c786 <USBD_CtlError>
              break;
 800be76:	bf00      	nop
          }
          break;
 800be78:	e107      	b.n	800c08a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be80:	b2db      	uxtb	r3, r3
 800be82:	2b02      	cmp	r3, #2
 800be84:	d002      	beq.n	800be8c <USBD_StdEPReq+0x124>
 800be86:	2b03      	cmp	r3, #3
 800be88:	d016      	beq.n	800beb8 <USBD_StdEPReq+0x150>
 800be8a:	e04b      	b.n	800bf24 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be8c:	7bbb      	ldrb	r3, [r7, #14]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00d      	beq.n	800beae <USBD_StdEPReq+0x146>
 800be92:	7bbb      	ldrb	r3, [r7, #14]
 800be94:	2b80      	cmp	r3, #128	@ 0x80
 800be96:	d00a      	beq.n	800beae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800be98:	7bbb      	ldrb	r3, [r7, #14]
 800be9a:	4619      	mov	r1, r3
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f011 fe39 	bl	801db14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bea2:	2180      	movs	r1, #128	@ 0x80
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f011 fe35 	bl	801db14 <USBD_LL_StallEP>
 800beaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800beac:	e040      	b.n	800bf30 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800beae:	6839      	ldr	r1, [r7, #0]
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 fc68 	bl	800c786 <USBD_CtlError>
              break;
 800beb6:	e03b      	b.n	800bf30 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	885b      	ldrh	r3, [r3, #2]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d136      	bne.n	800bf2e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bec0:	7bbb      	ldrb	r3, [r7, #14]
 800bec2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d004      	beq.n	800bed4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800beca:	7bbb      	ldrb	r3, [r7, #14]
 800becc:	4619      	mov	r1, r3
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f011 fe3f 	bl	801db52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 fd2d 	bl	800c934 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800beda:	7bbb      	ldrb	r3, [r7, #14]
 800bedc:	4619      	mov	r1, r3
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f7ff fde4 	bl	800baac <USBD_CoreFindEP>
 800bee4:	4603      	mov	r3, r0
 800bee6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bee8:	7b7b      	ldrb	r3, [r7, #13]
 800beea:	2bff      	cmp	r3, #255	@ 0xff
 800beec:	d01f      	beq.n	800bf2e <USBD_StdEPReq+0x1c6>
 800beee:	7b7b      	ldrb	r3, [r7, #13]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d11c      	bne.n	800bf2e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bef4:	7b7a      	ldrb	r2, [r7, #13]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800befc:	7b7a      	ldrb	r2, [r7, #13]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	32ae      	adds	r2, #174	@ 0xae
 800bf02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d010      	beq.n	800bf2e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf0c:	7b7a      	ldrb	r2, [r7, #13]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	32ae      	adds	r2, #174	@ 0xae
 800bf12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	6839      	ldr	r1, [r7, #0]
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	4798      	blx	r3
 800bf1e:	4603      	mov	r3, r0
 800bf20:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bf22:	e004      	b.n	800bf2e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bf24:	6839      	ldr	r1, [r7, #0]
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 fc2d 	bl	800c786 <USBD_CtlError>
              break;
 800bf2c:	e000      	b.n	800bf30 <USBD_StdEPReq+0x1c8>
              break;
 800bf2e:	bf00      	nop
          }
          break;
 800bf30:	e0ab      	b.n	800c08a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	2b02      	cmp	r3, #2
 800bf3c:	d002      	beq.n	800bf44 <USBD_StdEPReq+0x1dc>
 800bf3e:	2b03      	cmp	r3, #3
 800bf40:	d032      	beq.n	800bfa8 <USBD_StdEPReq+0x240>
 800bf42:	e097      	b.n	800c074 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf44:	7bbb      	ldrb	r3, [r7, #14]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d007      	beq.n	800bf5a <USBD_StdEPReq+0x1f2>
 800bf4a:	7bbb      	ldrb	r3, [r7, #14]
 800bf4c:	2b80      	cmp	r3, #128	@ 0x80
 800bf4e:	d004      	beq.n	800bf5a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bf50:	6839      	ldr	r1, [r7, #0]
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 fc17 	bl	800c786 <USBD_CtlError>
                break;
 800bf58:	e091      	b.n	800c07e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	da0b      	bge.n	800bf7a <USBD_StdEPReq+0x212>
 800bf62:	7bbb      	ldrb	r3, [r7, #14]
 800bf64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bf68:	4613      	mov	r3, r2
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	4413      	add	r3, r2
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	3310      	adds	r3, #16
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	4413      	add	r3, r2
 800bf76:	3304      	adds	r3, #4
 800bf78:	e00b      	b.n	800bf92 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf7a:	7bbb      	ldrb	r3, [r7, #14]
 800bf7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf80:	4613      	mov	r3, r2
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	4413      	add	r3, r2
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	4413      	add	r3, r2
 800bf90:	3304      	adds	r3, #4
 800bf92:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	2200      	movs	r2, #0
 800bf98:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	2202      	movs	r2, #2
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 fc6d 	bl	800c880 <USBD_CtlSendData>
              break;
 800bfa6:	e06a      	b.n	800c07e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bfa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	da11      	bge.n	800bfd4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bfb0:	7bbb      	ldrb	r3, [r7, #14]
 800bfb2:	f003 020f 	and.w	r2, r3, #15
 800bfb6:	6879      	ldr	r1, [r7, #4]
 800bfb8:	4613      	mov	r3, r2
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	440b      	add	r3, r1
 800bfc2:	3324      	adds	r3, #36	@ 0x24
 800bfc4:	881b      	ldrh	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d117      	bne.n	800bffa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bfca:	6839      	ldr	r1, [r7, #0]
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 fbda 	bl	800c786 <USBD_CtlError>
                  break;
 800bfd2:	e054      	b.n	800c07e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bfd4:	7bbb      	ldrb	r3, [r7, #14]
 800bfd6:	f003 020f 	and.w	r2, r3, #15
 800bfda:	6879      	ldr	r1, [r7, #4]
 800bfdc:	4613      	mov	r3, r2
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	4413      	add	r3, r2
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	440b      	add	r3, r1
 800bfe6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bfea:	881b      	ldrh	r3, [r3, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d104      	bne.n	800bffa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bff0:	6839      	ldr	r1, [r7, #0]
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 fbc7 	bl	800c786 <USBD_CtlError>
                  break;
 800bff8:	e041      	b.n	800c07e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bffa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	da0b      	bge.n	800c01a <USBD_StdEPReq+0x2b2>
 800c002:	7bbb      	ldrb	r3, [r7, #14]
 800c004:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c008:	4613      	mov	r3, r2
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	4413      	add	r3, r2
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	3310      	adds	r3, #16
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	4413      	add	r3, r2
 800c016:	3304      	adds	r3, #4
 800c018:	e00b      	b.n	800c032 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c01a:	7bbb      	ldrb	r3, [r7, #14]
 800c01c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c020:	4613      	mov	r3, r2
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	4413      	add	r3, r2
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	4413      	add	r3, r2
 800c030:	3304      	adds	r3, #4
 800c032:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c034:	7bbb      	ldrb	r3, [r7, #14]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d002      	beq.n	800c040 <USBD_StdEPReq+0x2d8>
 800c03a:	7bbb      	ldrb	r3, [r7, #14]
 800c03c:	2b80      	cmp	r3, #128	@ 0x80
 800c03e:	d103      	bne.n	800c048 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	2200      	movs	r2, #0
 800c044:	601a      	str	r2, [r3, #0]
 800c046:	e00e      	b.n	800c066 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c048:	7bbb      	ldrb	r3, [r7, #14]
 800c04a:	4619      	mov	r1, r3
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f011 fd9f 	bl	801db90 <USBD_LL_IsStallEP>
 800c052:	4603      	mov	r3, r0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d003      	beq.n	800c060 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	2201      	movs	r2, #1
 800c05c:	601a      	str	r2, [r3, #0]
 800c05e:	e002      	b.n	800c066 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	2200      	movs	r2, #0
 800c064:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	2202      	movs	r2, #2
 800c06a:	4619      	mov	r1, r3
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 fc07 	bl	800c880 <USBD_CtlSendData>
              break;
 800c072:	e004      	b.n	800c07e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c074:	6839      	ldr	r1, [r7, #0]
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 fb85 	bl	800c786 <USBD_CtlError>
              break;
 800c07c:	bf00      	nop
          }
          break;
 800c07e:	e004      	b.n	800c08a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c080:	6839      	ldr	r1, [r7, #0]
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 fb7f 	bl	800c786 <USBD_CtlError>
          break;
 800c088:	bf00      	nop
      }
      break;
 800c08a:	e005      	b.n	800c098 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c08c:	6839      	ldr	r1, [r7, #0]
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 fb79 	bl	800c786 <USBD_CtlError>
      break;
 800c094:	e000      	b.n	800c098 <USBD_StdEPReq+0x330>
      break;
 800c096:	bf00      	nop
  }

  return ret;
 800c098:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
	...

0800c0a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b084      	sub	sp, #16
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	885b      	ldrh	r3, [r3, #2]
 800c0be:	0a1b      	lsrs	r3, r3, #8
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	2b0e      	cmp	r3, #14
 800c0c6:	f200 8152 	bhi.w	800c36e <USBD_GetDescriptor+0x2ca>
 800c0ca:	a201      	add	r2, pc, #4	@ (adr r2, 800c0d0 <USBD_GetDescriptor+0x2c>)
 800c0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d0:	0800c141 	.word	0x0800c141
 800c0d4:	0800c159 	.word	0x0800c159
 800c0d8:	0800c199 	.word	0x0800c199
 800c0dc:	0800c36f 	.word	0x0800c36f
 800c0e0:	0800c36f 	.word	0x0800c36f
 800c0e4:	0800c30f 	.word	0x0800c30f
 800c0e8:	0800c33b 	.word	0x0800c33b
 800c0ec:	0800c36f 	.word	0x0800c36f
 800c0f0:	0800c36f 	.word	0x0800c36f
 800c0f4:	0800c36f 	.word	0x0800c36f
 800c0f8:	0800c36f 	.word	0x0800c36f
 800c0fc:	0800c36f 	.word	0x0800c36f
 800c100:	0800c36f 	.word	0x0800c36f
 800c104:	0800c36f 	.word	0x0800c36f
 800c108:	0800c10d 	.word	0x0800c10d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c112:	69db      	ldr	r3, [r3, #28]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d00b      	beq.n	800c130 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c11e:	69db      	ldr	r3, [r3, #28]
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	7c12      	ldrb	r2, [r2, #16]
 800c124:	f107 0108 	add.w	r1, r7, #8
 800c128:	4610      	mov	r0, r2
 800c12a:	4798      	blx	r3
 800c12c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c12e:	e126      	b.n	800c37e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c130:	6839      	ldr	r1, [r7, #0]
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 fb27 	bl	800c786 <USBD_CtlError>
        err++;
 800c138:	7afb      	ldrb	r3, [r7, #11]
 800c13a:	3301      	adds	r3, #1
 800c13c:	72fb      	strb	r3, [r7, #11]
      break;
 800c13e:	e11e      	b.n	800c37e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	7c12      	ldrb	r2, [r2, #16]
 800c14c:	f107 0108 	add.w	r1, r7, #8
 800c150:	4610      	mov	r0, r2
 800c152:	4798      	blx	r3
 800c154:	60f8      	str	r0, [r7, #12]
      break;
 800c156:	e112      	b.n	800c37e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	7c1b      	ldrb	r3, [r3, #16]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d10d      	bne.n	800c17c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c168:	f107 0208 	add.w	r2, r7, #8
 800c16c:	4610      	mov	r0, r2
 800c16e:	4798      	blx	r3
 800c170:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	3301      	adds	r3, #1
 800c176:	2202      	movs	r2, #2
 800c178:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c17a:	e100      	b.n	800c37e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c184:	f107 0208 	add.w	r2, r7, #8
 800c188:	4610      	mov	r0, r2
 800c18a:	4798      	blx	r3
 800c18c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	3301      	adds	r3, #1
 800c192:	2202      	movs	r2, #2
 800c194:	701a      	strb	r2, [r3, #0]
      break;
 800c196:	e0f2      	b.n	800c37e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	885b      	ldrh	r3, [r3, #2]
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	2b05      	cmp	r3, #5
 800c1a0:	f200 80ac 	bhi.w	800c2fc <USBD_GetDescriptor+0x258>
 800c1a4:	a201      	add	r2, pc, #4	@ (adr r2, 800c1ac <USBD_GetDescriptor+0x108>)
 800c1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1aa:	bf00      	nop
 800c1ac:	0800c1c5 	.word	0x0800c1c5
 800c1b0:	0800c1f9 	.word	0x0800c1f9
 800c1b4:	0800c22d 	.word	0x0800c22d
 800c1b8:	0800c261 	.word	0x0800c261
 800c1bc:	0800c295 	.word	0x0800c295
 800c1c0:	0800c2c9 	.word	0x0800c2c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1ca:	685b      	ldr	r3, [r3, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d00b      	beq.n	800c1e8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	7c12      	ldrb	r2, [r2, #16]
 800c1dc:	f107 0108 	add.w	r1, r7, #8
 800c1e0:	4610      	mov	r0, r2
 800c1e2:	4798      	blx	r3
 800c1e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1e6:	e091      	b.n	800c30c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c1e8:	6839      	ldr	r1, [r7, #0]
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 facb 	bl	800c786 <USBD_CtlError>
            err++;
 800c1f0:	7afb      	ldrb	r3, [r7, #11]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c1f6:	e089      	b.n	800c30c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00b      	beq.n	800c21c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	7c12      	ldrb	r2, [r2, #16]
 800c210:	f107 0108 	add.w	r1, r7, #8
 800c214:	4610      	mov	r0, r2
 800c216:	4798      	blx	r3
 800c218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c21a:	e077      	b.n	800c30c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c21c:	6839      	ldr	r1, [r7, #0]
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 fab1 	bl	800c786 <USBD_CtlError>
            err++;
 800c224:	7afb      	ldrb	r3, [r7, #11]
 800c226:	3301      	adds	r3, #1
 800c228:	72fb      	strb	r3, [r7, #11]
          break;
 800c22a:	e06f      	b.n	800c30c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d00b      	beq.n	800c250 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	7c12      	ldrb	r2, [r2, #16]
 800c244:	f107 0108 	add.w	r1, r7, #8
 800c248:	4610      	mov	r0, r2
 800c24a:	4798      	blx	r3
 800c24c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c24e:	e05d      	b.n	800c30c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c250:	6839      	ldr	r1, [r7, #0]
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 fa97 	bl	800c786 <USBD_CtlError>
            err++;
 800c258:	7afb      	ldrb	r3, [r7, #11]
 800c25a:	3301      	adds	r3, #1
 800c25c:	72fb      	strb	r3, [r7, #11]
          break;
 800c25e:	e055      	b.n	800c30c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c266:	691b      	ldr	r3, [r3, #16]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d00b      	beq.n	800c284 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c272:	691b      	ldr	r3, [r3, #16]
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	7c12      	ldrb	r2, [r2, #16]
 800c278:	f107 0108 	add.w	r1, r7, #8
 800c27c:	4610      	mov	r0, r2
 800c27e:	4798      	blx	r3
 800c280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c282:	e043      	b.n	800c30c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c284:	6839      	ldr	r1, [r7, #0]
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 fa7d 	bl	800c786 <USBD_CtlError>
            err++;
 800c28c:	7afb      	ldrb	r3, [r7, #11]
 800c28e:	3301      	adds	r3, #1
 800c290:	72fb      	strb	r3, [r7, #11]
          break;
 800c292:	e03b      	b.n	800c30c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c29a:	695b      	ldr	r3, [r3, #20]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00b      	beq.n	800c2b8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2a6:	695b      	ldr	r3, [r3, #20]
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	7c12      	ldrb	r2, [r2, #16]
 800c2ac:	f107 0108 	add.w	r1, r7, #8
 800c2b0:	4610      	mov	r0, r2
 800c2b2:	4798      	blx	r3
 800c2b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2b6:	e029      	b.n	800c30c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c2b8:	6839      	ldr	r1, [r7, #0]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 fa63 	bl	800c786 <USBD_CtlError>
            err++;
 800c2c0:	7afb      	ldrb	r3, [r7, #11]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	72fb      	strb	r3, [r7, #11]
          break;
 800c2c6:	e021      	b.n	800c30c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2ce:	699b      	ldr	r3, [r3, #24]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d00b      	beq.n	800c2ec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2da:	699b      	ldr	r3, [r3, #24]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	7c12      	ldrb	r2, [r2, #16]
 800c2e0:	f107 0108 	add.w	r1, r7, #8
 800c2e4:	4610      	mov	r0, r2
 800c2e6:	4798      	blx	r3
 800c2e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2ea:	e00f      	b.n	800c30c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c2ec:	6839      	ldr	r1, [r7, #0]
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fa49 	bl	800c786 <USBD_CtlError>
            err++;
 800c2f4:	7afb      	ldrb	r3, [r7, #11]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c2fa:	e007      	b.n	800c30c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fa41 	bl	800c786 <USBD_CtlError>
          err++;
 800c304:	7afb      	ldrb	r3, [r7, #11]
 800c306:	3301      	adds	r3, #1
 800c308:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c30a:	bf00      	nop
      }
      break;
 800c30c:	e037      	b.n	800c37e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	7c1b      	ldrb	r3, [r3, #16]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d109      	bne.n	800c32a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c31c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c31e:	f107 0208 	add.w	r2, r7, #8
 800c322:	4610      	mov	r0, r2
 800c324:	4798      	blx	r3
 800c326:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c328:	e029      	b.n	800c37e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c32a:	6839      	ldr	r1, [r7, #0]
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 fa2a 	bl	800c786 <USBD_CtlError>
        err++;
 800c332:	7afb      	ldrb	r3, [r7, #11]
 800c334:	3301      	adds	r3, #1
 800c336:	72fb      	strb	r3, [r7, #11]
      break;
 800c338:	e021      	b.n	800c37e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	7c1b      	ldrb	r3, [r3, #16]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10d      	bne.n	800c35e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c34a:	f107 0208 	add.w	r2, r7, #8
 800c34e:	4610      	mov	r0, r2
 800c350:	4798      	blx	r3
 800c352:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	3301      	adds	r3, #1
 800c358:	2207      	movs	r2, #7
 800c35a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c35c:	e00f      	b.n	800c37e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c35e:	6839      	ldr	r1, [r7, #0]
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fa10 	bl	800c786 <USBD_CtlError>
        err++;
 800c366:	7afb      	ldrb	r3, [r7, #11]
 800c368:	3301      	adds	r3, #1
 800c36a:	72fb      	strb	r3, [r7, #11]
      break;
 800c36c:	e007      	b.n	800c37e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c36e:	6839      	ldr	r1, [r7, #0]
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 fa08 	bl	800c786 <USBD_CtlError>
      err++;
 800c376:	7afb      	ldrb	r3, [r7, #11]
 800c378:	3301      	adds	r3, #1
 800c37a:	72fb      	strb	r3, [r7, #11]
      break;
 800c37c:	bf00      	nop
  }

  if (err != 0U)
 800c37e:	7afb      	ldrb	r3, [r7, #11]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d11e      	bne.n	800c3c2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	88db      	ldrh	r3, [r3, #6]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d016      	beq.n	800c3ba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c38c:	893b      	ldrh	r3, [r7, #8]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00e      	beq.n	800c3b0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	88da      	ldrh	r2, [r3, #6]
 800c396:	893b      	ldrh	r3, [r7, #8]
 800c398:	4293      	cmp	r3, r2
 800c39a:	bf28      	it	cs
 800c39c:	4613      	movcs	r3, r2
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c3a2:	893b      	ldrh	r3, [r7, #8]
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	68f9      	ldr	r1, [r7, #12]
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f000 fa69 	bl	800c880 <USBD_CtlSendData>
 800c3ae:	e009      	b.n	800c3c4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c3b0:	6839      	ldr	r1, [r7, #0]
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 f9e7 	bl	800c786 <USBD_CtlError>
 800c3b8:	e004      	b.n	800c3c4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 faba 	bl	800c934 <USBD_CtlSendStatus>
 800c3c0:	e000      	b.n	800c3c4 <USBD_GetDescriptor+0x320>
    return;
 800c3c2:	bf00      	nop
  }
}
 800c3c4:	3710      	adds	r7, #16
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop

0800c3cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b084      	sub	sp, #16
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	889b      	ldrh	r3, [r3, #4]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d131      	bne.n	800c442 <USBD_SetAddress+0x76>
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	88db      	ldrh	r3, [r3, #6]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d12d      	bne.n	800c442 <USBD_SetAddress+0x76>
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	885b      	ldrh	r3, [r3, #2]
 800c3ea:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3ec:	d829      	bhi.n	800c442 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	885b      	ldrh	r3, [r3, #2]
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c400:	b2db      	uxtb	r3, r3
 800c402:	2b03      	cmp	r3, #3
 800c404:	d104      	bne.n	800c410 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c406:	6839      	ldr	r1, [r7, #0]
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 f9bc 	bl	800c786 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c40e:	e01d      	b.n	800c44c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	7bfa      	ldrb	r2, [r7, #15]
 800c414:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c418:	7bfb      	ldrb	r3, [r7, #15]
 800c41a:	4619      	mov	r1, r3
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f011 fbe3 	bl	801dbe8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 fa86 	bl	800c934 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c428:	7bfb      	ldrb	r3, [r7, #15]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d004      	beq.n	800c438 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2202      	movs	r2, #2
 800c432:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c436:	e009      	b.n	800c44c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2201      	movs	r2, #1
 800c43c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c440:	e004      	b.n	800c44c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c442:	6839      	ldr	r1, [r7, #0]
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f000 f99e 	bl	800c786 <USBD_CtlError>
  }
}
 800c44a:	bf00      	nop
 800c44c:	bf00      	nop
 800c44e:	3710      	adds	r7, #16
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c45e:	2300      	movs	r3, #0
 800c460:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	885b      	ldrh	r3, [r3, #2]
 800c466:	b2da      	uxtb	r2, r3
 800c468:	4b4e      	ldr	r3, [pc, #312]	@ (800c5a4 <USBD_SetConfig+0x150>)
 800c46a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c46c:	4b4d      	ldr	r3, [pc, #308]	@ (800c5a4 <USBD_SetConfig+0x150>)
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	2b01      	cmp	r3, #1
 800c472:	d905      	bls.n	800c480 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c474:	6839      	ldr	r1, [r7, #0]
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 f985 	bl	800c786 <USBD_CtlError>
    return USBD_FAIL;
 800c47c:	2303      	movs	r3, #3
 800c47e:	e08c      	b.n	800c59a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c486:	b2db      	uxtb	r3, r3
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d002      	beq.n	800c492 <USBD_SetConfig+0x3e>
 800c48c:	2b03      	cmp	r3, #3
 800c48e:	d029      	beq.n	800c4e4 <USBD_SetConfig+0x90>
 800c490:	e075      	b.n	800c57e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c492:	4b44      	ldr	r3, [pc, #272]	@ (800c5a4 <USBD_SetConfig+0x150>)
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d020      	beq.n	800c4dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c49a:	4b42      	ldr	r3, [pc, #264]	@ (800c5a4 <USBD_SetConfig+0x150>)
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	461a      	mov	r2, r3
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c4a4:	4b3f      	ldr	r3, [pc, #252]	@ (800c5a4 <USBD_SetConfig+0x150>)
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7fe ffb9 	bl	800b422 <USBD_SetClassConfig>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c4b4:	7bfb      	ldrb	r3, [r7, #15]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d008      	beq.n	800c4cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c4ba:	6839      	ldr	r1, [r7, #0]
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 f962 	bl	800c786 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2202      	movs	r2, #2
 800c4c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c4ca:	e065      	b.n	800c598 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 fa31 	bl	800c934 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2203      	movs	r2, #3
 800c4d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c4da:	e05d      	b.n	800c598 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 fa29 	bl	800c934 <USBD_CtlSendStatus>
      break;
 800c4e2:	e059      	b.n	800c598 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c4e4:	4b2f      	ldr	r3, [pc, #188]	@ (800c5a4 <USBD_SetConfig+0x150>)
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d112      	bne.n	800c512 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2202      	movs	r2, #2
 800c4f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c4f4:	4b2b      	ldr	r3, [pc, #172]	@ (800c5a4 <USBD_SetConfig+0x150>)
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c4fe:	4b29      	ldr	r3, [pc, #164]	@ (800c5a4 <USBD_SetConfig+0x150>)
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	4619      	mov	r1, r3
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f7fe ffa8 	bl	800b45a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 fa12 	bl	800c934 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c510:	e042      	b.n	800c598 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c512:	4b24      	ldr	r3, [pc, #144]	@ (800c5a4 <USBD_SetConfig+0x150>)
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	461a      	mov	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d02a      	beq.n	800c576 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	b2db      	uxtb	r3, r3
 800c526:	4619      	mov	r1, r3
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f7fe ff96 	bl	800b45a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c52e:	4b1d      	ldr	r3, [pc, #116]	@ (800c5a4 <USBD_SetConfig+0x150>)
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	461a      	mov	r2, r3
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c538:	4b1a      	ldr	r3, [pc, #104]	@ (800c5a4 <USBD_SetConfig+0x150>)
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	4619      	mov	r1, r3
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f7fe ff6f 	bl	800b422 <USBD_SetClassConfig>
 800c544:	4603      	mov	r3, r0
 800c546:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c548:	7bfb      	ldrb	r3, [r7, #15]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d00f      	beq.n	800c56e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c54e:	6839      	ldr	r1, [r7, #0]
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 f918 	bl	800c786 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	4619      	mov	r1, r3
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f7fe ff7b 	bl	800b45a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2202      	movs	r2, #2
 800c568:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c56c:	e014      	b.n	800c598 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 f9e0 	bl	800c934 <USBD_CtlSendStatus>
      break;
 800c574:	e010      	b.n	800c598 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 f9dc 	bl	800c934 <USBD_CtlSendStatus>
      break;
 800c57c:	e00c      	b.n	800c598 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c57e:	6839      	ldr	r1, [r7, #0]
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 f900 	bl	800c786 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c586:	4b07      	ldr	r3, [pc, #28]	@ (800c5a4 <USBD_SetConfig+0x150>)
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	4619      	mov	r1, r3
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f7fe ff64 	bl	800b45a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c592:	2303      	movs	r3, #3
 800c594:	73fb      	strb	r3, [r7, #15]
      break;
 800c596:	bf00      	nop
  }

  return ret;
 800c598:	7bfb      	ldrb	r3, [r7, #15]
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	20005250 	.word	0x20005250

0800c5a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	88db      	ldrh	r3, [r3, #6]
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d004      	beq.n	800c5c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c5ba:	6839      	ldr	r1, [r7, #0]
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 f8e2 	bl	800c786 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c5c2:	e023      	b.n	800c60c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	dc02      	bgt.n	800c5d6 <USBD_GetConfig+0x2e>
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	dc03      	bgt.n	800c5dc <USBD_GetConfig+0x34>
 800c5d4:	e015      	b.n	800c602 <USBD_GetConfig+0x5a>
 800c5d6:	2b03      	cmp	r3, #3
 800c5d8:	d00b      	beq.n	800c5f2 <USBD_GetConfig+0x4a>
 800c5da:	e012      	b.n	800c602 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	3308      	adds	r3, #8
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 f948 	bl	800c880 <USBD_CtlSendData>
        break;
 800c5f0:	e00c      	b.n	800c60c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	3304      	adds	r3, #4
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 f940 	bl	800c880 <USBD_CtlSendData>
        break;
 800c600:	e004      	b.n	800c60c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c602:	6839      	ldr	r1, [r7, #0]
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 f8be 	bl	800c786 <USBD_CtlError>
        break;
 800c60a:	bf00      	nop
}
 800c60c:	bf00      	nop
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c624:	b2db      	uxtb	r3, r3
 800c626:	3b01      	subs	r3, #1
 800c628:	2b02      	cmp	r3, #2
 800c62a:	d81e      	bhi.n	800c66a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	88db      	ldrh	r3, [r3, #6]
 800c630:	2b02      	cmp	r3, #2
 800c632:	d004      	beq.n	800c63e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c634:	6839      	ldr	r1, [r7, #0]
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 f8a5 	bl	800c786 <USBD_CtlError>
        break;
 800c63c:	e01a      	b.n	800c674 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2201      	movs	r2, #1
 800c642:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d005      	beq.n	800c65a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	68db      	ldr	r3, [r3, #12]
 800c652:	f043 0202 	orr.w	r2, r3, #2
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	330c      	adds	r3, #12
 800c65e:	2202      	movs	r2, #2
 800c660:	4619      	mov	r1, r3
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 f90c 	bl	800c880 <USBD_CtlSendData>
      break;
 800c668:	e004      	b.n	800c674 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c66a:	6839      	ldr	r1, [r7, #0]
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 f88a 	bl	800c786 <USBD_CtlError>
      break;
 800c672:	bf00      	nop
  }
}
 800c674:	bf00      	nop
 800c676:	3708      	adds	r7, #8
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	885b      	ldrh	r3, [r3, #2]
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	d107      	bne.n	800c69e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2201      	movs	r2, #1
 800c692:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 f94c 	bl	800c934 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c69c:	e013      	b.n	800c6c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	885b      	ldrh	r3, [r3, #2]
 800c6a2:	2b02      	cmp	r3, #2
 800c6a4:	d10b      	bne.n	800c6be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	889b      	ldrh	r3, [r3, #4]
 800c6aa:	0a1b      	lsrs	r3, r3, #8
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	b2da      	uxtb	r2, r3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 f93c 	bl	800c934 <USBD_CtlSendStatus>
}
 800c6bc:	e003      	b.n	800c6c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c6be:	6839      	ldr	r1, [r7, #0]
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 f860 	bl	800c786 <USBD_CtlError>
}
 800c6c6:	bf00      	nop
 800c6c8:	3708      	adds	r7, #8
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6ce:	b580      	push	{r7, lr}
 800c6d0:	b082      	sub	sp, #8
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
 800c6d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	2b02      	cmp	r3, #2
 800c6e4:	d80b      	bhi.n	800c6fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	885b      	ldrh	r3, [r3, #2]
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d10c      	bne.n	800c708 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 f91c 	bl	800c934 <USBD_CtlSendStatus>
      }
      break;
 800c6fc:	e004      	b.n	800c708 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c6fe:	6839      	ldr	r1, [r7, #0]
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f000 f840 	bl	800c786 <USBD_CtlError>
      break;
 800c706:	e000      	b.n	800c70a <USBD_ClrFeature+0x3c>
      break;
 800c708:	bf00      	nop
  }
}
 800c70a:	bf00      	nop
 800c70c:	3708      	adds	r7, #8
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b084      	sub	sp, #16
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
 800c71a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	781a      	ldrb	r2, [r3, #0]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	3301      	adds	r3, #1
 800c72c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	781a      	ldrb	r2, [r3, #0]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	3301      	adds	r3, #1
 800c73a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c73c:	68f8      	ldr	r0, [r7, #12]
 800c73e:	f7ff fa16 	bl	800bb6e <SWAPBYTE>
 800c742:	4603      	mov	r3, r0
 800c744:	461a      	mov	r2, r3
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	3301      	adds	r3, #1
 800c74e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	3301      	adds	r3, #1
 800c754:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	f7ff fa09 	bl	800bb6e <SWAPBYTE>
 800c75c:	4603      	mov	r3, r0
 800c75e:	461a      	mov	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	3301      	adds	r3, #1
 800c768:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	3301      	adds	r3, #1
 800c76e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c770:	68f8      	ldr	r0, [r7, #12]
 800c772:	f7ff f9fc 	bl	800bb6e <SWAPBYTE>
 800c776:	4603      	mov	r3, r0
 800c778:	461a      	mov	r2, r3
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	80da      	strh	r2, [r3, #6]
}
 800c77e:	bf00      	nop
 800c780:	3710      	adds	r7, #16
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b082      	sub	sp, #8
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
 800c78e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c790:	2180      	movs	r1, #128	@ 0x80
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f011 f9be 	bl	801db14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c798:	2100      	movs	r1, #0
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f011 f9ba 	bl	801db14 <USBD_LL_StallEP>
}
 800c7a0:	bf00      	nop
 800c7a2:	3708      	adds	r7, #8
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}

0800c7a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b086      	sub	sp, #24
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d042      	beq.n	800c844 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c7c2:	6938      	ldr	r0, [r7, #16]
 800c7c4:	f000 f842 	bl	800c84c <USBD_GetLen>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	005b      	lsls	r3, r3, #1
 800c7ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c7d2:	d808      	bhi.n	800c7e6 <USBD_GetString+0x3e>
 800c7d4:	6938      	ldr	r0, [r7, #16]
 800c7d6:	f000 f839 	bl	800c84c <USBD_GetLen>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	3301      	adds	r3, #1
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	005b      	lsls	r3, r3, #1
 800c7e2:	b29a      	uxth	r2, r3
 800c7e4:	e001      	b.n	800c7ea <USBD_GetString+0x42>
 800c7e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	4413      	add	r3, r2
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	7812      	ldrb	r2, [r2, #0]
 800c7f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c7fa:	7dfb      	ldrb	r3, [r7, #23]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c800:	7dfb      	ldrb	r3, [r7, #23]
 800c802:	68ba      	ldr	r2, [r7, #8]
 800c804:	4413      	add	r3, r2
 800c806:	2203      	movs	r2, #3
 800c808:	701a      	strb	r2, [r3, #0]
  idx++;
 800c80a:	7dfb      	ldrb	r3, [r7, #23]
 800c80c:	3301      	adds	r3, #1
 800c80e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c810:	e013      	b.n	800c83a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c812:	7dfb      	ldrb	r3, [r7, #23]
 800c814:	68ba      	ldr	r2, [r7, #8]
 800c816:	4413      	add	r3, r2
 800c818:	693a      	ldr	r2, [r7, #16]
 800c81a:	7812      	ldrb	r2, [r2, #0]
 800c81c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	3301      	adds	r3, #1
 800c822:	613b      	str	r3, [r7, #16]
    idx++;
 800c824:	7dfb      	ldrb	r3, [r7, #23]
 800c826:	3301      	adds	r3, #1
 800c828:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c82a:	7dfb      	ldrb	r3, [r7, #23]
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	4413      	add	r3, r2
 800c830:	2200      	movs	r2, #0
 800c832:	701a      	strb	r2, [r3, #0]
    idx++;
 800c834:	7dfb      	ldrb	r3, [r7, #23]
 800c836:	3301      	adds	r3, #1
 800c838:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1e7      	bne.n	800c812 <USBD_GetString+0x6a>
 800c842:	e000      	b.n	800c846 <USBD_GetString+0x9e>
    return;
 800c844:	bf00      	nop
  }
}
 800c846:	3718      	adds	r7, #24
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b085      	sub	sp, #20
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c854:	2300      	movs	r3, #0
 800c856:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c85c:	e005      	b.n	800c86a <USBD_GetLen+0x1e>
  {
    len++;
 800c85e:	7bfb      	ldrb	r3, [r7, #15]
 800c860:	3301      	adds	r3, #1
 800c862:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	3301      	adds	r3, #1
 800c868:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d1f5      	bne.n	800c85e <USBD_GetLen+0x12>
  }

  return len;
 800c872:	7bfb      	ldrb	r3, [r7, #15]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3714      	adds	r7, #20
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	60f8      	str	r0, [r7, #12]
 800c888:	60b9      	str	r1, [r7, #8]
 800c88a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2202      	movs	r2, #2
 800c890:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	68ba      	ldr	r2, [r7, #8]
 800c8a4:	2100      	movs	r1, #0
 800c8a6:	68f8      	ldr	r0, [r7, #12]
 800c8a8:	f011 f9bd 	bl	801dc26 <USBD_LL_Transmit>

  return USBD_OK;
 800c8ac:	2300      	movs	r3, #0
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3710      	adds	r7, #16
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b084      	sub	sp, #16
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	60f8      	str	r0, [r7, #12]
 800c8be:	60b9      	str	r1, [r7, #8]
 800c8c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	68ba      	ldr	r2, [r7, #8]
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	68f8      	ldr	r0, [r7, #12]
 800c8ca:	f011 f9ac 	bl	801dc26 <USBD_LL_Transmit>

  return USBD_OK;
 800c8ce:	2300      	movs	r3, #0
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2203      	movs	r2, #3
 800c8e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	68ba      	ldr	r2, [r7, #8]
 800c900:	2100      	movs	r1, #0
 800c902:	68f8      	ldr	r0, [r7, #12]
 800c904:	f011 f9b0 	bl	801dc68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c908:	2300      	movs	r3, #0
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3710      	adds	r7, #16
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}

0800c912 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c912:	b580      	push	{r7, lr}
 800c914:	b084      	sub	sp, #16
 800c916:	af00      	add	r7, sp, #0
 800c918:	60f8      	str	r0, [r7, #12]
 800c91a:	60b9      	str	r1, [r7, #8]
 800c91c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	68ba      	ldr	r2, [r7, #8]
 800c922:	2100      	movs	r1, #0
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f011 f99f 	bl	801dc68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c92a:	2300      	movs	r3, #0
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3710      	adds	r7, #16
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2204      	movs	r2, #4
 800c940:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c944:	2300      	movs	r3, #0
 800c946:	2200      	movs	r2, #0
 800c948:	2100      	movs	r1, #0
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f011 f96b 	bl	801dc26 <USBD_LL_Transmit>

  return USBD_OK;
 800c950:	2300      	movs	r3, #0
}
 800c952:	4618      	mov	r0, r3
 800c954:	3708      	adds	r7, #8
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b082      	sub	sp, #8
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2205      	movs	r2, #5
 800c966:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c96a:	2300      	movs	r3, #0
 800c96c:	2200      	movs	r2, #0
 800c96e:	2100      	movs	r1, #0
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f011 f979 	bl	801dc68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c976:	2300      	movs	r3, #0
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3708      	adds	r7, #8
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c980:	b480      	push	{r7}
 800c982:	b085      	sub	sp, #20
 800c984:	af00      	add	r7, sp, #0
 800c986:	4603      	mov	r3, r0
 800c988:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c98a:	2300      	movs	r3, #0
 800c98c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c98e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c992:	2b84      	cmp	r3, #132	@ 0x84
 800c994:	d005      	beq.n	800c9a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c996:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	4413      	add	r3, r2
 800c99e:	3303      	adds	r3, #3
 800c9a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3714      	adds	r7, #20
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9b6:	f3ef 8305 	mrs	r3, IPSR
 800c9ba:	607b      	str	r3, [r7, #4]
  return(result);
 800c9bc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	bf14      	ite	ne
 800c9c2:	2301      	movne	r3, #1
 800c9c4:	2300      	moveq	r3, #0
 800c9c6:	b2db      	uxtb	r3, r3
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	370c      	adds	r7, #12
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr

0800c9d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c9d8:	f001 fe4c 	bl	800e674 <vTaskStartScheduler>
  
  return osOK;
 800c9dc:	2300      	movs	r3, #0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c9e6:	f7ff ffe3 	bl	800c9b0 <inHandlerMode>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d003      	beq.n	800c9f8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c9f0:	f001 ff6c 	bl	800e8cc <xTaskGetTickCountFromISR>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	e002      	b.n	800c9fe <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c9f8:	f001 ff58 	bl	800e8ac <xTaskGetTickCount>
 800c9fc:	4603      	mov	r3, r0
  }
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ca02:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca04:	b089      	sub	sp, #36	@ 0x24
 800ca06:	af04      	add	r7, sp, #16
 800ca08:	6078      	str	r0, [r7, #4]
 800ca0a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	695b      	ldr	r3, [r3, #20]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d020      	beq.n	800ca56 <osThreadCreate+0x54>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	699b      	ldr	r3, [r3, #24]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d01c      	beq.n	800ca56 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	685c      	ldr	r4, [r3, #4]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	691e      	ldr	r6, [r3, #16]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7ff ffa6 	bl	800c980 <makeFreeRtosPriority>
 800ca34:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	695b      	ldr	r3, [r3, #20]
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ca3e:	9202      	str	r2, [sp, #8]
 800ca40:	9301      	str	r3, [sp, #4]
 800ca42:	9100      	str	r1, [sp, #0]
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	4632      	mov	r2, r6
 800ca48:	4629      	mov	r1, r5
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	f001 fb90 	bl	800e170 <xTaskCreateStatic>
 800ca50:	4603      	mov	r3, r0
 800ca52:	60fb      	str	r3, [r7, #12]
 800ca54:	e01c      	b.n	800ca90 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	685c      	ldr	r4, [r3, #4]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ca62:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7ff ff88 	bl	800c980 <makeFreeRtosPriority>
 800ca70:	4602      	mov	r2, r0
 800ca72:	f107 030c 	add.w	r3, r7, #12
 800ca76:	9301      	str	r3, [sp, #4]
 800ca78:	9200      	str	r2, [sp, #0]
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	4632      	mov	r2, r6
 800ca7e:	4629      	mov	r1, r5
 800ca80:	4620      	mov	r0, r4
 800ca82:	f001 fbdb 	bl	800e23c <xTaskCreate>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d001      	beq.n	800ca90 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	e000      	b.n	800ca92 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ca90:	68fb      	ldr	r3, [r7, #12]
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3714      	adds	r7, #20
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ca9a <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b082      	sub	sp, #8
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f001 fd1c 	bl	800e4e0 <vTaskDelete>
  return osOK;
 800caa8:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3708      	adds	r7, #8
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}

0800cab2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cab2:	b580      	push	{r7, lr}
 800cab4:	b084      	sub	sp, #16
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d001      	beq.n	800cac8 <osDelay+0x16>
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	e000      	b.n	800caca <osDelay+0x18>
 800cac8:	2301      	movs	r3, #1
 800caca:	4618      	mov	r0, r3
 800cacc:	f001 fd9a 	bl	800e604 <vTaskDelay>
  
  return osOK;
 800cad0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3710      	adds	r7, #16
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b082      	sub	sp, #8
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d007      	beq.n	800cafa <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	4619      	mov	r1, r3
 800caf0:	2001      	movs	r0, #1
 800caf2:	f000 fc9a 	bl	800d42a <xQueueCreateMutexStatic>
 800caf6:	4603      	mov	r3, r0
 800caf8:	e003      	b.n	800cb02 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800cafa:	2001      	movs	r0, #1
 800cafc:	f000 fc7d 	bl	800d3fa <xQueueCreateMutex>
 800cb00:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3708      	adds	r7, #8
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
	...

0800cb0c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800cb16:	2300      	movs	r3, #0
 800cb18:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d101      	bne.n	800cb24 <osMutexWait+0x18>
    return osErrorParameter;
 800cb20:	2380      	movs	r3, #128	@ 0x80
 800cb22:	e03a      	b.n	800cb9a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800cb24:	2300      	movs	r3, #0
 800cb26:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb2e:	d103      	bne.n	800cb38 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800cb30:	f04f 33ff 	mov.w	r3, #4294967295
 800cb34:	60fb      	str	r3, [r7, #12]
 800cb36:	e009      	b.n	800cb4c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d006      	beq.n	800cb4c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d101      	bne.n	800cb4c <osMutexWait+0x40>
      ticks = 1;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800cb4c:	f7ff ff30 	bl	800c9b0 <inHandlerMode>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d017      	beq.n	800cb86 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800cb56:	f107 0308 	add.w	r3, r7, #8
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f001 f8c4 	bl	800dcec <xQueueReceiveFromISR>
 800cb64:	4603      	mov	r3, r0
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d001      	beq.n	800cb6e <osMutexWait+0x62>
      return osErrorOS;
 800cb6a:	23ff      	movs	r3, #255	@ 0xff
 800cb6c:	e015      	b.n	800cb9a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d011      	beq.n	800cb98 <osMutexWait+0x8c>
 800cb74:	4b0b      	ldr	r3, [pc, #44]	@ (800cba4 <osMutexWait+0x98>)
 800cb76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb7a:	601a      	str	r2, [r3, #0]
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	f3bf 8f6f 	isb	sy
 800cb84:	e008      	b.n	800cb98 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800cb86:	68f9      	ldr	r1, [r7, #12]
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 ff97 	bl	800dabc <xQueueSemaphoreTake>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d001      	beq.n	800cb98 <osMutexWait+0x8c>
    return osErrorOS;
 800cb94:	23ff      	movs	r3, #255	@ 0xff
 800cb96:	e000      	b.n	800cb9a <osMutexWait+0x8e>
  }
  
  return osOK;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	e000ed04 	.word	0xe000ed04

0800cba8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800cbb8:	f7ff fefa 	bl	800c9b0 <inHandlerMode>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d016      	beq.n	800cbf0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800cbc2:	f107 0308 	add.w	r3, r7, #8
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 fdf6 	bl	800d7ba <xQueueGiveFromISR>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	d001      	beq.n	800cbd8 <osMutexRelease+0x30>
      return osErrorOS;
 800cbd4:	23ff      	movs	r3, #255	@ 0xff
 800cbd6:	e017      	b.n	800cc08 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d013      	beq.n	800cc06 <osMutexRelease+0x5e>
 800cbde:	4b0c      	ldr	r3, [pc, #48]	@ (800cc10 <osMutexRelease+0x68>)
 800cbe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbe4:	601a      	str	r2, [r3, #0]
 800cbe6:	f3bf 8f4f 	dsb	sy
 800cbea:	f3bf 8f6f 	isb	sy
 800cbee:	e00a      	b.n	800cc06 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	2100      	movs	r1, #0
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 fc32 	bl	800d460 <xQueueGenericSend>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d001      	beq.n	800cc06 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800cc02:	23ff      	movs	r3, #255	@ 0xff
 800cc04:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800cc06:	68fb      	ldr	r3, [r7, #12]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3710      	adds	r7, #16
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}
 800cc10:	e000ed04 	.word	0xe000ed04

0800cc14 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b086      	sub	sp, #24
 800cc18:	af02      	add	r7, sp, #8
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d00f      	beq.n	800cc46 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d10a      	bne.n	800cc42 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	2203      	movs	r2, #3
 800cc32:	9200      	str	r2, [sp, #0]
 800cc34:	2200      	movs	r2, #0
 800cc36:	2100      	movs	r1, #0
 800cc38:	2001      	movs	r0, #1
 800cc3a:	f000 fadb 	bl	800d1f4 <xQueueGenericCreateStatic>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	e016      	b.n	800cc70 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800cc42:	2300      	movs	r3, #0
 800cc44:	e014      	b.n	800cc70 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d110      	bne.n	800cc6e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800cc4c:	2203      	movs	r2, #3
 800cc4e:	2100      	movs	r1, #0
 800cc50:	2001      	movs	r0, #1
 800cc52:	f000 fb56 	bl	800d302 <xQueueGenericCreate>
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d005      	beq.n	800cc6a <osSemaphoreCreate+0x56>
 800cc5e:	2300      	movs	r3, #0
 800cc60:	2200      	movs	r2, #0
 800cc62:	2100      	movs	r1, #0
 800cc64:	68f8      	ldr	r0, [r7, #12]
 800cc66:	f000 fbfb 	bl	800d460 <xQueueGenericSend>
      return sema;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	e000      	b.n	800cc70 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800cc6e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3710      	adds	r7, #16
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800cc82:	2300      	movs	r3, #0
 800cc84:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d101      	bne.n	800cc90 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800cc8c:	2380      	movs	r3, #128	@ 0x80
 800cc8e:	e03a      	b.n	800cd06 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800cc90:	2300      	movs	r3, #0
 800cc92:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc9a:	d103      	bne.n	800cca4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800cc9c:	f04f 33ff 	mov.w	r3, #4294967295
 800cca0:	60fb      	str	r3, [r7, #12]
 800cca2:	e009      	b.n	800ccb8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d006      	beq.n	800ccb8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d101      	bne.n	800ccb8 <osSemaphoreWait+0x40>
      ticks = 1;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ccb8:	f7ff fe7a 	bl	800c9b0 <inHandlerMode>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d017      	beq.n	800ccf2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ccc2:	f107 0308 	add.w	r3, r7, #8
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	2100      	movs	r1, #0
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f001 f80e 	bl	800dcec <xQueueReceiveFromISR>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	2b01      	cmp	r3, #1
 800ccd4:	d001      	beq.n	800ccda <osSemaphoreWait+0x62>
      return osErrorOS;
 800ccd6:	23ff      	movs	r3, #255	@ 0xff
 800ccd8:	e015      	b.n	800cd06 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d011      	beq.n	800cd04 <osSemaphoreWait+0x8c>
 800cce0:	4b0b      	ldr	r3, [pc, #44]	@ (800cd10 <osSemaphoreWait+0x98>)
 800cce2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cce6:	601a      	str	r2, [r3, #0]
 800cce8:	f3bf 8f4f 	dsb	sy
 800ccec:	f3bf 8f6f 	isb	sy
 800ccf0:	e008      	b.n	800cd04 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ccf2:	68f9      	ldr	r1, [r7, #12]
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f000 fee1 	bl	800dabc <xQueueSemaphoreTake>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d001      	beq.n	800cd04 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800cd00:	23ff      	movs	r3, #255	@ 0xff
 800cd02:	e000      	b.n	800cd06 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800cd04:	2300      	movs	r3, #0
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3710      	adds	r7, #16
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	e000ed04 	.word	0xe000ed04

0800cd14 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800cd20:	2300      	movs	r3, #0
 800cd22:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800cd24:	f7ff fe44 	bl	800c9b0 <inHandlerMode>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d016      	beq.n	800cd5c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800cd2e:	f107 0308 	add.w	r3, r7, #8
 800cd32:	4619      	mov	r1, r3
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 fd40 	bl	800d7ba <xQueueGiveFromISR>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d001      	beq.n	800cd44 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800cd40:	23ff      	movs	r3, #255	@ 0xff
 800cd42:	e017      	b.n	800cd74 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d013      	beq.n	800cd72 <osSemaphoreRelease+0x5e>
 800cd4a:	4b0c      	ldr	r3, [pc, #48]	@ (800cd7c <osSemaphoreRelease+0x68>)
 800cd4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd50:	601a      	str	r2, [r3, #0]
 800cd52:	f3bf 8f4f 	dsb	sy
 800cd56:	f3bf 8f6f 	isb	sy
 800cd5a:	e00a      	b.n	800cd72 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	2200      	movs	r2, #0
 800cd60:	2100      	movs	r1, #0
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 fb7c 	bl	800d460 <xQueueGenericSend>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b01      	cmp	r3, #1
 800cd6c:	d001      	beq.n	800cd72 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800cd6e:	23ff      	movs	r3, #255	@ 0xff
 800cd70:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800cd72:	68fb      	ldr	r3, [r7, #12]
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3710      	adds	r7, #16
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	e000ed04 	.word	0xe000ed04

0800cd80 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800cd88:	f7ff fe12 	bl	800c9b0 <inHandlerMode>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d001      	beq.n	800cd96 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800cd92:	2382      	movs	r3, #130	@ 0x82
 800cd94:	e003      	b.n	800cd9e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f001 f872 	bl	800de80 <vQueueDelete>

  return osOK; 
 800cd9c:	2300      	movs	r3, #0
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3708      	adds	r7, #8
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800cda6:	b590      	push	{r4, r7, lr}
 800cda8:	b085      	sub	sp, #20
 800cdaa:	af02      	add	r7, sp, #8
 800cdac:	6078      	str	r0, [r7, #4]
 800cdae:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d011      	beq.n	800cddc <osMessageCreate+0x36>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d00d      	beq.n	800cddc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6818      	ldr	r0, [r3, #0]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6859      	ldr	r1, [r3, #4]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	689a      	ldr	r2, [r3, #8]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	2400      	movs	r4, #0
 800cdd2:	9400      	str	r4, [sp, #0]
 800cdd4:	f000 fa0e 	bl	800d1f4 <xQueueGenericCreateStatic>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	e008      	b.n	800cdee <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6818      	ldr	r0, [r3, #0]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	2200      	movs	r2, #0
 800cde6:	4619      	mov	r1, r3
 800cde8:	f000 fa8b 	bl	800d302 <xQueueGenericCreate>
 800cdec:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	370c      	adds	r7, #12
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd90      	pop	{r4, r7, pc}
	...

0800cdf8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b086      	sub	sp, #24
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	60f8      	str	r0, [r7, #12]
 800ce00:	60b9      	str	r1, [r7, #8]
 800ce02:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ce04:	2300      	movs	r3, #0
 800ce06:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d101      	bne.n	800ce16 <osMessagePut+0x1e>
    ticks = 1;
 800ce12:	2301      	movs	r3, #1
 800ce14:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ce16:	f7ff fdcb 	bl	800c9b0 <inHandlerMode>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d018      	beq.n	800ce52 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ce20:	f107 0210 	add.w	r2, r7, #16
 800ce24:	f107 0108 	add.w	r1, r7, #8
 800ce28:	2300      	movs	r3, #0
 800ce2a:	68f8      	ldr	r0, [r7, #12]
 800ce2c:	f000 fc22 	bl	800d674 <xQueueGenericSendFromISR>
 800ce30:	4603      	mov	r3, r0
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	d001      	beq.n	800ce3a <osMessagePut+0x42>
      return osErrorOS;
 800ce36:	23ff      	movs	r3, #255	@ 0xff
 800ce38:	e018      	b.n	800ce6c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d014      	beq.n	800ce6a <osMessagePut+0x72>
 800ce40:	4b0c      	ldr	r3, [pc, #48]	@ (800ce74 <osMessagePut+0x7c>)
 800ce42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce46:	601a      	str	r2, [r3, #0]
 800ce48:	f3bf 8f4f 	dsb	sy
 800ce4c:	f3bf 8f6f 	isb	sy
 800ce50:	e00b      	b.n	800ce6a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ce52:	f107 0108 	add.w	r1, r7, #8
 800ce56:	2300      	movs	r3, #0
 800ce58:	697a      	ldr	r2, [r7, #20]
 800ce5a:	68f8      	ldr	r0, [r7, #12]
 800ce5c:	f000 fb00 	bl	800d460 <xQueueGenericSend>
 800ce60:	4603      	mov	r3, r0
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d001      	beq.n	800ce6a <osMessagePut+0x72>
      return osErrorOS;
 800ce66:	23ff      	movs	r3, #255	@ 0xff
 800ce68:	e000      	b.n	800ce6c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3718      	adds	r7, #24
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	e000ed04 	.word	0xe000ed04

0800ce78 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ce78:	b590      	push	{r4, r7, lr}
 800ce7a:	b08b      	sub	sp, #44	@ 0x2c
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d10a      	bne.n	800cea8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ce92:	2380      	movs	r3, #128	@ 0x80
 800ce94:	617b      	str	r3, [r7, #20]
    return event;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	461c      	mov	r4, r3
 800ce9a:	f107 0314 	add.w	r3, r7, #20
 800ce9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cea2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cea6:	e054      	b.n	800cf52 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ceac:	2300      	movs	r3, #0
 800ceae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb6:	d103      	bne.n	800cec0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ceb8:	f04f 33ff 	mov.w	r3, #4294967295
 800cebc:	627b      	str	r3, [r7, #36]	@ 0x24
 800cebe:	e009      	b.n	800ced4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d006      	beq.n	800ced4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800ceca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d101      	bne.n	800ced4 <osMessageGet+0x5c>
      ticks = 1;
 800ced0:	2301      	movs	r3, #1
 800ced2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ced4:	f7ff fd6c 	bl	800c9b0 <inHandlerMode>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d01c      	beq.n	800cf18 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800cede:	f107 0220 	add.w	r2, r7, #32
 800cee2:	f107 0314 	add.w	r3, r7, #20
 800cee6:	3304      	adds	r3, #4
 800cee8:	4619      	mov	r1, r3
 800ceea:	68b8      	ldr	r0, [r7, #8]
 800ceec:	f000 fefe 	bl	800dcec <xQueueReceiveFromISR>
 800cef0:	4603      	mov	r3, r0
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d102      	bne.n	800cefc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800cef6:	2310      	movs	r3, #16
 800cef8:	617b      	str	r3, [r7, #20]
 800cefa:	e001      	b.n	800cf00 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800cefc:	2300      	movs	r3, #0
 800cefe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cf00:	6a3b      	ldr	r3, [r7, #32]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d01d      	beq.n	800cf42 <osMessageGet+0xca>
 800cf06:	4b15      	ldr	r3, [pc, #84]	@ (800cf5c <osMessageGet+0xe4>)
 800cf08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf0c:	601a      	str	r2, [r3, #0]
 800cf0e:	f3bf 8f4f 	dsb	sy
 800cf12:	f3bf 8f6f 	isb	sy
 800cf16:	e014      	b.n	800cf42 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800cf18:	f107 0314 	add.w	r3, r7, #20
 800cf1c:	3304      	adds	r3, #4
 800cf1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf20:	4619      	mov	r1, r3
 800cf22:	68b8      	ldr	r0, [r7, #8]
 800cf24:	f000 fce2 	bl	800d8ec <xQueueReceive>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d102      	bne.n	800cf34 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800cf2e:	2310      	movs	r3, #16
 800cf30:	617b      	str	r3, [r7, #20]
 800cf32:	e006      	b.n	800cf42 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800cf34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d101      	bne.n	800cf3e <osMessageGet+0xc6>
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	e000      	b.n	800cf40 <osMessageGet+0xc8>
 800cf3e:	2340      	movs	r3, #64	@ 0x40
 800cf40:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	461c      	mov	r4, r3
 800cf46:	f107 0314 	add.w	r3, r7, #20
 800cf4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800cf52:	68f8      	ldr	r0, [r7, #12]
 800cf54:	372c      	adds	r7, #44	@ 0x2c
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd90      	pop	{r4, r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	e000ed04 	.word	0xe000ed04

0800cf60 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800cf68:	f7ff fd22 	bl	800c9b0 <inHandlerMode>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d004      	beq.n	800cf7c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 ff63 	bl	800de3e <uxQueueMessagesWaitingFromISR>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	e003      	b.n	800cf84 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 ff3d 	bl	800ddfc <uxQueueMessagesWaiting>
 800cf82:	4603      	mov	r3, r0
  }
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3708      	adds	r7, #8
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800cf94:	f7ff fd0c 	bl	800c9b0 <inHandlerMode>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d001      	beq.n	800cfa2 <osMessageDelete+0x16>
    return osErrorISR;
 800cf9e:	2382      	movs	r3, #130	@ 0x82
 800cfa0:	e003      	b.n	800cfaa <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 ff6c 	bl	800de80 <vQueueDelete>

  return osOK; 
 800cfa8:	2300      	movs	r3, #0
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3708      	adds	r7, #8
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cfb2:	b480      	push	{r7}
 800cfb4:	b083      	sub	sp, #12
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f103 0208 	add.w	r2, r3, #8
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f04f 32ff 	mov.w	r2, #4294967295
 800cfca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f103 0208 	add.w	r2, r3, #8
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f103 0208 	add.w	r2, r3, #8
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cfe6:	bf00      	nop
 800cfe8:	370c      	adds	r7, #12
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr

0800cff2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cff2:	b480      	push	{r7}
 800cff4:	b083      	sub	sp, #12
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d000:	bf00      	nop
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d00c:	b480      	push	{r7}
 800d00e:	b085      	sub	sp, #20
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	685b      	ldr	r3, [r3, #4]
 800d01a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	689a      	ldr	r2, [r3, #8]
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	683a      	ldr	r2, [r7, #0]
 800d030:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	683a      	ldr	r2, [r7, #0]
 800d036:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	1c5a      	adds	r2, r3, #1
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	601a      	str	r2, [r3, #0]
}
 800d048:	bf00      	nop
 800d04a:	3714      	adds	r7, #20
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d054:	b480      	push	{r7}
 800d056:	b085      	sub	sp, #20
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d06a:	d103      	bne.n	800d074 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	691b      	ldr	r3, [r3, #16]
 800d070:	60fb      	str	r3, [r7, #12]
 800d072:	e00c      	b.n	800d08e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	3308      	adds	r3, #8
 800d078:	60fb      	str	r3, [r7, #12]
 800d07a:	e002      	b.n	800d082 <vListInsert+0x2e>
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	60fb      	str	r3, [r7, #12]
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	68ba      	ldr	r2, [r7, #8]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d2f6      	bcs.n	800d07c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	685a      	ldr	r2, [r3, #4]
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	683a      	ldr	r2, [r7, #0]
 800d09c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	68fa      	ldr	r2, [r7, #12]
 800d0a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	683a      	ldr	r2, [r7, #0]
 800d0a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	1c5a      	adds	r2, r3, #1
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	601a      	str	r2, [r3, #0]
}
 800d0ba:	bf00      	nop
 800d0bc:	3714      	adds	r7, #20
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr

0800d0c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d0c6:	b480      	push	{r7}
 800d0c8:	b085      	sub	sp, #20
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	691b      	ldr	r3, [r3, #16]
 800d0d2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	6892      	ldr	r2, [r2, #8]
 800d0dc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	6852      	ldr	r2, [r2, #4]
 800d0e6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d103      	bne.n	800d0fa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	689a      	ldr	r2, [r3, #8]
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	1e5a      	subs	r2, r3, #1
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3714      	adds	r7, #20
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr
	...

0800d11c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d10d      	bne.n	800d14c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d134:	b672      	cpsid	i
 800d136:	f383 8811 	msr	BASEPRI, r3
 800d13a:	f3bf 8f6f 	isb	sy
 800d13e:	f3bf 8f4f 	dsb	sy
 800d142:	b662      	cpsie	i
 800d144:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d146:	bf00      	nop
 800d148:	bf00      	nop
 800d14a:	e7fd      	b.n	800d148 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800d14c:	f002 fa3e 	bl	800f5cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d158:	68f9      	ldr	r1, [r7, #12]
 800d15a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d15c:	fb01 f303 	mul.w	r3, r1, r3
 800d160:	441a      	add	r2, r3
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2200      	movs	r2, #0
 800d16a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d17c:	3b01      	subs	r3, #1
 800d17e:	68f9      	ldr	r1, [r7, #12]
 800d180:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d182:	fb01 f303 	mul.w	r3, r1, r3
 800d186:	441a      	add	r2, r3
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	22ff      	movs	r2, #255	@ 0xff
 800d190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	22ff      	movs	r2, #255	@ 0xff
 800d198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d114      	bne.n	800d1cc <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	691b      	ldr	r3, [r3, #16]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d01a      	beq.n	800d1e0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	3310      	adds	r3, #16
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f001 fce8 	bl	800eb84 <xTaskRemoveFromEventList>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d012      	beq.n	800d1e0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d1ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d1f0 <xQueueGenericReset+0xd4>)
 800d1bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1c0:	601a      	str	r2, [r3, #0]
 800d1c2:	f3bf 8f4f 	dsb	sy
 800d1c6:	f3bf 8f6f 	isb	sy
 800d1ca:	e009      	b.n	800d1e0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	3310      	adds	r3, #16
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7ff feee 	bl	800cfb2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	3324      	adds	r3, #36	@ 0x24
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7ff fee9 	bl	800cfb2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d1e0:	f002 fa2a 	bl	800f638 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d1e4:	2301      	movs	r3, #1
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3710      	adds	r7, #16
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	e000ed04 	.word	0xe000ed04

0800d1f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b08e      	sub	sp, #56	@ 0x38
 800d1f8:	af02      	add	r7, sp, #8
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]
 800d200:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d10d      	bne.n	800d224 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800d208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d20c:	b672      	cpsid	i
 800d20e:	f383 8811 	msr	BASEPRI, r3
 800d212:	f3bf 8f6f 	isb	sy
 800d216:	f3bf 8f4f 	dsb	sy
 800d21a:	b662      	cpsie	i
 800d21c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d21e:	bf00      	nop
 800d220:	bf00      	nop
 800d222:	e7fd      	b.n	800d220 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d10d      	bne.n	800d246 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800d22a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d22e:	b672      	cpsid	i
 800d230:	f383 8811 	msr	BASEPRI, r3
 800d234:	f3bf 8f6f 	isb	sy
 800d238:	f3bf 8f4f 	dsb	sy
 800d23c:	b662      	cpsie	i
 800d23e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d240:	bf00      	nop
 800d242:	bf00      	nop
 800d244:	e7fd      	b.n	800d242 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d002      	beq.n	800d252 <xQueueGenericCreateStatic+0x5e>
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d001      	beq.n	800d256 <xQueueGenericCreateStatic+0x62>
 800d252:	2301      	movs	r3, #1
 800d254:	e000      	b.n	800d258 <xQueueGenericCreateStatic+0x64>
 800d256:	2300      	movs	r3, #0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d10d      	bne.n	800d278 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800d25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d260:	b672      	cpsid	i
 800d262:	f383 8811 	msr	BASEPRI, r3
 800d266:	f3bf 8f6f 	isb	sy
 800d26a:	f3bf 8f4f 	dsb	sy
 800d26e:	b662      	cpsie	i
 800d270:	623b      	str	r3, [r7, #32]
}
 800d272:	bf00      	nop
 800d274:	bf00      	nop
 800d276:	e7fd      	b.n	800d274 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d102      	bne.n	800d284 <xQueueGenericCreateStatic+0x90>
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d101      	bne.n	800d288 <xQueueGenericCreateStatic+0x94>
 800d284:	2301      	movs	r3, #1
 800d286:	e000      	b.n	800d28a <xQueueGenericCreateStatic+0x96>
 800d288:	2300      	movs	r3, #0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d10d      	bne.n	800d2aa <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800d28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d292:	b672      	cpsid	i
 800d294:	f383 8811 	msr	BASEPRI, r3
 800d298:	f3bf 8f6f 	isb	sy
 800d29c:	f3bf 8f4f 	dsb	sy
 800d2a0:	b662      	cpsie	i
 800d2a2:	61fb      	str	r3, [r7, #28]
}
 800d2a4:	bf00      	nop
 800d2a6:	bf00      	nop
 800d2a8:	e7fd      	b.n	800d2a6 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d2aa:	2348      	movs	r3, #72	@ 0x48
 800d2ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	2b48      	cmp	r3, #72	@ 0x48
 800d2b2:	d00d      	beq.n	800d2d0 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800d2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2b8:	b672      	cpsid	i
 800d2ba:	f383 8811 	msr	BASEPRI, r3
 800d2be:	f3bf 8f6f 	isb	sy
 800d2c2:	f3bf 8f4f 	dsb	sy
 800d2c6:	b662      	cpsie	i
 800d2c8:	61bb      	str	r3, [r7, #24]
}
 800d2ca:	bf00      	nop
 800d2cc:	bf00      	nop
 800d2ce:	e7fd      	b.n	800d2cc <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d2d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d2d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d00d      	beq.n	800d2f8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2de:	2201      	movs	r2, #1
 800d2e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d2e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ea:	9300      	str	r3, [sp, #0]
 800d2ec:	4613      	mov	r3, r2
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	68b9      	ldr	r1, [r7, #8]
 800d2f2:	68f8      	ldr	r0, [r7, #12]
 800d2f4:	f000 f848 	bl	800d388 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3730      	adds	r7, #48	@ 0x30
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}

0800d302 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d302:	b580      	push	{r7, lr}
 800d304:	b08a      	sub	sp, #40	@ 0x28
 800d306:	af02      	add	r7, sp, #8
 800d308:	60f8      	str	r0, [r7, #12]
 800d30a:	60b9      	str	r1, [r7, #8]
 800d30c:	4613      	mov	r3, r2
 800d30e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d10d      	bne.n	800d332 <xQueueGenericCreate+0x30>
	__asm volatile
 800d316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d31a:	b672      	cpsid	i
 800d31c:	f383 8811 	msr	BASEPRI, r3
 800d320:	f3bf 8f6f 	isb	sy
 800d324:	f3bf 8f4f 	dsb	sy
 800d328:	b662      	cpsie	i
 800d32a:	613b      	str	r3, [r7, #16]
}
 800d32c:	bf00      	nop
 800d32e:	bf00      	nop
 800d330:	e7fd      	b.n	800d32e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d102      	bne.n	800d33e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d338:	2300      	movs	r3, #0
 800d33a:	61fb      	str	r3, [r7, #28]
 800d33c:	e004      	b.n	800d348 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	68ba      	ldr	r2, [r7, #8]
 800d342:	fb02 f303 	mul.w	r3, r2, r3
 800d346:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d348:	69fb      	ldr	r3, [r7, #28]
 800d34a:	3348      	adds	r3, #72	@ 0x48
 800d34c:	4618      	mov	r0, r3
 800d34e:	f002 fa6b 	bl	800f828 <pvPortMalloc>
 800d352:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d011      	beq.n	800d37e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	3348      	adds	r3, #72	@ 0x48
 800d362:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d364:	69bb      	ldr	r3, [r7, #24]
 800d366:	2200      	movs	r2, #0
 800d368:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d36c:	79fa      	ldrb	r2, [r7, #7]
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	9300      	str	r3, [sp, #0]
 800d372:	4613      	mov	r3, r2
 800d374:	697a      	ldr	r2, [r7, #20]
 800d376:	68b9      	ldr	r1, [r7, #8]
 800d378:	68f8      	ldr	r0, [r7, #12]
 800d37a:	f000 f805 	bl	800d388 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d37e:	69bb      	ldr	r3, [r7, #24]
	}
 800d380:	4618      	mov	r0, r3
 800d382:	3720      	adds	r7, #32
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}

0800d388 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	607a      	str	r2, [r7, #4]
 800d394:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d103      	bne.n	800d3a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d39c:	69bb      	ldr	r3, [r7, #24]
 800d39e:	69ba      	ldr	r2, [r7, #24]
 800d3a0:	601a      	str	r2, [r3, #0]
 800d3a2:	e002      	b.n	800d3aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d3a4:	69bb      	ldr	r3, [r7, #24]
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d3aa:	69bb      	ldr	r3, [r7, #24]
 800d3ac:	68fa      	ldr	r2, [r7, #12]
 800d3ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	68ba      	ldr	r2, [r7, #8]
 800d3b4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d3b6:	2101      	movs	r1, #1
 800d3b8:	69b8      	ldr	r0, [r7, #24]
 800d3ba:	f7ff feaf 	bl	800d11c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d3be:	bf00      	nop
 800d3c0:	3710      	adds	r7, #16
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}

0800d3c6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d3c6:	b580      	push	{r7, lr}
 800d3c8:	b082      	sub	sp, #8
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d00e      	beq.n	800d3f2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	2100      	movs	r1, #0
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f000 f837 	bl	800d460 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d3f2:	bf00      	nop
 800d3f4:	3708      	adds	r7, #8
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}

0800d3fa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d3fa:	b580      	push	{r7, lr}
 800d3fc:	b086      	sub	sp, #24
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	4603      	mov	r3, r0
 800d402:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d404:	2301      	movs	r3, #1
 800d406:	617b      	str	r3, [r7, #20]
 800d408:	2300      	movs	r3, #0
 800d40a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d40c:	79fb      	ldrb	r3, [r7, #7]
 800d40e:	461a      	mov	r2, r3
 800d410:	6939      	ldr	r1, [r7, #16]
 800d412:	6978      	ldr	r0, [r7, #20]
 800d414:	f7ff ff75 	bl	800d302 <xQueueGenericCreate>
 800d418:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d41a:	68f8      	ldr	r0, [r7, #12]
 800d41c:	f7ff ffd3 	bl	800d3c6 <prvInitialiseMutex>

		return xNewQueue;
 800d420:	68fb      	ldr	r3, [r7, #12]
	}
 800d422:	4618      	mov	r0, r3
 800d424:	3718      	adds	r7, #24
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}

0800d42a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b088      	sub	sp, #32
 800d42e:	af02      	add	r7, sp, #8
 800d430:	4603      	mov	r3, r0
 800d432:	6039      	str	r1, [r7, #0]
 800d434:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d436:	2301      	movs	r3, #1
 800d438:	617b      	str	r3, [r7, #20]
 800d43a:	2300      	movs	r3, #0
 800d43c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d43e:	79fb      	ldrb	r3, [r7, #7]
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	2200      	movs	r2, #0
 800d446:	6939      	ldr	r1, [r7, #16]
 800d448:	6978      	ldr	r0, [r7, #20]
 800d44a:	f7ff fed3 	bl	800d1f4 <xQueueGenericCreateStatic>
 800d44e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	f7ff ffb8 	bl	800d3c6 <prvInitialiseMutex>

		return xNewQueue;
 800d456:	68fb      	ldr	r3, [r7, #12]
	}
 800d458:	4618      	mov	r0, r3
 800d45a:	3718      	adds	r7, #24
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b08e      	sub	sp, #56	@ 0x38
 800d464:	af00      	add	r7, sp, #0
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	607a      	str	r2, [r7, #4]
 800d46c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d46e:	2300      	movs	r3, #0
 800d470:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10d      	bne.n	800d498 <xQueueGenericSend+0x38>
	__asm volatile
 800d47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d480:	b672      	cpsid	i
 800d482:	f383 8811 	msr	BASEPRI, r3
 800d486:	f3bf 8f6f 	isb	sy
 800d48a:	f3bf 8f4f 	dsb	sy
 800d48e:	b662      	cpsie	i
 800d490:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d492:	bf00      	nop
 800d494:	bf00      	nop
 800d496:	e7fd      	b.n	800d494 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d103      	bne.n	800d4a6 <xQueueGenericSend+0x46>
 800d49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d101      	bne.n	800d4aa <xQueueGenericSend+0x4a>
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	e000      	b.n	800d4ac <xQueueGenericSend+0x4c>
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d10d      	bne.n	800d4cc <xQueueGenericSend+0x6c>
	__asm volatile
 800d4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4b4:	b672      	cpsid	i
 800d4b6:	f383 8811 	msr	BASEPRI, r3
 800d4ba:	f3bf 8f6f 	isb	sy
 800d4be:	f3bf 8f4f 	dsb	sy
 800d4c2:	b662      	cpsie	i
 800d4c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d4c6:	bf00      	nop
 800d4c8:	bf00      	nop
 800d4ca:	e7fd      	b.n	800d4c8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	2b02      	cmp	r3, #2
 800d4d0:	d103      	bne.n	800d4da <xQueueGenericSend+0x7a>
 800d4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4d6:	2b01      	cmp	r3, #1
 800d4d8:	d101      	bne.n	800d4de <xQueueGenericSend+0x7e>
 800d4da:	2301      	movs	r3, #1
 800d4dc:	e000      	b.n	800d4e0 <xQueueGenericSend+0x80>
 800d4de:	2300      	movs	r3, #0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d10d      	bne.n	800d500 <xQueueGenericSend+0xa0>
	__asm volatile
 800d4e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4e8:	b672      	cpsid	i
 800d4ea:	f383 8811 	msr	BASEPRI, r3
 800d4ee:	f3bf 8f6f 	isb	sy
 800d4f2:	f3bf 8f4f 	dsb	sy
 800d4f6:	b662      	cpsie	i
 800d4f8:	623b      	str	r3, [r7, #32]
}
 800d4fa:	bf00      	nop
 800d4fc:	bf00      	nop
 800d4fe:	e7fd      	b.n	800d4fc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d500:	f001 fd0e 	bl	800ef20 <xTaskGetSchedulerState>
 800d504:	4603      	mov	r3, r0
 800d506:	2b00      	cmp	r3, #0
 800d508:	d102      	bne.n	800d510 <xQueueGenericSend+0xb0>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d101      	bne.n	800d514 <xQueueGenericSend+0xb4>
 800d510:	2301      	movs	r3, #1
 800d512:	e000      	b.n	800d516 <xQueueGenericSend+0xb6>
 800d514:	2300      	movs	r3, #0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d10d      	bne.n	800d536 <xQueueGenericSend+0xd6>
	__asm volatile
 800d51a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d51e:	b672      	cpsid	i
 800d520:	f383 8811 	msr	BASEPRI, r3
 800d524:	f3bf 8f6f 	isb	sy
 800d528:	f3bf 8f4f 	dsb	sy
 800d52c:	b662      	cpsie	i
 800d52e:	61fb      	str	r3, [r7, #28]
}
 800d530:	bf00      	nop
 800d532:	bf00      	nop
 800d534:	e7fd      	b.n	800d532 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d536:	f002 f849 	bl	800f5cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d53c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d542:	429a      	cmp	r2, r3
 800d544:	d302      	bcc.n	800d54c <xQueueGenericSend+0xec>
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	2b02      	cmp	r3, #2
 800d54a:	d129      	bne.n	800d5a0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d54c:	683a      	ldr	r2, [r7, #0]
 800d54e:	68b9      	ldr	r1, [r7, #8]
 800d550:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d552:	f000 fcd3 	bl	800defc <prvCopyDataToQueue>
 800d556:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d55a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d010      	beq.n	800d582 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d562:	3324      	adds	r3, #36	@ 0x24
 800d564:	4618      	mov	r0, r3
 800d566:	f001 fb0d 	bl	800eb84 <xTaskRemoveFromEventList>
 800d56a:	4603      	mov	r3, r0
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d013      	beq.n	800d598 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d570:	4b3f      	ldr	r3, [pc, #252]	@ (800d670 <xQueueGenericSend+0x210>)
 800d572:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d576:	601a      	str	r2, [r3, #0]
 800d578:	f3bf 8f4f 	dsb	sy
 800d57c:	f3bf 8f6f 	isb	sy
 800d580:	e00a      	b.n	800d598 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d584:	2b00      	cmp	r3, #0
 800d586:	d007      	beq.n	800d598 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d588:	4b39      	ldr	r3, [pc, #228]	@ (800d670 <xQueueGenericSend+0x210>)
 800d58a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d58e:	601a      	str	r2, [r3, #0]
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d598:	f002 f84e 	bl	800f638 <vPortExitCritical>
				return pdPASS;
 800d59c:	2301      	movs	r3, #1
 800d59e:	e063      	b.n	800d668 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d103      	bne.n	800d5ae <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d5a6:	f002 f847 	bl	800f638 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	e05c      	b.n	800d668 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d5ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d106      	bne.n	800d5c2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d5b4:	f107 0314 	add.w	r3, r7, #20
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f001 fb49 	bl	800ec50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d5be:	2301      	movs	r3, #1
 800d5c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d5c2:	f002 f839 	bl	800f638 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d5c6:	f001 f8c3 	bl	800e750 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d5ca:	f001 ffff 	bl	800f5cc <vPortEnterCritical>
 800d5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d5d4:	b25b      	sxtb	r3, r3
 800d5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5da:	d103      	bne.n	800d5e4 <xQueueGenericSend+0x184>
 800d5dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d5ea:	b25b      	sxtb	r3, r3
 800d5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f0:	d103      	bne.n	800d5fa <xQueueGenericSend+0x19a>
 800d5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d5fa:	f002 f81d 	bl	800f638 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5fe:	1d3a      	adds	r2, r7, #4
 800d600:	f107 0314 	add.w	r3, r7, #20
 800d604:	4611      	mov	r1, r2
 800d606:	4618      	mov	r0, r3
 800d608:	f001 fb38 	bl	800ec7c <xTaskCheckForTimeOut>
 800d60c:	4603      	mov	r3, r0
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d124      	bne.n	800d65c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d612:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d614:	f000 fd6a 	bl	800e0ec <prvIsQueueFull>
 800d618:	4603      	mov	r3, r0
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d018      	beq.n	800d650 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d620:	3310      	adds	r3, #16
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	4611      	mov	r1, r2
 800d626:	4618      	mov	r0, r3
 800d628:	f001 fa84 	bl	800eb34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d62c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d62e:	f000 fcf5 	bl	800e01c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d632:	f001 f89b 	bl	800e76c <xTaskResumeAll>
 800d636:	4603      	mov	r3, r0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	f47f af7c 	bne.w	800d536 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800d63e:	4b0c      	ldr	r3, [pc, #48]	@ (800d670 <xQueueGenericSend+0x210>)
 800d640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d644:	601a      	str	r2, [r3, #0]
 800d646:	f3bf 8f4f 	dsb	sy
 800d64a:	f3bf 8f6f 	isb	sy
 800d64e:	e772      	b.n	800d536 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d650:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d652:	f000 fce3 	bl	800e01c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d656:	f001 f889 	bl	800e76c <xTaskResumeAll>
 800d65a:	e76c      	b.n	800d536 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d65c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d65e:	f000 fcdd 	bl	800e01c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d662:	f001 f883 	bl	800e76c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d666:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3738      	adds	r7, #56	@ 0x38
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	e000ed04 	.word	0xe000ed04

0800d674 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b08e      	sub	sp, #56	@ 0x38
 800d678:	af00      	add	r7, sp, #0
 800d67a:	60f8      	str	r0, [r7, #12]
 800d67c:	60b9      	str	r1, [r7, #8]
 800d67e:	607a      	str	r2, [r7, #4]
 800d680:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d10d      	bne.n	800d6a8 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800d68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d690:	b672      	cpsid	i
 800d692:	f383 8811 	msr	BASEPRI, r3
 800d696:	f3bf 8f6f 	isb	sy
 800d69a:	f3bf 8f4f 	dsb	sy
 800d69e:	b662      	cpsie	i
 800d6a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d6a2:	bf00      	nop
 800d6a4:	bf00      	nop
 800d6a6:	e7fd      	b.n	800d6a4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d103      	bne.n	800d6b6 <xQueueGenericSendFromISR+0x42>
 800d6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d101      	bne.n	800d6ba <xQueueGenericSendFromISR+0x46>
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	e000      	b.n	800d6bc <xQueueGenericSendFromISR+0x48>
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d10d      	bne.n	800d6dc <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800d6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6c4:	b672      	cpsid	i
 800d6c6:	f383 8811 	msr	BASEPRI, r3
 800d6ca:	f3bf 8f6f 	isb	sy
 800d6ce:	f3bf 8f4f 	dsb	sy
 800d6d2:	b662      	cpsie	i
 800d6d4:	623b      	str	r3, [r7, #32]
}
 800d6d6:	bf00      	nop
 800d6d8:	bf00      	nop
 800d6da:	e7fd      	b.n	800d6d8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	2b02      	cmp	r3, #2
 800d6e0:	d103      	bne.n	800d6ea <xQueueGenericSendFromISR+0x76>
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d101      	bne.n	800d6ee <xQueueGenericSendFromISR+0x7a>
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e000      	b.n	800d6f0 <xQueueGenericSendFromISR+0x7c>
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d10d      	bne.n	800d710 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800d6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6f8:	b672      	cpsid	i
 800d6fa:	f383 8811 	msr	BASEPRI, r3
 800d6fe:	f3bf 8f6f 	isb	sy
 800d702:	f3bf 8f4f 	dsb	sy
 800d706:	b662      	cpsie	i
 800d708:	61fb      	str	r3, [r7, #28]
}
 800d70a:	bf00      	nop
 800d70c:	bf00      	nop
 800d70e:	e7fd      	b.n	800d70c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d710:	f002 f844 	bl	800f79c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d714:	f3ef 8211 	mrs	r2, BASEPRI
 800d718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d71c:	b672      	cpsid	i
 800d71e:	f383 8811 	msr	BASEPRI, r3
 800d722:	f3bf 8f6f 	isb	sy
 800d726:	f3bf 8f4f 	dsb	sy
 800d72a:	b662      	cpsie	i
 800d72c:	61ba      	str	r2, [r7, #24]
 800d72e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d730:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d732:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d736:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d73a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d73c:	429a      	cmp	r2, r3
 800d73e:	d302      	bcc.n	800d746 <xQueueGenericSendFromISR+0xd2>
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	2b02      	cmp	r3, #2
 800d744:	d12c      	bne.n	800d7a0 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d748:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d74c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d750:	683a      	ldr	r2, [r7, #0]
 800d752:	68b9      	ldr	r1, [r7, #8]
 800d754:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d756:	f000 fbd1 	bl	800defc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d75a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800d75e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d762:	d112      	bne.n	800d78a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d016      	beq.n	800d79a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d76e:	3324      	adds	r3, #36	@ 0x24
 800d770:	4618      	mov	r0, r3
 800d772:	f001 fa07 	bl	800eb84 <xTaskRemoveFromEventList>
 800d776:	4603      	mov	r3, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d00e      	beq.n	800d79a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d00b      	beq.n	800d79a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2201      	movs	r2, #1
 800d786:	601a      	str	r2, [r3, #0]
 800d788:	e007      	b.n	800d79a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d78a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d78e:	3301      	adds	r3, #1
 800d790:	b2db      	uxtb	r3, r3
 800d792:	b25a      	sxtb	r2, r3
 800d794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d796:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d79a:	2301      	movs	r3, #1
 800d79c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800d79e:	e001      	b.n	800d7a4 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d7ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d7b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3738      	adds	r7, #56	@ 0x38
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b08e      	sub	sp, #56	@ 0x38
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
 800d7c2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d10d      	bne.n	800d7ea <xQueueGiveFromISR+0x30>
	__asm volatile
 800d7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d2:	b672      	cpsid	i
 800d7d4:	f383 8811 	msr	BASEPRI, r3
 800d7d8:	f3bf 8f6f 	isb	sy
 800d7dc:	f3bf 8f4f 	dsb	sy
 800d7e0:	b662      	cpsie	i
 800d7e2:	623b      	str	r3, [r7, #32]
}
 800d7e4:	bf00      	nop
 800d7e6:	bf00      	nop
 800d7e8:	e7fd      	b.n	800d7e6 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00d      	beq.n	800d80e <xQueueGiveFromISR+0x54>
	__asm volatile
 800d7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7f6:	b672      	cpsid	i
 800d7f8:	f383 8811 	msr	BASEPRI, r3
 800d7fc:	f3bf 8f6f 	isb	sy
 800d800:	f3bf 8f4f 	dsb	sy
 800d804:	b662      	cpsie	i
 800d806:	61fb      	str	r3, [r7, #28]
}
 800d808:	bf00      	nop
 800d80a:	bf00      	nop
 800d80c:	e7fd      	b.n	800d80a <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d103      	bne.n	800d81e <xQueueGiveFromISR+0x64>
 800d816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d818:	689b      	ldr	r3, [r3, #8]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d101      	bne.n	800d822 <xQueueGiveFromISR+0x68>
 800d81e:	2301      	movs	r3, #1
 800d820:	e000      	b.n	800d824 <xQueueGiveFromISR+0x6a>
 800d822:	2300      	movs	r3, #0
 800d824:	2b00      	cmp	r3, #0
 800d826:	d10d      	bne.n	800d844 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800d828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d82c:	b672      	cpsid	i
 800d82e:	f383 8811 	msr	BASEPRI, r3
 800d832:	f3bf 8f6f 	isb	sy
 800d836:	f3bf 8f4f 	dsb	sy
 800d83a:	b662      	cpsie	i
 800d83c:	61bb      	str	r3, [r7, #24]
}
 800d83e:	bf00      	nop
 800d840:	bf00      	nop
 800d842:	e7fd      	b.n	800d840 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d844:	f001 ffaa 	bl	800f79c <vPortValidateInterruptPriority>
	__asm volatile
 800d848:	f3ef 8211 	mrs	r2, BASEPRI
 800d84c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d850:	b672      	cpsid	i
 800d852:	f383 8811 	msr	BASEPRI, r3
 800d856:	f3bf 8f6f 	isb	sy
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	b662      	cpsie	i
 800d860:	617a      	str	r2, [r7, #20]
 800d862:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d864:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d866:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d86a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d86c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d872:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d874:	429a      	cmp	r2, r3
 800d876:	d22b      	bcs.n	800d8d0 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d87a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d87e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d884:	1c5a      	adds	r2, r3, #1
 800d886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d888:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d88a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d892:	d112      	bne.n	800d8ba <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d016      	beq.n	800d8ca <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d89e:	3324      	adds	r3, #36	@ 0x24
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f001 f96f 	bl	800eb84 <xTaskRemoveFromEventList>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d00e      	beq.n	800d8ca <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d00b      	beq.n	800d8ca <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	601a      	str	r2, [r3, #0]
 800d8b8:	e007      	b.n	800d8ca <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d8ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8be:	3301      	adds	r3, #1
 800d8c0:	b2db      	uxtb	r3, r3
 800d8c2:	b25a      	sxtb	r2, r3
 800d8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8ce:	e001      	b.n	800d8d4 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8d6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f383 8811 	msr	BASEPRI, r3
}
 800d8de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3738      	adds	r7, #56	@ 0x38
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
	...

0800d8ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b08c      	sub	sp, #48	@ 0x30
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	60f8      	str	r0, [r7, #12]
 800d8f4:	60b9      	str	r1, [r7, #8]
 800d8f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d902:	2b00      	cmp	r3, #0
 800d904:	d10d      	bne.n	800d922 <xQueueReceive+0x36>
	__asm volatile
 800d906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d90a:	b672      	cpsid	i
 800d90c:	f383 8811 	msr	BASEPRI, r3
 800d910:	f3bf 8f6f 	isb	sy
 800d914:	f3bf 8f4f 	dsb	sy
 800d918:	b662      	cpsie	i
 800d91a:	623b      	str	r3, [r7, #32]
}
 800d91c:	bf00      	nop
 800d91e:	bf00      	nop
 800d920:	e7fd      	b.n	800d91e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d103      	bne.n	800d930 <xQueueReceive+0x44>
 800d928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d92a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d101      	bne.n	800d934 <xQueueReceive+0x48>
 800d930:	2301      	movs	r3, #1
 800d932:	e000      	b.n	800d936 <xQueueReceive+0x4a>
 800d934:	2300      	movs	r3, #0
 800d936:	2b00      	cmp	r3, #0
 800d938:	d10d      	bne.n	800d956 <xQueueReceive+0x6a>
	__asm volatile
 800d93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d93e:	b672      	cpsid	i
 800d940:	f383 8811 	msr	BASEPRI, r3
 800d944:	f3bf 8f6f 	isb	sy
 800d948:	f3bf 8f4f 	dsb	sy
 800d94c:	b662      	cpsie	i
 800d94e:	61fb      	str	r3, [r7, #28]
}
 800d950:	bf00      	nop
 800d952:	bf00      	nop
 800d954:	e7fd      	b.n	800d952 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d956:	f001 fae3 	bl	800ef20 <xTaskGetSchedulerState>
 800d95a:	4603      	mov	r3, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d102      	bne.n	800d966 <xQueueReceive+0x7a>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d101      	bne.n	800d96a <xQueueReceive+0x7e>
 800d966:	2301      	movs	r3, #1
 800d968:	e000      	b.n	800d96c <xQueueReceive+0x80>
 800d96a:	2300      	movs	r3, #0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d10d      	bne.n	800d98c <xQueueReceive+0xa0>
	__asm volatile
 800d970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d974:	b672      	cpsid	i
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
 800d982:	b662      	cpsie	i
 800d984:	61bb      	str	r3, [r7, #24]
}
 800d986:	bf00      	nop
 800d988:	bf00      	nop
 800d98a:	e7fd      	b.n	800d988 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d98c:	f001 fe1e 	bl	800f5cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d994:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d01f      	beq.n	800d9dc <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d99c:	68b9      	ldr	r1, [r7, #8]
 800d99e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9a0:	f000 fb16 	bl	800dfd0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a6:	1e5a      	subs	r2, r3, #1
 800d9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9aa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ae:	691b      	ldr	r3, [r3, #16]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d00f      	beq.n	800d9d4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9b6:	3310      	adds	r3, #16
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f001 f8e3 	bl	800eb84 <xTaskRemoveFromEventList>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d007      	beq.n	800d9d4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d9c4:	4b3c      	ldr	r3, [pc, #240]	@ (800dab8 <xQueueReceive+0x1cc>)
 800d9c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9ca:	601a      	str	r2, [r3, #0]
 800d9cc:	f3bf 8f4f 	dsb	sy
 800d9d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d9d4:	f001 fe30 	bl	800f638 <vPortExitCritical>
				return pdPASS;
 800d9d8:	2301      	movs	r3, #1
 800d9da:	e069      	b.n	800dab0 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d103      	bne.n	800d9ea <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d9e2:	f001 fe29 	bl	800f638 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	e062      	b.n	800dab0 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d106      	bne.n	800d9fe <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9f0:	f107 0310 	add.w	r3, r7, #16
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f001 f92b 	bl	800ec50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9fe:	f001 fe1b 	bl	800f638 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da02:	f000 fea5 	bl	800e750 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da06:	f001 fde1 	bl	800f5cc <vPortEnterCritical>
 800da0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da10:	b25b      	sxtb	r3, r3
 800da12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da16:	d103      	bne.n	800da20 <xQueueReceive+0x134>
 800da18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da1a:	2200      	movs	r2, #0
 800da1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da26:	b25b      	sxtb	r3, r3
 800da28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da2c:	d103      	bne.n	800da36 <xQueueReceive+0x14a>
 800da2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da30:	2200      	movs	r2, #0
 800da32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da36:	f001 fdff 	bl	800f638 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da3a:	1d3a      	adds	r2, r7, #4
 800da3c:	f107 0310 	add.w	r3, r7, #16
 800da40:	4611      	mov	r1, r2
 800da42:	4618      	mov	r0, r3
 800da44:	f001 f91a 	bl	800ec7c <xTaskCheckForTimeOut>
 800da48:	4603      	mov	r3, r0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d123      	bne.n	800da96 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da50:	f000 fb36 	bl	800e0c0 <prvIsQueueEmpty>
 800da54:	4603      	mov	r3, r0
 800da56:	2b00      	cmp	r3, #0
 800da58:	d017      	beq.n	800da8a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da5c:	3324      	adds	r3, #36	@ 0x24
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	4611      	mov	r1, r2
 800da62:	4618      	mov	r0, r3
 800da64:	f001 f866 	bl	800eb34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da6a:	f000 fad7 	bl	800e01c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da6e:	f000 fe7d 	bl	800e76c <xTaskResumeAll>
 800da72:	4603      	mov	r3, r0
 800da74:	2b00      	cmp	r3, #0
 800da76:	d189      	bne.n	800d98c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800da78:	4b0f      	ldr	r3, [pc, #60]	@ (800dab8 <xQueueReceive+0x1cc>)
 800da7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da7e:	601a      	str	r2, [r3, #0]
 800da80:	f3bf 8f4f 	dsb	sy
 800da84:	f3bf 8f6f 	isb	sy
 800da88:	e780      	b.n	800d98c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800da8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da8c:	f000 fac6 	bl	800e01c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da90:	f000 fe6c 	bl	800e76c <xTaskResumeAll>
 800da94:	e77a      	b.n	800d98c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800da96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da98:	f000 fac0 	bl	800e01c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da9c:	f000 fe66 	bl	800e76c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800daa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800daa2:	f000 fb0d 	bl	800e0c0 <prvIsQueueEmpty>
 800daa6:	4603      	mov	r3, r0
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	f43f af6f 	beq.w	800d98c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800daae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3730      	adds	r7, #48	@ 0x30
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	e000ed04 	.word	0xe000ed04

0800dabc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b08e      	sub	sp, #56	@ 0x38
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dac6:	2300      	movs	r3, #0
 800dac8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dace:	2300      	movs	r3, #0
 800dad0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d10d      	bne.n	800daf4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800dad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dadc:	b672      	cpsid	i
 800dade:	f383 8811 	msr	BASEPRI, r3
 800dae2:	f3bf 8f6f 	isb	sy
 800dae6:	f3bf 8f4f 	dsb	sy
 800daea:	b662      	cpsie	i
 800daec:	623b      	str	r3, [r7, #32]
}
 800daee:	bf00      	nop
 800daf0:	bf00      	nop
 800daf2:	e7fd      	b.n	800daf0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800daf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d00d      	beq.n	800db18 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800dafc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db00:	b672      	cpsid	i
 800db02:	f383 8811 	msr	BASEPRI, r3
 800db06:	f3bf 8f6f 	isb	sy
 800db0a:	f3bf 8f4f 	dsb	sy
 800db0e:	b662      	cpsie	i
 800db10:	61fb      	str	r3, [r7, #28]
}
 800db12:	bf00      	nop
 800db14:	bf00      	nop
 800db16:	e7fd      	b.n	800db14 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db18:	f001 fa02 	bl	800ef20 <xTaskGetSchedulerState>
 800db1c:	4603      	mov	r3, r0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d102      	bne.n	800db28 <xQueueSemaphoreTake+0x6c>
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d101      	bne.n	800db2c <xQueueSemaphoreTake+0x70>
 800db28:	2301      	movs	r3, #1
 800db2a:	e000      	b.n	800db2e <xQueueSemaphoreTake+0x72>
 800db2c:	2300      	movs	r3, #0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d10d      	bne.n	800db4e <xQueueSemaphoreTake+0x92>
	__asm volatile
 800db32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db36:	b672      	cpsid	i
 800db38:	f383 8811 	msr	BASEPRI, r3
 800db3c:	f3bf 8f6f 	isb	sy
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	b662      	cpsie	i
 800db46:	61bb      	str	r3, [r7, #24]
}
 800db48:	bf00      	nop
 800db4a:	bf00      	nop
 800db4c:	e7fd      	b.n	800db4a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800db4e:	f001 fd3d 	bl	800f5cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800db52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db56:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800db58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d024      	beq.n	800dba8 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800db5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db60:	1e5a      	subs	r2, r3, #1
 800db62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db64:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d104      	bne.n	800db78 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800db6e:	f001 fba1 	bl	800f2b4 <pvTaskIncrementMutexHeldCount>
 800db72:	4602      	mov	r2, r0
 800db74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db76:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d00f      	beq.n	800dba0 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db82:	3310      	adds	r3, #16
 800db84:	4618      	mov	r0, r3
 800db86:	f000 fffd 	bl	800eb84 <xTaskRemoveFromEventList>
 800db8a:	4603      	mov	r3, r0
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d007      	beq.n	800dba0 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800db90:	4b55      	ldr	r3, [pc, #340]	@ (800dce8 <xQueueSemaphoreTake+0x22c>)
 800db92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db96:	601a      	str	r2, [r3, #0]
 800db98:	f3bf 8f4f 	dsb	sy
 800db9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dba0:	f001 fd4a 	bl	800f638 <vPortExitCritical>
				return pdPASS;
 800dba4:	2301      	movs	r3, #1
 800dba6:	e09a      	b.n	800dcde <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d114      	bne.n	800dbd8 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dbae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d00d      	beq.n	800dbd0 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800dbb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb8:	b672      	cpsid	i
 800dbba:	f383 8811 	msr	BASEPRI, r3
 800dbbe:	f3bf 8f6f 	isb	sy
 800dbc2:	f3bf 8f4f 	dsb	sy
 800dbc6:	b662      	cpsie	i
 800dbc8:	617b      	str	r3, [r7, #20]
}
 800dbca:	bf00      	nop
 800dbcc:	bf00      	nop
 800dbce:	e7fd      	b.n	800dbcc <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dbd0:	f001 fd32 	bl	800f638 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	e082      	b.n	800dcde <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dbd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d106      	bne.n	800dbec <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dbde:	f107 030c 	add.w	r3, r7, #12
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f001 f834 	bl	800ec50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dbec:	f001 fd24 	bl	800f638 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dbf0:	f000 fdae 	bl	800e750 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dbf4:	f001 fcea 	bl	800f5cc <vPortEnterCritical>
 800dbf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbfa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dbfe:	b25b      	sxtb	r3, r3
 800dc00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc04:	d103      	bne.n	800dc0e <xQueueSemaphoreTake+0x152>
 800dc06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dc0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dc14:	b25b      	sxtb	r3, r3
 800dc16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc1a:	d103      	bne.n	800dc24 <xQueueSemaphoreTake+0x168>
 800dc1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc1e:	2200      	movs	r2, #0
 800dc20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dc24:	f001 fd08 	bl	800f638 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc28:	463a      	mov	r2, r7
 800dc2a:	f107 030c 	add.w	r3, r7, #12
 800dc2e:	4611      	mov	r1, r2
 800dc30:	4618      	mov	r0, r3
 800dc32:	f001 f823 	bl	800ec7c <xTaskCheckForTimeOut>
 800dc36:	4603      	mov	r3, r0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d132      	bne.n	800dca2 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc3e:	f000 fa3f 	bl	800e0c0 <prvIsQueueEmpty>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d026      	beq.n	800dc96 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d109      	bne.n	800dc64 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800dc50:	f001 fcbc 	bl	800f5cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f001 f97f 	bl	800ef5c <xTaskPriorityInherit>
 800dc5e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800dc60:	f001 fcea 	bl	800f638 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dc64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc66:	3324      	adds	r3, #36	@ 0x24
 800dc68:	683a      	ldr	r2, [r7, #0]
 800dc6a:	4611      	mov	r1, r2
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f000 ff61 	bl	800eb34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc74:	f000 f9d2 	bl	800e01c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc78:	f000 fd78 	bl	800e76c <xTaskResumeAll>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	f47f af65 	bne.w	800db4e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800dc84:	4b18      	ldr	r3, [pc, #96]	@ (800dce8 <xQueueSemaphoreTake+0x22c>)
 800dc86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc8a:	601a      	str	r2, [r3, #0]
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	f3bf 8f6f 	isb	sy
 800dc94:	e75b      	b.n	800db4e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dc96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc98:	f000 f9c0 	bl	800e01c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc9c:	f000 fd66 	bl	800e76c <xTaskResumeAll>
 800dca0:	e755      	b.n	800db4e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dca2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dca4:	f000 f9ba 	bl	800e01c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dca8:	f000 fd60 	bl	800e76c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dcac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dcae:	f000 fa07 	bl	800e0c0 <prvIsQueueEmpty>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	f43f af4a 	beq.w	800db4e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dcba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d00d      	beq.n	800dcdc <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800dcc0:	f001 fc84 	bl	800f5cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dcc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dcc6:	f000 f901 	bl	800decc <prvGetDisinheritPriorityAfterTimeout>
 800dcca:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcce:	689b      	ldr	r3, [r3, #8]
 800dcd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f001 fa4e 	bl	800f174 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dcd8:	f001 fcae 	bl	800f638 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dcdc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3738      	adds	r7, #56	@ 0x38
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	e000ed04 	.word	0xe000ed04

0800dcec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b08e      	sub	sp, #56	@ 0x38
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	60b9      	str	r1, [r7, #8]
 800dcf6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800dcfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d10d      	bne.n	800dd1e <xQueueReceiveFromISR+0x32>
	__asm volatile
 800dd02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd06:	b672      	cpsid	i
 800dd08:	f383 8811 	msr	BASEPRI, r3
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	f3bf 8f4f 	dsb	sy
 800dd14:	b662      	cpsie	i
 800dd16:	623b      	str	r3, [r7, #32]
}
 800dd18:	bf00      	nop
 800dd1a:	bf00      	nop
 800dd1c:	e7fd      	b.n	800dd1a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d103      	bne.n	800dd2c <xQueueReceiveFromISR+0x40>
 800dd24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d101      	bne.n	800dd30 <xQueueReceiveFromISR+0x44>
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	e000      	b.n	800dd32 <xQueueReceiveFromISR+0x46>
 800dd30:	2300      	movs	r3, #0
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d10d      	bne.n	800dd52 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800dd36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd3a:	b672      	cpsid	i
 800dd3c:	f383 8811 	msr	BASEPRI, r3
 800dd40:	f3bf 8f6f 	isb	sy
 800dd44:	f3bf 8f4f 	dsb	sy
 800dd48:	b662      	cpsie	i
 800dd4a:	61fb      	str	r3, [r7, #28]
}
 800dd4c:	bf00      	nop
 800dd4e:	bf00      	nop
 800dd50:	e7fd      	b.n	800dd4e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dd52:	f001 fd23 	bl	800f79c <vPortValidateInterruptPriority>
	__asm volatile
 800dd56:	f3ef 8211 	mrs	r2, BASEPRI
 800dd5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd5e:	b672      	cpsid	i
 800dd60:	f383 8811 	msr	BASEPRI, r3
 800dd64:	f3bf 8f6f 	isb	sy
 800dd68:	f3bf 8f4f 	dsb	sy
 800dd6c:	b662      	cpsie	i
 800dd6e:	61ba      	str	r2, [r7, #24]
 800dd70:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dd72:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd74:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd7a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d02f      	beq.n	800dde2 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dd82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dd8c:	68b9      	ldr	r1, [r7, #8]
 800dd8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd90:	f000 f91e 	bl	800dfd0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd96:	1e5a      	subs	r2, r3, #1
 800dd98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd9a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dd9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800dda0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dda4:	d112      	bne.n	800ddcc <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda8:	691b      	ldr	r3, [r3, #16]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d016      	beq.n	800dddc <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb0:	3310      	adds	r3, #16
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f000 fee6 	bl	800eb84 <xTaskRemoveFromEventList>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d00e      	beq.n	800dddc <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d00b      	beq.n	800dddc <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	601a      	str	r2, [r3, #0]
 800ddca:	e007      	b.n	800dddc <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ddcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	b25a      	sxtb	r2, r3
 800ddd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800dddc:	2301      	movs	r3, #1
 800ddde:	637b      	str	r3, [r7, #52]	@ 0x34
 800dde0:	e001      	b.n	800dde6 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800dde2:	2300      	movs	r3, #0
 800dde4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dde6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	f383 8811 	msr	BASEPRI, r3
}
 800ddf0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ddf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3738      	adds	r7, #56	@ 0x38
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}

0800ddfc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d10d      	bne.n	800de26 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800de0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de0e:	b672      	cpsid	i
 800de10:	f383 8811 	msr	BASEPRI, r3
 800de14:	f3bf 8f6f 	isb	sy
 800de18:	f3bf 8f4f 	dsb	sy
 800de1c:	b662      	cpsie	i
 800de1e:	60bb      	str	r3, [r7, #8]
}
 800de20:	bf00      	nop
 800de22:	bf00      	nop
 800de24:	e7fd      	b.n	800de22 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800de26:	f001 fbd1 	bl	800f5cc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de2e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800de30:	f001 fc02 	bl	800f638 <vPortExitCritical>

	return uxReturn;
 800de34:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800de36:	4618      	mov	r0, r3
 800de38:	3710      	adds	r7, #16
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}

0800de3e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800de3e:	b480      	push	{r7}
 800de40:	b087      	sub	sp, #28
 800de42:	af00      	add	r7, sp, #0
 800de44:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d10d      	bne.n	800de6c <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800de50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de54:	b672      	cpsid	i
 800de56:	f383 8811 	msr	BASEPRI, r3
 800de5a:	f3bf 8f6f 	isb	sy
 800de5e:	f3bf 8f4f 	dsb	sy
 800de62:	b662      	cpsie	i
 800de64:	60fb      	str	r3, [r7, #12]
}
 800de66:	bf00      	nop
 800de68:	bf00      	nop
 800de6a:	e7fd      	b.n	800de68 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de70:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800de72:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800de74:	4618      	mov	r0, r3
 800de76:	371c      	adds	r7, #28
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr

0800de80 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d10d      	bne.n	800deae <vQueueDelete+0x2e>
	__asm volatile
 800de92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de96:	b672      	cpsid	i
 800de98:	f383 8811 	msr	BASEPRI, r3
 800de9c:	f3bf 8f6f 	isb	sy
 800dea0:	f3bf 8f4f 	dsb	sy
 800dea4:	b662      	cpsie	i
 800dea6:	60bb      	str	r3, [r7, #8]
}
 800dea8:	bf00      	nop
 800deaa:	bf00      	nop
 800deac:	e7fd      	b.n	800deaa <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800deae:	68f8      	ldr	r0, [r7, #12]
 800deb0:	f000 f934 	bl	800e11c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800deba:	2b00      	cmp	r3, #0
 800debc:	d102      	bne.n	800dec4 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800debe:	68f8      	ldr	r0, [r7, #12]
 800dec0:	f001 fd80 	bl	800f9c4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800dec4:	bf00      	nop
 800dec6:	3710      	adds	r7, #16
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800decc:	b480      	push	{r7}
 800dece:	b085      	sub	sp, #20
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d006      	beq.n	800deea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f1c3 0307 	rsb	r3, r3, #7
 800dee6:	60fb      	str	r3, [r7, #12]
 800dee8:	e001      	b.n	800deee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800deea:	2300      	movs	r3, #0
 800deec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800deee:	68fb      	ldr	r3, [r7, #12]
	}
 800def0:	4618      	mov	r0, r3
 800def2:	3714      	adds	r7, #20
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b086      	sub	sp, #24
 800df00:	af00      	add	r7, sp, #0
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	60b9      	str	r1, [r7, #8]
 800df06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800df08:	2300      	movs	r3, #0
 800df0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df16:	2b00      	cmp	r3, #0
 800df18:	d10d      	bne.n	800df36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d14d      	bne.n	800dfbe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	689b      	ldr	r3, [r3, #8]
 800df26:	4618      	mov	r0, r3
 800df28:	f001 f898 	bl	800f05c <xTaskPriorityDisinherit>
 800df2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2200      	movs	r2, #0
 800df32:	609a      	str	r2, [r3, #8]
 800df34:	e043      	b.n	800dfbe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d119      	bne.n	800df70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	6858      	ldr	r0, [r3, #4]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df44:	461a      	mov	r2, r3
 800df46:	68b9      	ldr	r1, [r7, #8]
 800df48:	f010 fa97 	bl	801e47a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	685a      	ldr	r2, [r3, #4]
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df54:	441a      	add	r2, r3
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	685a      	ldr	r2, [r3, #4]
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	689b      	ldr	r3, [r3, #8]
 800df62:	429a      	cmp	r2, r3
 800df64:	d32b      	bcc.n	800dfbe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	605a      	str	r2, [r3, #4]
 800df6e:	e026      	b.n	800dfbe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	68d8      	ldr	r0, [r3, #12]
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df78:	461a      	mov	r2, r3
 800df7a:	68b9      	ldr	r1, [r7, #8]
 800df7c:	f010 fa7d 	bl	801e47a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	68da      	ldr	r2, [r3, #12]
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df88:	425b      	negs	r3, r3
 800df8a:	441a      	add	r2, r3
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	68da      	ldr	r2, [r3, #12]
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	429a      	cmp	r2, r3
 800df9a:	d207      	bcs.n	800dfac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	689a      	ldr	r2, [r3, #8]
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfa4:	425b      	negs	r3, r3
 800dfa6:	441a      	add	r2, r3
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2b02      	cmp	r3, #2
 800dfb0:	d105      	bne.n	800dfbe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d002      	beq.n	800dfbe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	3b01      	subs	r3, #1
 800dfbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	1c5a      	adds	r2, r3, #1
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dfc6:	697b      	ldr	r3, [r7, #20]
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3718      	adds	r7, #24
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d018      	beq.n	800e014 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	68da      	ldr	r2, [r3, #12]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfea:	441a      	add	r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	68da      	ldr	r2, [r3, #12]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	689b      	ldr	r3, [r3, #8]
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d303      	bcc.n	800e004 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681a      	ldr	r2, [r3, #0]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	68d9      	ldr	r1, [r3, #12]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e00c:	461a      	mov	r2, r3
 800e00e:	6838      	ldr	r0, [r7, #0]
 800e010:	f010 fa33 	bl	801e47a <memcpy>
	}
}
 800e014:	bf00      	nop
 800e016:	3708      	adds	r7, #8
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e024:	f001 fad2 	bl	800f5cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e02e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e030:	e011      	b.n	800e056 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e036:	2b00      	cmp	r3, #0
 800e038:	d012      	beq.n	800e060 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	3324      	adds	r3, #36	@ 0x24
 800e03e:	4618      	mov	r0, r3
 800e040:	f000 fda0 	bl	800eb84 <xTaskRemoveFromEventList>
 800e044:	4603      	mov	r3, r0
 800e046:	2b00      	cmp	r3, #0
 800e048:	d001      	beq.n	800e04e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e04a:	f000 fe7f 	bl	800ed4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e04e:	7bfb      	ldrb	r3, [r7, #15]
 800e050:	3b01      	subs	r3, #1
 800e052:	b2db      	uxtb	r3, r3
 800e054:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	dce9      	bgt.n	800e032 <prvUnlockQueue+0x16>
 800e05e:	e000      	b.n	800e062 <prvUnlockQueue+0x46>
					break;
 800e060:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	22ff      	movs	r2, #255	@ 0xff
 800e066:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e06a:	f001 fae5 	bl	800f638 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e06e:	f001 faad 	bl	800f5cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e078:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e07a:	e011      	b.n	800e0a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	691b      	ldr	r3, [r3, #16]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d012      	beq.n	800e0aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	3310      	adds	r3, #16
 800e088:	4618      	mov	r0, r3
 800e08a:	f000 fd7b 	bl	800eb84 <xTaskRemoveFromEventList>
 800e08e:	4603      	mov	r3, r0
 800e090:	2b00      	cmp	r3, #0
 800e092:	d001      	beq.n	800e098 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e094:	f000 fe5a 	bl	800ed4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e098:	7bbb      	ldrb	r3, [r7, #14]
 800e09a:	3b01      	subs	r3, #1
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e0a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	dce9      	bgt.n	800e07c <prvUnlockQueue+0x60>
 800e0a8:	e000      	b.n	800e0ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e0aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	22ff      	movs	r2, #255	@ 0xff
 800e0b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e0b4:	f001 fac0 	bl	800f638 <vPortExitCritical>
}
 800e0b8:	bf00      	nop
 800e0ba:	3710      	adds	r7, #16
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e0c8:	f001 fa80 	bl	800f5cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d102      	bne.n	800e0da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	60fb      	str	r3, [r7, #12]
 800e0d8:	e001      	b.n	800e0de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e0de:	f001 faab 	bl	800f638 <vPortExitCritical>

	return xReturn;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3710      	adds	r7, #16
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e0f4:	f001 fa6a 	bl	800f5cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e100:	429a      	cmp	r2, r3
 800e102:	d102      	bne.n	800e10a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e104:	2301      	movs	r3, #1
 800e106:	60fb      	str	r3, [r7, #12]
 800e108:	e001      	b.n	800e10e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e10a:	2300      	movs	r3, #0
 800e10c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e10e:	f001 fa93 	bl	800f638 <vPortExitCritical>

	return xReturn;
 800e112:	68fb      	ldr	r3, [r7, #12]
}
 800e114:	4618      	mov	r0, r3
 800e116:	3710      	adds	r7, #16
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e11c:	b480      	push	{r7}
 800e11e:	b085      	sub	sp, #20
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e124:	2300      	movs	r3, #0
 800e126:	60fb      	str	r3, [r7, #12]
 800e128:	e016      	b.n	800e158 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e12a:	4a10      	ldr	r2, [pc, #64]	@ (800e16c <vQueueUnregisterQueue+0x50>)
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	00db      	lsls	r3, r3, #3
 800e130:	4413      	add	r3, r2
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	429a      	cmp	r2, r3
 800e138:	d10b      	bne.n	800e152 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e13a:	4a0c      	ldr	r2, [pc, #48]	@ (800e16c <vQueueUnregisterQueue+0x50>)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2100      	movs	r1, #0
 800e140:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e144:	4a09      	ldr	r2, [pc, #36]	@ (800e16c <vQueueUnregisterQueue+0x50>)
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	00db      	lsls	r3, r3, #3
 800e14a:	4413      	add	r3, r2
 800e14c:	2200      	movs	r2, #0
 800e14e:	605a      	str	r2, [r3, #4]
				break;
 800e150:	e006      	b.n	800e160 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	3301      	adds	r3, #1
 800e156:	60fb      	str	r3, [r7, #12]
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	2b07      	cmp	r3, #7
 800e15c:	d9e5      	bls.n	800e12a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e15e:	bf00      	nop
 800e160:	bf00      	nop
 800e162:	3714      	adds	r7, #20
 800e164:	46bd      	mov	sp, r7
 800e166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16a:	4770      	bx	lr
 800e16c:	20005254 	.word	0x20005254

0800e170 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e170:	b580      	push	{r7, lr}
 800e172:	b08e      	sub	sp, #56	@ 0x38
 800e174:	af04      	add	r7, sp, #16
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	607a      	str	r2, [r7, #4]
 800e17c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e17e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e180:	2b00      	cmp	r3, #0
 800e182:	d10d      	bne.n	800e1a0 <xTaskCreateStatic+0x30>
	__asm volatile
 800e184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e188:	b672      	cpsid	i
 800e18a:	f383 8811 	msr	BASEPRI, r3
 800e18e:	f3bf 8f6f 	isb	sy
 800e192:	f3bf 8f4f 	dsb	sy
 800e196:	b662      	cpsie	i
 800e198:	623b      	str	r3, [r7, #32]
}
 800e19a:	bf00      	nop
 800e19c:	bf00      	nop
 800e19e:	e7fd      	b.n	800e19c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800e1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d10d      	bne.n	800e1c2 <xTaskCreateStatic+0x52>
	__asm volatile
 800e1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1aa:	b672      	cpsid	i
 800e1ac:	f383 8811 	msr	BASEPRI, r3
 800e1b0:	f3bf 8f6f 	isb	sy
 800e1b4:	f3bf 8f4f 	dsb	sy
 800e1b8:	b662      	cpsie	i
 800e1ba:	61fb      	str	r3, [r7, #28]
}
 800e1bc:	bf00      	nop
 800e1be:	bf00      	nop
 800e1c0:	e7fd      	b.n	800e1be <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e1c2:	23a0      	movs	r3, #160	@ 0xa0
 800e1c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	2ba0      	cmp	r3, #160	@ 0xa0
 800e1ca:	d00d      	beq.n	800e1e8 <xTaskCreateStatic+0x78>
	__asm volatile
 800e1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1d0:	b672      	cpsid	i
 800e1d2:	f383 8811 	msr	BASEPRI, r3
 800e1d6:	f3bf 8f6f 	isb	sy
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	b662      	cpsie	i
 800e1e0:	61bb      	str	r3, [r7, #24]
}
 800e1e2:	bf00      	nop
 800e1e4:	bf00      	nop
 800e1e6:	e7fd      	b.n	800e1e4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e1e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d01e      	beq.n	800e22e <xTaskCreateStatic+0xbe>
 800e1f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d01b      	beq.n	800e22e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e1fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e202:	2202      	movs	r2, #2
 800e204:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e208:	2300      	movs	r3, #0
 800e20a:	9303      	str	r3, [sp, #12]
 800e20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e20e:	9302      	str	r3, [sp, #8]
 800e210:	f107 0314 	add.w	r3, r7, #20
 800e214:	9301      	str	r3, [sp, #4]
 800e216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e218:	9300      	str	r3, [sp, #0]
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	68b9      	ldr	r1, [r7, #8]
 800e220:	68f8      	ldr	r0, [r7, #12]
 800e222:	f000 f851 	bl	800e2c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e226:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e228:	f000 f8f0 	bl	800e40c <prvAddNewTaskToReadyList>
 800e22c:	e001      	b.n	800e232 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800e22e:	2300      	movs	r3, #0
 800e230:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e232:	697b      	ldr	r3, [r7, #20]
	}
 800e234:	4618      	mov	r0, r3
 800e236:	3728      	adds	r7, #40	@ 0x28
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b08c      	sub	sp, #48	@ 0x30
 800e240:	af04      	add	r7, sp, #16
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	603b      	str	r3, [r7, #0]
 800e248:	4613      	mov	r3, r2
 800e24a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e24c:	88fb      	ldrh	r3, [r7, #6]
 800e24e:	009b      	lsls	r3, r3, #2
 800e250:	4618      	mov	r0, r3
 800e252:	f001 fae9 	bl	800f828 <pvPortMalloc>
 800e256:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d00e      	beq.n	800e27c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e25e:	20a0      	movs	r0, #160	@ 0xa0
 800e260:	f001 fae2 	bl	800f828 <pvPortMalloc>
 800e264:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e266:	69fb      	ldr	r3, [r7, #28]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d003      	beq.n	800e274 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	697a      	ldr	r2, [r7, #20]
 800e270:	631a      	str	r2, [r3, #48]	@ 0x30
 800e272:	e005      	b.n	800e280 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e274:	6978      	ldr	r0, [r7, #20]
 800e276:	f001 fba5 	bl	800f9c4 <vPortFree>
 800e27a:	e001      	b.n	800e280 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e27c:	2300      	movs	r3, #0
 800e27e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d017      	beq.n	800e2b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e286:	69fb      	ldr	r3, [r7, #28]
 800e288:	2200      	movs	r2, #0
 800e28a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e28e:	88fa      	ldrh	r2, [r7, #6]
 800e290:	2300      	movs	r3, #0
 800e292:	9303      	str	r3, [sp, #12]
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	9302      	str	r3, [sp, #8]
 800e298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e29a:	9301      	str	r3, [sp, #4]
 800e29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e29e:	9300      	str	r3, [sp, #0]
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	68b9      	ldr	r1, [r7, #8]
 800e2a4:	68f8      	ldr	r0, [r7, #12]
 800e2a6:	f000 f80f 	bl	800e2c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e2aa:	69f8      	ldr	r0, [r7, #28]
 800e2ac:	f000 f8ae 	bl	800e40c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	61bb      	str	r3, [r7, #24]
 800e2b4:	e002      	b.n	800e2bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e2bc:	69bb      	ldr	r3, [r7, #24]
	}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3720      	adds	r7, #32
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
	...

0800e2c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b088      	sub	sp, #32
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	60f8      	str	r0, [r7, #12]
 800e2d0:	60b9      	str	r1, [r7, #8]
 800e2d2:	607a      	str	r2, [r7, #4]
 800e2d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e2da:	6879      	ldr	r1, [r7, #4]
 800e2dc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e2e0:	440b      	add	r3, r1
 800e2e2:	009b      	lsls	r3, r3, #2
 800e2e4:	4413      	add	r3, r2
 800e2e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e2e8:	69bb      	ldr	r3, [r7, #24]
 800e2ea:	f023 0307 	bic.w	r3, r3, #7
 800e2ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e2f0:	69bb      	ldr	r3, [r7, #24]
 800e2f2:	f003 0307 	and.w	r3, r3, #7
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d00d      	beq.n	800e316 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800e2fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2fe:	b672      	cpsid	i
 800e300:	f383 8811 	msr	BASEPRI, r3
 800e304:	f3bf 8f6f 	isb	sy
 800e308:	f3bf 8f4f 	dsb	sy
 800e30c:	b662      	cpsie	i
 800e30e:	617b      	str	r3, [r7, #20]
}
 800e310:	bf00      	nop
 800e312:	bf00      	nop
 800e314:	e7fd      	b.n	800e312 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d01f      	beq.n	800e35c <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e31c:	2300      	movs	r3, #0
 800e31e:	61fb      	str	r3, [r7, #28]
 800e320:	e012      	b.n	800e348 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e322:	68ba      	ldr	r2, [r7, #8]
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	4413      	add	r3, r2
 800e328:	7819      	ldrb	r1, [r3, #0]
 800e32a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	4413      	add	r3, r2
 800e330:	3334      	adds	r3, #52	@ 0x34
 800e332:	460a      	mov	r2, r1
 800e334:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e336:	68ba      	ldr	r2, [r7, #8]
 800e338:	69fb      	ldr	r3, [r7, #28]
 800e33a:	4413      	add	r3, r2
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d006      	beq.n	800e350 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e342:	69fb      	ldr	r3, [r7, #28]
 800e344:	3301      	adds	r3, #1
 800e346:	61fb      	str	r3, [r7, #28]
 800e348:	69fb      	ldr	r3, [r7, #28]
 800e34a:	2b0f      	cmp	r3, #15
 800e34c:	d9e9      	bls.n	800e322 <prvInitialiseNewTask+0x5a>
 800e34e:	e000      	b.n	800e352 <prvInitialiseNewTask+0x8a>
			{
				break;
 800e350:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e354:	2200      	movs	r2, #0
 800e356:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e35a:	e003      	b.n	800e364 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e35e:	2200      	movs	r2, #0
 800e360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e366:	2b06      	cmp	r3, #6
 800e368:	d901      	bls.n	800e36e <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e36a:	2306      	movs	r3, #6
 800e36c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e372:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e376:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e378:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e37c:	2200      	movs	r2, #0
 800e37e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e382:	3304      	adds	r3, #4
 800e384:	4618      	mov	r0, r3
 800e386:	f7fe fe34 	bl	800cff2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e38c:	3318      	adds	r3, #24
 800e38e:	4618      	mov	r0, r3
 800e390:	f7fe fe2f 	bl	800cff2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e398:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e39c:	f1c3 0207 	rsb	r2, r3, #7
 800e3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3bc:	334c      	adds	r3, #76	@ 0x4c
 800e3be:	224c      	movs	r2, #76	@ 0x4c
 800e3c0:	2100      	movs	r1, #0
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f00f ff63 	bl	801e28e <memset>
 800e3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ca:	4a0d      	ldr	r2, [pc, #52]	@ (800e400 <prvInitialiseNewTask+0x138>)
 800e3cc:	651a      	str	r2, [r3, #80]	@ 0x50
 800e3ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3d0:	4a0c      	ldr	r2, [pc, #48]	@ (800e404 <prvInitialiseNewTask+0x13c>)
 800e3d2:	655a      	str	r2, [r3, #84]	@ 0x54
 800e3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3d6:	4a0c      	ldr	r2, [pc, #48]	@ (800e408 <prvInitialiseNewTask+0x140>)
 800e3d8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e3da:	683a      	ldr	r2, [r7, #0]
 800e3dc:	68f9      	ldr	r1, [r7, #12]
 800e3de:	69b8      	ldr	r0, [r7, #24]
 800e3e0:	f000 ffe2 	bl	800f3a8 <pxPortInitialiseStack>
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d002      	beq.n	800e3f6 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3f6:	bf00      	nop
 800e3f8:	3720      	adds	r7, #32
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
 800e3fe:	bf00      	nop
 800e400:	20010014 	.word	0x20010014
 800e404:	2001007c 	.word	0x2001007c
 800e408:	200100e4 	.word	0x200100e4

0800e40c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e414:	f001 f8da 	bl	800f5cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e418:	4b2a      	ldr	r3, [pc, #168]	@ (800e4c4 <prvAddNewTaskToReadyList+0xb8>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	3301      	adds	r3, #1
 800e41e:	4a29      	ldr	r2, [pc, #164]	@ (800e4c4 <prvAddNewTaskToReadyList+0xb8>)
 800e420:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e422:	4b29      	ldr	r3, [pc, #164]	@ (800e4c8 <prvAddNewTaskToReadyList+0xbc>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d109      	bne.n	800e43e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e42a:	4a27      	ldr	r2, [pc, #156]	@ (800e4c8 <prvAddNewTaskToReadyList+0xbc>)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e430:	4b24      	ldr	r3, [pc, #144]	@ (800e4c4 <prvAddNewTaskToReadyList+0xb8>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	2b01      	cmp	r3, #1
 800e436:	d110      	bne.n	800e45a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e438:	f000 fcac 	bl	800ed94 <prvInitialiseTaskLists>
 800e43c:	e00d      	b.n	800e45a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e43e:	4b23      	ldr	r3, [pc, #140]	@ (800e4cc <prvAddNewTaskToReadyList+0xc0>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d109      	bne.n	800e45a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e446:	4b20      	ldr	r3, [pc, #128]	@ (800e4c8 <prvAddNewTaskToReadyList+0xbc>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e450:	429a      	cmp	r2, r3
 800e452:	d802      	bhi.n	800e45a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e454:	4a1c      	ldr	r2, [pc, #112]	@ (800e4c8 <prvAddNewTaskToReadyList+0xbc>)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e45a:	4b1d      	ldr	r3, [pc, #116]	@ (800e4d0 <prvAddNewTaskToReadyList+0xc4>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	3301      	adds	r3, #1
 800e460:	4a1b      	ldr	r2, [pc, #108]	@ (800e4d0 <prvAddNewTaskToReadyList+0xc4>)
 800e462:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e468:	2201      	movs	r2, #1
 800e46a:	409a      	lsls	r2, r3
 800e46c:	4b19      	ldr	r3, [pc, #100]	@ (800e4d4 <prvAddNewTaskToReadyList+0xc8>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4313      	orrs	r3, r2
 800e472:	4a18      	ldr	r2, [pc, #96]	@ (800e4d4 <prvAddNewTaskToReadyList+0xc8>)
 800e474:	6013      	str	r3, [r2, #0]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e47a:	4613      	mov	r3, r2
 800e47c:	009b      	lsls	r3, r3, #2
 800e47e:	4413      	add	r3, r2
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	4a15      	ldr	r2, [pc, #84]	@ (800e4d8 <prvAddNewTaskToReadyList+0xcc>)
 800e484:	441a      	add	r2, r3
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	3304      	adds	r3, #4
 800e48a:	4619      	mov	r1, r3
 800e48c:	4610      	mov	r0, r2
 800e48e:	f7fe fdbd 	bl	800d00c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e492:	f001 f8d1 	bl	800f638 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e496:	4b0d      	ldr	r3, [pc, #52]	@ (800e4cc <prvAddNewTaskToReadyList+0xc0>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d00e      	beq.n	800e4bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e49e:	4b0a      	ldr	r3, [pc, #40]	@ (800e4c8 <prvAddNewTaskToReadyList+0xbc>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d207      	bcs.n	800e4bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e4ac:	4b0b      	ldr	r3, [pc, #44]	@ (800e4dc <prvAddNewTaskToReadyList+0xd0>)
 800e4ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4b2:	601a      	str	r2, [r3, #0]
 800e4b4:	f3bf 8f4f 	dsb	sy
 800e4b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4bc:	bf00      	nop
 800e4be:	3708      	adds	r7, #8
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	20005394 	.word	0x20005394
 800e4c8:	20005294 	.word	0x20005294
 800e4cc:	200053a0 	.word	0x200053a0
 800e4d0:	200053b0 	.word	0x200053b0
 800e4d4:	2000539c 	.word	0x2000539c
 800e4d8:	20005298 	.word	0x20005298
 800e4dc:	e000ed04 	.word	0xe000ed04

0800e4e0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b084      	sub	sp, #16
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e4e8:	f001 f870 	bl	800f5cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d102      	bne.n	800e4f8 <vTaskDelete+0x18>
 800e4f2:	4b3a      	ldr	r3, [pc, #232]	@ (800e5dc <vTaskDelete+0xfc>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	e000      	b.n	800e4fa <vTaskDelete+0x1a>
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	3304      	adds	r3, #4
 800e500:	4618      	mov	r0, r3
 800e502:	f7fe fde0 	bl	800d0c6 <uxListRemove>
 800e506:	4603      	mov	r3, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d115      	bne.n	800e538 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e510:	4933      	ldr	r1, [pc, #204]	@ (800e5e0 <vTaskDelete+0x100>)
 800e512:	4613      	mov	r3, r2
 800e514:	009b      	lsls	r3, r3, #2
 800e516:	4413      	add	r3, r2
 800e518:	009b      	lsls	r3, r3, #2
 800e51a:	440b      	add	r3, r1
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d10a      	bne.n	800e538 <vTaskDelete+0x58>
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e526:	2201      	movs	r2, #1
 800e528:	fa02 f303 	lsl.w	r3, r2, r3
 800e52c:	43da      	mvns	r2, r3
 800e52e:	4b2d      	ldr	r3, [pc, #180]	@ (800e5e4 <vTaskDelete+0x104>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	4013      	ands	r3, r2
 800e534:	4a2b      	ldr	r2, [pc, #172]	@ (800e5e4 <vTaskDelete+0x104>)
 800e536:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d004      	beq.n	800e54a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	3318      	adds	r3, #24
 800e544:	4618      	mov	r0, r3
 800e546:	f7fe fdbe 	bl	800d0c6 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800e54a:	4b27      	ldr	r3, [pc, #156]	@ (800e5e8 <vTaskDelete+0x108>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	3301      	adds	r3, #1
 800e550:	4a25      	ldr	r2, [pc, #148]	@ (800e5e8 <vTaskDelete+0x108>)
 800e552:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800e554:	4b21      	ldr	r3, [pc, #132]	@ (800e5dc <vTaskDelete+0xfc>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	68fa      	ldr	r2, [r7, #12]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d10b      	bne.n	800e576 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	3304      	adds	r3, #4
 800e562:	4619      	mov	r1, r3
 800e564:	4821      	ldr	r0, [pc, #132]	@ (800e5ec <vTaskDelete+0x10c>)
 800e566:	f7fe fd51 	bl	800d00c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800e56a:	4b21      	ldr	r3, [pc, #132]	@ (800e5f0 <vTaskDelete+0x110>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	3301      	adds	r3, #1
 800e570:	4a1f      	ldr	r2, [pc, #124]	@ (800e5f0 <vTaskDelete+0x110>)
 800e572:	6013      	str	r3, [r2, #0]
 800e574:	e009      	b.n	800e58a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800e576:	4b1f      	ldr	r3, [pc, #124]	@ (800e5f4 <vTaskDelete+0x114>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	3b01      	subs	r3, #1
 800e57c:	4a1d      	ldr	r2, [pc, #116]	@ (800e5f4 <vTaskDelete+0x114>)
 800e57e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800e580:	68f8      	ldr	r0, [r7, #12]
 800e582:	f000 fc75 	bl	800ee70 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800e586:	f000 fcab 	bl	800eee0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800e58a:	f001 f855 	bl	800f638 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800e58e:	4b1a      	ldr	r3, [pc, #104]	@ (800e5f8 <vTaskDelete+0x118>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d01e      	beq.n	800e5d4 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 800e596:	4b11      	ldr	r3, [pc, #68]	@ (800e5dc <vTaskDelete+0xfc>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	68fa      	ldr	r2, [r7, #12]
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d119      	bne.n	800e5d4 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800e5a0:	4b16      	ldr	r3, [pc, #88]	@ (800e5fc <vTaskDelete+0x11c>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d00d      	beq.n	800e5c4 <vTaskDelete+0xe4>
	__asm volatile
 800e5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ac:	b672      	cpsid	i
 800e5ae:	f383 8811 	msr	BASEPRI, r3
 800e5b2:	f3bf 8f6f 	isb	sy
 800e5b6:	f3bf 8f4f 	dsb	sy
 800e5ba:	b662      	cpsie	i
 800e5bc:	60bb      	str	r3, [r7, #8]
}
 800e5be:	bf00      	nop
 800e5c0:	bf00      	nop
 800e5c2:	e7fd      	b.n	800e5c0 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800e5c4:	4b0e      	ldr	r3, [pc, #56]	@ (800e600 <vTaskDelete+0x120>)
 800e5c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5ca:	601a      	str	r2, [r3, #0]
 800e5cc:	f3bf 8f4f 	dsb	sy
 800e5d0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e5d4:	bf00      	nop
 800e5d6:	3710      	adds	r7, #16
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}
 800e5dc:	20005294 	.word	0x20005294
 800e5e0:	20005298 	.word	0x20005298
 800e5e4:	2000539c 	.word	0x2000539c
 800e5e8:	200053b0 	.word	0x200053b0
 800e5ec:	20005368 	.word	0x20005368
 800e5f0:	2000537c 	.word	0x2000537c
 800e5f4:	20005394 	.word	0x20005394
 800e5f8:	200053a0 	.word	0x200053a0
 800e5fc:	200053bc 	.word	0x200053bc
 800e600:	e000ed04 	.word	0xe000ed04

0800e604 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e60c:	2300      	movs	r3, #0
 800e60e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d01a      	beq.n	800e64c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e616:	4b15      	ldr	r3, [pc, #84]	@ (800e66c <vTaskDelay+0x68>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d00d      	beq.n	800e63a <vTaskDelay+0x36>
	__asm volatile
 800e61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e622:	b672      	cpsid	i
 800e624:	f383 8811 	msr	BASEPRI, r3
 800e628:	f3bf 8f6f 	isb	sy
 800e62c:	f3bf 8f4f 	dsb	sy
 800e630:	b662      	cpsie	i
 800e632:	60bb      	str	r3, [r7, #8]
}
 800e634:	bf00      	nop
 800e636:	bf00      	nop
 800e638:	e7fd      	b.n	800e636 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800e63a:	f000 f889 	bl	800e750 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e63e:	2100      	movs	r1, #0
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f000 fe4b 	bl	800f2dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e646:	f000 f891 	bl	800e76c <xTaskResumeAll>
 800e64a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d107      	bne.n	800e662 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800e652:	4b07      	ldr	r3, [pc, #28]	@ (800e670 <vTaskDelay+0x6c>)
 800e654:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e658:	601a      	str	r2, [r3, #0]
 800e65a:	f3bf 8f4f 	dsb	sy
 800e65e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e662:	bf00      	nop
 800e664:	3710      	adds	r7, #16
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	bf00      	nop
 800e66c:	200053bc 	.word	0x200053bc
 800e670:	e000ed04 	.word	0xe000ed04

0800e674 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b08a      	sub	sp, #40	@ 0x28
 800e678:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e67a:	2300      	movs	r3, #0
 800e67c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e67e:	2300      	movs	r3, #0
 800e680:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e682:	463a      	mov	r2, r7
 800e684:	1d39      	adds	r1, r7, #4
 800e686:	f107 0308 	add.w	r3, r7, #8
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7f2 fe38 	bl	8001300 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e690:	6839      	ldr	r1, [r7, #0]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	68ba      	ldr	r2, [r7, #8]
 800e696:	9202      	str	r2, [sp, #8]
 800e698:	9301      	str	r3, [sp, #4]
 800e69a:	2300      	movs	r3, #0
 800e69c:	9300      	str	r3, [sp, #0]
 800e69e:	2300      	movs	r3, #0
 800e6a0:	460a      	mov	r2, r1
 800e6a2:	4923      	ldr	r1, [pc, #140]	@ (800e730 <vTaskStartScheduler+0xbc>)
 800e6a4:	4823      	ldr	r0, [pc, #140]	@ (800e734 <vTaskStartScheduler+0xc0>)
 800e6a6:	f7ff fd63 	bl	800e170 <xTaskCreateStatic>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	4a22      	ldr	r2, [pc, #136]	@ (800e738 <vTaskStartScheduler+0xc4>)
 800e6ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e6b0:	4b21      	ldr	r3, [pc, #132]	@ (800e738 <vTaskStartScheduler+0xc4>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d002      	beq.n	800e6be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	617b      	str	r3, [r7, #20]
 800e6bc:	e001      	b.n	800e6c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	d11d      	bne.n	800e704 <vTaskStartScheduler+0x90>
	__asm volatile
 800e6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6cc:	b672      	cpsid	i
 800e6ce:	f383 8811 	msr	BASEPRI, r3
 800e6d2:	f3bf 8f6f 	isb	sy
 800e6d6:	f3bf 8f4f 	dsb	sy
 800e6da:	b662      	cpsie	i
 800e6dc:	613b      	str	r3, [r7, #16]
}
 800e6de:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e6e0:	4b16      	ldr	r3, [pc, #88]	@ (800e73c <vTaskStartScheduler+0xc8>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	334c      	adds	r3, #76	@ 0x4c
 800e6e6:	4a16      	ldr	r2, [pc, #88]	@ (800e740 <vTaskStartScheduler+0xcc>)
 800e6e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e6ea:	4b16      	ldr	r3, [pc, #88]	@ (800e744 <vTaskStartScheduler+0xd0>)
 800e6ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e6f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e6f2:	4b15      	ldr	r3, [pc, #84]	@ (800e748 <vTaskStartScheduler+0xd4>)
 800e6f4:	2201      	movs	r2, #1
 800e6f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e6f8:	4b14      	ldr	r3, [pc, #80]	@ (800e74c <vTaskStartScheduler+0xd8>)
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e6fe:	f000 fee7 	bl	800f4d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e702:	e011      	b.n	800e728 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e70a:	d10d      	bne.n	800e728 <vTaskStartScheduler+0xb4>
	__asm volatile
 800e70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e710:	b672      	cpsid	i
 800e712:	f383 8811 	msr	BASEPRI, r3
 800e716:	f3bf 8f6f 	isb	sy
 800e71a:	f3bf 8f4f 	dsb	sy
 800e71e:	b662      	cpsie	i
 800e720:	60fb      	str	r3, [r7, #12]
}
 800e722:	bf00      	nop
 800e724:	bf00      	nop
 800e726:	e7fd      	b.n	800e724 <vTaskStartScheduler+0xb0>
}
 800e728:	bf00      	nop
 800e72a:	3718      	adds	r7, #24
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	0801f518 	.word	0x0801f518
 800e734:	0800ed65 	.word	0x0800ed65
 800e738:	200053b8 	.word	0x200053b8
 800e73c:	20005294 	.word	0x20005294
 800e740:	20000144 	.word	0x20000144
 800e744:	200053b4 	.word	0x200053b4
 800e748:	200053a0 	.word	0x200053a0
 800e74c:	20005398 	.word	0x20005398

0800e750 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e750:	b480      	push	{r7}
 800e752:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e754:	4b04      	ldr	r3, [pc, #16]	@ (800e768 <vTaskSuspendAll+0x18>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	3301      	adds	r3, #1
 800e75a:	4a03      	ldr	r2, [pc, #12]	@ (800e768 <vTaskSuspendAll+0x18>)
 800e75c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e75e:	bf00      	nop
 800e760:	46bd      	mov	sp, r7
 800e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e766:	4770      	bx	lr
 800e768:	200053bc 	.word	0x200053bc

0800e76c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e772:	2300      	movs	r3, #0
 800e774:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e776:	2300      	movs	r3, #0
 800e778:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e77a:	4b43      	ldr	r3, [pc, #268]	@ (800e888 <xTaskResumeAll+0x11c>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d10d      	bne.n	800e79e <xTaskResumeAll+0x32>
	__asm volatile
 800e782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e786:	b672      	cpsid	i
 800e788:	f383 8811 	msr	BASEPRI, r3
 800e78c:	f3bf 8f6f 	isb	sy
 800e790:	f3bf 8f4f 	dsb	sy
 800e794:	b662      	cpsie	i
 800e796:	603b      	str	r3, [r7, #0]
}
 800e798:	bf00      	nop
 800e79a:	bf00      	nop
 800e79c:	e7fd      	b.n	800e79a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e79e:	f000 ff15 	bl	800f5cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e7a2:	4b39      	ldr	r3, [pc, #228]	@ (800e888 <xTaskResumeAll+0x11c>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	3b01      	subs	r3, #1
 800e7a8:	4a37      	ldr	r2, [pc, #220]	@ (800e888 <xTaskResumeAll+0x11c>)
 800e7aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7ac:	4b36      	ldr	r3, [pc, #216]	@ (800e888 <xTaskResumeAll+0x11c>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d161      	bne.n	800e878 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e7b4:	4b35      	ldr	r3, [pc, #212]	@ (800e88c <xTaskResumeAll+0x120>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d05d      	beq.n	800e878 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e7bc:	e02e      	b.n	800e81c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7be:	4b34      	ldr	r3, [pc, #208]	@ (800e890 <xTaskResumeAll+0x124>)
 800e7c0:	68db      	ldr	r3, [r3, #12]
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	3318      	adds	r3, #24
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7fe fc7b 	bl	800d0c6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	3304      	adds	r3, #4
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7fe fc76 	bl	800d0c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7de:	2201      	movs	r2, #1
 800e7e0:	409a      	lsls	r2, r3
 800e7e2:	4b2c      	ldr	r3, [pc, #176]	@ (800e894 <xTaskResumeAll+0x128>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	4313      	orrs	r3, r2
 800e7e8:	4a2a      	ldr	r2, [pc, #168]	@ (800e894 <xTaskResumeAll+0x128>)
 800e7ea:	6013      	str	r3, [r2, #0]
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7f0:	4613      	mov	r3, r2
 800e7f2:	009b      	lsls	r3, r3, #2
 800e7f4:	4413      	add	r3, r2
 800e7f6:	009b      	lsls	r3, r3, #2
 800e7f8:	4a27      	ldr	r2, [pc, #156]	@ (800e898 <xTaskResumeAll+0x12c>)
 800e7fa:	441a      	add	r2, r3
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	3304      	adds	r3, #4
 800e800:	4619      	mov	r1, r3
 800e802:	4610      	mov	r0, r2
 800e804:	f7fe fc02 	bl	800d00c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e80c:	4b23      	ldr	r3, [pc, #140]	@ (800e89c <xTaskResumeAll+0x130>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e812:	429a      	cmp	r2, r3
 800e814:	d302      	bcc.n	800e81c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800e816:	4b22      	ldr	r3, [pc, #136]	@ (800e8a0 <xTaskResumeAll+0x134>)
 800e818:	2201      	movs	r2, #1
 800e81a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e81c:	4b1c      	ldr	r3, [pc, #112]	@ (800e890 <xTaskResumeAll+0x124>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d1cc      	bne.n	800e7be <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d001      	beq.n	800e82e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e82a:	f000 fb59 	bl	800eee0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e82e:	4b1d      	ldr	r3, [pc, #116]	@ (800e8a4 <xTaskResumeAll+0x138>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d010      	beq.n	800e85c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e83a:	f000 f859 	bl	800e8f0 <xTaskIncrementTick>
 800e83e:	4603      	mov	r3, r0
 800e840:	2b00      	cmp	r3, #0
 800e842:	d002      	beq.n	800e84a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800e844:	4b16      	ldr	r3, [pc, #88]	@ (800e8a0 <xTaskResumeAll+0x134>)
 800e846:	2201      	movs	r2, #1
 800e848:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	3b01      	subs	r3, #1
 800e84e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d1f1      	bne.n	800e83a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800e856:	4b13      	ldr	r3, [pc, #76]	@ (800e8a4 <xTaskResumeAll+0x138>)
 800e858:	2200      	movs	r2, #0
 800e85a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e85c:	4b10      	ldr	r3, [pc, #64]	@ (800e8a0 <xTaskResumeAll+0x134>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d009      	beq.n	800e878 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e864:	2301      	movs	r3, #1
 800e866:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e868:	4b0f      	ldr	r3, [pc, #60]	@ (800e8a8 <xTaskResumeAll+0x13c>)
 800e86a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e86e:	601a      	str	r2, [r3, #0]
 800e870:	f3bf 8f4f 	dsb	sy
 800e874:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e878:	f000 fede 	bl	800f638 <vPortExitCritical>

	return xAlreadyYielded;
 800e87c:	68bb      	ldr	r3, [r7, #8]
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3710      	adds	r7, #16
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
 800e886:	bf00      	nop
 800e888:	200053bc 	.word	0x200053bc
 800e88c:	20005394 	.word	0x20005394
 800e890:	20005354 	.word	0x20005354
 800e894:	2000539c 	.word	0x2000539c
 800e898:	20005298 	.word	0x20005298
 800e89c:	20005294 	.word	0x20005294
 800e8a0:	200053a8 	.word	0x200053a8
 800e8a4:	200053a4 	.word	0x200053a4
 800e8a8:	e000ed04 	.word	0xe000ed04

0800e8ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b083      	sub	sp, #12
 800e8b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e8b2:	4b05      	ldr	r3, [pc, #20]	@ (800e8c8 <xTaskGetTickCount+0x1c>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e8b8:	687b      	ldr	r3, [r7, #4]
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	370c      	adds	r7, #12
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c4:	4770      	bx	lr
 800e8c6:	bf00      	nop
 800e8c8:	20005398 	.word	0x20005398

0800e8cc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e8d2:	f000 ff63 	bl	800f79c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e8da:	4b04      	ldr	r3, [pc, #16]	@ (800e8ec <xTaskGetTickCountFromISR+0x20>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e8e0:	683b      	ldr	r3, [r7, #0]
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3708      	adds	r7, #8
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	20005398 	.word	0x20005398

0800e8f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b086      	sub	sp, #24
 800e8f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8fa:	4b50      	ldr	r3, [pc, #320]	@ (800ea3c <xTaskIncrementTick+0x14c>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	f040 808b 	bne.w	800ea1a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e904:	4b4e      	ldr	r3, [pc, #312]	@ (800ea40 <xTaskIncrementTick+0x150>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	3301      	adds	r3, #1
 800e90a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e90c:	4a4c      	ldr	r2, [pc, #304]	@ (800ea40 <xTaskIncrementTick+0x150>)
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d123      	bne.n	800e960 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800e918:	4b4a      	ldr	r3, [pc, #296]	@ (800ea44 <xTaskIncrementTick+0x154>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d00d      	beq.n	800e93e <xTaskIncrementTick+0x4e>
	__asm volatile
 800e922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e926:	b672      	cpsid	i
 800e928:	f383 8811 	msr	BASEPRI, r3
 800e92c:	f3bf 8f6f 	isb	sy
 800e930:	f3bf 8f4f 	dsb	sy
 800e934:	b662      	cpsie	i
 800e936:	603b      	str	r3, [r7, #0]
}
 800e938:	bf00      	nop
 800e93a:	bf00      	nop
 800e93c:	e7fd      	b.n	800e93a <xTaskIncrementTick+0x4a>
 800e93e:	4b41      	ldr	r3, [pc, #260]	@ (800ea44 <xTaskIncrementTick+0x154>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	60fb      	str	r3, [r7, #12]
 800e944:	4b40      	ldr	r3, [pc, #256]	@ (800ea48 <xTaskIncrementTick+0x158>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	4a3e      	ldr	r2, [pc, #248]	@ (800ea44 <xTaskIncrementTick+0x154>)
 800e94a:	6013      	str	r3, [r2, #0]
 800e94c:	4a3e      	ldr	r2, [pc, #248]	@ (800ea48 <xTaskIncrementTick+0x158>)
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	6013      	str	r3, [r2, #0]
 800e952:	4b3e      	ldr	r3, [pc, #248]	@ (800ea4c <xTaskIncrementTick+0x15c>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	3301      	adds	r3, #1
 800e958:	4a3c      	ldr	r2, [pc, #240]	@ (800ea4c <xTaskIncrementTick+0x15c>)
 800e95a:	6013      	str	r3, [r2, #0]
 800e95c:	f000 fac0 	bl	800eee0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e960:	4b3b      	ldr	r3, [pc, #236]	@ (800ea50 <xTaskIncrementTick+0x160>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	693a      	ldr	r2, [r7, #16]
 800e966:	429a      	cmp	r2, r3
 800e968:	d348      	bcc.n	800e9fc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e96a:	4b36      	ldr	r3, [pc, #216]	@ (800ea44 <xTaskIncrementTick+0x154>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d104      	bne.n	800e97e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e974:	4b36      	ldr	r3, [pc, #216]	@ (800ea50 <xTaskIncrementTick+0x160>)
 800e976:	f04f 32ff 	mov.w	r2, #4294967295
 800e97a:	601a      	str	r2, [r3, #0]
					break;
 800e97c:	e03e      	b.n	800e9fc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e97e:	4b31      	ldr	r3, [pc, #196]	@ (800ea44 <xTaskIncrementTick+0x154>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	68db      	ldr	r3, [r3, #12]
 800e984:	68db      	ldr	r3, [r3, #12]
 800e986:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	685b      	ldr	r3, [r3, #4]
 800e98c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e98e:	693a      	ldr	r2, [r7, #16]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	429a      	cmp	r2, r3
 800e994:	d203      	bcs.n	800e99e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e996:	4a2e      	ldr	r2, [pc, #184]	@ (800ea50 <xTaskIncrementTick+0x160>)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e99c:	e02e      	b.n	800e9fc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	3304      	adds	r3, #4
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f7fe fb8f 	bl	800d0c6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d004      	beq.n	800e9ba <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	3318      	adds	r3, #24
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7fe fb86 	bl	800d0c6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9be:	2201      	movs	r2, #1
 800e9c0:	409a      	lsls	r2, r3
 800e9c2:	4b24      	ldr	r3, [pc, #144]	@ (800ea54 <xTaskIncrementTick+0x164>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	4a22      	ldr	r2, [pc, #136]	@ (800ea54 <xTaskIncrementTick+0x164>)
 800e9ca:	6013      	str	r3, [r2, #0]
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9d0:	4613      	mov	r3, r2
 800e9d2:	009b      	lsls	r3, r3, #2
 800e9d4:	4413      	add	r3, r2
 800e9d6:	009b      	lsls	r3, r3, #2
 800e9d8:	4a1f      	ldr	r2, [pc, #124]	@ (800ea58 <xTaskIncrementTick+0x168>)
 800e9da:	441a      	add	r2, r3
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	3304      	adds	r3, #4
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	4610      	mov	r0, r2
 800e9e4:	f7fe fb12 	bl	800d00c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9ec:	4b1b      	ldr	r3, [pc, #108]	@ (800ea5c <xTaskIncrementTick+0x16c>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d3b9      	bcc.n	800e96a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e9fa:	e7b6      	b.n	800e96a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e9fc:	4b17      	ldr	r3, [pc, #92]	@ (800ea5c <xTaskIncrementTick+0x16c>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea02:	4915      	ldr	r1, [pc, #84]	@ (800ea58 <xTaskIncrementTick+0x168>)
 800ea04:	4613      	mov	r3, r2
 800ea06:	009b      	lsls	r3, r3, #2
 800ea08:	4413      	add	r3, r2
 800ea0a:	009b      	lsls	r3, r3, #2
 800ea0c:	440b      	add	r3, r1
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	d907      	bls.n	800ea24 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800ea14:	2301      	movs	r3, #1
 800ea16:	617b      	str	r3, [r7, #20]
 800ea18:	e004      	b.n	800ea24 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ea1a:	4b11      	ldr	r3, [pc, #68]	@ (800ea60 <xTaskIncrementTick+0x170>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	3301      	adds	r3, #1
 800ea20:	4a0f      	ldr	r2, [pc, #60]	@ (800ea60 <xTaskIncrementTick+0x170>)
 800ea22:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ea24:	4b0f      	ldr	r3, [pc, #60]	@ (800ea64 <xTaskIncrementTick+0x174>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d001      	beq.n	800ea30 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ea30:	697b      	ldr	r3, [r7, #20]
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3718      	adds	r7, #24
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}
 800ea3a:	bf00      	nop
 800ea3c:	200053bc 	.word	0x200053bc
 800ea40:	20005398 	.word	0x20005398
 800ea44:	2000534c 	.word	0x2000534c
 800ea48:	20005350 	.word	0x20005350
 800ea4c:	200053ac 	.word	0x200053ac
 800ea50:	200053b4 	.word	0x200053b4
 800ea54:	2000539c 	.word	0x2000539c
 800ea58:	20005298 	.word	0x20005298
 800ea5c:	20005294 	.word	0x20005294
 800ea60:	200053a4 	.word	0x200053a4
 800ea64:	200053a8 	.word	0x200053a8

0800ea68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b087      	sub	sp, #28
 800ea6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ea6e:	4b2b      	ldr	r3, [pc, #172]	@ (800eb1c <vTaskSwitchContext+0xb4>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d003      	beq.n	800ea7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ea76:	4b2a      	ldr	r3, [pc, #168]	@ (800eb20 <vTaskSwitchContext+0xb8>)
 800ea78:	2201      	movs	r2, #1
 800ea7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ea7c:	e047      	b.n	800eb0e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ea7e:	4b28      	ldr	r3, [pc, #160]	@ (800eb20 <vTaskSwitchContext+0xb8>)
 800ea80:	2200      	movs	r2, #0
 800ea82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea84:	4b27      	ldr	r3, [pc, #156]	@ (800eb24 <vTaskSwitchContext+0xbc>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	fab3 f383 	clz	r3, r3
 800ea90:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ea92:	7afb      	ldrb	r3, [r7, #11]
 800ea94:	f1c3 031f 	rsb	r3, r3, #31
 800ea98:	617b      	str	r3, [r7, #20]
 800ea9a:	4923      	ldr	r1, [pc, #140]	@ (800eb28 <vTaskSwitchContext+0xc0>)
 800ea9c:	697a      	ldr	r2, [r7, #20]
 800ea9e:	4613      	mov	r3, r2
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	4413      	add	r3, r2
 800eaa4:	009b      	lsls	r3, r3, #2
 800eaa6:	440b      	add	r3, r1
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d10d      	bne.n	800eaca <vTaskSwitchContext+0x62>
	__asm volatile
 800eaae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eab2:	b672      	cpsid	i
 800eab4:	f383 8811 	msr	BASEPRI, r3
 800eab8:	f3bf 8f6f 	isb	sy
 800eabc:	f3bf 8f4f 	dsb	sy
 800eac0:	b662      	cpsie	i
 800eac2:	607b      	str	r3, [r7, #4]
}
 800eac4:	bf00      	nop
 800eac6:	bf00      	nop
 800eac8:	e7fd      	b.n	800eac6 <vTaskSwitchContext+0x5e>
 800eaca:	697a      	ldr	r2, [r7, #20]
 800eacc:	4613      	mov	r3, r2
 800eace:	009b      	lsls	r3, r3, #2
 800ead0:	4413      	add	r3, r2
 800ead2:	009b      	lsls	r3, r3, #2
 800ead4:	4a14      	ldr	r2, [pc, #80]	@ (800eb28 <vTaskSwitchContext+0xc0>)
 800ead6:	4413      	add	r3, r2
 800ead8:	613b      	str	r3, [r7, #16]
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	685b      	ldr	r3, [r3, #4]
 800eade:	685a      	ldr	r2, [r3, #4]
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	605a      	str	r2, [r3, #4]
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	685a      	ldr	r2, [r3, #4]
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	3308      	adds	r3, #8
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d104      	bne.n	800eafa <vTaskSwitchContext+0x92>
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	685a      	ldr	r2, [r3, #4]
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	605a      	str	r2, [r3, #4]
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	685b      	ldr	r3, [r3, #4]
 800eafe:	68db      	ldr	r3, [r3, #12]
 800eb00:	4a0a      	ldr	r2, [pc, #40]	@ (800eb2c <vTaskSwitchContext+0xc4>)
 800eb02:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eb04:	4b09      	ldr	r3, [pc, #36]	@ (800eb2c <vTaskSwitchContext+0xc4>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	334c      	adds	r3, #76	@ 0x4c
 800eb0a:	4a09      	ldr	r2, [pc, #36]	@ (800eb30 <vTaskSwitchContext+0xc8>)
 800eb0c:	6013      	str	r3, [r2, #0]
}
 800eb0e:	bf00      	nop
 800eb10:	371c      	adds	r7, #28
 800eb12:	46bd      	mov	sp, r7
 800eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb18:	4770      	bx	lr
 800eb1a:	bf00      	nop
 800eb1c:	200053bc 	.word	0x200053bc
 800eb20:	200053a8 	.word	0x200053a8
 800eb24:	2000539c 	.word	0x2000539c
 800eb28:	20005298 	.word	0x20005298
 800eb2c:	20005294 	.word	0x20005294
 800eb30:	20000144 	.word	0x20000144

0800eb34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d10d      	bne.n	800eb60 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800eb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb48:	b672      	cpsid	i
 800eb4a:	f383 8811 	msr	BASEPRI, r3
 800eb4e:	f3bf 8f6f 	isb	sy
 800eb52:	f3bf 8f4f 	dsb	sy
 800eb56:	b662      	cpsie	i
 800eb58:	60fb      	str	r3, [r7, #12]
}
 800eb5a:	bf00      	nop
 800eb5c:	bf00      	nop
 800eb5e:	e7fd      	b.n	800eb5c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eb60:	4b07      	ldr	r3, [pc, #28]	@ (800eb80 <vTaskPlaceOnEventList+0x4c>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	3318      	adds	r3, #24
 800eb66:	4619      	mov	r1, r3
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f7fe fa73 	bl	800d054 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eb6e:	2101      	movs	r1, #1
 800eb70:	6838      	ldr	r0, [r7, #0]
 800eb72:	f000 fbb3 	bl	800f2dc <prvAddCurrentTaskToDelayedList>
}
 800eb76:	bf00      	nop
 800eb78:	3710      	adds	r7, #16
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	20005294 	.word	0x20005294

0800eb84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b086      	sub	sp, #24
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	68db      	ldr	r3, [r3, #12]
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d10d      	bne.n	800ebb6 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800eb9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb9e:	b672      	cpsid	i
 800eba0:	f383 8811 	msr	BASEPRI, r3
 800eba4:	f3bf 8f6f 	isb	sy
 800eba8:	f3bf 8f4f 	dsb	sy
 800ebac:	b662      	cpsie	i
 800ebae:	60fb      	str	r3, [r7, #12]
}
 800ebb0:	bf00      	nop
 800ebb2:	bf00      	nop
 800ebb4:	e7fd      	b.n	800ebb2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	3318      	adds	r3, #24
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7fe fa83 	bl	800d0c6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ebc0:	4b1d      	ldr	r3, [pc, #116]	@ (800ec38 <xTaskRemoveFromEventList+0xb4>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d11c      	bne.n	800ec02 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	3304      	adds	r3, #4
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7fe fa7a 	bl	800d0c6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	409a      	lsls	r2, r3
 800ebda:	4b18      	ldr	r3, [pc, #96]	@ (800ec3c <xTaskRemoveFromEventList+0xb8>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	4313      	orrs	r3, r2
 800ebe0:	4a16      	ldr	r2, [pc, #88]	@ (800ec3c <xTaskRemoveFromEventList+0xb8>)
 800ebe2:	6013      	str	r3, [r2, #0]
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebe8:	4613      	mov	r3, r2
 800ebea:	009b      	lsls	r3, r3, #2
 800ebec:	4413      	add	r3, r2
 800ebee:	009b      	lsls	r3, r3, #2
 800ebf0:	4a13      	ldr	r2, [pc, #76]	@ (800ec40 <xTaskRemoveFromEventList+0xbc>)
 800ebf2:	441a      	add	r2, r3
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	3304      	adds	r3, #4
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	4610      	mov	r0, r2
 800ebfc:	f7fe fa06 	bl	800d00c <vListInsertEnd>
 800ec00:	e005      	b.n	800ec0e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	3318      	adds	r3, #24
 800ec06:	4619      	mov	r1, r3
 800ec08:	480e      	ldr	r0, [pc, #56]	@ (800ec44 <xTaskRemoveFromEventList+0xc0>)
 800ec0a:	f7fe f9ff 	bl	800d00c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec12:	4b0d      	ldr	r3, [pc, #52]	@ (800ec48 <xTaskRemoveFromEventList+0xc4>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d905      	bls.n	800ec28 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ec20:	4b0a      	ldr	r3, [pc, #40]	@ (800ec4c <xTaskRemoveFromEventList+0xc8>)
 800ec22:	2201      	movs	r2, #1
 800ec24:	601a      	str	r2, [r3, #0]
 800ec26:	e001      	b.n	800ec2c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ec2c:	697b      	ldr	r3, [r7, #20]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3718      	adds	r7, #24
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	200053bc 	.word	0x200053bc
 800ec3c:	2000539c 	.word	0x2000539c
 800ec40:	20005298 	.word	0x20005298
 800ec44:	20005354 	.word	0x20005354
 800ec48:	20005294 	.word	0x20005294
 800ec4c:	200053a8 	.word	0x200053a8

0800ec50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ec50:	b480      	push	{r7}
 800ec52:	b083      	sub	sp, #12
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ec58:	4b06      	ldr	r3, [pc, #24]	@ (800ec74 <vTaskInternalSetTimeOutState+0x24>)
 800ec5a:	681a      	ldr	r2, [r3, #0]
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ec60:	4b05      	ldr	r3, [pc, #20]	@ (800ec78 <vTaskInternalSetTimeOutState+0x28>)
 800ec62:	681a      	ldr	r2, [r3, #0]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	605a      	str	r2, [r3, #4]
}
 800ec68:	bf00      	nop
 800ec6a:	370c      	adds	r7, #12
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr
 800ec74:	200053ac 	.word	0x200053ac
 800ec78:	20005398 	.word	0x20005398

0800ec7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b088      	sub	sp, #32
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d10d      	bne.n	800eca8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800ec8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec90:	b672      	cpsid	i
 800ec92:	f383 8811 	msr	BASEPRI, r3
 800ec96:	f3bf 8f6f 	isb	sy
 800ec9a:	f3bf 8f4f 	dsb	sy
 800ec9e:	b662      	cpsie	i
 800eca0:	613b      	str	r3, [r7, #16]
}
 800eca2:	bf00      	nop
 800eca4:	bf00      	nop
 800eca6:	e7fd      	b.n	800eca4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d10d      	bne.n	800ecca <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800ecae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecb2:	b672      	cpsid	i
 800ecb4:	f383 8811 	msr	BASEPRI, r3
 800ecb8:	f3bf 8f6f 	isb	sy
 800ecbc:	f3bf 8f4f 	dsb	sy
 800ecc0:	b662      	cpsie	i
 800ecc2:	60fb      	str	r3, [r7, #12]
}
 800ecc4:	bf00      	nop
 800ecc6:	bf00      	nop
 800ecc8:	e7fd      	b.n	800ecc6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800ecca:	f000 fc7f 	bl	800f5cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ecce:	4b1d      	ldr	r3, [pc, #116]	@ (800ed44 <xTaskCheckForTimeOut+0xc8>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	69ba      	ldr	r2, [r7, #24]
 800ecda:	1ad3      	subs	r3, r2, r3
 800ecdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ece6:	d102      	bne.n	800ecee <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ece8:	2300      	movs	r3, #0
 800ecea:	61fb      	str	r3, [r7, #28]
 800ecec:	e023      	b.n	800ed36 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681a      	ldr	r2, [r3, #0]
 800ecf2:	4b15      	ldr	r3, [pc, #84]	@ (800ed48 <xTaskCheckForTimeOut+0xcc>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d007      	beq.n	800ed0a <xTaskCheckForTimeOut+0x8e>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	69ba      	ldr	r2, [r7, #24]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d302      	bcc.n	800ed0a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ed04:	2301      	movs	r3, #1
 800ed06:	61fb      	str	r3, [r7, #28]
 800ed08:	e015      	b.n	800ed36 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	697a      	ldr	r2, [r7, #20]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d20b      	bcs.n	800ed2c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	681a      	ldr	r2, [r3, #0]
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	1ad2      	subs	r2, r2, r3
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f7ff ff95 	bl	800ec50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ed26:	2300      	movs	r3, #0
 800ed28:	61fb      	str	r3, [r7, #28]
 800ed2a:	e004      	b.n	800ed36 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ed32:	2301      	movs	r3, #1
 800ed34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ed36:	f000 fc7f 	bl	800f638 <vPortExitCritical>

	return xReturn;
 800ed3a:	69fb      	ldr	r3, [r7, #28]
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3720      	adds	r7, #32
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	20005398 	.word	0x20005398
 800ed48:	200053ac 	.word	0x200053ac

0800ed4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ed50:	4b03      	ldr	r3, [pc, #12]	@ (800ed60 <vTaskMissedYield+0x14>)
 800ed52:	2201      	movs	r2, #1
 800ed54:	601a      	str	r2, [r3, #0]
}
 800ed56:	bf00      	nop
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr
 800ed60:	200053a8 	.word	0x200053a8

0800ed64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ed6c:	f000 f852 	bl	800ee14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ed70:	4b06      	ldr	r3, [pc, #24]	@ (800ed8c <prvIdleTask+0x28>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	2b01      	cmp	r3, #1
 800ed76:	d9f9      	bls.n	800ed6c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ed78:	4b05      	ldr	r3, [pc, #20]	@ (800ed90 <prvIdleTask+0x2c>)
 800ed7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed7e:	601a      	str	r2, [r3, #0]
 800ed80:	f3bf 8f4f 	dsb	sy
 800ed84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ed88:	e7f0      	b.n	800ed6c <prvIdleTask+0x8>
 800ed8a:	bf00      	nop
 800ed8c:	20005298 	.word	0x20005298
 800ed90:	e000ed04 	.word	0xe000ed04

0800ed94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b082      	sub	sp, #8
 800ed98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	607b      	str	r3, [r7, #4]
 800ed9e:	e00c      	b.n	800edba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eda0:	687a      	ldr	r2, [r7, #4]
 800eda2:	4613      	mov	r3, r2
 800eda4:	009b      	lsls	r3, r3, #2
 800eda6:	4413      	add	r3, r2
 800eda8:	009b      	lsls	r3, r3, #2
 800edaa:	4a12      	ldr	r2, [pc, #72]	@ (800edf4 <prvInitialiseTaskLists+0x60>)
 800edac:	4413      	add	r3, r2
 800edae:	4618      	mov	r0, r3
 800edb0:	f7fe f8ff 	bl	800cfb2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	3301      	adds	r3, #1
 800edb8:	607b      	str	r3, [r7, #4]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2b06      	cmp	r3, #6
 800edbe:	d9ef      	bls.n	800eda0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800edc0:	480d      	ldr	r0, [pc, #52]	@ (800edf8 <prvInitialiseTaskLists+0x64>)
 800edc2:	f7fe f8f6 	bl	800cfb2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800edc6:	480d      	ldr	r0, [pc, #52]	@ (800edfc <prvInitialiseTaskLists+0x68>)
 800edc8:	f7fe f8f3 	bl	800cfb2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800edcc:	480c      	ldr	r0, [pc, #48]	@ (800ee00 <prvInitialiseTaskLists+0x6c>)
 800edce:	f7fe f8f0 	bl	800cfb2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800edd2:	480c      	ldr	r0, [pc, #48]	@ (800ee04 <prvInitialiseTaskLists+0x70>)
 800edd4:	f7fe f8ed 	bl	800cfb2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800edd8:	480b      	ldr	r0, [pc, #44]	@ (800ee08 <prvInitialiseTaskLists+0x74>)
 800edda:	f7fe f8ea 	bl	800cfb2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800edde:	4b0b      	ldr	r3, [pc, #44]	@ (800ee0c <prvInitialiseTaskLists+0x78>)
 800ede0:	4a05      	ldr	r2, [pc, #20]	@ (800edf8 <prvInitialiseTaskLists+0x64>)
 800ede2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ede4:	4b0a      	ldr	r3, [pc, #40]	@ (800ee10 <prvInitialiseTaskLists+0x7c>)
 800ede6:	4a05      	ldr	r2, [pc, #20]	@ (800edfc <prvInitialiseTaskLists+0x68>)
 800ede8:	601a      	str	r2, [r3, #0]
}
 800edea:	bf00      	nop
 800edec:	3708      	adds	r7, #8
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
 800edf2:	bf00      	nop
 800edf4:	20005298 	.word	0x20005298
 800edf8:	20005324 	.word	0x20005324
 800edfc:	20005338 	.word	0x20005338
 800ee00:	20005354 	.word	0x20005354
 800ee04:	20005368 	.word	0x20005368
 800ee08:	20005380 	.word	0x20005380
 800ee0c:	2000534c 	.word	0x2000534c
 800ee10:	20005350 	.word	0x20005350

0800ee14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b082      	sub	sp, #8
 800ee18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ee1a:	e019      	b.n	800ee50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ee1c:	f000 fbd6 	bl	800f5cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee20:	4b10      	ldr	r3, [pc, #64]	@ (800ee64 <prvCheckTasksWaitingTermination+0x50>)
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	68db      	ldr	r3, [r3, #12]
 800ee26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	3304      	adds	r3, #4
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7fe f94a 	bl	800d0c6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ee32:	4b0d      	ldr	r3, [pc, #52]	@ (800ee68 <prvCheckTasksWaitingTermination+0x54>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	3b01      	subs	r3, #1
 800ee38:	4a0b      	ldr	r2, [pc, #44]	@ (800ee68 <prvCheckTasksWaitingTermination+0x54>)
 800ee3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ee3c:	4b0b      	ldr	r3, [pc, #44]	@ (800ee6c <prvCheckTasksWaitingTermination+0x58>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	3b01      	subs	r3, #1
 800ee42:	4a0a      	ldr	r2, [pc, #40]	@ (800ee6c <prvCheckTasksWaitingTermination+0x58>)
 800ee44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ee46:	f000 fbf7 	bl	800f638 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f000 f810 	bl	800ee70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ee50:	4b06      	ldr	r3, [pc, #24]	@ (800ee6c <prvCheckTasksWaitingTermination+0x58>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d1e1      	bne.n	800ee1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ee58:	bf00      	nop
 800ee5a:	bf00      	nop
 800ee5c:	3708      	adds	r7, #8
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}
 800ee62:	bf00      	nop
 800ee64:	20005368 	.word	0x20005368
 800ee68:	20005394 	.word	0x20005394
 800ee6c:	2000537c 	.word	0x2000537c

0800ee70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b084      	sub	sp, #16
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	334c      	adds	r3, #76	@ 0x4c
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f00f fa31 	bl	801e2e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d108      	bne.n	800ee9e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee90:	4618      	mov	r0, r3
 800ee92:	f000 fd97 	bl	800f9c4 <vPortFree>
				vPortFree( pxTCB );
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f000 fd94 	bl	800f9c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ee9c:	e01b      	b.n	800eed6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	d103      	bne.n	800eeb0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f000 fd8b 	bl	800f9c4 <vPortFree>
	}
 800eeae:	e012      	b.n	800eed6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800eeb6:	2b02      	cmp	r3, #2
 800eeb8:	d00d      	beq.n	800eed6 <prvDeleteTCB+0x66>
	__asm volatile
 800eeba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eebe:	b672      	cpsid	i
 800eec0:	f383 8811 	msr	BASEPRI, r3
 800eec4:	f3bf 8f6f 	isb	sy
 800eec8:	f3bf 8f4f 	dsb	sy
 800eecc:	b662      	cpsie	i
 800eece:	60fb      	str	r3, [r7, #12]
}
 800eed0:	bf00      	nop
 800eed2:	bf00      	nop
 800eed4:	e7fd      	b.n	800eed2 <prvDeleteTCB+0x62>
	}
 800eed6:	bf00      	nop
 800eed8:	3710      	adds	r7, #16
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}
	...

0800eee0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eee0:	b480      	push	{r7}
 800eee2:	b083      	sub	sp, #12
 800eee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eee6:	4b0c      	ldr	r3, [pc, #48]	@ (800ef18 <prvResetNextTaskUnblockTime+0x38>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d104      	bne.n	800eefa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eef0:	4b0a      	ldr	r3, [pc, #40]	@ (800ef1c <prvResetNextTaskUnblockTime+0x3c>)
 800eef2:	f04f 32ff 	mov.w	r2, #4294967295
 800eef6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eef8:	e008      	b.n	800ef0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eefa:	4b07      	ldr	r3, [pc, #28]	@ (800ef18 <prvResetNextTaskUnblockTime+0x38>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	68db      	ldr	r3, [r3, #12]
 800ef00:	68db      	ldr	r3, [r3, #12]
 800ef02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	685b      	ldr	r3, [r3, #4]
 800ef08:	4a04      	ldr	r2, [pc, #16]	@ (800ef1c <prvResetNextTaskUnblockTime+0x3c>)
 800ef0a:	6013      	str	r3, [r2, #0]
}
 800ef0c:	bf00      	nop
 800ef0e:	370c      	adds	r7, #12
 800ef10:	46bd      	mov	sp, r7
 800ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef16:	4770      	bx	lr
 800ef18:	2000534c 	.word	0x2000534c
 800ef1c:	200053b4 	.word	0x200053b4

0800ef20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ef20:	b480      	push	{r7}
 800ef22:	b083      	sub	sp, #12
 800ef24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ef26:	4b0b      	ldr	r3, [pc, #44]	@ (800ef54 <xTaskGetSchedulerState+0x34>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d102      	bne.n	800ef34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ef2e:	2301      	movs	r3, #1
 800ef30:	607b      	str	r3, [r7, #4]
 800ef32:	e008      	b.n	800ef46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef34:	4b08      	ldr	r3, [pc, #32]	@ (800ef58 <xTaskGetSchedulerState+0x38>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d102      	bne.n	800ef42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ef3c:	2302      	movs	r3, #2
 800ef3e:	607b      	str	r3, [r7, #4]
 800ef40:	e001      	b.n	800ef46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ef42:	2300      	movs	r3, #0
 800ef44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ef46:	687b      	ldr	r3, [r7, #4]
	}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	370c      	adds	r7, #12
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef52:	4770      	bx	lr
 800ef54:	200053a0 	.word	0x200053a0
 800ef58:	200053bc 	.word	0x200053bc

0800ef5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d069      	beq.n	800f046 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef76:	4b36      	ldr	r3, [pc, #216]	@ (800f050 <xTaskPriorityInherit+0xf4>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d259      	bcs.n	800f034 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	699b      	ldr	r3, [r3, #24]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	db06      	blt.n	800ef96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef88:	4b31      	ldr	r3, [pc, #196]	@ (800f050 <xTaskPriorityInherit+0xf4>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef8e:	f1c3 0207 	rsb	r2, r3, #7
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	6959      	ldr	r1, [r3, #20]
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef9e:	4613      	mov	r3, r2
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	4413      	add	r3, r2
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	4a2b      	ldr	r2, [pc, #172]	@ (800f054 <xTaskPriorityInherit+0xf8>)
 800efa8:	4413      	add	r3, r2
 800efaa:	4299      	cmp	r1, r3
 800efac:	d13a      	bne.n	800f024 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	3304      	adds	r3, #4
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7fe f887 	bl	800d0c6 <uxListRemove>
 800efb8:	4603      	mov	r3, r0
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d115      	bne.n	800efea <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efc2:	4924      	ldr	r1, [pc, #144]	@ (800f054 <xTaskPriorityInherit+0xf8>)
 800efc4:	4613      	mov	r3, r2
 800efc6:	009b      	lsls	r3, r3, #2
 800efc8:	4413      	add	r3, r2
 800efca:	009b      	lsls	r3, r3, #2
 800efcc:	440b      	add	r3, r1
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d10a      	bne.n	800efea <xTaskPriorityInherit+0x8e>
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efd8:	2201      	movs	r2, #1
 800efda:	fa02 f303 	lsl.w	r3, r2, r3
 800efde:	43da      	mvns	r2, r3
 800efe0:	4b1d      	ldr	r3, [pc, #116]	@ (800f058 <xTaskPriorityInherit+0xfc>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4013      	ands	r3, r2
 800efe6:	4a1c      	ldr	r2, [pc, #112]	@ (800f058 <xTaskPriorityInherit+0xfc>)
 800efe8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800efea:	4b19      	ldr	r3, [pc, #100]	@ (800f050 <xTaskPriorityInherit+0xf4>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eff8:	2201      	movs	r2, #1
 800effa:	409a      	lsls	r2, r3
 800effc:	4b16      	ldr	r3, [pc, #88]	@ (800f058 <xTaskPriorityInherit+0xfc>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4313      	orrs	r3, r2
 800f002:	4a15      	ldr	r2, [pc, #84]	@ (800f058 <xTaskPriorityInherit+0xfc>)
 800f004:	6013      	str	r3, [r2, #0]
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f00a:	4613      	mov	r3, r2
 800f00c:	009b      	lsls	r3, r3, #2
 800f00e:	4413      	add	r3, r2
 800f010:	009b      	lsls	r3, r3, #2
 800f012:	4a10      	ldr	r2, [pc, #64]	@ (800f054 <xTaskPriorityInherit+0xf8>)
 800f014:	441a      	add	r2, r3
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	3304      	adds	r3, #4
 800f01a:	4619      	mov	r1, r3
 800f01c:	4610      	mov	r0, r2
 800f01e:	f7fd fff5 	bl	800d00c <vListInsertEnd>
 800f022:	e004      	b.n	800f02e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f024:	4b0a      	ldr	r3, [pc, #40]	@ (800f050 <xTaskPriorityInherit+0xf4>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f02e:	2301      	movs	r3, #1
 800f030:	60fb      	str	r3, [r7, #12]
 800f032:	e008      	b.n	800f046 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f038:	4b05      	ldr	r3, [pc, #20]	@ (800f050 <xTaskPriorityInherit+0xf4>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f03e:	429a      	cmp	r2, r3
 800f040:	d201      	bcs.n	800f046 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f042:	2301      	movs	r3, #1
 800f044:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f046:	68fb      	ldr	r3, [r7, #12]
	}
 800f048:	4618      	mov	r0, r3
 800f04a:	3710      	adds	r7, #16
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}
 800f050:	20005294 	.word	0x20005294
 800f054:	20005298 	.word	0x20005298
 800f058:	2000539c 	.word	0x2000539c

0800f05c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b086      	sub	sp, #24
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f068:	2300      	movs	r3, #0
 800f06a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d074      	beq.n	800f15c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f072:	4b3d      	ldr	r3, [pc, #244]	@ (800f168 <xTaskPriorityDisinherit+0x10c>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	693a      	ldr	r2, [r7, #16]
 800f078:	429a      	cmp	r2, r3
 800f07a:	d00d      	beq.n	800f098 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800f07c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f080:	b672      	cpsid	i
 800f082:	f383 8811 	msr	BASEPRI, r3
 800f086:	f3bf 8f6f 	isb	sy
 800f08a:	f3bf 8f4f 	dsb	sy
 800f08e:	b662      	cpsie	i
 800f090:	60fb      	str	r3, [r7, #12]
}
 800f092:	bf00      	nop
 800f094:	bf00      	nop
 800f096:	e7fd      	b.n	800f094 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800f098:	693b      	ldr	r3, [r7, #16]
 800f09a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d10d      	bne.n	800f0bc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800f0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0a4:	b672      	cpsid	i
 800f0a6:	f383 8811 	msr	BASEPRI, r3
 800f0aa:	f3bf 8f6f 	isb	sy
 800f0ae:	f3bf 8f4f 	dsb	sy
 800f0b2:	b662      	cpsie	i
 800f0b4:	60bb      	str	r3, [r7, #8]
}
 800f0b6:	bf00      	nop
 800f0b8:	bf00      	nop
 800f0ba:	e7fd      	b.n	800f0b8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800f0bc:	693b      	ldr	r3, [r7, #16]
 800f0be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f0c0:	1e5a      	subs	r2, r3, #1
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0ca:	693b      	ldr	r3, [r7, #16]
 800f0cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d044      	beq.n	800f15c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d140      	bne.n	800f15c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	3304      	adds	r3, #4
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7fd fff1 	bl	800d0c6 <uxListRemove>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d115      	bne.n	800f116 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0ee:	491f      	ldr	r1, [pc, #124]	@ (800f16c <xTaskPriorityDisinherit+0x110>)
 800f0f0:	4613      	mov	r3, r2
 800f0f2:	009b      	lsls	r3, r3, #2
 800f0f4:	4413      	add	r3, r2
 800f0f6:	009b      	lsls	r3, r3, #2
 800f0f8:	440b      	add	r3, r1
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d10a      	bne.n	800f116 <xTaskPriorityDisinherit+0xba>
 800f100:	693b      	ldr	r3, [r7, #16]
 800f102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f104:	2201      	movs	r2, #1
 800f106:	fa02 f303 	lsl.w	r3, r2, r3
 800f10a:	43da      	mvns	r2, r3
 800f10c:	4b18      	ldr	r3, [pc, #96]	@ (800f170 <xTaskPriorityDisinherit+0x114>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	4013      	ands	r3, r2
 800f112:	4a17      	ldr	r2, [pc, #92]	@ (800f170 <xTaskPriorityDisinherit+0x114>)
 800f114:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f11e:	693b      	ldr	r3, [r7, #16]
 800f120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f122:	f1c3 0207 	rsb	r2, r3, #7
 800f126:	693b      	ldr	r3, [r7, #16]
 800f128:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f12e:	2201      	movs	r2, #1
 800f130:	409a      	lsls	r2, r3
 800f132:	4b0f      	ldr	r3, [pc, #60]	@ (800f170 <xTaskPriorityDisinherit+0x114>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	4313      	orrs	r3, r2
 800f138:	4a0d      	ldr	r2, [pc, #52]	@ (800f170 <xTaskPriorityDisinherit+0x114>)
 800f13a:	6013      	str	r3, [r2, #0]
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f140:	4613      	mov	r3, r2
 800f142:	009b      	lsls	r3, r3, #2
 800f144:	4413      	add	r3, r2
 800f146:	009b      	lsls	r3, r3, #2
 800f148:	4a08      	ldr	r2, [pc, #32]	@ (800f16c <xTaskPriorityDisinherit+0x110>)
 800f14a:	441a      	add	r2, r3
 800f14c:	693b      	ldr	r3, [r7, #16]
 800f14e:	3304      	adds	r3, #4
 800f150:	4619      	mov	r1, r3
 800f152:	4610      	mov	r0, r2
 800f154:	f7fd ff5a 	bl	800d00c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f158:	2301      	movs	r3, #1
 800f15a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f15c:	697b      	ldr	r3, [r7, #20]
	}
 800f15e:	4618      	mov	r0, r3
 800f160:	3718      	adds	r7, #24
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}
 800f166:	bf00      	nop
 800f168:	20005294 	.word	0x20005294
 800f16c:	20005298 	.word	0x20005298
 800f170:	2000539c 	.word	0x2000539c

0800f174 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f174:	b580      	push	{r7, lr}
 800f176:	b088      	sub	sp, #32
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f182:	2301      	movs	r3, #1
 800f184:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	f000 8089 	beq.w	800f2a0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f18e:	69bb      	ldr	r3, [r7, #24]
 800f190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f192:	2b00      	cmp	r3, #0
 800f194:	d10d      	bne.n	800f1b2 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800f196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f19a:	b672      	cpsid	i
 800f19c:	f383 8811 	msr	BASEPRI, r3
 800f1a0:	f3bf 8f6f 	isb	sy
 800f1a4:	f3bf 8f4f 	dsb	sy
 800f1a8:	b662      	cpsie	i
 800f1aa:	60fb      	str	r3, [r7, #12]
}
 800f1ac:	bf00      	nop
 800f1ae:	bf00      	nop
 800f1b0:	e7fd      	b.n	800f1ae <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f1b2:	69bb      	ldr	r3, [r7, #24]
 800f1b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1b6:	683a      	ldr	r2, [r7, #0]
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	d902      	bls.n	800f1c2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	61fb      	str	r3, [r7, #28]
 800f1c0:	e002      	b.n	800f1c8 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f1c2:	69bb      	ldr	r3, [r7, #24]
 800f1c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f1c8:	69bb      	ldr	r3, [r7, #24]
 800f1ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1cc:	69fa      	ldr	r2, [r7, #28]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d066      	beq.n	800f2a0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f1d6:	697a      	ldr	r2, [r7, #20]
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d161      	bne.n	800f2a0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f1dc:	4b32      	ldr	r3, [pc, #200]	@ (800f2a8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	69ba      	ldr	r2, [r7, #24]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d10d      	bne.n	800f202 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800f1e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1ea:	b672      	cpsid	i
 800f1ec:	f383 8811 	msr	BASEPRI, r3
 800f1f0:	f3bf 8f6f 	isb	sy
 800f1f4:	f3bf 8f4f 	dsb	sy
 800f1f8:	b662      	cpsie	i
 800f1fa:	60bb      	str	r3, [r7, #8]
}
 800f1fc:	bf00      	nop
 800f1fe:	bf00      	nop
 800f200:	e7fd      	b.n	800f1fe <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f202:	69bb      	ldr	r3, [r7, #24]
 800f204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f206:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f208:	69bb      	ldr	r3, [r7, #24]
 800f20a:	69fa      	ldr	r2, [r7, #28]
 800f20c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f20e:	69bb      	ldr	r3, [r7, #24]
 800f210:	699b      	ldr	r3, [r3, #24]
 800f212:	2b00      	cmp	r3, #0
 800f214:	db04      	blt.n	800f220 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	f1c3 0207 	rsb	r2, r3, #7
 800f21c:	69bb      	ldr	r3, [r7, #24]
 800f21e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f220:	69bb      	ldr	r3, [r7, #24]
 800f222:	6959      	ldr	r1, [r3, #20]
 800f224:	693a      	ldr	r2, [r7, #16]
 800f226:	4613      	mov	r3, r2
 800f228:	009b      	lsls	r3, r3, #2
 800f22a:	4413      	add	r3, r2
 800f22c:	009b      	lsls	r3, r3, #2
 800f22e:	4a1f      	ldr	r2, [pc, #124]	@ (800f2ac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f230:	4413      	add	r3, r2
 800f232:	4299      	cmp	r1, r3
 800f234:	d134      	bne.n	800f2a0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f236:	69bb      	ldr	r3, [r7, #24]
 800f238:	3304      	adds	r3, #4
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7fd ff43 	bl	800d0c6 <uxListRemove>
 800f240:	4603      	mov	r3, r0
 800f242:	2b00      	cmp	r3, #0
 800f244:	d115      	bne.n	800f272 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f246:	69bb      	ldr	r3, [r7, #24]
 800f248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f24a:	4918      	ldr	r1, [pc, #96]	@ (800f2ac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f24c:	4613      	mov	r3, r2
 800f24e:	009b      	lsls	r3, r3, #2
 800f250:	4413      	add	r3, r2
 800f252:	009b      	lsls	r3, r3, #2
 800f254:	440b      	add	r3, r1
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d10a      	bne.n	800f272 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800f25c:	69bb      	ldr	r3, [r7, #24]
 800f25e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f260:	2201      	movs	r2, #1
 800f262:	fa02 f303 	lsl.w	r3, r2, r3
 800f266:	43da      	mvns	r2, r3
 800f268:	4b11      	ldr	r3, [pc, #68]	@ (800f2b0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	4013      	ands	r3, r2
 800f26e:	4a10      	ldr	r2, [pc, #64]	@ (800f2b0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f270:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f272:	69bb      	ldr	r3, [r7, #24]
 800f274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f276:	2201      	movs	r2, #1
 800f278:	409a      	lsls	r2, r3
 800f27a:	4b0d      	ldr	r3, [pc, #52]	@ (800f2b0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	4313      	orrs	r3, r2
 800f280:	4a0b      	ldr	r2, [pc, #44]	@ (800f2b0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f282:	6013      	str	r3, [r2, #0]
 800f284:	69bb      	ldr	r3, [r7, #24]
 800f286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f288:	4613      	mov	r3, r2
 800f28a:	009b      	lsls	r3, r3, #2
 800f28c:	4413      	add	r3, r2
 800f28e:	009b      	lsls	r3, r3, #2
 800f290:	4a06      	ldr	r2, [pc, #24]	@ (800f2ac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f292:	441a      	add	r2, r3
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	3304      	adds	r3, #4
 800f298:	4619      	mov	r1, r3
 800f29a:	4610      	mov	r0, r2
 800f29c:	f7fd feb6 	bl	800d00c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f2a0:	bf00      	nop
 800f2a2:	3720      	adds	r7, #32
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}
 800f2a8:	20005294 	.word	0x20005294
 800f2ac:	20005298 	.word	0x20005298
 800f2b0:	2000539c 	.word	0x2000539c

0800f2b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f2b4:	b480      	push	{r7}
 800f2b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f2b8:	4b07      	ldr	r3, [pc, #28]	@ (800f2d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d004      	beq.n	800f2ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f2c0:	4b05      	ldr	r3, [pc, #20]	@ (800f2d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f2c6:	3201      	adds	r2, #1
 800f2c8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800f2ca:	4b03      	ldr	r3, [pc, #12]	@ (800f2d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
	}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr
 800f2d8:	20005294 	.word	0x20005294

0800f2dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b084      	sub	sp, #16
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f2e6:	4b29      	ldr	r3, [pc, #164]	@ (800f38c <prvAddCurrentTaskToDelayedList+0xb0>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f2ec:	4b28      	ldr	r3, [pc, #160]	@ (800f390 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	3304      	adds	r3, #4
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7fd fee7 	bl	800d0c6 <uxListRemove>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d10b      	bne.n	800f316 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f2fe:	4b24      	ldr	r3, [pc, #144]	@ (800f390 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f304:	2201      	movs	r2, #1
 800f306:	fa02 f303 	lsl.w	r3, r2, r3
 800f30a:	43da      	mvns	r2, r3
 800f30c:	4b21      	ldr	r3, [pc, #132]	@ (800f394 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	4013      	ands	r3, r2
 800f312:	4a20      	ldr	r2, [pc, #128]	@ (800f394 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f314:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f31c:	d10a      	bne.n	800f334 <prvAddCurrentTaskToDelayedList+0x58>
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d007      	beq.n	800f334 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f324:	4b1a      	ldr	r3, [pc, #104]	@ (800f390 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	3304      	adds	r3, #4
 800f32a:	4619      	mov	r1, r3
 800f32c:	481a      	ldr	r0, [pc, #104]	@ (800f398 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f32e:	f7fd fe6d 	bl	800d00c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f332:	e026      	b.n	800f382 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f334:	68fa      	ldr	r2, [r7, #12]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4413      	add	r3, r2
 800f33a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f33c:	4b14      	ldr	r3, [pc, #80]	@ (800f390 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	68ba      	ldr	r2, [r7, #8]
 800f342:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f344:	68ba      	ldr	r2, [r7, #8]
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	429a      	cmp	r2, r3
 800f34a:	d209      	bcs.n	800f360 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f34c:	4b13      	ldr	r3, [pc, #76]	@ (800f39c <prvAddCurrentTaskToDelayedList+0xc0>)
 800f34e:	681a      	ldr	r2, [r3, #0]
 800f350:	4b0f      	ldr	r3, [pc, #60]	@ (800f390 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	3304      	adds	r3, #4
 800f356:	4619      	mov	r1, r3
 800f358:	4610      	mov	r0, r2
 800f35a:	f7fd fe7b 	bl	800d054 <vListInsert>
}
 800f35e:	e010      	b.n	800f382 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f360:	4b0f      	ldr	r3, [pc, #60]	@ (800f3a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f362:	681a      	ldr	r2, [r3, #0]
 800f364:	4b0a      	ldr	r3, [pc, #40]	@ (800f390 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	3304      	adds	r3, #4
 800f36a:	4619      	mov	r1, r3
 800f36c:	4610      	mov	r0, r2
 800f36e:	f7fd fe71 	bl	800d054 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f372:	4b0c      	ldr	r3, [pc, #48]	@ (800f3a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	68ba      	ldr	r2, [r7, #8]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d202      	bcs.n	800f382 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f37c:	4a09      	ldr	r2, [pc, #36]	@ (800f3a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	6013      	str	r3, [r2, #0]
}
 800f382:	bf00      	nop
 800f384:	3710      	adds	r7, #16
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	20005398 	.word	0x20005398
 800f390:	20005294 	.word	0x20005294
 800f394:	2000539c 	.word	0x2000539c
 800f398:	20005380 	.word	0x20005380
 800f39c:	20005350 	.word	0x20005350
 800f3a0:	2000534c 	.word	0x2000534c
 800f3a4:	200053b4 	.word	0x200053b4

0800f3a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b085      	sub	sp, #20
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	60f8      	str	r0, [r7, #12]
 800f3b0:	60b9      	str	r1, [r7, #8]
 800f3b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	3b04      	subs	r3, #4
 800f3b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f3c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	3b04      	subs	r3, #4
 800f3c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	f023 0201 	bic.w	r2, r3, #1
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	3b04      	subs	r3, #4
 800f3d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f3d8:	4a0c      	ldr	r2, [pc, #48]	@ (800f40c <pxPortInitialiseStack+0x64>)
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	3b14      	subs	r3, #20
 800f3e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f3e4:	687a      	ldr	r2, [r7, #4]
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	3b04      	subs	r3, #4
 800f3ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f06f 0202 	mvn.w	r2, #2
 800f3f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	3b20      	subs	r3, #32
 800f3fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
}
 800f400:	4618      	mov	r0, r3
 800f402:	3714      	adds	r7, #20
 800f404:	46bd      	mov	sp, r7
 800f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40a:	4770      	bx	lr
 800f40c:	0800f411 	.word	0x0800f411

0800f410 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f410:	b480      	push	{r7}
 800f412:	b085      	sub	sp, #20
 800f414:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f416:	2300      	movs	r3, #0
 800f418:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f41a:	4b15      	ldr	r3, [pc, #84]	@ (800f470 <prvTaskExitError+0x60>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f422:	d00d      	beq.n	800f440 <prvTaskExitError+0x30>
	__asm volatile
 800f424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f428:	b672      	cpsid	i
 800f42a:	f383 8811 	msr	BASEPRI, r3
 800f42e:	f3bf 8f6f 	isb	sy
 800f432:	f3bf 8f4f 	dsb	sy
 800f436:	b662      	cpsie	i
 800f438:	60fb      	str	r3, [r7, #12]
}
 800f43a:	bf00      	nop
 800f43c:	bf00      	nop
 800f43e:	e7fd      	b.n	800f43c <prvTaskExitError+0x2c>
	__asm volatile
 800f440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f444:	b672      	cpsid	i
 800f446:	f383 8811 	msr	BASEPRI, r3
 800f44a:	f3bf 8f6f 	isb	sy
 800f44e:	f3bf 8f4f 	dsb	sy
 800f452:	b662      	cpsie	i
 800f454:	60bb      	str	r3, [r7, #8]
}
 800f456:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f458:	bf00      	nop
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d0fc      	beq.n	800f45a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f460:	bf00      	nop
 800f462:	bf00      	nop
 800f464:	3714      	adds	r7, #20
 800f466:	46bd      	mov	sp, r7
 800f468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46c:	4770      	bx	lr
 800f46e:	bf00      	nop
 800f470:	200000b4 	.word	0x200000b4
	...

0800f480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f480:	4b07      	ldr	r3, [pc, #28]	@ (800f4a0 <pxCurrentTCBConst2>)
 800f482:	6819      	ldr	r1, [r3, #0]
 800f484:	6808      	ldr	r0, [r1, #0]
 800f486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f48a:	f380 8809 	msr	PSP, r0
 800f48e:	f3bf 8f6f 	isb	sy
 800f492:	f04f 0000 	mov.w	r0, #0
 800f496:	f380 8811 	msr	BASEPRI, r0
 800f49a:	4770      	bx	lr
 800f49c:	f3af 8000 	nop.w

0800f4a0 <pxCurrentTCBConst2>:
 800f4a0:	20005294 	.word	0x20005294
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f4a4:	bf00      	nop
 800f4a6:	bf00      	nop

0800f4a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f4a8:	4808      	ldr	r0, [pc, #32]	@ (800f4cc <prvPortStartFirstTask+0x24>)
 800f4aa:	6800      	ldr	r0, [r0, #0]
 800f4ac:	6800      	ldr	r0, [r0, #0]
 800f4ae:	f380 8808 	msr	MSP, r0
 800f4b2:	f04f 0000 	mov.w	r0, #0
 800f4b6:	f380 8814 	msr	CONTROL, r0
 800f4ba:	b662      	cpsie	i
 800f4bc:	b661      	cpsie	f
 800f4be:	f3bf 8f4f 	dsb	sy
 800f4c2:	f3bf 8f6f 	isb	sy
 800f4c6:	df00      	svc	0
 800f4c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f4ca:	bf00      	nop
 800f4cc:	e000ed08 	.word	0xe000ed08

0800f4d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f4d6:	4b37      	ldr	r3, [pc, #220]	@ (800f5b4 <xPortStartScheduler+0xe4>)
 800f4d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	b2db      	uxtb	r3, r3
 800f4e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	22ff      	movs	r2, #255	@ 0xff
 800f4e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	b2db      	uxtb	r3, r3
 800f4ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f4f0:	78fb      	ldrb	r3, [r7, #3]
 800f4f2:	b2db      	uxtb	r3, r3
 800f4f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f4f8:	b2da      	uxtb	r2, r3
 800f4fa:	4b2f      	ldr	r3, [pc, #188]	@ (800f5b8 <xPortStartScheduler+0xe8>)
 800f4fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f4fe:	4b2f      	ldr	r3, [pc, #188]	@ (800f5bc <xPortStartScheduler+0xec>)
 800f500:	2207      	movs	r2, #7
 800f502:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f504:	e009      	b.n	800f51a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f506:	4b2d      	ldr	r3, [pc, #180]	@ (800f5bc <xPortStartScheduler+0xec>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	3b01      	subs	r3, #1
 800f50c:	4a2b      	ldr	r2, [pc, #172]	@ (800f5bc <xPortStartScheduler+0xec>)
 800f50e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f510:	78fb      	ldrb	r3, [r7, #3]
 800f512:	b2db      	uxtb	r3, r3
 800f514:	005b      	lsls	r3, r3, #1
 800f516:	b2db      	uxtb	r3, r3
 800f518:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f51a:	78fb      	ldrb	r3, [r7, #3]
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f522:	2b80      	cmp	r3, #128	@ 0x80
 800f524:	d0ef      	beq.n	800f506 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f526:	4b25      	ldr	r3, [pc, #148]	@ (800f5bc <xPortStartScheduler+0xec>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f1c3 0307 	rsb	r3, r3, #7
 800f52e:	2b04      	cmp	r3, #4
 800f530:	d00d      	beq.n	800f54e <xPortStartScheduler+0x7e>
	__asm volatile
 800f532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f536:	b672      	cpsid	i
 800f538:	f383 8811 	msr	BASEPRI, r3
 800f53c:	f3bf 8f6f 	isb	sy
 800f540:	f3bf 8f4f 	dsb	sy
 800f544:	b662      	cpsie	i
 800f546:	60bb      	str	r3, [r7, #8]
}
 800f548:	bf00      	nop
 800f54a:	bf00      	nop
 800f54c:	e7fd      	b.n	800f54a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f54e:	4b1b      	ldr	r3, [pc, #108]	@ (800f5bc <xPortStartScheduler+0xec>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	021b      	lsls	r3, r3, #8
 800f554:	4a19      	ldr	r2, [pc, #100]	@ (800f5bc <xPortStartScheduler+0xec>)
 800f556:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f558:	4b18      	ldr	r3, [pc, #96]	@ (800f5bc <xPortStartScheduler+0xec>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f560:	4a16      	ldr	r2, [pc, #88]	@ (800f5bc <xPortStartScheduler+0xec>)
 800f562:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	b2da      	uxtb	r2, r3
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f56c:	4b14      	ldr	r3, [pc, #80]	@ (800f5c0 <xPortStartScheduler+0xf0>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	4a13      	ldr	r2, [pc, #76]	@ (800f5c0 <xPortStartScheduler+0xf0>)
 800f572:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f576:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f578:	4b11      	ldr	r3, [pc, #68]	@ (800f5c0 <xPortStartScheduler+0xf0>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	4a10      	ldr	r2, [pc, #64]	@ (800f5c0 <xPortStartScheduler+0xf0>)
 800f57e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f582:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f584:	f000 f8dc 	bl	800f740 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f588:	4b0e      	ldr	r3, [pc, #56]	@ (800f5c4 <xPortStartScheduler+0xf4>)
 800f58a:	2200      	movs	r2, #0
 800f58c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f58e:	f000 f8fb 	bl	800f788 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f592:	4b0d      	ldr	r3, [pc, #52]	@ (800f5c8 <xPortStartScheduler+0xf8>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	4a0c      	ldr	r2, [pc, #48]	@ (800f5c8 <xPortStartScheduler+0xf8>)
 800f598:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f59c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f59e:	f7ff ff83 	bl	800f4a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f5a2:	f7ff fa61 	bl	800ea68 <vTaskSwitchContext>
	prvTaskExitError();
 800f5a6:	f7ff ff33 	bl	800f410 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f5aa:	2300      	movs	r3, #0
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3710      	adds	r7, #16
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}
 800f5b4:	e000e400 	.word	0xe000e400
 800f5b8:	200053c0 	.word	0x200053c0
 800f5bc:	200053c4 	.word	0x200053c4
 800f5c0:	e000ed20 	.word	0xe000ed20
 800f5c4:	200000b4 	.word	0x200000b4
 800f5c8:	e000ef34 	.word	0xe000ef34

0800f5cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b083      	sub	sp, #12
 800f5d0:	af00      	add	r7, sp, #0
	__asm volatile
 800f5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5d6:	b672      	cpsid	i
 800f5d8:	f383 8811 	msr	BASEPRI, r3
 800f5dc:	f3bf 8f6f 	isb	sy
 800f5e0:	f3bf 8f4f 	dsb	sy
 800f5e4:	b662      	cpsie	i
 800f5e6:	607b      	str	r3, [r7, #4]
}
 800f5e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f5ea:	4b11      	ldr	r3, [pc, #68]	@ (800f630 <vPortEnterCritical+0x64>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	4a0f      	ldr	r2, [pc, #60]	@ (800f630 <vPortEnterCritical+0x64>)
 800f5f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f5f4:	4b0e      	ldr	r3, [pc, #56]	@ (800f630 <vPortEnterCritical+0x64>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	2b01      	cmp	r3, #1
 800f5fa:	d112      	bne.n	800f622 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f5fc:	4b0d      	ldr	r3, [pc, #52]	@ (800f634 <vPortEnterCritical+0x68>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	b2db      	uxtb	r3, r3
 800f602:	2b00      	cmp	r3, #0
 800f604:	d00d      	beq.n	800f622 <vPortEnterCritical+0x56>
	__asm volatile
 800f606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f60a:	b672      	cpsid	i
 800f60c:	f383 8811 	msr	BASEPRI, r3
 800f610:	f3bf 8f6f 	isb	sy
 800f614:	f3bf 8f4f 	dsb	sy
 800f618:	b662      	cpsie	i
 800f61a:	603b      	str	r3, [r7, #0]
}
 800f61c:	bf00      	nop
 800f61e:	bf00      	nop
 800f620:	e7fd      	b.n	800f61e <vPortEnterCritical+0x52>
	}
}
 800f622:	bf00      	nop
 800f624:	370c      	adds	r7, #12
 800f626:	46bd      	mov	sp, r7
 800f628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62c:	4770      	bx	lr
 800f62e:	bf00      	nop
 800f630:	200000b4 	.word	0x200000b4
 800f634:	e000ed04 	.word	0xe000ed04

0800f638 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f638:	b480      	push	{r7}
 800f63a:	b083      	sub	sp, #12
 800f63c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f63e:	4b13      	ldr	r3, [pc, #76]	@ (800f68c <vPortExitCritical+0x54>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d10d      	bne.n	800f662 <vPortExitCritical+0x2a>
	__asm volatile
 800f646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f64a:	b672      	cpsid	i
 800f64c:	f383 8811 	msr	BASEPRI, r3
 800f650:	f3bf 8f6f 	isb	sy
 800f654:	f3bf 8f4f 	dsb	sy
 800f658:	b662      	cpsie	i
 800f65a:	607b      	str	r3, [r7, #4]
}
 800f65c:	bf00      	nop
 800f65e:	bf00      	nop
 800f660:	e7fd      	b.n	800f65e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800f662:	4b0a      	ldr	r3, [pc, #40]	@ (800f68c <vPortExitCritical+0x54>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	3b01      	subs	r3, #1
 800f668:	4a08      	ldr	r2, [pc, #32]	@ (800f68c <vPortExitCritical+0x54>)
 800f66a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f66c:	4b07      	ldr	r3, [pc, #28]	@ (800f68c <vPortExitCritical+0x54>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d105      	bne.n	800f680 <vPortExitCritical+0x48>
 800f674:	2300      	movs	r3, #0
 800f676:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	f383 8811 	msr	BASEPRI, r3
}
 800f67e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f680:	bf00      	nop
 800f682:	370c      	adds	r7, #12
 800f684:	46bd      	mov	sp, r7
 800f686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68a:	4770      	bx	lr
 800f68c:	200000b4 	.word	0x200000b4

0800f690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f690:	f3ef 8009 	mrs	r0, PSP
 800f694:	f3bf 8f6f 	isb	sy
 800f698:	4b15      	ldr	r3, [pc, #84]	@ (800f6f0 <pxCurrentTCBConst>)
 800f69a:	681a      	ldr	r2, [r3, #0]
 800f69c:	f01e 0f10 	tst.w	lr, #16
 800f6a0:	bf08      	it	eq
 800f6a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f6a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6aa:	6010      	str	r0, [r2, #0]
 800f6ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f6b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f6b4:	b672      	cpsid	i
 800f6b6:	f380 8811 	msr	BASEPRI, r0
 800f6ba:	f3bf 8f4f 	dsb	sy
 800f6be:	f3bf 8f6f 	isb	sy
 800f6c2:	b662      	cpsie	i
 800f6c4:	f7ff f9d0 	bl	800ea68 <vTaskSwitchContext>
 800f6c8:	f04f 0000 	mov.w	r0, #0
 800f6cc:	f380 8811 	msr	BASEPRI, r0
 800f6d0:	bc09      	pop	{r0, r3}
 800f6d2:	6819      	ldr	r1, [r3, #0]
 800f6d4:	6808      	ldr	r0, [r1, #0]
 800f6d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6da:	f01e 0f10 	tst.w	lr, #16
 800f6de:	bf08      	it	eq
 800f6e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f6e4:	f380 8809 	msr	PSP, r0
 800f6e8:	f3bf 8f6f 	isb	sy
 800f6ec:	4770      	bx	lr
 800f6ee:	bf00      	nop

0800f6f0 <pxCurrentTCBConst>:
 800f6f0:	20005294 	.word	0x20005294
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f6f4:	bf00      	nop
 800f6f6:	bf00      	nop

0800f6f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
	__asm volatile
 800f6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f702:	b672      	cpsid	i
 800f704:	f383 8811 	msr	BASEPRI, r3
 800f708:	f3bf 8f6f 	isb	sy
 800f70c:	f3bf 8f4f 	dsb	sy
 800f710:	b662      	cpsie	i
 800f712:	607b      	str	r3, [r7, #4]
}
 800f714:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f716:	f7ff f8eb 	bl	800e8f0 <xTaskIncrementTick>
 800f71a:	4603      	mov	r3, r0
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d003      	beq.n	800f728 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f720:	4b06      	ldr	r3, [pc, #24]	@ (800f73c <SysTick_Handler+0x44>)
 800f722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f726:	601a      	str	r2, [r3, #0]
 800f728:	2300      	movs	r3, #0
 800f72a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	f383 8811 	msr	BASEPRI, r3
}
 800f732:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f734:	bf00      	nop
 800f736:	3708      	adds	r7, #8
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}
 800f73c:	e000ed04 	.word	0xe000ed04

0800f740 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f740:	b480      	push	{r7}
 800f742:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f744:	4b0b      	ldr	r3, [pc, #44]	@ (800f774 <vPortSetupTimerInterrupt+0x34>)
 800f746:	2200      	movs	r2, #0
 800f748:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f74a:	4b0b      	ldr	r3, [pc, #44]	@ (800f778 <vPortSetupTimerInterrupt+0x38>)
 800f74c:	2200      	movs	r2, #0
 800f74e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f750:	4b0a      	ldr	r3, [pc, #40]	@ (800f77c <vPortSetupTimerInterrupt+0x3c>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	4a0a      	ldr	r2, [pc, #40]	@ (800f780 <vPortSetupTimerInterrupt+0x40>)
 800f756:	fba2 2303 	umull	r2, r3, r2, r3
 800f75a:	099b      	lsrs	r3, r3, #6
 800f75c:	4a09      	ldr	r2, [pc, #36]	@ (800f784 <vPortSetupTimerInterrupt+0x44>)
 800f75e:	3b01      	subs	r3, #1
 800f760:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f762:	4b04      	ldr	r3, [pc, #16]	@ (800f774 <vPortSetupTimerInterrupt+0x34>)
 800f764:	2207      	movs	r2, #7
 800f766:	601a      	str	r2, [r3, #0]
}
 800f768:	bf00      	nop
 800f76a:	46bd      	mov	sp, r7
 800f76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f770:	4770      	bx	lr
 800f772:	bf00      	nop
 800f774:	e000e010 	.word	0xe000e010
 800f778:	e000e018 	.word	0xe000e018
 800f77c:	20000008 	.word	0x20000008
 800f780:	10624dd3 	.word	0x10624dd3
 800f784:	e000e014 	.word	0xe000e014

0800f788 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f788:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f798 <vPortEnableVFP+0x10>
 800f78c:	6801      	ldr	r1, [r0, #0]
 800f78e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f792:	6001      	str	r1, [r0, #0]
 800f794:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f796:	bf00      	nop
 800f798:	e000ed88 	.word	0xe000ed88

0800f79c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f79c:	b480      	push	{r7}
 800f79e:	b085      	sub	sp, #20
 800f7a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f7a2:	f3ef 8305 	mrs	r3, IPSR
 800f7a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	2b0f      	cmp	r3, #15
 800f7ac:	d917      	bls.n	800f7de <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f7ae:	4a1a      	ldr	r2, [pc, #104]	@ (800f818 <vPortValidateInterruptPriority+0x7c>)
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	4413      	add	r3, r2
 800f7b4:	781b      	ldrb	r3, [r3, #0]
 800f7b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f7b8:	4b18      	ldr	r3, [pc, #96]	@ (800f81c <vPortValidateInterruptPriority+0x80>)
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	7afa      	ldrb	r2, [r7, #11]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d20d      	bcs.n	800f7de <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800f7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7c6:	b672      	cpsid	i
 800f7c8:	f383 8811 	msr	BASEPRI, r3
 800f7cc:	f3bf 8f6f 	isb	sy
 800f7d0:	f3bf 8f4f 	dsb	sy
 800f7d4:	b662      	cpsie	i
 800f7d6:	607b      	str	r3, [r7, #4]
}
 800f7d8:	bf00      	nop
 800f7da:	bf00      	nop
 800f7dc:	e7fd      	b.n	800f7da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f7de:	4b10      	ldr	r3, [pc, #64]	@ (800f820 <vPortValidateInterruptPriority+0x84>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f7e6:	4b0f      	ldr	r3, [pc, #60]	@ (800f824 <vPortValidateInterruptPriority+0x88>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d90d      	bls.n	800f80a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800f7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7f2:	b672      	cpsid	i
 800f7f4:	f383 8811 	msr	BASEPRI, r3
 800f7f8:	f3bf 8f6f 	isb	sy
 800f7fc:	f3bf 8f4f 	dsb	sy
 800f800:	b662      	cpsie	i
 800f802:	603b      	str	r3, [r7, #0]
}
 800f804:	bf00      	nop
 800f806:	bf00      	nop
 800f808:	e7fd      	b.n	800f806 <vPortValidateInterruptPriority+0x6a>
	}
 800f80a:	bf00      	nop
 800f80c:	3714      	adds	r7, #20
 800f80e:	46bd      	mov	sp, r7
 800f810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f814:	4770      	bx	lr
 800f816:	bf00      	nop
 800f818:	e000e3f0 	.word	0xe000e3f0
 800f81c:	200053c0 	.word	0x200053c0
 800f820:	e000ed0c 	.word	0xe000ed0c
 800f824:	200053c4 	.word	0x200053c4

0800f828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b08a      	sub	sp, #40	@ 0x28
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f830:	2300      	movs	r3, #0
 800f832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f834:	f7fe ff8c 	bl	800e750 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f838:	4b5d      	ldr	r3, [pc, #372]	@ (800f9b0 <pvPortMalloc+0x188>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d101      	bne.n	800f844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f840:	f000 f920 	bl	800fa84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f844:	4b5b      	ldr	r3, [pc, #364]	@ (800f9b4 <pvPortMalloc+0x18c>)
 800f846:	681a      	ldr	r2, [r3, #0]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	4013      	ands	r3, r2
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	f040 8094 	bne.w	800f97a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d020      	beq.n	800f89a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800f858:	2208      	movs	r2, #8
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	4413      	add	r3, r2
 800f85e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f003 0307 	and.w	r3, r3, #7
 800f866:	2b00      	cmp	r3, #0
 800f868:	d017      	beq.n	800f89a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f023 0307 	bic.w	r3, r3, #7
 800f870:	3308      	adds	r3, #8
 800f872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f003 0307 	and.w	r3, r3, #7
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d00d      	beq.n	800f89a <pvPortMalloc+0x72>
	__asm volatile
 800f87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f882:	b672      	cpsid	i
 800f884:	f383 8811 	msr	BASEPRI, r3
 800f888:	f3bf 8f6f 	isb	sy
 800f88c:	f3bf 8f4f 	dsb	sy
 800f890:	b662      	cpsie	i
 800f892:	617b      	str	r3, [r7, #20]
}
 800f894:	bf00      	nop
 800f896:	bf00      	nop
 800f898:	e7fd      	b.n	800f896 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d06c      	beq.n	800f97a <pvPortMalloc+0x152>
 800f8a0:	4b45      	ldr	r3, [pc, #276]	@ (800f9b8 <pvPortMalloc+0x190>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	687a      	ldr	r2, [r7, #4]
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	d867      	bhi.n	800f97a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f8aa:	4b44      	ldr	r3, [pc, #272]	@ (800f9bc <pvPortMalloc+0x194>)
 800f8ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f8ae:	4b43      	ldr	r3, [pc, #268]	@ (800f9bc <pvPortMalloc+0x194>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f8b4:	e004      	b.n	800f8c0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800f8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8c2:	685b      	ldr	r3, [r3, #4]
 800f8c4:	687a      	ldr	r2, [r7, #4]
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d903      	bls.n	800f8d2 <pvPortMalloc+0xaa>
 800f8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d1f1      	bne.n	800f8b6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f8d2:	4b37      	ldr	r3, [pc, #220]	@ (800f9b0 <pvPortMalloc+0x188>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d04e      	beq.n	800f97a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f8dc:	6a3b      	ldr	r3, [r7, #32]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	2208      	movs	r2, #8
 800f8e2:	4413      	add	r3, r2
 800f8e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8e8:	681a      	ldr	r2, [r3, #0]
 800f8ea:	6a3b      	ldr	r3, [r7, #32]
 800f8ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f0:	685a      	ldr	r2, [r3, #4]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	1ad2      	subs	r2, r2, r3
 800f8f6:	2308      	movs	r3, #8
 800f8f8:	005b      	lsls	r3, r3, #1
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d922      	bls.n	800f944 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f8fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	4413      	add	r3, r2
 800f904:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f906:	69bb      	ldr	r3, [r7, #24]
 800f908:	f003 0307 	and.w	r3, r3, #7
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d00d      	beq.n	800f92c <pvPortMalloc+0x104>
	__asm volatile
 800f910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f914:	b672      	cpsid	i
 800f916:	f383 8811 	msr	BASEPRI, r3
 800f91a:	f3bf 8f6f 	isb	sy
 800f91e:	f3bf 8f4f 	dsb	sy
 800f922:	b662      	cpsie	i
 800f924:	613b      	str	r3, [r7, #16]
}
 800f926:	bf00      	nop
 800f928:	bf00      	nop
 800f92a:	e7fd      	b.n	800f928 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f92e:	685a      	ldr	r2, [r3, #4]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	1ad2      	subs	r2, r2, r3
 800f934:	69bb      	ldr	r3, [r7, #24]
 800f936:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f93a:	687a      	ldr	r2, [r7, #4]
 800f93c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f93e:	69b8      	ldr	r0, [r7, #24]
 800f940:	f000 f902 	bl	800fb48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f944:	4b1c      	ldr	r3, [pc, #112]	@ (800f9b8 <pvPortMalloc+0x190>)
 800f946:	681a      	ldr	r2, [r3, #0]
 800f948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f94a:	685b      	ldr	r3, [r3, #4]
 800f94c:	1ad3      	subs	r3, r2, r3
 800f94e:	4a1a      	ldr	r2, [pc, #104]	@ (800f9b8 <pvPortMalloc+0x190>)
 800f950:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f952:	4b19      	ldr	r3, [pc, #100]	@ (800f9b8 <pvPortMalloc+0x190>)
 800f954:	681a      	ldr	r2, [r3, #0]
 800f956:	4b1a      	ldr	r3, [pc, #104]	@ (800f9c0 <pvPortMalloc+0x198>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d203      	bcs.n	800f966 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f95e:	4b16      	ldr	r3, [pc, #88]	@ (800f9b8 <pvPortMalloc+0x190>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	4a17      	ldr	r2, [pc, #92]	@ (800f9c0 <pvPortMalloc+0x198>)
 800f964:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f968:	685a      	ldr	r2, [r3, #4]
 800f96a:	4b12      	ldr	r3, [pc, #72]	@ (800f9b4 <pvPortMalloc+0x18c>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	431a      	orrs	r2, r3
 800f970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f972:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f976:	2200      	movs	r2, #0
 800f978:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f97a:	f7fe fef7 	bl	800e76c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f97e:	69fb      	ldr	r3, [r7, #28]
 800f980:	f003 0307 	and.w	r3, r3, #7
 800f984:	2b00      	cmp	r3, #0
 800f986:	d00d      	beq.n	800f9a4 <pvPortMalloc+0x17c>
	__asm volatile
 800f988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f98c:	b672      	cpsid	i
 800f98e:	f383 8811 	msr	BASEPRI, r3
 800f992:	f3bf 8f6f 	isb	sy
 800f996:	f3bf 8f4f 	dsb	sy
 800f99a:	b662      	cpsie	i
 800f99c:	60fb      	str	r3, [r7, #12]
}
 800f99e:	bf00      	nop
 800f9a0:	bf00      	nop
 800f9a2:	e7fd      	b.n	800f9a0 <pvPortMalloc+0x178>
	return pvReturn;
 800f9a4:	69fb      	ldr	r3, [r7, #28]
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3728      	adds	r7, #40	@ 0x28
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	2000b3d0 	.word	0x2000b3d0
 800f9b4:	2000b3dc 	.word	0x2000b3dc
 800f9b8:	2000b3d4 	.word	0x2000b3d4
 800f9bc:	2000b3c8 	.word	0x2000b3c8
 800f9c0:	2000b3d8 	.word	0x2000b3d8

0800f9c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b086      	sub	sp, #24
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d04e      	beq.n	800fa74 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f9d6:	2308      	movs	r3, #8
 800f9d8:	425b      	negs	r3, r3
 800f9da:	697a      	ldr	r2, [r7, #20]
 800f9dc:	4413      	add	r3, r2
 800f9de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	685a      	ldr	r2, [r3, #4]
 800f9e8:	4b24      	ldr	r3, [pc, #144]	@ (800fa7c <vPortFree+0xb8>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	4013      	ands	r3, r2
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d10d      	bne.n	800fa0e <vPortFree+0x4a>
	__asm volatile
 800f9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9f6:	b672      	cpsid	i
 800f9f8:	f383 8811 	msr	BASEPRI, r3
 800f9fc:	f3bf 8f6f 	isb	sy
 800fa00:	f3bf 8f4f 	dsb	sy
 800fa04:	b662      	cpsie	i
 800fa06:	60fb      	str	r3, [r7, #12]
}
 800fa08:	bf00      	nop
 800fa0a:	bf00      	nop
 800fa0c:	e7fd      	b.n	800fa0a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d00d      	beq.n	800fa32 <vPortFree+0x6e>
	__asm volatile
 800fa16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa1a:	b672      	cpsid	i
 800fa1c:	f383 8811 	msr	BASEPRI, r3
 800fa20:	f3bf 8f6f 	isb	sy
 800fa24:	f3bf 8f4f 	dsb	sy
 800fa28:	b662      	cpsie	i
 800fa2a:	60bb      	str	r3, [r7, #8]
}
 800fa2c:	bf00      	nop
 800fa2e:	bf00      	nop
 800fa30:	e7fd      	b.n	800fa2e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	685a      	ldr	r2, [r3, #4]
 800fa36:	4b11      	ldr	r3, [pc, #68]	@ (800fa7c <vPortFree+0xb8>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	4013      	ands	r3, r2
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d019      	beq.n	800fa74 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d115      	bne.n	800fa74 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	685a      	ldr	r2, [r3, #4]
 800fa4c:	4b0b      	ldr	r3, [pc, #44]	@ (800fa7c <vPortFree+0xb8>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	43db      	mvns	r3, r3
 800fa52:	401a      	ands	r2, r3
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fa58:	f7fe fe7a 	bl	800e750 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fa5c:	693b      	ldr	r3, [r7, #16]
 800fa5e:	685a      	ldr	r2, [r3, #4]
 800fa60:	4b07      	ldr	r3, [pc, #28]	@ (800fa80 <vPortFree+0xbc>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	4413      	add	r3, r2
 800fa66:	4a06      	ldr	r2, [pc, #24]	@ (800fa80 <vPortFree+0xbc>)
 800fa68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fa6a:	6938      	ldr	r0, [r7, #16]
 800fa6c:	f000 f86c 	bl	800fb48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fa70:	f7fe fe7c 	bl	800e76c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fa74:	bf00      	nop
 800fa76:	3718      	adds	r7, #24
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}
 800fa7c:	2000b3dc 	.word	0x2000b3dc
 800fa80:	2000b3d4 	.word	0x2000b3d4

0800fa84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fa84:	b480      	push	{r7}
 800fa86:	b085      	sub	sp, #20
 800fa88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fa8a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800fa8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fa90:	4b27      	ldr	r3, [pc, #156]	@ (800fb30 <prvHeapInit+0xac>)
 800fa92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	f003 0307 	and.w	r3, r3, #7
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d00c      	beq.n	800fab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	3307      	adds	r3, #7
 800faa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f023 0307 	bic.w	r3, r3, #7
 800faaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800faac:	68ba      	ldr	r2, [r7, #8]
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	1ad3      	subs	r3, r2, r3
 800fab2:	4a1f      	ldr	r2, [pc, #124]	@ (800fb30 <prvHeapInit+0xac>)
 800fab4:	4413      	add	r3, r2
 800fab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fabc:	4a1d      	ldr	r2, [pc, #116]	@ (800fb34 <prvHeapInit+0xb0>)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fac2:	4b1c      	ldr	r3, [pc, #112]	@ (800fb34 <prvHeapInit+0xb0>)
 800fac4:	2200      	movs	r2, #0
 800fac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	68ba      	ldr	r2, [r7, #8]
 800facc:	4413      	add	r3, r2
 800face:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fad0:	2208      	movs	r2, #8
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	1a9b      	subs	r3, r3, r2
 800fad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f023 0307 	bic.w	r3, r3, #7
 800fade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	4a15      	ldr	r2, [pc, #84]	@ (800fb38 <prvHeapInit+0xb4>)
 800fae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fae6:	4b14      	ldr	r3, [pc, #80]	@ (800fb38 <prvHeapInit+0xb4>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	2200      	movs	r2, #0
 800faec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800faee:	4b12      	ldr	r3, [pc, #72]	@ (800fb38 <prvHeapInit+0xb4>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	2200      	movs	r2, #0
 800faf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	68fa      	ldr	r2, [r7, #12]
 800fafe:	1ad2      	subs	r2, r2, r3
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fb04:	4b0c      	ldr	r3, [pc, #48]	@ (800fb38 <prvHeapInit+0xb4>)
 800fb06:	681a      	ldr	r2, [r3, #0]
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	4a0a      	ldr	r2, [pc, #40]	@ (800fb3c <prvHeapInit+0xb8>)
 800fb12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	685b      	ldr	r3, [r3, #4]
 800fb18:	4a09      	ldr	r2, [pc, #36]	@ (800fb40 <prvHeapInit+0xbc>)
 800fb1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fb1c:	4b09      	ldr	r3, [pc, #36]	@ (800fb44 <prvHeapInit+0xc0>)
 800fb1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fb22:	601a      	str	r2, [r3, #0]
}
 800fb24:	bf00      	nop
 800fb26:	3714      	adds	r7, #20
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr
 800fb30:	200053c8 	.word	0x200053c8
 800fb34:	2000b3c8 	.word	0x2000b3c8
 800fb38:	2000b3d0 	.word	0x2000b3d0
 800fb3c:	2000b3d8 	.word	0x2000b3d8
 800fb40:	2000b3d4 	.word	0x2000b3d4
 800fb44:	2000b3dc 	.word	0x2000b3dc

0800fb48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fb48:	b480      	push	{r7}
 800fb4a:	b085      	sub	sp, #20
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fb50:	4b28      	ldr	r3, [pc, #160]	@ (800fbf4 <prvInsertBlockIntoFreeList+0xac>)
 800fb52:	60fb      	str	r3, [r7, #12]
 800fb54:	e002      	b.n	800fb5c <prvInsertBlockIntoFreeList+0x14>
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	60fb      	str	r3, [r7, #12]
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	687a      	ldr	r2, [r7, #4]
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d8f7      	bhi.n	800fb56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	685b      	ldr	r3, [r3, #4]
 800fb6e:	68ba      	ldr	r2, [r7, #8]
 800fb70:	4413      	add	r3, r2
 800fb72:	687a      	ldr	r2, [r7, #4]
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d108      	bne.n	800fb8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	685a      	ldr	r2, [r3, #4]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	685b      	ldr	r3, [r3, #4]
 800fb80:	441a      	add	r2, r3
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	685b      	ldr	r3, [r3, #4]
 800fb92:	68ba      	ldr	r2, [r7, #8]
 800fb94:	441a      	add	r2, r3
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d118      	bne.n	800fbd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	681a      	ldr	r2, [r3, #0]
 800fba2:	4b15      	ldr	r3, [pc, #84]	@ (800fbf8 <prvInsertBlockIntoFreeList+0xb0>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d00d      	beq.n	800fbc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	685a      	ldr	r2, [r3, #4]
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	441a      	add	r2, r3
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	681a      	ldr	r2, [r3, #0]
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	601a      	str	r2, [r3, #0]
 800fbc4:	e008      	b.n	800fbd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fbc6:	4b0c      	ldr	r3, [pc, #48]	@ (800fbf8 <prvInsertBlockIntoFreeList+0xb0>)
 800fbc8:	681a      	ldr	r2, [r3, #0]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	601a      	str	r2, [r3, #0]
 800fbce:	e003      	b.n	800fbd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	681a      	ldr	r2, [r3, #0]
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fbd8:	68fa      	ldr	r2, [r7, #12]
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	d002      	beq.n	800fbe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	687a      	ldr	r2, [r7, #4]
 800fbe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fbe6:	bf00      	nop
 800fbe8:	3714      	adds	r7, #20
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr
 800fbf2:	bf00      	nop
 800fbf4:	2000b3c8 	.word	0x2000b3c8
 800fbf8:	2000b3d0 	.word	0x2000b3d0

0800fbfc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b084      	sub	sp, #16
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	330c      	adds	r3, #12
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	6839      	ldr	r1, [r7, #0]
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f002 fa73 	bl	80120fc <tcpip_send_msg_wait_sem>
 800fc16:	4603      	mov	r3, r0
 800fc18:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800fc1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d103      	bne.n	800fc2a <netconn_apimsg+0x2e>
    return apimsg->err;
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fc28:	e001      	b.n	800fc2e <netconn_apimsg+0x32>
  }
  return err;
 800fc2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3710      	adds	r7, #16
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
	...

0800fc38 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b08c      	sub	sp, #48	@ 0x30
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	4603      	mov	r3, r0
 800fc40:	603a      	str	r2, [r7, #0]
 800fc42:	71fb      	strb	r3, [r7, #7]
 800fc44:	460b      	mov	r3, r1
 800fc46:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800fc48:	79fb      	ldrb	r3, [r7, #7]
 800fc4a:	6839      	ldr	r1, [r7, #0]
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f001 f923 	bl	8010e98 <netconn_alloc>
 800fc52:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800fc54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d054      	beq.n	800fd04 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800fc5a:	79bb      	ldrb	r3, [r7, #6]
 800fc5c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800fc5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc60:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800fc62:	f107 0308 	add.w	r3, r7, #8
 800fc66:	4619      	mov	r1, r3
 800fc68:	4829      	ldr	r0, [pc, #164]	@ (800fd10 <netconn_new_with_proto_and_callback+0xd8>)
 800fc6a:	f7ff ffc7 	bl	800fbfc <netconn_apimsg>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800fc74:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d043      	beq.n	800fd04 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800fc7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc7e:	685b      	ldr	r3, [r3, #4]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d005      	beq.n	800fc90 <netconn_new_with_proto_and_callback+0x58>
 800fc84:	4b23      	ldr	r3, [pc, #140]	@ (800fd14 <netconn_new_with_proto_and_callback+0xdc>)
 800fc86:	22a3      	movs	r2, #163	@ 0xa3
 800fc88:	4923      	ldr	r1, [pc, #140]	@ (800fd18 <netconn_new_with_proto_and_callback+0xe0>)
 800fc8a:	4824      	ldr	r0, [pc, #144]	@ (800fd1c <netconn_new_with_proto_and_callback+0xe4>)
 800fc8c:	f00e fa5e 	bl	801e14c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800fc90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc92:	3310      	adds	r3, #16
 800fc94:	4618      	mov	r0, r3
 800fc96:	f00d f9cc 	bl	801d032 <sys_mbox_valid>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d105      	bne.n	800fcac <netconn_new_with_proto_and_callback+0x74>
 800fca0:	4b1c      	ldr	r3, [pc, #112]	@ (800fd14 <netconn_new_with_proto_and_callback+0xdc>)
 800fca2:	22a4      	movs	r2, #164	@ 0xa4
 800fca4:	491e      	ldr	r1, [pc, #120]	@ (800fd20 <netconn_new_with_proto_and_callback+0xe8>)
 800fca6:	481d      	ldr	r0, [pc, #116]	@ (800fd1c <netconn_new_with_proto_and_callback+0xe4>)
 800fca8:	f00e fa50 	bl	801e14c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800fcac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcae:	3314      	adds	r3, #20
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f00d f9be 	bl	801d032 <sys_mbox_valid>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d005      	beq.n	800fcc8 <netconn_new_with_proto_and_callback+0x90>
 800fcbc:	4b15      	ldr	r3, [pc, #84]	@ (800fd14 <netconn_new_with_proto_and_callback+0xdc>)
 800fcbe:	22a6      	movs	r2, #166	@ 0xa6
 800fcc0:	4918      	ldr	r1, [pc, #96]	@ (800fd24 <netconn_new_with_proto_and_callback+0xec>)
 800fcc2:	4816      	ldr	r0, [pc, #88]	@ (800fd1c <netconn_new_with_proto_and_callback+0xe4>)
 800fcc4:	f00e fa42 	bl	801e14c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800fcc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcca:	330c      	adds	r3, #12
 800fccc:	4618      	mov	r0, r3
 800fcce:	f00d fa41 	bl	801d154 <sys_sem_valid>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d105      	bne.n	800fce4 <netconn_new_with_proto_and_callback+0xac>
 800fcd8:	4b0e      	ldr	r3, [pc, #56]	@ (800fd14 <netconn_new_with_proto_and_callback+0xdc>)
 800fcda:	22a9      	movs	r2, #169	@ 0xa9
 800fcdc:	4912      	ldr	r1, [pc, #72]	@ (800fd28 <netconn_new_with_proto_and_callback+0xf0>)
 800fcde:	480f      	ldr	r0, [pc, #60]	@ (800fd1c <netconn_new_with_proto_and_callback+0xe4>)
 800fce0:	f00e fa34 	bl	801e14c <iprintf>
      sys_sem_free(&conn->op_completed);
 800fce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fce6:	330c      	adds	r3, #12
 800fce8:	4618      	mov	r0, r3
 800fcea:	f00d fa26 	bl	801d13a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800fcee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcf0:	3310      	adds	r3, #16
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f00d f916 	bl	801cf24 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800fcf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fcfa:	2007      	movs	r0, #7
 800fcfc:	f002 fff0 	bl	8012ce0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800fd00:	2300      	movs	r3, #0
 800fd02:	e000      	b.n	800fd06 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800fd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	3730      	adds	r7, #48	@ 0x30
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}
 800fd0e:	bf00      	nop
 800fd10:	08010e6d 	.word	0x08010e6d
 800fd14:	0801f520 	.word	0x0801f520
 800fd18:	0801f554 	.word	0x0801f554
 800fd1c:	0801f578 	.word	0x0801f578
 800fd20:	0801f5a0 	.word	0x0801f5a0
 800fd24:	0801f5b8 	.word	0x0801f5b8
 800fd28:	0801f5dc 	.word	0x0801f5dc

0800fd2c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b08c      	sub	sp, #48	@ 0x30
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d101      	bne.n	800fd3e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	e014      	b.n	800fd68 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800fd42:	2329      	movs	r3, #41	@ 0x29
 800fd44:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800fd46:	f107 030c 	add.w	r3, r7, #12
 800fd4a:	4619      	mov	r1, r3
 800fd4c:	4808      	ldr	r0, [pc, #32]	@ (800fd70 <netconn_prepare_delete+0x44>)
 800fd4e:	f7ff ff55 	bl	800fbfc <netconn_apimsg>
 800fd52:	4603      	mov	r3, r0
 800fd54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800fd58:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d002      	beq.n	800fd66 <netconn_prepare_delete+0x3a>
    return err;
 800fd60:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800fd64:	e000      	b.n	800fd68 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800fd66:	2300      	movs	r3, #0
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3730      	adds	r7, #48	@ 0x30
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	080113d9 	.word	0x080113d9

0800fd74 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b084      	sub	sp, #16
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d101      	bne.n	800fd86 <netconn_delete+0x12>
    return ERR_OK;
 800fd82:	2300      	movs	r3, #0
 800fd84:	e00d      	b.n	800fda2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f7ff ffd0 	bl	800fd2c <netconn_prepare_delete>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800fd90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d102      	bne.n	800fd9e <netconn_delete+0x2a>
    netconn_free(conn);
 800fd98:	6878      	ldr	r0, [r7, #4]
 800fd9a:	f001 f8eb 	bl	8010f74 <netconn_free>
  }
  return err;
 800fd9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3710      	adds	r7, #16
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
	...

0800fdac <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b08e      	sub	sp, #56	@ 0x38
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	60b9      	str	r1, [r7, #8]
 800fdb6:	4613      	mov	r3, r2
 800fdb8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d109      	bne.n	800fdd4 <netconn_bind+0x28>
 800fdc0:	4b11      	ldr	r3, [pc, #68]	@ (800fe08 <netconn_bind+0x5c>)
 800fdc2:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800fdc6:	4911      	ldr	r1, [pc, #68]	@ (800fe0c <netconn_bind+0x60>)
 800fdc8:	4811      	ldr	r0, [pc, #68]	@ (800fe10 <netconn_bind+0x64>)
 800fdca:	f00e f9bf 	bl	801e14c <iprintf>
 800fdce:	f06f 030f 	mvn.w	r3, #15
 800fdd2:	e015      	b.n	800fe00 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d101      	bne.n	800fdde <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800fdda:	4b0e      	ldr	r3, [pc, #56]	@ (800fe14 <netconn_bind+0x68>)
 800fddc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800fde6:	88fb      	ldrh	r3, [r7, #6]
 800fde8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800fdea:	f107 0314 	add.w	r3, r7, #20
 800fdee:	4619      	mov	r1, r3
 800fdf0:	4809      	ldr	r0, [pc, #36]	@ (800fe18 <netconn_bind+0x6c>)
 800fdf2:	f7ff ff03 	bl	800fbfc <netconn_apimsg>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800fdfc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3738      	adds	r7, #56	@ 0x38
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	0801f520 	.word	0x0801f520
 800fe0c:	0801f658 	.word	0x0801f658
 800fe10:	0801f578 	.word	0x0801f578
 800fe14:	08068488 	.word	0x08068488
 800fe18:	080115a1 	.word	0x080115a1

0800fe1c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b08c      	sub	sp, #48	@ 0x30
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	460b      	mov	r3, r1
 800fe26:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d109      	bne.n	800fe42 <netconn_listen_with_backlog+0x26>
 800fe2e:	4b0d      	ldr	r3, [pc, #52]	@ (800fe64 <netconn_listen_with_backlog+0x48>)
 800fe30:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800fe34:	490c      	ldr	r1, [pc, #48]	@ (800fe68 <netconn_listen_with_backlog+0x4c>)
 800fe36:	480d      	ldr	r0, [pc, #52]	@ (800fe6c <netconn_listen_with_backlog+0x50>)
 800fe38:	f00e f988 	bl	801e14c <iprintf>
 800fe3c:	f06f 030f 	mvn.w	r3, #15
 800fe40:	e00c      	b.n	800fe5c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800fe46:	f107 030c 	add.w	r3, r7, #12
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	4808      	ldr	r0, [pc, #32]	@ (800fe70 <netconn_listen_with_backlog+0x54>)
 800fe4e:	f7ff fed5 	bl	800fbfc <netconn_apimsg>
 800fe52:	4603      	mov	r3, r0
 800fe54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800fe58:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3730      	adds	r7, #48	@ 0x30
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}
 800fe64:	0801f520 	.word	0x0801f520
 800fe68:	0801f6d8 	.word	0x0801f6d8
 800fe6c:	0801f578 	.word	0x0801f578
 800fe70:	08011615 	.word	0x08011615

0800fe74 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b086      	sub	sp, #24
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d109      	bne.n	800fe98 <netconn_accept+0x24>
 800fe84:	4b3d      	ldr	r3, [pc, #244]	@ (800ff7c <netconn_accept+0x108>)
 800fe86:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800fe8a:	493d      	ldr	r1, [pc, #244]	@ (800ff80 <netconn_accept+0x10c>)
 800fe8c:	483d      	ldr	r0, [pc, #244]	@ (800ff84 <netconn_accept+0x110>)
 800fe8e:	f00e f95d 	bl	801e14c <iprintf>
 800fe92:	f06f 030f 	mvn.w	r3, #15
 800fe96:	e06c      	b.n	800ff72 <netconn_accept+0xfe>
  *new_conn = NULL;
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d109      	bne.n	800feb8 <netconn_accept+0x44>
 800fea4:	4b35      	ldr	r3, [pc, #212]	@ (800ff7c <netconn_accept+0x108>)
 800fea6:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800feaa:	4937      	ldr	r1, [pc, #220]	@ (800ff88 <netconn_accept+0x114>)
 800feac:	4835      	ldr	r0, [pc, #212]	@ (800ff84 <netconn_accept+0x110>)
 800feae:	f00e f94d 	bl	801e14c <iprintf>
 800feb2:	f06f 030f 	mvn.w	r3, #15
 800feb6:	e05c      	b.n	800ff72 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f000 fb6c 	bl	8010596 <netconn_err>
 800febe:	4603      	mov	r3, r0
 800fec0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800fec2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d002      	beq.n	800fed0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800feca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fece:	e050      	b.n	800ff72 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	3314      	adds	r3, #20
 800fed4:	4618      	mov	r0, r3
 800fed6:	f00d f8ac 	bl	801d032 <sys_mbox_valid>
 800feda:	4603      	mov	r3, r0
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d005      	beq.n	800feec <netconn_accept+0x78>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	7f1b      	ldrb	r3, [r3, #28]
 800fee4:	f003 0301 	and.w	r3, r3, #1
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d002      	beq.n	800fef2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800feec:	f06f 030e 	mvn.w	r3, #14
 800fef0:	e03f      	b.n	800ff72 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	7f1b      	ldrb	r3, [r3, #28]
 800fef6:	f003 0302 	and.w	r3, r3, #2
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d00e      	beq.n	800ff1c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	3314      	adds	r3, #20
 800ff02:	f107 020c 	add.w	r2, r7, #12
 800ff06:	4611      	mov	r1, r2
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f00d f876 	bl	801cffa <sys_arch_mbox_tryfetch>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff14:	d10a      	bne.n	800ff2c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800ff16:	f06f 0306 	mvn.w	r3, #6
 800ff1a:	e02a      	b.n	800ff72 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	3314      	adds	r3, #20
 800ff20:	f107 010c 	add.w	r1, r7, #12
 800ff24:	2200      	movs	r2, #0
 800ff26:	4618      	mov	r0, r3
 800ff28:	f00d f828 	bl	801cf7c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d005      	beq.n	800ff40 <netconn_accept+0xcc>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff38:	2200      	movs	r2, #0
 800ff3a:	2101      	movs	r1, #1
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	f107 0213 	add.w	r2, r7, #19
 800ff46:	4611      	mov	r1, r2
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f000 fb75 	bl	8010638 <lwip_netconn_is_err_msg>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d002      	beq.n	800ff5a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800ff54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff58:	e00b      	b.n	800ff72 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d102      	bne.n	800ff66 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800ff60:	f06f 030e 	mvn.w	r3, #14
 800ff64:	e005      	b.n	800ff72 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	697a      	ldr	r2, [r7, #20]
 800ff6e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800ff70:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ff72:	4618      	mov	r0, r3
 800ff74:	3718      	adds	r7, #24
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}
 800ff7a:	bf00      	nop
 800ff7c:	0801f520 	.word	0x0801f520
 800ff80:	0801f6f8 	.word	0x0801f6f8
 800ff84:	0801f578 	.word	0x0801f578
 800ff88:	0801f718 	.word	0x0801f718

0800ff8c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b088      	sub	sp, #32
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	60f8      	str	r0, [r7, #12]
 800ff94:	60b9      	str	r1, [r7, #8]
 800ff96:	4613      	mov	r3, r2
 800ff98:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d109      	bne.n	800ffb8 <netconn_recv_data+0x2c>
 800ffa4:	4b58      	ldr	r3, [pc, #352]	@ (8010108 <netconn_recv_data+0x17c>)
 800ffa6:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800ffaa:	4958      	ldr	r1, [pc, #352]	@ (801010c <netconn_recv_data+0x180>)
 800ffac:	4858      	ldr	r0, [pc, #352]	@ (8010110 <netconn_recv_data+0x184>)
 800ffae:	f00e f8cd 	bl	801e14c <iprintf>
 800ffb2:	f06f 030f 	mvn.w	r3, #15
 800ffb6:	e0a2      	b.n	80100fe <netconn_recv_data+0x172>
  *new_buf = NULL;
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	2200      	movs	r2, #0
 800ffbc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d109      	bne.n	800ffd8 <netconn_recv_data+0x4c>
 800ffc4:	4b50      	ldr	r3, [pc, #320]	@ (8010108 <netconn_recv_data+0x17c>)
 800ffc6:	f240 224a 	movw	r2, #586	@ 0x24a
 800ffca:	4952      	ldr	r1, [pc, #328]	@ (8010114 <netconn_recv_data+0x188>)
 800ffcc:	4850      	ldr	r0, [pc, #320]	@ (8010110 <netconn_recv_data+0x184>)
 800ffce:	f00e f8bd 	bl	801e14c <iprintf>
 800ffd2:	f06f 030f 	mvn.w	r3, #15
 800ffd6:	e092      	b.n	80100fe <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	3310      	adds	r3, #16
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f00d f828 	bl	801d032 <sys_mbox_valid>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d10e      	bne.n	8010006 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800ffe8:	68f8      	ldr	r0, [r7, #12]
 800ffea:	f000 fad4 	bl	8010596 <netconn_err>
 800ffee:	4603      	mov	r3, r0
 800fff0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800fff2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d002      	beq.n	8010000 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800fffa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800fffe:	e07e      	b.n	80100fe <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8010000:	f06f 030a 	mvn.w	r3, #10
 8010004:	e07b      	b.n	80100fe <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	7f1b      	ldrb	r3, [r3, #28]
 801000a:	f003 0302 	and.w	r3, r3, #2
 801000e:	2b00      	cmp	r3, #0
 8010010:	d10f      	bne.n	8010032 <netconn_recv_data+0xa6>
 8010012:	79fb      	ldrb	r3, [r7, #7]
 8010014:	f003 0304 	and.w	r3, r3, #4
 8010018:	2b00      	cmp	r3, #0
 801001a:	d10a      	bne.n	8010032 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	7f1b      	ldrb	r3, [r3, #28]
 8010020:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8010024:	2b00      	cmp	r3, #0
 8010026:	d104      	bne.n	8010032 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d023      	beq.n	801007a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	3310      	adds	r3, #16
 8010036:	f107 0218 	add.w	r2, r7, #24
 801003a:	4611      	mov	r1, r2
 801003c:	4618      	mov	r0, r3
 801003e:	f00c ffdc 	bl	801cffa <sys_arch_mbox_tryfetch>
 8010042:	4603      	mov	r3, r0
 8010044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010048:	d11f      	bne.n	801008a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 801004a:	68f8      	ldr	r0, [r7, #12]
 801004c:	f000 faa3 	bl	8010596 <netconn_err>
 8010050:	4603      	mov	r3, r0
 8010052:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8010054:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d002      	beq.n	8010062 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 801005c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010060:	e04d      	b.n	80100fe <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	7f1b      	ldrb	r3, [r3, #28]
 8010066:	f003 0301 	and.w	r3, r3, #1
 801006a:	2b00      	cmp	r3, #0
 801006c:	d002      	beq.n	8010074 <netconn_recv_data+0xe8>
        return ERR_CONN;
 801006e:	f06f 030a 	mvn.w	r3, #10
 8010072:	e044      	b.n	80100fe <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8010074:	f06f 0306 	mvn.w	r3, #6
 8010078:	e041      	b.n	80100fe <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	3310      	adds	r3, #16
 801007e:	f107 0118 	add.w	r1, r7, #24
 8010082:	2200      	movs	r2, #0
 8010084:	4618      	mov	r0, r3
 8010086:	f00c ff79 	bl	801cf7c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	781b      	ldrb	r3, [r3, #0]
 801008e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010092:	2b10      	cmp	r3, #16
 8010094:	d117      	bne.n	80100c6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8010096:	69bb      	ldr	r3, [r7, #24]
 8010098:	f107 0217 	add.w	r2, r7, #23
 801009c:	4611      	mov	r1, r2
 801009e:	4618      	mov	r0, r3
 80100a0:	f000 faca 	bl	8010638 <lwip_netconn_is_err_msg>
 80100a4:	4603      	mov	r3, r0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d009      	beq.n	80100be <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80100aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80100ae:	f113 0f0f 	cmn.w	r3, #15
 80100b2:	d101      	bne.n	80100b8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80100b4:	2300      	movs	r3, #0
 80100b6:	e022      	b.n	80100fe <netconn_recv_data+0x172>
      }
      return err;
 80100b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80100bc:	e01f      	b.n	80100fe <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80100be:	69bb      	ldr	r3, [r7, #24]
 80100c0:	891b      	ldrh	r3, [r3, #8]
 80100c2:	83fb      	strh	r3, [r7, #30]
 80100c4:	e00d      	b.n	80100e2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80100c6:	69bb      	ldr	r3, [r7, #24]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d106      	bne.n	80100da <netconn_recv_data+0x14e>
 80100cc:	4b0e      	ldr	r3, [pc, #56]	@ (8010108 <netconn_recv_data+0x17c>)
 80100ce:	f240 2291 	movw	r2, #657	@ 0x291
 80100d2:	4911      	ldr	r1, [pc, #68]	@ (8010118 <netconn_recv_data+0x18c>)
 80100d4:	480e      	ldr	r0, [pc, #56]	@ (8010110 <netconn_recv_data+0x184>)
 80100d6:	f00e f839 	bl	801e14c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80100da:	69bb      	ldr	r3, [r7, #24]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	891b      	ldrh	r3, [r3, #8]
 80100e0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d005      	beq.n	80100f6 <netconn_recv_data+0x16a>
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100ee:	8bfa      	ldrh	r2, [r7, #30]
 80100f0:	2101      	movs	r1, #1
 80100f2:	68f8      	ldr	r0, [r7, #12]
 80100f4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80100f6:	69ba      	ldr	r2, [r7, #24]
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80100fc:	2300      	movs	r3, #0
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3720      	adds	r7, #32
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
 8010106:	bf00      	nop
 8010108:	0801f520 	.word	0x0801f520
 801010c:	0801f738 	.word	0x0801f738
 8010110:	0801f578 	.word	0x0801f578
 8010114:	0801f758 	.word	0x0801f758
 8010118:	0801f774 	.word	0x0801f774

0801011c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b084      	sub	sp, #16
 8010120:	af00      	add	r7, sp, #0
 8010122:	60f8      	str	r0, [r7, #12]
 8010124:	60b9      	str	r1, [r7, #8]
 8010126:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d005      	beq.n	801013a <netconn_tcp_recvd_msg+0x1e>
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010136:	2b10      	cmp	r3, #16
 8010138:	d009      	beq.n	801014e <netconn_tcp_recvd_msg+0x32>
 801013a:	4b0c      	ldr	r3, [pc, #48]	@ (801016c <netconn_tcp_recvd_msg+0x50>)
 801013c:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8010140:	490b      	ldr	r1, [pc, #44]	@ (8010170 <netconn_tcp_recvd_msg+0x54>)
 8010142:	480c      	ldr	r0, [pc, #48]	@ (8010174 <netconn_tcp_recvd_msg+0x58>)
 8010144:	f00e f802 	bl	801e14c <iprintf>
 8010148:	f06f 030f 	mvn.w	r3, #15
 801014c:	e00a      	b.n	8010164 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	68fa      	ldr	r2, [r7, #12]
 8010152:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	68ba      	ldr	r2, [r7, #8]
 8010158:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 801015a:	6879      	ldr	r1, [r7, #4]
 801015c:	4806      	ldr	r0, [pc, #24]	@ (8010178 <netconn_tcp_recvd_msg+0x5c>)
 801015e:	f7ff fd4d 	bl	800fbfc <netconn_apimsg>
 8010162:	4603      	mov	r3, r0
}
 8010164:	4618      	mov	r0, r3
 8010166:	3710      	adds	r7, #16
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}
 801016c:	0801f520 	.word	0x0801f520
 8010170:	0801f780 	.word	0x0801f780
 8010174:	0801f578 	.word	0x0801f578
 8010178:	08011745 	.word	0x08011745

0801017c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b090      	sub	sp, #64	@ 0x40
 8010180:	af00      	add	r7, sp, #0
 8010182:	60f8      	str	r0, [r7, #12]
 8010184:	60b9      	str	r1, [r7, #8]
 8010186:	4613      	mov	r3, r2
 8010188:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	3310      	adds	r3, #16
 801018e:	4618      	mov	r0, r3
 8010190:	f00c ff4f 	bl	801d032 <sys_mbox_valid>
 8010194:	4603      	mov	r3, r0
 8010196:	2b00      	cmp	r3, #0
 8010198:	d102      	bne.n	80101a0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 801019a:	f06f 030a 	mvn.w	r3, #10
 801019e:	e06d      	b.n	801027c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	7f1b      	ldrb	r3, [r3, #28]
 80101a4:	b25b      	sxtb	r3, r3
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	da07      	bge.n	80101ba <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	7f1b      	ldrb	r3, [r3, #28]
 80101ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80101b2:	b2da      	uxtb	r2, r3
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80101b8:	e039      	b.n	801022e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80101ba:	79fb      	ldrb	r3, [r7, #7]
 80101bc:	461a      	mov	r2, r3
 80101be:	68b9      	ldr	r1, [r7, #8]
 80101c0:	68f8      	ldr	r0, [r7, #12]
 80101c2:	f7ff fee3 	bl	800ff8c <netconn_recv_data>
 80101c6:	4603      	mov	r3, r0
 80101c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 80101cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d002      	beq.n	80101da <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80101d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80101d8:	e050      	b.n	801027c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80101e0:	79fb      	ldrb	r3, [r7, #7]
 80101e2:	f003 0308 	and.w	r3, r3, #8
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d10e      	bne.n	8010208 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80101ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d002      	beq.n	80101f6 <netconn_recv_data_tcp+0x7a>
 80101f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101f2:	891b      	ldrh	r3, [r3, #8]
 80101f4:	e000      	b.n	80101f8 <netconn_recv_data_tcp+0x7c>
 80101f6:	2301      	movs	r3, #1
 80101f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80101fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80101fc:	f107 0214 	add.w	r2, r7, #20
 8010200:	4619      	mov	r1, r3
 8010202:	68f8      	ldr	r0, [r7, #12]
 8010204:	f7ff ff8a 	bl	801011c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8010208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801020a:	2b00      	cmp	r3, #0
 801020c:	d134      	bne.n	8010278 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 801020e:	79fb      	ldrb	r3, [r7, #7]
 8010210:	f003 0310 	and.w	r3, r3, #16
 8010214:	2b00      	cmp	r3, #0
 8010216:	d009      	beq.n	801022c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	7f1b      	ldrb	r3, [r3, #28]
 801021c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010220:	b2da      	uxtb	r2, r3
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8010226:	f06f 0306 	mvn.w	r3, #6
 801022a:	e027      	b.n	801027c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 801022c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010232:	2b00      	cmp	r3, #0
 8010234:	d005      	beq.n	8010242 <netconn_recv_data_tcp+0xc6>
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801023a:	2200      	movs	r2, #0
 801023c:	2101      	movs	r1, #1
 801023e:	68f8      	ldr	r0, [r7, #12]
 8010240:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d10f      	bne.n	801026a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 801024a:	68f8      	ldr	r0, [r7, #12]
 801024c:	f000 f9a3 	bl	8010596 <netconn_err>
 8010250:	4603      	mov	r3, r0
 8010252:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8010256:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801025a:	2b00      	cmp	r3, #0
 801025c:	d002      	beq.n	8010264 <netconn_recv_data_tcp+0xe8>
          return err;
 801025e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8010262:	e00b      	b.n	801027c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8010264:	f06f 030d 	mvn.w	r3, #13
 8010268:	e008      	b.n	801027c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 801026a:	2101      	movs	r1, #1
 801026c:	68f8      	ldr	r0, [r7, #12]
 801026e:	f000 f955 	bl	801051c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8010272:	f06f 030e 	mvn.w	r3, #14
 8010276:	e001      	b.n	801027c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8010278:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 801027c:	4618      	mov	r0, r3
 801027e:	3740      	adds	r7, #64	@ 0x40
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}

08010284 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b086      	sub	sp, #24
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 801028e:	2300      	movs	r3, #0
 8010290:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d109      	bne.n	80102ac <netconn_recv+0x28>
 8010298:	4b32      	ldr	r3, [pc, #200]	@ (8010364 <netconn_recv+0xe0>)
 801029a:	f240 3263 	movw	r2, #867	@ 0x363
 801029e:	4932      	ldr	r1, [pc, #200]	@ (8010368 <netconn_recv+0xe4>)
 80102a0:	4832      	ldr	r0, [pc, #200]	@ (801036c <netconn_recv+0xe8>)
 80102a2:	f00d ff53 	bl	801e14c <iprintf>
 80102a6:	f06f 030f 	mvn.w	r3, #15
 80102aa:	e056      	b.n	801035a <netconn_recv+0xd6>
  *new_buf = NULL;
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	2200      	movs	r2, #0
 80102b0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d109      	bne.n	80102cc <netconn_recv+0x48>
 80102b8:	4b2a      	ldr	r3, [pc, #168]	@ (8010364 <netconn_recv+0xe0>)
 80102ba:	f240 3265 	movw	r2, #869	@ 0x365
 80102be:	492c      	ldr	r1, [pc, #176]	@ (8010370 <netconn_recv+0xec>)
 80102c0:	482a      	ldr	r0, [pc, #168]	@ (801036c <netconn_recv+0xe8>)
 80102c2:	f00d ff43 	bl	801e14c <iprintf>
 80102c6:	f06f 030f 	mvn.w	r3, #15
 80102ca:	e046      	b.n	801035a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	781b      	ldrb	r3, [r3, #0]
 80102d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80102d4:	2b10      	cmp	r3, #16
 80102d6:	d13a      	bne.n	801034e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80102d8:	2300      	movs	r3, #0
 80102da:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80102dc:	2006      	movs	r0, #6
 80102de:	f002 fc89 	bl	8012bf4 <memp_malloc>
 80102e2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d102      	bne.n	80102f0 <netconn_recv+0x6c>
      return ERR_MEM;
 80102ea:	f04f 33ff 	mov.w	r3, #4294967295
 80102ee:	e034      	b.n	801035a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80102f0:	f107 030c 	add.w	r3, r7, #12
 80102f4:	2200      	movs	r2, #0
 80102f6:	4619      	mov	r1, r3
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f7ff ff3f 	bl	801017c <netconn_recv_data_tcp>
 80102fe:	4603      	mov	r3, r0
 8010300:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010302:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d006      	beq.n	8010318 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 801030a:	6979      	ldr	r1, [r7, #20]
 801030c:	2006      	movs	r0, #6
 801030e:	f002 fce7 	bl	8012ce0 <memp_free>
      return err;
 8010312:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010316:	e020      	b.n	801035a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d106      	bne.n	801032c <netconn_recv+0xa8>
 801031e:	4b11      	ldr	r3, [pc, #68]	@ (8010364 <netconn_recv+0xe0>)
 8010320:	f240 3279 	movw	r2, #889	@ 0x379
 8010324:	4913      	ldr	r1, [pc, #76]	@ (8010374 <netconn_recv+0xf0>)
 8010326:	4811      	ldr	r0, [pc, #68]	@ (801036c <netconn_recv+0xe8>)
 8010328:	f00d ff10 	bl	801e14c <iprintf>

    buf->p = p;
 801032c:	68fa      	ldr	r2, [r7, #12]
 801032e:	697b      	ldr	r3, [r7, #20]
 8010330:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8010332:	68fa      	ldr	r2, [r7, #12]
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8010338:	697b      	ldr	r3, [r7, #20]
 801033a:	2200      	movs	r2, #0
 801033c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	2200      	movs	r2, #0
 8010342:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	697a      	ldr	r2, [r7, #20]
 8010348:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 801034a:	2300      	movs	r3, #0
 801034c:	e005      	b.n	801035a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 801034e:	2200      	movs	r2, #0
 8010350:	6839      	ldr	r1, [r7, #0]
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f7ff fe1a 	bl	800ff8c <netconn_recv_data>
 8010358:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 801035a:	4618      	mov	r0, r3
 801035c:	3718      	adds	r7, #24
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}
 8010362:	bf00      	nop
 8010364:	0801f520 	.word	0x0801f520
 8010368:	0801f738 	.word	0x0801f738
 801036c:	0801f578 	.word	0x0801f578
 8010370:	0801f758 	.word	0x0801f758
 8010374:	0801f7d0 	.word	0x0801f7d0

08010378 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b088      	sub	sp, #32
 801037c:	af02      	add	r7, sp, #8
 801037e:	60f8      	str	r0, [r7, #12]
 8010380:	60b9      	str	r1, [r7, #8]
 8010382:	607a      	str	r2, [r7, #4]
 8010384:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	613b      	str	r3, [r7, #16]
  vector.len = size;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 801038e:	78fa      	ldrb	r2, [r7, #3]
 8010390:	f107 0110 	add.w	r1, r7, #16
 8010394:	6a3b      	ldr	r3, [r7, #32]
 8010396:	9300      	str	r3, [sp, #0]
 8010398:	4613      	mov	r3, r2
 801039a:	2201      	movs	r2, #1
 801039c:	68f8      	ldr	r0, [r7, #12]
 801039e:	f000 f805 	bl	80103ac <netconn_write_vectors_partly>
 80103a2:	4603      	mov	r3, r0
}
 80103a4:	4618      	mov	r0, r3
 80103a6:	3718      	adds	r7, #24
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}

080103ac <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b092      	sub	sp, #72	@ 0x48
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	60f8      	str	r0, [r7, #12]
 80103b4:	60b9      	str	r1, [r7, #8]
 80103b6:	4611      	mov	r1, r2
 80103b8:	461a      	mov	r2, r3
 80103ba:	460b      	mov	r3, r1
 80103bc:	80fb      	strh	r3, [r7, #6]
 80103be:	4613      	mov	r3, r2
 80103c0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d109      	bne.n	80103dc <netconn_write_vectors_partly+0x30>
 80103c8:	4b4e      	ldr	r3, [pc, #312]	@ (8010504 <netconn_write_vectors_partly+0x158>)
 80103ca:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80103ce:	494e      	ldr	r1, [pc, #312]	@ (8010508 <netconn_write_vectors_partly+0x15c>)
 80103d0:	484e      	ldr	r0, [pc, #312]	@ (801050c <netconn_write_vectors_partly+0x160>)
 80103d2:	f00d febb 	bl	801e14c <iprintf>
 80103d6:	f06f 030f 	mvn.w	r3, #15
 80103da:	e08e      	b.n	80104fa <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80103e4:	2b10      	cmp	r3, #16
 80103e6:	d009      	beq.n	80103fc <netconn_write_vectors_partly+0x50>
 80103e8:	4b46      	ldr	r3, [pc, #280]	@ (8010504 <netconn_write_vectors_partly+0x158>)
 80103ea:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 80103ee:	4948      	ldr	r1, [pc, #288]	@ (8010510 <netconn_write_vectors_partly+0x164>)
 80103f0:	4846      	ldr	r0, [pc, #280]	@ (801050c <netconn_write_vectors_partly+0x160>)
 80103f2:	f00d feab 	bl	801e14c <iprintf>
 80103f6:	f06f 0305 	mvn.w	r3, #5
 80103fa:	e07e      	b.n	80104fa <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	7f1b      	ldrb	r3, [r3, #28]
 8010400:	f003 0302 	and.w	r3, r3, #2
 8010404:	2b00      	cmp	r3, #0
 8010406:	d104      	bne.n	8010412 <netconn_write_vectors_partly+0x66>
 8010408:	797b      	ldrb	r3, [r7, #5]
 801040a:	f003 0304 	and.w	r3, r3, #4
 801040e:	2b00      	cmp	r3, #0
 8010410:	d001      	beq.n	8010416 <netconn_write_vectors_partly+0x6a>
 8010412:	2301      	movs	r3, #1
 8010414:	e000      	b.n	8010418 <netconn_write_vectors_partly+0x6c>
 8010416:	2300      	movs	r3, #0
 8010418:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 801041c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010420:	2b00      	cmp	r3, #0
 8010422:	d005      	beq.n	8010430 <netconn_write_vectors_partly+0x84>
 8010424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010426:	2b00      	cmp	r3, #0
 8010428:	d102      	bne.n	8010430 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 801042a:	f06f 0305 	mvn.w	r3, #5
 801042e:	e064      	b.n	80104fa <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8010430:	2300      	movs	r3, #0
 8010432:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 8010434:	2300      	movs	r3, #0
 8010436:	643b      	str	r3, [r7, #64]	@ 0x40
 8010438:	e015      	b.n	8010466 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 801043a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801043c:	00db      	lsls	r3, r3, #3
 801043e:	68ba      	ldr	r2, [r7, #8]
 8010440:	4413      	add	r3, r2
 8010442:	685b      	ldr	r3, [r3, #4]
 8010444:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010446:	4413      	add	r3, r2
 8010448:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 801044a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801044c:	00db      	lsls	r3, r3, #3
 801044e:	68ba      	ldr	r2, [r7, #8]
 8010450:	4413      	add	r3, r2
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010456:	429a      	cmp	r2, r3
 8010458:	d202      	bcs.n	8010460 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 801045a:	f06f 0305 	mvn.w	r3, #5
 801045e:	e04c      	b.n	80104fa <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8010460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010462:	3301      	adds	r3, #1
 8010464:	643b      	str	r3, [r7, #64]	@ 0x40
 8010466:	88fb      	ldrh	r3, [r7, #6]
 8010468:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801046a:	429a      	cmp	r2, r3
 801046c:	dbe5      	blt.n	801043a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 801046e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010470:	2b00      	cmp	r3, #0
 8010472:	d101      	bne.n	8010478 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8010474:	2300      	movs	r3, #0
 8010476:	e040      	b.n	80104fa <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8010478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801047a:	2b00      	cmp	r3, #0
 801047c:	da0a      	bge.n	8010494 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 801047e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010480:	2b00      	cmp	r3, #0
 8010482:	d102      	bne.n	801048a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8010484:	f06f 0305 	mvn.w	r3, #5
 8010488:	e037      	b.n	80104fa <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 801048a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801048e:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8010490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010492:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 801049c:	88fb      	ldrh	r3, [r7, #6]
 801049e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80104a0:	2300      	movs	r3, #0
 80104a2:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80104a4:	797b      	ldrb	r3, [r7, #5]
 80104a6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80104aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80104ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80104ae:	2300      	movs	r3, #0
 80104b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80104b2:	f107 0314 	add.w	r3, r7, #20
 80104b6:	4619      	mov	r1, r3
 80104b8:	4816      	ldr	r0, [pc, #88]	@ (8010514 <netconn_write_vectors_partly+0x168>)
 80104ba:	f7ff fb9f 	bl	800fbfc <netconn_apimsg>
 80104be:	4603      	mov	r3, r0
 80104c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 80104c4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d114      	bne.n	80104f6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80104cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d002      	beq.n	80104d8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80104d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80104d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104d6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80104d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d10a      	bne.n	80104f6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80104e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d006      	beq.n	80104f6 <netconn_write_vectors_partly+0x14a>
 80104e8:	4b06      	ldr	r3, [pc, #24]	@ (8010504 <netconn_write_vectors_partly+0x158>)
 80104ea:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80104ee:	490a      	ldr	r1, [pc, #40]	@ (8010518 <netconn_write_vectors_partly+0x16c>)
 80104f0:	4806      	ldr	r0, [pc, #24]	@ (801050c <netconn_write_vectors_partly+0x160>)
 80104f2:	f00d fe2b 	bl	801e14c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80104f6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3748      	adds	r7, #72	@ 0x48
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}
 8010502:	bf00      	nop
 8010504:	0801f520 	.word	0x0801f520
 8010508:	0801f7f8 	.word	0x0801f7f8
 801050c:	0801f578 	.word	0x0801f578
 8010510:	0801f814 	.word	0x0801f814
 8010514:	08011b49 	.word	0x08011b49
 8010518:	0801f838 	.word	0x0801f838

0801051c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b08c      	sub	sp, #48	@ 0x30
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	460b      	mov	r3, r1
 8010526:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d109      	bne.n	8010542 <netconn_close_shutdown+0x26>
 801052e:	4b0f      	ldr	r3, [pc, #60]	@ (801056c <netconn_close_shutdown+0x50>)
 8010530:	f240 4247 	movw	r2, #1095	@ 0x447
 8010534:	490e      	ldr	r1, [pc, #56]	@ (8010570 <netconn_close_shutdown+0x54>)
 8010536:	480f      	ldr	r0, [pc, #60]	@ (8010574 <netconn_close_shutdown+0x58>)
 8010538:	f00d fe08 	bl	801e14c <iprintf>
 801053c:	f06f 030f 	mvn.w	r3, #15
 8010540:	e010      	b.n	8010564 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8010546:	78fb      	ldrb	r3, [r7, #3]
 8010548:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801054a:	2329      	movs	r3, #41	@ 0x29
 801054c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 801054e:	f107 030c 	add.w	r3, r7, #12
 8010552:	4619      	mov	r1, r3
 8010554:	4808      	ldr	r0, [pc, #32]	@ (8010578 <netconn_close_shutdown+0x5c>)
 8010556:	f7ff fb51 	bl	800fbfc <netconn_apimsg>
 801055a:	4603      	mov	r3, r0
 801055c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8010560:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8010564:	4618      	mov	r0, r3
 8010566:	3730      	adds	r7, #48	@ 0x30
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}
 801056c:	0801f520 	.word	0x0801f520
 8010570:	0801f85c 	.word	0x0801f85c
 8010574:	0801f578 	.word	0x0801f578
 8010578:	08011c61 	.word	0x08011c61

0801057c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b082      	sub	sp, #8
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8010584:	2103      	movs	r1, #3
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f7ff ffc8 	bl	801051c <netconn_close_shutdown>
 801058c:	4603      	mov	r3, r0
}
 801058e:	4618      	mov	r0, r3
 8010590:	3708      	adds	r7, #8
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}

08010596 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8010596:	b580      	push	{r7, lr}
 8010598:	b084      	sub	sp, #16
 801059a:	af00      	add	r7, sp, #0
 801059c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d101      	bne.n	80105a8 <netconn_err+0x12>
    return ERR_OK;
 80105a4:	2300      	movs	r3, #0
 80105a6:	e00d      	b.n	80105c4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80105a8:	f00c fe5e 	bl	801d268 <sys_arch_protect>
 80105ac:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	7a1b      	ldrb	r3, [r3, #8]
 80105b2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2200      	movs	r2, #0
 80105b8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80105ba:	68f8      	ldr	r0, [r7, #12]
 80105bc:	f00c fe62 	bl	801d284 <sys_arch_unprotect>
  return err;
 80105c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	3710      	adds	r7, #16
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b082      	sub	sp, #8
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	4603      	mov	r3, r0
 80105d4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80105d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80105da:	f113 0f0d 	cmn.w	r3, #13
 80105de:	d009      	beq.n	80105f4 <lwip_netconn_err_to_msg+0x28>
 80105e0:	f113 0f0d 	cmn.w	r3, #13
 80105e4:	dc0c      	bgt.n	8010600 <lwip_netconn_err_to_msg+0x34>
 80105e6:	f113 0f0f 	cmn.w	r3, #15
 80105ea:	d007      	beq.n	80105fc <lwip_netconn_err_to_msg+0x30>
 80105ec:	f113 0f0e 	cmn.w	r3, #14
 80105f0:	d002      	beq.n	80105f8 <lwip_netconn_err_to_msg+0x2c>
 80105f2:	e005      	b.n	8010600 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80105f4:	4b0a      	ldr	r3, [pc, #40]	@ (8010620 <lwip_netconn_err_to_msg+0x54>)
 80105f6:	e00e      	b.n	8010616 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80105f8:	4b0a      	ldr	r3, [pc, #40]	@ (8010624 <lwip_netconn_err_to_msg+0x58>)
 80105fa:	e00c      	b.n	8010616 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80105fc:	4b0a      	ldr	r3, [pc, #40]	@ (8010628 <lwip_netconn_err_to_msg+0x5c>)
 80105fe:	e00a      	b.n	8010616 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8010600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d005      	beq.n	8010614 <lwip_netconn_err_to_msg+0x48>
 8010608:	4b08      	ldr	r3, [pc, #32]	@ (801062c <lwip_netconn_err_to_msg+0x60>)
 801060a:	227d      	movs	r2, #125	@ 0x7d
 801060c:	4908      	ldr	r1, [pc, #32]	@ (8010630 <lwip_netconn_err_to_msg+0x64>)
 801060e:	4809      	ldr	r0, [pc, #36]	@ (8010634 <lwip_netconn_err_to_msg+0x68>)
 8010610:	f00d fd9c 	bl	801e14c <iprintf>
      return NULL;
 8010614:	2300      	movs	r3, #0
  }
}
 8010616:	4618      	mov	r0, r3
 8010618:	3708      	adds	r7, #8
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}
 801061e:	bf00      	nop
 8010620:	08022a5c 	.word	0x08022a5c
 8010624:	08022a5d 	.word	0x08022a5d
 8010628:	08022a5e 	.word	0x08022a5e
 801062c:	0801f878 	.word	0x0801f878
 8010630:	0801f8ac 	.word	0x0801f8ac
 8010634:	0801f8bc 	.word	0x0801f8bc

08010638 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b082      	sub	sp, #8
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
 8010640:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d105      	bne.n	8010654 <lwip_netconn_is_err_msg+0x1c>
 8010648:	4b12      	ldr	r3, [pc, #72]	@ (8010694 <lwip_netconn_is_err_msg+0x5c>)
 801064a:	2285      	movs	r2, #133	@ 0x85
 801064c:	4912      	ldr	r1, [pc, #72]	@ (8010698 <lwip_netconn_is_err_msg+0x60>)
 801064e:	4813      	ldr	r0, [pc, #76]	@ (801069c <lwip_netconn_is_err_msg+0x64>)
 8010650:	f00d fd7c 	bl	801e14c <iprintf>

  if (msg == &netconn_aborted) {
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	4a12      	ldr	r2, [pc, #72]	@ (80106a0 <lwip_netconn_is_err_msg+0x68>)
 8010658:	4293      	cmp	r3, r2
 801065a:	d104      	bne.n	8010666 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	22f3      	movs	r2, #243	@ 0xf3
 8010660:	701a      	strb	r2, [r3, #0]
    return 1;
 8010662:	2301      	movs	r3, #1
 8010664:	e012      	b.n	801068c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	4a0e      	ldr	r2, [pc, #56]	@ (80106a4 <lwip_netconn_is_err_msg+0x6c>)
 801066a:	4293      	cmp	r3, r2
 801066c:	d104      	bne.n	8010678 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	22f2      	movs	r2, #242	@ 0xf2
 8010672:	701a      	strb	r2, [r3, #0]
    return 1;
 8010674:	2301      	movs	r3, #1
 8010676:	e009      	b.n	801068c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	4a0b      	ldr	r2, [pc, #44]	@ (80106a8 <lwip_netconn_is_err_msg+0x70>)
 801067c:	4293      	cmp	r3, r2
 801067e:	d104      	bne.n	801068a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	22f1      	movs	r2, #241	@ 0xf1
 8010684:	701a      	strb	r2, [r3, #0]
    return 1;
 8010686:	2301      	movs	r3, #1
 8010688:	e000      	b.n	801068c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 801068a:	2300      	movs	r3, #0
}
 801068c:	4618      	mov	r0, r3
 801068e:	3708      	adds	r7, #8
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}
 8010694:	0801f878 	.word	0x0801f878
 8010698:	0801f8e4 	.word	0x0801f8e4
 801069c:	0801f8bc 	.word	0x0801f8bc
 80106a0:	08022a5c 	.word	0x08022a5c
 80106a4:	08022a5d 	.word	0x08022a5d
 80106a8:	08022a5e 	.word	0x08022a5e

080106ac <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b088      	sub	sp, #32
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	60f8      	str	r0, [r7, #12]
 80106b4:	60b9      	str	r1, [r7, #8]
 80106b6:	607a      	str	r2, [r7, #4]
 80106b8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d105      	bne.n	80106cc <recv_udp+0x20>
 80106c0:	4b34      	ldr	r3, [pc, #208]	@ (8010794 <recv_udp+0xe8>)
 80106c2:	22e5      	movs	r2, #229	@ 0xe5
 80106c4:	4934      	ldr	r1, [pc, #208]	@ (8010798 <recv_udp+0xec>)
 80106c6:	4835      	ldr	r0, [pc, #212]	@ (801079c <recv_udp+0xf0>)
 80106c8:	f00d fd40 	bl	801e14c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d105      	bne.n	80106de <recv_udp+0x32>
 80106d2:	4b30      	ldr	r3, [pc, #192]	@ (8010794 <recv_udp+0xe8>)
 80106d4:	22e6      	movs	r2, #230	@ 0xe6
 80106d6:	4932      	ldr	r1, [pc, #200]	@ (80107a0 <recv_udp+0xf4>)
 80106d8:	4830      	ldr	r0, [pc, #192]	@ (801079c <recv_udp+0xf0>)
 80106da:	f00d fd37 	bl	801e14c <iprintf>
  conn = (struct netconn *)arg;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80106e2:	69fb      	ldr	r3, [r7, #28]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d103      	bne.n	80106f0 <recv_udp+0x44>
    pbuf_free(p);
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f003 f99d 	bl	8013a28 <pbuf_free>
    return;
 80106ee:	e04d      	b.n	801078c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80106f0:	69fb      	ldr	r3, [r7, #28]
 80106f2:	685b      	ldr	r3, [r3, #4]
 80106f4:	68ba      	ldr	r2, [r7, #8]
 80106f6:	429a      	cmp	r2, r3
 80106f8:	d005      	beq.n	8010706 <recv_udp+0x5a>
 80106fa:	4b26      	ldr	r3, [pc, #152]	@ (8010794 <recv_udp+0xe8>)
 80106fc:	22ee      	movs	r2, #238	@ 0xee
 80106fe:	4929      	ldr	r1, [pc, #164]	@ (80107a4 <recv_udp+0xf8>)
 8010700:	4826      	ldr	r0, [pc, #152]	@ (801079c <recv_udp+0xf0>)
 8010702:	f00d fd23 	bl	801e14c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010706:	69fb      	ldr	r3, [r7, #28]
 8010708:	3310      	adds	r3, #16
 801070a:	4618      	mov	r0, r3
 801070c:	f00c fc91 	bl	801d032 <sys_mbox_valid>
 8010710:	4603      	mov	r3, r0
 8010712:	2b00      	cmp	r3, #0
 8010714:	d103      	bne.n	801071e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f003 f986 	bl	8013a28 <pbuf_free>
    return;
 801071c:	e036      	b.n	801078c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801071e:	2006      	movs	r0, #6
 8010720:	f002 fa68 	bl	8012bf4 <memp_malloc>
 8010724:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8010726:	69bb      	ldr	r3, [r7, #24]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d103      	bne.n	8010734 <recv_udp+0x88>
    pbuf_free(p);
 801072c:	6878      	ldr	r0, [r7, #4]
 801072e:	f003 f97b 	bl	8013a28 <pbuf_free>
    return;
 8010732:	e02b      	b.n	801078c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8010734:	69bb      	ldr	r3, [r7, #24]
 8010736:	687a      	ldr	r2, [r7, #4]
 8010738:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801073a:	69bb      	ldr	r3, [r7, #24]
 801073c:	687a      	ldr	r2, [r7, #4]
 801073e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d002      	beq.n	801074c <recv_udp+0xa0>
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	e000      	b.n	801074e <recv_udp+0xa2>
 801074c:	2300      	movs	r3, #0
 801074e:	69ba      	ldr	r2, [r7, #24]
 8010750:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8010752:	69bb      	ldr	r3, [r7, #24]
 8010754:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010756:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	891b      	ldrh	r3, [r3, #8]
 801075c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 801075e:	69fb      	ldr	r3, [r7, #28]
 8010760:	3310      	adds	r3, #16
 8010762:	69b9      	ldr	r1, [r7, #24]
 8010764:	4618      	mov	r0, r3
 8010766:	f00c fbef 	bl	801cf48 <sys_mbox_trypost>
 801076a:	4603      	mov	r3, r0
 801076c:	2b00      	cmp	r3, #0
 801076e:	d003      	beq.n	8010778 <recv_udp+0xcc>
    netbuf_delete(buf);
 8010770:	69b8      	ldr	r0, [r7, #24]
 8010772:	f001 fb01 	bl	8011d78 <netbuf_delete>
    return;
 8010776:	e009      	b.n	801078c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8010778:	69fb      	ldr	r3, [r7, #28]
 801077a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801077c:	2b00      	cmp	r3, #0
 801077e:	d005      	beq.n	801078c <recv_udp+0xe0>
 8010780:	69fb      	ldr	r3, [r7, #28]
 8010782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010784:	8afa      	ldrh	r2, [r7, #22]
 8010786:	2100      	movs	r1, #0
 8010788:	69f8      	ldr	r0, [r7, #28]
 801078a:	4798      	blx	r3
  }
}
 801078c:	3720      	adds	r7, #32
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
 8010792:	bf00      	nop
 8010794:	0801f878 	.word	0x0801f878
 8010798:	0801f8f0 	.word	0x0801f8f0
 801079c:	0801f8bc 	.word	0x0801f8bc
 80107a0:	0801f914 	.word	0x0801f914
 80107a4:	0801f934 	.word	0x0801f934

080107a8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b088      	sub	sp, #32
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	60f8      	str	r0, [r7, #12]
 80107b0:	60b9      	str	r1, [r7, #8]
 80107b2:	607a      	str	r2, [r7, #4]
 80107b4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d106      	bne.n	80107ca <recv_tcp+0x22>
 80107bc:	4b36      	ldr	r3, [pc, #216]	@ (8010898 <recv_tcp+0xf0>)
 80107be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80107c2:	4936      	ldr	r1, [pc, #216]	@ (801089c <recv_tcp+0xf4>)
 80107c4:	4836      	ldr	r0, [pc, #216]	@ (80108a0 <recv_tcp+0xf8>)
 80107c6:	f00d fcc1 	bl	801e14c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d106      	bne.n	80107de <recv_tcp+0x36>
 80107d0:	4b31      	ldr	r3, [pc, #196]	@ (8010898 <recv_tcp+0xf0>)
 80107d2:	f240 122d 	movw	r2, #301	@ 0x12d
 80107d6:	4933      	ldr	r1, [pc, #204]	@ (80108a4 <recv_tcp+0xfc>)
 80107d8:	4831      	ldr	r0, [pc, #196]	@ (80108a0 <recv_tcp+0xf8>)
 80107da:	f00d fcb7 	bl	801e14c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80107de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d006      	beq.n	80107f4 <recv_tcp+0x4c>
 80107e6:	4b2c      	ldr	r3, [pc, #176]	@ (8010898 <recv_tcp+0xf0>)
 80107e8:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80107ec:	492e      	ldr	r1, [pc, #184]	@ (80108a8 <recv_tcp+0x100>)
 80107ee:	482c      	ldr	r0, [pc, #176]	@ (80108a0 <recv_tcp+0xf8>)
 80107f0:	f00d fcac 	bl	801e14c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d102      	bne.n	8010804 <recv_tcp+0x5c>
    return ERR_VAL;
 80107fe:	f06f 0305 	mvn.w	r3, #5
 8010802:	e045      	b.n	8010890 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	685b      	ldr	r3, [r3, #4]
 8010808:	68ba      	ldr	r2, [r7, #8]
 801080a:	429a      	cmp	r2, r3
 801080c:	d006      	beq.n	801081c <recv_tcp+0x74>
 801080e:	4b22      	ldr	r3, [pc, #136]	@ (8010898 <recv_tcp+0xf0>)
 8010810:	f240 1235 	movw	r2, #309	@ 0x135
 8010814:	4925      	ldr	r1, [pc, #148]	@ (80108ac <recv_tcp+0x104>)
 8010816:	4822      	ldr	r0, [pc, #136]	@ (80108a0 <recv_tcp+0xf8>)
 8010818:	f00d fc98 	bl	801e14c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	3310      	adds	r3, #16
 8010820:	4618      	mov	r0, r3
 8010822:	f00c fc06 	bl	801d032 <sys_mbox_valid>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	d10d      	bne.n	8010848 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d008      	beq.n	8010844 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	891b      	ldrh	r3, [r3, #8]
 8010836:	4619      	mov	r1, r3
 8010838:	68b8      	ldr	r0, [r7, #8]
 801083a:	f004 f8ad 	bl	8014998 <tcp_recved>
      pbuf_free(p);
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f003 f8f2 	bl	8013a28 <pbuf_free>
    }
    return ERR_OK;
 8010844:	2300      	movs	r3, #0
 8010846:	e023      	b.n	8010890 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d005      	beq.n	801085a <recv_tcp+0xb2>
    msg = p;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	891b      	ldrh	r3, [r3, #8]
 8010856:	83fb      	strh	r3, [r7, #30]
 8010858:	e003      	b.n	8010862 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 801085a:	4b15      	ldr	r3, [pc, #84]	@ (80108b0 <recv_tcp+0x108>)
 801085c:	61bb      	str	r3, [r7, #24]
    len = 0;
 801085e:	2300      	movs	r3, #0
 8010860:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8010862:	697b      	ldr	r3, [r7, #20]
 8010864:	3310      	adds	r3, #16
 8010866:	69b9      	ldr	r1, [r7, #24]
 8010868:	4618      	mov	r0, r3
 801086a:	f00c fb6d 	bl	801cf48 <sys_mbox_trypost>
 801086e:	4603      	mov	r3, r0
 8010870:	2b00      	cmp	r3, #0
 8010872:	d002      	beq.n	801087a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8010874:	f04f 33ff 	mov.w	r3, #4294967295
 8010878:	e00a      	b.n	8010890 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801087e:	2b00      	cmp	r3, #0
 8010880:	d005      	beq.n	801088e <recv_tcp+0xe6>
 8010882:	697b      	ldr	r3, [r7, #20]
 8010884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010886:	8bfa      	ldrh	r2, [r7, #30]
 8010888:	2100      	movs	r1, #0
 801088a:	6978      	ldr	r0, [r7, #20]
 801088c:	4798      	blx	r3
  }

  return ERR_OK;
 801088e:	2300      	movs	r3, #0
}
 8010890:	4618      	mov	r0, r3
 8010892:	3720      	adds	r7, #32
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	0801f878 	.word	0x0801f878
 801089c:	0801f954 	.word	0x0801f954
 80108a0:	0801f8bc 	.word	0x0801f8bc
 80108a4:	0801f978 	.word	0x0801f978
 80108a8:	0801f998 	.word	0x0801f998
 80108ac:	0801f9b0 	.word	0x0801f9b0
 80108b0:	08022a5e 	.word	0x08022a5e

080108b4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b084      	sub	sp, #16
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d106      	bne.n	80108d6 <poll_tcp+0x22>
 80108c8:	4b29      	ldr	r3, [pc, #164]	@ (8010970 <poll_tcp+0xbc>)
 80108ca:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 80108ce:	4929      	ldr	r1, [pc, #164]	@ (8010974 <poll_tcp+0xc0>)
 80108d0:	4829      	ldr	r0, [pc, #164]	@ (8010978 <poll_tcp+0xc4>)
 80108d2:	f00d fc3b 	bl	801e14c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	785b      	ldrb	r3, [r3, #1]
 80108da:	2b01      	cmp	r3, #1
 80108dc:	d104      	bne.n	80108e8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80108de:	2101      	movs	r1, #1
 80108e0:	68f8      	ldr	r0, [r7, #12]
 80108e2:	f000 ff65 	bl	80117b0 <lwip_netconn_do_writemore>
 80108e6:	e016      	b.n	8010916 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	785b      	ldrb	r3, [r3, #1]
 80108ec:	2b04      	cmp	r3, #4
 80108ee:	d112      	bne.n	8010916 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	6a1b      	ldr	r3, [r3, #32]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d00a      	beq.n	801090e <poll_tcp+0x5a>
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	6a1b      	ldr	r3, [r3, #32]
 80108fc:	7a5b      	ldrb	r3, [r3, #9]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d005      	beq.n	801090e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	6a1b      	ldr	r3, [r3, #32]
 8010906:	7a5a      	ldrb	r2, [r3, #9]
 8010908:	3a01      	subs	r2, #1
 801090a:	b2d2      	uxtb	r2, r2
 801090c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801090e:	2101      	movs	r1, #1
 8010910:	68f8      	ldr	r0, [r7, #12]
 8010912:	f000 fbf7 	bl	8011104 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	7f1b      	ldrb	r3, [r3, #28]
 801091a:	f003 0310 	and.w	r3, r3, #16
 801091e:	2b00      	cmp	r3, #0
 8010920:	d021      	beq.n	8010966 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	685b      	ldr	r3, [r3, #4]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d01d      	beq.n	8010966 <poll_tcp+0xb2>
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	685b      	ldr	r3, [r3, #4]
 801092e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010932:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8010936:	d316      	bcc.n	8010966 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	685b      	ldr	r3, [r3, #4]
 801093c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010940:	2b04      	cmp	r3, #4
 8010942:	d810      	bhi.n	8010966 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	7f1b      	ldrb	r3, [r3, #28]
 8010948:	f023 0310 	bic.w	r3, r3, #16
 801094c:	b2da      	uxtb	r2, r3
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010956:	2b00      	cmp	r3, #0
 8010958:	d005      	beq.n	8010966 <poll_tcp+0xb2>
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801095e:	2200      	movs	r2, #0
 8010960:	2102      	movs	r1, #2
 8010962:	68f8      	ldr	r0, [r7, #12]
 8010964:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8010966:	2300      	movs	r3, #0
}
 8010968:	4618      	mov	r0, r3
 801096a:	3710      	adds	r7, #16
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}
 8010970:	0801f878 	.word	0x0801f878
 8010974:	0801f9d0 	.word	0x0801f9d0
 8010978:	0801f8bc 	.word	0x0801f8bc

0801097c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b086      	sub	sp, #24
 8010980:	af00      	add	r7, sp, #0
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	60b9      	str	r1, [r7, #8]
 8010986:	4613      	mov	r3, r2
 8010988:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d106      	bne.n	80109a2 <sent_tcp+0x26>
 8010994:	4b20      	ldr	r3, [pc, #128]	@ (8010a18 <sent_tcp+0x9c>)
 8010996:	f240 1293 	movw	r2, #403	@ 0x193
 801099a:	4920      	ldr	r1, [pc, #128]	@ (8010a1c <sent_tcp+0xa0>)
 801099c:	4820      	ldr	r0, [pc, #128]	@ (8010a20 <sent_tcp+0xa4>)
 801099e:	f00d fbd5 	bl	801e14c <iprintf>

  if (conn) {
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d032      	beq.n	8010a0e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80109a8:	697b      	ldr	r3, [r7, #20]
 80109aa:	785b      	ldrb	r3, [r3, #1]
 80109ac:	2b01      	cmp	r3, #1
 80109ae:	d104      	bne.n	80109ba <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80109b0:	2101      	movs	r1, #1
 80109b2:	6978      	ldr	r0, [r7, #20]
 80109b4:	f000 fefc 	bl	80117b0 <lwip_netconn_do_writemore>
 80109b8:	e007      	b.n	80109ca <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80109ba:	697b      	ldr	r3, [r7, #20]
 80109bc:	785b      	ldrb	r3, [r3, #1]
 80109be:	2b04      	cmp	r3, #4
 80109c0:	d103      	bne.n	80109ca <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80109c2:	2101      	movs	r1, #1
 80109c4:	6978      	ldr	r0, [r7, #20]
 80109c6:	f000 fb9d 	bl	8011104 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	685b      	ldr	r3, [r3, #4]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d01d      	beq.n	8010a0e <sent_tcp+0x92>
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	685b      	ldr	r3, [r3, #4]
 80109d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80109da:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80109de:	d316      	bcc.n	8010a0e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	685b      	ldr	r3, [r3, #4]
 80109e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80109e8:	2b04      	cmp	r3, #4
 80109ea:	d810      	bhi.n	8010a0e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	7f1b      	ldrb	r3, [r3, #28]
 80109f0:	f023 0310 	bic.w	r3, r3, #16
 80109f4:	b2da      	uxtb	r2, r3
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d005      	beq.n	8010a0e <sent_tcp+0x92>
 8010a02:	697b      	ldr	r3, [r7, #20]
 8010a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a06:	88fa      	ldrh	r2, [r7, #6]
 8010a08:	2102      	movs	r1, #2
 8010a0a:	6978      	ldr	r0, [r7, #20]
 8010a0c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8010a0e:	2300      	movs	r3, #0
}
 8010a10:	4618      	mov	r0, r3
 8010a12:	3718      	adds	r7, #24
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}
 8010a18:	0801f878 	.word	0x0801f878
 8010a1c:	0801f9d0 	.word	0x0801f9d0
 8010a20:	0801f8bc 	.word	0x0801f8bc

08010a24 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b088      	sub	sp, #32
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	460b      	mov	r3, r1
 8010a2e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8010a34:	69fb      	ldr	r3, [r7, #28]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d106      	bne.n	8010a48 <err_tcp+0x24>
 8010a3a:	4b5f      	ldr	r3, [pc, #380]	@ (8010bb8 <err_tcp+0x194>)
 8010a3c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8010a40:	495e      	ldr	r1, [pc, #376]	@ (8010bbc <err_tcp+0x198>)
 8010a42:	485f      	ldr	r0, [pc, #380]	@ (8010bc0 <err_tcp+0x19c>)
 8010a44:	f00d fb82 	bl	801e14c <iprintf>

  SYS_ARCH_PROTECT(lev);
 8010a48:	f00c fc0e 	bl	801d268 <sys_arch_protect>
 8010a4c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8010a4e:	69fb      	ldr	r3, [r7, #28]
 8010a50:	2200      	movs	r2, #0
 8010a52:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8010a54:	69fb      	ldr	r3, [r7, #28]
 8010a56:	78fa      	ldrb	r2, [r7, #3]
 8010a58:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8010a5a:	69fb      	ldr	r3, [r7, #28]
 8010a5c:	7f1b      	ldrb	r3, [r3, #28]
 8010a5e:	f043 0301 	orr.w	r3, r3, #1
 8010a62:	b2da      	uxtb	r2, r3
 8010a64:	69fb      	ldr	r3, [r7, #28]
 8010a66:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8010a68:	69fb      	ldr	r3, [r7, #28]
 8010a6a:	785b      	ldrb	r3, [r3, #1]
 8010a6c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8010a6e:	69fb      	ldr	r3, [r7, #28]
 8010a70:	2200      	movs	r2, #0
 8010a72:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8010a74:	69b8      	ldr	r0, [r7, #24]
 8010a76:	f00c fc05 	bl	801d284 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d005      	beq.n	8010a8e <err_tcp+0x6a>
 8010a82:	69fb      	ldr	r3, [r7, #28]
 8010a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a86:	2200      	movs	r2, #0
 8010a88:	2104      	movs	r1, #4
 8010a8a:	69f8      	ldr	r0, [r7, #28]
 8010a8c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010a8e:	69fb      	ldr	r3, [r7, #28]
 8010a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d005      	beq.n	8010aa2 <err_tcp+0x7e>
 8010a96:	69fb      	ldr	r3, [r7, #28]
 8010a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	2100      	movs	r1, #0
 8010a9e:	69f8      	ldr	r0, [r7, #28]
 8010aa0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010aa2:	69fb      	ldr	r3, [r7, #28]
 8010aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d005      	beq.n	8010ab6 <err_tcp+0x92>
 8010aaa:	69fb      	ldr	r3, [r7, #28]
 8010aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010aae:	2200      	movs	r2, #0
 8010ab0:	2102      	movs	r1, #2
 8010ab2:	69f8      	ldr	r0, [r7, #28]
 8010ab4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8010ab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7ff fd86 	bl	80105cc <lwip_netconn_err_to_msg>
 8010ac0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010ac2:	69fb      	ldr	r3, [r7, #28]
 8010ac4:	3310      	adds	r3, #16
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f00c fab3 	bl	801d032 <sys_mbox_valid>
 8010acc:	4603      	mov	r3, r0
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d005      	beq.n	8010ade <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8010ad2:	69fb      	ldr	r3, [r7, #28]
 8010ad4:	3310      	adds	r3, #16
 8010ad6:	6939      	ldr	r1, [r7, #16]
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f00c fa35 	bl	801cf48 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8010ade:	69fb      	ldr	r3, [r7, #28]
 8010ae0:	3314      	adds	r3, #20
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f00c faa5 	bl	801d032 <sys_mbox_valid>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d005      	beq.n	8010afa <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8010aee:	69fb      	ldr	r3, [r7, #28]
 8010af0:	3314      	adds	r3, #20
 8010af2:	6939      	ldr	r1, [r7, #16]
 8010af4:	4618      	mov	r0, r3
 8010af6:	f00c fa27 	bl	801cf48 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8010afa:	7dfb      	ldrb	r3, [r7, #23]
 8010afc:	2b01      	cmp	r3, #1
 8010afe:	d005      	beq.n	8010b0c <err_tcp+0xe8>
 8010b00:	7dfb      	ldrb	r3, [r7, #23]
 8010b02:	2b04      	cmp	r3, #4
 8010b04:	d002      	beq.n	8010b0c <err_tcp+0xe8>
 8010b06:	7dfb      	ldrb	r3, [r7, #23]
 8010b08:	2b03      	cmp	r3, #3
 8010b0a:	d143      	bne.n	8010b94 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8010b0c:	69fb      	ldr	r3, [r7, #28]
 8010b0e:	7f1b      	ldrb	r3, [r3, #28]
 8010b10:	f003 0304 	and.w	r3, r3, #4
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	bf14      	ite	ne
 8010b18:	2301      	movne	r3, #1
 8010b1a:	2300      	moveq	r3, #0
 8010b1c:	b2db      	uxtb	r3, r3
 8010b1e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8010b20:	69fb      	ldr	r3, [r7, #28]
 8010b22:	7f1b      	ldrb	r3, [r3, #28]
 8010b24:	f023 0304 	bic.w	r3, r3, #4
 8010b28:	b2da      	uxtb	r2, r3
 8010b2a:	69fb      	ldr	r3, [r7, #28]
 8010b2c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d13b      	bne.n	8010bac <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010b34:	69fb      	ldr	r3, [r7, #28]
 8010b36:	6a1b      	ldr	r3, [r3, #32]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d106      	bne.n	8010b4a <err_tcp+0x126>
 8010b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8010bb8 <err_tcp+0x194>)
 8010b3e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8010b42:	4920      	ldr	r1, [pc, #128]	@ (8010bc4 <err_tcp+0x1a0>)
 8010b44:	481e      	ldr	r0, [pc, #120]	@ (8010bc0 <err_tcp+0x19c>)
 8010b46:	f00d fb01 	bl	801e14c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8010b4a:	7dfb      	ldrb	r3, [r7, #23]
 8010b4c:	2b04      	cmp	r3, #4
 8010b4e:	d104      	bne.n	8010b5a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	6a1b      	ldr	r3, [r3, #32]
 8010b54:	2200      	movs	r2, #0
 8010b56:	711a      	strb	r2, [r3, #4]
 8010b58:	e003      	b.n	8010b62 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8010b5a:	69fb      	ldr	r3, [r7, #28]
 8010b5c:	6a1b      	ldr	r3, [r3, #32]
 8010b5e:	78fa      	ldrb	r2, [r7, #3]
 8010b60:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010b62:	69fb      	ldr	r3, [r7, #28]
 8010b64:	6a1b      	ldr	r3, [r3, #32]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	330c      	adds	r3, #12
 8010b6a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8010b6c:	68b8      	ldr	r0, [r7, #8]
 8010b6e:	f00c faf1 	bl	801d154 <sys_sem_valid>
 8010b72:	4603      	mov	r3, r0
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d106      	bne.n	8010b86 <err_tcp+0x162>
 8010b78:	4b0f      	ldr	r3, [pc, #60]	@ (8010bb8 <err_tcp+0x194>)
 8010b7a:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8010b7e:	4912      	ldr	r1, [pc, #72]	@ (8010bc8 <err_tcp+0x1a4>)
 8010b80:	480f      	ldr	r0, [pc, #60]	@ (8010bc0 <err_tcp+0x19c>)
 8010b82:	f00d fae3 	bl	801e14c <iprintf>
      conn->current_msg = NULL;
 8010b86:	69fb      	ldr	r3, [r7, #28]
 8010b88:	2200      	movs	r2, #0
 8010b8a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8010b8c:	68b8      	ldr	r0, [r7, #8]
 8010b8e:	f00c fac7 	bl	801d120 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8010b92:	e00b      	b.n	8010bac <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8010b94:	69fb      	ldr	r3, [r7, #28]
 8010b96:	6a1b      	ldr	r3, [r3, #32]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d008      	beq.n	8010bae <err_tcp+0x18a>
 8010b9c:	4b06      	ldr	r3, [pc, #24]	@ (8010bb8 <err_tcp+0x194>)
 8010b9e:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8010ba2:	490a      	ldr	r1, [pc, #40]	@ (8010bcc <err_tcp+0x1a8>)
 8010ba4:	4806      	ldr	r0, [pc, #24]	@ (8010bc0 <err_tcp+0x19c>)
 8010ba6:	f00d fad1 	bl	801e14c <iprintf>
  }
}
 8010baa:	e000      	b.n	8010bae <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8010bac:	bf00      	nop
}
 8010bae:	bf00      	nop
 8010bb0:	3720      	adds	r7, #32
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}
 8010bb6:	bf00      	nop
 8010bb8:	0801f878 	.word	0x0801f878
 8010bbc:	0801f9d0 	.word	0x0801f9d0
 8010bc0:	0801f8bc 	.word	0x0801f8bc
 8010bc4:	0801f9e0 	.word	0x0801f9e0
 8010bc8:	0801f9fc 	.word	0x0801f9fc
 8010bcc:	0801fa18 	.word	0x0801fa18

08010bd0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b084      	sub	sp, #16
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	685b      	ldr	r3, [r3, #4]
 8010bdc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8010bde:	6879      	ldr	r1, [r7, #4]
 8010be0:	68f8      	ldr	r0, [r7, #12]
 8010be2:	f004 fda1 	bl	8015728 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8010be6:	490a      	ldr	r1, [pc, #40]	@ (8010c10 <setup_tcp+0x40>)
 8010be8:	68f8      	ldr	r0, [r7, #12]
 8010bea:	f004 fdaf 	bl	801574c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8010bee:	4909      	ldr	r1, [pc, #36]	@ (8010c14 <setup_tcp+0x44>)
 8010bf0:	68f8      	ldr	r0, [r7, #12]
 8010bf2:	f004 fdcd 	bl	8015790 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8010bf6:	2202      	movs	r2, #2
 8010bf8:	4907      	ldr	r1, [pc, #28]	@ (8010c18 <setup_tcp+0x48>)
 8010bfa:	68f8      	ldr	r0, [r7, #12]
 8010bfc:	f004 fe24 	bl	8015848 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8010c00:	4906      	ldr	r1, [pc, #24]	@ (8010c1c <setup_tcp+0x4c>)
 8010c02:	68f8      	ldr	r0, [r7, #12]
 8010c04:	f004 fde6 	bl	80157d4 <tcp_err>
}
 8010c08:	bf00      	nop
 8010c0a:	3710      	adds	r7, #16
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}
 8010c10:	080107a9 	.word	0x080107a9
 8010c14:	0801097d 	.word	0x0801097d
 8010c18:	080108b5 	.word	0x080108b5
 8010c1c:	08010a25 	.word	0x08010a25

08010c20 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8010c20:	b590      	push	{r4, r7, lr}
 8010c22:	b089      	sub	sp, #36	@ 0x24
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	60f8      	str	r0, [r7, #12]
 8010c28:	60b9      	str	r1, [r7, #8]
 8010c2a:	4613      	mov	r3, r2
 8010c2c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8010c32:	69fb      	ldr	r3, [r7, #28]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d102      	bne.n	8010c3e <accept_function+0x1e>
    return ERR_VAL;
 8010c38:	f06f 0305 	mvn.w	r3, #5
 8010c3c:	e0a1      	b.n	8010d82 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8010c3e:	69fb      	ldr	r3, [r7, #28]
 8010c40:	3314      	adds	r3, #20
 8010c42:	4618      	mov	r0, r3
 8010c44:	f00c f9f5 	bl	801d032 <sys_mbox_valid>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d102      	bne.n	8010c54 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8010c4e:	f06f 0305 	mvn.w	r3, #5
 8010c52:	e096      	b.n	8010d82 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d11b      	bne.n	8010c92 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8010c5a:	69fb      	ldr	r3, [r7, #28]
 8010c5c:	f103 0414 	add.w	r4, r3, #20
 8010c60:	f06f 000c 	mvn.w	r0, #12
 8010c64:	f7ff fcb2 	bl	80105cc <lwip_netconn_err_to_msg>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	4619      	mov	r1, r3
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	f00c f96b 	bl	801cf48 <sys_mbox_trypost>
 8010c72:	4603      	mov	r3, r0
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d109      	bne.n	8010c8c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010c78:	69fb      	ldr	r3, [r7, #28]
 8010c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d005      	beq.n	8010c8c <accept_function+0x6c>
 8010c80:	69fb      	ldr	r3, [r7, #28]
 8010c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c84:	2200      	movs	r2, #0
 8010c86:	2100      	movs	r1, #0
 8010c88:	69f8      	ldr	r0, [r7, #28]
 8010c8a:	4798      	blx	r3
    }
    return ERR_VAL;
 8010c8c:	f06f 0305 	mvn.w	r3, #5
 8010c90:	e077      	b.n	8010d82 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8010c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d006      	beq.n	8010ca8 <accept_function+0x88>
 8010c9a:	4b3c      	ldr	r3, [pc, #240]	@ (8010d8c <accept_function+0x16c>)
 8010c9c:	f240 222a 	movw	r2, #554	@ 0x22a
 8010ca0:	493b      	ldr	r1, [pc, #236]	@ (8010d90 <accept_function+0x170>)
 8010ca2:	483c      	ldr	r0, [pc, #240]	@ (8010d94 <accept_function+0x174>)
 8010ca4:	f00d fa52 	bl	801e14c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8010ca8:	69fb      	ldr	r3, [r7, #28]
 8010caa:	781a      	ldrb	r2, [r3, #0]
 8010cac:	69fb      	ldr	r3, [r7, #28]
 8010cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cb0:	4619      	mov	r1, r3
 8010cb2:	4610      	mov	r0, r2
 8010cb4:	f000 f8f0 	bl	8010e98 <netconn_alloc>
 8010cb8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8010cba:	69bb      	ldr	r3, [r7, #24]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d11b      	bne.n	8010cf8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8010cc0:	69fb      	ldr	r3, [r7, #28]
 8010cc2:	f103 0414 	add.w	r4, r3, #20
 8010cc6:	f06f 000c 	mvn.w	r0, #12
 8010cca:	f7ff fc7f 	bl	80105cc <lwip_netconn_err_to_msg>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	f00c f938 	bl	801cf48 <sys_mbox_trypost>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d109      	bne.n	8010cf2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010cde:	69fb      	ldr	r3, [r7, #28]
 8010ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d005      	beq.n	8010cf2 <accept_function+0xd2>
 8010ce6:	69fb      	ldr	r3, [r7, #28]
 8010ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cea:	2200      	movs	r2, #0
 8010cec:	2100      	movs	r1, #0
 8010cee:	69f8      	ldr	r0, [r7, #28]
 8010cf0:	4798      	blx	r3
    }
    return ERR_MEM;
 8010cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8010cf6:	e044      	b.n	8010d82 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8010cf8:	69bb      	ldr	r3, [r7, #24]
 8010cfa:	68ba      	ldr	r2, [r7, #8]
 8010cfc:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8010cfe:	69b8      	ldr	r0, [r7, #24]
 8010d00:	f7ff ff66 	bl	8010bd0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8010d04:	69fb      	ldr	r3, [r7, #28]
 8010d06:	3314      	adds	r3, #20
 8010d08:	69b9      	ldr	r1, [r7, #24]
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f00c f91c 	bl	801cf48 <sys_mbox_trypost>
 8010d10:	4603      	mov	r3, r0
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d02a      	beq.n	8010d6c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8010d16:	69bb      	ldr	r3, [r7, #24]
 8010d18:	685b      	ldr	r3, [r3, #4]
 8010d1a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8010d1c:	2100      	movs	r1, #0
 8010d1e:	6978      	ldr	r0, [r7, #20]
 8010d20:	f004 fd02 	bl	8015728 <tcp_arg>
    tcp_recv(pcb, NULL);
 8010d24:	2100      	movs	r1, #0
 8010d26:	6978      	ldr	r0, [r7, #20]
 8010d28:	f004 fd10 	bl	801574c <tcp_recv>
    tcp_sent(pcb, NULL);
 8010d2c:	2100      	movs	r1, #0
 8010d2e:	6978      	ldr	r0, [r7, #20]
 8010d30:	f004 fd2e 	bl	8015790 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8010d34:	2200      	movs	r2, #0
 8010d36:	2100      	movs	r1, #0
 8010d38:	6978      	ldr	r0, [r7, #20]
 8010d3a:	f004 fd85 	bl	8015848 <tcp_poll>
    tcp_err(pcb, NULL);
 8010d3e:	2100      	movs	r1, #0
 8010d40:	6978      	ldr	r0, [r7, #20]
 8010d42:	f004 fd47 	bl	80157d4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8010d46:	69bb      	ldr	r3, [r7, #24]
 8010d48:	2200      	movs	r2, #0
 8010d4a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8010d4c:	69bb      	ldr	r3, [r7, #24]
 8010d4e:	3310      	adds	r3, #16
 8010d50:	4618      	mov	r0, r3
 8010d52:	f00c f8e7 	bl	801cf24 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8010d56:	69bb      	ldr	r3, [r7, #24]
 8010d58:	3310      	adds	r3, #16
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f00c f97a 	bl	801d054 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8010d60:	69b8      	ldr	r0, [r7, #24]
 8010d62:	f000 f907 	bl	8010f74 <netconn_free>
    return ERR_MEM;
 8010d66:	f04f 33ff 	mov.w	r3, #4294967295
 8010d6a:	e00a      	b.n	8010d82 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010d6c:	69fb      	ldr	r3, [r7, #28]
 8010d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d005      	beq.n	8010d80 <accept_function+0x160>
 8010d74:	69fb      	ldr	r3, [r7, #28]
 8010d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d78:	2200      	movs	r2, #0
 8010d7a:	2100      	movs	r1, #0
 8010d7c:	69f8      	ldr	r0, [r7, #28]
 8010d7e:	4798      	blx	r3
  }

  return ERR_OK;
 8010d80:	2300      	movs	r3, #0
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3724      	adds	r7, #36	@ 0x24
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd90      	pop	{r4, r7, pc}
 8010d8a:	bf00      	nop
 8010d8c:	0801f878 	.word	0x0801f878
 8010d90:	0801fa34 	.word	0x0801fa34
 8010d94:	0801f8bc 	.word	0x0801f8bc

08010d98 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8010d98:	b590      	push	{r4, r7, lr}
 8010d9a:	b085      	sub	sp, #20
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8010da0:	2300      	movs	r3, #0
 8010da2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d006      	beq.n	8010dbc <pcb_new+0x24>
 8010dae:	4b2b      	ldr	r3, [pc, #172]	@ (8010e5c <pcb_new+0xc4>)
 8010db0:	f240 2265 	movw	r2, #613	@ 0x265
 8010db4:	492a      	ldr	r1, [pc, #168]	@ (8010e60 <pcb_new+0xc8>)
 8010db6:	482b      	ldr	r0, [pc, #172]	@ (8010e64 <pcb_new+0xcc>)
 8010db8:	f00d f9c8 	bl	801e14c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	781b      	ldrb	r3, [r3, #0]
 8010dc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010dc6:	2b10      	cmp	r3, #16
 8010dc8:	d022      	beq.n	8010e10 <pcb_new+0x78>
 8010dca:	2b20      	cmp	r3, #32
 8010dcc:	d133      	bne.n	8010e36 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681c      	ldr	r4, [r3, #0]
 8010dd2:	7bfb      	ldrb	r3, [r7, #15]
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f009 fd80 	bl	801a8da <udp_new_ip_type>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	685b      	ldr	r3, [r3, #4]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d02a      	beq.n	8010e3e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	781b      	ldrb	r3, [r3, #0]
 8010dee:	2b22      	cmp	r3, #34	@ 0x22
 8010df0:	d104      	bne.n	8010dfc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	685b      	ldr	r3, [r3, #4]
 8010df8:	2201      	movs	r2, #1
 8010dfa:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	6858      	ldr	r0, [r3, #4]
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	461a      	mov	r2, r3
 8010e08:	4917      	ldr	r1, [pc, #92]	@ (8010e68 <pcb_new+0xd0>)
 8010e0a:	f009 fced 	bl	801a7e8 <udp_recv>
      }
      break;
 8010e0e:	e016      	b.n	8010e3e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681c      	ldr	r4, [r3, #0]
 8010e14:	7bfb      	ldrb	r3, [r7, #15]
 8010e16:	4618      	mov	r0, r3
 8010e18:	f004 fc78 	bl	801570c <tcp_new_ip_type>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	685b      	ldr	r3, [r3, #4]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d00b      	beq.n	8010e42 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f7ff fece 	bl	8010bd0 <setup_tcp>
      }
      break;
 8010e34:	e005      	b.n	8010e42 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	22fa      	movs	r2, #250	@ 0xfa
 8010e3a:	711a      	strb	r2, [r3, #4]
      return;
 8010e3c:	e00a      	b.n	8010e54 <pcb_new+0xbc>
      break;
 8010e3e:	bf00      	nop
 8010e40:	e000      	b.n	8010e44 <pcb_new+0xac>
      break;
 8010e42:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	685b      	ldr	r3, [r3, #4]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d102      	bne.n	8010e54 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	22ff      	movs	r2, #255	@ 0xff
 8010e52:	711a      	strb	r2, [r3, #4]
  }
}
 8010e54:	3714      	adds	r7, #20
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd90      	pop	{r4, r7, pc}
 8010e5a:	bf00      	nop
 8010e5c:	0801f878 	.word	0x0801f878
 8010e60:	0801fa5c 	.word	0x0801fa5c
 8010e64:	0801f8bc 	.word	0x0801f8bc
 8010e68:	080106ad 	.word	0x080106ad

08010e6c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b084      	sub	sp, #16
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	685b      	ldr	r3, [r3, #4]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d102      	bne.n	8010e8e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8010e88:	68f8      	ldr	r0, [r7, #12]
 8010e8a:	f7ff ff85 	bl	8010d98 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8010e8e:	bf00      	nop
 8010e90:	3710      	adds	r7, #16
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}
	...

08010e98 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b086      	sub	sp, #24
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	6039      	str	r1, [r7, #0]
 8010ea2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8010ea8:	2007      	movs	r0, #7
 8010eaa:	f001 fea3 	bl	8012bf4 <memp_malloc>
 8010eae:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d101      	bne.n	8010eba <netconn_alloc+0x22>
    return NULL;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	e052      	b.n	8010f60 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	79fa      	ldrb	r2, [r7, #7]
 8010ec4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	2200      	movs	r2, #0
 8010eca:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8010ecc:	79fb      	ldrb	r3, [r7, #7]
 8010ece:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010ed2:	2b10      	cmp	r3, #16
 8010ed4:	d004      	beq.n	8010ee0 <netconn_alloc+0x48>
 8010ed6:	2b20      	cmp	r3, #32
 8010ed8:	d105      	bne.n	8010ee6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8010eda:	2306      	movs	r3, #6
 8010edc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8010ede:	e00a      	b.n	8010ef6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8010ee0:	2306      	movs	r3, #6
 8010ee2:	617b      	str	r3, [r7, #20]
      break;
 8010ee4:	e007      	b.n	8010ef6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8010ee6:	4b20      	ldr	r3, [pc, #128]	@ (8010f68 <netconn_alloc+0xd0>)
 8010ee8:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8010eec:	491f      	ldr	r1, [pc, #124]	@ (8010f6c <netconn_alloc+0xd4>)
 8010eee:	4820      	ldr	r0, [pc, #128]	@ (8010f70 <netconn_alloc+0xd8>)
 8010ef0:	f00d f92c 	bl	801e14c <iprintf>
      goto free_and_return;
 8010ef4:	e02f      	b.n	8010f56 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	3310      	adds	r3, #16
 8010efa:	6979      	ldr	r1, [r7, #20]
 8010efc:	4618      	mov	r0, r3
 8010efe:	f00b ffef 	bl	801cee0 <sys_mbox_new>
 8010f02:	4603      	mov	r3, r0
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d125      	bne.n	8010f54 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	330c      	adds	r3, #12
 8010f0c:	2100      	movs	r1, #0
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f00c f8ad 	bl	801d06e <sys_sem_new>
 8010f14:	4603      	mov	r3, r0
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d005      	beq.n	8010f26 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	3310      	adds	r3, #16
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f00c f800 	bl	801cf24 <sys_mbox_free>
    goto free_and_return;
 8010f24:	e017      	b.n	8010f56 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	3314      	adds	r3, #20
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f00c f892 	bl	801d054 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	2200      	movs	r2, #0
 8010f34:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	f04f 32ff 	mov.w	r2, #4294967295
 8010f3c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	683a      	ldr	r2, [r7, #0]
 8010f42:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	2200      	movs	r2, #0
 8010f48:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	7cfa      	ldrb	r2, [r7, #19]
 8010f4e:	771a      	strb	r2, [r3, #28]
  return conn;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	e005      	b.n	8010f60 <netconn_alloc+0xc8>
    goto free_and_return;
 8010f54:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8010f56:	68f9      	ldr	r1, [r7, #12]
 8010f58:	2007      	movs	r0, #7
 8010f5a:	f001 fec1 	bl	8012ce0 <memp_free>
  return NULL;
 8010f5e:	2300      	movs	r3, #0
}
 8010f60:	4618      	mov	r0, r3
 8010f62:	3718      	adds	r7, #24
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}
 8010f68:	0801f878 	.word	0x0801f878
 8010f6c:	0801fa7c 	.word	0x0801fa7c
 8010f70:	0801f8bc 	.word	0x0801f8bc

08010f74 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b082      	sub	sp, #8
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	685b      	ldr	r3, [r3, #4]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d006      	beq.n	8010f92 <netconn_free+0x1e>
 8010f84:	4b1b      	ldr	r3, [pc, #108]	@ (8010ff4 <netconn_free+0x80>)
 8010f86:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8010f8a:	491b      	ldr	r1, [pc, #108]	@ (8010ff8 <netconn_free+0x84>)
 8010f8c:	481b      	ldr	r0, [pc, #108]	@ (8010ffc <netconn_free+0x88>)
 8010f8e:	f00d f8dd 	bl	801e14c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	3310      	adds	r3, #16
 8010f96:	4618      	mov	r0, r3
 8010f98:	f00c f84b 	bl	801d032 <sys_mbox_valid>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d006      	beq.n	8010fb0 <netconn_free+0x3c>
 8010fa2:	4b14      	ldr	r3, [pc, #80]	@ (8010ff4 <netconn_free+0x80>)
 8010fa4:	f240 3223 	movw	r2, #803	@ 0x323
 8010fa8:	4915      	ldr	r1, [pc, #84]	@ (8011000 <netconn_free+0x8c>)
 8010faa:	4814      	ldr	r0, [pc, #80]	@ (8010ffc <netconn_free+0x88>)
 8010fac:	f00d f8ce 	bl	801e14c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	3314      	adds	r3, #20
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f00c f83c 	bl	801d032 <sys_mbox_valid>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d006      	beq.n	8010fce <netconn_free+0x5a>
 8010fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8010ff4 <netconn_free+0x80>)
 8010fc2:	f240 3226 	movw	r2, #806	@ 0x326
 8010fc6:	490f      	ldr	r1, [pc, #60]	@ (8011004 <netconn_free+0x90>)
 8010fc8:	480c      	ldr	r0, [pc, #48]	@ (8010ffc <netconn_free+0x88>)
 8010fca:	f00d f8bf 	bl	801e14c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	330c      	adds	r3, #12
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f00c f8b1 	bl	801d13a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	330c      	adds	r3, #12
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f00c f8ca 	bl	801d176 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8010fe2:	6879      	ldr	r1, [r7, #4]
 8010fe4:	2007      	movs	r0, #7
 8010fe6:	f001 fe7b 	bl	8012ce0 <memp_free>
}
 8010fea:	bf00      	nop
 8010fec:	3708      	adds	r7, #8
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}
 8010ff2:	bf00      	nop
 8010ff4:	0801f878 	.word	0x0801f878
 8010ff8:	0801faa4 	.word	0x0801faa4
 8010ffc:	0801f8bc 	.word	0x0801f8bc
 8011000:	0801fad4 	.word	0x0801fad4
 8011004:	0801fb10 	.word	0x0801fb10

08011008 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b086      	sub	sp, #24
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	3310      	adds	r3, #16
 8011014:	4618      	mov	r0, r3
 8011016:	f00c f80c 	bl	801d032 <sys_mbox_valid>
 801101a:	4603      	mov	r3, r0
 801101c:	2b00      	cmp	r3, #0
 801101e:	d02f      	beq.n	8011080 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011020:	e018      	b.n	8011054 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	781b      	ldrb	r3, [r3, #0]
 8011026:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801102a:	2b10      	cmp	r3, #16
 801102c:	d10e      	bne.n	801104c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	f107 020f 	add.w	r2, r7, #15
 8011034:	4611      	mov	r1, r2
 8011036:	4618      	mov	r0, r3
 8011038:	f7ff fafe 	bl	8010638 <lwip_netconn_is_err_msg>
 801103c:	4603      	mov	r3, r0
 801103e:	2b00      	cmp	r3, #0
 8011040:	d108      	bne.n	8011054 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	4618      	mov	r0, r3
 8011046:	f002 fcef 	bl	8013a28 <pbuf_free>
 801104a:	e003      	b.n	8011054 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	4618      	mov	r0, r3
 8011050:	f000 fe92 	bl	8011d78 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	3310      	adds	r3, #16
 8011058:	f107 0210 	add.w	r2, r7, #16
 801105c:	4611      	mov	r1, r2
 801105e:	4618      	mov	r0, r3
 8011060:	f00b ffcb 	bl	801cffa <sys_arch_mbox_tryfetch>
 8011064:	4603      	mov	r3, r0
 8011066:	f1b3 3fff 	cmp.w	r3, #4294967295
 801106a:	d1da      	bne.n	8011022 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	3310      	adds	r3, #16
 8011070:	4618      	mov	r0, r3
 8011072:	f00b ff57 	bl	801cf24 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	3310      	adds	r3, #16
 801107a:	4618      	mov	r0, r3
 801107c:	f00b ffea 	bl	801d054 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	3314      	adds	r3, #20
 8011084:	4618      	mov	r0, r3
 8011086:	f00b ffd4 	bl	801d032 <sys_mbox_valid>
 801108a:	4603      	mov	r3, r0
 801108c:	2b00      	cmp	r3, #0
 801108e:	d034      	beq.n	80110fa <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011090:	e01d      	b.n	80110ce <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011092:	693b      	ldr	r3, [r7, #16]
 8011094:	f107 020e 	add.w	r2, r7, #14
 8011098:	4611      	mov	r1, r2
 801109a:	4618      	mov	r0, r3
 801109c:	f7ff facc 	bl	8010638 <lwip_netconn_is_err_msg>
 80110a0:	4603      	mov	r3, r0
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d113      	bne.n	80110ce <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80110a6:	693b      	ldr	r3, [r7, #16]
 80110a8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80110aa:	6978      	ldr	r0, [r7, #20]
 80110ac:	f7ff ffac 	bl	8011008 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d007      	beq.n	80110c8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80110b8:	697b      	ldr	r3, [r7, #20]
 80110ba:	685b      	ldr	r3, [r3, #4]
 80110bc:	4618      	mov	r0, r3
 80110be:	f003 faa3 	bl	8014608 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80110c2:	697b      	ldr	r3, [r7, #20]
 80110c4:	2200      	movs	r2, #0
 80110c6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80110c8:	6978      	ldr	r0, [r7, #20]
 80110ca:	f7ff ff53 	bl	8010f74 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	3314      	adds	r3, #20
 80110d2:	f107 0210 	add.w	r2, r7, #16
 80110d6:	4611      	mov	r1, r2
 80110d8:	4618      	mov	r0, r3
 80110da:	f00b ff8e 	bl	801cffa <sys_arch_mbox_tryfetch>
 80110de:	4603      	mov	r3, r0
 80110e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110e4:	d1d5      	bne.n	8011092 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	3314      	adds	r3, #20
 80110ea:	4618      	mov	r0, r3
 80110ec:	f00b ff1a 	bl	801cf24 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	3314      	adds	r3, #20
 80110f4:	4618      	mov	r0, r3
 80110f6:	f00b ffad 	bl	801d054 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80110fa:	bf00      	nop
 80110fc:	3718      	adds	r7, #24
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}
	...

08011104 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b086      	sub	sp, #24
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
 801110c:	460b      	mov	r3, r1
 801110e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8011110:	2300      	movs	r3, #0
 8011112:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d106      	bne.n	8011128 <lwip_netconn_do_close_internal+0x24>
 801111a:	4b87      	ldr	r3, [pc, #540]	@ (8011338 <lwip_netconn_do_close_internal+0x234>)
 801111c:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8011120:	4986      	ldr	r1, [pc, #536]	@ (801133c <lwip_netconn_do_close_internal+0x238>)
 8011122:	4887      	ldr	r0, [pc, #540]	@ (8011340 <lwip_netconn_do_close_internal+0x23c>)
 8011124:	f00d f812 	bl	801e14c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	781b      	ldrb	r3, [r3, #0]
 801112c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011130:	2b10      	cmp	r3, #16
 8011132:	d006      	beq.n	8011142 <lwip_netconn_do_close_internal+0x3e>
 8011134:	4b80      	ldr	r3, [pc, #512]	@ (8011338 <lwip_netconn_do_close_internal+0x234>)
 8011136:	f240 32a3 	movw	r2, #931	@ 0x3a3
 801113a:	4982      	ldr	r1, [pc, #520]	@ (8011344 <lwip_netconn_do_close_internal+0x240>)
 801113c:	4880      	ldr	r0, [pc, #512]	@ (8011340 <lwip_netconn_do_close_internal+0x23c>)
 801113e:	f00d f805 	bl	801e14c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	785b      	ldrb	r3, [r3, #1]
 8011146:	2b04      	cmp	r3, #4
 8011148:	d006      	beq.n	8011158 <lwip_netconn_do_close_internal+0x54>
 801114a:	4b7b      	ldr	r3, [pc, #492]	@ (8011338 <lwip_netconn_do_close_internal+0x234>)
 801114c:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8011150:	497d      	ldr	r1, [pc, #500]	@ (8011348 <lwip_netconn_do_close_internal+0x244>)
 8011152:	487b      	ldr	r0, [pc, #492]	@ (8011340 <lwip_netconn_do_close_internal+0x23c>)
 8011154:	f00c fffa 	bl	801e14c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	685b      	ldr	r3, [r3, #4]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d106      	bne.n	801116e <lwip_netconn_do_close_internal+0x6a>
 8011160:	4b75      	ldr	r3, [pc, #468]	@ (8011338 <lwip_netconn_do_close_internal+0x234>)
 8011162:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8011166:	4979      	ldr	r1, [pc, #484]	@ (801134c <lwip_netconn_do_close_internal+0x248>)
 8011168:	4875      	ldr	r0, [pc, #468]	@ (8011340 <lwip_netconn_do_close_internal+0x23c>)
 801116a:	f00c ffef 	bl	801e14c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6a1b      	ldr	r3, [r3, #32]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d106      	bne.n	8011184 <lwip_netconn_do_close_internal+0x80>
 8011176:	4b70      	ldr	r3, [pc, #448]	@ (8011338 <lwip_netconn_do_close_internal+0x234>)
 8011178:	f240 32a6 	movw	r2, #934	@ 0x3a6
 801117c:	4974      	ldr	r1, [pc, #464]	@ (8011350 <lwip_netconn_do_close_internal+0x24c>)
 801117e:	4870      	ldr	r0, [pc, #448]	@ (8011340 <lwip_netconn_do_close_internal+0x23c>)
 8011180:	f00c ffe4 	bl	801e14c <iprintf>

  tpcb = conn->pcb.tcp;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	685b      	ldr	r3, [r3, #4]
 8011188:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6a1b      	ldr	r3, [r3, #32]
 801118e:	7a1b      	ldrb	r3, [r3, #8]
 8011190:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8011192:	7bfb      	ldrb	r3, [r7, #15]
 8011194:	f003 0301 	and.w	r3, r3, #1
 8011198:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 801119a:	7bfb      	ldrb	r3, [r7, #15]
 801119c:	f003 0302 	and.w	r3, r3, #2
 80111a0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80111a2:	7bfb      	ldrb	r3, [r7, #15]
 80111a4:	2b03      	cmp	r3, #3
 80111a6:	d102      	bne.n	80111ae <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80111a8:	2301      	movs	r3, #1
 80111aa:	75bb      	strb	r3, [r7, #22]
 80111ac:	e01f      	b.n	80111ee <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80111ae:	7bbb      	ldrb	r3, [r7, #14]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d00e      	beq.n	80111d2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80111b4:	693b      	ldr	r3, [r7, #16]
 80111b6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80111b8:	2b05      	cmp	r3, #5
 80111ba:	d007      	beq.n	80111cc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80111bc:	693b      	ldr	r3, [r7, #16]
 80111be:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80111c0:	2b06      	cmp	r3, #6
 80111c2:	d003      	beq.n	80111cc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80111c4:	693b      	ldr	r3, [r7, #16]
 80111c6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80111c8:	2b08      	cmp	r3, #8
 80111ca:	d102      	bne.n	80111d2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80111cc:	2301      	movs	r3, #1
 80111ce:	75bb      	strb	r3, [r7, #22]
 80111d0:	e00d      	b.n	80111ee <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80111d2:	7b7b      	ldrb	r3, [r7, #13]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d008      	beq.n	80111ea <lwip_netconn_do_close_internal+0xe6>
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	8b5b      	ldrh	r3, [r3, #26]
 80111dc:	f003 0310 	and.w	r3, r3, #16
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d002      	beq.n	80111ea <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80111e4:	2301      	movs	r3, #1
 80111e6:	75bb      	strb	r3, [r7, #22]
 80111e8:	e001      	b.n	80111ee <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80111ea:	2300      	movs	r3, #0
 80111ec:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80111ee:	7dbb      	ldrb	r3, [r7, #22]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d003      	beq.n	80111fc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80111f4:	2100      	movs	r1, #0
 80111f6:	6938      	ldr	r0, [r7, #16]
 80111f8:	f004 fa96 	bl	8015728 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80111fc:	693b      	ldr	r3, [r7, #16]
 80111fe:	7d1b      	ldrb	r3, [r3, #20]
 8011200:	2b01      	cmp	r3, #1
 8011202:	d104      	bne.n	801120e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8011204:	2100      	movs	r1, #0
 8011206:	6938      	ldr	r0, [r7, #16]
 8011208:	f004 fb06 	bl	8015818 <tcp_accept>
 801120c:	e01d      	b.n	801124a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 801120e:	7bbb      	ldrb	r3, [r7, #14]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d007      	beq.n	8011224 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8011214:	2100      	movs	r1, #0
 8011216:	6938      	ldr	r0, [r7, #16]
 8011218:	f004 fa98 	bl	801574c <tcp_recv>
      tcp_accept(tpcb, NULL);
 801121c:	2100      	movs	r1, #0
 801121e:	6938      	ldr	r0, [r7, #16]
 8011220:	f004 fafa 	bl	8015818 <tcp_accept>
    }
    if (shut_tx) {
 8011224:	7b7b      	ldrb	r3, [r7, #13]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d003      	beq.n	8011232 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 801122a:	2100      	movs	r1, #0
 801122c:	6938      	ldr	r0, [r7, #16]
 801122e:	f004 faaf 	bl	8015790 <tcp_sent>
    }
    if (shut_close) {
 8011232:	7dbb      	ldrb	r3, [r7, #22]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d008      	beq.n	801124a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8011238:	2200      	movs	r2, #0
 801123a:	2100      	movs	r1, #0
 801123c:	6938      	ldr	r0, [r7, #16]
 801123e:	f004 fb03 	bl	8015848 <tcp_poll>
      tcp_err(tpcb, NULL);
 8011242:	2100      	movs	r1, #0
 8011244:	6938      	ldr	r0, [r7, #16]
 8011246:	f004 fac5 	bl	80157d4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 801124a:	7dbb      	ldrb	r3, [r7, #22]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d005      	beq.n	801125c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8011250:	6938      	ldr	r0, [r7, #16]
 8011252:	f003 f893 	bl	801437c <tcp_close>
 8011256:	4603      	mov	r3, r0
 8011258:	75fb      	strb	r3, [r7, #23]
 801125a:	e007      	b.n	801126c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 801125c:	7bbb      	ldrb	r3, [r7, #14]
 801125e:	7b7a      	ldrb	r2, [r7, #13]
 8011260:	4619      	mov	r1, r3
 8011262:	6938      	ldr	r0, [r7, #16]
 8011264:	f003 f8b6 	bl	80143d4 <tcp_shutdown>
 8011268:	4603      	mov	r3, r0
 801126a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 801126c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d102      	bne.n	801127a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8011274:	2301      	movs	r3, #1
 8011276:	757b      	strb	r3, [r7, #21]
 8011278:	e016      	b.n	80112a8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 801127a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801127e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011282:	d10f      	bne.n	80112a4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	6a1b      	ldr	r3, [r3, #32]
 8011288:	7a5b      	ldrb	r3, [r3, #9]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d10c      	bne.n	80112a8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 801128e:	2301      	movs	r3, #1
 8011290:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8011292:	7dbb      	ldrb	r3, [r7, #22]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d007      	beq.n	80112a8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8011298:	6938      	ldr	r0, [r7, #16]
 801129a:	f003 f9b5 	bl	8014608 <tcp_abort>
          err = ERR_OK;
 801129e:	2300      	movs	r3, #0
 80112a0:	75fb      	strb	r3, [r7, #23]
 80112a2:	e001      	b.n	80112a8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80112a4:	2301      	movs	r3, #1
 80112a6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80112a8:	7d7b      	ldrb	r3, [r7, #21]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d052      	beq.n	8011354 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	6a1b      	ldr	r3, [r3, #32]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	330c      	adds	r3, #12
 80112b6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6a1b      	ldr	r3, [r3, #32]
 80112bc:	7dfa      	ldrb	r2, [r7, #23]
 80112be:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	2200      	movs	r2, #0
 80112c4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	2200      	movs	r2, #0
 80112ca:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80112cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d129      	bne.n	8011328 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80112d4:	7dbb      	ldrb	r3, [r7, #22]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d00c      	beq.n	80112f4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2200      	movs	r2, #0
 80112de:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d005      	beq.n	80112f4 <lwip_netconn_do_close_internal+0x1f0>
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112ec:	2200      	movs	r2, #0
 80112ee:	2104      	movs	r1, #4
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	4798      	blx	r3
      }
      if (shut_rx) {
 80112f4:	7bbb      	ldrb	r3, [r7, #14]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d009      	beq.n	801130e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d005      	beq.n	801130e <lwip_netconn_do_close_internal+0x20a>
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011306:	2200      	movs	r2, #0
 8011308:	2100      	movs	r1, #0
 801130a:	6878      	ldr	r0, [r7, #4]
 801130c:	4798      	blx	r3
      }
      if (shut_tx) {
 801130e:	7b7b      	ldrb	r3, [r7, #13]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d009      	beq.n	8011328 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011318:	2b00      	cmp	r3, #0
 801131a:	d005      	beq.n	8011328 <lwip_netconn_do_close_internal+0x224>
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011320:	2200      	movs	r2, #0
 8011322:	2102      	movs	r1, #2
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8011328:	78fb      	ldrb	r3, [r7, #3]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d002      	beq.n	8011334 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 801132e:	68b8      	ldr	r0, [r7, #8]
 8011330:	f00b fef6 	bl	801d120 <sys_sem_signal>
    }
    return ERR_OK;
 8011334:	2300      	movs	r3, #0
 8011336:	e03c      	b.n	80113b2 <lwip_netconn_do_close_internal+0x2ae>
 8011338:	0801f878 	.word	0x0801f878
 801133c:	0801fb4c 	.word	0x0801fb4c
 8011340:	0801f8bc 	.word	0x0801f8bc
 8011344:	0801fb5c 	.word	0x0801fb5c
 8011348:	0801fb7c 	.word	0x0801fb7c
 801134c:	0801fba0 	.word	0x0801fba0
 8011350:	0801f9e0 	.word	0x0801f9e0
  }
  if (!close_finished) {
 8011354:	7d7b      	ldrb	r3, [r7, #21]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d11e      	bne.n	8011398 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801135a:	693b      	ldr	r3, [r7, #16]
 801135c:	7d1b      	ldrb	r3, [r3, #20]
 801135e:	2b01      	cmp	r3, #1
 8011360:	d106      	bne.n	8011370 <lwip_netconn_do_close_internal+0x26c>
 8011362:	4b16      	ldr	r3, [pc, #88]	@ (80113bc <lwip_netconn_do_close_internal+0x2b8>)
 8011364:	f240 4241 	movw	r2, #1089	@ 0x441
 8011368:	4915      	ldr	r1, [pc, #84]	@ (80113c0 <lwip_netconn_do_close_internal+0x2bc>)
 801136a:	4816      	ldr	r0, [pc, #88]	@ (80113c4 <lwip_netconn_do_close_internal+0x2c0>)
 801136c:	f00c feee 	bl	801e14c <iprintf>
    if (shut_tx) {
 8011370:	7b7b      	ldrb	r3, [r7, #13]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d003      	beq.n	801137e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8011376:	4914      	ldr	r1, [pc, #80]	@ (80113c8 <lwip_netconn_do_close_internal+0x2c4>)
 8011378:	6938      	ldr	r0, [r7, #16]
 801137a:	f004 fa09 	bl	8015790 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 801137e:	2201      	movs	r2, #1
 8011380:	4912      	ldr	r1, [pc, #72]	@ (80113cc <lwip_netconn_do_close_internal+0x2c8>)
 8011382:	6938      	ldr	r0, [r7, #16]
 8011384:	f004 fa60 	bl	8015848 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8011388:	4911      	ldr	r1, [pc, #68]	@ (80113d0 <lwip_netconn_do_close_internal+0x2cc>)
 801138a:	6938      	ldr	r0, [r7, #16]
 801138c:	f004 fa22 	bl	80157d4 <tcp_err>
    tcp_arg(tpcb, conn);
 8011390:	6879      	ldr	r1, [r7, #4]
 8011392:	6938      	ldr	r0, [r7, #16]
 8011394:	f004 f9c8 	bl	8015728 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8011398:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d106      	bne.n	80113ae <lwip_netconn_do_close_internal+0x2aa>
 80113a0:	4b06      	ldr	r3, [pc, #24]	@ (80113bc <lwip_netconn_do_close_internal+0x2b8>)
 80113a2:	f240 424d 	movw	r2, #1101	@ 0x44d
 80113a6:	490b      	ldr	r1, [pc, #44]	@ (80113d4 <lwip_netconn_do_close_internal+0x2d0>)
 80113a8:	4806      	ldr	r0, [pc, #24]	@ (80113c4 <lwip_netconn_do_close_internal+0x2c0>)
 80113aa:	f00c fecf 	bl	801e14c <iprintf>
  return err;
 80113ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3718      	adds	r7, #24
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	0801f878 	.word	0x0801f878
 80113c0:	0801fbb4 	.word	0x0801fbb4
 80113c4:	0801f8bc 	.word	0x0801f8bc
 80113c8:	0801097d 	.word	0x0801097d
 80113cc:	080108b5 	.word	0x080108b5
 80113d0:	08010a25 	.word	0x08010a25
 80113d4:	0801fbd8 	.word	0x0801fbd8

080113d8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b084      	sub	sp, #16
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	785b      	ldrb	r3, [r3, #1]
 80113ea:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80113ec:	7afb      	ldrb	r3, [r7, #11]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d00d      	beq.n	801140e <lwip_netconn_do_delconn+0x36>
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80113fc:	2b10      	cmp	r3, #16
 80113fe:	d006      	beq.n	801140e <lwip_netconn_do_delconn+0x36>
 8011400:	4b60      	ldr	r3, [pc, #384]	@ (8011584 <lwip_netconn_do_delconn+0x1ac>)
 8011402:	f240 425e 	movw	r2, #1118	@ 0x45e
 8011406:	4960      	ldr	r1, [pc, #384]	@ (8011588 <lwip_netconn_do_delconn+0x1b0>)
 8011408:	4860      	ldr	r0, [pc, #384]	@ (801158c <lwip_netconn_do_delconn+0x1b4>)
 801140a:	f00c fe9f 	bl	801e14c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 801140e:	7afb      	ldrb	r3, [r7, #11]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d005      	beq.n	8011420 <lwip_netconn_do_delconn+0x48>
 8011414:	7afb      	ldrb	r3, [r7, #11]
 8011416:	2b02      	cmp	r3, #2
 8011418:	d002      	beq.n	8011420 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 801141a:	7afb      	ldrb	r3, [r7, #11]
 801141c:	2b03      	cmp	r3, #3
 801141e:	d109      	bne.n	8011434 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8011420:	7afb      	ldrb	r3, [r7, #11]
 8011422:	2b03      	cmp	r3, #3
 8011424:	d10a      	bne.n	801143c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	7f1b      	ldrb	r3, [r3, #28]
 801142c:	f003 0304 	and.w	r3, r3, #4
 8011430:	2b00      	cmp	r3, #0
 8011432:	d103      	bne.n	801143c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	22fb      	movs	r2, #251	@ 0xfb
 8011438:	711a      	strb	r2, [r3, #4]
 801143a:	e097      	b.n	801156c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 801143c:	7afb      	ldrb	r3, [r7, #11]
 801143e:	2b03      	cmp	r3, #3
 8011440:	d10d      	bne.n	801145e <lwip_netconn_do_delconn+0x86>
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	7f1b      	ldrb	r3, [r3, #28]
 8011448:	f003 0304 	and.w	r3, r3, #4
 801144c:	2b00      	cmp	r3, #0
 801144e:	d106      	bne.n	801145e <lwip_netconn_do_delconn+0x86>
 8011450:	4b4c      	ldr	r3, [pc, #304]	@ (8011584 <lwip_netconn_do_delconn+0x1ac>)
 8011452:	f240 427a 	movw	r2, #1146	@ 0x47a
 8011456:	494e      	ldr	r1, [pc, #312]	@ (8011590 <lwip_netconn_do_delconn+0x1b8>)
 8011458:	484c      	ldr	r0, [pc, #304]	@ (801158c <lwip_netconn_do_delconn+0x1b4>)
 801145a:	f00c fe77 	bl	801e14c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	2200      	movs	r2, #0
 8011462:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	4618      	mov	r0, r3
 801146a:	f7ff fdcd 	bl	8011008 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d05f      	beq.n	8011538 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	781b      	ldrb	r3, [r3, #0]
 801147e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011482:	2b10      	cmp	r3, #16
 8011484:	d00d      	beq.n	80114a2 <lwip_netconn_do_delconn+0xca>
 8011486:	2b20      	cmp	r3, #32
 8011488:	d151      	bne.n	801152e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	685b      	ldr	r3, [r3, #4]
 8011490:	2200      	movs	r2, #0
 8011492:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	4618      	mov	r0, r3
 801149c:	f009 f9c4 	bl	801a828 <udp_remove>
          break;
 80114a0:	e046      	b.n	8011530 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	6a1b      	ldr	r3, [r3, #32]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d006      	beq.n	80114ba <lwip_netconn_do_delconn+0xe2>
 80114ac:	4b35      	ldr	r3, [pc, #212]	@ (8011584 <lwip_netconn_do_delconn+0x1ac>)
 80114ae:	f240 4294 	movw	r2, #1172	@ 0x494
 80114b2:	4938      	ldr	r1, [pc, #224]	@ (8011594 <lwip_netconn_do_delconn+0x1bc>)
 80114b4:	4835      	ldr	r0, [pc, #212]	@ (801158c <lwip_netconn_do_delconn+0x1b4>)
 80114b6:	f00c fe49 	bl	801e14c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	2204      	movs	r2, #4
 80114c0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	2203      	movs	r2, #3
 80114c6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	68fa      	ldr	r2, [r7, #12]
 80114ce:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	2100      	movs	r1, #0
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7ff fe14 	bl	8011104 <lwip_netconn_do_close_internal>
 80114dc:	4603      	mov	r3, r0
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d04b      	beq.n	801157a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	785b      	ldrb	r3, [r3, #1]
 80114e8:	2b04      	cmp	r3, #4
 80114ea:	d006      	beq.n	80114fa <lwip_netconn_do_delconn+0x122>
 80114ec:	4b25      	ldr	r3, [pc, #148]	@ (8011584 <lwip_netconn_do_delconn+0x1ac>)
 80114ee:	f240 429a 	movw	r2, #1178	@ 0x49a
 80114f2:	4929      	ldr	r1, [pc, #164]	@ (8011598 <lwip_netconn_do_delconn+0x1c0>)
 80114f4:	4825      	ldr	r0, [pc, #148]	@ (801158c <lwip_netconn_do_delconn+0x1b4>)
 80114f6:	f00c fe29 	bl	801e14c <iprintf>
            UNLOCK_TCPIP_CORE();
 80114fa:	4828      	ldr	r0, [pc, #160]	@ (801159c <lwip_netconn_do_delconn+0x1c4>)
 80114fc:	f00b fe81 	bl	801d202 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	330c      	adds	r3, #12
 8011506:	2100      	movs	r1, #0
 8011508:	4618      	mov	r0, r3
 801150a:	f00b fdd8 	bl	801d0be <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 801150e:	4823      	ldr	r0, [pc, #140]	@ (801159c <lwip_netconn_do_delconn+0x1c4>)
 8011510:	f00b fe68 	bl	801d1e4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	785b      	ldrb	r3, [r3, #1]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d02d      	beq.n	801157a <lwip_netconn_do_delconn+0x1a2>
 801151e:	4b19      	ldr	r3, [pc, #100]	@ (8011584 <lwip_netconn_do_delconn+0x1ac>)
 8011520:	f240 429e 	movw	r2, #1182	@ 0x49e
 8011524:	491c      	ldr	r1, [pc, #112]	@ (8011598 <lwip_netconn_do_delconn+0x1c0>)
 8011526:	4819      	ldr	r0, [pc, #100]	@ (801158c <lwip_netconn_do_delconn+0x1b4>)
 8011528:	f00c fe10 	bl	801e14c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 801152c:	e025      	b.n	801157a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 801152e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	2200      	movs	r2, #0
 8011536:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801153e:	2b00      	cmp	r3, #0
 8011540:	d007      	beq.n	8011552 <lwip_netconn_do_delconn+0x17a>
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011548:	68fa      	ldr	r2, [r7, #12]
 801154a:	6810      	ldr	r0, [r2, #0]
 801154c:	2200      	movs	r2, #0
 801154e:	2100      	movs	r1, #0
 8011550:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011558:	2b00      	cmp	r3, #0
 801155a:	d007      	beq.n	801156c <lwip_netconn_do_delconn+0x194>
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011562:	68fa      	ldr	r2, [r7, #12]
 8011564:	6810      	ldr	r0, [r2, #0]
 8011566:	2200      	movs	r2, #0
 8011568:	2102      	movs	r1, #2
 801156a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	330c      	adds	r3, #12
 8011572:	4618      	mov	r0, r3
 8011574:	f00b fdee 	bl	801d154 <sys_sem_valid>
 8011578:	e000      	b.n	801157c <lwip_netconn_do_delconn+0x1a4>
          return;
 801157a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 801157c:	3710      	adds	r7, #16
 801157e:	46bd      	mov	sp, r7
 8011580:	bd80      	pop	{r7, pc}
 8011582:	bf00      	nop
 8011584:	0801f878 	.word	0x0801f878
 8011588:	0801fbe8 	.word	0x0801fbe8
 801158c:	0801f8bc 	.word	0x0801f8bc
 8011590:	0801fbfc 	.word	0x0801fbfc
 8011594:	0801fc1c 	.word	0x0801fc1c
 8011598:	0801fc38 	.word	0x0801fc38
 801159c:	2000b3ec 	.word	0x2000b3ec

080115a0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b084      	sub	sp, #16
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80115ac:	68bb      	ldr	r3, [r7, #8]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	685b      	ldr	r3, [r3, #4]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d025      	beq.n	8011602 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80115b6:	68bb      	ldr	r3, [r7, #8]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	781b      	ldrb	r3, [r3, #0]
 80115bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80115c0:	2b10      	cmp	r3, #16
 80115c2:	d00e      	beq.n	80115e2 <lwip_netconn_do_bind+0x42>
 80115c4:	2b20      	cmp	r3, #32
 80115c6:	d119      	bne.n	80115fc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	6858      	ldr	r0, [r3, #4]
 80115ce:	68bb      	ldr	r3, [r7, #8]
 80115d0:	6899      	ldr	r1, [r3, #8]
 80115d2:	68bb      	ldr	r3, [r7, #8]
 80115d4:	899b      	ldrh	r3, [r3, #12]
 80115d6:	461a      	mov	r2, r3
 80115d8:	f009 f87e 	bl	801a6d8 <udp_bind>
 80115dc:	4603      	mov	r3, r0
 80115de:	73fb      	strb	r3, [r7, #15]
        break;
 80115e0:	e011      	b.n	8011606 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	6858      	ldr	r0, [r3, #4]
 80115e8:	68bb      	ldr	r3, [r7, #8]
 80115ea:	6899      	ldr	r1, [r3, #8]
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	899b      	ldrh	r3, [r3, #12]
 80115f0:	461a      	mov	r2, r3
 80115f2:	f003 f815 	bl	8014620 <tcp_bind>
 80115f6:	4603      	mov	r3, r0
 80115f8:	73fb      	strb	r3, [r7, #15]
        break;
 80115fa:	e004      	b.n	8011606 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80115fc:	23fa      	movs	r3, #250	@ 0xfa
 80115fe:	73fb      	strb	r3, [r7, #15]
        break;
 8011600:	e001      	b.n	8011606 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8011602:	23fa      	movs	r3, #250	@ 0xfa
 8011604:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	7bfa      	ldrb	r2, [r7, #15]
 801160a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801160c:	bf00      	nop
 801160e:	3710      	adds	r7, #16
 8011610:	46bd      	mov	sp, r7
 8011612:	bd80      	pop	{r7, pc}

08011614 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b086      	sub	sp, #24
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d07f      	beq.n	801172a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	781b      	ldrb	r3, [r3, #0]
 8011630:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011634:	2b10      	cmp	r3, #16
 8011636:	d175      	bne.n	8011724 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	785b      	ldrb	r3, [r3, #1]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d165      	bne.n	801170e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	685b      	ldr	r3, [r3, #4]
 8011648:	7d1b      	ldrb	r3, [r3, #20]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d002      	beq.n	8011654 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 801164e:	23fa      	movs	r3, #250	@ 0xfa
 8011650:	72fb      	strb	r3, [r7, #11]
 8011652:	e06c      	b.n	801172e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8011654:	23ff      	movs	r3, #255	@ 0xff
 8011656:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	685b      	ldr	r3, [r3, #4]
 801165e:	f107 020b 	add.w	r2, r7, #11
 8011662:	7cf9      	ldrb	r1, [r7, #19]
 8011664:	4618      	mov	r0, r3
 8011666:	f003 f893 	bl	8014790 <tcp_listen_with_backlog_and_err>
 801166a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d05d      	beq.n	801172e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	3310      	adds	r3, #16
 8011678:	4618      	mov	r0, r3
 801167a:	f00b fcda 	bl	801d032 <sys_mbox_valid>
 801167e:	4603      	mov	r3, r0
 8011680:	2b00      	cmp	r3, #0
 8011682:	d00b      	beq.n	801169c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	3310      	adds	r3, #16
 801168a:	4618      	mov	r0, r3
 801168c:	f00b fc4a 	bl	801cf24 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	3310      	adds	r3, #16
 8011696:	4618      	mov	r0, r3
 8011698:	f00b fcdc 	bl	801d054 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 801169c:	2300      	movs	r3, #0
 801169e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80116a0:	697b      	ldr	r3, [r7, #20]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	3314      	adds	r3, #20
 80116a6:	4618      	mov	r0, r3
 80116a8:	f00b fcc3 	bl	801d032 <sys_mbox_valid>
 80116ac:	4603      	mov	r3, r0
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d108      	bne.n	80116c4 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80116b2:	697b      	ldr	r3, [r7, #20]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	3314      	adds	r3, #20
 80116b8:	2106      	movs	r1, #6
 80116ba:	4618      	mov	r0, r3
 80116bc:	f00b fc10 	bl	801cee0 <sys_mbox_new>
 80116c0:	4603      	mov	r3, r0
 80116c2:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 80116c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d118      	bne.n	80116fe <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	2202      	movs	r2, #2
 80116d2:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	68fa      	ldr	r2, [r7, #12]
 80116da:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	685a      	ldr	r2, [r3, #4]
 80116e2:	697b      	ldr	r3, [r7, #20]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	4619      	mov	r1, r3
 80116e8:	4610      	mov	r0, r2
 80116ea:	f004 f81d 	bl	8015728 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80116ee:	697b      	ldr	r3, [r7, #20]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	685b      	ldr	r3, [r3, #4]
 80116f4:	4912      	ldr	r1, [pc, #72]	@ (8011740 <lwip_netconn_do_listen+0x12c>)
 80116f6:	4618      	mov	r0, r3
 80116f8:	f004 f88e 	bl	8015818 <tcp_accept>
 80116fc:	e017      	b.n	801172e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 80116fe:	68f8      	ldr	r0, [r7, #12]
 8011700:	f002 fe3c 	bl	801437c <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	2200      	movs	r2, #0
 801170a:	605a      	str	r2, [r3, #4]
 801170c:	e00f      	b.n	801172e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	785b      	ldrb	r3, [r3, #1]
 8011714:	2b02      	cmp	r3, #2
 8011716:	d102      	bne.n	801171e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8011718:	2300      	movs	r3, #0
 801171a:	72fb      	strb	r3, [r7, #11]
 801171c:	e007      	b.n	801172e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 801171e:	23f5      	movs	r3, #245	@ 0xf5
 8011720:	72fb      	strb	r3, [r7, #11]
 8011722:	e004      	b.n	801172e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8011724:	23f0      	movs	r3, #240	@ 0xf0
 8011726:	72fb      	strb	r3, [r7, #11]
 8011728:	e001      	b.n	801172e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 801172a:	23f5      	movs	r3, #245	@ 0xf5
 801172c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 801172e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8011732:	697b      	ldr	r3, [r7, #20]
 8011734:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8011736:	bf00      	nop
 8011738:	3718      	adds	r7, #24
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}
 801173e:	bf00      	nop
 8011740:	08010c21 	.word	0x08010c21

08011744 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b086      	sub	sp, #24
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8011750:	693b      	ldr	r3, [r7, #16]
 8011752:	2200      	movs	r2, #0
 8011754:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8011756:	693b      	ldr	r3, [r7, #16]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	685b      	ldr	r3, [r3, #4]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d022      	beq.n	80117a6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8011760:	693b      	ldr	r3, [r7, #16]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	781b      	ldrb	r3, [r3, #0]
 8011766:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801176a:	2b10      	cmp	r3, #16
 801176c:	d11b      	bne.n	80117a6 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 801176e:	693b      	ldr	r3, [r7, #16]
 8011770:	689b      	ldr	r3, [r3, #8]
 8011772:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801177a:	d202      	bcs.n	8011782 <lwip_netconn_do_recv+0x3e>
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	b29b      	uxth	r3, r3
 8011780:	e001      	b.n	8011786 <lwip_netconn_do_recv+0x42>
 8011782:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011786:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8011788:	693b      	ldr	r3, [r7, #16]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	685b      	ldr	r3, [r3, #4]
 801178e:	89fa      	ldrh	r2, [r7, #14]
 8011790:	4611      	mov	r1, r2
 8011792:	4618      	mov	r0, r3
 8011794:	f003 f900 	bl	8014998 <tcp_recved>
        remaining -= recved;
 8011798:	89fb      	ldrh	r3, [r7, #14]
 801179a:	697a      	ldr	r2, [r7, #20]
 801179c:	1ad3      	subs	r3, r2, r3
 801179e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80117a0:	697b      	ldr	r3, [r7, #20]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d1e6      	bne.n	8011774 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 80117a6:	bf00      	nop
 80117a8:	3718      	adds	r7, #24
 80117aa:	46bd      	mov	sp, r7
 80117ac:	bd80      	pop	{r7, pc}
	...

080117b0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b088      	sub	sp, #32
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
 80117b8:	460b      	mov	r3, r1
 80117ba:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80117bc:	2300      	movs	r3, #0
 80117be:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d106      	bne.n	80117d4 <lwip_netconn_do_writemore+0x24>
 80117c6:	4b96      	ldr	r3, [pc, #600]	@ (8011a20 <lwip_netconn_do_writemore+0x270>)
 80117c8:	f240 6273 	movw	r2, #1651	@ 0x673
 80117cc:	4995      	ldr	r1, [pc, #596]	@ (8011a24 <lwip_netconn_do_writemore+0x274>)
 80117ce:	4896      	ldr	r0, [pc, #600]	@ (8011a28 <lwip_netconn_do_writemore+0x278>)
 80117d0:	f00c fcbc 	bl	801e14c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	785b      	ldrb	r3, [r3, #1]
 80117d8:	2b01      	cmp	r3, #1
 80117da:	d006      	beq.n	80117ea <lwip_netconn_do_writemore+0x3a>
 80117dc:	4b90      	ldr	r3, [pc, #576]	@ (8011a20 <lwip_netconn_do_writemore+0x270>)
 80117de:	f240 6274 	movw	r2, #1652	@ 0x674
 80117e2:	4992      	ldr	r1, [pc, #584]	@ (8011a2c <lwip_netconn_do_writemore+0x27c>)
 80117e4:	4890      	ldr	r0, [pc, #576]	@ (8011a28 <lwip_netconn_do_writemore+0x278>)
 80117e6:	f00c fcb1 	bl	801e14c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6a1b      	ldr	r3, [r3, #32]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d106      	bne.n	8011800 <lwip_netconn_do_writemore+0x50>
 80117f2:	4b8b      	ldr	r3, [pc, #556]	@ (8011a20 <lwip_netconn_do_writemore+0x270>)
 80117f4:	f240 6275 	movw	r2, #1653	@ 0x675
 80117f8:	498d      	ldr	r1, [pc, #564]	@ (8011a30 <lwip_netconn_do_writemore+0x280>)
 80117fa:	488b      	ldr	r0, [pc, #556]	@ (8011a28 <lwip_netconn_do_writemore+0x278>)
 80117fc:	f00c fca6 	bl	801e14c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	685b      	ldr	r3, [r3, #4]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d106      	bne.n	8011816 <lwip_netconn_do_writemore+0x66>
 8011808:	4b85      	ldr	r3, [pc, #532]	@ (8011a20 <lwip_netconn_do_writemore+0x270>)
 801180a:	f240 6276 	movw	r2, #1654	@ 0x676
 801180e:	4989      	ldr	r1, [pc, #548]	@ (8011a34 <lwip_netconn_do_writemore+0x284>)
 8011810:	4885      	ldr	r0, [pc, #532]	@ (8011a28 <lwip_netconn_do_writemore+0x278>)
 8011812:	f00c fc9b 	bl	801e14c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	6a1b      	ldr	r3, [r3, #32]
 801181a:	699a      	ldr	r2, [r3, #24]
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	6a1b      	ldr	r3, [r3, #32]
 8011820:	695b      	ldr	r3, [r3, #20]
 8011822:	429a      	cmp	r2, r3
 8011824:	d306      	bcc.n	8011834 <lwip_netconn_do_writemore+0x84>
 8011826:	4b7e      	ldr	r3, [pc, #504]	@ (8011a20 <lwip_netconn_do_writemore+0x270>)
 8011828:	f240 6277 	movw	r2, #1655	@ 0x677
 801182c:	4982      	ldr	r1, [pc, #520]	@ (8011a38 <lwip_netconn_do_writemore+0x288>)
 801182e:	487e      	ldr	r0, [pc, #504]	@ (8011a28 <lwip_netconn_do_writemore+0x278>)
 8011830:	f00c fc8c 	bl	801e14c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	6a1b      	ldr	r3, [r3, #32]
 8011838:	899b      	ldrh	r3, [r3, #12]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d106      	bne.n	801184c <lwip_netconn_do_writemore+0x9c>
 801183e:	4b78      	ldr	r3, [pc, #480]	@ (8011a20 <lwip_netconn_do_writemore+0x270>)
 8011840:	f240 6279 	movw	r2, #1657	@ 0x679
 8011844:	497d      	ldr	r1, [pc, #500]	@ (8011a3c <lwip_netconn_do_writemore+0x28c>)
 8011846:	4878      	ldr	r0, [pc, #480]	@ (8011a28 <lwip_netconn_do_writemore+0x278>)
 8011848:	f00c fc80 	bl	801e14c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	6a1b      	ldr	r3, [r3, #32]
 8011850:	7f1b      	ldrb	r3, [r3, #28]
 8011852:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	7f1b      	ldrb	r3, [r3, #28]
 8011858:	f003 0302 	and.w	r3, r3, #2
 801185c:	2b00      	cmp	r3, #0
 801185e:	d104      	bne.n	801186a <lwip_netconn_do_writemore+0xba>
 8011860:	7ebb      	ldrb	r3, [r7, #26]
 8011862:	f003 0304 	and.w	r3, r3, #4
 8011866:	2b00      	cmp	r3, #0
 8011868:	d001      	beq.n	801186e <lwip_netconn_do_writemore+0xbe>
 801186a:	2301      	movs	r3, #1
 801186c:	e000      	b.n	8011870 <lwip_netconn_do_writemore+0xc0>
 801186e:	2300      	movs	r3, #0
 8011870:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6a1b      	ldr	r3, [r3, #32]
 8011876:	689b      	ldr	r3, [r3, #8]
 8011878:	681a      	ldr	r2, [r3, #0]
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	6a1b      	ldr	r3, [r3, #32]
 801187e:	691b      	ldr	r3, [r3, #16]
 8011880:	4413      	add	r3, r2
 8011882:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6a1b      	ldr	r3, [r3, #32]
 8011888:	689b      	ldr	r3, [r3, #8]
 801188a:	685a      	ldr	r2, [r3, #4]
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6a1b      	ldr	r3, [r3, #32]
 8011890:	691b      	ldr	r3, [r3, #16]
 8011892:	1ad3      	subs	r3, r2, r3
 8011894:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8011896:	693b      	ldr	r3, [r7, #16]
 8011898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801189c:	d307      	bcc.n	80118ae <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 801189e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80118a2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80118a4:	7ebb      	ldrb	r3, [r7, #26]
 80118a6:	f043 0302 	orr.w	r3, r3, #2
 80118aa:	76bb      	strb	r3, [r7, #26]
 80118ac:	e001      	b.n	80118b2 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 80118ae:	693b      	ldr	r3, [r7, #16]
 80118b0:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	685b      	ldr	r3, [r3, #4]
 80118b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80118ba:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 80118bc:	89fa      	ldrh	r2, [r7, #14]
 80118be:	8bbb      	ldrh	r3, [r7, #28]
 80118c0:	429a      	cmp	r2, r3
 80118c2:	d216      	bcs.n	80118f2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 80118c4:	89fb      	ldrh	r3, [r7, #14]
 80118c6:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 80118c8:	7e3b      	ldrb	r3, [r7, #24]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d00d      	beq.n	80118ea <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 80118ce:	8bbb      	ldrh	r3, [r7, #28]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d10e      	bne.n	80118f2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6a1b      	ldr	r3, [r3, #32]
 80118d8:	699b      	ldr	r3, [r3, #24]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d102      	bne.n	80118e4 <lwip_netconn_do_writemore+0x134>
 80118de:	f06f 0306 	mvn.w	r3, #6
 80118e2:	e000      	b.n	80118e6 <lwip_netconn_do_writemore+0x136>
 80118e4:	2300      	movs	r3, #0
 80118e6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80118e8:	e07d      	b.n	80119e6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80118ea:	7ebb      	ldrb	r3, [r7, #26]
 80118ec:	f043 0302 	orr.w	r3, r3, #2
 80118f0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6a1b      	ldr	r3, [r3, #32]
 80118f6:	691a      	ldr	r2, [r3, #16]
 80118f8:	8bbb      	ldrh	r3, [r7, #28]
 80118fa:	441a      	add	r2, r3
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6a1b      	ldr	r3, [r3, #32]
 8011900:	689b      	ldr	r3, [r3, #8]
 8011902:	685b      	ldr	r3, [r3, #4]
 8011904:	429a      	cmp	r2, r3
 8011906:	d906      	bls.n	8011916 <lwip_netconn_do_writemore+0x166>
 8011908:	4b45      	ldr	r3, [pc, #276]	@ (8011a20 <lwip_netconn_do_writemore+0x270>)
 801190a:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 801190e:	494c      	ldr	r1, [pc, #304]	@ (8011a40 <lwip_netconn_do_writemore+0x290>)
 8011910:	4845      	ldr	r0, [pc, #276]	@ (8011a28 <lwip_netconn_do_writemore+0x278>)
 8011912:	f00c fc1b 	bl	801e14c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8011916:	8bbb      	ldrh	r3, [r7, #28]
 8011918:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801191c:	4293      	cmp	r3, r2
 801191e:	d103      	bne.n	8011928 <lwip_netconn_do_writemore+0x178>
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011926:	d209      	bcs.n	801193c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8011928:	693b      	ldr	r3, [r7, #16]
 801192a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 801192c:	8bba      	ldrh	r2, [r7, #28]
 801192e:	429a      	cmp	r2, r3
 8011930:	d10b      	bne.n	801194a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	6a1b      	ldr	r3, [r3, #32]
 8011936:	899b      	ldrh	r3, [r3, #12]
 8011938:	2b01      	cmp	r3, #1
 801193a:	d906      	bls.n	801194a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 801193c:	2301      	movs	r3, #1
 801193e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8011940:	7ebb      	ldrb	r3, [r7, #26]
 8011942:	f043 0302 	orr.w	r3, r3, #2
 8011946:	76bb      	strb	r3, [r7, #26]
 8011948:	e001      	b.n	801194e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 801194a:	2300      	movs	r3, #0
 801194c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	6858      	ldr	r0, [r3, #4]
 8011952:	7ebb      	ldrb	r3, [r7, #26]
 8011954:	8bba      	ldrh	r2, [r7, #28]
 8011956:	6979      	ldr	r1, [r7, #20]
 8011958:	f006 fe22 	bl	80185a0 <tcp_write>
 801195c:	4603      	mov	r3, r0
 801195e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8011960:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d12c      	bne.n	80119c2 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6a1b      	ldr	r3, [r3, #32]
 801196c:	6999      	ldr	r1, [r3, #24]
 801196e:	8bba      	ldrh	r2, [r7, #28]
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6a1b      	ldr	r3, [r3, #32]
 8011974:	440a      	add	r2, r1
 8011976:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	6a1b      	ldr	r3, [r3, #32]
 801197c:	6919      	ldr	r1, [r3, #16]
 801197e:	8bba      	ldrh	r2, [r7, #28]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	6a1b      	ldr	r3, [r3, #32]
 8011984:	440a      	add	r2, r1
 8011986:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6a1b      	ldr	r3, [r3, #32]
 801198c:	691a      	ldr	r2, [r3, #16]
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6a1b      	ldr	r3, [r3, #32]
 8011992:	689b      	ldr	r3, [r3, #8]
 8011994:	685b      	ldr	r3, [r3, #4]
 8011996:	429a      	cmp	r2, r3
 8011998:	d113      	bne.n	80119c2 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6a1b      	ldr	r3, [r3, #32]
 801199e:	899a      	ldrh	r2, [r3, #12]
 80119a0:	3a01      	subs	r2, #1
 80119a2:	b292      	uxth	r2, r2
 80119a4:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6a1b      	ldr	r3, [r3, #32]
 80119aa:	899b      	ldrh	r3, [r3, #12]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d008      	beq.n	80119c2 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6a1b      	ldr	r3, [r3, #32]
 80119b4:	689a      	ldr	r2, [r3, #8]
 80119b6:	3208      	adds	r2, #8
 80119b8:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6a1b      	ldr	r3, [r3, #32]
 80119be:	2200      	movs	r2, #0
 80119c0:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 80119c2:	7e7b      	ldrb	r3, [r7, #25]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d004      	beq.n	80119d2 <lwip_netconn_do_writemore+0x222>
 80119c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	f43f af50 	beq.w	8011872 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80119d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d004      	beq.n	80119e4 <lwip_netconn_do_writemore+0x234>
 80119da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80119de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119e2:	d146      	bne.n	8011a72 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80119e4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80119e6:	7e3b      	ldrb	r3, [r7, #24]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d02b      	beq.n	8011a44 <lwip_netconn_do_writemore+0x294>
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	6a1b      	ldr	r3, [r3, #32]
 80119f0:	699a      	ldr	r2, [r3, #24]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6a1b      	ldr	r3, [r3, #32]
 80119f6:	695b      	ldr	r3, [r3, #20]
 80119f8:	429a      	cmp	r2, r3
 80119fa:	d223      	bcs.n	8011a44 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d005      	beq.n	8011a10 <lwip_netconn_do_writemore+0x260>
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a08:	2200      	movs	r2, #0
 8011a0a:	2103      	movs	r1, #3
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	7f1b      	ldrb	r3, [r3, #28]
 8011a14:	f043 0310 	orr.w	r3, r3, #16
 8011a18:	b2da      	uxtb	r2, r3
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	771a      	strb	r2, [r3, #28]
 8011a1e:	e028      	b.n	8011a72 <lwip_netconn_do_writemore+0x2c2>
 8011a20:	0801f878 	.word	0x0801f878
 8011a24:	0801f9d0 	.word	0x0801f9d0
 8011a28:	0801f8bc 	.word	0x0801f8bc
 8011a2c:	0801fcd8 	.word	0x0801fcd8
 8011a30:	0801f9e0 	.word	0x0801f9e0
 8011a34:	0801fcf8 	.word	0x0801fcf8
 8011a38:	0801fd10 	.word	0x0801fd10
 8011a3c:	0801fd50 	.word	0x0801fd50
 8011a40:	0801fd78 	.word	0x0801fd78
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	685b      	ldr	r3, [r3, #4]
 8011a48:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011a4c:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8011a50:	d305      	bcc.n	8011a5e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	685b      	ldr	r3, [r3, #4]
 8011a56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8011a5a:	2b04      	cmp	r3, #4
 8011a5c:	d909      	bls.n	8011a72 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d005      	beq.n	8011a72 <lwip_netconn_do_writemore+0x2c2>
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	2103      	movs	r1, #3
 8011a6e:	6878      	ldr	r0, [r7, #4]
 8011a70:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8011a72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d11d      	bne.n	8011ab6 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6a1b      	ldr	r3, [r3, #32]
 8011a7e:	699a      	ldr	r2, [r3, #24]
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6a1b      	ldr	r3, [r3, #32]
 8011a84:	695b      	ldr	r3, [r3, #20]
 8011a86:	429a      	cmp	r2, r3
 8011a88:	d002      	beq.n	8011a90 <lwip_netconn_do_writemore+0x2e0>
 8011a8a:	7e3b      	ldrb	r3, [r7, #24]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d001      	beq.n	8011a94 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8011a90:	2301      	movs	r3, #1
 8011a92:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	685b      	ldr	r3, [r3, #4]
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f007 fb6b 	bl	8019174 <tcp_output>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8011aa2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8011aa6:	f113 0f04 	cmn.w	r3, #4
 8011aaa:	d12c      	bne.n	8011b06 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8011aac:	7b3b      	ldrb	r3, [r7, #12]
 8011aae:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011ab0:	2301      	movs	r3, #1
 8011ab2:	76fb      	strb	r3, [r7, #27]
 8011ab4:	e027      	b.n	8011b06 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8011ab6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011abe:	d120      	bne.n	8011b02 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	685b      	ldr	r3, [r3, #4]
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f007 fb55 	bl	8019174 <tcp_output>
 8011aca:	4603      	mov	r3, r0
 8011acc:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8011ace:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8011ad2:	f113 0f04 	cmn.w	r3, #4
 8011ad6:	d104      	bne.n	8011ae2 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8011ad8:	7b7b      	ldrb	r3, [r7, #13]
 8011ada:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011adc:	2301      	movs	r3, #1
 8011ade:	76fb      	strb	r3, [r7, #27]
 8011ae0:	e011      	b.n	8011b06 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8011ae2:	7e3b      	ldrb	r3, [r7, #24]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d00e      	beq.n	8011b06 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	6a1b      	ldr	r3, [r3, #32]
 8011aec:	699b      	ldr	r3, [r3, #24]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d102      	bne.n	8011af8 <lwip_netconn_do_writemore+0x348>
 8011af2:	f06f 0306 	mvn.w	r3, #6
 8011af6:	e000      	b.n	8011afa <lwip_netconn_do_writemore+0x34a>
 8011af8:	2300      	movs	r3, #0
 8011afa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011afc:	2301      	movs	r3, #1
 8011afe:	76fb      	strb	r3, [r7, #27]
 8011b00:	e001      	b.n	8011b06 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8011b02:	2301      	movs	r3, #1
 8011b04:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8011b06:	7efb      	ldrb	r3, [r7, #27]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d015      	beq.n	8011b38 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6a1b      	ldr	r3, [r3, #32]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	330c      	adds	r3, #12
 8011b14:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	6a1b      	ldr	r3, [r3, #32]
 8011b1a:	7ffa      	ldrb	r2, [r7, #31]
 8011b1c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2200      	movs	r2, #0
 8011b22:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	2200      	movs	r2, #0
 8011b28:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8011b2a:	78fb      	ldrb	r3, [r7, #3]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d006      	beq.n	8011b3e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8011b30:	68b8      	ldr	r0, [r7, #8]
 8011b32:	f00b faf5 	bl	801d120 <sys_sem_signal>
 8011b36:	e002      	b.n	8011b3e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8011b38:	f04f 33ff 	mov.w	r3, #4294967295
 8011b3c:	e000      	b.n	8011b40 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8011b3e:	2300      	movs	r3, #0
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3720      	adds	r7, #32
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}

08011b48 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b084      	sub	sp, #16
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f7fe fd1c 	bl	8010596 <netconn_err>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d166      	bne.n	8011c38 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011b74:	2b10      	cmp	r3, #16
 8011b76:	d15d      	bne.n	8011c34 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8011b78:	68bb      	ldr	r3, [r7, #8]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	785b      	ldrb	r3, [r3, #1]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d002      	beq.n	8011b88 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8011b82:	23fb      	movs	r3, #251	@ 0xfb
 8011b84:	73fb      	strb	r3, [r7, #15]
 8011b86:	e057      	b.n	8011c38 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	685b      	ldr	r3, [r3, #4]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d04d      	beq.n	8011c2e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8011b92:	68bb      	ldr	r3, [r7, #8]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	2201      	movs	r2, #1
 8011b98:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8011b9a:	68bb      	ldr	r3, [r7, #8]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	6a1b      	ldr	r3, [r3, #32]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d006      	beq.n	8011bb2 <lwip_netconn_do_write+0x6a>
 8011ba4:	4b28      	ldr	r3, [pc, #160]	@ (8011c48 <lwip_netconn_do_write+0x100>)
 8011ba6:	f240 7223 	movw	r2, #1827	@ 0x723
 8011baa:	4928      	ldr	r1, [pc, #160]	@ (8011c4c <lwip_netconn_do_write+0x104>)
 8011bac:	4828      	ldr	r0, [pc, #160]	@ (8011c50 <lwip_netconn_do_write+0x108>)
 8011bae:	f00c facd 	bl	801e14c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	695b      	ldr	r3, [r3, #20]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d106      	bne.n	8011bc8 <lwip_netconn_do_write+0x80>
 8011bba:	4b23      	ldr	r3, [pc, #140]	@ (8011c48 <lwip_netconn_do_write+0x100>)
 8011bbc:	f240 7224 	movw	r2, #1828	@ 0x724
 8011bc0:	4924      	ldr	r1, [pc, #144]	@ (8011c54 <lwip_netconn_do_write+0x10c>)
 8011bc2:	4823      	ldr	r0, [pc, #140]	@ (8011c50 <lwip_netconn_do_write+0x108>)
 8011bc4:	f00c fac2 	bl	801e14c <iprintf>
        msg->conn->current_msg = msg;
 8011bc8:	68bb      	ldr	r3, [r7, #8]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	68ba      	ldr	r2, [r7, #8]
 8011bce:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	2100      	movs	r1, #0
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f7ff fdea 	bl	80117b0 <lwip_netconn_do_writemore>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d02e      	beq.n	8011c40 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	785b      	ldrb	r3, [r3, #1]
 8011be8:	2b01      	cmp	r3, #1
 8011bea:	d006      	beq.n	8011bfa <lwip_netconn_do_write+0xb2>
 8011bec:	4b16      	ldr	r3, [pc, #88]	@ (8011c48 <lwip_netconn_do_write+0x100>)
 8011bee:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 8011bf2:	4919      	ldr	r1, [pc, #100]	@ (8011c58 <lwip_netconn_do_write+0x110>)
 8011bf4:	4816      	ldr	r0, [pc, #88]	@ (8011c50 <lwip_netconn_do_write+0x108>)
 8011bf6:	f00c faa9 	bl	801e14c <iprintf>
          UNLOCK_TCPIP_CORE();
 8011bfa:	4818      	ldr	r0, [pc, #96]	@ (8011c5c <lwip_netconn_do_write+0x114>)
 8011bfc:	f00b fb01 	bl	801d202 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011c00:	68bb      	ldr	r3, [r7, #8]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	330c      	adds	r3, #12
 8011c06:	2100      	movs	r1, #0
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f00b fa58 	bl	801d0be <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8011c0e:	4813      	ldr	r0, [pc, #76]	@ (8011c5c <lwip_netconn_do_write+0x114>)
 8011c10:	f00b fae8 	bl	801d1e4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	785b      	ldrb	r3, [r3, #1]
 8011c1a:	2b01      	cmp	r3, #1
 8011c1c:	d110      	bne.n	8011c40 <lwip_netconn_do_write+0xf8>
 8011c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8011c48 <lwip_netconn_do_write+0x100>)
 8011c20:	f240 722c 	movw	r2, #1836	@ 0x72c
 8011c24:	490c      	ldr	r1, [pc, #48]	@ (8011c58 <lwip_netconn_do_write+0x110>)
 8011c26:	480a      	ldr	r0, [pc, #40]	@ (8011c50 <lwip_netconn_do_write+0x108>)
 8011c28:	f00c fa90 	bl	801e14c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8011c2c:	e008      	b.n	8011c40 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8011c2e:	23f5      	movs	r3, #245	@ 0xf5
 8011c30:	73fb      	strb	r3, [r7, #15]
 8011c32:	e001      	b.n	8011c38 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8011c34:	23fa      	movs	r3, #250	@ 0xfa
 8011c36:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8011c38:	68bb      	ldr	r3, [r7, #8]
 8011c3a:	7bfa      	ldrb	r2, [r7, #15]
 8011c3c:	711a      	strb	r2, [r3, #4]
 8011c3e:	e000      	b.n	8011c42 <lwip_netconn_do_write+0xfa>
        return;
 8011c40:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8011c42:	3710      	adds	r7, #16
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}
 8011c48:	0801f878 	.word	0x0801f878
 8011c4c:	0801fc1c 	.word	0x0801fc1c
 8011c50:	0801f8bc 	.word	0x0801f8bc
 8011c54:	0801fda4 	.word	0x0801fda4
 8011c58:	0801fc38 	.word	0x0801fc38
 8011c5c:	2000b3ec 	.word	0x2000b3ec

08011c60 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b084      	sub	sp, #16
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	785b      	ldrb	r3, [r3, #1]
 8011c72:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	685b      	ldr	r3, [r3, #4]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d069      	beq.n	8011d52 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	781b      	ldrb	r3, [r3, #0]
 8011c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8011c88:	2b10      	cmp	r3, #16
 8011c8a:	d162      	bne.n	8011d52 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8011c90:	2b03      	cmp	r3, #3
 8011c92:	d002      	beq.n	8011c9a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8011c94:	7afb      	ldrb	r3, [r7, #11]
 8011c96:	2b02      	cmp	r3, #2
 8011c98:	d05b      	beq.n	8011d52 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8011c9a:	7afb      	ldrb	r3, [r7, #11]
 8011c9c:	2b03      	cmp	r3, #3
 8011c9e:	d103      	bne.n	8011ca8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	22f5      	movs	r2, #245	@ 0xf5
 8011ca4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8011ca6:	e059      	b.n	8011d5c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8011ca8:	7afb      	ldrb	r3, [r7, #11]
 8011caa:	2b01      	cmp	r3, #1
 8011cac:	d103      	bne.n	8011cb6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	22fb      	movs	r2, #251	@ 0xfb
 8011cb2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8011cb4:	e052      	b.n	8011d5c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	7a1b      	ldrb	r3, [r3, #8]
 8011cba:	f003 0301 	and.w	r3, r3, #1
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d004      	beq.n	8011ccc <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f7ff f99e 	bl	8011008 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	6a1b      	ldr	r3, [r3, #32]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d006      	beq.n	8011ce4 <lwip_netconn_do_close+0x84>
 8011cd6:	4b23      	ldr	r3, [pc, #140]	@ (8011d64 <lwip_netconn_do_close+0x104>)
 8011cd8:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8011cdc:	4922      	ldr	r1, [pc, #136]	@ (8011d68 <lwip_netconn_do_close+0x108>)
 8011cde:	4823      	ldr	r0, [pc, #140]	@ (8011d6c <lwip_netconn_do_close+0x10c>)
 8011ce0:	f00c fa34 	bl	801e14c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	2204      	movs	r2, #4
 8011cea:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	68fa      	ldr	r2, [r7, #12]
 8011cf2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	2100      	movs	r1, #0
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f7ff fa02 	bl	8011104 <lwip_netconn_do_close_internal>
 8011d00:	4603      	mov	r3, r0
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d029      	beq.n	8011d5a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	785b      	ldrb	r3, [r3, #1]
 8011d0c:	2b04      	cmp	r3, #4
 8011d0e:	d006      	beq.n	8011d1e <lwip_netconn_do_close+0xbe>
 8011d10:	4b14      	ldr	r3, [pc, #80]	@ (8011d64 <lwip_netconn_do_close+0x104>)
 8011d12:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 8011d16:	4916      	ldr	r1, [pc, #88]	@ (8011d70 <lwip_netconn_do_close+0x110>)
 8011d18:	4814      	ldr	r0, [pc, #80]	@ (8011d6c <lwip_netconn_do_close+0x10c>)
 8011d1a:	f00c fa17 	bl	801e14c <iprintf>
        UNLOCK_TCPIP_CORE();
 8011d1e:	4815      	ldr	r0, [pc, #84]	@ (8011d74 <lwip_netconn_do_close+0x114>)
 8011d20:	f00b fa6f 	bl	801d202 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	330c      	adds	r3, #12
 8011d2a:	2100      	movs	r1, #0
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f00b f9c6 	bl	801d0be <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8011d32:	4810      	ldr	r0, [pc, #64]	@ (8011d74 <lwip_netconn_do_close+0x114>)
 8011d34:	f00b fa56 	bl	801d1e4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	785b      	ldrb	r3, [r3, #1]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d00b      	beq.n	8011d5a <lwip_netconn_do_close+0xfa>
 8011d42:	4b08      	ldr	r3, [pc, #32]	@ (8011d64 <lwip_netconn_do_close+0x104>)
 8011d44:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8011d48:	4909      	ldr	r1, [pc, #36]	@ (8011d70 <lwip_netconn_do_close+0x110>)
 8011d4a:	4808      	ldr	r0, [pc, #32]	@ (8011d6c <lwip_netconn_do_close+0x10c>)
 8011d4c:	f00c f9fe 	bl	801e14c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8011d50:	e003      	b.n	8011d5a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	22f5      	movs	r2, #245	@ 0xf5
 8011d56:	711a      	strb	r2, [r3, #4]
 8011d58:	e000      	b.n	8011d5c <lwip_netconn_do_close+0xfc>
      return;
 8011d5a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011d5c:	3710      	adds	r7, #16
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}
 8011d62:	bf00      	nop
 8011d64:	0801f878 	.word	0x0801f878
 8011d68:	0801fc1c 	.word	0x0801fc1c
 8011d6c:	0801f8bc 	.word	0x0801f8bc
 8011d70:	0801fc38 	.word	0x0801fc38
 8011d74:	2000b3ec 	.word	0x2000b3ec

08011d78 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b082      	sub	sp, #8
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d013      	beq.n	8011dae <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d00b      	beq.n	8011da6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	4618      	mov	r0, r3
 8011d94:	f001 fe48 	bl	8013a28 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	605a      	str	r2, [r3, #4]
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	685a      	ldr	r2, [r3, #4]
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8011da6:	6879      	ldr	r1, [r7, #4]
 8011da8:	2006      	movs	r0, #6
 8011daa:	f000 ff99 	bl	8012ce0 <memp_free>
  }
}
 8011dae:	bf00      	nop
 8011db0:	3708      	adds	r7, #8
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}
	...

08011db8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b084      	sub	sp, #16
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	60f8      	str	r0, [r7, #12]
 8011dc0:	60b9      	str	r1, [r7, #8]
 8011dc2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d108      	bne.n	8011ddc <netbuf_data+0x24>
 8011dca:	4b1b      	ldr	r3, [pc, #108]	@ (8011e38 <netbuf_data+0x80>)
 8011dcc:	22c6      	movs	r2, #198	@ 0xc6
 8011dce:	491b      	ldr	r1, [pc, #108]	@ (8011e3c <netbuf_data+0x84>)
 8011dd0:	481b      	ldr	r0, [pc, #108]	@ (8011e40 <netbuf_data+0x88>)
 8011dd2:	f00c f9bb 	bl	801e14c <iprintf>
 8011dd6:	f06f 030f 	mvn.w	r3, #15
 8011dda:	e029      	b.n	8011e30 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8011ddc:	68bb      	ldr	r3, [r7, #8]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d108      	bne.n	8011df4 <netbuf_data+0x3c>
 8011de2:	4b15      	ldr	r3, [pc, #84]	@ (8011e38 <netbuf_data+0x80>)
 8011de4:	22c7      	movs	r2, #199	@ 0xc7
 8011de6:	4917      	ldr	r1, [pc, #92]	@ (8011e44 <netbuf_data+0x8c>)
 8011de8:	4815      	ldr	r0, [pc, #84]	@ (8011e40 <netbuf_data+0x88>)
 8011dea:	f00c f9af 	bl	801e14c <iprintf>
 8011dee:	f06f 030f 	mvn.w	r3, #15
 8011df2:	e01d      	b.n	8011e30 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d108      	bne.n	8011e0c <netbuf_data+0x54>
 8011dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8011e38 <netbuf_data+0x80>)
 8011dfc:	22c8      	movs	r2, #200	@ 0xc8
 8011dfe:	4912      	ldr	r1, [pc, #72]	@ (8011e48 <netbuf_data+0x90>)
 8011e00:	480f      	ldr	r0, [pc, #60]	@ (8011e40 <netbuf_data+0x88>)
 8011e02:	f00c f9a3 	bl	801e14c <iprintf>
 8011e06:	f06f 030f 	mvn.w	r3, #15
 8011e0a:	e011      	b.n	8011e30 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	685b      	ldr	r3, [r3, #4]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d102      	bne.n	8011e1a <netbuf_data+0x62>
    return ERR_BUF;
 8011e14:	f06f 0301 	mvn.w	r3, #1
 8011e18:	e00a      	b.n	8011e30 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	685b      	ldr	r3, [r3, #4]
 8011e1e:	685a      	ldr	r2, [r3, #4]
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	685b      	ldr	r3, [r3, #4]
 8011e28:	895a      	ldrh	r2, [r3, #10]
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8011e2e:	2300      	movs	r3, #0
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	3710      	adds	r7, #16
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}
 8011e38:	0801fdd0 	.word	0x0801fdd0
 8011e3c:	0801fed8 	.word	0x0801fed8
 8011e40:	0801fe20 	.word	0x0801fe20
 8011e44:	0801fef4 	.word	0x0801fef4
 8011e48:	0801ff14 	.word	0x0801ff14

08011e4c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b084      	sub	sp, #16
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8011e56:	f008 fa45 	bl	801a2e4 <sys_timeouts_sleeptime>
 8011e5a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e62:	d10b      	bne.n	8011e7c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8011e64:	4813      	ldr	r0, [pc, #76]	@ (8011eb4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011e66:	f00b f9cc 	bl	801d202 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	6839      	ldr	r1, [r7, #0]
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f00b f884 	bl	801cf7c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8011e74:	480f      	ldr	r0, [pc, #60]	@ (8011eb4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011e76:	f00b f9b5 	bl	801d1e4 <sys_mutex_lock>
    return;
 8011e7a:	e018      	b.n	8011eae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d102      	bne.n	8011e88 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8011e82:	f008 f9f5 	bl	801a270 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011e86:	e7e6      	b.n	8011e56 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8011e88:	480a      	ldr	r0, [pc, #40]	@ (8011eb4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011e8a:	f00b f9ba 	bl	801d202 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8011e8e:	68fa      	ldr	r2, [r7, #12]
 8011e90:	6839      	ldr	r1, [r7, #0]
 8011e92:	6878      	ldr	r0, [r7, #4]
 8011e94:	f00b f872 	bl	801cf7c <sys_arch_mbox_fetch>
 8011e98:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8011e9a:	4806      	ldr	r0, [pc, #24]	@ (8011eb4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011e9c:	f00b f9a2 	bl	801d1e4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ea6:	d102      	bne.n	8011eae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011ea8:	f008 f9e2 	bl	801a270 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011eac:	e7d3      	b.n	8011e56 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8011eae:	3710      	adds	r7, #16
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}
 8011eb4:	2000b3ec 	.word	0x2000b3ec

08011eb8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b084      	sub	sp, #16
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8011ec0:	4810      	ldr	r0, [pc, #64]	@ (8011f04 <tcpip_thread+0x4c>)
 8011ec2:	f00b f98f 	bl	801d1e4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8011ec6:	4b10      	ldr	r3, [pc, #64]	@ (8011f08 <tcpip_thread+0x50>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d005      	beq.n	8011eda <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8011ece:	4b0e      	ldr	r3, [pc, #56]	@ (8011f08 <tcpip_thread+0x50>)
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	4a0e      	ldr	r2, [pc, #56]	@ (8011f0c <tcpip_thread+0x54>)
 8011ed4:	6812      	ldr	r2, [r2, #0]
 8011ed6:	4610      	mov	r0, r2
 8011ed8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011eda:	f107 030c 	add.w	r3, r7, #12
 8011ede:	4619      	mov	r1, r3
 8011ee0:	480b      	ldr	r0, [pc, #44]	@ (8011f10 <tcpip_thread+0x58>)
 8011ee2:	f7ff ffb3 	bl	8011e4c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d106      	bne.n	8011efa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011eec:	4b09      	ldr	r3, [pc, #36]	@ (8011f14 <tcpip_thread+0x5c>)
 8011eee:	2291      	movs	r2, #145	@ 0x91
 8011ef0:	4909      	ldr	r1, [pc, #36]	@ (8011f18 <tcpip_thread+0x60>)
 8011ef2:	480a      	ldr	r0, [pc, #40]	@ (8011f1c <tcpip_thread+0x64>)
 8011ef4:	f00c f92a 	bl	801e14c <iprintf>
      continue;
 8011ef8:	e003      	b.n	8011f02 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	4618      	mov	r0, r3
 8011efe:	f000 f80f 	bl	8011f20 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011f02:	e7ea      	b.n	8011eda <tcpip_thread+0x22>
 8011f04:	2000b3ec 	.word	0x2000b3ec
 8011f08:	2000b3e0 	.word	0x2000b3e0
 8011f0c:	2000b3e4 	.word	0x2000b3e4
 8011f10:	2000b3e8 	.word	0x2000b3e8
 8011f14:	0801ff68 	.word	0x0801ff68
 8011f18:	0801ff98 	.word	0x0801ff98
 8011f1c:	0801ffb8 	.word	0x0801ffb8

08011f20 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b082      	sub	sp, #8
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	781b      	ldrb	r3, [r3, #0]
 8011f2c:	2b02      	cmp	r3, #2
 8011f2e:	d026      	beq.n	8011f7e <tcpip_thread_handle_msg+0x5e>
 8011f30:	2b02      	cmp	r3, #2
 8011f32:	dc2b      	bgt.n	8011f8c <tcpip_thread_handle_msg+0x6c>
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d002      	beq.n	8011f3e <tcpip_thread_handle_msg+0x1e>
 8011f38:	2b01      	cmp	r3, #1
 8011f3a:	d015      	beq.n	8011f68 <tcpip_thread_handle_msg+0x48>
 8011f3c:	e026      	b.n	8011f8c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	68db      	ldr	r3, [r3, #12]
 8011f42:	687a      	ldr	r2, [r7, #4]
 8011f44:	6850      	ldr	r0, [r2, #4]
 8011f46:	687a      	ldr	r2, [r7, #4]
 8011f48:	6892      	ldr	r2, [r2, #8]
 8011f4a:	4611      	mov	r1, r2
 8011f4c:	4798      	blx	r3
 8011f4e:	4603      	mov	r3, r0
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d004      	beq.n	8011f5e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	685b      	ldr	r3, [r3, #4]
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f001 fd65 	bl	8013a28 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011f5e:	6879      	ldr	r1, [r7, #4]
 8011f60:	2009      	movs	r0, #9
 8011f62:	f000 febd 	bl	8012ce0 <memp_free>
      break;
 8011f66:	e018      	b.n	8011f9a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	685b      	ldr	r3, [r3, #4]
 8011f6c:	687a      	ldr	r2, [r7, #4]
 8011f6e:	6892      	ldr	r2, [r2, #8]
 8011f70:	4610      	mov	r0, r2
 8011f72:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8011f74:	6879      	ldr	r1, [r7, #4]
 8011f76:	2008      	movs	r0, #8
 8011f78:	f000 feb2 	bl	8012ce0 <memp_free>
      break;
 8011f7c:	e00d      	b.n	8011f9a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	685b      	ldr	r3, [r3, #4]
 8011f82:	687a      	ldr	r2, [r7, #4]
 8011f84:	6892      	ldr	r2, [r2, #8]
 8011f86:	4610      	mov	r0, r2
 8011f88:	4798      	blx	r3
      break;
 8011f8a:	e006      	b.n	8011f9a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011f8c:	4b05      	ldr	r3, [pc, #20]	@ (8011fa4 <tcpip_thread_handle_msg+0x84>)
 8011f8e:	22cf      	movs	r2, #207	@ 0xcf
 8011f90:	4905      	ldr	r1, [pc, #20]	@ (8011fa8 <tcpip_thread_handle_msg+0x88>)
 8011f92:	4806      	ldr	r0, [pc, #24]	@ (8011fac <tcpip_thread_handle_msg+0x8c>)
 8011f94:	f00c f8da 	bl	801e14c <iprintf>
      break;
 8011f98:	bf00      	nop
  }
}
 8011f9a:	bf00      	nop
 8011f9c:	3708      	adds	r7, #8
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}
 8011fa2:	bf00      	nop
 8011fa4:	0801ff68 	.word	0x0801ff68
 8011fa8:	0801ff98 	.word	0x0801ff98
 8011fac:	0801ffb8 	.word	0x0801ffb8

08011fb0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b086      	sub	sp, #24
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	60f8      	str	r0, [r7, #12]
 8011fb8:	60b9      	str	r1, [r7, #8]
 8011fba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011fbc:	481a      	ldr	r0, [pc, #104]	@ (8012028 <tcpip_inpkt+0x78>)
 8011fbe:	f00b f838 	bl	801d032 <sys_mbox_valid>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d105      	bne.n	8011fd4 <tcpip_inpkt+0x24>
 8011fc8:	4b18      	ldr	r3, [pc, #96]	@ (801202c <tcpip_inpkt+0x7c>)
 8011fca:	22fc      	movs	r2, #252	@ 0xfc
 8011fcc:	4918      	ldr	r1, [pc, #96]	@ (8012030 <tcpip_inpkt+0x80>)
 8011fce:	4819      	ldr	r0, [pc, #100]	@ (8012034 <tcpip_inpkt+0x84>)
 8011fd0:	f00c f8bc 	bl	801e14c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8011fd4:	2009      	movs	r0, #9
 8011fd6:	f000 fe0d 	bl	8012bf4 <memp_malloc>
 8011fda:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8011fdc:	697b      	ldr	r3, [r7, #20]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d102      	bne.n	8011fe8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8011fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8011fe6:	e01a      	b.n	801201e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8011fe8:	697b      	ldr	r3, [r7, #20]
 8011fea:	2200      	movs	r2, #0
 8011fec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8011fee:	697b      	ldr	r3, [r7, #20]
 8011ff0:	68fa      	ldr	r2, [r7, #12]
 8011ff2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8011ff4:	697b      	ldr	r3, [r7, #20]
 8011ff6:	68ba      	ldr	r2, [r7, #8]
 8011ff8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8011ffa:	697b      	ldr	r3, [r7, #20]
 8011ffc:	687a      	ldr	r2, [r7, #4]
 8011ffe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012000:	6979      	ldr	r1, [r7, #20]
 8012002:	4809      	ldr	r0, [pc, #36]	@ (8012028 <tcpip_inpkt+0x78>)
 8012004:	f00a ffa0 	bl	801cf48 <sys_mbox_trypost>
 8012008:	4603      	mov	r3, r0
 801200a:	2b00      	cmp	r3, #0
 801200c:	d006      	beq.n	801201c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801200e:	6979      	ldr	r1, [r7, #20]
 8012010:	2009      	movs	r0, #9
 8012012:	f000 fe65 	bl	8012ce0 <memp_free>
    return ERR_MEM;
 8012016:	f04f 33ff 	mov.w	r3, #4294967295
 801201a:	e000      	b.n	801201e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801201c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801201e:	4618      	mov	r0, r3
 8012020:	3718      	adds	r7, #24
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}
 8012026:	bf00      	nop
 8012028:	2000b3e8 	.word	0x2000b3e8
 801202c:	0801ff68 	.word	0x0801ff68
 8012030:	0801ffe0 	.word	0x0801ffe0
 8012034:	0801ffb8 	.word	0x0801ffb8

08012038 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b082      	sub	sp, #8
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
 8012040:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012048:	f003 0318 	and.w	r3, r3, #24
 801204c:	2b00      	cmp	r3, #0
 801204e:	d006      	beq.n	801205e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012050:	4a08      	ldr	r2, [pc, #32]	@ (8012074 <tcpip_input+0x3c>)
 8012052:	6839      	ldr	r1, [r7, #0]
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f7ff ffab 	bl	8011fb0 <tcpip_inpkt>
 801205a:	4603      	mov	r3, r0
 801205c:	e005      	b.n	801206a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801205e:	4a06      	ldr	r2, [pc, #24]	@ (8012078 <tcpip_input+0x40>)
 8012060:	6839      	ldr	r1, [r7, #0]
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	f7ff ffa4 	bl	8011fb0 <tcpip_inpkt>
 8012068:	4603      	mov	r3, r0
}
 801206a:	4618      	mov	r0, r3
 801206c:	3708      	adds	r7, #8
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}
 8012072:	bf00      	nop
 8012074:	0801cd35 	.word	0x0801cd35
 8012078:	0801bc3d 	.word	0x0801bc3d

0801207c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b084      	sub	sp, #16
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
 8012084:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012086:	4819      	ldr	r0, [pc, #100]	@ (80120ec <tcpip_try_callback+0x70>)
 8012088:	f00a ffd3 	bl	801d032 <sys_mbox_valid>
 801208c:	4603      	mov	r3, r0
 801208e:	2b00      	cmp	r3, #0
 8012090:	d106      	bne.n	80120a0 <tcpip_try_callback+0x24>
 8012092:	4b17      	ldr	r3, [pc, #92]	@ (80120f0 <tcpip_try_callback+0x74>)
 8012094:	f240 125d 	movw	r2, #349	@ 0x15d
 8012098:	4916      	ldr	r1, [pc, #88]	@ (80120f4 <tcpip_try_callback+0x78>)
 801209a:	4817      	ldr	r0, [pc, #92]	@ (80120f8 <tcpip_try_callback+0x7c>)
 801209c:	f00c f856 	bl	801e14c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80120a0:	2008      	movs	r0, #8
 80120a2:	f000 fda7 	bl	8012bf4 <memp_malloc>
 80120a6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d102      	bne.n	80120b4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80120ae:	f04f 33ff 	mov.w	r3, #4294967295
 80120b2:	e017      	b.n	80120e4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	2201      	movs	r2, #1
 80120b8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	687a      	ldr	r2, [r7, #4]
 80120be:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	683a      	ldr	r2, [r7, #0]
 80120c4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80120c6:	68f9      	ldr	r1, [r7, #12]
 80120c8:	4808      	ldr	r0, [pc, #32]	@ (80120ec <tcpip_try_callback+0x70>)
 80120ca:	f00a ff3d 	bl	801cf48 <sys_mbox_trypost>
 80120ce:	4603      	mov	r3, r0
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d006      	beq.n	80120e2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80120d4:	68f9      	ldr	r1, [r7, #12]
 80120d6:	2008      	movs	r0, #8
 80120d8:	f000 fe02 	bl	8012ce0 <memp_free>
    return ERR_MEM;
 80120dc:	f04f 33ff 	mov.w	r3, #4294967295
 80120e0:	e000      	b.n	80120e4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80120e2:	2300      	movs	r3, #0
}
 80120e4:	4618      	mov	r0, r3
 80120e6:	3710      	adds	r7, #16
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}
 80120ec:	2000b3e8 	.word	0x2000b3e8
 80120f0:	0801ff68 	.word	0x0801ff68
 80120f4:	0801ffe0 	.word	0x0801ffe0
 80120f8:	0801ffb8 	.word	0x0801ffb8

080120fc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b084      	sub	sp, #16
 8012100:	af00      	add	r7, sp, #0
 8012102:	60f8      	str	r0, [r7, #12]
 8012104:	60b9      	str	r1, [r7, #8]
 8012106:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8012108:	4806      	ldr	r0, [pc, #24]	@ (8012124 <tcpip_send_msg_wait_sem+0x28>)
 801210a:	f00b f86b 	bl	801d1e4 <sys_mutex_lock>
  fn(apimsg);
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	68b8      	ldr	r0, [r7, #8]
 8012112:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8012114:	4803      	ldr	r0, [pc, #12]	@ (8012124 <tcpip_send_msg_wait_sem+0x28>)
 8012116:	f00b f874 	bl	801d202 <sys_mutex_unlock>
  return ERR_OK;
 801211a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801211c:	4618      	mov	r0, r3
 801211e:	3710      	adds	r7, #16
 8012120:	46bd      	mov	sp, r7
 8012122:	bd80      	pop	{r7, pc}
 8012124:	2000b3ec 	.word	0x2000b3ec

08012128 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b084      	sub	sp, #16
 801212c:	af02      	add	r7, sp, #8
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012132:	f000 f8ba 	bl	80122aa <lwip_init>

  tcpip_init_done = initfunc;
 8012136:	4a17      	ldr	r2, [pc, #92]	@ (8012194 <tcpip_init+0x6c>)
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801213c:	4a16      	ldr	r2, [pc, #88]	@ (8012198 <tcpip_init+0x70>)
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012142:	2106      	movs	r1, #6
 8012144:	4815      	ldr	r0, [pc, #84]	@ (801219c <tcpip_init+0x74>)
 8012146:	f00a fecb 	bl	801cee0 <sys_mbox_new>
 801214a:	4603      	mov	r3, r0
 801214c:	2b00      	cmp	r3, #0
 801214e:	d006      	beq.n	801215e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012150:	4b13      	ldr	r3, [pc, #76]	@ (80121a0 <tcpip_init+0x78>)
 8012152:	f240 2261 	movw	r2, #609	@ 0x261
 8012156:	4913      	ldr	r1, [pc, #76]	@ (80121a4 <tcpip_init+0x7c>)
 8012158:	4813      	ldr	r0, [pc, #76]	@ (80121a8 <tcpip_init+0x80>)
 801215a:	f00b fff7 	bl	801e14c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801215e:	4813      	ldr	r0, [pc, #76]	@ (80121ac <tcpip_init+0x84>)
 8012160:	f00b f824 	bl	801d1ac <sys_mutex_new>
 8012164:	4603      	mov	r3, r0
 8012166:	2b00      	cmp	r3, #0
 8012168:	d006      	beq.n	8012178 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801216a:	4b0d      	ldr	r3, [pc, #52]	@ (80121a0 <tcpip_init+0x78>)
 801216c:	f240 2265 	movw	r2, #613	@ 0x265
 8012170:	490f      	ldr	r1, [pc, #60]	@ (80121b0 <tcpip_init+0x88>)
 8012172:	480d      	ldr	r0, [pc, #52]	@ (80121a8 <tcpip_init+0x80>)
 8012174:	f00b ffea 	bl	801e14c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012178:	2300      	movs	r3, #0
 801217a:	9300      	str	r3, [sp, #0]
 801217c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012180:	2200      	movs	r2, #0
 8012182:	490c      	ldr	r1, [pc, #48]	@ (80121b4 <tcpip_init+0x8c>)
 8012184:	480c      	ldr	r0, [pc, #48]	@ (80121b8 <tcpip_init+0x90>)
 8012186:	f00b f849 	bl	801d21c <sys_thread_new>
}
 801218a:	bf00      	nop
 801218c:	3708      	adds	r7, #8
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}
 8012192:	bf00      	nop
 8012194:	2000b3e0 	.word	0x2000b3e0
 8012198:	2000b3e4 	.word	0x2000b3e4
 801219c:	2000b3e8 	.word	0x2000b3e8
 80121a0:	0801ff68 	.word	0x0801ff68
 80121a4:	0801fff0 	.word	0x0801fff0
 80121a8:	0801ffb8 	.word	0x0801ffb8
 80121ac:	2000b3ec 	.word	0x2000b3ec
 80121b0:	08020014 	.word	0x08020014
 80121b4:	08011eb9 	.word	0x08011eb9
 80121b8:	08020038 	.word	0x08020038

080121bc <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b084      	sub	sp, #16
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
 80121c4:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d002      	beq.n	80121d2 <fs_open+0x16>
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d102      	bne.n	80121d8 <fs_open+0x1c>
    return ERR_ARG;
 80121d2:	f06f 030f 	mvn.w	r3, #15
 80121d6:	e028      	b.n	801222a <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80121d8:	4b16      	ldr	r3, [pc, #88]	@ (8012234 <fs_open+0x78>)
 80121da:	60fb      	str	r3, [r7, #12]
 80121dc:	e020      	b.n	8012220 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	685b      	ldr	r3, [r3, #4]
 80121e2:	4619      	mov	r1, r3
 80121e4:	6838      	ldr	r0, [r7, #0]
 80121e6:	f7ee f82b 	bl	8000240 <strcmp>
 80121ea:	4603      	mov	r3, r0
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d114      	bne.n	801221a <fs_open+0x5e>
      file->data = (const char *)f->data;
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	689a      	ldr	r2, [r3, #8]
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	68da      	ldr	r2, [r3, #12]
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	68da      	ldr	r2, [r3, #12]
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	2200      	movs	r2, #0
 801220c:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	7c1a      	ldrb	r2, [r3, #16]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8012216:	2300      	movs	r3, #0
 8012218:	e007      	b.n	801222a <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	60fb      	str	r3, [r7, #12]
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d1db      	bne.n	80121de <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8012226:	f06f 0305 	mvn.w	r3, #5
}
 801222a:	4618      	mov	r0, r3
 801222c:	3710      	adds	r7, #16
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
 8012232:	bf00      	nop
 8012234:	08068364 	.word	0x08068364

08012238 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8012238:	b480      	push	{r7}
 801223a:	b083      	sub	sp, #12
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8012240:	bf00      	nop
 8012242:	370c      	adds	r7, #12
 8012244:	46bd      	mov	sp, r7
 8012246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224a:	4770      	bx	lr

0801224c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801224c:	b480      	push	{r7}
 801224e:	b083      	sub	sp, #12
 8012250:	af00      	add	r7, sp, #0
 8012252:	4603      	mov	r3, r0
 8012254:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801225a:	021b      	lsls	r3, r3, #8
 801225c:	b21a      	sxth	r2, r3
 801225e:	88fb      	ldrh	r3, [r7, #6]
 8012260:	0a1b      	lsrs	r3, r3, #8
 8012262:	b29b      	uxth	r3, r3
 8012264:	b21b      	sxth	r3, r3
 8012266:	4313      	orrs	r3, r2
 8012268:	b21b      	sxth	r3, r3
 801226a:	b29b      	uxth	r3, r3
}
 801226c:	4618      	mov	r0, r3
 801226e:	370c      	adds	r7, #12
 8012270:	46bd      	mov	sp, r7
 8012272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012276:	4770      	bx	lr

08012278 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012278:	b480      	push	{r7}
 801227a:	b083      	sub	sp, #12
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	061a      	lsls	r2, r3, #24
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	021b      	lsls	r3, r3, #8
 8012288:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801228c:	431a      	orrs	r2, r3
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	0a1b      	lsrs	r3, r3, #8
 8012292:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012296:	431a      	orrs	r2, r3
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	0e1b      	lsrs	r3, r3, #24
 801229c:	4313      	orrs	r3, r2
}
 801229e:	4618      	mov	r0, r3
 80122a0:	370c      	adds	r7, #12
 80122a2:	46bd      	mov	sp, r7
 80122a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a8:	4770      	bx	lr

080122aa <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80122aa:	b580      	push	{r7, lr}
 80122ac:	b082      	sub	sp, #8
 80122ae:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80122b0:	2300      	movs	r3, #0
 80122b2:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80122b4:	f00a ff6c 	bl	801d190 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80122b8:	f000 f8d4 	bl	8012464 <mem_init>
  memp_init();
 80122bc:	f000 fc2c 	bl	8012b18 <memp_init>
  pbuf_init();
  netif_init();
 80122c0:	f000 fd38 	bl	8012d34 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80122c4:	f008 f846 	bl	801a354 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80122c8:	f001 fe48 	bl	8013f5c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80122cc:	f007 ff88 	bl	801a1e0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80122d0:	bf00      	nop
 80122d2:	3708      	adds	r7, #8
 80122d4:	46bd      	mov	sp, r7
 80122d6:	bd80      	pop	{r7, pc}

080122d8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80122d8:	b480      	push	{r7}
 80122da:	b083      	sub	sp, #12
 80122dc:	af00      	add	r7, sp, #0
 80122de:	4603      	mov	r3, r0
 80122e0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80122e2:	4b05      	ldr	r3, [pc, #20]	@ (80122f8 <ptr_to_mem+0x20>)
 80122e4:	681a      	ldr	r2, [r3, #0]
 80122e6:	88fb      	ldrh	r3, [r7, #6]
 80122e8:	4413      	add	r3, r2
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	370c      	adds	r7, #12
 80122ee:	46bd      	mov	sp, r7
 80122f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f4:	4770      	bx	lr
 80122f6:	bf00      	nop
 80122f8:	2000b408 	.word	0x2000b408

080122fc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80122fc:	b480      	push	{r7}
 80122fe:	b083      	sub	sp, #12
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012304:	4b05      	ldr	r3, [pc, #20]	@ (801231c <mem_to_ptr+0x20>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	687a      	ldr	r2, [r7, #4]
 801230a:	1ad3      	subs	r3, r2, r3
 801230c:	b29b      	uxth	r3, r3
}
 801230e:	4618      	mov	r0, r3
 8012310:	370c      	adds	r7, #12
 8012312:	46bd      	mov	sp, r7
 8012314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012318:	4770      	bx	lr
 801231a:	bf00      	nop
 801231c:	2000b408 	.word	0x2000b408

08012320 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012320:	b590      	push	{r4, r7, lr}
 8012322:	b085      	sub	sp, #20
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012328:	4b45      	ldr	r3, [pc, #276]	@ (8012440 <plug_holes+0x120>)
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	687a      	ldr	r2, [r7, #4]
 801232e:	429a      	cmp	r2, r3
 8012330:	d206      	bcs.n	8012340 <plug_holes+0x20>
 8012332:	4b44      	ldr	r3, [pc, #272]	@ (8012444 <plug_holes+0x124>)
 8012334:	f240 12df 	movw	r2, #479	@ 0x1df
 8012338:	4943      	ldr	r1, [pc, #268]	@ (8012448 <plug_holes+0x128>)
 801233a:	4844      	ldr	r0, [pc, #272]	@ (801244c <plug_holes+0x12c>)
 801233c:	f00b ff06 	bl	801e14c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012340:	4b43      	ldr	r3, [pc, #268]	@ (8012450 <plug_holes+0x130>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	687a      	ldr	r2, [r7, #4]
 8012346:	429a      	cmp	r2, r3
 8012348:	d306      	bcc.n	8012358 <plug_holes+0x38>
 801234a:	4b3e      	ldr	r3, [pc, #248]	@ (8012444 <plug_holes+0x124>)
 801234c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8012350:	4940      	ldr	r1, [pc, #256]	@ (8012454 <plug_holes+0x134>)
 8012352:	483e      	ldr	r0, [pc, #248]	@ (801244c <plug_holes+0x12c>)
 8012354:	f00b fefa 	bl	801e14c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	791b      	ldrb	r3, [r3, #4]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d006      	beq.n	801236e <plug_holes+0x4e>
 8012360:	4b38      	ldr	r3, [pc, #224]	@ (8012444 <plug_holes+0x124>)
 8012362:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8012366:	493c      	ldr	r1, [pc, #240]	@ (8012458 <plug_holes+0x138>)
 8012368:	4838      	ldr	r0, [pc, #224]	@ (801244c <plug_holes+0x12c>)
 801236a:	f00b feef 	bl	801e14c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	881b      	ldrh	r3, [r3, #0]
 8012372:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012376:	d906      	bls.n	8012386 <plug_holes+0x66>
 8012378:	4b32      	ldr	r3, [pc, #200]	@ (8012444 <plug_holes+0x124>)
 801237a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 801237e:	4937      	ldr	r1, [pc, #220]	@ (801245c <plug_holes+0x13c>)
 8012380:	4832      	ldr	r0, [pc, #200]	@ (801244c <plug_holes+0x12c>)
 8012382:	f00b fee3 	bl	801e14c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	881b      	ldrh	r3, [r3, #0]
 801238a:	4618      	mov	r0, r3
 801238c:	f7ff ffa4 	bl	80122d8 <ptr_to_mem>
 8012390:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012392:	687a      	ldr	r2, [r7, #4]
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	429a      	cmp	r2, r3
 8012398:	d024      	beq.n	80123e4 <plug_holes+0xc4>
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	791b      	ldrb	r3, [r3, #4]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d120      	bne.n	80123e4 <plug_holes+0xc4>
 80123a2:	4b2b      	ldr	r3, [pc, #172]	@ (8012450 <plug_holes+0x130>)
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	68fa      	ldr	r2, [r7, #12]
 80123a8:	429a      	cmp	r2, r3
 80123aa:	d01b      	beq.n	80123e4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80123ac:	4b2c      	ldr	r3, [pc, #176]	@ (8012460 <plug_holes+0x140>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	68fa      	ldr	r2, [r7, #12]
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d102      	bne.n	80123bc <plug_holes+0x9c>
      lfree = mem;
 80123b6:	4a2a      	ldr	r2, [pc, #168]	@ (8012460 <plug_holes+0x140>)
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	881a      	ldrh	r2, [r3, #0]
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	881b      	ldrh	r3, [r3, #0]
 80123c8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80123cc:	d00a      	beq.n	80123e4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	881b      	ldrh	r3, [r3, #0]
 80123d2:	4618      	mov	r0, r3
 80123d4:	f7ff ff80 	bl	80122d8 <ptr_to_mem>
 80123d8:	4604      	mov	r4, r0
 80123da:	6878      	ldr	r0, [r7, #4]
 80123dc:	f7ff ff8e 	bl	80122fc <mem_to_ptr>
 80123e0:	4603      	mov	r3, r0
 80123e2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	885b      	ldrh	r3, [r3, #2]
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7ff ff75 	bl	80122d8 <ptr_to_mem>
 80123ee:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80123f0:	68ba      	ldr	r2, [r7, #8]
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	429a      	cmp	r2, r3
 80123f6:	d01f      	beq.n	8012438 <plug_holes+0x118>
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	791b      	ldrb	r3, [r3, #4]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d11b      	bne.n	8012438 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012400:	4b17      	ldr	r3, [pc, #92]	@ (8012460 <plug_holes+0x140>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	687a      	ldr	r2, [r7, #4]
 8012406:	429a      	cmp	r2, r3
 8012408:	d102      	bne.n	8012410 <plug_holes+0xf0>
      lfree = pmem;
 801240a:	4a15      	ldr	r2, [pc, #84]	@ (8012460 <plug_holes+0x140>)
 801240c:	68bb      	ldr	r3, [r7, #8]
 801240e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	881a      	ldrh	r2, [r3, #0]
 8012414:	68bb      	ldr	r3, [r7, #8]
 8012416:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	881b      	ldrh	r3, [r3, #0]
 801241c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012420:	d00a      	beq.n	8012438 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	881b      	ldrh	r3, [r3, #0]
 8012426:	4618      	mov	r0, r3
 8012428:	f7ff ff56 	bl	80122d8 <ptr_to_mem>
 801242c:	4604      	mov	r4, r0
 801242e:	68b8      	ldr	r0, [r7, #8]
 8012430:	f7ff ff64 	bl	80122fc <mem_to_ptr>
 8012434:	4603      	mov	r3, r0
 8012436:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012438:	bf00      	nop
 801243a:	3714      	adds	r7, #20
 801243c:	46bd      	mov	sp, r7
 801243e:	bd90      	pop	{r4, r7, pc}
 8012440:	2000b408 	.word	0x2000b408
 8012444:	08020048 	.word	0x08020048
 8012448:	08020078 	.word	0x08020078
 801244c:	08020090 	.word	0x08020090
 8012450:	2000b40c 	.word	0x2000b40c
 8012454:	080200b8 	.word	0x080200b8
 8012458:	080200d4 	.word	0x080200d4
 801245c:	080200f0 	.word	0x080200f0
 8012460:	2000b414 	.word	0x2000b414

08012464 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b082      	sub	sp, #8
 8012468:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801246a:	4b1d      	ldr	r3, [pc, #116]	@ (80124e0 <mem_init+0x7c>)
 801246c:	4a1d      	ldr	r2, [pc, #116]	@ (80124e4 <mem_init+0x80>)
 801246e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012470:	4b1b      	ldr	r3, [pc, #108]	@ (80124e0 <mem_init+0x7c>)
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 801247c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	2200      	movs	r2, #0
 8012482:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2200      	movs	r2, #0
 8012488:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801248a:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 801248e:	f7ff ff23 	bl	80122d8 <ptr_to_mem>
 8012492:	4603      	mov	r3, r0
 8012494:	4a14      	ldr	r2, [pc, #80]	@ (80124e8 <mem_init+0x84>)
 8012496:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8012498:	4b13      	ldr	r3, [pc, #76]	@ (80124e8 <mem_init+0x84>)
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	2201      	movs	r2, #1
 801249e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80124a0:	4b11      	ldr	r3, [pc, #68]	@ (80124e8 <mem_init+0x84>)
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 80124a8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80124aa:	4b0f      	ldr	r3, [pc, #60]	@ (80124e8 <mem_init+0x84>)
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 80124b2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80124b4:	4b0a      	ldr	r3, [pc, #40]	@ (80124e0 <mem_init+0x7c>)
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	4a0c      	ldr	r2, [pc, #48]	@ (80124ec <mem_init+0x88>)
 80124ba:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80124bc:	480c      	ldr	r0, [pc, #48]	@ (80124f0 <mem_init+0x8c>)
 80124be:	f00a fe75 	bl	801d1ac <sys_mutex_new>
 80124c2:	4603      	mov	r3, r0
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d006      	beq.n	80124d6 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80124c8:	4b0a      	ldr	r3, [pc, #40]	@ (80124f4 <mem_init+0x90>)
 80124ca:	f240 221f 	movw	r2, #543	@ 0x21f
 80124ce:	490a      	ldr	r1, [pc, #40]	@ (80124f8 <mem_init+0x94>)
 80124d0:	480a      	ldr	r0, [pc, #40]	@ (80124fc <mem_init+0x98>)
 80124d2:	f00b fe3b 	bl	801e14c <iprintf>
  }
}
 80124d6:	bf00      	nop
 80124d8:	3708      	adds	r7, #8
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}
 80124de:	bf00      	nop
 80124e0:	2000b408 	.word	0x2000b408
 80124e4:	20020000 	.word	0x20020000
 80124e8:	2000b40c 	.word	0x2000b40c
 80124ec:	2000b414 	.word	0x2000b414
 80124f0:	2000b410 	.word	0x2000b410
 80124f4:	08020048 	.word	0x08020048
 80124f8:	0802011c 	.word	0x0802011c
 80124fc:	08020090 	.word	0x08020090

08012500 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b086      	sub	sp, #24
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012508:	6878      	ldr	r0, [r7, #4]
 801250a:	f7ff fef7 	bl	80122fc <mem_to_ptr>
 801250e:	4603      	mov	r3, r0
 8012510:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	881b      	ldrh	r3, [r3, #0]
 8012516:	4618      	mov	r0, r3
 8012518:	f7ff fede 	bl	80122d8 <ptr_to_mem>
 801251c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	885b      	ldrh	r3, [r3, #2]
 8012522:	4618      	mov	r0, r3
 8012524:	f7ff fed8 	bl	80122d8 <ptr_to_mem>
 8012528:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	881b      	ldrh	r3, [r3, #0]
 801252e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012532:	d818      	bhi.n	8012566 <mem_link_valid+0x66>
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	885b      	ldrh	r3, [r3, #2]
 8012538:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801253c:	d813      	bhi.n	8012566 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012542:	8afa      	ldrh	r2, [r7, #22]
 8012544:	429a      	cmp	r2, r3
 8012546:	d004      	beq.n	8012552 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	881b      	ldrh	r3, [r3, #0]
 801254c:	8afa      	ldrh	r2, [r7, #22]
 801254e:	429a      	cmp	r2, r3
 8012550:	d109      	bne.n	8012566 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012552:	4b08      	ldr	r3, [pc, #32]	@ (8012574 <mem_link_valid+0x74>)
 8012554:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012556:	693a      	ldr	r2, [r7, #16]
 8012558:	429a      	cmp	r2, r3
 801255a:	d006      	beq.n	801256a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801255c:	693b      	ldr	r3, [r7, #16]
 801255e:	885b      	ldrh	r3, [r3, #2]
 8012560:	8afa      	ldrh	r2, [r7, #22]
 8012562:	429a      	cmp	r2, r3
 8012564:	d001      	beq.n	801256a <mem_link_valid+0x6a>
    return 0;
 8012566:	2300      	movs	r3, #0
 8012568:	e000      	b.n	801256c <mem_link_valid+0x6c>
  }
  return 1;
 801256a:	2301      	movs	r3, #1
}
 801256c:	4618      	mov	r0, r3
 801256e:	3718      	adds	r7, #24
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}
 8012574:	2000b40c 	.word	0x2000b40c

08012578 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b088      	sub	sp, #32
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d070      	beq.n	8012668 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	f003 0303 	and.w	r3, r3, #3
 801258c:	2b00      	cmp	r3, #0
 801258e:	d00d      	beq.n	80125ac <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012590:	4b37      	ldr	r3, [pc, #220]	@ (8012670 <mem_free+0xf8>)
 8012592:	f240 2273 	movw	r2, #627	@ 0x273
 8012596:	4937      	ldr	r1, [pc, #220]	@ (8012674 <mem_free+0xfc>)
 8012598:	4837      	ldr	r0, [pc, #220]	@ (8012678 <mem_free+0x100>)
 801259a:	f00b fdd7 	bl	801e14c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801259e:	f00a fe63 	bl	801d268 <sys_arch_protect>
 80125a2:	60f8      	str	r0, [r7, #12]
 80125a4:	68f8      	ldr	r0, [r7, #12]
 80125a6:	f00a fe6d 	bl	801d284 <sys_arch_unprotect>
    return;
 80125aa:	e05e      	b.n	801266a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	3b08      	subs	r3, #8
 80125b0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80125b2:	4b32      	ldr	r3, [pc, #200]	@ (801267c <mem_free+0x104>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	69fa      	ldr	r2, [r7, #28]
 80125b8:	429a      	cmp	r2, r3
 80125ba:	d306      	bcc.n	80125ca <mem_free+0x52>
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	f103 020c 	add.w	r2, r3, #12
 80125c2:	4b2f      	ldr	r3, [pc, #188]	@ (8012680 <mem_free+0x108>)
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	429a      	cmp	r2, r3
 80125c8:	d90d      	bls.n	80125e6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80125ca:	4b29      	ldr	r3, [pc, #164]	@ (8012670 <mem_free+0xf8>)
 80125cc:	f240 227f 	movw	r2, #639	@ 0x27f
 80125d0:	492c      	ldr	r1, [pc, #176]	@ (8012684 <mem_free+0x10c>)
 80125d2:	4829      	ldr	r0, [pc, #164]	@ (8012678 <mem_free+0x100>)
 80125d4:	f00b fdba 	bl	801e14c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80125d8:	f00a fe46 	bl	801d268 <sys_arch_protect>
 80125dc:	6138      	str	r0, [r7, #16]
 80125de:	6938      	ldr	r0, [r7, #16]
 80125e0:	f00a fe50 	bl	801d284 <sys_arch_unprotect>
    return;
 80125e4:	e041      	b.n	801266a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80125e6:	4828      	ldr	r0, [pc, #160]	@ (8012688 <mem_free+0x110>)
 80125e8:	f00a fdfc 	bl	801d1e4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80125ec:	69fb      	ldr	r3, [r7, #28]
 80125ee:	791b      	ldrb	r3, [r3, #4]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d110      	bne.n	8012616 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80125f4:	4b1e      	ldr	r3, [pc, #120]	@ (8012670 <mem_free+0xf8>)
 80125f6:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80125fa:	4924      	ldr	r1, [pc, #144]	@ (801268c <mem_free+0x114>)
 80125fc:	481e      	ldr	r0, [pc, #120]	@ (8012678 <mem_free+0x100>)
 80125fe:	f00b fda5 	bl	801e14c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012602:	4821      	ldr	r0, [pc, #132]	@ (8012688 <mem_free+0x110>)
 8012604:	f00a fdfd 	bl	801d202 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012608:	f00a fe2e 	bl	801d268 <sys_arch_protect>
 801260c:	6178      	str	r0, [r7, #20]
 801260e:	6978      	ldr	r0, [r7, #20]
 8012610:	f00a fe38 	bl	801d284 <sys_arch_unprotect>
    return;
 8012614:	e029      	b.n	801266a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8012616:	69f8      	ldr	r0, [r7, #28]
 8012618:	f7ff ff72 	bl	8012500 <mem_link_valid>
 801261c:	4603      	mov	r3, r0
 801261e:	2b00      	cmp	r3, #0
 8012620:	d110      	bne.n	8012644 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8012622:	4b13      	ldr	r3, [pc, #76]	@ (8012670 <mem_free+0xf8>)
 8012624:	f240 2295 	movw	r2, #661	@ 0x295
 8012628:	4919      	ldr	r1, [pc, #100]	@ (8012690 <mem_free+0x118>)
 801262a:	4813      	ldr	r0, [pc, #76]	@ (8012678 <mem_free+0x100>)
 801262c:	f00b fd8e 	bl	801e14c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012630:	4815      	ldr	r0, [pc, #84]	@ (8012688 <mem_free+0x110>)
 8012632:	f00a fde6 	bl	801d202 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012636:	f00a fe17 	bl	801d268 <sys_arch_protect>
 801263a:	61b8      	str	r0, [r7, #24]
 801263c:	69b8      	ldr	r0, [r7, #24]
 801263e:	f00a fe21 	bl	801d284 <sys_arch_unprotect>
    return;
 8012642:	e012      	b.n	801266a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8012644:	69fb      	ldr	r3, [r7, #28]
 8012646:	2200      	movs	r2, #0
 8012648:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801264a:	4b12      	ldr	r3, [pc, #72]	@ (8012694 <mem_free+0x11c>)
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	69fa      	ldr	r2, [r7, #28]
 8012650:	429a      	cmp	r2, r3
 8012652:	d202      	bcs.n	801265a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8012654:	4a0f      	ldr	r2, [pc, #60]	@ (8012694 <mem_free+0x11c>)
 8012656:	69fb      	ldr	r3, [r7, #28]
 8012658:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801265a:	69f8      	ldr	r0, [r7, #28]
 801265c:	f7ff fe60 	bl	8012320 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012660:	4809      	ldr	r0, [pc, #36]	@ (8012688 <mem_free+0x110>)
 8012662:	f00a fdce 	bl	801d202 <sys_mutex_unlock>
 8012666:	e000      	b.n	801266a <mem_free+0xf2>
    return;
 8012668:	bf00      	nop
}
 801266a:	3720      	adds	r7, #32
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}
 8012670:	08020048 	.word	0x08020048
 8012674:	08020138 	.word	0x08020138
 8012678:	08020090 	.word	0x08020090
 801267c:	2000b408 	.word	0x2000b408
 8012680:	2000b40c 	.word	0x2000b40c
 8012684:	0802015c 	.word	0x0802015c
 8012688:	2000b410 	.word	0x2000b410
 801268c:	08020178 	.word	0x08020178
 8012690:	080201a0 	.word	0x080201a0
 8012694:	2000b414 	.word	0x2000b414

08012698 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b088      	sub	sp, #32
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	460b      	mov	r3, r1
 80126a2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80126a4:	887b      	ldrh	r3, [r7, #2]
 80126a6:	3303      	adds	r3, #3
 80126a8:	b29b      	uxth	r3, r3
 80126aa:	f023 0303 	bic.w	r3, r3, #3
 80126ae:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80126b0:	8bfb      	ldrh	r3, [r7, #30]
 80126b2:	2b0b      	cmp	r3, #11
 80126b4:	d801      	bhi.n	80126ba <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80126b6:	230c      	movs	r3, #12
 80126b8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80126ba:	8bfb      	ldrh	r3, [r7, #30]
 80126bc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80126c0:	d803      	bhi.n	80126ca <mem_trim+0x32>
 80126c2:	8bfa      	ldrh	r2, [r7, #30]
 80126c4:	887b      	ldrh	r3, [r7, #2]
 80126c6:	429a      	cmp	r2, r3
 80126c8:	d201      	bcs.n	80126ce <mem_trim+0x36>
    return NULL;
 80126ca:	2300      	movs	r3, #0
 80126cc:	e0d8      	b.n	8012880 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80126ce:	4b6e      	ldr	r3, [pc, #440]	@ (8012888 <mem_trim+0x1f0>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	687a      	ldr	r2, [r7, #4]
 80126d4:	429a      	cmp	r2, r3
 80126d6:	d304      	bcc.n	80126e2 <mem_trim+0x4a>
 80126d8:	4b6c      	ldr	r3, [pc, #432]	@ (801288c <mem_trim+0x1f4>)
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	687a      	ldr	r2, [r7, #4]
 80126de:	429a      	cmp	r2, r3
 80126e0:	d306      	bcc.n	80126f0 <mem_trim+0x58>
 80126e2:	4b6b      	ldr	r3, [pc, #428]	@ (8012890 <mem_trim+0x1f8>)
 80126e4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80126e8:	496a      	ldr	r1, [pc, #424]	@ (8012894 <mem_trim+0x1fc>)
 80126ea:	486b      	ldr	r0, [pc, #428]	@ (8012898 <mem_trim+0x200>)
 80126ec:	f00b fd2e 	bl	801e14c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80126f0:	4b65      	ldr	r3, [pc, #404]	@ (8012888 <mem_trim+0x1f0>)
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	687a      	ldr	r2, [r7, #4]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	d304      	bcc.n	8012704 <mem_trim+0x6c>
 80126fa:	4b64      	ldr	r3, [pc, #400]	@ (801288c <mem_trim+0x1f4>)
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	687a      	ldr	r2, [r7, #4]
 8012700:	429a      	cmp	r2, r3
 8012702:	d307      	bcc.n	8012714 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012704:	f00a fdb0 	bl	801d268 <sys_arch_protect>
 8012708:	60b8      	str	r0, [r7, #8]
 801270a:	68b8      	ldr	r0, [r7, #8]
 801270c:	f00a fdba 	bl	801d284 <sys_arch_unprotect>
    return rmem;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	e0b5      	b.n	8012880 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	3b08      	subs	r3, #8
 8012718:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801271a:	69b8      	ldr	r0, [r7, #24]
 801271c:	f7ff fdee 	bl	80122fc <mem_to_ptr>
 8012720:	4603      	mov	r3, r0
 8012722:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8012724:	69bb      	ldr	r3, [r7, #24]
 8012726:	881a      	ldrh	r2, [r3, #0]
 8012728:	8afb      	ldrh	r3, [r7, #22]
 801272a:	1ad3      	subs	r3, r2, r3
 801272c:	b29b      	uxth	r3, r3
 801272e:	3b08      	subs	r3, #8
 8012730:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8012732:	8bfa      	ldrh	r2, [r7, #30]
 8012734:	8abb      	ldrh	r3, [r7, #20]
 8012736:	429a      	cmp	r2, r3
 8012738:	d906      	bls.n	8012748 <mem_trim+0xb0>
 801273a:	4b55      	ldr	r3, [pc, #340]	@ (8012890 <mem_trim+0x1f8>)
 801273c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8012740:	4956      	ldr	r1, [pc, #344]	@ (801289c <mem_trim+0x204>)
 8012742:	4855      	ldr	r0, [pc, #340]	@ (8012898 <mem_trim+0x200>)
 8012744:	f00b fd02 	bl	801e14c <iprintf>
  if (newsize > size) {
 8012748:	8bfa      	ldrh	r2, [r7, #30]
 801274a:	8abb      	ldrh	r3, [r7, #20]
 801274c:	429a      	cmp	r2, r3
 801274e:	d901      	bls.n	8012754 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8012750:	2300      	movs	r3, #0
 8012752:	e095      	b.n	8012880 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8012754:	8bfa      	ldrh	r2, [r7, #30]
 8012756:	8abb      	ldrh	r3, [r7, #20]
 8012758:	429a      	cmp	r2, r3
 801275a:	d101      	bne.n	8012760 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	e08f      	b.n	8012880 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012760:	484f      	ldr	r0, [pc, #316]	@ (80128a0 <mem_trim+0x208>)
 8012762:	f00a fd3f 	bl	801d1e4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8012766:	69bb      	ldr	r3, [r7, #24]
 8012768:	881b      	ldrh	r3, [r3, #0]
 801276a:	4618      	mov	r0, r3
 801276c:	f7ff fdb4 	bl	80122d8 <ptr_to_mem>
 8012770:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8012772:	693b      	ldr	r3, [r7, #16]
 8012774:	791b      	ldrb	r3, [r3, #4]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d13f      	bne.n	80127fa <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801277a:	69bb      	ldr	r3, [r7, #24]
 801277c:	881b      	ldrh	r3, [r3, #0]
 801277e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012782:	d106      	bne.n	8012792 <mem_trim+0xfa>
 8012784:	4b42      	ldr	r3, [pc, #264]	@ (8012890 <mem_trim+0x1f8>)
 8012786:	f240 22f5 	movw	r2, #757	@ 0x2f5
 801278a:	4946      	ldr	r1, [pc, #280]	@ (80128a4 <mem_trim+0x20c>)
 801278c:	4842      	ldr	r0, [pc, #264]	@ (8012898 <mem_trim+0x200>)
 801278e:	f00b fcdd 	bl	801e14c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8012792:	693b      	ldr	r3, [r7, #16]
 8012794:	881b      	ldrh	r3, [r3, #0]
 8012796:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012798:	8afa      	ldrh	r2, [r7, #22]
 801279a:	8bfb      	ldrh	r3, [r7, #30]
 801279c:	4413      	add	r3, r2
 801279e:	b29b      	uxth	r3, r3
 80127a0:	3308      	adds	r3, #8
 80127a2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80127a4:	4b40      	ldr	r3, [pc, #256]	@ (80128a8 <mem_trim+0x210>)
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	693a      	ldr	r2, [r7, #16]
 80127aa:	429a      	cmp	r2, r3
 80127ac:	d106      	bne.n	80127bc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80127ae:	89fb      	ldrh	r3, [r7, #14]
 80127b0:	4618      	mov	r0, r3
 80127b2:	f7ff fd91 	bl	80122d8 <ptr_to_mem>
 80127b6:	4603      	mov	r3, r0
 80127b8:	4a3b      	ldr	r2, [pc, #236]	@ (80128a8 <mem_trim+0x210>)
 80127ba:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80127bc:	89fb      	ldrh	r3, [r7, #14]
 80127be:	4618      	mov	r0, r3
 80127c0:	f7ff fd8a 	bl	80122d8 <ptr_to_mem>
 80127c4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80127c6:	693b      	ldr	r3, [r7, #16]
 80127c8:	2200      	movs	r2, #0
 80127ca:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	89ba      	ldrh	r2, [r7, #12]
 80127d0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80127d2:	693b      	ldr	r3, [r7, #16]
 80127d4:	8afa      	ldrh	r2, [r7, #22]
 80127d6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80127d8:	69bb      	ldr	r3, [r7, #24]
 80127da:	89fa      	ldrh	r2, [r7, #14]
 80127dc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80127de:	693b      	ldr	r3, [r7, #16]
 80127e0:	881b      	ldrh	r3, [r3, #0]
 80127e2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80127e6:	d047      	beq.n	8012878 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	881b      	ldrh	r3, [r3, #0]
 80127ec:	4618      	mov	r0, r3
 80127ee:	f7ff fd73 	bl	80122d8 <ptr_to_mem>
 80127f2:	4602      	mov	r2, r0
 80127f4:	89fb      	ldrh	r3, [r7, #14]
 80127f6:	8053      	strh	r3, [r2, #2]
 80127f8:	e03e      	b.n	8012878 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80127fa:	8bfb      	ldrh	r3, [r7, #30]
 80127fc:	f103 0214 	add.w	r2, r3, #20
 8012800:	8abb      	ldrh	r3, [r7, #20]
 8012802:	429a      	cmp	r2, r3
 8012804:	d838      	bhi.n	8012878 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012806:	8afa      	ldrh	r2, [r7, #22]
 8012808:	8bfb      	ldrh	r3, [r7, #30]
 801280a:	4413      	add	r3, r2
 801280c:	b29b      	uxth	r3, r3
 801280e:	3308      	adds	r3, #8
 8012810:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012812:	69bb      	ldr	r3, [r7, #24]
 8012814:	881b      	ldrh	r3, [r3, #0]
 8012816:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801281a:	d106      	bne.n	801282a <mem_trim+0x192>
 801281c:	4b1c      	ldr	r3, [pc, #112]	@ (8012890 <mem_trim+0x1f8>)
 801281e:	f240 3216 	movw	r2, #790	@ 0x316
 8012822:	4920      	ldr	r1, [pc, #128]	@ (80128a4 <mem_trim+0x20c>)
 8012824:	481c      	ldr	r0, [pc, #112]	@ (8012898 <mem_trim+0x200>)
 8012826:	f00b fc91 	bl	801e14c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801282a:	89fb      	ldrh	r3, [r7, #14]
 801282c:	4618      	mov	r0, r3
 801282e:	f7ff fd53 	bl	80122d8 <ptr_to_mem>
 8012832:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8012834:	4b1c      	ldr	r3, [pc, #112]	@ (80128a8 <mem_trim+0x210>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	693a      	ldr	r2, [r7, #16]
 801283a:	429a      	cmp	r2, r3
 801283c:	d202      	bcs.n	8012844 <mem_trim+0x1ac>
      lfree = mem2;
 801283e:	4a1a      	ldr	r2, [pc, #104]	@ (80128a8 <mem_trim+0x210>)
 8012840:	693b      	ldr	r3, [r7, #16]
 8012842:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8012844:	693b      	ldr	r3, [r7, #16]
 8012846:	2200      	movs	r2, #0
 8012848:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801284a:	69bb      	ldr	r3, [r7, #24]
 801284c:	881a      	ldrh	r2, [r3, #0]
 801284e:	693b      	ldr	r3, [r7, #16]
 8012850:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8012852:	693b      	ldr	r3, [r7, #16]
 8012854:	8afa      	ldrh	r2, [r7, #22]
 8012856:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8012858:	69bb      	ldr	r3, [r7, #24]
 801285a:	89fa      	ldrh	r2, [r7, #14]
 801285c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	881b      	ldrh	r3, [r3, #0]
 8012862:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012866:	d007      	beq.n	8012878 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012868:	693b      	ldr	r3, [r7, #16]
 801286a:	881b      	ldrh	r3, [r3, #0]
 801286c:	4618      	mov	r0, r3
 801286e:	f7ff fd33 	bl	80122d8 <ptr_to_mem>
 8012872:	4602      	mov	r2, r0
 8012874:	89fb      	ldrh	r3, [r7, #14]
 8012876:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012878:	4809      	ldr	r0, [pc, #36]	@ (80128a0 <mem_trim+0x208>)
 801287a:	f00a fcc2 	bl	801d202 <sys_mutex_unlock>
  return rmem;
 801287e:	687b      	ldr	r3, [r7, #4]
}
 8012880:	4618      	mov	r0, r3
 8012882:	3720      	adds	r7, #32
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}
 8012888:	2000b408 	.word	0x2000b408
 801288c:	2000b40c 	.word	0x2000b40c
 8012890:	08020048 	.word	0x08020048
 8012894:	080201d4 	.word	0x080201d4
 8012898:	08020090 	.word	0x08020090
 801289c:	080201ec 	.word	0x080201ec
 80128a0:	2000b410 	.word	0x2000b410
 80128a4:	0802020c 	.word	0x0802020c
 80128a8:	2000b414 	.word	0x2000b414

080128ac <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b088      	sub	sp, #32
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	4603      	mov	r3, r0
 80128b4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80128b6:	88fb      	ldrh	r3, [r7, #6]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d101      	bne.n	80128c0 <mem_malloc+0x14>
    return NULL;
 80128bc:	2300      	movs	r3, #0
 80128be:	e0e2      	b.n	8012a86 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80128c0:	88fb      	ldrh	r3, [r7, #6]
 80128c2:	3303      	adds	r3, #3
 80128c4:	b29b      	uxth	r3, r3
 80128c6:	f023 0303 	bic.w	r3, r3, #3
 80128ca:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80128cc:	8bbb      	ldrh	r3, [r7, #28]
 80128ce:	2b0b      	cmp	r3, #11
 80128d0:	d801      	bhi.n	80128d6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80128d2:	230c      	movs	r3, #12
 80128d4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80128d6:	8bbb      	ldrh	r3, [r7, #28]
 80128d8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80128dc:	d803      	bhi.n	80128e6 <mem_malloc+0x3a>
 80128de:	8bba      	ldrh	r2, [r7, #28]
 80128e0:	88fb      	ldrh	r3, [r7, #6]
 80128e2:	429a      	cmp	r2, r3
 80128e4:	d201      	bcs.n	80128ea <mem_malloc+0x3e>
    return NULL;
 80128e6:	2300      	movs	r3, #0
 80128e8:	e0cd      	b.n	8012a86 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80128ea:	4869      	ldr	r0, [pc, #420]	@ (8012a90 <mem_malloc+0x1e4>)
 80128ec:	f00a fc7a 	bl	801d1e4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80128f0:	4b68      	ldr	r3, [pc, #416]	@ (8012a94 <mem_malloc+0x1e8>)
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	4618      	mov	r0, r3
 80128f6:	f7ff fd01 	bl	80122fc <mem_to_ptr>
 80128fa:	4603      	mov	r3, r0
 80128fc:	83fb      	strh	r3, [r7, #30]
 80128fe:	e0b7      	b.n	8012a70 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8012900:	8bfb      	ldrh	r3, [r7, #30]
 8012902:	4618      	mov	r0, r3
 8012904:	f7ff fce8 	bl	80122d8 <ptr_to_mem>
 8012908:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801290a:	697b      	ldr	r3, [r7, #20]
 801290c:	791b      	ldrb	r3, [r3, #4]
 801290e:	2b00      	cmp	r3, #0
 8012910:	f040 80a7 	bne.w	8012a62 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8012914:	697b      	ldr	r3, [r7, #20]
 8012916:	881b      	ldrh	r3, [r3, #0]
 8012918:	461a      	mov	r2, r3
 801291a:	8bfb      	ldrh	r3, [r7, #30]
 801291c:	1ad3      	subs	r3, r2, r3
 801291e:	f1a3 0208 	sub.w	r2, r3, #8
 8012922:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8012924:	429a      	cmp	r2, r3
 8012926:	f0c0 809c 	bcc.w	8012a62 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801292a:	697b      	ldr	r3, [r7, #20]
 801292c:	881b      	ldrh	r3, [r3, #0]
 801292e:	461a      	mov	r2, r3
 8012930:	8bfb      	ldrh	r3, [r7, #30]
 8012932:	1ad3      	subs	r3, r2, r3
 8012934:	f1a3 0208 	sub.w	r2, r3, #8
 8012938:	8bbb      	ldrh	r3, [r7, #28]
 801293a:	3314      	adds	r3, #20
 801293c:	429a      	cmp	r2, r3
 801293e:	d333      	bcc.n	80129a8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8012940:	8bfa      	ldrh	r2, [r7, #30]
 8012942:	8bbb      	ldrh	r3, [r7, #28]
 8012944:	4413      	add	r3, r2
 8012946:	b29b      	uxth	r3, r3
 8012948:	3308      	adds	r3, #8
 801294a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801294c:	8a7b      	ldrh	r3, [r7, #18]
 801294e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012952:	d106      	bne.n	8012962 <mem_malloc+0xb6>
 8012954:	4b50      	ldr	r3, [pc, #320]	@ (8012a98 <mem_malloc+0x1ec>)
 8012956:	f240 3287 	movw	r2, #903	@ 0x387
 801295a:	4950      	ldr	r1, [pc, #320]	@ (8012a9c <mem_malloc+0x1f0>)
 801295c:	4850      	ldr	r0, [pc, #320]	@ (8012aa0 <mem_malloc+0x1f4>)
 801295e:	f00b fbf5 	bl	801e14c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8012962:	8a7b      	ldrh	r3, [r7, #18]
 8012964:	4618      	mov	r0, r3
 8012966:	f7ff fcb7 	bl	80122d8 <ptr_to_mem>
 801296a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	2200      	movs	r2, #0
 8012970:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	881a      	ldrh	r2, [r3, #0]
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	8bfa      	ldrh	r2, [r7, #30]
 801297e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	8a7a      	ldrh	r2, [r7, #18]
 8012984:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	2201      	movs	r2, #1
 801298a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	881b      	ldrh	r3, [r3, #0]
 8012990:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012994:	d00b      	beq.n	80129ae <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	881b      	ldrh	r3, [r3, #0]
 801299a:	4618      	mov	r0, r3
 801299c:	f7ff fc9c 	bl	80122d8 <ptr_to_mem>
 80129a0:	4602      	mov	r2, r0
 80129a2:	8a7b      	ldrh	r3, [r7, #18]
 80129a4:	8053      	strh	r3, [r2, #2]
 80129a6:	e002      	b.n	80129ae <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80129a8:	697b      	ldr	r3, [r7, #20]
 80129aa:	2201      	movs	r2, #1
 80129ac:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80129ae:	4b39      	ldr	r3, [pc, #228]	@ (8012a94 <mem_malloc+0x1e8>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	697a      	ldr	r2, [r7, #20]
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d127      	bne.n	8012a08 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80129b8:	4b36      	ldr	r3, [pc, #216]	@ (8012a94 <mem_malloc+0x1e8>)
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80129be:	e005      	b.n	80129cc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80129c0:	69bb      	ldr	r3, [r7, #24]
 80129c2:	881b      	ldrh	r3, [r3, #0]
 80129c4:	4618      	mov	r0, r3
 80129c6:	f7ff fc87 	bl	80122d8 <ptr_to_mem>
 80129ca:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80129cc:	69bb      	ldr	r3, [r7, #24]
 80129ce:	791b      	ldrb	r3, [r3, #4]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d004      	beq.n	80129de <mem_malloc+0x132>
 80129d4:	4b33      	ldr	r3, [pc, #204]	@ (8012aa4 <mem_malloc+0x1f8>)
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	69ba      	ldr	r2, [r7, #24]
 80129da:	429a      	cmp	r2, r3
 80129dc:	d1f0      	bne.n	80129c0 <mem_malloc+0x114>
          }
          lfree = cur;
 80129de:	4a2d      	ldr	r2, [pc, #180]	@ (8012a94 <mem_malloc+0x1e8>)
 80129e0:	69bb      	ldr	r3, [r7, #24]
 80129e2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80129e4:	4b2b      	ldr	r3, [pc, #172]	@ (8012a94 <mem_malloc+0x1e8>)
 80129e6:	681a      	ldr	r2, [r3, #0]
 80129e8:	4b2e      	ldr	r3, [pc, #184]	@ (8012aa4 <mem_malloc+0x1f8>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	429a      	cmp	r2, r3
 80129ee:	d00b      	beq.n	8012a08 <mem_malloc+0x15c>
 80129f0:	4b28      	ldr	r3, [pc, #160]	@ (8012a94 <mem_malloc+0x1e8>)
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	791b      	ldrb	r3, [r3, #4]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d006      	beq.n	8012a08 <mem_malloc+0x15c>
 80129fa:	4b27      	ldr	r3, [pc, #156]	@ (8012a98 <mem_malloc+0x1ec>)
 80129fc:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8012a00:	4929      	ldr	r1, [pc, #164]	@ (8012aa8 <mem_malloc+0x1fc>)
 8012a02:	4827      	ldr	r0, [pc, #156]	@ (8012aa0 <mem_malloc+0x1f4>)
 8012a04:	f00b fba2 	bl	801e14c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8012a08:	4821      	ldr	r0, [pc, #132]	@ (8012a90 <mem_malloc+0x1e4>)
 8012a0a:	f00a fbfa 	bl	801d202 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8012a0e:	8bba      	ldrh	r2, [r7, #28]
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	4413      	add	r3, r2
 8012a14:	3308      	adds	r3, #8
 8012a16:	4a23      	ldr	r2, [pc, #140]	@ (8012aa4 <mem_malloc+0x1f8>)
 8012a18:	6812      	ldr	r2, [r2, #0]
 8012a1a:	4293      	cmp	r3, r2
 8012a1c:	d906      	bls.n	8012a2c <mem_malloc+0x180>
 8012a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8012a98 <mem_malloc+0x1ec>)
 8012a20:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8012a24:	4921      	ldr	r1, [pc, #132]	@ (8012aac <mem_malloc+0x200>)
 8012a26:	481e      	ldr	r0, [pc, #120]	@ (8012aa0 <mem_malloc+0x1f4>)
 8012a28:	f00b fb90 	bl	801e14c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8012a2c:	697b      	ldr	r3, [r7, #20]
 8012a2e:	f003 0303 	and.w	r3, r3, #3
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d006      	beq.n	8012a44 <mem_malloc+0x198>
 8012a36:	4b18      	ldr	r3, [pc, #96]	@ (8012a98 <mem_malloc+0x1ec>)
 8012a38:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8012a3c:	491c      	ldr	r1, [pc, #112]	@ (8012ab0 <mem_malloc+0x204>)
 8012a3e:	4818      	ldr	r0, [pc, #96]	@ (8012aa0 <mem_malloc+0x1f4>)
 8012a40:	f00b fb84 	bl	801e14c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8012a44:	697b      	ldr	r3, [r7, #20]
 8012a46:	f003 0303 	and.w	r3, r3, #3
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d006      	beq.n	8012a5c <mem_malloc+0x1b0>
 8012a4e:	4b12      	ldr	r3, [pc, #72]	@ (8012a98 <mem_malloc+0x1ec>)
 8012a50:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8012a54:	4917      	ldr	r1, [pc, #92]	@ (8012ab4 <mem_malloc+0x208>)
 8012a56:	4812      	ldr	r0, [pc, #72]	@ (8012aa0 <mem_malloc+0x1f4>)
 8012a58:	f00b fb78 	bl	801e14c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8012a5c:	697b      	ldr	r3, [r7, #20]
 8012a5e:	3308      	adds	r3, #8
 8012a60:	e011      	b.n	8012a86 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8012a62:	8bfb      	ldrh	r3, [r7, #30]
 8012a64:	4618      	mov	r0, r3
 8012a66:	f7ff fc37 	bl	80122d8 <ptr_to_mem>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	881b      	ldrh	r3, [r3, #0]
 8012a6e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012a70:	8bfa      	ldrh	r2, [r7, #30]
 8012a72:	8bbb      	ldrh	r3, [r7, #28]
 8012a74:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	f4ff af41 	bcc.w	8012900 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8012a7e:	4804      	ldr	r0, [pc, #16]	@ (8012a90 <mem_malloc+0x1e4>)
 8012a80:	f00a fbbf 	bl	801d202 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8012a84:	2300      	movs	r3, #0
}
 8012a86:	4618      	mov	r0, r3
 8012a88:	3720      	adds	r7, #32
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}
 8012a8e:	bf00      	nop
 8012a90:	2000b410 	.word	0x2000b410
 8012a94:	2000b414 	.word	0x2000b414
 8012a98:	08020048 	.word	0x08020048
 8012a9c:	0802020c 	.word	0x0802020c
 8012aa0:	08020090 	.word	0x08020090
 8012aa4:	2000b40c 	.word	0x2000b40c
 8012aa8:	08020220 	.word	0x08020220
 8012aac:	0802023c 	.word	0x0802023c
 8012ab0:	0802026c 	.word	0x0802026c
 8012ab4:	0802029c 	.word	0x0802029c

08012ab8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8012ab8:	b480      	push	{r7}
 8012aba:	b085      	sub	sp, #20
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	689b      	ldr	r3, [r3, #8]
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	685b      	ldr	r3, [r3, #4]
 8012acc:	3303      	adds	r3, #3
 8012ace:	f023 0303 	bic.w	r3, r3, #3
 8012ad2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	60fb      	str	r3, [r7, #12]
 8012ad8:	e011      	b.n	8012afe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	689b      	ldr	r3, [r3, #8]
 8012ade:	681a      	ldr	r2, [r3, #0]
 8012ae0:	68bb      	ldr	r3, [r7, #8]
 8012ae2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	689b      	ldr	r3, [r3, #8]
 8012ae8:	68ba      	ldr	r2, [r7, #8]
 8012aea:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	881b      	ldrh	r3, [r3, #0]
 8012af0:	461a      	mov	r2, r3
 8012af2:	68bb      	ldr	r3, [r7, #8]
 8012af4:	4413      	add	r3, r2
 8012af6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	3301      	adds	r3, #1
 8012afc:	60fb      	str	r3, [r7, #12]
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	885b      	ldrh	r3, [r3, #2]
 8012b02:	461a      	mov	r2, r3
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	4293      	cmp	r3, r2
 8012b08:	dbe7      	blt.n	8012ada <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8012b0a:	bf00      	nop
 8012b0c:	bf00      	nop
 8012b0e:	3714      	adds	r7, #20
 8012b10:	46bd      	mov	sp, r7
 8012b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b16:	4770      	bx	lr

08012b18 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b082      	sub	sp, #8
 8012b1c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012b1e:	2300      	movs	r3, #0
 8012b20:	80fb      	strh	r3, [r7, #6]
 8012b22:	e009      	b.n	8012b38 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8012b24:	88fb      	ldrh	r3, [r7, #6]
 8012b26:	4a08      	ldr	r2, [pc, #32]	@ (8012b48 <memp_init+0x30>)
 8012b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f7ff ffc3 	bl	8012ab8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012b32:	88fb      	ldrh	r3, [r7, #6]
 8012b34:	3301      	adds	r3, #1
 8012b36:	80fb      	strh	r3, [r7, #6]
 8012b38:	88fb      	ldrh	r3, [r7, #6]
 8012b3a:	2b0c      	cmp	r3, #12
 8012b3c:	d9f2      	bls.n	8012b24 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8012b3e:	bf00      	nop
 8012b40:	bf00      	nop
 8012b42:	3708      	adds	r7, #8
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}
 8012b48:	08068414 	.word	0x08068414

08012b4c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b084      	sub	sp, #16
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8012b54:	f00a fb88 	bl	801d268 <sys_arch_protect>
 8012b58:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	689b      	ldr	r3, [r3, #8]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d015      	beq.n	8012b94 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	689b      	ldr	r3, [r3, #8]
 8012b6c:	68ba      	ldr	r2, [r7, #8]
 8012b6e:	6812      	ldr	r2, [r2, #0]
 8012b70:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8012b72:	68bb      	ldr	r3, [r7, #8]
 8012b74:	f003 0303 	and.w	r3, r3, #3
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d006      	beq.n	8012b8a <do_memp_malloc_pool+0x3e>
 8012b7c:	4b09      	ldr	r3, [pc, #36]	@ (8012ba4 <do_memp_malloc_pool+0x58>)
 8012b7e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8012b82:	4909      	ldr	r1, [pc, #36]	@ (8012ba8 <do_memp_malloc_pool+0x5c>)
 8012b84:	4809      	ldr	r0, [pc, #36]	@ (8012bac <do_memp_malloc_pool+0x60>)
 8012b86:	f00b fae1 	bl	801e14c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012b8a:	68f8      	ldr	r0, [r7, #12]
 8012b8c:	f00a fb7a 	bl	801d284 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8012b90:	68bb      	ldr	r3, [r7, #8]
 8012b92:	e003      	b.n	8012b9c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012b94:	68f8      	ldr	r0, [r7, #12]
 8012b96:	f00a fb75 	bl	801d284 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8012b9a:	2300      	movs	r3, #0
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3710      	adds	r7, #16
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}
 8012ba4:	080202c0 	.word	0x080202c0
 8012ba8:	080202f0 	.word	0x080202f0
 8012bac:	08020314 	.word	0x08020314

08012bb0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b082      	sub	sp, #8
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d106      	bne.n	8012bcc <memp_malloc_pool+0x1c>
 8012bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8012be8 <memp_malloc_pool+0x38>)
 8012bc0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8012bc4:	4909      	ldr	r1, [pc, #36]	@ (8012bec <memp_malloc_pool+0x3c>)
 8012bc6:	480a      	ldr	r0, [pc, #40]	@ (8012bf0 <memp_malloc_pool+0x40>)
 8012bc8:	f00b fac0 	bl	801e14c <iprintf>
  if (desc == NULL) {
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d101      	bne.n	8012bd6 <memp_malloc_pool+0x26>
    return NULL;
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	e003      	b.n	8012bde <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8012bd6:	6878      	ldr	r0, [r7, #4]
 8012bd8:	f7ff ffb8 	bl	8012b4c <do_memp_malloc_pool>
 8012bdc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8012bde:	4618      	mov	r0, r3
 8012be0:	3708      	adds	r7, #8
 8012be2:	46bd      	mov	sp, r7
 8012be4:	bd80      	pop	{r7, pc}
 8012be6:	bf00      	nop
 8012be8:	080202c0 	.word	0x080202c0
 8012bec:	0802033c 	.word	0x0802033c
 8012bf0:	08020314 	.word	0x08020314

08012bf4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b084      	sub	sp, #16
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8012bfe:	79fb      	ldrb	r3, [r7, #7]
 8012c00:	2b0c      	cmp	r3, #12
 8012c02:	d908      	bls.n	8012c16 <memp_malloc+0x22>
 8012c04:	4b0a      	ldr	r3, [pc, #40]	@ (8012c30 <memp_malloc+0x3c>)
 8012c06:	f240 1257 	movw	r2, #343	@ 0x157
 8012c0a:	490a      	ldr	r1, [pc, #40]	@ (8012c34 <memp_malloc+0x40>)
 8012c0c:	480a      	ldr	r0, [pc, #40]	@ (8012c38 <memp_malloc+0x44>)
 8012c0e:	f00b fa9d 	bl	801e14c <iprintf>
 8012c12:	2300      	movs	r3, #0
 8012c14:	e008      	b.n	8012c28 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8012c16:	79fb      	ldrb	r3, [r7, #7]
 8012c18:	4a08      	ldr	r2, [pc, #32]	@ (8012c3c <memp_malloc+0x48>)
 8012c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f7ff ff94 	bl	8012b4c <do_memp_malloc_pool>
 8012c24:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8012c26:	68fb      	ldr	r3, [r7, #12]
}
 8012c28:	4618      	mov	r0, r3
 8012c2a:	3710      	adds	r7, #16
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	bd80      	pop	{r7, pc}
 8012c30:	080202c0 	.word	0x080202c0
 8012c34:	08020350 	.word	0x08020350
 8012c38:	08020314 	.word	0x08020314
 8012c3c:	08068414 	.word	0x08068414

08012c40 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b084      	sub	sp, #16
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
 8012c48:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8012c4a:	683b      	ldr	r3, [r7, #0]
 8012c4c:	f003 0303 	and.w	r3, r3, #3
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d006      	beq.n	8012c62 <do_memp_free_pool+0x22>
 8012c54:	4b0d      	ldr	r3, [pc, #52]	@ (8012c8c <do_memp_free_pool+0x4c>)
 8012c56:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8012c5a:	490d      	ldr	r1, [pc, #52]	@ (8012c90 <do_memp_free_pool+0x50>)
 8012c5c:	480d      	ldr	r0, [pc, #52]	@ (8012c94 <do_memp_free_pool+0x54>)
 8012c5e:	f00b fa75 	bl	801e14c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8012c66:	f00a faff 	bl	801d268 <sys_arch_protect>
 8012c6a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	689b      	ldr	r3, [r3, #8]
 8012c70:	681a      	ldr	r2, [r3, #0]
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	689b      	ldr	r3, [r3, #8]
 8012c7a:	68fa      	ldr	r2, [r7, #12]
 8012c7c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8012c7e:	68b8      	ldr	r0, [r7, #8]
 8012c80:	f00a fb00 	bl	801d284 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8012c84:	bf00      	nop
 8012c86:	3710      	adds	r7, #16
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}
 8012c8c:	080202c0 	.word	0x080202c0
 8012c90:	08020370 	.word	0x08020370
 8012c94:	08020314 	.word	0x08020314

08012c98 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b082      	sub	sp, #8
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
 8012ca0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d106      	bne.n	8012cb6 <memp_free_pool+0x1e>
 8012ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8012cd4 <memp_free_pool+0x3c>)
 8012caa:	f240 1295 	movw	r2, #405	@ 0x195
 8012cae:	490a      	ldr	r1, [pc, #40]	@ (8012cd8 <memp_free_pool+0x40>)
 8012cb0:	480a      	ldr	r0, [pc, #40]	@ (8012cdc <memp_free_pool+0x44>)
 8012cb2:	f00b fa4b 	bl	801e14c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d007      	beq.n	8012ccc <memp_free_pool+0x34>
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d004      	beq.n	8012ccc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8012cc2:	6839      	ldr	r1, [r7, #0]
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	f7ff ffbb 	bl	8012c40 <do_memp_free_pool>
 8012cca:	e000      	b.n	8012cce <memp_free_pool+0x36>
    return;
 8012ccc:	bf00      	nop
}
 8012cce:	3708      	adds	r7, #8
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}
 8012cd4:	080202c0 	.word	0x080202c0
 8012cd8:	0802033c 	.word	0x0802033c
 8012cdc:	08020314 	.word	0x08020314

08012ce0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b082      	sub	sp, #8
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	6039      	str	r1, [r7, #0]
 8012cea:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8012cec:	79fb      	ldrb	r3, [r7, #7]
 8012cee:	2b0c      	cmp	r3, #12
 8012cf0:	d907      	bls.n	8012d02 <memp_free+0x22>
 8012cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8012d24 <memp_free+0x44>)
 8012cf4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8012cf8:	490b      	ldr	r1, [pc, #44]	@ (8012d28 <memp_free+0x48>)
 8012cfa:	480c      	ldr	r0, [pc, #48]	@ (8012d2c <memp_free+0x4c>)
 8012cfc:	f00b fa26 	bl	801e14c <iprintf>
 8012d00:	e00c      	b.n	8012d1c <memp_free+0x3c>

  if (mem == NULL) {
 8012d02:	683b      	ldr	r3, [r7, #0]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d008      	beq.n	8012d1a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8012d08:	79fb      	ldrb	r3, [r7, #7]
 8012d0a:	4a09      	ldr	r2, [pc, #36]	@ (8012d30 <memp_free+0x50>)
 8012d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d10:	6839      	ldr	r1, [r7, #0]
 8012d12:	4618      	mov	r0, r3
 8012d14:	f7ff ff94 	bl	8012c40 <do_memp_free_pool>
 8012d18:	e000      	b.n	8012d1c <memp_free+0x3c>
    return;
 8012d1a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8012d1c:	3708      	adds	r7, #8
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bd80      	pop	{r7, pc}
 8012d22:	bf00      	nop
 8012d24:	080202c0 	.word	0x080202c0
 8012d28:	08020390 	.word	0x08020390
 8012d2c:	08020314 	.word	0x08020314
 8012d30:	08068414 	.word	0x08068414

08012d34 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8012d34:	b480      	push	{r7}
 8012d36:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8012d38:	bf00      	nop
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d40:	4770      	bx	lr
	...

08012d44 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b086      	sub	sp, #24
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	60f8      	str	r0, [r7, #12]
 8012d4c:	60b9      	str	r1, [r7, #8]
 8012d4e:	607a      	str	r2, [r7, #4]
 8012d50:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d108      	bne.n	8012d6a <netif_add+0x26>
 8012d58:	4b57      	ldr	r3, [pc, #348]	@ (8012eb8 <netif_add+0x174>)
 8012d5a:	f240 1227 	movw	r2, #295	@ 0x127
 8012d5e:	4957      	ldr	r1, [pc, #348]	@ (8012ebc <netif_add+0x178>)
 8012d60:	4857      	ldr	r0, [pc, #348]	@ (8012ec0 <netif_add+0x17c>)
 8012d62:	f00b f9f3 	bl	801e14c <iprintf>
 8012d66:	2300      	movs	r3, #0
 8012d68:	e0a2      	b.n	8012eb0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8012d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d108      	bne.n	8012d82 <netif_add+0x3e>
 8012d70:	4b51      	ldr	r3, [pc, #324]	@ (8012eb8 <netif_add+0x174>)
 8012d72:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8012d76:	4953      	ldr	r1, [pc, #332]	@ (8012ec4 <netif_add+0x180>)
 8012d78:	4851      	ldr	r0, [pc, #324]	@ (8012ec0 <netif_add+0x17c>)
 8012d7a:	f00b f9e7 	bl	801e14c <iprintf>
 8012d7e:	2300      	movs	r3, #0
 8012d80:	e096      	b.n	8012eb0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d101      	bne.n	8012d8c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8012d88:	4b4f      	ldr	r3, [pc, #316]	@ (8012ec8 <netif_add+0x184>)
 8012d8a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d101      	bne.n	8012d96 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8012d92:	4b4d      	ldr	r3, [pc, #308]	@ (8012ec8 <netif_add+0x184>)
 8012d94:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012d96:	683b      	ldr	r3, [r7, #0]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d101      	bne.n	8012da0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8012d9c:	4b4a      	ldr	r3, [pc, #296]	@ (8012ec8 <netif_add+0x184>)
 8012d9e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	2200      	movs	r2, #0
 8012da4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	2200      	movs	r2, #0
 8012daa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	2200      	movs	r2, #0
 8012db0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	4a45      	ldr	r2, [pc, #276]	@ (8012ecc <netif_add+0x188>)
 8012db6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	2200      	movs	r2, #0
 8012dbc:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	2200      	movs	r2, #0
 8012dca:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	6a3a      	ldr	r2, [r7, #32]
 8012dd0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8012dd2:	4b3f      	ldr	r3, [pc, #252]	@ (8012ed0 <netif_add+0x18c>)
 8012dd4:	781a      	ldrb	r2, [r3, #0]
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012de0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8012de2:	683b      	ldr	r3, [r7, #0]
 8012de4:	687a      	ldr	r2, [r7, #4]
 8012de6:	68b9      	ldr	r1, [r7, #8]
 8012de8:	68f8      	ldr	r0, [r7, #12]
 8012dea:	f000 f913 	bl	8013014 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8012dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012df0:	68f8      	ldr	r0, [r7, #12]
 8012df2:	4798      	blx	r3
 8012df4:	4603      	mov	r3, r0
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d001      	beq.n	8012dfe <netif_add+0xba>
    return NULL;
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	e058      	b.n	8012eb0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012e04:	2bff      	cmp	r3, #255	@ 0xff
 8012e06:	d103      	bne.n	8012e10 <netif_add+0xcc>
        netif->num = 0;
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8012e10:	2300      	movs	r3, #0
 8012e12:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012e14:	4b2f      	ldr	r3, [pc, #188]	@ (8012ed4 <netif_add+0x190>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	617b      	str	r3, [r7, #20]
 8012e1a:	e02b      	b.n	8012e74 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8012e1c:	697a      	ldr	r2, [r7, #20]
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	429a      	cmp	r2, r3
 8012e22:	d106      	bne.n	8012e32 <netif_add+0xee>
 8012e24:	4b24      	ldr	r3, [pc, #144]	@ (8012eb8 <netif_add+0x174>)
 8012e26:	f240 128b 	movw	r2, #395	@ 0x18b
 8012e2a:	492b      	ldr	r1, [pc, #172]	@ (8012ed8 <netif_add+0x194>)
 8012e2c:	4824      	ldr	r0, [pc, #144]	@ (8012ec0 <netif_add+0x17c>)
 8012e2e:	f00b f98d 	bl	801e14c <iprintf>
        num_netifs++;
 8012e32:	693b      	ldr	r3, [r7, #16]
 8012e34:	3301      	adds	r3, #1
 8012e36:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8012e38:	693b      	ldr	r3, [r7, #16]
 8012e3a:	2bff      	cmp	r3, #255	@ 0xff
 8012e3c:	dd06      	ble.n	8012e4c <netif_add+0x108>
 8012e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8012eb8 <netif_add+0x174>)
 8012e40:	f240 128d 	movw	r2, #397	@ 0x18d
 8012e44:	4925      	ldr	r1, [pc, #148]	@ (8012edc <netif_add+0x198>)
 8012e46:	481e      	ldr	r0, [pc, #120]	@ (8012ec0 <netif_add+0x17c>)
 8012e48:	f00b f980 	bl	801e14c <iprintf>
        if (netif2->num == netif->num) {
 8012e4c:	697b      	ldr	r3, [r7, #20]
 8012e4e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012e58:	429a      	cmp	r2, r3
 8012e5a:	d108      	bne.n	8012e6e <netif_add+0x12a>
          netif->num++;
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012e62:	3301      	adds	r3, #1
 8012e64:	b2da      	uxtb	r2, r3
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8012e6c:	e005      	b.n	8012e7a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	617b      	str	r3, [r7, #20]
 8012e74:	697b      	ldr	r3, [r7, #20]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d1d0      	bne.n	8012e1c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8012e7a:	697b      	ldr	r3, [r7, #20]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d1be      	bne.n	8012dfe <netif_add+0xba>
  }
  if (netif->num == 254) {
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012e86:	2bfe      	cmp	r3, #254	@ 0xfe
 8012e88:	d103      	bne.n	8012e92 <netif_add+0x14e>
    netif_num = 0;
 8012e8a:	4b11      	ldr	r3, [pc, #68]	@ (8012ed0 <netif_add+0x18c>)
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	701a      	strb	r2, [r3, #0]
 8012e90:	e006      	b.n	8012ea0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012e98:	3301      	adds	r3, #1
 8012e9a:	b2da      	uxtb	r2, r3
 8012e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8012ed0 <netif_add+0x18c>)
 8012e9e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8012ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8012ed4 <netif_add+0x190>)
 8012ea2:	681a      	ldr	r2, [r3, #0]
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8012ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8012ed4 <netif_add+0x190>)
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8012eae:	68fb      	ldr	r3, [r7, #12]
}
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	3718      	adds	r7, #24
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd80      	pop	{r7, pc}
 8012eb8:	080203ac 	.word	0x080203ac
 8012ebc:	08020440 	.word	0x08020440
 8012ec0:	080203fc 	.word	0x080203fc
 8012ec4:	0802045c 	.word	0x0802045c
 8012ec8:	08068488 	.word	0x08068488
 8012ecc:	080132ef 	.word	0x080132ef
 8012ed0:	2000e4ec 	.word	0x2000e4ec
 8012ed4:	2000e4e4 	.word	0x2000e4e4
 8012ed8:	08020480 	.word	0x08020480
 8012edc:	08020494 	.word	0x08020494

08012ee0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b082      	sub	sp, #8
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
 8012ee8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8012eea:	6839      	ldr	r1, [r7, #0]
 8012eec:	6878      	ldr	r0, [r7, #4]
 8012eee:	f002 fe51 	bl	8015b94 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8012ef2:	6839      	ldr	r1, [r7, #0]
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f007 fcfd 	bl	801a8f4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8012efa:	bf00      	nop
 8012efc:	3708      	adds	r7, #8
 8012efe:	46bd      	mov	sp, r7
 8012f00:	bd80      	pop	{r7, pc}
	...

08012f04 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b086      	sub	sp, #24
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	60f8      	str	r0, [r7, #12]
 8012f0c:	60b9      	str	r1, [r7, #8]
 8012f0e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d106      	bne.n	8012f24 <netif_do_set_ipaddr+0x20>
 8012f16:	4b1d      	ldr	r3, [pc, #116]	@ (8012f8c <netif_do_set_ipaddr+0x88>)
 8012f18:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8012f1c:	491c      	ldr	r1, [pc, #112]	@ (8012f90 <netif_do_set_ipaddr+0x8c>)
 8012f1e:	481d      	ldr	r0, [pc, #116]	@ (8012f94 <netif_do_set_ipaddr+0x90>)
 8012f20:	f00b f914 	bl	801e14c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d106      	bne.n	8012f38 <netif_do_set_ipaddr+0x34>
 8012f2a:	4b18      	ldr	r3, [pc, #96]	@ (8012f8c <netif_do_set_ipaddr+0x88>)
 8012f2c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8012f30:	4917      	ldr	r1, [pc, #92]	@ (8012f90 <netif_do_set_ipaddr+0x8c>)
 8012f32:	4818      	ldr	r0, [pc, #96]	@ (8012f94 <netif_do_set_ipaddr+0x90>)
 8012f34:	f00b f90a 	bl	801e14c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8012f38:	68bb      	ldr	r3, [r7, #8]
 8012f3a:	681a      	ldr	r2, [r3, #0]
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	3304      	adds	r3, #4
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	429a      	cmp	r2, r3
 8012f44:	d01c      	beq.n	8012f80 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8012f46:	68bb      	ldr	r3, [r7, #8]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	3304      	adds	r3, #4
 8012f50:	681a      	ldr	r2, [r3, #0]
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8012f56:	f107 0314 	add.w	r3, r7, #20
 8012f5a:	4619      	mov	r1, r3
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f7ff ffbf 	bl	8012ee0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8012f62:	68bb      	ldr	r3, [r7, #8]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d002      	beq.n	8012f6e <netif_do_set_ipaddr+0x6a>
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	e000      	b.n	8012f70 <netif_do_set_ipaddr+0x6c>
 8012f6e:	2300      	movs	r3, #0
 8012f70:	68fa      	ldr	r2, [r7, #12]
 8012f72:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8012f74:	2101      	movs	r1, #1
 8012f76:	68f8      	ldr	r0, [r7, #12]
 8012f78:	f000 f8d2 	bl	8013120 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8012f7c:	2301      	movs	r3, #1
 8012f7e:	e000      	b.n	8012f82 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8012f80:	2300      	movs	r3, #0
}
 8012f82:	4618      	mov	r0, r3
 8012f84:	3718      	adds	r7, #24
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}
 8012f8a:	bf00      	nop
 8012f8c:	080203ac 	.word	0x080203ac
 8012f90:	080204c4 	.word	0x080204c4
 8012f94:	080203fc 	.word	0x080203fc

08012f98 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8012f98:	b480      	push	{r7}
 8012f9a:	b085      	sub	sp, #20
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	60f8      	str	r0, [r7, #12]
 8012fa0:	60b9      	str	r1, [r7, #8]
 8012fa2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8012fa4:	68bb      	ldr	r3, [r7, #8]
 8012fa6:	681a      	ldr	r2, [r3, #0]
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	3308      	adds	r3, #8
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	429a      	cmp	r2, r3
 8012fb0:	d00a      	beq.n	8012fc8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d002      	beq.n	8012fbe <netif_do_set_netmask+0x26>
 8012fb8:	68bb      	ldr	r3, [r7, #8]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	e000      	b.n	8012fc0 <netif_do_set_netmask+0x28>
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	68fa      	ldr	r2, [r7, #12]
 8012fc2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8012fc4:	2301      	movs	r3, #1
 8012fc6:	e000      	b.n	8012fca <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8012fc8:	2300      	movs	r3, #0
}
 8012fca:	4618      	mov	r0, r3
 8012fcc:	3714      	adds	r7, #20
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd4:	4770      	bx	lr

08012fd6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8012fd6:	b480      	push	{r7}
 8012fd8:	b085      	sub	sp, #20
 8012fda:	af00      	add	r7, sp, #0
 8012fdc:	60f8      	str	r0, [r7, #12]
 8012fde:	60b9      	str	r1, [r7, #8]
 8012fe0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8012fe2:	68bb      	ldr	r3, [r7, #8]
 8012fe4:	681a      	ldr	r2, [r3, #0]
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	330c      	adds	r3, #12
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	429a      	cmp	r2, r3
 8012fee:	d00a      	beq.n	8013006 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8012ff0:	68bb      	ldr	r3, [r7, #8]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d002      	beq.n	8012ffc <netif_do_set_gw+0x26>
 8012ff6:	68bb      	ldr	r3, [r7, #8]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	e000      	b.n	8012ffe <netif_do_set_gw+0x28>
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	68fa      	ldr	r2, [r7, #12]
 8013000:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8013002:	2301      	movs	r3, #1
 8013004:	e000      	b.n	8013008 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8013006:	2300      	movs	r3, #0
}
 8013008:	4618      	mov	r0, r3
 801300a:	3714      	adds	r7, #20
 801300c:	46bd      	mov	sp, r7
 801300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013012:	4770      	bx	lr

08013014 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b088      	sub	sp, #32
 8013018:	af00      	add	r7, sp, #0
 801301a:	60f8      	str	r0, [r7, #12]
 801301c:	60b9      	str	r1, [r7, #8]
 801301e:	607a      	str	r2, [r7, #4]
 8013020:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8013022:	2300      	movs	r3, #0
 8013024:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8013026:	2300      	movs	r3, #0
 8013028:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801302a:	68bb      	ldr	r3, [r7, #8]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d101      	bne.n	8013034 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013030:	4b1c      	ldr	r3, [pc, #112]	@ (80130a4 <netif_set_addr+0x90>)
 8013032:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d101      	bne.n	801303e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801303a:	4b1a      	ldr	r3, [pc, #104]	@ (80130a4 <netif_set_addr+0x90>)
 801303c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801303e:	683b      	ldr	r3, [r7, #0]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d101      	bne.n	8013048 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013044:	4b17      	ldr	r3, [pc, #92]	@ (80130a4 <netif_set_addr+0x90>)
 8013046:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013048:	68bb      	ldr	r3, [r7, #8]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d003      	beq.n	8013056 <netif_set_addr+0x42>
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d101      	bne.n	801305a <netif_set_addr+0x46>
 8013056:	2301      	movs	r3, #1
 8013058:	e000      	b.n	801305c <netif_set_addr+0x48>
 801305a:	2300      	movs	r3, #0
 801305c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801305e:	697b      	ldr	r3, [r7, #20]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d006      	beq.n	8013072 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013064:	f107 0310 	add.w	r3, r7, #16
 8013068:	461a      	mov	r2, r3
 801306a:	68b9      	ldr	r1, [r7, #8]
 801306c:	68f8      	ldr	r0, [r7, #12]
 801306e:	f7ff ff49 	bl	8012f04 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013072:	69fa      	ldr	r2, [r7, #28]
 8013074:	6879      	ldr	r1, [r7, #4]
 8013076:	68f8      	ldr	r0, [r7, #12]
 8013078:	f7ff ff8e 	bl	8012f98 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801307c:	69ba      	ldr	r2, [r7, #24]
 801307e:	6839      	ldr	r1, [r7, #0]
 8013080:	68f8      	ldr	r0, [r7, #12]
 8013082:	f7ff ffa8 	bl	8012fd6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8013086:	697b      	ldr	r3, [r7, #20]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d106      	bne.n	801309a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801308c:	f107 0310 	add.w	r3, r7, #16
 8013090:	461a      	mov	r2, r3
 8013092:	68b9      	ldr	r1, [r7, #8]
 8013094:	68f8      	ldr	r0, [r7, #12]
 8013096:	f7ff ff35 	bl	8012f04 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801309a:	bf00      	nop
 801309c:	3720      	adds	r7, #32
 801309e:	46bd      	mov	sp, r7
 80130a0:	bd80      	pop	{r7, pc}
 80130a2:	bf00      	nop
 80130a4:	08068488 	.word	0x08068488

080130a8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80130a8:	b480      	push	{r7}
 80130aa:	b083      	sub	sp, #12
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80130b0:	4a04      	ldr	r2, [pc, #16]	@ (80130c4 <netif_set_default+0x1c>)
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80130b6:	bf00      	nop
 80130b8:	370c      	adds	r7, #12
 80130ba:	46bd      	mov	sp, r7
 80130bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c0:	4770      	bx	lr
 80130c2:	bf00      	nop
 80130c4:	2000e4e8 	.word	0x2000e4e8

080130c8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b082      	sub	sp, #8
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d107      	bne.n	80130e6 <netif_set_up+0x1e>
 80130d6:	4b0f      	ldr	r3, [pc, #60]	@ (8013114 <netif_set_up+0x4c>)
 80130d8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80130dc:	490e      	ldr	r1, [pc, #56]	@ (8013118 <netif_set_up+0x50>)
 80130de:	480f      	ldr	r0, [pc, #60]	@ (801311c <netif_set_up+0x54>)
 80130e0:	f00b f834 	bl	801e14c <iprintf>
 80130e4:	e013      	b.n	801310e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80130ec:	f003 0301 	and.w	r3, r3, #1
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d10c      	bne.n	801310e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80130fa:	f043 0301 	orr.w	r3, r3, #1
 80130fe:	b2da      	uxtb	r2, r3
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013106:	2103      	movs	r1, #3
 8013108:	6878      	ldr	r0, [r7, #4]
 801310a:	f000 f809 	bl	8013120 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801310e:	3708      	adds	r7, #8
 8013110:	46bd      	mov	sp, r7
 8013112:	bd80      	pop	{r7, pc}
 8013114:	080203ac 	.word	0x080203ac
 8013118:	08020534 	.word	0x08020534
 801311c:	080203fc 	.word	0x080203fc

08013120 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b082      	sub	sp, #8
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
 8013128:	460b      	mov	r3, r1
 801312a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d106      	bne.n	8013140 <netif_issue_reports+0x20>
 8013132:	4b18      	ldr	r3, [pc, #96]	@ (8013194 <netif_issue_reports+0x74>)
 8013134:	f240 326d 	movw	r2, #877	@ 0x36d
 8013138:	4917      	ldr	r1, [pc, #92]	@ (8013198 <netif_issue_reports+0x78>)
 801313a:	4818      	ldr	r0, [pc, #96]	@ (801319c <netif_issue_reports+0x7c>)
 801313c:	f00b f806 	bl	801e14c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013146:	f003 0304 	and.w	r3, r3, #4
 801314a:	2b00      	cmp	r3, #0
 801314c:	d01e      	beq.n	801318c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013154:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013158:	2b00      	cmp	r3, #0
 801315a:	d017      	beq.n	801318c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801315c:	78fb      	ldrb	r3, [r7, #3]
 801315e:	f003 0301 	and.w	r3, r3, #1
 8013162:	2b00      	cmp	r3, #0
 8013164:	d013      	beq.n	801318e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	3304      	adds	r3, #4
 801316a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801316c:	2b00      	cmp	r3, #0
 801316e:	d00e      	beq.n	801318e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013176:	f003 0308 	and.w	r3, r3, #8
 801317a:	2b00      	cmp	r3, #0
 801317c:	d007      	beq.n	801318e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	3304      	adds	r3, #4
 8013182:	4619      	mov	r1, r3
 8013184:	6878      	ldr	r0, [r7, #4]
 8013186:	f008 fb1f 	bl	801b7c8 <etharp_request>
 801318a:	e000      	b.n	801318e <netif_issue_reports+0x6e>
    return;
 801318c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801318e:	3708      	adds	r7, #8
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}
 8013194:	080203ac 	.word	0x080203ac
 8013198:	08020550 	.word	0x08020550
 801319c:	080203fc 	.word	0x080203fc

080131a0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b082      	sub	sp, #8
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d107      	bne.n	80131be <netif_set_down+0x1e>
 80131ae:	4b12      	ldr	r3, [pc, #72]	@ (80131f8 <netif_set_down+0x58>)
 80131b0:	f240 329b 	movw	r2, #923	@ 0x39b
 80131b4:	4911      	ldr	r1, [pc, #68]	@ (80131fc <netif_set_down+0x5c>)
 80131b6:	4812      	ldr	r0, [pc, #72]	@ (8013200 <netif_set_down+0x60>)
 80131b8:	f00a ffc8 	bl	801e14c <iprintf>
 80131bc:	e019      	b.n	80131f2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80131c4:	f003 0301 	and.w	r3, r3, #1
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d012      	beq.n	80131f2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80131d2:	f023 0301 	bic.w	r3, r3, #1
 80131d6:	b2da      	uxtb	r2, r3
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80131e4:	f003 0308 	and.w	r3, r3, #8
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d002      	beq.n	80131f2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80131ec:	6878      	ldr	r0, [r7, #4]
 80131ee:	f007 fea9 	bl	801af44 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80131f2:	3708      	adds	r7, #8
 80131f4:	46bd      	mov	sp, r7
 80131f6:	bd80      	pop	{r7, pc}
 80131f8:	080203ac 	.word	0x080203ac
 80131fc:	08020574 	.word	0x08020574
 8013200:	080203fc 	.word	0x080203fc

08013204 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b082      	sub	sp, #8
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d107      	bne.n	8013222 <netif_set_link_up+0x1e>
 8013212:	4b13      	ldr	r3, [pc, #76]	@ (8013260 <netif_set_link_up+0x5c>)
 8013214:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8013218:	4912      	ldr	r1, [pc, #72]	@ (8013264 <netif_set_link_up+0x60>)
 801321a:	4813      	ldr	r0, [pc, #76]	@ (8013268 <netif_set_link_up+0x64>)
 801321c:	f00a ff96 	bl	801e14c <iprintf>
 8013220:	e01b      	b.n	801325a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013228:	f003 0304 	and.w	r3, r3, #4
 801322c:	2b00      	cmp	r3, #0
 801322e:	d114      	bne.n	801325a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013236:	f043 0304 	orr.w	r3, r3, #4
 801323a:	b2da      	uxtb	r2, r3
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013242:	2103      	movs	r1, #3
 8013244:	6878      	ldr	r0, [r7, #4]
 8013246:	f7ff ff6b 	bl	8013120 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	69db      	ldr	r3, [r3, #28]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d003      	beq.n	801325a <netif_set_link_up+0x56>
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	69db      	ldr	r3, [r3, #28]
 8013256:	6878      	ldr	r0, [r7, #4]
 8013258:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801325a:	3708      	adds	r7, #8
 801325c:	46bd      	mov	sp, r7
 801325e:	bd80      	pop	{r7, pc}
 8013260:	080203ac 	.word	0x080203ac
 8013264:	08020594 	.word	0x08020594
 8013268:	080203fc 	.word	0x080203fc

0801326c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b082      	sub	sp, #8
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d107      	bne.n	801328a <netif_set_link_down+0x1e>
 801327a:	4b11      	ldr	r3, [pc, #68]	@ (80132c0 <netif_set_link_down+0x54>)
 801327c:	f240 4206 	movw	r2, #1030	@ 0x406
 8013280:	4910      	ldr	r1, [pc, #64]	@ (80132c4 <netif_set_link_down+0x58>)
 8013282:	4811      	ldr	r0, [pc, #68]	@ (80132c8 <netif_set_link_down+0x5c>)
 8013284:	f00a ff62 	bl	801e14c <iprintf>
 8013288:	e017      	b.n	80132ba <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013290:	f003 0304 	and.w	r3, r3, #4
 8013294:	2b00      	cmp	r3, #0
 8013296:	d010      	beq.n	80132ba <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801329e:	f023 0304 	bic.w	r3, r3, #4
 80132a2:	b2da      	uxtb	r2, r3
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	69db      	ldr	r3, [r3, #28]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d003      	beq.n	80132ba <netif_set_link_down+0x4e>
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	69db      	ldr	r3, [r3, #28]
 80132b6:	6878      	ldr	r0, [r7, #4]
 80132b8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80132ba:	3708      	adds	r7, #8
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}
 80132c0:	080203ac 	.word	0x080203ac
 80132c4:	080205b8 	.word	0x080205b8
 80132c8:	080203fc 	.word	0x080203fc

080132cc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80132cc:	b480      	push	{r7}
 80132ce:	b083      	sub	sp, #12
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
 80132d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d002      	beq.n	80132e2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	683a      	ldr	r2, [r7, #0]
 80132e0:	61da      	str	r2, [r3, #28]
  }
}
 80132e2:	bf00      	nop
 80132e4:	370c      	adds	r7, #12
 80132e6:	46bd      	mov	sp, r7
 80132e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ec:	4770      	bx	lr

080132ee <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80132ee:	b480      	push	{r7}
 80132f0:	b085      	sub	sp, #20
 80132f2:	af00      	add	r7, sp, #0
 80132f4:	60f8      	str	r0, [r7, #12]
 80132f6:	60b9      	str	r1, [r7, #8]
 80132f8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80132fa:	f06f 030b 	mvn.w	r3, #11
}
 80132fe:	4618      	mov	r0, r3
 8013300:	3714      	adds	r7, #20
 8013302:	46bd      	mov	sp, r7
 8013304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013308:	4770      	bx	lr
	...

0801330c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801330c:	b480      	push	{r7}
 801330e:	b085      	sub	sp, #20
 8013310:	af00      	add	r7, sp, #0
 8013312:	4603      	mov	r3, r0
 8013314:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8013316:	79fb      	ldrb	r3, [r7, #7]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d013      	beq.n	8013344 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801331c:	4b0d      	ldr	r3, [pc, #52]	@ (8013354 <netif_get_by_index+0x48>)
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	60fb      	str	r3, [r7, #12]
 8013322:	e00c      	b.n	801333e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801332a:	3301      	adds	r3, #1
 801332c:	b2db      	uxtb	r3, r3
 801332e:	79fa      	ldrb	r2, [r7, #7]
 8013330:	429a      	cmp	r2, r3
 8013332:	d101      	bne.n	8013338 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	e006      	b.n	8013346 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	60fb      	str	r3, [r7, #12]
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d1ef      	bne.n	8013324 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8013344:	2300      	movs	r3, #0
}
 8013346:	4618      	mov	r0, r3
 8013348:	3714      	adds	r7, #20
 801334a:	46bd      	mov	sp, r7
 801334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013350:	4770      	bx	lr
 8013352:	bf00      	nop
 8013354:	2000e4e4 	.word	0x2000e4e4

08013358 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b082      	sub	sp, #8
 801335c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801335e:	f009 ff83 	bl	801d268 <sys_arch_protect>
 8013362:	6038      	str	r0, [r7, #0]
 8013364:	4b0d      	ldr	r3, [pc, #52]	@ (801339c <pbuf_free_ooseq+0x44>)
 8013366:	2200      	movs	r2, #0
 8013368:	701a      	strb	r2, [r3, #0]
 801336a:	6838      	ldr	r0, [r7, #0]
 801336c:	f009 ff8a 	bl	801d284 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013370:	4b0b      	ldr	r3, [pc, #44]	@ (80133a0 <pbuf_free_ooseq+0x48>)
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	607b      	str	r3, [r7, #4]
 8013376:	e00a      	b.n	801338e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801337c:	2b00      	cmp	r3, #0
 801337e:	d003      	beq.n	8013388 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f002 fc45 	bl	8015c10 <tcp_free_ooseq>
      return;
 8013386:	e005      	b.n	8013394 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	68db      	ldr	r3, [r3, #12]
 801338c:	607b      	str	r3, [r7, #4]
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d1f1      	bne.n	8013378 <pbuf_free_ooseq+0x20>
    }
  }
}
 8013394:	3708      	adds	r7, #8
 8013396:	46bd      	mov	sp, r7
 8013398:	bd80      	pop	{r7, pc}
 801339a:	bf00      	nop
 801339c:	2000e4ed 	.word	0x2000e4ed
 80133a0:	2000e4fc 	.word	0x2000e4fc

080133a4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b082      	sub	sp, #8
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80133ac:	f7ff ffd4 	bl	8013358 <pbuf_free_ooseq>
}
 80133b0:	bf00      	nop
 80133b2:	3708      	adds	r7, #8
 80133b4:	46bd      	mov	sp, r7
 80133b6:	bd80      	pop	{r7, pc}

080133b8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b082      	sub	sp, #8
 80133bc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80133be:	f009 ff53 	bl	801d268 <sys_arch_protect>
 80133c2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80133c4:	4b0f      	ldr	r3, [pc, #60]	@ (8013404 <pbuf_pool_is_empty+0x4c>)
 80133c6:	781b      	ldrb	r3, [r3, #0]
 80133c8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80133ca:	4b0e      	ldr	r3, [pc, #56]	@ (8013404 <pbuf_pool_is_empty+0x4c>)
 80133cc:	2201      	movs	r2, #1
 80133ce:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80133d0:	6878      	ldr	r0, [r7, #4]
 80133d2:	f009 ff57 	bl	801d284 <sys_arch_unprotect>

  if (!queued) {
 80133d6:	78fb      	ldrb	r3, [r7, #3]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d10f      	bne.n	80133fc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80133dc:	2100      	movs	r1, #0
 80133de:	480a      	ldr	r0, [pc, #40]	@ (8013408 <pbuf_pool_is_empty+0x50>)
 80133e0:	f7fe fe4c 	bl	801207c <tcpip_try_callback>
 80133e4:	4603      	mov	r3, r0
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d008      	beq.n	80133fc <pbuf_pool_is_empty+0x44>
 80133ea:	f009 ff3d 	bl	801d268 <sys_arch_protect>
 80133ee:	6078      	str	r0, [r7, #4]
 80133f0:	4b04      	ldr	r3, [pc, #16]	@ (8013404 <pbuf_pool_is_empty+0x4c>)
 80133f2:	2200      	movs	r2, #0
 80133f4:	701a      	strb	r2, [r3, #0]
 80133f6:	6878      	ldr	r0, [r7, #4]
 80133f8:	f009 ff44 	bl	801d284 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80133fc:	bf00      	nop
 80133fe:	3708      	adds	r7, #8
 8013400:	46bd      	mov	sp, r7
 8013402:	bd80      	pop	{r7, pc}
 8013404:	2000e4ed 	.word	0x2000e4ed
 8013408:	080133a5 	.word	0x080133a5

0801340c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801340c:	b480      	push	{r7}
 801340e:	b085      	sub	sp, #20
 8013410:	af00      	add	r7, sp, #0
 8013412:	60f8      	str	r0, [r7, #12]
 8013414:	60b9      	str	r1, [r7, #8]
 8013416:	4611      	mov	r1, r2
 8013418:	461a      	mov	r2, r3
 801341a:	460b      	mov	r3, r1
 801341c:	80fb      	strh	r3, [r7, #6]
 801341e:	4613      	mov	r3, r2
 8013420:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	2200      	movs	r2, #0
 8013426:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	68ba      	ldr	r2, [r7, #8]
 801342c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	88fa      	ldrh	r2, [r7, #6]
 8013432:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	88ba      	ldrh	r2, [r7, #4]
 8013438:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801343a:	8b3b      	ldrh	r3, [r7, #24]
 801343c:	b2da      	uxtb	r2, r3
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	7f3a      	ldrb	r2, [r7, #28]
 8013446:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	2201      	movs	r2, #1
 801344c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	2200      	movs	r2, #0
 8013452:	73da      	strb	r2, [r3, #15]
}
 8013454:	bf00      	nop
 8013456:	3714      	adds	r7, #20
 8013458:	46bd      	mov	sp, r7
 801345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345e:	4770      	bx	lr

08013460 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b08c      	sub	sp, #48	@ 0x30
 8013464:	af02      	add	r7, sp, #8
 8013466:	4603      	mov	r3, r0
 8013468:	71fb      	strb	r3, [r7, #7]
 801346a:	460b      	mov	r3, r1
 801346c:	80bb      	strh	r3, [r7, #4]
 801346e:	4613      	mov	r3, r2
 8013470:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013472:	79fb      	ldrb	r3, [r7, #7]
 8013474:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8013476:	887b      	ldrh	r3, [r7, #2]
 8013478:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801347c:	d07f      	beq.n	801357e <pbuf_alloc+0x11e>
 801347e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013482:	f300 80c8 	bgt.w	8013616 <pbuf_alloc+0x1b6>
 8013486:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801348a:	d010      	beq.n	80134ae <pbuf_alloc+0x4e>
 801348c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013490:	f300 80c1 	bgt.w	8013616 <pbuf_alloc+0x1b6>
 8013494:	2b01      	cmp	r3, #1
 8013496:	d002      	beq.n	801349e <pbuf_alloc+0x3e>
 8013498:	2b41      	cmp	r3, #65	@ 0x41
 801349a:	f040 80bc 	bne.w	8013616 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801349e:	887a      	ldrh	r2, [r7, #2]
 80134a0:	88bb      	ldrh	r3, [r7, #4]
 80134a2:	4619      	mov	r1, r3
 80134a4:	2000      	movs	r0, #0
 80134a6:	f000 f8d1 	bl	801364c <pbuf_alloc_reference>
 80134aa:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80134ac:	e0bd      	b.n	801362a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80134ae:	2300      	movs	r3, #0
 80134b0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80134b2:	2300      	movs	r3, #0
 80134b4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80134b6:	88bb      	ldrh	r3, [r7, #4]
 80134b8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80134ba:	200c      	movs	r0, #12
 80134bc:	f7ff fb9a 	bl	8012bf4 <memp_malloc>
 80134c0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80134c2:	693b      	ldr	r3, [r7, #16]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d109      	bne.n	80134dc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80134c8:	f7ff ff76 	bl	80133b8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80134cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d002      	beq.n	80134d8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80134d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80134d4:	f000 faa8 	bl	8013a28 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80134d8:	2300      	movs	r3, #0
 80134da:	e0a7      	b.n	801362c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80134dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80134de:	3303      	adds	r3, #3
 80134e0:	b29b      	uxth	r3, r3
 80134e2:	f023 0303 	bic.w	r3, r3, #3
 80134e6:	b29b      	uxth	r3, r3
 80134e8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80134ec:	b29b      	uxth	r3, r3
 80134ee:	8b7a      	ldrh	r2, [r7, #26]
 80134f0:	4293      	cmp	r3, r2
 80134f2:	bf28      	it	cs
 80134f4:	4613      	movcs	r3, r2
 80134f6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80134f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80134fa:	3310      	adds	r3, #16
 80134fc:	693a      	ldr	r2, [r7, #16]
 80134fe:	4413      	add	r3, r2
 8013500:	3303      	adds	r3, #3
 8013502:	f023 0303 	bic.w	r3, r3, #3
 8013506:	4618      	mov	r0, r3
 8013508:	89f9      	ldrh	r1, [r7, #14]
 801350a:	8b7a      	ldrh	r2, [r7, #26]
 801350c:	2300      	movs	r3, #0
 801350e:	9301      	str	r3, [sp, #4]
 8013510:	887b      	ldrh	r3, [r7, #2]
 8013512:	9300      	str	r3, [sp, #0]
 8013514:	460b      	mov	r3, r1
 8013516:	4601      	mov	r1, r0
 8013518:	6938      	ldr	r0, [r7, #16]
 801351a:	f7ff ff77 	bl	801340c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801351e:	693b      	ldr	r3, [r7, #16]
 8013520:	685b      	ldr	r3, [r3, #4]
 8013522:	f003 0303 	and.w	r3, r3, #3
 8013526:	2b00      	cmp	r3, #0
 8013528:	d006      	beq.n	8013538 <pbuf_alloc+0xd8>
 801352a:	4b42      	ldr	r3, [pc, #264]	@ (8013634 <pbuf_alloc+0x1d4>)
 801352c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013530:	4941      	ldr	r1, [pc, #260]	@ (8013638 <pbuf_alloc+0x1d8>)
 8013532:	4842      	ldr	r0, [pc, #264]	@ (801363c <pbuf_alloc+0x1dc>)
 8013534:	f00a fe0a 	bl	801e14c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8013538:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801353a:	3303      	adds	r3, #3
 801353c:	f023 0303 	bic.w	r3, r3, #3
 8013540:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8013544:	d106      	bne.n	8013554 <pbuf_alloc+0xf4>
 8013546:	4b3b      	ldr	r3, [pc, #236]	@ (8013634 <pbuf_alloc+0x1d4>)
 8013548:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801354c:	493c      	ldr	r1, [pc, #240]	@ (8013640 <pbuf_alloc+0x1e0>)
 801354e:	483b      	ldr	r0, [pc, #236]	@ (801363c <pbuf_alloc+0x1dc>)
 8013550:	f00a fdfc 	bl	801e14c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8013554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013556:	2b00      	cmp	r3, #0
 8013558:	d102      	bne.n	8013560 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801355a:	693b      	ldr	r3, [r7, #16]
 801355c:	627b      	str	r3, [r7, #36]	@ 0x24
 801355e:	e002      	b.n	8013566 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8013560:	69fb      	ldr	r3, [r7, #28]
 8013562:	693a      	ldr	r2, [r7, #16]
 8013564:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8013566:	693b      	ldr	r3, [r7, #16]
 8013568:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801356a:	8b7a      	ldrh	r2, [r7, #26]
 801356c:	89fb      	ldrh	r3, [r7, #14]
 801356e:	1ad3      	subs	r3, r2, r3
 8013570:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013572:	2300      	movs	r3, #0
 8013574:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8013576:	8b7b      	ldrh	r3, [r7, #26]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d19e      	bne.n	80134ba <pbuf_alloc+0x5a>
      break;
 801357c:	e055      	b.n	801362a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801357e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013580:	3303      	adds	r3, #3
 8013582:	b29b      	uxth	r3, r3
 8013584:	f023 0303 	bic.w	r3, r3, #3
 8013588:	b29a      	uxth	r2, r3
 801358a:	88bb      	ldrh	r3, [r7, #4]
 801358c:	3303      	adds	r3, #3
 801358e:	b29b      	uxth	r3, r3
 8013590:	f023 0303 	bic.w	r3, r3, #3
 8013594:	b29b      	uxth	r3, r3
 8013596:	4413      	add	r3, r2
 8013598:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801359a:	8b3b      	ldrh	r3, [r7, #24]
 801359c:	3310      	adds	r3, #16
 801359e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80135a0:	8b3a      	ldrh	r2, [r7, #24]
 80135a2:	88bb      	ldrh	r3, [r7, #4]
 80135a4:	3303      	adds	r3, #3
 80135a6:	f023 0303 	bic.w	r3, r3, #3
 80135aa:	429a      	cmp	r2, r3
 80135ac:	d306      	bcc.n	80135bc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80135ae:	8afa      	ldrh	r2, [r7, #22]
 80135b0:	88bb      	ldrh	r3, [r7, #4]
 80135b2:	3303      	adds	r3, #3
 80135b4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80135b8:	429a      	cmp	r2, r3
 80135ba:	d201      	bcs.n	80135c0 <pbuf_alloc+0x160>
        return NULL;
 80135bc:	2300      	movs	r3, #0
 80135be:	e035      	b.n	801362c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80135c0:	8afb      	ldrh	r3, [r7, #22]
 80135c2:	4618      	mov	r0, r3
 80135c4:	f7ff f972 	bl	80128ac <mem_malloc>
 80135c8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80135ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d101      	bne.n	80135d4 <pbuf_alloc+0x174>
        return NULL;
 80135d0:	2300      	movs	r3, #0
 80135d2:	e02b      	b.n	801362c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80135d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80135d6:	3310      	adds	r3, #16
 80135d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80135da:	4413      	add	r3, r2
 80135dc:	3303      	adds	r3, #3
 80135de:	f023 0303 	bic.w	r3, r3, #3
 80135e2:	4618      	mov	r0, r3
 80135e4:	88b9      	ldrh	r1, [r7, #4]
 80135e6:	88ba      	ldrh	r2, [r7, #4]
 80135e8:	2300      	movs	r3, #0
 80135ea:	9301      	str	r3, [sp, #4]
 80135ec:	887b      	ldrh	r3, [r7, #2]
 80135ee:	9300      	str	r3, [sp, #0]
 80135f0:	460b      	mov	r3, r1
 80135f2:	4601      	mov	r1, r0
 80135f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80135f6:	f7ff ff09 	bl	801340c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80135fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135fc:	685b      	ldr	r3, [r3, #4]
 80135fe:	f003 0303 	and.w	r3, r3, #3
 8013602:	2b00      	cmp	r3, #0
 8013604:	d010      	beq.n	8013628 <pbuf_alloc+0x1c8>
 8013606:	4b0b      	ldr	r3, [pc, #44]	@ (8013634 <pbuf_alloc+0x1d4>)
 8013608:	f44f 7291 	mov.w	r2, #290	@ 0x122
 801360c:	490d      	ldr	r1, [pc, #52]	@ (8013644 <pbuf_alloc+0x1e4>)
 801360e:	480b      	ldr	r0, [pc, #44]	@ (801363c <pbuf_alloc+0x1dc>)
 8013610:	f00a fd9c 	bl	801e14c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8013614:	e008      	b.n	8013628 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8013616:	4b07      	ldr	r3, [pc, #28]	@ (8013634 <pbuf_alloc+0x1d4>)
 8013618:	f240 1227 	movw	r2, #295	@ 0x127
 801361c:	490a      	ldr	r1, [pc, #40]	@ (8013648 <pbuf_alloc+0x1e8>)
 801361e:	4807      	ldr	r0, [pc, #28]	@ (801363c <pbuf_alloc+0x1dc>)
 8013620:	f00a fd94 	bl	801e14c <iprintf>
      return NULL;
 8013624:	2300      	movs	r3, #0
 8013626:	e001      	b.n	801362c <pbuf_alloc+0x1cc>
      break;
 8013628:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801362a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801362c:	4618      	mov	r0, r3
 801362e:	3728      	adds	r7, #40	@ 0x28
 8013630:	46bd      	mov	sp, r7
 8013632:	bd80      	pop	{r7, pc}
 8013634:	080205dc 	.word	0x080205dc
 8013638:	0802060c 	.word	0x0802060c
 801363c:	0802063c 	.word	0x0802063c
 8013640:	08020664 	.word	0x08020664
 8013644:	08020698 	.word	0x08020698
 8013648:	080206c4 	.word	0x080206c4

0801364c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b086      	sub	sp, #24
 8013650:	af02      	add	r7, sp, #8
 8013652:	6078      	str	r0, [r7, #4]
 8013654:	460b      	mov	r3, r1
 8013656:	807b      	strh	r3, [r7, #2]
 8013658:	4613      	mov	r3, r2
 801365a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801365c:	883b      	ldrh	r3, [r7, #0]
 801365e:	2b41      	cmp	r3, #65	@ 0x41
 8013660:	d009      	beq.n	8013676 <pbuf_alloc_reference+0x2a>
 8013662:	883b      	ldrh	r3, [r7, #0]
 8013664:	2b01      	cmp	r3, #1
 8013666:	d006      	beq.n	8013676 <pbuf_alloc_reference+0x2a>
 8013668:	4b0f      	ldr	r3, [pc, #60]	@ (80136a8 <pbuf_alloc_reference+0x5c>)
 801366a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 801366e:	490f      	ldr	r1, [pc, #60]	@ (80136ac <pbuf_alloc_reference+0x60>)
 8013670:	480f      	ldr	r0, [pc, #60]	@ (80136b0 <pbuf_alloc_reference+0x64>)
 8013672:	f00a fd6b 	bl	801e14c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8013676:	200b      	movs	r0, #11
 8013678:	f7ff fabc 	bl	8012bf4 <memp_malloc>
 801367c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d101      	bne.n	8013688 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8013684:	2300      	movs	r3, #0
 8013686:	e00b      	b.n	80136a0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8013688:	8879      	ldrh	r1, [r7, #2]
 801368a:	887a      	ldrh	r2, [r7, #2]
 801368c:	2300      	movs	r3, #0
 801368e:	9301      	str	r3, [sp, #4]
 8013690:	883b      	ldrh	r3, [r7, #0]
 8013692:	9300      	str	r3, [sp, #0]
 8013694:	460b      	mov	r3, r1
 8013696:	6879      	ldr	r1, [r7, #4]
 8013698:	68f8      	ldr	r0, [r7, #12]
 801369a:	f7ff feb7 	bl	801340c <pbuf_init_alloced_pbuf>
  return p;
 801369e:	68fb      	ldr	r3, [r7, #12]
}
 80136a0:	4618      	mov	r0, r3
 80136a2:	3710      	adds	r7, #16
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd80      	pop	{r7, pc}
 80136a8:	080205dc 	.word	0x080205dc
 80136ac:	080206e0 	.word	0x080206e0
 80136b0:	0802063c 	.word	0x0802063c

080136b4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b088      	sub	sp, #32
 80136b8:	af02      	add	r7, sp, #8
 80136ba:	607b      	str	r3, [r7, #4]
 80136bc:	4603      	mov	r3, r0
 80136be:	73fb      	strb	r3, [r7, #15]
 80136c0:	460b      	mov	r3, r1
 80136c2:	81bb      	strh	r3, [r7, #12]
 80136c4:	4613      	mov	r3, r2
 80136c6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80136c8:	7bfb      	ldrb	r3, [r7, #15]
 80136ca:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80136cc:	8a7b      	ldrh	r3, [r7, #18]
 80136ce:	3303      	adds	r3, #3
 80136d0:	f023 0203 	bic.w	r2, r3, #3
 80136d4:	89bb      	ldrh	r3, [r7, #12]
 80136d6:	441a      	add	r2, r3
 80136d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80136da:	429a      	cmp	r2, r3
 80136dc:	d901      	bls.n	80136e2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80136de:	2300      	movs	r3, #0
 80136e0:	e018      	b.n	8013714 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80136e2:	6a3b      	ldr	r3, [r7, #32]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d007      	beq.n	80136f8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80136e8:	8a7b      	ldrh	r3, [r7, #18]
 80136ea:	3303      	adds	r3, #3
 80136ec:	f023 0303 	bic.w	r3, r3, #3
 80136f0:	6a3a      	ldr	r2, [r7, #32]
 80136f2:	4413      	add	r3, r2
 80136f4:	617b      	str	r3, [r7, #20]
 80136f6:	e001      	b.n	80136fc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80136f8:	2300      	movs	r3, #0
 80136fa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80136fc:	6878      	ldr	r0, [r7, #4]
 80136fe:	89b9      	ldrh	r1, [r7, #12]
 8013700:	89ba      	ldrh	r2, [r7, #12]
 8013702:	2302      	movs	r3, #2
 8013704:	9301      	str	r3, [sp, #4]
 8013706:	897b      	ldrh	r3, [r7, #10]
 8013708:	9300      	str	r3, [sp, #0]
 801370a:	460b      	mov	r3, r1
 801370c:	6979      	ldr	r1, [r7, #20]
 801370e:	f7ff fe7d 	bl	801340c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8013712:	687b      	ldr	r3, [r7, #4]
}
 8013714:	4618      	mov	r0, r3
 8013716:	3718      	adds	r7, #24
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}

0801371c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b084      	sub	sp, #16
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
 8013724:	460b      	mov	r3, r1
 8013726:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d106      	bne.n	801373c <pbuf_realloc+0x20>
 801372e:	4b3a      	ldr	r3, [pc, #232]	@ (8013818 <pbuf_realloc+0xfc>)
 8013730:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8013734:	4939      	ldr	r1, [pc, #228]	@ (801381c <pbuf_realloc+0x100>)
 8013736:	483a      	ldr	r0, [pc, #232]	@ (8013820 <pbuf_realloc+0x104>)
 8013738:	f00a fd08 	bl	801e14c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	891b      	ldrh	r3, [r3, #8]
 8013740:	887a      	ldrh	r2, [r7, #2]
 8013742:	429a      	cmp	r2, r3
 8013744:	d263      	bcs.n	801380e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	891a      	ldrh	r2, [r3, #8]
 801374a:	887b      	ldrh	r3, [r7, #2]
 801374c:	1ad3      	subs	r3, r2, r3
 801374e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8013750:	887b      	ldrh	r3, [r7, #2]
 8013752:	817b      	strh	r3, [r7, #10]
  q = p;
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8013758:	e018      	b.n	801378c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	895b      	ldrh	r3, [r3, #10]
 801375e:	897a      	ldrh	r2, [r7, #10]
 8013760:	1ad3      	subs	r3, r2, r3
 8013762:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	891a      	ldrh	r2, [r3, #8]
 8013768:	893b      	ldrh	r3, [r7, #8]
 801376a:	1ad3      	subs	r3, r2, r3
 801376c:	b29a      	uxth	r2, r3
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d106      	bne.n	801378c <pbuf_realloc+0x70>
 801377e:	4b26      	ldr	r3, [pc, #152]	@ (8013818 <pbuf_realloc+0xfc>)
 8013780:	f240 12af 	movw	r2, #431	@ 0x1af
 8013784:	4927      	ldr	r1, [pc, #156]	@ (8013824 <pbuf_realloc+0x108>)
 8013786:	4826      	ldr	r0, [pc, #152]	@ (8013820 <pbuf_realloc+0x104>)
 8013788:	f00a fce0 	bl	801e14c <iprintf>
  while (rem_len > q->len) {
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	895b      	ldrh	r3, [r3, #10]
 8013790:	897a      	ldrh	r2, [r7, #10]
 8013792:	429a      	cmp	r2, r3
 8013794:	d8e1      	bhi.n	801375a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	7b1b      	ldrb	r3, [r3, #12]
 801379a:	f003 030f 	and.w	r3, r3, #15
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d121      	bne.n	80137e6 <pbuf_realloc+0xca>
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	895b      	ldrh	r3, [r3, #10]
 80137a6:	897a      	ldrh	r2, [r7, #10]
 80137a8:	429a      	cmp	r2, r3
 80137aa:	d01c      	beq.n	80137e6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	7b5b      	ldrb	r3, [r3, #13]
 80137b0:	f003 0302 	and.w	r3, r3, #2
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d116      	bne.n	80137e6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	685a      	ldr	r2, [r3, #4]
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	1ad3      	subs	r3, r2, r3
 80137c0:	b29a      	uxth	r2, r3
 80137c2:	897b      	ldrh	r3, [r7, #10]
 80137c4:	4413      	add	r3, r2
 80137c6:	b29b      	uxth	r3, r3
 80137c8:	4619      	mov	r1, r3
 80137ca:	68f8      	ldr	r0, [r7, #12]
 80137cc:	f7fe ff64 	bl	8012698 <mem_trim>
 80137d0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d106      	bne.n	80137e6 <pbuf_realloc+0xca>
 80137d8:	4b0f      	ldr	r3, [pc, #60]	@ (8013818 <pbuf_realloc+0xfc>)
 80137da:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80137de:	4912      	ldr	r1, [pc, #72]	@ (8013828 <pbuf_realloc+0x10c>)
 80137e0:	480f      	ldr	r0, [pc, #60]	@ (8013820 <pbuf_realloc+0x104>)
 80137e2:	f00a fcb3 	bl	801e14c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	897a      	ldrh	r2, [r7, #10]
 80137ea:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	895a      	ldrh	r2, [r3, #10]
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d004      	beq.n	8013806 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	4618      	mov	r0, r3
 8013802:	f000 f911 	bl	8013a28 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	2200      	movs	r2, #0
 801380a:	601a      	str	r2, [r3, #0]
 801380c:	e000      	b.n	8013810 <pbuf_realloc+0xf4>
    return;
 801380e:	bf00      	nop

}
 8013810:	3710      	adds	r7, #16
 8013812:	46bd      	mov	sp, r7
 8013814:	bd80      	pop	{r7, pc}
 8013816:	bf00      	nop
 8013818:	080205dc 	.word	0x080205dc
 801381c:	080206f4 	.word	0x080206f4
 8013820:	0802063c 	.word	0x0802063c
 8013824:	0802070c 	.word	0x0802070c
 8013828:	08020724 	.word	0x08020724

0801382c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b086      	sub	sp, #24
 8013830:	af00      	add	r7, sp, #0
 8013832:	60f8      	str	r0, [r7, #12]
 8013834:	60b9      	str	r1, [r7, #8]
 8013836:	4613      	mov	r3, r2
 8013838:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d106      	bne.n	801384e <pbuf_add_header_impl+0x22>
 8013840:	4b2b      	ldr	r3, [pc, #172]	@ (80138f0 <pbuf_add_header_impl+0xc4>)
 8013842:	f240 12df 	movw	r2, #479	@ 0x1df
 8013846:	492b      	ldr	r1, [pc, #172]	@ (80138f4 <pbuf_add_header_impl+0xc8>)
 8013848:	482b      	ldr	r0, [pc, #172]	@ (80138f8 <pbuf_add_header_impl+0xcc>)
 801384a:	f00a fc7f 	bl	801e14c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d003      	beq.n	801385c <pbuf_add_header_impl+0x30>
 8013854:	68bb      	ldr	r3, [r7, #8]
 8013856:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801385a:	d301      	bcc.n	8013860 <pbuf_add_header_impl+0x34>
    return 1;
 801385c:	2301      	movs	r3, #1
 801385e:	e043      	b.n	80138e8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8013860:	68bb      	ldr	r3, [r7, #8]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d101      	bne.n	801386a <pbuf_add_header_impl+0x3e>
    return 0;
 8013866:	2300      	movs	r3, #0
 8013868:	e03e      	b.n	80138e8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801386a:	68bb      	ldr	r3, [r7, #8]
 801386c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	891a      	ldrh	r2, [r3, #8]
 8013872:	8a7b      	ldrh	r3, [r7, #18]
 8013874:	4413      	add	r3, r2
 8013876:	b29b      	uxth	r3, r3
 8013878:	8a7a      	ldrh	r2, [r7, #18]
 801387a:	429a      	cmp	r2, r3
 801387c:	d901      	bls.n	8013882 <pbuf_add_header_impl+0x56>
    return 1;
 801387e:	2301      	movs	r3, #1
 8013880:	e032      	b.n	80138e8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	7b1b      	ldrb	r3, [r3, #12]
 8013886:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8013888:	8a3b      	ldrh	r3, [r7, #16]
 801388a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801388e:	2b00      	cmp	r3, #0
 8013890:	d00c      	beq.n	80138ac <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	685a      	ldr	r2, [r3, #4]
 8013896:	68bb      	ldr	r3, [r7, #8]
 8013898:	425b      	negs	r3, r3
 801389a:	4413      	add	r3, r2
 801389c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	3310      	adds	r3, #16
 80138a2:	697a      	ldr	r2, [r7, #20]
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d20d      	bcs.n	80138c4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80138a8:	2301      	movs	r3, #1
 80138aa:	e01d      	b.n	80138e8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80138ac:	79fb      	ldrb	r3, [r7, #7]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d006      	beq.n	80138c0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	685a      	ldr	r2, [r3, #4]
 80138b6:	68bb      	ldr	r3, [r7, #8]
 80138b8:	425b      	negs	r3, r3
 80138ba:	4413      	add	r3, r2
 80138bc:	617b      	str	r3, [r7, #20]
 80138be:	e001      	b.n	80138c4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80138c0:	2301      	movs	r3, #1
 80138c2:	e011      	b.n	80138e8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	697a      	ldr	r2, [r7, #20]
 80138c8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	895a      	ldrh	r2, [r3, #10]
 80138ce:	8a7b      	ldrh	r3, [r7, #18]
 80138d0:	4413      	add	r3, r2
 80138d2:	b29a      	uxth	r2, r3
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	891a      	ldrh	r2, [r3, #8]
 80138dc:	8a7b      	ldrh	r3, [r7, #18]
 80138de:	4413      	add	r3, r2
 80138e0:	b29a      	uxth	r2, r3
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	811a      	strh	r2, [r3, #8]


  return 0;
 80138e6:	2300      	movs	r3, #0
}
 80138e8:	4618      	mov	r0, r3
 80138ea:	3718      	adds	r7, #24
 80138ec:	46bd      	mov	sp, r7
 80138ee:	bd80      	pop	{r7, pc}
 80138f0:	080205dc 	.word	0x080205dc
 80138f4:	08020740 	.word	0x08020740
 80138f8:	0802063c 	.word	0x0802063c

080138fc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b082      	sub	sp, #8
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
 8013904:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8013906:	2200      	movs	r2, #0
 8013908:	6839      	ldr	r1, [r7, #0]
 801390a:	6878      	ldr	r0, [r7, #4]
 801390c:	f7ff ff8e 	bl	801382c <pbuf_add_header_impl>
 8013910:	4603      	mov	r3, r0
}
 8013912:	4618      	mov	r0, r3
 8013914:	3708      	adds	r7, #8
 8013916:	46bd      	mov	sp, r7
 8013918:	bd80      	pop	{r7, pc}
	...

0801391c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b084      	sub	sp, #16
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
 8013924:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d106      	bne.n	801393a <pbuf_remove_header+0x1e>
 801392c:	4b20      	ldr	r3, [pc, #128]	@ (80139b0 <pbuf_remove_header+0x94>)
 801392e:	f240 224b 	movw	r2, #587	@ 0x24b
 8013932:	4920      	ldr	r1, [pc, #128]	@ (80139b4 <pbuf_remove_header+0x98>)
 8013934:	4820      	ldr	r0, [pc, #128]	@ (80139b8 <pbuf_remove_header+0x9c>)
 8013936:	f00a fc09 	bl	801e14c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d003      	beq.n	8013948 <pbuf_remove_header+0x2c>
 8013940:	683b      	ldr	r3, [r7, #0]
 8013942:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013946:	d301      	bcc.n	801394c <pbuf_remove_header+0x30>
    return 1;
 8013948:	2301      	movs	r3, #1
 801394a:	e02c      	b.n	80139a6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801394c:	683b      	ldr	r3, [r7, #0]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d101      	bne.n	8013956 <pbuf_remove_header+0x3a>
    return 0;
 8013952:	2300      	movs	r3, #0
 8013954:	e027      	b.n	80139a6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8013956:	683b      	ldr	r3, [r7, #0]
 8013958:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	895b      	ldrh	r3, [r3, #10]
 801395e:	89fa      	ldrh	r2, [r7, #14]
 8013960:	429a      	cmp	r2, r3
 8013962:	d908      	bls.n	8013976 <pbuf_remove_header+0x5a>
 8013964:	4b12      	ldr	r3, [pc, #72]	@ (80139b0 <pbuf_remove_header+0x94>)
 8013966:	f240 2255 	movw	r2, #597	@ 0x255
 801396a:	4914      	ldr	r1, [pc, #80]	@ (80139bc <pbuf_remove_header+0xa0>)
 801396c:	4812      	ldr	r0, [pc, #72]	@ (80139b8 <pbuf_remove_header+0x9c>)
 801396e:	f00a fbed 	bl	801e14c <iprintf>
 8013972:	2301      	movs	r3, #1
 8013974:	e017      	b.n	80139a6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	685b      	ldr	r3, [r3, #4]
 801397a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	685a      	ldr	r2, [r3, #4]
 8013980:	683b      	ldr	r3, [r7, #0]
 8013982:	441a      	add	r2, r3
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	895a      	ldrh	r2, [r3, #10]
 801398c:	89fb      	ldrh	r3, [r7, #14]
 801398e:	1ad3      	subs	r3, r2, r3
 8013990:	b29a      	uxth	r2, r3
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	891a      	ldrh	r2, [r3, #8]
 801399a:	89fb      	ldrh	r3, [r7, #14]
 801399c:	1ad3      	subs	r3, r2, r3
 801399e:	b29a      	uxth	r2, r3
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80139a4:	2300      	movs	r3, #0
}
 80139a6:	4618      	mov	r0, r3
 80139a8:	3710      	adds	r7, #16
 80139aa:	46bd      	mov	sp, r7
 80139ac:	bd80      	pop	{r7, pc}
 80139ae:	bf00      	nop
 80139b0:	080205dc 	.word	0x080205dc
 80139b4:	08020740 	.word	0x08020740
 80139b8:	0802063c 	.word	0x0802063c
 80139bc:	0802074c 	.word	0x0802074c

080139c0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b082      	sub	sp, #8
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
 80139c8:	460b      	mov	r3, r1
 80139ca:	807b      	strh	r3, [r7, #2]
 80139cc:	4613      	mov	r3, r2
 80139ce:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80139d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	da08      	bge.n	80139ea <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80139d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80139dc:	425b      	negs	r3, r3
 80139de:	4619      	mov	r1, r3
 80139e0:	6878      	ldr	r0, [r7, #4]
 80139e2:	f7ff ff9b 	bl	801391c <pbuf_remove_header>
 80139e6:	4603      	mov	r3, r0
 80139e8:	e007      	b.n	80139fa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80139ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80139ee:	787a      	ldrb	r2, [r7, #1]
 80139f0:	4619      	mov	r1, r3
 80139f2:	6878      	ldr	r0, [r7, #4]
 80139f4:	f7ff ff1a 	bl	801382c <pbuf_add_header_impl>
 80139f8:	4603      	mov	r3, r0
  }
}
 80139fa:	4618      	mov	r0, r3
 80139fc:	3708      	adds	r7, #8
 80139fe:	46bd      	mov	sp, r7
 8013a00:	bd80      	pop	{r7, pc}

08013a02 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8013a02:	b580      	push	{r7, lr}
 8013a04:	b082      	sub	sp, #8
 8013a06:	af00      	add	r7, sp, #0
 8013a08:	6078      	str	r0, [r7, #4]
 8013a0a:	460b      	mov	r3, r1
 8013a0c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8013a0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013a12:	2201      	movs	r2, #1
 8013a14:	4619      	mov	r1, r3
 8013a16:	6878      	ldr	r0, [r7, #4]
 8013a18:	f7ff ffd2 	bl	80139c0 <pbuf_header_impl>
 8013a1c:	4603      	mov	r3, r0
}
 8013a1e:	4618      	mov	r0, r3
 8013a20:	3708      	adds	r7, #8
 8013a22:	46bd      	mov	sp, r7
 8013a24:	bd80      	pop	{r7, pc}
	...

08013a28 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b088      	sub	sp, #32
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d10b      	bne.n	8013a4e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d106      	bne.n	8013a4a <pbuf_free+0x22>
 8013a3c:	4b3b      	ldr	r3, [pc, #236]	@ (8013b2c <pbuf_free+0x104>)
 8013a3e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8013a42:	493b      	ldr	r1, [pc, #236]	@ (8013b30 <pbuf_free+0x108>)
 8013a44:	483b      	ldr	r0, [pc, #236]	@ (8013b34 <pbuf_free+0x10c>)
 8013a46:	f00a fb81 	bl	801e14c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	e069      	b.n	8013b22 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8013a4e:	2300      	movs	r3, #0
 8013a50:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8013a52:	e062      	b.n	8013b1a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8013a54:	f009 fc08 	bl	801d268 <sys_arch_protect>
 8013a58:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	7b9b      	ldrb	r3, [r3, #14]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d106      	bne.n	8013a70 <pbuf_free+0x48>
 8013a62:	4b32      	ldr	r3, [pc, #200]	@ (8013b2c <pbuf_free+0x104>)
 8013a64:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8013a68:	4933      	ldr	r1, [pc, #204]	@ (8013b38 <pbuf_free+0x110>)
 8013a6a:	4832      	ldr	r0, [pc, #200]	@ (8013b34 <pbuf_free+0x10c>)
 8013a6c:	f00a fb6e 	bl	801e14c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	7b9b      	ldrb	r3, [r3, #14]
 8013a74:	3b01      	subs	r3, #1
 8013a76:	b2da      	uxtb	r2, r3
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	739a      	strb	r2, [r3, #14]
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	7b9b      	ldrb	r3, [r3, #14]
 8013a80:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8013a82:	69b8      	ldr	r0, [r7, #24]
 8013a84:	f009 fbfe 	bl	801d284 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8013a88:	7dfb      	ldrb	r3, [r7, #23]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d143      	bne.n	8013b16 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	7b1b      	ldrb	r3, [r3, #12]
 8013a98:	f003 030f 	and.w	r3, r3, #15
 8013a9c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	7b5b      	ldrb	r3, [r3, #13]
 8013aa2:	f003 0302 	and.w	r3, r3, #2
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d011      	beq.n	8013ace <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8013aae:	68bb      	ldr	r3, [r7, #8]
 8013ab0:	691b      	ldr	r3, [r3, #16]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d106      	bne.n	8013ac4 <pbuf_free+0x9c>
 8013ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8013b2c <pbuf_free+0x104>)
 8013ab8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8013abc:	491f      	ldr	r1, [pc, #124]	@ (8013b3c <pbuf_free+0x114>)
 8013abe:	481d      	ldr	r0, [pc, #116]	@ (8013b34 <pbuf_free+0x10c>)
 8013ac0:	f00a fb44 	bl	801e14c <iprintf>
        pc->custom_free_function(p);
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	691b      	ldr	r3, [r3, #16]
 8013ac8:	6878      	ldr	r0, [r7, #4]
 8013aca:	4798      	blx	r3
 8013acc:	e01d      	b.n	8013b0a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8013ace:	7bfb      	ldrb	r3, [r7, #15]
 8013ad0:	2b02      	cmp	r3, #2
 8013ad2:	d104      	bne.n	8013ade <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8013ad4:	6879      	ldr	r1, [r7, #4]
 8013ad6:	200c      	movs	r0, #12
 8013ad8:	f7ff f902 	bl	8012ce0 <memp_free>
 8013adc:	e015      	b.n	8013b0a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8013ade:	7bfb      	ldrb	r3, [r7, #15]
 8013ae0:	2b01      	cmp	r3, #1
 8013ae2:	d104      	bne.n	8013aee <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8013ae4:	6879      	ldr	r1, [r7, #4]
 8013ae6:	200b      	movs	r0, #11
 8013ae8:	f7ff f8fa 	bl	8012ce0 <memp_free>
 8013aec:	e00d      	b.n	8013b0a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8013aee:	7bfb      	ldrb	r3, [r7, #15]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d103      	bne.n	8013afc <pbuf_free+0xd4>
          mem_free(p);
 8013af4:	6878      	ldr	r0, [r7, #4]
 8013af6:	f7fe fd3f 	bl	8012578 <mem_free>
 8013afa:	e006      	b.n	8013b0a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8013afc:	4b0b      	ldr	r3, [pc, #44]	@ (8013b2c <pbuf_free+0x104>)
 8013afe:	f240 320f 	movw	r2, #783	@ 0x30f
 8013b02:	490f      	ldr	r1, [pc, #60]	@ (8013b40 <pbuf_free+0x118>)
 8013b04:	480b      	ldr	r0, [pc, #44]	@ (8013b34 <pbuf_free+0x10c>)
 8013b06:	f00a fb21 	bl	801e14c <iprintf>
        }
      }
      count++;
 8013b0a:	7ffb      	ldrb	r3, [r7, #31]
 8013b0c:	3301      	adds	r3, #1
 8013b0e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8013b10:	693b      	ldr	r3, [r7, #16]
 8013b12:	607b      	str	r3, [r7, #4]
 8013b14:	e001      	b.n	8013b1a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8013b16:	2300      	movs	r3, #0
 8013b18:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d199      	bne.n	8013a54 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8013b20:	7ffb      	ldrb	r3, [r7, #31]
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	3720      	adds	r7, #32
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bd80      	pop	{r7, pc}
 8013b2a:	bf00      	nop
 8013b2c:	080205dc 	.word	0x080205dc
 8013b30:	08020740 	.word	0x08020740
 8013b34:	0802063c 	.word	0x0802063c
 8013b38:	0802076c 	.word	0x0802076c
 8013b3c:	08020784 	.word	0x08020784
 8013b40:	080207a8 	.word	0x080207a8

08013b44 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8013b44:	b480      	push	{r7}
 8013b46:	b085      	sub	sp, #20
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8013b50:	e005      	b.n	8013b5e <pbuf_clen+0x1a>
    ++len;
 8013b52:	89fb      	ldrh	r3, [r7, #14]
 8013b54:	3301      	adds	r3, #1
 8013b56:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d1f6      	bne.n	8013b52 <pbuf_clen+0xe>
  }
  return len;
 8013b64:	89fb      	ldrh	r3, [r7, #14]
}
 8013b66:	4618      	mov	r0, r3
 8013b68:	3714      	adds	r7, #20
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b70:	4770      	bx	lr
	...

08013b74 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b084      	sub	sp, #16
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d016      	beq.n	8013bb0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8013b82:	f009 fb71 	bl	801d268 <sys_arch_protect>
 8013b86:	60f8      	str	r0, [r7, #12]
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	7b9b      	ldrb	r3, [r3, #14]
 8013b8c:	3301      	adds	r3, #1
 8013b8e:	b2da      	uxtb	r2, r3
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	739a      	strb	r2, [r3, #14]
 8013b94:	68f8      	ldr	r0, [r7, #12]
 8013b96:	f009 fb75 	bl	801d284 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	7b9b      	ldrb	r3, [r3, #14]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d106      	bne.n	8013bb0 <pbuf_ref+0x3c>
 8013ba2:	4b05      	ldr	r3, [pc, #20]	@ (8013bb8 <pbuf_ref+0x44>)
 8013ba4:	f240 3242 	movw	r2, #834	@ 0x342
 8013ba8:	4904      	ldr	r1, [pc, #16]	@ (8013bbc <pbuf_ref+0x48>)
 8013baa:	4805      	ldr	r0, [pc, #20]	@ (8013bc0 <pbuf_ref+0x4c>)
 8013bac:	f00a face 	bl	801e14c <iprintf>
  }
}
 8013bb0:	bf00      	nop
 8013bb2:	3710      	adds	r7, #16
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	bd80      	pop	{r7, pc}
 8013bb8:	080205dc 	.word	0x080205dc
 8013bbc:	080207bc 	.word	0x080207bc
 8013bc0:	0802063c 	.word	0x0802063c

08013bc4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b084      	sub	sp, #16
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
 8013bcc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d002      	beq.n	8013bda <pbuf_cat+0x16>
 8013bd4:	683b      	ldr	r3, [r7, #0]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d107      	bne.n	8013bea <pbuf_cat+0x26>
 8013bda:	4b20      	ldr	r3, [pc, #128]	@ (8013c5c <pbuf_cat+0x98>)
 8013bdc:	f240 3259 	movw	r2, #857	@ 0x359
 8013be0:	491f      	ldr	r1, [pc, #124]	@ (8013c60 <pbuf_cat+0x9c>)
 8013be2:	4820      	ldr	r0, [pc, #128]	@ (8013c64 <pbuf_cat+0xa0>)
 8013be4:	f00a fab2 	bl	801e14c <iprintf>
 8013be8:	e034      	b.n	8013c54 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	60fb      	str	r3, [r7, #12]
 8013bee:	e00a      	b.n	8013c06 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	891a      	ldrh	r2, [r3, #8]
 8013bf4:	683b      	ldr	r3, [r7, #0]
 8013bf6:	891b      	ldrh	r3, [r3, #8]
 8013bf8:	4413      	add	r3, r2
 8013bfa:	b29a      	uxth	r2, r3
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	60fb      	str	r3, [r7, #12]
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d1f0      	bne.n	8013bf0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	891a      	ldrh	r2, [r3, #8]
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	895b      	ldrh	r3, [r3, #10]
 8013c16:	429a      	cmp	r2, r3
 8013c18:	d006      	beq.n	8013c28 <pbuf_cat+0x64>
 8013c1a:	4b10      	ldr	r3, [pc, #64]	@ (8013c5c <pbuf_cat+0x98>)
 8013c1c:	f240 3262 	movw	r2, #866	@ 0x362
 8013c20:	4911      	ldr	r1, [pc, #68]	@ (8013c68 <pbuf_cat+0xa4>)
 8013c22:	4810      	ldr	r0, [pc, #64]	@ (8013c64 <pbuf_cat+0xa0>)
 8013c24:	f00a fa92 	bl	801e14c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d006      	beq.n	8013c3e <pbuf_cat+0x7a>
 8013c30:	4b0a      	ldr	r3, [pc, #40]	@ (8013c5c <pbuf_cat+0x98>)
 8013c32:	f240 3263 	movw	r2, #867	@ 0x363
 8013c36:	490d      	ldr	r1, [pc, #52]	@ (8013c6c <pbuf_cat+0xa8>)
 8013c38:	480a      	ldr	r0, [pc, #40]	@ (8013c64 <pbuf_cat+0xa0>)
 8013c3a:	f00a fa87 	bl	801e14c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	891a      	ldrh	r2, [r3, #8]
 8013c42:	683b      	ldr	r3, [r7, #0]
 8013c44:	891b      	ldrh	r3, [r3, #8]
 8013c46:	4413      	add	r3, r2
 8013c48:	b29a      	uxth	r2, r3
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	683a      	ldr	r2, [r7, #0]
 8013c52:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8013c54:	3710      	adds	r7, #16
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}
 8013c5a:	bf00      	nop
 8013c5c:	080205dc 	.word	0x080205dc
 8013c60:	080207d0 	.word	0x080207d0
 8013c64:	0802063c 	.word	0x0802063c
 8013c68:	08020808 	.word	0x08020808
 8013c6c:	08020838 	.word	0x08020838

08013c70 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b086      	sub	sp, #24
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	617b      	str	r3, [r7, #20]
 8013c7e:	2300      	movs	r3, #0
 8013c80:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d008      	beq.n	8013c9a <pbuf_copy+0x2a>
 8013c88:	683b      	ldr	r3, [r7, #0]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d005      	beq.n	8013c9a <pbuf_copy+0x2a>
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	891a      	ldrh	r2, [r3, #8]
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	891b      	ldrh	r3, [r3, #8]
 8013c96:	429a      	cmp	r2, r3
 8013c98:	d209      	bcs.n	8013cae <pbuf_copy+0x3e>
 8013c9a:	4b57      	ldr	r3, [pc, #348]	@ (8013df8 <pbuf_copy+0x188>)
 8013c9c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8013ca0:	4956      	ldr	r1, [pc, #344]	@ (8013dfc <pbuf_copy+0x18c>)
 8013ca2:	4857      	ldr	r0, [pc, #348]	@ (8013e00 <pbuf_copy+0x190>)
 8013ca4:	f00a fa52 	bl	801e14c <iprintf>
 8013ca8:	f06f 030f 	mvn.w	r3, #15
 8013cac:	e09f      	b.n	8013dee <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	895b      	ldrh	r3, [r3, #10]
 8013cb2:	461a      	mov	r2, r3
 8013cb4:	697b      	ldr	r3, [r7, #20]
 8013cb6:	1ad2      	subs	r2, r2, r3
 8013cb8:	683b      	ldr	r3, [r7, #0]
 8013cba:	895b      	ldrh	r3, [r3, #10]
 8013cbc:	4619      	mov	r1, r3
 8013cbe:	693b      	ldr	r3, [r7, #16]
 8013cc0:	1acb      	subs	r3, r1, r3
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d306      	bcc.n	8013cd4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8013cc6:	683b      	ldr	r3, [r7, #0]
 8013cc8:	895b      	ldrh	r3, [r3, #10]
 8013cca:	461a      	mov	r2, r3
 8013ccc:	693b      	ldr	r3, [r7, #16]
 8013cce:	1ad3      	subs	r3, r2, r3
 8013cd0:	60fb      	str	r3, [r7, #12]
 8013cd2:	e005      	b.n	8013ce0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	895b      	ldrh	r3, [r3, #10]
 8013cd8:	461a      	mov	r2, r3
 8013cda:	697b      	ldr	r3, [r7, #20]
 8013cdc:	1ad3      	subs	r3, r2, r3
 8013cde:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	685a      	ldr	r2, [r3, #4]
 8013ce4:	697b      	ldr	r3, [r7, #20]
 8013ce6:	18d0      	adds	r0, r2, r3
 8013ce8:	683b      	ldr	r3, [r7, #0]
 8013cea:	685a      	ldr	r2, [r3, #4]
 8013cec:	693b      	ldr	r3, [r7, #16]
 8013cee:	4413      	add	r3, r2
 8013cf0:	68fa      	ldr	r2, [r7, #12]
 8013cf2:	4619      	mov	r1, r3
 8013cf4:	f00a fbc1 	bl	801e47a <memcpy>
    offset_to += len;
 8013cf8:	697a      	ldr	r2, [r7, #20]
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	4413      	add	r3, r2
 8013cfe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8013d00:	693a      	ldr	r2, [r7, #16]
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	4413      	add	r3, r2
 8013d06:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	895b      	ldrh	r3, [r3, #10]
 8013d0c:	461a      	mov	r2, r3
 8013d0e:	697b      	ldr	r3, [r7, #20]
 8013d10:	4293      	cmp	r3, r2
 8013d12:	d906      	bls.n	8013d22 <pbuf_copy+0xb2>
 8013d14:	4b38      	ldr	r3, [pc, #224]	@ (8013df8 <pbuf_copy+0x188>)
 8013d16:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8013d1a:	493a      	ldr	r1, [pc, #232]	@ (8013e04 <pbuf_copy+0x194>)
 8013d1c:	4838      	ldr	r0, [pc, #224]	@ (8013e00 <pbuf_copy+0x190>)
 8013d1e:	f00a fa15 	bl	801e14c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8013d22:	683b      	ldr	r3, [r7, #0]
 8013d24:	895b      	ldrh	r3, [r3, #10]
 8013d26:	461a      	mov	r2, r3
 8013d28:	693b      	ldr	r3, [r7, #16]
 8013d2a:	4293      	cmp	r3, r2
 8013d2c:	d906      	bls.n	8013d3c <pbuf_copy+0xcc>
 8013d2e:	4b32      	ldr	r3, [pc, #200]	@ (8013df8 <pbuf_copy+0x188>)
 8013d30:	f240 32da 	movw	r2, #986	@ 0x3da
 8013d34:	4934      	ldr	r1, [pc, #208]	@ (8013e08 <pbuf_copy+0x198>)
 8013d36:	4832      	ldr	r0, [pc, #200]	@ (8013e00 <pbuf_copy+0x190>)
 8013d38:	f00a fa08 	bl	801e14c <iprintf>
    if (offset_from >= p_from->len) {
 8013d3c:	683b      	ldr	r3, [r7, #0]
 8013d3e:	895b      	ldrh	r3, [r3, #10]
 8013d40:	461a      	mov	r2, r3
 8013d42:	693b      	ldr	r3, [r7, #16]
 8013d44:	4293      	cmp	r3, r2
 8013d46:	d304      	bcc.n	8013d52 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8013d48:	2300      	movs	r3, #0
 8013d4a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8013d4c:	683b      	ldr	r3, [r7, #0]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	895b      	ldrh	r3, [r3, #10]
 8013d56:	461a      	mov	r2, r3
 8013d58:	697b      	ldr	r3, [r7, #20]
 8013d5a:	4293      	cmp	r3, r2
 8013d5c:	d114      	bne.n	8013d88 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d10c      	bne.n	8013d88 <pbuf_copy+0x118>
 8013d6e:	683b      	ldr	r3, [r7, #0]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d009      	beq.n	8013d88 <pbuf_copy+0x118>
 8013d74:	4b20      	ldr	r3, [pc, #128]	@ (8013df8 <pbuf_copy+0x188>)
 8013d76:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8013d7a:	4924      	ldr	r1, [pc, #144]	@ (8013e0c <pbuf_copy+0x19c>)
 8013d7c:	4820      	ldr	r0, [pc, #128]	@ (8013e00 <pbuf_copy+0x190>)
 8013d7e:	f00a f9e5 	bl	801e14c <iprintf>
 8013d82:	f06f 030f 	mvn.w	r3, #15
 8013d86:	e032      	b.n	8013dee <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8013d88:	683b      	ldr	r3, [r7, #0]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d013      	beq.n	8013db6 <pbuf_copy+0x146>
 8013d8e:	683b      	ldr	r3, [r7, #0]
 8013d90:	895a      	ldrh	r2, [r3, #10]
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	891b      	ldrh	r3, [r3, #8]
 8013d96:	429a      	cmp	r2, r3
 8013d98:	d10d      	bne.n	8013db6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d009      	beq.n	8013db6 <pbuf_copy+0x146>
 8013da2:	4b15      	ldr	r3, [pc, #84]	@ (8013df8 <pbuf_copy+0x188>)
 8013da4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8013da8:	4919      	ldr	r1, [pc, #100]	@ (8013e10 <pbuf_copy+0x1a0>)
 8013daa:	4815      	ldr	r0, [pc, #84]	@ (8013e00 <pbuf_copy+0x190>)
 8013dac:	f00a f9ce 	bl	801e14c <iprintf>
 8013db0:	f06f 0305 	mvn.w	r3, #5
 8013db4:	e01b      	b.n	8013dee <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d013      	beq.n	8013de4 <pbuf_copy+0x174>
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	895a      	ldrh	r2, [r3, #10]
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	891b      	ldrh	r3, [r3, #8]
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	d10d      	bne.n	8013de4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d009      	beq.n	8013de4 <pbuf_copy+0x174>
 8013dd0:	4b09      	ldr	r3, [pc, #36]	@ (8013df8 <pbuf_copy+0x188>)
 8013dd2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8013dd6:	490e      	ldr	r1, [pc, #56]	@ (8013e10 <pbuf_copy+0x1a0>)
 8013dd8:	4809      	ldr	r0, [pc, #36]	@ (8013e00 <pbuf_copy+0x190>)
 8013dda:	f00a f9b7 	bl	801e14c <iprintf>
 8013dde:	f06f 0305 	mvn.w	r3, #5
 8013de2:	e004      	b.n	8013dee <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8013de4:	683b      	ldr	r3, [r7, #0]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	f47f af61 	bne.w	8013cae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8013dec:	2300      	movs	r3, #0
}
 8013dee:	4618      	mov	r0, r3
 8013df0:	3718      	adds	r7, #24
 8013df2:	46bd      	mov	sp, r7
 8013df4:	bd80      	pop	{r7, pc}
 8013df6:	bf00      	nop
 8013df8:	080205dc 	.word	0x080205dc
 8013dfc:	08020884 	.word	0x08020884
 8013e00:	0802063c 	.word	0x0802063c
 8013e04:	080208b4 	.word	0x080208b4
 8013e08:	080208cc 	.word	0x080208cc
 8013e0c:	080208e8 	.word	0x080208e8
 8013e10:	080208f8 	.word	0x080208f8

08013e14 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b088      	sub	sp, #32
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	60f8      	str	r0, [r7, #12]
 8013e1c:	60b9      	str	r1, [r7, #8]
 8013e1e:	4611      	mov	r1, r2
 8013e20:	461a      	mov	r2, r3
 8013e22:	460b      	mov	r3, r1
 8013e24:	80fb      	strh	r3, [r7, #6]
 8013e26:	4613      	mov	r3, r2
 8013e28:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d108      	bne.n	8013e4a <pbuf_copy_partial+0x36>
 8013e38:	4b2b      	ldr	r3, [pc, #172]	@ (8013ee8 <pbuf_copy_partial+0xd4>)
 8013e3a:	f240 420a 	movw	r2, #1034	@ 0x40a
 8013e3e:	492b      	ldr	r1, [pc, #172]	@ (8013eec <pbuf_copy_partial+0xd8>)
 8013e40:	482b      	ldr	r0, [pc, #172]	@ (8013ef0 <pbuf_copy_partial+0xdc>)
 8013e42:	f00a f983 	bl	801e14c <iprintf>
 8013e46:	2300      	movs	r3, #0
 8013e48:	e04a      	b.n	8013ee0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8013e4a:	68bb      	ldr	r3, [r7, #8]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d108      	bne.n	8013e62 <pbuf_copy_partial+0x4e>
 8013e50:	4b25      	ldr	r3, [pc, #148]	@ (8013ee8 <pbuf_copy_partial+0xd4>)
 8013e52:	f240 420b 	movw	r2, #1035	@ 0x40b
 8013e56:	4927      	ldr	r1, [pc, #156]	@ (8013ef4 <pbuf_copy_partial+0xe0>)
 8013e58:	4825      	ldr	r0, [pc, #148]	@ (8013ef0 <pbuf_copy_partial+0xdc>)
 8013e5a:	f00a f977 	bl	801e14c <iprintf>
 8013e5e:	2300      	movs	r3, #0
 8013e60:	e03e      	b.n	8013ee0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	61fb      	str	r3, [r7, #28]
 8013e66:	e034      	b.n	8013ed2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8013e68:	88bb      	ldrh	r3, [r7, #4]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d00a      	beq.n	8013e84 <pbuf_copy_partial+0x70>
 8013e6e:	69fb      	ldr	r3, [r7, #28]
 8013e70:	895b      	ldrh	r3, [r3, #10]
 8013e72:	88ba      	ldrh	r2, [r7, #4]
 8013e74:	429a      	cmp	r2, r3
 8013e76:	d305      	bcc.n	8013e84 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8013e78:	69fb      	ldr	r3, [r7, #28]
 8013e7a:	895b      	ldrh	r3, [r3, #10]
 8013e7c:	88ba      	ldrh	r2, [r7, #4]
 8013e7e:	1ad3      	subs	r3, r2, r3
 8013e80:	80bb      	strh	r3, [r7, #4]
 8013e82:	e023      	b.n	8013ecc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8013e84:	69fb      	ldr	r3, [r7, #28]
 8013e86:	895a      	ldrh	r2, [r3, #10]
 8013e88:	88bb      	ldrh	r3, [r7, #4]
 8013e8a:	1ad3      	subs	r3, r2, r3
 8013e8c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8013e8e:	8b3a      	ldrh	r2, [r7, #24]
 8013e90:	88fb      	ldrh	r3, [r7, #6]
 8013e92:	429a      	cmp	r2, r3
 8013e94:	d901      	bls.n	8013e9a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8013e96:	88fb      	ldrh	r3, [r7, #6]
 8013e98:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8013e9a:	8b7b      	ldrh	r3, [r7, #26]
 8013e9c:	68ba      	ldr	r2, [r7, #8]
 8013e9e:	18d0      	adds	r0, r2, r3
 8013ea0:	69fb      	ldr	r3, [r7, #28]
 8013ea2:	685a      	ldr	r2, [r3, #4]
 8013ea4:	88bb      	ldrh	r3, [r7, #4]
 8013ea6:	4413      	add	r3, r2
 8013ea8:	8b3a      	ldrh	r2, [r7, #24]
 8013eaa:	4619      	mov	r1, r3
 8013eac:	f00a fae5 	bl	801e47a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8013eb0:	8afa      	ldrh	r2, [r7, #22]
 8013eb2:	8b3b      	ldrh	r3, [r7, #24]
 8013eb4:	4413      	add	r3, r2
 8013eb6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8013eb8:	8b7a      	ldrh	r2, [r7, #26]
 8013eba:	8b3b      	ldrh	r3, [r7, #24]
 8013ebc:	4413      	add	r3, r2
 8013ebe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8013ec0:	88fa      	ldrh	r2, [r7, #6]
 8013ec2:	8b3b      	ldrh	r3, [r7, #24]
 8013ec4:	1ad3      	subs	r3, r2, r3
 8013ec6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8013ec8:	2300      	movs	r3, #0
 8013eca:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013ecc:	69fb      	ldr	r3, [r7, #28]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	61fb      	str	r3, [r7, #28]
 8013ed2:	88fb      	ldrh	r3, [r7, #6]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d002      	beq.n	8013ede <pbuf_copy_partial+0xca>
 8013ed8:	69fb      	ldr	r3, [r7, #28]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d1c4      	bne.n	8013e68 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8013ede:	8afb      	ldrh	r3, [r7, #22]
}
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	3720      	adds	r7, #32
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd80      	pop	{r7, pc}
 8013ee8:	080205dc 	.word	0x080205dc
 8013eec:	08020924 	.word	0x08020924
 8013ef0:	0802063c 	.word	0x0802063c
 8013ef4:	08020944 	.word	0x08020944

08013ef8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b084      	sub	sp, #16
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	4603      	mov	r3, r0
 8013f00:	603a      	str	r2, [r7, #0]
 8013f02:	71fb      	strb	r3, [r7, #7]
 8013f04:	460b      	mov	r3, r1
 8013f06:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8013f08:	683b      	ldr	r3, [r7, #0]
 8013f0a:	8919      	ldrh	r1, [r3, #8]
 8013f0c:	88ba      	ldrh	r2, [r7, #4]
 8013f0e:	79fb      	ldrb	r3, [r7, #7]
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7ff faa5 	bl	8013460 <pbuf_alloc>
 8013f16:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d101      	bne.n	8013f22 <pbuf_clone+0x2a>
    return NULL;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	e011      	b.n	8013f46 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8013f22:	6839      	ldr	r1, [r7, #0]
 8013f24:	68f8      	ldr	r0, [r7, #12]
 8013f26:	f7ff fea3 	bl	8013c70 <pbuf_copy>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8013f2e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d006      	beq.n	8013f44 <pbuf_clone+0x4c>
 8013f36:	4b06      	ldr	r3, [pc, #24]	@ (8013f50 <pbuf_clone+0x58>)
 8013f38:	f240 5224 	movw	r2, #1316	@ 0x524
 8013f3c:	4905      	ldr	r1, [pc, #20]	@ (8013f54 <pbuf_clone+0x5c>)
 8013f3e:	4806      	ldr	r0, [pc, #24]	@ (8013f58 <pbuf_clone+0x60>)
 8013f40:	f00a f904 	bl	801e14c <iprintf>
  return q;
 8013f44:	68fb      	ldr	r3, [r7, #12]
}
 8013f46:	4618      	mov	r0, r3
 8013f48:	3710      	adds	r7, #16
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	bd80      	pop	{r7, pc}
 8013f4e:	bf00      	nop
 8013f50:	080205dc 	.word	0x080205dc
 8013f54:	08020a50 	.word	0x08020a50
 8013f58:	0802063c 	.word	0x0802063c

08013f5c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013f60:	f009 fff4 	bl	801df4c <rand>
 8013f64:	4603      	mov	r3, r0
 8013f66:	b29b      	uxth	r3, r3
 8013f68:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013f6c:	b29b      	uxth	r3, r3
 8013f6e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013f72:	b29a      	uxth	r2, r3
 8013f74:	4b01      	ldr	r3, [pc, #4]	@ (8013f7c <tcp_init+0x20>)
 8013f76:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013f78:	bf00      	nop
 8013f7a:	bd80      	pop	{r7, pc}
 8013f7c:	200000b8 	.word	0x200000b8

08013f80 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b082      	sub	sp, #8
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	7d1b      	ldrb	r3, [r3, #20]
 8013f8c:	2b01      	cmp	r3, #1
 8013f8e:	d105      	bne.n	8013f9c <tcp_free+0x1c>
 8013f90:	4b06      	ldr	r3, [pc, #24]	@ (8013fac <tcp_free+0x2c>)
 8013f92:	22d4      	movs	r2, #212	@ 0xd4
 8013f94:	4906      	ldr	r1, [pc, #24]	@ (8013fb0 <tcp_free+0x30>)
 8013f96:	4807      	ldr	r0, [pc, #28]	@ (8013fb4 <tcp_free+0x34>)
 8013f98:	f00a f8d8 	bl	801e14c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8013f9c:	6879      	ldr	r1, [r7, #4]
 8013f9e:	2001      	movs	r0, #1
 8013fa0:	f7fe fe9e 	bl	8012ce0 <memp_free>
}
 8013fa4:	bf00      	nop
 8013fa6:	3708      	adds	r7, #8
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	bd80      	pop	{r7, pc}
 8013fac:	08020adc 	.word	0x08020adc
 8013fb0:	08020b0c 	.word	0x08020b0c
 8013fb4:	08020b20 	.word	0x08020b20

08013fb8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b082      	sub	sp, #8
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	7d1b      	ldrb	r3, [r3, #20]
 8013fc4:	2b01      	cmp	r3, #1
 8013fc6:	d105      	bne.n	8013fd4 <tcp_free_listen+0x1c>
 8013fc8:	4b06      	ldr	r3, [pc, #24]	@ (8013fe4 <tcp_free_listen+0x2c>)
 8013fca:	22df      	movs	r2, #223	@ 0xdf
 8013fcc:	4906      	ldr	r1, [pc, #24]	@ (8013fe8 <tcp_free_listen+0x30>)
 8013fce:	4807      	ldr	r0, [pc, #28]	@ (8013fec <tcp_free_listen+0x34>)
 8013fd0:	f00a f8bc 	bl	801e14c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8013fd4:	6879      	ldr	r1, [r7, #4]
 8013fd6:	2002      	movs	r0, #2
 8013fd8:	f7fe fe82 	bl	8012ce0 <memp_free>
}
 8013fdc:	bf00      	nop
 8013fde:	3708      	adds	r7, #8
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}
 8013fe4:	08020adc 	.word	0x08020adc
 8013fe8:	08020b48 	.word	0x08020b48
 8013fec:	08020b20 	.word	0x08020b20

08013ff0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8013ff4:	f001 f8a8 	bl	8015148 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8013ff8:	4b07      	ldr	r3, [pc, #28]	@ (8014018 <tcp_tmr+0x28>)
 8013ffa:	781b      	ldrb	r3, [r3, #0]
 8013ffc:	3301      	adds	r3, #1
 8013ffe:	b2da      	uxtb	r2, r3
 8014000:	4b05      	ldr	r3, [pc, #20]	@ (8014018 <tcp_tmr+0x28>)
 8014002:	701a      	strb	r2, [r3, #0]
 8014004:	4b04      	ldr	r3, [pc, #16]	@ (8014018 <tcp_tmr+0x28>)
 8014006:	781b      	ldrb	r3, [r3, #0]
 8014008:	f003 0301 	and.w	r3, r3, #1
 801400c:	2b00      	cmp	r3, #0
 801400e:	d001      	beq.n	8014014 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014010:	f000 fd58 	bl	8014ac4 <tcp_slowtmr>
  }
}
 8014014:	bf00      	nop
 8014016:	bd80      	pop	{r7, pc}
 8014018:	2000e505 	.word	0x2000e505

0801401c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b084      	sub	sp, #16
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
 8014024:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8014026:	683b      	ldr	r3, [r7, #0]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d105      	bne.n	8014038 <tcp_remove_listener+0x1c>
 801402c:	4b0d      	ldr	r3, [pc, #52]	@ (8014064 <tcp_remove_listener+0x48>)
 801402e:	22ff      	movs	r2, #255	@ 0xff
 8014030:	490d      	ldr	r1, [pc, #52]	@ (8014068 <tcp_remove_listener+0x4c>)
 8014032:	480e      	ldr	r0, [pc, #56]	@ (801406c <tcp_remove_listener+0x50>)
 8014034:	f00a f88a 	bl	801e14c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	60fb      	str	r3, [r7, #12]
 801403c:	e00a      	b.n	8014054 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014042:	683a      	ldr	r2, [r7, #0]
 8014044:	429a      	cmp	r2, r3
 8014046:	d102      	bne.n	801404e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	2200      	movs	r2, #0
 801404c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	68db      	ldr	r3, [r3, #12]
 8014052:	60fb      	str	r3, [r7, #12]
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d1f1      	bne.n	801403e <tcp_remove_listener+0x22>
    }
  }
}
 801405a:	bf00      	nop
 801405c:	bf00      	nop
 801405e:	3710      	adds	r7, #16
 8014060:	46bd      	mov	sp, r7
 8014062:	bd80      	pop	{r7, pc}
 8014064:	08020adc 	.word	0x08020adc
 8014068:	08020b64 	.word	0x08020b64
 801406c:	08020b20 	.word	0x08020b20

08014070 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b084      	sub	sp, #16
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d106      	bne.n	801408c <tcp_listen_closed+0x1c>
 801407e:	4b14      	ldr	r3, [pc, #80]	@ (80140d0 <tcp_listen_closed+0x60>)
 8014080:	f240 1211 	movw	r2, #273	@ 0x111
 8014084:	4913      	ldr	r1, [pc, #76]	@ (80140d4 <tcp_listen_closed+0x64>)
 8014086:	4814      	ldr	r0, [pc, #80]	@ (80140d8 <tcp_listen_closed+0x68>)
 8014088:	f00a f860 	bl	801e14c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	7d1b      	ldrb	r3, [r3, #20]
 8014090:	2b01      	cmp	r3, #1
 8014092:	d006      	beq.n	80140a2 <tcp_listen_closed+0x32>
 8014094:	4b0e      	ldr	r3, [pc, #56]	@ (80140d0 <tcp_listen_closed+0x60>)
 8014096:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801409a:	4910      	ldr	r1, [pc, #64]	@ (80140dc <tcp_listen_closed+0x6c>)
 801409c:	480e      	ldr	r0, [pc, #56]	@ (80140d8 <tcp_listen_closed+0x68>)
 801409e:	f00a f855 	bl	801e14c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80140a2:	2301      	movs	r3, #1
 80140a4:	60fb      	str	r3, [r7, #12]
 80140a6:	e00b      	b.n	80140c0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80140a8:	4a0d      	ldr	r2, [pc, #52]	@ (80140e0 <tcp_listen_closed+0x70>)
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	6879      	ldr	r1, [r7, #4]
 80140b4:	4618      	mov	r0, r3
 80140b6:	f7ff ffb1 	bl	801401c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	3301      	adds	r3, #1
 80140be:	60fb      	str	r3, [r7, #12]
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	2b03      	cmp	r3, #3
 80140c4:	d9f0      	bls.n	80140a8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80140c6:	bf00      	nop
 80140c8:	bf00      	nop
 80140ca:	3710      	adds	r7, #16
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}
 80140d0:	08020adc 	.word	0x08020adc
 80140d4:	08020b8c 	.word	0x08020b8c
 80140d8:	08020b20 	.word	0x08020b20
 80140dc:	08020b98 	.word	0x08020b98
 80140e0:	08068460 	.word	0x08068460

080140e4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80140e4:	b5b0      	push	{r4, r5, r7, lr}
 80140e6:	b088      	sub	sp, #32
 80140e8:	af04      	add	r7, sp, #16
 80140ea:	6078      	str	r0, [r7, #4]
 80140ec:	460b      	mov	r3, r1
 80140ee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d106      	bne.n	8014104 <tcp_close_shutdown+0x20>
 80140f6:	4b63      	ldr	r3, [pc, #396]	@ (8014284 <tcp_close_shutdown+0x1a0>)
 80140f8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80140fc:	4962      	ldr	r1, [pc, #392]	@ (8014288 <tcp_close_shutdown+0x1a4>)
 80140fe:	4863      	ldr	r0, [pc, #396]	@ (801428c <tcp_close_shutdown+0x1a8>)
 8014100:	f00a f824 	bl	801e14c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8014104:	78fb      	ldrb	r3, [r7, #3]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d066      	beq.n	80141d8 <tcp_close_shutdown+0xf4>
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	7d1b      	ldrb	r3, [r3, #20]
 801410e:	2b04      	cmp	r3, #4
 8014110:	d003      	beq.n	801411a <tcp_close_shutdown+0x36>
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	7d1b      	ldrb	r3, [r3, #20]
 8014116:	2b07      	cmp	r3, #7
 8014118:	d15e      	bne.n	80141d8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801411e:	2b00      	cmp	r3, #0
 8014120:	d104      	bne.n	801412c <tcp_close_shutdown+0x48>
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014126:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801412a:	d055      	beq.n	80141d8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	8b5b      	ldrh	r3, [r3, #26]
 8014130:	f003 0310 	and.w	r3, r3, #16
 8014134:	2b00      	cmp	r3, #0
 8014136:	d106      	bne.n	8014146 <tcp_close_shutdown+0x62>
 8014138:	4b52      	ldr	r3, [pc, #328]	@ (8014284 <tcp_close_shutdown+0x1a0>)
 801413a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801413e:	4954      	ldr	r1, [pc, #336]	@ (8014290 <tcp_close_shutdown+0x1ac>)
 8014140:	4852      	ldr	r0, [pc, #328]	@ (801428c <tcp_close_shutdown+0x1a8>)
 8014142:	f00a f803 	bl	801e14c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801414e:	687d      	ldr	r5, [r7, #4]
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	3304      	adds	r3, #4
 8014154:	687a      	ldr	r2, [r7, #4]
 8014156:	8ad2      	ldrh	r2, [r2, #22]
 8014158:	6879      	ldr	r1, [r7, #4]
 801415a:	8b09      	ldrh	r1, [r1, #24]
 801415c:	9102      	str	r1, [sp, #8]
 801415e:	9201      	str	r2, [sp, #4]
 8014160:	9300      	str	r3, [sp, #0]
 8014162:	462b      	mov	r3, r5
 8014164:	4622      	mov	r2, r4
 8014166:	4601      	mov	r1, r0
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	f005 fdb7 	bl	8019cdc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	f001 fb9a 	bl	80158a8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014174:	4b47      	ldr	r3, [pc, #284]	@ (8014294 <tcp_close_shutdown+0x1b0>)
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	687a      	ldr	r2, [r7, #4]
 801417a:	429a      	cmp	r2, r3
 801417c:	d105      	bne.n	801418a <tcp_close_shutdown+0xa6>
 801417e:	4b45      	ldr	r3, [pc, #276]	@ (8014294 <tcp_close_shutdown+0x1b0>)
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	68db      	ldr	r3, [r3, #12]
 8014184:	4a43      	ldr	r2, [pc, #268]	@ (8014294 <tcp_close_shutdown+0x1b0>)
 8014186:	6013      	str	r3, [r2, #0]
 8014188:	e013      	b.n	80141b2 <tcp_close_shutdown+0xce>
 801418a:	4b42      	ldr	r3, [pc, #264]	@ (8014294 <tcp_close_shutdown+0x1b0>)
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	60fb      	str	r3, [r7, #12]
 8014190:	e00c      	b.n	80141ac <tcp_close_shutdown+0xc8>
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	68db      	ldr	r3, [r3, #12]
 8014196:	687a      	ldr	r2, [r7, #4]
 8014198:	429a      	cmp	r2, r3
 801419a:	d104      	bne.n	80141a6 <tcp_close_shutdown+0xc2>
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	68da      	ldr	r2, [r3, #12]
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	60da      	str	r2, [r3, #12]
 80141a4:	e005      	b.n	80141b2 <tcp_close_shutdown+0xce>
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	68db      	ldr	r3, [r3, #12]
 80141aa:	60fb      	str	r3, [r7, #12]
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d1ef      	bne.n	8014192 <tcp_close_shutdown+0xae>
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	2200      	movs	r2, #0
 80141b6:	60da      	str	r2, [r3, #12]
 80141b8:	4b37      	ldr	r3, [pc, #220]	@ (8014298 <tcp_close_shutdown+0x1b4>)
 80141ba:	2201      	movs	r2, #1
 80141bc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80141be:	4b37      	ldr	r3, [pc, #220]	@ (801429c <tcp_close_shutdown+0x1b8>)
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	687a      	ldr	r2, [r7, #4]
 80141c4:	429a      	cmp	r2, r3
 80141c6:	d102      	bne.n	80141ce <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80141c8:	f004 f82e 	bl	8018228 <tcp_trigger_input_pcb_close>
 80141cc:	e002      	b.n	80141d4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80141ce:	6878      	ldr	r0, [r7, #4]
 80141d0:	f7ff fed6 	bl	8013f80 <tcp_free>
      }
      return ERR_OK;
 80141d4:	2300      	movs	r3, #0
 80141d6:	e050      	b.n	801427a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	7d1b      	ldrb	r3, [r3, #20]
 80141dc:	2b02      	cmp	r3, #2
 80141de:	d03b      	beq.n	8014258 <tcp_close_shutdown+0x174>
 80141e0:	2b02      	cmp	r3, #2
 80141e2:	dc44      	bgt.n	801426e <tcp_close_shutdown+0x18a>
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d002      	beq.n	80141ee <tcp_close_shutdown+0x10a>
 80141e8:	2b01      	cmp	r3, #1
 80141ea:	d02a      	beq.n	8014242 <tcp_close_shutdown+0x15e>
 80141ec:	e03f      	b.n	801426e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	8adb      	ldrh	r3, [r3, #22]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d021      	beq.n	801423a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80141f6:	4b2a      	ldr	r3, [pc, #168]	@ (80142a0 <tcp_close_shutdown+0x1bc>)
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	687a      	ldr	r2, [r7, #4]
 80141fc:	429a      	cmp	r2, r3
 80141fe:	d105      	bne.n	801420c <tcp_close_shutdown+0x128>
 8014200:	4b27      	ldr	r3, [pc, #156]	@ (80142a0 <tcp_close_shutdown+0x1bc>)
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	68db      	ldr	r3, [r3, #12]
 8014206:	4a26      	ldr	r2, [pc, #152]	@ (80142a0 <tcp_close_shutdown+0x1bc>)
 8014208:	6013      	str	r3, [r2, #0]
 801420a:	e013      	b.n	8014234 <tcp_close_shutdown+0x150>
 801420c:	4b24      	ldr	r3, [pc, #144]	@ (80142a0 <tcp_close_shutdown+0x1bc>)
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	60bb      	str	r3, [r7, #8]
 8014212:	e00c      	b.n	801422e <tcp_close_shutdown+0x14a>
 8014214:	68bb      	ldr	r3, [r7, #8]
 8014216:	68db      	ldr	r3, [r3, #12]
 8014218:	687a      	ldr	r2, [r7, #4]
 801421a:	429a      	cmp	r2, r3
 801421c:	d104      	bne.n	8014228 <tcp_close_shutdown+0x144>
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	68da      	ldr	r2, [r3, #12]
 8014222:	68bb      	ldr	r3, [r7, #8]
 8014224:	60da      	str	r2, [r3, #12]
 8014226:	e005      	b.n	8014234 <tcp_close_shutdown+0x150>
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	68db      	ldr	r3, [r3, #12]
 801422c:	60bb      	str	r3, [r7, #8]
 801422e:	68bb      	ldr	r3, [r7, #8]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d1ef      	bne.n	8014214 <tcp_close_shutdown+0x130>
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2200      	movs	r2, #0
 8014238:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801423a:	6878      	ldr	r0, [r7, #4]
 801423c:	f7ff fea0 	bl	8013f80 <tcp_free>
      break;
 8014240:	e01a      	b.n	8014278 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8014242:	6878      	ldr	r0, [r7, #4]
 8014244:	f7ff ff14 	bl	8014070 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014248:	6879      	ldr	r1, [r7, #4]
 801424a:	4816      	ldr	r0, [pc, #88]	@ (80142a4 <tcp_close_shutdown+0x1c0>)
 801424c:	f001 fb7c 	bl	8015948 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f7ff feb1 	bl	8013fb8 <tcp_free_listen>
      break;
 8014256:	e00f      	b.n	8014278 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014258:	6879      	ldr	r1, [r7, #4]
 801425a:	480e      	ldr	r0, [pc, #56]	@ (8014294 <tcp_close_shutdown+0x1b0>)
 801425c:	f001 fb74 	bl	8015948 <tcp_pcb_remove>
 8014260:	4b0d      	ldr	r3, [pc, #52]	@ (8014298 <tcp_close_shutdown+0x1b4>)
 8014262:	2201      	movs	r2, #1
 8014264:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8014266:	6878      	ldr	r0, [r7, #4]
 8014268:	f7ff fe8a 	bl	8013f80 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801426c:	e004      	b.n	8014278 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801426e:	6878      	ldr	r0, [r7, #4]
 8014270:	f000 f81a 	bl	80142a8 <tcp_close_shutdown_fin>
 8014274:	4603      	mov	r3, r0
 8014276:	e000      	b.n	801427a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014278:	2300      	movs	r3, #0
}
 801427a:	4618      	mov	r0, r3
 801427c:	3710      	adds	r7, #16
 801427e:	46bd      	mov	sp, r7
 8014280:	bdb0      	pop	{r4, r5, r7, pc}
 8014282:	bf00      	nop
 8014284:	08020adc 	.word	0x08020adc
 8014288:	08020bb0 	.word	0x08020bb0
 801428c:	08020b20 	.word	0x08020b20
 8014290:	08020bd0 	.word	0x08020bd0
 8014294:	2000e4fc 	.word	0x2000e4fc
 8014298:	2000e504 	.word	0x2000e504
 801429c:	2000e53c 	.word	0x2000e53c
 80142a0:	2000e4f4 	.word	0x2000e4f4
 80142a4:	2000e4f8 	.word	0x2000e4f8

080142a8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b084      	sub	sp, #16
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d106      	bne.n	80142c4 <tcp_close_shutdown_fin+0x1c>
 80142b6:	4b2e      	ldr	r3, [pc, #184]	@ (8014370 <tcp_close_shutdown_fin+0xc8>)
 80142b8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80142bc:	492d      	ldr	r1, [pc, #180]	@ (8014374 <tcp_close_shutdown_fin+0xcc>)
 80142be:	482e      	ldr	r0, [pc, #184]	@ (8014378 <tcp_close_shutdown_fin+0xd0>)
 80142c0:	f009 ff44 	bl	801e14c <iprintf>

  switch (pcb->state) {
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	7d1b      	ldrb	r3, [r3, #20]
 80142c8:	2b07      	cmp	r3, #7
 80142ca:	d020      	beq.n	801430e <tcp_close_shutdown_fin+0x66>
 80142cc:	2b07      	cmp	r3, #7
 80142ce:	dc2b      	bgt.n	8014328 <tcp_close_shutdown_fin+0x80>
 80142d0:	2b03      	cmp	r3, #3
 80142d2:	d002      	beq.n	80142da <tcp_close_shutdown_fin+0x32>
 80142d4:	2b04      	cmp	r3, #4
 80142d6:	d00d      	beq.n	80142f4 <tcp_close_shutdown_fin+0x4c>
 80142d8:	e026      	b.n	8014328 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80142da:	6878      	ldr	r0, [r7, #4]
 80142dc:	f004 fe0c 	bl	8018ef8 <tcp_send_fin>
 80142e0:	4603      	mov	r3, r0
 80142e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80142e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d11f      	bne.n	801432c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	2205      	movs	r2, #5
 80142f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80142f2:	e01b      	b.n	801432c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	f004 fdff 	bl	8018ef8 <tcp_send_fin>
 80142fa:	4603      	mov	r3, r0
 80142fc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80142fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d114      	bne.n	8014330 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	2205      	movs	r2, #5
 801430a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801430c:	e010      	b.n	8014330 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801430e:	6878      	ldr	r0, [r7, #4]
 8014310:	f004 fdf2 	bl	8018ef8 <tcp_send_fin>
 8014314:	4603      	mov	r3, r0
 8014316:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d109      	bne.n	8014334 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	2209      	movs	r2, #9
 8014324:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014326:	e005      	b.n	8014334 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8014328:	2300      	movs	r3, #0
 801432a:	e01c      	b.n	8014366 <tcp_close_shutdown_fin+0xbe>
      break;
 801432c:	bf00      	nop
 801432e:	e002      	b.n	8014336 <tcp_close_shutdown_fin+0x8e>
      break;
 8014330:	bf00      	nop
 8014332:	e000      	b.n	8014336 <tcp_close_shutdown_fin+0x8e>
      break;
 8014334:	bf00      	nop
  }

  if (err == ERR_OK) {
 8014336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d103      	bne.n	8014346 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801433e:	6878      	ldr	r0, [r7, #4]
 8014340:	f004 ff18 	bl	8019174 <tcp_output>
 8014344:	e00d      	b.n	8014362 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8014346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801434a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801434e:	d108      	bne.n	8014362 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	8b5b      	ldrh	r3, [r3, #26]
 8014354:	f043 0308 	orr.w	r3, r3, #8
 8014358:	b29a      	uxth	r2, r3
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801435e:	2300      	movs	r3, #0
 8014360:	e001      	b.n	8014366 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014362:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014366:	4618      	mov	r0, r3
 8014368:	3710      	adds	r7, #16
 801436a:	46bd      	mov	sp, r7
 801436c:	bd80      	pop	{r7, pc}
 801436e:	bf00      	nop
 8014370:	08020adc 	.word	0x08020adc
 8014374:	08020b8c 	.word	0x08020b8c
 8014378:	08020b20 	.word	0x08020b20

0801437c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b082      	sub	sp, #8
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d109      	bne.n	801439e <tcp_close+0x22>
 801438a:	4b0f      	ldr	r3, [pc, #60]	@ (80143c8 <tcp_close+0x4c>)
 801438c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8014390:	490e      	ldr	r1, [pc, #56]	@ (80143cc <tcp_close+0x50>)
 8014392:	480f      	ldr	r0, [pc, #60]	@ (80143d0 <tcp_close+0x54>)
 8014394:	f009 feda 	bl	801e14c <iprintf>
 8014398:	f06f 030f 	mvn.w	r3, #15
 801439c:	e00f      	b.n	80143be <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	7d1b      	ldrb	r3, [r3, #20]
 80143a2:	2b01      	cmp	r3, #1
 80143a4:	d006      	beq.n	80143b4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	8b5b      	ldrh	r3, [r3, #26]
 80143aa:	f043 0310 	orr.w	r3, r3, #16
 80143ae:	b29a      	uxth	r2, r3
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80143b4:	2101      	movs	r1, #1
 80143b6:	6878      	ldr	r0, [r7, #4]
 80143b8:	f7ff fe94 	bl	80140e4 <tcp_close_shutdown>
 80143bc:	4603      	mov	r3, r0
}
 80143be:	4618      	mov	r0, r3
 80143c0:	3708      	adds	r7, #8
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd80      	pop	{r7, pc}
 80143c6:	bf00      	nop
 80143c8:	08020adc 	.word	0x08020adc
 80143cc:	08020bec 	.word	0x08020bec
 80143d0:	08020b20 	.word	0x08020b20

080143d4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b084      	sub	sp, #16
 80143d8:	af00      	add	r7, sp, #0
 80143da:	60f8      	str	r0, [r7, #12]
 80143dc:	60b9      	str	r1, [r7, #8]
 80143de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d109      	bne.n	80143fa <tcp_shutdown+0x26>
 80143e6:	4b26      	ldr	r3, [pc, #152]	@ (8014480 <tcp_shutdown+0xac>)
 80143e8:	f240 2207 	movw	r2, #519	@ 0x207
 80143ec:	4925      	ldr	r1, [pc, #148]	@ (8014484 <tcp_shutdown+0xb0>)
 80143ee:	4826      	ldr	r0, [pc, #152]	@ (8014488 <tcp_shutdown+0xb4>)
 80143f0:	f009 feac 	bl	801e14c <iprintf>
 80143f4:	f06f 030f 	mvn.w	r3, #15
 80143f8:	e03d      	b.n	8014476 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	7d1b      	ldrb	r3, [r3, #20]
 80143fe:	2b01      	cmp	r3, #1
 8014400:	d102      	bne.n	8014408 <tcp_shutdown+0x34>
    return ERR_CONN;
 8014402:	f06f 030a 	mvn.w	r3, #10
 8014406:	e036      	b.n	8014476 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8014408:	68bb      	ldr	r3, [r7, #8]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d01b      	beq.n	8014446 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	8b5b      	ldrh	r3, [r3, #26]
 8014412:	f043 0310 	orr.w	r3, r3, #16
 8014416:	b29a      	uxth	r2, r3
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d005      	beq.n	801442e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8014422:	2101      	movs	r1, #1
 8014424:	68f8      	ldr	r0, [r7, #12]
 8014426:	f7ff fe5d 	bl	80140e4 <tcp_close_shutdown>
 801442a:	4603      	mov	r3, r0
 801442c:	e023      	b.n	8014476 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014432:	2b00      	cmp	r3, #0
 8014434:	d007      	beq.n	8014446 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801443a:	4618      	mov	r0, r3
 801443c:	f7ff faf4 	bl	8013a28 <pbuf_free>
      pcb->refused_data = NULL;
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	2200      	movs	r2, #0
 8014444:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d013      	beq.n	8014474 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	7d1b      	ldrb	r3, [r3, #20]
 8014450:	2b04      	cmp	r3, #4
 8014452:	dc02      	bgt.n	801445a <tcp_shutdown+0x86>
 8014454:	2b03      	cmp	r3, #3
 8014456:	da02      	bge.n	801445e <tcp_shutdown+0x8a>
 8014458:	e009      	b.n	801446e <tcp_shutdown+0x9a>
 801445a:	2b07      	cmp	r3, #7
 801445c:	d107      	bne.n	801446e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	b2db      	uxtb	r3, r3
 8014462:	4619      	mov	r1, r3
 8014464:	68f8      	ldr	r0, [r7, #12]
 8014466:	f7ff fe3d 	bl	80140e4 <tcp_close_shutdown>
 801446a:	4603      	mov	r3, r0
 801446c:	e003      	b.n	8014476 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801446e:	f06f 030a 	mvn.w	r3, #10
 8014472:	e000      	b.n	8014476 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8014474:	2300      	movs	r3, #0
}
 8014476:	4618      	mov	r0, r3
 8014478:	3710      	adds	r7, #16
 801447a:	46bd      	mov	sp, r7
 801447c:	bd80      	pop	{r7, pc}
 801447e:	bf00      	nop
 8014480:	08020adc 	.word	0x08020adc
 8014484:	08020c04 	.word	0x08020c04
 8014488:	08020b20 	.word	0x08020b20

0801448c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b08e      	sub	sp, #56	@ 0x38
 8014490:	af04      	add	r7, sp, #16
 8014492:	6078      	str	r0, [r7, #4]
 8014494:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d107      	bne.n	80144ac <tcp_abandon+0x20>
 801449c:	4b52      	ldr	r3, [pc, #328]	@ (80145e8 <tcp_abandon+0x15c>)
 801449e:	f240 223d 	movw	r2, #573	@ 0x23d
 80144a2:	4952      	ldr	r1, [pc, #328]	@ (80145ec <tcp_abandon+0x160>)
 80144a4:	4852      	ldr	r0, [pc, #328]	@ (80145f0 <tcp_abandon+0x164>)
 80144a6:	f009 fe51 	bl	801e14c <iprintf>
 80144aa:	e099      	b.n	80145e0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	7d1b      	ldrb	r3, [r3, #20]
 80144b0:	2b01      	cmp	r3, #1
 80144b2:	d106      	bne.n	80144c2 <tcp_abandon+0x36>
 80144b4:	4b4c      	ldr	r3, [pc, #304]	@ (80145e8 <tcp_abandon+0x15c>)
 80144b6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80144ba:	494e      	ldr	r1, [pc, #312]	@ (80145f4 <tcp_abandon+0x168>)
 80144bc:	484c      	ldr	r0, [pc, #304]	@ (80145f0 <tcp_abandon+0x164>)
 80144be:	f009 fe45 	bl	801e14c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	7d1b      	ldrb	r3, [r3, #20]
 80144c6:	2b0a      	cmp	r3, #10
 80144c8:	d107      	bne.n	80144da <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80144ca:	6879      	ldr	r1, [r7, #4]
 80144cc:	484a      	ldr	r0, [pc, #296]	@ (80145f8 <tcp_abandon+0x16c>)
 80144ce:	f001 fa3b 	bl	8015948 <tcp_pcb_remove>
    tcp_free(pcb);
 80144d2:	6878      	ldr	r0, [r7, #4]
 80144d4:	f7ff fd54 	bl	8013f80 <tcp_free>
 80144d8:	e082      	b.n	80145e0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80144da:	2300      	movs	r3, #0
 80144dc:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80144de:	2300      	movs	r3, #0
 80144e0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80144e6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144ec:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80144f4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	691b      	ldr	r3, [r3, #16]
 80144fa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	7d1b      	ldrb	r3, [r3, #20]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d126      	bne.n	8014552 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	8adb      	ldrh	r3, [r3, #22]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d02e      	beq.n	801456a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801450c:	4b3b      	ldr	r3, [pc, #236]	@ (80145fc <tcp_abandon+0x170>)
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	687a      	ldr	r2, [r7, #4]
 8014512:	429a      	cmp	r2, r3
 8014514:	d105      	bne.n	8014522 <tcp_abandon+0x96>
 8014516:	4b39      	ldr	r3, [pc, #228]	@ (80145fc <tcp_abandon+0x170>)
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	68db      	ldr	r3, [r3, #12]
 801451c:	4a37      	ldr	r2, [pc, #220]	@ (80145fc <tcp_abandon+0x170>)
 801451e:	6013      	str	r3, [r2, #0]
 8014520:	e013      	b.n	801454a <tcp_abandon+0xbe>
 8014522:	4b36      	ldr	r3, [pc, #216]	@ (80145fc <tcp_abandon+0x170>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	61fb      	str	r3, [r7, #28]
 8014528:	e00c      	b.n	8014544 <tcp_abandon+0xb8>
 801452a:	69fb      	ldr	r3, [r7, #28]
 801452c:	68db      	ldr	r3, [r3, #12]
 801452e:	687a      	ldr	r2, [r7, #4]
 8014530:	429a      	cmp	r2, r3
 8014532:	d104      	bne.n	801453e <tcp_abandon+0xb2>
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	68da      	ldr	r2, [r3, #12]
 8014538:	69fb      	ldr	r3, [r7, #28]
 801453a:	60da      	str	r2, [r3, #12]
 801453c:	e005      	b.n	801454a <tcp_abandon+0xbe>
 801453e:	69fb      	ldr	r3, [r7, #28]
 8014540:	68db      	ldr	r3, [r3, #12]
 8014542:	61fb      	str	r3, [r7, #28]
 8014544:	69fb      	ldr	r3, [r7, #28]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d1ef      	bne.n	801452a <tcp_abandon+0x9e>
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	2200      	movs	r2, #0
 801454e:	60da      	str	r2, [r3, #12]
 8014550:	e00b      	b.n	801456a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	8adb      	ldrh	r3, [r3, #22]
 801455a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801455c:	6879      	ldr	r1, [r7, #4]
 801455e:	4828      	ldr	r0, [pc, #160]	@ (8014600 <tcp_abandon+0x174>)
 8014560:	f001 f9f2 	bl	8015948 <tcp_pcb_remove>
 8014564:	4b27      	ldr	r3, [pc, #156]	@ (8014604 <tcp_abandon+0x178>)
 8014566:	2201      	movs	r2, #1
 8014568:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801456e:	2b00      	cmp	r3, #0
 8014570:	d004      	beq.n	801457c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014576:	4618      	mov	r0, r3
 8014578:	f000 fec6 	bl	8015308 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014580:	2b00      	cmp	r3, #0
 8014582:	d004      	beq.n	801458e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014588:	4618      	mov	r0, r3
 801458a:	f000 febd 	bl	8015308 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014592:	2b00      	cmp	r3, #0
 8014594:	d004      	beq.n	80145a0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801459a:	4618      	mov	r0, r3
 801459c:	f000 feb4 	bl	8015308 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80145a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d00e      	beq.n	80145c4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80145a6:	6879      	ldr	r1, [r7, #4]
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	3304      	adds	r3, #4
 80145ac:	687a      	ldr	r2, [r7, #4]
 80145ae:	8b12      	ldrh	r2, [r2, #24]
 80145b0:	9202      	str	r2, [sp, #8]
 80145b2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80145b4:	9201      	str	r2, [sp, #4]
 80145b6:	9300      	str	r3, [sp, #0]
 80145b8:	460b      	mov	r3, r1
 80145ba:	697a      	ldr	r2, [r7, #20]
 80145bc:	69b9      	ldr	r1, [r7, #24]
 80145be:	6878      	ldr	r0, [r7, #4]
 80145c0:	f005 fb8c 	bl	8019cdc <tcp_rst>
    }
    last_state = pcb->state;
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	7d1b      	ldrb	r3, [r3, #20]
 80145c8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80145ca:	6878      	ldr	r0, [r7, #4]
 80145cc:	f7ff fcd8 	bl	8013f80 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80145d0:	693b      	ldr	r3, [r7, #16]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d004      	beq.n	80145e0 <tcp_abandon+0x154>
 80145d6:	693b      	ldr	r3, [r7, #16]
 80145d8:	f06f 010c 	mvn.w	r1, #12
 80145dc:	68f8      	ldr	r0, [r7, #12]
 80145de:	4798      	blx	r3
  }
}
 80145e0:	3728      	adds	r7, #40	@ 0x28
 80145e2:	46bd      	mov	sp, r7
 80145e4:	bd80      	pop	{r7, pc}
 80145e6:	bf00      	nop
 80145e8:	08020adc 	.word	0x08020adc
 80145ec:	08020c20 	.word	0x08020c20
 80145f0:	08020b20 	.word	0x08020b20
 80145f4:	08020c3c 	.word	0x08020c3c
 80145f8:	2000e500 	.word	0x2000e500
 80145fc:	2000e4f4 	.word	0x2000e4f4
 8014600:	2000e4fc 	.word	0x2000e4fc
 8014604:	2000e504 	.word	0x2000e504

08014608 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b082      	sub	sp, #8
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8014610:	2101      	movs	r1, #1
 8014612:	6878      	ldr	r0, [r7, #4]
 8014614:	f7ff ff3a 	bl	801448c <tcp_abandon>
}
 8014618:	bf00      	nop
 801461a:	3708      	adds	r7, #8
 801461c:	46bd      	mov	sp, r7
 801461e:	bd80      	pop	{r7, pc}

08014620 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b088      	sub	sp, #32
 8014624:	af00      	add	r7, sp, #0
 8014626:	60f8      	str	r0, [r7, #12]
 8014628:	60b9      	str	r1, [r7, #8]
 801462a:	4613      	mov	r3, r2
 801462c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801462e:	2304      	movs	r3, #4
 8014630:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014632:	68bb      	ldr	r3, [r7, #8]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d101      	bne.n	801463c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8014638:	4b3e      	ldr	r3, [pc, #248]	@ (8014734 <tcp_bind+0x114>)
 801463a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d109      	bne.n	8014656 <tcp_bind+0x36>
 8014642:	4b3d      	ldr	r3, [pc, #244]	@ (8014738 <tcp_bind+0x118>)
 8014644:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8014648:	493c      	ldr	r1, [pc, #240]	@ (801473c <tcp_bind+0x11c>)
 801464a:	483d      	ldr	r0, [pc, #244]	@ (8014740 <tcp_bind+0x120>)
 801464c:	f009 fd7e 	bl	801e14c <iprintf>
 8014650:	f06f 030f 	mvn.w	r3, #15
 8014654:	e06a      	b.n	801472c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	7d1b      	ldrb	r3, [r3, #20]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d009      	beq.n	8014672 <tcp_bind+0x52>
 801465e:	4b36      	ldr	r3, [pc, #216]	@ (8014738 <tcp_bind+0x118>)
 8014660:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014664:	4937      	ldr	r1, [pc, #220]	@ (8014744 <tcp_bind+0x124>)
 8014666:	4836      	ldr	r0, [pc, #216]	@ (8014740 <tcp_bind+0x120>)
 8014668:	f009 fd70 	bl	801e14c <iprintf>
 801466c:	f06f 0305 	mvn.w	r3, #5
 8014670:	e05c      	b.n	801472c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8014672:	88fb      	ldrh	r3, [r7, #6]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d109      	bne.n	801468c <tcp_bind+0x6c>
    port = tcp_new_port();
 8014678:	f000 f9de 	bl	8014a38 <tcp_new_port>
 801467c:	4603      	mov	r3, r0
 801467e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014680:	88fb      	ldrh	r3, [r7, #6]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d135      	bne.n	80146f2 <tcp_bind+0xd2>
      return ERR_BUF;
 8014686:	f06f 0301 	mvn.w	r3, #1
 801468a:	e04f      	b.n	801472c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801468c:	2300      	movs	r3, #0
 801468e:	61fb      	str	r3, [r7, #28]
 8014690:	e02b      	b.n	80146ea <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8014692:	4a2d      	ldr	r2, [pc, #180]	@ (8014748 <tcp_bind+0x128>)
 8014694:	69fb      	ldr	r3, [r7, #28]
 8014696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	61bb      	str	r3, [r7, #24]
 801469e:	e01e      	b.n	80146de <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80146a0:	69bb      	ldr	r3, [r7, #24]
 80146a2:	8adb      	ldrh	r3, [r3, #22]
 80146a4:	88fa      	ldrh	r2, [r7, #6]
 80146a6:	429a      	cmp	r2, r3
 80146a8:	d116      	bne.n	80146d8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80146aa:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d010      	beq.n	80146d2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80146b0:	69bb      	ldr	r3, [r7, #24]
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d00c      	beq.n	80146d2 <tcp_bind+0xb2>
 80146b8:	68bb      	ldr	r3, [r7, #8]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d009      	beq.n	80146d2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80146be:	68bb      	ldr	r3, [r7, #8]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d005      	beq.n	80146d2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80146c6:	69bb      	ldr	r3, [r7, #24]
 80146c8:	681a      	ldr	r2, [r3, #0]
 80146ca:	68bb      	ldr	r3, [r7, #8]
 80146cc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80146ce:	429a      	cmp	r2, r3
 80146d0:	d102      	bne.n	80146d8 <tcp_bind+0xb8>
              return ERR_USE;
 80146d2:	f06f 0307 	mvn.w	r3, #7
 80146d6:	e029      	b.n	801472c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80146d8:	69bb      	ldr	r3, [r7, #24]
 80146da:	68db      	ldr	r3, [r3, #12]
 80146dc:	61bb      	str	r3, [r7, #24]
 80146de:	69bb      	ldr	r3, [r7, #24]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d1dd      	bne.n	80146a0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80146e4:	69fb      	ldr	r3, [r7, #28]
 80146e6:	3301      	adds	r3, #1
 80146e8:	61fb      	str	r3, [r7, #28]
 80146ea:	69fa      	ldr	r2, [r7, #28]
 80146ec:	697b      	ldr	r3, [r7, #20]
 80146ee:	429a      	cmp	r2, r3
 80146f0:	dbcf      	blt.n	8014692 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80146f2:	68bb      	ldr	r3, [r7, #8]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d00c      	beq.n	8014712 <tcp_bind+0xf2>
 80146f8:	68bb      	ldr	r3, [r7, #8]
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d008      	beq.n	8014712 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d002      	beq.n	801470c <tcp_bind+0xec>
 8014706:	68bb      	ldr	r3, [r7, #8]
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	e000      	b.n	801470e <tcp_bind+0xee>
 801470c:	2300      	movs	r3, #0
 801470e:	68fa      	ldr	r2, [r7, #12]
 8014710:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	88fa      	ldrh	r2, [r7, #6]
 8014716:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8014718:	4b0c      	ldr	r3, [pc, #48]	@ (801474c <tcp_bind+0x12c>)
 801471a:	681a      	ldr	r2, [r3, #0]
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	60da      	str	r2, [r3, #12]
 8014720:	4a0a      	ldr	r2, [pc, #40]	@ (801474c <tcp_bind+0x12c>)
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	6013      	str	r3, [r2, #0]
 8014726:	f005 fc9b 	bl	801a060 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801472a:	2300      	movs	r3, #0
}
 801472c:	4618      	mov	r0, r3
 801472e:	3720      	adds	r7, #32
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}
 8014734:	08068488 	.word	0x08068488
 8014738:	08020adc 	.word	0x08020adc
 801473c:	08020c70 	.word	0x08020c70
 8014740:	08020b20 	.word	0x08020b20
 8014744:	08020c88 	.word	0x08020c88
 8014748:	08068460 	.word	0x08068460
 801474c:	2000e4f4 	.word	0x2000e4f4

08014750 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b084      	sub	sp, #16
 8014754:	af00      	add	r7, sp, #0
 8014756:	60f8      	str	r0, [r7, #12]
 8014758:	60b9      	str	r1, [r7, #8]
 801475a:	4613      	mov	r3, r2
 801475c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801475e:	68bb      	ldr	r3, [r7, #8]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d106      	bne.n	8014772 <tcp_accept_null+0x22>
 8014764:	4b07      	ldr	r3, [pc, #28]	@ (8014784 <tcp_accept_null+0x34>)
 8014766:	f240 320f 	movw	r2, #783	@ 0x30f
 801476a:	4907      	ldr	r1, [pc, #28]	@ (8014788 <tcp_accept_null+0x38>)
 801476c:	4807      	ldr	r0, [pc, #28]	@ (801478c <tcp_accept_null+0x3c>)
 801476e:	f009 fced 	bl	801e14c <iprintf>

  tcp_abort(pcb);
 8014772:	68b8      	ldr	r0, [r7, #8]
 8014774:	f7ff ff48 	bl	8014608 <tcp_abort>

  return ERR_ABRT;
 8014778:	f06f 030c 	mvn.w	r3, #12
}
 801477c:	4618      	mov	r0, r3
 801477e:	3710      	adds	r7, #16
 8014780:	46bd      	mov	sp, r7
 8014782:	bd80      	pop	{r7, pc}
 8014784:	08020adc 	.word	0x08020adc
 8014788:	08020cb0 	.word	0x08020cb0
 801478c:	08020b20 	.word	0x08020b20

08014790 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b088      	sub	sp, #32
 8014794:	af00      	add	r7, sp, #0
 8014796:	60f8      	str	r0, [r7, #12]
 8014798:	460b      	mov	r3, r1
 801479a:	607a      	str	r2, [r7, #4]
 801479c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801479e:	2300      	movs	r3, #0
 80147a0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d109      	bne.n	80147bc <tcp_listen_with_backlog_and_err+0x2c>
 80147a8:	4b47      	ldr	r3, [pc, #284]	@ (80148c8 <tcp_listen_with_backlog_and_err+0x138>)
 80147aa:	f240 3259 	movw	r2, #857	@ 0x359
 80147ae:	4947      	ldr	r1, [pc, #284]	@ (80148cc <tcp_listen_with_backlog_and_err+0x13c>)
 80147b0:	4847      	ldr	r0, [pc, #284]	@ (80148d0 <tcp_listen_with_backlog_and_err+0x140>)
 80147b2:	f009 fccb 	bl	801e14c <iprintf>
 80147b6:	23f0      	movs	r3, #240	@ 0xf0
 80147b8:	76fb      	strb	r3, [r7, #27]
 80147ba:	e079      	b.n	80148b0 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	7d1b      	ldrb	r3, [r3, #20]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d009      	beq.n	80147d8 <tcp_listen_with_backlog_and_err+0x48>
 80147c4:	4b40      	ldr	r3, [pc, #256]	@ (80148c8 <tcp_listen_with_backlog_and_err+0x138>)
 80147c6:	f240 325a 	movw	r2, #858	@ 0x35a
 80147ca:	4942      	ldr	r1, [pc, #264]	@ (80148d4 <tcp_listen_with_backlog_and_err+0x144>)
 80147cc:	4840      	ldr	r0, [pc, #256]	@ (80148d0 <tcp_listen_with_backlog_and_err+0x140>)
 80147ce:	f009 fcbd 	bl	801e14c <iprintf>
 80147d2:	23f1      	movs	r3, #241	@ 0xf1
 80147d4:	76fb      	strb	r3, [r7, #27]
 80147d6:	e06b      	b.n	80148b0 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	7d1b      	ldrb	r3, [r3, #20]
 80147dc:	2b01      	cmp	r3, #1
 80147de:	d104      	bne.n	80147ea <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80147e4:	23f7      	movs	r3, #247	@ 0xf7
 80147e6:	76fb      	strb	r3, [r7, #27]
    goto done;
 80147e8:	e062      	b.n	80148b0 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80147ea:	2002      	movs	r0, #2
 80147ec:	f7fe fa02 	bl	8012bf4 <memp_malloc>
 80147f0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80147f2:	69fb      	ldr	r3, [r7, #28]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d102      	bne.n	80147fe <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80147f8:	23ff      	movs	r3, #255	@ 0xff
 80147fa:	76fb      	strb	r3, [r7, #27]
    goto done;
 80147fc:	e058      	b.n	80148b0 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	691a      	ldr	r2, [r3, #16]
 8014802:	69fb      	ldr	r3, [r7, #28]
 8014804:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	8ada      	ldrh	r2, [r3, #22]
 801480a:	69fb      	ldr	r3, [r7, #28]
 801480c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801480e:	69fb      	ldr	r3, [r7, #28]
 8014810:	2201      	movs	r2, #1
 8014812:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	7d5a      	ldrb	r2, [r3, #21]
 8014818:	69fb      	ldr	r3, [r7, #28]
 801481a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	7a5a      	ldrb	r2, [r3, #9]
 8014820:	69fb      	ldr	r3, [r7, #28]
 8014822:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8014824:	69fb      	ldr	r3, [r7, #28]
 8014826:	2200      	movs	r2, #0
 8014828:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	7ada      	ldrb	r2, [r3, #11]
 801482e:	69fb      	ldr	r3, [r7, #28]
 8014830:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	7a9a      	ldrb	r2, [r3, #10]
 8014836:	69fb      	ldr	r3, [r7, #28]
 8014838:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	681a      	ldr	r2, [r3, #0]
 801483e:	69fb      	ldr	r3, [r7, #28]
 8014840:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	8adb      	ldrh	r3, [r3, #22]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d021      	beq.n	801488e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801484a:	4b23      	ldr	r3, [pc, #140]	@ (80148d8 <tcp_listen_with_backlog_and_err+0x148>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	68fa      	ldr	r2, [r7, #12]
 8014850:	429a      	cmp	r2, r3
 8014852:	d105      	bne.n	8014860 <tcp_listen_with_backlog_and_err+0xd0>
 8014854:	4b20      	ldr	r3, [pc, #128]	@ (80148d8 <tcp_listen_with_backlog_and_err+0x148>)
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	68db      	ldr	r3, [r3, #12]
 801485a:	4a1f      	ldr	r2, [pc, #124]	@ (80148d8 <tcp_listen_with_backlog_and_err+0x148>)
 801485c:	6013      	str	r3, [r2, #0]
 801485e:	e013      	b.n	8014888 <tcp_listen_with_backlog_and_err+0xf8>
 8014860:	4b1d      	ldr	r3, [pc, #116]	@ (80148d8 <tcp_listen_with_backlog_and_err+0x148>)
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	617b      	str	r3, [r7, #20]
 8014866:	e00c      	b.n	8014882 <tcp_listen_with_backlog_and_err+0xf2>
 8014868:	697b      	ldr	r3, [r7, #20]
 801486a:	68db      	ldr	r3, [r3, #12]
 801486c:	68fa      	ldr	r2, [r7, #12]
 801486e:	429a      	cmp	r2, r3
 8014870:	d104      	bne.n	801487c <tcp_listen_with_backlog_and_err+0xec>
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	68da      	ldr	r2, [r3, #12]
 8014876:	697b      	ldr	r3, [r7, #20]
 8014878:	60da      	str	r2, [r3, #12]
 801487a:	e005      	b.n	8014888 <tcp_listen_with_backlog_and_err+0xf8>
 801487c:	697b      	ldr	r3, [r7, #20]
 801487e:	68db      	ldr	r3, [r3, #12]
 8014880:	617b      	str	r3, [r7, #20]
 8014882:	697b      	ldr	r3, [r7, #20]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d1ef      	bne.n	8014868 <tcp_listen_with_backlog_and_err+0xd8>
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	2200      	movs	r2, #0
 801488c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801488e:	68f8      	ldr	r0, [r7, #12]
 8014890:	f7ff fb76 	bl	8013f80 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8014894:	69fb      	ldr	r3, [r7, #28]
 8014896:	4a11      	ldr	r2, [pc, #68]	@ (80148dc <tcp_listen_with_backlog_and_err+0x14c>)
 8014898:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801489a:	4b11      	ldr	r3, [pc, #68]	@ (80148e0 <tcp_listen_with_backlog_and_err+0x150>)
 801489c:	681a      	ldr	r2, [r3, #0]
 801489e:	69fb      	ldr	r3, [r7, #28]
 80148a0:	60da      	str	r2, [r3, #12]
 80148a2:	4a0f      	ldr	r2, [pc, #60]	@ (80148e0 <tcp_listen_with_backlog_and_err+0x150>)
 80148a4:	69fb      	ldr	r3, [r7, #28]
 80148a6:	6013      	str	r3, [r2, #0]
 80148a8:	f005 fbda 	bl	801a060 <tcp_timer_needed>
  res = ERR_OK;
 80148ac:	2300      	movs	r3, #0
 80148ae:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d002      	beq.n	80148bc <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	7efa      	ldrb	r2, [r7, #27]
 80148ba:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80148bc:	69fb      	ldr	r3, [r7, #28]
}
 80148be:	4618      	mov	r0, r3
 80148c0:	3720      	adds	r7, #32
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}
 80148c6:	bf00      	nop
 80148c8:	08020adc 	.word	0x08020adc
 80148cc:	08020cd0 	.word	0x08020cd0
 80148d0:	08020b20 	.word	0x08020b20
 80148d4:	08020d00 	.word	0x08020d00
 80148d8:	2000e4f4 	.word	0x2000e4f4
 80148dc:	08014751 	.word	0x08014751
 80148e0:	2000e4f8 	.word	0x2000e4f8

080148e4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b084      	sub	sp, #16
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d106      	bne.n	8014900 <tcp_update_rcv_ann_wnd+0x1c>
 80148f2:	4b25      	ldr	r3, [pc, #148]	@ (8014988 <tcp_update_rcv_ann_wnd+0xa4>)
 80148f4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80148f8:	4924      	ldr	r1, [pc, #144]	@ (801498c <tcp_update_rcv_ann_wnd+0xa8>)
 80148fa:	4825      	ldr	r0, [pc, #148]	@ (8014990 <tcp_update_rcv_ann_wnd+0xac>)
 80148fc:	f009 fc26 	bl	801e14c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014904:	687a      	ldr	r2, [r7, #4]
 8014906:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8014908:	4413      	add	r3, r2
 801490a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014910:	687a      	ldr	r2, [r7, #4]
 8014912:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8014914:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8014918:	bf28      	it	cs
 801491a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801491e:	b292      	uxth	r2, r2
 8014920:	4413      	add	r3, r2
 8014922:	68fa      	ldr	r2, [r7, #12]
 8014924:	1ad3      	subs	r3, r2, r3
 8014926:	2b00      	cmp	r3, #0
 8014928:	db08      	blt.n	801493c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014936:	68fa      	ldr	r2, [r7, #12]
 8014938:	1ad3      	subs	r3, r2, r3
 801493a:	e020      	b.n	801497e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014944:	1ad3      	subs	r3, r2, r3
 8014946:	2b00      	cmp	r3, #0
 8014948:	dd03      	ble.n	8014952 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	2200      	movs	r2, #0
 801494e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014950:	e014      	b.n	801497c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801495a:	1ad3      	subs	r3, r2, r3
 801495c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801495e:	68bb      	ldr	r3, [r7, #8]
 8014960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014964:	d306      	bcc.n	8014974 <tcp_update_rcv_ann_wnd+0x90>
 8014966:	4b08      	ldr	r3, [pc, #32]	@ (8014988 <tcp_update_rcv_ann_wnd+0xa4>)
 8014968:	f240 32b6 	movw	r2, #950	@ 0x3b6
 801496c:	4909      	ldr	r1, [pc, #36]	@ (8014994 <tcp_update_rcv_ann_wnd+0xb0>)
 801496e:	4808      	ldr	r0, [pc, #32]	@ (8014990 <tcp_update_rcv_ann_wnd+0xac>)
 8014970:	f009 fbec 	bl	801e14c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8014974:	68bb      	ldr	r3, [r7, #8]
 8014976:	b29a      	uxth	r2, r3
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 801497c:	2300      	movs	r3, #0
  }
}
 801497e:	4618      	mov	r0, r3
 8014980:	3710      	adds	r7, #16
 8014982:	46bd      	mov	sp, r7
 8014984:	bd80      	pop	{r7, pc}
 8014986:	bf00      	nop
 8014988:	08020adc 	.word	0x08020adc
 801498c:	08020d38 	.word	0x08020d38
 8014990:	08020b20 	.word	0x08020b20
 8014994:	08020d5c 	.word	0x08020d5c

08014998 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8014998:	b580      	push	{r7, lr}
 801499a:	b084      	sub	sp, #16
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
 80149a0:	460b      	mov	r3, r1
 80149a2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d107      	bne.n	80149ba <tcp_recved+0x22>
 80149aa:	4b1f      	ldr	r3, [pc, #124]	@ (8014a28 <tcp_recved+0x90>)
 80149ac:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80149b0:	491e      	ldr	r1, [pc, #120]	@ (8014a2c <tcp_recved+0x94>)
 80149b2:	481f      	ldr	r0, [pc, #124]	@ (8014a30 <tcp_recved+0x98>)
 80149b4:	f009 fbca 	bl	801e14c <iprintf>
 80149b8:	e032      	b.n	8014a20 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	7d1b      	ldrb	r3, [r3, #20]
 80149be:	2b01      	cmp	r3, #1
 80149c0:	d106      	bne.n	80149d0 <tcp_recved+0x38>
 80149c2:	4b19      	ldr	r3, [pc, #100]	@ (8014a28 <tcp_recved+0x90>)
 80149c4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80149c8:	491a      	ldr	r1, [pc, #104]	@ (8014a34 <tcp_recved+0x9c>)
 80149ca:	4819      	ldr	r0, [pc, #100]	@ (8014a30 <tcp_recved+0x98>)
 80149cc:	f009 fbbe 	bl	801e14c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80149d4:	887b      	ldrh	r3, [r7, #2]
 80149d6:	4413      	add	r3, r2
 80149d8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80149da:	89fb      	ldrh	r3, [r7, #14]
 80149dc:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80149e0:	d804      	bhi.n	80149ec <tcp_recved+0x54>
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80149e6:	89fa      	ldrh	r2, [r7, #14]
 80149e8:	429a      	cmp	r2, r3
 80149ea:	d204      	bcs.n	80149f6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80149f2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80149f4:	e002      	b.n	80149fc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	89fa      	ldrh	r2, [r7, #14]
 80149fa:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80149fc:	6878      	ldr	r0, [r7, #4]
 80149fe:	f7ff ff71 	bl	80148e4 <tcp_update_rcv_ann_wnd>
 8014a02:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8014a04:	68bb      	ldr	r3, [r7, #8]
 8014a06:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8014a0a:	d309      	bcc.n	8014a20 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	8b5b      	ldrh	r3, [r3, #26]
 8014a10:	f043 0302 	orr.w	r3, r3, #2
 8014a14:	b29a      	uxth	r2, r3
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014a1a:	6878      	ldr	r0, [r7, #4]
 8014a1c:	f004 fbaa 	bl	8019174 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8014a20:	3710      	adds	r7, #16
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bd80      	pop	{r7, pc}
 8014a26:	bf00      	nop
 8014a28:	08020adc 	.word	0x08020adc
 8014a2c:	08020d78 	.word	0x08020d78
 8014a30:	08020b20 	.word	0x08020b20
 8014a34:	08020d90 	.word	0x08020d90

08014a38 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8014a38:	b480      	push	{r7}
 8014a3a:	b083      	sub	sp, #12
 8014a3c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8014a3e:	2300      	movs	r3, #0
 8014a40:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8014a42:	4b1e      	ldr	r3, [pc, #120]	@ (8014abc <tcp_new_port+0x84>)
 8014a44:	881b      	ldrh	r3, [r3, #0]
 8014a46:	3301      	adds	r3, #1
 8014a48:	b29a      	uxth	r2, r3
 8014a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8014abc <tcp_new_port+0x84>)
 8014a4c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8014a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8014abc <tcp_new_port+0x84>)
 8014a50:	881b      	ldrh	r3, [r3, #0]
 8014a52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014a56:	4293      	cmp	r3, r2
 8014a58:	d103      	bne.n	8014a62 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8014a5a:	4b18      	ldr	r3, [pc, #96]	@ (8014abc <tcp_new_port+0x84>)
 8014a5c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8014a60:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8014a62:	2300      	movs	r3, #0
 8014a64:	71fb      	strb	r3, [r7, #7]
 8014a66:	e01e      	b.n	8014aa6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014a68:	79fb      	ldrb	r3, [r7, #7]
 8014a6a:	4a15      	ldr	r2, [pc, #84]	@ (8014ac0 <tcp_new_port+0x88>)
 8014a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	603b      	str	r3, [r7, #0]
 8014a74:	e011      	b.n	8014a9a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8014a76:	683b      	ldr	r3, [r7, #0]
 8014a78:	8ada      	ldrh	r2, [r3, #22]
 8014a7a:	4b10      	ldr	r3, [pc, #64]	@ (8014abc <tcp_new_port+0x84>)
 8014a7c:	881b      	ldrh	r3, [r3, #0]
 8014a7e:	429a      	cmp	r2, r3
 8014a80:	d108      	bne.n	8014a94 <tcp_new_port+0x5c>
        n++;
 8014a82:	88bb      	ldrh	r3, [r7, #4]
 8014a84:	3301      	adds	r3, #1
 8014a86:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8014a88:	88bb      	ldrh	r3, [r7, #4]
 8014a8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014a8e:	d3d8      	bcc.n	8014a42 <tcp_new_port+0xa>
          return 0;
 8014a90:	2300      	movs	r3, #0
 8014a92:	e00d      	b.n	8014ab0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014a94:	683b      	ldr	r3, [r7, #0]
 8014a96:	68db      	ldr	r3, [r3, #12]
 8014a98:	603b      	str	r3, [r7, #0]
 8014a9a:	683b      	ldr	r3, [r7, #0]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d1ea      	bne.n	8014a76 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8014aa0:	79fb      	ldrb	r3, [r7, #7]
 8014aa2:	3301      	adds	r3, #1
 8014aa4:	71fb      	strb	r3, [r7, #7]
 8014aa6:	79fb      	ldrb	r3, [r7, #7]
 8014aa8:	2b03      	cmp	r3, #3
 8014aaa:	d9dd      	bls.n	8014a68 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8014aac:	4b03      	ldr	r3, [pc, #12]	@ (8014abc <tcp_new_port+0x84>)
 8014aae:	881b      	ldrh	r3, [r3, #0]
}
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	370c      	adds	r7, #12
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aba:	4770      	bx	lr
 8014abc:	200000b8 	.word	0x200000b8
 8014ac0:	08068460 	.word	0x08068460

08014ac4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8014ac4:	b5b0      	push	{r4, r5, r7, lr}
 8014ac6:	b090      	sub	sp, #64	@ 0x40
 8014ac8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8014aca:	2300      	movs	r3, #0
 8014acc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8014ad0:	4b95      	ldr	r3, [pc, #596]	@ (8014d28 <tcp_slowtmr+0x264>)
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	3301      	adds	r3, #1
 8014ad6:	4a94      	ldr	r2, [pc, #592]	@ (8014d28 <tcp_slowtmr+0x264>)
 8014ad8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8014ada:	4b94      	ldr	r3, [pc, #592]	@ (8014d2c <tcp_slowtmr+0x268>)
 8014adc:	781b      	ldrb	r3, [r3, #0]
 8014ade:	3301      	adds	r3, #1
 8014ae0:	b2da      	uxtb	r2, r3
 8014ae2:	4b92      	ldr	r3, [pc, #584]	@ (8014d2c <tcp_slowtmr+0x268>)
 8014ae4:	701a      	strb	r2, [r3, #0]
 8014ae6:	e000      	b.n	8014aea <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8014ae8:	bf00      	nop
  prev = NULL;
 8014aea:	2300      	movs	r3, #0
 8014aec:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8014aee:	4b90      	ldr	r3, [pc, #576]	@ (8014d30 <tcp_slowtmr+0x26c>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8014af4:	e29d      	b.n	8015032 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8014af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014af8:	7d1b      	ldrb	r3, [r3, #20]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d106      	bne.n	8014b0c <tcp_slowtmr+0x48>
 8014afe:	4b8d      	ldr	r3, [pc, #564]	@ (8014d34 <tcp_slowtmr+0x270>)
 8014b00:	f240 42be 	movw	r2, #1214	@ 0x4be
 8014b04:	498c      	ldr	r1, [pc, #560]	@ (8014d38 <tcp_slowtmr+0x274>)
 8014b06:	488d      	ldr	r0, [pc, #564]	@ (8014d3c <tcp_slowtmr+0x278>)
 8014b08:	f009 fb20 	bl	801e14c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8014b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b0e:	7d1b      	ldrb	r3, [r3, #20]
 8014b10:	2b01      	cmp	r3, #1
 8014b12:	d106      	bne.n	8014b22 <tcp_slowtmr+0x5e>
 8014b14:	4b87      	ldr	r3, [pc, #540]	@ (8014d34 <tcp_slowtmr+0x270>)
 8014b16:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8014b1a:	4989      	ldr	r1, [pc, #548]	@ (8014d40 <tcp_slowtmr+0x27c>)
 8014b1c:	4887      	ldr	r0, [pc, #540]	@ (8014d3c <tcp_slowtmr+0x278>)
 8014b1e:	f009 fb15 	bl	801e14c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8014b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b24:	7d1b      	ldrb	r3, [r3, #20]
 8014b26:	2b0a      	cmp	r3, #10
 8014b28:	d106      	bne.n	8014b38 <tcp_slowtmr+0x74>
 8014b2a:	4b82      	ldr	r3, [pc, #520]	@ (8014d34 <tcp_slowtmr+0x270>)
 8014b2c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8014b30:	4984      	ldr	r1, [pc, #528]	@ (8014d44 <tcp_slowtmr+0x280>)
 8014b32:	4882      	ldr	r0, [pc, #520]	@ (8014d3c <tcp_slowtmr+0x278>)
 8014b34:	f009 fb0a 	bl	801e14c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8014b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b3a:	7f9a      	ldrb	r2, [r3, #30]
 8014b3c:	4b7b      	ldr	r3, [pc, #492]	@ (8014d2c <tcp_slowtmr+0x268>)
 8014b3e:	781b      	ldrb	r3, [r3, #0]
 8014b40:	429a      	cmp	r2, r3
 8014b42:	d105      	bne.n	8014b50 <tcp_slowtmr+0x8c>
      prev = pcb;
 8014b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b46:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8014b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b4a:	68db      	ldr	r3, [r3, #12]
 8014b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8014b4e:	e270      	b.n	8015032 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8014b50:	4b76      	ldr	r3, [pc, #472]	@ (8014d2c <tcp_slowtmr+0x268>)
 8014b52:	781a      	ldrb	r2, [r3, #0]
 8014b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b56:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8014b58:	2300      	movs	r3, #0
 8014b5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8014b5e:	2300      	movs	r3, #0
 8014b60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8014b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b66:	7d1b      	ldrb	r3, [r3, #20]
 8014b68:	2b02      	cmp	r3, #2
 8014b6a:	d10a      	bne.n	8014b82 <tcp_slowtmr+0xbe>
 8014b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014b72:	2b05      	cmp	r3, #5
 8014b74:	d905      	bls.n	8014b82 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8014b76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014b7a:	3301      	adds	r3, #1
 8014b7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014b80:	e11e      	b.n	8014dc0 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8014b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014b88:	2b0b      	cmp	r3, #11
 8014b8a:	d905      	bls.n	8014b98 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8014b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014b90:	3301      	adds	r3, #1
 8014b92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014b96:	e113      	b.n	8014dc0 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8014b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b9a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d075      	beq.n	8014c8e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8014ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d006      	beq.n	8014bb8 <tcp_slowtmr+0xf4>
 8014baa:	4b62      	ldr	r3, [pc, #392]	@ (8014d34 <tcp_slowtmr+0x270>)
 8014bac:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8014bb0:	4965      	ldr	r1, [pc, #404]	@ (8014d48 <tcp_slowtmr+0x284>)
 8014bb2:	4862      	ldr	r0, [pc, #392]	@ (8014d3c <tcp_slowtmr+0x278>)
 8014bb4:	f009 faca 	bl	801e14c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8014bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d106      	bne.n	8014bce <tcp_slowtmr+0x10a>
 8014bc0:	4b5c      	ldr	r3, [pc, #368]	@ (8014d34 <tcp_slowtmr+0x270>)
 8014bc2:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8014bc6:	4961      	ldr	r1, [pc, #388]	@ (8014d4c <tcp_slowtmr+0x288>)
 8014bc8:	485c      	ldr	r0, [pc, #368]	@ (8014d3c <tcp_slowtmr+0x278>)
 8014bca:	f009 fabf 	bl	801e14c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8014bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bd0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8014bd4:	2b0b      	cmp	r3, #11
 8014bd6:	d905      	bls.n	8014be4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8014bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014bdc:	3301      	adds	r3, #1
 8014bde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014be2:	e0ed      	b.n	8014dc0 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8014be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014be6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014bea:	3b01      	subs	r3, #1
 8014bec:	4a58      	ldr	r2, [pc, #352]	@ (8014d50 <tcp_slowtmr+0x28c>)
 8014bee:	5cd3      	ldrb	r3, [r2, r3]
 8014bf0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8014bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bf4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8014bf8:	7c7a      	ldrb	r2, [r7, #17]
 8014bfa:	429a      	cmp	r2, r3
 8014bfc:	d907      	bls.n	8014c0e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8014bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c00:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8014c04:	3301      	adds	r3, #1
 8014c06:	b2da      	uxtb	r2, r3
 8014c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c0a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8014c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c10:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8014c14:	7c7a      	ldrb	r2, [r7, #17]
 8014c16:	429a      	cmp	r2, r3
 8014c18:	f200 80d2 	bhi.w	8014dc0 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8014c1c:	2301      	movs	r3, #1
 8014c1e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8014c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d108      	bne.n	8014c3c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8014c2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014c2c:	f005 f94a 	bl	8019ec4 <tcp_zero_window_probe>
 8014c30:	4603      	mov	r3, r0
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d014      	beq.n	8014c60 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8014c36:	2300      	movs	r3, #0
 8014c38:	623b      	str	r3, [r7, #32]
 8014c3a:	e011      	b.n	8014c60 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8014c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014c42:	4619      	mov	r1, r3
 8014c44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014c46:	f004 f80f 	bl	8018c68 <tcp_split_unsent_seg>
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d107      	bne.n	8014c60 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8014c50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014c52:	f004 fa8f 	bl	8019174 <tcp_output>
 8014c56:	4603      	mov	r3, r0
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d101      	bne.n	8014c60 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8014c60:	6a3b      	ldr	r3, [r7, #32]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	f000 80ac 	beq.w	8014dc0 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8014c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8014c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c72:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014c76:	2b06      	cmp	r3, #6
 8014c78:	f200 80a2 	bhi.w	8014dc0 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8014c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c7e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014c82:	3301      	adds	r3, #1
 8014c84:	b2da      	uxtb	r2, r3
 8014c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c88:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8014c8c:	e098      	b.n	8014dc0 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8014c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c90:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	db0f      	blt.n	8014cb8 <tcp_slowtmr+0x1f4>
 8014c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c9a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014c9e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8014ca2:	4293      	cmp	r3, r2
 8014ca4:	d008      	beq.n	8014cb8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8014ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ca8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014cac:	b29b      	uxth	r3, r3
 8014cae:	3301      	adds	r3, #1
 8014cb0:	b29b      	uxth	r3, r3
 8014cb2:	b21a      	sxth	r2, r3
 8014cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cb6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8014cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cba:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8014cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cc0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8014cc4:	429a      	cmp	r2, r3
 8014cc6:	db7b      	blt.n	8014dc0 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8014cc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014cca:	f004 fd47 	bl	801975c <tcp_rexmit_rto_prepare>
 8014cce:	4603      	mov	r3, r0
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d007      	beq.n	8014ce4 <tcp_slowtmr+0x220>
 8014cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d171      	bne.n	8014dc0 <tcp_slowtmr+0x2fc>
 8014cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d06d      	beq.n	8014dc0 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8014ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ce6:	7d1b      	ldrb	r3, [r3, #20]
 8014ce8:	2b02      	cmp	r3, #2
 8014cea:	d03a      	beq.n	8014d62 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8014cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014cf2:	2b0c      	cmp	r3, #12
 8014cf4:	bf28      	it	cs
 8014cf6:	230c      	movcs	r3, #12
 8014cf8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8014cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cfc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014d00:	10db      	asrs	r3, r3, #3
 8014d02:	b21b      	sxth	r3, r3
 8014d04:	461a      	mov	r2, r3
 8014d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d08:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014d0c:	4413      	add	r3, r2
 8014d0e:	7efa      	ldrb	r2, [r7, #27]
 8014d10:	4910      	ldr	r1, [pc, #64]	@ (8014d54 <tcp_slowtmr+0x290>)
 8014d12:	5c8a      	ldrb	r2, [r1, r2]
 8014d14:	4093      	lsls	r3, r2
 8014d16:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8014d18:	697b      	ldr	r3, [r7, #20]
 8014d1a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8014d1e:	4293      	cmp	r3, r2
 8014d20:	dc1a      	bgt.n	8014d58 <tcp_slowtmr+0x294>
 8014d22:	697b      	ldr	r3, [r7, #20]
 8014d24:	b21a      	sxth	r2, r3
 8014d26:	e019      	b.n	8014d5c <tcp_slowtmr+0x298>
 8014d28:	2000e4f0 	.word	0x2000e4f0
 8014d2c:	2000e506 	.word	0x2000e506
 8014d30:	2000e4fc 	.word	0x2000e4fc
 8014d34:	08020adc 	.word	0x08020adc
 8014d38:	08020e20 	.word	0x08020e20
 8014d3c:	08020b20 	.word	0x08020b20
 8014d40:	08020e4c 	.word	0x08020e4c
 8014d44:	08020e78 	.word	0x08020e78
 8014d48:	08020ea8 	.word	0x08020ea8
 8014d4c:	08020edc 	.word	0x08020edc
 8014d50:	08068458 	.word	0x08068458
 8014d54:	08068448 	.word	0x08068448
 8014d58:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8014d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8014d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d64:	2200      	movs	r2, #0
 8014d66:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8014d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014d74:	4293      	cmp	r3, r2
 8014d76:	bf28      	it	cs
 8014d78:	4613      	movcs	r3, r2
 8014d7a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8014d7c:	8a7b      	ldrh	r3, [r7, #18]
 8014d7e:	085b      	lsrs	r3, r3, #1
 8014d80:	b29a      	uxth	r2, r3
 8014d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d84:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8014d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d8a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014d92:	005b      	lsls	r3, r3, #1
 8014d94:	b29b      	uxth	r3, r3
 8014d96:	429a      	cmp	r2, r3
 8014d98:	d206      	bcs.n	8014da8 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8014d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014d9e:	005b      	lsls	r3, r3, #1
 8014da0:	b29a      	uxth	r2, r3
 8014da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014da4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8014da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014daa:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8014dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8014db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014db4:	2200      	movs	r2, #0
 8014db6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8014dba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014dbc:	f004 fd3e 	bl	801983c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8014dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dc2:	7d1b      	ldrb	r3, [r3, #20]
 8014dc4:	2b06      	cmp	r3, #6
 8014dc6:	d111      	bne.n	8014dec <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8014dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dca:	8b5b      	ldrh	r3, [r3, #26]
 8014dcc:	f003 0310 	and.w	r3, r3, #16
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d00b      	beq.n	8014dec <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014dd4:	4b9c      	ldr	r3, [pc, #624]	@ (8015048 <tcp_slowtmr+0x584>)
 8014dd6:	681a      	ldr	r2, [r3, #0]
 8014dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dda:	6a1b      	ldr	r3, [r3, #32]
 8014ddc:	1ad3      	subs	r3, r2, r3
 8014dde:	2b28      	cmp	r3, #40	@ 0x28
 8014de0:	d904      	bls.n	8014dec <tcp_slowtmr+0x328>
          ++pcb_remove;
 8014de2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014de6:	3301      	adds	r3, #1
 8014de8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dee:	7a5b      	ldrb	r3, [r3, #9]
 8014df0:	f003 0308 	and.w	r3, r3, #8
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d04a      	beq.n	8014e8e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8014df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dfa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014dfc:	2b04      	cmp	r3, #4
 8014dfe:	d003      	beq.n	8014e08 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8014e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e02:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8014e04:	2b07      	cmp	r3, #7
 8014e06:	d142      	bne.n	8014e8e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014e08:	4b8f      	ldr	r3, [pc, #572]	@ (8015048 <tcp_slowtmr+0x584>)
 8014e0a:	681a      	ldr	r2, [r3, #0]
 8014e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e0e:	6a1b      	ldr	r3, [r3, #32]
 8014e10:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8014e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e14:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8014e18:	4b8c      	ldr	r3, [pc, #560]	@ (801504c <tcp_slowtmr+0x588>)
 8014e1a:	440b      	add	r3, r1
 8014e1c:	498c      	ldr	r1, [pc, #560]	@ (8015050 <tcp_slowtmr+0x58c>)
 8014e1e:	fba1 1303 	umull	r1, r3, r1, r3
 8014e22:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014e24:	429a      	cmp	r2, r3
 8014e26:	d90a      	bls.n	8014e3e <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8014e28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014e2c:	3301      	adds	r3, #1
 8014e2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8014e32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014e36:	3301      	adds	r3, #1
 8014e38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014e3c:	e027      	b.n	8014e8e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014e3e:	4b82      	ldr	r3, [pc, #520]	@ (8015048 <tcp_slowtmr+0x584>)
 8014e40:	681a      	ldr	r2, [r3, #0]
 8014e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e44:	6a1b      	ldr	r3, [r3, #32]
 8014e46:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8014e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e4a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8014e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e50:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8014e54:	4618      	mov	r0, r3
 8014e56:	4b7f      	ldr	r3, [pc, #508]	@ (8015054 <tcp_slowtmr+0x590>)
 8014e58:	fb00 f303 	mul.w	r3, r0, r3
 8014e5c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8014e5e:	497c      	ldr	r1, [pc, #496]	@ (8015050 <tcp_slowtmr+0x58c>)
 8014e60:	fba1 1303 	umull	r1, r3, r1, r3
 8014e64:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014e66:	429a      	cmp	r2, r3
 8014e68:	d911      	bls.n	8014e8e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8014e6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014e6c:	f004 ffea 	bl	8019e44 <tcp_keepalive>
 8014e70:	4603      	mov	r3, r0
 8014e72:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8014e76:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d107      	bne.n	8014e8e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8014e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e80:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8014e84:	3301      	adds	r3, #1
 8014e86:	b2da      	uxtb	r2, r3
 8014e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e8a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8014e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d011      	beq.n	8014eba <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8014e96:	4b6c      	ldr	r3, [pc, #432]	@ (8015048 <tcp_slowtmr+0x584>)
 8014e98:	681a      	ldr	r2, [r3, #0]
 8014e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e9c:	6a1b      	ldr	r3, [r3, #32]
 8014e9e:	1ad2      	subs	r2, r2, r3
 8014ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ea2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8014ea6:	4619      	mov	r1, r3
 8014ea8:	460b      	mov	r3, r1
 8014eaa:	005b      	lsls	r3, r3, #1
 8014eac:	440b      	add	r3, r1
 8014eae:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8014eb0:	429a      	cmp	r2, r3
 8014eb2:	d302      	bcc.n	8014eba <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8014eb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014eb6:	f000 feab 	bl	8015c10 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8014eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ebc:	7d1b      	ldrb	r3, [r3, #20]
 8014ebe:	2b03      	cmp	r3, #3
 8014ec0:	d10b      	bne.n	8014eda <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014ec2:	4b61      	ldr	r3, [pc, #388]	@ (8015048 <tcp_slowtmr+0x584>)
 8014ec4:	681a      	ldr	r2, [r3, #0]
 8014ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ec8:	6a1b      	ldr	r3, [r3, #32]
 8014eca:	1ad3      	subs	r3, r2, r3
 8014ecc:	2b28      	cmp	r3, #40	@ 0x28
 8014ece:	d904      	bls.n	8014eda <tcp_slowtmr+0x416>
        ++pcb_remove;
 8014ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014ed4:	3301      	adds	r3, #1
 8014ed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8014eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014edc:	7d1b      	ldrb	r3, [r3, #20]
 8014ede:	2b09      	cmp	r3, #9
 8014ee0:	d10b      	bne.n	8014efa <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014ee2:	4b59      	ldr	r3, [pc, #356]	@ (8015048 <tcp_slowtmr+0x584>)
 8014ee4:	681a      	ldr	r2, [r3, #0]
 8014ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ee8:	6a1b      	ldr	r3, [r3, #32]
 8014eea:	1ad3      	subs	r3, r2, r3
 8014eec:	2bf0      	cmp	r3, #240	@ 0xf0
 8014eee:	d904      	bls.n	8014efa <tcp_slowtmr+0x436>
        ++pcb_remove;
 8014ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014ef4:	3301      	adds	r3, #1
 8014ef6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8014efa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d060      	beq.n	8014fc4 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8014f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014f08:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8014f0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014f0c:	f000 fccc 	bl	80158a8 <tcp_pcb_purge>
      if (prev != NULL) {
 8014f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d010      	beq.n	8014f38 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8014f16:	4b50      	ldr	r3, [pc, #320]	@ (8015058 <tcp_slowtmr+0x594>)
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014f1c:	429a      	cmp	r2, r3
 8014f1e:	d106      	bne.n	8014f2e <tcp_slowtmr+0x46a>
 8014f20:	4b4e      	ldr	r3, [pc, #312]	@ (801505c <tcp_slowtmr+0x598>)
 8014f22:	f240 526d 	movw	r2, #1389	@ 0x56d
 8014f26:	494e      	ldr	r1, [pc, #312]	@ (8015060 <tcp_slowtmr+0x59c>)
 8014f28:	484e      	ldr	r0, [pc, #312]	@ (8015064 <tcp_slowtmr+0x5a0>)
 8014f2a:	f009 f90f 	bl	801e14c <iprintf>
        prev->next = pcb->next;
 8014f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f30:	68da      	ldr	r2, [r3, #12]
 8014f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f34:	60da      	str	r2, [r3, #12]
 8014f36:	e00f      	b.n	8014f58 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8014f38:	4b47      	ldr	r3, [pc, #284]	@ (8015058 <tcp_slowtmr+0x594>)
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014f3e:	429a      	cmp	r2, r3
 8014f40:	d006      	beq.n	8014f50 <tcp_slowtmr+0x48c>
 8014f42:	4b46      	ldr	r3, [pc, #280]	@ (801505c <tcp_slowtmr+0x598>)
 8014f44:	f240 5271 	movw	r2, #1393	@ 0x571
 8014f48:	4947      	ldr	r1, [pc, #284]	@ (8015068 <tcp_slowtmr+0x5a4>)
 8014f4a:	4846      	ldr	r0, [pc, #280]	@ (8015064 <tcp_slowtmr+0x5a0>)
 8014f4c:	f009 f8fe 	bl	801e14c <iprintf>
        tcp_active_pcbs = pcb->next;
 8014f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f52:	68db      	ldr	r3, [r3, #12]
 8014f54:	4a40      	ldr	r2, [pc, #256]	@ (8015058 <tcp_slowtmr+0x594>)
 8014f56:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8014f58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d013      	beq.n	8014f88 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f62:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8014f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f66:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014f68:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8014f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f6c:	3304      	adds	r3, #4
 8014f6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014f70:	8ad2      	ldrh	r2, [r2, #22]
 8014f72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014f74:	8b09      	ldrh	r1, [r1, #24]
 8014f76:	9102      	str	r1, [sp, #8]
 8014f78:	9201      	str	r2, [sp, #4]
 8014f7a:	9300      	str	r3, [sp, #0]
 8014f7c:	462b      	mov	r3, r5
 8014f7e:	4622      	mov	r2, r4
 8014f80:	4601      	mov	r1, r0
 8014f82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014f84:	f004 feaa 	bl	8019cdc <tcp_rst>
      err_arg = pcb->callback_arg;
 8014f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f8a:	691b      	ldr	r3, [r3, #16]
 8014f8c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8014f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f90:	7d1b      	ldrb	r3, [r3, #20]
 8014f92:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8014f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f96:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8014f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f9a:	68db      	ldr	r3, [r3, #12]
 8014f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8014f9e:	6838      	ldr	r0, [r7, #0]
 8014fa0:	f7fe ffee 	bl	8013f80 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8014fa4:	4b31      	ldr	r3, [pc, #196]	@ (801506c <tcp_slowtmr+0x5a8>)
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d004      	beq.n	8014fba <tcp_slowtmr+0x4f6>
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	f06f 010c 	mvn.w	r1, #12
 8014fb6:	68b8      	ldr	r0, [r7, #8]
 8014fb8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8014fba:	4b2c      	ldr	r3, [pc, #176]	@ (801506c <tcp_slowtmr+0x5a8>)
 8014fbc:	781b      	ldrb	r3, [r3, #0]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d037      	beq.n	8015032 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8014fc2:	e592      	b.n	8014aea <tcp_slowtmr+0x26>
      prev = pcb;
 8014fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8014fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fca:	68db      	ldr	r3, [r3, #12]
 8014fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8014fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fd0:	7f1b      	ldrb	r3, [r3, #28]
 8014fd2:	3301      	adds	r3, #1
 8014fd4:	b2da      	uxtb	r2, r3
 8014fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fd8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8014fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fdc:	7f1a      	ldrb	r2, [r3, #28]
 8014fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fe0:	7f5b      	ldrb	r3, [r3, #29]
 8014fe2:	429a      	cmp	r2, r3
 8014fe4:	d325      	bcc.n	8015032 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8014fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fe8:	2200      	movs	r2, #0
 8014fea:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8014fec:	4b1f      	ldr	r3, [pc, #124]	@ (801506c <tcp_slowtmr+0x5a8>)
 8014fee:	2200      	movs	r2, #0
 8014ff0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8014ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d00b      	beq.n	8015014 <tcp_slowtmr+0x550>
 8014ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015002:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015004:	6912      	ldr	r2, [r2, #16]
 8015006:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015008:	4610      	mov	r0, r2
 801500a:	4798      	blx	r3
 801500c:	4603      	mov	r3, r0
 801500e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8015012:	e002      	b.n	801501a <tcp_slowtmr+0x556>
 8015014:	2300      	movs	r3, #0
 8015016:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801501a:	4b14      	ldr	r3, [pc, #80]	@ (801506c <tcp_slowtmr+0x5a8>)
 801501c:	781b      	ldrb	r3, [r3, #0]
 801501e:	2b00      	cmp	r3, #0
 8015020:	f47f ad62 	bne.w	8014ae8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015024:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8015028:	2b00      	cmp	r3, #0
 801502a:	d102      	bne.n	8015032 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801502c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801502e:	f004 f8a1 	bl	8019174 <tcp_output>
  while (pcb != NULL) {
 8015032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015034:	2b00      	cmp	r3, #0
 8015036:	f47f ad5e 	bne.w	8014af6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801503a:	2300      	movs	r3, #0
 801503c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801503e:	4b0c      	ldr	r3, [pc, #48]	@ (8015070 <tcp_slowtmr+0x5ac>)
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015044:	e069      	b.n	801511a <tcp_slowtmr+0x656>
 8015046:	bf00      	nop
 8015048:	2000e4f0 	.word	0x2000e4f0
 801504c:	000a4cb8 	.word	0x000a4cb8
 8015050:	10624dd3 	.word	0x10624dd3
 8015054:	000124f8 	.word	0x000124f8
 8015058:	2000e4fc 	.word	0x2000e4fc
 801505c:	08020adc 	.word	0x08020adc
 8015060:	08020f14 	.word	0x08020f14
 8015064:	08020b20 	.word	0x08020b20
 8015068:	08020f40 	.word	0x08020f40
 801506c:	2000e504 	.word	0x2000e504
 8015070:	2000e500 	.word	0x2000e500
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015076:	7d1b      	ldrb	r3, [r3, #20]
 8015078:	2b0a      	cmp	r3, #10
 801507a:	d006      	beq.n	801508a <tcp_slowtmr+0x5c6>
 801507c:	4b2b      	ldr	r3, [pc, #172]	@ (801512c <tcp_slowtmr+0x668>)
 801507e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8015082:	492b      	ldr	r1, [pc, #172]	@ (8015130 <tcp_slowtmr+0x66c>)
 8015084:	482b      	ldr	r0, [pc, #172]	@ (8015134 <tcp_slowtmr+0x670>)
 8015086:	f009 f861 	bl	801e14c <iprintf>
    pcb_remove = 0;
 801508a:	2300      	movs	r3, #0
 801508c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015090:	4b29      	ldr	r3, [pc, #164]	@ (8015138 <tcp_slowtmr+0x674>)
 8015092:	681a      	ldr	r2, [r3, #0]
 8015094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015096:	6a1b      	ldr	r3, [r3, #32]
 8015098:	1ad3      	subs	r3, r2, r3
 801509a:	2bf0      	cmp	r3, #240	@ 0xf0
 801509c:	d904      	bls.n	80150a8 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801509e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80150a2:	3301      	adds	r3, #1
 80150a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80150a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d02f      	beq.n	8015110 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80150b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80150b2:	f000 fbf9 	bl	80158a8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80150b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d010      	beq.n	80150de <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80150bc:	4b1f      	ldr	r3, [pc, #124]	@ (801513c <tcp_slowtmr+0x678>)
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80150c2:	429a      	cmp	r2, r3
 80150c4:	d106      	bne.n	80150d4 <tcp_slowtmr+0x610>
 80150c6:	4b19      	ldr	r3, [pc, #100]	@ (801512c <tcp_slowtmr+0x668>)
 80150c8:	f240 52af 	movw	r2, #1455	@ 0x5af
 80150cc:	491c      	ldr	r1, [pc, #112]	@ (8015140 <tcp_slowtmr+0x67c>)
 80150ce:	4819      	ldr	r0, [pc, #100]	@ (8015134 <tcp_slowtmr+0x670>)
 80150d0:	f009 f83c 	bl	801e14c <iprintf>
        prev->next = pcb->next;
 80150d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150d6:	68da      	ldr	r2, [r3, #12]
 80150d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150da:	60da      	str	r2, [r3, #12]
 80150dc:	e00f      	b.n	80150fe <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80150de:	4b17      	ldr	r3, [pc, #92]	@ (801513c <tcp_slowtmr+0x678>)
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80150e4:	429a      	cmp	r2, r3
 80150e6:	d006      	beq.n	80150f6 <tcp_slowtmr+0x632>
 80150e8:	4b10      	ldr	r3, [pc, #64]	@ (801512c <tcp_slowtmr+0x668>)
 80150ea:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80150ee:	4915      	ldr	r1, [pc, #84]	@ (8015144 <tcp_slowtmr+0x680>)
 80150f0:	4810      	ldr	r0, [pc, #64]	@ (8015134 <tcp_slowtmr+0x670>)
 80150f2:	f009 f82b 	bl	801e14c <iprintf>
        tcp_tw_pcbs = pcb->next;
 80150f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150f8:	68db      	ldr	r3, [r3, #12]
 80150fa:	4a10      	ldr	r2, [pc, #64]	@ (801513c <tcp_slowtmr+0x678>)
 80150fc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80150fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015100:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8015102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015104:	68db      	ldr	r3, [r3, #12]
 8015106:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8015108:	69f8      	ldr	r0, [r7, #28]
 801510a:	f7fe ff39 	bl	8013f80 <tcp_free>
 801510e:	e004      	b.n	801511a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8015110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015112:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015116:	68db      	ldr	r3, [r3, #12]
 8015118:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801511a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801511c:	2b00      	cmp	r3, #0
 801511e:	d1a9      	bne.n	8015074 <tcp_slowtmr+0x5b0>
    }
  }
}
 8015120:	bf00      	nop
 8015122:	bf00      	nop
 8015124:	3730      	adds	r7, #48	@ 0x30
 8015126:	46bd      	mov	sp, r7
 8015128:	bdb0      	pop	{r4, r5, r7, pc}
 801512a:	bf00      	nop
 801512c:	08020adc 	.word	0x08020adc
 8015130:	08020f6c 	.word	0x08020f6c
 8015134:	08020b20 	.word	0x08020b20
 8015138:	2000e4f0 	.word	0x2000e4f0
 801513c:	2000e500 	.word	0x2000e500
 8015140:	08020f9c 	.word	0x08020f9c
 8015144:	08020fc4 	.word	0x08020fc4

08015148 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801514e:	4b2d      	ldr	r3, [pc, #180]	@ (8015204 <tcp_fasttmr+0xbc>)
 8015150:	781b      	ldrb	r3, [r3, #0]
 8015152:	3301      	adds	r3, #1
 8015154:	b2da      	uxtb	r2, r3
 8015156:	4b2b      	ldr	r3, [pc, #172]	@ (8015204 <tcp_fasttmr+0xbc>)
 8015158:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801515a:	4b2b      	ldr	r3, [pc, #172]	@ (8015208 <tcp_fasttmr+0xc0>)
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015160:	e048      	b.n	80151f4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	7f9a      	ldrb	r2, [r3, #30]
 8015166:	4b27      	ldr	r3, [pc, #156]	@ (8015204 <tcp_fasttmr+0xbc>)
 8015168:	781b      	ldrb	r3, [r3, #0]
 801516a:	429a      	cmp	r2, r3
 801516c:	d03f      	beq.n	80151ee <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801516e:	4b25      	ldr	r3, [pc, #148]	@ (8015204 <tcp_fasttmr+0xbc>)
 8015170:	781a      	ldrb	r2, [r3, #0]
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	8b5b      	ldrh	r3, [r3, #26]
 801517a:	f003 0301 	and.w	r3, r3, #1
 801517e:	2b00      	cmp	r3, #0
 8015180:	d010      	beq.n	80151a4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	8b5b      	ldrh	r3, [r3, #26]
 8015186:	f043 0302 	orr.w	r3, r3, #2
 801518a:	b29a      	uxth	r2, r3
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8015190:	6878      	ldr	r0, [r7, #4]
 8015192:	f003 ffef 	bl	8019174 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	8b5b      	ldrh	r3, [r3, #26]
 801519a:	f023 0303 	bic.w	r3, r3, #3
 801519e:	b29a      	uxth	r2, r3
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	8b5b      	ldrh	r3, [r3, #26]
 80151a8:	f003 0308 	and.w	r3, r3, #8
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d009      	beq.n	80151c4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	8b5b      	ldrh	r3, [r3, #26]
 80151b4:	f023 0308 	bic.w	r3, r3, #8
 80151b8:	b29a      	uxth	r2, r3
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80151be:	6878      	ldr	r0, [r7, #4]
 80151c0:	f7ff f872 	bl	80142a8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	68db      	ldr	r3, [r3, #12]
 80151c8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d00a      	beq.n	80151e8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80151d2:	4b0e      	ldr	r3, [pc, #56]	@ (801520c <tcp_fasttmr+0xc4>)
 80151d4:	2200      	movs	r2, #0
 80151d6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80151d8:	6878      	ldr	r0, [r7, #4]
 80151da:	f000 f819 	bl	8015210 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80151de:	4b0b      	ldr	r3, [pc, #44]	@ (801520c <tcp_fasttmr+0xc4>)
 80151e0:	781b      	ldrb	r3, [r3, #0]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d000      	beq.n	80151e8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80151e6:	e7b8      	b.n	801515a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80151e8:	683b      	ldr	r3, [r7, #0]
 80151ea:	607b      	str	r3, [r7, #4]
 80151ec:	e002      	b.n	80151f4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	68db      	ldr	r3, [r3, #12]
 80151f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d1b3      	bne.n	8015162 <tcp_fasttmr+0x1a>
    }
  }
}
 80151fa:	bf00      	nop
 80151fc:	bf00      	nop
 80151fe:	3708      	adds	r7, #8
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}
 8015204:	2000e506 	.word	0x2000e506
 8015208:	2000e4fc 	.word	0x2000e4fc
 801520c:	2000e504 	.word	0x2000e504

08015210 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8015210:	b590      	push	{r4, r7, lr}
 8015212:	b085      	sub	sp, #20
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d109      	bne.n	8015232 <tcp_process_refused_data+0x22>
 801521e:	4b37      	ldr	r3, [pc, #220]	@ (80152fc <tcp_process_refused_data+0xec>)
 8015220:	f240 6209 	movw	r2, #1545	@ 0x609
 8015224:	4936      	ldr	r1, [pc, #216]	@ (8015300 <tcp_process_refused_data+0xf0>)
 8015226:	4837      	ldr	r0, [pc, #220]	@ (8015304 <tcp_process_refused_data+0xf4>)
 8015228:	f008 ff90 	bl	801e14c <iprintf>
 801522c:	f06f 030f 	mvn.w	r3, #15
 8015230:	e060      	b.n	80152f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015236:	7b5b      	ldrb	r3, [r3, #13]
 8015238:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801523e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	2200      	movs	r2, #0
 8015244:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801524c:	2b00      	cmp	r3, #0
 801524e:	d00b      	beq.n	8015268 <tcp_process_refused_data+0x58>
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	6918      	ldr	r0, [r3, #16]
 801525a:	2300      	movs	r3, #0
 801525c:	68ba      	ldr	r2, [r7, #8]
 801525e:	6879      	ldr	r1, [r7, #4]
 8015260:	47a0      	blx	r4
 8015262:	4603      	mov	r3, r0
 8015264:	73fb      	strb	r3, [r7, #15]
 8015266:	e007      	b.n	8015278 <tcp_process_refused_data+0x68>
 8015268:	2300      	movs	r3, #0
 801526a:	68ba      	ldr	r2, [r7, #8]
 801526c:	6879      	ldr	r1, [r7, #4]
 801526e:	2000      	movs	r0, #0
 8015270:	f000 f8a4 	bl	80153bc <tcp_recv_null>
 8015274:	4603      	mov	r3, r0
 8015276:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d12a      	bne.n	80152d6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8015280:	7bbb      	ldrb	r3, [r7, #14]
 8015282:	f003 0320 	and.w	r3, r3, #32
 8015286:	2b00      	cmp	r3, #0
 8015288:	d033      	beq.n	80152f2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801528e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015292:	d005      	beq.n	80152a0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015298:	3301      	adds	r3, #1
 801529a:	b29a      	uxth	r2, r3
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d00b      	beq.n	80152c2 <tcp_process_refused_data+0xb2>
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	6918      	ldr	r0, [r3, #16]
 80152b4:	2300      	movs	r3, #0
 80152b6:	2200      	movs	r2, #0
 80152b8:	6879      	ldr	r1, [r7, #4]
 80152ba:	47a0      	blx	r4
 80152bc:	4603      	mov	r3, r0
 80152be:	73fb      	strb	r3, [r7, #15]
 80152c0:	e001      	b.n	80152c6 <tcp_process_refused_data+0xb6>
 80152c2:	2300      	movs	r3, #0
 80152c4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80152c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80152ca:	f113 0f0d 	cmn.w	r3, #13
 80152ce:	d110      	bne.n	80152f2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80152d0:	f06f 030c 	mvn.w	r3, #12
 80152d4:	e00e      	b.n	80152f4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80152d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80152da:	f113 0f0d 	cmn.w	r3, #13
 80152de:	d102      	bne.n	80152e6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80152e0:	f06f 030c 	mvn.w	r3, #12
 80152e4:	e006      	b.n	80152f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	68ba      	ldr	r2, [r7, #8]
 80152ea:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80152ec:	f06f 0304 	mvn.w	r3, #4
 80152f0:	e000      	b.n	80152f4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80152f2:	2300      	movs	r3, #0
}
 80152f4:	4618      	mov	r0, r3
 80152f6:	3714      	adds	r7, #20
 80152f8:	46bd      	mov	sp, r7
 80152fa:	bd90      	pop	{r4, r7, pc}
 80152fc:	08020adc 	.word	0x08020adc
 8015300:	08020fec 	.word	0x08020fec
 8015304:	08020b20 	.word	0x08020b20

08015308 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b084      	sub	sp, #16
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015310:	e007      	b.n	8015322 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015318:	6878      	ldr	r0, [r7, #4]
 801531a:	f000 f80a 	bl	8015332 <tcp_seg_free>
    seg = next;
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d1f4      	bne.n	8015312 <tcp_segs_free+0xa>
  }
}
 8015328:	bf00      	nop
 801532a:	bf00      	nop
 801532c:	3710      	adds	r7, #16
 801532e:	46bd      	mov	sp, r7
 8015330:	bd80      	pop	{r7, pc}

08015332 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015332:	b580      	push	{r7, lr}
 8015334:	b082      	sub	sp, #8
 8015336:	af00      	add	r7, sp, #0
 8015338:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d00c      	beq.n	801535a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	685b      	ldr	r3, [r3, #4]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d004      	beq.n	8015352 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	685b      	ldr	r3, [r3, #4]
 801534c:	4618      	mov	r0, r3
 801534e:	f7fe fb6b 	bl	8013a28 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015352:	6879      	ldr	r1, [r7, #4]
 8015354:	2003      	movs	r0, #3
 8015356:	f7fd fcc3 	bl	8012ce0 <memp_free>
  }
}
 801535a:	bf00      	nop
 801535c:	3708      	adds	r7, #8
 801535e:	46bd      	mov	sp, r7
 8015360:	bd80      	pop	{r7, pc}
	...

08015364 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b084      	sub	sp, #16
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d106      	bne.n	8015380 <tcp_seg_copy+0x1c>
 8015372:	4b0f      	ldr	r3, [pc, #60]	@ (80153b0 <tcp_seg_copy+0x4c>)
 8015374:	f240 6282 	movw	r2, #1666	@ 0x682
 8015378:	490e      	ldr	r1, [pc, #56]	@ (80153b4 <tcp_seg_copy+0x50>)
 801537a:	480f      	ldr	r0, [pc, #60]	@ (80153b8 <tcp_seg_copy+0x54>)
 801537c:	f008 fee6 	bl	801e14c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015380:	2003      	movs	r0, #3
 8015382:	f7fd fc37 	bl	8012bf4 <memp_malloc>
 8015386:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d101      	bne.n	8015392 <tcp_seg_copy+0x2e>
    return NULL;
 801538e:	2300      	movs	r3, #0
 8015390:	e00a      	b.n	80153a8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015392:	2210      	movs	r2, #16
 8015394:	6879      	ldr	r1, [r7, #4]
 8015396:	68f8      	ldr	r0, [r7, #12]
 8015398:	f009 f86f 	bl	801e47a <memcpy>
  pbuf_ref(cseg->p);
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	685b      	ldr	r3, [r3, #4]
 80153a0:	4618      	mov	r0, r3
 80153a2:	f7fe fbe7 	bl	8013b74 <pbuf_ref>
  return cseg;
 80153a6:	68fb      	ldr	r3, [r7, #12]
}
 80153a8:	4618      	mov	r0, r3
 80153aa:	3710      	adds	r7, #16
 80153ac:	46bd      	mov	sp, r7
 80153ae:	bd80      	pop	{r7, pc}
 80153b0:	08020adc 	.word	0x08020adc
 80153b4:	08021030 	.word	0x08021030
 80153b8:	08020b20 	.word	0x08020b20

080153bc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b084      	sub	sp, #16
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	60f8      	str	r0, [r7, #12]
 80153c4:	60b9      	str	r1, [r7, #8]
 80153c6:	607a      	str	r2, [r7, #4]
 80153c8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80153ca:	68bb      	ldr	r3, [r7, #8]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d109      	bne.n	80153e4 <tcp_recv_null+0x28>
 80153d0:	4b12      	ldr	r3, [pc, #72]	@ (801541c <tcp_recv_null+0x60>)
 80153d2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80153d6:	4912      	ldr	r1, [pc, #72]	@ (8015420 <tcp_recv_null+0x64>)
 80153d8:	4812      	ldr	r0, [pc, #72]	@ (8015424 <tcp_recv_null+0x68>)
 80153da:	f008 feb7 	bl	801e14c <iprintf>
 80153de:	f06f 030f 	mvn.w	r3, #15
 80153e2:	e016      	b.n	8015412 <tcp_recv_null+0x56>

  if (p != NULL) {
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d009      	beq.n	80153fe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	891b      	ldrh	r3, [r3, #8]
 80153ee:	4619      	mov	r1, r3
 80153f0:	68b8      	ldr	r0, [r7, #8]
 80153f2:	f7ff fad1 	bl	8014998 <tcp_recved>
    pbuf_free(p);
 80153f6:	6878      	ldr	r0, [r7, #4]
 80153f8:	f7fe fb16 	bl	8013a28 <pbuf_free>
 80153fc:	e008      	b.n	8015410 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80153fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d104      	bne.n	8015410 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8015406:	68b8      	ldr	r0, [r7, #8]
 8015408:	f7fe ffb8 	bl	801437c <tcp_close>
 801540c:	4603      	mov	r3, r0
 801540e:	e000      	b.n	8015412 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015410:	2300      	movs	r3, #0
}
 8015412:	4618      	mov	r0, r3
 8015414:	3710      	adds	r7, #16
 8015416:	46bd      	mov	sp, r7
 8015418:	bd80      	pop	{r7, pc}
 801541a:	bf00      	nop
 801541c:	08020adc 	.word	0x08020adc
 8015420:	0802104c 	.word	0x0802104c
 8015424:	08020b20 	.word	0x08020b20

08015428 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b086      	sub	sp, #24
 801542c:	af00      	add	r7, sp, #0
 801542e:	4603      	mov	r3, r0
 8015430:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015436:	2b00      	cmp	r3, #0
 8015438:	db01      	blt.n	801543e <tcp_kill_prio+0x16>
 801543a:	79fb      	ldrb	r3, [r7, #7]
 801543c:	e000      	b.n	8015440 <tcp_kill_prio+0x18>
 801543e:	237f      	movs	r3, #127	@ 0x7f
 8015440:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015442:	7afb      	ldrb	r3, [r7, #11]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d034      	beq.n	80154b2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015448:	7afb      	ldrb	r3, [r7, #11]
 801544a:	3b01      	subs	r3, #1
 801544c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801544e:	2300      	movs	r3, #0
 8015450:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015452:	2300      	movs	r3, #0
 8015454:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015456:	4b19      	ldr	r3, [pc, #100]	@ (80154bc <tcp_kill_prio+0x94>)
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	617b      	str	r3, [r7, #20]
 801545c:	e01f      	b.n	801549e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801545e:	697b      	ldr	r3, [r7, #20]
 8015460:	7d5b      	ldrb	r3, [r3, #21]
 8015462:	7afa      	ldrb	r2, [r7, #11]
 8015464:	429a      	cmp	r2, r3
 8015466:	d80c      	bhi.n	8015482 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015468:	697b      	ldr	r3, [r7, #20]
 801546a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801546c:	7afa      	ldrb	r2, [r7, #11]
 801546e:	429a      	cmp	r2, r3
 8015470:	d112      	bne.n	8015498 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015472:	4b13      	ldr	r3, [pc, #76]	@ (80154c0 <tcp_kill_prio+0x98>)
 8015474:	681a      	ldr	r2, [r3, #0]
 8015476:	697b      	ldr	r3, [r7, #20]
 8015478:	6a1b      	ldr	r3, [r3, #32]
 801547a:	1ad3      	subs	r3, r2, r3
 801547c:	68fa      	ldr	r2, [r7, #12]
 801547e:	429a      	cmp	r2, r3
 8015480:	d80a      	bhi.n	8015498 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8015482:	4b0f      	ldr	r3, [pc, #60]	@ (80154c0 <tcp_kill_prio+0x98>)
 8015484:	681a      	ldr	r2, [r3, #0]
 8015486:	697b      	ldr	r3, [r7, #20]
 8015488:	6a1b      	ldr	r3, [r3, #32]
 801548a:	1ad3      	subs	r3, r2, r3
 801548c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801548e:	697b      	ldr	r3, [r7, #20]
 8015490:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8015492:	697b      	ldr	r3, [r7, #20]
 8015494:	7d5b      	ldrb	r3, [r3, #21]
 8015496:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015498:	697b      	ldr	r3, [r7, #20]
 801549a:	68db      	ldr	r3, [r3, #12]
 801549c:	617b      	str	r3, [r7, #20]
 801549e:	697b      	ldr	r3, [r7, #20]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d1dc      	bne.n	801545e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80154a4:	693b      	ldr	r3, [r7, #16]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d004      	beq.n	80154b4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80154aa:	6938      	ldr	r0, [r7, #16]
 80154ac:	f7ff f8ac 	bl	8014608 <tcp_abort>
 80154b0:	e000      	b.n	80154b4 <tcp_kill_prio+0x8c>
    return;
 80154b2:	bf00      	nop
  }
}
 80154b4:	3718      	adds	r7, #24
 80154b6:	46bd      	mov	sp, r7
 80154b8:	bd80      	pop	{r7, pc}
 80154ba:	bf00      	nop
 80154bc:	2000e4fc 	.word	0x2000e4fc
 80154c0:	2000e4f0 	.word	0x2000e4f0

080154c4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b086      	sub	sp, #24
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	4603      	mov	r3, r0
 80154cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80154ce:	79fb      	ldrb	r3, [r7, #7]
 80154d0:	2b08      	cmp	r3, #8
 80154d2:	d009      	beq.n	80154e8 <tcp_kill_state+0x24>
 80154d4:	79fb      	ldrb	r3, [r7, #7]
 80154d6:	2b09      	cmp	r3, #9
 80154d8:	d006      	beq.n	80154e8 <tcp_kill_state+0x24>
 80154da:	4b1a      	ldr	r3, [pc, #104]	@ (8015544 <tcp_kill_state+0x80>)
 80154dc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80154e0:	4919      	ldr	r1, [pc, #100]	@ (8015548 <tcp_kill_state+0x84>)
 80154e2:	481a      	ldr	r0, [pc, #104]	@ (801554c <tcp_kill_state+0x88>)
 80154e4:	f008 fe32 	bl	801e14c <iprintf>

  inactivity = 0;
 80154e8:	2300      	movs	r3, #0
 80154ea:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80154ec:	2300      	movs	r3, #0
 80154ee:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80154f0:	4b17      	ldr	r3, [pc, #92]	@ (8015550 <tcp_kill_state+0x8c>)
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	617b      	str	r3, [r7, #20]
 80154f6:	e017      	b.n	8015528 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80154f8:	697b      	ldr	r3, [r7, #20]
 80154fa:	7d1b      	ldrb	r3, [r3, #20]
 80154fc:	79fa      	ldrb	r2, [r7, #7]
 80154fe:	429a      	cmp	r2, r3
 8015500:	d10f      	bne.n	8015522 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015502:	4b14      	ldr	r3, [pc, #80]	@ (8015554 <tcp_kill_state+0x90>)
 8015504:	681a      	ldr	r2, [r3, #0]
 8015506:	697b      	ldr	r3, [r7, #20]
 8015508:	6a1b      	ldr	r3, [r3, #32]
 801550a:	1ad3      	subs	r3, r2, r3
 801550c:	68fa      	ldr	r2, [r7, #12]
 801550e:	429a      	cmp	r2, r3
 8015510:	d807      	bhi.n	8015522 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8015512:	4b10      	ldr	r3, [pc, #64]	@ (8015554 <tcp_kill_state+0x90>)
 8015514:	681a      	ldr	r2, [r3, #0]
 8015516:	697b      	ldr	r3, [r7, #20]
 8015518:	6a1b      	ldr	r3, [r3, #32]
 801551a:	1ad3      	subs	r3, r2, r3
 801551c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801551e:	697b      	ldr	r3, [r7, #20]
 8015520:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015522:	697b      	ldr	r3, [r7, #20]
 8015524:	68db      	ldr	r3, [r3, #12]
 8015526:	617b      	str	r3, [r7, #20]
 8015528:	697b      	ldr	r3, [r7, #20]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d1e4      	bne.n	80154f8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801552e:	693b      	ldr	r3, [r7, #16]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d003      	beq.n	801553c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015534:	2100      	movs	r1, #0
 8015536:	6938      	ldr	r0, [r7, #16]
 8015538:	f7fe ffa8 	bl	801448c <tcp_abandon>
  }
}
 801553c:	bf00      	nop
 801553e:	3718      	adds	r7, #24
 8015540:	46bd      	mov	sp, r7
 8015542:	bd80      	pop	{r7, pc}
 8015544:	08020adc 	.word	0x08020adc
 8015548:	08021068 	.word	0x08021068
 801554c:	08020b20 	.word	0x08020b20
 8015550:	2000e4fc 	.word	0x2000e4fc
 8015554:	2000e4f0 	.word	0x2000e4f0

08015558 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b084      	sub	sp, #16
 801555c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801555e:	2300      	movs	r3, #0
 8015560:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8015562:	2300      	movs	r3, #0
 8015564:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015566:	4b12      	ldr	r3, [pc, #72]	@ (80155b0 <tcp_kill_timewait+0x58>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	60fb      	str	r3, [r7, #12]
 801556c:	e012      	b.n	8015594 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801556e:	4b11      	ldr	r3, [pc, #68]	@ (80155b4 <tcp_kill_timewait+0x5c>)
 8015570:	681a      	ldr	r2, [r3, #0]
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	6a1b      	ldr	r3, [r3, #32]
 8015576:	1ad3      	subs	r3, r2, r3
 8015578:	687a      	ldr	r2, [r7, #4]
 801557a:	429a      	cmp	r2, r3
 801557c:	d807      	bhi.n	801558e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801557e:	4b0d      	ldr	r3, [pc, #52]	@ (80155b4 <tcp_kill_timewait+0x5c>)
 8015580:	681a      	ldr	r2, [r3, #0]
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	6a1b      	ldr	r3, [r3, #32]
 8015586:	1ad3      	subs	r3, r2, r3
 8015588:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	68db      	ldr	r3, [r3, #12]
 8015592:	60fb      	str	r3, [r7, #12]
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d1e9      	bne.n	801556e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801559a:	68bb      	ldr	r3, [r7, #8]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d002      	beq.n	80155a6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80155a0:	68b8      	ldr	r0, [r7, #8]
 80155a2:	f7ff f831 	bl	8014608 <tcp_abort>
  }
}
 80155a6:	bf00      	nop
 80155a8:	3710      	adds	r7, #16
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd80      	pop	{r7, pc}
 80155ae:	bf00      	nop
 80155b0:	2000e500 	.word	0x2000e500
 80155b4:	2000e4f0 	.word	0x2000e4f0

080155b8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b082      	sub	sp, #8
 80155bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80155be:	4b10      	ldr	r3, [pc, #64]	@ (8015600 <tcp_handle_closepend+0x48>)
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80155c4:	e014      	b.n	80155f0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	68db      	ldr	r3, [r3, #12]
 80155ca:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	8b5b      	ldrh	r3, [r3, #26]
 80155d0:	f003 0308 	and.w	r3, r3, #8
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d009      	beq.n	80155ec <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	8b5b      	ldrh	r3, [r3, #26]
 80155dc:	f023 0308 	bic.w	r3, r3, #8
 80155e0:	b29a      	uxth	r2, r3
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80155e6:	6878      	ldr	r0, [r7, #4]
 80155e8:	f7fe fe5e 	bl	80142a8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80155ec:	683b      	ldr	r3, [r7, #0]
 80155ee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d1e7      	bne.n	80155c6 <tcp_handle_closepend+0xe>
  }
}
 80155f6:	bf00      	nop
 80155f8:	bf00      	nop
 80155fa:	3708      	adds	r7, #8
 80155fc:	46bd      	mov	sp, r7
 80155fe:	bd80      	pop	{r7, pc}
 8015600:	2000e4fc 	.word	0x2000e4fc

08015604 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8015604:	b580      	push	{r7, lr}
 8015606:	b084      	sub	sp, #16
 8015608:	af00      	add	r7, sp, #0
 801560a:	4603      	mov	r3, r0
 801560c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801560e:	2001      	movs	r0, #1
 8015610:	f7fd faf0 	bl	8012bf4 <memp_malloc>
 8015614:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d126      	bne.n	801566a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801561c:	f7ff ffcc 	bl	80155b8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8015620:	f7ff ff9a 	bl	8015558 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015624:	2001      	movs	r0, #1
 8015626:	f7fd fae5 	bl	8012bf4 <memp_malloc>
 801562a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d11b      	bne.n	801566a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8015632:	2009      	movs	r0, #9
 8015634:	f7ff ff46 	bl	80154c4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015638:	2001      	movs	r0, #1
 801563a:	f7fd fadb 	bl	8012bf4 <memp_malloc>
 801563e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d111      	bne.n	801566a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8015646:	2008      	movs	r0, #8
 8015648:	f7ff ff3c 	bl	80154c4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801564c:	2001      	movs	r0, #1
 801564e:	f7fd fad1 	bl	8012bf4 <memp_malloc>
 8015652:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d107      	bne.n	801566a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801565a:	79fb      	ldrb	r3, [r7, #7]
 801565c:	4618      	mov	r0, r3
 801565e:	f7ff fee3 	bl	8015428 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015662:	2001      	movs	r0, #1
 8015664:	f7fd fac6 	bl	8012bf4 <memp_malloc>
 8015668:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d03f      	beq.n	80156f0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8015670:	229c      	movs	r2, #156	@ 0x9c
 8015672:	2100      	movs	r1, #0
 8015674:	68f8      	ldr	r0, [r7, #12]
 8015676:	f008 fe0a 	bl	801e28e <memset>
    pcb->prio = prio;
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	79fa      	ldrb	r2, [r7, #7]
 801567e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015686:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8015690:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	22ff      	movs	r2, #255	@ 0xff
 801569e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80156a6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	2206      	movs	r2, #6
 80156ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	2206      	movs	r2, #6
 80156b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80156bc:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	2201      	movs	r2, #1
 80156c2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80156c6:	4b0d      	ldr	r3, [pc, #52]	@ (80156fc <tcp_alloc+0xf8>)
 80156c8:	681a      	ldr	r2, [r3, #0]
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80156ce:	4b0c      	ldr	r3, [pc, #48]	@ (8015700 <tcp_alloc+0xfc>)
 80156d0:	781a      	ldrb	r2, [r3, #0]
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80156dc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	4a08      	ldr	r2, [pc, #32]	@ (8015704 <tcp_alloc+0x100>)
 80156e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	4a07      	ldr	r2, [pc, #28]	@ (8015708 <tcp_alloc+0x104>)
 80156ec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80156f0:	68fb      	ldr	r3, [r7, #12]
}
 80156f2:	4618      	mov	r0, r3
 80156f4:	3710      	adds	r7, #16
 80156f6:	46bd      	mov	sp, r7
 80156f8:	bd80      	pop	{r7, pc}
 80156fa:	bf00      	nop
 80156fc:	2000e4f0 	.word	0x2000e4f0
 8015700:	2000e506 	.word	0x2000e506
 8015704:	080153bd 	.word	0x080153bd
 8015708:	006ddd00 	.word	0x006ddd00

0801570c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b084      	sub	sp, #16
 8015710:	af00      	add	r7, sp, #0
 8015712:	4603      	mov	r3, r0
 8015714:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8015716:	2040      	movs	r0, #64	@ 0x40
 8015718:	f7ff ff74 	bl	8015604 <tcp_alloc>
 801571c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801571e:	68fb      	ldr	r3, [r7, #12]
}
 8015720:	4618      	mov	r0, r3
 8015722:	3710      	adds	r7, #16
 8015724:	46bd      	mov	sp, r7
 8015726:	bd80      	pop	{r7, pc}

08015728 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8015728:	b480      	push	{r7}
 801572a:	b083      	sub	sp, #12
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
 8015730:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d002      	beq.n	801573e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	683a      	ldr	r2, [r7, #0]
 801573c:	611a      	str	r2, [r3, #16]
  }
}
 801573e:	bf00      	nop
 8015740:	370c      	adds	r7, #12
 8015742:	46bd      	mov	sp, r7
 8015744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015748:	4770      	bx	lr
	...

0801574c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b082      	sub	sp, #8
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
 8015754:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d00e      	beq.n	801577a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	7d1b      	ldrb	r3, [r3, #20]
 8015760:	2b01      	cmp	r3, #1
 8015762:	d106      	bne.n	8015772 <tcp_recv+0x26>
 8015764:	4b07      	ldr	r3, [pc, #28]	@ (8015784 <tcp_recv+0x38>)
 8015766:	f240 72df 	movw	r2, #2015	@ 0x7df
 801576a:	4907      	ldr	r1, [pc, #28]	@ (8015788 <tcp_recv+0x3c>)
 801576c:	4807      	ldr	r0, [pc, #28]	@ (801578c <tcp_recv+0x40>)
 801576e:	f008 fced 	bl	801e14c <iprintf>
    pcb->recv = recv;
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	683a      	ldr	r2, [r7, #0]
 8015776:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 801577a:	bf00      	nop
 801577c:	3708      	adds	r7, #8
 801577e:	46bd      	mov	sp, r7
 8015780:	bd80      	pop	{r7, pc}
 8015782:	bf00      	nop
 8015784:	08020adc 	.word	0x08020adc
 8015788:	08021078 	.word	0x08021078
 801578c:	08020b20 	.word	0x08020b20

08015790 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8015790:	b580      	push	{r7, lr}
 8015792:	b082      	sub	sp, #8
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
 8015798:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d00e      	beq.n	80157be <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	7d1b      	ldrb	r3, [r3, #20]
 80157a4:	2b01      	cmp	r3, #1
 80157a6:	d106      	bne.n	80157b6 <tcp_sent+0x26>
 80157a8:	4b07      	ldr	r3, [pc, #28]	@ (80157c8 <tcp_sent+0x38>)
 80157aa:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 80157ae:	4907      	ldr	r1, [pc, #28]	@ (80157cc <tcp_sent+0x3c>)
 80157b0:	4807      	ldr	r0, [pc, #28]	@ (80157d0 <tcp_sent+0x40>)
 80157b2:	f008 fccb 	bl	801e14c <iprintf>
    pcb->sent = sent;
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	683a      	ldr	r2, [r7, #0]
 80157ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80157be:	bf00      	nop
 80157c0:	3708      	adds	r7, #8
 80157c2:	46bd      	mov	sp, r7
 80157c4:	bd80      	pop	{r7, pc}
 80157c6:	bf00      	nop
 80157c8:	08020adc 	.word	0x08020adc
 80157cc:	080210a0 	.word	0x080210a0
 80157d0:	08020b20 	.word	0x08020b20

080157d4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b082      	sub	sp, #8
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
 80157dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d00e      	beq.n	8015802 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	7d1b      	ldrb	r3, [r3, #20]
 80157e8:	2b01      	cmp	r3, #1
 80157ea:	d106      	bne.n	80157fa <tcp_err+0x26>
 80157ec:	4b07      	ldr	r3, [pc, #28]	@ (801580c <tcp_err+0x38>)
 80157ee:	f640 020d 	movw	r2, #2061	@ 0x80d
 80157f2:	4907      	ldr	r1, [pc, #28]	@ (8015810 <tcp_err+0x3c>)
 80157f4:	4807      	ldr	r0, [pc, #28]	@ (8015814 <tcp_err+0x40>)
 80157f6:	f008 fca9 	bl	801e14c <iprintf>
    pcb->errf = err;
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	683a      	ldr	r2, [r7, #0]
 80157fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8015802:	bf00      	nop
 8015804:	3708      	adds	r7, #8
 8015806:	46bd      	mov	sp, r7
 8015808:	bd80      	pop	{r7, pc}
 801580a:	bf00      	nop
 801580c:	08020adc 	.word	0x08020adc
 8015810:	080210c8 	.word	0x080210c8
 8015814:	08020b20 	.word	0x08020b20

08015818 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8015818:	b480      	push	{r7}
 801581a:	b085      	sub	sp, #20
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
 8015820:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d008      	beq.n	801583a <tcp_accept+0x22>
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	7d1b      	ldrb	r3, [r3, #20]
 801582c:	2b01      	cmp	r3, #1
 801582e:	d104      	bne.n	801583a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	683a      	ldr	r2, [r7, #0]
 8015838:	619a      	str	r2, [r3, #24]
  }
}
 801583a:	bf00      	nop
 801583c:	3714      	adds	r7, #20
 801583e:	46bd      	mov	sp, r7
 8015840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015844:	4770      	bx	lr
	...

08015848 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b084      	sub	sp, #16
 801584c:	af00      	add	r7, sp, #0
 801584e:	60f8      	str	r0, [r7, #12]
 8015850:	60b9      	str	r1, [r7, #8]
 8015852:	4613      	mov	r3, r2
 8015854:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d107      	bne.n	801586c <tcp_poll+0x24>
 801585c:	4b0e      	ldr	r3, [pc, #56]	@ (8015898 <tcp_poll+0x50>)
 801585e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8015862:	490e      	ldr	r1, [pc, #56]	@ (801589c <tcp_poll+0x54>)
 8015864:	480e      	ldr	r0, [pc, #56]	@ (80158a0 <tcp_poll+0x58>)
 8015866:	f008 fc71 	bl	801e14c <iprintf>
 801586a:	e011      	b.n	8015890 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	7d1b      	ldrb	r3, [r3, #20]
 8015870:	2b01      	cmp	r3, #1
 8015872:	d106      	bne.n	8015882 <tcp_poll+0x3a>
 8015874:	4b08      	ldr	r3, [pc, #32]	@ (8015898 <tcp_poll+0x50>)
 8015876:	f640 023e 	movw	r2, #2110	@ 0x83e
 801587a:	490a      	ldr	r1, [pc, #40]	@ (80158a4 <tcp_poll+0x5c>)
 801587c:	4808      	ldr	r0, [pc, #32]	@ (80158a0 <tcp_poll+0x58>)
 801587e:	f008 fc65 	bl	801e14c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	68ba      	ldr	r2, [r7, #8]
 8015886:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	79fa      	ldrb	r2, [r7, #7]
 801588e:	775a      	strb	r2, [r3, #29]
}
 8015890:	3710      	adds	r7, #16
 8015892:	46bd      	mov	sp, r7
 8015894:	bd80      	pop	{r7, pc}
 8015896:	bf00      	nop
 8015898:	08020adc 	.word	0x08020adc
 801589c:	080210f0 	.word	0x080210f0
 80158a0:	08020b20 	.word	0x08020b20
 80158a4:	08021108 	.word	0x08021108

080158a8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b082      	sub	sp, #8
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d107      	bne.n	80158c6 <tcp_pcb_purge+0x1e>
 80158b6:	4b21      	ldr	r3, [pc, #132]	@ (801593c <tcp_pcb_purge+0x94>)
 80158b8:	f640 0251 	movw	r2, #2129	@ 0x851
 80158bc:	4920      	ldr	r1, [pc, #128]	@ (8015940 <tcp_pcb_purge+0x98>)
 80158be:	4821      	ldr	r0, [pc, #132]	@ (8015944 <tcp_pcb_purge+0x9c>)
 80158c0:	f008 fc44 	bl	801e14c <iprintf>
 80158c4:	e037      	b.n	8015936 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	7d1b      	ldrb	r3, [r3, #20]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d033      	beq.n	8015936 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80158d2:	2b0a      	cmp	r3, #10
 80158d4:	d02f      	beq.n	8015936 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80158da:	2b01      	cmp	r3, #1
 80158dc:	d02b      	beq.n	8015936 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d007      	beq.n	80158f6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80158ea:	4618      	mov	r0, r3
 80158ec:	f7fe f89c 	bl	8013a28 <pbuf_free>
      pcb->refused_data = NULL;
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	2200      	movs	r2, #0
 80158f4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d002      	beq.n	8015904 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80158fe:	6878      	ldr	r0, [r7, #4]
 8015900:	f000 f986 	bl	8015c10 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801590a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015910:	4618      	mov	r0, r3
 8015912:	f7ff fcf9 	bl	8015308 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801591a:	4618      	mov	r0, r3
 801591c:	f7ff fcf4 	bl	8015308 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	2200      	movs	r2, #0
 8015924:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	2200      	movs	r2, #0
 8015932:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8015936:	3708      	adds	r7, #8
 8015938:	46bd      	mov	sp, r7
 801593a:	bd80      	pop	{r7, pc}
 801593c:	08020adc 	.word	0x08020adc
 8015940:	08021128 	.word	0x08021128
 8015944:	08020b20 	.word	0x08020b20

08015948 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8015948:	b580      	push	{r7, lr}
 801594a:	b084      	sub	sp, #16
 801594c:	af00      	add	r7, sp, #0
 801594e:	6078      	str	r0, [r7, #4]
 8015950:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d106      	bne.n	8015966 <tcp_pcb_remove+0x1e>
 8015958:	4b3e      	ldr	r3, [pc, #248]	@ (8015a54 <tcp_pcb_remove+0x10c>)
 801595a:	f640 0283 	movw	r2, #2179	@ 0x883
 801595e:	493e      	ldr	r1, [pc, #248]	@ (8015a58 <tcp_pcb_remove+0x110>)
 8015960:	483e      	ldr	r0, [pc, #248]	@ (8015a5c <tcp_pcb_remove+0x114>)
 8015962:	f008 fbf3 	bl	801e14c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d106      	bne.n	801597a <tcp_pcb_remove+0x32>
 801596c:	4b39      	ldr	r3, [pc, #228]	@ (8015a54 <tcp_pcb_remove+0x10c>)
 801596e:	f640 0284 	movw	r2, #2180	@ 0x884
 8015972:	493b      	ldr	r1, [pc, #236]	@ (8015a60 <tcp_pcb_remove+0x118>)
 8015974:	4839      	ldr	r0, [pc, #228]	@ (8015a5c <tcp_pcb_remove+0x114>)
 8015976:	f008 fbe9 	bl	801e14c <iprintf>

  TCP_RMV(pcblist, pcb);
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	683a      	ldr	r2, [r7, #0]
 8015980:	429a      	cmp	r2, r3
 8015982:	d105      	bne.n	8015990 <tcp_pcb_remove+0x48>
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	68da      	ldr	r2, [r3, #12]
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	601a      	str	r2, [r3, #0]
 801598e:	e013      	b.n	80159b8 <tcp_pcb_remove+0x70>
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	60fb      	str	r3, [r7, #12]
 8015996:	e00c      	b.n	80159b2 <tcp_pcb_remove+0x6a>
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	68db      	ldr	r3, [r3, #12]
 801599c:	683a      	ldr	r2, [r7, #0]
 801599e:	429a      	cmp	r2, r3
 80159a0:	d104      	bne.n	80159ac <tcp_pcb_remove+0x64>
 80159a2:	683b      	ldr	r3, [r7, #0]
 80159a4:	68da      	ldr	r2, [r3, #12]
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	60da      	str	r2, [r3, #12]
 80159aa:	e005      	b.n	80159b8 <tcp_pcb_remove+0x70>
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	68db      	ldr	r3, [r3, #12]
 80159b0:	60fb      	str	r3, [r7, #12]
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d1ef      	bne.n	8015998 <tcp_pcb_remove+0x50>
 80159b8:	683b      	ldr	r3, [r7, #0]
 80159ba:	2200      	movs	r2, #0
 80159bc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80159be:	6838      	ldr	r0, [r7, #0]
 80159c0:	f7ff ff72 	bl	80158a8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80159c4:	683b      	ldr	r3, [r7, #0]
 80159c6:	7d1b      	ldrb	r3, [r3, #20]
 80159c8:	2b0a      	cmp	r3, #10
 80159ca:	d013      	beq.n	80159f4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80159cc:	683b      	ldr	r3, [r7, #0]
 80159ce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80159d0:	2b01      	cmp	r3, #1
 80159d2:	d00f      	beq.n	80159f4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80159d4:	683b      	ldr	r3, [r7, #0]
 80159d6:	8b5b      	ldrh	r3, [r3, #26]
 80159d8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d009      	beq.n	80159f4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80159e0:	683b      	ldr	r3, [r7, #0]
 80159e2:	8b5b      	ldrh	r3, [r3, #26]
 80159e4:	f043 0302 	orr.w	r3, r3, #2
 80159e8:	b29a      	uxth	r2, r3
 80159ea:	683b      	ldr	r3, [r7, #0]
 80159ec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80159ee:	6838      	ldr	r0, [r7, #0]
 80159f0:	f003 fbc0 	bl	8019174 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80159f4:	683b      	ldr	r3, [r7, #0]
 80159f6:	7d1b      	ldrb	r3, [r3, #20]
 80159f8:	2b01      	cmp	r3, #1
 80159fa:	d020      	beq.n	8015a3e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80159fc:	683b      	ldr	r3, [r7, #0]
 80159fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d006      	beq.n	8015a12 <tcp_pcb_remove+0xca>
 8015a04:	4b13      	ldr	r3, [pc, #76]	@ (8015a54 <tcp_pcb_remove+0x10c>)
 8015a06:	f640 0293 	movw	r2, #2195	@ 0x893
 8015a0a:	4916      	ldr	r1, [pc, #88]	@ (8015a64 <tcp_pcb_remove+0x11c>)
 8015a0c:	4813      	ldr	r0, [pc, #76]	@ (8015a5c <tcp_pcb_remove+0x114>)
 8015a0e:	f008 fb9d 	bl	801e14c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8015a12:	683b      	ldr	r3, [r7, #0]
 8015a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d006      	beq.n	8015a28 <tcp_pcb_remove+0xe0>
 8015a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8015a54 <tcp_pcb_remove+0x10c>)
 8015a1c:	f640 0294 	movw	r2, #2196	@ 0x894
 8015a20:	4911      	ldr	r1, [pc, #68]	@ (8015a68 <tcp_pcb_remove+0x120>)
 8015a22:	480e      	ldr	r0, [pc, #56]	@ (8015a5c <tcp_pcb_remove+0x114>)
 8015a24:	f008 fb92 	bl	801e14c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8015a28:	683b      	ldr	r3, [r7, #0]
 8015a2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d006      	beq.n	8015a3e <tcp_pcb_remove+0xf6>
 8015a30:	4b08      	ldr	r3, [pc, #32]	@ (8015a54 <tcp_pcb_remove+0x10c>)
 8015a32:	f640 0296 	movw	r2, #2198	@ 0x896
 8015a36:	490d      	ldr	r1, [pc, #52]	@ (8015a6c <tcp_pcb_remove+0x124>)
 8015a38:	4808      	ldr	r0, [pc, #32]	@ (8015a5c <tcp_pcb_remove+0x114>)
 8015a3a:	f008 fb87 	bl	801e14c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8015a3e:	683b      	ldr	r3, [r7, #0]
 8015a40:	2200      	movs	r2, #0
 8015a42:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8015a44:	683b      	ldr	r3, [r7, #0]
 8015a46:	2200      	movs	r2, #0
 8015a48:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8015a4a:	bf00      	nop
 8015a4c:	3710      	adds	r7, #16
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	bd80      	pop	{r7, pc}
 8015a52:	bf00      	nop
 8015a54:	08020adc 	.word	0x08020adc
 8015a58:	08021144 	.word	0x08021144
 8015a5c:	08020b20 	.word	0x08020b20
 8015a60:	08021160 	.word	0x08021160
 8015a64:	08021180 	.word	0x08021180
 8015a68:	08021198 	.word	0x08021198
 8015a6c:	080211b4 	.word	0x080211b4

08015a70 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b082      	sub	sp, #8
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d106      	bne.n	8015a8c <tcp_next_iss+0x1c>
 8015a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8015aa8 <tcp_next_iss+0x38>)
 8015a80:	f640 02af 	movw	r2, #2223	@ 0x8af
 8015a84:	4909      	ldr	r1, [pc, #36]	@ (8015aac <tcp_next_iss+0x3c>)
 8015a86:	480a      	ldr	r0, [pc, #40]	@ (8015ab0 <tcp_next_iss+0x40>)
 8015a88:	f008 fb60 	bl	801e14c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8015a8c:	4b09      	ldr	r3, [pc, #36]	@ (8015ab4 <tcp_next_iss+0x44>)
 8015a8e:	681a      	ldr	r2, [r3, #0]
 8015a90:	4b09      	ldr	r3, [pc, #36]	@ (8015ab8 <tcp_next_iss+0x48>)
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	4413      	add	r3, r2
 8015a96:	4a07      	ldr	r2, [pc, #28]	@ (8015ab4 <tcp_next_iss+0x44>)
 8015a98:	6013      	str	r3, [r2, #0]
  return iss;
 8015a9a:	4b06      	ldr	r3, [pc, #24]	@ (8015ab4 <tcp_next_iss+0x44>)
 8015a9c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	3708      	adds	r7, #8
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bd80      	pop	{r7, pc}
 8015aa6:	bf00      	nop
 8015aa8:	08020adc 	.word	0x08020adc
 8015aac:	080211cc 	.word	0x080211cc
 8015ab0:	08020b20 	.word	0x08020b20
 8015ab4:	200000bc 	.word	0x200000bc
 8015ab8:	2000e4f0 	.word	0x2000e4f0

08015abc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b086      	sub	sp, #24
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	60b9      	str	r1, [r7, #8]
 8015ac6:	607a      	str	r2, [r7, #4]
 8015ac8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d106      	bne.n	8015ade <tcp_eff_send_mss_netif+0x22>
 8015ad0:	4b14      	ldr	r3, [pc, #80]	@ (8015b24 <tcp_eff_send_mss_netif+0x68>)
 8015ad2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8015ad6:	4914      	ldr	r1, [pc, #80]	@ (8015b28 <tcp_eff_send_mss_netif+0x6c>)
 8015ad8:	4814      	ldr	r0, [pc, #80]	@ (8015b2c <tcp_eff_send_mss_netif+0x70>)
 8015ada:	f008 fb37 	bl	801e14c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8015ade:	68bb      	ldr	r3, [r7, #8]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d101      	bne.n	8015ae8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8015ae4:	89fb      	ldrh	r3, [r7, #14]
 8015ae6:	e019      	b.n	8015b1c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8015ae8:	68bb      	ldr	r3, [r7, #8]
 8015aea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015aec:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8015aee:	8afb      	ldrh	r3, [r7, #22]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d012      	beq.n	8015b1a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8015af4:	2328      	movs	r3, #40	@ 0x28
 8015af6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8015af8:	8afa      	ldrh	r2, [r7, #22]
 8015afa:	8abb      	ldrh	r3, [r7, #20]
 8015afc:	429a      	cmp	r2, r3
 8015afe:	d904      	bls.n	8015b0a <tcp_eff_send_mss_netif+0x4e>
 8015b00:	8afa      	ldrh	r2, [r7, #22]
 8015b02:	8abb      	ldrh	r3, [r7, #20]
 8015b04:	1ad3      	subs	r3, r2, r3
 8015b06:	b29b      	uxth	r3, r3
 8015b08:	e000      	b.n	8015b0c <tcp_eff_send_mss_netif+0x50>
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8015b0e:	8a7a      	ldrh	r2, [r7, #18]
 8015b10:	89fb      	ldrh	r3, [r7, #14]
 8015b12:	4293      	cmp	r3, r2
 8015b14:	bf28      	it	cs
 8015b16:	4613      	movcs	r3, r2
 8015b18:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8015b1a:	89fb      	ldrh	r3, [r7, #14]
}
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	3718      	adds	r7, #24
 8015b20:	46bd      	mov	sp, r7
 8015b22:	bd80      	pop	{r7, pc}
 8015b24:	08020adc 	.word	0x08020adc
 8015b28:	080211e8 	.word	0x080211e8
 8015b2c:	08020b20 	.word	0x08020b20

08015b30 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b084      	sub	sp, #16
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
 8015b38:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8015b3a:	683b      	ldr	r3, [r7, #0]
 8015b3c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d119      	bne.n	8015b78 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8015b44:	4b10      	ldr	r3, [pc, #64]	@ (8015b88 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8015b46:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8015b4a:	4910      	ldr	r1, [pc, #64]	@ (8015b8c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8015b4c:	4810      	ldr	r0, [pc, #64]	@ (8015b90 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8015b4e:	f008 fafd 	bl	801e14c <iprintf>

  while (pcb != NULL) {
 8015b52:	e011      	b.n	8015b78 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	681a      	ldr	r2, [r3, #0]
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	429a      	cmp	r2, r3
 8015b5e:	d108      	bne.n	8015b72 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	68db      	ldr	r3, [r3, #12]
 8015b64:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8015b66:	68f8      	ldr	r0, [r7, #12]
 8015b68:	f7fe fd4e 	bl	8014608 <tcp_abort>
      pcb = next;
 8015b6c:	68bb      	ldr	r3, [r7, #8]
 8015b6e:	60fb      	str	r3, [r7, #12]
 8015b70:	e002      	b.n	8015b78 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	68db      	ldr	r3, [r3, #12]
 8015b76:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d1ea      	bne.n	8015b54 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8015b7e:	bf00      	nop
 8015b80:	bf00      	nop
 8015b82:	3710      	adds	r7, #16
 8015b84:	46bd      	mov	sp, r7
 8015b86:	bd80      	pop	{r7, pc}
 8015b88:	08020adc 	.word	0x08020adc
 8015b8c:	08021210 	.word	0x08021210
 8015b90:	08020b20 	.word	0x08020b20

08015b94 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b084      	sub	sp, #16
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
 8015b9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d02a      	beq.n	8015bfa <tcp_netif_ip_addr_changed+0x66>
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d026      	beq.n	8015bfa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8015bac:	4b15      	ldr	r3, [pc, #84]	@ (8015c04 <tcp_netif_ip_addr_changed+0x70>)
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	4619      	mov	r1, r3
 8015bb2:	6878      	ldr	r0, [r7, #4]
 8015bb4:	f7ff ffbc 	bl	8015b30 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8015bb8:	4b13      	ldr	r3, [pc, #76]	@ (8015c08 <tcp_netif_ip_addr_changed+0x74>)
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	4619      	mov	r1, r3
 8015bbe:	6878      	ldr	r0, [r7, #4]
 8015bc0:	f7ff ffb6 	bl	8015b30 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8015bc4:	683b      	ldr	r3, [r7, #0]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d017      	beq.n	8015bfa <tcp_netif_ip_addr_changed+0x66>
 8015bca:	683b      	ldr	r3, [r7, #0]
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d013      	beq.n	8015bfa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8015c0c <tcp_netif_ip_addr_changed+0x78>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	60fb      	str	r3, [r7, #12]
 8015bd8:	e00c      	b.n	8015bf4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	681a      	ldr	r2, [r3, #0]
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	429a      	cmp	r2, r3
 8015be4:	d103      	bne.n	8015bee <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8015be6:	683b      	ldr	r3, [r7, #0]
 8015be8:	681a      	ldr	r2, [r3, #0]
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	68db      	ldr	r3, [r3, #12]
 8015bf2:	60fb      	str	r3, [r7, #12]
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d1ef      	bne.n	8015bda <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8015bfa:	bf00      	nop
 8015bfc:	3710      	adds	r7, #16
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bd80      	pop	{r7, pc}
 8015c02:	bf00      	nop
 8015c04:	2000e4fc 	.word	0x2000e4fc
 8015c08:	2000e4f4 	.word	0x2000e4f4
 8015c0c:	2000e4f8 	.word	0x2000e4f8

08015c10 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b082      	sub	sp, #8
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d007      	beq.n	8015c30 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015c24:	4618      	mov	r0, r3
 8015c26:	f7ff fb6f 	bl	8015308 <tcp_segs_free>
    pcb->ooseq = NULL;
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	2200      	movs	r2, #0
 8015c2e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8015c30:	bf00      	nop
 8015c32:	3708      	adds	r7, #8
 8015c34:	46bd      	mov	sp, r7
 8015c36:	bd80      	pop	{r7, pc}

08015c38 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8015c38:	b590      	push	{r4, r7, lr}
 8015c3a:	b08d      	sub	sp, #52	@ 0x34
 8015c3c:	af04      	add	r7, sp, #16
 8015c3e:	6078      	str	r0, [r7, #4]
 8015c40:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d105      	bne.n	8015c54 <tcp_input+0x1c>
 8015c48:	4b9b      	ldr	r3, [pc, #620]	@ (8015eb8 <tcp_input+0x280>)
 8015c4a:	2283      	movs	r2, #131	@ 0x83
 8015c4c:	499b      	ldr	r1, [pc, #620]	@ (8015ebc <tcp_input+0x284>)
 8015c4e:	489c      	ldr	r0, [pc, #624]	@ (8015ec0 <tcp_input+0x288>)
 8015c50:	f008 fa7c 	bl	801e14c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	685b      	ldr	r3, [r3, #4]
 8015c58:	4a9a      	ldr	r2, [pc, #616]	@ (8015ec4 <tcp_input+0x28c>)
 8015c5a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	895b      	ldrh	r3, [r3, #10]
 8015c60:	2b13      	cmp	r3, #19
 8015c62:	f240 83d1 	bls.w	8016408 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015c66:	4b98      	ldr	r3, [pc, #608]	@ (8015ec8 <tcp_input+0x290>)
 8015c68:	695b      	ldr	r3, [r3, #20]
 8015c6a:	4a97      	ldr	r2, [pc, #604]	@ (8015ec8 <tcp_input+0x290>)
 8015c6c:	6812      	ldr	r2, [r2, #0]
 8015c6e:	4611      	mov	r1, r2
 8015c70:	4618      	mov	r0, r3
 8015c72:	f006 f9df 	bl	801c034 <ip4_addr_isbroadcast_u32>
 8015c76:	4603      	mov	r3, r0
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	f040 83c7 	bne.w	801640c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8015c7e:	4b92      	ldr	r3, [pc, #584]	@ (8015ec8 <tcp_input+0x290>)
 8015c80:	695b      	ldr	r3, [r3, #20]
 8015c82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015c86:	2be0      	cmp	r3, #224	@ 0xe0
 8015c88:	f000 83c0 	beq.w	801640c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8015c8c:	4b8d      	ldr	r3, [pc, #564]	@ (8015ec4 <tcp_input+0x28c>)
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	899b      	ldrh	r3, [r3, #12]
 8015c92:	b29b      	uxth	r3, r3
 8015c94:	4618      	mov	r0, r3
 8015c96:	f7fc fad9 	bl	801224c <lwip_htons>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	0b1b      	lsrs	r3, r3, #12
 8015c9e:	b29b      	uxth	r3, r3
 8015ca0:	b2db      	uxtb	r3, r3
 8015ca2:	009b      	lsls	r3, r3, #2
 8015ca4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8015ca6:	7cbb      	ldrb	r3, [r7, #18]
 8015ca8:	2b13      	cmp	r3, #19
 8015caa:	f240 83b1 	bls.w	8016410 <tcp_input+0x7d8>
 8015cae:	7cbb      	ldrb	r3, [r7, #18]
 8015cb0:	b29a      	uxth	r2, r3
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	891b      	ldrh	r3, [r3, #8]
 8015cb6:	429a      	cmp	r2, r3
 8015cb8:	f200 83aa 	bhi.w	8016410 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8015cbc:	7cbb      	ldrb	r3, [r7, #18]
 8015cbe:	b29b      	uxth	r3, r3
 8015cc0:	3b14      	subs	r3, #20
 8015cc2:	b29a      	uxth	r2, r3
 8015cc4:	4b81      	ldr	r3, [pc, #516]	@ (8015ecc <tcp_input+0x294>)
 8015cc6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8015cc8:	4b81      	ldr	r3, [pc, #516]	@ (8015ed0 <tcp_input+0x298>)
 8015cca:	2200      	movs	r2, #0
 8015ccc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	895a      	ldrh	r2, [r3, #10]
 8015cd2:	7cbb      	ldrb	r3, [r7, #18]
 8015cd4:	b29b      	uxth	r3, r3
 8015cd6:	429a      	cmp	r2, r3
 8015cd8:	d309      	bcc.n	8015cee <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8015cda:	4b7c      	ldr	r3, [pc, #496]	@ (8015ecc <tcp_input+0x294>)
 8015cdc:	881a      	ldrh	r2, [r3, #0]
 8015cde:	4b7d      	ldr	r3, [pc, #500]	@ (8015ed4 <tcp_input+0x29c>)
 8015ce0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8015ce2:	7cbb      	ldrb	r3, [r7, #18]
 8015ce4:	4619      	mov	r1, r3
 8015ce6:	6878      	ldr	r0, [r7, #4]
 8015ce8:	f7fd fe18 	bl	801391c <pbuf_remove_header>
 8015cec:	e04e      	b.n	8015d8c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d105      	bne.n	8015d02 <tcp_input+0xca>
 8015cf6:	4b70      	ldr	r3, [pc, #448]	@ (8015eb8 <tcp_input+0x280>)
 8015cf8:	22c2      	movs	r2, #194	@ 0xc2
 8015cfa:	4977      	ldr	r1, [pc, #476]	@ (8015ed8 <tcp_input+0x2a0>)
 8015cfc:	4870      	ldr	r0, [pc, #448]	@ (8015ec0 <tcp_input+0x288>)
 8015cfe:	f008 fa25 	bl	801e14c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8015d02:	2114      	movs	r1, #20
 8015d04:	6878      	ldr	r0, [r7, #4]
 8015d06:	f7fd fe09 	bl	801391c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	895a      	ldrh	r2, [r3, #10]
 8015d0e:	4b71      	ldr	r3, [pc, #452]	@ (8015ed4 <tcp_input+0x29c>)
 8015d10:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8015d12:	4b6e      	ldr	r3, [pc, #440]	@ (8015ecc <tcp_input+0x294>)
 8015d14:	881a      	ldrh	r2, [r3, #0]
 8015d16:	4b6f      	ldr	r3, [pc, #444]	@ (8015ed4 <tcp_input+0x29c>)
 8015d18:	881b      	ldrh	r3, [r3, #0]
 8015d1a:	1ad3      	subs	r3, r2, r3
 8015d1c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8015d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8015ed4 <tcp_input+0x29c>)
 8015d20:	881b      	ldrh	r3, [r3, #0]
 8015d22:	4619      	mov	r1, r3
 8015d24:	6878      	ldr	r0, [r7, #4]
 8015d26:	f7fd fdf9 	bl	801391c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	895b      	ldrh	r3, [r3, #10]
 8015d30:	8a3a      	ldrh	r2, [r7, #16]
 8015d32:	429a      	cmp	r2, r3
 8015d34:	f200 836e 	bhi.w	8016414 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	685b      	ldr	r3, [r3, #4]
 8015d3e:	4a64      	ldr	r2, [pc, #400]	@ (8015ed0 <tcp_input+0x298>)
 8015d40:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	8a3a      	ldrh	r2, [r7, #16]
 8015d48:	4611      	mov	r1, r2
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	f7fd fde6 	bl	801391c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	891a      	ldrh	r2, [r3, #8]
 8015d54:	8a3b      	ldrh	r3, [r7, #16]
 8015d56:	1ad3      	subs	r3, r2, r3
 8015d58:	b29a      	uxth	r2, r3
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	895b      	ldrh	r3, [r3, #10]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d005      	beq.n	8015d72 <tcp_input+0x13a>
 8015d66:	4b54      	ldr	r3, [pc, #336]	@ (8015eb8 <tcp_input+0x280>)
 8015d68:	22df      	movs	r2, #223	@ 0xdf
 8015d6a:	495c      	ldr	r1, [pc, #368]	@ (8015edc <tcp_input+0x2a4>)
 8015d6c:	4854      	ldr	r0, [pc, #336]	@ (8015ec0 <tcp_input+0x288>)
 8015d6e:	f008 f9ed 	bl	801e14c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	891a      	ldrh	r2, [r3, #8]
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	891b      	ldrh	r3, [r3, #8]
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	d005      	beq.n	8015d8c <tcp_input+0x154>
 8015d80:	4b4d      	ldr	r3, [pc, #308]	@ (8015eb8 <tcp_input+0x280>)
 8015d82:	22e0      	movs	r2, #224	@ 0xe0
 8015d84:	4956      	ldr	r1, [pc, #344]	@ (8015ee0 <tcp_input+0x2a8>)
 8015d86:	484e      	ldr	r0, [pc, #312]	@ (8015ec0 <tcp_input+0x288>)
 8015d88:	f008 f9e0 	bl	801e14c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8015d8c:	4b4d      	ldr	r3, [pc, #308]	@ (8015ec4 <tcp_input+0x28c>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	881b      	ldrh	r3, [r3, #0]
 8015d92:	b29b      	uxth	r3, r3
 8015d94:	4a4b      	ldr	r2, [pc, #300]	@ (8015ec4 <tcp_input+0x28c>)
 8015d96:	6814      	ldr	r4, [r2, #0]
 8015d98:	4618      	mov	r0, r3
 8015d9a:	f7fc fa57 	bl	801224c <lwip_htons>
 8015d9e:	4603      	mov	r3, r0
 8015da0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8015da2:	4b48      	ldr	r3, [pc, #288]	@ (8015ec4 <tcp_input+0x28c>)
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	885b      	ldrh	r3, [r3, #2]
 8015da8:	b29b      	uxth	r3, r3
 8015daa:	4a46      	ldr	r2, [pc, #280]	@ (8015ec4 <tcp_input+0x28c>)
 8015dac:	6814      	ldr	r4, [r2, #0]
 8015dae:	4618      	mov	r0, r3
 8015db0:	f7fc fa4c 	bl	801224c <lwip_htons>
 8015db4:	4603      	mov	r3, r0
 8015db6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8015db8:	4b42      	ldr	r3, [pc, #264]	@ (8015ec4 <tcp_input+0x28c>)
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	685b      	ldr	r3, [r3, #4]
 8015dbe:	4a41      	ldr	r2, [pc, #260]	@ (8015ec4 <tcp_input+0x28c>)
 8015dc0:	6814      	ldr	r4, [r2, #0]
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f7fc fa58 	bl	8012278 <lwip_htonl>
 8015dc8:	4603      	mov	r3, r0
 8015dca:	6063      	str	r3, [r4, #4]
 8015dcc:	6863      	ldr	r3, [r4, #4]
 8015dce:	4a45      	ldr	r2, [pc, #276]	@ (8015ee4 <tcp_input+0x2ac>)
 8015dd0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8015dd2:	4b3c      	ldr	r3, [pc, #240]	@ (8015ec4 <tcp_input+0x28c>)
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	689b      	ldr	r3, [r3, #8]
 8015dd8:	4a3a      	ldr	r2, [pc, #232]	@ (8015ec4 <tcp_input+0x28c>)
 8015dda:	6814      	ldr	r4, [r2, #0]
 8015ddc:	4618      	mov	r0, r3
 8015dde:	f7fc fa4b 	bl	8012278 <lwip_htonl>
 8015de2:	4603      	mov	r3, r0
 8015de4:	60a3      	str	r3, [r4, #8]
 8015de6:	68a3      	ldr	r3, [r4, #8]
 8015de8:	4a3f      	ldr	r2, [pc, #252]	@ (8015ee8 <tcp_input+0x2b0>)
 8015dea:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8015dec:	4b35      	ldr	r3, [pc, #212]	@ (8015ec4 <tcp_input+0x28c>)
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	89db      	ldrh	r3, [r3, #14]
 8015df2:	b29b      	uxth	r3, r3
 8015df4:	4a33      	ldr	r2, [pc, #204]	@ (8015ec4 <tcp_input+0x28c>)
 8015df6:	6814      	ldr	r4, [r2, #0]
 8015df8:	4618      	mov	r0, r3
 8015dfa:	f7fc fa27 	bl	801224c <lwip_htons>
 8015dfe:	4603      	mov	r3, r0
 8015e00:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8015e02:	4b30      	ldr	r3, [pc, #192]	@ (8015ec4 <tcp_input+0x28c>)
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	899b      	ldrh	r3, [r3, #12]
 8015e08:	b29b      	uxth	r3, r3
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	f7fc fa1e 	bl	801224c <lwip_htons>
 8015e10:	4603      	mov	r3, r0
 8015e12:	b2db      	uxtb	r3, r3
 8015e14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015e18:	b2da      	uxtb	r2, r3
 8015e1a:	4b34      	ldr	r3, [pc, #208]	@ (8015eec <tcp_input+0x2b4>)
 8015e1c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	891a      	ldrh	r2, [r3, #8]
 8015e22:	4b33      	ldr	r3, [pc, #204]	@ (8015ef0 <tcp_input+0x2b8>)
 8015e24:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8015e26:	4b31      	ldr	r3, [pc, #196]	@ (8015eec <tcp_input+0x2b4>)
 8015e28:	781b      	ldrb	r3, [r3, #0]
 8015e2a:	f003 0303 	and.w	r3, r3, #3
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d00c      	beq.n	8015e4c <tcp_input+0x214>
    tcplen++;
 8015e32:	4b2f      	ldr	r3, [pc, #188]	@ (8015ef0 <tcp_input+0x2b8>)
 8015e34:	881b      	ldrh	r3, [r3, #0]
 8015e36:	3301      	adds	r3, #1
 8015e38:	b29a      	uxth	r2, r3
 8015e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8015ef0 <tcp_input+0x2b8>)
 8015e3c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	891a      	ldrh	r2, [r3, #8]
 8015e42:	4b2b      	ldr	r3, [pc, #172]	@ (8015ef0 <tcp_input+0x2b8>)
 8015e44:	881b      	ldrh	r3, [r3, #0]
 8015e46:	429a      	cmp	r2, r3
 8015e48:	f200 82e6 	bhi.w	8016418 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8015e4c:	2300      	movs	r3, #0
 8015e4e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015e50:	4b28      	ldr	r3, [pc, #160]	@ (8015ef4 <tcp_input+0x2bc>)
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	61fb      	str	r3, [r7, #28]
 8015e56:	e09d      	b.n	8015f94 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8015e58:	69fb      	ldr	r3, [r7, #28]
 8015e5a:	7d1b      	ldrb	r3, [r3, #20]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d105      	bne.n	8015e6c <tcp_input+0x234>
 8015e60:	4b15      	ldr	r3, [pc, #84]	@ (8015eb8 <tcp_input+0x280>)
 8015e62:	22fb      	movs	r2, #251	@ 0xfb
 8015e64:	4924      	ldr	r1, [pc, #144]	@ (8015ef8 <tcp_input+0x2c0>)
 8015e66:	4816      	ldr	r0, [pc, #88]	@ (8015ec0 <tcp_input+0x288>)
 8015e68:	f008 f970 	bl	801e14c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8015e6c:	69fb      	ldr	r3, [r7, #28]
 8015e6e:	7d1b      	ldrb	r3, [r3, #20]
 8015e70:	2b0a      	cmp	r3, #10
 8015e72:	d105      	bne.n	8015e80 <tcp_input+0x248>
 8015e74:	4b10      	ldr	r3, [pc, #64]	@ (8015eb8 <tcp_input+0x280>)
 8015e76:	22fc      	movs	r2, #252	@ 0xfc
 8015e78:	4920      	ldr	r1, [pc, #128]	@ (8015efc <tcp_input+0x2c4>)
 8015e7a:	4811      	ldr	r0, [pc, #68]	@ (8015ec0 <tcp_input+0x288>)
 8015e7c:	f008 f966 	bl	801e14c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8015e80:	69fb      	ldr	r3, [r7, #28]
 8015e82:	7d1b      	ldrb	r3, [r3, #20]
 8015e84:	2b01      	cmp	r3, #1
 8015e86:	d105      	bne.n	8015e94 <tcp_input+0x25c>
 8015e88:	4b0b      	ldr	r3, [pc, #44]	@ (8015eb8 <tcp_input+0x280>)
 8015e8a:	22fd      	movs	r2, #253	@ 0xfd
 8015e8c:	491c      	ldr	r1, [pc, #112]	@ (8015f00 <tcp_input+0x2c8>)
 8015e8e:	480c      	ldr	r0, [pc, #48]	@ (8015ec0 <tcp_input+0x288>)
 8015e90:	f008 f95c 	bl	801e14c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015e94:	69fb      	ldr	r3, [r7, #28]
 8015e96:	7a1b      	ldrb	r3, [r3, #8]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d033      	beq.n	8015f04 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015e9c:	69fb      	ldr	r3, [r7, #28]
 8015e9e:	7a1a      	ldrb	r2, [r3, #8]
 8015ea0:	4b09      	ldr	r3, [pc, #36]	@ (8015ec8 <tcp_input+0x290>)
 8015ea2:	685b      	ldr	r3, [r3, #4]
 8015ea4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015ea8:	3301      	adds	r3, #1
 8015eaa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015eac:	429a      	cmp	r2, r3
 8015eae:	d029      	beq.n	8015f04 <tcp_input+0x2cc>
      prev = pcb;
 8015eb0:	69fb      	ldr	r3, [r7, #28]
 8015eb2:	61bb      	str	r3, [r7, #24]
      continue;
 8015eb4:	e06b      	b.n	8015f8e <tcp_input+0x356>
 8015eb6:	bf00      	nop
 8015eb8:	08021244 	.word	0x08021244
 8015ebc:	08021278 	.word	0x08021278
 8015ec0:	08021290 	.word	0x08021290
 8015ec4:	2000e518 	.word	0x2000e518
 8015ec8:	2000b3f0 	.word	0x2000b3f0
 8015ecc:	2000e51c 	.word	0x2000e51c
 8015ed0:	2000e520 	.word	0x2000e520
 8015ed4:	2000e51e 	.word	0x2000e51e
 8015ed8:	080212b8 	.word	0x080212b8
 8015edc:	080212c8 	.word	0x080212c8
 8015ee0:	080212d4 	.word	0x080212d4
 8015ee4:	2000e528 	.word	0x2000e528
 8015ee8:	2000e52c 	.word	0x2000e52c
 8015eec:	2000e534 	.word	0x2000e534
 8015ef0:	2000e532 	.word	0x2000e532
 8015ef4:	2000e4fc 	.word	0x2000e4fc
 8015ef8:	080212f4 	.word	0x080212f4
 8015efc:	0802131c 	.word	0x0802131c
 8015f00:	08021348 	.word	0x08021348
    }

    if (pcb->remote_port == tcphdr->src &&
 8015f04:	69fb      	ldr	r3, [r7, #28]
 8015f06:	8b1a      	ldrh	r2, [r3, #24]
 8015f08:	4b72      	ldr	r3, [pc, #456]	@ (80160d4 <tcp_input+0x49c>)
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	881b      	ldrh	r3, [r3, #0]
 8015f0e:	b29b      	uxth	r3, r3
 8015f10:	429a      	cmp	r2, r3
 8015f12:	d13a      	bne.n	8015f8a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8015f14:	69fb      	ldr	r3, [r7, #28]
 8015f16:	8ada      	ldrh	r2, [r3, #22]
 8015f18:	4b6e      	ldr	r3, [pc, #440]	@ (80160d4 <tcp_input+0x49c>)
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	885b      	ldrh	r3, [r3, #2]
 8015f1e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8015f20:	429a      	cmp	r2, r3
 8015f22:	d132      	bne.n	8015f8a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015f24:	69fb      	ldr	r3, [r7, #28]
 8015f26:	685a      	ldr	r2, [r3, #4]
 8015f28:	4b6b      	ldr	r3, [pc, #428]	@ (80160d8 <tcp_input+0x4a0>)
 8015f2a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8015f2c:	429a      	cmp	r2, r3
 8015f2e:	d12c      	bne.n	8015f8a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015f30:	69fb      	ldr	r3, [r7, #28]
 8015f32:	681a      	ldr	r2, [r3, #0]
 8015f34:	4b68      	ldr	r3, [pc, #416]	@ (80160d8 <tcp_input+0x4a0>)
 8015f36:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015f38:	429a      	cmp	r2, r3
 8015f3a:	d126      	bne.n	8015f8a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8015f3c:	69fb      	ldr	r3, [r7, #28]
 8015f3e:	68db      	ldr	r3, [r3, #12]
 8015f40:	69fa      	ldr	r2, [r7, #28]
 8015f42:	429a      	cmp	r2, r3
 8015f44:	d106      	bne.n	8015f54 <tcp_input+0x31c>
 8015f46:	4b65      	ldr	r3, [pc, #404]	@ (80160dc <tcp_input+0x4a4>)
 8015f48:	f240 120d 	movw	r2, #269	@ 0x10d
 8015f4c:	4964      	ldr	r1, [pc, #400]	@ (80160e0 <tcp_input+0x4a8>)
 8015f4e:	4865      	ldr	r0, [pc, #404]	@ (80160e4 <tcp_input+0x4ac>)
 8015f50:	f008 f8fc 	bl	801e14c <iprintf>
      if (prev != NULL) {
 8015f54:	69bb      	ldr	r3, [r7, #24]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d00a      	beq.n	8015f70 <tcp_input+0x338>
        prev->next = pcb->next;
 8015f5a:	69fb      	ldr	r3, [r7, #28]
 8015f5c:	68da      	ldr	r2, [r3, #12]
 8015f5e:	69bb      	ldr	r3, [r7, #24]
 8015f60:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8015f62:	4b61      	ldr	r3, [pc, #388]	@ (80160e8 <tcp_input+0x4b0>)
 8015f64:	681a      	ldr	r2, [r3, #0]
 8015f66:	69fb      	ldr	r3, [r7, #28]
 8015f68:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8015f6a:	4a5f      	ldr	r2, [pc, #380]	@ (80160e8 <tcp_input+0x4b0>)
 8015f6c:	69fb      	ldr	r3, [r7, #28]
 8015f6e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8015f70:	69fb      	ldr	r3, [r7, #28]
 8015f72:	68db      	ldr	r3, [r3, #12]
 8015f74:	69fa      	ldr	r2, [r7, #28]
 8015f76:	429a      	cmp	r2, r3
 8015f78:	d111      	bne.n	8015f9e <tcp_input+0x366>
 8015f7a:	4b58      	ldr	r3, [pc, #352]	@ (80160dc <tcp_input+0x4a4>)
 8015f7c:	f240 1215 	movw	r2, #277	@ 0x115
 8015f80:	495a      	ldr	r1, [pc, #360]	@ (80160ec <tcp_input+0x4b4>)
 8015f82:	4858      	ldr	r0, [pc, #352]	@ (80160e4 <tcp_input+0x4ac>)
 8015f84:	f008 f8e2 	bl	801e14c <iprintf>
      break;
 8015f88:	e009      	b.n	8015f9e <tcp_input+0x366>
    }
    prev = pcb;
 8015f8a:	69fb      	ldr	r3, [r7, #28]
 8015f8c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f8e:	69fb      	ldr	r3, [r7, #28]
 8015f90:	68db      	ldr	r3, [r3, #12]
 8015f92:	61fb      	str	r3, [r7, #28]
 8015f94:	69fb      	ldr	r3, [r7, #28]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	f47f af5e 	bne.w	8015e58 <tcp_input+0x220>
 8015f9c:	e000      	b.n	8015fa0 <tcp_input+0x368>
      break;
 8015f9e:	bf00      	nop
  }

  if (pcb == NULL) {
 8015fa0:	69fb      	ldr	r3, [r7, #28]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	f040 80aa 	bne.w	80160fc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015fa8:	4b51      	ldr	r3, [pc, #324]	@ (80160f0 <tcp_input+0x4b8>)
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	61fb      	str	r3, [r7, #28]
 8015fae:	e03f      	b.n	8016030 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015fb0:	69fb      	ldr	r3, [r7, #28]
 8015fb2:	7d1b      	ldrb	r3, [r3, #20]
 8015fb4:	2b0a      	cmp	r3, #10
 8015fb6:	d006      	beq.n	8015fc6 <tcp_input+0x38e>
 8015fb8:	4b48      	ldr	r3, [pc, #288]	@ (80160dc <tcp_input+0x4a4>)
 8015fba:	f240 121f 	movw	r2, #287	@ 0x11f
 8015fbe:	494d      	ldr	r1, [pc, #308]	@ (80160f4 <tcp_input+0x4bc>)
 8015fc0:	4848      	ldr	r0, [pc, #288]	@ (80160e4 <tcp_input+0x4ac>)
 8015fc2:	f008 f8c3 	bl	801e14c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015fc6:	69fb      	ldr	r3, [r7, #28]
 8015fc8:	7a1b      	ldrb	r3, [r3, #8]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d009      	beq.n	8015fe2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015fce:	69fb      	ldr	r3, [r7, #28]
 8015fd0:	7a1a      	ldrb	r2, [r3, #8]
 8015fd2:	4b41      	ldr	r3, [pc, #260]	@ (80160d8 <tcp_input+0x4a0>)
 8015fd4:	685b      	ldr	r3, [r3, #4]
 8015fd6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015fda:	3301      	adds	r3, #1
 8015fdc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015fde:	429a      	cmp	r2, r3
 8015fe0:	d122      	bne.n	8016028 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8015fe2:	69fb      	ldr	r3, [r7, #28]
 8015fe4:	8b1a      	ldrh	r2, [r3, #24]
 8015fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80160d4 <tcp_input+0x49c>)
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	881b      	ldrh	r3, [r3, #0]
 8015fec:	b29b      	uxth	r3, r3
 8015fee:	429a      	cmp	r2, r3
 8015ff0:	d11b      	bne.n	801602a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8015ff2:	69fb      	ldr	r3, [r7, #28]
 8015ff4:	8ada      	ldrh	r2, [r3, #22]
 8015ff6:	4b37      	ldr	r3, [pc, #220]	@ (80160d4 <tcp_input+0x49c>)
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	885b      	ldrh	r3, [r3, #2]
 8015ffc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8015ffe:	429a      	cmp	r2, r3
 8016000:	d113      	bne.n	801602a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016002:	69fb      	ldr	r3, [r7, #28]
 8016004:	685a      	ldr	r2, [r3, #4]
 8016006:	4b34      	ldr	r3, [pc, #208]	@ (80160d8 <tcp_input+0x4a0>)
 8016008:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801600a:	429a      	cmp	r2, r3
 801600c:	d10d      	bne.n	801602a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801600e:	69fb      	ldr	r3, [r7, #28]
 8016010:	681a      	ldr	r2, [r3, #0]
 8016012:	4b31      	ldr	r3, [pc, #196]	@ (80160d8 <tcp_input+0x4a0>)
 8016014:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016016:	429a      	cmp	r2, r3
 8016018:	d107      	bne.n	801602a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801601a:	69f8      	ldr	r0, [r7, #28]
 801601c:	f000 fb56 	bl	80166cc <tcp_timewait_input>
        }
        pbuf_free(p);
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	f7fd fd01 	bl	8013a28 <pbuf_free>
        return;
 8016026:	e1fd      	b.n	8016424 <tcp_input+0x7ec>
        continue;
 8016028:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801602a:	69fb      	ldr	r3, [r7, #28]
 801602c:	68db      	ldr	r3, [r3, #12]
 801602e:	61fb      	str	r3, [r7, #28]
 8016030:	69fb      	ldr	r3, [r7, #28]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d1bc      	bne.n	8015fb0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016036:	2300      	movs	r3, #0
 8016038:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801603a:	4b2f      	ldr	r3, [pc, #188]	@ (80160f8 <tcp_input+0x4c0>)
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	617b      	str	r3, [r7, #20]
 8016040:	e02a      	b.n	8016098 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016042:	697b      	ldr	r3, [r7, #20]
 8016044:	7a1b      	ldrb	r3, [r3, #8]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d00c      	beq.n	8016064 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801604a:	697b      	ldr	r3, [r7, #20]
 801604c:	7a1a      	ldrb	r2, [r3, #8]
 801604e:	4b22      	ldr	r3, [pc, #136]	@ (80160d8 <tcp_input+0x4a0>)
 8016050:	685b      	ldr	r3, [r3, #4]
 8016052:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016056:	3301      	adds	r3, #1
 8016058:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801605a:	429a      	cmp	r2, r3
 801605c:	d002      	beq.n	8016064 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801605e:	697b      	ldr	r3, [r7, #20]
 8016060:	61bb      	str	r3, [r7, #24]
        continue;
 8016062:	e016      	b.n	8016092 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016064:	697b      	ldr	r3, [r7, #20]
 8016066:	8ada      	ldrh	r2, [r3, #22]
 8016068:	4b1a      	ldr	r3, [pc, #104]	@ (80160d4 <tcp_input+0x49c>)
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	885b      	ldrh	r3, [r3, #2]
 801606e:	b29b      	uxth	r3, r3
 8016070:	429a      	cmp	r2, r3
 8016072:	d10c      	bne.n	801608e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016074:	697b      	ldr	r3, [r7, #20]
 8016076:	681a      	ldr	r2, [r3, #0]
 8016078:	4b17      	ldr	r3, [pc, #92]	@ (80160d8 <tcp_input+0x4a0>)
 801607a:	695b      	ldr	r3, [r3, #20]
 801607c:	429a      	cmp	r2, r3
 801607e:	d00f      	beq.n	80160a0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8016080:	697b      	ldr	r3, [r7, #20]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d00d      	beq.n	80160a2 <tcp_input+0x46a>
 8016086:	697b      	ldr	r3, [r7, #20]
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d009      	beq.n	80160a2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801608e:	697b      	ldr	r3, [r7, #20]
 8016090:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016092:	697b      	ldr	r3, [r7, #20]
 8016094:	68db      	ldr	r3, [r3, #12]
 8016096:	617b      	str	r3, [r7, #20]
 8016098:	697b      	ldr	r3, [r7, #20]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d1d1      	bne.n	8016042 <tcp_input+0x40a>
 801609e:	e000      	b.n	80160a2 <tcp_input+0x46a>
            break;
 80160a0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80160a2:	697b      	ldr	r3, [r7, #20]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d029      	beq.n	80160fc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80160a8:	69bb      	ldr	r3, [r7, #24]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d00a      	beq.n	80160c4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80160ae:	697b      	ldr	r3, [r7, #20]
 80160b0:	68da      	ldr	r2, [r3, #12]
 80160b2:	69bb      	ldr	r3, [r7, #24]
 80160b4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80160b6:	4b10      	ldr	r3, [pc, #64]	@ (80160f8 <tcp_input+0x4c0>)
 80160b8:	681a      	ldr	r2, [r3, #0]
 80160ba:	697b      	ldr	r3, [r7, #20]
 80160bc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80160be:	4a0e      	ldr	r2, [pc, #56]	@ (80160f8 <tcp_input+0x4c0>)
 80160c0:	697b      	ldr	r3, [r7, #20]
 80160c2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80160c4:	6978      	ldr	r0, [r7, #20]
 80160c6:	f000 fa03 	bl	80164d0 <tcp_listen_input>
      }
      pbuf_free(p);
 80160ca:	6878      	ldr	r0, [r7, #4]
 80160cc:	f7fd fcac 	bl	8013a28 <pbuf_free>
      return;
 80160d0:	e1a8      	b.n	8016424 <tcp_input+0x7ec>
 80160d2:	bf00      	nop
 80160d4:	2000e518 	.word	0x2000e518
 80160d8:	2000b3f0 	.word	0x2000b3f0
 80160dc:	08021244 	.word	0x08021244
 80160e0:	08021370 	.word	0x08021370
 80160e4:	08021290 	.word	0x08021290
 80160e8:	2000e4fc 	.word	0x2000e4fc
 80160ec:	0802139c 	.word	0x0802139c
 80160f0:	2000e500 	.word	0x2000e500
 80160f4:	080213c8 	.word	0x080213c8
 80160f8:	2000e4f8 	.word	0x2000e4f8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80160fc:	69fb      	ldr	r3, [r7, #28]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	f000 8158 	beq.w	80163b4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016104:	4b95      	ldr	r3, [pc, #596]	@ (801635c <tcp_input+0x724>)
 8016106:	2200      	movs	r2, #0
 8016108:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	891a      	ldrh	r2, [r3, #8]
 801610e:	4b93      	ldr	r3, [pc, #588]	@ (801635c <tcp_input+0x724>)
 8016110:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8016112:	4a92      	ldr	r2, [pc, #584]	@ (801635c <tcp_input+0x724>)
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016118:	4b91      	ldr	r3, [pc, #580]	@ (8016360 <tcp_input+0x728>)
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	4a8f      	ldr	r2, [pc, #572]	@ (801635c <tcp_input+0x724>)
 801611e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8016120:	4b90      	ldr	r3, [pc, #576]	@ (8016364 <tcp_input+0x72c>)
 8016122:	2200      	movs	r2, #0
 8016124:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016126:	4b90      	ldr	r3, [pc, #576]	@ (8016368 <tcp_input+0x730>)
 8016128:	2200      	movs	r2, #0
 801612a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801612c:	4b8f      	ldr	r3, [pc, #572]	@ (801636c <tcp_input+0x734>)
 801612e:	2200      	movs	r2, #0
 8016130:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8016132:	4b8f      	ldr	r3, [pc, #572]	@ (8016370 <tcp_input+0x738>)
 8016134:	781b      	ldrb	r3, [r3, #0]
 8016136:	f003 0308 	and.w	r3, r3, #8
 801613a:	2b00      	cmp	r3, #0
 801613c:	d006      	beq.n	801614c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	7b5b      	ldrb	r3, [r3, #13]
 8016142:	f043 0301 	orr.w	r3, r3, #1
 8016146:	b2da      	uxtb	r2, r3
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801614c:	69fb      	ldr	r3, [r7, #28]
 801614e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016150:	2b00      	cmp	r3, #0
 8016152:	d017      	beq.n	8016184 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016154:	69f8      	ldr	r0, [r7, #28]
 8016156:	f7ff f85b 	bl	8015210 <tcp_process_refused_data>
 801615a:	4603      	mov	r3, r0
 801615c:	f113 0f0d 	cmn.w	r3, #13
 8016160:	d007      	beq.n	8016172 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016162:	69fb      	ldr	r3, [r7, #28]
 8016164:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016166:	2b00      	cmp	r3, #0
 8016168:	d00c      	beq.n	8016184 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801616a:	4b82      	ldr	r3, [pc, #520]	@ (8016374 <tcp_input+0x73c>)
 801616c:	881b      	ldrh	r3, [r3, #0]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d008      	beq.n	8016184 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8016172:	69fb      	ldr	r3, [r7, #28]
 8016174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016176:	2b00      	cmp	r3, #0
 8016178:	f040 80e3 	bne.w	8016342 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801617c:	69f8      	ldr	r0, [r7, #28]
 801617e:	f003 fdff 	bl	8019d80 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8016182:	e0de      	b.n	8016342 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8016184:	4a7c      	ldr	r2, [pc, #496]	@ (8016378 <tcp_input+0x740>)
 8016186:	69fb      	ldr	r3, [r7, #28]
 8016188:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801618a:	69f8      	ldr	r0, [r7, #28]
 801618c:	f000 fb18 	bl	80167c0 <tcp_process>
 8016190:	4603      	mov	r3, r0
 8016192:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8016194:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016198:	f113 0f0d 	cmn.w	r3, #13
 801619c:	f000 80d3 	beq.w	8016346 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80161a0:	4b71      	ldr	r3, [pc, #452]	@ (8016368 <tcp_input+0x730>)
 80161a2:	781b      	ldrb	r3, [r3, #0]
 80161a4:	f003 0308 	and.w	r3, r3, #8
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d015      	beq.n	80161d8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80161ac:	69fb      	ldr	r3, [r7, #28]
 80161ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d008      	beq.n	80161c8 <tcp_input+0x590>
 80161b6:	69fb      	ldr	r3, [r7, #28]
 80161b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80161bc:	69fa      	ldr	r2, [r7, #28]
 80161be:	6912      	ldr	r2, [r2, #16]
 80161c0:	f06f 010d 	mvn.w	r1, #13
 80161c4:	4610      	mov	r0, r2
 80161c6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80161c8:	69f9      	ldr	r1, [r7, #28]
 80161ca:	486c      	ldr	r0, [pc, #432]	@ (801637c <tcp_input+0x744>)
 80161cc:	f7ff fbbc 	bl	8015948 <tcp_pcb_remove>
        tcp_free(pcb);
 80161d0:	69f8      	ldr	r0, [r7, #28]
 80161d2:	f7fd fed5 	bl	8013f80 <tcp_free>
 80161d6:	e0da      	b.n	801638e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80161d8:	2300      	movs	r3, #0
 80161da:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80161dc:	4b63      	ldr	r3, [pc, #396]	@ (801636c <tcp_input+0x734>)
 80161de:	881b      	ldrh	r3, [r3, #0]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d01d      	beq.n	8016220 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80161e4:	4b61      	ldr	r3, [pc, #388]	@ (801636c <tcp_input+0x734>)
 80161e6:	881b      	ldrh	r3, [r3, #0]
 80161e8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80161ea:	69fb      	ldr	r3, [r7, #28]
 80161ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d00a      	beq.n	801620a <tcp_input+0x5d2>
 80161f4:	69fb      	ldr	r3, [r7, #28]
 80161f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80161fa:	69fa      	ldr	r2, [r7, #28]
 80161fc:	6910      	ldr	r0, [r2, #16]
 80161fe:	89fa      	ldrh	r2, [r7, #14]
 8016200:	69f9      	ldr	r1, [r7, #28]
 8016202:	4798      	blx	r3
 8016204:	4603      	mov	r3, r0
 8016206:	74fb      	strb	r3, [r7, #19]
 8016208:	e001      	b.n	801620e <tcp_input+0x5d6>
 801620a:	2300      	movs	r3, #0
 801620c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801620e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016212:	f113 0f0d 	cmn.w	r3, #13
 8016216:	f000 8098 	beq.w	801634a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801621a:	4b54      	ldr	r3, [pc, #336]	@ (801636c <tcp_input+0x734>)
 801621c:	2200      	movs	r2, #0
 801621e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8016220:	69f8      	ldr	r0, [r7, #28]
 8016222:	f000 f915 	bl	8016450 <tcp_input_delayed_close>
 8016226:	4603      	mov	r3, r0
 8016228:	2b00      	cmp	r3, #0
 801622a:	f040 8090 	bne.w	801634e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801622e:	4b4d      	ldr	r3, [pc, #308]	@ (8016364 <tcp_input+0x72c>)
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d041      	beq.n	80162ba <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016236:	69fb      	ldr	r3, [r7, #28]
 8016238:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801623a:	2b00      	cmp	r3, #0
 801623c:	d006      	beq.n	801624c <tcp_input+0x614>
 801623e:	4b50      	ldr	r3, [pc, #320]	@ (8016380 <tcp_input+0x748>)
 8016240:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8016244:	494f      	ldr	r1, [pc, #316]	@ (8016384 <tcp_input+0x74c>)
 8016246:	4850      	ldr	r0, [pc, #320]	@ (8016388 <tcp_input+0x750>)
 8016248:	f007 ff80 	bl	801e14c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801624c:	69fb      	ldr	r3, [r7, #28]
 801624e:	8b5b      	ldrh	r3, [r3, #26]
 8016250:	f003 0310 	and.w	r3, r3, #16
 8016254:	2b00      	cmp	r3, #0
 8016256:	d008      	beq.n	801626a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016258:	4b42      	ldr	r3, [pc, #264]	@ (8016364 <tcp_input+0x72c>)
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	4618      	mov	r0, r3
 801625e:	f7fd fbe3 	bl	8013a28 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8016262:	69f8      	ldr	r0, [r7, #28]
 8016264:	f7fe f9d0 	bl	8014608 <tcp_abort>
            goto aborted;
 8016268:	e091      	b.n	801638e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801626a:	69fb      	ldr	r3, [r7, #28]
 801626c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016270:	2b00      	cmp	r3, #0
 8016272:	d00c      	beq.n	801628e <tcp_input+0x656>
 8016274:	69fb      	ldr	r3, [r7, #28]
 8016276:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801627a:	69fb      	ldr	r3, [r7, #28]
 801627c:	6918      	ldr	r0, [r3, #16]
 801627e:	4b39      	ldr	r3, [pc, #228]	@ (8016364 <tcp_input+0x72c>)
 8016280:	681a      	ldr	r2, [r3, #0]
 8016282:	2300      	movs	r3, #0
 8016284:	69f9      	ldr	r1, [r7, #28]
 8016286:	47a0      	blx	r4
 8016288:	4603      	mov	r3, r0
 801628a:	74fb      	strb	r3, [r7, #19]
 801628c:	e008      	b.n	80162a0 <tcp_input+0x668>
 801628e:	4b35      	ldr	r3, [pc, #212]	@ (8016364 <tcp_input+0x72c>)
 8016290:	681a      	ldr	r2, [r3, #0]
 8016292:	2300      	movs	r3, #0
 8016294:	69f9      	ldr	r1, [r7, #28]
 8016296:	2000      	movs	r0, #0
 8016298:	f7ff f890 	bl	80153bc <tcp_recv_null>
 801629c:	4603      	mov	r3, r0
 801629e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80162a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80162a4:	f113 0f0d 	cmn.w	r3, #13
 80162a8:	d053      	beq.n	8016352 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80162aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d003      	beq.n	80162ba <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80162b2:	4b2c      	ldr	r3, [pc, #176]	@ (8016364 <tcp_input+0x72c>)
 80162b4:	681a      	ldr	r2, [r3, #0]
 80162b6:	69fb      	ldr	r3, [r7, #28]
 80162b8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80162ba:	4b2b      	ldr	r3, [pc, #172]	@ (8016368 <tcp_input+0x730>)
 80162bc:	781b      	ldrb	r3, [r3, #0]
 80162be:	f003 0320 	and.w	r3, r3, #32
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d030      	beq.n	8016328 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80162c6:	69fb      	ldr	r3, [r7, #28]
 80162c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d009      	beq.n	80162e2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80162ce:	69fb      	ldr	r3, [r7, #28]
 80162d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80162d2:	7b5a      	ldrb	r2, [r3, #13]
 80162d4:	69fb      	ldr	r3, [r7, #28]
 80162d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80162d8:	f042 0220 	orr.w	r2, r2, #32
 80162dc:	b2d2      	uxtb	r2, r2
 80162de:	735a      	strb	r2, [r3, #13]
 80162e0:	e022      	b.n	8016328 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80162e2:	69fb      	ldr	r3, [r7, #28]
 80162e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162e6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80162ea:	d005      	beq.n	80162f8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80162ec:	69fb      	ldr	r3, [r7, #28]
 80162ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162f0:	3301      	adds	r3, #1
 80162f2:	b29a      	uxth	r2, r3
 80162f4:	69fb      	ldr	r3, [r7, #28]
 80162f6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80162f8:	69fb      	ldr	r3, [r7, #28]
 80162fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d00b      	beq.n	801631a <tcp_input+0x6e2>
 8016302:	69fb      	ldr	r3, [r7, #28]
 8016304:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016308:	69fb      	ldr	r3, [r7, #28]
 801630a:	6918      	ldr	r0, [r3, #16]
 801630c:	2300      	movs	r3, #0
 801630e:	2200      	movs	r2, #0
 8016310:	69f9      	ldr	r1, [r7, #28]
 8016312:	47a0      	blx	r4
 8016314:	4603      	mov	r3, r0
 8016316:	74fb      	strb	r3, [r7, #19]
 8016318:	e001      	b.n	801631e <tcp_input+0x6e6>
 801631a:	2300      	movs	r3, #0
 801631c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801631e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016322:	f113 0f0d 	cmn.w	r3, #13
 8016326:	d016      	beq.n	8016356 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016328:	4b13      	ldr	r3, [pc, #76]	@ (8016378 <tcp_input+0x740>)
 801632a:	2200      	movs	r2, #0
 801632c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801632e:	69f8      	ldr	r0, [r7, #28]
 8016330:	f000 f88e 	bl	8016450 <tcp_input_delayed_close>
 8016334:	4603      	mov	r3, r0
 8016336:	2b00      	cmp	r3, #0
 8016338:	d128      	bne.n	801638c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801633a:	69f8      	ldr	r0, [r7, #28]
 801633c:	f002 ff1a 	bl	8019174 <tcp_output>
 8016340:	e025      	b.n	801638e <tcp_input+0x756>
        goto aborted;
 8016342:	bf00      	nop
 8016344:	e023      	b.n	801638e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016346:	bf00      	nop
 8016348:	e021      	b.n	801638e <tcp_input+0x756>
              goto aborted;
 801634a:	bf00      	nop
 801634c:	e01f      	b.n	801638e <tcp_input+0x756>
          goto aborted;
 801634e:	bf00      	nop
 8016350:	e01d      	b.n	801638e <tcp_input+0x756>
            goto aborted;
 8016352:	bf00      	nop
 8016354:	e01b      	b.n	801638e <tcp_input+0x756>
              goto aborted;
 8016356:	bf00      	nop
 8016358:	e019      	b.n	801638e <tcp_input+0x756>
 801635a:	bf00      	nop
 801635c:	2000e508 	.word	0x2000e508
 8016360:	2000e518 	.word	0x2000e518
 8016364:	2000e538 	.word	0x2000e538
 8016368:	2000e535 	.word	0x2000e535
 801636c:	2000e530 	.word	0x2000e530
 8016370:	2000e534 	.word	0x2000e534
 8016374:	2000e532 	.word	0x2000e532
 8016378:	2000e53c 	.word	0x2000e53c
 801637c:	2000e4fc 	.word	0x2000e4fc
 8016380:	08021244 	.word	0x08021244
 8016384:	080213f8 	.word	0x080213f8
 8016388:	08021290 	.word	0x08021290
          goto aborted;
 801638c:	bf00      	nop
    tcp_input_pcb = NULL;
 801638e:	4b27      	ldr	r3, [pc, #156]	@ (801642c <tcp_input+0x7f4>)
 8016390:	2200      	movs	r2, #0
 8016392:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8016394:	4b26      	ldr	r3, [pc, #152]	@ (8016430 <tcp_input+0x7f8>)
 8016396:	2200      	movs	r2, #0
 8016398:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801639a:	4b26      	ldr	r3, [pc, #152]	@ (8016434 <tcp_input+0x7fc>)
 801639c:	685b      	ldr	r3, [r3, #4]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d03f      	beq.n	8016422 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80163a2:	4b24      	ldr	r3, [pc, #144]	@ (8016434 <tcp_input+0x7fc>)
 80163a4:	685b      	ldr	r3, [r3, #4]
 80163a6:	4618      	mov	r0, r3
 80163a8:	f7fd fb3e 	bl	8013a28 <pbuf_free>
      inseg.p = NULL;
 80163ac:	4b21      	ldr	r3, [pc, #132]	@ (8016434 <tcp_input+0x7fc>)
 80163ae:	2200      	movs	r2, #0
 80163b0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80163b2:	e036      	b.n	8016422 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80163b4:	4b20      	ldr	r3, [pc, #128]	@ (8016438 <tcp_input+0x800>)
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	899b      	ldrh	r3, [r3, #12]
 80163ba:	b29b      	uxth	r3, r3
 80163bc:	4618      	mov	r0, r3
 80163be:	f7fb ff45 	bl	801224c <lwip_htons>
 80163c2:	4603      	mov	r3, r0
 80163c4:	b2db      	uxtb	r3, r3
 80163c6:	f003 0304 	and.w	r3, r3, #4
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d118      	bne.n	8016400 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80163ce:	4b1b      	ldr	r3, [pc, #108]	@ (801643c <tcp_input+0x804>)
 80163d0:	6819      	ldr	r1, [r3, #0]
 80163d2:	4b1b      	ldr	r3, [pc, #108]	@ (8016440 <tcp_input+0x808>)
 80163d4:	881b      	ldrh	r3, [r3, #0]
 80163d6:	461a      	mov	r2, r3
 80163d8:	4b1a      	ldr	r3, [pc, #104]	@ (8016444 <tcp_input+0x80c>)
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80163de:	4b16      	ldr	r3, [pc, #88]	@ (8016438 <tcp_input+0x800>)
 80163e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80163e2:	885b      	ldrh	r3, [r3, #2]
 80163e4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80163e6:	4a14      	ldr	r2, [pc, #80]	@ (8016438 <tcp_input+0x800>)
 80163e8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80163ea:	8812      	ldrh	r2, [r2, #0]
 80163ec:	b292      	uxth	r2, r2
 80163ee:	9202      	str	r2, [sp, #8]
 80163f0:	9301      	str	r3, [sp, #4]
 80163f2:	4b15      	ldr	r3, [pc, #84]	@ (8016448 <tcp_input+0x810>)
 80163f4:	9300      	str	r3, [sp, #0]
 80163f6:	4b15      	ldr	r3, [pc, #84]	@ (801644c <tcp_input+0x814>)
 80163f8:	4602      	mov	r2, r0
 80163fa:	2000      	movs	r0, #0
 80163fc:	f003 fc6e 	bl	8019cdc <tcp_rst>
    pbuf_free(p);
 8016400:	6878      	ldr	r0, [r7, #4]
 8016402:	f7fd fb11 	bl	8013a28 <pbuf_free>
  return;
 8016406:	e00c      	b.n	8016422 <tcp_input+0x7ea>
    goto dropped;
 8016408:	bf00      	nop
 801640a:	e006      	b.n	801641a <tcp_input+0x7e2>
    goto dropped;
 801640c:	bf00      	nop
 801640e:	e004      	b.n	801641a <tcp_input+0x7e2>
    goto dropped;
 8016410:	bf00      	nop
 8016412:	e002      	b.n	801641a <tcp_input+0x7e2>
      goto dropped;
 8016414:	bf00      	nop
 8016416:	e000      	b.n	801641a <tcp_input+0x7e2>
      goto dropped;
 8016418:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801641a:	6878      	ldr	r0, [r7, #4]
 801641c:	f7fd fb04 	bl	8013a28 <pbuf_free>
 8016420:	e000      	b.n	8016424 <tcp_input+0x7ec>
  return;
 8016422:	bf00      	nop
}
 8016424:	3724      	adds	r7, #36	@ 0x24
 8016426:	46bd      	mov	sp, r7
 8016428:	bd90      	pop	{r4, r7, pc}
 801642a:	bf00      	nop
 801642c:	2000e53c 	.word	0x2000e53c
 8016430:	2000e538 	.word	0x2000e538
 8016434:	2000e508 	.word	0x2000e508
 8016438:	2000e518 	.word	0x2000e518
 801643c:	2000e52c 	.word	0x2000e52c
 8016440:	2000e532 	.word	0x2000e532
 8016444:	2000e528 	.word	0x2000e528
 8016448:	2000b400 	.word	0x2000b400
 801644c:	2000b404 	.word	0x2000b404

08016450 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b082      	sub	sp, #8
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d106      	bne.n	801646c <tcp_input_delayed_close+0x1c>
 801645e:	4b17      	ldr	r3, [pc, #92]	@ (80164bc <tcp_input_delayed_close+0x6c>)
 8016460:	f240 225a 	movw	r2, #602	@ 0x25a
 8016464:	4916      	ldr	r1, [pc, #88]	@ (80164c0 <tcp_input_delayed_close+0x70>)
 8016466:	4817      	ldr	r0, [pc, #92]	@ (80164c4 <tcp_input_delayed_close+0x74>)
 8016468:	f007 fe70 	bl	801e14c <iprintf>

  if (recv_flags & TF_CLOSED) {
 801646c:	4b16      	ldr	r3, [pc, #88]	@ (80164c8 <tcp_input_delayed_close+0x78>)
 801646e:	781b      	ldrb	r3, [r3, #0]
 8016470:	f003 0310 	and.w	r3, r3, #16
 8016474:	2b00      	cmp	r3, #0
 8016476:	d01c      	beq.n	80164b2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	8b5b      	ldrh	r3, [r3, #26]
 801647c:	f003 0310 	and.w	r3, r3, #16
 8016480:	2b00      	cmp	r3, #0
 8016482:	d10d      	bne.n	80164a0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801648a:	2b00      	cmp	r3, #0
 801648c:	d008      	beq.n	80164a0 <tcp_input_delayed_close+0x50>
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016494:	687a      	ldr	r2, [r7, #4]
 8016496:	6912      	ldr	r2, [r2, #16]
 8016498:	f06f 010e 	mvn.w	r1, #14
 801649c:	4610      	mov	r0, r2
 801649e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80164a0:	6879      	ldr	r1, [r7, #4]
 80164a2:	480a      	ldr	r0, [pc, #40]	@ (80164cc <tcp_input_delayed_close+0x7c>)
 80164a4:	f7ff fa50 	bl	8015948 <tcp_pcb_remove>
    tcp_free(pcb);
 80164a8:	6878      	ldr	r0, [r7, #4]
 80164aa:	f7fd fd69 	bl	8013f80 <tcp_free>
    return 1;
 80164ae:	2301      	movs	r3, #1
 80164b0:	e000      	b.n	80164b4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80164b2:	2300      	movs	r3, #0
}
 80164b4:	4618      	mov	r0, r3
 80164b6:	3708      	adds	r7, #8
 80164b8:	46bd      	mov	sp, r7
 80164ba:	bd80      	pop	{r7, pc}
 80164bc:	08021244 	.word	0x08021244
 80164c0:	08021414 	.word	0x08021414
 80164c4:	08021290 	.word	0x08021290
 80164c8:	2000e535 	.word	0x2000e535
 80164cc:	2000e4fc 	.word	0x2000e4fc

080164d0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80164d0:	b590      	push	{r4, r7, lr}
 80164d2:	b08b      	sub	sp, #44	@ 0x2c
 80164d4:	af04      	add	r7, sp, #16
 80164d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80164d8:	4b6f      	ldr	r3, [pc, #444]	@ (8016698 <tcp_listen_input+0x1c8>)
 80164da:	781b      	ldrb	r3, [r3, #0]
 80164dc:	f003 0304 	and.w	r3, r3, #4
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	f040 80d2 	bne.w	801668a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d106      	bne.n	80164fa <tcp_listen_input+0x2a>
 80164ec:	4b6b      	ldr	r3, [pc, #428]	@ (801669c <tcp_listen_input+0x1cc>)
 80164ee:	f240 2281 	movw	r2, #641	@ 0x281
 80164f2:	496b      	ldr	r1, [pc, #428]	@ (80166a0 <tcp_listen_input+0x1d0>)
 80164f4:	486b      	ldr	r0, [pc, #428]	@ (80166a4 <tcp_listen_input+0x1d4>)
 80164f6:	f007 fe29 	bl	801e14c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80164fa:	4b67      	ldr	r3, [pc, #412]	@ (8016698 <tcp_listen_input+0x1c8>)
 80164fc:	781b      	ldrb	r3, [r3, #0]
 80164fe:	f003 0310 	and.w	r3, r3, #16
 8016502:	2b00      	cmp	r3, #0
 8016504:	d019      	beq.n	801653a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016506:	4b68      	ldr	r3, [pc, #416]	@ (80166a8 <tcp_listen_input+0x1d8>)
 8016508:	6819      	ldr	r1, [r3, #0]
 801650a:	4b68      	ldr	r3, [pc, #416]	@ (80166ac <tcp_listen_input+0x1dc>)
 801650c:	881b      	ldrh	r3, [r3, #0]
 801650e:	461a      	mov	r2, r3
 8016510:	4b67      	ldr	r3, [pc, #412]	@ (80166b0 <tcp_listen_input+0x1e0>)
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016516:	4b67      	ldr	r3, [pc, #412]	@ (80166b4 <tcp_listen_input+0x1e4>)
 8016518:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801651a:	885b      	ldrh	r3, [r3, #2]
 801651c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801651e:	4a65      	ldr	r2, [pc, #404]	@ (80166b4 <tcp_listen_input+0x1e4>)
 8016520:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016522:	8812      	ldrh	r2, [r2, #0]
 8016524:	b292      	uxth	r2, r2
 8016526:	9202      	str	r2, [sp, #8]
 8016528:	9301      	str	r3, [sp, #4]
 801652a:	4b63      	ldr	r3, [pc, #396]	@ (80166b8 <tcp_listen_input+0x1e8>)
 801652c:	9300      	str	r3, [sp, #0]
 801652e:	4b63      	ldr	r3, [pc, #396]	@ (80166bc <tcp_listen_input+0x1ec>)
 8016530:	4602      	mov	r2, r0
 8016532:	6878      	ldr	r0, [r7, #4]
 8016534:	f003 fbd2 	bl	8019cdc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016538:	e0a9      	b.n	801668e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801653a:	4b57      	ldr	r3, [pc, #348]	@ (8016698 <tcp_listen_input+0x1c8>)
 801653c:	781b      	ldrb	r3, [r3, #0]
 801653e:	f003 0302 	and.w	r3, r3, #2
 8016542:	2b00      	cmp	r3, #0
 8016544:	f000 80a3 	beq.w	801668e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	7d5b      	ldrb	r3, [r3, #21]
 801654c:	4618      	mov	r0, r3
 801654e:	f7ff f859 	bl	8015604 <tcp_alloc>
 8016552:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8016554:	697b      	ldr	r3, [r7, #20]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d111      	bne.n	801657e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	699b      	ldr	r3, [r3, #24]
 801655e:	2b00      	cmp	r3, #0
 8016560:	d00a      	beq.n	8016578 <tcp_listen_input+0xa8>
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	699b      	ldr	r3, [r3, #24]
 8016566:	687a      	ldr	r2, [r7, #4]
 8016568:	6910      	ldr	r0, [r2, #16]
 801656a:	f04f 32ff 	mov.w	r2, #4294967295
 801656e:	2100      	movs	r1, #0
 8016570:	4798      	blx	r3
 8016572:	4603      	mov	r3, r0
 8016574:	73bb      	strb	r3, [r7, #14]
      return;
 8016576:	e08b      	b.n	8016690 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016578:	23f0      	movs	r3, #240	@ 0xf0
 801657a:	73bb      	strb	r3, [r7, #14]
      return;
 801657c:	e088      	b.n	8016690 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801657e:	4b50      	ldr	r3, [pc, #320]	@ (80166c0 <tcp_listen_input+0x1f0>)
 8016580:	695a      	ldr	r2, [r3, #20]
 8016582:	697b      	ldr	r3, [r7, #20]
 8016584:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8016586:	4b4e      	ldr	r3, [pc, #312]	@ (80166c0 <tcp_listen_input+0x1f0>)
 8016588:	691a      	ldr	r2, [r3, #16]
 801658a:	697b      	ldr	r3, [r7, #20]
 801658c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	8ada      	ldrh	r2, [r3, #22]
 8016592:	697b      	ldr	r3, [r7, #20]
 8016594:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8016596:	4b47      	ldr	r3, [pc, #284]	@ (80166b4 <tcp_listen_input+0x1e4>)
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	881b      	ldrh	r3, [r3, #0]
 801659c:	b29a      	uxth	r2, r3
 801659e:	697b      	ldr	r3, [r7, #20]
 80165a0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80165a2:	697b      	ldr	r3, [r7, #20]
 80165a4:	2203      	movs	r2, #3
 80165a6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80165a8:	4b41      	ldr	r3, [pc, #260]	@ (80166b0 <tcp_listen_input+0x1e0>)
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	1c5a      	adds	r2, r3, #1
 80165ae:	697b      	ldr	r3, [r7, #20]
 80165b0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80165b2:	697b      	ldr	r3, [r7, #20]
 80165b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80165b6:	697b      	ldr	r3, [r7, #20]
 80165b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80165ba:	6978      	ldr	r0, [r7, #20]
 80165bc:	f7ff fa58 	bl	8015a70 <tcp_next_iss>
 80165c0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80165c2:	697b      	ldr	r3, [r7, #20]
 80165c4:	693a      	ldr	r2, [r7, #16]
 80165c6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80165c8:	697b      	ldr	r3, [r7, #20]
 80165ca:	693a      	ldr	r2, [r7, #16]
 80165cc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80165ce:	697b      	ldr	r3, [r7, #20]
 80165d0:	693a      	ldr	r2, [r7, #16]
 80165d2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80165d4:	697b      	ldr	r3, [r7, #20]
 80165d6:	693a      	ldr	r2, [r7, #16]
 80165d8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80165da:	4b35      	ldr	r3, [pc, #212]	@ (80166b0 <tcp_listen_input+0x1e0>)
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	1e5a      	subs	r2, r3, #1
 80165e0:	697b      	ldr	r3, [r7, #20]
 80165e2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	691a      	ldr	r2, [r3, #16]
 80165e8:	697b      	ldr	r3, [r7, #20]
 80165ea:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80165ec:	697b      	ldr	r3, [r7, #20]
 80165ee:	687a      	ldr	r2, [r7, #4]
 80165f0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	7a5b      	ldrb	r3, [r3, #9]
 80165f6:	f003 030c 	and.w	r3, r3, #12
 80165fa:	b2da      	uxtb	r2, r3
 80165fc:	697b      	ldr	r3, [r7, #20]
 80165fe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	7a1a      	ldrb	r2, [r3, #8]
 8016604:	697b      	ldr	r3, [r7, #20]
 8016606:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8016608:	4b2e      	ldr	r3, [pc, #184]	@ (80166c4 <tcp_listen_input+0x1f4>)
 801660a:	681a      	ldr	r2, [r3, #0]
 801660c:	697b      	ldr	r3, [r7, #20]
 801660e:	60da      	str	r2, [r3, #12]
 8016610:	4a2c      	ldr	r2, [pc, #176]	@ (80166c4 <tcp_listen_input+0x1f4>)
 8016612:	697b      	ldr	r3, [r7, #20]
 8016614:	6013      	str	r3, [r2, #0]
 8016616:	f003 fd23 	bl	801a060 <tcp_timer_needed>
 801661a:	4b2b      	ldr	r3, [pc, #172]	@ (80166c8 <tcp_listen_input+0x1f8>)
 801661c:	2201      	movs	r2, #1
 801661e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8016620:	6978      	ldr	r0, [r7, #20]
 8016622:	f001 fd8b 	bl	801813c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8016626:	4b23      	ldr	r3, [pc, #140]	@ (80166b4 <tcp_listen_input+0x1e4>)
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	89db      	ldrh	r3, [r3, #14]
 801662c:	b29a      	uxth	r2, r3
 801662e:	697b      	ldr	r3, [r7, #20]
 8016630:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8016634:	697b      	ldr	r3, [r7, #20]
 8016636:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801663a:	697b      	ldr	r3, [r7, #20]
 801663c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8016640:	697b      	ldr	r3, [r7, #20]
 8016642:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016644:	697b      	ldr	r3, [r7, #20]
 8016646:	3304      	adds	r3, #4
 8016648:	4618      	mov	r0, r3
 801664a:	f005 fa5d 	bl	801bb08 <ip4_route>
 801664e:	4601      	mov	r1, r0
 8016650:	697b      	ldr	r3, [r7, #20]
 8016652:	3304      	adds	r3, #4
 8016654:	461a      	mov	r2, r3
 8016656:	4620      	mov	r0, r4
 8016658:	f7ff fa30 	bl	8015abc <tcp_eff_send_mss_netif>
 801665c:	4603      	mov	r3, r0
 801665e:	461a      	mov	r2, r3
 8016660:	697b      	ldr	r3, [r7, #20]
 8016662:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8016664:	2112      	movs	r1, #18
 8016666:	6978      	ldr	r0, [r7, #20]
 8016668:	f002 fc96 	bl	8018f98 <tcp_enqueue_flags>
 801666c:	4603      	mov	r3, r0
 801666e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8016670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d004      	beq.n	8016682 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8016678:	2100      	movs	r1, #0
 801667a:	6978      	ldr	r0, [r7, #20]
 801667c:	f7fd ff06 	bl	801448c <tcp_abandon>
      return;
 8016680:	e006      	b.n	8016690 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8016682:	6978      	ldr	r0, [r7, #20]
 8016684:	f002 fd76 	bl	8019174 <tcp_output>
  return;
 8016688:	e001      	b.n	801668e <tcp_listen_input+0x1be>
    return;
 801668a:	bf00      	nop
 801668c:	e000      	b.n	8016690 <tcp_listen_input+0x1c0>
  return;
 801668e:	bf00      	nop
}
 8016690:	371c      	adds	r7, #28
 8016692:	46bd      	mov	sp, r7
 8016694:	bd90      	pop	{r4, r7, pc}
 8016696:	bf00      	nop
 8016698:	2000e534 	.word	0x2000e534
 801669c:	08021244 	.word	0x08021244
 80166a0:	0802143c 	.word	0x0802143c
 80166a4:	08021290 	.word	0x08021290
 80166a8:	2000e52c 	.word	0x2000e52c
 80166ac:	2000e532 	.word	0x2000e532
 80166b0:	2000e528 	.word	0x2000e528
 80166b4:	2000e518 	.word	0x2000e518
 80166b8:	2000b400 	.word	0x2000b400
 80166bc:	2000b404 	.word	0x2000b404
 80166c0:	2000b3f0 	.word	0x2000b3f0
 80166c4:	2000e4fc 	.word	0x2000e4fc
 80166c8:	2000e504 	.word	0x2000e504

080166cc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b086      	sub	sp, #24
 80166d0:	af04      	add	r7, sp, #16
 80166d2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80166d4:	4b2f      	ldr	r3, [pc, #188]	@ (8016794 <tcp_timewait_input+0xc8>)
 80166d6:	781b      	ldrb	r3, [r3, #0]
 80166d8:	f003 0304 	and.w	r3, r3, #4
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d153      	bne.n	8016788 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d106      	bne.n	80166f4 <tcp_timewait_input+0x28>
 80166e6:	4b2c      	ldr	r3, [pc, #176]	@ (8016798 <tcp_timewait_input+0xcc>)
 80166e8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80166ec:	492b      	ldr	r1, [pc, #172]	@ (801679c <tcp_timewait_input+0xd0>)
 80166ee:	482c      	ldr	r0, [pc, #176]	@ (80167a0 <tcp_timewait_input+0xd4>)
 80166f0:	f007 fd2c 	bl	801e14c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80166f4:	4b27      	ldr	r3, [pc, #156]	@ (8016794 <tcp_timewait_input+0xc8>)
 80166f6:	781b      	ldrb	r3, [r3, #0]
 80166f8:	f003 0302 	and.w	r3, r3, #2
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d02a      	beq.n	8016756 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8016700:	4b28      	ldr	r3, [pc, #160]	@ (80167a4 <tcp_timewait_input+0xd8>)
 8016702:	681a      	ldr	r2, [r3, #0]
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016708:	1ad3      	subs	r3, r2, r3
 801670a:	2b00      	cmp	r3, #0
 801670c:	db2d      	blt.n	801676a <tcp_timewait_input+0x9e>
 801670e:	4b25      	ldr	r3, [pc, #148]	@ (80167a4 <tcp_timewait_input+0xd8>)
 8016710:	681a      	ldr	r2, [r3, #0]
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016716:	6879      	ldr	r1, [r7, #4]
 8016718:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801671a:	440b      	add	r3, r1
 801671c:	1ad3      	subs	r3, r2, r3
 801671e:	2b00      	cmp	r3, #0
 8016720:	dc23      	bgt.n	801676a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016722:	4b21      	ldr	r3, [pc, #132]	@ (80167a8 <tcp_timewait_input+0xdc>)
 8016724:	6819      	ldr	r1, [r3, #0]
 8016726:	4b21      	ldr	r3, [pc, #132]	@ (80167ac <tcp_timewait_input+0xe0>)
 8016728:	881b      	ldrh	r3, [r3, #0]
 801672a:	461a      	mov	r2, r3
 801672c:	4b1d      	ldr	r3, [pc, #116]	@ (80167a4 <tcp_timewait_input+0xd8>)
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016732:	4b1f      	ldr	r3, [pc, #124]	@ (80167b0 <tcp_timewait_input+0xe4>)
 8016734:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016736:	885b      	ldrh	r3, [r3, #2]
 8016738:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801673a:	4a1d      	ldr	r2, [pc, #116]	@ (80167b0 <tcp_timewait_input+0xe4>)
 801673c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801673e:	8812      	ldrh	r2, [r2, #0]
 8016740:	b292      	uxth	r2, r2
 8016742:	9202      	str	r2, [sp, #8]
 8016744:	9301      	str	r3, [sp, #4]
 8016746:	4b1b      	ldr	r3, [pc, #108]	@ (80167b4 <tcp_timewait_input+0xe8>)
 8016748:	9300      	str	r3, [sp, #0]
 801674a:	4b1b      	ldr	r3, [pc, #108]	@ (80167b8 <tcp_timewait_input+0xec>)
 801674c:	4602      	mov	r2, r0
 801674e:	6878      	ldr	r0, [r7, #4]
 8016750:	f003 fac4 	bl	8019cdc <tcp_rst>
      return;
 8016754:	e01b      	b.n	801678e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8016756:	4b0f      	ldr	r3, [pc, #60]	@ (8016794 <tcp_timewait_input+0xc8>)
 8016758:	781b      	ldrb	r3, [r3, #0]
 801675a:	f003 0301 	and.w	r3, r3, #1
 801675e:	2b00      	cmp	r3, #0
 8016760:	d003      	beq.n	801676a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8016762:	4b16      	ldr	r3, [pc, #88]	@ (80167bc <tcp_timewait_input+0xf0>)
 8016764:	681a      	ldr	r2, [r3, #0]
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801676a:	4b10      	ldr	r3, [pc, #64]	@ (80167ac <tcp_timewait_input+0xe0>)
 801676c:	881b      	ldrh	r3, [r3, #0]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d00c      	beq.n	801678c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	8b5b      	ldrh	r3, [r3, #26]
 8016776:	f043 0302 	orr.w	r3, r3, #2
 801677a:	b29a      	uxth	r2, r3
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016780:	6878      	ldr	r0, [r7, #4]
 8016782:	f002 fcf7 	bl	8019174 <tcp_output>
  }
  return;
 8016786:	e001      	b.n	801678c <tcp_timewait_input+0xc0>
    return;
 8016788:	bf00      	nop
 801678a:	e000      	b.n	801678e <tcp_timewait_input+0xc2>
  return;
 801678c:	bf00      	nop
}
 801678e:	3708      	adds	r7, #8
 8016790:	46bd      	mov	sp, r7
 8016792:	bd80      	pop	{r7, pc}
 8016794:	2000e534 	.word	0x2000e534
 8016798:	08021244 	.word	0x08021244
 801679c:	0802145c 	.word	0x0802145c
 80167a0:	08021290 	.word	0x08021290
 80167a4:	2000e528 	.word	0x2000e528
 80167a8:	2000e52c 	.word	0x2000e52c
 80167ac:	2000e532 	.word	0x2000e532
 80167b0:	2000e518 	.word	0x2000e518
 80167b4:	2000b400 	.word	0x2000b400
 80167b8:	2000b404 	.word	0x2000b404
 80167bc:	2000e4f0 	.word	0x2000e4f0

080167c0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80167c0:	b590      	push	{r4, r7, lr}
 80167c2:	b08d      	sub	sp, #52	@ 0x34
 80167c4:	af04      	add	r7, sp, #16
 80167c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80167c8:	2300      	movs	r3, #0
 80167ca:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80167cc:	2300      	movs	r3, #0
 80167ce:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d106      	bne.n	80167e4 <tcp_process+0x24>
 80167d6:	4b9d      	ldr	r3, [pc, #628]	@ (8016a4c <tcp_process+0x28c>)
 80167d8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80167dc:	499c      	ldr	r1, [pc, #624]	@ (8016a50 <tcp_process+0x290>)
 80167de:	489d      	ldr	r0, [pc, #628]	@ (8016a54 <tcp_process+0x294>)
 80167e0:	f007 fcb4 	bl	801e14c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80167e4:	4b9c      	ldr	r3, [pc, #624]	@ (8016a58 <tcp_process+0x298>)
 80167e6:	781b      	ldrb	r3, [r3, #0]
 80167e8:	f003 0304 	and.w	r3, r3, #4
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d04e      	beq.n	801688e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	7d1b      	ldrb	r3, [r3, #20]
 80167f4:	2b02      	cmp	r3, #2
 80167f6:	d108      	bne.n	801680a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80167fc:	4b97      	ldr	r3, [pc, #604]	@ (8016a5c <tcp_process+0x29c>)
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	429a      	cmp	r2, r3
 8016802:	d123      	bne.n	801684c <tcp_process+0x8c>
        acceptable = 1;
 8016804:	2301      	movs	r3, #1
 8016806:	76fb      	strb	r3, [r7, #27]
 8016808:	e020      	b.n	801684c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801680e:	4b94      	ldr	r3, [pc, #592]	@ (8016a60 <tcp_process+0x2a0>)
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	429a      	cmp	r2, r3
 8016814:	d102      	bne.n	801681c <tcp_process+0x5c>
        acceptable = 1;
 8016816:	2301      	movs	r3, #1
 8016818:	76fb      	strb	r3, [r7, #27]
 801681a:	e017      	b.n	801684c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801681c:	4b90      	ldr	r3, [pc, #576]	@ (8016a60 <tcp_process+0x2a0>)
 801681e:	681a      	ldr	r2, [r3, #0]
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016824:	1ad3      	subs	r3, r2, r3
 8016826:	2b00      	cmp	r3, #0
 8016828:	db10      	blt.n	801684c <tcp_process+0x8c>
 801682a:	4b8d      	ldr	r3, [pc, #564]	@ (8016a60 <tcp_process+0x2a0>)
 801682c:	681a      	ldr	r2, [r3, #0]
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016832:	6879      	ldr	r1, [r7, #4]
 8016834:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016836:	440b      	add	r3, r1
 8016838:	1ad3      	subs	r3, r2, r3
 801683a:	2b00      	cmp	r3, #0
 801683c:	dc06      	bgt.n	801684c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	8b5b      	ldrh	r3, [r3, #26]
 8016842:	f043 0302 	orr.w	r3, r3, #2
 8016846:	b29a      	uxth	r2, r3
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801684c:	7efb      	ldrb	r3, [r7, #27]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d01b      	beq.n	801688a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	7d1b      	ldrb	r3, [r3, #20]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d106      	bne.n	8016868 <tcp_process+0xa8>
 801685a:	4b7c      	ldr	r3, [pc, #496]	@ (8016a4c <tcp_process+0x28c>)
 801685c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8016860:	4980      	ldr	r1, [pc, #512]	@ (8016a64 <tcp_process+0x2a4>)
 8016862:	487c      	ldr	r0, [pc, #496]	@ (8016a54 <tcp_process+0x294>)
 8016864:	f007 fc72 	bl	801e14c <iprintf>
      recv_flags |= TF_RESET;
 8016868:	4b7f      	ldr	r3, [pc, #508]	@ (8016a68 <tcp_process+0x2a8>)
 801686a:	781b      	ldrb	r3, [r3, #0]
 801686c:	f043 0308 	orr.w	r3, r3, #8
 8016870:	b2da      	uxtb	r2, r3
 8016872:	4b7d      	ldr	r3, [pc, #500]	@ (8016a68 <tcp_process+0x2a8>)
 8016874:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	8b5b      	ldrh	r3, [r3, #26]
 801687a:	f023 0301 	bic.w	r3, r3, #1
 801687e:	b29a      	uxth	r2, r3
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8016884:	f06f 030d 	mvn.w	r3, #13
 8016888:	e37a      	b.n	8016f80 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801688a:	2300      	movs	r3, #0
 801688c:	e378      	b.n	8016f80 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801688e:	4b72      	ldr	r3, [pc, #456]	@ (8016a58 <tcp_process+0x298>)
 8016890:	781b      	ldrb	r3, [r3, #0]
 8016892:	f003 0302 	and.w	r3, r3, #2
 8016896:	2b00      	cmp	r3, #0
 8016898:	d010      	beq.n	80168bc <tcp_process+0xfc>
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	7d1b      	ldrb	r3, [r3, #20]
 801689e:	2b02      	cmp	r3, #2
 80168a0:	d00c      	beq.n	80168bc <tcp_process+0xfc>
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	7d1b      	ldrb	r3, [r3, #20]
 80168a6:	2b03      	cmp	r3, #3
 80168a8:	d008      	beq.n	80168bc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	8b5b      	ldrh	r3, [r3, #26]
 80168ae:	f043 0302 	orr.w	r3, r3, #2
 80168b2:	b29a      	uxth	r2, r3
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80168b8:	2300      	movs	r3, #0
 80168ba:	e361      	b.n	8016f80 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	8b5b      	ldrh	r3, [r3, #26]
 80168c0:	f003 0310 	and.w	r3, r3, #16
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d103      	bne.n	80168d0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80168c8:	4b68      	ldr	r3, [pc, #416]	@ (8016a6c <tcp_process+0x2ac>)
 80168ca:	681a      	ldr	r2, [r3, #0]
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	2200      	movs	r2, #0
 80168d4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	2200      	movs	r2, #0
 80168dc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80168e0:	6878      	ldr	r0, [r7, #4]
 80168e2:	f001 fc2b 	bl	801813c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	7d1b      	ldrb	r3, [r3, #20]
 80168ea:	3b02      	subs	r3, #2
 80168ec:	2b07      	cmp	r3, #7
 80168ee:	f200 8337 	bhi.w	8016f60 <tcp_process+0x7a0>
 80168f2:	a201      	add	r2, pc, #4	@ (adr r2, 80168f8 <tcp_process+0x138>)
 80168f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168f8:	08016919 	.word	0x08016919
 80168fc:	08016b49 	.word	0x08016b49
 8016900:	08016cc1 	.word	0x08016cc1
 8016904:	08016ceb 	.word	0x08016ceb
 8016908:	08016e0f 	.word	0x08016e0f
 801690c:	08016cc1 	.word	0x08016cc1
 8016910:	08016e9b 	.word	0x08016e9b
 8016914:	08016f2b 	.word	0x08016f2b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8016918:	4b4f      	ldr	r3, [pc, #316]	@ (8016a58 <tcp_process+0x298>)
 801691a:	781b      	ldrb	r3, [r3, #0]
 801691c:	f003 0310 	and.w	r3, r3, #16
 8016920:	2b00      	cmp	r3, #0
 8016922:	f000 80e4 	beq.w	8016aee <tcp_process+0x32e>
 8016926:	4b4c      	ldr	r3, [pc, #304]	@ (8016a58 <tcp_process+0x298>)
 8016928:	781b      	ldrb	r3, [r3, #0]
 801692a:	f003 0302 	and.w	r3, r3, #2
 801692e:	2b00      	cmp	r3, #0
 8016930:	f000 80dd 	beq.w	8016aee <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016938:	1c5a      	adds	r2, r3, #1
 801693a:	4b48      	ldr	r3, [pc, #288]	@ (8016a5c <tcp_process+0x29c>)
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	429a      	cmp	r2, r3
 8016940:	f040 80d5 	bne.w	8016aee <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8016944:	4b46      	ldr	r3, [pc, #280]	@ (8016a60 <tcp_process+0x2a0>)
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	1c5a      	adds	r2, r3, #1
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8016956:	4b41      	ldr	r3, [pc, #260]	@ (8016a5c <tcp_process+0x29c>)
 8016958:	681a      	ldr	r2, [r3, #0]
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801695e:	4b44      	ldr	r3, [pc, #272]	@ (8016a70 <tcp_process+0x2b0>)
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	89db      	ldrh	r3, [r3, #14]
 8016964:	b29a      	uxth	r2, r3
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8016978:	4b39      	ldr	r3, [pc, #228]	@ (8016a60 <tcp_process+0x2a0>)
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	1e5a      	subs	r2, r3, #1
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	2204      	movs	r2, #4
 8016986:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	3304      	adds	r3, #4
 8016990:	4618      	mov	r0, r3
 8016992:	f005 f8b9 	bl	801bb08 <ip4_route>
 8016996:	4601      	mov	r1, r0
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	3304      	adds	r3, #4
 801699c:	461a      	mov	r2, r3
 801699e:	4620      	mov	r0, r4
 80169a0:	f7ff f88c 	bl	8015abc <tcp_eff_send_mss_netif>
 80169a4:	4603      	mov	r3, r0
 80169a6:	461a      	mov	r2, r3
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80169b0:	009a      	lsls	r2, r3, #2
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80169b6:	005b      	lsls	r3, r3, #1
 80169b8:	f241 111c 	movw	r1, #4380	@ 0x111c
 80169bc:	428b      	cmp	r3, r1
 80169be:	bf38      	it	cc
 80169c0:	460b      	movcc	r3, r1
 80169c2:	429a      	cmp	r2, r3
 80169c4:	d204      	bcs.n	80169d0 <tcp_process+0x210>
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80169ca:	009b      	lsls	r3, r3, #2
 80169cc:	b29b      	uxth	r3, r3
 80169ce:	e00d      	b.n	80169ec <tcp_process+0x22c>
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80169d4:	005b      	lsls	r3, r3, #1
 80169d6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80169da:	4293      	cmp	r3, r2
 80169dc:	d904      	bls.n	80169e8 <tcp_process+0x228>
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80169e2:	005b      	lsls	r3, r3, #1
 80169e4:	b29b      	uxth	r3, r3
 80169e6:	e001      	b.n	80169ec <tcp_process+0x22c>
 80169e8:	f241 131c 	movw	r3, #4380	@ 0x111c
 80169ec:	687a      	ldr	r2, [r7, #4]
 80169ee:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d106      	bne.n	8016a0a <tcp_process+0x24a>
 80169fc:	4b13      	ldr	r3, [pc, #76]	@ (8016a4c <tcp_process+0x28c>)
 80169fe:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8016a02:	491c      	ldr	r1, [pc, #112]	@ (8016a74 <tcp_process+0x2b4>)
 8016a04:	4813      	ldr	r0, [pc, #76]	@ (8016a54 <tcp_process+0x294>)
 8016a06:	f007 fba1 	bl	801e14c <iprintf>
        --pcb->snd_queuelen;
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016a10:	3b01      	subs	r3, #1
 8016a12:	b29a      	uxth	r2, r3
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a1e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8016a20:	69fb      	ldr	r3, [r7, #28]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d12a      	bne.n	8016a7c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a2a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8016a2c:	69fb      	ldr	r3, [r7, #28]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d106      	bne.n	8016a40 <tcp_process+0x280>
 8016a32:	4b06      	ldr	r3, [pc, #24]	@ (8016a4c <tcp_process+0x28c>)
 8016a34:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8016a38:	490f      	ldr	r1, [pc, #60]	@ (8016a78 <tcp_process+0x2b8>)
 8016a3a:	4806      	ldr	r0, [pc, #24]	@ (8016a54 <tcp_process+0x294>)
 8016a3c:	f007 fb86 	bl	801e14c <iprintf>
          pcb->unsent = rseg->next;
 8016a40:	69fb      	ldr	r3, [r7, #28]
 8016a42:	681a      	ldr	r2, [r3, #0]
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016a48:	e01c      	b.n	8016a84 <tcp_process+0x2c4>
 8016a4a:	bf00      	nop
 8016a4c:	08021244 	.word	0x08021244
 8016a50:	0802147c 	.word	0x0802147c
 8016a54:	08021290 	.word	0x08021290
 8016a58:	2000e534 	.word	0x2000e534
 8016a5c:	2000e52c 	.word	0x2000e52c
 8016a60:	2000e528 	.word	0x2000e528
 8016a64:	08021498 	.word	0x08021498
 8016a68:	2000e535 	.word	0x2000e535
 8016a6c:	2000e4f0 	.word	0x2000e4f0
 8016a70:	2000e518 	.word	0x2000e518
 8016a74:	080214b8 	.word	0x080214b8
 8016a78:	080214d0 	.word	0x080214d0
        } else {
          pcb->unacked = rseg->next;
 8016a7c:	69fb      	ldr	r3, [r7, #28]
 8016a7e:	681a      	ldr	r2, [r3, #0]
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8016a84:	69f8      	ldr	r0, [r7, #28]
 8016a86:	f7fe fc54 	bl	8015332 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d104      	bne.n	8016a9c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016a98:	861a      	strh	r2, [r3, #48]	@ 0x30
 8016a9a:	e006      	b.n	8016aaa <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	2200      	movs	r2, #0
 8016aa0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	2200      	movs	r2, #0
 8016aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d00a      	beq.n	8016aca <tcp_process+0x30a>
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016aba:	687a      	ldr	r2, [r7, #4]
 8016abc:	6910      	ldr	r0, [r2, #16]
 8016abe:	2200      	movs	r2, #0
 8016ac0:	6879      	ldr	r1, [r7, #4]
 8016ac2:	4798      	blx	r3
 8016ac4:	4603      	mov	r3, r0
 8016ac6:	76bb      	strb	r3, [r7, #26]
 8016ac8:	e001      	b.n	8016ace <tcp_process+0x30e>
 8016aca:	2300      	movs	r3, #0
 8016acc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8016ace:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016ad2:	f113 0f0d 	cmn.w	r3, #13
 8016ad6:	d102      	bne.n	8016ade <tcp_process+0x31e>
          return ERR_ABRT;
 8016ad8:	f06f 030c 	mvn.w	r3, #12
 8016adc:	e250      	b.n	8016f80 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	8b5b      	ldrh	r3, [r3, #26]
 8016ae2:	f043 0302 	orr.w	r3, r3, #2
 8016ae6:	b29a      	uxth	r2, r3
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8016aec:	e23a      	b.n	8016f64 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8016aee:	4b98      	ldr	r3, [pc, #608]	@ (8016d50 <tcp_process+0x590>)
 8016af0:	781b      	ldrb	r3, [r3, #0]
 8016af2:	f003 0310 	and.w	r3, r3, #16
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	f000 8234 	beq.w	8016f64 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016afc:	4b95      	ldr	r3, [pc, #596]	@ (8016d54 <tcp_process+0x594>)
 8016afe:	6819      	ldr	r1, [r3, #0]
 8016b00:	4b95      	ldr	r3, [pc, #596]	@ (8016d58 <tcp_process+0x598>)
 8016b02:	881b      	ldrh	r3, [r3, #0]
 8016b04:	461a      	mov	r2, r3
 8016b06:	4b95      	ldr	r3, [pc, #596]	@ (8016d5c <tcp_process+0x59c>)
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016b0c:	4b94      	ldr	r3, [pc, #592]	@ (8016d60 <tcp_process+0x5a0>)
 8016b0e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016b10:	885b      	ldrh	r3, [r3, #2]
 8016b12:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016b14:	4a92      	ldr	r2, [pc, #584]	@ (8016d60 <tcp_process+0x5a0>)
 8016b16:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016b18:	8812      	ldrh	r2, [r2, #0]
 8016b1a:	b292      	uxth	r2, r2
 8016b1c:	9202      	str	r2, [sp, #8]
 8016b1e:	9301      	str	r3, [sp, #4]
 8016b20:	4b90      	ldr	r3, [pc, #576]	@ (8016d64 <tcp_process+0x5a4>)
 8016b22:	9300      	str	r3, [sp, #0]
 8016b24:	4b90      	ldr	r3, [pc, #576]	@ (8016d68 <tcp_process+0x5a8>)
 8016b26:	4602      	mov	r2, r0
 8016b28:	6878      	ldr	r0, [r7, #4]
 8016b2a:	f003 f8d7 	bl	8019cdc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016b34:	2b05      	cmp	r3, #5
 8016b36:	f200 8215 	bhi.w	8016f64 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	2200      	movs	r2, #0
 8016b3e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8016b40:	6878      	ldr	r0, [r7, #4]
 8016b42:	f002 fea3 	bl	801988c <tcp_rexmit_rto>
      break;
 8016b46:	e20d      	b.n	8016f64 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8016b48:	4b81      	ldr	r3, [pc, #516]	@ (8016d50 <tcp_process+0x590>)
 8016b4a:	781b      	ldrb	r3, [r3, #0]
 8016b4c:	f003 0310 	and.w	r3, r3, #16
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	f000 80a1 	beq.w	8016c98 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016b56:	4b7f      	ldr	r3, [pc, #508]	@ (8016d54 <tcp_process+0x594>)
 8016b58:	681a      	ldr	r2, [r3, #0]
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016b5e:	1ad3      	subs	r3, r2, r3
 8016b60:	3b01      	subs	r3, #1
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	db7e      	blt.n	8016c64 <tcp_process+0x4a4>
 8016b66:	4b7b      	ldr	r3, [pc, #492]	@ (8016d54 <tcp_process+0x594>)
 8016b68:	681a      	ldr	r2, [r3, #0]
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016b6e:	1ad3      	subs	r3, r2, r3
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	dc77      	bgt.n	8016c64 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	2204      	movs	r2, #4
 8016b78:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d102      	bne.n	8016b88 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8016b82:	23fa      	movs	r3, #250	@ 0xfa
 8016b84:	76bb      	strb	r3, [r7, #26]
 8016b86:	e01d      	b.n	8016bc4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016b8c:	699b      	ldr	r3, [r3, #24]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d106      	bne.n	8016ba0 <tcp_process+0x3e0>
 8016b92:	4b76      	ldr	r3, [pc, #472]	@ (8016d6c <tcp_process+0x5ac>)
 8016b94:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8016b98:	4975      	ldr	r1, [pc, #468]	@ (8016d70 <tcp_process+0x5b0>)
 8016b9a:	4876      	ldr	r0, [pc, #472]	@ (8016d74 <tcp_process+0x5b4>)
 8016b9c:	f007 fad6 	bl	801e14c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016ba4:	699b      	ldr	r3, [r3, #24]
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d00a      	beq.n	8016bc0 <tcp_process+0x400>
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016bae:	699b      	ldr	r3, [r3, #24]
 8016bb0:	687a      	ldr	r2, [r7, #4]
 8016bb2:	6910      	ldr	r0, [r2, #16]
 8016bb4:	2200      	movs	r2, #0
 8016bb6:	6879      	ldr	r1, [r7, #4]
 8016bb8:	4798      	blx	r3
 8016bba:	4603      	mov	r3, r0
 8016bbc:	76bb      	strb	r3, [r7, #26]
 8016bbe:	e001      	b.n	8016bc4 <tcp_process+0x404>
 8016bc0:	23f0      	movs	r3, #240	@ 0xf0
 8016bc2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8016bc4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d00a      	beq.n	8016be2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8016bcc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016bd0:	f113 0f0d 	cmn.w	r3, #13
 8016bd4:	d002      	beq.n	8016bdc <tcp_process+0x41c>
              tcp_abort(pcb);
 8016bd6:	6878      	ldr	r0, [r7, #4]
 8016bd8:	f7fd fd16 	bl	8014608 <tcp_abort>
            }
            return ERR_ABRT;
 8016bdc:	f06f 030c 	mvn.w	r3, #12
 8016be0:	e1ce      	b.n	8016f80 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8016be2:	6878      	ldr	r0, [r7, #4]
 8016be4:	f000 fae0 	bl	80171a8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8016be8:	4b63      	ldr	r3, [pc, #396]	@ (8016d78 <tcp_process+0x5b8>)
 8016bea:	881b      	ldrh	r3, [r3, #0]
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d005      	beq.n	8016bfc <tcp_process+0x43c>
            recv_acked--;
 8016bf0:	4b61      	ldr	r3, [pc, #388]	@ (8016d78 <tcp_process+0x5b8>)
 8016bf2:	881b      	ldrh	r3, [r3, #0]
 8016bf4:	3b01      	subs	r3, #1
 8016bf6:	b29a      	uxth	r2, r3
 8016bf8:	4b5f      	ldr	r3, [pc, #380]	@ (8016d78 <tcp_process+0x5b8>)
 8016bfa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016c00:	009a      	lsls	r2, r3, #2
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016c06:	005b      	lsls	r3, r3, #1
 8016c08:	f241 111c 	movw	r1, #4380	@ 0x111c
 8016c0c:	428b      	cmp	r3, r1
 8016c0e:	bf38      	it	cc
 8016c10:	460b      	movcc	r3, r1
 8016c12:	429a      	cmp	r2, r3
 8016c14:	d204      	bcs.n	8016c20 <tcp_process+0x460>
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016c1a:	009b      	lsls	r3, r3, #2
 8016c1c:	b29b      	uxth	r3, r3
 8016c1e:	e00d      	b.n	8016c3c <tcp_process+0x47c>
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016c24:	005b      	lsls	r3, r3, #1
 8016c26:	f241 121c 	movw	r2, #4380	@ 0x111c
 8016c2a:	4293      	cmp	r3, r2
 8016c2c:	d904      	bls.n	8016c38 <tcp_process+0x478>
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016c32:	005b      	lsls	r3, r3, #1
 8016c34:	b29b      	uxth	r3, r3
 8016c36:	e001      	b.n	8016c3c <tcp_process+0x47c>
 8016c38:	f241 131c 	movw	r3, #4380	@ 0x111c
 8016c3c:	687a      	ldr	r2, [r7, #4]
 8016c3e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8016c42:	4b4e      	ldr	r3, [pc, #312]	@ (8016d7c <tcp_process+0x5bc>)
 8016c44:	781b      	ldrb	r3, [r3, #0]
 8016c46:	f003 0320 	and.w	r3, r3, #32
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d037      	beq.n	8016cbe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	8b5b      	ldrh	r3, [r3, #26]
 8016c52:	f043 0302 	orr.w	r3, r3, #2
 8016c56:	b29a      	uxth	r2, r3
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	2207      	movs	r2, #7
 8016c60:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8016c62:	e02c      	b.n	8016cbe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016c64:	4b3b      	ldr	r3, [pc, #236]	@ (8016d54 <tcp_process+0x594>)
 8016c66:	6819      	ldr	r1, [r3, #0]
 8016c68:	4b3b      	ldr	r3, [pc, #236]	@ (8016d58 <tcp_process+0x598>)
 8016c6a:	881b      	ldrh	r3, [r3, #0]
 8016c6c:	461a      	mov	r2, r3
 8016c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8016d5c <tcp_process+0x59c>)
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016c74:	4b3a      	ldr	r3, [pc, #232]	@ (8016d60 <tcp_process+0x5a0>)
 8016c76:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016c78:	885b      	ldrh	r3, [r3, #2]
 8016c7a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016c7c:	4a38      	ldr	r2, [pc, #224]	@ (8016d60 <tcp_process+0x5a0>)
 8016c7e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016c80:	8812      	ldrh	r2, [r2, #0]
 8016c82:	b292      	uxth	r2, r2
 8016c84:	9202      	str	r2, [sp, #8]
 8016c86:	9301      	str	r3, [sp, #4]
 8016c88:	4b36      	ldr	r3, [pc, #216]	@ (8016d64 <tcp_process+0x5a4>)
 8016c8a:	9300      	str	r3, [sp, #0]
 8016c8c:	4b36      	ldr	r3, [pc, #216]	@ (8016d68 <tcp_process+0x5a8>)
 8016c8e:	4602      	mov	r2, r0
 8016c90:	6878      	ldr	r0, [r7, #4]
 8016c92:	f003 f823 	bl	8019cdc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8016c96:	e167      	b.n	8016f68 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8016c98:	4b2d      	ldr	r3, [pc, #180]	@ (8016d50 <tcp_process+0x590>)
 8016c9a:	781b      	ldrb	r3, [r3, #0]
 8016c9c:	f003 0302 	and.w	r3, r3, #2
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	f000 8161 	beq.w	8016f68 <tcp_process+0x7a8>
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016caa:	1e5a      	subs	r2, r3, #1
 8016cac:	4b2b      	ldr	r3, [pc, #172]	@ (8016d5c <tcp_process+0x59c>)
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	429a      	cmp	r2, r3
 8016cb2:	f040 8159 	bne.w	8016f68 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8016cb6:	6878      	ldr	r0, [r7, #4]
 8016cb8:	f002 fe0a 	bl	80198d0 <tcp_rexmit>
      break;
 8016cbc:	e154      	b.n	8016f68 <tcp_process+0x7a8>
 8016cbe:	e153      	b.n	8016f68 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8016cc0:	6878      	ldr	r0, [r7, #4]
 8016cc2:	f000 fa71 	bl	80171a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8016cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8016d7c <tcp_process+0x5bc>)
 8016cc8:	781b      	ldrb	r3, [r3, #0]
 8016cca:	f003 0320 	and.w	r3, r3, #32
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	f000 814c 	beq.w	8016f6c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	8b5b      	ldrh	r3, [r3, #26]
 8016cd8:	f043 0302 	orr.w	r3, r3, #2
 8016cdc:	b29a      	uxth	r2, r3
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	2207      	movs	r2, #7
 8016ce6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016ce8:	e140      	b.n	8016f6c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8016cea:	6878      	ldr	r0, [r7, #4]
 8016cec:	f000 fa5c 	bl	80171a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016cf0:	4b22      	ldr	r3, [pc, #136]	@ (8016d7c <tcp_process+0x5bc>)
 8016cf2:	781b      	ldrb	r3, [r3, #0]
 8016cf4:	f003 0320 	and.w	r3, r3, #32
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d071      	beq.n	8016de0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016cfc:	4b14      	ldr	r3, [pc, #80]	@ (8016d50 <tcp_process+0x590>)
 8016cfe:	781b      	ldrb	r3, [r3, #0]
 8016d00:	f003 0310 	and.w	r3, r3, #16
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d060      	beq.n	8016dca <tcp_process+0x60a>
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016d0c:	4b11      	ldr	r3, [pc, #68]	@ (8016d54 <tcp_process+0x594>)
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	429a      	cmp	r2, r3
 8016d12:	d15a      	bne.n	8016dca <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d156      	bne.n	8016dca <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	8b5b      	ldrh	r3, [r3, #26]
 8016d20:	f043 0302 	orr.w	r3, r3, #2
 8016d24:	b29a      	uxth	r2, r3
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8016d2a:	6878      	ldr	r0, [r7, #4]
 8016d2c:	f7fe fdbc 	bl	80158a8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8016d30:	4b13      	ldr	r3, [pc, #76]	@ (8016d80 <tcp_process+0x5c0>)
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	687a      	ldr	r2, [r7, #4]
 8016d36:	429a      	cmp	r2, r3
 8016d38:	d105      	bne.n	8016d46 <tcp_process+0x586>
 8016d3a:	4b11      	ldr	r3, [pc, #68]	@ (8016d80 <tcp_process+0x5c0>)
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	68db      	ldr	r3, [r3, #12]
 8016d40:	4a0f      	ldr	r2, [pc, #60]	@ (8016d80 <tcp_process+0x5c0>)
 8016d42:	6013      	str	r3, [r2, #0]
 8016d44:	e02e      	b.n	8016da4 <tcp_process+0x5e4>
 8016d46:	4b0e      	ldr	r3, [pc, #56]	@ (8016d80 <tcp_process+0x5c0>)
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	617b      	str	r3, [r7, #20]
 8016d4c:	e027      	b.n	8016d9e <tcp_process+0x5de>
 8016d4e:	bf00      	nop
 8016d50:	2000e534 	.word	0x2000e534
 8016d54:	2000e52c 	.word	0x2000e52c
 8016d58:	2000e532 	.word	0x2000e532
 8016d5c:	2000e528 	.word	0x2000e528
 8016d60:	2000e518 	.word	0x2000e518
 8016d64:	2000b400 	.word	0x2000b400
 8016d68:	2000b404 	.word	0x2000b404
 8016d6c:	08021244 	.word	0x08021244
 8016d70:	080214e4 	.word	0x080214e4
 8016d74:	08021290 	.word	0x08021290
 8016d78:	2000e530 	.word	0x2000e530
 8016d7c:	2000e535 	.word	0x2000e535
 8016d80:	2000e4fc 	.word	0x2000e4fc
 8016d84:	697b      	ldr	r3, [r7, #20]
 8016d86:	68db      	ldr	r3, [r3, #12]
 8016d88:	687a      	ldr	r2, [r7, #4]
 8016d8a:	429a      	cmp	r2, r3
 8016d8c:	d104      	bne.n	8016d98 <tcp_process+0x5d8>
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	68da      	ldr	r2, [r3, #12]
 8016d92:	697b      	ldr	r3, [r7, #20]
 8016d94:	60da      	str	r2, [r3, #12]
 8016d96:	e005      	b.n	8016da4 <tcp_process+0x5e4>
 8016d98:	697b      	ldr	r3, [r7, #20]
 8016d9a:	68db      	ldr	r3, [r3, #12]
 8016d9c:	617b      	str	r3, [r7, #20]
 8016d9e:	697b      	ldr	r3, [r7, #20]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d1ef      	bne.n	8016d84 <tcp_process+0x5c4>
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	2200      	movs	r2, #0
 8016da8:	60da      	str	r2, [r3, #12]
 8016daa:	4b77      	ldr	r3, [pc, #476]	@ (8016f88 <tcp_process+0x7c8>)
 8016dac:	2201      	movs	r2, #1
 8016dae:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	220a      	movs	r2, #10
 8016db4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8016db6:	4b75      	ldr	r3, [pc, #468]	@ (8016f8c <tcp_process+0x7cc>)
 8016db8:	681a      	ldr	r2, [r3, #0]
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	60da      	str	r2, [r3, #12]
 8016dbe:	4a73      	ldr	r2, [pc, #460]	@ (8016f8c <tcp_process+0x7cc>)
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	6013      	str	r3, [r2, #0]
 8016dc4:	f003 f94c 	bl	801a060 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8016dc8:	e0d2      	b.n	8016f70 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	8b5b      	ldrh	r3, [r3, #26]
 8016dce:	f043 0302 	orr.w	r3, r3, #2
 8016dd2:	b29a      	uxth	r2, r3
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	2208      	movs	r2, #8
 8016ddc:	751a      	strb	r2, [r3, #20]
      break;
 8016dde:	e0c7      	b.n	8016f70 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016de0:	4b6b      	ldr	r3, [pc, #428]	@ (8016f90 <tcp_process+0x7d0>)
 8016de2:	781b      	ldrb	r3, [r3, #0]
 8016de4:	f003 0310 	and.w	r3, r3, #16
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	f000 80c1 	beq.w	8016f70 <tcp_process+0x7b0>
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016df2:	4b68      	ldr	r3, [pc, #416]	@ (8016f94 <tcp_process+0x7d4>)
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	429a      	cmp	r2, r3
 8016df8:	f040 80ba 	bne.w	8016f70 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	f040 80b5 	bne.w	8016f70 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	2206      	movs	r2, #6
 8016e0a:	751a      	strb	r2, [r3, #20]
      break;
 8016e0c:	e0b0      	b.n	8016f70 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8016e0e:	6878      	ldr	r0, [r7, #4]
 8016e10:	f000 f9ca 	bl	80171a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016e14:	4b60      	ldr	r3, [pc, #384]	@ (8016f98 <tcp_process+0x7d8>)
 8016e16:	781b      	ldrb	r3, [r3, #0]
 8016e18:	f003 0320 	and.w	r3, r3, #32
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	f000 80a9 	beq.w	8016f74 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	8b5b      	ldrh	r3, [r3, #26]
 8016e26:	f043 0302 	orr.w	r3, r3, #2
 8016e2a:	b29a      	uxth	r2, r3
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8016e30:	6878      	ldr	r0, [r7, #4]
 8016e32:	f7fe fd39 	bl	80158a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016e36:	4b59      	ldr	r3, [pc, #356]	@ (8016f9c <tcp_process+0x7dc>)
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	687a      	ldr	r2, [r7, #4]
 8016e3c:	429a      	cmp	r2, r3
 8016e3e:	d105      	bne.n	8016e4c <tcp_process+0x68c>
 8016e40:	4b56      	ldr	r3, [pc, #344]	@ (8016f9c <tcp_process+0x7dc>)
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	68db      	ldr	r3, [r3, #12]
 8016e46:	4a55      	ldr	r2, [pc, #340]	@ (8016f9c <tcp_process+0x7dc>)
 8016e48:	6013      	str	r3, [r2, #0]
 8016e4a:	e013      	b.n	8016e74 <tcp_process+0x6b4>
 8016e4c:	4b53      	ldr	r3, [pc, #332]	@ (8016f9c <tcp_process+0x7dc>)
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	613b      	str	r3, [r7, #16]
 8016e52:	e00c      	b.n	8016e6e <tcp_process+0x6ae>
 8016e54:	693b      	ldr	r3, [r7, #16]
 8016e56:	68db      	ldr	r3, [r3, #12]
 8016e58:	687a      	ldr	r2, [r7, #4]
 8016e5a:	429a      	cmp	r2, r3
 8016e5c:	d104      	bne.n	8016e68 <tcp_process+0x6a8>
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	68da      	ldr	r2, [r3, #12]
 8016e62:	693b      	ldr	r3, [r7, #16]
 8016e64:	60da      	str	r2, [r3, #12]
 8016e66:	e005      	b.n	8016e74 <tcp_process+0x6b4>
 8016e68:	693b      	ldr	r3, [r7, #16]
 8016e6a:	68db      	ldr	r3, [r3, #12]
 8016e6c:	613b      	str	r3, [r7, #16]
 8016e6e:	693b      	ldr	r3, [r7, #16]
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d1ef      	bne.n	8016e54 <tcp_process+0x694>
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	2200      	movs	r2, #0
 8016e78:	60da      	str	r2, [r3, #12]
 8016e7a:	4b43      	ldr	r3, [pc, #268]	@ (8016f88 <tcp_process+0x7c8>)
 8016e7c:	2201      	movs	r2, #1
 8016e7e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	220a      	movs	r2, #10
 8016e84:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016e86:	4b41      	ldr	r3, [pc, #260]	@ (8016f8c <tcp_process+0x7cc>)
 8016e88:	681a      	ldr	r2, [r3, #0]
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	60da      	str	r2, [r3, #12]
 8016e8e:	4a3f      	ldr	r2, [pc, #252]	@ (8016f8c <tcp_process+0x7cc>)
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	6013      	str	r3, [r2, #0]
 8016e94:	f003 f8e4 	bl	801a060 <tcp_timer_needed>
      }
      break;
 8016e98:	e06c      	b.n	8016f74 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8016e9a:	6878      	ldr	r0, [r7, #4]
 8016e9c:	f000 f984 	bl	80171a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8016f90 <tcp_process+0x7d0>)
 8016ea2:	781b      	ldrb	r3, [r3, #0]
 8016ea4:	f003 0310 	and.w	r3, r3, #16
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d065      	beq.n	8016f78 <tcp_process+0x7b8>
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016eb0:	4b38      	ldr	r3, [pc, #224]	@ (8016f94 <tcp_process+0x7d4>)
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	429a      	cmp	r2, r3
 8016eb6:	d15f      	bne.n	8016f78 <tcp_process+0x7b8>
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d15b      	bne.n	8016f78 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8016ec0:	6878      	ldr	r0, [r7, #4]
 8016ec2:	f7fe fcf1 	bl	80158a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016ec6:	4b35      	ldr	r3, [pc, #212]	@ (8016f9c <tcp_process+0x7dc>)
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	687a      	ldr	r2, [r7, #4]
 8016ecc:	429a      	cmp	r2, r3
 8016ece:	d105      	bne.n	8016edc <tcp_process+0x71c>
 8016ed0:	4b32      	ldr	r3, [pc, #200]	@ (8016f9c <tcp_process+0x7dc>)
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	68db      	ldr	r3, [r3, #12]
 8016ed6:	4a31      	ldr	r2, [pc, #196]	@ (8016f9c <tcp_process+0x7dc>)
 8016ed8:	6013      	str	r3, [r2, #0]
 8016eda:	e013      	b.n	8016f04 <tcp_process+0x744>
 8016edc:	4b2f      	ldr	r3, [pc, #188]	@ (8016f9c <tcp_process+0x7dc>)
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	60fb      	str	r3, [r7, #12]
 8016ee2:	e00c      	b.n	8016efe <tcp_process+0x73e>
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	68db      	ldr	r3, [r3, #12]
 8016ee8:	687a      	ldr	r2, [r7, #4]
 8016eea:	429a      	cmp	r2, r3
 8016eec:	d104      	bne.n	8016ef8 <tcp_process+0x738>
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	68da      	ldr	r2, [r3, #12]
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	60da      	str	r2, [r3, #12]
 8016ef6:	e005      	b.n	8016f04 <tcp_process+0x744>
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	68db      	ldr	r3, [r3, #12]
 8016efc:	60fb      	str	r3, [r7, #12]
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d1ef      	bne.n	8016ee4 <tcp_process+0x724>
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	2200      	movs	r2, #0
 8016f08:	60da      	str	r2, [r3, #12]
 8016f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8016f88 <tcp_process+0x7c8>)
 8016f0c:	2201      	movs	r2, #1
 8016f0e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	220a      	movs	r2, #10
 8016f14:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016f16:	4b1d      	ldr	r3, [pc, #116]	@ (8016f8c <tcp_process+0x7cc>)
 8016f18:	681a      	ldr	r2, [r3, #0]
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	60da      	str	r2, [r3, #12]
 8016f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8016f8c <tcp_process+0x7cc>)
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	6013      	str	r3, [r2, #0]
 8016f24:	f003 f89c 	bl	801a060 <tcp_timer_needed>
      }
      break;
 8016f28:	e026      	b.n	8016f78 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8016f2a:	6878      	ldr	r0, [r7, #4]
 8016f2c:	f000 f93c 	bl	80171a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016f30:	4b17      	ldr	r3, [pc, #92]	@ (8016f90 <tcp_process+0x7d0>)
 8016f32:	781b      	ldrb	r3, [r3, #0]
 8016f34:	f003 0310 	and.w	r3, r3, #16
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d01f      	beq.n	8016f7c <tcp_process+0x7bc>
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016f40:	4b14      	ldr	r3, [pc, #80]	@ (8016f94 <tcp_process+0x7d4>)
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	429a      	cmp	r2, r3
 8016f46:	d119      	bne.n	8016f7c <tcp_process+0x7bc>
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d115      	bne.n	8016f7c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8016f50:	4b11      	ldr	r3, [pc, #68]	@ (8016f98 <tcp_process+0x7d8>)
 8016f52:	781b      	ldrb	r3, [r3, #0]
 8016f54:	f043 0310 	orr.w	r3, r3, #16
 8016f58:	b2da      	uxtb	r2, r3
 8016f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8016f98 <tcp_process+0x7d8>)
 8016f5c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8016f5e:	e00d      	b.n	8016f7c <tcp_process+0x7bc>
    default:
      break;
 8016f60:	bf00      	nop
 8016f62:	e00c      	b.n	8016f7e <tcp_process+0x7be>
      break;
 8016f64:	bf00      	nop
 8016f66:	e00a      	b.n	8016f7e <tcp_process+0x7be>
      break;
 8016f68:	bf00      	nop
 8016f6a:	e008      	b.n	8016f7e <tcp_process+0x7be>
      break;
 8016f6c:	bf00      	nop
 8016f6e:	e006      	b.n	8016f7e <tcp_process+0x7be>
      break;
 8016f70:	bf00      	nop
 8016f72:	e004      	b.n	8016f7e <tcp_process+0x7be>
      break;
 8016f74:	bf00      	nop
 8016f76:	e002      	b.n	8016f7e <tcp_process+0x7be>
      break;
 8016f78:	bf00      	nop
 8016f7a:	e000      	b.n	8016f7e <tcp_process+0x7be>
      break;
 8016f7c:	bf00      	nop
  }
  return ERR_OK;
 8016f7e:	2300      	movs	r3, #0
}
 8016f80:	4618      	mov	r0, r3
 8016f82:	3724      	adds	r7, #36	@ 0x24
 8016f84:	46bd      	mov	sp, r7
 8016f86:	bd90      	pop	{r4, r7, pc}
 8016f88:	2000e504 	.word	0x2000e504
 8016f8c:	2000e500 	.word	0x2000e500
 8016f90:	2000e534 	.word	0x2000e534
 8016f94:	2000e52c 	.word	0x2000e52c
 8016f98:	2000e535 	.word	0x2000e535
 8016f9c:	2000e4fc 	.word	0x2000e4fc

08016fa0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8016fa0:	b590      	push	{r4, r7, lr}
 8016fa2:	b085      	sub	sp, #20
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	6078      	str	r0, [r7, #4]
 8016fa8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d106      	bne.n	8016fbe <tcp_oos_insert_segment+0x1e>
 8016fb0:	4b3b      	ldr	r3, [pc, #236]	@ (80170a0 <tcp_oos_insert_segment+0x100>)
 8016fb2:	f240 421f 	movw	r2, #1055	@ 0x41f
 8016fb6:	493b      	ldr	r1, [pc, #236]	@ (80170a4 <tcp_oos_insert_segment+0x104>)
 8016fb8:	483b      	ldr	r0, [pc, #236]	@ (80170a8 <tcp_oos_insert_segment+0x108>)
 8016fba:	f007 f8c7 	bl	801e14c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	68db      	ldr	r3, [r3, #12]
 8016fc2:	899b      	ldrh	r3, [r3, #12]
 8016fc4:	b29b      	uxth	r3, r3
 8016fc6:	4618      	mov	r0, r3
 8016fc8:	f7fb f940 	bl	801224c <lwip_htons>
 8016fcc:	4603      	mov	r3, r0
 8016fce:	b2db      	uxtb	r3, r3
 8016fd0:	f003 0301 	and.w	r3, r3, #1
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d028      	beq.n	801702a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8016fd8:	6838      	ldr	r0, [r7, #0]
 8016fda:	f7fe f995 	bl	8015308 <tcp_segs_free>
    next = NULL;
 8016fde:	2300      	movs	r3, #0
 8016fe0:	603b      	str	r3, [r7, #0]
 8016fe2:	e056      	b.n	8017092 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016fe4:	683b      	ldr	r3, [r7, #0]
 8016fe6:	68db      	ldr	r3, [r3, #12]
 8016fe8:	899b      	ldrh	r3, [r3, #12]
 8016fea:	b29b      	uxth	r3, r3
 8016fec:	4618      	mov	r0, r3
 8016fee:	f7fb f92d 	bl	801224c <lwip_htons>
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	b2db      	uxtb	r3, r3
 8016ff6:	f003 0301 	and.w	r3, r3, #1
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d00d      	beq.n	801701a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	68db      	ldr	r3, [r3, #12]
 8017002:	899b      	ldrh	r3, [r3, #12]
 8017004:	b29c      	uxth	r4, r3
 8017006:	2001      	movs	r0, #1
 8017008:	f7fb f920 	bl	801224c <lwip_htons>
 801700c:	4603      	mov	r3, r0
 801700e:	461a      	mov	r2, r3
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	68db      	ldr	r3, [r3, #12]
 8017014:	4322      	orrs	r2, r4
 8017016:	b292      	uxth	r2, r2
 8017018:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801701a:	683b      	ldr	r3, [r7, #0]
 801701c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801701e:	683b      	ldr	r3, [r7, #0]
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017024:	68f8      	ldr	r0, [r7, #12]
 8017026:	f7fe f984 	bl	8015332 <tcp_seg_free>
    while (next &&
 801702a:	683b      	ldr	r3, [r7, #0]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d00e      	beq.n	801704e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	891b      	ldrh	r3, [r3, #8]
 8017034:	461a      	mov	r2, r3
 8017036:	4b1d      	ldr	r3, [pc, #116]	@ (80170ac <tcp_oos_insert_segment+0x10c>)
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	441a      	add	r2, r3
 801703c:	683b      	ldr	r3, [r7, #0]
 801703e:	68db      	ldr	r3, [r3, #12]
 8017040:	685b      	ldr	r3, [r3, #4]
 8017042:	6839      	ldr	r1, [r7, #0]
 8017044:	8909      	ldrh	r1, [r1, #8]
 8017046:	440b      	add	r3, r1
 8017048:	1ad3      	subs	r3, r2, r3
    while (next &&
 801704a:	2b00      	cmp	r3, #0
 801704c:	daca      	bge.n	8016fe4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801704e:	683b      	ldr	r3, [r7, #0]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d01e      	beq.n	8017092 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	891b      	ldrh	r3, [r3, #8]
 8017058:	461a      	mov	r2, r3
 801705a:	4b14      	ldr	r3, [pc, #80]	@ (80170ac <tcp_oos_insert_segment+0x10c>)
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	441a      	add	r2, r3
 8017060:	683b      	ldr	r3, [r7, #0]
 8017062:	68db      	ldr	r3, [r3, #12]
 8017064:	685b      	ldr	r3, [r3, #4]
 8017066:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017068:	2b00      	cmp	r3, #0
 801706a:	dd12      	ble.n	8017092 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801706c:	683b      	ldr	r3, [r7, #0]
 801706e:	68db      	ldr	r3, [r3, #12]
 8017070:	685b      	ldr	r3, [r3, #4]
 8017072:	b29a      	uxth	r2, r3
 8017074:	4b0d      	ldr	r3, [pc, #52]	@ (80170ac <tcp_oos_insert_segment+0x10c>)
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	b29b      	uxth	r3, r3
 801707a:	1ad3      	subs	r3, r2, r3
 801707c:	b29a      	uxth	r2, r3
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	685a      	ldr	r2, [r3, #4]
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	891b      	ldrh	r3, [r3, #8]
 801708a:	4619      	mov	r1, r3
 801708c:	4610      	mov	r0, r2
 801708e:	f7fc fb45 	bl	801371c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	683a      	ldr	r2, [r7, #0]
 8017096:	601a      	str	r2, [r3, #0]
}
 8017098:	bf00      	nop
 801709a:	3714      	adds	r7, #20
 801709c:	46bd      	mov	sp, r7
 801709e:	bd90      	pop	{r4, r7, pc}
 80170a0:	08021244 	.word	0x08021244
 80170a4:	08021504 	.word	0x08021504
 80170a8:	08021290 	.word	0x08021290
 80170ac:	2000e528 	.word	0x2000e528

080170b0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80170b0:	b5b0      	push	{r4, r5, r7, lr}
 80170b2:	b086      	sub	sp, #24
 80170b4:	af00      	add	r7, sp, #0
 80170b6:	60f8      	str	r0, [r7, #12]
 80170b8:	60b9      	str	r1, [r7, #8]
 80170ba:	607a      	str	r2, [r7, #4]
 80170bc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80170be:	e03e      	b.n	801713e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80170c0:	68bb      	ldr	r3, [r7, #8]
 80170c2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80170c4:	68bb      	ldr	r3, [r7, #8]
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80170ca:	697b      	ldr	r3, [r7, #20]
 80170cc:	685b      	ldr	r3, [r3, #4]
 80170ce:	4618      	mov	r0, r3
 80170d0:	f7fc fd38 	bl	8013b44 <pbuf_clen>
 80170d4:	4603      	mov	r3, r0
 80170d6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80170de:	8a7a      	ldrh	r2, [r7, #18]
 80170e0:	429a      	cmp	r2, r3
 80170e2:	d906      	bls.n	80170f2 <tcp_free_acked_segments+0x42>
 80170e4:	4b2a      	ldr	r3, [pc, #168]	@ (8017190 <tcp_free_acked_segments+0xe0>)
 80170e6:	f240 4257 	movw	r2, #1111	@ 0x457
 80170ea:	492a      	ldr	r1, [pc, #168]	@ (8017194 <tcp_free_acked_segments+0xe4>)
 80170ec:	482a      	ldr	r0, [pc, #168]	@ (8017198 <tcp_free_acked_segments+0xe8>)
 80170ee:	f007 f82d 	bl	801e14c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80170f8:	8a7b      	ldrh	r3, [r7, #18]
 80170fa:	1ad3      	subs	r3, r2, r3
 80170fc:	b29a      	uxth	r2, r3
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017104:	697b      	ldr	r3, [r7, #20]
 8017106:	891a      	ldrh	r2, [r3, #8]
 8017108:	4b24      	ldr	r3, [pc, #144]	@ (801719c <tcp_free_acked_segments+0xec>)
 801710a:	881b      	ldrh	r3, [r3, #0]
 801710c:	4413      	add	r3, r2
 801710e:	b29a      	uxth	r2, r3
 8017110:	4b22      	ldr	r3, [pc, #136]	@ (801719c <tcp_free_acked_segments+0xec>)
 8017112:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017114:	6978      	ldr	r0, [r7, #20]
 8017116:	f7fe f90c 	bl	8015332 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017120:	2b00      	cmp	r3, #0
 8017122:	d00c      	beq.n	801713e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017124:	68bb      	ldr	r3, [r7, #8]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d109      	bne.n	801713e <tcp_free_acked_segments+0x8e>
 801712a:	683b      	ldr	r3, [r7, #0]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d106      	bne.n	801713e <tcp_free_acked_segments+0x8e>
 8017130:	4b17      	ldr	r3, [pc, #92]	@ (8017190 <tcp_free_acked_segments+0xe0>)
 8017132:	f240 4261 	movw	r2, #1121	@ 0x461
 8017136:	491a      	ldr	r1, [pc, #104]	@ (80171a0 <tcp_free_acked_segments+0xf0>)
 8017138:	4817      	ldr	r0, [pc, #92]	@ (8017198 <tcp_free_acked_segments+0xe8>)
 801713a:	f007 f807 	bl	801e14c <iprintf>
  while (seg_list != NULL &&
 801713e:	68bb      	ldr	r3, [r7, #8]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d020      	beq.n	8017186 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017144:	68bb      	ldr	r3, [r7, #8]
 8017146:	68db      	ldr	r3, [r3, #12]
 8017148:	685b      	ldr	r3, [r3, #4]
 801714a:	4618      	mov	r0, r3
 801714c:	f7fb f894 	bl	8012278 <lwip_htonl>
 8017150:	4604      	mov	r4, r0
 8017152:	68bb      	ldr	r3, [r7, #8]
 8017154:	891b      	ldrh	r3, [r3, #8]
 8017156:	461d      	mov	r5, r3
 8017158:	68bb      	ldr	r3, [r7, #8]
 801715a:	68db      	ldr	r3, [r3, #12]
 801715c:	899b      	ldrh	r3, [r3, #12]
 801715e:	b29b      	uxth	r3, r3
 8017160:	4618      	mov	r0, r3
 8017162:	f7fb f873 	bl	801224c <lwip_htons>
 8017166:	4603      	mov	r3, r0
 8017168:	b2db      	uxtb	r3, r3
 801716a:	f003 0303 	and.w	r3, r3, #3
 801716e:	2b00      	cmp	r3, #0
 8017170:	d001      	beq.n	8017176 <tcp_free_acked_segments+0xc6>
 8017172:	2301      	movs	r3, #1
 8017174:	e000      	b.n	8017178 <tcp_free_acked_segments+0xc8>
 8017176:	2300      	movs	r3, #0
 8017178:	442b      	add	r3, r5
 801717a:	18e2      	adds	r2, r4, r3
 801717c:	4b09      	ldr	r3, [pc, #36]	@ (80171a4 <tcp_free_acked_segments+0xf4>)
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8017182:	2b00      	cmp	r3, #0
 8017184:	dd9c      	ble.n	80170c0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8017186:	68bb      	ldr	r3, [r7, #8]
}
 8017188:	4618      	mov	r0, r3
 801718a:	3718      	adds	r7, #24
 801718c:	46bd      	mov	sp, r7
 801718e:	bdb0      	pop	{r4, r5, r7, pc}
 8017190:	08021244 	.word	0x08021244
 8017194:	0802152c 	.word	0x0802152c
 8017198:	08021290 	.word	0x08021290
 801719c:	2000e530 	.word	0x2000e530
 80171a0:	08021554 	.word	0x08021554
 80171a4:	2000e52c 	.word	0x2000e52c

080171a8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80171a8:	b5b0      	push	{r4, r5, r7, lr}
 80171aa:	b094      	sub	sp, #80	@ 0x50
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80171b0:	2300      	movs	r3, #0
 80171b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d106      	bne.n	80171c8 <tcp_receive+0x20>
 80171ba:	4b91      	ldr	r3, [pc, #580]	@ (8017400 <tcp_receive+0x258>)
 80171bc:	f240 427b 	movw	r2, #1147	@ 0x47b
 80171c0:	4990      	ldr	r1, [pc, #576]	@ (8017404 <tcp_receive+0x25c>)
 80171c2:	4891      	ldr	r0, [pc, #580]	@ (8017408 <tcp_receive+0x260>)
 80171c4:	f006 ffc2 	bl	801e14c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	7d1b      	ldrb	r3, [r3, #20]
 80171cc:	2b03      	cmp	r3, #3
 80171ce:	d806      	bhi.n	80171de <tcp_receive+0x36>
 80171d0:	4b8b      	ldr	r3, [pc, #556]	@ (8017400 <tcp_receive+0x258>)
 80171d2:	f240 427c 	movw	r2, #1148	@ 0x47c
 80171d6:	498d      	ldr	r1, [pc, #564]	@ (801740c <tcp_receive+0x264>)
 80171d8:	488b      	ldr	r0, [pc, #556]	@ (8017408 <tcp_receive+0x260>)
 80171da:	f006 ffb7 	bl	801e14c <iprintf>

  if (flags & TCP_ACK) {
 80171de:	4b8c      	ldr	r3, [pc, #560]	@ (8017410 <tcp_receive+0x268>)
 80171e0:	781b      	ldrb	r3, [r3, #0]
 80171e2:	f003 0310 	and.w	r3, r3, #16
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	f000 8264 	beq.w	80176b4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80171f2:	461a      	mov	r2, r3
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80171f8:	4413      	add	r3, r2
 80171fa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8017200:	4b84      	ldr	r3, [pc, #528]	@ (8017414 <tcp_receive+0x26c>)
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	1ad3      	subs	r3, r2, r3
 8017206:	2b00      	cmp	r3, #0
 8017208:	db1b      	blt.n	8017242 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801720e:	4b81      	ldr	r3, [pc, #516]	@ (8017414 <tcp_receive+0x26c>)
 8017210:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017212:	429a      	cmp	r2, r3
 8017214:	d106      	bne.n	8017224 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801721a:	4b7f      	ldr	r3, [pc, #508]	@ (8017418 <tcp_receive+0x270>)
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	1ad3      	subs	r3, r2, r3
 8017220:	2b00      	cmp	r3, #0
 8017222:	db0e      	blt.n	8017242 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017228:	4b7b      	ldr	r3, [pc, #492]	@ (8017418 <tcp_receive+0x270>)
 801722a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801722c:	429a      	cmp	r2, r3
 801722e:	d125      	bne.n	801727c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017230:	4b7a      	ldr	r3, [pc, #488]	@ (801741c <tcp_receive+0x274>)
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	89db      	ldrh	r3, [r3, #14]
 8017236:	b29a      	uxth	r2, r3
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801723e:	429a      	cmp	r2, r3
 8017240:	d91c      	bls.n	801727c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8017242:	4b76      	ldr	r3, [pc, #472]	@ (801741c <tcp_receive+0x274>)
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	89db      	ldrh	r3, [r3, #14]
 8017248:	b29a      	uxth	r2, r3
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801725c:	429a      	cmp	r2, r3
 801725e:	d205      	bcs.n	801726c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801726c:	4b69      	ldr	r3, [pc, #420]	@ (8017414 <tcp_receive+0x26c>)
 801726e:	681a      	ldr	r2, [r3, #0]
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8017274:	4b68      	ldr	r3, [pc, #416]	@ (8017418 <tcp_receive+0x270>)
 8017276:	681a      	ldr	r2, [r3, #0]
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801727c:	4b66      	ldr	r3, [pc, #408]	@ (8017418 <tcp_receive+0x270>)
 801727e:	681a      	ldr	r2, [r3, #0]
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017284:	1ad3      	subs	r3, r2, r3
 8017286:	2b00      	cmp	r3, #0
 8017288:	dc58      	bgt.n	801733c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801728a:	4b65      	ldr	r3, [pc, #404]	@ (8017420 <tcp_receive+0x278>)
 801728c:	881b      	ldrh	r3, [r3, #0]
 801728e:	2b00      	cmp	r3, #0
 8017290:	d14b      	bne.n	801732a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017296:	687a      	ldr	r2, [r7, #4]
 8017298:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 801729c:	4413      	add	r3, r2
 801729e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80172a0:	429a      	cmp	r2, r3
 80172a2:	d142      	bne.n	801732a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	db3d      	blt.n	801732a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80172b2:	4b59      	ldr	r3, [pc, #356]	@ (8017418 <tcp_receive+0x270>)
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	429a      	cmp	r2, r3
 80172b8:	d137      	bne.n	801732a <tcp_receive+0x182>
              found_dupack = 1;
 80172ba:	2301      	movs	r3, #1
 80172bc:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80172c4:	2bff      	cmp	r3, #255	@ 0xff
 80172c6:	d007      	beq.n	80172d8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80172ce:	3301      	adds	r3, #1
 80172d0:	b2da      	uxtb	r2, r3
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80172de:	2b03      	cmp	r3, #3
 80172e0:	d91b      	bls.n	801731a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80172ec:	4413      	add	r3, r2
 80172ee:	b29a      	uxth	r2, r3
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80172f6:	429a      	cmp	r2, r3
 80172f8:	d30a      	bcc.n	8017310 <tcp_receive+0x168>
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017304:	4413      	add	r3, r2
 8017306:	b29a      	uxth	r2, r3
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801730e:	e004      	b.n	801731a <tcp_receive+0x172>
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017316:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017320:	2b02      	cmp	r3, #2
 8017322:	d902      	bls.n	801732a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017324:	6878      	ldr	r0, [r7, #4]
 8017326:	f002 fb3f 	bl	80199a8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801732a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801732c:	2b00      	cmp	r3, #0
 801732e:	f040 8161 	bne.w	80175f4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	2200      	movs	r2, #0
 8017336:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801733a:	e15b      	b.n	80175f4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801733c:	4b36      	ldr	r3, [pc, #216]	@ (8017418 <tcp_receive+0x270>)
 801733e:	681a      	ldr	r2, [r3, #0]
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017344:	1ad3      	subs	r3, r2, r3
 8017346:	3b01      	subs	r3, #1
 8017348:	2b00      	cmp	r3, #0
 801734a:	f2c0 814e 	blt.w	80175ea <tcp_receive+0x442>
 801734e:	4b32      	ldr	r3, [pc, #200]	@ (8017418 <tcp_receive+0x270>)
 8017350:	681a      	ldr	r2, [r3, #0]
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017356:	1ad3      	subs	r3, r2, r3
 8017358:	2b00      	cmp	r3, #0
 801735a:	f300 8146 	bgt.w	80175ea <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	8b5b      	ldrh	r3, [r3, #26]
 8017362:	f003 0304 	and.w	r3, r3, #4
 8017366:	2b00      	cmp	r3, #0
 8017368:	d010      	beq.n	801738c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	8b5b      	ldrh	r3, [r3, #26]
 801736e:	f023 0304 	bic.w	r3, r3, #4
 8017372:	b29a      	uxth	r2, r3
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	2200      	movs	r2, #0
 8017388:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	2200      	movs	r2, #0
 8017390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801739a:	10db      	asrs	r3, r3, #3
 801739c:	b21b      	sxth	r3, r3
 801739e:	b29a      	uxth	r2, r3
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80173a6:	b29b      	uxth	r3, r3
 80173a8:	4413      	add	r3, r2
 80173aa:	b29b      	uxth	r3, r3
 80173ac:	b21a      	sxth	r2, r3
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80173b4:	4b18      	ldr	r3, [pc, #96]	@ (8017418 <tcp_receive+0x270>)
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	b29a      	uxth	r2, r3
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80173be:	b29b      	uxth	r3, r3
 80173c0:	1ad3      	subs	r3, r2, r3
 80173c2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	2200      	movs	r2, #0
 80173c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80173cc:	4b12      	ldr	r3, [pc, #72]	@ (8017418 <tcp_receive+0x270>)
 80173ce:	681a      	ldr	r2, [r3, #0]
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	7d1b      	ldrb	r3, [r3, #20]
 80173d8:	2b03      	cmp	r3, #3
 80173da:	f240 8097 	bls.w	801750c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80173ea:	429a      	cmp	r2, r3
 80173ec:	d245      	bcs.n	801747a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	8b5b      	ldrh	r3, [r3, #26]
 80173f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d014      	beq.n	8017424 <tcp_receive+0x27c>
 80173fa:	2301      	movs	r3, #1
 80173fc:	e013      	b.n	8017426 <tcp_receive+0x27e>
 80173fe:	bf00      	nop
 8017400:	08021244 	.word	0x08021244
 8017404:	08021574 	.word	0x08021574
 8017408:	08021290 	.word	0x08021290
 801740c:	08021590 	.word	0x08021590
 8017410:	2000e534 	.word	0x2000e534
 8017414:	2000e528 	.word	0x2000e528
 8017418:	2000e52c 	.word	0x2000e52c
 801741c:	2000e518 	.word	0x2000e518
 8017420:	2000e532 	.word	0x2000e532
 8017424:	2302      	movs	r3, #2
 8017426:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801742a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801742e:	b29a      	uxth	r2, r3
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017434:	fb12 f303 	smulbb	r3, r2, r3
 8017438:	b29b      	uxth	r3, r3
 801743a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801743c:	4293      	cmp	r3, r2
 801743e:	bf28      	it	cs
 8017440:	4613      	movcs	r3, r2
 8017442:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801744a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801744c:	4413      	add	r3, r2
 801744e:	b29a      	uxth	r2, r3
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017456:	429a      	cmp	r2, r3
 8017458:	d309      	bcc.n	801746e <tcp_receive+0x2c6>
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017460:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017462:	4413      	add	r3, r2
 8017464:	b29a      	uxth	r2, r3
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801746c:	e04e      	b.n	801750c <tcp_receive+0x364>
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017474:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017478:	e048      	b.n	801750c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017480:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017482:	4413      	add	r3, r2
 8017484:	b29a      	uxth	r2, r3
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801748c:	429a      	cmp	r2, r3
 801748e:	d309      	bcc.n	80174a4 <tcp_receive+0x2fc>
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017496:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017498:	4413      	add	r3, r2
 801749a:	b29a      	uxth	r2, r3
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80174a2:	e004      	b.n	80174ae <tcp_receive+0x306>
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80174aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80174ba:	429a      	cmp	r2, r3
 80174bc:	d326      	bcc.n	801750c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80174ca:	1ad3      	subs	r3, r2, r3
 80174cc:	b29a      	uxth	r2, r3
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80174de:	4413      	add	r3, r2
 80174e0:	b29a      	uxth	r2, r3
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80174e8:	429a      	cmp	r2, r3
 80174ea:	d30a      	bcc.n	8017502 <tcp_receive+0x35a>
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80174f6:	4413      	add	r3, r2
 80174f8:	b29a      	uxth	r2, r3
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017500:	e004      	b.n	801750c <tcp_receive+0x364>
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017508:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017514:	4a98      	ldr	r2, [pc, #608]	@ (8017778 <tcp_receive+0x5d0>)
 8017516:	6878      	ldr	r0, [r7, #4]
 8017518:	f7ff fdca 	bl	80170b0 <tcp_free_acked_segments>
 801751c:	4602      	mov	r2, r0
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801752a:	4a94      	ldr	r2, [pc, #592]	@ (801777c <tcp_receive+0x5d4>)
 801752c:	6878      	ldr	r0, [r7, #4]
 801752e:	f7ff fdbf 	bl	80170b0 <tcp_free_acked_segments>
 8017532:	4602      	mov	r2, r0
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801753c:	2b00      	cmp	r3, #0
 801753e:	d104      	bne.n	801754a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017546:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017548:	e002      	b.n	8017550 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	2200      	movs	r2, #0
 801754e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	2200      	movs	r2, #0
 8017554:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801755a:	2b00      	cmp	r3, #0
 801755c:	d103      	bne.n	8017566 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	2200      	movs	r2, #0
 8017562:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801756c:	4b84      	ldr	r3, [pc, #528]	@ (8017780 <tcp_receive+0x5d8>)
 801756e:	881b      	ldrh	r3, [r3, #0]
 8017570:	4413      	add	r3, r2
 8017572:	b29a      	uxth	r2, r3
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	8b5b      	ldrh	r3, [r3, #26]
 801757e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017582:	2b00      	cmp	r3, #0
 8017584:	d035      	beq.n	80175f2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801758a:	2b00      	cmp	r3, #0
 801758c:	d118      	bne.n	80175c0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017592:	2b00      	cmp	r3, #0
 8017594:	d00c      	beq.n	80175b0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801759e:	68db      	ldr	r3, [r3, #12]
 80175a0:	685b      	ldr	r3, [r3, #4]
 80175a2:	4618      	mov	r0, r3
 80175a4:	f7fa fe68 	bl	8012278 <lwip_htonl>
 80175a8:	4603      	mov	r3, r0
 80175aa:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	dc20      	bgt.n	80175f2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	8b5b      	ldrh	r3, [r3, #26]
 80175b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80175b8:	b29a      	uxth	r2, r3
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80175be:	e018      	b.n	80175f2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80175c8:	68db      	ldr	r3, [r3, #12]
 80175ca:	685b      	ldr	r3, [r3, #4]
 80175cc:	4618      	mov	r0, r3
 80175ce:	f7fa fe53 	bl	8012278 <lwip_htonl>
 80175d2:	4603      	mov	r3, r0
 80175d4:	1ae3      	subs	r3, r4, r3
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	dc0b      	bgt.n	80175f2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	8b5b      	ldrh	r3, [r3, #26]
 80175de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80175e2:	b29a      	uxth	r2, r3
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80175e8:	e003      	b.n	80175f2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80175ea:	6878      	ldr	r0, [r7, #4]
 80175ec:	f002 fbc8 	bl	8019d80 <tcp_send_empty_ack>
 80175f0:	e000      	b.n	80175f4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80175f2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d05b      	beq.n	80176b4 <tcp_receive+0x50c>
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017600:	4b60      	ldr	r3, [pc, #384]	@ (8017784 <tcp_receive+0x5dc>)
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	1ad3      	subs	r3, r2, r3
 8017606:	2b00      	cmp	r3, #0
 8017608:	da54      	bge.n	80176b4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801760a:	4b5f      	ldr	r3, [pc, #380]	@ (8017788 <tcp_receive+0x5e0>)
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	b29a      	uxth	r2, r3
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017614:	b29b      	uxth	r3, r3
 8017616:	1ad3      	subs	r3, r2, r3
 8017618:	b29b      	uxth	r3, r3
 801761a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801761e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017628:	10db      	asrs	r3, r3, #3
 801762a:	b21b      	sxth	r3, r3
 801762c:	b29b      	uxth	r3, r3
 801762e:	1ad3      	subs	r3, r2, r3
 8017630:	b29b      	uxth	r3, r3
 8017632:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801763c:	b29a      	uxth	r2, r3
 801763e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017642:	4413      	add	r3, r2
 8017644:	b29b      	uxth	r3, r3
 8017646:	b21a      	sxth	r2, r3
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 801764c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8017650:	2b00      	cmp	r3, #0
 8017652:	da05      	bge.n	8017660 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8017654:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017658:	425b      	negs	r3, r3
 801765a:	b29b      	uxth	r3, r3
 801765c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8017660:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801766a:	109b      	asrs	r3, r3, #2
 801766c:	b21b      	sxth	r3, r3
 801766e:	b29b      	uxth	r3, r3
 8017670:	1ad3      	subs	r3, r2, r3
 8017672:	b29b      	uxth	r3, r3
 8017674:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801767e:	b29a      	uxth	r2, r3
 8017680:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017684:	4413      	add	r3, r2
 8017686:	b29b      	uxth	r3, r3
 8017688:	b21a      	sxth	r2, r3
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017694:	10db      	asrs	r3, r3, #3
 8017696:	b21b      	sxth	r3, r3
 8017698:	b29a      	uxth	r2, r3
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80176a0:	b29b      	uxth	r3, r3
 80176a2:	4413      	add	r3, r2
 80176a4:	b29b      	uxth	r3, r3
 80176a6:	b21a      	sxth	r2, r3
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	2200      	movs	r2, #0
 80176b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80176b4:	4b35      	ldr	r3, [pc, #212]	@ (801778c <tcp_receive+0x5e4>)
 80176b6:	881b      	ldrh	r3, [r3, #0]
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	f000 84df 	beq.w	801807c <tcp_receive+0xed4>
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	7d1b      	ldrb	r3, [r3, #20]
 80176c2:	2b06      	cmp	r3, #6
 80176c4:	f200 84da 	bhi.w	801807c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80176cc:	4b30      	ldr	r3, [pc, #192]	@ (8017790 <tcp_receive+0x5e8>)
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	1ad3      	subs	r3, r2, r3
 80176d2:	3b01      	subs	r3, #1
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	f2c0 808f 	blt.w	80177f8 <tcp_receive+0x650>
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80176de:	4b2b      	ldr	r3, [pc, #172]	@ (801778c <tcp_receive+0x5e4>)
 80176e0:	881b      	ldrh	r3, [r3, #0]
 80176e2:	4619      	mov	r1, r3
 80176e4:	4b2a      	ldr	r3, [pc, #168]	@ (8017790 <tcp_receive+0x5e8>)
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	440b      	add	r3, r1
 80176ea:	1ad3      	subs	r3, r2, r3
 80176ec:	3301      	adds	r3, #1
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	f300 8082 	bgt.w	80177f8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80176f4:	4b27      	ldr	r3, [pc, #156]	@ (8017794 <tcp_receive+0x5ec>)
 80176f6:	685b      	ldr	r3, [r3, #4]
 80176f8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80176fe:	4b24      	ldr	r3, [pc, #144]	@ (8017790 <tcp_receive+0x5e8>)
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	1ad3      	subs	r3, r2, r3
 8017704:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8017706:	4b23      	ldr	r3, [pc, #140]	@ (8017794 <tcp_receive+0x5ec>)
 8017708:	685b      	ldr	r3, [r3, #4]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d106      	bne.n	801771c <tcp_receive+0x574>
 801770e:	4b22      	ldr	r3, [pc, #136]	@ (8017798 <tcp_receive+0x5f0>)
 8017710:	f240 5294 	movw	r2, #1428	@ 0x594
 8017714:	4921      	ldr	r1, [pc, #132]	@ (801779c <tcp_receive+0x5f4>)
 8017716:	4822      	ldr	r0, [pc, #136]	@ (80177a0 <tcp_receive+0x5f8>)
 8017718:	f006 fd18 	bl	801e14c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801771c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801771e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017722:	4293      	cmp	r3, r2
 8017724:	d906      	bls.n	8017734 <tcp_receive+0x58c>
 8017726:	4b1c      	ldr	r3, [pc, #112]	@ (8017798 <tcp_receive+0x5f0>)
 8017728:	f240 5295 	movw	r2, #1429	@ 0x595
 801772c:	491d      	ldr	r1, [pc, #116]	@ (80177a4 <tcp_receive+0x5fc>)
 801772e:	481c      	ldr	r0, [pc, #112]	@ (80177a0 <tcp_receive+0x5f8>)
 8017730:	f006 fd0c 	bl	801e14c <iprintf>
      off = (u16_t)off32;
 8017734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017736:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801773a:	4b16      	ldr	r3, [pc, #88]	@ (8017794 <tcp_receive+0x5ec>)
 801773c:	685b      	ldr	r3, [r3, #4]
 801773e:	891b      	ldrh	r3, [r3, #8]
 8017740:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017744:	429a      	cmp	r2, r3
 8017746:	d906      	bls.n	8017756 <tcp_receive+0x5ae>
 8017748:	4b13      	ldr	r3, [pc, #76]	@ (8017798 <tcp_receive+0x5f0>)
 801774a:	f240 5297 	movw	r2, #1431	@ 0x597
 801774e:	4916      	ldr	r1, [pc, #88]	@ (80177a8 <tcp_receive+0x600>)
 8017750:	4813      	ldr	r0, [pc, #76]	@ (80177a0 <tcp_receive+0x5f8>)
 8017752:	f006 fcfb 	bl	801e14c <iprintf>
      inseg.len -= off;
 8017756:	4b0f      	ldr	r3, [pc, #60]	@ (8017794 <tcp_receive+0x5ec>)
 8017758:	891a      	ldrh	r2, [r3, #8]
 801775a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801775e:	1ad3      	subs	r3, r2, r3
 8017760:	b29a      	uxth	r2, r3
 8017762:	4b0c      	ldr	r3, [pc, #48]	@ (8017794 <tcp_receive+0x5ec>)
 8017764:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8017766:	4b0b      	ldr	r3, [pc, #44]	@ (8017794 <tcp_receive+0x5ec>)
 8017768:	685b      	ldr	r3, [r3, #4]
 801776a:	891a      	ldrh	r2, [r3, #8]
 801776c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017770:	1ad3      	subs	r3, r2, r3
 8017772:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8017774:	e02a      	b.n	80177cc <tcp_receive+0x624>
 8017776:	bf00      	nop
 8017778:	080215ac 	.word	0x080215ac
 801777c:	080215b4 	.word	0x080215b4
 8017780:	2000e530 	.word	0x2000e530
 8017784:	2000e52c 	.word	0x2000e52c
 8017788:	2000e4f0 	.word	0x2000e4f0
 801778c:	2000e532 	.word	0x2000e532
 8017790:	2000e528 	.word	0x2000e528
 8017794:	2000e508 	.word	0x2000e508
 8017798:	08021244 	.word	0x08021244
 801779c:	080215bc 	.word	0x080215bc
 80177a0:	08021290 	.word	0x08021290
 80177a4:	080215cc 	.word	0x080215cc
 80177a8:	080215dc 	.word	0x080215dc
        off -= p->len;
 80177ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80177ae:	895b      	ldrh	r3, [r3, #10]
 80177b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80177b4:	1ad3      	subs	r3, r2, r3
 80177b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80177ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80177bc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80177be:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80177c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80177c2:	2200      	movs	r2, #0
 80177c4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80177c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80177cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80177ce:	895b      	ldrh	r3, [r3, #10]
 80177d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80177d4:	429a      	cmp	r2, r3
 80177d6:	d8e9      	bhi.n	80177ac <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80177d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80177dc:	4619      	mov	r1, r3
 80177de:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80177e0:	f7fc f89c 	bl	801391c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177e8:	4a90      	ldr	r2, [pc, #576]	@ (8017a2c <tcp_receive+0x884>)
 80177ea:	6013      	str	r3, [r2, #0]
 80177ec:	4b90      	ldr	r3, [pc, #576]	@ (8017a30 <tcp_receive+0x888>)
 80177ee:	68db      	ldr	r3, [r3, #12]
 80177f0:	4a8e      	ldr	r2, [pc, #568]	@ (8017a2c <tcp_receive+0x884>)
 80177f2:	6812      	ldr	r2, [r2, #0]
 80177f4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80177f6:	e00d      	b.n	8017814 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80177f8:	4b8c      	ldr	r3, [pc, #560]	@ (8017a2c <tcp_receive+0x884>)
 80177fa:	681a      	ldr	r2, [r3, #0]
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017800:	1ad3      	subs	r3, r2, r3
 8017802:	2b00      	cmp	r3, #0
 8017804:	da06      	bge.n	8017814 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	8b5b      	ldrh	r3, [r3, #26]
 801780a:	f043 0302 	orr.w	r3, r3, #2
 801780e:	b29a      	uxth	r2, r3
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017814:	4b85      	ldr	r3, [pc, #532]	@ (8017a2c <tcp_receive+0x884>)
 8017816:	681a      	ldr	r2, [r3, #0]
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801781c:	1ad3      	subs	r3, r2, r3
 801781e:	2b00      	cmp	r3, #0
 8017820:	f2c0 8427 	blt.w	8018072 <tcp_receive+0xeca>
 8017824:	4b81      	ldr	r3, [pc, #516]	@ (8017a2c <tcp_receive+0x884>)
 8017826:	681a      	ldr	r2, [r3, #0]
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801782c:	6879      	ldr	r1, [r7, #4]
 801782e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017830:	440b      	add	r3, r1
 8017832:	1ad3      	subs	r3, r2, r3
 8017834:	3301      	adds	r3, #1
 8017836:	2b00      	cmp	r3, #0
 8017838:	f300 841b 	bgt.w	8018072 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017840:	4b7a      	ldr	r3, [pc, #488]	@ (8017a2c <tcp_receive+0x884>)
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	429a      	cmp	r2, r3
 8017846:	f040 8298 	bne.w	8017d7a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801784a:	4b79      	ldr	r3, [pc, #484]	@ (8017a30 <tcp_receive+0x888>)
 801784c:	891c      	ldrh	r4, [r3, #8]
 801784e:	4b78      	ldr	r3, [pc, #480]	@ (8017a30 <tcp_receive+0x888>)
 8017850:	68db      	ldr	r3, [r3, #12]
 8017852:	899b      	ldrh	r3, [r3, #12]
 8017854:	b29b      	uxth	r3, r3
 8017856:	4618      	mov	r0, r3
 8017858:	f7fa fcf8 	bl	801224c <lwip_htons>
 801785c:	4603      	mov	r3, r0
 801785e:	b2db      	uxtb	r3, r3
 8017860:	f003 0303 	and.w	r3, r3, #3
 8017864:	2b00      	cmp	r3, #0
 8017866:	d001      	beq.n	801786c <tcp_receive+0x6c4>
 8017868:	2301      	movs	r3, #1
 801786a:	e000      	b.n	801786e <tcp_receive+0x6c6>
 801786c:	2300      	movs	r3, #0
 801786e:	4423      	add	r3, r4
 8017870:	b29a      	uxth	r2, r3
 8017872:	4b70      	ldr	r3, [pc, #448]	@ (8017a34 <tcp_receive+0x88c>)
 8017874:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801787a:	4b6e      	ldr	r3, [pc, #440]	@ (8017a34 <tcp_receive+0x88c>)
 801787c:	881b      	ldrh	r3, [r3, #0]
 801787e:	429a      	cmp	r2, r3
 8017880:	d274      	bcs.n	801796c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017882:	4b6b      	ldr	r3, [pc, #428]	@ (8017a30 <tcp_receive+0x888>)
 8017884:	68db      	ldr	r3, [r3, #12]
 8017886:	899b      	ldrh	r3, [r3, #12]
 8017888:	b29b      	uxth	r3, r3
 801788a:	4618      	mov	r0, r3
 801788c:	f7fa fcde 	bl	801224c <lwip_htons>
 8017890:	4603      	mov	r3, r0
 8017892:	b2db      	uxtb	r3, r3
 8017894:	f003 0301 	and.w	r3, r3, #1
 8017898:	2b00      	cmp	r3, #0
 801789a:	d01e      	beq.n	80178da <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801789c:	4b64      	ldr	r3, [pc, #400]	@ (8017a30 <tcp_receive+0x888>)
 801789e:	68db      	ldr	r3, [r3, #12]
 80178a0:	899b      	ldrh	r3, [r3, #12]
 80178a2:	b29b      	uxth	r3, r3
 80178a4:	b21b      	sxth	r3, r3
 80178a6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80178aa:	b21c      	sxth	r4, r3
 80178ac:	4b60      	ldr	r3, [pc, #384]	@ (8017a30 <tcp_receive+0x888>)
 80178ae:	68db      	ldr	r3, [r3, #12]
 80178b0:	899b      	ldrh	r3, [r3, #12]
 80178b2:	b29b      	uxth	r3, r3
 80178b4:	4618      	mov	r0, r3
 80178b6:	f7fa fcc9 	bl	801224c <lwip_htons>
 80178ba:	4603      	mov	r3, r0
 80178bc:	b2db      	uxtb	r3, r3
 80178be:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80178c2:	b29b      	uxth	r3, r3
 80178c4:	4618      	mov	r0, r3
 80178c6:	f7fa fcc1 	bl	801224c <lwip_htons>
 80178ca:	4603      	mov	r3, r0
 80178cc:	b21b      	sxth	r3, r3
 80178ce:	4323      	orrs	r3, r4
 80178d0:	b21a      	sxth	r2, r3
 80178d2:	4b57      	ldr	r3, [pc, #348]	@ (8017a30 <tcp_receive+0x888>)
 80178d4:	68db      	ldr	r3, [r3, #12]
 80178d6:	b292      	uxth	r2, r2
 80178d8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80178de:	4b54      	ldr	r3, [pc, #336]	@ (8017a30 <tcp_receive+0x888>)
 80178e0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80178e2:	4b53      	ldr	r3, [pc, #332]	@ (8017a30 <tcp_receive+0x888>)
 80178e4:	68db      	ldr	r3, [r3, #12]
 80178e6:	899b      	ldrh	r3, [r3, #12]
 80178e8:	b29b      	uxth	r3, r3
 80178ea:	4618      	mov	r0, r3
 80178ec:	f7fa fcae 	bl	801224c <lwip_htons>
 80178f0:	4603      	mov	r3, r0
 80178f2:	b2db      	uxtb	r3, r3
 80178f4:	f003 0302 	and.w	r3, r3, #2
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d005      	beq.n	8017908 <tcp_receive+0x760>
            inseg.len -= 1;
 80178fc:	4b4c      	ldr	r3, [pc, #304]	@ (8017a30 <tcp_receive+0x888>)
 80178fe:	891b      	ldrh	r3, [r3, #8]
 8017900:	3b01      	subs	r3, #1
 8017902:	b29a      	uxth	r2, r3
 8017904:	4b4a      	ldr	r3, [pc, #296]	@ (8017a30 <tcp_receive+0x888>)
 8017906:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8017908:	4b49      	ldr	r3, [pc, #292]	@ (8017a30 <tcp_receive+0x888>)
 801790a:	685b      	ldr	r3, [r3, #4]
 801790c:	4a48      	ldr	r2, [pc, #288]	@ (8017a30 <tcp_receive+0x888>)
 801790e:	8912      	ldrh	r2, [r2, #8]
 8017910:	4611      	mov	r1, r2
 8017912:	4618      	mov	r0, r3
 8017914:	f7fb ff02 	bl	801371c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8017918:	4b45      	ldr	r3, [pc, #276]	@ (8017a30 <tcp_receive+0x888>)
 801791a:	891c      	ldrh	r4, [r3, #8]
 801791c:	4b44      	ldr	r3, [pc, #272]	@ (8017a30 <tcp_receive+0x888>)
 801791e:	68db      	ldr	r3, [r3, #12]
 8017920:	899b      	ldrh	r3, [r3, #12]
 8017922:	b29b      	uxth	r3, r3
 8017924:	4618      	mov	r0, r3
 8017926:	f7fa fc91 	bl	801224c <lwip_htons>
 801792a:	4603      	mov	r3, r0
 801792c:	b2db      	uxtb	r3, r3
 801792e:	f003 0303 	and.w	r3, r3, #3
 8017932:	2b00      	cmp	r3, #0
 8017934:	d001      	beq.n	801793a <tcp_receive+0x792>
 8017936:	2301      	movs	r3, #1
 8017938:	e000      	b.n	801793c <tcp_receive+0x794>
 801793a:	2300      	movs	r3, #0
 801793c:	4423      	add	r3, r4
 801793e:	b29a      	uxth	r2, r3
 8017940:	4b3c      	ldr	r3, [pc, #240]	@ (8017a34 <tcp_receive+0x88c>)
 8017942:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017944:	4b3b      	ldr	r3, [pc, #236]	@ (8017a34 <tcp_receive+0x88c>)
 8017946:	881b      	ldrh	r3, [r3, #0]
 8017948:	461a      	mov	r2, r3
 801794a:	4b38      	ldr	r3, [pc, #224]	@ (8017a2c <tcp_receive+0x884>)
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	441a      	add	r2, r3
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017954:	6879      	ldr	r1, [r7, #4]
 8017956:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017958:	440b      	add	r3, r1
 801795a:	429a      	cmp	r2, r3
 801795c:	d006      	beq.n	801796c <tcp_receive+0x7c4>
 801795e:	4b36      	ldr	r3, [pc, #216]	@ (8017a38 <tcp_receive+0x890>)
 8017960:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8017964:	4935      	ldr	r1, [pc, #212]	@ (8017a3c <tcp_receive+0x894>)
 8017966:	4836      	ldr	r0, [pc, #216]	@ (8017a40 <tcp_receive+0x898>)
 8017968:	f006 fbf0 	bl	801e14c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017970:	2b00      	cmp	r3, #0
 8017972:	f000 80e6 	beq.w	8017b42 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017976:	4b2e      	ldr	r3, [pc, #184]	@ (8017a30 <tcp_receive+0x888>)
 8017978:	68db      	ldr	r3, [r3, #12]
 801797a:	899b      	ldrh	r3, [r3, #12]
 801797c:	b29b      	uxth	r3, r3
 801797e:	4618      	mov	r0, r3
 8017980:	f7fa fc64 	bl	801224c <lwip_htons>
 8017984:	4603      	mov	r3, r0
 8017986:	b2db      	uxtb	r3, r3
 8017988:	f003 0301 	and.w	r3, r3, #1
 801798c:	2b00      	cmp	r3, #0
 801798e:	d010      	beq.n	80179b2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8017990:	e00a      	b.n	80179a8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017996:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801799c:	681a      	ldr	r2, [r3, #0]
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80179a2:	68f8      	ldr	r0, [r7, #12]
 80179a4:	f7fd fcc5 	bl	8015332 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d1f0      	bne.n	8017992 <tcp_receive+0x7ea>
 80179b0:	e0c7      	b.n	8017b42 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80179b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80179b8:	e051      	b.n	8017a5e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80179ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80179bc:	68db      	ldr	r3, [r3, #12]
 80179be:	899b      	ldrh	r3, [r3, #12]
 80179c0:	b29b      	uxth	r3, r3
 80179c2:	4618      	mov	r0, r3
 80179c4:	f7fa fc42 	bl	801224c <lwip_htons>
 80179c8:	4603      	mov	r3, r0
 80179ca:	b2db      	uxtb	r3, r3
 80179cc:	f003 0301 	and.w	r3, r3, #1
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d03c      	beq.n	8017a4e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80179d4:	4b16      	ldr	r3, [pc, #88]	@ (8017a30 <tcp_receive+0x888>)
 80179d6:	68db      	ldr	r3, [r3, #12]
 80179d8:	899b      	ldrh	r3, [r3, #12]
 80179da:	b29b      	uxth	r3, r3
 80179dc:	4618      	mov	r0, r3
 80179de:	f7fa fc35 	bl	801224c <lwip_htons>
 80179e2:	4603      	mov	r3, r0
 80179e4:	b2db      	uxtb	r3, r3
 80179e6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d12f      	bne.n	8017a4e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80179ee:	4b10      	ldr	r3, [pc, #64]	@ (8017a30 <tcp_receive+0x888>)
 80179f0:	68db      	ldr	r3, [r3, #12]
 80179f2:	899b      	ldrh	r3, [r3, #12]
 80179f4:	b29c      	uxth	r4, r3
 80179f6:	2001      	movs	r0, #1
 80179f8:	f7fa fc28 	bl	801224c <lwip_htons>
 80179fc:	4603      	mov	r3, r0
 80179fe:	461a      	mov	r2, r3
 8017a00:	4b0b      	ldr	r3, [pc, #44]	@ (8017a30 <tcp_receive+0x888>)
 8017a02:	68db      	ldr	r3, [r3, #12]
 8017a04:	4322      	orrs	r2, r4
 8017a06:	b292      	uxth	r2, r2
 8017a08:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8017a0a:	4b09      	ldr	r3, [pc, #36]	@ (8017a30 <tcp_receive+0x888>)
 8017a0c:	891c      	ldrh	r4, [r3, #8]
 8017a0e:	4b08      	ldr	r3, [pc, #32]	@ (8017a30 <tcp_receive+0x888>)
 8017a10:	68db      	ldr	r3, [r3, #12]
 8017a12:	899b      	ldrh	r3, [r3, #12]
 8017a14:	b29b      	uxth	r3, r3
 8017a16:	4618      	mov	r0, r3
 8017a18:	f7fa fc18 	bl	801224c <lwip_htons>
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	b2db      	uxtb	r3, r3
 8017a20:	f003 0303 	and.w	r3, r3, #3
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d00d      	beq.n	8017a44 <tcp_receive+0x89c>
 8017a28:	2301      	movs	r3, #1
 8017a2a:	e00c      	b.n	8017a46 <tcp_receive+0x89e>
 8017a2c:	2000e528 	.word	0x2000e528
 8017a30:	2000e508 	.word	0x2000e508
 8017a34:	2000e532 	.word	0x2000e532
 8017a38:	08021244 	.word	0x08021244
 8017a3c:	080215ec 	.word	0x080215ec
 8017a40:	08021290 	.word	0x08021290
 8017a44:	2300      	movs	r3, #0
 8017a46:	4423      	add	r3, r4
 8017a48:	b29a      	uxth	r2, r3
 8017a4a:	4b98      	ldr	r3, [pc, #608]	@ (8017cac <tcp_receive+0xb04>)
 8017a4c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8017a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a50:	613b      	str	r3, [r7, #16]
              next = next->next;
 8017a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8017a58:	6938      	ldr	r0, [r7, #16]
 8017a5a:	f7fd fc6a 	bl	8015332 <tcp_seg_free>
            while (next &&
 8017a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d00e      	beq.n	8017a82 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8017a64:	4b91      	ldr	r3, [pc, #580]	@ (8017cac <tcp_receive+0xb04>)
 8017a66:	881b      	ldrh	r3, [r3, #0]
 8017a68:	461a      	mov	r2, r3
 8017a6a:	4b91      	ldr	r3, [pc, #580]	@ (8017cb0 <tcp_receive+0xb08>)
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	441a      	add	r2, r3
 8017a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a72:	68db      	ldr	r3, [r3, #12]
 8017a74:	685b      	ldr	r3, [r3, #4]
 8017a76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017a78:	8909      	ldrh	r1, [r1, #8]
 8017a7a:	440b      	add	r3, r1
 8017a7c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	da9b      	bge.n	80179ba <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8017a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d059      	beq.n	8017b3c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8017a88:	4b88      	ldr	r3, [pc, #544]	@ (8017cac <tcp_receive+0xb04>)
 8017a8a:	881b      	ldrh	r3, [r3, #0]
 8017a8c:	461a      	mov	r2, r3
 8017a8e:	4b88      	ldr	r3, [pc, #544]	@ (8017cb0 <tcp_receive+0xb08>)
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	441a      	add	r2, r3
 8017a94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a96:	68db      	ldr	r3, [r3, #12]
 8017a98:	685b      	ldr	r3, [r3, #4]
 8017a9a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	dd4d      	ble.n	8017b3c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8017aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017aa2:	68db      	ldr	r3, [r3, #12]
 8017aa4:	685b      	ldr	r3, [r3, #4]
 8017aa6:	b29a      	uxth	r2, r3
 8017aa8:	4b81      	ldr	r3, [pc, #516]	@ (8017cb0 <tcp_receive+0xb08>)
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	b29b      	uxth	r3, r3
 8017aae:	1ad3      	subs	r3, r2, r3
 8017ab0:	b29a      	uxth	r2, r3
 8017ab2:	4b80      	ldr	r3, [pc, #512]	@ (8017cb4 <tcp_receive+0xb0c>)
 8017ab4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017ab6:	4b7f      	ldr	r3, [pc, #508]	@ (8017cb4 <tcp_receive+0xb0c>)
 8017ab8:	68db      	ldr	r3, [r3, #12]
 8017aba:	899b      	ldrh	r3, [r3, #12]
 8017abc:	b29b      	uxth	r3, r3
 8017abe:	4618      	mov	r0, r3
 8017ac0:	f7fa fbc4 	bl	801224c <lwip_htons>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	b2db      	uxtb	r3, r3
 8017ac8:	f003 0302 	and.w	r3, r3, #2
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d005      	beq.n	8017adc <tcp_receive+0x934>
                inseg.len -= 1;
 8017ad0:	4b78      	ldr	r3, [pc, #480]	@ (8017cb4 <tcp_receive+0xb0c>)
 8017ad2:	891b      	ldrh	r3, [r3, #8]
 8017ad4:	3b01      	subs	r3, #1
 8017ad6:	b29a      	uxth	r2, r3
 8017ad8:	4b76      	ldr	r3, [pc, #472]	@ (8017cb4 <tcp_receive+0xb0c>)
 8017ada:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8017adc:	4b75      	ldr	r3, [pc, #468]	@ (8017cb4 <tcp_receive+0xb0c>)
 8017ade:	685b      	ldr	r3, [r3, #4]
 8017ae0:	4a74      	ldr	r2, [pc, #464]	@ (8017cb4 <tcp_receive+0xb0c>)
 8017ae2:	8912      	ldrh	r2, [r2, #8]
 8017ae4:	4611      	mov	r1, r2
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	f7fb fe18 	bl	801371c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8017aec:	4b71      	ldr	r3, [pc, #452]	@ (8017cb4 <tcp_receive+0xb0c>)
 8017aee:	891c      	ldrh	r4, [r3, #8]
 8017af0:	4b70      	ldr	r3, [pc, #448]	@ (8017cb4 <tcp_receive+0xb0c>)
 8017af2:	68db      	ldr	r3, [r3, #12]
 8017af4:	899b      	ldrh	r3, [r3, #12]
 8017af6:	b29b      	uxth	r3, r3
 8017af8:	4618      	mov	r0, r3
 8017afa:	f7fa fba7 	bl	801224c <lwip_htons>
 8017afe:	4603      	mov	r3, r0
 8017b00:	b2db      	uxtb	r3, r3
 8017b02:	f003 0303 	and.w	r3, r3, #3
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d001      	beq.n	8017b0e <tcp_receive+0x966>
 8017b0a:	2301      	movs	r3, #1
 8017b0c:	e000      	b.n	8017b10 <tcp_receive+0x968>
 8017b0e:	2300      	movs	r3, #0
 8017b10:	4423      	add	r3, r4
 8017b12:	b29a      	uxth	r2, r3
 8017b14:	4b65      	ldr	r3, [pc, #404]	@ (8017cac <tcp_receive+0xb04>)
 8017b16:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8017b18:	4b64      	ldr	r3, [pc, #400]	@ (8017cac <tcp_receive+0xb04>)
 8017b1a:	881b      	ldrh	r3, [r3, #0]
 8017b1c:	461a      	mov	r2, r3
 8017b1e:	4b64      	ldr	r3, [pc, #400]	@ (8017cb0 <tcp_receive+0xb08>)
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	441a      	add	r2, r3
 8017b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017b26:	68db      	ldr	r3, [r3, #12]
 8017b28:	685b      	ldr	r3, [r3, #4]
 8017b2a:	429a      	cmp	r2, r3
 8017b2c:	d006      	beq.n	8017b3c <tcp_receive+0x994>
 8017b2e:	4b62      	ldr	r3, [pc, #392]	@ (8017cb8 <tcp_receive+0xb10>)
 8017b30:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8017b34:	4961      	ldr	r1, [pc, #388]	@ (8017cbc <tcp_receive+0xb14>)
 8017b36:	4862      	ldr	r0, [pc, #392]	@ (8017cc0 <tcp_receive+0xb18>)
 8017b38:	f006 fb08 	bl	801e14c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017b40:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8017b42:	4b5a      	ldr	r3, [pc, #360]	@ (8017cac <tcp_receive+0xb04>)
 8017b44:	881b      	ldrh	r3, [r3, #0]
 8017b46:	461a      	mov	r2, r3
 8017b48:	4b59      	ldr	r3, [pc, #356]	@ (8017cb0 <tcp_receive+0xb08>)
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	441a      	add	r2, r3
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017b56:	4b55      	ldr	r3, [pc, #340]	@ (8017cac <tcp_receive+0xb04>)
 8017b58:	881b      	ldrh	r3, [r3, #0]
 8017b5a:	429a      	cmp	r2, r3
 8017b5c:	d206      	bcs.n	8017b6c <tcp_receive+0x9c4>
 8017b5e:	4b56      	ldr	r3, [pc, #344]	@ (8017cb8 <tcp_receive+0xb10>)
 8017b60:	f240 6207 	movw	r2, #1543	@ 0x607
 8017b64:	4957      	ldr	r1, [pc, #348]	@ (8017cc4 <tcp_receive+0xb1c>)
 8017b66:	4856      	ldr	r0, [pc, #344]	@ (8017cc0 <tcp_receive+0xb18>)
 8017b68:	f006 faf0 	bl	801e14c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017b70:	4b4e      	ldr	r3, [pc, #312]	@ (8017cac <tcp_receive+0xb04>)
 8017b72:	881b      	ldrh	r3, [r3, #0]
 8017b74:	1ad3      	subs	r3, r2, r3
 8017b76:	b29a      	uxth	r2, r3
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8017b7c:	6878      	ldr	r0, [r7, #4]
 8017b7e:	f7fc feb1 	bl	80148e4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8017b82:	4b4c      	ldr	r3, [pc, #304]	@ (8017cb4 <tcp_receive+0xb0c>)
 8017b84:	685b      	ldr	r3, [r3, #4]
 8017b86:	891b      	ldrh	r3, [r3, #8]
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d006      	beq.n	8017b9a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8017b8c:	4b49      	ldr	r3, [pc, #292]	@ (8017cb4 <tcp_receive+0xb0c>)
 8017b8e:	685b      	ldr	r3, [r3, #4]
 8017b90:	4a4d      	ldr	r2, [pc, #308]	@ (8017cc8 <tcp_receive+0xb20>)
 8017b92:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8017b94:	4b47      	ldr	r3, [pc, #284]	@ (8017cb4 <tcp_receive+0xb0c>)
 8017b96:	2200      	movs	r2, #0
 8017b98:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017b9a:	4b46      	ldr	r3, [pc, #280]	@ (8017cb4 <tcp_receive+0xb0c>)
 8017b9c:	68db      	ldr	r3, [r3, #12]
 8017b9e:	899b      	ldrh	r3, [r3, #12]
 8017ba0:	b29b      	uxth	r3, r3
 8017ba2:	4618      	mov	r0, r3
 8017ba4:	f7fa fb52 	bl	801224c <lwip_htons>
 8017ba8:	4603      	mov	r3, r0
 8017baa:	b2db      	uxtb	r3, r3
 8017bac:	f003 0301 	and.w	r3, r3, #1
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	f000 80b8 	beq.w	8017d26 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8017bb6:	4b45      	ldr	r3, [pc, #276]	@ (8017ccc <tcp_receive+0xb24>)
 8017bb8:	781b      	ldrb	r3, [r3, #0]
 8017bba:	f043 0320 	orr.w	r3, r3, #32
 8017bbe:	b2da      	uxtb	r2, r3
 8017bc0:	4b42      	ldr	r3, [pc, #264]	@ (8017ccc <tcp_receive+0xb24>)
 8017bc2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8017bc4:	e0af      	b.n	8017d26 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017bca:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017bd0:	68db      	ldr	r3, [r3, #12]
 8017bd2:	685b      	ldr	r3, [r3, #4]
 8017bd4:	4a36      	ldr	r2, [pc, #216]	@ (8017cb0 <tcp_receive+0xb08>)
 8017bd6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8017bd8:	68bb      	ldr	r3, [r7, #8]
 8017bda:	891b      	ldrh	r3, [r3, #8]
 8017bdc:	461c      	mov	r4, r3
 8017bde:	68bb      	ldr	r3, [r7, #8]
 8017be0:	68db      	ldr	r3, [r3, #12]
 8017be2:	899b      	ldrh	r3, [r3, #12]
 8017be4:	b29b      	uxth	r3, r3
 8017be6:	4618      	mov	r0, r3
 8017be8:	f7fa fb30 	bl	801224c <lwip_htons>
 8017bec:	4603      	mov	r3, r0
 8017bee:	b2db      	uxtb	r3, r3
 8017bf0:	f003 0303 	and.w	r3, r3, #3
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d001      	beq.n	8017bfc <tcp_receive+0xa54>
 8017bf8:	2301      	movs	r3, #1
 8017bfa:	e000      	b.n	8017bfe <tcp_receive+0xa56>
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	191a      	adds	r2, r3, r4
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c04:	441a      	add	r2, r3
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017c0e:	461c      	mov	r4, r3
 8017c10:	68bb      	ldr	r3, [r7, #8]
 8017c12:	891b      	ldrh	r3, [r3, #8]
 8017c14:	461d      	mov	r5, r3
 8017c16:	68bb      	ldr	r3, [r7, #8]
 8017c18:	68db      	ldr	r3, [r3, #12]
 8017c1a:	899b      	ldrh	r3, [r3, #12]
 8017c1c:	b29b      	uxth	r3, r3
 8017c1e:	4618      	mov	r0, r3
 8017c20:	f7fa fb14 	bl	801224c <lwip_htons>
 8017c24:	4603      	mov	r3, r0
 8017c26:	b2db      	uxtb	r3, r3
 8017c28:	f003 0303 	and.w	r3, r3, #3
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d001      	beq.n	8017c34 <tcp_receive+0xa8c>
 8017c30:	2301      	movs	r3, #1
 8017c32:	e000      	b.n	8017c36 <tcp_receive+0xa8e>
 8017c34:	2300      	movs	r3, #0
 8017c36:	442b      	add	r3, r5
 8017c38:	429c      	cmp	r4, r3
 8017c3a:	d206      	bcs.n	8017c4a <tcp_receive+0xaa2>
 8017c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8017cb8 <tcp_receive+0xb10>)
 8017c3e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8017c42:	4923      	ldr	r1, [pc, #140]	@ (8017cd0 <tcp_receive+0xb28>)
 8017c44:	481e      	ldr	r0, [pc, #120]	@ (8017cc0 <tcp_receive+0xb18>)
 8017c46:	f006 fa81 	bl	801e14c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8017c4a:	68bb      	ldr	r3, [r7, #8]
 8017c4c:	891b      	ldrh	r3, [r3, #8]
 8017c4e:	461c      	mov	r4, r3
 8017c50:	68bb      	ldr	r3, [r7, #8]
 8017c52:	68db      	ldr	r3, [r3, #12]
 8017c54:	899b      	ldrh	r3, [r3, #12]
 8017c56:	b29b      	uxth	r3, r3
 8017c58:	4618      	mov	r0, r3
 8017c5a:	f7fa faf7 	bl	801224c <lwip_htons>
 8017c5e:	4603      	mov	r3, r0
 8017c60:	b2db      	uxtb	r3, r3
 8017c62:	f003 0303 	and.w	r3, r3, #3
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d001      	beq.n	8017c6e <tcp_receive+0xac6>
 8017c6a:	2301      	movs	r3, #1
 8017c6c:	e000      	b.n	8017c70 <tcp_receive+0xac8>
 8017c6e:	2300      	movs	r3, #0
 8017c70:	1919      	adds	r1, r3, r4
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017c76:	b28b      	uxth	r3, r1
 8017c78:	1ad3      	subs	r3, r2, r3
 8017c7a:	b29a      	uxth	r2, r3
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8017c80:	6878      	ldr	r0, [r7, #4]
 8017c82:	f7fc fe2f 	bl	80148e4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8017c86:	68bb      	ldr	r3, [r7, #8]
 8017c88:	685b      	ldr	r3, [r3, #4]
 8017c8a:	891b      	ldrh	r3, [r3, #8]
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d028      	beq.n	8017ce2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8017c90:	4b0d      	ldr	r3, [pc, #52]	@ (8017cc8 <tcp_receive+0xb20>)
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d01d      	beq.n	8017cd4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8017c98:	4b0b      	ldr	r3, [pc, #44]	@ (8017cc8 <tcp_receive+0xb20>)
 8017c9a:	681a      	ldr	r2, [r3, #0]
 8017c9c:	68bb      	ldr	r3, [r7, #8]
 8017c9e:	685b      	ldr	r3, [r3, #4]
 8017ca0:	4619      	mov	r1, r3
 8017ca2:	4610      	mov	r0, r2
 8017ca4:	f7fb ff8e 	bl	8013bc4 <pbuf_cat>
 8017ca8:	e018      	b.n	8017cdc <tcp_receive+0xb34>
 8017caa:	bf00      	nop
 8017cac:	2000e532 	.word	0x2000e532
 8017cb0:	2000e528 	.word	0x2000e528
 8017cb4:	2000e508 	.word	0x2000e508
 8017cb8:	08021244 	.word	0x08021244
 8017cbc:	08021624 	.word	0x08021624
 8017cc0:	08021290 	.word	0x08021290
 8017cc4:	08021660 	.word	0x08021660
 8017cc8:	2000e538 	.word	0x2000e538
 8017ccc:	2000e535 	.word	0x2000e535
 8017cd0:	08021680 	.word	0x08021680
            } else {
              recv_data = cseg->p;
 8017cd4:	68bb      	ldr	r3, [r7, #8]
 8017cd6:	685b      	ldr	r3, [r3, #4]
 8017cd8:	4a70      	ldr	r2, [pc, #448]	@ (8017e9c <tcp_receive+0xcf4>)
 8017cda:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8017cdc:	68bb      	ldr	r3, [r7, #8]
 8017cde:	2200      	movs	r2, #0
 8017ce0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017ce2:	68bb      	ldr	r3, [r7, #8]
 8017ce4:	68db      	ldr	r3, [r3, #12]
 8017ce6:	899b      	ldrh	r3, [r3, #12]
 8017ce8:	b29b      	uxth	r3, r3
 8017cea:	4618      	mov	r0, r3
 8017cec:	f7fa faae 	bl	801224c <lwip_htons>
 8017cf0:	4603      	mov	r3, r0
 8017cf2:	b2db      	uxtb	r3, r3
 8017cf4:	f003 0301 	and.w	r3, r3, #1
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d00d      	beq.n	8017d18 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8017cfc:	4b68      	ldr	r3, [pc, #416]	@ (8017ea0 <tcp_receive+0xcf8>)
 8017cfe:	781b      	ldrb	r3, [r3, #0]
 8017d00:	f043 0320 	orr.w	r3, r3, #32
 8017d04:	b2da      	uxtb	r2, r3
 8017d06:	4b66      	ldr	r3, [pc, #408]	@ (8017ea0 <tcp_receive+0xcf8>)
 8017d08:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	7d1b      	ldrb	r3, [r3, #20]
 8017d0e:	2b04      	cmp	r3, #4
 8017d10:	d102      	bne.n	8017d18 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	2207      	movs	r2, #7
 8017d16:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8017d18:	68bb      	ldr	r3, [r7, #8]
 8017d1a:	681a      	ldr	r2, [r3, #0]
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8017d20:	68b8      	ldr	r0, [r7, #8]
 8017d22:	f7fd fb06 	bl	8015332 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d008      	beq.n	8017d40 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017d32:	68db      	ldr	r3, [r3, #12]
 8017d34:	685a      	ldr	r2, [r3, #4]
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8017d3a:	429a      	cmp	r2, r3
 8017d3c:	f43f af43 	beq.w	8017bc6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	8b5b      	ldrh	r3, [r3, #26]
 8017d44:	f003 0301 	and.w	r3, r3, #1
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d00e      	beq.n	8017d6a <tcp_receive+0xbc2>
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	8b5b      	ldrh	r3, [r3, #26]
 8017d50:	f023 0301 	bic.w	r3, r3, #1
 8017d54:	b29a      	uxth	r2, r3
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	835a      	strh	r2, [r3, #26]
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	8b5b      	ldrh	r3, [r3, #26]
 8017d5e:	f043 0302 	orr.w	r3, r3, #2
 8017d62:	b29a      	uxth	r2, r3
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017d68:	e187      	b.n	801807a <tcp_receive+0xed2>
        tcp_ack(pcb);
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	8b5b      	ldrh	r3, [r3, #26]
 8017d6e:	f043 0301 	orr.w	r3, r3, #1
 8017d72:	b29a      	uxth	r2, r3
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017d78:	e17f      	b.n	801807a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d106      	bne.n	8017d90 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8017d82:	4848      	ldr	r0, [pc, #288]	@ (8017ea4 <tcp_receive+0xcfc>)
 8017d84:	f7fd faee 	bl	8015364 <tcp_seg_copy>
 8017d88:	4602      	mov	r2, r0
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	675a      	str	r2, [r3, #116]	@ 0x74
 8017d8e:	e16c      	b.n	801806a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8017d90:	2300      	movs	r3, #0
 8017d92:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017d98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017d9a:	e156      	b.n	801804a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8017d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d9e:	68db      	ldr	r3, [r3, #12]
 8017da0:	685a      	ldr	r2, [r3, #4]
 8017da2:	4b41      	ldr	r3, [pc, #260]	@ (8017ea8 <tcp_receive+0xd00>)
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	429a      	cmp	r2, r3
 8017da8:	d11d      	bne.n	8017de6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8017daa:	4b3e      	ldr	r3, [pc, #248]	@ (8017ea4 <tcp_receive+0xcfc>)
 8017dac:	891a      	ldrh	r2, [r3, #8]
 8017dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017db0:	891b      	ldrh	r3, [r3, #8]
 8017db2:	429a      	cmp	r2, r3
 8017db4:	f240 814e 	bls.w	8018054 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017db8:	483a      	ldr	r0, [pc, #232]	@ (8017ea4 <tcp_receive+0xcfc>)
 8017dba:	f7fd fad3 	bl	8015364 <tcp_seg_copy>
 8017dbe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8017dc0:	697b      	ldr	r3, [r7, #20]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	f000 8148 	beq.w	8018058 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8017dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d003      	beq.n	8017dd6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8017dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017dd0:	697a      	ldr	r2, [r7, #20]
 8017dd2:	601a      	str	r2, [r3, #0]
 8017dd4:	e002      	b.n	8017ddc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	697a      	ldr	r2, [r7, #20]
 8017dda:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8017ddc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017dde:	6978      	ldr	r0, [r7, #20]
 8017de0:	f7ff f8de 	bl	8016fa0 <tcp_oos_insert_segment>
                }
                break;
 8017de4:	e138      	b.n	8018058 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8017de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d117      	bne.n	8017e1c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8017dec:	4b2e      	ldr	r3, [pc, #184]	@ (8017ea8 <tcp_receive+0xd00>)
 8017dee:	681a      	ldr	r2, [r3, #0]
 8017df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017df2:	68db      	ldr	r3, [r3, #12]
 8017df4:	685b      	ldr	r3, [r3, #4]
 8017df6:	1ad3      	subs	r3, r2, r3
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	da57      	bge.n	8017eac <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017dfc:	4829      	ldr	r0, [pc, #164]	@ (8017ea4 <tcp_receive+0xcfc>)
 8017dfe:	f7fd fab1 	bl	8015364 <tcp_seg_copy>
 8017e02:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8017e04:	69bb      	ldr	r3, [r7, #24]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	f000 8128 	beq.w	801805c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	69ba      	ldr	r2, [r7, #24]
 8017e10:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8017e12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017e14:	69b8      	ldr	r0, [r7, #24]
 8017e16:	f7ff f8c3 	bl	8016fa0 <tcp_oos_insert_segment>
                  }
                  break;
 8017e1a:	e11f      	b.n	801805c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8017e1c:	4b22      	ldr	r3, [pc, #136]	@ (8017ea8 <tcp_receive+0xd00>)
 8017e1e:	681a      	ldr	r2, [r3, #0]
 8017e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e22:	68db      	ldr	r3, [r3, #12]
 8017e24:	685b      	ldr	r3, [r3, #4]
 8017e26:	1ad3      	subs	r3, r2, r3
 8017e28:	3b01      	subs	r3, #1
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	db3e      	blt.n	8017eac <tcp_receive+0xd04>
 8017e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8017ea8 <tcp_receive+0xd00>)
 8017e30:	681a      	ldr	r2, [r3, #0]
 8017e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e34:	68db      	ldr	r3, [r3, #12]
 8017e36:	685b      	ldr	r3, [r3, #4]
 8017e38:	1ad3      	subs	r3, r2, r3
 8017e3a:	3301      	adds	r3, #1
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	dc35      	bgt.n	8017eac <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017e40:	4818      	ldr	r0, [pc, #96]	@ (8017ea4 <tcp_receive+0xcfc>)
 8017e42:	f7fd fa8f 	bl	8015364 <tcp_seg_copy>
 8017e46:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8017e48:	69fb      	ldr	r3, [r7, #28]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	f000 8108 	beq.w	8018060 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8017e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e52:	68db      	ldr	r3, [r3, #12]
 8017e54:	685b      	ldr	r3, [r3, #4]
 8017e56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017e58:	8912      	ldrh	r2, [r2, #8]
 8017e5a:	441a      	add	r2, r3
 8017e5c:	4b12      	ldr	r3, [pc, #72]	@ (8017ea8 <tcp_receive+0xd00>)
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	1ad3      	subs	r3, r2, r3
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	dd12      	ble.n	8017e8c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8017e66:	4b10      	ldr	r3, [pc, #64]	@ (8017ea8 <tcp_receive+0xd00>)
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	b29a      	uxth	r2, r3
 8017e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e6e:	68db      	ldr	r3, [r3, #12]
 8017e70:	685b      	ldr	r3, [r3, #4]
 8017e72:	b29b      	uxth	r3, r3
 8017e74:	1ad3      	subs	r3, r2, r3
 8017e76:	b29a      	uxth	r2, r3
 8017e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e7a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8017e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e7e:	685a      	ldr	r2, [r3, #4]
 8017e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e82:	891b      	ldrh	r3, [r3, #8]
 8017e84:	4619      	mov	r1, r3
 8017e86:	4610      	mov	r0, r2
 8017e88:	f7fb fc48 	bl	801371c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8017e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e8e:	69fa      	ldr	r2, [r7, #28]
 8017e90:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8017e92:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017e94:	69f8      	ldr	r0, [r7, #28]
 8017e96:	f7ff f883 	bl	8016fa0 <tcp_oos_insert_segment>
                  }
                  break;
 8017e9a:	e0e1      	b.n	8018060 <tcp_receive+0xeb8>
 8017e9c:	2000e538 	.word	0x2000e538
 8017ea0:	2000e535 	.word	0x2000e535
 8017ea4:	2000e508 	.word	0x2000e508
 8017ea8:	2000e528 	.word	0x2000e528
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8017eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017eae:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8017eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	f040 80c5 	bne.w	8018044 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8017eba:	4b7f      	ldr	r3, [pc, #508]	@ (80180b8 <tcp_receive+0xf10>)
 8017ebc:	681a      	ldr	r2, [r3, #0]
 8017ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ec0:	68db      	ldr	r3, [r3, #12]
 8017ec2:	685b      	ldr	r3, [r3, #4]
 8017ec4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	f340 80bc 	ble.w	8018044 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ece:	68db      	ldr	r3, [r3, #12]
 8017ed0:	899b      	ldrh	r3, [r3, #12]
 8017ed2:	b29b      	uxth	r3, r3
 8017ed4:	4618      	mov	r0, r3
 8017ed6:	f7fa f9b9 	bl	801224c <lwip_htons>
 8017eda:	4603      	mov	r3, r0
 8017edc:	b2db      	uxtb	r3, r3
 8017ede:	f003 0301 	and.w	r3, r3, #1
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	f040 80be 	bne.w	8018064 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8017ee8:	4874      	ldr	r0, [pc, #464]	@ (80180bc <tcp_receive+0xf14>)
 8017eea:	f7fd fa3b 	bl	8015364 <tcp_seg_copy>
 8017eee:	4602      	mov	r2, r0
 8017ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ef2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8017ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	f000 80b5 	beq.w	8018068 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8017efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f00:	68db      	ldr	r3, [r3, #12]
 8017f02:	685b      	ldr	r3, [r3, #4]
 8017f04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017f06:	8912      	ldrh	r2, [r2, #8]
 8017f08:	441a      	add	r2, r3
 8017f0a:	4b6b      	ldr	r3, [pc, #428]	@ (80180b8 <tcp_receive+0xf10>)
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	1ad3      	subs	r3, r2, r3
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	dd12      	ble.n	8017f3a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8017f14:	4b68      	ldr	r3, [pc, #416]	@ (80180b8 <tcp_receive+0xf10>)
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	b29a      	uxth	r2, r3
 8017f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f1c:	68db      	ldr	r3, [r3, #12]
 8017f1e:	685b      	ldr	r3, [r3, #4]
 8017f20:	b29b      	uxth	r3, r3
 8017f22:	1ad3      	subs	r3, r2, r3
 8017f24:	b29a      	uxth	r2, r3
 8017f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f28:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8017f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f2c:	685a      	ldr	r2, [r3, #4]
 8017f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f30:	891b      	ldrh	r3, [r3, #8]
 8017f32:	4619      	mov	r1, r3
 8017f34:	4610      	mov	r0, r2
 8017f36:	f7fb fbf1 	bl	801371c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8017f3a:	4b61      	ldr	r3, [pc, #388]	@ (80180c0 <tcp_receive+0xf18>)
 8017f3c:	881b      	ldrh	r3, [r3, #0]
 8017f3e:	461a      	mov	r2, r3
 8017f40:	4b5d      	ldr	r3, [pc, #372]	@ (80180b8 <tcp_receive+0xf10>)
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	441a      	add	r2, r3
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017f4a:	6879      	ldr	r1, [r7, #4]
 8017f4c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017f4e:	440b      	add	r3, r1
 8017f50:	1ad3      	subs	r3, r2, r3
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	f340 8088 	ble.w	8018068 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8017f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	68db      	ldr	r3, [r3, #12]
 8017f5e:	899b      	ldrh	r3, [r3, #12]
 8017f60:	b29b      	uxth	r3, r3
 8017f62:	4618      	mov	r0, r3
 8017f64:	f7fa f972 	bl	801224c <lwip_htons>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	b2db      	uxtb	r3, r3
 8017f6c:	f003 0301 	and.w	r3, r3, #1
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d021      	beq.n	8017fb8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8017f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	68db      	ldr	r3, [r3, #12]
 8017f7a:	899b      	ldrh	r3, [r3, #12]
 8017f7c:	b29b      	uxth	r3, r3
 8017f7e:	b21b      	sxth	r3, r3
 8017f80:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017f84:	b21c      	sxth	r4, r3
 8017f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	68db      	ldr	r3, [r3, #12]
 8017f8c:	899b      	ldrh	r3, [r3, #12]
 8017f8e:	b29b      	uxth	r3, r3
 8017f90:	4618      	mov	r0, r3
 8017f92:	f7fa f95b 	bl	801224c <lwip_htons>
 8017f96:	4603      	mov	r3, r0
 8017f98:	b2db      	uxtb	r3, r3
 8017f9a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8017f9e:	b29b      	uxth	r3, r3
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	f7fa f953 	bl	801224c <lwip_htons>
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	b21b      	sxth	r3, r3
 8017faa:	4323      	orrs	r3, r4
 8017fac:	b21a      	sxth	r2, r3
 8017fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	68db      	ldr	r3, [r3, #12]
 8017fb4:	b292      	uxth	r2, r2
 8017fb6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017fbc:	b29a      	uxth	r2, r3
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017fc2:	4413      	add	r3, r2
 8017fc4:	b299      	uxth	r1, r3
 8017fc6:	4b3c      	ldr	r3, [pc, #240]	@ (80180b8 <tcp_receive+0xf10>)
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	b29a      	uxth	r2, r3
 8017fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	1a8a      	subs	r2, r1, r2
 8017fd2:	b292      	uxth	r2, r2
 8017fd4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8017fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	685a      	ldr	r2, [r3, #4]
 8017fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	891b      	ldrh	r3, [r3, #8]
 8017fe2:	4619      	mov	r1, r3
 8017fe4:	4610      	mov	r0, r2
 8017fe6:	f7fb fb99 	bl	801371c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8017fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	891c      	ldrh	r4, [r3, #8]
 8017ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	68db      	ldr	r3, [r3, #12]
 8017ff6:	899b      	ldrh	r3, [r3, #12]
 8017ff8:	b29b      	uxth	r3, r3
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	f7fa f926 	bl	801224c <lwip_htons>
 8018000:	4603      	mov	r3, r0
 8018002:	b2db      	uxtb	r3, r3
 8018004:	f003 0303 	and.w	r3, r3, #3
 8018008:	2b00      	cmp	r3, #0
 801800a:	d001      	beq.n	8018010 <tcp_receive+0xe68>
 801800c:	2301      	movs	r3, #1
 801800e:	e000      	b.n	8018012 <tcp_receive+0xe6a>
 8018010:	2300      	movs	r3, #0
 8018012:	4423      	add	r3, r4
 8018014:	b29a      	uxth	r2, r3
 8018016:	4b2a      	ldr	r3, [pc, #168]	@ (80180c0 <tcp_receive+0xf18>)
 8018018:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801801a:	4b29      	ldr	r3, [pc, #164]	@ (80180c0 <tcp_receive+0xf18>)
 801801c:	881b      	ldrh	r3, [r3, #0]
 801801e:	461a      	mov	r2, r3
 8018020:	4b25      	ldr	r3, [pc, #148]	@ (80180b8 <tcp_receive+0xf10>)
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	441a      	add	r2, r3
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801802a:	6879      	ldr	r1, [r7, #4]
 801802c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801802e:	440b      	add	r3, r1
 8018030:	429a      	cmp	r2, r3
 8018032:	d019      	beq.n	8018068 <tcp_receive+0xec0>
 8018034:	4b23      	ldr	r3, [pc, #140]	@ (80180c4 <tcp_receive+0xf1c>)
 8018036:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801803a:	4923      	ldr	r1, [pc, #140]	@ (80180c8 <tcp_receive+0xf20>)
 801803c:	4823      	ldr	r0, [pc, #140]	@ (80180cc <tcp_receive+0xf24>)
 801803e:	f006 f885 	bl	801e14c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8018042:	e011      	b.n	8018068 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	63bb      	str	r3, [r7, #56]	@ 0x38
 801804a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801804c:	2b00      	cmp	r3, #0
 801804e:	f47f aea5 	bne.w	8017d9c <tcp_receive+0xbf4>
 8018052:	e00a      	b.n	801806a <tcp_receive+0xec2>
                break;
 8018054:	bf00      	nop
 8018056:	e008      	b.n	801806a <tcp_receive+0xec2>
                break;
 8018058:	bf00      	nop
 801805a:	e006      	b.n	801806a <tcp_receive+0xec2>
                  break;
 801805c:	bf00      	nop
 801805e:	e004      	b.n	801806a <tcp_receive+0xec2>
                  break;
 8018060:	bf00      	nop
 8018062:	e002      	b.n	801806a <tcp_receive+0xec2>
                  break;
 8018064:	bf00      	nop
 8018066:	e000      	b.n	801806a <tcp_receive+0xec2>
                break;
 8018068:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801806a:	6878      	ldr	r0, [r7, #4]
 801806c:	f001 fe88 	bl	8019d80 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8018070:	e003      	b.n	801807a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8018072:	6878      	ldr	r0, [r7, #4]
 8018074:	f001 fe84 	bl	8019d80 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018078:	e01a      	b.n	80180b0 <tcp_receive+0xf08>
 801807a:	e019      	b.n	80180b0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801807c:	4b0e      	ldr	r3, [pc, #56]	@ (80180b8 <tcp_receive+0xf10>)
 801807e:	681a      	ldr	r2, [r3, #0]
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018084:	1ad3      	subs	r3, r2, r3
 8018086:	2b00      	cmp	r3, #0
 8018088:	db0a      	blt.n	80180a0 <tcp_receive+0xef8>
 801808a:	4b0b      	ldr	r3, [pc, #44]	@ (80180b8 <tcp_receive+0xf10>)
 801808c:	681a      	ldr	r2, [r3, #0]
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018092:	6879      	ldr	r1, [r7, #4]
 8018094:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018096:	440b      	add	r3, r1
 8018098:	1ad3      	subs	r3, r2, r3
 801809a:	3301      	adds	r3, #1
 801809c:	2b00      	cmp	r3, #0
 801809e:	dd07      	ble.n	80180b0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	8b5b      	ldrh	r3, [r3, #26]
 80180a4:	f043 0302 	orr.w	r3, r3, #2
 80180a8:	b29a      	uxth	r2, r3
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80180ae:	e7ff      	b.n	80180b0 <tcp_receive+0xf08>
 80180b0:	bf00      	nop
 80180b2:	3750      	adds	r7, #80	@ 0x50
 80180b4:	46bd      	mov	sp, r7
 80180b6:	bdb0      	pop	{r4, r5, r7, pc}
 80180b8:	2000e528 	.word	0x2000e528
 80180bc:	2000e508 	.word	0x2000e508
 80180c0:	2000e532 	.word	0x2000e532
 80180c4:	08021244 	.word	0x08021244
 80180c8:	080215ec 	.word	0x080215ec
 80180cc:	08021290 	.word	0x08021290

080180d0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80180d0:	b480      	push	{r7}
 80180d2:	b083      	sub	sp, #12
 80180d4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80180d6:	4b15      	ldr	r3, [pc, #84]	@ (801812c <tcp_get_next_optbyte+0x5c>)
 80180d8:	881b      	ldrh	r3, [r3, #0]
 80180da:	1c5a      	adds	r2, r3, #1
 80180dc:	b291      	uxth	r1, r2
 80180de:	4a13      	ldr	r2, [pc, #76]	@ (801812c <tcp_get_next_optbyte+0x5c>)
 80180e0:	8011      	strh	r1, [r2, #0]
 80180e2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80180e4:	4b12      	ldr	r3, [pc, #72]	@ (8018130 <tcp_get_next_optbyte+0x60>)
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d004      	beq.n	80180f6 <tcp_get_next_optbyte+0x26>
 80180ec:	4b11      	ldr	r3, [pc, #68]	@ (8018134 <tcp_get_next_optbyte+0x64>)
 80180ee:	881b      	ldrh	r3, [r3, #0]
 80180f0:	88fa      	ldrh	r2, [r7, #6]
 80180f2:	429a      	cmp	r2, r3
 80180f4:	d208      	bcs.n	8018108 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80180f6:	4b10      	ldr	r3, [pc, #64]	@ (8018138 <tcp_get_next_optbyte+0x68>)
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	3314      	adds	r3, #20
 80180fc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80180fe:	88fb      	ldrh	r3, [r7, #6]
 8018100:	683a      	ldr	r2, [r7, #0]
 8018102:	4413      	add	r3, r2
 8018104:	781b      	ldrb	r3, [r3, #0]
 8018106:	e00b      	b.n	8018120 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018108:	88fb      	ldrh	r3, [r7, #6]
 801810a:	b2da      	uxtb	r2, r3
 801810c:	4b09      	ldr	r3, [pc, #36]	@ (8018134 <tcp_get_next_optbyte+0x64>)
 801810e:	881b      	ldrh	r3, [r3, #0]
 8018110:	b2db      	uxtb	r3, r3
 8018112:	1ad3      	subs	r3, r2, r3
 8018114:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018116:	4b06      	ldr	r3, [pc, #24]	@ (8018130 <tcp_get_next_optbyte+0x60>)
 8018118:	681a      	ldr	r2, [r3, #0]
 801811a:	797b      	ldrb	r3, [r7, #5]
 801811c:	4413      	add	r3, r2
 801811e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018120:	4618      	mov	r0, r3
 8018122:	370c      	adds	r7, #12
 8018124:	46bd      	mov	sp, r7
 8018126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801812a:	4770      	bx	lr
 801812c:	2000e524 	.word	0x2000e524
 8018130:	2000e520 	.word	0x2000e520
 8018134:	2000e51e 	.word	0x2000e51e
 8018138:	2000e518 	.word	0x2000e518

0801813c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801813c:	b580      	push	{r7, lr}
 801813e:	b084      	sub	sp, #16
 8018140:	af00      	add	r7, sp, #0
 8018142:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d106      	bne.n	8018158 <tcp_parseopt+0x1c>
 801814a:	4b32      	ldr	r3, [pc, #200]	@ (8018214 <tcp_parseopt+0xd8>)
 801814c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8018150:	4931      	ldr	r1, [pc, #196]	@ (8018218 <tcp_parseopt+0xdc>)
 8018152:	4832      	ldr	r0, [pc, #200]	@ (801821c <tcp_parseopt+0xe0>)
 8018154:	f005 fffa 	bl	801e14c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018158:	4b31      	ldr	r3, [pc, #196]	@ (8018220 <tcp_parseopt+0xe4>)
 801815a:	881b      	ldrh	r3, [r3, #0]
 801815c:	2b00      	cmp	r3, #0
 801815e:	d056      	beq.n	801820e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018160:	4b30      	ldr	r3, [pc, #192]	@ (8018224 <tcp_parseopt+0xe8>)
 8018162:	2200      	movs	r2, #0
 8018164:	801a      	strh	r2, [r3, #0]
 8018166:	e046      	b.n	80181f6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8018168:	f7ff ffb2 	bl	80180d0 <tcp_get_next_optbyte>
 801816c:	4603      	mov	r3, r0
 801816e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8018170:	7bfb      	ldrb	r3, [r7, #15]
 8018172:	2b02      	cmp	r3, #2
 8018174:	d006      	beq.n	8018184 <tcp_parseopt+0x48>
 8018176:	2b02      	cmp	r3, #2
 8018178:	dc2a      	bgt.n	80181d0 <tcp_parseopt+0x94>
 801817a:	2b00      	cmp	r3, #0
 801817c:	d042      	beq.n	8018204 <tcp_parseopt+0xc8>
 801817e:	2b01      	cmp	r3, #1
 8018180:	d038      	beq.n	80181f4 <tcp_parseopt+0xb8>
 8018182:	e025      	b.n	80181d0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018184:	f7ff ffa4 	bl	80180d0 <tcp_get_next_optbyte>
 8018188:	4603      	mov	r3, r0
 801818a:	2b04      	cmp	r3, #4
 801818c:	d13c      	bne.n	8018208 <tcp_parseopt+0xcc>
 801818e:	4b25      	ldr	r3, [pc, #148]	@ (8018224 <tcp_parseopt+0xe8>)
 8018190:	881b      	ldrh	r3, [r3, #0]
 8018192:	3301      	adds	r3, #1
 8018194:	4a22      	ldr	r2, [pc, #136]	@ (8018220 <tcp_parseopt+0xe4>)
 8018196:	8812      	ldrh	r2, [r2, #0]
 8018198:	4293      	cmp	r3, r2
 801819a:	da35      	bge.n	8018208 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801819c:	f7ff ff98 	bl	80180d0 <tcp_get_next_optbyte>
 80181a0:	4603      	mov	r3, r0
 80181a2:	021b      	lsls	r3, r3, #8
 80181a4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80181a6:	f7ff ff93 	bl	80180d0 <tcp_get_next_optbyte>
 80181aa:	4603      	mov	r3, r0
 80181ac:	461a      	mov	r2, r3
 80181ae:	89bb      	ldrh	r3, [r7, #12]
 80181b0:	4313      	orrs	r3, r2
 80181b2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80181b4:	89bb      	ldrh	r3, [r7, #12]
 80181b6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80181ba:	d804      	bhi.n	80181c6 <tcp_parseopt+0x8a>
 80181bc:	89bb      	ldrh	r3, [r7, #12]
 80181be:	2b00      	cmp	r3, #0
 80181c0:	d001      	beq.n	80181c6 <tcp_parseopt+0x8a>
 80181c2:	89ba      	ldrh	r2, [r7, #12]
 80181c4:	e001      	b.n	80181ca <tcp_parseopt+0x8e>
 80181c6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80181ce:	e012      	b.n	80181f6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80181d0:	f7ff ff7e 	bl	80180d0 <tcp_get_next_optbyte>
 80181d4:	4603      	mov	r3, r0
 80181d6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80181d8:	7afb      	ldrb	r3, [r7, #11]
 80181da:	2b01      	cmp	r3, #1
 80181dc:	d916      	bls.n	801820c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80181de:	7afb      	ldrb	r3, [r7, #11]
 80181e0:	b29a      	uxth	r2, r3
 80181e2:	4b10      	ldr	r3, [pc, #64]	@ (8018224 <tcp_parseopt+0xe8>)
 80181e4:	881b      	ldrh	r3, [r3, #0]
 80181e6:	4413      	add	r3, r2
 80181e8:	b29b      	uxth	r3, r3
 80181ea:	3b02      	subs	r3, #2
 80181ec:	b29a      	uxth	r2, r3
 80181ee:	4b0d      	ldr	r3, [pc, #52]	@ (8018224 <tcp_parseopt+0xe8>)
 80181f0:	801a      	strh	r2, [r3, #0]
 80181f2:	e000      	b.n	80181f6 <tcp_parseopt+0xba>
          break;
 80181f4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80181f6:	4b0b      	ldr	r3, [pc, #44]	@ (8018224 <tcp_parseopt+0xe8>)
 80181f8:	881a      	ldrh	r2, [r3, #0]
 80181fa:	4b09      	ldr	r3, [pc, #36]	@ (8018220 <tcp_parseopt+0xe4>)
 80181fc:	881b      	ldrh	r3, [r3, #0]
 80181fe:	429a      	cmp	r2, r3
 8018200:	d3b2      	bcc.n	8018168 <tcp_parseopt+0x2c>
 8018202:	e004      	b.n	801820e <tcp_parseopt+0xd2>
          return;
 8018204:	bf00      	nop
 8018206:	e002      	b.n	801820e <tcp_parseopt+0xd2>
            return;
 8018208:	bf00      	nop
 801820a:	e000      	b.n	801820e <tcp_parseopt+0xd2>
            return;
 801820c:	bf00      	nop
      }
    }
  }
}
 801820e:	3710      	adds	r7, #16
 8018210:	46bd      	mov	sp, r7
 8018212:	bd80      	pop	{r7, pc}
 8018214:	08021244 	.word	0x08021244
 8018218:	080216a8 	.word	0x080216a8
 801821c:	08021290 	.word	0x08021290
 8018220:	2000e51c 	.word	0x2000e51c
 8018224:	2000e524 	.word	0x2000e524

08018228 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018228:	b480      	push	{r7}
 801822a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801822c:	4b05      	ldr	r3, [pc, #20]	@ (8018244 <tcp_trigger_input_pcb_close+0x1c>)
 801822e:	781b      	ldrb	r3, [r3, #0]
 8018230:	f043 0310 	orr.w	r3, r3, #16
 8018234:	b2da      	uxtb	r2, r3
 8018236:	4b03      	ldr	r3, [pc, #12]	@ (8018244 <tcp_trigger_input_pcb_close+0x1c>)
 8018238:	701a      	strb	r2, [r3, #0]
}
 801823a:	bf00      	nop
 801823c:	46bd      	mov	sp, r7
 801823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018242:	4770      	bx	lr
 8018244:	2000e535 	.word	0x2000e535

08018248 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018248:	b580      	push	{r7, lr}
 801824a:	b084      	sub	sp, #16
 801824c:	af00      	add	r7, sp, #0
 801824e:	60f8      	str	r0, [r7, #12]
 8018250:	60b9      	str	r1, [r7, #8]
 8018252:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018254:	68fb      	ldr	r3, [r7, #12]
 8018256:	2b00      	cmp	r3, #0
 8018258:	d00a      	beq.n	8018270 <tcp_route+0x28>
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	7a1b      	ldrb	r3, [r3, #8]
 801825e:	2b00      	cmp	r3, #0
 8018260:	d006      	beq.n	8018270 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8018262:	68fb      	ldr	r3, [r7, #12]
 8018264:	7a1b      	ldrb	r3, [r3, #8]
 8018266:	4618      	mov	r0, r3
 8018268:	f7fb f850 	bl	801330c <netif_get_by_index>
 801826c:	4603      	mov	r3, r0
 801826e:	e003      	b.n	8018278 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8018270:	6878      	ldr	r0, [r7, #4]
 8018272:	f003 fc49 	bl	801bb08 <ip4_route>
 8018276:	4603      	mov	r3, r0
  }
}
 8018278:	4618      	mov	r0, r3
 801827a:	3710      	adds	r7, #16
 801827c:	46bd      	mov	sp, r7
 801827e:	bd80      	pop	{r7, pc}

08018280 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8018280:	b590      	push	{r4, r7, lr}
 8018282:	b087      	sub	sp, #28
 8018284:	af00      	add	r7, sp, #0
 8018286:	60f8      	str	r0, [r7, #12]
 8018288:	60b9      	str	r1, [r7, #8]
 801828a:	603b      	str	r3, [r7, #0]
 801828c:	4613      	mov	r3, r2
 801828e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	2b00      	cmp	r3, #0
 8018294:	d105      	bne.n	80182a2 <tcp_create_segment+0x22>
 8018296:	4b43      	ldr	r3, [pc, #268]	@ (80183a4 <tcp_create_segment+0x124>)
 8018298:	22a3      	movs	r2, #163	@ 0xa3
 801829a:	4943      	ldr	r1, [pc, #268]	@ (80183a8 <tcp_create_segment+0x128>)
 801829c:	4843      	ldr	r0, [pc, #268]	@ (80183ac <tcp_create_segment+0x12c>)
 801829e:	f005 ff55 	bl	801e14c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80182a2:	68bb      	ldr	r3, [r7, #8]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d105      	bne.n	80182b4 <tcp_create_segment+0x34>
 80182a8:	4b3e      	ldr	r3, [pc, #248]	@ (80183a4 <tcp_create_segment+0x124>)
 80182aa:	22a4      	movs	r2, #164	@ 0xa4
 80182ac:	4940      	ldr	r1, [pc, #256]	@ (80183b0 <tcp_create_segment+0x130>)
 80182ae:	483f      	ldr	r0, [pc, #252]	@ (80183ac <tcp_create_segment+0x12c>)
 80182b0:	f005 ff4c 	bl	801e14c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80182b4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80182b8:	009b      	lsls	r3, r3, #2
 80182ba:	b2db      	uxtb	r3, r3
 80182bc:	f003 0304 	and.w	r3, r3, #4
 80182c0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80182c2:	2003      	movs	r0, #3
 80182c4:	f7fa fc96 	bl	8012bf4 <memp_malloc>
 80182c8:	6138      	str	r0, [r7, #16]
 80182ca:	693b      	ldr	r3, [r7, #16]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d104      	bne.n	80182da <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80182d0:	68b8      	ldr	r0, [r7, #8]
 80182d2:	f7fb fba9 	bl	8013a28 <pbuf_free>
    return NULL;
 80182d6:	2300      	movs	r3, #0
 80182d8:	e060      	b.n	801839c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80182da:	693b      	ldr	r3, [r7, #16]
 80182dc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80182e0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80182e2:	693b      	ldr	r3, [r7, #16]
 80182e4:	2200      	movs	r2, #0
 80182e6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80182e8:	693b      	ldr	r3, [r7, #16]
 80182ea:	68ba      	ldr	r2, [r7, #8]
 80182ec:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80182ee:	68bb      	ldr	r3, [r7, #8]
 80182f0:	891a      	ldrh	r2, [r3, #8]
 80182f2:	7dfb      	ldrb	r3, [r7, #23]
 80182f4:	b29b      	uxth	r3, r3
 80182f6:	429a      	cmp	r2, r3
 80182f8:	d205      	bcs.n	8018306 <tcp_create_segment+0x86>
 80182fa:	4b2a      	ldr	r3, [pc, #168]	@ (80183a4 <tcp_create_segment+0x124>)
 80182fc:	22b0      	movs	r2, #176	@ 0xb0
 80182fe:	492d      	ldr	r1, [pc, #180]	@ (80183b4 <tcp_create_segment+0x134>)
 8018300:	482a      	ldr	r0, [pc, #168]	@ (80183ac <tcp_create_segment+0x12c>)
 8018302:	f005 ff23 	bl	801e14c <iprintf>
  seg->len = p->tot_len - optlen;
 8018306:	68bb      	ldr	r3, [r7, #8]
 8018308:	891a      	ldrh	r2, [r3, #8]
 801830a:	7dfb      	ldrb	r3, [r7, #23]
 801830c:	b29b      	uxth	r3, r3
 801830e:	1ad3      	subs	r3, r2, r3
 8018310:	b29a      	uxth	r2, r3
 8018312:	693b      	ldr	r3, [r7, #16]
 8018314:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018316:	2114      	movs	r1, #20
 8018318:	68b8      	ldr	r0, [r7, #8]
 801831a:	f7fb faef 	bl	80138fc <pbuf_add_header>
 801831e:	4603      	mov	r3, r0
 8018320:	2b00      	cmp	r3, #0
 8018322:	d004      	beq.n	801832e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018324:	6938      	ldr	r0, [r7, #16]
 8018326:	f7fd f804 	bl	8015332 <tcp_seg_free>
    return NULL;
 801832a:	2300      	movs	r3, #0
 801832c:	e036      	b.n	801839c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801832e:	693b      	ldr	r3, [r7, #16]
 8018330:	685b      	ldr	r3, [r3, #4]
 8018332:	685a      	ldr	r2, [r3, #4]
 8018334:	693b      	ldr	r3, [r7, #16]
 8018336:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018338:	68fb      	ldr	r3, [r7, #12]
 801833a:	8ada      	ldrh	r2, [r3, #22]
 801833c:	693b      	ldr	r3, [r7, #16]
 801833e:	68dc      	ldr	r4, [r3, #12]
 8018340:	4610      	mov	r0, r2
 8018342:	f7f9 ff83 	bl	801224c <lwip_htons>
 8018346:	4603      	mov	r3, r0
 8018348:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	8b1a      	ldrh	r2, [r3, #24]
 801834e:	693b      	ldr	r3, [r7, #16]
 8018350:	68dc      	ldr	r4, [r3, #12]
 8018352:	4610      	mov	r0, r2
 8018354:	f7f9 ff7a 	bl	801224c <lwip_htons>
 8018358:	4603      	mov	r3, r0
 801835a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801835c:	693b      	ldr	r3, [r7, #16]
 801835e:	68dc      	ldr	r4, [r3, #12]
 8018360:	6838      	ldr	r0, [r7, #0]
 8018362:	f7f9 ff89 	bl	8012278 <lwip_htonl>
 8018366:	4603      	mov	r3, r0
 8018368:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801836a:	7dfb      	ldrb	r3, [r7, #23]
 801836c:	089b      	lsrs	r3, r3, #2
 801836e:	b2db      	uxtb	r3, r3
 8018370:	3305      	adds	r3, #5
 8018372:	b29b      	uxth	r3, r3
 8018374:	031b      	lsls	r3, r3, #12
 8018376:	b29a      	uxth	r2, r3
 8018378:	79fb      	ldrb	r3, [r7, #7]
 801837a:	b29b      	uxth	r3, r3
 801837c:	4313      	orrs	r3, r2
 801837e:	b29a      	uxth	r2, r3
 8018380:	693b      	ldr	r3, [r7, #16]
 8018382:	68dc      	ldr	r4, [r3, #12]
 8018384:	4610      	mov	r0, r2
 8018386:	f7f9 ff61 	bl	801224c <lwip_htons>
 801838a:	4603      	mov	r3, r0
 801838c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801838e:	693b      	ldr	r3, [r7, #16]
 8018390:	68db      	ldr	r3, [r3, #12]
 8018392:	2200      	movs	r2, #0
 8018394:	749a      	strb	r2, [r3, #18]
 8018396:	2200      	movs	r2, #0
 8018398:	74da      	strb	r2, [r3, #19]
  return seg;
 801839a:	693b      	ldr	r3, [r7, #16]
}
 801839c:	4618      	mov	r0, r3
 801839e:	371c      	adds	r7, #28
 80183a0:	46bd      	mov	sp, r7
 80183a2:	bd90      	pop	{r4, r7, pc}
 80183a4:	080216c4 	.word	0x080216c4
 80183a8:	080216f8 	.word	0x080216f8
 80183ac:	08021718 	.word	0x08021718
 80183b0:	08021740 	.word	0x08021740
 80183b4:	08021764 	.word	0x08021764

080183b8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b086      	sub	sp, #24
 80183bc:	af00      	add	r7, sp, #0
 80183be:	607b      	str	r3, [r7, #4]
 80183c0:	4603      	mov	r3, r0
 80183c2:	73fb      	strb	r3, [r7, #15]
 80183c4:	460b      	mov	r3, r1
 80183c6:	81bb      	strh	r3, [r7, #12]
 80183c8:	4613      	mov	r3, r2
 80183ca:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80183cc:	89bb      	ldrh	r3, [r7, #12]
 80183ce:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d105      	bne.n	80183e2 <tcp_pbuf_prealloc+0x2a>
 80183d6:	4b30      	ldr	r3, [pc, #192]	@ (8018498 <tcp_pbuf_prealloc+0xe0>)
 80183d8:	22e8      	movs	r2, #232	@ 0xe8
 80183da:	4930      	ldr	r1, [pc, #192]	@ (801849c <tcp_pbuf_prealloc+0xe4>)
 80183dc:	4830      	ldr	r0, [pc, #192]	@ (80184a0 <tcp_pbuf_prealloc+0xe8>)
 80183de:	f005 feb5 	bl	801e14c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80183e2:	6a3b      	ldr	r3, [r7, #32]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d105      	bne.n	80183f4 <tcp_pbuf_prealloc+0x3c>
 80183e8:	4b2b      	ldr	r3, [pc, #172]	@ (8018498 <tcp_pbuf_prealloc+0xe0>)
 80183ea:	22e9      	movs	r2, #233	@ 0xe9
 80183ec:	492d      	ldr	r1, [pc, #180]	@ (80184a4 <tcp_pbuf_prealloc+0xec>)
 80183ee:	482c      	ldr	r0, [pc, #176]	@ (80184a0 <tcp_pbuf_prealloc+0xe8>)
 80183f0:	f005 feac 	bl	801e14c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80183f4:	89ba      	ldrh	r2, [r7, #12]
 80183f6:	897b      	ldrh	r3, [r7, #10]
 80183f8:	429a      	cmp	r2, r3
 80183fa:	d221      	bcs.n	8018440 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80183fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018400:	f003 0302 	and.w	r3, r3, #2
 8018404:	2b00      	cmp	r3, #0
 8018406:	d111      	bne.n	801842c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8018408:	6a3b      	ldr	r3, [r7, #32]
 801840a:	8b5b      	ldrh	r3, [r3, #26]
 801840c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018410:	2b00      	cmp	r3, #0
 8018412:	d115      	bne.n	8018440 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8018414:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018418:	2b00      	cmp	r3, #0
 801841a:	d007      	beq.n	801842c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801841c:	6a3b      	ldr	r3, [r7, #32]
 801841e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8018420:	2b00      	cmp	r3, #0
 8018422:	d103      	bne.n	801842c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8018424:	6a3b      	ldr	r3, [r7, #32]
 8018426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8018428:	2b00      	cmp	r3, #0
 801842a:	d009      	beq.n	8018440 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801842c:	89bb      	ldrh	r3, [r7, #12]
 801842e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8018432:	f023 0203 	bic.w	r2, r3, #3
 8018436:	897b      	ldrh	r3, [r7, #10]
 8018438:	4293      	cmp	r3, r2
 801843a:	bf28      	it	cs
 801843c:	4613      	movcs	r3, r2
 801843e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8018440:	8af9      	ldrh	r1, [r7, #22]
 8018442:	7bfb      	ldrb	r3, [r7, #15]
 8018444:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018448:	4618      	mov	r0, r3
 801844a:	f7fb f809 	bl	8013460 <pbuf_alloc>
 801844e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018450:	693b      	ldr	r3, [r7, #16]
 8018452:	2b00      	cmp	r3, #0
 8018454:	d101      	bne.n	801845a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8018456:	2300      	movs	r3, #0
 8018458:	e019      	b.n	801848e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801845a:	693b      	ldr	r3, [r7, #16]
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	2b00      	cmp	r3, #0
 8018460:	d006      	beq.n	8018470 <tcp_pbuf_prealloc+0xb8>
 8018462:	4b0d      	ldr	r3, [pc, #52]	@ (8018498 <tcp_pbuf_prealloc+0xe0>)
 8018464:	f240 120b 	movw	r2, #267	@ 0x10b
 8018468:	490f      	ldr	r1, [pc, #60]	@ (80184a8 <tcp_pbuf_prealloc+0xf0>)
 801846a:	480d      	ldr	r0, [pc, #52]	@ (80184a0 <tcp_pbuf_prealloc+0xe8>)
 801846c:	f005 fe6e 	bl	801e14c <iprintf>
  *oversize = p->len - length;
 8018470:	693b      	ldr	r3, [r7, #16]
 8018472:	895a      	ldrh	r2, [r3, #10]
 8018474:	89bb      	ldrh	r3, [r7, #12]
 8018476:	1ad3      	subs	r3, r2, r3
 8018478:	b29a      	uxth	r2, r3
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801847e:	693b      	ldr	r3, [r7, #16]
 8018480:	89ba      	ldrh	r2, [r7, #12]
 8018482:	811a      	strh	r2, [r3, #8]
 8018484:	693b      	ldr	r3, [r7, #16]
 8018486:	891a      	ldrh	r2, [r3, #8]
 8018488:	693b      	ldr	r3, [r7, #16]
 801848a:	815a      	strh	r2, [r3, #10]
  return p;
 801848c:	693b      	ldr	r3, [r7, #16]
}
 801848e:	4618      	mov	r0, r3
 8018490:	3718      	adds	r7, #24
 8018492:	46bd      	mov	sp, r7
 8018494:	bd80      	pop	{r7, pc}
 8018496:	bf00      	nop
 8018498:	080216c4 	.word	0x080216c4
 801849c:	0802177c 	.word	0x0802177c
 80184a0:	08021718 	.word	0x08021718
 80184a4:	080217a0 	.word	0x080217a0
 80184a8:	080217c0 	.word	0x080217c0

080184ac <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80184ac:	b580      	push	{r7, lr}
 80184ae:	b082      	sub	sp, #8
 80184b0:	af00      	add	r7, sp, #0
 80184b2:	6078      	str	r0, [r7, #4]
 80184b4:	460b      	mov	r3, r1
 80184b6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d106      	bne.n	80184cc <tcp_write_checks+0x20>
 80184be:	4b33      	ldr	r3, [pc, #204]	@ (801858c <tcp_write_checks+0xe0>)
 80184c0:	f240 1233 	movw	r2, #307	@ 0x133
 80184c4:	4932      	ldr	r1, [pc, #200]	@ (8018590 <tcp_write_checks+0xe4>)
 80184c6:	4833      	ldr	r0, [pc, #204]	@ (8018594 <tcp_write_checks+0xe8>)
 80184c8:	f005 fe40 	bl	801e14c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	7d1b      	ldrb	r3, [r3, #20]
 80184d0:	2b04      	cmp	r3, #4
 80184d2:	d00e      	beq.n	80184f2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80184d8:	2b07      	cmp	r3, #7
 80184da:	d00a      	beq.n	80184f2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80184e0:	2b02      	cmp	r3, #2
 80184e2:	d006      	beq.n	80184f2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80184e8:	2b03      	cmp	r3, #3
 80184ea:	d002      	beq.n	80184f2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80184ec:	f06f 030a 	mvn.w	r3, #10
 80184f0:	e048      	b.n	8018584 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80184f2:	887b      	ldrh	r3, [r7, #2]
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d101      	bne.n	80184fc <tcp_write_checks+0x50>
    return ERR_OK;
 80184f8:	2300      	movs	r3, #0
 80184fa:	e043      	b.n	8018584 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8018502:	887a      	ldrh	r2, [r7, #2]
 8018504:	429a      	cmp	r2, r3
 8018506:	d909      	bls.n	801851c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	8b5b      	ldrh	r3, [r3, #26]
 801850c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018510:	b29a      	uxth	r2, r3
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018516:	f04f 33ff 	mov.w	r3, #4294967295
 801851a:	e033      	b.n	8018584 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018522:	2b08      	cmp	r3, #8
 8018524:	d909      	bls.n	801853a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	8b5b      	ldrh	r3, [r3, #26]
 801852a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801852e:	b29a      	uxth	r2, r3
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018534:	f04f 33ff 	mov.w	r3, #4294967295
 8018538:	e024      	b.n	8018584 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018540:	2b00      	cmp	r3, #0
 8018542:	d00f      	beq.n	8018564 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018548:	2b00      	cmp	r3, #0
 801854a:	d11a      	bne.n	8018582 <tcp_write_checks+0xd6>
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018550:	2b00      	cmp	r3, #0
 8018552:	d116      	bne.n	8018582 <tcp_write_checks+0xd6>
 8018554:	4b0d      	ldr	r3, [pc, #52]	@ (801858c <tcp_write_checks+0xe0>)
 8018556:	f240 1255 	movw	r2, #341	@ 0x155
 801855a:	490f      	ldr	r1, [pc, #60]	@ (8018598 <tcp_write_checks+0xec>)
 801855c:	480d      	ldr	r0, [pc, #52]	@ (8018594 <tcp_write_checks+0xe8>)
 801855e:	f005 fdf5 	bl	801e14c <iprintf>
 8018562:	e00e      	b.n	8018582 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018568:	2b00      	cmp	r3, #0
 801856a:	d103      	bne.n	8018574 <tcp_write_checks+0xc8>
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018570:	2b00      	cmp	r3, #0
 8018572:	d006      	beq.n	8018582 <tcp_write_checks+0xd6>
 8018574:	4b05      	ldr	r3, [pc, #20]	@ (801858c <tcp_write_checks+0xe0>)
 8018576:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801857a:	4908      	ldr	r1, [pc, #32]	@ (801859c <tcp_write_checks+0xf0>)
 801857c:	4805      	ldr	r0, [pc, #20]	@ (8018594 <tcp_write_checks+0xe8>)
 801857e:	f005 fde5 	bl	801e14c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8018582:	2300      	movs	r3, #0
}
 8018584:	4618      	mov	r0, r3
 8018586:	3708      	adds	r7, #8
 8018588:	46bd      	mov	sp, r7
 801858a:	bd80      	pop	{r7, pc}
 801858c:	080216c4 	.word	0x080216c4
 8018590:	080217d4 	.word	0x080217d4
 8018594:	08021718 	.word	0x08021718
 8018598:	080217f4 	.word	0x080217f4
 801859c:	08021830 	.word	0x08021830

080185a0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80185a0:	b590      	push	{r4, r7, lr}
 80185a2:	b09b      	sub	sp, #108	@ 0x6c
 80185a4:	af04      	add	r7, sp, #16
 80185a6:	60f8      	str	r0, [r7, #12]
 80185a8:	60b9      	str	r1, [r7, #8]
 80185aa:	4611      	mov	r1, r2
 80185ac:	461a      	mov	r2, r3
 80185ae:	460b      	mov	r3, r1
 80185b0:	80fb      	strh	r3, [r7, #6]
 80185b2:	4613      	mov	r3, r2
 80185b4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80185b6:	2300      	movs	r3, #0
 80185b8:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80185ba:	2300      	movs	r3, #0
 80185bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80185be:	2300      	movs	r3, #0
 80185c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80185c2:	2300      	movs	r3, #0
 80185c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80185c6:	2300      	movs	r3, #0
 80185c8:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80185ca:	2300      	movs	r3, #0
 80185cc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80185d0:	2300      	movs	r3, #0
 80185d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80185d6:	2300      	movs	r3, #0
 80185d8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80185da:	2300      	movs	r3, #0
 80185dc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80185de:	2300      	movs	r3, #0
 80185e0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d109      	bne.n	80185fc <tcp_write+0x5c>
 80185e8:	4ba4      	ldr	r3, [pc, #656]	@ (801887c <tcp_write+0x2dc>)
 80185ea:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80185ee:	49a4      	ldr	r1, [pc, #656]	@ (8018880 <tcp_write+0x2e0>)
 80185f0:	48a4      	ldr	r0, [pc, #656]	@ (8018884 <tcp_write+0x2e4>)
 80185f2:	f005 fdab 	bl	801e14c <iprintf>
 80185f6:	f06f 030f 	mvn.w	r3, #15
 80185fa:	e32a      	b.n	8018c52 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8018602:	085b      	lsrs	r3, r3, #1
 8018604:	b29a      	uxth	r2, r3
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801860a:	4293      	cmp	r3, r2
 801860c:	bf28      	it	cs
 801860e:	4613      	movcs	r3, r2
 8018610:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8018612:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018614:	2b00      	cmp	r3, #0
 8018616:	d102      	bne.n	801861e <tcp_write+0x7e>
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801861c:	e000      	b.n	8018620 <tcp_write+0x80>
 801861e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018620:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8018622:	68bb      	ldr	r3, [r7, #8]
 8018624:	2b00      	cmp	r3, #0
 8018626:	d109      	bne.n	801863c <tcp_write+0x9c>
 8018628:	4b94      	ldr	r3, [pc, #592]	@ (801887c <tcp_write+0x2dc>)
 801862a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801862e:	4996      	ldr	r1, [pc, #600]	@ (8018888 <tcp_write+0x2e8>)
 8018630:	4894      	ldr	r0, [pc, #592]	@ (8018884 <tcp_write+0x2e4>)
 8018632:	f005 fd8b 	bl	801e14c <iprintf>
 8018636:	f06f 030f 	mvn.w	r3, #15
 801863a:	e30a      	b.n	8018c52 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801863c:	88fb      	ldrh	r3, [r7, #6]
 801863e:	4619      	mov	r1, r3
 8018640:	68f8      	ldr	r0, [r7, #12]
 8018642:	f7ff ff33 	bl	80184ac <tcp_write_checks>
 8018646:	4603      	mov	r3, r0
 8018648:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801864c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8018650:	2b00      	cmp	r3, #0
 8018652:	d002      	beq.n	801865a <tcp_write+0xba>
    return err;
 8018654:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8018658:	e2fb      	b.n	8018c52 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801865a:	68fb      	ldr	r3, [r7, #12]
 801865c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018660:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018664:	2300      	movs	r3, #0
 8018666:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801866e:	2b00      	cmp	r3, #0
 8018670:	f000 80f6 	beq.w	8018860 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018678:	653b      	str	r3, [r7, #80]	@ 0x50
 801867a:	e002      	b.n	8018682 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801867c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018682:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	2b00      	cmp	r3, #0
 8018688:	d1f8      	bne.n	801867c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801868a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801868c:	7a9b      	ldrb	r3, [r3, #10]
 801868e:	009b      	lsls	r3, r3, #2
 8018690:	b29b      	uxth	r3, r3
 8018692:	f003 0304 	and.w	r3, r3, #4
 8018696:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8018698:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801869a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801869c:	891b      	ldrh	r3, [r3, #8]
 801869e:	4619      	mov	r1, r3
 80186a0:	8c3b      	ldrh	r3, [r7, #32]
 80186a2:	440b      	add	r3, r1
 80186a4:	429a      	cmp	r2, r3
 80186a6:	da06      	bge.n	80186b6 <tcp_write+0x116>
 80186a8:	4b74      	ldr	r3, [pc, #464]	@ (801887c <tcp_write+0x2dc>)
 80186aa:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80186ae:	4977      	ldr	r1, [pc, #476]	@ (801888c <tcp_write+0x2ec>)
 80186b0:	4874      	ldr	r0, [pc, #464]	@ (8018884 <tcp_write+0x2e4>)
 80186b2:	f005 fd4b 	bl	801e14c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80186b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80186b8:	891a      	ldrh	r2, [r3, #8]
 80186ba:	8c3b      	ldrh	r3, [r7, #32]
 80186bc:	4413      	add	r3, r2
 80186be:	b29b      	uxth	r3, r3
 80186c0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80186c2:	1ad3      	subs	r3, r2, r3
 80186c4:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80186cc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80186ce:	8a7b      	ldrh	r3, [r7, #18]
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d026      	beq.n	8018722 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80186d4:	8a7b      	ldrh	r3, [r7, #18]
 80186d6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80186d8:	429a      	cmp	r2, r3
 80186da:	d206      	bcs.n	80186ea <tcp_write+0x14a>
 80186dc:	4b67      	ldr	r3, [pc, #412]	@ (801887c <tcp_write+0x2dc>)
 80186de:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 80186e2:	496b      	ldr	r1, [pc, #428]	@ (8018890 <tcp_write+0x2f0>)
 80186e4:	4867      	ldr	r0, [pc, #412]	@ (8018884 <tcp_write+0x2e4>)
 80186e6:	f005 fd31 	bl	801e14c <iprintf>
      seg = last_unsent;
 80186ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80186ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80186ee:	8a7b      	ldrh	r3, [r7, #18]
 80186f0:	88fa      	ldrh	r2, [r7, #6]
 80186f2:	4293      	cmp	r3, r2
 80186f4:	bf28      	it	cs
 80186f6:	4613      	movcs	r3, r2
 80186f8:	b29b      	uxth	r3, r3
 80186fa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80186fc:	4293      	cmp	r3, r2
 80186fe:	bf28      	it	cs
 8018700:	4613      	movcs	r3, r2
 8018702:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8018704:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018708:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801870a:	4413      	add	r3, r2
 801870c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8018710:	8a7a      	ldrh	r2, [r7, #18]
 8018712:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018714:	1ad3      	subs	r3, r2, r3
 8018716:	b29b      	uxth	r3, r3
 8018718:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801871a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801871c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801871e:	1ad3      	subs	r3, r2, r3
 8018720:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8018722:	8a7b      	ldrh	r3, [r7, #18]
 8018724:	2b00      	cmp	r3, #0
 8018726:	d00b      	beq.n	8018740 <tcp_write+0x1a0>
 8018728:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801872c:	88fb      	ldrh	r3, [r7, #6]
 801872e:	429a      	cmp	r2, r3
 8018730:	d006      	beq.n	8018740 <tcp_write+0x1a0>
 8018732:	4b52      	ldr	r3, [pc, #328]	@ (801887c <tcp_write+0x2dc>)
 8018734:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018738:	4956      	ldr	r1, [pc, #344]	@ (8018894 <tcp_write+0x2f4>)
 801873a:	4852      	ldr	r0, [pc, #328]	@ (8018884 <tcp_write+0x2e4>)
 801873c:	f005 fd06 	bl	801e14c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8018740:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018744:	88fb      	ldrh	r3, [r7, #6]
 8018746:	429a      	cmp	r2, r3
 8018748:	f080 8167 	bcs.w	8018a1a <tcp_write+0x47a>
 801874c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801874e:	2b00      	cmp	r3, #0
 8018750:	f000 8163 	beq.w	8018a1a <tcp_write+0x47a>
 8018754:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018756:	891b      	ldrh	r3, [r3, #8]
 8018758:	2b00      	cmp	r3, #0
 801875a:	f000 815e 	beq.w	8018a1a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801875e:	88fa      	ldrh	r2, [r7, #6]
 8018760:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018764:	1ad2      	subs	r2, r2, r3
 8018766:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018768:	4293      	cmp	r3, r2
 801876a:	bfa8      	it	ge
 801876c:	4613      	movge	r3, r2
 801876e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8018770:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018772:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8018774:	797b      	ldrb	r3, [r7, #5]
 8018776:	f003 0301 	and.w	r3, r3, #1
 801877a:	2b00      	cmp	r3, #0
 801877c:	d027      	beq.n	80187ce <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801877e:	f107 0012 	add.w	r0, r7, #18
 8018782:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018784:	8bf9      	ldrh	r1, [r7, #30]
 8018786:	2301      	movs	r3, #1
 8018788:	9302      	str	r3, [sp, #8]
 801878a:	797b      	ldrb	r3, [r7, #5]
 801878c:	9301      	str	r3, [sp, #4]
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	9300      	str	r3, [sp, #0]
 8018792:	4603      	mov	r3, r0
 8018794:	2000      	movs	r0, #0
 8018796:	f7ff fe0f 	bl	80183b8 <tcp_pbuf_prealloc>
 801879a:	6578      	str	r0, [r7, #84]	@ 0x54
 801879c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801879e:	2b00      	cmp	r3, #0
 80187a0:	f000 8225 	beq.w	8018bee <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80187a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80187a6:	6858      	ldr	r0, [r3, #4]
 80187a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80187ac:	68ba      	ldr	r2, [r7, #8]
 80187ae:	4413      	add	r3, r2
 80187b0:	8bfa      	ldrh	r2, [r7, #30]
 80187b2:	4619      	mov	r1, r3
 80187b4:	f005 fe61 	bl	801e47a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80187b8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80187ba:	f7fb f9c3 	bl	8013b44 <pbuf_clen>
 80187be:	4603      	mov	r3, r0
 80187c0:	461a      	mov	r2, r3
 80187c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80187c6:	4413      	add	r3, r2
 80187c8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80187cc:	e041      	b.n	8018852 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80187ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187d0:	685b      	ldr	r3, [r3, #4]
 80187d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80187d4:	e002      	b.n	80187dc <tcp_write+0x23c>
 80187d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	637b      	str	r3, [r7, #52]	@ 0x34
 80187dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d1f8      	bne.n	80187d6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80187e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187e6:	7b1b      	ldrb	r3, [r3, #12]
 80187e8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d115      	bne.n	801881c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80187f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187f2:	685b      	ldr	r3, [r3, #4]
 80187f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80187f6:	8952      	ldrh	r2, [r2, #10]
 80187f8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80187fa:	68ba      	ldr	r2, [r7, #8]
 80187fc:	429a      	cmp	r2, r3
 80187fe:	d10d      	bne.n	801881c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8018800:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018804:	2b00      	cmp	r3, #0
 8018806:	d006      	beq.n	8018816 <tcp_write+0x276>
 8018808:	4b1c      	ldr	r3, [pc, #112]	@ (801887c <tcp_write+0x2dc>)
 801880a:	f240 2231 	movw	r2, #561	@ 0x231
 801880e:	4922      	ldr	r1, [pc, #136]	@ (8018898 <tcp_write+0x2f8>)
 8018810:	481c      	ldr	r0, [pc, #112]	@ (8018884 <tcp_write+0x2e4>)
 8018812:	f005 fc9b 	bl	801e14c <iprintf>
          extendlen = seglen;
 8018816:	8bfb      	ldrh	r3, [r7, #30]
 8018818:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801881a:	e01a      	b.n	8018852 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801881c:	8bfb      	ldrh	r3, [r7, #30]
 801881e:	2201      	movs	r2, #1
 8018820:	4619      	mov	r1, r3
 8018822:	2000      	movs	r0, #0
 8018824:	f7fa fe1c 	bl	8013460 <pbuf_alloc>
 8018828:	6578      	str	r0, [r7, #84]	@ 0x54
 801882a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801882c:	2b00      	cmp	r3, #0
 801882e:	f000 81e0 	beq.w	8018bf2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8018832:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018836:	68ba      	ldr	r2, [r7, #8]
 8018838:	441a      	add	r2, r3
 801883a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801883c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801883e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018840:	f7fb f980 	bl	8013b44 <pbuf_clen>
 8018844:	4603      	mov	r3, r0
 8018846:	461a      	mov	r2, r3
 8018848:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801884c:	4413      	add	r3, r2
 801884e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8018852:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018856:	8bfb      	ldrh	r3, [r7, #30]
 8018858:	4413      	add	r3, r2
 801885a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801885e:	e0dc      	b.n	8018a1a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8018866:	2b00      	cmp	r3, #0
 8018868:	f000 80d7 	beq.w	8018a1a <tcp_write+0x47a>
 801886c:	4b03      	ldr	r3, [pc, #12]	@ (801887c <tcp_write+0x2dc>)
 801886e:	f240 224a 	movw	r2, #586	@ 0x24a
 8018872:	490a      	ldr	r1, [pc, #40]	@ (801889c <tcp_write+0x2fc>)
 8018874:	4803      	ldr	r0, [pc, #12]	@ (8018884 <tcp_write+0x2e4>)
 8018876:	f005 fc69 	bl	801e14c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801887a:	e0ce      	b.n	8018a1a <tcp_write+0x47a>
 801887c:	080216c4 	.word	0x080216c4
 8018880:	08021864 	.word	0x08021864
 8018884:	08021718 	.word	0x08021718
 8018888:	0802187c 	.word	0x0802187c
 801888c:	080218b0 	.word	0x080218b0
 8018890:	080218c8 	.word	0x080218c8
 8018894:	080218e8 	.word	0x080218e8
 8018898:	08021908 	.word	0x08021908
 801889c:	08021934 	.word	0x08021934
    struct pbuf *p;
    u16_t left = len - pos;
 80188a0:	88fa      	ldrh	r2, [r7, #6]
 80188a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80188a6:	1ad3      	subs	r3, r2, r3
 80188a8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80188aa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80188ae:	b29b      	uxth	r3, r3
 80188b0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80188b2:	1ad3      	subs	r3, r2, r3
 80188b4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80188b6:	8b7a      	ldrh	r2, [r7, #26]
 80188b8:	8bbb      	ldrh	r3, [r7, #28]
 80188ba:	4293      	cmp	r3, r2
 80188bc:	bf28      	it	cs
 80188be:	4613      	movcs	r3, r2
 80188c0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80188c2:	797b      	ldrb	r3, [r7, #5]
 80188c4:	f003 0301 	and.w	r3, r3, #1
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d036      	beq.n	801893a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80188cc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80188d0:	b29a      	uxth	r2, r3
 80188d2:	8b3b      	ldrh	r3, [r7, #24]
 80188d4:	4413      	add	r3, r2
 80188d6:	b299      	uxth	r1, r3
 80188d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80188da:	2b00      	cmp	r3, #0
 80188dc:	bf0c      	ite	eq
 80188de:	2301      	moveq	r3, #1
 80188e0:	2300      	movne	r3, #0
 80188e2:	b2db      	uxtb	r3, r3
 80188e4:	f107 0012 	add.w	r0, r7, #18
 80188e8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80188ea:	9302      	str	r3, [sp, #8]
 80188ec:	797b      	ldrb	r3, [r7, #5]
 80188ee:	9301      	str	r3, [sp, #4]
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	9300      	str	r3, [sp, #0]
 80188f4:	4603      	mov	r3, r0
 80188f6:	2036      	movs	r0, #54	@ 0x36
 80188f8:	f7ff fd5e 	bl	80183b8 <tcp_pbuf_prealloc>
 80188fc:	6338      	str	r0, [r7, #48]	@ 0x30
 80188fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018900:	2b00      	cmp	r3, #0
 8018902:	f000 8178 	beq.w	8018bf6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8018906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018908:	895b      	ldrh	r3, [r3, #10]
 801890a:	8b3a      	ldrh	r2, [r7, #24]
 801890c:	429a      	cmp	r2, r3
 801890e:	d906      	bls.n	801891e <tcp_write+0x37e>
 8018910:	4b8c      	ldr	r3, [pc, #560]	@ (8018b44 <tcp_write+0x5a4>)
 8018912:	f240 2266 	movw	r2, #614	@ 0x266
 8018916:	498c      	ldr	r1, [pc, #560]	@ (8018b48 <tcp_write+0x5a8>)
 8018918:	488c      	ldr	r0, [pc, #560]	@ (8018b4c <tcp_write+0x5ac>)
 801891a:	f005 fc17 	bl	801e14c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801891e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018920:	685a      	ldr	r2, [r3, #4]
 8018922:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018926:	18d0      	adds	r0, r2, r3
 8018928:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801892c:	68ba      	ldr	r2, [r7, #8]
 801892e:	4413      	add	r3, r2
 8018930:	8b3a      	ldrh	r2, [r7, #24]
 8018932:	4619      	mov	r1, r3
 8018934:	f005 fda1 	bl	801e47a <memcpy>
 8018938:	e02f      	b.n	801899a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801893a:	8a7b      	ldrh	r3, [r7, #18]
 801893c:	2b00      	cmp	r3, #0
 801893e:	d006      	beq.n	801894e <tcp_write+0x3ae>
 8018940:	4b80      	ldr	r3, [pc, #512]	@ (8018b44 <tcp_write+0x5a4>)
 8018942:	f240 2271 	movw	r2, #625	@ 0x271
 8018946:	4982      	ldr	r1, [pc, #520]	@ (8018b50 <tcp_write+0x5b0>)
 8018948:	4880      	ldr	r0, [pc, #512]	@ (8018b4c <tcp_write+0x5ac>)
 801894a:	f005 fbff 	bl	801e14c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801894e:	8b3b      	ldrh	r3, [r7, #24]
 8018950:	2201      	movs	r2, #1
 8018952:	4619      	mov	r1, r3
 8018954:	2036      	movs	r0, #54	@ 0x36
 8018956:	f7fa fd83 	bl	8013460 <pbuf_alloc>
 801895a:	6178      	str	r0, [r7, #20]
 801895c:	697b      	ldr	r3, [r7, #20]
 801895e:	2b00      	cmp	r3, #0
 8018960:	f000 814b 	beq.w	8018bfa <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8018964:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018968:	68ba      	ldr	r2, [r7, #8]
 801896a:	441a      	add	r2, r3
 801896c:	697b      	ldr	r3, [r7, #20]
 801896e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018970:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018974:	b29b      	uxth	r3, r3
 8018976:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801897a:	4619      	mov	r1, r3
 801897c:	2036      	movs	r0, #54	@ 0x36
 801897e:	f7fa fd6f 	bl	8013460 <pbuf_alloc>
 8018982:	6338      	str	r0, [r7, #48]	@ 0x30
 8018984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018986:	2b00      	cmp	r3, #0
 8018988:	d103      	bne.n	8018992 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801898a:	6978      	ldr	r0, [r7, #20]
 801898c:	f7fb f84c 	bl	8013a28 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8018990:	e136      	b.n	8018c00 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8018992:	6979      	ldr	r1, [r7, #20]
 8018994:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018996:	f7fb f915 	bl	8013bc4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801899a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801899c:	f7fb f8d2 	bl	8013b44 <pbuf_clen>
 80189a0:	4603      	mov	r3, r0
 80189a2:	461a      	mov	r2, r3
 80189a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80189a8:	4413      	add	r3, r2
 80189aa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80189ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80189b2:	2b09      	cmp	r3, #9
 80189b4:	d903      	bls.n	80189be <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80189b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80189b8:	f7fb f836 	bl	8013a28 <pbuf_free>
      goto memerr;
 80189bc:	e120      	b.n	8018c00 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80189be:	68fb      	ldr	r3, [r7, #12]
 80189c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80189c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80189c6:	441a      	add	r2, r3
 80189c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80189cc:	9300      	str	r3, [sp, #0]
 80189ce:	4613      	mov	r3, r2
 80189d0:	2200      	movs	r2, #0
 80189d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80189d4:	68f8      	ldr	r0, [r7, #12]
 80189d6:	f7ff fc53 	bl	8018280 <tcp_create_segment>
 80189da:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80189dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189de:	2b00      	cmp	r3, #0
 80189e0:	f000 810d 	beq.w	8018bfe <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80189e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d102      	bne.n	80189f0 <tcp_write+0x450>
      queue = seg;
 80189ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80189ee:	e00c      	b.n	8018a0a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80189f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d106      	bne.n	8018a04 <tcp_write+0x464>
 80189f6:	4b53      	ldr	r3, [pc, #332]	@ (8018b44 <tcp_write+0x5a4>)
 80189f8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80189fc:	4955      	ldr	r1, [pc, #340]	@ (8018b54 <tcp_write+0x5b4>)
 80189fe:	4853      	ldr	r0, [pc, #332]	@ (8018b4c <tcp_write+0x5ac>)
 8018a00:	f005 fba4 	bl	801e14c <iprintf>
      prev_seg->next = seg;
 8018a04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018a06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018a08:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8018a0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a0c:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8018a0e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018a12:	8b3b      	ldrh	r3, [r7, #24]
 8018a14:	4413      	add	r3, r2
 8018a16:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8018a1a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018a1e:	88fb      	ldrh	r3, [r7, #6]
 8018a20:	429a      	cmp	r2, r3
 8018a22:	f4ff af3d 	bcc.w	80188a0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8018a26:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d02c      	beq.n	8018a86 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8018a2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018a2e:	685b      	ldr	r3, [r3, #4]
 8018a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018a32:	e01e      	b.n	8018a72 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8018a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a36:	891a      	ldrh	r2, [r3, #8]
 8018a38:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018a3a:	4413      	add	r3, r2
 8018a3c:	b29a      	uxth	r2, r3
 8018a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a40:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8018a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d110      	bne.n	8018a6c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8018a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a4c:	685b      	ldr	r3, [r3, #4]
 8018a4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018a50:	8952      	ldrh	r2, [r2, #10]
 8018a52:	4413      	add	r3, r2
 8018a54:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018a56:	68b9      	ldr	r1, [r7, #8]
 8018a58:	4618      	mov	r0, r3
 8018a5a:	f005 fd0e 	bl	801e47a <memcpy>
        p->len += oversize_used;
 8018a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a60:	895a      	ldrh	r2, [r3, #10]
 8018a62:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018a64:	4413      	add	r3, r2
 8018a66:	b29a      	uxth	r2, r3
 8018a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a6a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8018a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a6e:	681b      	ldr	r3, [r3, #0]
 8018a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d1dd      	bne.n	8018a34 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8018a78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018a7a:	891a      	ldrh	r2, [r3, #8]
 8018a7c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018a7e:	4413      	add	r3, r2
 8018a80:	b29a      	uxth	r2, r3
 8018a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018a84:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8018a86:	8a7a      	ldrh	r2, [r7, #18]
 8018a88:	68fb      	ldr	r3, [r7, #12]
 8018a8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8018a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	d018      	beq.n	8018ac6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8018a94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d106      	bne.n	8018aa8 <tcp_write+0x508>
 8018a9a:	4b2a      	ldr	r3, [pc, #168]	@ (8018b44 <tcp_write+0x5a4>)
 8018a9c:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8018aa0:	492d      	ldr	r1, [pc, #180]	@ (8018b58 <tcp_write+0x5b8>)
 8018aa2:	482a      	ldr	r0, [pc, #168]	@ (8018b4c <tcp_write+0x5ac>)
 8018aa4:	f005 fb52 	bl	801e14c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8018aa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018aaa:	685b      	ldr	r3, [r3, #4]
 8018aac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018aae:	4618      	mov	r0, r3
 8018ab0:	f7fb f888 	bl	8013bc4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8018ab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018ab6:	891a      	ldrh	r2, [r3, #8]
 8018ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018aba:	891b      	ldrh	r3, [r3, #8]
 8018abc:	4413      	add	r3, r2
 8018abe:	b29a      	uxth	r2, r3
 8018ac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018ac2:	811a      	strh	r2, [r3, #8]
 8018ac4:	e037      	b.n	8018b36 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8018ac6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d034      	beq.n	8018b36 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8018acc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d003      	beq.n	8018ada <tcp_write+0x53a>
 8018ad2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018ad4:	685b      	ldr	r3, [r3, #4]
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d106      	bne.n	8018ae8 <tcp_write+0x548>
 8018ada:	4b1a      	ldr	r3, [pc, #104]	@ (8018b44 <tcp_write+0x5a4>)
 8018adc:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8018ae0:	491e      	ldr	r1, [pc, #120]	@ (8018b5c <tcp_write+0x5bc>)
 8018ae2:	481a      	ldr	r0, [pc, #104]	@ (8018b4c <tcp_write+0x5ac>)
 8018ae4:	f005 fb32 	bl	801e14c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8018ae8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018aea:	685b      	ldr	r3, [r3, #4]
 8018aec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018aee:	e009      	b.n	8018b04 <tcp_write+0x564>
      p->tot_len += extendlen;
 8018af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018af2:	891a      	ldrh	r2, [r3, #8]
 8018af4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018af6:	4413      	add	r3, r2
 8018af8:	b29a      	uxth	r2, r3
 8018afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018afc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8018afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d1f1      	bne.n	8018af0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8018b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b0e:	891a      	ldrh	r2, [r3, #8]
 8018b10:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018b12:	4413      	add	r3, r2
 8018b14:	b29a      	uxth	r2, r3
 8018b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b18:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8018b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b1c:	895a      	ldrh	r2, [r3, #10]
 8018b1e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018b20:	4413      	add	r3, r2
 8018b22:	b29a      	uxth	r2, r3
 8018b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b26:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8018b28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018b2a:	891a      	ldrh	r2, [r3, #8]
 8018b2c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018b2e:	4413      	add	r3, r2
 8018b30:	b29a      	uxth	r2, r3
 8018b32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018b34:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8018b36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d111      	bne.n	8018b60 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8018b3c:	68fb      	ldr	r3, [r7, #12]
 8018b3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018b40:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018b42:	e010      	b.n	8018b66 <tcp_write+0x5c6>
 8018b44:	080216c4 	.word	0x080216c4
 8018b48:	08021964 	.word	0x08021964
 8018b4c:	08021718 	.word	0x08021718
 8018b50:	080219a4 	.word	0x080219a4
 8018b54:	080219b4 	.word	0x080219b4
 8018b58:	080219c8 	.word	0x080219c8
 8018b5c:	08021a00 	.word	0x08021a00
  } else {
    last_unsent->next = queue;
 8018b60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018b62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018b64:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8018b6a:	88fb      	ldrh	r3, [r7, #6]
 8018b6c:	441a      	add	r2, r3
 8018b6e:	68fb      	ldr	r3, [r7, #12]
 8018b70:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8018b78:	88fb      	ldrh	r3, [r7, #6]
 8018b7a:	1ad3      	subs	r3, r2, r3
 8018b7c:	b29a      	uxth	r2, r3
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8018b8a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d00e      	beq.n	8018bb6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d10a      	bne.n	8018bb6 <tcp_write+0x616>
 8018ba0:	68fb      	ldr	r3, [r7, #12]
 8018ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d106      	bne.n	8018bb6 <tcp_write+0x616>
 8018ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8018c5c <tcp_write+0x6bc>)
 8018baa:	f240 3212 	movw	r2, #786	@ 0x312
 8018bae:	492c      	ldr	r1, [pc, #176]	@ (8018c60 <tcp_write+0x6c0>)
 8018bb0:	482c      	ldr	r0, [pc, #176]	@ (8018c64 <tcp_write+0x6c4>)
 8018bb2:	f005 facb 	bl	801e14c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8018bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d016      	beq.n	8018bea <tcp_write+0x64a>
 8018bbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bbe:	68db      	ldr	r3, [r3, #12]
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d012      	beq.n	8018bea <tcp_write+0x64a>
 8018bc4:	797b      	ldrb	r3, [r7, #5]
 8018bc6:	f003 0302 	and.w	r3, r3, #2
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d10d      	bne.n	8018bea <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8018bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bd0:	68db      	ldr	r3, [r3, #12]
 8018bd2:	899b      	ldrh	r3, [r3, #12]
 8018bd4:	b29c      	uxth	r4, r3
 8018bd6:	2008      	movs	r0, #8
 8018bd8:	f7f9 fb38 	bl	801224c <lwip_htons>
 8018bdc:	4603      	mov	r3, r0
 8018bde:	461a      	mov	r2, r3
 8018be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018be2:	68db      	ldr	r3, [r3, #12]
 8018be4:	4322      	orrs	r2, r4
 8018be6:	b292      	uxth	r2, r2
 8018be8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8018bea:	2300      	movs	r3, #0
 8018bec:	e031      	b.n	8018c52 <tcp_write+0x6b2>
          goto memerr;
 8018bee:	bf00      	nop
 8018bf0:	e006      	b.n	8018c00 <tcp_write+0x660>
            goto memerr;
 8018bf2:	bf00      	nop
 8018bf4:	e004      	b.n	8018c00 <tcp_write+0x660>
        goto memerr;
 8018bf6:	bf00      	nop
 8018bf8:	e002      	b.n	8018c00 <tcp_write+0x660>
        goto memerr;
 8018bfa:	bf00      	nop
 8018bfc:	e000      	b.n	8018c00 <tcp_write+0x660>
      goto memerr;
 8018bfe:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	8b5b      	ldrh	r3, [r3, #26]
 8018c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018c08:	b29a      	uxth	r2, r3
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8018c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d002      	beq.n	8018c1a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8018c14:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018c16:	f7fa ff07 	bl	8013a28 <pbuf_free>
  }
  if (queue != NULL) {
 8018c1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d002      	beq.n	8018c26 <tcp_write+0x686>
    tcp_segs_free(queue);
 8018c20:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018c22:	f7fc fb71 	bl	8015308 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8018c26:	68fb      	ldr	r3, [r7, #12]
 8018c28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d00e      	beq.n	8018c4e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8018c30:	68fb      	ldr	r3, [r7, #12]
 8018c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d10a      	bne.n	8018c4e <tcp_write+0x6ae>
 8018c38:	68fb      	ldr	r3, [r7, #12]
 8018c3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d106      	bne.n	8018c4e <tcp_write+0x6ae>
 8018c40:	4b06      	ldr	r3, [pc, #24]	@ (8018c5c <tcp_write+0x6bc>)
 8018c42:	f240 3227 	movw	r2, #807	@ 0x327
 8018c46:	4906      	ldr	r1, [pc, #24]	@ (8018c60 <tcp_write+0x6c0>)
 8018c48:	4806      	ldr	r0, [pc, #24]	@ (8018c64 <tcp_write+0x6c4>)
 8018c4a:	f005 fa7f 	bl	801e14c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8018c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018c52:	4618      	mov	r0, r3
 8018c54:	375c      	adds	r7, #92	@ 0x5c
 8018c56:	46bd      	mov	sp, r7
 8018c58:	bd90      	pop	{r4, r7, pc}
 8018c5a:	bf00      	nop
 8018c5c:	080216c4 	.word	0x080216c4
 8018c60:	08021a38 	.word	0x08021a38
 8018c64:	08021718 	.word	0x08021718

08018c68 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8018c68:	b590      	push	{r4, r7, lr}
 8018c6a:	b08b      	sub	sp, #44	@ 0x2c
 8018c6c:	af02      	add	r7, sp, #8
 8018c6e:	6078      	str	r0, [r7, #4]
 8018c70:	460b      	mov	r3, r1
 8018c72:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8018c74:	2300      	movs	r3, #0
 8018c76:	61fb      	str	r3, [r7, #28]
 8018c78:	2300      	movs	r3, #0
 8018c7a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8018c7c:	2300      	movs	r3, #0
 8018c7e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d106      	bne.n	8018c94 <tcp_split_unsent_seg+0x2c>
 8018c86:	4b95      	ldr	r3, [pc, #596]	@ (8018edc <tcp_split_unsent_seg+0x274>)
 8018c88:	f240 324b 	movw	r2, #843	@ 0x34b
 8018c8c:	4994      	ldr	r1, [pc, #592]	@ (8018ee0 <tcp_split_unsent_seg+0x278>)
 8018c8e:	4895      	ldr	r0, [pc, #596]	@ (8018ee4 <tcp_split_unsent_seg+0x27c>)
 8018c90:	f005 fa5c 	bl	801e14c <iprintf>

  useg = pcb->unsent;
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018c98:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8018c9a:	697b      	ldr	r3, [r7, #20]
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d102      	bne.n	8018ca6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8018ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8018ca4:	e116      	b.n	8018ed4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8018ca6:	887b      	ldrh	r3, [r7, #2]
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d109      	bne.n	8018cc0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8018cac:	4b8b      	ldr	r3, [pc, #556]	@ (8018edc <tcp_split_unsent_seg+0x274>)
 8018cae:	f240 3253 	movw	r2, #851	@ 0x353
 8018cb2:	498d      	ldr	r1, [pc, #564]	@ (8018ee8 <tcp_split_unsent_seg+0x280>)
 8018cb4:	488b      	ldr	r0, [pc, #556]	@ (8018ee4 <tcp_split_unsent_seg+0x27c>)
 8018cb6:	f005 fa49 	bl	801e14c <iprintf>
    return ERR_VAL;
 8018cba:	f06f 0305 	mvn.w	r3, #5
 8018cbe:	e109      	b.n	8018ed4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8018cc0:	697b      	ldr	r3, [r7, #20]
 8018cc2:	891b      	ldrh	r3, [r3, #8]
 8018cc4:	887a      	ldrh	r2, [r7, #2]
 8018cc6:	429a      	cmp	r2, r3
 8018cc8:	d301      	bcc.n	8018cce <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8018cca:	2300      	movs	r3, #0
 8018ccc:	e102      	b.n	8018ed4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018cd2:	887a      	ldrh	r2, [r7, #2]
 8018cd4:	429a      	cmp	r2, r3
 8018cd6:	d906      	bls.n	8018ce6 <tcp_split_unsent_seg+0x7e>
 8018cd8:	4b80      	ldr	r3, [pc, #512]	@ (8018edc <tcp_split_unsent_seg+0x274>)
 8018cda:	f240 325b 	movw	r2, #859	@ 0x35b
 8018cde:	4983      	ldr	r1, [pc, #524]	@ (8018eec <tcp_split_unsent_seg+0x284>)
 8018ce0:	4880      	ldr	r0, [pc, #512]	@ (8018ee4 <tcp_split_unsent_seg+0x27c>)
 8018ce2:	f005 fa33 	bl	801e14c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8018ce6:	697b      	ldr	r3, [r7, #20]
 8018ce8:	891b      	ldrh	r3, [r3, #8]
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d106      	bne.n	8018cfc <tcp_split_unsent_seg+0x94>
 8018cee:	4b7b      	ldr	r3, [pc, #492]	@ (8018edc <tcp_split_unsent_seg+0x274>)
 8018cf0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8018cf4:	497e      	ldr	r1, [pc, #504]	@ (8018ef0 <tcp_split_unsent_seg+0x288>)
 8018cf6:	487b      	ldr	r0, [pc, #492]	@ (8018ee4 <tcp_split_unsent_seg+0x27c>)
 8018cf8:	f005 fa28 	bl	801e14c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8018cfc:	697b      	ldr	r3, [r7, #20]
 8018cfe:	7a9b      	ldrb	r3, [r3, #10]
 8018d00:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8018d02:	7bfb      	ldrb	r3, [r7, #15]
 8018d04:	009b      	lsls	r3, r3, #2
 8018d06:	b2db      	uxtb	r3, r3
 8018d08:	f003 0304 	and.w	r3, r3, #4
 8018d0c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8018d0e:	697b      	ldr	r3, [r7, #20]
 8018d10:	891a      	ldrh	r2, [r3, #8]
 8018d12:	887b      	ldrh	r3, [r7, #2]
 8018d14:	1ad3      	subs	r3, r2, r3
 8018d16:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8018d18:	7bbb      	ldrb	r3, [r7, #14]
 8018d1a:	b29a      	uxth	r2, r3
 8018d1c:	89bb      	ldrh	r3, [r7, #12]
 8018d1e:	4413      	add	r3, r2
 8018d20:	b29b      	uxth	r3, r3
 8018d22:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018d26:	4619      	mov	r1, r3
 8018d28:	2036      	movs	r0, #54	@ 0x36
 8018d2a:	f7fa fb99 	bl	8013460 <pbuf_alloc>
 8018d2e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018d30:	693b      	ldr	r3, [r7, #16]
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	f000 80b7 	beq.w	8018ea6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8018d38:	697b      	ldr	r3, [r7, #20]
 8018d3a:	685b      	ldr	r3, [r3, #4]
 8018d3c:	891a      	ldrh	r2, [r3, #8]
 8018d3e:	697b      	ldr	r3, [r7, #20]
 8018d40:	891b      	ldrh	r3, [r3, #8]
 8018d42:	1ad3      	subs	r3, r2, r3
 8018d44:	b29a      	uxth	r2, r3
 8018d46:	887b      	ldrh	r3, [r7, #2]
 8018d48:	4413      	add	r3, r2
 8018d4a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8018d4c:	697b      	ldr	r3, [r7, #20]
 8018d4e:	6858      	ldr	r0, [r3, #4]
 8018d50:	693b      	ldr	r3, [r7, #16]
 8018d52:	685a      	ldr	r2, [r3, #4]
 8018d54:	7bbb      	ldrb	r3, [r7, #14]
 8018d56:	18d1      	adds	r1, r2, r3
 8018d58:	897b      	ldrh	r3, [r7, #10]
 8018d5a:	89ba      	ldrh	r2, [r7, #12]
 8018d5c:	f7fb f85a 	bl	8013e14 <pbuf_copy_partial>
 8018d60:	4603      	mov	r3, r0
 8018d62:	461a      	mov	r2, r3
 8018d64:	89bb      	ldrh	r3, [r7, #12]
 8018d66:	4293      	cmp	r3, r2
 8018d68:	f040 809f 	bne.w	8018eaa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8018d6c:	697b      	ldr	r3, [r7, #20]
 8018d6e:	68db      	ldr	r3, [r3, #12]
 8018d70:	899b      	ldrh	r3, [r3, #12]
 8018d72:	b29b      	uxth	r3, r3
 8018d74:	4618      	mov	r0, r3
 8018d76:	f7f9 fa69 	bl	801224c <lwip_htons>
 8018d7a:	4603      	mov	r3, r0
 8018d7c:	b2db      	uxtb	r3, r3
 8018d7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018d82:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8018d84:	2300      	movs	r3, #0
 8018d86:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8018d88:	7efb      	ldrb	r3, [r7, #27]
 8018d8a:	f003 0308 	and.w	r3, r3, #8
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d007      	beq.n	8018da2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8018d92:	7efb      	ldrb	r3, [r7, #27]
 8018d94:	f023 0308 	bic.w	r3, r3, #8
 8018d98:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8018d9a:	7ebb      	ldrb	r3, [r7, #26]
 8018d9c:	f043 0308 	orr.w	r3, r3, #8
 8018da0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8018da2:	7efb      	ldrb	r3, [r7, #27]
 8018da4:	f003 0301 	and.w	r3, r3, #1
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d007      	beq.n	8018dbc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8018dac:	7efb      	ldrb	r3, [r7, #27]
 8018dae:	f023 0301 	bic.w	r3, r3, #1
 8018db2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8018db4:	7ebb      	ldrb	r3, [r7, #26]
 8018db6:	f043 0301 	orr.w	r3, r3, #1
 8018dba:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8018dbc:	697b      	ldr	r3, [r7, #20]
 8018dbe:	68db      	ldr	r3, [r3, #12]
 8018dc0:	685b      	ldr	r3, [r3, #4]
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	f7f9 fa58 	bl	8012278 <lwip_htonl>
 8018dc8:	4602      	mov	r2, r0
 8018dca:	887b      	ldrh	r3, [r7, #2]
 8018dcc:	18d1      	adds	r1, r2, r3
 8018dce:	7eba      	ldrb	r2, [r7, #26]
 8018dd0:	7bfb      	ldrb	r3, [r7, #15]
 8018dd2:	9300      	str	r3, [sp, #0]
 8018dd4:	460b      	mov	r3, r1
 8018dd6:	6939      	ldr	r1, [r7, #16]
 8018dd8:	6878      	ldr	r0, [r7, #4]
 8018dda:	f7ff fa51 	bl	8018280 <tcp_create_segment>
 8018dde:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8018de0:	69fb      	ldr	r3, [r7, #28]
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d063      	beq.n	8018eae <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8018de6:	697b      	ldr	r3, [r7, #20]
 8018de8:	685b      	ldr	r3, [r3, #4]
 8018dea:	4618      	mov	r0, r3
 8018dec:	f7fa feaa 	bl	8013b44 <pbuf_clen>
 8018df0:	4603      	mov	r3, r0
 8018df2:	461a      	mov	r2, r3
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018dfa:	1a9b      	subs	r3, r3, r2
 8018dfc:	b29a      	uxth	r2, r3
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8018e04:	697b      	ldr	r3, [r7, #20]
 8018e06:	6858      	ldr	r0, [r3, #4]
 8018e08:	697b      	ldr	r3, [r7, #20]
 8018e0a:	685b      	ldr	r3, [r3, #4]
 8018e0c:	891a      	ldrh	r2, [r3, #8]
 8018e0e:	89bb      	ldrh	r3, [r7, #12]
 8018e10:	1ad3      	subs	r3, r2, r3
 8018e12:	b29b      	uxth	r3, r3
 8018e14:	4619      	mov	r1, r3
 8018e16:	f7fa fc81 	bl	801371c <pbuf_realloc>
  useg->len -= remainder;
 8018e1a:	697b      	ldr	r3, [r7, #20]
 8018e1c:	891a      	ldrh	r2, [r3, #8]
 8018e1e:	89bb      	ldrh	r3, [r7, #12]
 8018e20:	1ad3      	subs	r3, r2, r3
 8018e22:	b29a      	uxth	r2, r3
 8018e24:	697b      	ldr	r3, [r7, #20]
 8018e26:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8018e28:	697b      	ldr	r3, [r7, #20]
 8018e2a:	68db      	ldr	r3, [r3, #12]
 8018e2c:	899b      	ldrh	r3, [r3, #12]
 8018e2e:	b29c      	uxth	r4, r3
 8018e30:	7efb      	ldrb	r3, [r7, #27]
 8018e32:	b29b      	uxth	r3, r3
 8018e34:	4618      	mov	r0, r3
 8018e36:	f7f9 fa09 	bl	801224c <lwip_htons>
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	461a      	mov	r2, r3
 8018e3e:	697b      	ldr	r3, [r7, #20]
 8018e40:	68db      	ldr	r3, [r3, #12]
 8018e42:	4322      	orrs	r2, r4
 8018e44:	b292      	uxth	r2, r2
 8018e46:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8018e48:	697b      	ldr	r3, [r7, #20]
 8018e4a:	685b      	ldr	r3, [r3, #4]
 8018e4c:	4618      	mov	r0, r3
 8018e4e:	f7fa fe79 	bl	8013b44 <pbuf_clen>
 8018e52:	4603      	mov	r3, r0
 8018e54:	461a      	mov	r2, r3
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018e5c:	4413      	add	r3, r2
 8018e5e:	b29a      	uxth	r2, r3
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018e66:	69fb      	ldr	r3, [r7, #28]
 8018e68:	685b      	ldr	r3, [r3, #4]
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	f7fa fe6a 	bl	8013b44 <pbuf_clen>
 8018e70:	4603      	mov	r3, r0
 8018e72:	461a      	mov	r2, r3
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018e7a:	4413      	add	r3, r2
 8018e7c:	b29a      	uxth	r2, r3
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8018e84:	697b      	ldr	r3, [r7, #20]
 8018e86:	681a      	ldr	r2, [r3, #0]
 8018e88:	69fb      	ldr	r3, [r7, #28]
 8018e8a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8018e8c:	697b      	ldr	r3, [r7, #20]
 8018e8e:	69fa      	ldr	r2, [r7, #28]
 8018e90:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8018e92:	69fb      	ldr	r3, [r7, #28]
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d103      	bne.n	8018ea2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	2200      	movs	r2, #0
 8018e9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	e016      	b.n	8018ed4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8018ea6:	bf00      	nop
 8018ea8:	e002      	b.n	8018eb0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018eaa:	bf00      	nop
 8018eac:	e000      	b.n	8018eb0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018eae:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8018eb0:	69fb      	ldr	r3, [r7, #28]
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d006      	beq.n	8018ec4 <tcp_split_unsent_seg+0x25c>
 8018eb6:	4b09      	ldr	r3, [pc, #36]	@ (8018edc <tcp_split_unsent_seg+0x274>)
 8018eb8:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8018ebc:	490d      	ldr	r1, [pc, #52]	@ (8018ef4 <tcp_split_unsent_seg+0x28c>)
 8018ebe:	4809      	ldr	r0, [pc, #36]	@ (8018ee4 <tcp_split_unsent_seg+0x27c>)
 8018ec0:	f005 f944 	bl	801e14c <iprintf>
  if (p != NULL) {
 8018ec4:	693b      	ldr	r3, [r7, #16]
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d002      	beq.n	8018ed0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8018eca:	6938      	ldr	r0, [r7, #16]
 8018ecc:	f7fa fdac 	bl	8013a28 <pbuf_free>
  }

  return ERR_MEM;
 8018ed0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018ed4:	4618      	mov	r0, r3
 8018ed6:	3724      	adds	r7, #36	@ 0x24
 8018ed8:	46bd      	mov	sp, r7
 8018eda:	bd90      	pop	{r4, r7, pc}
 8018edc:	080216c4 	.word	0x080216c4
 8018ee0:	08021a58 	.word	0x08021a58
 8018ee4:	08021718 	.word	0x08021718
 8018ee8:	08021a7c 	.word	0x08021a7c
 8018eec:	08021aa0 	.word	0x08021aa0
 8018ef0:	08021ab0 	.word	0x08021ab0
 8018ef4:	08021ac0 	.word	0x08021ac0

08018ef8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8018ef8:	b590      	push	{r4, r7, lr}
 8018efa:	b085      	sub	sp, #20
 8018efc:	af00      	add	r7, sp, #0
 8018efe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d106      	bne.n	8018f14 <tcp_send_fin+0x1c>
 8018f06:	4b21      	ldr	r3, [pc, #132]	@ (8018f8c <tcp_send_fin+0x94>)
 8018f08:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8018f0c:	4920      	ldr	r1, [pc, #128]	@ (8018f90 <tcp_send_fin+0x98>)
 8018f0e:	4821      	ldr	r0, [pc, #132]	@ (8018f94 <tcp_send_fin+0x9c>)
 8018f10:	f005 f91c 	bl	801e14c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d02e      	beq.n	8018f7a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018f20:	60fb      	str	r3, [r7, #12]
 8018f22:	e002      	b.n	8018f2a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d1f8      	bne.n	8018f24 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8018f32:	68fb      	ldr	r3, [r7, #12]
 8018f34:	68db      	ldr	r3, [r3, #12]
 8018f36:	899b      	ldrh	r3, [r3, #12]
 8018f38:	b29b      	uxth	r3, r3
 8018f3a:	4618      	mov	r0, r3
 8018f3c:	f7f9 f986 	bl	801224c <lwip_htons>
 8018f40:	4603      	mov	r3, r0
 8018f42:	b2db      	uxtb	r3, r3
 8018f44:	f003 0307 	and.w	r3, r3, #7
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d116      	bne.n	8018f7a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	68db      	ldr	r3, [r3, #12]
 8018f50:	899b      	ldrh	r3, [r3, #12]
 8018f52:	b29c      	uxth	r4, r3
 8018f54:	2001      	movs	r0, #1
 8018f56:	f7f9 f979 	bl	801224c <lwip_htons>
 8018f5a:	4603      	mov	r3, r0
 8018f5c:	461a      	mov	r2, r3
 8018f5e:	68fb      	ldr	r3, [r7, #12]
 8018f60:	68db      	ldr	r3, [r3, #12]
 8018f62:	4322      	orrs	r2, r4
 8018f64:	b292      	uxth	r2, r2
 8018f66:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	8b5b      	ldrh	r3, [r3, #26]
 8018f6c:	f043 0320 	orr.w	r3, r3, #32
 8018f70:	b29a      	uxth	r2, r3
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8018f76:	2300      	movs	r3, #0
 8018f78:	e004      	b.n	8018f84 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8018f7a:	2101      	movs	r1, #1
 8018f7c:	6878      	ldr	r0, [r7, #4]
 8018f7e:	f000 f80b 	bl	8018f98 <tcp_enqueue_flags>
 8018f82:	4603      	mov	r3, r0
}
 8018f84:	4618      	mov	r0, r3
 8018f86:	3714      	adds	r7, #20
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	bd90      	pop	{r4, r7, pc}
 8018f8c:	080216c4 	.word	0x080216c4
 8018f90:	08021acc 	.word	0x08021acc
 8018f94:	08021718 	.word	0x08021718

08018f98 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8018f98:	b580      	push	{r7, lr}
 8018f9a:	b08a      	sub	sp, #40	@ 0x28
 8018f9c:	af02      	add	r7, sp, #8
 8018f9e:	6078      	str	r0, [r7, #4]
 8018fa0:	460b      	mov	r3, r1
 8018fa2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8018fa4:	2300      	movs	r3, #0
 8018fa6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8018fa8:	2300      	movs	r3, #0
 8018faa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8018fac:	78fb      	ldrb	r3, [r7, #3]
 8018fae:	f003 0303 	and.w	r3, r3, #3
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d106      	bne.n	8018fc4 <tcp_enqueue_flags+0x2c>
 8018fb6:	4b67      	ldr	r3, [pc, #412]	@ (8019154 <tcp_enqueue_flags+0x1bc>)
 8018fb8:	f240 4211 	movw	r2, #1041	@ 0x411
 8018fbc:	4966      	ldr	r1, [pc, #408]	@ (8019158 <tcp_enqueue_flags+0x1c0>)
 8018fbe:	4867      	ldr	r0, [pc, #412]	@ (801915c <tcp_enqueue_flags+0x1c4>)
 8018fc0:	f005 f8c4 	bl	801e14c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	2b00      	cmp	r3, #0
 8018fc8:	d106      	bne.n	8018fd8 <tcp_enqueue_flags+0x40>
 8018fca:	4b62      	ldr	r3, [pc, #392]	@ (8019154 <tcp_enqueue_flags+0x1bc>)
 8018fcc:	f240 4213 	movw	r2, #1043	@ 0x413
 8018fd0:	4963      	ldr	r1, [pc, #396]	@ (8019160 <tcp_enqueue_flags+0x1c8>)
 8018fd2:	4862      	ldr	r0, [pc, #392]	@ (801915c <tcp_enqueue_flags+0x1c4>)
 8018fd4:	f005 f8ba 	bl	801e14c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8018fd8:	78fb      	ldrb	r3, [r7, #3]
 8018fda:	f003 0302 	and.w	r3, r3, #2
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d001      	beq.n	8018fe6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8018fe2:	2301      	movs	r3, #1
 8018fe4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018fe6:	7ffb      	ldrb	r3, [r7, #31]
 8018fe8:	009b      	lsls	r3, r3, #2
 8018fea:	b2db      	uxtb	r3, r3
 8018fec:	f003 0304 	and.w	r3, r3, #4
 8018ff0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018ff2:	7dfb      	ldrb	r3, [r7, #23]
 8018ff4:	b29b      	uxth	r3, r3
 8018ff6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018ffa:	4619      	mov	r1, r3
 8018ffc:	2036      	movs	r0, #54	@ 0x36
 8018ffe:	f7fa fa2f 	bl	8013460 <pbuf_alloc>
 8019002:	6138      	str	r0, [r7, #16]
 8019004:	693b      	ldr	r3, [r7, #16]
 8019006:	2b00      	cmp	r3, #0
 8019008:	d109      	bne.n	801901e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	8b5b      	ldrh	r3, [r3, #26]
 801900e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019012:	b29a      	uxth	r2, r3
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019018:	f04f 33ff 	mov.w	r3, #4294967295
 801901c:	e095      	b.n	801914a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801901e:	693b      	ldr	r3, [r7, #16]
 8019020:	895a      	ldrh	r2, [r3, #10]
 8019022:	7dfb      	ldrb	r3, [r7, #23]
 8019024:	b29b      	uxth	r3, r3
 8019026:	429a      	cmp	r2, r3
 8019028:	d206      	bcs.n	8019038 <tcp_enqueue_flags+0xa0>
 801902a:	4b4a      	ldr	r3, [pc, #296]	@ (8019154 <tcp_enqueue_flags+0x1bc>)
 801902c:	f240 4239 	movw	r2, #1081	@ 0x439
 8019030:	494c      	ldr	r1, [pc, #304]	@ (8019164 <tcp_enqueue_flags+0x1cc>)
 8019032:	484a      	ldr	r0, [pc, #296]	@ (801915c <tcp_enqueue_flags+0x1c4>)
 8019034:	f005 f88a 	bl	801e14c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801903c:	78fa      	ldrb	r2, [r7, #3]
 801903e:	7ffb      	ldrb	r3, [r7, #31]
 8019040:	9300      	str	r3, [sp, #0]
 8019042:	460b      	mov	r3, r1
 8019044:	6939      	ldr	r1, [r7, #16]
 8019046:	6878      	ldr	r0, [r7, #4]
 8019048:	f7ff f91a 	bl	8018280 <tcp_create_segment>
 801904c:	60f8      	str	r0, [r7, #12]
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	2b00      	cmp	r3, #0
 8019052:	d109      	bne.n	8019068 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	8b5b      	ldrh	r3, [r3, #26]
 8019058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801905c:	b29a      	uxth	r2, r3
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019062:	f04f 33ff 	mov.w	r3, #4294967295
 8019066:	e070      	b.n	801914a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019068:	68fb      	ldr	r3, [r7, #12]
 801906a:	68db      	ldr	r3, [r3, #12]
 801906c:	f003 0303 	and.w	r3, r3, #3
 8019070:	2b00      	cmp	r3, #0
 8019072:	d006      	beq.n	8019082 <tcp_enqueue_flags+0xea>
 8019074:	4b37      	ldr	r3, [pc, #220]	@ (8019154 <tcp_enqueue_flags+0x1bc>)
 8019076:	f240 4242 	movw	r2, #1090	@ 0x442
 801907a:	493b      	ldr	r1, [pc, #236]	@ (8019168 <tcp_enqueue_flags+0x1d0>)
 801907c:	4837      	ldr	r0, [pc, #220]	@ (801915c <tcp_enqueue_flags+0x1c4>)
 801907e:	f005 f865 	bl	801e14c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8019082:	68fb      	ldr	r3, [r7, #12]
 8019084:	891b      	ldrh	r3, [r3, #8]
 8019086:	2b00      	cmp	r3, #0
 8019088:	d006      	beq.n	8019098 <tcp_enqueue_flags+0x100>
 801908a:	4b32      	ldr	r3, [pc, #200]	@ (8019154 <tcp_enqueue_flags+0x1bc>)
 801908c:	f240 4243 	movw	r2, #1091	@ 0x443
 8019090:	4936      	ldr	r1, [pc, #216]	@ (801916c <tcp_enqueue_flags+0x1d4>)
 8019092:	4832      	ldr	r0, [pc, #200]	@ (801915c <tcp_enqueue_flags+0x1c4>)
 8019094:	f005 f85a 	bl	801e14c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801909c:	2b00      	cmp	r3, #0
 801909e:	d103      	bne.n	80190a8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	68fa      	ldr	r2, [r7, #12]
 80190a4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80190a6:	e00d      	b.n	80190c4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80190ac:	61bb      	str	r3, [r7, #24]
 80190ae:	e002      	b.n	80190b6 <tcp_enqueue_flags+0x11e>
 80190b0:	69bb      	ldr	r3, [r7, #24]
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	61bb      	str	r3, [r7, #24]
 80190b6:	69bb      	ldr	r3, [r7, #24]
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d1f8      	bne.n	80190b0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80190be:	69bb      	ldr	r3, [r7, #24]
 80190c0:	68fa      	ldr	r2, [r7, #12]
 80190c2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	2200      	movs	r2, #0
 80190c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80190cc:	78fb      	ldrb	r3, [r7, #3]
 80190ce:	f003 0302 	and.w	r3, r3, #2
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d104      	bne.n	80190e0 <tcp_enqueue_flags+0x148>
 80190d6:	78fb      	ldrb	r3, [r7, #3]
 80190d8:	f003 0301 	and.w	r3, r3, #1
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d004      	beq.n	80190ea <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80190e4:	1c5a      	adds	r2, r3, #1
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80190ea:	78fb      	ldrb	r3, [r7, #3]
 80190ec:	f003 0301 	and.w	r3, r3, #1
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d006      	beq.n	8019102 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	8b5b      	ldrh	r3, [r3, #26]
 80190f8:	f043 0320 	orr.w	r3, r3, #32
 80190fc:	b29a      	uxth	r2, r3
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	685b      	ldr	r3, [r3, #4]
 8019106:	4618      	mov	r0, r3
 8019108:	f7fa fd1c 	bl	8013b44 <pbuf_clen>
 801910c:	4603      	mov	r3, r0
 801910e:	461a      	mov	r2, r3
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019116:	4413      	add	r3, r2
 8019118:	b29a      	uxth	r2, r3
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019126:	2b00      	cmp	r3, #0
 8019128:	d00e      	beq.n	8019148 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801912e:	2b00      	cmp	r3, #0
 8019130:	d10a      	bne.n	8019148 <tcp_enqueue_flags+0x1b0>
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019136:	2b00      	cmp	r3, #0
 8019138:	d106      	bne.n	8019148 <tcp_enqueue_flags+0x1b0>
 801913a:	4b06      	ldr	r3, [pc, #24]	@ (8019154 <tcp_enqueue_flags+0x1bc>)
 801913c:	f240 4265 	movw	r2, #1125	@ 0x465
 8019140:	490b      	ldr	r1, [pc, #44]	@ (8019170 <tcp_enqueue_flags+0x1d8>)
 8019142:	4806      	ldr	r0, [pc, #24]	@ (801915c <tcp_enqueue_flags+0x1c4>)
 8019144:	f005 f802 	bl	801e14c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8019148:	2300      	movs	r3, #0
}
 801914a:	4618      	mov	r0, r3
 801914c:	3720      	adds	r7, #32
 801914e:	46bd      	mov	sp, r7
 8019150:	bd80      	pop	{r7, pc}
 8019152:	bf00      	nop
 8019154:	080216c4 	.word	0x080216c4
 8019158:	08021ae8 	.word	0x08021ae8
 801915c:	08021718 	.word	0x08021718
 8019160:	08021b40 	.word	0x08021b40
 8019164:	08021b60 	.word	0x08021b60
 8019168:	08021b9c 	.word	0x08021b9c
 801916c:	08021bb4 	.word	0x08021bb4
 8019170:	08021be0 	.word	0x08021be0

08019174 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8019174:	b5b0      	push	{r4, r5, r7, lr}
 8019176:	b08a      	sub	sp, #40	@ 0x28
 8019178:	af00      	add	r7, sp, #0
 801917a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	2b00      	cmp	r3, #0
 8019180:	d106      	bne.n	8019190 <tcp_output+0x1c>
 8019182:	4b8a      	ldr	r3, [pc, #552]	@ (80193ac <tcp_output+0x238>)
 8019184:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8019188:	4989      	ldr	r1, [pc, #548]	@ (80193b0 <tcp_output+0x23c>)
 801918a:	488a      	ldr	r0, [pc, #552]	@ (80193b4 <tcp_output+0x240>)
 801918c:	f004 ffde 	bl	801e14c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	7d1b      	ldrb	r3, [r3, #20]
 8019194:	2b01      	cmp	r3, #1
 8019196:	d106      	bne.n	80191a6 <tcp_output+0x32>
 8019198:	4b84      	ldr	r3, [pc, #528]	@ (80193ac <tcp_output+0x238>)
 801919a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801919e:	4986      	ldr	r1, [pc, #536]	@ (80193b8 <tcp_output+0x244>)
 80191a0:	4884      	ldr	r0, [pc, #528]	@ (80193b4 <tcp_output+0x240>)
 80191a2:	f004 ffd3 	bl	801e14c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80191a6:	4b85      	ldr	r3, [pc, #532]	@ (80193bc <tcp_output+0x248>)
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	687a      	ldr	r2, [r7, #4]
 80191ac:	429a      	cmp	r2, r3
 80191ae:	d101      	bne.n	80191b4 <tcp_output+0x40>
    return ERR_OK;
 80191b0:	2300      	movs	r3, #0
 80191b2:	e1ce      	b.n	8019552 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80191c0:	4293      	cmp	r3, r2
 80191c2:	bf28      	it	cs
 80191c4:	4613      	movcs	r3, r2
 80191c6:	b29b      	uxth	r3, r3
 80191c8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80191ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80191d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d10b      	bne.n	80191ee <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	8b5b      	ldrh	r3, [r3, #26]
 80191da:	f003 0302 	and.w	r3, r3, #2
 80191de:	2b00      	cmp	r3, #0
 80191e0:	f000 81aa 	beq.w	8019538 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80191e4:	6878      	ldr	r0, [r7, #4]
 80191e6:	f000 fdcb 	bl	8019d80 <tcp_send_empty_ack>
 80191ea:	4603      	mov	r3, r0
 80191ec:	e1b1      	b.n	8019552 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80191ee:	6879      	ldr	r1, [r7, #4]
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	3304      	adds	r3, #4
 80191f4:	461a      	mov	r2, r3
 80191f6:	6878      	ldr	r0, [r7, #4]
 80191f8:	f7ff f826 	bl	8018248 <tcp_route>
 80191fc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80191fe:	697b      	ldr	r3, [r7, #20]
 8019200:	2b00      	cmp	r3, #0
 8019202:	d102      	bne.n	801920a <tcp_output+0x96>
    return ERR_RTE;
 8019204:	f06f 0303 	mvn.w	r3, #3
 8019208:	e1a3      	b.n	8019552 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	2b00      	cmp	r3, #0
 801920e:	d003      	beq.n	8019218 <tcp_output+0xa4>
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	681b      	ldr	r3, [r3, #0]
 8019214:	2b00      	cmp	r3, #0
 8019216:	d111      	bne.n	801923c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8019218:	697b      	ldr	r3, [r7, #20]
 801921a:	2b00      	cmp	r3, #0
 801921c:	d002      	beq.n	8019224 <tcp_output+0xb0>
 801921e:	697b      	ldr	r3, [r7, #20]
 8019220:	3304      	adds	r3, #4
 8019222:	e000      	b.n	8019226 <tcp_output+0xb2>
 8019224:	2300      	movs	r3, #0
 8019226:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8019228:	693b      	ldr	r3, [r7, #16]
 801922a:	2b00      	cmp	r3, #0
 801922c:	d102      	bne.n	8019234 <tcp_output+0xc0>
      return ERR_RTE;
 801922e:	f06f 0303 	mvn.w	r3, #3
 8019232:	e18e      	b.n	8019552 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019234:	693b      	ldr	r3, [r7, #16]
 8019236:	681a      	ldr	r2, [r3, #0]
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801923c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801923e:	68db      	ldr	r3, [r3, #12]
 8019240:	685b      	ldr	r3, [r3, #4]
 8019242:	4618      	mov	r0, r3
 8019244:	f7f9 f818 	bl	8012278 <lwip_htonl>
 8019248:	4602      	mov	r2, r0
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801924e:	1ad3      	subs	r3, r2, r3
 8019250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019252:	8912      	ldrh	r2, [r2, #8]
 8019254:	4413      	add	r3, r2
 8019256:	69ba      	ldr	r2, [r7, #24]
 8019258:	429a      	cmp	r2, r3
 801925a:	d227      	bcs.n	80192ac <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019262:	461a      	mov	r2, r3
 8019264:	69bb      	ldr	r3, [r7, #24]
 8019266:	4293      	cmp	r3, r2
 8019268:	d114      	bne.n	8019294 <tcp_output+0x120>
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801926e:	2b00      	cmp	r3, #0
 8019270:	d110      	bne.n	8019294 <tcp_output+0x120>
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8019278:	2b00      	cmp	r3, #0
 801927a:	d10b      	bne.n	8019294 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	2200      	movs	r2, #0
 8019280:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	2201      	movs	r2, #1
 8019288:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	2200      	movs	r2, #0
 8019290:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	8b5b      	ldrh	r3, [r3, #26]
 8019298:	f003 0302 	and.w	r3, r3, #2
 801929c:	2b00      	cmp	r3, #0
 801929e:	f000 814d 	beq.w	801953c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80192a2:	6878      	ldr	r0, [r7, #4]
 80192a4:	f000 fd6c 	bl	8019d80 <tcp_send_empty_ack>
 80192a8:	4603      	mov	r3, r0
 80192aa:	e152      	b.n	8019552 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	2200      	movs	r2, #0
 80192b0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80192b8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80192ba:	6a3b      	ldr	r3, [r7, #32]
 80192bc:	2b00      	cmp	r3, #0
 80192be:	f000 811c 	beq.w	80194fa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80192c2:	e002      	b.n	80192ca <tcp_output+0x156>
 80192c4:	6a3b      	ldr	r3, [r7, #32]
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	623b      	str	r3, [r7, #32]
 80192ca:	6a3b      	ldr	r3, [r7, #32]
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	d1f8      	bne.n	80192c4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80192d2:	e112      	b.n	80194fa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80192d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192d6:	68db      	ldr	r3, [r3, #12]
 80192d8:	899b      	ldrh	r3, [r3, #12]
 80192da:	b29b      	uxth	r3, r3
 80192dc:	4618      	mov	r0, r3
 80192de:	f7f8 ffb5 	bl	801224c <lwip_htons>
 80192e2:	4603      	mov	r3, r0
 80192e4:	b2db      	uxtb	r3, r3
 80192e6:	f003 0304 	and.w	r3, r3, #4
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d006      	beq.n	80192fc <tcp_output+0x188>
 80192ee:	4b2f      	ldr	r3, [pc, #188]	@ (80193ac <tcp_output+0x238>)
 80192f0:	f240 5236 	movw	r2, #1334	@ 0x536
 80192f4:	4932      	ldr	r1, [pc, #200]	@ (80193c0 <tcp_output+0x24c>)
 80192f6:	482f      	ldr	r0, [pc, #188]	@ (80193b4 <tcp_output+0x240>)
 80192f8:	f004 ff28 	bl	801e14c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019300:	2b00      	cmp	r3, #0
 8019302:	d01f      	beq.n	8019344 <tcp_output+0x1d0>
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	8b5b      	ldrh	r3, [r3, #26]
 8019308:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801930c:	2b00      	cmp	r3, #0
 801930e:	d119      	bne.n	8019344 <tcp_output+0x1d0>
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019314:	2b00      	cmp	r3, #0
 8019316:	d00b      	beq.n	8019330 <tcp_output+0x1bc>
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	2b00      	cmp	r3, #0
 8019320:	d110      	bne.n	8019344 <tcp_output+0x1d0>
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019326:	891a      	ldrh	r2, [r3, #8]
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801932c:	429a      	cmp	r2, r3
 801932e:	d209      	bcs.n	8019344 <tcp_output+0x1d0>
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8019336:	2b00      	cmp	r3, #0
 8019338:	d004      	beq.n	8019344 <tcp_output+0x1d0>
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019340:	2b08      	cmp	r3, #8
 8019342:	d901      	bls.n	8019348 <tcp_output+0x1d4>
 8019344:	2301      	movs	r3, #1
 8019346:	e000      	b.n	801934a <tcp_output+0x1d6>
 8019348:	2300      	movs	r3, #0
 801934a:	2b00      	cmp	r3, #0
 801934c:	d106      	bne.n	801935c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	8b5b      	ldrh	r3, [r3, #26]
 8019352:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019356:	2b00      	cmp	r3, #0
 8019358:	f000 80e4 	beq.w	8019524 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	7d1b      	ldrb	r3, [r3, #20]
 8019360:	2b02      	cmp	r3, #2
 8019362:	d00d      	beq.n	8019380 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019366:	68db      	ldr	r3, [r3, #12]
 8019368:	899b      	ldrh	r3, [r3, #12]
 801936a:	b29c      	uxth	r4, r3
 801936c:	2010      	movs	r0, #16
 801936e:	f7f8 ff6d 	bl	801224c <lwip_htons>
 8019372:	4603      	mov	r3, r0
 8019374:	461a      	mov	r2, r3
 8019376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019378:	68db      	ldr	r3, [r3, #12]
 801937a:	4322      	orrs	r2, r4
 801937c:	b292      	uxth	r2, r2
 801937e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019380:	697a      	ldr	r2, [r7, #20]
 8019382:	6879      	ldr	r1, [r7, #4]
 8019384:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019386:	f000 f909 	bl	801959c <tcp_output_segment>
 801938a:	4603      	mov	r3, r0
 801938c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801938e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019392:	2b00      	cmp	r3, #0
 8019394:	d016      	beq.n	80193c4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	8b5b      	ldrh	r3, [r3, #26]
 801939a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801939e:	b29a      	uxth	r2, r3
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	835a      	strh	r2, [r3, #26]
      return err;
 80193a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80193a8:	e0d3      	b.n	8019552 <tcp_output+0x3de>
 80193aa:	bf00      	nop
 80193ac:	080216c4 	.word	0x080216c4
 80193b0:	08021c08 	.word	0x08021c08
 80193b4:	08021718 	.word	0x08021718
 80193b8:	08021c20 	.word	0x08021c20
 80193bc:	2000e53c 	.word	0x2000e53c
 80193c0:	08021c48 	.word	0x08021c48
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80193c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193c6:	681a      	ldr	r2, [r3, #0]
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	7d1b      	ldrb	r3, [r3, #20]
 80193d0:	2b02      	cmp	r3, #2
 80193d2:	d006      	beq.n	80193e2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	8b5b      	ldrh	r3, [r3, #26]
 80193d8:	f023 0303 	bic.w	r3, r3, #3
 80193dc:	b29a      	uxth	r2, r3
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80193e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193e4:	68db      	ldr	r3, [r3, #12]
 80193e6:	685b      	ldr	r3, [r3, #4]
 80193e8:	4618      	mov	r0, r3
 80193ea:	f7f8 ff45 	bl	8012278 <lwip_htonl>
 80193ee:	4604      	mov	r4, r0
 80193f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193f2:	891b      	ldrh	r3, [r3, #8]
 80193f4:	461d      	mov	r5, r3
 80193f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193f8:	68db      	ldr	r3, [r3, #12]
 80193fa:	899b      	ldrh	r3, [r3, #12]
 80193fc:	b29b      	uxth	r3, r3
 80193fe:	4618      	mov	r0, r3
 8019400:	f7f8 ff24 	bl	801224c <lwip_htons>
 8019404:	4603      	mov	r3, r0
 8019406:	b2db      	uxtb	r3, r3
 8019408:	f003 0303 	and.w	r3, r3, #3
 801940c:	2b00      	cmp	r3, #0
 801940e:	d001      	beq.n	8019414 <tcp_output+0x2a0>
 8019410:	2301      	movs	r3, #1
 8019412:	e000      	b.n	8019416 <tcp_output+0x2a2>
 8019414:	2300      	movs	r3, #0
 8019416:	442b      	add	r3, r5
 8019418:	4423      	add	r3, r4
 801941a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019420:	68bb      	ldr	r3, [r7, #8]
 8019422:	1ad3      	subs	r3, r2, r3
 8019424:	2b00      	cmp	r3, #0
 8019426:	da02      	bge.n	801942e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	68ba      	ldr	r2, [r7, #8]
 801942c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801942e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019430:	891b      	ldrh	r3, [r3, #8]
 8019432:	461c      	mov	r4, r3
 8019434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019436:	68db      	ldr	r3, [r3, #12]
 8019438:	899b      	ldrh	r3, [r3, #12]
 801943a:	b29b      	uxth	r3, r3
 801943c:	4618      	mov	r0, r3
 801943e:	f7f8 ff05 	bl	801224c <lwip_htons>
 8019442:	4603      	mov	r3, r0
 8019444:	b2db      	uxtb	r3, r3
 8019446:	f003 0303 	and.w	r3, r3, #3
 801944a:	2b00      	cmp	r3, #0
 801944c:	d001      	beq.n	8019452 <tcp_output+0x2de>
 801944e:	2301      	movs	r3, #1
 8019450:	e000      	b.n	8019454 <tcp_output+0x2e0>
 8019452:	2300      	movs	r3, #0
 8019454:	4423      	add	r3, r4
 8019456:	2b00      	cmp	r3, #0
 8019458:	d049      	beq.n	80194ee <tcp_output+0x37a>
      seg->next = NULL;
 801945a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801945c:	2200      	movs	r2, #0
 801945e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019464:	2b00      	cmp	r3, #0
 8019466:	d105      	bne.n	8019474 <tcp_output+0x300>
        pcb->unacked = seg;
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801946c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801946e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019470:	623b      	str	r3, [r7, #32]
 8019472:	e03f      	b.n	80194f4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8019474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019476:	68db      	ldr	r3, [r3, #12]
 8019478:	685b      	ldr	r3, [r3, #4]
 801947a:	4618      	mov	r0, r3
 801947c:	f7f8 fefc 	bl	8012278 <lwip_htonl>
 8019480:	4604      	mov	r4, r0
 8019482:	6a3b      	ldr	r3, [r7, #32]
 8019484:	68db      	ldr	r3, [r3, #12]
 8019486:	685b      	ldr	r3, [r3, #4]
 8019488:	4618      	mov	r0, r3
 801948a:	f7f8 fef5 	bl	8012278 <lwip_htonl>
 801948e:	4603      	mov	r3, r0
 8019490:	1ae3      	subs	r3, r4, r3
 8019492:	2b00      	cmp	r3, #0
 8019494:	da24      	bge.n	80194e0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	3370      	adds	r3, #112	@ 0x70
 801949a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801949c:	e002      	b.n	80194a4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801949e:	69fb      	ldr	r3, [r7, #28]
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80194a4:	69fb      	ldr	r3, [r7, #28]
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d011      	beq.n	80194d0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80194ac:	69fb      	ldr	r3, [r7, #28]
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	68db      	ldr	r3, [r3, #12]
 80194b2:	685b      	ldr	r3, [r3, #4]
 80194b4:	4618      	mov	r0, r3
 80194b6:	f7f8 fedf 	bl	8012278 <lwip_htonl>
 80194ba:	4604      	mov	r4, r0
 80194bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194be:	68db      	ldr	r3, [r3, #12]
 80194c0:	685b      	ldr	r3, [r3, #4]
 80194c2:	4618      	mov	r0, r3
 80194c4:	f7f8 fed8 	bl	8012278 <lwip_htonl>
 80194c8:	4603      	mov	r3, r0
 80194ca:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	dbe6      	blt.n	801949e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80194d0:	69fb      	ldr	r3, [r7, #28]
 80194d2:	681a      	ldr	r2, [r3, #0]
 80194d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194d6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80194d8:	69fb      	ldr	r3, [r7, #28]
 80194da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80194dc:	601a      	str	r2, [r3, #0]
 80194de:	e009      	b.n	80194f4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80194e0:	6a3b      	ldr	r3, [r7, #32]
 80194e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80194e4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80194e6:	6a3b      	ldr	r3, [r7, #32]
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	623b      	str	r3, [r7, #32]
 80194ec:	e002      	b.n	80194f4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80194ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80194f0:	f7fb ff1f 	bl	8015332 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80194f8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80194fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d012      	beq.n	8019526 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8019500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019502:	68db      	ldr	r3, [r3, #12]
 8019504:	685b      	ldr	r3, [r3, #4]
 8019506:	4618      	mov	r0, r3
 8019508:	f7f8 feb6 	bl	8012278 <lwip_htonl>
 801950c:	4602      	mov	r2, r0
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019512:	1ad3      	subs	r3, r2, r3
 8019514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019516:	8912      	ldrh	r2, [r2, #8]
 8019518:	4413      	add	r3, r2
  while (seg != NULL &&
 801951a:	69ba      	ldr	r2, [r7, #24]
 801951c:	429a      	cmp	r2, r3
 801951e:	f4bf aed9 	bcs.w	80192d4 <tcp_output+0x160>
 8019522:	e000      	b.n	8019526 <tcp_output+0x3b2>
      break;
 8019524:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801952a:	2b00      	cmp	r3, #0
 801952c:	d108      	bne.n	8019540 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	2200      	movs	r2, #0
 8019532:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8019536:	e004      	b.n	8019542 <tcp_output+0x3ce>
    goto output_done;
 8019538:	bf00      	nop
 801953a:	e002      	b.n	8019542 <tcp_output+0x3ce>
    goto output_done;
 801953c:	bf00      	nop
 801953e:	e000      	b.n	8019542 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8019540:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	8b5b      	ldrh	r3, [r3, #26]
 8019546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801954a:	b29a      	uxth	r2, r3
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8019550:	2300      	movs	r3, #0
}
 8019552:	4618      	mov	r0, r3
 8019554:	3728      	adds	r7, #40	@ 0x28
 8019556:	46bd      	mov	sp, r7
 8019558:	bdb0      	pop	{r4, r5, r7, pc}
 801955a:	bf00      	nop

0801955c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801955c:	b580      	push	{r7, lr}
 801955e:	b082      	sub	sp, #8
 8019560:	af00      	add	r7, sp, #0
 8019562:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	2b00      	cmp	r3, #0
 8019568:	d106      	bne.n	8019578 <tcp_output_segment_busy+0x1c>
 801956a:	4b09      	ldr	r3, [pc, #36]	@ (8019590 <tcp_output_segment_busy+0x34>)
 801956c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8019570:	4908      	ldr	r1, [pc, #32]	@ (8019594 <tcp_output_segment_busy+0x38>)
 8019572:	4809      	ldr	r0, [pc, #36]	@ (8019598 <tcp_output_segment_busy+0x3c>)
 8019574:	f004 fdea 	bl	801e14c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	685b      	ldr	r3, [r3, #4]
 801957c:	7b9b      	ldrb	r3, [r3, #14]
 801957e:	2b01      	cmp	r3, #1
 8019580:	d001      	beq.n	8019586 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8019582:	2301      	movs	r3, #1
 8019584:	e000      	b.n	8019588 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8019586:	2300      	movs	r3, #0
}
 8019588:	4618      	mov	r0, r3
 801958a:	3708      	adds	r7, #8
 801958c:	46bd      	mov	sp, r7
 801958e:	bd80      	pop	{r7, pc}
 8019590:	080216c4 	.word	0x080216c4
 8019594:	08021c60 	.word	0x08021c60
 8019598:	08021718 	.word	0x08021718

0801959c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801959c:	b5b0      	push	{r4, r5, r7, lr}
 801959e:	b08c      	sub	sp, #48	@ 0x30
 80195a0:	af04      	add	r7, sp, #16
 80195a2:	60f8      	str	r0, [r7, #12]
 80195a4:	60b9      	str	r1, [r7, #8]
 80195a6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80195a8:	68fb      	ldr	r3, [r7, #12]
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d106      	bne.n	80195bc <tcp_output_segment+0x20>
 80195ae:	4b64      	ldr	r3, [pc, #400]	@ (8019740 <tcp_output_segment+0x1a4>)
 80195b0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80195b4:	4963      	ldr	r1, [pc, #396]	@ (8019744 <tcp_output_segment+0x1a8>)
 80195b6:	4864      	ldr	r0, [pc, #400]	@ (8019748 <tcp_output_segment+0x1ac>)
 80195b8:	f004 fdc8 	bl	801e14c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80195bc:	68bb      	ldr	r3, [r7, #8]
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d106      	bne.n	80195d0 <tcp_output_segment+0x34>
 80195c2:	4b5f      	ldr	r3, [pc, #380]	@ (8019740 <tcp_output_segment+0x1a4>)
 80195c4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80195c8:	4960      	ldr	r1, [pc, #384]	@ (801974c <tcp_output_segment+0x1b0>)
 80195ca:	485f      	ldr	r0, [pc, #380]	@ (8019748 <tcp_output_segment+0x1ac>)
 80195cc:	f004 fdbe 	bl	801e14c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d106      	bne.n	80195e4 <tcp_output_segment+0x48>
 80195d6:	4b5a      	ldr	r3, [pc, #360]	@ (8019740 <tcp_output_segment+0x1a4>)
 80195d8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80195dc:	495c      	ldr	r1, [pc, #368]	@ (8019750 <tcp_output_segment+0x1b4>)
 80195de:	485a      	ldr	r0, [pc, #360]	@ (8019748 <tcp_output_segment+0x1ac>)
 80195e0:	f004 fdb4 	bl	801e14c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80195e4:	68f8      	ldr	r0, [r7, #12]
 80195e6:	f7ff ffb9 	bl	801955c <tcp_output_segment_busy>
 80195ea:	4603      	mov	r3, r0
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d001      	beq.n	80195f4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80195f0:	2300      	movs	r3, #0
 80195f2:	e0a1      	b.n	8019738 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80195f4:	68bb      	ldr	r3, [r7, #8]
 80195f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80195f8:	68fb      	ldr	r3, [r7, #12]
 80195fa:	68dc      	ldr	r4, [r3, #12]
 80195fc:	4610      	mov	r0, r2
 80195fe:	f7f8 fe3b 	bl	8012278 <lwip_htonl>
 8019602:	4603      	mov	r3, r0
 8019604:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8019606:	68bb      	ldr	r3, [r7, #8]
 8019608:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	68dc      	ldr	r4, [r3, #12]
 801960e:	4610      	mov	r0, r2
 8019610:	f7f8 fe1c 	bl	801224c <lwip_htons>
 8019614:	4603      	mov	r3, r0
 8019616:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019618:	68bb      	ldr	r3, [r7, #8]
 801961a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801961c:	68ba      	ldr	r2, [r7, #8]
 801961e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8019620:	441a      	add	r2, r3
 8019622:	68bb      	ldr	r3, [r7, #8]
 8019624:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	68db      	ldr	r3, [r3, #12]
 801962a:	3314      	adds	r3, #20
 801962c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	7a9b      	ldrb	r3, [r3, #10]
 8019632:	f003 0301 	and.w	r3, r3, #1
 8019636:	2b00      	cmp	r3, #0
 8019638:	d015      	beq.n	8019666 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801963a:	68bb      	ldr	r3, [r7, #8]
 801963c:	3304      	adds	r3, #4
 801963e:	461a      	mov	r2, r3
 8019640:	6879      	ldr	r1, [r7, #4]
 8019642:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8019646:	f7fc fa39 	bl	8015abc <tcp_eff_send_mss_netif>
 801964a:	4603      	mov	r3, r0
 801964c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801964e:	8b7b      	ldrh	r3, [r7, #26]
 8019650:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8019654:	4618      	mov	r0, r3
 8019656:	f7f8 fe0f 	bl	8012278 <lwip_htonl>
 801965a:	4602      	mov	r2, r0
 801965c:	69fb      	ldr	r3, [r7, #28]
 801965e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8019660:	69fb      	ldr	r3, [r7, #28]
 8019662:	3304      	adds	r3, #4
 8019664:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8019666:	68bb      	ldr	r3, [r7, #8]
 8019668:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801966c:	2b00      	cmp	r3, #0
 801966e:	da02      	bge.n	8019676 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8019670:	68bb      	ldr	r3, [r7, #8]
 8019672:	2200      	movs	r2, #0
 8019674:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8019676:	68bb      	ldr	r3, [r7, #8]
 8019678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801967a:	2b00      	cmp	r3, #0
 801967c:	d10c      	bne.n	8019698 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801967e:	4b35      	ldr	r3, [pc, #212]	@ (8019754 <tcp_output_segment+0x1b8>)
 8019680:	681a      	ldr	r2, [r3, #0]
 8019682:	68bb      	ldr	r3, [r7, #8]
 8019684:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	68db      	ldr	r3, [r3, #12]
 801968a:	685b      	ldr	r3, [r3, #4]
 801968c:	4618      	mov	r0, r3
 801968e:	f7f8 fdf3 	bl	8012278 <lwip_htonl>
 8019692:	4602      	mov	r2, r0
 8019694:	68bb      	ldr	r3, [r7, #8]
 8019696:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8019698:	68fb      	ldr	r3, [r7, #12]
 801969a:	68da      	ldr	r2, [r3, #12]
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	685b      	ldr	r3, [r3, #4]
 80196a0:	685b      	ldr	r3, [r3, #4]
 80196a2:	1ad3      	subs	r3, r2, r3
 80196a4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80196a6:	68fb      	ldr	r3, [r7, #12]
 80196a8:	685b      	ldr	r3, [r3, #4]
 80196aa:	8959      	ldrh	r1, [r3, #10]
 80196ac:	68fb      	ldr	r3, [r7, #12]
 80196ae:	685b      	ldr	r3, [r3, #4]
 80196b0:	8b3a      	ldrh	r2, [r7, #24]
 80196b2:	1a8a      	subs	r2, r1, r2
 80196b4:	b292      	uxth	r2, r2
 80196b6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	685b      	ldr	r3, [r3, #4]
 80196bc:	8919      	ldrh	r1, [r3, #8]
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	685b      	ldr	r3, [r3, #4]
 80196c2:	8b3a      	ldrh	r2, [r7, #24]
 80196c4:	1a8a      	subs	r2, r1, r2
 80196c6:	b292      	uxth	r2, r2
 80196c8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80196ca:	68fb      	ldr	r3, [r7, #12]
 80196cc:	685b      	ldr	r3, [r3, #4]
 80196ce:	68fa      	ldr	r2, [r7, #12]
 80196d0:	68d2      	ldr	r2, [r2, #12]
 80196d2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	68db      	ldr	r3, [r3, #12]
 80196d8:	2200      	movs	r2, #0
 80196da:	741a      	strb	r2, [r3, #16]
 80196dc:	2200      	movs	r2, #0
 80196de:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	68da      	ldr	r2, [r3, #12]
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	7a9b      	ldrb	r3, [r3, #10]
 80196e8:	f003 0301 	and.w	r3, r3, #1
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d001      	beq.n	80196f4 <tcp_output_segment+0x158>
 80196f0:	2318      	movs	r3, #24
 80196f2:	e000      	b.n	80196f6 <tcp_output_segment+0x15a>
 80196f4:	2314      	movs	r3, #20
 80196f6:	4413      	add	r3, r2
 80196f8:	69fa      	ldr	r2, [r7, #28]
 80196fa:	429a      	cmp	r2, r3
 80196fc:	d006      	beq.n	801970c <tcp_output_segment+0x170>
 80196fe:	4b10      	ldr	r3, [pc, #64]	@ (8019740 <tcp_output_segment+0x1a4>)
 8019700:	f240 621c 	movw	r2, #1564	@ 0x61c
 8019704:	4914      	ldr	r1, [pc, #80]	@ (8019758 <tcp_output_segment+0x1bc>)
 8019706:	4810      	ldr	r0, [pc, #64]	@ (8019748 <tcp_output_segment+0x1ac>)
 8019708:	f004 fd20 	bl	801e14c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	6858      	ldr	r0, [r3, #4]
 8019710:	68b9      	ldr	r1, [r7, #8]
 8019712:	68bb      	ldr	r3, [r7, #8]
 8019714:	1d1c      	adds	r4, r3, #4
 8019716:	68bb      	ldr	r3, [r7, #8]
 8019718:	7add      	ldrb	r5, [r3, #11]
 801971a:	68bb      	ldr	r3, [r7, #8]
 801971c:	7a9b      	ldrb	r3, [r3, #10]
 801971e:	687a      	ldr	r2, [r7, #4]
 8019720:	9202      	str	r2, [sp, #8]
 8019722:	2206      	movs	r2, #6
 8019724:	9201      	str	r2, [sp, #4]
 8019726:	9300      	str	r3, [sp, #0]
 8019728:	462b      	mov	r3, r5
 801972a:	4622      	mov	r2, r4
 801972c:	f002 fbaa 	bl	801be84 <ip4_output_if>
 8019730:	4603      	mov	r3, r0
 8019732:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8019734:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019738:	4618      	mov	r0, r3
 801973a:	3720      	adds	r7, #32
 801973c:	46bd      	mov	sp, r7
 801973e:	bdb0      	pop	{r4, r5, r7, pc}
 8019740:	080216c4 	.word	0x080216c4
 8019744:	08021c88 	.word	0x08021c88
 8019748:	08021718 	.word	0x08021718
 801974c:	08021ca8 	.word	0x08021ca8
 8019750:	08021cc8 	.word	0x08021cc8
 8019754:	2000e4f0 	.word	0x2000e4f0
 8019758:	08021cec 	.word	0x08021cec

0801975c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801975c:	b5b0      	push	{r4, r5, r7, lr}
 801975e:	b084      	sub	sp, #16
 8019760:	af00      	add	r7, sp, #0
 8019762:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	2b00      	cmp	r3, #0
 8019768:	d106      	bne.n	8019778 <tcp_rexmit_rto_prepare+0x1c>
 801976a:	4b31      	ldr	r3, [pc, #196]	@ (8019830 <tcp_rexmit_rto_prepare+0xd4>)
 801976c:	f240 6263 	movw	r2, #1635	@ 0x663
 8019770:	4930      	ldr	r1, [pc, #192]	@ (8019834 <tcp_rexmit_rto_prepare+0xd8>)
 8019772:	4831      	ldr	r0, [pc, #196]	@ (8019838 <tcp_rexmit_rto_prepare+0xdc>)
 8019774:	f004 fcea 	bl	801e14c <iprintf>

  if (pcb->unacked == NULL) {
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801977c:	2b00      	cmp	r3, #0
 801977e:	d102      	bne.n	8019786 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8019780:	f06f 0305 	mvn.w	r3, #5
 8019784:	e050      	b.n	8019828 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801978a:	60fb      	str	r3, [r7, #12]
 801978c:	e00b      	b.n	80197a6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801978e:	68f8      	ldr	r0, [r7, #12]
 8019790:	f7ff fee4 	bl	801955c <tcp_output_segment_busy>
 8019794:	4603      	mov	r3, r0
 8019796:	2b00      	cmp	r3, #0
 8019798:	d002      	beq.n	80197a0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801979a:	f06f 0305 	mvn.w	r3, #5
 801979e:	e043      	b.n	8019828 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	60fb      	str	r3, [r7, #12]
 80197a6:	68fb      	ldr	r3, [r7, #12]
 80197a8:	681b      	ldr	r3, [r3, #0]
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	d1ef      	bne.n	801978e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80197ae:	68f8      	ldr	r0, [r7, #12]
 80197b0:	f7ff fed4 	bl	801955c <tcp_output_segment_busy>
 80197b4:	4603      	mov	r3, r0
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d002      	beq.n	80197c0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80197ba:	f06f 0305 	mvn.w	r3, #5
 80197be:	e033      	b.n	8019828 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	2200      	movs	r2, #0
 80197d4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	8b5b      	ldrh	r3, [r3, #26]
 80197da:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80197de:	b29a      	uxth	r2, r3
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	68db      	ldr	r3, [r3, #12]
 80197e8:	685b      	ldr	r3, [r3, #4]
 80197ea:	4618      	mov	r0, r3
 80197ec:	f7f8 fd44 	bl	8012278 <lwip_htonl>
 80197f0:	4604      	mov	r4, r0
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	891b      	ldrh	r3, [r3, #8]
 80197f6:	461d      	mov	r5, r3
 80197f8:	68fb      	ldr	r3, [r7, #12]
 80197fa:	68db      	ldr	r3, [r3, #12]
 80197fc:	899b      	ldrh	r3, [r3, #12]
 80197fe:	b29b      	uxth	r3, r3
 8019800:	4618      	mov	r0, r3
 8019802:	f7f8 fd23 	bl	801224c <lwip_htons>
 8019806:	4603      	mov	r3, r0
 8019808:	b2db      	uxtb	r3, r3
 801980a:	f003 0303 	and.w	r3, r3, #3
 801980e:	2b00      	cmp	r3, #0
 8019810:	d001      	beq.n	8019816 <tcp_rexmit_rto_prepare+0xba>
 8019812:	2301      	movs	r3, #1
 8019814:	e000      	b.n	8019818 <tcp_rexmit_rto_prepare+0xbc>
 8019816:	2300      	movs	r3, #0
 8019818:	442b      	add	r3, r5
 801981a:	18e2      	adds	r2, r4, r3
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	2200      	movs	r2, #0
 8019824:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8019826:	2300      	movs	r3, #0
}
 8019828:	4618      	mov	r0, r3
 801982a:	3710      	adds	r7, #16
 801982c:	46bd      	mov	sp, r7
 801982e:	bdb0      	pop	{r4, r5, r7, pc}
 8019830:	080216c4 	.word	0x080216c4
 8019834:	08021d00 	.word	0x08021d00
 8019838:	08021718 	.word	0x08021718

0801983c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801983c:	b580      	push	{r7, lr}
 801983e:	b082      	sub	sp, #8
 8019840:	af00      	add	r7, sp, #0
 8019842:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	2b00      	cmp	r3, #0
 8019848:	d106      	bne.n	8019858 <tcp_rexmit_rto_commit+0x1c>
 801984a:	4b0d      	ldr	r3, [pc, #52]	@ (8019880 <tcp_rexmit_rto_commit+0x44>)
 801984c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8019850:	490c      	ldr	r1, [pc, #48]	@ (8019884 <tcp_rexmit_rto_commit+0x48>)
 8019852:	480d      	ldr	r0, [pc, #52]	@ (8019888 <tcp_rexmit_rto_commit+0x4c>)
 8019854:	f004 fc7a 	bl	801e14c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801985e:	2bff      	cmp	r3, #255	@ 0xff
 8019860:	d007      	beq.n	8019872 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019868:	3301      	adds	r3, #1
 801986a:	b2da      	uxtb	r2, r3
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8019872:	6878      	ldr	r0, [r7, #4]
 8019874:	f7ff fc7e 	bl	8019174 <tcp_output>
}
 8019878:	bf00      	nop
 801987a:	3708      	adds	r7, #8
 801987c:	46bd      	mov	sp, r7
 801987e:	bd80      	pop	{r7, pc}
 8019880:	080216c4 	.word	0x080216c4
 8019884:	08021d24 	.word	0x08021d24
 8019888:	08021718 	.word	0x08021718

0801988c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801988c:	b580      	push	{r7, lr}
 801988e:	b082      	sub	sp, #8
 8019890:	af00      	add	r7, sp, #0
 8019892:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	2b00      	cmp	r3, #0
 8019898:	d106      	bne.n	80198a8 <tcp_rexmit_rto+0x1c>
 801989a:	4b0a      	ldr	r3, [pc, #40]	@ (80198c4 <tcp_rexmit_rto+0x38>)
 801989c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80198a0:	4909      	ldr	r1, [pc, #36]	@ (80198c8 <tcp_rexmit_rto+0x3c>)
 80198a2:	480a      	ldr	r0, [pc, #40]	@ (80198cc <tcp_rexmit_rto+0x40>)
 80198a4:	f004 fc52 	bl	801e14c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80198a8:	6878      	ldr	r0, [r7, #4]
 80198aa:	f7ff ff57 	bl	801975c <tcp_rexmit_rto_prepare>
 80198ae:	4603      	mov	r3, r0
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d102      	bne.n	80198ba <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80198b4:	6878      	ldr	r0, [r7, #4]
 80198b6:	f7ff ffc1 	bl	801983c <tcp_rexmit_rto_commit>
  }
}
 80198ba:	bf00      	nop
 80198bc:	3708      	adds	r7, #8
 80198be:	46bd      	mov	sp, r7
 80198c0:	bd80      	pop	{r7, pc}
 80198c2:	bf00      	nop
 80198c4:	080216c4 	.word	0x080216c4
 80198c8:	08021d48 	.word	0x08021d48
 80198cc:	08021718 	.word	0x08021718

080198d0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80198d0:	b590      	push	{r4, r7, lr}
 80198d2:	b085      	sub	sp, #20
 80198d4:	af00      	add	r7, sp, #0
 80198d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	2b00      	cmp	r3, #0
 80198dc:	d106      	bne.n	80198ec <tcp_rexmit+0x1c>
 80198de:	4b2f      	ldr	r3, [pc, #188]	@ (801999c <tcp_rexmit+0xcc>)
 80198e0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80198e4:	492e      	ldr	r1, [pc, #184]	@ (80199a0 <tcp_rexmit+0xd0>)
 80198e6:	482f      	ldr	r0, [pc, #188]	@ (80199a4 <tcp_rexmit+0xd4>)
 80198e8:	f004 fc30 	bl	801e14c <iprintf>

  if (pcb->unacked == NULL) {
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d102      	bne.n	80198fa <tcp_rexmit+0x2a>
    return ERR_VAL;
 80198f4:	f06f 0305 	mvn.w	r3, #5
 80198f8:	e04c      	b.n	8019994 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80198fe:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8019900:	68b8      	ldr	r0, [r7, #8]
 8019902:	f7ff fe2b 	bl	801955c <tcp_output_segment_busy>
 8019906:	4603      	mov	r3, r0
 8019908:	2b00      	cmp	r3, #0
 801990a:	d002      	beq.n	8019912 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801990c:	f06f 0305 	mvn.w	r3, #5
 8019910:	e040      	b.n	8019994 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8019912:	68bb      	ldr	r3, [r7, #8]
 8019914:	681a      	ldr	r2, [r3, #0]
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	336c      	adds	r3, #108	@ 0x6c
 801991e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019920:	e002      	b.n	8019928 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8019922:	68fb      	ldr	r3, [r7, #12]
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	2b00      	cmp	r3, #0
 801992e:	d011      	beq.n	8019954 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	68db      	ldr	r3, [r3, #12]
 8019936:	685b      	ldr	r3, [r3, #4]
 8019938:	4618      	mov	r0, r3
 801993a:	f7f8 fc9d 	bl	8012278 <lwip_htonl>
 801993e:	4604      	mov	r4, r0
 8019940:	68bb      	ldr	r3, [r7, #8]
 8019942:	68db      	ldr	r3, [r3, #12]
 8019944:	685b      	ldr	r3, [r3, #4]
 8019946:	4618      	mov	r0, r3
 8019948:	f7f8 fc96 	bl	8012278 <lwip_htonl>
 801994c:	4603      	mov	r3, r0
 801994e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8019950:	2b00      	cmp	r3, #0
 8019952:	dbe6      	blt.n	8019922 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	681a      	ldr	r2, [r3, #0]
 8019958:	68bb      	ldr	r3, [r7, #8]
 801995a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	68ba      	ldr	r2, [r7, #8]
 8019960:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8019962:	68bb      	ldr	r3, [r7, #8]
 8019964:	681b      	ldr	r3, [r3, #0]
 8019966:	2b00      	cmp	r3, #0
 8019968:	d103      	bne.n	8019972 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	2200      	movs	r2, #0
 801996e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019978:	2bff      	cmp	r3, #255	@ 0xff
 801997a:	d007      	beq.n	801998c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019982:	3301      	adds	r3, #1
 8019984:	b2da      	uxtb	r2, r3
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	2200      	movs	r2, #0
 8019990:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8019992:	2300      	movs	r3, #0
}
 8019994:	4618      	mov	r0, r3
 8019996:	3714      	adds	r7, #20
 8019998:	46bd      	mov	sp, r7
 801999a:	bd90      	pop	{r4, r7, pc}
 801999c:	080216c4 	.word	0x080216c4
 80199a0:	08021d64 	.word	0x08021d64
 80199a4:	08021718 	.word	0x08021718

080199a8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80199a8:	b580      	push	{r7, lr}
 80199aa:	b082      	sub	sp, #8
 80199ac:	af00      	add	r7, sp, #0
 80199ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d106      	bne.n	80199c4 <tcp_rexmit_fast+0x1c>
 80199b6:	4b2a      	ldr	r3, [pc, #168]	@ (8019a60 <tcp_rexmit_fast+0xb8>)
 80199b8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80199bc:	4929      	ldr	r1, [pc, #164]	@ (8019a64 <tcp_rexmit_fast+0xbc>)
 80199be:	482a      	ldr	r0, [pc, #168]	@ (8019a68 <tcp_rexmit_fast+0xc0>)
 80199c0:	f004 fbc4 	bl	801e14c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d045      	beq.n	8019a58 <tcp_rexmit_fast+0xb0>
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	8b5b      	ldrh	r3, [r3, #26]
 80199d0:	f003 0304 	and.w	r3, r3, #4
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d13f      	bne.n	8019a58 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80199d8:	6878      	ldr	r0, [r7, #4]
 80199da:	f7ff ff79 	bl	80198d0 <tcp_rexmit>
 80199de:	4603      	mov	r3, r0
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d139      	bne.n	8019a58 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80199f0:	4293      	cmp	r3, r2
 80199f2:	bf28      	it	cs
 80199f4:	4613      	movcs	r3, r2
 80199f6:	b29b      	uxth	r3, r3
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	da00      	bge.n	80199fe <tcp_rexmit_fast+0x56>
 80199fc:	3301      	adds	r3, #1
 80199fe:	105b      	asrs	r3, r3, #1
 8019a00:	b29a      	uxth	r2, r3
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8019a0e:	461a      	mov	r2, r3
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019a14:	005b      	lsls	r3, r3, #1
 8019a16:	429a      	cmp	r2, r3
 8019a18:	d206      	bcs.n	8019a28 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019a1e:	005b      	lsls	r3, r3, #1
 8019a20:	b29a      	uxth	r2, r3
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019a32:	4619      	mov	r1, r3
 8019a34:	0049      	lsls	r1, r1, #1
 8019a36:	440b      	add	r3, r1
 8019a38:	b29b      	uxth	r3, r3
 8019a3a:	4413      	add	r3, r2
 8019a3c:	b29a      	uxth	r2, r3
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	8b5b      	ldrh	r3, [r3, #26]
 8019a48:	f043 0304 	orr.w	r3, r3, #4
 8019a4c:	b29a      	uxth	r2, r3
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	2200      	movs	r2, #0
 8019a56:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8019a58:	bf00      	nop
 8019a5a:	3708      	adds	r7, #8
 8019a5c:	46bd      	mov	sp, r7
 8019a5e:	bd80      	pop	{r7, pc}
 8019a60:	080216c4 	.word	0x080216c4
 8019a64:	08021d7c 	.word	0x08021d7c
 8019a68:	08021718 	.word	0x08021718

08019a6c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8019a6c:	b580      	push	{r7, lr}
 8019a6e:	b086      	sub	sp, #24
 8019a70:	af00      	add	r7, sp, #0
 8019a72:	60f8      	str	r0, [r7, #12]
 8019a74:	607b      	str	r3, [r7, #4]
 8019a76:	460b      	mov	r3, r1
 8019a78:	817b      	strh	r3, [r7, #10]
 8019a7a:	4613      	mov	r3, r2
 8019a7c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8019a7e:	897a      	ldrh	r2, [r7, #10]
 8019a80:	893b      	ldrh	r3, [r7, #8]
 8019a82:	4413      	add	r3, r2
 8019a84:	b29b      	uxth	r3, r3
 8019a86:	3314      	adds	r3, #20
 8019a88:	b29b      	uxth	r3, r3
 8019a8a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019a8e:	4619      	mov	r1, r3
 8019a90:	2022      	movs	r0, #34	@ 0x22
 8019a92:	f7f9 fce5 	bl	8013460 <pbuf_alloc>
 8019a96:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8019a98:	697b      	ldr	r3, [r7, #20]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d04d      	beq.n	8019b3a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8019a9e:	897b      	ldrh	r3, [r7, #10]
 8019aa0:	3313      	adds	r3, #19
 8019aa2:	697a      	ldr	r2, [r7, #20]
 8019aa4:	8952      	ldrh	r2, [r2, #10]
 8019aa6:	4293      	cmp	r3, r2
 8019aa8:	db06      	blt.n	8019ab8 <tcp_output_alloc_header_common+0x4c>
 8019aaa:	4b26      	ldr	r3, [pc, #152]	@ (8019b44 <tcp_output_alloc_header_common+0xd8>)
 8019aac:	f240 7223 	movw	r2, #1827	@ 0x723
 8019ab0:	4925      	ldr	r1, [pc, #148]	@ (8019b48 <tcp_output_alloc_header_common+0xdc>)
 8019ab2:	4826      	ldr	r0, [pc, #152]	@ (8019b4c <tcp_output_alloc_header_common+0xe0>)
 8019ab4:	f004 fb4a 	bl	801e14c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8019ab8:	697b      	ldr	r3, [r7, #20]
 8019aba:	685b      	ldr	r3, [r3, #4]
 8019abc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8019abe:	8c3b      	ldrh	r3, [r7, #32]
 8019ac0:	4618      	mov	r0, r3
 8019ac2:	f7f8 fbc3 	bl	801224c <lwip_htons>
 8019ac6:	4603      	mov	r3, r0
 8019ac8:	461a      	mov	r2, r3
 8019aca:	693b      	ldr	r3, [r7, #16]
 8019acc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8019ace:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019ad0:	4618      	mov	r0, r3
 8019ad2:	f7f8 fbbb 	bl	801224c <lwip_htons>
 8019ad6:	4603      	mov	r3, r0
 8019ad8:	461a      	mov	r2, r3
 8019ada:	693b      	ldr	r3, [r7, #16]
 8019adc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8019ade:	693b      	ldr	r3, [r7, #16]
 8019ae0:	687a      	ldr	r2, [r7, #4]
 8019ae2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8019ae4:	68f8      	ldr	r0, [r7, #12]
 8019ae6:	f7f8 fbc7 	bl	8012278 <lwip_htonl>
 8019aea:	4602      	mov	r2, r0
 8019aec:	693b      	ldr	r3, [r7, #16]
 8019aee:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8019af0:	897b      	ldrh	r3, [r7, #10]
 8019af2:	089b      	lsrs	r3, r3, #2
 8019af4:	b29b      	uxth	r3, r3
 8019af6:	3305      	adds	r3, #5
 8019af8:	b29b      	uxth	r3, r3
 8019afa:	031b      	lsls	r3, r3, #12
 8019afc:	b29a      	uxth	r2, r3
 8019afe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019b02:	b29b      	uxth	r3, r3
 8019b04:	4313      	orrs	r3, r2
 8019b06:	b29b      	uxth	r3, r3
 8019b08:	4618      	mov	r0, r3
 8019b0a:	f7f8 fb9f 	bl	801224c <lwip_htons>
 8019b0e:	4603      	mov	r3, r0
 8019b10:	461a      	mov	r2, r3
 8019b12:	693b      	ldr	r3, [r7, #16]
 8019b14:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8019b16:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019b18:	4618      	mov	r0, r3
 8019b1a:	f7f8 fb97 	bl	801224c <lwip_htons>
 8019b1e:	4603      	mov	r3, r0
 8019b20:	461a      	mov	r2, r3
 8019b22:	693b      	ldr	r3, [r7, #16]
 8019b24:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8019b26:	693b      	ldr	r3, [r7, #16]
 8019b28:	2200      	movs	r2, #0
 8019b2a:	741a      	strb	r2, [r3, #16]
 8019b2c:	2200      	movs	r2, #0
 8019b2e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8019b30:	693b      	ldr	r3, [r7, #16]
 8019b32:	2200      	movs	r2, #0
 8019b34:	749a      	strb	r2, [r3, #18]
 8019b36:	2200      	movs	r2, #0
 8019b38:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8019b3a:	697b      	ldr	r3, [r7, #20]
}
 8019b3c:	4618      	mov	r0, r3
 8019b3e:	3718      	adds	r7, #24
 8019b40:	46bd      	mov	sp, r7
 8019b42:	bd80      	pop	{r7, pc}
 8019b44:	080216c4 	.word	0x080216c4
 8019b48:	08021d9c 	.word	0x08021d9c
 8019b4c:	08021718 	.word	0x08021718

08019b50 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8019b50:	b5b0      	push	{r4, r5, r7, lr}
 8019b52:	b08a      	sub	sp, #40	@ 0x28
 8019b54:	af04      	add	r7, sp, #16
 8019b56:	60f8      	str	r0, [r7, #12]
 8019b58:	607b      	str	r3, [r7, #4]
 8019b5a:	460b      	mov	r3, r1
 8019b5c:	817b      	strh	r3, [r7, #10]
 8019b5e:	4613      	mov	r3, r2
 8019b60:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8019b62:	68fb      	ldr	r3, [r7, #12]
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d106      	bne.n	8019b76 <tcp_output_alloc_header+0x26>
 8019b68:	4b15      	ldr	r3, [pc, #84]	@ (8019bc0 <tcp_output_alloc_header+0x70>)
 8019b6a:	f240 7242 	movw	r2, #1858	@ 0x742
 8019b6e:	4915      	ldr	r1, [pc, #84]	@ (8019bc4 <tcp_output_alloc_header+0x74>)
 8019b70:	4815      	ldr	r0, [pc, #84]	@ (8019bc8 <tcp_output_alloc_header+0x78>)
 8019b72:	f004 faeb 	bl	801e14c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8019b76:	68fb      	ldr	r3, [r7, #12]
 8019b78:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8019b7a:	68fb      	ldr	r3, [r7, #12]
 8019b7c:	8adb      	ldrh	r3, [r3, #22]
 8019b7e:	68fa      	ldr	r2, [r7, #12]
 8019b80:	8b12      	ldrh	r2, [r2, #24]
 8019b82:	68f9      	ldr	r1, [r7, #12]
 8019b84:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8019b86:	893d      	ldrh	r5, [r7, #8]
 8019b88:	897c      	ldrh	r4, [r7, #10]
 8019b8a:	9103      	str	r1, [sp, #12]
 8019b8c:	2110      	movs	r1, #16
 8019b8e:	9102      	str	r1, [sp, #8]
 8019b90:	9201      	str	r2, [sp, #4]
 8019b92:	9300      	str	r3, [sp, #0]
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	462a      	mov	r2, r5
 8019b98:	4621      	mov	r1, r4
 8019b9a:	f7ff ff67 	bl	8019a6c <tcp_output_alloc_header_common>
 8019b9e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8019ba0:	697b      	ldr	r3, [r7, #20]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d006      	beq.n	8019bb4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019baa:	68fa      	ldr	r2, [r7, #12]
 8019bac:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8019bae:	441a      	add	r2, r3
 8019bb0:	68fb      	ldr	r3, [r7, #12]
 8019bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8019bb4:	697b      	ldr	r3, [r7, #20]
}
 8019bb6:	4618      	mov	r0, r3
 8019bb8:	3718      	adds	r7, #24
 8019bba:	46bd      	mov	sp, r7
 8019bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8019bbe:	bf00      	nop
 8019bc0:	080216c4 	.word	0x080216c4
 8019bc4:	08021dcc 	.word	0x08021dcc
 8019bc8:	08021718 	.word	0x08021718

08019bcc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8019bcc:	b580      	push	{r7, lr}
 8019bce:	b088      	sub	sp, #32
 8019bd0:	af00      	add	r7, sp, #0
 8019bd2:	60f8      	str	r0, [r7, #12]
 8019bd4:	60b9      	str	r1, [r7, #8]
 8019bd6:	4611      	mov	r1, r2
 8019bd8:	461a      	mov	r2, r3
 8019bda:	460b      	mov	r3, r1
 8019bdc:	71fb      	strb	r3, [r7, #7]
 8019bde:	4613      	mov	r3, r2
 8019be0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8019be2:	2300      	movs	r3, #0
 8019be4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8019be6:	68bb      	ldr	r3, [r7, #8]
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d106      	bne.n	8019bfa <tcp_output_fill_options+0x2e>
 8019bec:	4b12      	ldr	r3, [pc, #72]	@ (8019c38 <tcp_output_fill_options+0x6c>)
 8019bee:	f240 7256 	movw	r2, #1878	@ 0x756
 8019bf2:	4912      	ldr	r1, [pc, #72]	@ (8019c3c <tcp_output_fill_options+0x70>)
 8019bf4:	4812      	ldr	r0, [pc, #72]	@ (8019c40 <tcp_output_fill_options+0x74>)
 8019bf6:	f004 faa9 	bl	801e14c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8019bfa:	68bb      	ldr	r3, [r7, #8]
 8019bfc:	685b      	ldr	r3, [r3, #4]
 8019bfe:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8019c00:	69bb      	ldr	r3, [r7, #24]
 8019c02:	3314      	adds	r3, #20
 8019c04:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8019c06:	8bfb      	ldrh	r3, [r7, #30]
 8019c08:	009b      	lsls	r3, r3, #2
 8019c0a:	461a      	mov	r2, r3
 8019c0c:	79fb      	ldrb	r3, [r7, #7]
 8019c0e:	009b      	lsls	r3, r3, #2
 8019c10:	f003 0304 	and.w	r3, r3, #4
 8019c14:	4413      	add	r3, r2
 8019c16:	3314      	adds	r3, #20
 8019c18:	69ba      	ldr	r2, [r7, #24]
 8019c1a:	4413      	add	r3, r2
 8019c1c:	697a      	ldr	r2, [r7, #20]
 8019c1e:	429a      	cmp	r2, r3
 8019c20:	d006      	beq.n	8019c30 <tcp_output_fill_options+0x64>
 8019c22:	4b05      	ldr	r3, [pc, #20]	@ (8019c38 <tcp_output_fill_options+0x6c>)
 8019c24:	f240 7275 	movw	r2, #1909	@ 0x775
 8019c28:	4906      	ldr	r1, [pc, #24]	@ (8019c44 <tcp_output_fill_options+0x78>)
 8019c2a:	4805      	ldr	r0, [pc, #20]	@ (8019c40 <tcp_output_fill_options+0x74>)
 8019c2c:	f004 fa8e 	bl	801e14c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8019c30:	bf00      	nop
 8019c32:	3720      	adds	r7, #32
 8019c34:	46bd      	mov	sp, r7
 8019c36:	bd80      	pop	{r7, pc}
 8019c38:	080216c4 	.word	0x080216c4
 8019c3c:	08021df4 	.word	0x08021df4
 8019c40:	08021718 	.word	0x08021718
 8019c44:	08021cec 	.word	0x08021cec

08019c48 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8019c48:	b580      	push	{r7, lr}
 8019c4a:	b08a      	sub	sp, #40	@ 0x28
 8019c4c:	af04      	add	r7, sp, #16
 8019c4e:	60f8      	str	r0, [r7, #12]
 8019c50:	60b9      	str	r1, [r7, #8]
 8019c52:	607a      	str	r2, [r7, #4]
 8019c54:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8019c56:	68bb      	ldr	r3, [r7, #8]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d106      	bne.n	8019c6a <tcp_output_control_segment+0x22>
 8019c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8019cd0 <tcp_output_control_segment+0x88>)
 8019c5e:	f240 7287 	movw	r2, #1927	@ 0x787
 8019c62:	491c      	ldr	r1, [pc, #112]	@ (8019cd4 <tcp_output_control_segment+0x8c>)
 8019c64:	481c      	ldr	r0, [pc, #112]	@ (8019cd8 <tcp_output_control_segment+0x90>)
 8019c66:	f004 fa71 	bl	801e14c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8019c6a:	683a      	ldr	r2, [r7, #0]
 8019c6c:	6879      	ldr	r1, [r7, #4]
 8019c6e:	68f8      	ldr	r0, [r7, #12]
 8019c70:	f7fe faea 	bl	8018248 <tcp_route>
 8019c74:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8019c76:	693b      	ldr	r3, [r7, #16]
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d102      	bne.n	8019c82 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8019c7c:	23fc      	movs	r3, #252	@ 0xfc
 8019c7e:	75fb      	strb	r3, [r7, #23]
 8019c80:	e01c      	b.n	8019cbc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8019c82:	68fb      	ldr	r3, [r7, #12]
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d006      	beq.n	8019c96 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8019c88:	68fb      	ldr	r3, [r7, #12]
 8019c8a:	7adb      	ldrb	r3, [r3, #11]
 8019c8c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8019c8e:	68fb      	ldr	r3, [r7, #12]
 8019c90:	7a9b      	ldrb	r3, [r3, #10]
 8019c92:	757b      	strb	r3, [r7, #21]
 8019c94:	e003      	b.n	8019c9e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8019c96:	23ff      	movs	r3, #255	@ 0xff
 8019c98:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8019c9a:	2300      	movs	r3, #0
 8019c9c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8019c9e:	7dba      	ldrb	r2, [r7, #22]
 8019ca0:	693b      	ldr	r3, [r7, #16]
 8019ca2:	9302      	str	r3, [sp, #8]
 8019ca4:	2306      	movs	r3, #6
 8019ca6:	9301      	str	r3, [sp, #4]
 8019ca8:	7d7b      	ldrb	r3, [r7, #21]
 8019caa:	9300      	str	r3, [sp, #0]
 8019cac:	4613      	mov	r3, r2
 8019cae:	683a      	ldr	r2, [r7, #0]
 8019cb0:	6879      	ldr	r1, [r7, #4]
 8019cb2:	68b8      	ldr	r0, [r7, #8]
 8019cb4:	f002 f8e6 	bl	801be84 <ip4_output_if>
 8019cb8:	4603      	mov	r3, r0
 8019cba:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8019cbc:	68b8      	ldr	r0, [r7, #8]
 8019cbe:	f7f9 feb3 	bl	8013a28 <pbuf_free>
  return err;
 8019cc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019cc6:	4618      	mov	r0, r3
 8019cc8:	3718      	adds	r7, #24
 8019cca:	46bd      	mov	sp, r7
 8019ccc:	bd80      	pop	{r7, pc}
 8019cce:	bf00      	nop
 8019cd0:	080216c4 	.word	0x080216c4
 8019cd4:	08021e1c 	.word	0x08021e1c
 8019cd8:	08021718 	.word	0x08021718

08019cdc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8019cdc:	b590      	push	{r4, r7, lr}
 8019cde:	b08b      	sub	sp, #44	@ 0x2c
 8019ce0:	af04      	add	r7, sp, #16
 8019ce2:	60f8      	str	r0, [r7, #12]
 8019ce4:	60b9      	str	r1, [r7, #8]
 8019ce6:	607a      	str	r2, [r7, #4]
 8019ce8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8019cea:	683b      	ldr	r3, [r7, #0]
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d106      	bne.n	8019cfe <tcp_rst+0x22>
 8019cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8019d70 <tcp_rst+0x94>)
 8019cf2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8019cf6:	491f      	ldr	r1, [pc, #124]	@ (8019d74 <tcp_rst+0x98>)
 8019cf8:	481f      	ldr	r0, [pc, #124]	@ (8019d78 <tcp_rst+0x9c>)
 8019cfa:	f004 fa27 	bl	801e14c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8019cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d106      	bne.n	8019d12 <tcp_rst+0x36>
 8019d04:	4b1a      	ldr	r3, [pc, #104]	@ (8019d70 <tcp_rst+0x94>)
 8019d06:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8019d0a:	491c      	ldr	r1, [pc, #112]	@ (8019d7c <tcp_rst+0xa0>)
 8019d0c:	481a      	ldr	r0, [pc, #104]	@ (8019d78 <tcp_rst+0x9c>)
 8019d0e:	f004 fa1d 	bl	801e14c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019d12:	2300      	movs	r3, #0
 8019d14:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8019d16:	f246 0308 	movw	r3, #24584	@ 0x6008
 8019d1a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8019d1c:	7dfb      	ldrb	r3, [r7, #23]
 8019d1e:	b29c      	uxth	r4, r3
 8019d20:	68b8      	ldr	r0, [r7, #8]
 8019d22:	f7f8 faa9 	bl	8012278 <lwip_htonl>
 8019d26:	4602      	mov	r2, r0
 8019d28:	8abb      	ldrh	r3, [r7, #20]
 8019d2a:	9303      	str	r3, [sp, #12]
 8019d2c:	2314      	movs	r3, #20
 8019d2e:	9302      	str	r3, [sp, #8]
 8019d30:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8019d32:	9301      	str	r3, [sp, #4]
 8019d34:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019d36:	9300      	str	r3, [sp, #0]
 8019d38:	4613      	mov	r3, r2
 8019d3a:	2200      	movs	r2, #0
 8019d3c:	4621      	mov	r1, r4
 8019d3e:	6878      	ldr	r0, [r7, #4]
 8019d40:	f7ff fe94 	bl	8019a6c <tcp_output_alloc_header_common>
 8019d44:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8019d46:	693b      	ldr	r3, [r7, #16]
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d00c      	beq.n	8019d66 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019d4c:	7dfb      	ldrb	r3, [r7, #23]
 8019d4e:	2200      	movs	r2, #0
 8019d50:	6939      	ldr	r1, [r7, #16]
 8019d52:	68f8      	ldr	r0, [r7, #12]
 8019d54:	f7ff ff3a 	bl	8019bcc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8019d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d5a:	683a      	ldr	r2, [r7, #0]
 8019d5c:	6939      	ldr	r1, [r7, #16]
 8019d5e:	68f8      	ldr	r0, [r7, #12]
 8019d60:	f7ff ff72 	bl	8019c48 <tcp_output_control_segment>
 8019d64:	e000      	b.n	8019d68 <tcp_rst+0x8c>
    return;
 8019d66:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8019d68:	371c      	adds	r7, #28
 8019d6a:	46bd      	mov	sp, r7
 8019d6c:	bd90      	pop	{r4, r7, pc}
 8019d6e:	bf00      	nop
 8019d70:	080216c4 	.word	0x080216c4
 8019d74:	08021e48 	.word	0x08021e48
 8019d78:	08021718 	.word	0x08021718
 8019d7c:	08021e64 	.word	0x08021e64

08019d80 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8019d80:	b590      	push	{r4, r7, lr}
 8019d82:	b087      	sub	sp, #28
 8019d84:	af00      	add	r7, sp, #0
 8019d86:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8019d88:	2300      	movs	r3, #0
 8019d8a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8019d8c:	2300      	movs	r3, #0
 8019d8e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d106      	bne.n	8019da4 <tcp_send_empty_ack+0x24>
 8019d96:	4b28      	ldr	r3, [pc, #160]	@ (8019e38 <tcp_send_empty_ack+0xb8>)
 8019d98:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8019d9c:	4927      	ldr	r1, [pc, #156]	@ (8019e3c <tcp_send_empty_ack+0xbc>)
 8019d9e:	4828      	ldr	r0, [pc, #160]	@ (8019e40 <tcp_send_empty_ack+0xc0>)
 8019da0:	f004 f9d4 	bl	801e14c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019da4:	7dfb      	ldrb	r3, [r7, #23]
 8019da6:	009b      	lsls	r3, r3, #2
 8019da8:	b2db      	uxtb	r3, r3
 8019daa:	f003 0304 	and.w	r3, r3, #4
 8019dae:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8019db0:	7d7b      	ldrb	r3, [r7, #21]
 8019db2:	b29c      	uxth	r4, r3
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019db8:	4618      	mov	r0, r3
 8019dba:	f7f8 fa5d 	bl	8012278 <lwip_htonl>
 8019dbe:	4603      	mov	r3, r0
 8019dc0:	2200      	movs	r2, #0
 8019dc2:	4621      	mov	r1, r4
 8019dc4:	6878      	ldr	r0, [r7, #4]
 8019dc6:	f7ff fec3 	bl	8019b50 <tcp_output_alloc_header>
 8019dca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019dcc:	693b      	ldr	r3, [r7, #16]
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d109      	bne.n	8019de6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	8b5b      	ldrh	r3, [r3, #26]
 8019dd6:	f043 0303 	orr.w	r3, r3, #3
 8019dda:	b29a      	uxth	r2, r3
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8019de0:	f06f 0301 	mvn.w	r3, #1
 8019de4:	e023      	b.n	8019e2e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8019de6:	7dbb      	ldrb	r3, [r7, #22]
 8019de8:	7dfa      	ldrb	r2, [r7, #23]
 8019dea:	6939      	ldr	r1, [r7, #16]
 8019dec:	6878      	ldr	r0, [r7, #4]
 8019dee:	f7ff feed 	bl	8019bcc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019df2:	687a      	ldr	r2, [r7, #4]
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	3304      	adds	r3, #4
 8019df8:	6939      	ldr	r1, [r7, #16]
 8019dfa:	6878      	ldr	r0, [r7, #4]
 8019dfc:	f7ff ff24 	bl	8019c48 <tcp_output_control_segment>
 8019e00:	4603      	mov	r3, r0
 8019e02:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8019e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d007      	beq.n	8019e1c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	8b5b      	ldrh	r3, [r3, #26]
 8019e10:	f043 0303 	orr.w	r3, r3, #3
 8019e14:	b29a      	uxth	r2, r3
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	835a      	strh	r2, [r3, #26]
 8019e1a:	e006      	b.n	8019e2a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	8b5b      	ldrh	r3, [r3, #26]
 8019e20:	f023 0303 	bic.w	r3, r3, #3
 8019e24:	b29a      	uxth	r2, r3
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8019e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019e2e:	4618      	mov	r0, r3
 8019e30:	371c      	adds	r7, #28
 8019e32:	46bd      	mov	sp, r7
 8019e34:	bd90      	pop	{r4, r7, pc}
 8019e36:	bf00      	nop
 8019e38:	080216c4 	.word	0x080216c4
 8019e3c:	08021e80 	.word	0x08021e80
 8019e40:	08021718 	.word	0x08021718

08019e44 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8019e44:	b590      	push	{r4, r7, lr}
 8019e46:	b087      	sub	sp, #28
 8019e48:	af00      	add	r7, sp, #0
 8019e4a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019e4c:	2300      	movs	r3, #0
 8019e4e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d106      	bne.n	8019e64 <tcp_keepalive+0x20>
 8019e56:	4b18      	ldr	r3, [pc, #96]	@ (8019eb8 <tcp_keepalive+0x74>)
 8019e58:	f640 0224 	movw	r2, #2084	@ 0x824
 8019e5c:	4917      	ldr	r1, [pc, #92]	@ (8019ebc <tcp_keepalive+0x78>)
 8019e5e:	4818      	ldr	r0, [pc, #96]	@ (8019ec0 <tcp_keepalive+0x7c>)
 8019e60:	f004 f974 	bl	801e14c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8019e64:	7dfb      	ldrb	r3, [r7, #23]
 8019e66:	b29c      	uxth	r4, r3
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019e6c:	3b01      	subs	r3, #1
 8019e6e:	4618      	mov	r0, r3
 8019e70:	f7f8 fa02 	bl	8012278 <lwip_htonl>
 8019e74:	4603      	mov	r3, r0
 8019e76:	2200      	movs	r2, #0
 8019e78:	4621      	mov	r1, r4
 8019e7a:	6878      	ldr	r0, [r7, #4]
 8019e7c:	f7ff fe68 	bl	8019b50 <tcp_output_alloc_header>
 8019e80:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019e82:	693b      	ldr	r3, [r7, #16]
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d102      	bne.n	8019e8e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8019e88:	f04f 33ff 	mov.w	r3, #4294967295
 8019e8c:	e010      	b.n	8019eb0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019e8e:	7dfb      	ldrb	r3, [r7, #23]
 8019e90:	2200      	movs	r2, #0
 8019e92:	6939      	ldr	r1, [r7, #16]
 8019e94:	6878      	ldr	r0, [r7, #4]
 8019e96:	f7ff fe99 	bl	8019bcc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019e9a:	687a      	ldr	r2, [r7, #4]
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	3304      	adds	r3, #4
 8019ea0:	6939      	ldr	r1, [r7, #16]
 8019ea2:	6878      	ldr	r0, [r7, #4]
 8019ea4:	f7ff fed0 	bl	8019c48 <tcp_output_control_segment>
 8019ea8:	4603      	mov	r3, r0
 8019eaa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019eb0:	4618      	mov	r0, r3
 8019eb2:	371c      	adds	r7, #28
 8019eb4:	46bd      	mov	sp, r7
 8019eb6:	bd90      	pop	{r4, r7, pc}
 8019eb8:	080216c4 	.word	0x080216c4
 8019ebc:	08021ea0 	.word	0x08021ea0
 8019ec0:	08021718 	.word	0x08021718

08019ec4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8019ec4:	b590      	push	{r4, r7, lr}
 8019ec6:	b08b      	sub	sp, #44	@ 0x2c
 8019ec8:	af00      	add	r7, sp, #0
 8019eca:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019ecc:	2300      	movs	r3, #0
 8019ece:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d106      	bne.n	8019ee6 <tcp_zero_window_probe+0x22>
 8019ed8:	4b4c      	ldr	r3, [pc, #304]	@ (801a00c <tcp_zero_window_probe+0x148>)
 8019eda:	f640 024f 	movw	r2, #2127	@ 0x84f
 8019ede:	494c      	ldr	r1, [pc, #304]	@ (801a010 <tcp_zero_window_probe+0x14c>)
 8019ee0:	484c      	ldr	r0, [pc, #304]	@ (801a014 <tcp_zero_window_probe+0x150>)
 8019ee2:	f004 f933 	bl	801e14c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019eea:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8019eec:	6a3b      	ldr	r3, [r7, #32]
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d101      	bne.n	8019ef6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8019ef2:	2300      	movs	r3, #0
 8019ef4:	e086      	b.n	801a004 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8019efc:	2bff      	cmp	r3, #255	@ 0xff
 8019efe:	d007      	beq.n	8019f10 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8019f06:	3301      	adds	r3, #1
 8019f08:	b2da      	uxtb	r2, r3
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8019f10:	6a3b      	ldr	r3, [r7, #32]
 8019f12:	68db      	ldr	r3, [r3, #12]
 8019f14:	899b      	ldrh	r3, [r3, #12]
 8019f16:	b29b      	uxth	r3, r3
 8019f18:	4618      	mov	r0, r3
 8019f1a:	f7f8 f997 	bl	801224c <lwip_htons>
 8019f1e:	4603      	mov	r3, r0
 8019f20:	b2db      	uxtb	r3, r3
 8019f22:	f003 0301 	and.w	r3, r3, #1
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d005      	beq.n	8019f36 <tcp_zero_window_probe+0x72>
 8019f2a:	6a3b      	ldr	r3, [r7, #32]
 8019f2c:	891b      	ldrh	r3, [r3, #8]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d101      	bne.n	8019f36 <tcp_zero_window_probe+0x72>
 8019f32:	2301      	movs	r3, #1
 8019f34:	e000      	b.n	8019f38 <tcp_zero_window_probe+0x74>
 8019f36:	2300      	movs	r3, #0
 8019f38:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8019f3a:	7ffb      	ldrb	r3, [r7, #31]
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	bf0c      	ite	eq
 8019f40:	2301      	moveq	r3, #1
 8019f42:	2300      	movne	r3, #0
 8019f44:	b2db      	uxtb	r3, r3
 8019f46:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8019f48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019f4c:	b299      	uxth	r1, r3
 8019f4e:	6a3b      	ldr	r3, [r7, #32]
 8019f50:	68db      	ldr	r3, [r3, #12]
 8019f52:	685b      	ldr	r3, [r3, #4]
 8019f54:	8bba      	ldrh	r2, [r7, #28]
 8019f56:	6878      	ldr	r0, [r7, #4]
 8019f58:	f7ff fdfa 	bl	8019b50 <tcp_output_alloc_header>
 8019f5c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8019f5e:	69bb      	ldr	r3, [r7, #24]
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d102      	bne.n	8019f6a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8019f64:	f04f 33ff 	mov.w	r3, #4294967295
 8019f68:	e04c      	b.n	801a004 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8019f6a:	69bb      	ldr	r3, [r7, #24]
 8019f6c:	685b      	ldr	r3, [r3, #4]
 8019f6e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8019f70:	7ffb      	ldrb	r3, [r7, #31]
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d011      	beq.n	8019f9a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8019f76:	697b      	ldr	r3, [r7, #20]
 8019f78:	899b      	ldrh	r3, [r3, #12]
 8019f7a:	b29b      	uxth	r3, r3
 8019f7c:	b21b      	sxth	r3, r3
 8019f7e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019f82:	b21c      	sxth	r4, r3
 8019f84:	2011      	movs	r0, #17
 8019f86:	f7f8 f961 	bl	801224c <lwip_htons>
 8019f8a:	4603      	mov	r3, r0
 8019f8c:	b21b      	sxth	r3, r3
 8019f8e:	4323      	orrs	r3, r4
 8019f90:	b21b      	sxth	r3, r3
 8019f92:	b29a      	uxth	r2, r3
 8019f94:	697b      	ldr	r3, [r7, #20]
 8019f96:	819a      	strh	r2, [r3, #12]
 8019f98:	e010      	b.n	8019fbc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8019f9a:	69bb      	ldr	r3, [r7, #24]
 8019f9c:	685b      	ldr	r3, [r3, #4]
 8019f9e:	3314      	adds	r3, #20
 8019fa0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8019fa2:	6a3b      	ldr	r3, [r7, #32]
 8019fa4:	6858      	ldr	r0, [r3, #4]
 8019fa6:	6a3b      	ldr	r3, [r7, #32]
 8019fa8:	685b      	ldr	r3, [r3, #4]
 8019faa:	891a      	ldrh	r2, [r3, #8]
 8019fac:	6a3b      	ldr	r3, [r7, #32]
 8019fae:	891b      	ldrh	r3, [r3, #8]
 8019fb0:	1ad3      	subs	r3, r2, r3
 8019fb2:	b29b      	uxth	r3, r3
 8019fb4:	2201      	movs	r2, #1
 8019fb6:	6939      	ldr	r1, [r7, #16]
 8019fb8:	f7f9 ff2c 	bl	8013e14 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8019fbc:	6a3b      	ldr	r3, [r7, #32]
 8019fbe:	68db      	ldr	r3, [r3, #12]
 8019fc0:	685b      	ldr	r3, [r3, #4]
 8019fc2:	4618      	mov	r0, r3
 8019fc4:	f7f8 f958 	bl	8012278 <lwip_htonl>
 8019fc8:	4603      	mov	r3, r0
 8019fca:	3301      	adds	r3, #1
 8019fcc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019fd2:	68fb      	ldr	r3, [r7, #12]
 8019fd4:	1ad3      	subs	r3, r2, r3
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	da02      	bge.n	8019fe0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	68fa      	ldr	r2, [r7, #12]
 8019fde:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019fe4:	2200      	movs	r2, #0
 8019fe6:	69b9      	ldr	r1, [r7, #24]
 8019fe8:	6878      	ldr	r0, [r7, #4]
 8019fea:	f7ff fdef 	bl	8019bcc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019fee:	687a      	ldr	r2, [r7, #4]
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	3304      	adds	r3, #4
 8019ff4:	69b9      	ldr	r1, [r7, #24]
 8019ff6:	6878      	ldr	r0, [r7, #4]
 8019ff8:	f7ff fe26 	bl	8019c48 <tcp_output_control_segment>
 8019ffc:	4603      	mov	r3, r0
 8019ffe:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a000:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a004:	4618      	mov	r0, r3
 801a006:	372c      	adds	r7, #44	@ 0x2c
 801a008:	46bd      	mov	sp, r7
 801a00a:	bd90      	pop	{r4, r7, pc}
 801a00c:	080216c4 	.word	0x080216c4
 801a010:	08021ebc 	.word	0x08021ebc
 801a014:	08021718 	.word	0x08021718

0801a018 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801a018:	b580      	push	{r7, lr}
 801a01a:	b082      	sub	sp, #8
 801a01c:	af00      	add	r7, sp, #0
 801a01e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801a020:	f7f9 ffe6 	bl	8013ff0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801a024:	4b0a      	ldr	r3, [pc, #40]	@ (801a050 <tcpip_tcp_timer+0x38>)
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d103      	bne.n	801a034 <tcpip_tcp_timer+0x1c>
 801a02c:	4b09      	ldr	r3, [pc, #36]	@ (801a054 <tcpip_tcp_timer+0x3c>)
 801a02e:	681b      	ldr	r3, [r3, #0]
 801a030:	2b00      	cmp	r3, #0
 801a032:	d005      	beq.n	801a040 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a034:	2200      	movs	r2, #0
 801a036:	4908      	ldr	r1, [pc, #32]	@ (801a058 <tcpip_tcp_timer+0x40>)
 801a038:	20fa      	movs	r0, #250	@ 0xfa
 801a03a:	f000 f8f3 	bl	801a224 <sys_timeout>
 801a03e:	e003      	b.n	801a048 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801a040:	4b06      	ldr	r3, [pc, #24]	@ (801a05c <tcpip_tcp_timer+0x44>)
 801a042:	2200      	movs	r2, #0
 801a044:	601a      	str	r2, [r3, #0]
  }
}
 801a046:	bf00      	nop
 801a048:	bf00      	nop
 801a04a:	3708      	adds	r7, #8
 801a04c:	46bd      	mov	sp, r7
 801a04e:	bd80      	pop	{r7, pc}
 801a050:	2000e4fc 	.word	0x2000e4fc
 801a054:	2000e500 	.word	0x2000e500
 801a058:	0801a019 	.word	0x0801a019
 801a05c:	2000e548 	.word	0x2000e548

0801a060 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801a060:	b580      	push	{r7, lr}
 801a062:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801a064:	4b0a      	ldr	r3, [pc, #40]	@ (801a090 <tcp_timer_needed+0x30>)
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d10f      	bne.n	801a08c <tcp_timer_needed+0x2c>
 801a06c:	4b09      	ldr	r3, [pc, #36]	@ (801a094 <tcp_timer_needed+0x34>)
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	2b00      	cmp	r3, #0
 801a072:	d103      	bne.n	801a07c <tcp_timer_needed+0x1c>
 801a074:	4b08      	ldr	r3, [pc, #32]	@ (801a098 <tcp_timer_needed+0x38>)
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	2b00      	cmp	r3, #0
 801a07a:	d007      	beq.n	801a08c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801a07c:	4b04      	ldr	r3, [pc, #16]	@ (801a090 <tcp_timer_needed+0x30>)
 801a07e:	2201      	movs	r2, #1
 801a080:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a082:	2200      	movs	r2, #0
 801a084:	4905      	ldr	r1, [pc, #20]	@ (801a09c <tcp_timer_needed+0x3c>)
 801a086:	20fa      	movs	r0, #250	@ 0xfa
 801a088:	f000 f8cc 	bl	801a224 <sys_timeout>
  }
}
 801a08c:	bf00      	nop
 801a08e:	bd80      	pop	{r7, pc}
 801a090:	2000e548 	.word	0x2000e548
 801a094:	2000e4fc 	.word	0x2000e4fc
 801a098:	2000e500 	.word	0x2000e500
 801a09c:	0801a019 	.word	0x0801a019

0801a0a0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	b086      	sub	sp, #24
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	60f8      	str	r0, [r7, #12]
 801a0a8:	60b9      	str	r1, [r7, #8]
 801a0aa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801a0ac:	200a      	movs	r0, #10
 801a0ae:	f7f8 fda1 	bl	8012bf4 <memp_malloc>
 801a0b2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801a0b4:	693b      	ldr	r3, [r7, #16]
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d109      	bne.n	801a0ce <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801a0ba:	693b      	ldr	r3, [r7, #16]
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d151      	bne.n	801a164 <sys_timeout_abs+0xc4>
 801a0c0:	4b2a      	ldr	r3, [pc, #168]	@ (801a16c <sys_timeout_abs+0xcc>)
 801a0c2:	22be      	movs	r2, #190	@ 0xbe
 801a0c4:	492a      	ldr	r1, [pc, #168]	@ (801a170 <sys_timeout_abs+0xd0>)
 801a0c6:	482b      	ldr	r0, [pc, #172]	@ (801a174 <sys_timeout_abs+0xd4>)
 801a0c8:	f004 f840 	bl	801e14c <iprintf>
    return;
 801a0cc:	e04a      	b.n	801a164 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801a0ce:	693b      	ldr	r3, [r7, #16]
 801a0d0:	2200      	movs	r2, #0
 801a0d2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801a0d4:	693b      	ldr	r3, [r7, #16]
 801a0d6:	68ba      	ldr	r2, [r7, #8]
 801a0d8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801a0da:	693b      	ldr	r3, [r7, #16]
 801a0dc:	687a      	ldr	r2, [r7, #4]
 801a0de:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801a0e0:	693b      	ldr	r3, [r7, #16]
 801a0e2:	68fa      	ldr	r2, [r7, #12]
 801a0e4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801a0e6:	4b24      	ldr	r3, [pc, #144]	@ (801a178 <sys_timeout_abs+0xd8>)
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d103      	bne.n	801a0f6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801a0ee:	4a22      	ldr	r2, [pc, #136]	@ (801a178 <sys_timeout_abs+0xd8>)
 801a0f0:	693b      	ldr	r3, [r7, #16]
 801a0f2:	6013      	str	r3, [r2, #0]
    return;
 801a0f4:	e037      	b.n	801a166 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801a0f6:	693b      	ldr	r3, [r7, #16]
 801a0f8:	685a      	ldr	r2, [r3, #4]
 801a0fa:	4b1f      	ldr	r3, [pc, #124]	@ (801a178 <sys_timeout_abs+0xd8>)
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	685b      	ldr	r3, [r3, #4]
 801a100:	1ad3      	subs	r3, r2, r3
 801a102:	0fdb      	lsrs	r3, r3, #31
 801a104:	f003 0301 	and.w	r3, r3, #1
 801a108:	b2db      	uxtb	r3, r3
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	d007      	beq.n	801a11e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801a10e:	4b1a      	ldr	r3, [pc, #104]	@ (801a178 <sys_timeout_abs+0xd8>)
 801a110:	681a      	ldr	r2, [r3, #0]
 801a112:	693b      	ldr	r3, [r7, #16]
 801a114:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801a116:	4a18      	ldr	r2, [pc, #96]	@ (801a178 <sys_timeout_abs+0xd8>)
 801a118:	693b      	ldr	r3, [r7, #16]
 801a11a:	6013      	str	r3, [r2, #0]
 801a11c:	e023      	b.n	801a166 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801a11e:	4b16      	ldr	r3, [pc, #88]	@ (801a178 <sys_timeout_abs+0xd8>)
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	617b      	str	r3, [r7, #20]
 801a124:	e01a      	b.n	801a15c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801a126:	697b      	ldr	r3, [r7, #20]
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d00b      	beq.n	801a146 <sys_timeout_abs+0xa6>
 801a12e:	693b      	ldr	r3, [r7, #16]
 801a130:	685a      	ldr	r2, [r3, #4]
 801a132:	697b      	ldr	r3, [r7, #20]
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	685b      	ldr	r3, [r3, #4]
 801a138:	1ad3      	subs	r3, r2, r3
 801a13a:	0fdb      	lsrs	r3, r3, #31
 801a13c:	f003 0301 	and.w	r3, r3, #1
 801a140:	b2db      	uxtb	r3, r3
 801a142:	2b00      	cmp	r3, #0
 801a144:	d007      	beq.n	801a156 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801a146:	697b      	ldr	r3, [r7, #20]
 801a148:	681a      	ldr	r2, [r3, #0]
 801a14a:	693b      	ldr	r3, [r7, #16]
 801a14c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801a14e:	697b      	ldr	r3, [r7, #20]
 801a150:	693a      	ldr	r2, [r7, #16]
 801a152:	601a      	str	r2, [r3, #0]
        break;
 801a154:	e007      	b.n	801a166 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801a156:	697b      	ldr	r3, [r7, #20]
 801a158:	681b      	ldr	r3, [r3, #0]
 801a15a:	617b      	str	r3, [r7, #20]
 801a15c:	697b      	ldr	r3, [r7, #20]
 801a15e:	2b00      	cmp	r3, #0
 801a160:	d1e1      	bne.n	801a126 <sys_timeout_abs+0x86>
 801a162:	e000      	b.n	801a166 <sys_timeout_abs+0xc6>
    return;
 801a164:	bf00      	nop
      }
    }
  }
}
 801a166:	3718      	adds	r7, #24
 801a168:	46bd      	mov	sp, r7
 801a16a:	bd80      	pop	{r7, pc}
 801a16c:	08021ee0 	.word	0x08021ee0
 801a170:	08021f14 	.word	0x08021f14
 801a174:	08021f54 	.word	0x08021f54
 801a178:	2000e540 	.word	0x2000e540

0801a17c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801a17c:	b580      	push	{r7, lr}
 801a17e:	b086      	sub	sp, #24
 801a180:	af00      	add	r7, sp, #0
 801a182:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801a188:	697b      	ldr	r3, [r7, #20]
 801a18a:	685b      	ldr	r3, [r3, #4]
 801a18c:	4798      	blx	r3

  now = sys_now();
 801a18e:	f7f0 f9a5 	bl	800a4dc <sys_now>
 801a192:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801a194:	697b      	ldr	r3, [r7, #20]
 801a196:	681a      	ldr	r2, [r3, #0]
 801a198:	4b0f      	ldr	r3, [pc, #60]	@ (801a1d8 <lwip_cyclic_timer+0x5c>)
 801a19a:	681b      	ldr	r3, [r3, #0]
 801a19c:	4413      	add	r3, r2
 801a19e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801a1a0:	68fa      	ldr	r2, [r7, #12]
 801a1a2:	693b      	ldr	r3, [r7, #16]
 801a1a4:	1ad3      	subs	r3, r2, r3
 801a1a6:	0fdb      	lsrs	r3, r3, #31
 801a1a8:	f003 0301 	and.w	r3, r3, #1
 801a1ac:	b2db      	uxtb	r3, r3
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d009      	beq.n	801a1c6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801a1b2:	697b      	ldr	r3, [r7, #20]
 801a1b4:	681a      	ldr	r2, [r3, #0]
 801a1b6:	693b      	ldr	r3, [r7, #16]
 801a1b8:	4413      	add	r3, r2
 801a1ba:	687a      	ldr	r2, [r7, #4]
 801a1bc:	4907      	ldr	r1, [pc, #28]	@ (801a1dc <lwip_cyclic_timer+0x60>)
 801a1be:	4618      	mov	r0, r3
 801a1c0:	f7ff ff6e 	bl	801a0a0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801a1c4:	e004      	b.n	801a1d0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801a1c6:	687a      	ldr	r2, [r7, #4]
 801a1c8:	4904      	ldr	r1, [pc, #16]	@ (801a1dc <lwip_cyclic_timer+0x60>)
 801a1ca:	68f8      	ldr	r0, [r7, #12]
 801a1cc:	f7ff ff68 	bl	801a0a0 <sys_timeout_abs>
}
 801a1d0:	bf00      	nop
 801a1d2:	3718      	adds	r7, #24
 801a1d4:	46bd      	mov	sp, r7
 801a1d6:	bd80      	pop	{r7, pc}
 801a1d8:	2000e544 	.word	0x2000e544
 801a1dc:	0801a17d 	.word	0x0801a17d

0801a1e0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801a1e0:	b580      	push	{r7, lr}
 801a1e2:	b082      	sub	sp, #8
 801a1e4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a1e6:	2301      	movs	r3, #1
 801a1e8:	607b      	str	r3, [r7, #4]
 801a1ea:	e00e      	b.n	801a20a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801a1ec:	4a0b      	ldr	r2, [pc, #44]	@ (801a21c <sys_timeouts_init+0x3c>)
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	00db      	lsls	r3, r3, #3
 801a1f8:	4a08      	ldr	r2, [pc, #32]	@ (801a21c <sys_timeouts_init+0x3c>)
 801a1fa:	4413      	add	r3, r2
 801a1fc:	461a      	mov	r2, r3
 801a1fe:	4908      	ldr	r1, [pc, #32]	@ (801a220 <sys_timeouts_init+0x40>)
 801a200:	f000 f810 	bl	801a224 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	3301      	adds	r3, #1
 801a208:	607b      	str	r3, [r7, #4]
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	2b02      	cmp	r3, #2
 801a20e:	d9ed      	bls.n	801a1ec <sys_timeouts_init+0xc>
  }
}
 801a210:	bf00      	nop
 801a212:	bf00      	nop
 801a214:	3708      	adds	r7, #8
 801a216:	46bd      	mov	sp, r7
 801a218:	bd80      	pop	{r7, pc}
 801a21a:	bf00      	nop
 801a21c:	08068470 	.word	0x08068470
 801a220:	0801a17d 	.word	0x0801a17d

0801a224 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801a224:	b580      	push	{r7, lr}
 801a226:	b086      	sub	sp, #24
 801a228:	af00      	add	r7, sp, #0
 801a22a:	60f8      	str	r0, [r7, #12]
 801a22c:	60b9      	str	r1, [r7, #8]
 801a22e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801a230:	68fb      	ldr	r3, [r7, #12]
 801a232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a236:	d306      	bcc.n	801a246 <sys_timeout+0x22>
 801a238:	4b0a      	ldr	r3, [pc, #40]	@ (801a264 <sys_timeout+0x40>)
 801a23a:	f240 1229 	movw	r2, #297	@ 0x129
 801a23e:	490a      	ldr	r1, [pc, #40]	@ (801a268 <sys_timeout+0x44>)
 801a240:	480a      	ldr	r0, [pc, #40]	@ (801a26c <sys_timeout+0x48>)
 801a242:	f003 ff83 	bl	801e14c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801a246:	f7f0 f949 	bl	800a4dc <sys_now>
 801a24a:	4602      	mov	r2, r0
 801a24c:	68fb      	ldr	r3, [r7, #12]
 801a24e:	4413      	add	r3, r2
 801a250:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801a252:	687a      	ldr	r2, [r7, #4]
 801a254:	68b9      	ldr	r1, [r7, #8]
 801a256:	6978      	ldr	r0, [r7, #20]
 801a258:	f7ff ff22 	bl	801a0a0 <sys_timeout_abs>
#endif
}
 801a25c:	bf00      	nop
 801a25e:	3718      	adds	r7, #24
 801a260:	46bd      	mov	sp, r7
 801a262:	bd80      	pop	{r7, pc}
 801a264:	08021ee0 	.word	0x08021ee0
 801a268:	08021f7c 	.word	0x08021f7c
 801a26c:	08021f54 	.word	0x08021f54

0801a270 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801a270:	b580      	push	{r7, lr}
 801a272:	b084      	sub	sp, #16
 801a274:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801a276:	f7f0 f931 	bl	800a4dc <sys_now>
 801a27a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801a27c:	4b17      	ldr	r3, [pc, #92]	@ (801a2dc <sys_check_timeouts+0x6c>)
 801a27e:	681b      	ldr	r3, [r3, #0]
 801a280:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801a282:	68bb      	ldr	r3, [r7, #8]
 801a284:	2b00      	cmp	r3, #0
 801a286:	d022      	beq.n	801a2ce <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801a288:	68bb      	ldr	r3, [r7, #8]
 801a28a:	685b      	ldr	r3, [r3, #4]
 801a28c:	68fa      	ldr	r2, [r7, #12]
 801a28e:	1ad3      	subs	r3, r2, r3
 801a290:	0fdb      	lsrs	r3, r3, #31
 801a292:	f003 0301 	and.w	r3, r3, #1
 801a296:	b2db      	uxtb	r3, r3
 801a298:	2b00      	cmp	r3, #0
 801a29a:	d11a      	bne.n	801a2d2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801a29c:	68bb      	ldr	r3, [r7, #8]
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	4a0e      	ldr	r2, [pc, #56]	@ (801a2dc <sys_check_timeouts+0x6c>)
 801a2a2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801a2a4:	68bb      	ldr	r3, [r7, #8]
 801a2a6:	689b      	ldr	r3, [r3, #8]
 801a2a8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801a2aa:	68bb      	ldr	r3, [r7, #8]
 801a2ac:	68db      	ldr	r3, [r3, #12]
 801a2ae:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801a2b0:	68bb      	ldr	r3, [r7, #8]
 801a2b2:	685b      	ldr	r3, [r3, #4]
 801a2b4:	4a0a      	ldr	r2, [pc, #40]	@ (801a2e0 <sys_check_timeouts+0x70>)
 801a2b6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801a2b8:	68b9      	ldr	r1, [r7, #8]
 801a2ba:	200a      	movs	r0, #10
 801a2bc:	f7f8 fd10 	bl	8012ce0 <memp_free>
    if (handler != NULL) {
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d0da      	beq.n	801a27c <sys_check_timeouts+0xc>
      handler(arg);
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	6838      	ldr	r0, [r7, #0]
 801a2ca:	4798      	blx	r3
  do {
 801a2cc:	e7d6      	b.n	801a27c <sys_check_timeouts+0xc>
      return;
 801a2ce:	bf00      	nop
 801a2d0:	e000      	b.n	801a2d4 <sys_check_timeouts+0x64>
      return;
 801a2d2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801a2d4:	3710      	adds	r7, #16
 801a2d6:	46bd      	mov	sp, r7
 801a2d8:	bd80      	pop	{r7, pc}
 801a2da:	bf00      	nop
 801a2dc:	2000e540 	.word	0x2000e540
 801a2e0:	2000e544 	.word	0x2000e544

0801a2e4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801a2e4:	b580      	push	{r7, lr}
 801a2e6:	b082      	sub	sp, #8
 801a2e8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801a2ea:	4b16      	ldr	r3, [pc, #88]	@ (801a344 <sys_timeouts_sleeptime+0x60>)
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d102      	bne.n	801a2f8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801a2f2:	f04f 33ff 	mov.w	r3, #4294967295
 801a2f6:	e020      	b.n	801a33a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801a2f8:	f7f0 f8f0 	bl	800a4dc <sys_now>
 801a2fc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801a2fe:	4b11      	ldr	r3, [pc, #68]	@ (801a344 <sys_timeouts_sleeptime+0x60>)
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	685a      	ldr	r2, [r3, #4]
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	1ad3      	subs	r3, r2, r3
 801a308:	0fdb      	lsrs	r3, r3, #31
 801a30a:	f003 0301 	and.w	r3, r3, #1
 801a30e:	b2db      	uxtb	r3, r3
 801a310:	2b00      	cmp	r3, #0
 801a312:	d001      	beq.n	801a318 <sys_timeouts_sleeptime+0x34>
    return 0;
 801a314:	2300      	movs	r3, #0
 801a316:	e010      	b.n	801a33a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801a318:	4b0a      	ldr	r3, [pc, #40]	@ (801a344 <sys_timeouts_sleeptime+0x60>)
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	685a      	ldr	r2, [r3, #4]
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	1ad3      	subs	r3, r2, r3
 801a322:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801a324:	683b      	ldr	r3, [r7, #0]
 801a326:	2b00      	cmp	r3, #0
 801a328:	da06      	bge.n	801a338 <sys_timeouts_sleeptime+0x54>
 801a32a:	4b07      	ldr	r3, [pc, #28]	@ (801a348 <sys_timeouts_sleeptime+0x64>)
 801a32c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801a330:	4906      	ldr	r1, [pc, #24]	@ (801a34c <sys_timeouts_sleeptime+0x68>)
 801a332:	4807      	ldr	r0, [pc, #28]	@ (801a350 <sys_timeouts_sleeptime+0x6c>)
 801a334:	f003 ff0a 	bl	801e14c <iprintf>
    return ret;
 801a338:	683b      	ldr	r3, [r7, #0]
  }
}
 801a33a:	4618      	mov	r0, r3
 801a33c:	3708      	adds	r7, #8
 801a33e:	46bd      	mov	sp, r7
 801a340:	bd80      	pop	{r7, pc}
 801a342:	bf00      	nop
 801a344:	2000e540 	.word	0x2000e540
 801a348:	08021ee0 	.word	0x08021ee0
 801a34c:	08021fb4 	.word	0x08021fb4
 801a350:	08021f54 	.word	0x08021f54

0801a354 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801a354:	b580      	push	{r7, lr}
 801a356:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801a358:	f003 fdf8 	bl	801df4c <rand>
 801a35c:	4603      	mov	r3, r0
 801a35e:	b29b      	uxth	r3, r3
 801a360:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801a364:	b29b      	uxth	r3, r3
 801a366:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801a36a:	b29a      	uxth	r2, r3
 801a36c:	4b01      	ldr	r3, [pc, #4]	@ (801a374 <udp_init+0x20>)
 801a36e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801a370:	bf00      	nop
 801a372:	bd80      	pop	{r7, pc}
 801a374:	200000c0 	.word	0x200000c0

0801a378 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801a378:	b480      	push	{r7}
 801a37a:	b083      	sub	sp, #12
 801a37c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801a37e:	2300      	movs	r3, #0
 801a380:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801a382:	4b17      	ldr	r3, [pc, #92]	@ (801a3e0 <udp_new_port+0x68>)
 801a384:	881b      	ldrh	r3, [r3, #0]
 801a386:	1c5a      	adds	r2, r3, #1
 801a388:	b291      	uxth	r1, r2
 801a38a:	4a15      	ldr	r2, [pc, #84]	@ (801a3e0 <udp_new_port+0x68>)
 801a38c:	8011      	strh	r1, [r2, #0]
 801a38e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a392:	4293      	cmp	r3, r2
 801a394:	d103      	bne.n	801a39e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801a396:	4b12      	ldr	r3, [pc, #72]	@ (801a3e0 <udp_new_port+0x68>)
 801a398:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801a39c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a39e:	4b11      	ldr	r3, [pc, #68]	@ (801a3e4 <udp_new_port+0x6c>)
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	603b      	str	r3, [r7, #0]
 801a3a4:	e011      	b.n	801a3ca <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801a3a6:	683b      	ldr	r3, [r7, #0]
 801a3a8:	8a5a      	ldrh	r2, [r3, #18]
 801a3aa:	4b0d      	ldr	r3, [pc, #52]	@ (801a3e0 <udp_new_port+0x68>)
 801a3ac:	881b      	ldrh	r3, [r3, #0]
 801a3ae:	429a      	cmp	r2, r3
 801a3b0:	d108      	bne.n	801a3c4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801a3b2:	88fb      	ldrh	r3, [r7, #6]
 801a3b4:	3301      	adds	r3, #1
 801a3b6:	80fb      	strh	r3, [r7, #6]
 801a3b8:	88fb      	ldrh	r3, [r7, #6]
 801a3ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801a3be:	d3e0      	bcc.n	801a382 <udp_new_port+0xa>
        return 0;
 801a3c0:	2300      	movs	r3, #0
 801a3c2:	e007      	b.n	801a3d4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a3c4:	683b      	ldr	r3, [r7, #0]
 801a3c6:	68db      	ldr	r3, [r3, #12]
 801a3c8:	603b      	str	r3, [r7, #0]
 801a3ca:	683b      	ldr	r3, [r7, #0]
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	d1ea      	bne.n	801a3a6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801a3d0:	4b03      	ldr	r3, [pc, #12]	@ (801a3e0 <udp_new_port+0x68>)
 801a3d2:	881b      	ldrh	r3, [r3, #0]
}
 801a3d4:	4618      	mov	r0, r3
 801a3d6:	370c      	adds	r7, #12
 801a3d8:	46bd      	mov	sp, r7
 801a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3de:	4770      	bx	lr
 801a3e0:	200000c0 	.word	0x200000c0
 801a3e4:	2000e54c 	.word	0x2000e54c

0801a3e8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801a3e8:	b580      	push	{r7, lr}
 801a3ea:	b084      	sub	sp, #16
 801a3ec:	af00      	add	r7, sp, #0
 801a3ee:	60f8      	str	r0, [r7, #12]
 801a3f0:	60b9      	str	r1, [r7, #8]
 801a3f2:	4613      	mov	r3, r2
 801a3f4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d105      	bne.n	801a408 <udp_input_local_match+0x20>
 801a3fc:	4b27      	ldr	r3, [pc, #156]	@ (801a49c <udp_input_local_match+0xb4>)
 801a3fe:	2287      	movs	r2, #135	@ 0x87
 801a400:	4927      	ldr	r1, [pc, #156]	@ (801a4a0 <udp_input_local_match+0xb8>)
 801a402:	4828      	ldr	r0, [pc, #160]	@ (801a4a4 <udp_input_local_match+0xbc>)
 801a404:	f003 fea2 	bl	801e14c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801a408:	68bb      	ldr	r3, [r7, #8]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d105      	bne.n	801a41a <udp_input_local_match+0x32>
 801a40e:	4b23      	ldr	r3, [pc, #140]	@ (801a49c <udp_input_local_match+0xb4>)
 801a410:	2288      	movs	r2, #136	@ 0x88
 801a412:	4925      	ldr	r1, [pc, #148]	@ (801a4a8 <udp_input_local_match+0xc0>)
 801a414:	4823      	ldr	r0, [pc, #140]	@ (801a4a4 <udp_input_local_match+0xbc>)
 801a416:	f003 fe99 	bl	801e14c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a41a:	68fb      	ldr	r3, [r7, #12]
 801a41c:	7a1b      	ldrb	r3, [r3, #8]
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d00b      	beq.n	801a43a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a422:	68fb      	ldr	r3, [r7, #12]
 801a424:	7a1a      	ldrb	r2, [r3, #8]
 801a426:	4b21      	ldr	r3, [pc, #132]	@ (801a4ac <udp_input_local_match+0xc4>)
 801a428:	685b      	ldr	r3, [r3, #4]
 801a42a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a42e:	3301      	adds	r3, #1
 801a430:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a432:	429a      	cmp	r2, r3
 801a434:	d001      	beq.n	801a43a <udp_input_local_match+0x52>
    return 0;
 801a436:	2300      	movs	r3, #0
 801a438:	e02b      	b.n	801a492 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801a43a:	79fb      	ldrb	r3, [r7, #7]
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d018      	beq.n	801a472 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a440:	68fb      	ldr	r3, [r7, #12]
 801a442:	2b00      	cmp	r3, #0
 801a444:	d013      	beq.n	801a46e <udp_input_local_match+0x86>
 801a446:	68fb      	ldr	r3, [r7, #12]
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d00f      	beq.n	801a46e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a44e:	4b17      	ldr	r3, [pc, #92]	@ (801a4ac <udp_input_local_match+0xc4>)
 801a450:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a452:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a456:	d00a      	beq.n	801a46e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801a458:	68fb      	ldr	r3, [r7, #12]
 801a45a:	681a      	ldr	r2, [r3, #0]
 801a45c:	4b13      	ldr	r3, [pc, #76]	@ (801a4ac <udp_input_local_match+0xc4>)
 801a45e:	695b      	ldr	r3, [r3, #20]
 801a460:	405a      	eors	r2, r3
 801a462:	68bb      	ldr	r3, [r7, #8]
 801a464:	3308      	adds	r3, #8
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d110      	bne.n	801a490 <udp_input_local_match+0xa8>
          return 1;
 801a46e:	2301      	movs	r3, #1
 801a470:	e00f      	b.n	801a492 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a472:	68fb      	ldr	r3, [r7, #12]
 801a474:	2b00      	cmp	r3, #0
 801a476:	d009      	beq.n	801a48c <udp_input_local_match+0xa4>
 801a478:	68fb      	ldr	r3, [r7, #12]
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d005      	beq.n	801a48c <udp_input_local_match+0xa4>
 801a480:	68fb      	ldr	r3, [r7, #12]
 801a482:	681a      	ldr	r2, [r3, #0]
 801a484:	4b09      	ldr	r3, [pc, #36]	@ (801a4ac <udp_input_local_match+0xc4>)
 801a486:	695b      	ldr	r3, [r3, #20]
 801a488:	429a      	cmp	r2, r3
 801a48a:	d101      	bne.n	801a490 <udp_input_local_match+0xa8>
        return 1;
 801a48c:	2301      	movs	r3, #1
 801a48e:	e000      	b.n	801a492 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801a490:	2300      	movs	r3, #0
}
 801a492:	4618      	mov	r0, r3
 801a494:	3710      	adds	r7, #16
 801a496:	46bd      	mov	sp, r7
 801a498:	bd80      	pop	{r7, pc}
 801a49a:	bf00      	nop
 801a49c:	08021fc8 	.word	0x08021fc8
 801a4a0:	08021ff8 	.word	0x08021ff8
 801a4a4:	0802201c 	.word	0x0802201c
 801a4a8:	08022044 	.word	0x08022044
 801a4ac:	2000b3f0 	.word	0x2000b3f0

0801a4b0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801a4b0:	b590      	push	{r4, r7, lr}
 801a4b2:	b08d      	sub	sp, #52	@ 0x34
 801a4b4:	af02      	add	r7, sp, #8
 801a4b6:	6078      	str	r0, [r7, #4]
 801a4b8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801a4ba:	2300      	movs	r3, #0
 801a4bc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	d105      	bne.n	801a4d0 <udp_input+0x20>
 801a4c4:	4b7c      	ldr	r3, [pc, #496]	@ (801a6b8 <udp_input+0x208>)
 801a4c6:	22cf      	movs	r2, #207	@ 0xcf
 801a4c8:	497c      	ldr	r1, [pc, #496]	@ (801a6bc <udp_input+0x20c>)
 801a4ca:	487d      	ldr	r0, [pc, #500]	@ (801a6c0 <udp_input+0x210>)
 801a4cc:	f003 fe3e 	bl	801e14c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801a4d0:	683b      	ldr	r3, [r7, #0]
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d105      	bne.n	801a4e2 <udp_input+0x32>
 801a4d6:	4b78      	ldr	r3, [pc, #480]	@ (801a6b8 <udp_input+0x208>)
 801a4d8:	22d0      	movs	r2, #208	@ 0xd0
 801a4da:	497a      	ldr	r1, [pc, #488]	@ (801a6c4 <udp_input+0x214>)
 801a4dc:	4878      	ldr	r0, [pc, #480]	@ (801a6c0 <udp_input+0x210>)
 801a4de:	f003 fe35 	bl	801e14c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	895b      	ldrh	r3, [r3, #10]
 801a4e6:	2b07      	cmp	r3, #7
 801a4e8:	d803      	bhi.n	801a4f2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801a4ea:	6878      	ldr	r0, [r7, #4]
 801a4ec:	f7f9 fa9c 	bl	8013a28 <pbuf_free>
    goto end;
 801a4f0:	e0de      	b.n	801a6b0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	685b      	ldr	r3, [r3, #4]
 801a4f6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801a4f8:	4b73      	ldr	r3, [pc, #460]	@ (801a6c8 <udp_input+0x218>)
 801a4fa:	695b      	ldr	r3, [r3, #20]
 801a4fc:	4a72      	ldr	r2, [pc, #456]	@ (801a6c8 <udp_input+0x218>)
 801a4fe:	6812      	ldr	r2, [r2, #0]
 801a500:	4611      	mov	r1, r2
 801a502:	4618      	mov	r0, r3
 801a504:	f001 fd96 	bl	801c034 <ip4_addr_isbroadcast_u32>
 801a508:	4603      	mov	r3, r0
 801a50a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801a50c:	697b      	ldr	r3, [r7, #20]
 801a50e:	881b      	ldrh	r3, [r3, #0]
 801a510:	b29b      	uxth	r3, r3
 801a512:	4618      	mov	r0, r3
 801a514:	f7f7 fe9a 	bl	801224c <lwip_htons>
 801a518:	4603      	mov	r3, r0
 801a51a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801a51c:	697b      	ldr	r3, [r7, #20]
 801a51e:	885b      	ldrh	r3, [r3, #2]
 801a520:	b29b      	uxth	r3, r3
 801a522:	4618      	mov	r0, r3
 801a524:	f7f7 fe92 	bl	801224c <lwip_htons>
 801a528:	4603      	mov	r3, r0
 801a52a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801a52c:	2300      	movs	r3, #0
 801a52e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801a530:	2300      	movs	r3, #0
 801a532:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801a534:	2300      	movs	r3, #0
 801a536:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a538:	4b64      	ldr	r3, [pc, #400]	@ (801a6cc <udp_input+0x21c>)
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	627b      	str	r3, [r7, #36]	@ 0x24
 801a53e:	e054      	b.n	801a5ea <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801a540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a542:	8a5b      	ldrh	r3, [r3, #18]
 801a544:	89fa      	ldrh	r2, [r7, #14]
 801a546:	429a      	cmp	r2, r3
 801a548:	d14a      	bne.n	801a5e0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801a54a:	7cfb      	ldrb	r3, [r7, #19]
 801a54c:	461a      	mov	r2, r3
 801a54e:	6839      	ldr	r1, [r7, #0]
 801a550:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a552:	f7ff ff49 	bl	801a3e8 <udp_input_local_match>
 801a556:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801a558:	2b00      	cmp	r3, #0
 801a55a:	d041      	beq.n	801a5e0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801a55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a55e:	7c1b      	ldrb	r3, [r3, #16]
 801a560:	f003 0304 	and.w	r3, r3, #4
 801a564:	2b00      	cmp	r3, #0
 801a566:	d11d      	bne.n	801a5a4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801a568:	69fb      	ldr	r3, [r7, #28]
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d102      	bne.n	801a574 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801a56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a570:	61fb      	str	r3, [r7, #28]
 801a572:	e017      	b.n	801a5a4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801a574:	7cfb      	ldrb	r3, [r7, #19]
 801a576:	2b00      	cmp	r3, #0
 801a578:	d014      	beq.n	801a5a4 <udp_input+0xf4>
 801a57a:	4b53      	ldr	r3, [pc, #332]	@ (801a6c8 <udp_input+0x218>)
 801a57c:	695b      	ldr	r3, [r3, #20]
 801a57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a582:	d10f      	bne.n	801a5a4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801a584:	69fb      	ldr	r3, [r7, #28]
 801a586:	681a      	ldr	r2, [r3, #0]
 801a588:	683b      	ldr	r3, [r7, #0]
 801a58a:	3304      	adds	r3, #4
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	429a      	cmp	r2, r3
 801a590:	d008      	beq.n	801a5a4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801a592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a594:	681a      	ldr	r2, [r3, #0]
 801a596:	683b      	ldr	r3, [r7, #0]
 801a598:	3304      	adds	r3, #4
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	429a      	cmp	r2, r3
 801a59e:	d101      	bne.n	801a5a4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801a5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5a2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801a5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5a6:	8a9b      	ldrh	r3, [r3, #20]
 801a5a8:	8a3a      	ldrh	r2, [r7, #16]
 801a5aa:	429a      	cmp	r2, r3
 801a5ac:	d118      	bne.n	801a5e0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5b0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	d005      	beq.n	801a5c2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801a5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5b8:	685a      	ldr	r2, [r3, #4]
 801a5ba:	4b43      	ldr	r3, [pc, #268]	@ (801a6c8 <udp_input+0x218>)
 801a5bc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a5be:	429a      	cmp	r2, r3
 801a5c0:	d10e      	bne.n	801a5e0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801a5c2:	6a3b      	ldr	r3, [r7, #32]
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d014      	beq.n	801a5f2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801a5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5ca:	68da      	ldr	r2, [r3, #12]
 801a5cc:	6a3b      	ldr	r3, [r7, #32]
 801a5ce:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801a5d0:	4b3e      	ldr	r3, [pc, #248]	@ (801a6cc <udp_input+0x21c>)
 801a5d2:	681a      	ldr	r2, [r3, #0]
 801a5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5d6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801a5d8:	4a3c      	ldr	r2, [pc, #240]	@ (801a6cc <udp_input+0x21c>)
 801a5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5dc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801a5de:	e008      	b.n	801a5f2 <udp_input+0x142>
      }
    }

    prev = pcb;
 801a5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5e2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5e6:	68db      	ldr	r3, [r3, #12]
 801a5e8:	627b      	str	r3, [r7, #36]	@ 0x24
 801a5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d1a7      	bne.n	801a540 <udp_input+0x90>
 801a5f0:	e000      	b.n	801a5f4 <udp_input+0x144>
        break;
 801a5f2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801a5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d101      	bne.n	801a5fe <udp_input+0x14e>
    pcb = uncon_pcb;
 801a5fa:	69fb      	ldr	r3, [r7, #28]
 801a5fc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801a5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a600:	2b00      	cmp	r3, #0
 801a602:	d002      	beq.n	801a60a <udp_input+0x15a>
    for_us = 1;
 801a604:	2301      	movs	r3, #1
 801a606:	76fb      	strb	r3, [r7, #27]
 801a608:	e00a      	b.n	801a620 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801a60a:	683b      	ldr	r3, [r7, #0]
 801a60c:	3304      	adds	r3, #4
 801a60e:	681a      	ldr	r2, [r3, #0]
 801a610:	4b2d      	ldr	r3, [pc, #180]	@ (801a6c8 <udp_input+0x218>)
 801a612:	695b      	ldr	r3, [r3, #20]
 801a614:	429a      	cmp	r2, r3
 801a616:	bf0c      	ite	eq
 801a618:	2301      	moveq	r3, #1
 801a61a:	2300      	movne	r3, #0
 801a61c:	b2db      	uxtb	r3, r3
 801a61e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801a620:	7efb      	ldrb	r3, [r7, #27]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d041      	beq.n	801a6aa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801a626:	2108      	movs	r1, #8
 801a628:	6878      	ldr	r0, [r7, #4]
 801a62a:	f7f9 f977 	bl	801391c <pbuf_remove_header>
 801a62e:	4603      	mov	r3, r0
 801a630:	2b00      	cmp	r3, #0
 801a632:	d00a      	beq.n	801a64a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801a634:	4b20      	ldr	r3, [pc, #128]	@ (801a6b8 <udp_input+0x208>)
 801a636:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801a63a:	4925      	ldr	r1, [pc, #148]	@ (801a6d0 <udp_input+0x220>)
 801a63c:	4820      	ldr	r0, [pc, #128]	@ (801a6c0 <udp_input+0x210>)
 801a63e:	f003 fd85 	bl	801e14c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801a642:	6878      	ldr	r0, [r7, #4]
 801a644:	f7f9 f9f0 	bl	8013a28 <pbuf_free>
      goto end;
 801a648:	e032      	b.n	801a6b0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801a64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d012      	beq.n	801a676 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801a650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a652:	699b      	ldr	r3, [r3, #24]
 801a654:	2b00      	cmp	r3, #0
 801a656:	d00a      	beq.n	801a66e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801a658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a65a:	699c      	ldr	r4, [r3, #24]
 801a65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a65e:	69d8      	ldr	r0, [r3, #28]
 801a660:	8a3b      	ldrh	r3, [r7, #16]
 801a662:	9300      	str	r3, [sp, #0]
 801a664:	4b1b      	ldr	r3, [pc, #108]	@ (801a6d4 <udp_input+0x224>)
 801a666:	687a      	ldr	r2, [r7, #4]
 801a668:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a66a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801a66c:	e021      	b.n	801a6b2 <udp_input+0x202>
        pbuf_free(p);
 801a66e:	6878      	ldr	r0, [r7, #4]
 801a670:	f7f9 f9da 	bl	8013a28 <pbuf_free>
        goto end;
 801a674:	e01c      	b.n	801a6b0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801a676:	7cfb      	ldrb	r3, [r7, #19]
 801a678:	2b00      	cmp	r3, #0
 801a67a:	d112      	bne.n	801a6a2 <udp_input+0x1f2>
 801a67c:	4b12      	ldr	r3, [pc, #72]	@ (801a6c8 <udp_input+0x218>)
 801a67e:	695b      	ldr	r3, [r3, #20]
 801a680:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a684:	2be0      	cmp	r3, #224	@ 0xe0
 801a686:	d00c      	beq.n	801a6a2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801a688:	4b0f      	ldr	r3, [pc, #60]	@ (801a6c8 <udp_input+0x218>)
 801a68a:	899b      	ldrh	r3, [r3, #12]
 801a68c:	3308      	adds	r3, #8
 801a68e:	b29b      	uxth	r3, r3
 801a690:	b21b      	sxth	r3, r3
 801a692:	4619      	mov	r1, r3
 801a694:	6878      	ldr	r0, [r7, #4]
 801a696:	f7f9 f9b4 	bl	8013a02 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801a69a:	2103      	movs	r1, #3
 801a69c:	6878      	ldr	r0, [r7, #4]
 801a69e:	f001 f9a9 	bl	801b9f4 <icmp_dest_unreach>
      pbuf_free(p);
 801a6a2:	6878      	ldr	r0, [r7, #4]
 801a6a4:	f7f9 f9c0 	bl	8013a28 <pbuf_free>
  return;
 801a6a8:	e003      	b.n	801a6b2 <udp_input+0x202>
    pbuf_free(p);
 801a6aa:	6878      	ldr	r0, [r7, #4]
 801a6ac:	f7f9 f9bc 	bl	8013a28 <pbuf_free>
  return;
 801a6b0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801a6b2:	372c      	adds	r7, #44	@ 0x2c
 801a6b4:	46bd      	mov	sp, r7
 801a6b6:	bd90      	pop	{r4, r7, pc}
 801a6b8:	08021fc8 	.word	0x08021fc8
 801a6bc:	0802206c 	.word	0x0802206c
 801a6c0:	0802201c 	.word	0x0802201c
 801a6c4:	08022084 	.word	0x08022084
 801a6c8:	2000b3f0 	.word	0x2000b3f0
 801a6cc:	2000e54c 	.word	0x2000e54c
 801a6d0:	080220a0 	.word	0x080220a0
 801a6d4:	2000b400 	.word	0x2000b400

0801a6d8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801a6d8:	b580      	push	{r7, lr}
 801a6da:	b086      	sub	sp, #24
 801a6dc:	af00      	add	r7, sp, #0
 801a6de:	60f8      	str	r0, [r7, #12]
 801a6e0:	60b9      	str	r1, [r7, #8]
 801a6e2:	4613      	mov	r3, r2
 801a6e4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801a6e6:	68bb      	ldr	r3, [r7, #8]
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d101      	bne.n	801a6f0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801a6ec:	4b39      	ldr	r3, [pc, #228]	@ (801a7d4 <udp_bind+0xfc>)
 801a6ee:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801a6f0:	68fb      	ldr	r3, [r7, #12]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d109      	bne.n	801a70a <udp_bind+0x32>
 801a6f6:	4b38      	ldr	r3, [pc, #224]	@ (801a7d8 <udp_bind+0x100>)
 801a6f8:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801a6fc:	4937      	ldr	r1, [pc, #220]	@ (801a7dc <udp_bind+0x104>)
 801a6fe:	4838      	ldr	r0, [pc, #224]	@ (801a7e0 <udp_bind+0x108>)
 801a700:	f003 fd24 	bl	801e14c <iprintf>
 801a704:	f06f 030f 	mvn.w	r3, #15
 801a708:	e060      	b.n	801a7cc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801a70a:	2300      	movs	r3, #0
 801a70c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a70e:	4b35      	ldr	r3, [pc, #212]	@ (801a7e4 <udp_bind+0x10c>)
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	617b      	str	r3, [r7, #20]
 801a714:	e009      	b.n	801a72a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801a716:	68fa      	ldr	r2, [r7, #12]
 801a718:	697b      	ldr	r3, [r7, #20]
 801a71a:	429a      	cmp	r2, r3
 801a71c:	d102      	bne.n	801a724 <udp_bind+0x4c>
      rebind = 1;
 801a71e:	2301      	movs	r3, #1
 801a720:	74fb      	strb	r3, [r7, #19]
      break;
 801a722:	e005      	b.n	801a730 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a724:	697b      	ldr	r3, [r7, #20]
 801a726:	68db      	ldr	r3, [r3, #12]
 801a728:	617b      	str	r3, [r7, #20]
 801a72a:	697b      	ldr	r3, [r7, #20]
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d1f2      	bne.n	801a716 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801a730:	88fb      	ldrh	r3, [r7, #6]
 801a732:	2b00      	cmp	r3, #0
 801a734:	d109      	bne.n	801a74a <udp_bind+0x72>
    port = udp_new_port();
 801a736:	f7ff fe1f 	bl	801a378 <udp_new_port>
 801a73a:	4603      	mov	r3, r0
 801a73c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801a73e:	88fb      	ldrh	r3, [r7, #6]
 801a740:	2b00      	cmp	r3, #0
 801a742:	d12c      	bne.n	801a79e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801a744:	f06f 0307 	mvn.w	r3, #7
 801a748:	e040      	b.n	801a7cc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a74a:	4b26      	ldr	r3, [pc, #152]	@ (801a7e4 <udp_bind+0x10c>)
 801a74c:	681b      	ldr	r3, [r3, #0]
 801a74e:	617b      	str	r3, [r7, #20]
 801a750:	e022      	b.n	801a798 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801a752:	68fa      	ldr	r2, [r7, #12]
 801a754:	697b      	ldr	r3, [r7, #20]
 801a756:	429a      	cmp	r2, r3
 801a758:	d01b      	beq.n	801a792 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801a75a:	697b      	ldr	r3, [r7, #20]
 801a75c:	8a5b      	ldrh	r3, [r3, #18]
 801a75e:	88fa      	ldrh	r2, [r7, #6]
 801a760:	429a      	cmp	r2, r3
 801a762:	d116      	bne.n	801a792 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a764:	697b      	ldr	r3, [r7, #20]
 801a766:	681a      	ldr	r2, [r3, #0]
 801a768:	68bb      	ldr	r3, [r7, #8]
 801a76a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801a76c:	429a      	cmp	r2, r3
 801a76e:	d00d      	beq.n	801a78c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a770:	68bb      	ldr	r3, [r7, #8]
 801a772:	2b00      	cmp	r3, #0
 801a774:	d00a      	beq.n	801a78c <udp_bind+0xb4>
 801a776:	68bb      	ldr	r3, [r7, #8]
 801a778:	681b      	ldr	r3, [r3, #0]
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d006      	beq.n	801a78c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a77e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a780:	2b00      	cmp	r3, #0
 801a782:	d003      	beq.n	801a78c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a784:	697b      	ldr	r3, [r7, #20]
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d102      	bne.n	801a792 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801a78c:	f06f 0307 	mvn.w	r3, #7
 801a790:	e01c      	b.n	801a7cc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a792:	697b      	ldr	r3, [r7, #20]
 801a794:	68db      	ldr	r3, [r3, #12]
 801a796:	617b      	str	r3, [r7, #20]
 801a798:	697b      	ldr	r3, [r7, #20]
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d1d9      	bne.n	801a752 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801a79e:	68bb      	ldr	r3, [r7, #8]
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d002      	beq.n	801a7aa <udp_bind+0xd2>
 801a7a4:	68bb      	ldr	r3, [r7, #8]
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	e000      	b.n	801a7ac <udp_bind+0xd4>
 801a7aa:	2300      	movs	r3, #0
 801a7ac:	68fa      	ldr	r2, [r7, #12]
 801a7ae:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801a7b0:	68fb      	ldr	r3, [r7, #12]
 801a7b2:	88fa      	ldrh	r2, [r7, #6]
 801a7b4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801a7b6:	7cfb      	ldrb	r3, [r7, #19]
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d106      	bne.n	801a7ca <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801a7bc:	4b09      	ldr	r3, [pc, #36]	@ (801a7e4 <udp_bind+0x10c>)
 801a7be:	681a      	ldr	r2, [r3, #0]
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801a7c4:	4a07      	ldr	r2, [pc, #28]	@ (801a7e4 <udp_bind+0x10c>)
 801a7c6:	68fb      	ldr	r3, [r7, #12]
 801a7c8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801a7ca:	2300      	movs	r3, #0
}
 801a7cc:	4618      	mov	r0, r3
 801a7ce:	3718      	adds	r7, #24
 801a7d0:	46bd      	mov	sp, r7
 801a7d2:	bd80      	pop	{r7, pc}
 801a7d4:	08068488 	.word	0x08068488
 801a7d8:	08021fc8 	.word	0x08021fc8
 801a7dc:	08022290 	.word	0x08022290
 801a7e0:	0802201c 	.word	0x0802201c
 801a7e4:	2000e54c 	.word	0x2000e54c

0801a7e8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801a7e8:	b580      	push	{r7, lr}
 801a7ea:	b084      	sub	sp, #16
 801a7ec:	af00      	add	r7, sp, #0
 801a7ee:	60f8      	str	r0, [r7, #12]
 801a7f0:	60b9      	str	r1, [r7, #8]
 801a7f2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d107      	bne.n	801a80a <udp_recv+0x22>
 801a7fa:	4b08      	ldr	r3, [pc, #32]	@ (801a81c <udp_recv+0x34>)
 801a7fc:	f240 428a 	movw	r2, #1162	@ 0x48a
 801a800:	4907      	ldr	r1, [pc, #28]	@ (801a820 <udp_recv+0x38>)
 801a802:	4808      	ldr	r0, [pc, #32]	@ (801a824 <udp_recv+0x3c>)
 801a804:	f003 fca2 	bl	801e14c <iprintf>
 801a808:	e005      	b.n	801a816 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801a80a:	68fb      	ldr	r3, [r7, #12]
 801a80c:	68ba      	ldr	r2, [r7, #8]
 801a80e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	687a      	ldr	r2, [r7, #4]
 801a814:	61da      	str	r2, [r3, #28]
}
 801a816:	3710      	adds	r7, #16
 801a818:	46bd      	mov	sp, r7
 801a81a:	bd80      	pop	{r7, pc}
 801a81c:	08021fc8 	.word	0x08021fc8
 801a820:	080222fc 	.word	0x080222fc
 801a824:	0802201c 	.word	0x0802201c

0801a828 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801a828:	b580      	push	{r7, lr}
 801a82a:	b084      	sub	sp, #16
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	2b00      	cmp	r3, #0
 801a834:	d107      	bne.n	801a846 <udp_remove+0x1e>
 801a836:	4b19      	ldr	r3, [pc, #100]	@ (801a89c <udp_remove+0x74>)
 801a838:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801a83c:	4918      	ldr	r1, [pc, #96]	@ (801a8a0 <udp_remove+0x78>)
 801a83e:	4819      	ldr	r0, [pc, #100]	@ (801a8a4 <udp_remove+0x7c>)
 801a840:	f003 fc84 	bl	801e14c <iprintf>
 801a844:	e026      	b.n	801a894 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801a846:	4b18      	ldr	r3, [pc, #96]	@ (801a8a8 <udp_remove+0x80>)
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	687a      	ldr	r2, [r7, #4]
 801a84c:	429a      	cmp	r2, r3
 801a84e:	d105      	bne.n	801a85c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801a850:	4b15      	ldr	r3, [pc, #84]	@ (801a8a8 <udp_remove+0x80>)
 801a852:	681b      	ldr	r3, [r3, #0]
 801a854:	68db      	ldr	r3, [r3, #12]
 801a856:	4a14      	ldr	r2, [pc, #80]	@ (801a8a8 <udp_remove+0x80>)
 801a858:	6013      	str	r3, [r2, #0]
 801a85a:	e017      	b.n	801a88c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a85c:	4b12      	ldr	r3, [pc, #72]	@ (801a8a8 <udp_remove+0x80>)
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	60fb      	str	r3, [r7, #12]
 801a862:	e010      	b.n	801a886 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801a864:	68fb      	ldr	r3, [r7, #12]
 801a866:	68db      	ldr	r3, [r3, #12]
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d009      	beq.n	801a880 <udp_remove+0x58>
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	68db      	ldr	r3, [r3, #12]
 801a870:	687a      	ldr	r2, [r7, #4]
 801a872:	429a      	cmp	r2, r3
 801a874:	d104      	bne.n	801a880 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	68da      	ldr	r2, [r3, #12]
 801a87a:	68fb      	ldr	r3, [r7, #12]
 801a87c:	60da      	str	r2, [r3, #12]
        break;
 801a87e:	e005      	b.n	801a88c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a880:	68fb      	ldr	r3, [r7, #12]
 801a882:	68db      	ldr	r3, [r3, #12]
 801a884:	60fb      	str	r3, [r7, #12]
 801a886:	68fb      	ldr	r3, [r7, #12]
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d1eb      	bne.n	801a864 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801a88c:	6879      	ldr	r1, [r7, #4]
 801a88e:	2000      	movs	r0, #0
 801a890:	f7f8 fa26 	bl	8012ce0 <memp_free>
}
 801a894:	3710      	adds	r7, #16
 801a896:	46bd      	mov	sp, r7
 801a898:	bd80      	pop	{r7, pc}
 801a89a:	bf00      	nop
 801a89c:	08021fc8 	.word	0x08021fc8
 801a8a0:	08022314 	.word	0x08022314
 801a8a4:	0802201c 	.word	0x0802201c
 801a8a8:	2000e54c 	.word	0x2000e54c

0801a8ac <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801a8ac:	b580      	push	{r7, lr}
 801a8ae:	b082      	sub	sp, #8
 801a8b0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801a8b2:	2000      	movs	r0, #0
 801a8b4:	f7f8 f99e 	bl	8012bf4 <memp_malloc>
 801a8b8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	d007      	beq.n	801a8d0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801a8c0:	2220      	movs	r2, #32
 801a8c2:	2100      	movs	r1, #0
 801a8c4:	6878      	ldr	r0, [r7, #4]
 801a8c6:	f003 fce2 	bl	801e28e <memset>
    pcb->ttl = UDP_TTL;
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	22ff      	movs	r2, #255	@ 0xff
 801a8ce:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801a8d0:	687b      	ldr	r3, [r7, #4]
}
 801a8d2:	4618      	mov	r0, r3
 801a8d4:	3708      	adds	r7, #8
 801a8d6:	46bd      	mov	sp, r7
 801a8d8:	bd80      	pop	{r7, pc}

0801a8da <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801a8da:	b580      	push	{r7, lr}
 801a8dc:	b084      	sub	sp, #16
 801a8de:	af00      	add	r7, sp, #0
 801a8e0:	4603      	mov	r3, r0
 801a8e2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801a8e4:	f7ff ffe2 	bl	801a8ac <udp_new>
 801a8e8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801a8ea:	68fb      	ldr	r3, [r7, #12]
}
 801a8ec:	4618      	mov	r0, r3
 801a8ee:	3710      	adds	r7, #16
 801a8f0:	46bd      	mov	sp, r7
 801a8f2:	bd80      	pop	{r7, pc}

0801a8f4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a8f4:	b480      	push	{r7}
 801a8f6:	b085      	sub	sp, #20
 801a8f8:	af00      	add	r7, sp, #0
 801a8fa:	6078      	str	r0, [r7, #4]
 801a8fc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	2b00      	cmp	r3, #0
 801a902:	d01e      	beq.n	801a942 <udp_netif_ip_addr_changed+0x4e>
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	681b      	ldr	r3, [r3, #0]
 801a908:	2b00      	cmp	r3, #0
 801a90a:	d01a      	beq.n	801a942 <udp_netif_ip_addr_changed+0x4e>
 801a90c:	683b      	ldr	r3, [r7, #0]
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d017      	beq.n	801a942 <udp_netif_ip_addr_changed+0x4e>
 801a912:	683b      	ldr	r3, [r7, #0]
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	2b00      	cmp	r3, #0
 801a918:	d013      	beq.n	801a942 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a91a:	4b0d      	ldr	r3, [pc, #52]	@ (801a950 <udp_netif_ip_addr_changed+0x5c>)
 801a91c:	681b      	ldr	r3, [r3, #0]
 801a91e:	60fb      	str	r3, [r7, #12]
 801a920:	e00c      	b.n	801a93c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801a922:	68fb      	ldr	r3, [r7, #12]
 801a924:	681a      	ldr	r2, [r3, #0]
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	429a      	cmp	r2, r3
 801a92c:	d103      	bne.n	801a936 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801a92e:	683b      	ldr	r3, [r7, #0]
 801a930:	681a      	ldr	r2, [r3, #0]
 801a932:	68fb      	ldr	r3, [r7, #12]
 801a934:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a936:	68fb      	ldr	r3, [r7, #12]
 801a938:	68db      	ldr	r3, [r3, #12]
 801a93a:	60fb      	str	r3, [r7, #12]
 801a93c:	68fb      	ldr	r3, [r7, #12]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d1ef      	bne.n	801a922 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801a942:	bf00      	nop
 801a944:	3714      	adds	r7, #20
 801a946:	46bd      	mov	sp, r7
 801a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a94c:	4770      	bx	lr
 801a94e:	bf00      	nop
 801a950:	2000e54c 	.word	0x2000e54c

0801a954 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a954:	b580      	push	{r7, lr}
 801a956:	b082      	sub	sp, #8
 801a958:	af00      	add	r7, sp, #0
 801a95a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a95c:	4915      	ldr	r1, [pc, #84]	@ (801a9b4 <etharp_free_entry+0x60>)
 801a95e:	687a      	ldr	r2, [r7, #4]
 801a960:	4613      	mov	r3, r2
 801a962:	005b      	lsls	r3, r3, #1
 801a964:	4413      	add	r3, r2
 801a966:	00db      	lsls	r3, r3, #3
 801a968:	440b      	add	r3, r1
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	d013      	beq.n	801a998 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a970:	4910      	ldr	r1, [pc, #64]	@ (801a9b4 <etharp_free_entry+0x60>)
 801a972:	687a      	ldr	r2, [r7, #4]
 801a974:	4613      	mov	r3, r2
 801a976:	005b      	lsls	r3, r3, #1
 801a978:	4413      	add	r3, r2
 801a97a:	00db      	lsls	r3, r3, #3
 801a97c:	440b      	add	r3, r1
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	4618      	mov	r0, r3
 801a982:	f7f9 f851 	bl	8013a28 <pbuf_free>
    arp_table[i].q = NULL;
 801a986:	490b      	ldr	r1, [pc, #44]	@ (801a9b4 <etharp_free_entry+0x60>)
 801a988:	687a      	ldr	r2, [r7, #4]
 801a98a:	4613      	mov	r3, r2
 801a98c:	005b      	lsls	r3, r3, #1
 801a98e:	4413      	add	r3, r2
 801a990:	00db      	lsls	r3, r3, #3
 801a992:	440b      	add	r3, r1
 801a994:	2200      	movs	r2, #0
 801a996:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a998:	4906      	ldr	r1, [pc, #24]	@ (801a9b4 <etharp_free_entry+0x60>)
 801a99a:	687a      	ldr	r2, [r7, #4]
 801a99c:	4613      	mov	r3, r2
 801a99e:	005b      	lsls	r3, r3, #1
 801a9a0:	4413      	add	r3, r2
 801a9a2:	00db      	lsls	r3, r3, #3
 801a9a4:	440b      	add	r3, r1
 801a9a6:	3314      	adds	r3, #20
 801a9a8:	2200      	movs	r2, #0
 801a9aa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801a9ac:	bf00      	nop
 801a9ae:	3708      	adds	r7, #8
 801a9b0:	46bd      	mov	sp, r7
 801a9b2:	bd80      	pop	{r7, pc}
 801a9b4:	2000e550 	.word	0x2000e550

0801a9b8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801a9b8:	b580      	push	{r7, lr}
 801a9ba:	b082      	sub	sp, #8
 801a9bc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a9be:	2300      	movs	r3, #0
 801a9c0:	607b      	str	r3, [r7, #4]
 801a9c2:	e096      	b.n	801aaf2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801a9c4:	494f      	ldr	r1, [pc, #316]	@ (801ab04 <etharp_tmr+0x14c>)
 801a9c6:	687a      	ldr	r2, [r7, #4]
 801a9c8:	4613      	mov	r3, r2
 801a9ca:	005b      	lsls	r3, r3, #1
 801a9cc:	4413      	add	r3, r2
 801a9ce:	00db      	lsls	r3, r3, #3
 801a9d0:	440b      	add	r3, r1
 801a9d2:	3314      	adds	r3, #20
 801a9d4:	781b      	ldrb	r3, [r3, #0]
 801a9d6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801a9d8:	78fb      	ldrb	r3, [r7, #3]
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	f000 8086 	beq.w	801aaec <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801a9e0:	4948      	ldr	r1, [pc, #288]	@ (801ab04 <etharp_tmr+0x14c>)
 801a9e2:	687a      	ldr	r2, [r7, #4]
 801a9e4:	4613      	mov	r3, r2
 801a9e6:	005b      	lsls	r3, r3, #1
 801a9e8:	4413      	add	r3, r2
 801a9ea:	00db      	lsls	r3, r3, #3
 801a9ec:	440b      	add	r3, r1
 801a9ee:	3312      	adds	r3, #18
 801a9f0:	881b      	ldrh	r3, [r3, #0]
 801a9f2:	3301      	adds	r3, #1
 801a9f4:	b298      	uxth	r0, r3
 801a9f6:	4943      	ldr	r1, [pc, #268]	@ (801ab04 <etharp_tmr+0x14c>)
 801a9f8:	687a      	ldr	r2, [r7, #4]
 801a9fa:	4613      	mov	r3, r2
 801a9fc:	005b      	lsls	r3, r3, #1
 801a9fe:	4413      	add	r3, r2
 801aa00:	00db      	lsls	r3, r3, #3
 801aa02:	440b      	add	r3, r1
 801aa04:	3312      	adds	r3, #18
 801aa06:	4602      	mov	r2, r0
 801aa08:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801aa0a:	493e      	ldr	r1, [pc, #248]	@ (801ab04 <etharp_tmr+0x14c>)
 801aa0c:	687a      	ldr	r2, [r7, #4]
 801aa0e:	4613      	mov	r3, r2
 801aa10:	005b      	lsls	r3, r3, #1
 801aa12:	4413      	add	r3, r2
 801aa14:	00db      	lsls	r3, r3, #3
 801aa16:	440b      	add	r3, r1
 801aa18:	3312      	adds	r3, #18
 801aa1a:	881b      	ldrh	r3, [r3, #0]
 801aa1c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801aa20:	d215      	bcs.n	801aa4e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801aa22:	4938      	ldr	r1, [pc, #224]	@ (801ab04 <etharp_tmr+0x14c>)
 801aa24:	687a      	ldr	r2, [r7, #4]
 801aa26:	4613      	mov	r3, r2
 801aa28:	005b      	lsls	r3, r3, #1
 801aa2a:	4413      	add	r3, r2
 801aa2c:	00db      	lsls	r3, r3, #3
 801aa2e:	440b      	add	r3, r1
 801aa30:	3314      	adds	r3, #20
 801aa32:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801aa34:	2b01      	cmp	r3, #1
 801aa36:	d10e      	bne.n	801aa56 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801aa38:	4932      	ldr	r1, [pc, #200]	@ (801ab04 <etharp_tmr+0x14c>)
 801aa3a:	687a      	ldr	r2, [r7, #4]
 801aa3c:	4613      	mov	r3, r2
 801aa3e:	005b      	lsls	r3, r3, #1
 801aa40:	4413      	add	r3, r2
 801aa42:	00db      	lsls	r3, r3, #3
 801aa44:	440b      	add	r3, r1
 801aa46:	3312      	adds	r3, #18
 801aa48:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801aa4a:	2b04      	cmp	r3, #4
 801aa4c:	d903      	bls.n	801aa56 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801aa4e:	6878      	ldr	r0, [r7, #4]
 801aa50:	f7ff ff80 	bl	801a954 <etharp_free_entry>
 801aa54:	e04a      	b.n	801aaec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801aa56:	492b      	ldr	r1, [pc, #172]	@ (801ab04 <etharp_tmr+0x14c>)
 801aa58:	687a      	ldr	r2, [r7, #4]
 801aa5a:	4613      	mov	r3, r2
 801aa5c:	005b      	lsls	r3, r3, #1
 801aa5e:	4413      	add	r3, r2
 801aa60:	00db      	lsls	r3, r3, #3
 801aa62:	440b      	add	r3, r1
 801aa64:	3314      	adds	r3, #20
 801aa66:	781b      	ldrb	r3, [r3, #0]
 801aa68:	2b03      	cmp	r3, #3
 801aa6a:	d10a      	bne.n	801aa82 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801aa6c:	4925      	ldr	r1, [pc, #148]	@ (801ab04 <etharp_tmr+0x14c>)
 801aa6e:	687a      	ldr	r2, [r7, #4]
 801aa70:	4613      	mov	r3, r2
 801aa72:	005b      	lsls	r3, r3, #1
 801aa74:	4413      	add	r3, r2
 801aa76:	00db      	lsls	r3, r3, #3
 801aa78:	440b      	add	r3, r1
 801aa7a:	3314      	adds	r3, #20
 801aa7c:	2204      	movs	r2, #4
 801aa7e:	701a      	strb	r2, [r3, #0]
 801aa80:	e034      	b.n	801aaec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801aa82:	4920      	ldr	r1, [pc, #128]	@ (801ab04 <etharp_tmr+0x14c>)
 801aa84:	687a      	ldr	r2, [r7, #4]
 801aa86:	4613      	mov	r3, r2
 801aa88:	005b      	lsls	r3, r3, #1
 801aa8a:	4413      	add	r3, r2
 801aa8c:	00db      	lsls	r3, r3, #3
 801aa8e:	440b      	add	r3, r1
 801aa90:	3314      	adds	r3, #20
 801aa92:	781b      	ldrb	r3, [r3, #0]
 801aa94:	2b04      	cmp	r3, #4
 801aa96:	d10a      	bne.n	801aaae <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801aa98:	491a      	ldr	r1, [pc, #104]	@ (801ab04 <etharp_tmr+0x14c>)
 801aa9a:	687a      	ldr	r2, [r7, #4]
 801aa9c:	4613      	mov	r3, r2
 801aa9e:	005b      	lsls	r3, r3, #1
 801aaa0:	4413      	add	r3, r2
 801aaa2:	00db      	lsls	r3, r3, #3
 801aaa4:	440b      	add	r3, r1
 801aaa6:	3314      	adds	r3, #20
 801aaa8:	2202      	movs	r2, #2
 801aaaa:	701a      	strb	r2, [r3, #0]
 801aaac:	e01e      	b.n	801aaec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801aaae:	4915      	ldr	r1, [pc, #84]	@ (801ab04 <etharp_tmr+0x14c>)
 801aab0:	687a      	ldr	r2, [r7, #4]
 801aab2:	4613      	mov	r3, r2
 801aab4:	005b      	lsls	r3, r3, #1
 801aab6:	4413      	add	r3, r2
 801aab8:	00db      	lsls	r3, r3, #3
 801aaba:	440b      	add	r3, r1
 801aabc:	3314      	adds	r3, #20
 801aabe:	781b      	ldrb	r3, [r3, #0]
 801aac0:	2b01      	cmp	r3, #1
 801aac2:	d113      	bne.n	801aaec <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801aac4:	490f      	ldr	r1, [pc, #60]	@ (801ab04 <etharp_tmr+0x14c>)
 801aac6:	687a      	ldr	r2, [r7, #4]
 801aac8:	4613      	mov	r3, r2
 801aaca:	005b      	lsls	r3, r3, #1
 801aacc:	4413      	add	r3, r2
 801aace:	00db      	lsls	r3, r3, #3
 801aad0:	440b      	add	r3, r1
 801aad2:	3308      	adds	r3, #8
 801aad4:	6818      	ldr	r0, [r3, #0]
 801aad6:	687a      	ldr	r2, [r7, #4]
 801aad8:	4613      	mov	r3, r2
 801aada:	005b      	lsls	r3, r3, #1
 801aadc:	4413      	add	r3, r2
 801aade:	00db      	lsls	r3, r3, #3
 801aae0:	4a08      	ldr	r2, [pc, #32]	@ (801ab04 <etharp_tmr+0x14c>)
 801aae2:	4413      	add	r3, r2
 801aae4:	3304      	adds	r3, #4
 801aae6:	4619      	mov	r1, r3
 801aae8:	f000 fe6e 	bl	801b7c8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	3301      	adds	r3, #1
 801aaf0:	607b      	str	r3, [r7, #4]
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	2b09      	cmp	r3, #9
 801aaf6:	f77f af65 	ble.w	801a9c4 <etharp_tmr+0xc>
      }
    }
  }
}
 801aafa:	bf00      	nop
 801aafc:	bf00      	nop
 801aafe:	3708      	adds	r7, #8
 801ab00:	46bd      	mov	sp, r7
 801ab02:	bd80      	pop	{r7, pc}
 801ab04:	2000e550 	.word	0x2000e550

0801ab08 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801ab08:	b580      	push	{r7, lr}
 801ab0a:	b08a      	sub	sp, #40	@ 0x28
 801ab0c:	af00      	add	r7, sp, #0
 801ab0e:	60f8      	str	r0, [r7, #12]
 801ab10:	460b      	mov	r3, r1
 801ab12:	607a      	str	r2, [r7, #4]
 801ab14:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801ab16:	230a      	movs	r3, #10
 801ab18:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801ab1a:	230a      	movs	r3, #10
 801ab1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801ab1e:	230a      	movs	r3, #10
 801ab20:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801ab22:	2300      	movs	r3, #0
 801ab24:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801ab26:	230a      	movs	r3, #10
 801ab28:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801ab2a:	2300      	movs	r3, #0
 801ab2c:	83bb      	strh	r3, [r7, #28]
 801ab2e:	2300      	movs	r3, #0
 801ab30:	837b      	strh	r3, [r7, #26]
 801ab32:	2300      	movs	r3, #0
 801ab34:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ab36:	2300      	movs	r3, #0
 801ab38:	843b      	strh	r3, [r7, #32]
 801ab3a:	e0ae      	b.n	801ac9a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801ab3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab40:	49a6      	ldr	r1, [pc, #664]	@ (801addc <etharp_find_entry+0x2d4>)
 801ab42:	4613      	mov	r3, r2
 801ab44:	005b      	lsls	r3, r3, #1
 801ab46:	4413      	add	r3, r2
 801ab48:	00db      	lsls	r3, r3, #3
 801ab4a:	440b      	add	r3, r1
 801ab4c:	3314      	adds	r3, #20
 801ab4e:	781b      	ldrb	r3, [r3, #0]
 801ab50:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801ab52:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801ab56:	2b0a      	cmp	r3, #10
 801ab58:	d105      	bne.n	801ab66 <etharp_find_entry+0x5e>
 801ab5a:	7dfb      	ldrb	r3, [r7, #23]
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	d102      	bne.n	801ab66 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801ab60:	8c3b      	ldrh	r3, [r7, #32]
 801ab62:	847b      	strh	r3, [r7, #34]	@ 0x22
 801ab64:	e095      	b.n	801ac92 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801ab66:	7dfb      	ldrb	r3, [r7, #23]
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	f000 8092 	beq.w	801ac92 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801ab6e:	7dfb      	ldrb	r3, [r7, #23]
 801ab70:	2b01      	cmp	r3, #1
 801ab72:	d009      	beq.n	801ab88 <etharp_find_entry+0x80>
 801ab74:	7dfb      	ldrb	r3, [r7, #23]
 801ab76:	2b01      	cmp	r3, #1
 801ab78:	d806      	bhi.n	801ab88 <etharp_find_entry+0x80>
 801ab7a:	4b99      	ldr	r3, [pc, #612]	@ (801ade0 <etharp_find_entry+0x2d8>)
 801ab7c:	f240 1223 	movw	r2, #291	@ 0x123
 801ab80:	4998      	ldr	r1, [pc, #608]	@ (801ade4 <etharp_find_entry+0x2dc>)
 801ab82:	4899      	ldr	r0, [pc, #612]	@ (801ade8 <etharp_find_entry+0x2e0>)
 801ab84:	f003 fae2 	bl	801e14c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801ab88:	68fb      	ldr	r3, [r7, #12]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d020      	beq.n	801abd0 <etharp_find_entry+0xc8>
 801ab8e:	68fb      	ldr	r3, [r7, #12]
 801ab90:	6819      	ldr	r1, [r3, #0]
 801ab92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab96:	4891      	ldr	r0, [pc, #580]	@ (801addc <etharp_find_entry+0x2d4>)
 801ab98:	4613      	mov	r3, r2
 801ab9a:	005b      	lsls	r3, r3, #1
 801ab9c:	4413      	add	r3, r2
 801ab9e:	00db      	lsls	r3, r3, #3
 801aba0:	4403      	add	r3, r0
 801aba2:	3304      	adds	r3, #4
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	4299      	cmp	r1, r3
 801aba8:	d112      	bne.n	801abd0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	2b00      	cmp	r3, #0
 801abae:	d00c      	beq.n	801abca <etharp_find_entry+0xc2>
 801abb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801abb4:	4989      	ldr	r1, [pc, #548]	@ (801addc <etharp_find_entry+0x2d4>)
 801abb6:	4613      	mov	r3, r2
 801abb8:	005b      	lsls	r3, r3, #1
 801abba:	4413      	add	r3, r2
 801abbc:	00db      	lsls	r3, r3, #3
 801abbe:	440b      	add	r3, r1
 801abc0:	3308      	adds	r3, #8
 801abc2:	681b      	ldr	r3, [r3, #0]
 801abc4:	687a      	ldr	r2, [r7, #4]
 801abc6:	429a      	cmp	r2, r3
 801abc8:	d102      	bne.n	801abd0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801abca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801abce:	e100      	b.n	801add2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801abd0:	7dfb      	ldrb	r3, [r7, #23]
 801abd2:	2b01      	cmp	r3, #1
 801abd4:	d140      	bne.n	801ac58 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801abd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801abda:	4980      	ldr	r1, [pc, #512]	@ (801addc <etharp_find_entry+0x2d4>)
 801abdc:	4613      	mov	r3, r2
 801abde:	005b      	lsls	r3, r3, #1
 801abe0:	4413      	add	r3, r2
 801abe2:	00db      	lsls	r3, r3, #3
 801abe4:	440b      	add	r3, r1
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d01a      	beq.n	801ac22 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801abec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801abf0:	497a      	ldr	r1, [pc, #488]	@ (801addc <etharp_find_entry+0x2d4>)
 801abf2:	4613      	mov	r3, r2
 801abf4:	005b      	lsls	r3, r3, #1
 801abf6:	4413      	add	r3, r2
 801abf8:	00db      	lsls	r3, r3, #3
 801abfa:	440b      	add	r3, r1
 801abfc:	3312      	adds	r3, #18
 801abfe:	881b      	ldrh	r3, [r3, #0]
 801ac00:	8bba      	ldrh	r2, [r7, #28]
 801ac02:	429a      	cmp	r2, r3
 801ac04:	d845      	bhi.n	801ac92 <etharp_find_entry+0x18a>
            old_queue = i;
 801ac06:	8c3b      	ldrh	r3, [r7, #32]
 801ac08:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801ac0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ac0e:	4973      	ldr	r1, [pc, #460]	@ (801addc <etharp_find_entry+0x2d4>)
 801ac10:	4613      	mov	r3, r2
 801ac12:	005b      	lsls	r3, r3, #1
 801ac14:	4413      	add	r3, r2
 801ac16:	00db      	lsls	r3, r3, #3
 801ac18:	440b      	add	r3, r1
 801ac1a:	3312      	adds	r3, #18
 801ac1c:	881b      	ldrh	r3, [r3, #0]
 801ac1e:	83bb      	strh	r3, [r7, #28]
 801ac20:	e037      	b.n	801ac92 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801ac22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ac26:	496d      	ldr	r1, [pc, #436]	@ (801addc <etharp_find_entry+0x2d4>)
 801ac28:	4613      	mov	r3, r2
 801ac2a:	005b      	lsls	r3, r3, #1
 801ac2c:	4413      	add	r3, r2
 801ac2e:	00db      	lsls	r3, r3, #3
 801ac30:	440b      	add	r3, r1
 801ac32:	3312      	adds	r3, #18
 801ac34:	881b      	ldrh	r3, [r3, #0]
 801ac36:	8b7a      	ldrh	r2, [r7, #26]
 801ac38:	429a      	cmp	r2, r3
 801ac3a:	d82a      	bhi.n	801ac92 <etharp_find_entry+0x18a>
            old_pending = i;
 801ac3c:	8c3b      	ldrh	r3, [r7, #32]
 801ac3e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801ac40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ac44:	4965      	ldr	r1, [pc, #404]	@ (801addc <etharp_find_entry+0x2d4>)
 801ac46:	4613      	mov	r3, r2
 801ac48:	005b      	lsls	r3, r3, #1
 801ac4a:	4413      	add	r3, r2
 801ac4c:	00db      	lsls	r3, r3, #3
 801ac4e:	440b      	add	r3, r1
 801ac50:	3312      	adds	r3, #18
 801ac52:	881b      	ldrh	r3, [r3, #0]
 801ac54:	837b      	strh	r3, [r7, #26]
 801ac56:	e01c      	b.n	801ac92 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801ac58:	7dfb      	ldrb	r3, [r7, #23]
 801ac5a:	2b01      	cmp	r3, #1
 801ac5c:	d919      	bls.n	801ac92 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801ac5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ac62:	495e      	ldr	r1, [pc, #376]	@ (801addc <etharp_find_entry+0x2d4>)
 801ac64:	4613      	mov	r3, r2
 801ac66:	005b      	lsls	r3, r3, #1
 801ac68:	4413      	add	r3, r2
 801ac6a:	00db      	lsls	r3, r3, #3
 801ac6c:	440b      	add	r3, r1
 801ac6e:	3312      	adds	r3, #18
 801ac70:	881b      	ldrh	r3, [r3, #0]
 801ac72:	8b3a      	ldrh	r2, [r7, #24]
 801ac74:	429a      	cmp	r2, r3
 801ac76:	d80c      	bhi.n	801ac92 <etharp_find_entry+0x18a>
            old_stable = i;
 801ac78:	8c3b      	ldrh	r3, [r7, #32]
 801ac7a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801ac7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ac80:	4956      	ldr	r1, [pc, #344]	@ (801addc <etharp_find_entry+0x2d4>)
 801ac82:	4613      	mov	r3, r2
 801ac84:	005b      	lsls	r3, r3, #1
 801ac86:	4413      	add	r3, r2
 801ac88:	00db      	lsls	r3, r3, #3
 801ac8a:	440b      	add	r3, r1
 801ac8c:	3312      	adds	r3, #18
 801ac8e:	881b      	ldrh	r3, [r3, #0]
 801ac90:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ac92:	8c3b      	ldrh	r3, [r7, #32]
 801ac94:	3301      	adds	r3, #1
 801ac96:	b29b      	uxth	r3, r3
 801ac98:	843b      	strh	r3, [r7, #32]
 801ac9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ac9e:	2b09      	cmp	r3, #9
 801aca0:	f77f af4c 	ble.w	801ab3c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801aca4:	7afb      	ldrb	r3, [r7, #11]
 801aca6:	f003 0302 	and.w	r3, r3, #2
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d108      	bne.n	801acc0 <etharp_find_entry+0x1b8>
 801acae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801acb2:	2b0a      	cmp	r3, #10
 801acb4:	d107      	bne.n	801acc6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801acb6:	7afb      	ldrb	r3, [r7, #11]
 801acb8:	f003 0301 	and.w	r3, r3, #1
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	d102      	bne.n	801acc6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801acc0:	f04f 33ff 	mov.w	r3, #4294967295
 801acc4:	e085      	b.n	801add2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801acc6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801acca:	2b09      	cmp	r3, #9
 801accc:	dc02      	bgt.n	801acd4 <etharp_find_entry+0x1cc>
    i = empty;
 801acce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801acd0:	843b      	strh	r3, [r7, #32]
 801acd2:	e039      	b.n	801ad48 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801acd4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801acd8:	2b09      	cmp	r3, #9
 801acda:	dc14      	bgt.n	801ad06 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801acdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801acde:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801ace0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ace4:	493d      	ldr	r1, [pc, #244]	@ (801addc <etharp_find_entry+0x2d4>)
 801ace6:	4613      	mov	r3, r2
 801ace8:	005b      	lsls	r3, r3, #1
 801acea:	4413      	add	r3, r2
 801acec:	00db      	lsls	r3, r3, #3
 801acee:	440b      	add	r3, r1
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d018      	beq.n	801ad28 <etharp_find_entry+0x220>
 801acf6:	4b3a      	ldr	r3, [pc, #232]	@ (801ade0 <etharp_find_entry+0x2d8>)
 801acf8:	f240 126d 	movw	r2, #365	@ 0x16d
 801acfc:	493b      	ldr	r1, [pc, #236]	@ (801adec <etharp_find_entry+0x2e4>)
 801acfe:	483a      	ldr	r0, [pc, #232]	@ (801ade8 <etharp_find_entry+0x2e0>)
 801ad00:	f003 fa24 	bl	801e14c <iprintf>
 801ad04:	e010      	b.n	801ad28 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801ad06:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801ad0a:	2b09      	cmp	r3, #9
 801ad0c:	dc02      	bgt.n	801ad14 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801ad0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801ad10:	843b      	strh	r3, [r7, #32]
 801ad12:	e009      	b.n	801ad28 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801ad14:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801ad18:	2b09      	cmp	r3, #9
 801ad1a:	dc02      	bgt.n	801ad22 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801ad1c:	8bfb      	ldrh	r3, [r7, #30]
 801ad1e:	843b      	strh	r3, [r7, #32]
 801ad20:	e002      	b.n	801ad28 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801ad22:	f04f 33ff 	mov.w	r3, #4294967295
 801ad26:	e054      	b.n	801add2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ad28:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ad2c:	2b09      	cmp	r3, #9
 801ad2e:	dd06      	ble.n	801ad3e <etharp_find_entry+0x236>
 801ad30:	4b2b      	ldr	r3, [pc, #172]	@ (801ade0 <etharp_find_entry+0x2d8>)
 801ad32:	f240 127f 	movw	r2, #383	@ 0x17f
 801ad36:	492e      	ldr	r1, [pc, #184]	@ (801adf0 <etharp_find_entry+0x2e8>)
 801ad38:	482b      	ldr	r0, [pc, #172]	@ (801ade8 <etharp_find_entry+0x2e0>)
 801ad3a:	f003 fa07 	bl	801e14c <iprintf>
    etharp_free_entry(i);
 801ad3e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ad42:	4618      	mov	r0, r3
 801ad44:	f7ff fe06 	bl	801a954 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ad48:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ad4c:	2b09      	cmp	r3, #9
 801ad4e:	dd06      	ble.n	801ad5e <etharp_find_entry+0x256>
 801ad50:	4b23      	ldr	r3, [pc, #140]	@ (801ade0 <etharp_find_entry+0x2d8>)
 801ad52:	f240 1283 	movw	r2, #387	@ 0x183
 801ad56:	4926      	ldr	r1, [pc, #152]	@ (801adf0 <etharp_find_entry+0x2e8>)
 801ad58:	4823      	ldr	r0, [pc, #140]	@ (801ade8 <etharp_find_entry+0x2e0>)
 801ad5a:	f003 f9f7 	bl	801e14c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801ad5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad62:	491e      	ldr	r1, [pc, #120]	@ (801addc <etharp_find_entry+0x2d4>)
 801ad64:	4613      	mov	r3, r2
 801ad66:	005b      	lsls	r3, r3, #1
 801ad68:	4413      	add	r3, r2
 801ad6a:	00db      	lsls	r3, r3, #3
 801ad6c:	440b      	add	r3, r1
 801ad6e:	3314      	adds	r3, #20
 801ad70:	781b      	ldrb	r3, [r3, #0]
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d006      	beq.n	801ad84 <etharp_find_entry+0x27c>
 801ad76:	4b1a      	ldr	r3, [pc, #104]	@ (801ade0 <etharp_find_entry+0x2d8>)
 801ad78:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801ad7c:	491d      	ldr	r1, [pc, #116]	@ (801adf4 <etharp_find_entry+0x2ec>)
 801ad7e:	481a      	ldr	r0, [pc, #104]	@ (801ade8 <etharp_find_entry+0x2e0>)
 801ad80:	f003 f9e4 	bl	801e14c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801ad84:	68fb      	ldr	r3, [r7, #12]
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	d00b      	beq.n	801ada2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801ad8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad8e:	68fb      	ldr	r3, [r7, #12]
 801ad90:	6819      	ldr	r1, [r3, #0]
 801ad92:	4812      	ldr	r0, [pc, #72]	@ (801addc <etharp_find_entry+0x2d4>)
 801ad94:	4613      	mov	r3, r2
 801ad96:	005b      	lsls	r3, r3, #1
 801ad98:	4413      	add	r3, r2
 801ad9a:	00db      	lsls	r3, r3, #3
 801ad9c:	4403      	add	r3, r0
 801ad9e:	3304      	adds	r3, #4
 801ada0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801ada2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ada6:	490d      	ldr	r1, [pc, #52]	@ (801addc <etharp_find_entry+0x2d4>)
 801ada8:	4613      	mov	r3, r2
 801adaa:	005b      	lsls	r3, r3, #1
 801adac:	4413      	add	r3, r2
 801adae:	00db      	lsls	r3, r3, #3
 801adb0:	440b      	add	r3, r1
 801adb2:	3312      	adds	r3, #18
 801adb4:	2200      	movs	r2, #0
 801adb6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801adb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801adbc:	4907      	ldr	r1, [pc, #28]	@ (801addc <etharp_find_entry+0x2d4>)
 801adbe:	4613      	mov	r3, r2
 801adc0:	005b      	lsls	r3, r3, #1
 801adc2:	4413      	add	r3, r2
 801adc4:	00db      	lsls	r3, r3, #3
 801adc6:	440b      	add	r3, r1
 801adc8:	3308      	adds	r3, #8
 801adca:	687a      	ldr	r2, [r7, #4]
 801adcc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801adce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801add2:	4618      	mov	r0, r3
 801add4:	3728      	adds	r7, #40	@ 0x28
 801add6:	46bd      	mov	sp, r7
 801add8:	bd80      	pop	{r7, pc}
 801adda:	bf00      	nop
 801addc:	2000e550 	.word	0x2000e550
 801ade0:	0802232c 	.word	0x0802232c
 801ade4:	08022364 	.word	0x08022364
 801ade8:	080223a4 	.word	0x080223a4
 801adec:	080223cc 	.word	0x080223cc
 801adf0:	080223e4 	.word	0x080223e4
 801adf4:	080223f8 	.word	0x080223f8

0801adf8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801adf8:	b580      	push	{r7, lr}
 801adfa:	b088      	sub	sp, #32
 801adfc:	af02      	add	r7, sp, #8
 801adfe:	60f8      	str	r0, [r7, #12]
 801ae00:	60b9      	str	r1, [r7, #8]
 801ae02:	607a      	str	r2, [r7, #4]
 801ae04:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801ae06:	68fb      	ldr	r3, [r7, #12]
 801ae08:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801ae0c:	2b06      	cmp	r3, #6
 801ae0e:	d006      	beq.n	801ae1e <etharp_update_arp_entry+0x26>
 801ae10:	4b48      	ldr	r3, [pc, #288]	@ (801af34 <etharp_update_arp_entry+0x13c>)
 801ae12:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801ae16:	4948      	ldr	r1, [pc, #288]	@ (801af38 <etharp_update_arp_entry+0x140>)
 801ae18:	4848      	ldr	r0, [pc, #288]	@ (801af3c <etharp_update_arp_entry+0x144>)
 801ae1a:	f003 f997 	bl	801e14c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801ae1e:	68bb      	ldr	r3, [r7, #8]
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d012      	beq.n	801ae4a <etharp_update_arp_entry+0x52>
 801ae24:	68bb      	ldr	r3, [r7, #8]
 801ae26:	681b      	ldr	r3, [r3, #0]
 801ae28:	2b00      	cmp	r3, #0
 801ae2a:	d00e      	beq.n	801ae4a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801ae2c:	68bb      	ldr	r3, [r7, #8]
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	68f9      	ldr	r1, [r7, #12]
 801ae32:	4618      	mov	r0, r3
 801ae34:	f001 f8fe 	bl	801c034 <ip4_addr_isbroadcast_u32>
 801ae38:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	d105      	bne.n	801ae4a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801ae3e:	68bb      	ldr	r3, [r7, #8]
 801ae40:	681b      	ldr	r3, [r3, #0]
 801ae42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801ae46:	2be0      	cmp	r3, #224	@ 0xe0
 801ae48:	d102      	bne.n	801ae50 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ae4a:	f06f 030f 	mvn.w	r3, #15
 801ae4e:	e06c      	b.n	801af2a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801ae50:	78fb      	ldrb	r3, [r7, #3]
 801ae52:	68fa      	ldr	r2, [r7, #12]
 801ae54:	4619      	mov	r1, r3
 801ae56:	68b8      	ldr	r0, [r7, #8]
 801ae58:	f7ff fe56 	bl	801ab08 <etharp_find_entry>
 801ae5c:	4603      	mov	r3, r0
 801ae5e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801ae60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801ae64:	2b00      	cmp	r3, #0
 801ae66:	da02      	bge.n	801ae6e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801ae68:	8afb      	ldrh	r3, [r7, #22]
 801ae6a:	b25b      	sxtb	r3, r3
 801ae6c:	e05d      	b.n	801af2a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801ae6e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ae72:	4933      	ldr	r1, [pc, #204]	@ (801af40 <etharp_update_arp_entry+0x148>)
 801ae74:	4613      	mov	r3, r2
 801ae76:	005b      	lsls	r3, r3, #1
 801ae78:	4413      	add	r3, r2
 801ae7a:	00db      	lsls	r3, r3, #3
 801ae7c:	440b      	add	r3, r1
 801ae7e:	3314      	adds	r3, #20
 801ae80:	2202      	movs	r2, #2
 801ae82:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801ae84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ae88:	492d      	ldr	r1, [pc, #180]	@ (801af40 <etharp_update_arp_entry+0x148>)
 801ae8a:	4613      	mov	r3, r2
 801ae8c:	005b      	lsls	r3, r3, #1
 801ae8e:	4413      	add	r3, r2
 801ae90:	00db      	lsls	r3, r3, #3
 801ae92:	440b      	add	r3, r1
 801ae94:	3308      	adds	r3, #8
 801ae96:	68fa      	ldr	r2, [r7, #12]
 801ae98:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801ae9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ae9e:	4613      	mov	r3, r2
 801aea0:	005b      	lsls	r3, r3, #1
 801aea2:	4413      	add	r3, r2
 801aea4:	00db      	lsls	r3, r3, #3
 801aea6:	3308      	adds	r3, #8
 801aea8:	4a25      	ldr	r2, [pc, #148]	@ (801af40 <etharp_update_arp_entry+0x148>)
 801aeaa:	4413      	add	r3, r2
 801aeac:	3304      	adds	r3, #4
 801aeae:	2206      	movs	r2, #6
 801aeb0:	6879      	ldr	r1, [r7, #4]
 801aeb2:	4618      	mov	r0, r3
 801aeb4:	f003 fae1 	bl	801e47a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801aeb8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801aebc:	4920      	ldr	r1, [pc, #128]	@ (801af40 <etharp_update_arp_entry+0x148>)
 801aebe:	4613      	mov	r3, r2
 801aec0:	005b      	lsls	r3, r3, #1
 801aec2:	4413      	add	r3, r2
 801aec4:	00db      	lsls	r3, r3, #3
 801aec6:	440b      	add	r3, r1
 801aec8:	3312      	adds	r3, #18
 801aeca:	2200      	movs	r2, #0
 801aecc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801aece:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801aed2:	491b      	ldr	r1, [pc, #108]	@ (801af40 <etharp_update_arp_entry+0x148>)
 801aed4:	4613      	mov	r3, r2
 801aed6:	005b      	lsls	r3, r3, #1
 801aed8:	4413      	add	r3, r2
 801aeda:	00db      	lsls	r3, r3, #3
 801aedc:	440b      	add	r3, r1
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	d021      	beq.n	801af28 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801aee4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801aee8:	4915      	ldr	r1, [pc, #84]	@ (801af40 <etharp_update_arp_entry+0x148>)
 801aeea:	4613      	mov	r3, r2
 801aeec:	005b      	lsls	r3, r3, #1
 801aeee:	4413      	add	r3, r2
 801aef0:	00db      	lsls	r3, r3, #3
 801aef2:	440b      	add	r3, r1
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801aef8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801aefc:	4910      	ldr	r1, [pc, #64]	@ (801af40 <etharp_update_arp_entry+0x148>)
 801aefe:	4613      	mov	r3, r2
 801af00:	005b      	lsls	r3, r3, #1
 801af02:	4413      	add	r3, r2
 801af04:	00db      	lsls	r3, r3, #3
 801af06:	440b      	add	r3, r1
 801af08:	2200      	movs	r2, #0
 801af0a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801af0c:	68fb      	ldr	r3, [r7, #12]
 801af0e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801af12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801af16:	9300      	str	r3, [sp, #0]
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	6939      	ldr	r1, [r7, #16]
 801af1c:	68f8      	ldr	r0, [r7, #12]
 801af1e:	f001 ff97 	bl	801ce50 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801af22:	6938      	ldr	r0, [r7, #16]
 801af24:	f7f8 fd80 	bl	8013a28 <pbuf_free>
  }
  return ERR_OK;
 801af28:	2300      	movs	r3, #0
}
 801af2a:	4618      	mov	r0, r3
 801af2c:	3718      	adds	r7, #24
 801af2e:	46bd      	mov	sp, r7
 801af30:	bd80      	pop	{r7, pc}
 801af32:	bf00      	nop
 801af34:	0802232c 	.word	0x0802232c
 801af38:	08022424 	.word	0x08022424
 801af3c:	080223a4 	.word	0x080223a4
 801af40:	2000e550 	.word	0x2000e550

0801af44 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801af44:	b580      	push	{r7, lr}
 801af46:	b084      	sub	sp, #16
 801af48:	af00      	add	r7, sp, #0
 801af4a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801af4c:	2300      	movs	r3, #0
 801af4e:	60fb      	str	r3, [r7, #12]
 801af50:	e01e      	b.n	801af90 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801af52:	4913      	ldr	r1, [pc, #76]	@ (801afa0 <etharp_cleanup_netif+0x5c>)
 801af54:	68fa      	ldr	r2, [r7, #12]
 801af56:	4613      	mov	r3, r2
 801af58:	005b      	lsls	r3, r3, #1
 801af5a:	4413      	add	r3, r2
 801af5c:	00db      	lsls	r3, r3, #3
 801af5e:	440b      	add	r3, r1
 801af60:	3314      	adds	r3, #20
 801af62:	781b      	ldrb	r3, [r3, #0]
 801af64:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801af66:	7afb      	ldrb	r3, [r7, #11]
 801af68:	2b00      	cmp	r3, #0
 801af6a:	d00e      	beq.n	801af8a <etharp_cleanup_netif+0x46>
 801af6c:	490c      	ldr	r1, [pc, #48]	@ (801afa0 <etharp_cleanup_netif+0x5c>)
 801af6e:	68fa      	ldr	r2, [r7, #12]
 801af70:	4613      	mov	r3, r2
 801af72:	005b      	lsls	r3, r3, #1
 801af74:	4413      	add	r3, r2
 801af76:	00db      	lsls	r3, r3, #3
 801af78:	440b      	add	r3, r1
 801af7a:	3308      	adds	r3, #8
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	687a      	ldr	r2, [r7, #4]
 801af80:	429a      	cmp	r2, r3
 801af82:	d102      	bne.n	801af8a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801af84:	68f8      	ldr	r0, [r7, #12]
 801af86:	f7ff fce5 	bl	801a954 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801af8a:	68fb      	ldr	r3, [r7, #12]
 801af8c:	3301      	adds	r3, #1
 801af8e:	60fb      	str	r3, [r7, #12]
 801af90:	68fb      	ldr	r3, [r7, #12]
 801af92:	2b09      	cmp	r3, #9
 801af94:	dddd      	ble.n	801af52 <etharp_cleanup_netif+0xe>
    }
  }
}
 801af96:	bf00      	nop
 801af98:	bf00      	nop
 801af9a:	3710      	adds	r7, #16
 801af9c:	46bd      	mov	sp, r7
 801af9e:	bd80      	pop	{r7, pc}
 801afa0:	2000e550 	.word	0x2000e550

0801afa4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801afa4:	b5b0      	push	{r4, r5, r7, lr}
 801afa6:	b08a      	sub	sp, #40	@ 0x28
 801afa8:	af04      	add	r7, sp, #16
 801afaa:	6078      	str	r0, [r7, #4]
 801afac:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801afae:	683b      	ldr	r3, [r7, #0]
 801afb0:	2b00      	cmp	r3, #0
 801afb2:	d107      	bne.n	801afc4 <etharp_input+0x20>
 801afb4:	4b3d      	ldr	r3, [pc, #244]	@ (801b0ac <etharp_input+0x108>)
 801afb6:	f240 228a 	movw	r2, #650	@ 0x28a
 801afba:	493d      	ldr	r1, [pc, #244]	@ (801b0b0 <etharp_input+0x10c>)
 801afbc:	483d      	ldr	r0, [pc, #244]	@ (801b0b4 <etharp_input+0x110>)
 801afbe:	f003 f8c5 	bl	801e14c <iprintf>
 801afc2:	e06f      	b.n	801b0a4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	685b      	ldr	r3, [r3, #4]
 801afc8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801afca:	693b      	ldr	r3, [r7, #16]
 801afcc:	881b      	ldrh	r3, [r3, #0]
 801afce:	b29b      	uxth	r3, r3
 801afd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801afd4:	d10c      	bne.n	801aff0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801afd6:	693b      	ldr	r3, [r7, #16]
 801afd8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801afda:	2b06      	cmp	r3, #6
 801afdc:	d108      	bne.n	801aff0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801afde:	693b      	ldr	r3, [r7, #16]
 801afe0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801afe2:	2b04      	cmp	r3, #4
 801afe4:	d104      	bne.n	801aff0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801afe6:	693b      	ldr	r3, [r7, #16]
 801afe8:	885b      	ldrh	r3, [r3, #2]
 801afea:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801afec:	2b08      	cmp	r3, #8
 801afee:	d003      	beq.n	801aff8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801aff0:	6878      	ldr	r0, [r7, #4]
 801aff2:	f7f8 fd19 	bl	8013a28 <pbuf_free>
    return;
 801aff6:	e055      	b.n	801b0a4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801aff8:	693b      	ldr	r3, [r7, #16]
 801affa:	330e      	adds	r3, #14
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801b000:	693b      	ldr	r3, [r7, #16]
 801b002:	3318      	adds	r3, #24
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b008:	683b      	ldr	r3, [r7, #0]
 801b00a:	3304      	adds	r3, #4
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	2b00      	cmp	r3, #0
 801b010:	d102      	bne.n	801b018 <etharp_input+0x74>
    for_us = 0;
 801b012:	2300      	movs	r3, #0
 801b014:	75fb      	strb	r3, [r7, #23]
 801b016:	e009      	b.n	801b02c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801b018:	68ba      	ldr	r2, [r7, #8]
 801b01a:	683b      	ldr	r3, [r7, #0]
 801b01c:	3304      	adds	r3, #4
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	429a      	cmp	r2, r3
 801b022:	bf0c      	ite	eq
 801b024:	2301      	moveq	r3, #1
 801b026:	2300      	movne	r3, #0
 801b028:	b2db      	uxtb	r3, r3
 801b02a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b02c:	693b      	ldr	r3, [r7, #16]
 801b02e:	f103 0208 	add.w	r2, r3, #8
 801b032:	7dfb      	ldrb	r3, [r7, #23]
 801b034:	2b00      	cmp	r3, #0
 801b036:	d001      	beq.n	801b03c <etharp_input+0x98>
 801b038:	2301      	movs	r3, #1
 801b03a:	e000      	b.n	801b03e <etharp_input+0x9a>
 801b03c:	2302      	movs	r3, #2
 801b03e:	f107 010c 	add.w	r1, r7, #12
 801b042:	6838      	ldr	r0, [r7, #0]
 801b044:	f7ff fed8 	bl	801adf8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801b048:	693b      	ldr	r3, [r7, #16]
 801b04a:	88db      	ldrh	r3, [r3, #6]
 801b04c:	b29b      	uxth	r3, r3
 801b04e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b052:	d003      	beq.n	801b05c <etharp_input+0xb8>
 801b054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b058:	d01e      	beq.n	801b098 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801b05a:	e020      	b.n	801b09e <etharp_input+0xfa>
      if (for_us) {
 801b05c:	7dfb      	ldrb	r3, [r7, #23]
 801b05e:	2b00      	cmp	r3, #0
 801b060:	d01c      	beq.n	801b09c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801b062:	683b      	ldr	r3, [r7, #0]
 801b064:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801b068:	693b      	ldr	r3, [r7, #16]
 801b06a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801b06e:	683b      	ldr	r3, [r7, #0]
 801b070:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801b074:	683b      	ldr	r3, [r7, #0]
 801b076:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801b078:	693a      	ldr	r2, [r7, #16]
 801b07a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801b07c:	2102      	movs	r1, #2
 801b07e:	9103      	str	r1, [sp, #12]
 801b080:	f107 010c 	add.w	r1, r7, #12
 801b084:	9102      	str	r1, [sp, #8]
 801b086:	9201      	str	r2, [sp, #4]
 801b088:	9300      	str	r3, [sp, #0]
 801b08a:	462b      	mov	r3, r5
 801b08c:	4622      	mov	r2, r4
 801b08e:	4601      	mov	r1, r0
 801b090:	6838      	ldr	r0, [r7, #0]
 801b092:	f000 faeb 	bl	801b66c <etharp_raw>
      break;
 801b096:	e001      	b.n	801b09c <etharp_input+0xf8>
      break;
 801b098:	bf00      	nop
 801b09a:	e000      	b.n	801b09e <etharp_input+0xfa>
      break;
 801b09c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801b09e:	6878      	ldr	r0, [r7, #4]
 801b0a0:	f7f8 fcc2 	bl	8013a28 <pbuf_free>
}
 801b0a4:	3718      	adds	r7, #24
 801b0a6:	46bd      	mov	sp, r7
 801b0a8:	bdb0      	pop	{r4, r5, r7, pc}
 801b0aa:	bf00      	nop
 801b0ac:	0802232c 	.word	0x0802232c
 801b0b0:	0802247c 	.word	0x0802247c
 801b0b4:	080223a4 	.word	0x080223a4

0801b0b8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801b0b8:	b580      	push	{r7, lr}
 801b0ba:	b086      	sub	sp, #24
 801b0bc:	af02      	add	r7, sp, #8
 801b0be:	60f8      	str	r0, [r7, #12]
 801b0c0:	60b9      	str	r1, [r7, #8]
 801b0c2:	4613      	mov	r3, r2
 801b0c4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801b0c6:	79fa      	ldrb	r2, [r7, #7]
 801b0c8:	4944      	ldr	r1, [pc, #272]	@ (801b1dc <etharp_output_to_arp_index+0x124>)
 801b0ca:	4613      	mov	r3, r2
 801b0cc:	005b      	lsls	r3, r3, #1
 801b0ce:	4413      	add	r3, r2
 801b0d0:	00db      	lsls	r3, r3, #3
 801b0d2:	440b      	add	r3, r1
 801b0d4:	3314      	adds	r3, #20
 801b0d6:	781b      	ldrb	r3, [r3, #0]
 801b0d8:	2b01      	cmp	r3, #1
 801b0da:	d806      	bhi.n	801b0ea <etharp_output_to_arp_index+0x32>
 801b0dc:	4b40      	ldr	r3, [pc, #256]	@ (801b1e0 <etharp_output_to_arp_index+0x128>)
 801b0de:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801b0e2:	4940      	ldr	r1, [pc, #256]	@ (801b1e4 <etharp_output_to_arp_index+0x12c>)
 801b0e4:	4840      	ldr	r0, [pc, #256]	@ (801b1e8 <etharp_output_to_arp_index+0x130>)
 801b0e6:	f003 f831 	bl	801e14c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801b0ea:	79fa      	ldrb	r2, [r7, #7]
 801b0ec:	493b      	ldr	r1, [pc, #236]	@ (801b1dc <etharp_output_to_arp_index+0x124>)
 801b0ee:	4613      	mov	r3, r2
 801b0f0:	005b      	lsls	r3, r3, #1
 801b0f2:	4413      	add	r3, r2
 801b0f4:	00db      	lsls	r3, r3, #3
 801b0f6:	440b      	add	r3, r1
 801b0f8:	3314      	adds	r3, #20
 801b0fa:	781b      	ldrb	r3, [r3, #0]
 801b0fc:	2b02      	cmp	r3, #2
 801b0fe:	d153      	bne.n	801b1a8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801b100:	79fa      	ldrb	r2, [r7, #7]
 801b102:	4936      	ldr	r1, [pc, #216]	@ (801b1dc <etharp_output_to_arp_index+0x124>)
 801b104:	4613      	mov	r3, r2
 801b106:	005b      	lsls	r3, r3, #1
 801b108:	4413      	add	r3, r2
 801b10a:	00db      	lsls	r3, r3, #3
 801b10c:	440b      	add	r3, r1
 801b10e:	3312      	adds	r3, #18
 801b110:	881b      	ldrh	r3, [r3, #0]
 801b112:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801b116:	d919      	bls.n	801b14c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801b118:	79fa      	ldrb	r2, [r7, #7]
 801b11a:	4613      	mov	r3, r2
 801b11c:	005b      	lsls	r3, r3, #1
 801b11e:	4413      	add	r3, r2
 801b120:	00db      	lsls	r3, r3, #3
 801b122:	4a2e      	ldr	r2, [pc, #184]	@ (801b1dc <etharp_output_to_arp_index+0x124>)
 801b124:	4413      	add	r3, r2
 801b126:	3304      	adds	r3, #4
 801b128:	4619      	mov	r1, r3
 801b12a:	68f8      	ldr	r0, [r7, #12]
 801b12c:	f000 fb4c 	bl	801b7c8 <etharp_request>
 801b130:	4603      	mov	r3, r0
 801b132:	2b00      	cmp	r3, #0
 801b134:	d138      	bne.n	801b1a8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b136:	79fa      	ldrb	r2, [r7, #7]
 801b138:	4928      	ldr	r1, [pc, #160]	@ (801b1dc <etharp_output_to_arp_index+0x124>)
 801b13a:	4613      	mov	r3, r2
 801b13c:	005b      	lsls	r3, r3, #1
 801b13e:	4413      	add	r3, r2
 801b140:	00db      	lsls	r3, r3, #3
 801b142:	440b      	add	r3, r1
 801b144:	3314      	adds	r3, #20
 801b146:	2203      	movs	r2, #3
 801b148:	701a      	strb	r2, [r3, #0]
 801b14a:	e02d      	b.n	801b1a8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801b14c:	79fa      	ldrb	r2, [r7, #7]
 801b14e:	4923      	ldr	r1, [pc, #140]	@ (801b1dc <etharp_output_to_arp_index+0x124>)
 801b150:	4613      	mov	r3, r2
 801b152:	005b      	lsls	r3, r3, #1
 801b154:	4413      	add	r3, r2
 801b156:	00db      	lsls	r3, r3, #3
 801b158:	440b      	add	r3, r1
 801b15a:	3312      	adds	r3, #18
 801b15c:	881b      	ldrh	r3, [r3, #0]
 801b15e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801b162:	d321      	bcc.n	801b1a8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801b164:	79fa      	ldrb	r2, [r7, #7]
 801b166:	4613      	mov	r3, r2
 801b168:	005b      	lsls	r3, r3, #1
 801b16a:	4413      	add	r3, r2
 801b16c:	00db      	lsls	r3, r3, #3
 801b16e:	4a1b      	ldr	r2, [pc, #108]	@ (801b1dc <etharp_output_to_arp_index+0x124>)
 801b170:	4413      	add	r3, r2
 801b172:	1d19      	adds	r1, r3, #4
 801b174:	79fa      	ldrb	r2, [r7, #7]
 801b176:	4613      	mov	r3, r2
 801b178:	005b      	lsls	r3, r3, #1
 801b17a:	4413      	add	r3, r2
 801b17c:	00db      	lsls	r3, r3, #3
 801b17e:	3308      	adds	r3, #8
 801b180:	4a16      	ldr	r2, [pc, #88]	@ (801b1dc <etharp_output_to_arp_index+0x124>)
 801b182:	4413      	add	r3, r2
 801b184:	3304      	adds	r3, #4
 801b186:	461a      	mov	r2, r3
 801b188:	68f8      	ldr	r0, [r7, #12]
 801b18a:	f000 fafb 	bl	801b784 <etharp_request_dst>
 801b18e:	4603      	mov	r3, r0
 801b190:	2b00      	cmp	r3, #0
 801b192:	d109      	bne.n	801b1a8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b194:	79fa      	ldrb	r2, [r7, #7]
 801b196:	4911      	ldr	r1, [pc, #68]	@ (801b1dc <etharp_output_to_arp_index+0x124>)
 801b198:	4613      	mov	r3, r2
 801b19a:	005b      	lsls	r3, r3, #1
 801b19c:	4413      	add	r3, r2
 801b19e:	00db      	lsls	r3, r3, #3
 801b1a0:	440b      	add	r3, r1
 801b1a2:	3314      	adds	r3, #20
 801b1a4:	2203      	movs	r2, #3
 801b1a6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801b1a8:	68fb      	ldr	r3, [r7, #12]
 801b1aa:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801b1ae:	79fa      	ldrb	r2, [r7, #7]
 801b1b0:	4613      	mov	r3, r2
 801b1b2:	005b      	lsls	r3, r3, #1
 801b1b4:	4413      	add	r3, r2
 801b1b6:	00db      	lsls	r3, r3, #3
 801b1b8:	3308      	adds	r3, #8
 801b1ba:	4a08      	ldr	r2, [pc, #32]	@ (801b1dc <etharp_output_to_arp_index+0x124>)
 801b1bc:	4413      	add	r3, r2
 801b1be:	3304      	adds	r3, #4
 801b1c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b1c4:	9200      	str	r2, [sp, #0]
 801b1c6:	460a      	mov	r2, r1
 801b1c8:	68b9      	ldr	r1, [r7, #8]
 801b1ca:	68f8      	ldr	r0, [r7, #12]
 801b1cc:	f001 fe40 	bl	801ce50 <ethernet_output>
 801b1d0:	4603      	mov	r3, r0
}
 801b1d2:	4618      	mov	r0, r3
 801b1d4:	3710      	adds	r7, #16
 801b1d6:	46bd      	mov	sp, r7
 801b1d8:	bd80      	pop	{r7, pc}
 801b1da:	bf00      	nop
 801b1dc:	2000e550 	.word	0x2000e550
 801b1e0:	0802232c 	.word	0x0802232c
 801b1e4:	0802249c 	.word	0x0802249c
 801b1e8:	080223a4 	.word	0x080223a4

0801b1ec <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801b1ec:	b580      	push	{r7, lr}
 801b1ee:	b08a      	sub	sp, #40	@ 0x28
 801b1f0:	af02      	add	r7, sp, #8
 801b1f2:	60f8      	str	r0, [r7, #12]
 801b1f4:	60b9      	str	r1, [r7, #8]
 801b1f6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b1fc:	68fb      	ldr	r3, [r7, #12]
 801b1fe:	2b00      	cmp	r3, #0
 801b200:	d106      	bne.n	801b210 <etharp_output+0x24>
 801b202:	4b73      	ldr	r3, [pc, #460]	@ (801b3d0 <etharp_output+0x1e4>)
 801b204:	f240 321e 	movw	r2, #798	@ 0x31e
 801b208:	4972      	ldr	r1, [pc, #456]	@ (801b3d4 <etharp_output+0x1e8>)
 801b20a:	4873      	ldr	r0, [pc, #460]	@ (801b3d8 <etharp_output+0x1ec>)
 801b20c:	f002 ff9e 	bl	801e14c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801b210:	68bb      	ldr	r3, [r7, #8]
 801b212:	2b00      	cmp	r3, #0
 801b214:	d106      	bne.n	801b224 <etharp_output+0x38>
 801b216:	4b6e      	ldr	r3, [pc, #440]	@ (801b3d0 <etharp_output+0x1e4>)
 801b218:	f240 321f 	movw	r2, #799	@ 0x31f
 801b21c:	496f      	ldr	r1, [pc, #444]	@ (801b3dc <etharp_output+0x1f0>)
 801b21e:	486e      	ldr	r0, [pc, #440]	@ (801b3d8 <etharp_output+0x1ec>)
 801b220:	f002 ff94 	bl	801e14c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	2b00      	cmp	r3, #0
 801b228:	d106      	bne.n	801b238 <etharp_output+0x4c>
 801b22a:	4b69      	ldr	r3, [pc, #420]	@ (801b3d0 <etharp_output+0x1e4>)
 801b22c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801b230:	496b      	ldr	r1, [pc, #428]	@ (801b3e0 <etharp_output+0x1f4>)
 801b232:	4869      	ldr	r0, [pc, #420]	@ (801b3d8 <etharp_output+0x1ec>)
 801b234:	f002 ff8a 	bl	801e14c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	68f9      	ldr	r1, [r7, #12]
 801b23e:	4618      	mov	r0, r3
 801b240:	f000 fef8 	bl	801c034 <ip4_addr_isbroadcast_u32>
 801b244:	4603      	mov	r3, r0
 801b246:	2b00      	cmp	r3, #0
 801b248:	d002      	beq.n	801b250 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801b24a:	4b66      	ldr	r3, [pc, #408]	@ (801b3e4 <etharp_output+0x1f8>)
 801b24c:	61fb      	str	r3, [r7, #28]
 801b24e:	e0af      	b.n	801b3b0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b258:	2be0      	cmp	r3, #224	@ 0xe0
 801b25a:	d118      	bne.n	801b28e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801b25c:	2301      	movs	r3, #1
 801b25e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801b260:	2300      	movs	r3, #0
 801b262:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801b264:	235e      	movs	r3, #94	@ 0x5e
 801b266:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	3301      	adds	r3, #1
 801b26c:	781b      	ldrb	r3, [r3, #0]
 801b26e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b272:	b2db      	uxtb	r3, r3
 801b274:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	3302      	adds	r3, #2
 801b27a:	781b      	ldrb	r3, [r3, #0]
 801b27c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	3303      	adds	r3, #3
 801b282:	781b      	ldrb	r3, [r3, #0]
 801b284:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801b286:	f107 0310 	add.w	r3, r7, #16
 801b28a:	61fb      	str	r3, [r7, #28]
 801b28c:	e090      	b.n	801b3b0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	681a      	ldr	r2, [r3, #0]
 801b292:	68fb      	ldr	r3, [r7, #12]
 801b294:	3304      	adds	r3, #4
 801b296:	681b      	ldr	r3, [r3, #0]
 801b298:	405a      	eors	r2, r3
 801b29a:	68fb      	ldr	r3, [r7, #12]
 801b29c:	3308      	adds	r3, #8
 801b29e:	681b      	ldr	r3, [r3, #0]
 801b2a0:	4013      	ands	r3, r2
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	d012      	beq.n	801b2cc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801b2a6:	687b      	ldr	r3, [r7, #4]
 801b2a8:	681b      	ldr	r3, [r3, #0]
 801b2aa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b2ac:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801b2b0:	4293      	cmp	r3, r2
 801b2b2:	d00b      	beq.n	801b2cc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801b2b4:	68fb      	ldr	r3, [r7, #12]
 801b2b6:	330c      	adds	r3, #12
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d003      	beq.n	801b2c6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801b2be:	68fb      	ldr	r3, [r7, #12]
 801b2c0:	330c      	adds	r3, #12
 801b2c2:	61bb      	str	r3, [r7, #24]
 801b2c4:	e002      	b.n	801b2cc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801b2c6:	f06f 0303 	mvn.w	r3, #3
 801b2ca:	e07d      	b.n	801b3c8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b2cc:	4b46      	ldr	r3, [pc, #280]	@ (801b3e8 <etharp_output+0x1fc>)
 801b2ce:	781b      	ldrb	r3, [r3, #0]
 801b2d0:	4619      	mov	r1, r3
 801b2d2:	4a46      	ldr	r2, [pc, #280]	@ (801b3ec <etharp_output+0x200>)
 801b2d4:	460b      	mov	r3, r1
 801b2d6:	005b      	lsls	r3, r3, #1
 801b2d8:	440b      	add	r3, r1
 801b2da:	00db      	lsls	r3, r3, #3
 801b2dc:	4413      	add	r3, r2
 801b2de:	3314      	adds	r3, #20
 801b2e0:	781b      	ldrb	r3, [r3, #0]
 801b2e2:	2b01      	cmp	r3, #1
 801b2e4:	d925      	bls.n	801b332 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b2e6:	4b40      	ldr	r3, [pc, #256]	@ (801b3e8 <etharp_output+0x1fc>)
 801b2e8:	781b      	ldrb	r3, [r3, #0]
 801b2ea:	4619      	mov	r1, r3
 801b2ec:	4a3f      	ldr	r2, [pc, #252]	@ (801b3ec <etharp_output+0x200>)
 801b2ee:	460b      	mov	r3, r1
 801b2f0:	005b      	lsls	r3, r3, #1
 801b2f2:	440b      	add	r3, r1
 801b2f4:	00db      	lsls	r3, r3, #3
 801b2f6:	4413      	add	r3, r2
 801b2f8:	3308      	adds	r3, #8
 801b2fa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b2fc:	68fa      	ldr	r2, [r7, #12]
 801b2fe:	429a      	cmp	r2, r3
 801b300:	d117      	bne.n	801b332 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801b302:	69bb      	ldr	r3, [r7, #24]
 801b304:	681a      	ldr	r2, [r3, #0]
 801b306:	4b38      	ldr	r3, [pc, #224]	@ (801b3e8 <etharp_output+0x1fc>)
 801b308:	781b      	ldrb	r3, [r3, #0]
 801b30a:	4618      	mov	r0, r3
 801b30c:	4937      	ldr	r1, [pc, #220]	@ (801b3ec <etharp_output+0x200>)
 801b30e:	4603      	mov	r3, r0
 801b310:	005b      	lsls	r3, r3, #1
 801b312:	4403      	add	r3, r0
 801b314:	00db      	lsls	r3, r3, #3
 801b316:	440b      	add	r3, r1
 801b318:	3304      	adds	r3, #4
 801b31a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b31c:	429a      	cmp	r2, r3
 801b31e:	d108      	bne.n	801b332 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801b320:	4b31      	ldr	r3, [pc, #196]	@ (801b3e8 <etharp_output+0x1fc>)
 801b322:	781b      	ldrb	r3, [r3, #0]
 801b324:	461a      	mov	r2, r3
 801b326:	68b9      	ldr	r1, [r7, #8]
 801b328:	68f8      	ldr	r0, [r7, #12]
 801b32a:	f7ff fec5 	bl	801b0b8 <etharp_output_to_arp_index>
 801b32e:	4603      	mov	r3, r0
 801b330:	e04a      	b.n	801b3c8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b332:	2300      	movs	r3, #0
 801b334:	75fb      	strb	r3, [r7, #23]
 801b336:	e031      	b.n	801b39c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b338:	7dfa      	ldrb	r2, [r7, #23]
 801b33a:	492c      	ldr	r1, [pc, #176]	@ (801b3ec <etharp_output+0x200>)
 801b33c:	4613      	mov	r3, r2
 801b33e:	005b      	lsls	r3, r3, #1
 801b340:	4413      	add	r3, r2
 801b342:	00db      	lsls	r3, r3, #3
 801b344:	440b      	add	r3, r1
 801b346:	3314      	adds	r3, #20
 801b348:	781b      	ldrb	r3, [r3, #0]
 801b34a:	2b01      	cmp	r3, #1
 801b34c:	d923      	bls.n	801b396 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801b34e:	7dfa      	ldrb	r2, [r7, #23]
 801b350:	4926      	ldr	r1, [pc, #152]	@ (801b3ec <etharp_output+0x200>)
 801b352:	4613      	mov	r3, r2
 801b354:	005b      	lsls	r3, r3, #1
 801b356:	4413      	add	r3, r2
 801b358:	00db      	lsls	r3, r3, #3
 801b35a:	440b      	add	r3, r1
 801b35c:	3308      	adds	r3, #8
 801b35e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b360:	68fa      	ldr	r2, [r7, #12]
 801b362:	429a      	cmp	r2, r3
 801b364:	d117      	bne.n	801b396 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801b366:	69bb      	ldr	r3, [r7, #24]
 801b368:	6819      	ldr	r1, [r3, #0]
 801b36a:	7dfa      	ldrb	r2, [r7, #23]
 801b36c:	481f      	ldr	r0, [pc, #124]	@ (801b3ec <etharp_output+0x200>)
 801b36e:	4613      	mov	r3, r2
 801b370:	005b      	lsls	r3, r3, #1
 801b372:	4413      	add	r3, r2
 801b374:	00db      	lsls	r3, r3, #3
 801b376:	4403      	add	r3, r0
 801b378:	3304      	adds	r3, #4
 801b37a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801b37c:	4299      	cmp	r1, r3
 801b37e:	d10a      	bne.n	801b396 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801b380:	4a19      	ldr	r2, [pc, #100]	@ (801b3e8 <etharp_output+0x1fc>)
 801b382:	7dfb      	ldrb	r3, [r7, #23]
 801b384:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801b386:	7dfb      	ldrb	r3, [r7, #23]
 801b388:	461a      	mov	r2, r3
 801b38a:	68b9      	ldr	r1, [r7, #8]
 801b38c:	68f8      	ldr	r0, [r7, #12]
 801b38e:	f7ff fe93 	bl	801b0b8 <etharp_output_to_arp_index>
 801b392:	4603      	mov	r3, r0
 801b394:	e018      	b.n	801b3c8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b396:	7dfb      	ldrb	r3, [r7, #23]
 801b398:	3301      	adds	r3, #1
 801b39a:	75fb      	strb	r3, [r7, #23]
 801b39c:	7dfb      	ldrb	r3, [r7, #23]
 801b39e:	2b09      	cmp	r3, #9
 801b3a0:	d9ca      	bls.n	801b338 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801b3a2:	68ba      	ldr	r2, [r7, #8]
 801b3a4:	69b9      	ldr	r1, [r7, #24]
 801b3a6:	68f8      	ldr	r0, [r7, #12]
 801b3a8:	f000 f822 	bl	801b3f0 <etharp_query>
 801b3ac:	4603      	mov	r3, r0
 801b3ae:	e00b      	b.n	801b3c8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801b3b0:	68fb      	ldr	r3, [r7, #12]
 801b3b2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801b3b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b3ba:	9300      	str	r3, [sp, #0]
 801b3bc:	69fb      	ldr	r3, [r7, #28]
 801b3be:	68b9      	ldr	r1, [r7, #8]
 801b3c0:	68f8      	ldr	r0, [r7, #12]
 801b3c2:	f001 fd45 	bl	801ce50 <ethernet_output>
 801b3c6:	4603      	mov	r3, r0
}
 801b3c8:	4618      	mov	r0, r3
 801b3ca:	3720      	adds	r7, #32
 801b3cc:	46bd      	mov	sp, r7
 801b3ce:	bd80      	pop	{r7, pc}
 801b3d0:	0802232c 	.word	0x0802232c
 801b3d4:	0802247c 	.word	0x0802247c
 801b3d8:	080223a4 	.word	0x080223a4
 801b3dc:	080224cc 	.word	0x080224cc
 801b3e0:	0802246c 	.word	0x0802246c
 801b3e4:	0806848c 	.word	0x0806848c
 801b3e8:	2000e640 	.word	0x2000e640
 801b3ec:	2000e550 	.word	0x2000e550

0801b3f0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801b3f0:	b580      	push	{r7, lr}
 801b3f2:	b08c      	sub	sp, #48	@ 0x30
 801b3f4:	af02      	add	r7, sp, #8
 801b3f6:	60f8      	str	r0, [r7, #12]
 801b3f8:	60b9      	str	r1, [r7, #8]
 801b3fa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801b3fc:	68fb      	ldr	r3, [r7, #12]
 801b3fe:	3326      	adds	r3, #38	@ 0x26
 801b400:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801b402:	23ff      	movs	r3, #255	@ 0xff
 801b404:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801b408:	2300      	movs	r3, #0
 801b40a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b40c:	68bb      	ldr	r3, [r7, #8]
 801b40e:	681b      	ldr	r3, [r3, #0]
 801b410:	68f9      	ldr	r1, [r7, #12]
 801b412:	4618      	mov	r0, r3
 801b414:	f000 fe0e 	bl	801c034 <ip4_addr_isbroadcast_u32>
 801b418:	4603      	mov	r3, r0
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d10c      	bne.n	801b438 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b41e:	68bb      	ldr	r3, [r7, #8]
 801b420:	681b      	ldr	r3, [r3, #0]
 801b422:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b426:	2be0      	cmp	r3, #224	@ 0xe0
 801b428:	d006      	beq.n	801b438 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b42a:	68bb      	ldr	r3, [r7, #8]
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	d003      	beq.n	801b438 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801b430:	68bb      	ldr	r3, [r7, #8]
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	2b00      	cmp	r3, #0
 801b436:	d102      	bne.n	801b43e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b438:	f06f 030f 	mvn.w	r3, #15
 801b43c:	e101      	b.n	801b642 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801b43e:	68fa      	ldr	r2, [r7, #12]
 801b440:	2101      	movs	r1, #1
 801b442:	68b8      	ldr	r0, [r7, #8]
 801b444:	f7ff fb60 	bl	801ab08 <etharp_find_entry>
 801b448:	4603      	mov	r3, r0
 801b44a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801b44c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b450:	2b00      	cmp	r3, #0
 801b452:	da02      	bge.n	801b45a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801b454:	8a7b      	ldrh	r3, [r7, #18]
 801b456:	b25b      	sxtb	r3, r3
 801b458:	e0f3      	b.n	801b642 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801b45a:	8a7b      	ldrh	r3, [r7, #18]
 801b45c:	2b7e      	cmp	r3, #126	@ 0x7e
 801b45e:	d906      	bls.n	801b46e <etharp_query+0x7e>
 801b460:	4b7a      	ldr	r3, [pc, #488]	@ (801b64c <etharp_query+0x25c>)
 801b462:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801b466:	497a      	ldr	r1, [pc, #488]	@ (801b650 <etharp_query+0x260>)
 801b468:	487a      	ldr	r0, [pc, #488]	@ (801b654 <etharp_query+0x264>)
 801b46a:	f002 fe6f 	bl	801e14c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801b46e:	8a7b      	ldrh	r3, [r7, #18]
 801b470:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801b472:	7c7a      	ldrb	r2, [r7, #17]
 801b474:	4978      	ldr	r1, [pc, #480]	@ (801b658 <etharp_query+0x268>)
 801b476:	4613      	mov	r3, r2
 801b478:	005b      	lsls	r3, r3, #1
 801b47a:	4413      	add	r3, r2
 801b47c:	00db      	lsls	r3, r3, #3
 801b47e:	440b      	add	r3, r1
 801b480:	3314      	adds	r3, #20
 801b482:	781b      	ldrb	r3, [r3, #0]
 801b484:	2b00      	cmp	r3, #0
 801b486:	d115      	bne.n	801b4b4 <etharp_query+0xc4>
    is_new_entry = 1;
 801b488:	2301      	movs	r3, #1
 801b48a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801b48c:	7c7a      	ldrb	r2, [r7, #17]
 801b48e:	4972      	ldr	r1, [pc, #456]	@ (801b658 <etharp_query+0x268>)
 801b490:	4613      	mov	r3, r2
 801b492:	005b      	lsls	r3, r3, #1
 801b494:	4413      	add	r3, r2
 801b496:	00db      	lsls	r3, r3, #3
 801b498:	440b      	add	r3, r1
 801b49a:	3314      	adds	r3, #20
 801b49c:	2201      	movs	r2, #1
 801b49e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801b4a0:	7c7a      	ldrb	r2, [r7, #17]
 801b4a2:	496d      	ldr	r1, [pc, #436]	@ (801b658 <etharp_query+0x268>)
 801b4a4:	4613      	mov	r3, r2
 801b4a6:	005b      	lsls	r3, r3, #1
 801b4a8:	4413      	add	r3, r2
 801b4aa:	00db      	lsls	r3, r3, #3
 801b4ac:	440b      	add	r3, r1
 801b4ae:	3308      	adds	r3, #8
 801b4b0:	68fa      	ldr	r2, [r7, #12]
 801b4b2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801b4b4:	7c7a      	ldrb	r2, [r7, #17]
 801b4b6:	4968      	ldr	r1, [pc, #416]	@ (801b658 <etharp_query+0x268>)
 801b4b8:	4613      	mov	r3, r2
 801b4ba:	005b      	lsls	r3, r3, #1
 801b4bc:	4413      	add	r3, r2
 801b4be:	00db      	lsls	r3, r3, #3
 801b4c0:	440b      	add	r3, r1
 801b4c2:	3314      	adds	r3, #20
 801b4c4:	781b      	ldrb	r3, [r3, #0]
 801b4c6:	2b01      	cmp	r3, #1
 801b4c8:	d011      	beq.n	801b4ee <etharp_query+0xfe>
 801b4ca:	7c7a      	ldrb	r2, [r7, #17]
 801b4cc:	4962      	ldr	r1, [pc, #392]	@ (801b658 <etharp_query+0x268>)
 801b4ce:	4613      	mov	r3, r2
 801b4d0:	005b      	lsls	r3, r3, #1
 801b4d2:	4413      	add	r3, r2
 801b4d4:	00db      	lsls	r3, r3, #3
 801b4d6:	440b      	add	r3, r1
 801b4d8:	3314      	adds	r3, #20
 801b4da:	781b      	ldrb	r3, [r3, #0]
 801b4dc:	2b01      	cmp	r3, #1
 801b4de:	d806      	bhi.n	801b4ee <etharp_query+0xfe>
 801b4e0:	4b5a      	ldr	r3, [pc, #360]	@ (801b64c <etharp_query+0x25c>)
 801b4e2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801b4e6:	495d      	ldr	r1, [pc, #372]	@ (801b65c <etharp_query+0x26c>)
 801b4e8:	485a      	ldr	r0, [pc, #360]	@ (801b654 <etharp_query+0x264>)
 801b4ea:	f002 fe2f 	bl	801e14c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801b4ee:	6a3b      	ldr	r3, [r7, #32]
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d102      	bne.n	801b4fa <etharp_query+0x10a>
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	2b00      	cmp	r3, #0
 801b4f8:	d10c      	bne.n	801b514 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801b4fa:	68b9      	ldr	r1, [r7, #8]
 801b4fc:	68f8      	ldr	r0, [r7, #12]
 801b4fe:	f000 f963 	bl	801b7c8 <etharp_request>
 801b502:	4603      	mov	r3, r0
 801b504:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	d102      	bne.n	801b514 <etharp_query+0x124>
      return result;
 801b50e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801b512:	e096      	b.n	801b642 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	2b00      	cmp	r3, #0
 801b518:	d106      	bne.n	801b528 <etharp_query+0x138>
 801b51a:	4b4c      	ldr	r3, [pc, #304]	@ (801b64c <etharp_query+0x25c>)
 801b51c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801b520:	494f      	ldr	r1, [pc, #316]	@ (801b660 <etharp_query+0x270>)
 801b522:	484c      	ldr	r0, [pc, #304]	@ (801b654 <etharp_query+0x264>)
 801b524:	f002 fe12 	bl	801e14c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801b528:	7c7a      	ldrb	r2, [r7, #17]
 801b52a:	494b      	ldr	r1, [pc, #300]	@ (801b658 <etharp_query+0x268>)
 801b52c:	4613      	mov	r3, r2
 801b52e:	005b      	lsls	r3, r3, #1
 801b530:	4413      	add	r3, r2
 801b532:	00db      	lsls	r3, r3, #3
 801b534:	440b      	add	r3, r1
 801b536:	3314      	adds	r3, #20
 801b538:	781b      	ldrb	r3, [r3, #0]
 801b53a:	2b01      	cmp	r3, #1
 801b53c:	d917      	bls.n	801b56e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801b53e:	4a49      	ldr	r2, [pc, #292]	@ (801b664 <etharp_query+0x274>)
 801b540:	7c7b      	ldrb	r3, [r7, #17]
 801b542:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b544:	7c7a      	ldrb	r2, [r7, #17]
 801b546:	4613      	mov	r3, r2
 801b548:	005b      	lsls	r3, r3, #1
 801b54a:	4413      	add	r3, r2
 801b54c:	00db      	lsls	r3, r3, #3
 801b54e:	3308      	adds	r3, #8
 801b550:	4a41      	ldr	r2, [pc, #260]	@ (801b658 <etharp_query+0x268>)
 801b552:	4413      	add	r3, r2
 801b554:	3304      	adds	r3, #4
 801b556:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b55a:	9200      	str	r2, [sp, #0]
 801b55c:	697a      	ldr	r2, [r7, #20]
 801b55e:	6879      	ldr	r1, [r7, #4]
 801b560:	68f8      	ldr	r0, [r7, #12]
 801b562:	f001 fc75 	bl	801ce50 <ethernet_output>
 801b566:	4603      	mov	r3, r0
 801b568:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b56c:	e067      	b.n	801b63e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b56e:	7c7a      	ldrb	r2, [r7, #17]
 801b570:	4939      	ldr	r1, [pc, #228]	@ (801b658 <etharp_query+0x268>)
 801b572:	4613      	mov	r3, r2
 801b574:	005b      	lsls	r3, r3, #1
 801b576:	4413      	add	r3, r2
 801b578:	00db      	lsls	r3, r3, #3
 801b57a:	440b      	add	r3, r1
 801b57c:	3314      	adds	r3, #20
 801b57e:	781b      	ldrb	r3, [r3, #0]
 801b580:	2b01      	cmp	r3, #1
 801b582:	d15c      	bne.n	801b63e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801b584:	2300      	movs	r3, #0
 801b586:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b58c:	e01c      	b.n	801b5c8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801b58e:	69fb      	ldr	r3, [r7, #28]
 801b590:	895a      	ldrh	r2, [r3, #10]
 801b592:	69fb      	ldr	r3, [r7, #28]
 801b594:	891b      	ldrh	r3, [r3, #8]
 801b596:	429a      	cmp	r2, r3
 801b598:	d10a      	bne.n	801b5b0 <etharp_query+0x1c0>
 801b59a:	69fb      	ldr	r3, [r7, #28]
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	2b00      	cmp	r3, #0
 801b5a0:	d006      	beq.n	801b5b0 <etharp_query+0x1c0>
 801b5a2:	4b2a      	ldr	r3, [pc, #168]	@ (801b64c <etharp_query+0x25c>)
 801b5a4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801b5a8:	492f      	ldr	r1, [pc, #188]	@ (801b668 <etharp_query+0x278>)
 801b5aa:	482a      	ldr	r0, [pc, #168]	@ (801b654 <etharp_query+0x264>)
 801b5ac:	f002 fdce 	bl	801e14c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801b5b0:	69fb      	ldr	r3, [r7, #28]
 801b5b2:	7b1b      	ldrb	r3, [r3, #12]
 801b5b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d002      	beq.n	801b5c2 <etharp_query+0x1d2>
        copy_needed = 1;
 801b5bc:	2301      	movs	r3, #1
 801b5be:	61bb      	str	r3, [r7, #24]
        break;
 801b5c0:	e005      	b.n	801b5ce <etharp_query+0x1de>
      }
      p = p->next;
 801b5c2:	69fb      	ldr	r3, [r7, #28]
 801b5c4:	681b      	ldr	r3, [r3, #0]
 801b5c6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b5c8:	69fb      	ldr	r3, [r7, #28]
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d1df      	bne.n	801b58e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801b5ce:	69bb      	ldr	r3, [r7, #24]
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d007      	beq.n	801b5e4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801b5d4:	687a      	ldr	r2, [r7, #4]
 801b5d6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801b5da:	200e      	movs	r0, #14
 801b5dc:	f7f8 fc8c 	bl	8013ef8 <pbuf_clone>
 801b5e0:	61f8      	str	r0, [r7, #28]
 801b5e2:	e004      	b.n	801b5ee <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801b5e8:	69f8      	ldr	r0, [r7, #28]
 801b5ea:	f7f8 fac3 	bl	8013b74 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801b5ee:	69fb      	ldr	r3, [r7, #28]
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	d021      	beq.n	801b638 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801b5f4:	7c7a      	ldrb	r2, [r7, #17]
 801b5f6:	4918      	ldr	r1, [pc, #96]	@ (801b658 <etharp_query+0x268>)
 801b5f8:	4613      	mov	r3, r2
 801b5fa:	005b      	lsls	r3, r3, #1
 801b5fc:	4413      	add	r3, r2
 801b5fe:	00db      	lsls	r3, r3, #3
 801b600:	440b      	add	r3, r1
 801b602:	681b      	ldr	r3, [r3, #0]
 801b604:	2b00      	cmp	r3, #0
 801b606:	d00a      	beq.n	801b61e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801b608:	7c7a      	ldrb	r2, [r7, #17]
 801b60a:	4913      	ldr	r1, [pc, #76]	@ (801b658 <etharp_query+0x268>)
 801b60c:	4613      	mov	r3, r2
 801b60e:	005b      	lsls	r3, r3, #1
 801b610:	4413      	add	r3, r2
 801b612:	00db      	lsls	r3, r3, #3
 801b614:	440b      	add	r3, r1
 801b616:	681b      	ldr	r3, [r3, #0]
 801b618:	4618      	mov	r0, r3
 801b61a:	f7f8 fa05 	bl	8013a28 <pbuf_free>
      }
      arp_table[i].q = p;
 801b61e:	7c7a      	ldrb	r2, [r7, #17]
 801b620:	490d      	ldr	r1, [pc, #52]	@ (801b658 <etharp_query+0x268>)
 801b622:	4613      	mov	r3, r2
 801b624:	005b      	lsls	r3, r3, #1
 801b626:	4413      	add	r3, r2
 801b628:	00db      	lsls	r3, r3, #3
 801b62a:	440b      	add	r3, r1
 801b62c:	69fa      	ldr	r2, [r7, #28]
 801b62e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801b630:	2300      	movs	r3, #0
 801b632:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b636:	e002      	b.n	801b63e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801b638:	23ff      	movs	r3, #255	@ 0xff
 801b63a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801b63e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801b642:	4618      	mov	r0, r3
 801b644:	3728      	adds	r7, #40	@ 0x28
 801b646:	46bd      	mov	sp, r7
 801b648:	bd80      	pop	{r7, pc}
 801b64a:	bf00      	nop
 801b64c:	0802232c 	.word	0x0802232c
 801b650:	080224d8 	.word	0x080224d8
 801b654:	080223a4 	.word	0x080223a4
 801b658:	2000e550 	.word	0x2000e550
 801b65c:	080224e8 	.word	0x080224e8
 801b660:	080224cc 	.word	0x080224cc
 801b664:	2000e640 	.word	0x2000e640
 801b668:	08022510 	.word	0x08022510

0801b66c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801b66c:	b580      	push	{r7, lr}
 801b66e:	b08a      	sub	sp, #40	@ 0x28
 801b670:	af02      	add	r7, sp, #8
 801b672:	60f8      	str	r0, [r7, #12]
 801b674:	60b9      	str	r1, [r7, #8]
 801b676:	607a      	str	r2, [r7, #4]
 801b678:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801b67a:	2300      	movs	r3, #0
 801b67c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b67e:	68fb      	ldr	r3, [r7, #12]
 801b680:	2b00      	cmp	r3, #0
 801b682:	d106      	bne.n	801b692 <etharp_raw+0x26>
 801b684:	4b3a      	ldr	r3, [pc, #232]	@ (801b770 <etharp_raw+0x104>)
 801b686:	f240 4257 	movw	r2, #1111	@ 0x457
 801b68a:	493a      	ldr	r1, [pc, #232]	@ (801b774 <etharp_raw+0x108>)
 801b68c:	483a      	ldr	r0, [pc, #232]	@ (801b778 <etharp_raw+0x10c>)
 801b68e:	f002 fd5d 	bl	801e14c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801b692:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b696:	211c      	movs	r1, #28
 801b698:	200e      	movs	r0, #14
 801b69a:	f7f7 fee1 	bl	8013460 <pbuf_alloc>
 801b69e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801b6a0:	69bb      	ldr	r3, [r7, #24]
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d102      	bne.n	801b6ac <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801b6a6:	f04f 33ff 	mov.w	r3, #4294967295
 801b6aa:	e05d      	b.n	801b768 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801b6ac:	69bb      	ldr	r3, [r7, #24]
 801b6ae:	895b      	ldrh	r3, [r3, #10]
 801b6b0:	2b1b      	cmp	r3, #27
 801b6b2:	d806      	bhi.n	801b6c2 <etharp_raw+0x56>
 801b6b4:	4b2e      	ldr	r3, [pc, #184]	@ (801b770 <etharp_raw+0x104>)
 801b6b6:	f240 4262 	movw	r2, #1122	@ 0x462
 801b6ba:	4930      	ldr	r1, [pc, #192]	@ (801b77c <etharp_raw+0x110>)
 801b6bc:	482e      	ldr	r0, [pc, #184]	@ (801b778 <etharp_raw+0x10c>)
 801b6be:	f002 fd45 	bl	801e14c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801b6c2:	69bb      	ldr	r3, [r7, #24]
 801b6c4:	685b      	ldr	r3, [r3, #4]
 801b6c6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801b6c8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801b6ca:	4618      	mov	r0, r3
 801b6cc:	f7f6 fdbe 	bl	801224c <lwip_htons>
 801b6d0:	4603      	mov	r3, r0
 801b6d2:	461a      	mov	r2, r3
 801b6d4:	697b      	ldr	r3, [r7, #20]
 801b6d6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801b6d8:	68fb      	ldr	r3, [r7, #12]
 801b6da:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801b6de:	2b06      	cmp	r3, #6
 801b6e0:	d006      	beq.n	801b6f0 <etharp_raw+0x84>
 801b6e2:	4b23      	ldr	r3, [pc, #140]	@ (801b770 <etharp_raw+0x104>)
 801b6e4:	f240 4269 	movw	r2, #1129	@ 0x469
 801b6e8:	4925      	ldr	r1, [pc, #148]	@ (801b780 <etharp_raw+0x114>)
 801b6ea:	4823      	ldr	r0, [pc, #140]	@ (801b778 <etharp_raw+0x10c>)
 801b6ec:	f002 fd2e 	bl	801e14c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801b6f0:	697b      	ldr	r3, [r7, #20]
 801b6f2:	3308      	adds	r3, #8
 801b6f4:	2206      	movs	r2, #6
 801b6f6:	6839      	ldr	r1, [r7, #0]
 801b6f8:	4618      	mov	r0, r3
 801b6fa:	f002 febe 	bl	801e47a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801b6fe:	697b      	ldr	r3, [r7, #20]
 801b700:	3312      	adds	r3, #18
 801b702:	2206      	movs	r2, #6
 801b704:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b706:	4618      	mov	r0, r3
 801b708:	f002 feb7 	bl	801e47a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801b70c:	697b      	ldr	r3, [r7, #20]
 801b70e:	330e      	adds	r3, #14
 801b710:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b712:	6812      	ldr	r2, [r2, #0]
 801b714:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801b716:	697b      	ldr	r3, [r7, #20]
 801b718:	3318      	adds	r3, #24
 801b71a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b71c:	6812      	ldr	r2, [r2, #0]
 801b71e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801b720:	697b      	ldr	r3, [r7, #20]
 801b722:	2200      	movs	r2, #0
 801b724:	701a      	strb	r2, [r3, #0]
 801b726:	2200      	movs	r2, #0
 801b728:	f042 0201 	orr.w	r2, r2, #1
 801b72c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b72e:	697b      	ldr	r3, [r7, #20]
 801b730:	2200      	movs	r2, #0
 801b732:	f042 0208 	orr.w	r2, r2, #8
 801b736:	709a      	strb	r2, [r3, #2]
 801b738:	2200      	movs	r2, #0
 801b73a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801b73c:	697b      	ldr	r3, [r7, #20]
 801b73e:	2206      	movs	r2, #6
 801b740:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801b742:	697b      	ldr	r3, [r7, #20]
 801b744:	2204      	movs	r2, #4
 801b746:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b748:	f640 0306 	movw	r3, #2054	@ 0x806
 801b74c:	9300      	str	r3, [sp, #0]
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	68ba      	ldr	r2, [r7, #8]
 801b752:	69b9      	ldr	r1, [r7, #24]
 801b754:	68f8      	ldr	r0, [r7, #12]
 801b756:	f001 fb7b 	bl	801ce50 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801b75a:	69b8      	ldr	r0, [r7, #24]
 801b75c:	f7f8 f964 	bl	8013a28 <pbuf_free>
  p = NULL;
 801b760:	2300      	movs	r3, #0
 801b762:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801b764:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b768:	4618      	mov	r0, r3
 801b76a:	3720      	adds	r7, #32
 801b76c:	46bd      	mov	sp, r7
 801b76e:	bd80      	pop	{r7, pc}
 801b770:	0802232c 	.word	0x0802232c
 801b774:	0802247c 	.word	0x0802247c
 801b778:	080223a4 	.word	0x080223a4
 801b77c:	0802252c 	.word	0x0802252c
 801b780:	08022560 	.word	0x08022560

0801b784 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801b784:	b580      	push	{r7, lr}
 801b786:	b088      	sub	sp, #32
 801b788:	af04      	add	r7, sp, #16
 801b78a:	60f8      	str	r0, [r7, #12]
 801b78c:	60b9      	str	r1, [r7, #8]
 801b78e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b790:	68fb      	ldr	r3, [r7, #12]
 801b792:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b796:	68fb      	ldr	r3, [r7, #12]
 801b798:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801b79c:	68fb      	ldr	r3, [r7, #12]
 801b79e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b7a0:	2201      	movs	r2, #1
 801b7a2:	9203      	str	r2, [sp, #12]
 801b7a4:	68ba      	ldr	r2, [r7, #8]
 801b7a6:	9202      	str	r2, [sp, #8]
 801b7a8:	4a06      	ldr	r2, [pc, #24]	@ (801b7c4 <etharp_request_dst+0x40>)
 801b7aa:	9201      	str	r2, [sp, #4]
 801b7ac:	9300      	str	r3, [sp, #0]
 801b7ae:	4603      	mov	r3, r0
 801b7b0:	687a      	ldr	r2, [r7, #4]
 801b7b2:	68f8      	ldr	r0, [r7, #12]
 801b7b4:	f7ff ff5a 	bl	801b66c <etharp_raw>
 801b7b8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801b7ba:	4618      	mov	r0, r3
 801b7bc:	3710      	adds	r7, #16
 801b7be:	46bd      	mov	sp, r7
 801b7c0:	bd80      	pop	{r7, pc}
 801b7c2:	bf00      	nop
 801b7c4:	08068494 	.word	0x08068494

0801b7c8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801b7c8:	b580      	push	{r7, lr}
 801b7ca:	b082      	sub	sp, #8
 801b7cc:	af00      	add	r7, sp, #0
 801b7ce:	6078      	str	r0, [r7, #4]
 801b7d0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801b7d2:	4a05      	ldr	r2, [pc, #20]	@ (801b7e8 <etharp_request+0x20>)
 801b7d4:	6839      	ldr	r1, [r7, #0]
 801b7d6:	6878      	ldr	r0, [r7, #4]
 801b7d8:	f7ff ffd4 	bl	801b784 <etharp_request_dst>
 801b7dc:	4603      	mov	r3, r0
}
 801b7de:	4618      	mov	r0, r3
 801b7e0:	3708      	adds	r7, #8
 801b7e2:	46bd      	mov	sp, r7
 801b7e4:	bd80      	pop	{r7, pc}
 801b7e6:	bf00      	nop
 801b7e8:	0806848c 	.word	0x0806848c

0801b7ec <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801b7ec:	b580      	push	{r7, lr}
 801b7ee:	b08e      	sub	sp, #56	@ 0x38
 801b7f0:	af04      	add	r7, sp, #16
 801b7f2:	6078      	str	r0, [r7, #4]
 801b7f4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801b7f6:	4b79      	ldr	r3, [pc, #484]	@ (801b9dc <icmp_input+0x1f0>)
 801b7f8:	689b      	ldr	r3, [r3, #8]
 801b7fa:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801b7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7fe:	781b      	ldrb	r3, [r3, #0]
 801b800:	f003 030f 	and.w	r3, r3, #15
 801b804:	b2db      	uxtb	r3, r3
 801b806:	009b      	lsls	r3, r3, #2
 801b808:	b2db      	uxtb	r3, r3
 801b80a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801b80c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b80e:	2b13      	cmp	r3, #19
 801b810:	f240 80cd 	bls.w	801b9ae <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	895b      	ldrh	r3, [r3, #10]
 801b818:	2b03      	cmp	r3, #3
 801b81a:	f240 80ca 	bls.w	801b9b2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	685b      	ldr	r3, [r3, #4]
 801b822:	781b      	ldrb	r3, [r3, #0]
 801b824:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801b828:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	f000 80b7 	beq.w	801b9a0 <icmp_input+0x1b4>
 801b832:	2b08      	cmp	r3, #8
 801b834:	f040 80b7 	bne.w	801b9a6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801b838:	4b69      	ldr	r3, [pc, #420]	@ (801b9e0 <icmp_input+0x1f4>)
 801b83a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b83c:	4b67      	ldr	r3, [pc, #412]	@ (801b9dc <icmp_input+0x1f0>)
 801b83e:	695b      	ldr	r3, [r3, #20]
 801b840:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b844:	2be0      	cmp	r3, #224	@ 0xe0
 801b846:	f000 80bb 	beq.w	801b9c0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b84a:	4b64      	ldr	r3, [pc, #400]	@ (801b9dc <icmp_input+0x1f0>)
 801b84c:	695b      	ldr	r3, [r3, #20]
 801b84e:	4a63      	ldr	r2, [pc, #396]	@ (801b9dc <icmp_input+0x1f0>)
 801b850:	6812      	ldr	r2, [r2, #0]
 801b852:	4611      	mov	r1, r2
 801b854:	4618      	mov	r0, r3
 801b856:	f000 fbed 	bl	801c034 <ip4_addr_isbroadcast_u32>
 801b85a:	4603      	mov	r3, r0
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	f040 80b1 	bne.w	801b9c4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b862:	687b      	ldr	r3, [r7, #4]
 801b864:	891b      	ldrh	r3, [r3, #8]
 801b866:	2b07      	cmp	r3, #7
 801b868:	f240 80a5 	bls.w	801b9b6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b86c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b86e:	330e      	adds	r3, #14
 801b870:	4619      	mov	r1, r3
 801b872:	6878      	ldr	r0, [r7, #4]
 801b874:	f7f8 f842 	bl	80138fc <pbuf_add_header>
 801b878:	4603      	mov	r3, r0
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	d04b      	beq.n	801b916 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	891a      	ldrh	r2, [r3, #8]
 801b882:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b884:	4413      	add	r3, r2
 801b886:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	891b      	ldrh	r3, [r3, #8]
 801b88c:	8b7a      	ldrh	r2, [r7, #26]
 801b88e:	429a      	cmp	r2, r3
 801b890:	f0c0 809a 	bcc.w	801b9c8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b894:	8b7b      	ldrh	r3, [r7, #26]
 801b896:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b89a:	4619      	mov	r1, r3
 801b89c:	200e      	movs	r0, #14
 801b89e:	f7f7 fddf 	bl	8013460 <pbuf_alloc>
 801b8a2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b8a4:	697b      	ldr	r3, [r7, #20]
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	f000 8090 	beq.w	801b9cc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b8ac:	697b      	ldr	r3, [r7, #20]
 801b8ae:	895b      	ldrh	r3, [r3, #10]
 801b8b0:	461a      	mov	r2, r3
 801b8b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b8b4:	3308      	adds	r3, #8
 801b8b6:	429a      	cmp	r2, r3
 801b8b8:	d203      	bcs.n	801b8c2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b8ba:	6978      	ldr	r0, [r7, #20]
 801b8bc:	f7f8 f8b4 	bl	8013a28 <pbuf_free>
          goto icmperr;
 801b8c0:	e085      	b.n	801b9ce <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b8c2:	697b      	ldr	r3, [r7, #20]
 801b8c4:	685b      	ldr	r3, [r3, #4]
 801b8c6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b8c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b8ca:	4618      	mov	r0, r3
 801b8cc:	f002 fdd5 	bl	801e47a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b8d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b8d2:	4619      	mov	r1, r3
 801b8d4:	6978      	ldr	r0, [r7, #20]
 801b8d6:	f7f8 f821 	bl	801391c <pbuf_remove_header>
 801b8da:	4603      	mov	r3, r0
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d009      	beq.n	801b8f4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b8e0:	4b40      	ldr	r3, [pc, #256]	@ (801b9e4 <icmp_input+0x1f8>)
 801b8e2:	22b6      	movs	r2, #182	@ 0xb6
 801b8e4:	4940      	ldr	r1, [pc, #256]	@ (801b9e8 <icmp_input+0x1fc>)
 801b8e6:	4841      	ldr	r0, [pc, #260]	@ (801b9ec <icmp_input+0x200>)
 801b8e8:	f002 fc30 	bl	801e14c <iprintf>
          pbuf_free(r);
 801b8ec:	6978      	ldr	r0, [r7, #20]
 801b8ee:	f7f8 f89b 	bl	8013a28 <pbuf_free>
          goto icmperr;
 801b8f2:	e06c      	b.n	801b9ce <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b8f4:	6879      	ldr	r1, [r7, #4]
 801b8f6:	6978      	ldr	r0, [r7, #20]
 801b8f8:	f7f8 f9ba 	bl	8013c70 <pbuf_copy>
 801b8fc:	4603      	mov	r3, r0
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	d003      	beq.n	801b90a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801b902:	6978      	ldr	r0, [r7, #20]
 801b904:	f7f8 f890 	bl	8013a28 <pbuf_free>
          goto icmperr;
 801b908:	e061      	b.n	801b9ce <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801b90a:	6878      	ldr	r0, [r7, #4]
 801b90c:	f7f8 f88c 	bl	8013a28 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801b910:	697b      	ldr	r3, [r7, #20]
 801b912:	607b      	str	r3, [r7, #4]
 801b914:	e00f      	b.n	801b936 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b916:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b918:	330e      	adds	r3, #14
 801b91a:	4619      	mov	r1, r3
 801b91c:	6878      	ldr	r0, [r7, #4]
 801b91e:	f7f7 fffd 	bl	801391c <pbuf_remove_header>
 801b922:	4603      	mov	r3, r0
 801b924:	2b00      	cmp	r3, #0
 801b926:	d006      	beq.n	801b936 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b928:	4b2e      	ldr	r3, [pc, #184]	@ (801b9e4 <icmp_input+0x1f8>)
 801b92a:	22c7      	movs	r2, #199	@ 0xc7
 801b92c:	4930      	ldr	r1, [pc, #192]	@ (801b9f0 <icmp_input+0x204>)
 801b92e:	482f      	ldr	r0, [pc, #188]	@ (801b9ec <icmp_input+0x200>)
 801b930:	f002 fc0c 	bl	801e14c <iprintf>
          goto icmperr;
 801b934:	e04b      	b.n	801b9ce <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	685b      	ldr	r3, [r3, #4]
 801b93a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801b93c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b93e:	4619      	mov	r1, r3
 801b940:	6878      	ldr	r0, [r7, #4]
 801b942:	f7f7 ffdb 	bl	80138fc <pbuf_add_header>
 801b946:	4603      	mov	r3, r0
 801b948:	2b00      	cmp	r3, #0
 801b94a:	d12b      	bne.n	801b9a4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801b94c:	687b      	ldr	r3, [r7, #4]
 801b94e:	685b      	ldr	r3, [r3, #4]
 801b950:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801b952:	69fb      	ldr	r3, [r7, #28]
 801b954:	681a      	ldr	r2, [r3, #0]
 801b956:	68fb      	ldr	r3, [r7, #12]
 801b958:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b95a:	4b20      	ldr	r3, [pc, #128]	@ (801b9dc <icmp_input+0x1f0>)
 801b95c:	691a      	ldr	r2, [r3, #16]
 801b95e:	68fb      	ldr	r3, [r7, #12]
 801b960:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b962:	693b      	ldr	r3, [r7, #16]
 801b964:	2200      	movs	r2, #0
 801b966:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801b968:	693b      	ldr	r3, [r7, #16]
 801b96a:	2200      	movs	r2, #0
 801b96c:	709a      	strb	r2, [r3, #2]
 801b96e:	2200      	movs	r2, #0
 801b970:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801b972:	68fb      	ldr	r3, [r7, #12]
 801b974:	22ff      	movs	r2, #255	@ 0xff
 801b976:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	2200      	movs	r2, #0
 801b97c:	729a      	strb	r2, [r3, #10]
 801b97e:	2200      	movs	r2, #0
 801b980:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b982:	683b      	ldr	r3, [r7, #0]
 801b984:	9302      	str	r3, [sp, #8]
 801b986:	2301      	movs	r3, #1
 801b988:	9301      	str	r3, [sp, #4]
 801b98a:	2300      	movs	r3, #0
 801b98c:	9300      	str	r3, [sp, #0]
 801b98e:	23ff      	movs	r3, #255	@ 0xff
 801b990:	2200      	movs	r2, #0
 801b992:	69f9      	ldr	r1, [r7, #28]
 801b994:	6878      	ldr	r0, [r7, #4]
 801b996:	f000 fa75 	bl	801be84 <ip4_output_if>
 801b99a:	4603      	mov	r3, r0
 801b99c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801b99e:	e001      	b.n	801b9a4 <icmp_input+0x1b8>
      break;
 801b9a0:	bf00      	nop
 801b9a2:	e000      	b.n	801b9a6 <icmp_input+0x1ba>
      break;
 801b9a4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801b9a6:	6878      	ldr	r0, [r7, #4]
 801b9a8:	f7f8 f83e 	bl	8013a28 <pbuf_free>
  return;
 801b9ac:	e013      	b.n	801b9d6 <icmp_input+0x1ea>
    goto lenerr;
 801b9ae:	bf00      	nop
 801b9b0:	e002      	b.n	801b9b8 <icmp_input+0x1cc>
    goto lenerr;
 801b9b2:	bf00      	nop
 801b9b4:	e000      	b.n	801b9b8 <icmp_input+0x1cc>
        goto lenerr;
 801b9b6:	bf00      	nop
lenerr:
  pbuf_free(p);
 801b9b8:	6878      	ldr	r0, [r7, #4]
 801b9ba:	f7f8 f835 	bl	8013a28 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b9be:	e00a      	b.n	801b9d6 <icmp_input+0x1ea>
        goto icmperr;
 801b9c0:	bf00      	nop
 801b9c2:	e004      	b.n	801b9ce <icmp_input+0x1e2>
        goto icmperr;
 801b9c4:	bf00      	nop
 801b9c6:	e002      	b.n	801b9ce <icmp_input+0x1e2>
          goto icmperr;
 801b9c8:	bf00      	nop
 801b9ca:	e000      	b.n	801b9ce <icmp_input+0x1e2>
          goto icmperr;
 801b9cc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801b9ce:	6878      	ldr	r0, [r7, #4]
 801b9d0:	f7f8 f82a 	bl	8013a28 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b9d4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801b9d6:	3728      	adds	r7, #40	@ 0x28
 801b9d8:	46bd      	mov	sp, r7
 801b9da:	bd80      	pop	{r7, pc}
 801b9dc:	2000b3f0 	.word	0x2000b3f0
 801b9e0:	2000b404 	.word	0x2000b404
 801b9e4:	080225a4 	.word	0x080225a4
 801b9e8:	080225dc 	.word	0x080225dc
 801b9ec:	08022614 	.word	0x08022614
 801b9f0:	0802263c 	.word	0x0802263c

0801b9f4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801b9f4:	b580      	push	{r7, lr}
 801b9f6:	b082      	sub	sp, #8
 801b9f8:	af00      	add	r7, sp, #0
 801b9fa:	6078      	str	r0, [r7, #4]
 801b9fc:	460b      	mov	r3, r1
 801b9fe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801ba00:	78fb      	ldrb	r3, [r7, #3]
 801ba02:	461a      	mov	r2, r3
 801ba04:	2103      	movs	r1, #3
 801ba06:	6878      	ldr	r0, [r7, #4]
 801ba08:	f000 f814 	bl	801ba34 <icmp_send_response>
}
 801ba0c:	bf00      	nop
 801ba0e:	3708      	adds	r7, #8
 801ba10:	46bd      	mov	sp, r7
 801ba12:	bd80      	pop	{r7, pc}

0801ba14 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801ba14:	b580      	push	{r7, lr}
 801ba16:	b082      	sub	sp, #8
 801ba18:	af00      	add	r7, sp, #0
 801ba1a:	6078      	str	r0, [r7, #4]
 801ba1c:	460b      	mov	r3, r1
 801ba1e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801ba20:	78fb      	ldrb	r3, [r7, #3]
 801ba22:	461a      	mov	r2, r3
 801ba24:	210b      	movs	r1, #11
 801ba26:	6878      	ldr	r0, [r7, #4]
 801ba28:	f000 f804 	bl	801ba34 <icmp_send_response>
}
 801ba2c:	bf00      	nop
 801ba2e:	3708      	adds	r7, #8
 801ba30:	46bd      	mov	sp, r7
 801ba32:	bd80      	pop	{r7, pc}

0801ba34 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801ba34:	b580      	push	{r7, lr}
 801ba36:	b08c      	sub	sp, #48	@ 0x30
 801ba38:	af04      	add	r7, sp, #16
 801ba3a:	6078      	str	r0, [r7, #4]
 801ba3c:	460b      	mov	r3, r1
 801ba3e:	70fb      	strb	r3, [r7, #3]
 801ba40:	4613      	mov	r3, r2
 801ba42:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801ba44:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ba48:	2124      	movs	r1, #36	@ 0x24
 801ba4a:	2022      	movs	r0, #34	@ 0x22
 801ba4c:	f7f7 fd08 	bl	8013460 <pbuf_alloc>
 801ba50:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801ba52:	69fb      	ldr	r3, [r7, #28]
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d04c      	beq.n	801baf2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801ba58:	69fb      	ldr	r3, [r7, #28]
 801ba5a:	895b      	ldrh	r3, [r3, #10]
 801ba5c:	2b23      	cmp	r3, #35	@ 0x23
 801ba5e:	d806      	bhi.n	801ba6e <icmp_send_response+0x3a>
 801ba60:	4b26      	ldr	r3, [pc, #152]	@ (801bafc <icmp_send_response+0xc8>)
 801ba62:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801ba66:	4926      	ldr	r1, [pc, #152]	@ (801bb00 <icmp_send_response+0xcc>)
 801ba68:	4826      	ldr	r0, [pc, #152]	@ (801bb04 <icmp_send_response+0xd0>)
 801ba6a:	f002 fb6f 	bl	801e14c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	685b      	ldr	r3, [r3, #4]
 801ba72:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801ba74:	69fb      	ldr	r3, [r7, #28]
 801ba76:	685b      	ldr	r3, [r3, #4]
 801ba78:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801ba7a:	697b      	ldr	r3, [r7, #20]
 801ba7c:	78fa      	ldrb	r2, [r7, #3]
 801ba7e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801ba80:	697b      	ldr	r3, [r7, #20]
 801ba82:	78ba      	ldrb	r2, [r7, #2]
 801ba84:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801ba86:	697b      	ldr	r3, [r7, #20]
 801ba88:	2200      	movs	r2, #0
 801ba8a:	711a      	strb	r2, [r3, #4]
 801ba8c:	2200      	movs	r2, #0
 801ba8e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801ba90:	697b      	ldr	r3, [r7, #20]
 801ba92:	2200      	movs	r2, #0
 801ba94:	719a      	strb	r2, [r3, #6]
 801ba96:	2200      	movs	r2, #0
 801ba98:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801ba9a:	69fb      	ldr	r3, [r7, #28]
 801ba9c:	685b      	ldr	r3, [r3, #4]
 801ba9e:	f103 0008 	add.w	r0, r3, #8
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	685b      	ldr	r3, [r3, #4]
 801baa6:	221c      	movs	r2, #28
 801baa8:	4619      	mov	r1, r3
 801baaa:	f002 fce6 	bl	801e47a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801baae:	69bb      	ldr	r3, [r7, #24]
 801bab0:	68db      	ldr	r3, [r3, #12]
 801bab2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801bab4:	f107 030c 	add.w	r3, r7, #12
 801bab8:	4618      	mov	r0, r3
 801baba:	f000 f825 	bl	801bb08 <ip4_route>
 801babe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801bac0:	693b      	ldr	r3, [r7, #16]
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d011      	beq.n	801baea <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801bac6:	697b      	ldr	r3, [r7, #20]
 801bac8:	2200      	movs	r2, #0
 801baca:	709a      	strb	r2, [r3, #2]
 801bacc:	2200      	movs	r2, #0
 801bace:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801bad0:	f107 020c 	add.w	r2, r7, #12
 801bad4:	693b      	ldr	r3, [r7, #16]
 801bad6:	9302      	str	r3, [sp, #8]
 801bad8:	2301      	movs	r3, #1
 801bada:	9301      	str	r3, [sp, #4]
 801badc:	2300      	movs	r3, #0
 801bade:	9300      	str	r3, [sp, #0]
 801bae0:	23ff      	movs	r3, #255	@ 0xff
 801bae2:	2100      	movs	r1, #0
 801bae4:	69f8      	ldr	r0, [r7, #28]
 801bae6:	f000 f9cd 	bl	801be84 <ip4_output_if>
  }
  pbuf_free(q);
 801baea:	69f8      	ldr	r0, [r7, #28]
 801baec:	f7f7 ff9c 	bl	8013a28 <pbuf_free>
 801baf0:	e000      	b.n	801baf4 <icmp_send_response+0xc0>
    return;
 801baf2:	bf00      	nop
}
 801baf4:	3720      	adds	r7, #32
 801baf6:	46bd      	mov	sp, r7
 801baf8:	bd80      	pop	{r7, pc}
 801bafa:	bf00      	nop
 801bafc:	080225a4 	.word	0x080225a4
 801bb00:	08022670 	.word	0x08022670
 801bb04:	08022614 	.word	0x08022614

0801bb08 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801bb08:	b480      	push	{r7}
 801bb0a:	b085      	sub	sp, #20
 801bb0c:	af00      	add	r7, sp, #0
 801bb0e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801bb10:	4b33      	ldr	r3, [pc, #204]	@ (801bbe0 <ip4_route+0xd8>)
 801bb12:	681b      	ldr	r3, [r3, #0]
 801bb14:	60fb      	str	r3, [r7, #12]
 801bb16:	e036      	b.n	801bb86 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801bb18:	68fb      	ldr	r3, [r7, #12]
 801bb1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bb1e:	f003 0301 	and.w	r3, r3, #1
 801bb22:	b2db      	uxtb	r3, r3
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	d02b      	beq.n	801bb80 <ip4_route+0x78>
 801bb28:	68fb      	ldr	r3, [r7, #12]
 801bb2a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bb2e:	089b      	lsrs	r3, r3, #2
 801bb30:	f003 0301 	and.w	r3, r3, #1
 801bb34:	b2db      	uxtb	r3, r3
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d022      	beq.n	801bb80 <ip4_route+0x78>
 801bb3a:	68fb      	ldr	r3, [r7, #12]
 801bb3c:	3304      	adds	r3, #4
 801bb3e:	681b      	ldr	r3, [r3, #0]
 801bb40:	2b00      	cmp	r3, #0
 801bb42:	d01d      	beq.n	801bb80 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	681a      	ldr	r2, [r3, #0]
 801bb48:	68fb      	ldr	r3, [r7, #12]
 801bb4a:	3304      	adds	r3, #4
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	405a      	eors	r2, r3
 801bb50:	68fb      	ldr	r3, [r7, #12]
 801bb52:	3308      	adds	r3, #8
 801bb54:	681b      	ldr	r3, [r3, #0]
 801bb56:	4013      	ands	r3, r2
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d101      	bne.n	801bb60 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801bb5c:	68fb      	ldr	r3, [r7, #12]
 801bb5e:	e038      	b.n	801bbd2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801bb60:	68fb      	ldr	r3, [r7, #12]
 801bb62:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bb66:	f003 0302 	and.w	r3, r3, #2
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d108      	bne.n	801bb80 <ip4_route+0x78>
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	681a      	ldr	r2, [r3, #0]
 801bb72:	68fb      	ldr	r3, [r7, #12]
 801bb74:	330c      	adds	r3, #12
 801bb76:	681b      	ldr	r3, [r3, #0]
 801bb78:	429a      	cmp	r2, r3
 801bb7a:	d101      	bne.n	801bb80 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801bb7c:	68fb      	ldr	r3, [r7, #12]
 801bb7e:	e028      	b.n	801bbd2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801bb80:	68fb      	ldr	r3, [r7, #12]
 801bb82:	681b      	ldr	r3, [r3, #0]
 801bb84:	60fb      	str	r3, [r7, #12]
 801bb86:	68fb      	ldr	r3, [r7, #12]
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d1c5      	bne.n	801bb18 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801bb8c:	4b15      	ldr	r3, [pc, #84]	@ (801bbe4 <ip4_route+0xdc>)
 801bb8e:	681b      	ldr	r3, [r3, #0]
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	d01a      	beq.n	801bbca <ip4_route+0xc2>
 801bb94:	4b13      	ldr	r3, [pc, #76]	@ (801bbe4 <ip4_route+0xdc>)
 801bb96:	681b      	ldr	r3, [r3, #0]
 801bb98:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bb9c:	f003 0301 	and.w	r3, r3, #1
 801bba0:	2b00      	cmp	r3, #0
 801bba2:	d012      	beq.n	801bbca <ip4_route+0xc2>
 801bba4:	4b0f      	ldr	r3, [pc, #60]	@ (801bbe4 <ip4_route+0xdc>)
 801bba6:	681b      	ldr	r3, [r3, #0]
 801bba8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bbac:	f003 0304 	and.w	r3, r3, #4
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	d00a      	beq.n	801bbca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801bbb4:	4b0b      	ldr	r3, [pc, #44]	@ (801bbe4 <ip4_route+0xdc>)
 801bbb6:	681b      	ldr	r3, [r3, #0]
 801bbb8:	3304      	adds	r3, #4
 801bbba:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	d004      	beq.n	801bbca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	681b      	ldr	r3, [r3, #0]
 801bbc4:	b2db      	uxtb	r3, r3
 801bbc6:	2b7f      	cmp	r3, #127	@ 0x7f
 801bbc8:	d101      	bne.n	801bbce <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801bbca:	2300      	movs	r3, #0
 801bbcc:	e001      	b.n	801bbd2 <ip4_route+0xca>
  }

  return netif_default;
 801bbce:	4b05      	ldr	r3, [pc, #20]	@ (801bbe4 <ip4_route+0xdc>)
 801bbd0:	681b      	ldr	r3, [r3, #0]
}
 801bbd2:	4618      	mov	r0, r3
 801bbd4:	3714      	adds	r7, #20
 801bbd6:	46bd      	mov	sp, r7
 801bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbdc:	4770      	bx	lr
 801bbde:	bf00      	nop
 801bbe0:	2000e4e4 	.word	0x2000e4e4
 801bbe4:	2000e4e8 	.word	0x2000e4e8

0801bbe8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801bbe8:	b580      	push	{r7, lr}
 801bbea:	b082      	sub	sp, #8
 801bbec:	af00      	add	r7, sp, #0
 801bbee:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bbf6:	f003 0301 	and.w	r3, r3, #1
 801bbfa:	b2db      	uxtb	r3, r3
 801bbfc:	2b00      	cmp	r3, #0
 801bbfe:	d016      	beq.n	801bc2e <ip4_input_accept+0x46>
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	3304      	adds	r3, #4
 801bc04:	681b      	ldr	r3, [r3, #0]
 801bc06:	2b00      	cmp	r3, #0
 801bc08:	d011      	beq.n	801bc2e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bc0a:	4b0b      	ldr	r3, [pc, #44]	@ (801bc38 <ip4_input_accept+0x50>)
 801bc0c:	695a      	ldr	r2, [r3, #20]
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	3304      	adds	r3, #4
 801bc12:	681b      	ldr	r3, [r3, #0]
 801bc14:	429a      	cmp	r2, r3
 801bc16:	d008      	beq.n	801bc2a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801bc18:	4b07      	ldr	r3, [pc, #28]	@ (801bc38 <ip4_input_accept+0x50>)
 801bc1a:	695b      	ldr	r3, [r3, #20]
 801bc1c:	6879      	ldr	r1, [r7, #4]
 801bc1e:	4618      	mov	r0, r3
 801bc20:	f000 fa08 	bl	801c034 <ip4_addr_isbroadcast_u32>
 801bc24:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d001      	beq.n	801bc2e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801bc2a:	2301      	movs	r3, #1
 801bc2c:	e000      	b.n	801bc30 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801bc2e:	2300      	movs	r3, #0
}
 801bc30:	4618      	mov	r0, r3
 801bc32:	3708      	adds	r7, #8
 801bc34:	46bd      	mov	sp, r7
 801bc36:	bd80      	pop	{r7, pc}
 801bc38:	2000b3f0 	.word	0x2000b3f0

0801bc3c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801bc3c:	b580      	push	{r7, lr}
 801bc3e:	b086      	sub	sp, #24
 801bc40:	af00      	add	r7, sp, #0
 801bc42:	6078      	str	r0, [r7, #4]
 801bc44:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	685b      	ldr	r3, [r3, #4]
 801bc4a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801bc4c:	697b      	ldr	r3, [r7, #20]
 801bc4e:	781b      	ldrb	r3, [r3, #0]
 801bc50:	091b      	lsrs	r3, r3, #4
 801bc52:	b2db      	uxtb	r3, r3
 801bc54:	2b04      	cmp	r3, #4
 801bc56:	d004      	beq.n	801bc62 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801bc58:	6878      	ldr	r0, [r7, #4]
 801bc5a:	f7f7 fee5 	bl	8013a28 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801bc5e:	2300      	movs	r3, #0
 801bc60:	e107      	b.n	801be72 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801bc62:	697b      	ldr	r3, [r7, #20]
 801bc64:	781b      	ldrb	r3, [r3, #0]
 801bc66:	f003 030f 	and.w	r3, r3, #15
 801bc6a:	b2db      	uxtb	r3, r3
 801bc6c:	009b      	lsls	r3, r3, #2
 801bc6e:	b2db      	uxtb	r3, r3
 801bc70:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801bc72:	697b      	ldr	r3, [r7, #20]
 801bc74:	885b      	ldrh	r3, [r3, #2]
 801bc76:	b29b      	uxth	r3, r3
 801bc78:	4618      	mov	r0, r3
 801bc7a:	f7f6 fae7 	bl	801224c <lwip_htons>
 801bc7e:	4603      	mov	r3, r0
 801bc80:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	891b      	ldrh	r3, [r3, #8]
 801bc86:	89ba      	ldrh	r2, [r7, #12]
 801bc88:	429a      	cmp	r2, r3
 801bc8a:	d204      	bcs.n	801bc96 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801bc8c:	89bb      	ldrh	r3, [r7, #12]
 801bc8e:	4619      	mov	r1, r3
 801bc90:	6878      	ldr	r0, [r7, #4]
 801bc92:	f7f7 fd43 	bl	801371c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	895b      	ldrh	r3, [r3, #10]
 801bc9a:	89fa      	ldrh	r2, [r7, #14]
 801bc9c:	429a      	cmp	r2, r3
 801bc9e:	d807      	bhi.n	801bcb0 <ip4_input+0x74>
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	891b      	ldrh	r3, [r3, #8]
 801bca4:	89ba      	ldrh	r2, [r7, #12]
 801bca6:	429a      	cmp	r2, r3
 801bca8:	d802      	bhi.n	801bcb0 <ip4_input+0x74>
 801bcaa:	89fb      	ldrh	r3, [r7, #14]
 801bcac:	2b13      	cmp	r3, #19
 801bcae:	d804      	bhi.n	801bcba <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801bcb0:	6878      	ldr	r0, [r7, #4]
 801bcb2:	f7f7 feb9 	bl	8013a28 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801bcb6:	2300      	movs	r3, #0
 801bcb8:	e0db      	b.n	801be72 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801bcba:	697b      	ldr	r3, [r7, #20]
 801bcbc:	691b      	ldr	r3, [r3, #16]
 801bcbe:	4a6f      	ldr	r2, [pc, #444]	@ (801be7c <ip4_input+0x240>)
 801bcc0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801bcc2:	697b      	ldr	r3, [r7, #20]
 801bcc4:	68db      	ldr	r3, [r3, #12]
 801bcc6:	4a6d      	ldr	r2, [pc, #436]	@ (801be7c <ip4_input+0x240>)
 801bcc8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bcca:	4b6c      	ldr	r3, [pc, #432]	@ (801be7c <ip4_input+0x240>)
 801bccc:	695b      	ldr	r3, [r3, #20]
 801bcce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801bcd2:	2be0      	cmp	r3, #224	@ 0xe0
 801bcd4:	d112      	bne.n	801bcfc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801bcd6:	683b      	ldr	r3, [r7, #0]
 801bcd8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bcdc:	f003 0301 	and.w	r3, r3, #1
 801bce0:	b2db      	uxtb	r3, r3
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d007      	beq.n	801bcf6 <ip4_input+0xba>
 801bce6:	683b      	ldr	r3, [r7, #0]
 801bce8:	3304      	adds	r3, #4
 801bcea:	681b      	ldr	r3, [r3, #0]
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	d002      	beq.n	801bcf6 <ip4_input+0xba>
      netif = inp;
 801bcf0:	683b      	ldr	r3, [r7, #0]
 801bcf2:	613b      	str	r3, [r7, #16]
 801bcf4:	e02a      	b.n	801bd4c <ip4_input+0x110>
    } else {
      netif = NULL;
 801bcf6:	2300      	movs	r3, #0
 801bcf8:	613b      	str	r3, [r7, #16]
 801bcfa:	e027      	b.n	801bd4c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801bcfc:	6838      	ldr	r0, [r7, #0]
 801bcfe:	f7ff ff73 	bl	801bbe8 <ip4_input_accept>
 801bd02:	4603      	mov	r3, r0
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	d002      	beq.n	801bd0e <ip4_input+0xd2>
      netif = inp;
 801bd08:	683b      	ldr	r3, [r7, #0]
 801bd0a:	613b      	str	r3, [r7, #16]
 801bd0c:	e01e      	b.n	801bd4c <ip4_input+0x110>
    } else {
      netif = NULL;
 801bd0e:	2300      	movs	r3, #0
 801bd10:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801bd12:	4b5a      	ldr	r3, [pc, #360]	@ (801be7c <ip4_input+0x240>)
 801bd14:	695b      	ldr	r3, [r3, #20]
 801bd16:	b2db      	uxtb	r3, r3
 801bd18:	2b7f      	cmp	r3, #127	@ 0x7f
 801bd1a:	d017      	beq.n	801bd4c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801bd1c:	4b58      	ldr	r3, [pc, #352]	@ (801be80 <ip4_input+0x244>)
 801bd1e:	681b      	ldr	r3, [r3, #0]
 801bd20:	613b      	str	r3, [r7, #16]
 801bd22:	e00e      	b.n	801bd42 <ip4_input+0x106>
          if (netif == inp) {
 801bd24:	693a      	ldr	r2, [r7, #16]
 801bd26:	683b      	ldr	r3, [r7, #0]
 801bd28:	429a      	cmp	r2, r3
 801bd2a:	d006      	beq.n	801bd3a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801bd2c:	6938      	ldr	r0, [r7, #16]
 801bd2e:	f7ff ff5b 	bl	801bbe8 <ip4_input_accept>
 801bd32:	4603      	mov	r3, r0
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d108      	bne.n	801bd4a <ip4_input+0x10e>
 801bd38:	e000      	b.n	801bd3c <ip4_input+0x100>
            continue;
 801bd3a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801bd3c:	693b      	ldr	r3, [r7, #16]
 801bd3e:	681b      	ldr	r3, [r3, #0]
 801bd40:	613b      	str	r3, [r7, #16]
 801bd42:	693b      	ldr	r3, [r7, #16]
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	d1ed      	bne.n	801bd24 <ip4_input+0xe8>
 801bd48:	e000      	b.n	801bd4c <ip4_input+0x110>
            break;
 801bd4a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801bd4c:	4b4b      	ldr	r3, [pc, #300]	@ (801be7c <ip4_input+0x240>)
 801bd4e:	691b      	ldr	r3, [r3, #16]
 801bd50:	6839      	ldr	r1, [r7, #0]
 801bd52:	4618      	mov	r0, r3
 801bd54:	f000 f96e 	bl	801c034 <ip4_addr_isbroadcast_u32>
 801bd58:	4603      	mov	r3, r0
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d105      	bne.n	801bd6a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801bd5e:	4b47      	ldr	r3, [pc, #284]	@ (801be7c <ip4_input+0x240>)
 801bd60:	691b      	ldr	r3, [r3, #16]
 801bd62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801bd66:	2be0      	cmp	r3, #224	@ 0xe0
 801bd68:	d104      	bne.n	801bd74 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801bd6a:	6878      	ldr	r0, [r7, #4]
 801bd6c:	f7f7 fe5c 	bl	8013a28 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801bd70:	2300      	movs	r3, #0
 801bd72:	e07e      	b.n	801be72 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801bd74:	693b      	ldr	r3, [r7, #16]
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	d104      	bne.n	801bd84 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801bd7a:	6878      	ldr	r0, [r7, #4]
 801bd7c:	f7f7 fe54 	bl	8013a28 <pbuf_free>
    return ERR_OK;
 801bd80:	2300      	movs	r3, #0
 801bd82:	e076      	b.n	801be72 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801bd84:	697b      	ldr	r3, [r7, #20]
 801bd86:	88db      	ldrh	r3, [r3, #6]
 801bd88:	b29b      	uxth	r3, r3
 801bd8a:	461a      	mov	r2, r3
 801bd8c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801bd90:	4013      	ands	r3, r2
 801bd92:	2b00      	cmp	r3, #0
 801bd94:	d00b      	beq.n	801bdae <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801bd96:	6878      	ldr	r0, [r7, #4]
 801bd98:	f000 fc92 	bl	801c6c0 <ip4_reass>
 801bd9c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d101      	bne.n	801bda8 <ip4_input+0x16c>
      return ERR_OK;
 801bda4:	2300      	movs	r3, #0
 801bda6:	e064      	b.n	801be72 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	685b      	ldr	r3, [r3, #4]
 801bdac:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801bdae:	4a33      	ldr	r2, [pc, #204]	@ (801be7c <ip4_input+0x240>)
 801bdb0:	693b      	ldr	r3, [r7, #16]
 801bdb2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801bdb4:	4a31      	ldr	r2, [pc, #196]	@ (801be7c <ip4_input+0x240>)
 801bdb6:	683b      	ldr	r3, [r7, #0]
 801bdb8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801bdba:	4a30      	ldr	r2, [pc, #192]	@ (801be7c <ip4_input+0x240>)
 801bdbc:	697b      	ldr	r3, [r7, #20]
 801bdbe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801bdc0:	697b      	ldr	r3, [r7, #20]
 801bdc2:	781b      	ldrb	r3, [r3, #0]
 801bdc4:	f003 030f 	and.w	r3, r3, #15
 801bdc8:	b2db      	uxtb	r3, r3
 801bdca:	009b      	lsls	r3, r3, #2
 801bdcc:	b2db      	uxtb	r3, r3
 801bdce:	461a      	mov	r2, r3
 801bdd0:	4b2a      	ldr	r3, [pc, #168]	@ (801be7c <ip4_input+0x240>)
 801bdd2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801bdd4:	89fb      	ldrh	r3, [r7, #14]
 801bdd6:	4619      	mov	r1, r3
 801bdd8:	6878      	ldr	r0, [r7, #4]
 801bdda:	f7f7 fd9f 	bl	801391c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801bdde:	697b      	ldr	r3, [r7, #20]
 801bde0:	7a5b      	ldrb	r3, [r3, #9]
 801bde2:	2b11      	cmp	r3, #17
 801bde4:	d006      	beq.n	801bdf4 <ip4_input+0x1b8>
 801bde6:	2b11      	cmp	r3, #17
 801bde8:	dc13      	bgt.n	801be12 <ip4_input+0x1d6>
 801bdea:	2b01      	cmp	r3, #1
 801bdec:	d00c      	beq.n	801be08 <ip4_input+0x1cc>
 801bdee:	2b06      	cmp	r3, #6
 801bdf0:	d005      	beq.n	801bdfe <ip4_input+0x1c2>
 801bdf2:	e00e      	b.n	801be12 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801bdf4:	6839      	ldr	r1, [r7, #0]
 801bdf6:	6878      	ldr	r0, [r7, #4]
 801bdf8:	f7fe fb5a 	bl	801a4b0 <udp_input>
        break;
 801bdfc:	e026      	b.n	801be4c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801bdfe:	6839      	ldr	r1, [r7, #0]
 801be00:	6878      	ldr	r0, [r7, #4]
 801be02:	f7f9 ff19 	bl	8015c38 <tcp_input>
        break;
 801be06:	e021      	b.n	801be4c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801be08:	6839      	ldr	r1, [r7, #0]
 801be0a:	6878      	ldr	r0, [r7, #4]
 801be0c:	f7ff fcee 	bl	801b7ec <icmp_input>
        break;
 801be10:	e01c      	b.n	801be4c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801be12:	4b1a      	ldr	r3, [pc, #104]	@ (801be7c <ip4_input+0x240>)
 801be14:	695b      	ldr	r3, [r3, #20]
 801be16:	6939      	ldr	r1, [r7, #16]
 801be18:	4618      	mov	r0, r3
 801be1a:	f000 f90b 	bl	801c034 <ip4_addr_isbroadcast_u32>
 801be1e:	4603      	mov	r3, r0
 801be20:	2b00      	cmp	r3, #0
 801be22:	d10f      	bne.n	801be44 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801be24:	4b15      	ldr	r3, [pc, #84]	@ (801be7c <ip4_input+0x240>)
 801be26:	695b      	ldr	r3, [r3, #20]
 801be28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801be2c:	2be0      	cmp	r3, #224	@ 0xe0
 801be2e:	d009      	beq.n	801be44 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801be30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801be34:	4619      	mov	r1, r3
 801be36:	6878      	ldr	r0, [r7, #4]
 801be38:	f7f7 fde3 	bl	8013a02 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801be3c:	2102      	movs	r1, #2
 801be3e:	6878      	ldr	r0, [r7, #4]
 801be40:	f7ff fdd8 	bl	801b9f4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801be44:	6878      	ldr	r0, [r7, #4]
 801be46:	f7f7 fdef 	bl	8013a28 <pbuf_free>
        break;
 801be4a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801be4c:	4b0b      	ldr	r3, [pc, #44]	@ (801be7c <ip4_input+0x240>)
 801be4e:	2200      	movs	r2, #0
 801be50:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801be52:	4b0a      	ldr	r3, [pc, #40]	@ (801be7c <ip4_input+0x240>)
 801be54:	2200      	movs	r2, #0
 801be56:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801be58:	4b08      	ldr	r3, [pc, #32]	@ (801be7c <ip4_input+0x240>)
 801be5a:	2200      	movs	r2, #0
 801be5c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801be5e:	4b07      	ldr	r3, [pc, #28]	@ (801be7c <ip4_input+0x240>)
 801be60:	2200      	movs	r2, #0
 801be62:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801be64:	4b05      	ldr	r3, [pc, #20]	@ (801be7c <ip4_input+0x240>)
 801be66:	2200      	movs	r2, #0
 801be68:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801be6a:	4b04      	ldr	r3, [pc, #16]	@ (801be7c <ip4_input+0x240>)
 801be6c:	2200      	movs	r2, #0
 801be6e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801be70:	2300      	movs	r3, #0
}
 801be72:	4618      	mov	r0, r3
 801be74:	3718      	adds	r7, #24
 801be76:	46bd      	mov	sp, r7
 801be78:	bd80      	pop	{r7, pc}
 801be7a:	bf00      	nop
 801be7c:	2000b3f0 	.word	0x2000b3f0
 801be80:	2000e4e4 	.word	0x2000e4e4

0801be84 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801be84:	b580      	push	{r7, lr}
 801be86:	b08a      	sub	sp, #40	@ 0x28
 801be88:	af04      	add	r7, sp, #16
 801be8a:	60f8      	str	r0, [r7, #12]
 801be8c:	60b9      	str	r1, [r7, #8]
 801be8e:	607a      	str	r2, [r7, #4]
 801be90:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801be92:	68bb      	ldr	r3, [r7, #8]
 801be94:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d009      	beq.n	801beb0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801be9c:	68bb      	ldr	r3, [r7, #8]
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d003      	beq.n	801beaa <ip4_output_if+0x26>
 801bea2:	68bb      	ldr	r3, [r7, #8]
 801bea4:	681b      	ldr	r3, [r3, #0]
 801bea6:	2b00      	cmp	r3, #0
 801bea8:	d102      	bne.n	801beb0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801beaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801beac:	3304      	adds	r3, #4
 801beae:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801beb0:	78fa      	ldrb	r2, [r7, #3]
 801beb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801beb4:	9302      	str	r3, [sp, #8]
 801beb6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801beba:	9301      	str	r3, [sp, #4]
 801bebc:	f897 3020 	ldrb.w	r3, [r7, #32]
 801bec0:	9300      	str	r3, [sp, #0]
 801bec2:	4613      	mov	r3, r2
 801bec4:	687a      	ldr	r2, [r7, #4]
 801bec6:	6979      	ldr	r1, [r7, #20]
 801bec8:	68f8      	ldr	r0, [r7, #12]
 801beca:	f000 f805 	bl	801bed8 <ip4_output_if_src>
 801bece:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801bed0:	4618      	mov	r0, r3
 801bed2:	3718      	adds	r7, #24
 801bed4:	46bd      	mov	sp, r7
 801bed6:	bd80      	pop	{r7, pc}

0801bed8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801bed8:	b580      	push	{r7, lr}
 801beda:	b088      	sub	sp, #32
 801bedc:	af00      	add	r7, sp, #0
 801bede:	60f8      	str	r0, [r7, #12]
 801bee0:	60b9      	str	r1, [r7, #8]
 801bee2:	607a      	str	r2, [r7, #4]
 801bee4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801bee6:	68fb      	ldr	r3, [r7, #12]
 801bee8:	7b9b      	ldrb	r3, [r3, #14]
 801beea:	2b01      	cmp	r3, #1
 801beec:	d006      	beq.n	801befc <ip4_output_if_src+0x24>
 801beee:	4b4b      	ldr	r3, [pc, #300]	@ (801c01c <ip4_output_if_src+0x144>)
 801bef0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801bef4:	494a      	ldr	r1, [pc, #296]	@ (801c020 <ip4_output_if_src+0x148>)
 801bef6:	484b      	ldr	r0, [pc, #300]	@ (801c024 <ip4_output_if_src+0x14c>)
 801bef8:	f002 f928 	bl	801e14c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	2b00      	cmp	r3, #0
 801bf00:	d060      	beq.n	801bfc4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801bf02:	2314      	movs	r3, #20
 801bf04:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801bf06:	2114      	movs	r1, #20
 801bf08:	68f8      	ldr	r0, [r7, #12]
 801bf0a:	f7f7 fcf7 	bl	80138fc <pbuf_add_header>
 801bf0e:	4603      	mov	r3, r0
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d002      	beq.n	801bf1a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801bf14:	f06f 0301 	mvn.w	r3, #1
 801bf18:	e07c      	b.n	801c014 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801bf1a:	68fb      	ldr	r3, [r7, #12]
 801bf1c:	685b      	ldr	r3, [r3, #4]
 801bf1e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801bf20:	68fb      	ldr	r3, [r7, #12]
 801bf22:	895b      	ldrh	r3, [r3, #10]
 801bf24:	2b13      	cmp	r3, #19
 801bf26:	d806      	bhi.n	801bf36 <ip4_output_if_src+0x5e>
 801bf28:	4b3c      	ldr	r3, [pc, #240]	@ (801c01c <ip4_output_if_src+0x144>)
 801bf2a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801bf2e:	493e      	ldr	r1, [pc, #248]	@ (801c028 <ip4_output_if_src+0x150>)
 801bf30:	483c      	ldr	r0, [pc, #240]	@ (801c024 <ip4_output_if_src+0x14c>)
 801bf32:	f002 f90b 	bl	801e14c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801bf36:	69fb      	ldr	r3, [r7, #28]
 801bf38:	78fa      	ldrb	r2, [r7, #3]
 801bf3a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801bf3c:	69fb      	ldr	r3, [r7, #28]
 801bf3e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801bf42:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	681a      	ldr	r2, [r3, #0]
 801bf48:	69fb      	ldr	r3, [r7, #28]
 801bf4a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801bf4c:	8b7b      	ldrh	r3, [r7, #26]
 801bf4e:	089b      	lsrs	r3, r3, #2
 801bf50:	b29b      	uxth	r3, r3
 801bf52:	b2db      	uxtb	r3, r3
 801bf54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bf58:	b2da      	uxtb	r2, r3
 801bf5a:	69fb      	ldr	r3, [r7, #28]
 801bf5c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801bf5e:	69fb      	ldr	r3, [r7, #28]
 801bf60:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801bf64:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801bf66:	68fb      	ldr	r3, [r7, #12]
 801bf68:	891b      	ldrh	r3, [r3, #8]
 801bf6a:	4618      	mov	r0, r3
 801bf6c:	f7f6 f96e 	bl	801224c <lwip_htons>
 801bf70:	4603      	mov	r3, r0
 801bf72:	461a      	mov	r2, r3
 801bf74:	69fb      	ldr	r3, [r7, #28]
 801bf76:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801bf78:	69fb      	ldr	r3, [r7, #28]
 801bf7a:	2200      	movs	r2, #0
 801bf7c:	719a      	strb	r2, [r3, #6]
 801bf7e:	2200      	movs	r2, #0
 801bf80:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801bf82:	4b2a      	ldr	r3, [pc, #168]	@ (801c02c <ip4_output_if_src+0x154>)
 801bf84:	881b      	ldrh	r3, [r3, #0]
 801bf86:	4618      	mov	r0, r3
 801bf88:	f7f6 f960 	bl	801224c <lwip_htons>
 801bf8c:	4603      	mov	r3, r0
 801bf8e:	461a      	mov	r2, r3
 801bf90:	69fb      	ldr	r3, [r7, #28]
 801bf92:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801bf94:	4b25      	ldr	r3, [pc, #148]	@ (801c02c <ip4_output_if_src+0x154>)
 801bf96:	881b      	ldrh	r3, [r3, #0]
 801bf98:	3301      	adds	r3, #1
 801bf9a:	b29a      	uxth	r2, r3
 801bf9c:	4b23      	ldr	r3, [pc, #140]	@ (801c02c <ip4_output_if_src+0x154>)
 801bf9e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801bfa0:	68bb      	ldr	r3, [r7, #8]
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d104      	bne.n	801bfb0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801bfa6:	4b22      	ldr	r3, [pc, #136]	@ (801c030 <ip4_output_if_src+0x158>)
 801bfa8:	681a      	ldr	r2, [r3, #0]
 801bfaa:	69fb      	ldr	r3, [r7, #28]
 801bfac:	60da      	str	r2, [r3, #12]
 801bfae:	e003      	b.n	801bfb8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801bfb0:	68bb      	ldr	r3, [r7, #8]
 801bfb2:	681a      	ldr	r2, [r3, #0]
 801bfb4:	69fb      	ldr	r3, [r7, #28]
 801bfb6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801bfb8:	69fb      	ldr	r3, [r7, #28]
 801bfba:	2200      	movs	r2, #0
 801bfbc:	729a      	strb	r2, [r3, #10]
 801bfbe:	2200      	movs	r2, #0
 801bfc0:	72da      	strb	r2, [r3, #11]
 801bfc2:	e00f      	b.n	801bfe4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801bfc4:	68fb      	ldr	r3, [r7, #12]
 801bfc6:	895b      	ldrh	r3, [r3, #10]
 801bfc8:	2b13      	cmp	r3, #19
 801bfca:	d802      	bhi.n	801bfd2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801bfcc:	f06f 0301 	mvn.w	r3, #1
 801bfd0:	e020      	b.n	801c014 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801bfd2:	68fb      	ldr	r3, [r7, #12]
 801bfd4:	685b      	ldr	r3, [r3, #4]
 801bfd6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801bfd8:	69fb      	ldr	r3, [r7, #28]
 801bfda:	691b      	ldr	r3, [r3, #16]
 801bfdc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801bfde:	f107 0314 	add.w	r3, r7, #20
 801bfe2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801bfe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfe6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	d00c      	beq.n	801c006 <ip4_output_if_src+0x12e>
 801bfec:	68fb      	ldr	r3, [r7, #12]
 801bfee:	891a      	ldrh	r2, [r3, #8]
 801bff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bff2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801bff4:	429a      	cmp	r2, r3
 801bff6:	d906      	bls.n	801c006 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801bff8:	687a      	ldr	r2, [r7, #4]
 801bffa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801bffc:	68f8      	ldr	r0, [r7, #12]
 801bffe:	f000 fd53 	bl	801caa8 <ip4_frag>
 801c002:	4603      	mov	r3, r0
 801c004:	e006      	b.n	801c014 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801c006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c008:	695b      	ldr	r3, [r3, #20]
 801c00a:	687a      	ldr	r2, [r7, #4]
 801c00c:	68f9      	ldr	r1, [r7, #12]
 801c00e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c010:	4798      	blx	r3
 801c012:	4603      	mov	r3, r0
}
 801c014:	4618      	mov	r0, r3
 801c016:	3720      	adds	r7, #32
 801c018:	46bd      	mov	sp, r7
 801c01a:	bd80      	pop	{r7, pc}
 801c01c:	0802269c 	.word	0x0802269c
 801c020:	080226d0 	.word	0x080226d0
 801c024:	080226dc 	.word	0x080226dc
 801c028:	08022704 	.word	0x08022704
 801c02c:	2000e642 	.word	0x2000e642
 801c030:	08068488 	.word	0x08068488

0801c034 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801c034:	b480      	push	{r7}
 801c036:	b085      	sub	sp, #20
 801c038:	af00      	add	r7, sp, #0
 801c03a:	6078      	str	r0, [r7, #4]
 801c03c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c048:	d002      	beq.n	801c050 <ip4_addr_isbroadcast_u32+0x1c>
 801c04a:	687b      	ldr	r3, [r7, #4]
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	d101      	bne.n	801c054 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801c050:	2301      	movs	r3, #1
 801c052:	e02a      	b.n	801c0aa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801c054:	683b      	ldr	r3, [r7, #0]
 801c056:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c05a:	f003 0302 	and.w	r3, r3, #2
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d101      	bne.n	801c066 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801c062:	2300      	movs	r3, #0
 801c064:	e021      	b.n	801c0aa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801c066:	683b      	ldr	r3, [r7, #0]
 801c068:	3304      	adds	r3, #4
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	687a      	ldr	r2, [r7, #4]
 801c06e:	429a      	cmp	r2, r3
 801c070:	d101      	bne.n	801c076 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801c072:	2300      	movs	r3, #0
 801c074:	e019      	b.n	801c0aa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801c076:	68fa      	ldr	r2, [r7, #12]
 801c078:	683b      	ldr	r3, [r7, #0]
 801c07a:	3304      	adds	r3, #4
 801c07c:	681b      	ldr	r3, [r3, #0]
 801c07e:	405a      	eors	r2, r3
 801c080:	683b      	ldr	r3, [r7, #0]
 801c082:	3308      	adds	r3, #8
 801c084:	681b      	ldr	r3, [r3, #0]
 801c086:	4013      	ands	r3, r2
 801c088:	2b00      	cmp	r3, #0
 801c08a:	d10d      	bne.n	801c0a8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c08c:	683b      	ldr	r3, [r7, #0]
 801c08e:	3308      	adds	r3, #8
 801c090:	681b      	ldr	r3, [r3, #0]
 801c092:	43da      	mvns	r2, r3
 801c094:	687b      	ldr	r3, [r7, #4]
 801c096:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801c098:	683b      	ldr	r3, [r7, #0]
 801c09a:	3308      	adds	r3, #8
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c0a0:	429a      	cmp	r2, r3
 801c0a2:	d101      	bne.n	801c0a8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801c0a4:	2301      	movs	r3, #1
 801c0a6:	e000      	b.n	801c0aa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801c0a8:	2300      	movs	r3, #0
  }
}
 801c0aa:	4618      	mov	r0, r3
 801c0ac:	3714      	adds	r7, #20
 801c0ae:	46bd      	mov	sp, r7
 801c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0b4:	4770      	bx	lr
	...

0801c0b8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801c0b8:	b580      	push	{r7, lr}
 801c0ba:	b084      	sub	sp, #16
 801c0bc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801c0be:	2300      	movs	r3, #0
 801c0c0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801c0c2:	4b12      	ldr	r3, [pc, #72]	@ (801c10c <ip_reass_tmr+0x54>)
 801c0c4:	681b      	ldr	r3, [r3, #0]
 801c0c6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801c0c8:	e018      	b.n	801c0fc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801c0ca:	68fb      	ldr	r3, [r7, #12]
 801c0cc:	7fdb      	ldrb	r3, [r3, #31]
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	d00b      	beq.n	801c0ea <ip_reass_tmr+0x32>
      r->timer--;
 801c0d2:	68fb      	ldr	r3, [r7, #12]
 801c0d4:	7fdb      	ldrb	r3, [r3, #31]
 801c0d6:	3b01      	subs	r3, #1
 801c0d8:	b2da      	uxtb	r2, r3
 801c0da:	68fb      	ldr	r3, [r7, #12]
 801c0dc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801c0de:	68fb      	ldr	r3, [r7, #12]
 801c0e0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801c0e2:	68fb      	ldr	r3, [r7, #12]
 801c0e4:	681b      	ldr	r3, [r3, #0]
 801c0e6:	60fb      	str	r3, [r7, #12]
 801c0e8:	e008      	b.n	801c0fc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801c0ea:	68fb      	ldr	r3, [r7, #12]
 801c0ec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801c0ee:	68fb      	ldr	r3, [r7, #12]
 801c0f0:	681b      	ldr	r3, [r3, #0]
 801c0f2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801c0f4:	68b9      	ldr	r1, [r7, #8]
 801c0f6:	6878      	ldr	r0, [r7, #4]
 801c0f8:	f000 f80a 	bl	801c110 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801c0fc:	68fb      	ldr	r3, [r7, #12]
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d1e3      	bne.n	801c0ca <ip_reass_tmr+0x12>
    }
  }
}
 801c102:	bf00      	nop
 801c104:	bf00      	nop
 801c106:	3710      	adds	r7, #16
 801c108:	46bd      	mov	sp, r7
 801c10a:	bd80      	pop	{r7, pc}
 801c10c:	2000e644 	.word	0x2000e644

0801c110 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c110:	b580      	push	{r7, lr}
 801c112:	b088      	sub	sp, #32
 801c114:	af00      	add	r7, sp, #0
 801c116:	6078      	str	r0, [r7, #4]
 801c118:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801c11a:	2300      	movs	r3, #0
 801c11c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801c11e:	683a      	ldr	r2, [r7, #0]
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	429a      	cmp	r2, r3
 801c124:	d105      	bne.n	801c132 <ip_reass_free_complete_datagram+0x22>
 801c126:	4b45      	ldr	r3, [pc, #276]	@ (801c23c <ip_reass_free_complete_datagram+0x12c>)
 801c128:	22ab      	movs	r2, #171	@ 0xab
 801c12a:	4945      	ldr	r1, [pc, #276]	@ (801c240 <ip_reass_free_complete_datagram+0x130>)
 801c12c:	4845      	ldr	r0, [pc, #276]	@ (801c244 <ip_reass_free_complete_datagram+0x134>)
 801c12e:	f002 f80d 	bl	801e14c <iprintf>
  if (prev != NULL) {
 801c132:	683b      	ldr	r3, [r7, #0]
 801c134:	2b00      	cmp	r3, #0
 801c136:	d00a      	beq.n	801c14e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801c138:	683b      	ldr	r3, [r7, #0]
 801c13a:	681b      	ldr	r3, [r3, #0]
 801c13c:	687a      	ldr	r2, [r7, #4]
 801c13e:	429a      	cmp	r2, r3
 801c140:	d005      	beq.n	801c14e <ip_reass_free_complete_datagram+0x3e>
 801c142:	4b3e      	ldr	r3, [pc, #248]	@ (801c23c <ip_reass_free_complete_datagram+0x12c>)
 801c144:	22ad      	movs	r2, #173	@ 0xad
 801c146:	4940      	ldr	r1, [pc, #256]	@ (801c248 <ip_reass_free_complete_datagram+0x138>)
 801c148:	483e      	ldr	r0, [pc, #248]	@ (801c244 <ip_reass_free_complete_datagram+0x134>)
 801c14a:	f001 ffff 	bl	801e14c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	685b      	ldr	r3, [r3, #4]
 801c152:	685b      	ldr	r3, [r3, #4]
 801c154:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801c156:	697b      	ldr	r3, [r7, #20]
 801c158:	889b      	ldrh	r3, [r3, #4]
 801c15a:	b29b      	uxth	r3, r3
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d12a      	bne.n	801c1b6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	685b      	ldr	r3, [r3, #4]
 801c164:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801c166:	697b      	ldr	r3, [r7, #20]
 801c168:	681a      	ldr	r2, [r3, #0]
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801c16e:	69bb      	ldr	r3, [r7, #24]
 801c170:	6858      	ldr	r0, [r3, #4]
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	3308      	adds	r3, #8
 801c176:	2214      	movs	r2, #20
 801c178:	4619      	mov	r1, r3
 801c17a:	f002 f97e 	bl	801e47a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801c17e:	2101      	movs	r1, #1
 801c180:	69b8      	ldr	r0, [r7, #24]
 801c182:	f7ff fc47 	bl	801ba14 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801c186:	69b8      	ldr	r0, [r7, #24]
 801c188:	f7f7 fcdc 	bl	8013b44 <pbuf_clen>
 801c18c:	4603      	mov	r3, r0
 801c18e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c190:	8bfa      	ldrh	r2, [r7, #30]
 801c192:	8a7b      	ldrh	r3, [r7, #18]
 801c194:	4413      	add	r3, r2
 801c196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c19a:	db05      	blt.n	801c1a8 <ip_reass_free_complete_datagram+0x98>
 801c19c:	4b27      	ldr	r3, [pc, #156]	@ (801c23c <ip_reass_free_complete_datagram+0x12c>)
 801c19e:	22bc      	movs	r2, #188	@ 0xbc
 801c1a0:	492a      	ldr	r1, [pc, #168]	@ (801c24c <ip_reass_free_complete_datagram+0x13c>)
 801c1a2:	4828      	ldr	r0, [pc, #160]	@ (801c244 <ip_reass_free_complete_datagram+0x134>)
 801c1a4:	f001 ffd2 	bl	801e14c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c1a8:	8bfa      	ldrh	r2, [r7, #30]
 801c1aa:	8a7b      	ldrh	r3, [r7, #18]
 801c1ac:	4413      	add	r3, r2
 801c1ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801c1b0:	69b8      	ldr	r0, [r7, #24]
 801c1b2:	f7f7 fc39 	bl	8013a28 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	685b      	ldr	r3, [r3, #4]
 801c1ba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801c1bc:	e01f      	b.n	801c1fe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801c1be:	69bb      	ldr	r3, [r7, #24]
 801c1c0:	685b      	ldr	r3, [r3, #4]
 801c1c2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801c1c4:	69bb      	ldr	r3, [r7, #24]
 801c1c6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801c1c8:	697b      	ldr	r3, [r7, #20]
 801c1ca:	681b      	ldr	r3, [r3, #0]
 801c1cc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801c1ce:	68f8      	ldr	r0, [r7, #12]
 801c1d0:	f7f7 fcb8 	bl	8013b44 <pbuf_clen>
 801c1d4:	4603      	mov	r3, r0
 801c1d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c1d8:	8bfa      	ldrh	r2, [r7, #30]
 801c1da:	8a7b      	ldrh	r3, [r7, #18]
 801c1dc:	4413      	add	r3, r2
 801c1de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c1e2:	db05      	blt.n	801c1f0 <ip_reass_free_complete_datagram+0xe0>
 801c1e4:	4b15      	ldr	r3, [pc, #84]	@ (801c23c <ip_reass_free_complete_datagram+0x12c>)
 801c1e6:	22cc      	movs	r2, #204	@ 0xcc
 801c1e8:	4918      	ldr	r1, [pc, #96]	@ (801c24c <ip_reass_free_complete_datagram+0x13c>)
 801c1ea:	4816      	ldr	r0, [pc, #88]	@ (801c244 <ip_reass_free_complete_datagram+0x134>)
 801c1ec:	f001 ffae 	bl	801e14c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c1f0:	8bfa      	ldrh	r2, [r7, #30]
 801c1f2:	8a7b      	ldrh	r3, [r7, #18]
 801c1f4:	4413      	add	r3, r2
 801c1f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801c1f8:	68f8      	ldr	r0, [r7, #12]
 801c1fa:	f7f7 fc15 	bl	8013a28 <pbuf_free>
  while (p != NULL) {
 801c1fe:	69bb      	ldr	r3, [r7, #24]
 801c200:	2b00      	cmp	r3, #0
 801c202:	d1dc      	bne.n	801c1be <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801c204:	6839      	ldr	r1, [r7, #0]
 801c206:	6878      	ldr	r0, [r7, #4]
 801c208:	f000 f8c2 	bl	801c390 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801c20c:	4b10      	ldr	r3, [pc, #64]	@ (801c250 <ip_reass_free_complete_datagram+0x140>)
 801c20e:	881b      	ldrh	r3, [r3, #0]
 801c210:	8bfa      	ldrh	r2, [r7, #30]
 801c212:	429a      	cmp	r2, r3
 801c214:	d905      	bls.n	801c222 <ip_reass_free_complete_datagram+0x112>
 801c216:	4b09      	ldr	r3, [pc, #36]	@ (801c23c <ip_reass_free_complete_datagram+0x12c>)
 801c218:	22d2      	movs	r2, #210	@ 0xd2
 801c21a:	490e      	ldr	r1, [pc, #56]	@ (801c254 <ip_reass_free_complete_datagram+0x144>)
 801c21c:	4809      	ldr	r0, [pc, #36]	@ (801c244 <ip_reass_free_complete_datagram+0x134>)
 801c21e:	f001 ff95 	bl	801e14c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801c222:	4b0b      	ldr	r3, [pc, #44]	@ (801c250 <ip_reass_free_complete_datagram+0x140>)
 801c224:	881a      	ldrh	r2, [r3, #0]
 801c226:	8bfb      	ldrh	r3, [r7, #30]
 801c228:	1ad3      	subs	r3, r2, r3
 801c22a:	b29a      	uxth	r2, r3
 801c22c:	4b08      	ldr	r3, [pc, #32]	@ (801c250 <ip_reass_free_complete_datagram+0x140>)
 801c22e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801c230:	8bfb      	ldrh	r3, [r7, #30]
}
 801c232:	4618      	mov	r0, r3
 801c234:	3720      	adds	r7, #32
 801c236:	46bd      	mov	sp, r7
 801c238:	bd80      	pop	{r7, pc}
 801c23a:	bf00      	nop
 801c23c:	08022734 	.word	0x08022734
 801c240:	08022770 	.word	0x08022770
 801c244:	0802277c 	.word	0x0802277c
 801c248:	080227a4 	.word	0x080227a4
 801c24c:	080227b8 	.word	0x080227b8
 801c250:	2000e648 	.word	0x2000e648
 801c254:	080227d8 	.word	0x080227d8

0801c258 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801c258:	b580      	push	{r7, lr}
 801c25a:	b08a      	sub	sp, #40	@ 0x28
 801c25c:	af00      	add	r7, sp, #0
 801c25e:	6078      	str	r0, [r7, #4]
 801c260:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801c262:	2300      	movs	r3, #0
 801c264:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801c266:	2300      	movs	r3, #0
 801c268:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801c26a:	2300      	movs	r3, #0
 801c26c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801c26e:	2300      	movs	r3, #0
 801c270:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801c272:	2300      	movs	r3, #0
 801c274:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801c276:	4b28      	ldr	r3, [pc, #160]	@ (801c318 <ip_reass_remove_oldest_datagram+0xc0>)
 801c278:	681b      	ldr	r3, [r3, #0]
 801c27a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c27c:	e030      	b.n	801c2e0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801c27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c280:	695a      	ldr	r2, [r3, #20]
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	68db      	ldr	r3, [r3, #12]
 801c286:	429a      	cmp	r2, r3
 801c288:	d10c      	bne.n	801c2a4 <ip_reass_remove_oldest_datagram+0x4c>
 801c28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c28c:	699a      	ldr	r2, [r3, #24]
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	691b      	ldr	r3, [r3, #16]
 801c292:	429a      	cmp	r2, r3
 801c294:	d106      	bne.n	801c2a4 <ip_reass_remove_oldest_datagram+0x4c>
 801c296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c298:	899a      	ldrh	r2, [r3, #12]
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	889b      	ldrh	r3, [r3, #4]
 801c29e:	b29b      	uxth	r3, r3
 801c2a0:	429a      	cmp	r2, r3
 801c2a2:	d014      	beq.n	801c2ce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801c2a4:	693b      	ldr	r3, [r7, #16]
 801c2a6:	3301      	adds	r3, #1
 801c2a8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801c2aa:	6a3b      	ldr	r3, [r7, #32]
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	d104      	bne.n	801c2ba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801c2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2b2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c2b4:	69fb      	ldr	r3, [r7, #28]
 801c2b6:	61bb      	str	r3, [r7, #24]
 801c2b8:	e009      	b.n	801c2ce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801c2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2bc:	7fda      	ldrb	r2, [r3, #31]
 801c2be:	6a3b      	ldr	r3, [r7, #32]
 801c2c0:	7fdb      	ldrb	r3, [r3, #31]
 801c2c2:	429a      	cmp	r2, r3
 801c2c4:	d803      	bhi.n	801c2ce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801c2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2c8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c2ca:	69fb      	ldr	r3, [r7, #28]
 801c2cc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801c2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2d0:	681b      	ldr	r3, [r3, #0]
 801c2d2:	2b00      	cmp	r3, #0
 801c2d4:	d001      	beq.n	801c2da <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801c2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2d8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801c2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d1cb      	bne.n	801c27e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801c2e6:	6a3b      	ldr	r3, [r7, #32]
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d008      	beq.n	801c2fe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801c2ec:	69b9      	ldr	r1, [r7, #24]
 801c2ee:	6a38      	ldr	r0, [r7, #32]
 801c2f0:	f7ff ff0e 	bl	801c110 <ip_reass_free_complete_datagram>
 801c2f4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801c2f6:	697a      	ldr	r2, [r7, #20]
 801c2f8:	68fb      	ldr	r3, [r7, #12]
 801c2fa:	4413      	add	r3, r2
 801c2fc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801c2fe:	697a      	ldr	r2, [r7, #20]
 801c300:	683b      	ldr	r3, [r7, #0]
 801c302:	429a      	cmp	r2, r3
 801c304:	da02      	bge.n	801c30c <ip_reass_remove_oldest_datagram+0xb4>
 801c306:	693b      	ldr	r3, [r7, #16]
 801c308:	2b01      	cmp	r3, #1
 801c30a:	dcac      	bgt.n	801c266 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801c30c:	697b      	ldr	r3, [r7, #20]
}
 801c30e:	4618      	mov	r0, r3
 801c310:	3728      	adds	r7, #40	@ 0x28
 801c312:	46bd      	mov	sp, r7
 801c314:	bd80      	pop	{r7, pc}
 801c316:	bf00      	nop
 801c318:	2000e644 	.word	0x2000e644

0801c31c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801c31c:	b580      	push	{r7, lr}
 801c31e:	b084      	sub	sp, #16
 801c320:	af00      	add	r7, sp, #0
 801c322:	6078      	str	r0, [r7, #4]
 801c324:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c326:	2004      	movs	r0, #4
 801c328:	f7f6 fc64 	bl	8012bf4 <memp_malloc>
 801c32c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801c32e:	68fb      	ldr	r3, [r7, #12]
 801c330:	2b00      	cmp	r3, #0
 801c332:	d110      	bne.n	801c356 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801c334:	6839      	ldr	r1, [r7, #0]
 801c336:	6878      	ldr	r0, [r7, #4]
 801c338:	f7ff ff8e 	bl	801c258 <ip_reass_remove_oldest_datagram>
 801c33c:	4602      	mov	r2, r0
 801c33e:	683b      	ldr	r3, [r7, #0]
 801c340:	4293      	cmp	r3, r2
 801c342:	dc03      	bgt.n	801c34c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c344:	2004      	movs	r0, #4
 801c346:	f7f6 fc55 	bl	8012bf4 <memp_malloc>
 801c34a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801c34c:	68fb      	ldr	r3, [r7, #12]
 801c34e:	2b00      	cmp	r3, #0
 801c350:	d101      	bne.n	801c356 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801c352:	2300      	movs	r3, #0
 801c354:	e016      	b.n	801c384 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801c356:	2220      	movs	r2, #32
 801c358:	2100      	movs	r1, #0
 801c35a:	68f8      	ldr	r0, [r7, #12]
 801c35c:	f001 ff97 	bl	801e28e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801c360:	68fb      	ldr	r3, [r7, #12]
 801c362:	220f      	movs	r2, #15
 801c364:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801c366:	4b09      	ldr	r3, [pc, #36]	@ (801c38c <ip_reass_enqueue_new_datagram+0x70>)
 801c368:	681a      	ldr	r2, [r3, #0]
 801c36a:	68fb      	ldr	r3, [r7, #12]
 801c36c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801c36e:	4a07      	ldr	r2, [pc, #28]	@ (801c38c <ip_reass_enqueue_new_datagram+0x70>)
 801c370:	68fb      	ldr	r3, [r7, #12]
 801c372:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c374:	68fb      	ldr	r3, [r7, #12]
 801c376:	3308      	adds	r3, #8
 801c378:	2214      	movs	r2, #20
 801c37a:	6879      	ldr	r1, [r7, #4]
 801c37c:	4618      	mov	r0, r3
 801c37e:	f002 f87c 	bl	801e47a <memcpy>
  return ipr;
 801c382:	68fb      	ldr	r3, [r7, #12]
}
 801c384:	4618      	mov	r0, r3
 801c386:	3710      	adds	r7, #16
 801c388:	46bd      	mov	sp, r7
 801c38a:	bd80      	pop	{r7, pc}
 801c38c:	2000e644 	.word	0x2000e644

0801c390 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c390:	b580      	push	{r7, lr}
 801c392:	b082      	sub	sp, #8
 801c394:	af00      	add	r7, sp, #0
 801c396:	6078      	str	r0, [r7, #4]
 801c398:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801c39a:	4b10      	ldr	r3, [pc, #64]	@ (801c3dc <ip_reass_dequeue_datagram+0x4c>)
 801c39c:	681b      	ldr	r3, [r3, #0]
 801c39e:	687a      	ldr	r2, [r7, #4]
 801c3a0:	429a      	cmp	r2, r3
 801c3a2:	d104      	bne.n	801c3ae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801c3a4:	687b      	ldr	r3, [r7, #4]
 801c3a6:	681b      	ldr	r3, [r3, #0]
 801c3a8:	4a0c      	ldr	r2, [pc, #48]	@ (801c3dc <ip_reass_dequeue_datagram+0x4c>)
 801c3aa:	6013      	str	r3, [r2, #0]
 801c3ac:	e00d      	b.n	801c3ca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801c3ae:	683b      	ldr	r3, [r7, #0]
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d106      	bne.n	801c3c2 <ip_reass_dequeue_datagram+0x32>
 801c3b4:	4b0a      	ldr	r3, [pc, #40]	@ (801c3e0 <ip_reass_dequeue_datagram+0x50>)
 801c3b6:	f240 1245 	movw	r2, #325	@ 0x145
 801c3ba:	490a      	ldr	r1, [pc, #40]	@ (801c3e4 <ip_reass_dequeue_datagram+0x54>)
 801c3bc:	480a      	ldr	r0, [pc, #40]	@ (801c3e8 <ip_reass_dequeue_datagram+0x58>)
 801c3be:	f001 fec5 	bl	801e14c <iprintf>
    prev->next = ipr->next;
 801c3c2:	687b      	ldr	r3, [r7, #4]
 801c3c4:	681a      	ldr	r2, [r3, #0]
 801c3c6:	683b      	ldr	r3, [r7, #0]
 801c3c8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801c3ca:	6879      	ldr	r1, [r7, #4]
 801c3cc:	2004      	movs	r0, #4
 801c3ce:	f7f6 fc87 	bl	8012ce0 <memp_free>
}
 801c3d2:	bf00      	nop
 801c3d4:	3708      	adds	r7, #8
 801c3d6:	46bd      	mov	sp, r7
 801c3d8:	bd80      	pop	{r7, pc}
 801c3da:	bf00      	nop
 801c3dc:	2000e644 	.word	0x2000e644
 801c3e0:	08022734 	.word	0x08022734
 801c3e4:	080227fc 	.word	0x080227fc
 801c3e8:	0802277c 	.word	0x0802277c

0801c3ec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801c3ec:	b580      	push	{r7, lr}
 801c3ee:	b08c      	sub	sp, #48	@ 0x30
 801c3f0:	af00      	add	r7, sp, #0
 801c3f2:	60f8      	str	r0, [r7, #12]
 801c3f4:	60b9      	str	r1, [r7, #8]
 801c3f6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801c3f8:	2300      	movs	r3, #0
 801c3fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801c3fc:	2301      	movs	r3, #1
 801c3fe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801c400:	68bb      	ldr	r3, [r7, #8]
 801c402:	685b      	ldr	r3, [r3, #4]
 801c404:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c406:	69fb      	ldr	r3, [r7, #28]
 801c408:	885b      	ldrh	r3, [r3, #2]
 801c40a:	b29b      	uxth	r3, r3
 801c40c:	4618      	mov	r0, r3
 801c40e:	f7f5 ff1d 	bl	801224c <lwip_htons>
 801c412:	4603      	mov	r3, r0
 801c414:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801c416:	69fb      	ldr	r3, [r7, #28]
 801c418:	781b      	ldrb	r3, [r3, #0]
 801c41a:	f003 030f 	and.w	r3, r3, #15
 801c41e:	b2db      	uxtb	r3, r3
 801c420:	009b      	lsls	r3, r3, #2
 801c422:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801c424:	7e7b      	ldrb	r3, [r7, #25]
 801c426:	b29b      	uxth	r3, r3
 801c428:	8b7a      	ldrh	r2, [r7, #26]
 801c42a:	429a      	cmp	r2, r3
 801c42c:	d202      	bcs.n	801c434 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c42e:	f04f 33ff 	mov.w	r3, #4294967295
 801c432:	e135      	b.n	801c6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801c434:	7e7b      	ldrb	r3, [r7, #25]
 801c436:	b29b      	uxth	r3, r3
 801c438:	8b7a      	ldrh	r2, [r7, #26]
 801c43a:	1ad3      	subs	r3, r2, r3
 801c43c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801c43e:	69fb      	ldr	r3, [r7, #28]
 801c440:	88db      	ldrh	r3, [r3, #6]
 801c442:	b29b      	uxth	r3, r3
 801c444:	4618      	mov	r0, r3
 801c446:	f7f5 ff01 	bl	801224c <lwip_htons>
 801c44a:	4603      	mov	r3, r0
 801c44c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c450:	b29b      	uxth	r3, r3
 801c452:	00db      	lsls	r3, r3, #3
 801c454:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801c456:	68bb      	ldr	r3, [r7, #8]
 801c458:	685b      	ldr	r3, [r3, #4]
 801c45a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801c45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c45e:	2200      	movs	r2, #0
 801c460:	701a      	strb	r2, [r3, #0]
 801c462:	2200      	movs	r2, #0
 801c464:	705a      	strb	r2, [r3, #1]
 801c466:	2200      	movs	r2, #0
 801c468:	709a      	strb	r2, [r3, #2]
 801c46a:	2200      	movs	r2, #0
 801c46c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801c46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c470:	8afa      	ldrh	r2, [r7, #22]
 801c472:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801c474:	8afa      	ldrh	r2, [r7, #22]
 801c476:	8b7b      	ldrh	r3, [r7, #26]
 801c478:	4413      	add	r3, r2
 801c47a:	b29a      	uxth	r2, r3
 801c47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c47e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801c480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c482:	88db      	ldrh	r3, [r3, #6]
 801c484:	b29b      	uxth	r3, r3
 801c486:	8afa      	ldrh	r2, [r7, #22]
 801c488:	429a      	cmp	r2, r3
 801c48a:	d902      	bls.n	801c492 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c48c:	f04f 33ff 	mov.w	r3, #4294967295
 801c490:	e106      	b.n	801c6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	685b      	ldr	r3, [r3, #4]
 801c496:	627b      	str	r3, [r7, #36]	@ 0x24
 801c498:	e068      	b.n	801c56c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801c49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c49c:	685b      	ldr	r3, [r3, #4]
 801c49e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801c4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4a2:	889b      	ldrh	r3, [r3, #4]
 801c4a4:	b29a      	uxth	r2, r3
 801c4a6:	693b      	ldr	r3, [r7, #16]
 801c4a8:	889b      	ldrh	r3, [r3, #4]
 801c4aa:	b29b      	uxth	r3, r3
 801c4ac:	429a      	cmp	r2, r3
 801c4ae:	d235      	bcs.n	801c51c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801c4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c4b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801c4b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	d020      	beq.n	801c4fe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801c4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4be:	889b      	ldrh	r3, [r3, #4]
 801c4c0:	b29a      	uxth	r2, r3
 801c4c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4c4:	88db      	ldrh	r3, [r3, #6]
 801c4c6:	b29b      	uxth	r3, r3
 801c4c8:	429a      	cmp	r2, r3
 801c4ca:	d307      	bcc.n	801c4dc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801c4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4ce:	88db      	ldrh	r3, [r3, #6]
 801c4d0:	b29a      	uxth	r2, r3
 801c4d2:	693b      	ldr	r3, [r7, #16]
 801c4d4:	889b      	ldrh	r3, [r3, #4]
 801c4d6:	b29b      	uxth	r3, r3
 801c4d8:	429a      	cmp	r2, r3
 801c4da:	d902      	bls.n	801c4e2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c4dc:	f04f 33ff 	mov.w	r3, #4294967295
 801c4e0:	e0de      	b.n	801c6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801c4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4e4:	68ba      	ldr	r2, [r7, #8]
 801c4e6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801c4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4ea:	88db      	ldrh	r3, [r3, #6]
 801c4ec:	b29a      	uxth	r2, r3
 801c4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4f0:	889b      	ldrh	r3, [r3, #4]
 801c4f2:	b29b      	uxth	r3, r3
 801c4f4:	429a      	cmp	r2, r3
 801c4f6:	d03d      	beq.n	801c574 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c4f8:	2300      	movs	r3, #0
 801c4fa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801c4fc:	e03a      	b.n	801c574 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801c4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c500:	88db      	ldrh	r3, [r3, #6]
 801c502:	b29a      	uxth	r2, r3
 801c504:	693b      	ldr	r3, [r7, #16]
 801c506:	889b      	ldrh	r3, [r3, #4]
 801c508:	b29b      	uxth	r3, r3
 801c50a:	429a      	cmp	r2, r3
 801c50c:	d902      	bls.n	801c514 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c50e:	f04f 33ff 	mov.w	r3, #4294967295
 801c512:	e0c5      	b.n	801c6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801c514:	68fb      	ldr	r3, [r7, #12]
 801c516:	68ba      	ldr	r2, [r7, #8]
 801c518:	605a      	str	r2, [r3, #4]
      break;
 801c51a:	e02b      	b.n	801c574 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801c51c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c51e:	889b      	ldrh	r3, [r3, #4]
 801c520:	b29a      	uxth	r2, r3
 801c522:	693b      	ldr	r3, [r7, #16]
 801c524:	889b      	ldrh	r3, [r3, #4]
 801c526:	b29b      	uxth	r3, r3
 801c528:	429a      	cmp	r2, r3
 801c52a:	d102      	bne.n	801c532 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c52c:	f04f 33ff 	mov.w	r3, #4294967295
 801c530:	e0b6      	b.n	801c6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801c532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c534:	889b      	ldrh	r3, [r3, #4]
 801c536:	b29a      	uxth	r2, r3
 801c538:	693b      	ldr	r3, [r7, #16]
 801c53a:	88db      	ldrh	r3, [r3, #6]
 801c53c:	b29b      	uxth	r3, r3
 801c53e:	429a      	cmp	r2, r3
 801c540:	d202      	bcs.n	801c548 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c542:	f04f 33ff 	mov.w	r3, #4294967295
 801c546:	e0ab      	b.n	801c6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801c548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c54a:	2b00      	cmp	r3, #0
 801c54c:	d009      	beq.n	801c562 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801c54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c550:	88db      	ldrh	r3, [r3, #6]
 801c552:	b29a      	uxth	r2, r3
 801c554:	693b      	ldr	r3, [r7, #16]
 801c556:	889b      	ldrh	r3, [r3, #4]
 801c558:	b29b      	uxth	r3, r3
 801c55a:	429a      	cmp	r2, r3
 801c55c:	d001      	beq.n	801c562 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c55e:	2300      	movs	r3, #0
 801c560:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801c562:	693b      	ldr	r3, [r7, #16]
 801c564:	681b      	ldr	r3, [r3, #0]
 801c566:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801c568:	693b      	ldr	r3, [r7, #16]
 801c56a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801c56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d193      	bne.n	801c49a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801c572:	e000      	b.n	801c576 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801c574:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801c576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d12d      	bne.n	801c5d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801c57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c57e:	2b00      	cmp	r3, #0
 801c580:	d01c      	beq.n	801c5bc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801c582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c584:	88db      	ldrh	r3, [r3, #6]
 801c586:	b29a      	uxth	r2, r3
 801c588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c58a:	889b      	ldrh	r3, [r3, #4]
 801c58c:	b29b      	uxth	r3, r3
 801c58e:	429a      	cmp	r2, r3
 801c590:	d906      	bls.n	801c5a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801c592:	4b45      	ldr	r3, [pc, #276]	@ (801c6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c594:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801c598:	4944      	ldr	r1, [pc, #272]	@ (801c6ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801c59a:	4845      	ldr	r0, [pc, #276]	@ (801c6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c59c:	f001 fdd6 	bl	801e14c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801c5a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c5a2:	68ba      	ldr	r2, [r7, #8]
 801c5a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801c5a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c5a8:	88db      	ldrh	r3, [r3, #6]
 801c5aa:	b29a      	uxth	r2, r3
 801c5ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5ae:	889b      	ldrh	r3, [r3, #4]
 801c5b0:	b29b      	uxth	r3, r3
 801c5b2:	429a      	cmp	r2, r3
 801c5b4:	d010      	beq.n	801c5d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801c5b6:	2300      	movs	r3, #0
 801c5b8:	623b      	str	r3, [r7, #32]
 801c5ba:	e00d      	b.n	801c5d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801c5bc:	68fb      	ldr	r3, [r7, #12]
 801c5be:	685b      	ldr	r3, [r3, #4]
 801c5c0:	2b00      	cmp	r3, #0
 801c5c2:	d006      	beq.n	801c5d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801c5c4:	4b38      	ldr	r3, [pc, #224]	@ (801c6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c5c6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801c5ca:	493a      	ldr	r1, [pc, #232]	@ (801c6b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801c5cc:	4838      	ldr	r0, [pc, #224]	@ (801c6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c5ce:	f001 fdbd 	bl	801e14c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	68ba      	ldr	r2, [r7, #8]
 801c5d6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	2b00      	cmp	r3, #0
 801c5dc:	d105      	bne.n	801c5ea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801c5de:	68fb      	ldr	r3, [r7, #12]
 801c5e0:	7f9b      	ldrb	r3, [r3, #30]
 801c5e2:	f003 0301 	and.w	r3, r3, #1
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	d059      	beq.n	801c69e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801c5ea:	6a3b      	ldr	r3, [r7, #32]
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	d04f      	beq.n	801c690 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801c5f0:	68fb      	ldr	r3, [r7, #12]
 801c5f2:	685b      	ldr	r3, [r3, #4]
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	d006      	beq.n	801c606 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801c5f8:	68fb      	ldr	r3, [r7, #12]
 801c5fa:	685b      	ldr	r3, [r3, #4]
 801c5fc:	685b      	ldr	r3, [r3, #4]
 801c5fe:	889b      	ldrh	r3, [r3, #4]
 801c600:	b29b      	uxth	r3, r3
 801c602:	2b00      	cmp	r3, #0
 801c604:	d002      	beq.n	801c60c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801c606:	2300      	movs	r3, #0
 801c608:	623b      	str	r3, [r7, #32]
 801c60a:	e041      	b.n	801c690 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801c60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c60e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801c610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c616:	e012      	b.n	801c63e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801c618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c61a:	685b      	ldr	r3, [r3, #4]
 801c61c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801c61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c620:	88db      	ldrh	r3, [r3, #6]
 801c622:	b29a      	uxth	r2, r3
 801c624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c626:	889b      	ldrh	r3, [r3, #4]
 801c628:	b29b      	uxth	r3, r3
 801c62a:	429a      	cmp	r2, r3
 801c62c:	d002      	beq.n	801c634 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801c62e:	2300      	movs	r3, #0
 801c630:	623b      	str	r3, [r7, #32]
            break;
 801c632:	e007      	b.n	801c644 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801c634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c636:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801c638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c63a:	681b      	ldr	r3, [r3, #0]
 801c63c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c640:	2b00      	cmp	r3, #0
 801c642:	d1e9      	bne.n	801c618 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801c644:	6a3b      	ldr	r3, [r7, #32]
 801c646:	2b00      	cmp	r3, #0
 801c648:	d022      	beq.n	801c690 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801c64a:	68fb      	ldr	r3, [r7, #12]
 801c64c:	685b      	ldr	r3, [r3, #4]
 801c64e:	2b00      	cmp	r3, #0
 801c650:	d106      	bne.n	801c660 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801c652:	4b15      	ldr	r3, [pc, #84]	@ (801c6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c654:	f240 12df 	movw	r2, #479	@ 0x1df
 801c658:	4917      	ldr	r1, [pc, #92]	@ (801c6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c65a:	4815      	ldr	r0, [pc, #84]	@ (801c6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c65c:	f001 fd76 	bl	801e14c <iprintf>
          LWIP_ASSERT("sanity check",
 801c660:	68fb      	ldr	r3, [r7, #12]
 801c662:	685b      	ldr	r3, [r3, #4]
 801c664:	685b      	ldr	r3, [r3, #4]
 801c666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c668:	429a      	cmp	r2, r3
 801c66a:	d106      	bne.n	801c67a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801c66c:	4b0e      	ldr	r3, [pc, #56]	@ (801c6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c66e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801c672:	4911      	ldr	r1, [pc, #68]	@ (801c6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c674:	480e      	ldr	r0, [pc, #56]	@ (801c6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c676:	f001 fd69 	bl	801e14c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801c67a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c67c:	681b      	ldr	r3, [r3, #0]
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d006      	beq.n	801c690 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801c682:	4b09      	ldr	r3, [pc, #36]	@ (801c6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c684:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801c688:	490c      	ldr	r1, [pc, #48]	@ (801c6bc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801c68a:	4809      	ldr	r0, [pc, #36]	@ (801c6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c68c:	f001 fd5e 	bl	801e14c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801c690:	6a3b      	ldr	r3, [r7, #32]
 801c692:	2b00      	cmp	r3, #0
 801c694:	bf14      	ite	ne
 801c696:	2301      	movne	r3, #1
 801c698:	2300      	moveq	r3, #0
 801c69a:	b2db      	uxtb	r3, r3
 801c69c:	e000      	b.n	801c6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801c69e:	2300      	movs	r3, #0
}
 801c6a0:	4618      	mov	r0, r3
 801c6a2:	3730      	adds	r7, #48	@ 0x30
 801c6a4:	46bd      	mov	sp, r7
 801c6a6:	bd80      	pop	{r7, pc}
 801c6a8:	08022734 	.word	0x08022734
 801c6ac:	08022818 	.word	0x08022818
 801c6b0:	0802277c 	.word	0x0802277c
 801c6b4:	08022838 	.word	0x08022838
 801c6b8:	08022870 	.word	0x08022870
 801c6bc:	08022880 	.word	0x08022880

0801c6c0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801c6c0:	b580      	push	{r7, lr}
 801c6c2:	b08e      	sub	sp, #56	@ 0x38
 801c6c4:	af00      	add	r7, sp, #0
 801c6c6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	685b      	ldr	r3, [r3, #4]
 801c6cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801c6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6d0:	781b      	ldrb	r3, [r3, #0]
 801c6d2:	f003 030f 	and.w	r3, r3, #15
 801c6d6:	b2db      	uxtb	r3, r3
 801c6d8:	009b      	lsls	r3, r3, #2
 801c6da:	b2db      	uxtb	r3, r3
 801c6dc:	2b14      	cmp	r3, #20
 801c6de:	f040 8171 	bne.w	801c9c4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801c6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6e4:	88db      	ldrh	r3, [r3, #6]
 801c6e6:	b29b      	uxth	r3, r3
 801c6e8:	4618      	mov	r0, r3
 801c6ea:	f7f5 fdaf 	bl	801224c <lwip_htons>
 801c6ee:	4603      	mov	r3, r0
 801c6f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c6f4:	b29b      	uxth	r3, r3
 801c6f6:	00db      	lsls	r3, r3, #3
 801c6f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6fc:	885b      	ldrh	r3, [r3, #2]
 801c6fe:	b29b      	uxth	r3, r3
 801c700:	4618      	mov	r0, r3
 801c702:	f7f5 fda3 	bl	801224c <lwip_htons>
 801c706:	4603      	mov	r3, r0
 801c708:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801c70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c70c:	781b      	ldrb	r3, [r3, #0]
 801c70e:	f003 030f 	and.w	r3, r3, #15
 801c712:	b2db      	uxtb	r3, r3
 801c714:	009b      	lsls	r3, r3, #2
 801c716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801c71a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c71e:	b29b      	uxth	r3, r3
 801c720:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c722:	429a      	cmp	r2, r3
 801c724:	f0c0 8150 	bcc.w	801c9c8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801c728:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c72c:	b29b      	uxth	r3, r3
 801c72e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c730:	1ad3      	subs	r3, r2, r3
 801c732:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801c734:	6878      	ldr	r0, [r7, #4]
 801c736:	f7f7 fa05 	bl	8013b44 <pbuf_clen>
 801c73a:	4603      	mov	r3, r0
 801c73c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c73e:	4b8c      	ldr	r3, [pc, #560]	@ (801c970 <ip4_reass+0x2b0>)
 801c740:	881b      	ldrh	r3, [r3, #0]
 801c742:	461a      	mov	r2, r3
 801c744:	8c3b      	ldrh	r3, [r7, #32]
 801c746:	4413      	add	r3, r2
 801c748:	2b0a      	cmp	r3, #10
 801c74a:	dd10      	ble.n	801c76e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c74c:	8c3b      	ldrh	r3, [r7, #32]
 801c74e:	4619      	mov	r1, r3
 801c750:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c752:	f7ff fd81 	bl	801c258 <ip_reass_remove_oldest_datagram>
 801c756:	4603      	mov	r3, r0
 801c758:	2b00      	cmp	r3, #0
 801c75a:	f000 8137 	beq.w	801c9cc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801c75e:	4b84      	ldr	r3, [pc, #528]	@ (801c970 <ip4_reass+0x2b0>)
 801c760:	881b      	ldrh	r3, [r3, #0]
 801c762:	461a      	mov	r2, r3
 801c764:	8c3b      	ldrh	r3, [r7, #32]
 801c766:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c768:	2b0a      	cmp	r3, #10
 801c76a:	f300 812f 	bgt.w	801c9cc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c76e:	4b81      	ldr	r3, [pc, #516]	@ (801c974 <ip4_reass+0x2b4>)
 801c770:	681b      	ldr	r3, [r3, #0]
 801c772:	633b      	str	r3, [r7, #48]	@ 0x30
 801c774:	e015      	b.n	801c7a2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c778:	695a      	ldr	r2, [r3, #20]
 801c77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c77c:	68db      	ldr	r3, [r3, #12]
 801c77e:	429a      	cmp	r2, r3
 801c780:	d10c      	bne.n	801c79c <ip4_reass+0xdc>
 801c782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c784:	699a      	ldr	r2, [r3, #24]
 801c786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c788:	691b      	ldr	r3, [r3, #16]
 801c78a:	429a      	cmp	r2, r3
 801c78c:	d106      	bne.n	801c79c <ip4_reass+0xdc>
 801c78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c790:	899a      	ldrh	r2, [r3, #12]
 801c792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c794:	889b      	ldrh	r3, [r3, #4]
 801c796:	b29b      	uxth	r3, r3
 801c798:	429a      	cmp	r2, r3
 801c79a:	d006      	beq.n	801c7aa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c79c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c79e:	681b      	ldr	r3, [r3, #0]
 801c7a0:	633b      	str	r3, [r7, #48]	@ 0x30
 801c7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	d1e6      	bne.n	801c776 <ip4_reass+0xb6>
 801c7a8:	e000      	b.n	801c7ac <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801c7aa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801c7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d109      	bne.n	801c7c6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801c7b2:	8c3b      	ldrh	r3, [r7, #32]
 801c7b4:	4619      	mov	r1, r3
 801c7b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c7b8:	f7ff fdb0 	bl	801c31c <ip_reass_enqueue_new_datagram>
 801c7bc:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801c7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	d11c      	bne.n	801c7fe <ip4_reass+0x13e>
      goto nullreturn;
 801c7c4:	e105      	b.n	801c9d2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7c8:	88db      	ldrh	r3, [r3, #6]
 801c7ca:	b29b      	uxth	r3, r3
 801c7cc:	4618      	mov	r0, r3
 801c7ce:	f7f5 fd3d 	bl	801224c <lwip_htons>
 801c7d2:	4603      	mov	r3, r0
 801c7d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	d110      	bne.n	801c7fe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801c7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7de:	89db      	ldrh	r3, [r3, #14]
 801c7e0:	4618      	mov	r0, r3
 801c7e2:	f7f5 fd33 	bl	801224c <lwip_htons>
 801c7e6:	4603      	mov	r3, r0
 801c7e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d006      	beq.n	801c7fe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801c7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7f2:	3308      	adds	r3, #8
 801c7f4:	2214      	movs	r2, #20
 801c7f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c7f8:	4618      	mov	r0, r3
 801c7fa:	f001 fe3e 	bl	801e47a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801c7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c800:	88db      	ldrh	r3, [r3, #6]
 801c802:	b29b      	uxth	r3, r3
 801c804:	f003 0320 	and.w	r3, r3, #32
 801c808:	2b00      	cmp	r3, #0
 801c80a:	bf0c      	ite	eq
 801c80c:	2301      	moveq	r3, #1
 801c80e:	2300      	movne	r3, #0
 801c810:	b2db      	uxtb	r3, r3
 801c812:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801c814:	69fb      	ldr	r3, [r7, #28]
 801c816:	2b00      	cmp	r3, #0
 801c818:	d00e      	beq.n	801c838 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801c81a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c81c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c81e:	4413      	add	r3, r2
 801c820:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801c822:	8b7a      	ldrh	r2, [r7, #26]
 801c824:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c826:	429a      	cmp	r2, r3
 801c828:	f0c0 80a0 	bcc.w	801c96c <ip4_reass+0x2ac>
 801c82c:	8b7b      	ldrh	r3, [r7, #26]
 801c82e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801c832:	4293      	cmp	r3, r2
 801c834:	f200 809a 	bhi.w	801c96c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801c838:	69fa      	ldr	r2, [r7, #28]
 801c83a:	6879      	ldr	r1, [r7, #4]
 801c83c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c83e:	f7ff fdd5 	bl	801c3ec <ip_reass_chain_frag_into_datagram_and_validate>
 801c842:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801c844:	697b      	ldr	r3, [r7, #20]
 801c846:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c84a:	f000 809b 	beq.w	801c984 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c84e:	4b48      	ldr	r3, [pc, #288]	@ (801c970 <ip4_reass+0x2b0>)
 801c850:	881a      	ldrh	r2, [r3, #0]
 801c852:	8c3b      	ldrh	r3, [r7, #32]
 801c854:	4413      	add	r3, r2
 801c856:	b29a      	uxth	r2, r3
 801c858:	4b45      	ldr	r3, [pc, #276]	@ (801c970 <ip4_reass+0x2b0>)
 801c85a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801c85c:	69fb      	ldr	r3, [r7, #28]
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d00d      	beq.n	801c87e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801c862:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c864:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c866:	4413      	add	r3, r2
 801c868:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801c86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c86c:	8a7a      	ldrh	r2, [r7, #18]
 801c86e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c872:	7f9b      	ldrb	r3, [r3, #30]
 801c874:	f043 0301 	orr.w	r3, r3, #1
 801c878:	b2da      	uxtb	r2, r3
 801c87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c87c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c87e:	697b      	ldr	r3, [r7, #20]
 801c880:	2b01      	cmp	r3, #1
 801c882:	d171      	bne.n	801c968 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c886:	8b9b      	ldrh	r3, [r3, #28]
 801c888:	3314      	adds	r3, #20
 801c88a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c88e:	685b      	ldr	r3, [r3, #4]
 801c890:	685b      	ldr	r3, [r3, #4]
 801c892:	681b      	ldr	r3, [r3, #0]
 801c894:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c898:	685b      	ldr	r3, [r3, #4]
 801c89a:	685b      	ldr	r3, [r3, #4]
 801c89c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8a0:	3308      	adds	r3, #8
 801c8a2:	2214      	movs	r2, #20
 801c8a4:	4619      	mov	r1, r3
 801c8a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c8a8:	f001 fde7 	bl	801e47a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801c8ac:	8a3b      	ldrh	r3, [r7, #16]
 801c8ae:	4618      	mov	r0, r3
 801c8b0:	f7f5 fccc 	bl	801224c <lwip_htons>
 801c8b4:	4603      	mov	r3, r0
 801c8b6:	461a      	mov	r2, r3
 801c8b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c8ba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801c8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c8be:	2200      	movs	r2, #0
 801c8c0:	719a      	strb	r2, [r3, #6]
 801c8c2:	2200      	movs	r2, #0
 801c8c4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c8c8:	2200      	movs	r2, #0
 801c8ca:	729a      	strb	r2, [r3, #10]
 801c8cc:	2200      	movs	r2, #0
 801c8ce:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801c8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8d2:	685b      	ldr	r3, [r3, #4]
 801c8d4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801c8d6:	e00d      	b.n	801c8f4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801c8d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c8da:	685b      	ldr	r3, [r3, #4]
 801c8dc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801c8de:	2114      	movs	r1, #20
 801c8e0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801c8e2:	f7f7 f81b 	bl	801391c <pbuf_remove_header>
      pbuf_cat(p, r);
 801c8e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c8e8:	6878      	ldr	r0, [r7, #4]
 801c8ea:	f7f7 f96b 	bl	8013bc4 <pbuf_cat>
      r = iprh->next_pbuf;
 801c8ee:	68fb      	ldr	r3, [r7, #12]
 801c8f0:	681b      	ldr	r3, [r3, #0]
 801c8f2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801c8f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	d1ee      	bne.n	801c8d8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801c8fa:	4b1e      	ldr	r3, [pc, #120]	@ (801c974 <ip4_reass+0x2b4>)
 801c8fc:	681b      	ldr	r3, [r3, #0]
 801c8fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c900:	429a      	cmp	r2, r3
 801c902:	d102      	bne.n	801c90a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801c904:	2300      	movs	r3, #0
 801c906:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c908:	e010      	b.n	801c92c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c90a:	4b1a      	ldr	r3, [pc, #104]	@ (801c974 <ip4_reass+0x2b4>)
 801c90c:	681b      	ldr	r3, [r3, #0]
 801c90e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c910:	e007      	b.n	801c922 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801c912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c914:	681b      	ldr	r3, [r3, #0]
 801c916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c918:	429a      	cmp	r2, r3
 801c91a:	d006      	beq.n	801c92a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c91e:	681b      	ldr	r3, [r3, #0]
 801c920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c924:	2b00      	cmp	r3, #0
 801c926:	d1f4      	bne.n	801c912 <ip4_reass+0x252>
 801c928:	e000      	b.n	801c92c <ip4_reass+0x26c>
          break;
 801c92a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c92c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c92e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c930:	f7ff fd2e 	bl	801c390 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801c934:	6878      	ldr	r0, [r7, #4]
 801c936:	f7f7 f905 	bl	8013b44 <pbuf_clen>
 801c93a:	4603      	mov	r3, r0
 801c93c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801c93e:	4b0c      	ldr	r3, [pc, #48]	@ (801c970 <ip4_reass+0x2b0>)
 801c940:	881b      	ldrh	r3, [r3, #0]
 801c942:	8c3a      	ldrh	r2, [r7, #32]
 801c944:	429a      	cmp	r2, r3
 801c946:	d906      	bls.n	801c956 <ip4_reass+0x296>
 801c948:	4b0b      	ldr	r3, [pc, #44]	@ (801c978 <ip4_reass+0x2b8>)
 801c94a:	f240 229b 	movw	r2, #667	@ 0x29b
 801c94e:	490b      	ldr	r1, [pc, #44]	@ (801c97c <ip4_reass+0x2bc>)
 801c950:	480b      	ldr	r0, [pc, #44]	@ (801c980 <ip4_reass+0x2c0>)
 801c952:	f001 fbfb 	bl	801e14c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c956:	4b06      	ldr	r3, [pc, #24]	@ (801c970 <ip4_reass+0x2b0>)
 801c958:	881a      	ldrh	r2, [r3, #0]
 801c95a:	8c3b      	ldrh	r3, [r7, #32]
 801c95c:	1ad3      	subs	r3, r2, r3
 801c95e:	b29a      	uxth	r2, r3
 801c960:	4b03      	ldr	r3, [pc, #12]	@ (801c970 <ip4_reass+0x2b0>)
 801c962:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	e038      	b.n	801c9da <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c968:	2300      	movs	r3, #0
 801c96a:	e036      	b.n	801c9da <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801c96c:	bf00      	nop
 801c96e:	e00a      	b.n	801c986 <ip4_reass+0x2c6>
 801c970:	2000e648 	.word	0x2000e648
 801c974:	2000e644 	.word	0x2000e644
 801c978:	08022734 	.word	0x08022734
 801c97c:	080228a4 	.word	0x080228a4
 801c980:	0802277c 	.word	0x0802277c
    goto nullreturn_ipr;
 801c984:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c988:	2b00      	cmp	r3, #0
 801c98a:	d106      	bne.n	801c99a <ip4_reass+0x2da>
 801c98c:	4b15      	ldr	r3, [pc, #84]	@ (801c9e4 <ip4_reass+0x324>)
 801c98e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801c992:	4915      	ldr	r1, [pc, #84]	@ (801c9e8 <ip4_reass+0x328>)
 801c994:	4815      	ldr	r0, [pc, #84]	@ (801c9ec <ip4_reass+0x32c>)
 801c996:	f001 fbd9 	bl	801e14c <iprintf>
  if (ipr->p == NULL) {
 801c99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c99c:	685b      	ldr	r3, [r3, #4]
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d116      	bne.n	801c9d0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c9a2:	4b13      	ldr	r3, [pc, #76]	@ (801c9f0 <ip4_reass+0x330>)
 801c9a4:	681b      	ldr	r3, [r3, #0]
 801c9a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c9a8:	429a      	cmp	r2, r3
 801c9aa:	d006      	beq.n	801c9ba <ip4_reass+0x2fa>
 801c9ac:	4b0d      	ldr	r3, [pc, #52]	@ (801c9e4 <ip4_reass+0x324>)
 801c9ae:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801c9b2:	4910      	ldr	r1, [pc, #64]	@ (801c9f4 <ip4_reass+0x334>)
 801c9b4:	480d      	ldr	r0, [pc, #52]	@ (801c9ec <ip4_reass+0x32c>)
 801c9b6:	f001 fbc9 	bl	801e14c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c9ba:	2100      	movs	r1, #0
 801c9bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c9be:	f7ff fce7 	bl	801c390 <ip_reass_dequeue_datagram>
 801c9c2:	e006      	b.n	801c9d2 <ip4_reass+0x312>
    goto nullreturn;
 801c9c4:	bf00      	nop
 801c9c6:	e004      	b.n	801c9d2 <ip4_reass+0x312>
    goto nullreturn;
 801c9c8:	bf00      	nop
 801c9ca:	e002      	b.n	801c9d2 <ip4_reass+0x312>
      goto nullreturn;
 801c9cc:	bf00      	nop
 801c9ce:	e000      	b.n	801c9d2 <ip4_reass+0x312>
  }

nullreturn:
 801c9d0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c9d2:	6878      	ldr	r0, [r7, #4]
 801c9d4:	f7f7 f828 	bl	8013a28 <pbuf_free>
  return NULL;
 801c9d8:	2300      	movs	r3, #0
}
 801c9da:	4618      	mov	r0, r3
 801c9dc:	3738      	adds	r7, #56	@ 0x38
 801c9de:	46bd      	mov	sp, r7
 801c9e0:	bd80      	pop	{r7, pc}
 801c9e2:	bf00      	nop
 801c9e4:	08022734 	.word	0x08022734
 801c9e8:	080228c0 	.word	0x080228c0
 801c9ec:	0802277c 	.word	0x0802277c
 801c9f0:	2000e644 	.word	0x2000e644
 801c9f4:	080228cc 	.word	0x080228cc

0801c9f8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c9f8:	b580      	push	{r7, lr}
 801c9fa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c9fc:	2005      	movs	r0, #5
 801c9fe:	f7f6 f8f9 	bl	8012bf4 <memp_malloc>
 801ca02:	4603      	mov	r3, r0
}
 801ca04:	4618      	mov	r0, r3
 801ca06:	bd80      	pop	{r7, pc}

0801ca08 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801ca08:	b580      	push	{r7, lr}
 801ca0a:	b082      	sub	sp, #8
 801ca0c:	af00      	add	r7, sp, #0
 801ca0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801ca10:	687b      	ldr	r3, [r7, #4]
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	d106      	bne.n	801ca24 <ip_frag_free_pbuf_custom_ref+0x1c>
 801ca16:	4b07      	ldr	r3, [pc, #28]	@ (801ca34 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801ca18:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801ca1c:	4906      	ldr	r1, [pc, #24]	@ (801ca38 <ip_frag_free_pbuf_custom_ref+0x30>)
 801ca1e:	4807      	ldr	r0, [pc, #28]	@ (801ca3c <ip_frag_free_pbuf_custom_ref+0x34>)
 801ca20:	f001 fb94 	bl	801e14c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801ca24:	6879      	ldr	r1, [r7, #4]
 801ca26:	2005      	movs	r0, #5
 801ca28:	f7f6 f95a 	bl	8012ce0 <memp_free>
}
 801ca2c:	bf00      	nop
 801ca2e:	3708      	adds	r7, #8
 801ca30:	46bd      	mov	sp, r7
 801ca32:	bd80      	pop	{r7, pc}
 801ca34:	08022734 	.word	0x08022734
 801ca38:	080228ec 	.word	0x080228ec
 801ca3c:	0802277c 	.word	0x0802277c

0801ca40 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801ca40:	b580      	push	{r7, lr}
 801ca42:	b084      	sub	sp, #16
 801ca44:	af00      	add	r7, sp, #0
 801ca46:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801ca48:	687b      	ldr	r3, [r7, #4]
 801ca4a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801ca4c:	68fb      	ldr	r3, [r7, #12]
 801ca4e:	2b00      	cmp	r3, #0
 801ca50:	d106      	bne.n	801ca60 <ipfrag_free_pbuf_custom+0x20>
 801ca52:	4b11      	ldr	r3, [pc, #68]	@ (801ca98 <ipfrag_free_pbuf_custom+0x58>)
 801ca54:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801ca58:	4910      	ldr	r1, [pc, #64]	@ (801ca9c <ipfrag_free_pbuf_custom+0x5c>)
 801ca5a:	4811      	ldr	r0, [pc, #68]	@ (801caa0 <ipfrag_free_pbuf_custom+0x60>)
 801ca5c:	f001 fb76 	bl	801e14c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801ca60:	68fa      	ldr	r2, [r7, #12]
 801ca62:	687b      	ldr	r3, [r7, #4]
 801ca64:	429a      	cmp	r2, r3
 801ca66:	d006      	beq.n	801ca76 <ipfrag_free_pbuf_custom+0x36>
 801ca68:	4b0b      	ldr	r3, [pc, #44]	@ (801ca98 <ipfrag_free_pbuf_custom+0x58>)
 801ca6a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801ca6e:	490d      	ldr	r1, [pc, #52]	@ (801caa4 <ipfrag_free_pbuf_custom+0x64>)
 801ca70:	480b      	ldr	r0, [pc, #44]	@ (801caa0 <ipfrag_free_pbuf_custom+0x60>)
 801ca72:	f001 fb6b 	bl	801e14c <iprintf>
  if (pcr->original != NULL) {
 801ca76:	68fb      	ldr	r3, [r7, #12]
 801ca78:	695b      	ldr	r3, [r3, #20]
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d004      	beq.n	801ca88 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801ca7e:	68fb      	ldr	r3, [r7, #12]
 801ca80:	695b      	ldr	r3, [r3, #20]
 801ca82:	4618      	mov	r0, r3
 801ca84:	f7f6 ffd0 	bl	8013a28 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801ca88:	68f8      	ldr	r0, [r7, #12]
 801ca8a:	f7ff ffbd 	bl	801ca08 <ip_frag_free_pbuf_custom_ref>
}
 801ca8e:	bf00      	nop
 801ca90:	3710      	adds	r7, #16
 801ca92:	46bd      	mov	sp, r7
 801ca94:	bd80      	pop	{r7, pc}
 801ca96:	bf00      	nop
 801ca98:	08022734 	.word	0x08022734
 801ca9c:	080228f8 	.word	0x080228f8
 801caa0:	0802277c 	.word	0x0802277c
 801caa4:	08022904 	.word	0x08022904

0801caa8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801caa8:	b580      	push	{r7, lr}
 801caaa:	b094      	sub	sp, #80	@ 0x50
 801caac:	af02      	add	r7, sp, #8
 801caae:	60f8      	str	r0, [r7, #12]
 801cab0:	60b9      	str	r1, [r7, #8]
 801cab2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801cab4:	2300      	movs	r3, #0
 801cab6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801caba:	68bb      	ldr	r3, [r7, #8]
 801cabc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801cabe:	3b14      	subs	r3, #20
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	da00      	bge.n	801cac6 <ip4_frag+0x1e>
 801cac4:	3307      	adds	r3, #7
 801cac6:	10db      	asrs	r3, r3, #3
 801cac8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801caca:	2314      	movs	r3, #20
 801cacc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801cace:	68fb      	ldr	r3, [r7, #12]
 801cad0:	685b      	ldr	r3, [r3, #4]
 801cad2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801cad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cad6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801cad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cada:	781b      	ldrb	r3, [r3, #0]
 801cadc:	f003 030f 	and.w	r3, r3, #15
 801cae0:	b2db      	uxtb	r3, r3
 801cae2:	009b      	lsls	r3, r3, #2
 801cae4:	b2db      	uxtb	r3, r3
 801cae6:	2b14      	cmp	r3, #20
 801cae8:	d002      	beq.n	801caf0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801caea:	f06f 0305 	mvn.w	r3, #5
 801caee:	e110      	b.n	801cd12 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801caf0:	68fb      	ldr	r3, [r7, #12]
 801caf2:	895b      	ldrh	r3, [r3, #10]
 801caf4:	2b13      	cmp	r3, #19
 801caf6:	d809      	bhi.n	801cb0c <ip4_frag+0x64>
 801caf8:	4b88      	ldr	r3, [pc, #544]	@ (801cd1c <ip4_frag+0x274>)
 801cafa:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801cafe:	4988      	ldr	r1, [pc, #544]	@ (801cd20 <ip4_frag+0x278>)
 801cb00:	4888      	ldr	r0, [pc, #544]	@ (801cd24 <ip4_frag+0x27c>)
 801cb02:	f001 fb23 	bl	801e14c <iprintf>
 801cb06:	f06f 0305 	mvn.w	r3, #5
 801cb0a:	e102      	b.n	801cd12 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801cb0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb0e:	88db      	ldrh	r3, [r3, #6]
 801cb10:	b29b      	uxth	r3, r3
 801cb12:	4618      	mov	r0, r3
 801cb14:	f7f5 fb9a 	bl	801224c <lwip_htons>
 801cb18:	4603      	mov	r3, r0
 801cb1a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801cb1c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cb1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cb22:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801cb26:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cb28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801cb2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	891b      	ldrh	r3, [r3, #8]
 801cb32:	3b14      	subs	r3, #20
 801cb34:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801cb38:	e0e1      	b.n	801ccfe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801cb3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801cb3c:	00db      	lsls	r3, r3, #3
 801cb3e:	b29b      	uxth	r3, r3
 801cb40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801cb44:	4293      	cmp	r3, r2
 801cb46:	bf28      	it	cs
 801cb48:	4613      	movcs	r3, r2
 801cb4a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801cb4c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801cb50:	2114      	movs	r1, #20
 801cb52:	200e      	movs	r0, #14
 801cb54:	f7f6 fc84 	bl	8013460 <pbuf_alloc>
 801cb58:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801cb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	f000 80d5 	beq.w	801cd0c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801cb62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb64:	895b      	ldrh	r3, [r3, #10]
 801cb66:	2b13      	cmp	r3, #19
 801cb68:	d806      	bhi.n	801cb78 <ip4_frag+0xd0>
 801cb6a:	4b6c      	ldr	r3, [pc, #432]	@ (801cd1c <ip4_frag+0x274>)
 801cb6c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801cb70:	496d      	ldr	r1, [pc, #436]	@ (801cd28 <ip4_frag+0x280>)
 801cb72:	486c      	ldr	r0, [pc, #432]	@ (801cd24 <ip4_frag+0x27c>)
 801cb74:	f001 faea 	bl	801e14c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801cb78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb7a:	685b      	ldr	r3, [r3, #4]
 801cb7c:	2214      	movs	r2, #20
 801cb7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801cb80:	4618      	mov	r0, r3
 801cb82:	f001 fc7a 	bl	801e47a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801cb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb88:	685b      	ldr	r3, [r3, #4]
 801cb8a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801cb8c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cb8e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801cb92:	e064      	b.n	801cc5e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801cb94:	68fb      	ldr	r3, [r7, #12]
 801cb96:	895a      	ldrh	r2, [r3, #10]
 801cb98:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801cb9a:	1ad3      	subs	r3, r2, r3
 801cb9c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801cb9e:	68fb      	ldr	r3, [r7, #12]
 801cba0:	895b      	ldrh	r3, [r3, #10]
 801cba2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801cba4:	429a      	cmp	r2, r3
 801cba6:	d906      	bls.n	801cbb6 <ip4_frag+0x10e>
 801cba8:	4b5c      	ldr	r3, [pc, #368]	@ (801cd1c <ip4_frag+0x274>)
 801cbaa:	f240 322d 	movw	r2, #813	@ 0x32d
 801cbae:	495f      	ldr	r1, [pc, #380]	@ (801cd2c <ip4_frag+0x284>)
 801cbb0:	485c      	ldr	r0, [pc, #368]	@ (801cd24 <ip4_frag+0x27c>)
 801cbb2:	f001 facb 	bl	801e14c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801cbb6:	8bfa      	ldrh	r2, [r7, #30]
 801cbb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cbbc:	4293      	cmp	r3, r2
 801cbbe:	bf28      	it	cs
 801cbc0:	4613      	movcs	r3, r2
 801cbc2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801cbc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	d105      	bne.n	801cbda <ip4_frag+0x132>
        poff = 0;
 801cbce:	2300      	movs	r3, #0
 801cbd0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801cbd2:	68fb      	ldr	r3, [r7, #12]
 801cbd4:	681b      	ldr	r3, [r3, #0]
 801cbd6:	60fb      	str	r3, [r7, #12]
        continue;
 801cbd8:	e041      	b.n	801cc5e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801cbda:	f7ff ff0d 	bl	801c9f8 <ip_frag_alloc_pbuf_custom_ref>
 801cbde:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801cbe0:	69bb      	ldr	r3, [r7, #24]
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	d103      	bne.n	801cbee <ip4_frag+0x146>
        pbuf_free(rambuf);
 801cbe6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cbe8:	f7f6 ff1e 	bl	8013a28 <pbuf_free>
        goto memerr;
 801cbec:	e08f      	b.n	801cd0e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cbee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801cbf0:	68fb      	ldr	r3, [r7, #12]
 801cbf2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cbf4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801cbf6:	4413      	add	r3, r2
 801cbf8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801cbfc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801cc00:	9201      	str	r2, [sp, #4]
 801cc02:	9300      	str	r3, [sp, #0]
 801cc04:	4603      	mov	r3, r0
 801cc06:	2241      	movs	r2, #65	@ 0x41
 801cc08:	2000      	movs	r0, #0
 801cc0a:	f7f6 fd53 	bl	80136b4 <pbuf_alloced_custom>
 801cc0e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801cc10:	697b      	ldr	r3, [r7, #20]
 801cc12:	2b00      	cmp	r3, #0
 801cc14:	d106      	bne.n	801cc24 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801cc16:	69b8      	ldr	r0, [r7, #24]
 801cc18:	f7ff fef6 	bl	801ca08 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801cc1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cc1e:	f7f6 ff03 	bl	8013a28 <pbuf_free>
        goto memerr;
 801cc22:	e074      	b.n	801cd0e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801cc24:	68f8      	ldr	r0, [r7, #12]
 801cc26:	f7f6 ffa5 	bl	8013b74 <pbuf_ref>
      pcr->original = p;
 801cc2a:	69bb      	ldr	r3, [r7, #24]
 801cc2c:	68fa      	ldr	r2, [r7, #12]
 801cc2e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801cc30:	69bb      	ldr	r3, [r7, #24]
 801cc32:	4a3f      	ldr	r2, [pc, #252]	@ (801cd30 <ip4_frag+0x288>)
 801cc34:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801cc36:	6979      	ldr	r1, [r7, #20]
 801cc38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cc3a:	f7f6 ffc3 	bl	8013bc4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801cc3e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801cc42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cc46:	1ad3      	subs	r3, r2, r3
 801cc48:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801cc4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cc50:	2b00      	cmp	r3, #0
 801cc52:	d004      	beq.n	801cc5e <ip4_frag+0x1b6>
        poff = 0;
 801cc54:	2300      	movs	r3, #0
 801cc56:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801cc58:	68fb      	ldr	r3, [r7, #12]
 801cc5a:	681b      	ldr	r3, [r3, #0]
 801cc5c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801cc5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	d196      	bne.n	801cb94 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801cc66:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801cc68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cc6c:	4413      	add	r3, r2
 801cc6e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801cc70:	68bb      	ldr	r3, [r7, #8]
 801cc72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801cc74:	f1a3 0213 	sub.w	r2, r3, #19
 801cc78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801cc7c:	429a      	cmp	r2, r3
 801cc7e:	bfcc      	ite	gt
 801cc80:	2301      	movgt	r3, #1
 801cc82:	2300      	movle	r3, #0
 801cc84:	b2db      	uxtb	r3, r3
 801cc86:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801cc88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801cc8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cc90:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801cc92:	6a3b      	ldr	r3, [r7, #32]
 801cc94:	2b00      	cmp	r3, #0
 801cc96:	d002      	beq.n	801cc9e <ip4_frag+0x1f6>
 801cc98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	d003      	beq.n	801cca6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801cc9e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cca0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801cca4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801cca6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cca8:	4618      	mov	r0, r3
 801ccaa:	f7f5 facf 	bl	801224c <lwip_htons>
 801ccae:	4603      	mov	r3, r0
 801ccb0:	461a      	mov	r2, r3
 801ccb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ccb4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ccb6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ccb8:	3314      	adds	r3, #20
 801ccba:	b29b      	uxth	r3, r3
 801ccbc:	4618      	mov	r0, r3
 801ccbe:	f7f5 fac5 	bl	801224c <lwip_htons>
 801ccc2:	4603      	mov	r3, r0
 801ccc4:	461a      	mov	r2, r3
 801ccc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ccc8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801ccca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cccc:	2200      	movs	r2, #0
 801ccce:	729a      	strb	r2, [r3, #10]
 801ccd0:	2200      	movs	r2, #0
 801ccd2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801ccd4:	68bb      	ldr	r3, [r7, #8]
 801ccd6:	695b      	ldr	r3, [r3, #20]
 801ccd8:	687a      	ldr	r2, [r7, #4]
 801ccda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ccdc:	68b8      	ldr	r0, [r7, #8]
 801ccde:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801cce0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cce2:	f7f6 fea1 	bl	8013a28 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801cce6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ccea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ccec:	1ad3      	subs	r3, r2, r3
 801ccee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801ccf2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801ccf6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ccf8:	4413      	add	r3, r2
 801ccfa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801ccfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	f47f af19 	bne.w	801cb3a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801cd08:	2300      	movs	r3, #0
 801cd0a:	e002      	b.n	801cd12 <ip4_frag+0x26a>
      goto memerr;
 801cd0c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801cd0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801cd12:	4618      	mov	r0, r3
 801cd14:	3748      	adds	r7, #72	@ 0x48
 801cd16:	46bd      	mov	sp, r7
 801cd18:	bd80      	pop	{r7, pc}
 801cd1a:	bf00      	nop
 801cd1c:	08022734 	.word	0x08022734
 801cd20:	08022910 	.word	0x08022910
 801cd24:	0802277c 	.word	0x0802277c
 801cd28:	0802292c 	.word	0x0802292c
 801cd2c:	0802294c 	.word	0x0802294c
 801cd30:	0801ca41 	.word	0x0801ca41

0801cd34 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801cd34:	b580      	push	{r7, lr}
 801cd36:	b086      	sub	sp, #24
 801cd38:	af00      	add	r7, sp, #0
 801cd3a:	6078      	str	r0, [r7, #4]
 801cd3c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801cd3e:	230e      	movs	r3, #14
 801cd40:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	895b      	ldrh	r3, [r3, #10]
 801cd46:	2b0e      	cmp	r3, #14
 801cd48:	d96e      	bls.n	801ce28 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	7bdb      	ldrb	r3, [r3, #15]
 801cd4e:	2b00      	cmp	r3, #0
 801cd50:	d106      	bne.n	801cd60 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801cd52:	683b      	ldr	r3, [r7, #0]
 801cd54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801cd58:	3301      	adds	r3, #1
 801cd5a:	b2da      	uxtb	r2, r3
 801cd5c:	687b      	ldr	r3, [r7, #4]
 801cd5e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	685b      	ldr	r3, [r3, #4]
 801cd64:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801cd66:	693b      	ldr	r3, [r7, #16]
 801cd68:	7b1a      	ldrb	r2, [r3, #12]
 801cd6a:	7b5b      	ldrb	r3, [r3, #13]
 801cd6c:	021b      	lsls	r3, r3, #8
 801cd6e:	4313      	orrs	r3, r2
 801cd70:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801cd72:	693b      	ldr	r3, [r7, #16]
 801cd74:	781b      	ldrb	r3, [r3, #0]
 801cd76:	f003 0301 	and.w	r3, r3, #1
 801cd7a:	2b00      	cmp	r3, #0
 801cd7c:	d023      	beq.n	801cdc6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801cd7e:	693b      	ldr	r3, [r7, #16]
 801cd80:	781b      	ldrb	r3, [r3, #0]
 801cd82:	2b01      	cmp	r3, #1
 801cd84:	d10f      	bne.n	801cda6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801cd86:	693b      	ldr	r3, [r7, #16]
 801cd88:	785b      	ldrb	r3, [r3, #1]
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	d11b      	bne.n	801cdc6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801cd8e:	693b      	ldr	r3, [r7, #16]
 801cd90:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801cd92:	2b5e      	cmp	r3, #94	@ 0x5e
 801cd94:	d117      	bne.n	801cdc6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	7b5b      	ldrb	r3, [r3, #13]
 801cd9a:	f043 0310 	orr.w	r3, r3, #16
 801cd9e:	b2da      	uxtb	r2, r3
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	735a      	strb	r2, [r3, #13]
 801cda4:	e00f      	b.n	801cdc6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801cda6:	693b      	ldr	r3, [r7, #16]
 801cda8:	2206      	movs	r2, #6
 801cdaa:	4928      	ldr	r1, [pc, #160]	@ (801ce4c <ethernet_input+0x118>)
 801cdac:	4618      	mov	r0, r3
 801cdae:	f001 fa44 	bl	801e23a <memcmp>
 801cdb2:	4603      	mov	r3, r0
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d106      	bne.n	801cdc6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801cdb8:	687b      	ldr	r3, [r7, #4]
 801cdba:	7b5b      	ldrb	r3, [r3, #13]
 801cdbc:	f043 0308 	orr.w	r3, r3, #8
 801cdc0:	b2da      	uxtb	r2, r3
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801cdc6:	89fb      	ldrh	r3, [r7, #14]
 801cdc8:	2b08      	cmp	r3, #8
 801cdca:	d003      	beq.n	801cdd4 <ethernet_input+0xa0>
 801cdcc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801cdd0:	d014      	beq.n	801cdfc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801cdd2:	e032      	b.n	801ce3a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cdd4:	683b      	ldr	r3, [r7, #0]
 801cdd6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cdda:	f003 0308 	and.w	r3, r3, #8
 801cdde:	2b00      	cmp	r3, #0
 801cde0:	d024      	beq.n	801ce2c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801cde2:	8afb      	ldrh	r3, [r7, #22]
 801cde4:	4619      	mov	r1, r3
 801cde6:	6878      	ldr	r0, [r7, #4]
 801cde8:	f7f6 fd98 	bl	801391c <pbuf_remove_header>
 801cdec:	4603      	mov	r3, r0
 801cdee:	2b00      	cmp	r3, #0
 801cdf0:	d11e      	bne.n	801ce30 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801cdf2:	6839      	ldr	r1, [r7, #0]
 801cdf4:	6878      	ldr	r0, [r7, #4]
 801cdf6:	f7fe ff21 	bl	801bc3c <ip4_input>
      break;
 801cdfa:	e013      	b.n	801ce24 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cdfc:	683b      	ldr	r3, [r7, #0]
 801cdfe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ce02:	f003 0308 	and.w	r3, r3, #8
 801ce06:	2b00      	cmp	r3, #0
 801ce08:	d014      	beq.n	801ce34 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801ce0a:	8afb      	ldrh	r3, [r7, #22]
 801ce0c:	4619      	mov	r1, r3
 801ce0e:	6878      	ldr	r0, [r7, #4]
 801ce10:	f7f6 fd84 	bl	801391c <pbuf_remove_header>
 801ce14:	4603      	mov	r3, r0
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	d10e      	bne.n	801ce38 <ethernet_input+0x104>
        etharp_input(p, netif);
 801ce1a:	6839      	ldr	r1, [r7, #0]
 801ce1c:	6878      	ldr	r0, [r7, #4]
 801ce1e:	f7fe f8c1 	bl	801afa4 <etharp_input>
      break;
 801ce22:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801ce24:	2300      	movs	r3, #0
 801ce26:	e00c      	b.n	801ce42 <ethernet_input+0x10e>
    goto free_and_return;
 801ce28:	bf00      	nop
 801ce2a:	e006      	b.n	801ce3a <ethernet_input+0x106>
        goto free_and_return;
 801ce2c:	bf00      	nop
 801ce2e:	e004      	b.n	801ce3a <ethernet_input+0x106>
        goto free_and_return;
 801ce30:	bf00      	nop
 801ce32:	e002      	b.n	801ce3a <ethernet_input+0x106>
        goto free_and_return;
 801ce34:	bf00      	nop
 801ce36:	e000      	b.n	801ce3a <ethernet_input+0x106>
        goto free_and_return;
 801ce38:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801ce3a:	6878      	ldr	r0, [r7, #4]
 801ce3c:	f7f6 fdf4 	bl	8013a28 <pbuf_free>
  return ERR_OK;
 801ce40:	2300      	movs	r3, #0
}
 801ce42:	4618      	mov	r0, r3
 801ce44:	3718      	adds	r7, #24
 801ce46:	46bd      	mov	sp, r7
 801ce48:	bd80      	pop	{r7, pc}
 801ce4a:	bf00      	nop
 801ce4c:	0806848c 	.word	0x0806848c

0801ce50 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801ce50:	b580      	push	{r7, lr}
 801ce52:	b086      	sub	sp, #24
 801ce54:	af00      	add	r7, sp, #0
 801ce56:	60f8      	str	r0, [r7, #12]
 801ce58:	60b9      	str	r1, [r7, #8]
 801ce5a:	607a      	str	r2, [r7, #4]
 801ce5c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801ce5e:	8c3b      	ldrh	r3, [r7, #32]
 801ce60:	4618      	mov	r0, r3
 801ce62:	f7f5 f9f3 	bl	801224c <lwip_htons>
 801ce66:	4603      	mov	r3, r0
 801ce68:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ce6a:	210e      	movs	r1, #14
 801ce6c:	68b8      	ldr	r0, [r7, #8]
 801ce6e:	f7f6 fd45 	bl	80138fc <pbuf_add_header>
 801ce72:	4603      	mov	r3, r0
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	d125      	bne.n	801cec4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801ce78:	68bb      	ldr	r3, [r7, #8]
 801ce7a:	685b      	ldr	r3, [r3, #4]
 801ce7c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801ce7e:	693b      	ldr	r3, [r7, #16]
 801ce80:	8afa      	ldrh	r2, [r7, #22]
 801ce82:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ce84:	693b      	ldr	r3, [r7, #16]
 801ce86:	2206      	movs	r2, #6
 801ce88:	6839      	ldr	r1, [r7, #0]
 801ce8a:	4618      	mov	r0, r3
 801ce8c:	f001 faf5 	bl	801e47a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ce90:	693b      	ldr	r3, [r7, #16]
 801ce92:	3306      	adds	r3, #6
 801ce94:	2206      	movs	r2, #6
 801ce96:	6879      	ldr	r1, [r7, #4]
 801ce98:	4618      	mov	r0, r3
 801ce9a:	f001 faee 	bl	801e47a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ce9e:	68fb      	ldr	r3, [r7, #12]
 801cea0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801cea4:	2b06      	cmp	r3, #6
 801cea6:	d006      	beq.n	801ceb6 <ethernet_output+0x66>
 801cea8:	4b0a      	ldr	r3, [pc, #40]	@ (801ced4 <ethernet_output+0x84>)
 801ceaa:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801ceae:	490a      	ldr	r1, [pc, #40]	@ (801ced8 <ethernet_output+0x88>)
 801ceb0:	480a      	ldr	r0, [pc, #40]	@ (801cedc <ethernet_output+0x8c>)
 801ceb2:	f001 f94b 	bl	801e14c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ceb6:	68fb      	ldr	r3, [r7, #12]
 801ceb8:	699b      	ldr	r3, [r3, #24]
 801ceba:	68b9      	ldr	r1, [r7, #8]
 801cebc:	68f8      	ldr	r0, [r7, #12]
 801cebe:	4798      	blx	r3
 801cec0:	4603      	mov	r3, r0
 801cec2:	e002      	b.n	801ceca <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801cec4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801cec6:	f06f 0301 	mvn.w	r3, #1
}
 801ceca:	4618      	mov	r0, r3
 801cecc:	3718      	adds	r7, #24
 801cece:	46bd      	mov	sp, r7
 801ced0:	bd80      	pop	{r7, pc}
 801ced2:	bf00      	nop
 801ced4:	0802295c 	.word	0x0802295c
 801ced8:	08022994 	.word	0x08022994
 801cedc:	080229c8 	.word	0x080229c8

0801cee0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801cee0:	b580      	push	{r7, lr}
 801cee2:	b086      	sub	sp, #24
 801cee4:	af00      	add	r7, sp, #0
 801cee6:	6078      	str	r0, [r7, #4]
 801cee8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801ceea:	683b      	ldr	r3, [r7, #0]
 801ceec:	60bb      	str	r3, [r7, #8]
 801ceee:	2304      	movs	r3, #4
 801cef0:	60fb      	str	r3, [r7, #12]
 801cef2:	2300      	movs	r3, #0
 801cef4:	613b      	str	r3, [r7, #16]
 801cef6:	2300      	movs	r3, #0
 801cef8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801cefa:	f107 0308 	add.w	r3, r7, #8
 801cefe:	2100      	movs	r1, #0
 801cf00:	4618      	mov	r0, r3
 801cf02:	f7ef ff50 	bl	800cda6 <osMessageCreate>
 801cf06:	4602      	mov	r2, r0
 801cf08:	687b      	ldr	r3, [r7, #4]
 801cf0a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	681b      	ldr	r3, [r3, #0]
 801cf10:	2b00      	cmp	r3, #0
 801cf12:	d102      	bne.n	801cf1a <sys_mbox_new+0x3a>
    return ERR_MEM;
 801cf14:	f04f 33ff 	mov.w	r3, #4294967295
 801cf18:	e000      	b.n	801cf1c <sys_mbox_new+0x3c>

  return ERR_OK;
 801cf1a:	2300      	movs	r3, #0
}
 801cf1c:	4618      	mov	r0, r3
 801cf1e:	3718      	adds	r7, #24
 801cf20:	46bd      	mov	sp, r7
 801cf22:	bd80      	pop	{r7, pc}

0801cf24 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801cf24:	b580      	push	{r7, lr}
 801cf26:	b082      	sub	sp, #8
 801cf28:	af00      	add	r7, sp, #0
 801cf2a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	4618      	mov	r0, r3
 801cf32:	f7f0 f815 	bl	800cf60 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	4618      	mov	r0, r3
 801cf3c:	f7f0 f826 	bl	800cf8c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801cf40:	bf00      	nop
 801cf42:	3708      	adds	r7, #8
 801cf44:	46bd      	mov	sp, r7
 801cf46:	bd80      	pop	{r7, pc}

0801cf48 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801cf48:	b580      	push	{r7, lr}
 801cf4a:	b084      	sub	sp, #16
 801cf4c:	af00      	add	r7, sp, #0
 801cf4e:	6078      	str	r0, [r7, #4]
 801cf50:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	681b      	ldr	r3, [r3, #0]
 801cf56:	6839      	ldr	r1, [r7, #0]
 801cf58:	2200      	movs	r2, #0
 801cf5a:	4618      	mov	r0, r3
 801cf5c:	f7ef ff4c 	bl	800cdf8 <osMessagePut>
 801cf60:	4603      	mov	r3, r0
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	d102      	bne.n	801cf6c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801cf66:	2300      	movs	r3, #0
 801cf68:	73fb      	strb	r3, [r7, #15]
 801cf6a:	e001      	b.n	801cf70 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801cf6c:	23ff      	movs	r3, #255	@ 0xff
 801cf6e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801cf70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cf74:	4618      	mov	r0, r3
 801cf76:	3710      	adds	r7, #16
 801cf78:	46bd      	mov	sp, r7
 801cf7a:	bd80      	pop	{r7, pc}

0801cf7c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801cf7c:	b580      	push	{r7, lr}
 801cf7e:	b08c      	sub	sp, #48	@ 0x30
 801cf80:	af00      	add	r7, sp, #0
 801cf82:	61f8      	str	r0, [r7, #28]
 801cf84:	61b9      	str	r1, [r7, #24]
 801cf86:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801cf88:	f7ef fd2b 	bl	800c9e2 <osKernelSysTick>
 801cf8c:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801cf8e:	697b      	ldr	r3, [r7, #20]
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	d017      	beq.n	801cfc4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801cf94:	69fb      	ldr	r3, [r7, #28]
 801cf96:	6819      	ldr	r1, [r3, #0]
 801cf98:	f107 0320 	add.w	r3, r7, #32
 801cf9c:	697a      	ldr	r2, [r7, #20]
 801cf9e:	4618      	mov	r0, r3
 801cfa0:	f7ef ff6a 	bl	800ce78 <osMessageGet>

    if(event.status == osEventMessage)
 801cfa4:	6a3b      	ldr	r3, [r7, #32]
 801cfa6:	2b10      	cmp	r3, #16
 801cfa8:	d109      	bne.n	801cfbe <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801cfaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cfac:	461a      	mov	r2, r3
 801cfae:	69bb      	ldr	r3, [r7, #24]
 801cfb0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801cfb2:	f7ef fd16 	bl	800c9e2 <osKernelSysTick>
 801cfb6:	4602      	mov	r2, r0
 801cfb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cfba:	1ad3      	subs	r3, r2, r3
 801cfbc:	e019      	b.n	801cff2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801cfbe:	f04f 33ff 	mov.w	r3, #4294967295
 801cfc2:	e016      	b.n	801cff2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801cfc4:	69fb      	ldr	r3, [r7, #28]
 801cfc6:	6819      	ldr	r1, [r3, #0]
 801cfc8:	463b      	mov	r3, r7
 801cfca:	f04f 32ff 	mov.w	r2, #4294967295
 801cfce:	4618      	mov	r0, r3
 801cfd0:	f7ef ff52 	bl	800ce78 <osMessageGet>
 801cfd4:	f107 0320 	add.w	r3, r7, #32
 801cfd8:	463a      	mov	r2, r7
 801cfda:	ca07      	ldmia	r2, {r0, r1, r2}
 801cfdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801cfe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cfe2:	461a      	mov	r2, r3
 801cfe4:	69bb      	ldr	r3, [r7, #24]
 801cfe6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801cfe8:	f7ef fcfb 	bl	800c9e2 <osKernelSysTick>
 801cfec:	4602      	mov	r2, r0
 801cfee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cff0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801cff2:	4618      	mov	r0, r3
 801cff4:	3730      	adds	r7, #48	@ 0x30
 801cff6:	46bd      	mov	sp, r7
 801cff8:	bd80      	pop	{r7, pc}

0801cffa <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801cffa:	b580      	push	{r7, lr}
 801cffc:	b086      	sub	sp, #24
 801cffe:	af00      	add	r7, sp, #0
 801d000:	6078      	str	r0, [r7, #4]
 801d002:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801d004:	687b      	ldr	r3, [r7, #4]
 801d006:	6819      	ldr	r1, [r3, #0]
 801d008:	f107 030c 	add.w	r3, r7, #12
 801d00c:	2200      	movs	r2, #0
 801d00e:	4618      	mov	r0, r3
 801d010:	f7ef ff32 	bl	800ce78 <osMessageGet>

  if(event.status == osEventMessage)
 801d014:	68fb      	ldr	r3, [r7, #12]
 801d016:	2b10      	cmp	r3, #16
 801d018:	d105      	bne.n	801d026 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801d01a:	693b      	ldr	r3, [r7, #16]
 801d01c:	461a      	mov	r2, r3
 801d01e:	683b      	ldr	r3, [r7, #0]
 801d020:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801d022:	2300      	movs	r3, #0
 801d024:	e001      	b.n	801d02a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801d026:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801d02a:	4618      	mov	r0, r3
 801d02c:	3718      	adds	r7, #24
 801d02e:	46bd      	mov	sp, r7
 801d030:	bd80      	pop	{r7, pc}

0801d032 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801d032:	b480      	push	{r7}
 801d034:	b083      	sub	sp, #12
 801d036:	af00      	add	r7, sp, #0
 801d038:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801d03a:	687b      	ldr	r3, [r7, #4]
 801d03c:	681b      	ldr	r3, [r3, #0]
 801d03e:	2b00      	cmp	r3, #0
 801d040:	d101      	bne.n	801d046 <sys_mbox_valid+0x14>
    return 0;
 801d042:	2300      	movs	r3, #0
 801d044:	e000      	b.n	801d048 <sys_mbox_valid+0x16>
  else
    return 1;
 801d046:	2301      	movs	r3, #1
}
 801d048:	4618      	mov	r0, r3
 801d04a:	370c      	adds	r7, #12
 801d04c:	46bd      	mov	sp, r7
 801d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d052:	4770      	bx	lr

0801d054 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801d054:	b480      	push	{r7}
 801d056:	b083      	sub	sp, #12
 801d058:	af00      	add	r7, sp, #0
 801d05a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	2200      	movs	r2, #0
 801d060:	601a      	str	r2, [r3, #0]
}
 801d062:	bf00      	nop
 801d064:	370c      	adds	r7, #12
 801d066:	46bd      	mov	sp, r7
 801d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d06c:	4770      	bx	lr

0801d06e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801d06e:	b580      	push	{r7, lr}
 801d070:	b084      	sub	sp, #16
 801d072:	af00      	add	r7, sp, #0
 801d074:	6078      	str	r0, [r7, #4]
 801d076:	460b      	mov	r3, r1
 801d078:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801d07a:	2300      	movs	r3, #0
 801d07c:	60bb      	str	r3, [r7, #8]
 801d07e:	2300      	movs	r3, #0
 801d080:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801d082:	f107 0308 	add.w	r3, r7, #8
 801d086:	2101      	movs	r1, #1
 801d088:	4618      	mov	r0, r3
 801d08a:	f7ef fdc3 	bl	800cc14 <osSemaphoreCreate>
 801d08e:	4602      	mov	r2, r0
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801d094:	687b      	ldr	r3, [r7, #4]
 801d096:	681b      	ldr	r3, [r3, #0]
 801d098:	2b00      	cmp	r3, #0
 801d09a:	d102      	bne.n	801d0a2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801d09c:	f04f 33ff 	mov.w	r3, #4294967295
 801d0a0:	e009      	b.n	801d0b6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801d0a2:	78fb      	ldrb	r3, [r7, #3]
 801d0a4:	2b00      	cmp	r3, #0
 801d0a6:	d105      	bne.n	801d0b4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	681b      	ldr	r3, [r3, #0]
 801d0ac:	2100      	movs	r1, #0
 801d0ae:	4618      	mov	r0, r3
 801d0b0:	f7ef fde2 	bl	800cc78 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801d0b4:	2300      	movs	r3, #0
}
 801d0b6:	4618      	mov	r0, r3
 801d0b8:	3710      	adds	r7, #16
 801d0ba:	46bd      	mov	sp, r7
 801d0bc:	bd80      	pop	{r7, pc}

0801d0be <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801d0be:	b580      	push	{r7, lr}
 801d0c0:	b084      	sub	sp, #16
 801d0c2:	af00      	add	r7, sp, #0
 801d0c4:	6078      	str	r0, [r7, #4]
 801d0c6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801d0c8:	f7ef fc8b 	bl	800c9e2 <osKernelSysTick>
 801d0cc:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801d0ce:	683b      	ldr	r3, [r7, #0]
 801d0d0:	2b00      	cmp	r3, #0
 801d0d2:	d011      	beq.n	801d0f8 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	681b      	ldr	r3, [r3, #0]
 801d0d8:	6839      	ldr	r1, [r7, #0]
 801d0da:	4618      	mov	r0, r3
 801d0dc:	f7ef fdcc 	bl	800cc78 <osSemaphoreWait>
 801d0e0:	4603      	mov	r3, r0
 801d0e2:	2b00      	cmp	r3, #0
 801d0e4:	d105      	bne.n	801d0f2 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801d0e6:	f7ef fc7c 	bl	800c9e2 <osKernelSysTick>
 801d0ea:	4602      	mov	r2, r0
 801d0ec:	68fb      	ldr	r3, [r7, #12]
 801d0ee:	1ad3      	subs	r3, r2, r3
 801d0f0:	e012      	b.n	801d118 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801d0f2:	f04f 33ff 	mov.w	r3, #4294967295
 801d0f6:	e00f      	b.n	801d118 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801d0f8:	bf00      	nop
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	681b      	ldr	r3, [r3, #0]
 801d0fe:	f04f 31ff 	mov.w	r1, #4294967295
 801d102:	4618      	mov	r0, r3
 801d104:	f7ef fdb8 	bl	800cc78 <osSemaphoreWait>
 801d108:	4603      	mov	r3, r0
 801d10a:	2b00      	cmp	r3, #0
 801d10c:	d1f5      	bne.n	801d0fa <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801d10e:	f7ef fc68 	bl	800c9e2 <osKernelSysTick>
 801d112:	4602      	mov	r2, r0
 801d114:	68fb      	ldr	r3, [r7, #12]
 801d116:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801d118:	4618      	mov	r0, r3
 801d11a:	3710      	adds	r7, #16
 801d11c:	46bd      	mov	sp, r7
 801d11e:	bd80      	pop	{r7, pc}

0801d120 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801d120:	b580      	push	{r7, lr}
 801d122:	b082      	sub	sp, #8
 801d124:	af00      	add	r7, sp, #0
 801d126:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801d128:	687b      	ldr	r3, [r7, #4]
 801d12a:	681b      	ldr	r3, [r3, #0]
 801d12c:	4618      	mov	r0, r3
 801d12e:	f7ef fdf1 	bl	800cd14 <osSemaphoreRelease>
}
 801d132:	bf00      	nop
 801d134:	3708      	adds	r7, #8
 801d136:	46bd      	mov	sp, r7
 801d138:	bd80      	pop	{r7, pc}

0801d13a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801d13a:	b580      	push	{r7, lr}
 801d13c:	b082      	sub	sp, #8
 801d13e:	af00      	add	r7, sp, #0
 801d140:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	681b      	ldr	r3, [r3, #0]
 801d146:	4618      	mov	r0, r3
 801d148:	f7ef fe1a 	bl	800cd80 <osSemaphoreDelete>
}
 801d14c:	bf00      	nop
 801d14e:	3708      	adds	r7, #8
 801d150:	46bd      	mov	sp, r7
 801d152:	bd80      	pop	{r7, pc}

0801d154 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801d154:	b480      	push	{r7}
 801d156:	b083      	sub	sp, #12
 801d158:	af00      	add	r7, sp, #0
 801d15a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801d15c:	687b      	ldr	r3, [r7, #4]
 801d15e:	681b      	ldr	r3, [r3, #0]
 801d160:	2b00      	cmp	r3, #0
 801d162:	d101      	bne.n	801d168 <sys_sem_valid+0x14>
    return 0;
 801d164:	2300      	movs	r3, #0
 801d166:	e000      	b.n	801d16a <sys_sem_valid+0x16>
  else
    return 1;
 801d168:	2301      	movs	r3, #1
}
 801d16a:	4618      	mov	r0, r3
 801d16c:	370c      	adds	r7, #12
 801d16e:	46bd      	mov	sp, r7
 801d170:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d174:	4770      	bx	lr

0801d176 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801d176:	b480      	push	{r7}
 801d178:	b083      	sub	sp, #12
 801d17a:	af00      	add	r7, sp, #0
 801d17c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	2200      	movs	r2, #0
 801d182:	601a      	str	r2, [r3, #0]
}
 801d184:	bf00      	nop
 801d186:	370c      	adds	r7, #12
 801d188:	46bd      	mov	sp, r7
 801d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d18e:	4770      	bx	lr

0801d190 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801d190:	b580      	push	{r7, lr}
 801d192:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801d194:	4803      	ldr	r0, [pc, #12]	@ (801d1a4 <sys_init+0x14>)
 801d196:	f7ef fca0 	bl	800cada <osMutexCreate>
 801d19a:	4603      	mov	r3, r0
 801d19c:	4a02      	ldr	r2, [pc, #8]	@ (801d1a8 <sys_init+0x18>)
 801d19e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801d1a0:	bf00      	nop
 801d1a2:	bd80      	pop	{r7, pc}
 801d1a4:	0806849c 	.word	0x0806849c
 801d1a8:	2000e64c 	.word	0x2000e64c

0801d1ac <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801d1ac:	b580      	push	{r7, lr}
 801d1ae:	b084      	sub	sp, #16
 801d1b0:	af00      	add	r7, sp, #0
 801d1b2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801d1b4:	2300      	movs	r3, #0
 801d1b6:	60bb      	str	r3, [r7, #8]
 801d1b8:	2300      	movs	r3, #0
 801d1ba:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801d1bc:	f107 0308 	add.w	r3, r7, #8
 801d1c0:	4618      	mov	r0, r3
 801d1c2:	f7ef fc8a 	bl	800cada <osMutexCreate>
 801d1c6:	4602      	mov	r2, r0
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801d1cc:	687b      	ldr	r3, [r7, #4]
 801d1ce:	681b      	ldr	r3, [r3, #0]
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	d102      	bne.n	801d1da <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801d1d4:	f04f 33ff 	mov.w	r3, #4294967295
 801d1d8:	e000      	b.n	801d1dc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801d1da:	2300      	movs	r3, #0
}
 801d1dc:	4618      	mov	r0, r3
 801d1de:	3710      	adds	r7, #16
 801d1e0:	46bd      	mov	sp, r7
 801d1e2:	bd80      	pop	{r7, pc}

0801d1e4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801d1e4:	b580      	push	{r7, lr}
 801d1e6:	b082      	sub	sp, #8
 801d1e8:	af00      	add	r7, sp, #0
 801d1ea:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801d1ec:	687b      	ldr	r3, [r7, #4]
 801d1ee:	681b      	ldr	r3, [r3, #0]
 801d1f0:	f04f 31ff 	mov.w	r1, #4294967295
 801d1f4:	4618      	mov	r0, r3
 801d1f6:	f7ef fc89 	bl	800cb0c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801d1fa:	bf00      	nop
 801d1fc:	3708      	adds	r7, #8
 801d1fe:	46bd      	mov	sp, r7
 801d200:	bd80      	pop	{r7, pc}

0801d202 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801d202:	b580      	push	{r7, lr}
 801d204:	b082      	sub	sp, #8
 801d206:	af00      	add	r7, sp, #0
 801d208:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	681b      	ldr	r3, [r3, #0]
 801d20e:	4618      	mov	r0, r3
 801d210:	f7ef fcca 	bl	800cba8 <osMutexRelease>
}
 801d214:	bf00      	nop
 801d216:	3708      	adds	r7, #8
 801d218:	46bd      	mov	sp, r7
 801d21a:	bd80      	pop	{r7, pc}

0801d21c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801d21c:	b580      	push	{r7, lr}
 801d21e:	b08c      	sub	sp, #48	@ 0x30
 801d220:	af00      	add	r7, sp, #0
 801d222:	60f8      	str	r0, [r7, #12]
 801d224:	60b9      	str	r1, [r7, #8]
 801d226:	607a      	str	r2, [r7, #4]
 801d228:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801d22a:	f107 0314 	add.w	r3, r7, #20
 801d22e:	2200      	movs	r2, #0
 801d230:	601a      	str	r2, [r3, #0]
 801d232:	605a      	str	r2, [r3, #4]
 801d234:	609a      	str	r2, [r3, #8]
 801d236:	60da      	str	r2, [r3, #12]
 801d238:	611a      	str	r2, [r3, #16]
 801d23a:	615a      	str	r2, [r3, #20]
 801d23c:	619a      	str	r2, [r3, #24]
 801d23e:	68fb      	ldr	r3, [r7, #12]
 801d240:	617b      	str	r3, [r7, #20]
 801d242:	68bb      	ldr	r3, [r7, #8]
 801d244:	61bb      	str	r3, [r7, #24]
 801d246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d248:	b21b      	sxth	r3, r3
 801d24a:	83bb      	strh	r3, [r7, #28]
 801d24c:	683b      	ldr	r3, [r7, #0]
 801d24e:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801d250:	f107 0314 	add.w	r3, r7, #20
 801d254:	6879      	ldr	r1, [r7, #4]
 801d256:	4618      	mov	r0, r3
 801d258:	f7ef fbd3 	bl	800ca02 <osThreadCreate>
 801d25c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801d25e:	4618      	mov	r0, r3
 801d260:	3730      	adds	r7, #48	@ 0x30
 801d262:	46bd      	mov	sp, r7
 801d264:	bd80      	pop	{r7, pc}
	...

0801d268 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801d268:	b580      	push	{r7, lr}
 801d26a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801d26c:	4b04      	ldr	r3, [pc, #16]	@ (801d280 <sys_arch_protect+0x18>)
 801d26e:	681b      	ldr	r3, [r3, #0]
 801d270:	f04f 31ff 	mov.w	r1, #4294967295
 801d274:	4618      	mov	r0, r3
 801d276:	f7ef fc49 	bl	800cb0c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801d27a:	2301      	movs	r3, #1
}
 801d27c:	4618      	mov	r0, r3
 801d27e:	bd80      	pop	{r7, pc}
 801d280:	2000e64c 	.word	0x2000e64c

0801d284 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801d284:	b580      	push	{r7, lr}
 801d286:	b082      	sub	sp, #8
 801d288:	af00      	add	r7, sp, #0
 801d28a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801d28c:	4b04      	ldr	r3, [pc, #16]	@ (801d2a0 <sys_arch_unprotect+0x1c>)
 801d28e:	681b      	ldr	r3, [r3, #0]
 801d290:	4618      	mov	r0, r3
 801d292:	f7ef fc89 	bl	800cba8 <osMutexRelease>
}
 801d296:	bf00      	nop
 801d298:	3708      	adds	r7, #8
 801d29a:	46bd      	mov	sp, r7
 801d29c:	bd80      	pop	{r7, pc}
 801d29e:	bf00      	nop
 801d2a0:	2000e64c 	.word	0x2000e64c

0801d2a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801d2a4:	b580      	push	{r7, lr}
 801d2a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801d2a8:	2200      	movs	r2, #0
 801d2aa:	4912      	ldr	r1, [pc, #72]	@ (801d2f4 <MX_USB_DEVICE_Init+0x50>)
 801d2ac:	4812      	ldr	r0, [pc, #72]	@ (801d2f8 <MX_USB_DEVICE_Init+0x54>)
 801d2ae:	f7ee f83b 	bl	800b328 <USBD_Init>
 801d2b2:	4603      	mov	r3, r0
 801d2b4:	2b00      	cmp	r3, #0
 801d2b6:	d001      	beq.n	801d2bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801d2b8:	f7e4 fd76 	bl	8001da8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801d2bc:	490f      	ldr	r1, [pc, #60]	@ (801d2fc <MX_USB_DEVICE_Init+0x58>)
 801d2be:	480e      	ldr	r0, [pc, #56]	@ (801d2f8 <MX_USB_DEVICE_Init+0x54>)
 801d2c0:	f7ee f862 	bl	800b388 <USBD_RegisterClass>
 801d2c4:	4603      	mov	r3, r0
 801d2c6:	2b00      	cmp	r3, #0
 801d2c8:	d001      	beq.n	801d2ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801d2ca:	f7e4 fd6d 	bl	8001da8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801d2ce:	490c      	ldr	r1, [pc, #48]	@ (801d300 <MX_USB_DEVICE_Init+0x5c>)
 801d2d0:	4809      	ldr	r0, [pc, #36]	@ (801d2f8 <MX_USB_DEVICE_Init+0x54>)
 801d2d2:	f7ed ff59 	bl	800b188 <USBD_CDC_RegisterInterface>
 801d2d6:	4603      	mov	r3, r0
 801d2d8:	2b00      	cmp	r3, #0
 801d2da:	d001      	beq.n	801d2e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801d2dc:	f7e4 fd64 	bl	8001da8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801d2e0:	4805      	ldr	r0, [pc, #20]	@ (801d2f8 <MX_USB_DEVICE_Init+0x54>)
 801d2e2:	f7ee f887 	bl	800b3f4 <USBD_Start>
 801d2e6:	4603      	mov	r3, r0
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d001      	beq.n	801d2f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801d2ec:	f7e4 fd5c 	bl	8001da8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801d2f0:	bf00      	nop
 801d2f2:	bd80      	pop	{r7, pc}
 801d2f4:	200000d8 	.word	0x200000d8
 801d2f8:	2000e650 	.word	0x2000e650
 801d2fc:	20000034 	.word	0x20000034
 801d300:	200000c4 	.word	0x200000c4

0801d304 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801d304:	b580      	push	{r7, lr}
 801d306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801d308:	2200      	movs	r2, #0
 801d30a:	4905      	ldr	r1, [pc, #20]	@ (801d320 <CDC_Init_FS+0x1c>)
 801d30c:	4805      	ldr	r0, [pc, #20]	@ (801d324 <CDC_Init_FS+0x20>)
 801d30e:	f7ed ff55 	bl	800b1bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801d312:	4905      	ldr	r1, [pc, #20]	@ (801d328 <CDC_Init_FS+0x24>)
 801d314:	4803      	ldr	r0, [pc, #12]	@ (801d324 <CDC_Init_FS+0x20>)
 801d316:	f7ed ff73 	bl	800b200 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801d31a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801d31c:	4618      	mov	r0, r3
 801d31e:	bd80      	pop	{r7, pc}
 801d320:	2000f12c 	.word	0x2000f12c
 801d324:	2000e650 	.word	0x2000e650
 801d328:	2000e92c 	.word	0x2000e92c

0801d32c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801d32c:	b480      	push	{r7}
 801d32e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801d330:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d332:	4618      	mov	r0, r3
 801d334:	46bd      	mov	sp, r7
 801d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d33a:	4770      	bx	lr

0801d33c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801d33c:	b480      	push	{r7}
 801d33e:	b083      	sub	sp, #12
 801d340:	af00      	add	r7, sp, #0
 801d342:	4603      	mov	r3, r0
 801d344:	6039      	str	r1, [r7, #0]
 801d346:	71fb      	strb	r3, [r7, #7]
 801d348:	4613      	mov	r3, r2
 801d34a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801d34c:	79fb      	ldrb	r3, [r7, #7]
 801d34e:	2b23      	cmp	r3, #35	@ 0x23
 801d350:	d84a      	bhi.n	801d3e8 <CDC_Control_FS+0xac>
 801d352:	a201      	add	r2, pc, #4	@ (adr r2, 801d358 <CDC_Control_FS+0x1c>)
 801d354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d358:	0801d3e9 	.word	0x0801d3e9
 801d35c:	0801d3e9 	.word	0x0801d3e9
 801d360:	0801d3e9 	.word	0x0801d3e9
 801d364:	0801d3e9 	.word	0x0801d3e9
 801d368:	0801d3e9 	.word	0x0801d3e9
 801d36c:	0801d3e9 	.word	0x0801d3e9
 801d370:	0801d3e9 	.word	0x0801d3e9
 801d374:	0801d3e9 	.word	0x0801d3e9
 801d378:	0801d3e9 	.word	0x0801d3e9
 801d37c:	0801d3e9 	.word	0x0801d3e9
 801d380:	0801d3e9 	.word	0x0801d3e9
 801d384:	0801d3e9 	.word	0x0801d3e9
 801d388:	0801d3e9 	.word	0x0801d3e9
 801d38c:	0801d3e9 	.word	0x0801d3e9
 801d390:	0801d3e9 	.word	0x0801d3e9
 801d394:	0801d3e9 	.word	0x0801d3e9
 801d398:	0801d3e9 	.word	0x0801d3e9
 801d39c:	0801d3e9 	.word	0x0801d3e9
 801d3a0:	0801d3e9 	.word	0x0801d3e9
 801d3a4:	0801d3e9 	.word	0x0801d3e9
 801d3a8:	0801d3e9 	.word	0x0801d3e9
 801d3ac:	0801d3e9 	.word	0x0801d3e9
 801d3b0:	0801d3e9 	.word	0x0801d3e9
 801d3b4:	0801d3e9 	.word	0x0801d3e9
 801d3b8:	0801d3e9 	.word	0x0801d3e9
 801d3bc:	0801d3e9 	.word	0x0801d3e9
 801d3c0:	0801d3e9 	.word	0x0801d3e9
 801d3c4:	0801d3e9 	.word	0x0801d3e9
 801d3c8:	0801d3e9 	.word	0x0801d3e9
 801d3cc:	0801d3e9 	.word	0x0801d3e9
 801d3d0:	0801d3e9 	.word	0x0801d3e9
 801d3d4:	0801d3e9 	.word	0x0801d3e9
 801d3d8:	0801d3e9 	.word	0x0801d3e9
 801d3dc:	0801d3e9 	.word	0x0801d3e9
 801d3e0:	0801d3e9 	.word	0x0801d3e9
 801d3e4:	0801d3e9 	.word	0x0801d3e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801d3e8:	bf00      	nop
  }

  return (USBD_OK);
 801d3ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d3ec:	4618      	mov	r0, r3
 801d3ee:	370c      	adds	r7, #12
 801d3f0:	46bd      	mov	sp, r7
 801d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3f6:	4770      	bx	lr

0801d3f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801d3f8:	b580      	push	{r7, lr}
 801d3fa:	b082      	sub	sp, #8
 801d3fc:	af00      	add	r7, sp, #0
 801d3fe:	6078      	str	r0, [r7, #4]
 801d400:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801d402:	6879      	ldr	r1, [r7, #4]
 801d404:	4805      	ldr	r0, [pc, #20]	@ (801d41c <CDC_Receive_FS+0x24>)
 801d406:	f7ed fefb 	bl	800b200 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d40a:	4804      	ldr	r0, [pc, #16]	@ (801d41c <CDC_Receive_FS+0x24>)
 801d40c:	f7ed ff56 	bl	800b2bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801d410:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801d412:	4618      	mov	r0, r3
 801d414:	3708      	adds	r7, #8
 801d416:	46bd      	mov	sp, r7
 801d418:	bd80      	pop	{r7, pc}
 801d41a:	bf00      	nop
 801d41c:	2000e650 	.word	0x2000e650

0801d420 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801d420:	b580      	push	{r7, lr}
 801d422:	b084      	sub	sp, #16
 801d424:	af00      	add	r7, sp, #0
 801d426:	6078      	str	r0, [r7, #4]
 801d428:	460b      	mov	r3, r1
 801d42a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801d42c:	2300      	movs	r3, #0
 801d42e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801d430:	4b0d      	ldr	r3, [pc, #52]	@ (801d468 <CDC_Transmit_FS+0x48>)
 801d432:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801d436:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801d438:	68bb      	ldr	r3, [r7, #8]
 801d43a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801d43e:	2b00      	cmp	r3, #0
 801d440:	d001      	beq.n	801d446 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801d442:	2301      	movs	r3, #1
 801d444:	e00b      	b.n	801d45e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801d446:	887b      	ldrh	r3, [r7, #2]
 801d448:	461a      	mov	r2, r3
 801d44a:	6879      	ldr	r1, [r7, #4]
 801d44c:	4806      	ldr	r0, [pc, #24]	@ (801d468 <CDC_Transmit_FS+0x48>)
 801d44e:	f7ed feb5 	bl	800b1bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801d452:	4805      	ldr	r0, [pc, #20]	@ (801d468 <CDC_Transmit_FS+0x48>)
 801d454:	f7ed fef2 	bl	800b23c <USBD_CDC_TransmitPacket>
 801d458:	4603      	mov	r3, r0
 801d45a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801d45c:	7bfb      	ldrb	r3, [r7, #15]
}
 801d45e:	4618      	mov	r0, r3
 801d460:	3710      	adds	r7, #16
 801d462:	46bd      	mov	sp, r7
 801d464:	bd80      	pop	{r7, pc}
 801d466:	bf00      	nop
 801d468:	2000e650 	.word	0x2000e650

0801d46c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801d46c:	b480      	push	{r7}
 801d46e:	b087      	sub	sp, #28
 801d470:	af00      	add	r7, sp, #0
 801d472:	60f8      	str	r0, [r7, #12]
 801d474:	60b9      	str	r1, [r7, #8]
 801d476:	4613      	mov	r3, r2
 801d478:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801d47a:	2300      	movs	r3, #0
 801d47c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801d47e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801d482:	4618      	mov	r0, r3
 801d484:	371c      	adds	r7, #28
 801d486:	46bd      	mov	sp, r7
 801d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d48c:	4770      	bx	lr
	...

0801d490 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d490:	b480      	push	{r7}
 801d492:	b083      	sub	sp, #12
 801d494:	af00      	add	r7, sp, #0
 801d496:	4603      	mov	r3, r0
 801d498:	6039      	str	r1, [r7, #0]
 801d49a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801d49c:	683b      	ldr	r3, [r7, #0]
 801d49e:	2212      	movs	r2, #18
 801d4a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801d4a2:	4b03      	ldr	r3, [pc, #12]	@ (801d4b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 801d4a4:	4618      	mov	r0, r3
 801d4a6:	370c      	adds	r7, #12
 801d4a8:	46bd      	mov	sp, r7
 801d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4ae:	4770      	bx	lr
 801d4b0:	200000f8 	.word	0x200000f8

0801d4b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d4b4:	b480      	push	{r7}
 801d4b6:	b083      	sub	sp, #12
 801d4b8:	af00      	add	r7, sp, #0
 801d4ba:	4603      	mov	r3, r0
 801d4bc:	6039      	str	r1, [r7, #0]
 801d4be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801d4c0:	683b      	ldr	r3, [r7, #0]
 801d4c2:	2204      	movs	r2, #4
 801d4c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801d4c6:	4b03      	ldr	r3, [pc, #12]	@ (801d4d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801d4c8:	4618      	mov	r0, r3
 801d4ca:	370c      	adds	r7, #12
 801d4cc:	46bd      	mov	sp, r7
 801d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4d2:	4770      	bx	lr
 801d4d4:	20000118 	.word	0x20000118

0801d4d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d4d8:	b580      	push	{r7, lr}
 801d4da:	b082      	sub	sp, #8
 801d4dc:	af00      	add	r7, sp, #0
 801d4de:	4603      	mov	r3, r0
 801d4e0:	6039      	str	r1, [r7, #0]
 801d4e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801d4e4:	79fb      	ldrb	r3, [r7, #7]
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	d105      	bne.n	801d4f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d4ea:	683a      	ldr	r2, [r7, #0]
 801d4ec:	4907      	ldr	r1, [pc, #28]	@ (801d50c <USBD_FS_ProductStrDescriptor+0x34>)
 801d4ee:	4808      	ldr	r0, [pc, #32]	@ (801d510 <USBD_FS_ProductStrDescriptor+0x38>)
 801d4f0:	f7ef f95a 	bl	800c7a8 <USBD_GetString>
 801d4f4:	e004      	b.n	801d500 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d4f6:	683a      	ldr	r2, [r7, #0]
 801d4f8:	4904      	ldr	r1, [pc, #16]	@ (801d50c <USBD_FS_ProductStrDescriptor+0x34>)
 801d4fa:	4805      	ldr	r0, [pc, #20]	@ (801d510 <USBD_FS_ProductStrDescriptor+0x38>)
 801d4fc:	f7ef f954 	bl	800c7a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d500:	4b02      	ldr	r3, [pc, #8]	@ (801d50c <USBD_FS_ProductStrDescriptor+0x34>)
}
 801d502:	4618      	mov	r0, r3
 801d504:	3708      	adds	r7, #8
 801d506:	46bd      	mov	sp, r7
 801d508:	bd80      	pop	{r7, pc}
 801d50a:	bf00      	nop
 801d50c:	2000f92c 	.word	0x2000f92c
 801d510:	080229f0 	.word	0x080229f0

0801d514 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d514:	b580      	push	{r7, lr}
 801d516:	b082      	sub	sp, #8
 801d518:	af00      	add	r7, sp, #0
 801d51a:	4603      	mov	r3, r0
 801d51c:	6039      	str	r1, [r7, #0]
 801d51e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801d520:	683a      	ldr	r2, [r7, #0]
 801d522:	4904      	ldr	r1, [pc, #16]	@ (801d534 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801d524:	4804      	ldr	r0, [pc, #16]	@ (801d538 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801d526:	f7ef f93f 	bl	800c7a8 <USBD_GetString>
  return USBD_StrDesc;
 801d52a:	4b02      	ldr	r3, [pc, #8]	@ (801d534 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801d52c:	4618      	mov	r0, r3
 801d52e:	3708      	adds	r7, #8
 801d530:	46bd      	mov	sp, r7
 801d532:	bd80      	pop	{r7, pc}
 801d534:	2000f92c 	.word	0x2000f92c
 801d538:	08022a08 	.word	0x08022a08

0801d53c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d53c:	b580      	push	{r7, lr}
 801d53e:	b082      	sub	sp, #8
 801d540:	af00      	add	r7, sp, #0
 801d542:	4603      	mov	r3, r0
 801d544:	6039      	str	r1, [r7, #0]
 801d546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801d548:	683b      	ldr	r3, [r7, #0]
 801d54a:	221a      	movs	r2, #26
 801d54c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801d54e:	f000 f855 	bl	801d5fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801d552:	4b02      	ldr	r3, [pc, #8]	@ (801d55c <USBD_FS_SerialStrDescriptor+0x20>)
}
 801d554:	4618      	mov	r0, r3
 801d556:	3708      	adds	r7, #8
 801d558:	46bd      	mov	sp, r7
 801d55a:	bd80      	pop	{r7, pc}
 801d55c:	2000011c 	.word	0x2000011c

0801d560 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d560:	b580      	push	{r7, lr}
 801d562:	b082      	sub	sp, #8
 801d564:	af00      	add	r7, sp, #0
 801d566:	4603      	mov	r3, r0
 801d568:	6039      	str	r1, [r7, #0]
 801d56a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801d56c:	79fb      	ldrb	r3, [r7, #7]
 801d56e:	2b00      	cmp	r3, #0
 801d570:	d105      	bne.n	801d57e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d572:	683a      	ldr	r2, [r7, #0]
 801d574:	4907      	ldr	r1, [pc, #28]	@ (801d594 <USBD_FS_ConfigStrDescriptor+0x34>)
 801d576:	4808      	ldr	r0, [pc, #32]	@ (801d598 <USBD_FS_ConfigStrDescriptor+0x38>)
 801d578:	f7ef f916 	bl	800c7a8 <USBD_GetString>
 801d57c:	e004      	b.n	801d588 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d57e:	683a      	ldr	r2, [r7, #0]
 801d580:	4904      	ldr	r1, [pc, #16]	@ (801d594 <USBD_FS_ConfigStrDescriptor+0x34>)
 801d582:	4805      	ldr	r0, [pc, #20]	@ (801d598 <USBD_FS_ConfigStrDescriptor+0x38>)
 801d584:	f7ef f910 	bl	800c7a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d588:	4b02      	ldr	r3, [pc, #8]	@ (801d594 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801d58a:	4618      	mov	r0, r3
 801d58c:	3708      	adds	r7, #8
 801d58e:	46bd      	mov	sp, r7
 801d590:	bd80      	pop	{r7, pc}
 801d592:	bf00      	nop
 801d594:	2000f92c 	.word	0x2000f92c
 801d598:	08022a1c 	.word	0x08022a1c

0801d59c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d59c:	b580      	push	{r7, lr}
 801d59e:	b082      	sub	sp, #8
 801d5a0:	af00      	add	r7, sp, #0
 801d5a2:	4603      	mov	r3, r0
 801d5a4:	6039      	str	r1, [r7, #0]
 801d5a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801d5a8:	79fb      	ldrb	r3, [r7, #7]
 801d5aa:	2b00      	cmp	r3, #0
 801d5ac:	d105      	bne.n	801d5ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d5ae:	683a      	ldr	r2, [r7, #0]
 801d5b0:	4907      	ldr	r1, [pc, #28]	@ (801d5d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801d5b2:	4808      	ldr	r0, [pc, #32]	@ (801d5d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801d5b4:	f7ef f8f8 	bl	800c7a8 <USBD_GetString>
 801d5b8:	e004      	b.n	801d5c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d5ba:	683a      	ldr	r2, [r7, #0]
 801d5bc:	4904      	ldr	r1, [pc, #16]	@ (801d5d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801d5be:	4805      	ldr	r0, [pc, #20]	@ (801d5d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801d5c0:	f7ef f8f2 	bl	800c7a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d5c4:	4b02      	ldr	r3, [pc, #8]	@ (801d5d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801d5c6:	4618      	mov	r0, r3
 801d5c8:	3708      	adds	r7, #8
 801d5ca:	46bd      	mov	sp, r7
 801d5cc:	bd80      	pop	{r7, pc}
 801d5ce:	bf00      	nop
 801d5d0:	2000f92c 	.word	0x2000f92c
 801d5d4:	08022a28 	.word	0x08022a28

0801d5d8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d5d8:	b480      	push	{r7}
 801d5da:	b083      	sub	sp, #12
 801d5dc:	af00      	add	r7, sp, #0
 801d5de:	4603      	mov	r3, r0
 801d5e0:	6039      	str	r1, [r7, #0]
 801d5e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801d5e4:	683b      	ldr	r3, [r7, #0]
 801d5e6:	220c      	movs	r2, #12
 801d5e8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801d5ea:	4b03      	ldr	r3, [pc, #12]	@ (801d5f8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801d5ec:	4618      	mov	r0, r3
 801d5ee:	370c      	adds	r7, #12
 801d5f0:	46bd      	mov	sp, r7
 801d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5f6:	4770      	bx	lr
 801d5f8:	2000010c 	.word	0x2000010c

0801d5fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801d5fc:	b580      	push	{r7, lr}
 801d5fe:	b084      	sub	sp, #16
 801d600:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801d602:	4b0f      	ldr	r3, [pc, #60]	@ (801d640 <Get_SerialNum+0x44>)
 801d604:	681b      	ldr	r3, [r3, #0]
 801d606:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801d608:	4b0e      	ldr	r3, [pc, #56]	@ (801d644 <Get_SerialNum+0x48>)
 801d60a:	681b      	ldr	r3, [r3, #0]
 801d60c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801d60e:	4b0e      	ldr	r3, [pc, #56]	@ (801d648 <Get_SerialNum+0x4c>)
 801d610:	681b      	ldr	r3, [r3, #0]
 801d612:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801d614:	68fa      	ldr	r2, [r7, #12]
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	4413      	add	r3, r2
 801d61a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801d61c:	68fb      	ldr	r3, [r7, #12]
 801d61e:	2b00      	cmp	r3, #0
 801d620:	d009      	beq.n	801d636 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801d622:	2208      	movs	r2, #8
 801d624:	4909      	ldr	r1, [pc, #36]	@ (801d64c <Get_SerialNum+0x50>)
 801d626:	68f8      	ldr	r0, [r7, #12]
 801d628:	f000 f814 	bl	801d654 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801d62c:	2204      	movs	r2, #4
 801d62e:	4908      	ldr	r1, [pc, #32]	@ (801d650 <Get_SerialNum+0x54>)
 801d630:	68b8      	ldr	r0, [r7, #8]
 801d632:	f000 f80f 	bl	801d654 <IntToUnicode>
  }
}
 801d636:	bf00      	nop
 801d638:	3710      	adds	r7, #16
 801d63a:	46bd      	mov	sp, r7
 801d63c:	bd80      	pop	{r7, pc}
 801d63e:	bf00      	nop
 801d640:	1ff0f420 	.word	0x1ff0f420
 801d644:	1ff0f424 	.word	0x1ff0f424
 801d648:	1ff0f428 	.word	0x1ff0f428
 801d64c:	2000011e 	.word	0x2000011e
 801d650:	2000012e 	.word	0x2000012e

0801d654 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801d654:	b480      	push	{r7}
 801d656:	b087      	sub	sp, #28
 801d658:	af00      	add	r7, sp, #0
 801d65a:	60f8      	str	r0, [r7, #12]
 801d65c:	60b9      	str	r1, [r7, #8]
 801d65e:	4613      	mov	r3, r2
 801d660:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801d662:	2300      	movs	r3, #0
 801d664:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801d666:	2300      	movs	r3, #0
 801d668:	75fb      	strb	r3, [r7, #23]
 801d66a:	e027      	b.n	801d6bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801d66c:	68fb      	ldr	r3, [r7, #12]
 801d66e:	0f1b      	lsrs	r3, r3, #28
 801d670:	2b09      	cmp	r3, #9
 801d672:	d80b      	bhi.n	801d68c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801d674:	68fb      	ldr	r3, [r7, #12]
 801d676:	0f1b      	lsrs	r3, r3, #28
 801d678:	b2da      	uxtb	r2, r3
 801d67a:	7dfb      	ldrb	r3, [r7, #23]
 801d67c:	005b      	lsls	r3, r3, #1
 801d67e:	4619      	mov	r1, r3
 801d680:	68bb      	ldr	r3, [r7, #8]
 801d682:	440b      	add	r3, r1
 801d684:	3230      	adds	r2, #48	@ 0x30
 801d686:	b2d2      	uxtb	r2, r2
 801d688:	701a      	strb	r2, [r3, #0]
 801d68a:	e00a      	b.n	801d6a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801d68c:	68fb      	ldr	r3, [r7, #12]
 801d68e:	0f1b      	lsrs	r3, r3, #28
 801d690:	b2da      	uxtb	r2, r3
 801d692:	7dfb      	ldrb	r3, [r7, #23]
 801d694:	005b      	lsls	r3, r3, #1
 801d696:	4619      	mov	r1, r3
 801d698:	68bb      	ldr	r3, [r7, #8]
 801d69a:	440b      	add	r3, r1
 801d69c:	3237      	adds	r2, #55	@ 0x37
 801d69e:	b2d2      	uxtb	r2, r2
 801d6a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801d6a2:	68fb      	ldr	r3, [r7, #12]
 801d6a4:	011b      	lsls	r3, r3, #4
 801d6a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801d6a8:	7dfb      	ldrb	r3, [r7, #23]
 801d6aa:	005b      	lsls	r3, r3, #1
 801d6ac:	3301      	adds	r3, #1
 801d6ae:	68ba      	ldr	r2, [r7, #8]
 801d6b0:	4413      	add	r3, r2
 801d6b2:	2200      	movs	r2, #0
 801d6b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801d6b6:	7dfb      	ldrb	r3, [r7, #23]
 801d6b8:	3301      	adds	r3, #1
 801d6ba:	75fb      	strb	r3, [r7, #23]
 801d6bc:	7dfa      	ldrb	r2, [r7, #23]
 801d6be:	79fb      	ldrb	r3, [r7, #7]
 801d6c0:	429a      	cmp	r2, r3
 801d6c2:	d3d3      	bcc.n	801d66c <IntToUnicode+0x18>
  }
}
 801d6c4:	bf00      	nop
 801d6c6:	bf00      	nop
 801d6c8:	371c      	adds	r7, #28
 801d6ca:	46bd      	mov	sp, r7
 801d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6d0:	4770      	bx	lr
	...

0801d6d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d6d4:	b580      	push	{r7, lr}
 801d6d6:	b0ae      	sub	sp, #184	@ 0xb8
 801d6d8:	af00      	add	r7, sp, #0
 801d6da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d6dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801d6e0:	2200      	movs	r2, #0
 801d6e2:	601a      	str	r2, [r3, #0]
 801d6e4:	605a      	str	r2, [r3, #4]
 801d6e6:	609a      	str	r2, [r3, #8]
 801d6e8:	60da      	str	r2, [r3, #12]
 801d6ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801d6ec:	f107 0314 	add.w	r3, r7, #20
 801d6f0:	2290      	movs	r2, #144	@ 0x90
 801d6f2:	2100      	movs	r1, #0
 801d6f4:	4618      	mov	r0, r3
 801d6f6:	f000 fdca 	bl	801e28e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801d6fa:	687b      	ldr	r3, [r7, #4]
 801d6fc:	681b      	ldr	r3, [r3, #0]
 801d6fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d702:	d161      	bne.n	801d7c8 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 801d704:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801d708:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 801d70a:	2300      	movs	r3, #0
 801d70c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801d710:	f107 0314 	add.w	r3, r7, #20
 801d714:	4618      	mov	r0, r3
 801d716:	f7e9 faff 	bl	8006d18 <HAL_RCCEx_PeriphCLKConfig>
 801d71a:	4603      	mov	r3, r0
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	d001      	beq.n	801d724 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 801d720:	f7e4 fb42 	bl	8001da8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d724:	4b2a      	ldr	r3, [pc, #168]	@ (801d7d0 <HAL_PCD_MspInit+0xfc>)
 801d726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d728:	4a29      	ldr	r2, [pc, #164]	@ (801d7d0 <HAL_PCD_MspInit+0xfc>)
 801d72a:	f043 0301 	orr.w	r3, r3, #1
 801d72e:	6313      	str	r3, [r2, #48]	@ 0x30
 801d730:	4b27      	ldr	r3, [pc, #156]	@ (801d7d0 <HAL_PCD_MspInit+0xfc>)
 801d732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d734:	f003 0301 	and.w	r3, r3, #1
 801d738:	613b      	str	r3, [r7, #16]
 801d73a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 801d73c:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 801d740:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d744:	2302      	movs	r3, #2
 801d746:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d74a:	2300      	movs	r3, #0
 801d74c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d750:	2303      	movs	r3, #3
 801d752:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801d756:	230a      	movs	r3, #10
 801d758:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d75c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801d760:	4619      	mov	r1, r3
 801d762:	481c      	ldr	r0, [pc, #112]	@ (801d7d4 <HAL_PCD_MspInit+0x100>)
 801d764:	f7e6 faf6 	bl	8003d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801d768:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801d76c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801d770:	2300      	movs	r3, #0
 801d772:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d776:	2300      	movs	r3, #0
 801d778:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d77c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801d780:	4619      	mov	r1, r3
 801d782:	4814      	ldr	r0, [pc, #80]	@ (801d7d4 <HAL_PCD_MspInit+0x100>)
 801d784:	f7e6 fae6 	bl	8003d54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801d788:	4b11      	ldr	r3, [pc, #68]	@ (801d7d0 <HAL_PCD_MspInit+0xfc>)
 801d78a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d78c:	4a10      	ldr	r2, [pc, #64]	@ (801d7d0 <HAL_PCD_MspInit+0xfc>)
 801d78e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d792:	6353      	str	r3, [r2, #52]	@ 0x34
 801d794:	4b0e      	ldr	r3, [pc, #56]	@ (801d7d0 <HAL_PCD_MspInit+0xfc>)
 801d796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801d79c:	60fb      	str	r3, [r7, #12]
 801d79e:	68fb      	ldr	r3, [r7, #12]
 801d7a0:	4b0b      	ldr	r3, [pc, #44]	@ (801d7d0 <HAL_PCD_MspInit+0xfc>)
 801d7a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d7a4:	4a0a      	ldr	r2, [pc, #40]	@ (801d7d0 <HAL_PCD_MspInit+0xfc>)
 801d7a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801d7aa:	6453      	str	r3, [r2, #68]	@ 0x44
 801d7ac:	4b08      	ldr	r3, [pc, #32]	@ (801d7d0 <HAL_PCD_MspInit+0xfc>)
 801d7ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d7b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801d7b4:	60bb      	str	r3, [r7, #8]
 801d7b6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801d7b8:	2200      	movs	r2, #0
 801d7ba:	2105      	movs	r1, #5
 801d7bc:	2043      	movs	r0, #67	@ 0x43
 801d7be:	f7e4 ffb1 	bl	8002724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801d7c2:	2043      	movs	r0, #67	@ 0x43
 801d7c4:	f7e4 ffca 	bl	800275c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801d7c8:	bf00      	nop
 801d7ca:	37b8      	adds	r7, #184	@ 0xb8
 801d7cc:	46bd      	mov	sp, r7
 801d7ce:	bd80      	pop	{r7, pc}
 801d7d0:	40023800 	.word	0x40023800
 801d7d4:	40020000 	.word	0x40020000

0801d7d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d7d8:	b580      	push	{r7, lr}
 801d7da:	b082      	sub	sp, #8
 801d7dc:	af00      	add	r7, sp, #0
 801d7de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 801d7e6:	687b      	ldr	r3, [r7, #4]
 801d7e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801d7ec:	4619      	mov	r1, r3
 801d7ee:	4610      	mov	r0, r2
 801d7f0:	f7ed fe4d 	bl	800b48e <USBD_LL_SetupStage>
}
 801d7f4:	bf00      	nop
 801d7f6:	3708      	adds	r7, #8
 801d7f8:	46bd      	mov	sp, r7
 801d7fa:	bd80      	pop	{r7, pc}

0801d7fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d7fc:	b580      	push	{r7, lr}
 801d7fe:	b082      	sub	sp, #8
 801d800:	af00      	add	r7, sp, #0
 801d802:	6078      	str	r0, [r7, #4]
 801d804:	460b      	mov	r3, r1
 801d806:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d808:	687b      	ldr	r3, [r7, #4]
 801d80a:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 801d80e:	78fa      	ldrb	r2, [r7, #3]
 801d810:	6879      	ldr	r1, [r7, #4]
 801d812:	4613      	mov	r3, r2
 801d814:	00db      	lsls	r3, r3, #3
 801d816:	4413      	add	r3, r2
 801d818:	009b      	lsls	r3, r3, #2
 801d81a:	440b      	add	r3, r1
 801d81c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801d820:	681a      	ldr	r2, [r3, #0]
 801d822:	78fb      	ldrb	r3, [r7, #3]
 801d824:	4619      	mov	r1, r3
 801d826:	f7ed fe87 	bl	800b538 <USBD_LL_DataOutStage>
}
 801d82a:	bf00      	nop
 801d82c:	3708      	adds	r7, #8
 801d82e:	46bd      	mov	sp, r7
 801d830:	bd80      	pop	{r7, pc}

0801d832 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d832:	b580      	push	{r7, lr}
 801d834:	b082      	sub	sp, #8
 801d836:	af00      	add	r7, sp, #0
 801d838:	6078      	str	r0, [r7, #4]
 801d83a:	460b      	mov	r3, r1
 801d83c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d83e:	687b      	ldr	r3, [r7, #4]
 801d840:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 801d844:	78fa      	ldrb	r2, [r7, #3]
 801d846:	6879      	ldr	r1, [r7, #4]
 801d848:	4613      	mov	r3, r2
 801d84a:	00db      	lsls	r3, r3, #3
 801d84c:	4413      	add	r3, r2
 801d84e:	009b      	lsls	r3, r3, #2
 801d850:	440b      	add	r3, r1
 801d852:	3320      	adds	r3, #32
 801d854:	681a      	ldr	r2, [r3, #0]
 801d856:	78fb      	ldrb	r3, [r7, #3]
 801d858:	4619      	mov	r1, r3
 801d85a:	f7ed ff20 	bl	800b69e <USBD_LL_DataInStage>
}
 801d85e:	bf00      	nop
 801d860:	3708      	adds	r7, #8
 801d862:	46bd      	mov	sp, r7
 801d864:	bd80      	pop	{r7, pc}

0801d866 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d866:	b580      	push	{r7, lr}
 801d868:	b082      	sub	sp, #8
 801d86a:	af00      	add	r7, sp, #0
 801d86c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d86e:	687b      	ldr	r3, [r7, #4]
 801d870:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801d874:	4618      	mov	r0, r3
 801d876:	f7ee f85a 	bl	800b92e <USBD_LL_SOF>
}
 801d87a:	bf00      	nop
 801d87c:	3708      	adds	r7, #8
 801d87e:	46bd      	mov	sp, r7
 801d880:	bd80      	pop	{r7, pc}

0801d882 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d882:	b580      	push	{r7, lr}
 801d884:	b084      	sub	sp, #16
 801d886:	af00      	add	r7, sp, #0
 801d888:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d88a:	2301      	movs	r3, #1
 801d88c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	79db      	ldrb	r3, [r3, #7]
 801d892:	2b00      	cmp	r3, #0
 801d894:	d102      	bne.n	801d89c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801d896:	2300      	movs	r3, #0
 801d898:	73fb      	strb	r3, [r7, #15]
 801d89a:	e008      	b.n	801d8ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801d89c:	687b      	ldr	r3, [r7, #4]
 801d89e:	79db      	ldrb	r3, [r3, #7]
 801d8a0:	2b02      	cmp	r3, #2
 801d8a2:	d102      	bne.n	801d8aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801d8a4:	2301      	movs	r3, #1
 801d8a6:	73fb      	strb	r3, [r7, #15]
 801d8a8:	e001      	b.n	801d8ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801d8aa:	f7e4 fa7d 	bl	8001da8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801d8b4:	7bfa      	ldrb	r2, [r7, #15]
 801d8b6:	4611      	mov	r1, r2
 801d8b8:	4618      	mov	r0, r3
 801d8ba:	f7ed fff4 	bl	800b8a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d8be:	687b      	ldr	r3, [r7, #4]
 801d8c0:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801d8c4:	4618      	mov	r0, r3
 801d8c6:	f7ed ff9c 	bl	800b802 <USBD_LL_Reset>
}
 801d8ca:	bf00      	nop
 801d8cc:	3710      	adds	r7, #16
 801d8ce:	46bd      	mov	sp, r7
 801d8d0:	bd80      	pop	{r7, pc}
	...

0801d8d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d8d4:	b580      	push	{r7, lr}
 801d8d6:	b082      	sub	sp, #8
 801d8d8:	af00      	add	r7, sp, #0
 801d8da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801d8e2:	4618      	mov	r0, r3
 801d8e4:	f7ed ffef 	bl	800b8c6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801d8e8:	687b      	ldr	r3, [r7, #4]
 801d8ea:	681b      	ldr	r3, [r3, #0]
 801d8ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801d8f0:	681b      	ldr	r3, [r3, #0]
 801d8f2:	687a      	ldr	r2, [r7, #4]
 801d8f4:	6812      	ldr	r2, [r2, #0]
 801d8f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801d8fa:	f043 0301 	orr.w	r3, r3, #1
 801d8fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	7adb      	ldrb	r3, [r3, #11]
 801d904:	2b00      	cmp	r3, #0
 801d906:	d005      	beq.n	801d914 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d908:	4b04      	ldr	r3, [pc, #16]	@ (801d91c <HAL_PCD_SuspendCallback+0x48>)
 801d90a:	691b      	ldr	r3, [r3, #16]
 801d90c:	4a03      	ldr	r2, [pc, #12]	@ (801d91c <HAL_PCD_SuspendCallback+0x48>)
 801d90e:	f043 0306 	orr.w	r3, r3, #6
 801d912:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801d914:	bf00      	nop
 801d916:	3708      	adds	r7, #8
 801d918:	46bd      	mov	sp, r7
 801d91a:	bd80      	pop	{r7, pc}
 801d91c:	e000ed00 	.word	0xe000ed00

0801d920 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d920:	b580      	push	{r7, lr}
 801d922:	b082      	sub	sp, #8
 801d924:	af00      	add	r7, sp, #0
 801d926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d928:	687b      	ldr	r3, [r7, #4]
 801d92a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801d92e:	4618      	mov	r0, r3
 801d930:	f7ed ffe5 	bl	800b8fe <USBD_LL_Resume>
}
 801d934:	bf00      	nop
 801d936:	3708      	adds	r7, #8
 801d938:	46bd      	mov	sp, r7
 801d93a:	bd80      	pop	{r7, pc}

0801d93c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d93c:	b580      	push	{r7, lr}
 801d93e:	b082      	sub	sp, #8
 801d940:	af00      	add	r7, sp, #0
 801d942:	6078      	str	r0, [r7, #4]
 801d944:	460b      	mov	r3, r1
 801d946:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d948:	687b      	ldr	r3, [r7, #4]
 801d94a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801d94e:	78fa      	ldrb	r2, [r7, #3]
 801d950:	4611      	mov	r1, r2
 801d952:	4618      	mov	r0, r3
 801d954:	f7ee f83d 	bl	800b9d2 <USBD_LL_IsoOUTIncomplete>
}
 801d958:	bf00      	nop
 801d95a:	3708      	adds	r7, #8
 801d95c:	46bd      	mov	sp, r7
 801d95e:	bd80      	pop	{r7, pc}

0801d960 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d960:	b580      	push	{r7, lr}
 801d962:	b082      	sub	sp, #8
 801d964:	af00      	add	r7, sp, #0
 801d966:	6078      	str	r0, [r7, #4]
 801d968:	460b      	mov	r3, r1
 801d96a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801d972:	78fa      	ldrb	r2, [r7, #3]
 801d974:	4611      	mov	r1, r2
 801d976:	4618      	mov	r0, r3
 801d978:	f7ed fff9 	bl	800b96e <USBD_LL_IsoINIncomplete>
}
 801d97c:	bf00      	nop
 801d97e:	3708      	adds	r7, #8
 801d980:	46bd      	mov	sp, r7
 801d982:	bd80      	pop	{r7, pc}

0801d984 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d984:	b580      	push	{r7, lr}
 801d986:	b082      	sub	sp, #8
 801d988:	af00      	add	r7, sp, #0
 801d98a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801d98c:	687b      	ldr	r3, [r7, #4]
 801d98e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801d992:	4618      	mov	r0, r3
 801d994:	f7ee f84f 	bl	800ba36 <USBD_LL_DevConnected>
}
 801d998:	bf00      	nop
 801d99a:	3708      	adds	r7, #8
 801d99c:	46bd      	mov	sp, r7
 801d99e:	bd80      	pop	{r7, pc}

0801d9a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d9a0:	b580      	push	{r7, lr}
 801d9a2:	b082      	sub	sp, #8
 801d9a4:	af00      	add	r7, sp, #0
 801d9a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801d9a8:	687b      	ldr	r3, [r7, #4]
 801d9aa:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801d9ae:	4618      	mov	r0, r3
 801d9b0:	f7ee f84c 	bl	800ba4c <USBD_LL_DevDisconnected>
}
 801d9b4:	bf00      	nop
 801d9b6:	3708      	adds	r7, #8
 801d9b8:	46bd      	mov	sp, r7
 801d9ba:	bd80      	pop	{r7, pc}

0801d9bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d9bc:	b580      	push	{r7, lr}
 801d9be:	b082      	sub	sp, #8
 801d9c0:	af00      	add	r7, sp, #0
 801d9c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801d9c4:	687b      	ldr	r3, [r7, #4]
 801d9c6:	781b      	ldrb	r3, [r3, #0]
 801d9c8:	2b00      	cmp	r3, #0
 801d9ca:	d13c      	bne.n	801da46 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801d9cc:	4a20      	ldr	r2, [pc, #128]	@ (801da50 <USBD_LL_Init+0x94>)
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 801d9d4:	687b      	ldr	r3, [r7, #4]
 801d9d6:	4a1e      	ldr	r2, [pc, #120]	@ (801da50 <USBD_LL_Init+0x94>)
 801d9d8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801d9dc:	4b1c      	ldr	r3, [pc, #112]	@ (801da50 <USBD_LL_Init+0x94>)
 801d9de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801d9e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801d9e4:	4b1a      	ldr	r3, [pc, #104]	@ (801da50 <USBD_LL_Init+0x94>)
 801d9e6:	2206      	movs	r2, #6
 801d9e8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801d9ea:	4b19      	ldr	r3, [pc, #100]	@ (801da50 <USBD_LL_Init+0x94>)
 801d9ec:	2202      	movs	r2, #2
 801d9ee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801d9f0:	4b17      	ldr	r3, [pc, #92]	@ (801da50 <USBD_LL_Init+0x94>)
 801d9f2:	2200      	movs	r2, #0
 801d9f4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d9f6:	4b16      	ldr	r3, [pc, #88]	@ (801da50 <USBD_LL_Init+0x94>)
 801d9f8:	2202      	movs	r2, #2
 801d9fa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801d9fc:	4b14      	ldr	r3, [pc, #80]	@ (801da50 <USBD_LL_Init+0x94>)
 801d9fe:	2201      	movs	r2, #1
 801da00:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801da02:	4b13      	ldr	r3, [pc, #76]	@ (801da50 <USBD_LL_Init+0x94>)
 801da04:	2200      	movs	r2, #0
 801da06:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801da08:	4b11      	ldr	r3, [pc, #68]	@ (801da50 <USBD_LL_Init+0x94>)
 801da0a:	2200      	movs	r2, #0
 801da0c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801da0e:	4b10      	ldr	r3, [pc, #64]	@ (801da50 <USBD_LL_Init+0x94>)
 801da10:	2201      	movs	r2, #1
 801da12:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801da14:	4b0e      	ldr	r3, [pc, #56]	@ (801da50 <USBD_LL_Init+0x94>)
 801da16:	2200      	movs	r2, #0
 801da18:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801da1a:	480d      	ldr	r0, [pc, #52]	@ (801da50 <USBD_LL_Init+0x94>)
 801da1c:	f7e7 f99d 	bl	8004d5a <HAL_PCD_Init>
 801da20:	4603      	mov	r3, r0
 801da22:	2b00      	cmp	r3, #0
 801da24:	d001      	beq.n	801da2a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801da26:	f7e4 f9bf 	bl	8001da8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801da2a:	2180      	movs	r1, #128	@ 0x80
 801da2c:	4808      	ldr	r0, [pc, #32]	@ (801da50 <USBD_LL_Init+0x94>)
 801da2e:	f7e8 fbe8 	bl	8006202 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801da32:	2240      	movs	r2, #64	@ 0x40
 801da34:	2100      	movs	r1, #0
 801da36:	4806      	ldr	r0, [pc, #24]	@ (801da50 <USBD_LL_Init+0x94>)
 801da38:	f7e8 fb9c 	bl	8006174 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801da3c:	2280      	movs	r2, #128	@ 0x80
 801da3e:	2101      	movs	r1, #1
 801da40:	4803      	ldr	r0, [pc, #12]	@ (801da50 <USBD_LL_Init+0x94>)
 801da42:	f7e8 fb97 	bl	8006174 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801da46:	2300      	movs	r3, #0
}
 801da48:	4618      	mov	r0, r3
 801da4a:	3708      	adds	r7, #8
 801da4c:	46bd      	mov	sp, r7
 801da4e:	bd80      	pop	{r7, pc}
 801da50:	2000fb2c 	.word	0x2000fb2c

0801da54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801da54:	b580      	push	{r7, lr}
 801da56:	b084      	sub	sp, #16
 801da58:	af00      	add	r7, sp, #0
 801da5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801da5c:	2300      	movs	r3, #0
 801da5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801da60:	2300      	movs	r3, #0
 801da62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801da64:	687b      	ldr	r3, [r7, #4]
 801da66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801da6a:	4618      	mov	r0, r3
 801da6c:	f7e7 fa8b 	bl	8004f86 <HAL_PCD_Start>
 801da70:	4603      	mov	r3, r0
 801da72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801da74:	7bfb      	ldrb	r3, [r7, #15]
 801da76:	4618      	mov	r0, r3
 801da78:	f000 f97e 	bl	801dd78 <USBD_Get_USB_Status>
 801da7c:	4603      	mov	r3, r0
 801da7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801da80:	7bbb      	ldrb	r3, [r7, #14]
}
 801da82:	4618      	mov	r0, r3
 801da84:	3710      	adds	r7, #16
 801da86:	46bd      	mov	sp, r7
 801da88:	bd80      	pop	{r7, pc}

0801da8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801da8a:	b580      	push	{r7, lr}
 801da8c:	b084      	sub	sp, #16
 801da8e:	af00      	add	r7, sp, #0
 801da90:	6078      	str	r0, [r7, #4]
 801da92:	4608      	mov	r0, r1
 801da94:	4611      	mov	r1, r2
 801da96:	461a      	mov	r2, r3
 801da98:	4603      	mov	r3, r0
 801da9a:	70fb      	strb	r3, [r7, #3]
 801da9c:	460b      	mov	r3, r1
 801da9e:	70bb      	strb	r3, [r7, #2]
 801daa0:	4613      	mov	r3, r2
 801daa2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801daa4:	2300      	movs	r3, #0
 801daa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801daa8:	2300      	movs	r3, #0
 801daaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801dab2:	78bb      	ldrb	r3, [r7, #2]
 801dab4:	883a      	ldrh	r2, [r7, #0]
 801dab6:	78f9      	ldrb	r1, [r7, #3]
 801dab8:	f7e7 ff79 	bl	80059ae <HAL_PCD_EP_Open>
 801dabc:	4603      	mov	r3, r0
 801dabe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dac0:	7bfb      	ldrb	r3, [r7, #15]
 801dac2:	4618      	mov	r0, r3
 801dac4:	f000 f958 	bl	801dd78 <USBD_Get_USB_Status>
 801dac8:	4603      	mov	r3, r0
 801daca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801dacc:	7bbb      	ldrb	r3, [r7, #14]
}
 801dace:	4618      	mov	r0, r3
 801dad0:	3710      	adds	r7, #16
 801dad2:	46bd      	mov	sp, r7
 801dad4:	bd80      	pop	{r7, pc}

0801dad6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dad6:	b580      	push	{r7, lr}
 801dad8:	b084      	sub	sp, #16
 801dada:	af00      	add	r7, sp, #0
 801dadc:	6078      	str	r0, [r7, #4]
 801dade:	460b      	mov	r3, r1
 801dae0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dae2:	2300      	movs	r3, #0
 801dae4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dae6:	2300      	movs	r3, #0
 801dae8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801daea:	687b      	ldr	r3, [r7, #4]
 801daec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801daf0:	78fa      	ldrb	r2, [r7, #3]
 801daf2:	4611      	mov	r1, r2
 801daf4:	4618      	mov	r0, r3
 801daf6:	f7e7 ffc2 	bl	8005a7e <HAL_PCD_EP_Close>
 801dafa:	4603      	mov	r3, r0
 801dafc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dafe:	7bfb      	ldrb	r3, [r7, #15]
 801db00:	4618      	mov	r0, r3
 801db02:	f000 f939 	bl	801dd78 <USBD_Get_USB_Status>
 801db06:	4603      	mov	r3, r0
 801db08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801db0a:	7bbb      	ldrb	r3, [r7, #14]
}
 801db0c:	4618      	mov	r0, r3
 801db0e:	3710      	adds	r7, #16
 801db10:	46bd      	mov	sp, r7
 801db12:	bd80      	pop	{r7, pc}

0801db14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801db14:	b580      	push	{r7, lr}
 801db16:	b084      	sub	sp, #16
 801db18:	af00      	add	r7, sp, #0
 801db1a:	6078      	str	r0, [r7, #4]
 801db1c:	460b      	mov	r3, r1
 801db1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801db20:	2300      	movs	r3, #0
 801db22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801db24:	2300      	movs	r3, #0
 801db26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801db2e:	78fa      	ldrb	r2, [r7, #3]
 801db30:	4611      	mov	r1, r2
 801db32:	4618      	mov	r0, r3
 801db34:	f7e8 f87a 	bl	8005c2c <HAL_PCD_EP_SetStall>
 801db38:	4603      	mov	r3, r0
 801db3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801db3c:	7bfb      	ldrb	r3, [r7, #15]
 801db3e:	4618      	mov	r0, r3
 801db40:	f000 f91a 	bl	801dd78 <USBD_Get_USB_Status>
 801db44:	4603      	mov	r3, r0
 801db46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801db48:	7bbb      	ldrb	r3, [r7, #14]
}
 801db4a:	4618      	mov	r0, r3
 801db4c:	3710      	adds	r7, #16
 801db4e:	46bd      	mov	sp, r7
 801db50:	bd80      	pop	{r7, pc}

0801db52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801db52:	b580      	push	{r7, lr}
 801db54:	b084      	sub	sp, #16
 801db56:	af00      	add	r7, sp, #0
 801db58:	6078      	str	r0, [r7, #4]
 801db5a:	460b      	mov	r3, r1
 801db5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801db5e:	2300      	movs	r3, #0
 801db60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801db62:	2300      	movs	r3, #0
 801db64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801db66:	687b      	ldr	r3, [r7, #4]
 801db68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801db6c:	78fa      	ldrb	r2, [r7, #3]
 801db6e:	4611      	mov	r1, r2
 801db70:	4618      	mov	r0, r3
 801db72:	f7e8 f8be 	bl	8005cf2 <HAL_PCD_EP_ClrStall>
 801db76:	4603      	mov	r3, r0
 801db78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801db7a:	7bfb      	ldrb	r3, [r7, #15]
 801db7c:	4618      	mov	r0, r3
 801db7e:	f000 f8fb 	bl	801dd78 <USBD_Get_USB_Status>
 801db82:	4603      	mov	r3, r0
 801db84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801db86:	7bbb      	ldrb	r3, [r7, #14]
}
 801db88:	4618      	mov	r0, r3
 801db8a:	3710      	adds	r7, #16
 801db8c:	46bd      	mov	sp, r7
 801db8e:	bd80      	pop	{r7, pc}

0801db90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801db90:	b480      	push	{r7}
 801db92:	b085      	sub	sp, #20
 801db94:	af00      	add	r7, sp, #0
 801db96:	6078      	str	r0, [r7, #4]
 801db98:	460b      	mov	r3, r1
 801db9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801db9c:	687b      	ldr	r3, [r7, #4]
 801db9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801dba2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801dba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801dba8:	2b00      	cmp	r3, #0
 801dbaa:	da0b      	bge.n	801dbc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801dbac:	78fb      	ldrb	r3, [r7, #3]
 801dbae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801dbb2:	68f9      	ldr	r1, [r7, #12]
 801dbb4:	4613      	mov	r3, r2
 801dbb6:	00db      	lsls	r3, r3, #3
 801dbb8:	4413      	add	r3, r2
 801dbba:	009b      	lsls	r3, r3, #2
 801dbbc:	440b      	add	r3, r1
 801dbbe:	3316      	adds	r3, #22
 801dbc0:	781b      	ldrb	r3, [r3, #0]
 801dbc2:	e00b      	b.n	801dbdc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801dbc4:	78fb      	ldrb	r3, [r7, #3]
 801dbc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801dbca:	68f9      	ldr	r1, [r7, #12]
 801dbcc:	4613      	mov	r3, r2
 801dbce:	00db      	lsls	r3, r3, #3
 801dbd0:	4413      	add	r3, r2
 801dbd2:	009b      	lsls	r3, r3, #2
 801dbd4:	440b      	add	r3, r1
 801dbd6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801dbda:	781b      	ldrb	r3, [r3, #0]
  }
}
 801dbdc:	4618      	mov	r0, r3
 801dbde:	3714      	adds	r7, #20
 801dbe0:	46bd      	mov	sp, r7
 801dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbe6:	4770      	bx	lr

0801dbe8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801dbe8:	b580      	push	{r7, lr}
 801dbea:	b084      	sub	sp, #16
 801dbec:	af00      	add	r7, sp, #0
 801dbee:	6078      	str	r0, [r7, #4]
 801dbf0:	460b      	mov	r3, r1
 801dbf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dbf4:	2300      	movs	r3, #0
 801dbf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dbf8:	2300      	movs	r3, #0
 801dbfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801dc02:	78fa      	ldrb	r2, [r7, #3]
 801dc04:	4611      	mov	r1, r2
 801dc06:	4618      	mov	r0, r3
 801dc08:	f7e7 fead 	bl	8005966 <HAL_PCD_SetAddress>
 801dc0c:	4603      	mov	r3, r0
 801dc0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dc10:	7bfb      	ldrb	r3, [r7, #15]
 801dc12:	4618      	mov	r0, r3
 801dc14:	f000 f8b0 	bl	801dd78 <USBD_Get_USB_Status>
 801dc18:	4603      	mov	r3, r0
 801dc1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801dc1c:	7bbb      	ldrb	r3, [r7, #14]
}
 801dc1e:	4618      	mov	r0, r3
 801dc20:	3710      	adds	r7, #16
 801dc22:	46bd      	mov	sp, r7
 801dc24:	bd80      	pop	{r7, pc}

0801dc26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801dc26:	b580      	push	{r7, lr}
 801dc28:	b086      	sub	sp, #24
 801dc2a:	af00      	add	r7, sp, #0
 801dc2c:	60f8      	str	r0, [r7, #12]
 801dc2e:	607a      	str	r2, [r7, #4]
 801dc30:	603b      	str	r3, [r7, #0]
 801dc32:	460b      	mov	r3, r1
 801dc34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dc36:	2300      	movs	r3, #0
 801dc38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dc3a:	2300      	movs	r3, #0
 801dc3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801dc3e:	68fb      	ldr	r3, [r7, #12]
 801dc40:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801dc44:	7af9      	ldrb	r1, [r7, #11]
 801dc46:	683b      	ldr	r3, [r7, #0]
 801dc48:	687a      	ldr	r2, [r7, #4]
 801dc4a:	f7e7 ffb5 	bl	8005bb8 <HAL_PCD_EP_Transmit>
 801dc4e:	4603      	mov	r3, r0
 801dc50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dc52:	7dfb      	ldrb	r3, [r7, #23]
 801dc54:	4618      	mov	r0, r3
 801dc56:	f000 f88f 	bl	801dd78 <USBD_Get_USB_Status>
 801dc5a:	4603      	mov	r3, r0
 801dc5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801dc5e:	7dbb      	ldrb	r3, [r7, #22]
}
 801dc60:	4618      	mov	r0, r3
 801dc62:	3718      	adds	r7, #24
 801dc64:	46bd      	mov	sp, r7
 801dc66:	bd80      	pop	{r7, pc}

0801dc68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801dc68:	b580      	push	{r7, lr}
 801dc6a:	b086      	sub	sp, #24
 801dc6c:	af00      	add	r7, sp, #0
 801dc6e:	60f8      	str	r0, [r7, #12]
 801dc70:	607a      	str	r2, [r7, #4]
 801dc72:	603b      	str	r3, [r7, #0]
 801dc74:	460b      	mov	r3, r1
 801dc76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dc78:	2300      	movs	r3, #0
 801dc7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dc7c:	2300      	movs	r3, #0
 801dc7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801dc80:	68fb      	ldr	r3, [r7, #12]
 801dc82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801dc86:	7af9      	ldrb	r1, [r7, #11]
 801dc88:	683b      	ldr	r3, [r7, #0]
 801dc8a:	687a      	ldr	r2, [r7, #4]
 801dc8c:	f7e7 ff41 	bl	8005b12 <HAL_PCD_EP_Receive>
 801dc90:	4603      	mov	r3, r0
 801dc92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dc94:	7dfb      	ldrb	r3, [r7, #23]
 801dc96:	4618      	mov	r0, r3
 801dc98:	f000 f86e 	bl	801dd78 <USBD_Get_USB_Status>
 801dc9c:	4603      	mov	r3, r0
 801dc9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801dca0:	7dbb      	ldrb	r3, [r7, #22]
}
 801dca2:	4618      	mov	r0, r3
 801dca4:	3718      	adds	r7, #24
 801dca6:	46bd      	mov	sp, r7
 801dca8:	bd80      	pop	{r7, pc}

0801dcaa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dcaa:	b580      	push	{r7, lr}
 801dcac:	b082      	sub	sp, #8
 801dcae:	af00      	add	r7, sp, #0
 801dcb0:	6078      	str	r0, [r7, #4]
 801dcb2:	460b      	mov	r3, r1
 801dcb4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801dcb6:	687b      	ldr	r3, [r7, #4]
 801dcb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801dcbc:	78fa      	ldrb	r2, [r7, #3]
 801dcbe:	4611      	mov	r1, r2
 801dcc0:	4618      	mov	r0, r3
 801dcc2:	f7e7 ff61 	bl	8005b88 <HAL_PCD_EP_GetRxCount>
 801dcc6:	4603      	mov	r3, r0
}
 801dcc8:	4618      	mov	r0, r3
 801dcca:	3708      	adds	r7, #8
 801dccc:	46bd      	mov	sp, r7
 801dcce:	bd80      	pop	{r7, pc}

0801dcd0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801dcd0:	b580      	push	{r7, lr}
 801dcd2:	b082      	sub	sp, #8
 801dcd4:	af00      	add	r7, sp, #0
 801dcd6:	6078      	str	r0, [r7, #4]
 801dcd8:	460b      	mov	r3, r1
 801dcda:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801dcdc:	78fb      	ldrb	r3, [r7, #3]
 801dcde:	2b00      	cmp	r3, #0
 801dce0:	d002      	beq.n	801dce8 <HAL_PCDEx_LPM_Callback+0x18>
 801dce2:	2b01      	cmp	r3, #1
 801dce4:	d01f      	beq.n	801dd26 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801dce6:	e03b      	b.n	801dd60 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	7adb      	ldrb	r3, [r3, #11]
 801dcec:	2b00      	cmp	r3, #0
 801dcee:	d007      	beq.n	801dd00 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801dcf0:	f000 f83c 	bl	801dd6c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801dcf4:	4b1c      	ldr	r3, [pc, #112]	@ (801dd68 <HAL_PCDEx_LPM_Callback+0x98>)
 801dcf6:	691b      	ldr	r3, [r3, #16]
 801dcf8:	4a1b      	ldr	r2, [pc, #108]	@ (801dd68 <HAL_PCDEx_LPM_Callback+0x98>)
 801dcfa:	f023 0306 	bic.w	r3, r3, #6
 801dcfe:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	681b      	ldr	r3, [r3, #0]
 801dd04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801dd08:	681b      	ldr	r3, [r3, #0]
 801dd0a:	687a      	ldr	r2, [r7, #4]
 801dd0c:	6812      	ldr	r2, [r2, #0]
 801dd0e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801dd12:	f023 0301 	bic.w	r3, r3, #1
 801dd16:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801dd1e:	4618      	mov	r0, r3
 801dd20:	f7ed fded 	bl	800b8fe <USBD_LL_Resume>
    break;
 801dd24:	e01c      	b.n	801dd60 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801dd26:	687b      	ldr	r3, [r7, #4]
 801dd28:	681b      	ldr	r3, [r3, #0]
 801dd2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801dd2e:	681b      	ldr	r3, [r3, #0]
 801dd30:	687a      	ldr	r2, [r7, #4]
 801dd32:	6812      	ldr	r2, [r2, #0]
 801dd34:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801dd38:	f043 0301 	orr.w	r3, r3, #1
 801dd3c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801dd44:	4618      	mov	r0, r3
 801dd46:	f7ed fdbe 	bl	800b8c6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801dd4a:	687b      	ldr	r3, [r7, #4]
 801dd4c:	7adb      	ldrb	r3, [r3, #11]
 801dd4e:	2b00      	cmp	r3, #0
 801dd50:	d005      	beq.n	801dd5e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801dd52:	4b05      	ldr	r3, [pc, #20]	@ (801dd68 <HAL_PCDEx_LPM_Callback+0x98>)
 801dd54:	691b      	ldr	r3, [r3, #16]
 801dd56:	4a04      	ldr	r2, [pc, #16]	@ (801dd68 <HAL_PCDEx_LPM_Callback+0x98>)
 801dd58:	f043 0306 	orr.w	r3, r3, #6
 801dd5c:	6113      	str	r3, [r2, #16]
    break;
 801dd5e:	bf00      	nop
}
 801dd60:	bf00      	nop
 801dd62:	3708      	adds	r7, #8
 801dd64:	46bd      	mov	sp, r7
 801dd66:	bd80      	pop	{r7, pc}
 801dd68:	e000ed00 	.word	0xe000ed00

0801dd6c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801dd6c:	b580      	push	{r7, lr}
 801dd6e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801dd70:	f7e3 fd48 	bl	8001804 <SystemClock_Config>
}
 801dd74:	bf00      	nop
 801dd76:	bd80      	pop	{r7, pc}

0801dd78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801dd78:	b480      	push	{r7}
 801dd7a:	b085      	sub	sp, #20
 801dd7c:	af00      	add	r7, sp, #0
 801dd7e:	4603      	mov	r3, r0
 801dd80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dd82:	2300      	movs	r3, #0
 801dd84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801dd86:	79fb      	ldrb	r3, [r7, #7]
 801dd88:	2b03      	cmp	r3, #3
 801dd8a:	d817      	bhi.n	801ddbc <USBD_Get_USB_Status+0x44>
 801dd8c:	a201      	add	r2, pc, #4	@ (adr r2, 801dd94 <USBD_Get_USB_Status+0x1c>)
 801dd8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dd92:	bf00      	nop
 801dd94:	0801dda5 	.word	0x0801dda5
 801dd98:	0801ddab 	.word	0x0801ddab
 801dd9c:	0801ddb1 	.word	0x0801ddb1
 801dda0:	0801ddb7 	.word	0x0801ddb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801dda4:	2300      	movs	r3, #0
 801dda6:	73fb      	strb	r3, [r7, #15]
    break;
 801dda8:	e00b      	b.n	801ddc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ddaa:	2303      	movs	r3, #3
 801ddac:	73fb      	strb	r3, [r7, #15]
    break;
 801ddae:	e008      	b.n	801ddc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ddb0:	2301      	movs	r3, #1
 801ddb2:	73fb      	strb	r3, [r7, #15]
    break;
 801ddb4:	e005      	b.n	801ddc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ddb6:	2303      	movs	r3, #3
 801ddb8:	73fb      	strb	r3, [r7, #15]
    break;
 801ddba:	e002      	b.n	801ddc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801ddbc:	2303      	movs	r3, #3
 801ddbe:	73fb      	strb	r3, [r7, #15]
    break;
 801ddc0:	bf00      	nop
  }
  return usb_status;
 801ddc2:	7bfb      	ldrb	r3, [r7, #15]
}
 801ddc4:	4618      	mov	r0, r3
 801ddc6:	3714      	adds	r7, #20
 801ddc8:	46bd      	mov	sp, r7
 801ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddce:	4770      	bx	lr

0801ddd0 <malloc>:
 801ddd0:	4b02      	ldr	r3, [pc, #8]	@ (801dddc <malloc+0xc>)
 801ddd2:	4601      	mov	r1, r0
 801ddd4:	6818      	ldr	r0, [r3, #0]
 801ddd6:	f000 b82d 	b.w	801de34 <_malloc_r>
 801ddda:	bf00      	nop
 801dddc:	20000144 	.word	0x20000144

0801dde0 <free>:
 801dde0:	4b02      	ldr	r3, [pc, #8]	@ (801ddec <free+0xc>)
 801dde2:	4601      	mov	r1, r0
 801dde4:	6818      	ldr	r0, [r3, #0]
 801dde6:	f000 bb75 	b.w	801e4d4 <_free_r>
 801ddea:	bf00      	nop
 801ddec:	20000144 	.word	0x20000144

0801ddf0 <sbrk_aligned>:
 801ddf0:	b570      	push	{r4, r5, r6, lr}
 801ddf2:	4e0f      	ldr	r6, [pc, #60]	@ (801de30 <sbrk_aligned+0x40>)
 801ddf4:	460c      	mov	r4, r1
 801ddf6:	6831      	ldr	r1, [r6, #0]
 801ddf8:	4605      	mov	r5, r0
 801ddfa:	b911      	cbnz	r1, 801de02 <sbrk_aligned+0x12>
 801ddfc:	f000 faf4 	bl	801e3e8 <_sbrk_r>
 801de00:	6030      	str	r0, [r6, #0]
 801de02:	4621      	mov	r1, r4
 801de04:	4628      	mov	r0, r5
 801de06:	f000 faef 	bl	801e3e8 <_sbrk_r>
 801de0a:	1c43      	adds	r3, r0, #1
 801de0c:	d103      	bne.n	801de16 <sbrk_aligned+0x26>
 801de0e:	f04f 34ff 	mov.w	r4, #4294967295
 801de12:	4620      	mov	r0, r4
 801de14:	bd70      	pop	{r4, r5, r6, pc}
 801de16:	1cc4      	adds	r4, r0, #3
 801de18:	f024 0403 	bic.w	r4, r4, #3
 801de1c:	42a0      	cmp	r0, r4
 801de1e:	d0f8      	beq.n	801de12 <sbrk_aligned+0x22>
 801de20:	1a21      	subs	r1, r4, r0
 801de22:	4628      	mov	r0, r5
 801de24:	f000 fae0 	bl	801e3e8 <_sbrk_r>
 801de28:	3001      	adds	r0, #1
 801de2a:	d1f2      	bne.n	801de12 <sbrk_aligned+0x22>
 801de2c:	e7ef      	b.n	801de0e <sbrk_aligned+0x1e>
 801de2e:	bf00      	nop
 801de30:	2001000c 	.word	0x2001000c

0801de34 <_malloc_r>:
 801de34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801de38:	1ccd      	adds	r5, r1, #3
 801de3a:	f025 0503 	bic.w	r5, r5, #3
 801de3e:	3508      	adds	r5, #8
 801de40:	2d0c      	cmp	r5, #12
 801de42:	bf38      	it	cc
 801de44:	250c      	movcc	r5, #12
 801de46:	2d00      	cmp	r5, #0
 801de48:	4606      	mov	r6, r0
 801de4a:	db01      	blt.n	801de50 <_malloc_r+0x1c>
 801de4c:	42a9      	cmp	r1, r5
 801de4e:	d904      	bls.n	801de5a <_malloc_r+0x26>
 801de50:	230c      	movs	r3, #12
 801de52:	6033      	str	r3, [r6, #0]
 801de54:	2000      	movs	r0, #0
 801de56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801de5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801df30 <_malloc_r+0xfc>
 801de5e:	f000 f869 	bl	801df34 <__malloc_lock>
 801de62:	f8d8 3000 	ldr.w	r3, [r8]
 801de66:	461c      	mov	r4, r3
 801de68:	bb44      	cbnz	r4, 801debc <_malloc_r+0x88>
 801de6a:	4629      	mov	r1, r5
 801de6c:	4630      	mov	r0, r6
 801de6e:	f7ff ffbf 	bl	801ddf0 <sbrk_aligned>
 801de72:	1c43      	adds	r3, r0, #1
 801de74:	4604      	mov	r4, r0
 801de76:	d158      	bne.n	801df2a <_malloc_r+0xf6>
 801de78:	f8d8 4000 	ldr.w	r4, [r8]
 801de7c:	4627      	mov	r7, r4
 801de7e:	2f00      	cmp	r7, #0
 801de80:	d143      	bne.n	801df0a <_malloc_r+0xd6>
 801de82:	2c00      	cmp	r4, #0
 801de84:	d04b      	beq.n	801df1e <_malloc_r+0xea>
 801de86:	6823      	ldr	r3, [r4, #0]
 801de88:	4639      	mov	r1, r7
 801de8a:	4630      	mov	r0, r6
 801de8c:	eb04 0903 	add.w	r9, r4, r3
 801de90:	f000 faaa 	bl	801e3e8 <_sbrk_r>
 801de94:	4581      	cmp	r9, r0
 801de96:	d142      	bne.n	801df1e <_malloc_r+0xea>
 801de98:	6821      	ldr	r1, [r4, #0]
 801de9a:	1a6d      	subs	r5, r5, r1
 801de9c:	4629      	mov	r1, r5
 801de9e:	4630      	mov	r0, r6
 801dea0:	f7ff ffa6 	bl	801ddf0 <sbrk_aligned>
 801dea4:	3001      	adds	r0, #1
 801dea6:	d03a      	beq.n	801df1e <_malloc_r+0xea>
 801dea8:	6823      	ldr	r3, [r4, #0]
 801deaa:	442b      	add	r3, r5
 801deac:	6023      	str	r3, [r4, #0]
 801deae:	f8d8 3000 	ldr.w	r3, [r8]
 801deb2:	685a      	ldr	r2, [r3, #4]
 801deb4:	bb62      	cbnz	r2, 801df10 <_malloc_r+0xdc>
 801deb6:	f8c8 7000 	str.w	r7, [r8]
 801deba:	e00f      	b.n	801dedc <_malloc_r+0xa8>
 801debc:	6822      	ldr	r2, [r4, #0]
 801debe:	1b52      	subs	r2, r2, r5
 801dec0:	d420      	bmi.n	801df04 <_malloc_r+0xd0>
 801dec2:	2a0b      	cmp	r2, #11
 801dec4:	d917      	bls.n	801def6 <_malloc_r+0xc2>
 801dec6:	1961      	adds	r1, r4, r5
 801dec8:	42a3      	cmp	r3, r4
 801deca:	6025      	str	r5, [r4, #0]
 801decc:	bf18      	it	ne
 801dece:	6059      	strne	r1, [r3, #4]
 801ded0:	6863      	ldr	r3, [r4, #4]
 801ded2:	bf08      	it	eq
 801ded4:	f8c8 1000 	streq.w	r1, [r8]
 801ded8:	5162      	str	r2, [r4, r5]
 801deda:	604b      	str	r3, [r1, #4]
 801dedc:	4630      	mov	r0, r6
 801dede:	f000 f82f 	bl	801df40 <__malloc_unlock>
 801dee2:	f104 000b 	add.w	r0, r4, #11
 801dee6:	1d23      	adds	r3, r4, #4
 801dee8:	f020 0007 	bic.w	r0, r0, #7
 801deec:	1ac2      	subs	r2, r0, r3
 801deee:	bf1c      	itt	ne
 801def0:	1a1b      	subne	r3, r3, r0
 801def2:	50a3      	strne	r3, [r4, r2]
 801def4:	e7af      	b.n	801de56 <_malloc_r+0x22>
 801def6:	6862      	ldr	r2, [r4, #4]
 801def8:	42a3      	cmp	r3, r4
 801defa:	bf0c      	ite	eq
 801defc:	f8c8 2000 	streq.w	r2, [r8]
 801df00:	605a      	strne	r2, [r3, #4]
 801df02:	e7eb      	b.n	801dedc <_malloc_r+0xa8>
 801df04:	4623      	mov	r3, r4
 801df06:	6864      	ldr	r4, [r4, #4]
 801df08:	e7ae      	b.n	801de68 <_malloc_r+0x34>
 801df0a:	463c      	mov	r4, r7
 801df0c:	687f      	ldr	r7, [r7, #4]
 801df0e:	e7b6      	b.n	801de7e <_malloc_r+0x4a>
 801df10:	461a      	mov	r2, r3
 801df12:	685b      	ldr	r3, [r3, #4]
 801df14:	42a3      	cmp	r3, r4
 801df16:	d1fb      	bne.n	801df10 <_malloc_r+0xdc>
 801df18:	2300      	movs	r3, #0
 801df1a:	6053      	str	r3, [r2, #4]
 801df1c:	e7de      	b.n	801dedc <_malloc_r+0xa8>
 801df1e:	230c      	movs	r3, #12
 801df20:	6033      	str	r3, [r6, #0]
 801df22:	4630      	mov	r0, r6
 801df24:	f000 f80c 	bl	801df40 <__malloc_unlock>
 801df28:	e794      	b.n	801de54 <_malloc_r+0x20>
 801df2a:	6005      	str	r5, [r0, #0]
 801df2c:	e7d6      	b.n	801dedc <_malloc_r+0xa8>
 801df2e:	bf00      	nop
 801df30:	20010010 	.word	0x20010010

0801df34 <__malloc_lock>:
 801df34:	4801      	ldr	r0, [pc, #4]	@ (801df3c <__malloc_lock+0x8>)
 801df36:	f000 ba9e 	b.w	801e476 <__retarget_lock_acquire_recursive>
 801df3a:	bf00      	nop
 801df3c:	20010154 	.word	0x20010154

0801df40 <__malloc_unlock>:
 801df40:	4801      	ldr	r0, [pc, #4]	@ (801df48 <__malloc_unlock+0x8>)
 801df42:	f000 ba99 	b.w	801e478 <__retarget_lock_release_recursive>
 801df46:	bf00      	nop
 801df48:	20010154 	.word	0x20010154

0801df4c <rand>:
 801df4c:	4b16      	ldr	r3, [pc, #88]	@ (801dfa8 <rand+0x5c>)
 801df4e:	b510      	push	{r4, lr}
 801df50:	681c      	ldr	r4, [r3, #0]
 801df52:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801df54:	b9b3      	cbnz	r3, 801df84 <rand+0x38>
 801df56:	2018      	movs	r0, #24
 801df58:	f7ff ff3a 	bl	801ddd0 <malloc>
 801df5c:	4602      	mov	r2, r0
 801df5e:	6320      	str	r0, [r4, #48]	@ 0x30
 801df60:	b920      	cbnz	r0, 801df6c <rand+0x20>
 801df62:	4b12      	ldr	r3, [pc, #72]	@ (801dfac <rand+0x60>)
 801df64:	4812      	ldr	r0, [pc, #72]	@ (801dfb0 <rand+0x64>)
 801df66:	2152      	movs	r1, #82	@ 0x52
 801df68:	f000 fa96 	bl	801e498 <__assert_func>
 801df6c:	4911      	ldr	r1, [pc, #68]	@ (801dfb4 <rand+0x68>)
 801df6e:	4b12      	ldr	r3, [pc, #72]	@ (801dfb8 <rand+0x6c>)
 801df70:	e9c0 1300 	strd	r1, r3, [r0]
 801df74:	4b11      	ldr	r3, [pc, #68]	@ (801dfbc <rand+0x70>)
 801df76:	6083      	str	r3, [r0, #8]
 801df78:	230b      	movs	r3, #11
 801df7a:	8183      	strh	r3, [r0, #12]
 801df7c:	2100      	movs	r1, #0
 801df7e:	2001      	movs	r0, #1
 801df80:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801df84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801df86:	480e      	ldr	r0, [pc, #56]	@ (801dfc0 <rand+0x74>)
 801df88:	690b      	ldr	r3, [r1, #16]
 801df8a:	694c      	ldr	r4, [r1, #20]
 801df8c:	4a0d      	ldr	r2, [pc, #52]	@ (801dfc4 <rand+0x78>)
 801df8e:	4358      	muls	r0, r3
 801df90:	fb02 0004 	mla	r0, r2, r4, r0
 801df94:	fba3 3202 	umull	r3, r2, r3, r2
 801df98:	3301      	adds	r3, #1
 801df9a:	eb40 0002 	adc.w	r0, r0, r2
 801df9e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801dfa2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801dfa6:	bd10      	pop	{r4, pc}
 801dfa8:	20000144 	.word	0x20000144
 801dfac:	080684a4 	.word	0x080684a4
 801dfb0:	080684bb 	.word	0x080684bb
 801dfb4:	abcd330e 	.word	0xabcd330e
 801dfb8:	e66d1234 	.word	0xe66d1234
 801dfbc:	0005deec 	.word	0x0005deec
 801dfc0:	5851f42d 	.word	0x5851f42d
 801dfc4:	4c957f2d 	.word	0x4c957f2d

0801dfc8 <std>:
 801dfc8:	2300      	movs	r3, #0
 801dfca:	b510      	push	{r4, lr}
 801dfcc:	4604      	mov	r4, r0
 801dfce:	e9c0 3300 	strd	r3, r3, [r0]
 801dfd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dfd6:	6083      	str	r3, [r0, #8]
 801dfd8:	8181      	strh	r1, [r0, #12]
 801dfda:	6643      	str	r3, [r0, #100]	@ 0x64
 801dfdc:	81c2      	strh	r2, [r0, #14]
 801dfde:	6183      	str	r3, [r0, #24]
 801dfe0:	4619      	mov	r1, r3
 801dfe2:	2208      	movs	r2, #8
 801dfe4:	305c      	adds	r0, #92	@ 0x5c
 801dfe6:	f000 f952 	bl	801e28e <memset>
 801dfea:	4b0d      	ldr	r3, [pc, #52]	@ (801e020 <std+0x58>)
 801dfec:	6263      	str	r3, [r4, #36]	@ 0x24
 801dfee:	4b0d      	ldr	r3, [pc, #52]	@ (801e024 <std+0x5c>)
 801dff0:	62a3      	str	r3, [r4, #40]	@ 0x28
 801dff2:	4b0d      	ldr	r3, [pc, #52]	@ (801e028 <std+0x60>)
 801dff4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801dff6:	4b0d      	ldr	r3, [pc, #52]	@ (801e02c <std+0x64>)
 801dff8:	6323      	str	r3, [r4, #48]	@ 0x30
 801dffa:	4b0d      	ldr	r3, [pc, #52]	@ (801e030 <std+0x68>)
 801dffc:	6224      	str	r4, [r4, #32]
 801dffe:	429c      	cmp	r4, r3
 801e000:	d006      	beq.n	801e010 <std+0x48>
 801e002:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e006:	4294      	cmp	r4, r2
 801e008:	d002      	beq.n	801e010 <std+0x48>
 801e00a:	33d0      	adds	r3, #208	@ 0xd0
 801e00c:	429c      	cmp	r4, r3
 801e00e:	d105      	bne.n	801e01c <std+0x54>
 801e010:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e018:	f000 ba2c 	b.w	801e474 <__retarget_lock_init_recursive>
 801e01c:	bd10      	pop	{r4, pc}
 801e01e:	bf00      	nop
 801e020:	0801e1b5 	.word	0x0801e1b5
 801e024:	0801e1d7 	.word	0x0801e1d7
 801e028:	0801e20f 	.word	0x0801e20f
 801e02c:	0801e233 	.word	0x0801e233
 801e030:	20010014 	.word	0x20010014

0801e034 <stdio_exit_handler>:
 801e034:	4a02      	ldr	r2, [pc, #8]	@ (801e040 <stdio_exit_handler+0xc>)
 801e036:	4903      	ldr	r1, [pc, #12]	@ (801e044 <stdio_exit_handler+0x10>)
 801e038:	4803      	ldr	r0, [pc, #12]	@ (801e048 <stdio_exit_handler+0x14>)
 801e03a:	f000 b869 	b.w	801e110 <_fwalk_sglue>
 801e03e:	bf00      	nop
 801e040:	20000138 	.word	0x20000138
 801e044:	0801eebd 	.word	0x0801eebd
 801e048:	20000148 	.word	0x20000148

0801e04c <cleanup_stdio>:
 801e04c:	6841      	ldr	r1, [r0, #4]
 801e04e:	4b0c      	ldr	r3, [pc, #48]	@ (801e080 <cleanup_stdio+0x34>)
 801e050:	4299      	cmp	r1, r3
 801e052:	b510      	push	{r4, lr}
 801e054:	4604      	mov	r4, r0
 801e056:	d001      	beq.n	801e05c <cleanup_stdio+0x10>
 801e058:	f000 ff30 	bl	801eebc <_fflush_r>
 801e05c:	68a1      	ldr	r1, [r4, #8]
 801e05e:	4b09      	ldr	r3, [pc, #36]	@ (801e084 <cleanup_stdio+0x38>)
 801e060:	4299      	cmp	r1, r3
 801e062:	d002      	beq.n	801e06a <cleanup_stdio+0x1e>
 801e064:	4620      	mov	r0, r4
 801e066:	f000 ff29 	bl	801eebc <_fflush_r>
 801e06a:	68e1      	ldr	r1, [r4, #12]
 801e06c:	4b06      	ldr	r3, [pc, #24]	@ (801e088 <cleanup_stdio+0x3c>)
 801e06e:	4299      	cmp	r1, r3
 801e070:	d004      	beq.n	801e07c <cleanup_stdio+0x30>
 801e072:	4620      	mov	r0, r4
 801e074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e078:	f000 bf20 	b.w	801eebc <_fflush_r>
 801e07c:	bd10      	pop	{r4, pc}
 801e07e:	bf00      	nop
 801e080:	20010014 	.word	0x20010014
 801e084:	2001007c 	.word	0x2001007c
 801e088:	200100e4 	.word	0x200100e4

0801e08c <global_stdio_init.part.0>:
 801e08c:	b510      	push	{r4, lr}
 801e08e:	4b0b      	ldr	r3, [pc, #44]	@ (801e0bc <global_stdio_init.part.0+0x30>)
 801e090:	4c0b      	ldr	r4, [pc, #44]	@ (801e0c0 <global_stdio_init.part.0+0x34>)
 801e092:	4a0c      	ldr	r2, [pc, #48]	@ (801e0c4 <global_stdio_init.part.0+0x38>)
 801e094:	601a      	str	r2, [r3, #0]
 801e096:	4620      	mov	r0, r4
 801e098:	2200      	movs	r2, #0
 801e09a:	2104      	movs	r1, #4
 801e09c:	f7ff ff94 	bl	801dfc8 <std>
 801e0a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e0a4:	2201      	movs	r2, #1
 801e0a6:	2109      	movs	r1, #9
 801e0a8:	f7ff ff8e 	bl	801dfc8 <std>
 801e0ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e0b0:	2202      	movs	r2, #2
 801e0b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e0b6:	2112      	movs	r1, #18
 801e0b8:	f7ff bf86 	b.w	801dfc8 <std>
 801e0bc:	2001014c 	.word	0x2001014c
 801e0c0:	20010014 	.word	0x20010014
 801e0c4:	0801e035 	.word	0x0801e035

0801e0c8 <__sfp_lock_acquire>:
 801e0c8:	4801      	ldr	r0, [pc, #4]	@ (801e0d0 <__sfp_lock_acquire+0x8>)
 801e0ca:	f000 b9d4 	b.w	801e476 <__retarget_lock_acquire_recursive>
 801e0ce:	bf00      	nop
 801e0d0:	20010155 	.word	0x20010155

0801e0d4 <__sfp_lock_release>:
 801e0d4:	4801      	ldr	r0, [pc, #4]	@ (801e0dc <__sfp_lock_release+0x8>)
 801e0d6:	f000 b9cf 	b.w	801e478 <__retarget_lock_release_recursive>
 801e0da:	bf00      	nop
 801e0dc:	20010155 	.word	0x20010155

0801e0e0 <__sinit>:
 801e0e0:	b510      	push	{r4, lr}
 801e0e2:	4604      	mov	r4, r0
 801e0e4:	f7ff fff0 	bl	801e0c8 <__sfp_lock_acquire>
 801e0e8:	6a23      	ldr	r3, [r4, #32]
 801e0ea:	b11b      	cbz	r3, 801e0f4 <__sinit+0x14>
 801e0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e0f0:	f7ff bff0 	b.w	801e0d4 <__sfp_lock_release>
 801e0f4:	4b04      	ldr	r3, [pc, #16]	@ (801e108 <__sinit+0x28>)
 801e0f6:	6223      	str	r3, [r4, #32]
 801e0f8:	4b04      	ldr	r3, [pc, #16]	@ (801e10c <__sinit+0x2c>)
 801e0fa:	681b      	ldr	r3, [r3, #0]
 801e0fc:	2b00      	cmp	r3, #0
 801e0fe:	d1f5      	bne.n	801e0ec <__sinit+0xc>
 801e100:	f7ff ffc4 	bl	801e08c <global_stdio_init.part.0>
 801e104:	e7f2      	b.n	801e0ec <__sinit+0xc>
 801e106:	bf00      	nop
 801e108:	0801e04d 	.word	0x0801e04d
 801e10c:	2001014c 	.word	0x2001014c

0801e110 <_fwalk_sglue>:
 801e110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e114:	4607      	mov	r7, r0
 801e116:	4688      	mov	r8, r1
 801e118:	4614      	mov	r4, r2
 801e11a:	2600      	movs	r6, #0
 801e11c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e120:	f1b9 0901 	subs.w	r9, r9, #1
 801e124:	d505      	bpl.n	801e132 <_fwalk_sglue+0x22>
 801e126:	6824      	ldr	r4, [r4, #0]
 801e128:	2c00      	cmp	r4, #0
 801e12a:	d1f7      	bne.n	801e11c <_fwalk_sglue+0xc>
 801e12c:	4630      	mov	r0, r6
 801e12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e132:	89ab      	ldrh	r3, [r5, #12]
 801e134:	2b01      	cmp	r3, #1
 801e136:	d907      	bls.n	801e148 <_fwalk_sglue+0x38>
 801e138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e13c:	3301      	adds	r3, #1
 801e13e:	d003      	beq.n	801e148 <_fwalk_sglue+0x38>
 801e140:	4629      	mov	r1, r5
 801e142:	4638      	mov	r0, r7
 801e144:	47c0      	blx	r8
 801e146:	4306      	orrs	r6, r0
 801e148:	3568      	adds	r5, #104	@ 0x68
 801e14a:	e7e9      	b.n	801e120 <_fwalk_sglue+0x10>

0801e14c <iprintf>:
 801e14c:	b40f      	push	{r0, r1, r2, r3}
 801e14e:	b507      	push	{r0, r1, r2, lr}
 801e150:	4906      	ldr	r1, [pc, #24]	@ (801e16c <iprintf+0x20>)
 801e152:	ab04      	add	r3, sp, #16
 801e154:	6808      	ldr	r0, [r1, #0]
 801e156:	f853 2b04 	ldr.w	r2, [r3], #4
 801e15a:	6881      	ldr	r1, [r0, #8]
 801e15c:	9301      	str	r3, [sp, #4]
 801e15e:	f000 fb85 	bl	801e86c <_vfiprintf_r>
 801e162:	b003      	add	sp, #12
 801e164:	f85d eb04 	ldr.w	lr, [sp], #4
 801e168:	b004      	add	sp, #16
 801e16a:	4770      	bx	lr
 801e16c:	20000144 	.word	0x20000144

0801e170 <siprintf>:
 801e170:	b40e      	push	{r1, r2, r3}
 801e172:	b510      	push	{r4, lr}
 801e174:	b09d      	sub	sp, #116	@ 0x74
 801e176:	ab1f      	add	r3, sp, #124	@ 0x7c
 801e178:	9002      	str	r0, [sp, #8]
 801e17a:	9006      	str	r0, [sp, #24]
 801e17c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e180:	480a      	ldr	r0, [pc, #40]	@ (801e1ac <siprintf+0x3c>)
 801e182:	9107      	str	r1, [sp, #28]
 801e184:	9104      	str	r1, [sp, #16]
 801e186:	490a      	ldr	r1, [pc, #40]	@ (801e1b0 <siprintf+0x40>)
 801e188:	f853 2b04 	ldr.w	r2, [r3], #4
 801e18c:	9105      	str	r1, [sp, #20]
 801e18e:	2400      	movs	r4, #0
 801e190:	a902      	add	r1, sp, #8
 801e192:	6800      	ldr	r0, [r0, #0]
 801e194:	9301      	str	r3, [sp, #4]
 801e196:	941b      	str	r4, [sp, #108]	@ 0x6c
 801e198:	f000 fa42 	bl	801e620 <_svfiprintf_r>
 801e19c:	9b02      	ldr	r3, [sp, #8]
 801e19e:	701c      	strb	r4, [r3, #0]
 801e1a0:	b01d      	add	sp, #116	@ 0x74
 801e1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e1a6:	b003      	add	sp, #12
 801e1a8:	4770      	bx	lr
 801e1aa:	bf00      	nop
 801e1ac:	20000144 	.word	0x20000144
 801e1b0:	ffff0208 	.word	0xffff0208

0801e1b4 <__sread>:
 801e1b4:	b510      	push	{r4, lr}
 801e1b6:	460c      	mov	r4, r1
 801e1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e1bc:	f000 f902 	bl	801e3c4 <_read_r>
 801e1c0:	2800      	cmp	r0, #0
 801e1c2:	bfab      	itete	ge
 801e1c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e1c6:	89a3      	ldrhlt	r3, [r4, #12]
 801e1c8:	181b      	addge	r3, r3, r0
 801e1ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e1ce:	bfac      	ite	ge
 801e1d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e1d2:	81a3      	strhlt	r3, [r4, #12]
 801e1d4:	bd10      	pop	{r4, pc}

0801e1d6 <__swrite>:
 801e1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1da:	461f      	mov	r7, r3
 801e1dc:	898b      	ldrh	r3, [r1, #12]
 801e1de:	05db      	lsls	r3, r3, #23
 801e1e0:	4605      	mov	r5, r0
 801e1e2:	460c      	mov	r4, r1
 801e1e4:	4616      	mov	r6, r2
 801e1e6:	d505      	bpl.n	801e1f4 <__swrite+0x1e>
 801e1e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e1ec:	2302      	movs	r3, #2
 801e1ee:	2200      	movs	r2, #0
 801e1f0:	f000 f8d6 	bl	801e3a0 <_lseek_r>
 801e1f4:	89a3      	ldrh	r3, [r4, #12]
 801e1f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e1fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e1fe:	81a3      	strh	r3, [r4, #12]
 801e200:	4632      	mov	r2, r6
 801e202:	463b      	mov	r3, r7
 801e204:	4628      	mov	r0, r5
 801e206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e20a:	f000 b8fd 	b.w	801e408 <_write_r>

0801e20e <__sseek>:
 801e20e:	b510      	push	{r4, lr}
 801e210:	460c      	mov	r4, r1
 801e212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e216:	f000 f8c3 	bl	801e3a0 <_lseek_r>
 801e21a:	1c43      	adds	r3, r0, #1
 801e21c:	89a3      	ldrh	r3, [r4, #12]
 801e21e:	bf15      	itete	ne
 801e220:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e222:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e226:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e22a:	81a3      	strheq	r3, [r4, #12]
 801e22c:	bf18      	it	ne
 801e22e:	81a3      	strhne	r3, [r4, #12]
 801e230:	bd10      	pop	{r4, pc}

0801e232 <__sclose>:
 801e232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e236:	f000 b845 	b.w	801e2c4 <_close_r>

0801e23a <memcmp>:
 801e23a:	b510      	push	{r4, lr}
 801e23c:	3901      	subs	r1, #1
 801e23e:	4402      	add	r2, r0
 801e240:	4290      	cmp	r0, r2
 801e242:	d101      	bne.n	801e248 <memcmp+0xe>
 801e244:	2000      	movs	r0, #0
 801e246:	e005      	b.n	801e254 <memcmp+0x1a>
 801e248:	7803      	ldrb	r3, [r0, #0]
 801e24a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e24e:	42a3      	cmp	r3, r4
 801e250:	d001      	beq.n	801e256 <memcmp+0x1c>
 801e252:	1b18      	subs	r0, r3, r4
 801e254:	bd10      	pop	{r4, pc}
 801e256:	3001      	adds	r0, #1
 801e258:	e7f2      	b.n	801e240 <memcmp+0x6>

0801e25a <memmove>:
 801e25a:	4288      	cmp	r0, r1
 801e25c:	b510      	push	{r4, lr}
 801e25e:	eb01 0402 	add.w	r4, r1, r2
 801e262:	d902      	bls.n	801e26a <memmove+0x10>
 801e264:	4284      	cmp	r4, r0
 801e266:	4623      	mov	r3, r4
 801e268:	d807      	bhi.n	801e27a <memmove+0x20>
 801e26a:	1e43      	subs	r3, r0, #1
 801e26c:	42a1      	cmp	r1, r4
 801e26e:	d008      	beq.n	801e282 <memmove+0x28>
 801e270:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e274:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e278:	e7f8      	b.n	801e26c <memmove+0x12>
 801e27a:	4402      	add	r2, r0
 801e27c:	4601      	mov	r1, r0
 801e27e:	428a      	cmp	r2, r1
 801e280:	d100      	bne.n	801e284 <memmove+0x2a>
 801e282:	bd10      	pop	{r4, pc}
 801e284:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e288:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e28c:	e7f7      	b.n	801e27e <memmove+0x24>

0801e28e <memset>:
 801e28e:	4402      	add	r2, r0
 801e290:	4603      	mov	r3, r0
 801e292:	4293      	cmp	r3, r2
 801e294:	d100      	bne.n	801e298 <memset+0xa>
 801e296:	4770      	bx	lr
 801e298:	f803 1b01 	strb.w	r1, [r3], #1
 801e29c:	e7f9      	b.n	801e292 <memset+0x4>

0801e29e <strncmp>:
 801e29e:	b510      	push	{r4, lr}
 801e2a0:	b16a      	cbz	r2, 801e2be <strncmp+0x20>
 801e2a2:	3901      	subs	r1, #1
 801e2a4:	1884      	adds	r4, r0, r2
 801e2a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e2aa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e2ae:	429a      	cmp	r2, r3
 801e2b0:	d103      	bne.n	801e2ba <strncmp+0x1c>
 801e2b2:	42a0      	cmp	r0, r4
 801e2b4:	d001      	beq.n	801e2ba <strncmp+0x1c>
 801e2b6:	2a00      	cmp	r2, #0
 801e2b8:	d1f5      	bne.n	801e2a6 <strncmp+0x8>
 801e2ba:	1ad0      	subs	r0, r2, r3
 801e2bc:	bd10      	pop	{r4, pc}
 801e2be:	4610      	mov	r0, r2
 801e2c0:	e7fc      	b.n	801e2bc <strncmp+0x1e>
	...

0801e2c4 <_close_r>:
 801e2c4:	b538      	push	{r3, r4, r5, lr}
 801e2c6:	4d06      	ldr	r5, [pc, #24]	@ (801e2e0 <_close_r+0x1c>)
 801e2c8:	2300      	movs	r3, #0
 801e2ca:	4604      	mov	r4, r0
 801e2cc:	4608      	mov	r0, r1
 801e2ce:	602b      	str	r3, [r5, #0]
 801e2d0:	f7e3 ff66 	bl	80021a0 <_close>
 801e2d4:	1c43      	adds	r3, r0, #1
 801e2d6:	d102      	bne.n	801e2de <_close_r+0x1a>
 801e2d8:	682b      	ldr	r3, [r5, #0]
 801e2da:	b103      	cbz	r3, 801e2de <_close_r+0x1a>
 801e2dc:	6023      	str	r3, [r4, #0]
 801e2de:	bd38      	pop	{r3, r4, r5, pc}
 801e2e0:	20010150 	.word	0x20010150

0801e2e4 <_reclaim_reent>:
 801e2e4:	4b2d      	ldr	r3, [pc, #180]	@ (801e39c <_reclaim_reent+0xb8>)
 801e2e6:	681b      	ldr	r3, [r3, #0]
 801e2e8:	4283      	cmp	r3, r0
 801e2ea:	b570      	push	{r4, r5, r6, lr}
 801e2ec:	4604      	mov	r4, r0
 801e2ee:	d053      	beq.n	801e398 <_reclaim_reent+0xb4>
 801e2f0:	69c3      	ldr	r3, [r0, #28]
 801e2f2:	b31b      	cbz	r3, 801e33c <_reclaim_reent+0x58>
 801e2f4:	68db      	ldr	r3, [r3, #12]
 801e2f6:	b163      	cbz	r3, 801e312 <_reclaim_reent+0x2e>
 801e2f8:	2500      	movs	r5, #0
 801e2fa:	69e3      	ldr	r3, [r4, #28]
 801e2fc:	68db      	ldr	r3, [r3, #12]
 801e2fe:	5959      	ldr	r1, [r3, r5]
 801e300:	b9b1      	cbnz	r1, 801e330 <_reclaim_reent+0x4c>
 801e302:	3504      	adds	r5, #4
 801e304:	2d80      	cmp	r5, #128	@ 0x80
 801e306:	d1f8      	bne.n	801e2fa <_reclaim_reent+0x16>
 801e308:	69e3      	ldr	r3, [r4, #28]
 801e30a:	4620      	mov	r0, r4
 801e30c:	68d9      	ldr	r1, [r3, #12]
 801e30e:	f000 f8e1 	bl	801e4d4 <_free_r>
 801e312:	69e3      	ldr	r3, [r4, #28]
 801e314:	6819      	ldr	r1, [r3, #0]
 801e316:	b111      	cbz	r1, 801e31e <_reclaim_reent+0x3a>
 801e318:	4620      	mov	r0, r4
 801e31a:	f000 f8db 	bl	801e4d4 <_free_r>
 801e31e:	69e3      	ldr	r3, [r4, #28]
 801e320:	689d      	ldr	r5, [r3, #8]
 801e322:	b15d      	cbz	r5, 801e33c <_reclaim_reent+0x58>
 801e324:	4629      	mov	r1, r5
 801e326:	4620      	mov	r0, r4
 801e328:	682d      	ldr	r5, [r5, #0]
 801e32a:	f000 f8d3 	bl	801e4d4 <_free_r>
 801e32e:	e7f8      	b.n	801e322 <_reclaim_reent+0x3e>
 801e330:	680e      	ldr	r6, [r1, #0]
 801e332:	4620      	mov	r0, r4
 801e334:	f000 f8ce 	bl	801e4d4 <_free_r>
 801e338:	4631      	mov	r1, r6
 801e33a:	e7e1      	b.n	801e300 <_reclaim_reent+0x1c>
 801e33c:	6961      	ldr	r1, [r4, #20]
 801e33e:	b111      	cbz	r1, 801e346 <_reclaim_reent+0x62>
 801e340:	4620      	mov	r0, r4
 801e342:	f000 f8c7 	bl	801e4d4 <_free_r>
 801e346:	69e1      	ldr	r1, [r4, #28]
 801e348:	b111      	cbz	r1, 801e350 <_reclaim_reent+0x6c>
 801e34a:	4620      	mov	r0, r4
 801e34c:	f000 f8c2 	bl	801e4d4 <_free_r>
 801e350:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e352:	b111      	cbz	r1, 801e35a <_reclaim_reent+0x76>
 801e354:	4620      	mov	r0, r4
 801e356:	f000 f8bd 	bl	801e4d4 <_free_r>
 801e35a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e35c:	b111      	cbz	r1, 801e364 <_reclaim_reent+0x80>
 801e35e:	4620      	mov	r0, r4
 801e360:	f000 f8b8 	bl	801e4d4 <_free_r>
 801e364:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801e366:	b111      	cbz	r1, 801e36e <_reclaim_reent+0x8a>
 801e368:	4620      	mov	r0, r4
 801e36a:	f000 f8b3 	bl	801e4d4 <_free_r>
 801e36e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801e370:	b111      	cbz	r1, 801e378 <_reclaim_reent+0x94>
 801e372:	4620      	mov	r0, r4
 801e374:	f000 f8ae 	bl	801e4d4 <_free_r>
 801e378:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801e37a:	b111      	cbz	r1, 801e382 <_reclaim_reent+0x9e>
 801e37c:	4620      	mov	r0, r4
 801e37e:	f000 f8a9 	bl	801e4d4 <_free_r>
 801e382:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801e384:	b111      	cbz	r1, 801e38c <_reclaim_reent+0xa8>
 801e386:	4620      	mov	r0, r4
 801e388:	f000 f8a4 	bl	801e4d4 <_free_r>
 801e38c:	6a23      	ldr	r3, [r4, #32]
 801e38e:	b11b      	cbz	r3, 801e398 <_reclaim_reent+0xb4>
 801e390:	4620      	mov	r0, r4
 801e392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e396:	4718      	bx	r3
 801e398:	bd70      	pop	{r4, r5, r6, pc}
 801e39a:	bf00      	nop
 801e39c:	20000144 	.word	0x20000144

0801e3a0 <_lseek_r>:
 801e3a0:	b538      	push	{r3, r4, r5, lr}
 801e3a2:	4d07      	ldr	r5, [pc, #28]	@ (801e3c0 <_lseek_r+0x20>)
 801e3a4:	4604      	mov	r4, r0
 801e3a6:	4608      	mov	r0, r1
 801e3a8:	4611      	mov	r1, r2
 801e3aa:	2200      	movs	r2, #0
 801e3ac:	602a      	str	r2, [r5, #0]
 801e3ae:	461a      	mov	r2, r3
 801e3b0:	f7e3 ff1d 	bl	80021ee <_lseek>
 801e3b4:	1c43      	adds	r3, r0, #1
 801e3b6:	d102      	bne.n	801e3be <_lseek_r+0x1e>
 801e3b8:	682b      	ldr	r3, [r5, #0]
 801e3ba:	b103      	cbz	r3, 801e3be <_lseek_r+0x1e>
 801e3bc:	6023      	str	r3, [r4, #0]
 801e3be:	bd38      	pop	{r3, r4, r5, pc}
 801e3c0:	20010150 	.word	0x20010150

0801e3c4 <_read_r>:
 801e3c4:	b538      	push	{r3, r4, r5, lr}
 801e3c6:	4d07      	ldr	r5, [pc, #28]	@ (801e3e4 <_read_r+0x20>)
 801e3c8:	4604      	mov	r4, r0
 801e3ca:	4608      	mov	r0, r1
 801e3cc:	4611      	mov	r1, r2
 801e3ce:	2200      	movs	r2, #0
 801e3d0:	602a      	str	r2, [r5, #0]
 801e3d2:	461a      	mov	r2, r3
 801e3d4:	f7e3 feab 	bl	800212e <_read>
 801e3d8:	1c43      	adds	r3, r0, #1
 801e3da:	d102      	bne.n	801e3e2 <_read_r+0x1e>
 801e3dc:	682b      	ldr	r3, [r5, #0]
 801e3de:	b103      	cbz	r3, 801e3e2 <_read_r+0x1e>
 801e3e0:	6023      	str	r3, [r4, #0]
 801e3e2:	bd38      	pop	{r3, r4, r5, pc}
 801e3e4:	20010150 	.word	0x20010150

0801e3e8 <_sbrk_r>:
 801e3e8:	b538      	push	{r3, r4, r5, lr}
 801e3ea:	4d06      	ldr	r5, [pc, #24]	@ (801e404 <_sbrk_r+0x1c>)
 801e3ec:	2300      	movs	r3, #0
 801e3ee:	4604      	mov	r4, r0
 801e3f0:	4608      	mov	r0, r1
 801e3f2:	602b      	str	r3, [r5, #0]
 801e3f4:	f7e3 ff08 	bl	8002208 <_sbrk>
 801e3f8:	1c43      	adds	r3, r0, #1
 801e3fa:	d102      	bne.n	801e402 <_sbrk_r+0x1a>
 801e3fc:	682b      	ldr	r3, [r5, #0]
 801e3fe:	b103      	cbz	r3, 801e402 <_sbrk_r+0x1a>
 801e400:	6023      	str	r3, [r4, #0]
 801e402:	bd38      	pop	{r3, r4, r5, pc}
 801e404:	20010150 	.word	0x20010150

0801e408 <_write_r>:
 801e408:	b538      	push	{r3, r4, r5, lr}
 801e40a:	4d07      	ldr	r5, [pc, #28]	@ (801e428 <_write_r+0x20>)
 801e40c:	4604      	mov	r4, r0
 801e40e:	4608      	mov	r0, r1
 801e410:	4611      	mov	r1, r2
 801e412:	2200      	movs	r2, #0
 801e414:	602a      	str	r2, [r5, #0]
 801e416:	461a      	mov	r2, r3
 801e418:	f7e3 fea6 	bl	8002168 <_write>
 801e41c:	1c43      	adds	r3, r0, #1
 801e41e:	d102      	bne.n	801e426 <_write_r+0x1e>
 801e420:	682b      	ldr	r3, [r5, #0]
 801e422:	b103      	cbz	r3, 801e426 <_write_r+0x1e>
 801e424:	6023      	str	r3, [r4, #0]
 801e426:	bd38      	pop	{r3, r4, r5, pc}
 801e428:	20010150 	.word	0x20010150

0801e42c <__libc_init_array>:
 801e42c:	b570      	push	{r4, r5, r6, lr}
 801e42e:	4d0d      	ldr	r5, [pc, #52]	@ (801e464 <__libc_init_array+0x38>)
 801e430:	4c0d      	ldr	r4, [pc, #52]	@ (801e468 <__libc_init_array+0x3c>)
 801e432:	1b64      	subs	r4, r4, r5
 801e434:	10a4      	asrs	r4, r4, #2
 801e436:	2600      	movs	r6, #0
 801e438:	42a6      	cmp	r6, r4
 801e43a:	d109      	bne.n	801e450 <__libc_init_array+0x24>
 801e43c:	4d0b      	ldr	r5, [pc, #44]	@ (801e46c <__libc_init_array+0x40>)
 801e43e:	4c0c      	ldr	r4, [pc, #48]	@ (801e470 <__libc_init_array+0x44>)
 801e440:	f000 ff10 	bl	801f264 <_init>
 801e444:	1b64      	subs	r4, r4, r5
 801e446:	10a4      	asrs	r4, r4, #2
 801e448:	2600      	movs	r6, #0
 801e44a:	42a6      	cmp	r6, r4
 801e44c:	d105      	bne.n	801e45a <__libc_init_array+0x2e>
 801e44e:	bd70      	pop	{r4, r5, r6, pc}
 801e450:	f855 3b04 	ldr.w	r3, [r5], #4
 801e454:	4798      	blx	r3
 801e456:	3601      	adds	r6, #1
 801e458:	e7ee      	b.n	801e438 <__libc_init_array+0xc>
 801e45a:	f855 3b04 	ldr.w	r3, [r5], #4
 801e45e:	4798      	blx	r3
 801e460:	3601      	adds	r6, #1
 801e462:	e7f2      	b.n	801e44a <__libc_init_array+0x1e>
 801e464:	0806858c 	.word	0x0806858c
 801e468:	0806858c 	.word	0x0806858c
 801e46c:	0806858c 	.word	0x0806858c
 801e470:	08068590 	.word	0x08068590

0801e474 <__retarget_lock_init_recursive>:
 801e474:	4770      	bx	lr

0801e476 <__retarget_lock_acquire_recursive>:
 801e476:	4770      	bx	lr

0801e478 <__retarget_lock_release_recursive>:
 801e478:	4770      	bx	lr

0801e47a <memcpy>:
 801e47a:	440a      	add	r2, r1
 801e47c:	4291      	cmp	r1, r2
 801e47e:	f100 33ff 	add.w	r3, r0, #4294967295
 801e482:	d100      	bne.n	801e486 <memcpy+0xc>
 801e484:	4770      	bx	lr
 801e486:	b510      	push	{r4, lr}
 801e488:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e48c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e490:	4291      	cmp	r1, r2
 801e492:	d1f9      	bne.n	801e488 <memcpy+0xe>
 801e494:	bd10      	pop	{r4, pc}
	...

0801e498 <__assert_func>:
 801e498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e49a:	4614      	mov	r4, r2
 801e49c:	461a      	mov	r2, r3
 801e49e:	4b09      	ldr	r3, [pc, #36]	@ (801e4c4 <__assert_func+0x2c>)
 801e4a0:	681b      	ldr	r3, [r3, #0]
 801e4a2:	4605      	mov	r5, r0
 801e4a4:	68d8      	ldr	r0, [r3, #12]
 801e4a6:	b14c      	cbz	r4, 801e4bc <__assert_func+0x24>
 801e4a8:	4b07      	ldr	r3, [pc, #28]	@ (801e4c8 <__assert_func+0x30>)
 801e4aa:	9100      	str	r1, [sp, #0]
 801e4ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e4b0:	4906      	ldr	r1, [pc, #24]	@ (801e4cc <__assert_func+0x34>)
 801e4b2:	462b      	mov	r3, r5
 801e4b4:	f000 fd2a 	bl	801ef0c <fiprintf>
 801e4b8:	f000 fdce 	bl	801f058 <abort>
 801e4bc:	4b04      	ldr	r3, [pc, #16]	@ (801e4d0 <__assert_func+0x38>)
 801e4be:	461c      	mov	r4, r3
 801e4c0:	e7f3      	b.n	801e4aa <__assert_func+0x12>
 801e4c2:	bf00      	nop
 801e4c4:	20000144 	.word	0x20000144
 801e4c8:	08068513 	.word	0x08068513
 801e4cc:	08068520 	.word	0x08068520
 801e4d0:	0806854e 	.word	0x0806854e

0801e4d4 <_free_r>:
 801e4d4:	b538      	push	{r3, r4, r5, lr}
 801e4d6:	4605      	mov	r5, r0
 801e4d8:	2900      	cmp	r1, #0
 801e4da:	d041      	beq.n	801e560 <_free_r+0x8c>
 801e4dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e4e0:	1f0c      	subs	r4, r1, #4
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	bfb8      	it	lt
 801e4e6:	18e4      	addlt	r4, r4, r3
 801e4e8:	f7ff fd24 	bl	801df34 <__malloc_lock>
 801e4ec:	4a1d      	ldr	r2, [pc, #116]	@ (801e564 <_free_r+0x90>)
 801e4ee:	6813      	ldr	r3, [r2, #0]
 801e4f0:	b933      	cbnz	r3, 801e500 <_free_r+0x2c>
 801e4f2:	6063      	str	r3, [r4, #4]
 801e4f4:	6014      	str	r4, [r2, #0]
 801e4f6:	4628      	mov	r0, r5
 801e4f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e4fc:	f7ff bd20 	b.w	801df40 <__malloc_unlock>
 801e500:	42a3      	cmp	r3, r4
 801e502:	d908      	bls.n	801e516 <_free_r+0x42>
 801e504:	6820      	ldr	r0, [r4, #0]
 801e506:	1821      	adds	r1, r4, r0
 801e508:	428b      	cmp	r3, r1
 801e50a:	bf01      	itttt	eq
 801e50c:	6819      	ldreq	r1, [r3, #0]
 801e50e:	685b      	ldreq	r3, [r3, #4]
 801e510:	1809      	addeq	r1, r1, r0
 801e512:	6021      	streq	r1, [r4, #0]
 801e514:	e7ed      	b.n	801e4f2 <_free_r+0x1e>
 801e516:	461a      	mov	r2, r3
 801e518:	685b      	ldr	r3, [r3, #4]
 801e51a:	b10b      	cbz	r3, 801e520 <_free_r+0x4c>
 801e51c:	42a3      	cmp	r3, r4
 801e51e:	d9fa      	bls.n	801e516 <_free_r+0x42>
 801e520:	6811      	ldr	r1, [r2, #0]
 801e522:	1850      	adds	r0, r2, r1
 801e524:	42a0      	cmp	r0, r4
 801e526:	d10b      	bne.n	801e540 <_free_r+0x6c>
 801e528:	6820      	ldr	r0, [r4, #0]
 801e52a:	4401      	add	r1, r0
 801e52c:	1850      	adds	r0, r2, r1
 801e52e:	4283      	cmp	r3, r0
 801e530:	6011      	str	r1, [r2, #0]
 801e532:	d1e0      	bne.n	801e4f6 <_free_r+0x22>
 801e534:	6818      	ldr	r0, [r3, #0]
 801e536:	685b      	ldr	r3, [r3, #4]
 801e538:	6053      	str	r3, [r2, #4]
 801e53a:	4408      	add	r0, r1
 801e53c:	6010      	str	r0, [r2, #0]
 801e53e:	e7da      	b.n	801e4f6 <_free_r+0x22>
 801e540:	d902      	bls.n	801e548 <_free_r+0x74>
 801e542:	230c      	movs	r3, #12
 801e544:	602b      	str	r3, [r5, #0]
 801e546:	e7d6      	b.n	801e4f6 <_free_r+0x22>
 801e548:	6820      	ldr	r0, [r4, #0]
 801e54a:	1821      	adds	r1, r4, r0
 801e54c:	428b      	cmp	r3, r1
 801e54e:	bf04      	itt	eq
 801e550:	6819      	ldreq	r1, [r3, #0]
 801e552:	685b      	ldreq	r3, [r3, #4]
 801e554:	6063      	str	r3, [r4, #4]
 801e556:	bf04      	itt	eq
 801e558:	1809      	addeq	r1, r1, r0
 801e55a:	6021      	streq	r1, [r4, #0]
 801e55c:	6054      	str	r4, [r2, #4]
 801e55e:	e7ca      	b.n	801e4f6 <_free_r+0x22>
 801e560:	bd38      	pop	{r3, r4, r5, pc}
 801e562:	bf00      	nop
 801e564:	20010010 	.word	0x20010010

0801e568 <__ssputs_r>:
 801e568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e56c:	688e      	ldr	r6, [r1, #8]
 801e56e:	461f      	mov	r7, r3
 801e570:	42be      	cmp	r6, r7
 801e572:	680b      	ldr	r3, [r1, #0]
 801e574:	4682      	mov	sl, r0
 801e576:	460c      	mov	r4, r1
 801e578:	4690      	mov	r8, r2
 801e57a:	d82d      	bhi.n	801e5d8 <__ssputs_r+0x70>
 801e57c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e580:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801e584:	d026      	beq.n	801e5d4 <__ssputs_r+0x6c>
 801e586:	6965      	ldr	r5, [r4, #20]
 801e588:	6909      	ldr	r1, [r1, #16]
 801e58a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e58e:	eba3 0901 	sub.w	r9, r3, r1
 801e592:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e596:	1c7b      	adds	r3, r7, #1
 801e598:	444b      	add	r3, r9
 801e59a:	106d      	asrs	r5, r5, #1
 801e59c:	429d      	cmp	r5, r3
 801e59e:	bf38      	it	cc
 801e5a0:	461d      	movcc	r5, r3
 801e5a2:	0553      	lsls	r3, r2, #21
 801e5a4:	d527      	bpl.n	801e5f6 <__ssputs_r+0x8e>
 801e5a6:	4629      	mov	r1, r5
 801e5a8:	f7ff fc44 	bl	801de34 <_malloc_r>
 801e5ac:	4606      	mov	r6, r0
 801e5ae:	b360      	cbz	r0, 801e60a <__ssputs_r+0xa2>
 801e5b0:	6921      	ldr	r1, [r4, #16]
 801e5b2:	464a      	mov	r2, r9
 801e5b4:	f7ff ff61 	bl	801e47a <memcpy>
 801e5b8:	89a3      	ldrh	r3, [r4, #12]
 801e5ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801e5be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e5c2:	81a3      	strh	r3, [r4, #12]
 801e5c4:	6126      	str	r6, [r4, #16]
 801e5c6:	6165      	str	r5, [r4, #20]
 801e5c8:	444e      	add	r6, r9
 801e5ca:	eba5 0509 	sub.w	r5, r5, r9
 801e5ce:	6026      	str	r6, [r4, #0]
 801e5d0:	60a5      	str	r5, [r4, #8]
 801e5d2:	463e      	mov	r6, r7
 801e5d4:	42be      	cmp	r6, r7
 801e5d6:	d900      	bls.n	801e5da <__ssputs_r+0x72>
 801e5d8:	463e      	mov	r6, r7
 801e5da:	6820      	ldr	r0, [r4, #0]
 801e5dc:	4632      	mov	r2, r6
 801e5de:	4641      	mov	r1, r8
 801e5e0:	f7ff fe3b 	bl	801e25a <memmove>
 801e5e4:	68a3      	ldr	r3, [r4, #8]
 801e5e6:	1b9b      	subs	r3, r3, r6
 801e5e8:	60a3      	str	r3, [r4, #8]
 801e5ea:	6823      	ldr	r3, [r4, #0]
 801e5ec:	4433      	add	r3, r6
 801e5ee:	6023      	str	r3, [r4, #0]
 801e5f0:	2000      	movs	r0, #0
 801e5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e5f6:	462a      	mov	r2, r5
 801e5f8:	f000 fd35 	bl	801f066 <_realloc_r>
 801e5fc:	4606      	mov	r6, r0
 801e5fe:	2800      	cmp	r0, #0
 801e600:	d1e0      	bne.n	801e5c4 <__ssputs_r+0x5c>
 801e602:	6921      	ldr	r1, [r4, #16]
 801e604:	4650      	mov	r0, sl
 801e606:	f7ff ff65 	bl	801e4d4 <_free_r>
 801e60a:	230c      	movs	r3, #12
 801e60c:	f8ca 3000 	str.w	r3, [sl]
 801e610:	89a3      	ldrh	r3, [r4, #12]
 801e612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e616:	81a3      	strh	r3, [r4, #12]
 801e618:	f04f 30ff 	mov.w	r0, #4294967295
 801e61c:	e7e9      	b.n	801e5f2 <__ssputs_r+0x8a>
	...

0801e620 <_svfiprintf_r>:
 801e620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e624:	4698      	mov	r8, r3
 801e626:	898b      	ldrh	r3, [r1, #12]
 801e628:	061b      	lsls	r3, r3, #24
 801e62a:	b09d      	sub	sp, #116	@ 0x74
 801e62c:	4607      	mov	r7, r0
 801e62e:	460d      	mov	r5, r1
 801e630:	4614      	mov	r4, r2
 801e632:	d510      	bpl.n	801e656 <_svfiprintf_r+0x36>
 801e634:	690b      	ldr	r3, [r1, #16]
 801e636:	b973      	cbnz	r3, 801e656 <_svfiprintf_r+0x36>
 801e638:	2140      	movs	r1, #64	@ 0x40
 801e63a:	f7ff fbfb 	bl	801de34 <_malloc_r>
 801e63e:	6028      	str	r0, [r5, #0]
 801e640:	6128      	str	r0, [r5, #16]
 801e642:	b930      	cbnz	r0, 801e652 <_svfiprintf_r+0x32>
 801e644:	230c      	movs	r3, #12
 801e646:	603b      	str	r3, [r7, #0]
 801e648:	f04f 30ff 	mov.w	r0, #4294967295
 801e64c:	b01d      	add	sp, #116	@ 0x74
 801e64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e652:	2340      	movs	r3, #64	@ 0x40
 801e654:	616b      	str	r3, [r5, #20]
 801e656:	2300      	movs	r3, #0
 801e658:	9309      	str	r3, [sp, #36]	@ 0x24
 801e65a:	2320      	movs	r3, #32
 801e65c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e660:	f8cd 800c 	str.w	r8, [sp, #12]
 801e664:	2330      	movs	r3, #48	@ 0x30
 801e666:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801e804 <_svfiprintf_r+0x1e4>
 801e66a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e66e:	f04f 0901 	mov.w	r9, #1
 801e672:	4623      	mov	r3, r4
 801e674:	469a      	mov	sl, r3
 801e676:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e67a:	b10a      	cbz	r2, 801e680 <_svfiprintf_r+0x60>
 801e67c:	2a25      	cmp	r2, #37	@ 0x25
 801e67e:	d1f9      	bne.n	801e674 <_svfiprintf_r+0x54>
 801e680:	ebba 0b04 	subs.w	fp, sl, r4
 801e684:	d00b      	beq.n	801e69e <_svfiprintf_r+0x7e>
 801e686:	465b      	mov	r3, fp
 801e688:	4622      	mov	r2, r4
 801e68a:	4629      	mov	r1, r5
 801e68c:	4638      	mov	r0, r7
 801e68e:	f7ff ff6b 	bl	801e568 <__ssputs_r>
 801e692:	3001      	adds	r0, #1
 801e694:	f000 80a7 	beq.w	801e7e6 <_svfiprintf_r+0x1c6>
 801e698:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e69a:	445a      	add	r2, fp
 801e69c:	9209      	str	r2, [sp, #36]	@ 0x24
 801e69e:	f89a 3000 	ldrb.w	r3, [sl]
 801e6a2:	2b00      	cmp	r3, #0
 801e6a4:	f000 809f 	beq.w	801e7e6 <_svfiprintf_r+0x1c6>
 801e6a8:	2300      	movs	r3, #0
 801e6aa:	f04f 32ff 	mov.w	r2, #4294967295
 801e6ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e6b2:	f10a 0a01 	add.w	sl, sl, #1
 801e6b6:	9304      	str	r3, [sp, #16]
 801e6b8:	9307      	str	r3, [sp, #28]
 801e6ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e6be:	931a      	str	r3, [sp, #104]	@ 0x68
 801e6c0:	4654      	mov	r4, sl
 801e6c2:	2205      	movs	r2, #5
 801e6c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e6c8:	484e      	ldr	r0, [pc, #312]	@ (801e804 <_svfiprintf_r+0x1e4>)
 801e6ca:	f7e1 fdd1 	bl	8000270 <memchr>
 801e6ce:	9a04      	ldr	r2, [sp, #16]
 801e6d0:	b9d8      	cbnz	r0, 801e70a <_svfiprintf_r+0xea>
 801e6d2:	06d0      	lsls	r0, r2, #27
 801e6d4:	bf44      	itt	mi
 801e6d6:	2320      	movmi	r3, #32
 801e6d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e6dc:	0711      	lsls	r1, r2, #28
 801e6de:	bf44      	itt	mi
 801e6e0:	232b      	movmi	r3, #43	@ 0x2b
 801e6e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e6e6:	f89a 3000 	ldrb.w	r3, [sl]
 801e6ea:	2b2a      	cmp	r3, #42	@ 0x2a
 801e6ec:	d015      	beq.n	801e71a <_svfiprintf_r+0xfa>
 801e6ee:	9a07      	ldr	r2, [sp, #28]
 801e6f0:	4654      	mov	r4, sl
 801e6f2:	2000      	movs	r0, #0
 801e6f4:	f04f 0c0a 	mov.w	ip, #10
 801e6f8:	4621      	mov	r1, r4
 801e6fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e6fe:	3b30      	subs	r3, #48	@ 0x30
 801e700:	2b09      	cmp	r3, #9
 801e702:	d94b      	bls.n	801e79c <_svfiprintf_r+0x17c>
 801e704:	b1b0      	cbz	r0, 801e734 <_svfiprintf_r+0x114>
 801e706:	9207      	str	r2, [sp, #28]
 801e708:	e014      	b.n	801e734 <_svfiprintf_r+0x114>
 801e70a:	eba0 0308 	sub.w	r3, r0, r8
 801e70e:	fa09 f303 	lsl.w	r3, r9, r3
 801e712:	4313      	orrs	r3, r2
 801e714:	9304      	str	r3, [sp, #16]
 801e716:	46a2      	mov	sl, r4
 801e718:	e7d2      	b.n	801e6c0 <_svfiprintf_r+0xa0>
 801e71a:	9b03      	ldr	r3, [sp, #12]
 801e71c:	1d19      	adds	r1, r3, #4
 801e71e:	681b      	ldr	r3, [r3, #0]
 801e720:	9103      	str	r1, [sp, #12]
 801e722:	2b00      	cmp	r3, #0
 801e724:	bfbb      	ittet	lt
 801e726:	425b      	neglt	r3, r3
 801e728:	f042 0202 	orrlt.w	r2, r2, #2
 801e72c:	9307      	strge	r3, [sp, #28]
 801e72e:	9307      	strlt	r3, [sp, #28]
 801e730:	bfb8      	it	lt
 801e732:	9204      	strlt	r2, [sp, #16]
 801e734:	7823      	ldrb	r3, [r4, #0]
 801e736:	2b2e      	cmp	r3, #46	@ 0x2e
 801e738:	d10a      	bne.n	801e750 <_svfiprintf_r+0x130>
 801e73a:	7863      	ldrb	r3, [r4, #1]
 801e73c:	2b2a      	cmp	r3, #42	@ 0x2a
 801e73e:	d132      	bne.n	801e7a6 <_svfiprintf_r+0x186>
 801e740:	9b03      	ldr	r3, [sp, #12]
 801e742:	1d1a      	adds	r2, r3, #4
 801e744:	681b      	ldr	r3, [r3, #0]
 801e746:	9203      	str	r2, [sp, #12]
 801e748:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e74c:	3402      	adds	r4, #2
 801e74e:	9305      	str	r3, [sp, #20]
 801e750:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801e814 <_svfiprintf_r+0x1f4>
 801e754:	7821      	ldrb	r1, [r4, #0]
 801e756:	2203      	movs	r2, #3
 801e758:	4650      	mov	r0, sl
 801e75a:	f7e1 fd89 	bl	8000270 <memchr>
 801e75e:	b138      	cbz	r0, 801e770 <_svfiprintf_r+0x150>
 801e760:	9b04      	ldr	r3, [sp, #16]
 801e762:	eba0 000a 	sub.w	r0, r0, sl
 801e766:	2240      	movs	r2, #64	@ 0x40
 801e768:	4082      	lsls	r2, r0
 801e76a:	4313      	orrs	r3, r2
 801e76c:	3401      	adds	r4, #1
 801e76e:	9304      	str	r3, [sp, #16]
 801e770:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e774:	4824      	ldr	r0, [pc, #144]	@ (801e808 <_svfiprintf_r+0x1e8>)
 801e776:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e77a:	2206      	movs	r2, #6
 801e77c:	f7e1 fd78 	bl	8000270 <memchr>
 801e780:	2800      	cmp	r0, #0
 801e782:	d036      	beq.n	801e7f2 <_svfiprintf_r+0x1d2>
 801e784:	4b21      	ldr	r3, [pc, #132]	@ (801e80c <_svfiprintf_r+0x1ec>)
 801e786:	bb1b      	cbnz	r3, 801e7d0 <_svfiprintf_r+0x1b0>
 801e788:	9b03      	ldr	r3, [sp, #12]
 801e78a:	3307      	adds	r3, #7
 801e78c:	f023 0307 	bic.w	r3, r3, #7
 801e790:	3308      	adds	r3, #8
 801e792:	9303      	str	r3, [sp, #12]
 801e794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e796:	4433      	add	r3, r6
 801e798:	9309      	str	r3, [sp, #36]	@ 0x24
 801e79a:	e76a      	b.n	801e672 <_svfiprintf_r+0x52>
 801e79c:	fb0c 3202 	mla	r2, ip, r2, r3
 801e7a0:	460c      	mov	r4, r1
 801e7a2:	2001      	movs	r0, #1
 801e7a4:	e7a8      	b.n	801e6f8 <_svfiprintf_r+0xd8>
 801e7a6:	2300      	movs	r3, #0
 801e7a8:	3401      	adds	r4, #1
 801e7aa:	9305      	str	r3, [sp, #20]
 801e7ac:	4619      	mov	r1, r3
 801e7ae:	f04f 0c0a 	mov.w	ip, #10
 801e7b2:	4620      	mov	r0, r4
 801e7b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e7b8:	3a30      	subs	r2, #48	@ 0x30
 801e7ba:	2a09      	cmp	r2, #9
 801e7bc:	d903      	bls.n	801e7c6 <_svfiprintf_r+0x1a6>
 801e7be:	2b00      	cmp	r3, #0
 801e7c0:	d0c6      	beq.n	801e750 <_svfiprintf_r+0x130>
 801e7c2:	9105      	str	r1, [sp, #20]
 801e7c4:	e7c4      	b.n	801e750 <_svfiprintf_r+0x130>
 801e7c6:	fb0c 2101 	mla	r1, ip, r1, r2
 801e7ca:	4604      	mov	r4, r0
 801e7cc:	2301      	movs	r3, #1
 801e7ce:	e7f0      	b.n	801e7b2 <_svfiprintf_r+0x192>
 801e7d0:	ab03      	add	r3, sp, #12
 801e7d2:	9300      	str	r3, [sp, #0]
 801e7d4:	462a      	mov	r2, r5
 801e7d6:	4b0e      	ldr	r3, [pc, #56]	@ (801e810 <_svfiprintf_r+0x1f0>)
 801e7d8:	a904      	add	r1, sp, #16
 801e7da:	4638      	mov	r0, r7
 801e7dc:	f3af 8000 	nop.w
 801e7e0:	1c42      	adds	r2, r0, #1
 801e7e2:	4606      	mov	r6, r0
 801e7e4:	d1d6      	bne.n	801e794 <_svfiprintf_r+0x174>
 801e7e6:	89ab      	ldrh	r3, [r5, #12]
 801e7e8:	065b      	lsls	r3, r3, #25
 801e7ea:	f53f af2d 	bmi.w	801e648 <_svfiprintf_r+0x28>
 801e7ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e7f0:	e72c      	b.n	801e64c <_svfiprintf_r+0x2c>
 801e7f2:	ab03      	add	r3, sp, #12
 801e7f4:	9300      	str	r3, [sp, #0]
 801e7f6:	462a      	mov	r2, r5
 801e7f8:	4b05      	ldr	r3, [pc, #20]	@ (801e810 <_svfiprintf_r+0x1f0>)
 801e7fa:	a904      	add	r1, sp, #16
 801e7fc:	4638      	mov	r0, r7
 801e7fe:	f000 f9bb 	bl	801eb78 <_printf_i>
 801e802:	e7ed      	b.n	801e7e0 <_svfiprintf_r+0x1c0>
 801e804:	0806854f 	.word	0x0806854f
 801e808:	08068559 	.word	0x08068559
 801e80c:	00000000 	.word	0x00000000
 801e810:	0801e569 	.word	0x0801e569
 801e814:	08068555 	.word	0x08068555

0801e818 <__sfputc_r>:
 801e818:	6893      	ldr	r3, [r2, #8]
 801e81a:	3b01      	subs	r3, #1
 801e81c:	2b00      	cmp	r3, #0
 801e81e:	b410      	push	{r4}
 801e820:	6093      	str	r3, [r2, #8]
 801e822:	da08      	bge.n	801e836 <__sfputc_r+0x1e>
 801e824:	6994      	ldr	r4, [r2, #24]
 801e826:	42a3      	cmp	r3, r4
 801e828:	db01      	blt.n	801e82e <__sfputc_r+0x16>
 801e82a:	290a      	cmp	r1, #10
 801e82c:	d103      	bne.n	801e836 <__sfputc_r+0x1e>
 801e82e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e832:	f000 bb7d 	b.w	801ef30 <__swbuf_r>
 801e836:	6813      	ldr	r3, [r2, #0]
 801e838:	1c58      	adds	r0, r3, #1
 801e83a:	6010      	str	r0, [r2, #0]
 801e83c:	7019      	strb	r1, [r3, #0]
 801e83e:	4608      	mov	r0, r1
 801e840:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e844:	4770      	bx	lr

0801e846 <__sfputs_r>:
 801e846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e848:	4606      	mov	r6, r0
 801e84a:	460f      	mov	r7, r1
 801e84c:	4614      	mov	r4, r2
 801e84e:	18d5      	adds	r5, r2, r3
 801e850:	42ac      	cmp	r4, r5
 801e852:	d101      	bne.n	801e858 <__sfputs_r+0x12>
 801e854:	2000      	movs	r0, #0
 801e856:	e007      	b.n	801e868 <__sfputs_r+0x22>
 801e858:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e85c:	463a      	mov	r2, r7
 801e85e:	4630      	mov	r0, r6
 801e860:	f7ff ffda 	bl	801e818 <__sfputc_r>
 801e864:	1c43      	adds	r3, r0, #1
 801e866:	d1f3      	bne.n	801e850 <__sfputs_r+0xa>
 801e868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e86c <_vfiprintf_r>:
 801e86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e870:	460d      	mov	r5, r1
 801e872:	b09d      	sub	sp, #116	@ 0x74
 801e874:	4614      	mov	r4, r2
 801e876:	4698      	mov	r8, r3
 801e878:	4606      	mov	r6, r0
 801e87a:	b118      	cbz	r0, 801e884 <_vfiprintf_r+0x18>
 801e87c:	6a03      	ldr	r3, [r0, #32]
 801e87e:	b90b      	cbnz	r3, 801e884 <_vfiprintf_r+0x18>
 801e880:	f7ff fc2e 	bl	801e0e0 <__sinit>
 801e884:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e886:	07d9      	lsls	r1, r3, #31
 801e888:	d405      	bmi.n	801e896 <_vfiprintf_r+0x2a>
 801e88a:	89ab      	ldrh	r3, [r5, #12]
 801e88c:	059a      	lsls	r2, r3, #22
 801e88e:	d402      	bmi.n	801e896 <_vfiprintf_r+0x2a>
 801e890:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e892:	f7ff fdf0 	bl	801e476 <__retarget_lock_acquire_recursive>
 801e896:	89ab      	ldrh	r3, [r5, #12]
 801e898:	071b      	lsls	r3, r3, #28
 801e89a:	d501      	bpl.n	801e8a0 <_vfiprintf_r+0x34>
 801e89c:	692b      	ldr	r3, [r5, #16]
 801e89e:	b99b      	cbnz	r3, 801e8c8 <_vfiprintf_r+0x5c>
 801e8a0:	4629      	mov	r1, r5
 801e8a2:	4630      	mov	r0, r6
 801e8a4:	f000 fb82 	bl	801efac <__swsetup_r>
 801e8a8:	b170      	cbz	r0, 801e8c8 <_vfiprintf_r+0x5c>
 801e8aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e8ac:	07dc      	lsls	r4, r3, #31
 801e8ae:	d504      	bpl.n	801e8ba <_vfiprintf_r+0x4e>
 801e8b0:	f04f 30ff 	mov.w	r0, #4294967295
 801e8b4:	b01d      	add	sp, #116	@ 0x74
 801e8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8ba:	89ab      	ldrh	r3, [r5, #12]
 801e8bc:	0598      	lsls	r0, r3, #22
 801e8be:	d4f7      	bmi.n	801e8b0 <_vfiprintf_r+0x44>
 801e8c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e8c2:	f7ff fdd9 	bl	801e478 <__retarget_lock_release_recursive>
 801e8c6:	e7f3      	b.n	801e8b0 <_vfiprintf_r+0x44>
 801e8c8:	2300      	movs	r3, #0
 801e8ca:	9309      	str	r3, [sp, #36]	@ 0x24
 801e8cc:	2320      	movs	r3, #32
 801e8ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e8d2:	f8cd 800c 	str.w	r8, [sp, #12]
 801e8d6:	2330      	movs	r3, #48	@ 0x30
 801e8d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ea88 <_vfiprintf_r+0x21c>
 801e8dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e8e0:	f04f 0901 	mov.w	r9, #1
 801e8e4:	4623      	mov	r3, r4
 801e8e6:	469a      	mov	sl, r3
 801e8e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e8ec:	b10a      	cbz	r2, 801e8f2 <_vfiprintf_r+0x86>
 801e8ee:	2a25      	cmp	r2, #37	@ 0x25
 801e8f0:	d1f9      	bne.n	801e8e6 <_vfiprintf_r+0x7a>
 801e8f2:	ebba 0b04 	subs.w	fp, sl, r4
 801e8f6:	d00b      	beq.n	801e910 <_vfiprintf_r+0xa4>
 801e8f8:	465b      	mov	r3, fp
 801e8fa:	4622      	mov	r2, r4
 801e8fc:	4629      	mov	r1, r5
 801e8fe:	4630      	mov	r0, r6
 801e900:	f7ff ffa1 	bl	801e846 <__sfputs_r>
 801e904:	3001      	adds	r0, #1
 801e906:	f000 80a7 	beq.w	801ea58 <_vfiprintf_r+0x1ec>
 801e90a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e90c:	445a      	add	r2, fp
 801e90e:	9209      	str	r2, [sp, #36]	@ 0x24
 801e910:	f89a 3000 	ldrb.w	r3, [sl]
 801e914:	2b00      	cmp	r3, #0
 801e916:	f000 809f 	beq.w	801ea58 <_vfiprintf_r+0x1ec>
 801e91a:	2300      	movs	r3, #0
 801e91c:	f04f 32ff 	mov.w	r2, #4294967295
 801e920:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e924:	f10a 0a01 	add.w	sl, sl, #1
 801e928:	9304      	str	r3, [sp, #16]
 801e92a:	9307      	str	r3, [sp, #28]
 801e92c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e930:	931a      	str	r3, [sp, #104]	@ 0x68
 801e932:	4654      	mov	r4, sl
 801e934:	2205      	movs	r2, #5
 801e936:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e93a:	4853      	ldr	r0, [pc, #332]	@ (801ea88 <_vfiprintf_r+0x21c>)
 801e93c:	f7e1 fc98 	bl	8000270 <memchr>
 801e940:	9a04      	ldr	r2, [sp, #16]
 801e942:	b9d8      	cbnz	r0, 801e97c <_vfiprintf_r+0x110>
 801e944:	06d1      	lsls	r1, r2, #27
 801e946:	bf44      	itt	mi
 801e948:	2320      	movmi	r3, #32
 801e94a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e94e:	0713      	lsls	r3, r2, #28
 801e950:	bf44      	itt	mi
 801e952:	232b      	movmi	r3, #43	@ 0x2b
 801e954:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e958:	f89a 3000 	ldrb.w	r3, [sl]
 801e95c:	2b2a      	cmp	r3, #42	@ 0x2a
 801e95e:	d015      	beq.n	801e98c <_vfiprintf_r+0x120>
 801e960:	9a07      	ldr	r2, [sp, #28]
 801e962:	4654      	mov	r4, sl
 801e964:	2000      	movs	r0, #0
 801e966:	f04f 0c0a 	mov.w	ip, #10
 801e96a:	4621      	mov	r1, r4
 801e96c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e970:	3b30      	subs	r3, #48	@ 0x30
 801e972:	2b09      	cmp	r3, #9
 801e974:	d94b      	bls.n	801ea0e <_vfiprintf_r+0x1a2>
 801e976:	b1b0      	cbz	r0, 801e9a6 <_vfiprintf_r+0x13a>
 801e978:	9207      	str	r2, [sp, #28]
 801e97a:	e014      	b.n	801e9a6 <_vfiprintf_r+0x13a>
 801e97c:	eba0 0308 	sub.w	r3, r0, r8
 801e980:	fa09 f303 	lsl.w	r3, r9, r3
 801e984:	4313      	orrs	r3, r2
 801e986:	9304      	str	r3, [sp, #16]
 801e988:	46a2      	mov	sl, r4
 801e98a:	e7d2      	b.n	801e932 <_vfiprintf_r+0xc6>
 801e98c:	9b03      	ldr	r3, [sp, #12]
 801e98e:	1d19      	adds	r1, r3, #4
 801e990:	681b      	ldr	r3, [r3, #0]
 801e992:	9103      	str	r1, [sp, #12]
 801e994:	2b00      	cmp	r3, #0
 801e996:	bfbb      	ittet	lt
 801e998:	425b      	neglt	r3, r3
 801e99a:	f042 0202 	orrlt.w	r2, r2, #2
 801e99e:	9307      	strge	r3, [sp, #28]
 801e9a0:	9307      	strlt	r3, [sp, #28]
 801e9a2:	bfb8      	it	lt
 801e9a4:	9204      	strlt	r2, [sp, #16]
 801e9a6:	7823      	ldrb	r3, [r4, #0]
 801e9a8:	2b2e      	cmp	r3, #46	@ 0x2e
 801e9aa:	d10a      	bne.n	801e9c2 <_vfiprintf_r+0x156>
 801e9ac:	7863      	ldrb	r3, [r4, #1]
 801e9ae:	2b2a      	cmp	r3, #42	@ 0x2a
 801e9b0:	d132      	bne.n	801ea18 <_vfiprintf_r+0x1ac>
 801e9b2:	9b03      	ldr	r3, [sp, #12]
 801e9b4:	1d1a      	adds	r2, r3, #4
 801e9b6:	681b      	ldr	r3, [r3, #0]
 801e9b8:	9203      	str	r2, [sp, #12]
 801e9ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e9be:	3402      	adds	r4, #2
 801e9c0:	9305      	str	r3, [sp, #20]
 801e9c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ea98 <_vfiprintf_r+0x22c>
 801e9c6:	7821      	ldrb	r1, [r4, #0]
 801e9c8:	2203      	movs	r2, #3
 801e9ca:	4650      	mov	r0, sl
 801e9cc:	f7e1 fc50 	bl	8000270 <memchr>
 801e9d0:	b138      	cbz	r0, 801e9e2 <_vfiprintf_r+0x176>
 801e9d2:	9b04      	ldr	r3, [sp, #16]
 801e9d4:	eba0 000a 	sub.w	r0, r0, sl
 801e9d8:	2240      	movs	r2, #64	@ 0x40
 801e9da:	4082      	lsls	r2, r0
 801e9dc:	4313      	orrs	r3, r2
 801e9de:	3401      	adds	r4, #1
 801e9e0:	9304      	str	r3, [sp, #16]
 801e9e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e9e6:	4829      	ldr	r0, [pc, #164]	@ (801ea8c <_vfiprintf_r+0x220>)
 801e9e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e9ec:	2206      	movs	r2, #6
 801e9ee:	f7e1 fc3f 	bl	8000270 <memchr>
 801e9f2:	2800      	cmp	r0, #0
 801e9f4:	d03f      	beq.n	801ea76 <_vfiprintf_r+0x20a>
 801e9f6:	4b26      	ldr	r3, [pc, #152]	@ (801ea90 <_vfiprintf_r+0x224>)
 801e9f8:	bb1b      	cbnz	r3, 801ea42 <_vfiprintf_r+0x1d6>
 801e9fa:	9b03      	ldr	r3, [sp, #12]
 801e9fc:	3307      	adds	r3, #7
 801e9fe:	f023 0307 	bic.w	r3, r3, #7
 801ea02:	3308      	adds	r3, #8
 801ea04:	9303      	str	r3, [sp, #12]
 801ea06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea08:	443b      	add	r3, r7
 801ea0a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ea0c:	e76a      	b.n	801e8e4 <_vfiprintf_r+0x78>
 801ea0e:	fb0c 3202 	mla	r2, ip, r2, r3
 801ea12:	460c      	mov	r4, r1
 801ea14:	2001      	movs	r0, #1
 801ea16:	e7a8      	b.n	801e96a <_vfiprintf_r+0xfe>
 801ea18:	2300      	movs	r3, #0
 801ea1a:	3401      	adds	r4, #1
 801ea1c:	9305      	str	r3, [sp, #20]
 801ea1e:	4619      	mov	r1, r3
 801ea20:	f04f 0c0a 	mov.w	ip, #10
 801ea24:	4620      	mov	r0, r4
 801ea26:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ea2a:	3a30      	subs	r2, #48	@ 0x30
 801ea2c:	2a09      	cmp	r2, #9
 801ea2e:	d903      	bls.n	801ea38 <_vfiprintf_r+0x1cc>
 801ea30:	2b00      	cmp	r3, #0
 801ea32:	d0c6      	beq.n	801e9c2 <_vfiprintf_r+0x156>
 801ea34:	9105      	str	r1, [sp, #20]
 801ea36:	e7c4      	b.n	801e9c2 <_vfiprintf_r+0x156>
 801ea38:	fb0c 2101 	mla	r1, ip, r1, r2
 801ea3c:	4604      	mov	r4, r0
 801ea3e:	2301      	movs	r3, #1
 801ea40:	e7f0      	b.n	801ea24 <_vfiprintf_r+0x1b8>
 801ea42:	ab03      	add	r3, sp, #12
 801ea44:	9300      	str	r3, [sp, #0]
 801ea46:	462a      	mov	r2, r5
 801ea48:	4b12      	ldr	r3, [pc, #72]	@ (801ea94 <_vfiprintf_r+0x228>)
 801ea4a:	a904      	add	r1, sp, #16
 801ea4c:	4630      	mov	r0, r6
 801ea4e:	f3af 8000 	nop.w
 801ea52:	4607      	mov	r7, r0
 801ea54:	1c78      	adds	r0, r7, #1
 801ea56:	d1d6      	bne.n	801ea06 <_vfiprintf_r+0x19a>
 801ea58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ea5a:	07d9      	lsls	r1, r3, #31
 801ea5c:	d405      	bmi.n	801ea6a <_vfiprintf_r+0x1fe>
 801ea5e:	89ab      	ldrh	r3, [r5, #12]
 801ea60:	059a      	lsls	r2, r3, #22
 801ea62:	d402      	bmi.n	801ea6a <_vfiprintf_r+0x1fe>
 801ea64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ea66:	f7ff fd07 	bl	801e478 <__retarget_lock_release_recursive>
 801ea6a:	89ab      	ldrh	r3, [r5, #12]
 801ea6c:	065b      	lsls	r3, r3, #25
 801ea6e:	f53f af1f 	bmi.w	801e8b0 <_vfiprintf_r+0x44>
 801ea72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ea74:	e71e      	b.n	801e8b4 <_vfiprintf_r+0x48>
 801ea76:	ab03      	add	r3, sp, #12
 801ea78:	9300      	str	r3, [sp, #0]
 801ea7a:	462a      	mov	r2, r5
 801ea7c:	4b05      	ldr	r3, [pc, #20]	@ (801ea94 <_vfiprintf_r+0x228>)
 801ea7e:	a904      	add	r1, sp, #16
 801ea80:	4630      	mov	r0, r6
 801ea82:	f000 f879 	bl	801eb78 <_printf_i>
 801ea86:	e7e4      	b.n	801ea52 <_vfiprintf_r+0x1e6>
 801ea88:	0806854f 	.word	0x0806854f
 801ea8c:	08068559 	.word	0x08068559
 801ea90:	00000000 	.word	0x00000000
 801ea94:	0801e847 	.word	0x0801e847
 801ea98:	08068555 	.word	0x08068555

0801ea9c <_printf_common>:
 801ea9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eaa0:	4616      	mov	r6, r2
 801eaa2:	4698      	mov	r8, r3
 801eaa4:	688a      	ldr	r2, [r1, #8]
 801eaa6:	690b      	ldr	r3, [r1, #16]
 801eaa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801eaac:	4293      	cmp	r3, r2
 801eaae:	bfb8      	it	lt
 801eab0:	4613      	movlt	r3, r2
 801eab2:	6033      	str	r3, [r6, #0]
 801eab4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801eab8:	4607      	mov	r7, r0
 801eaba:	460c      	mov	r4, r1
 801eabc:	b10a      	cbz	r2, 801eac2 <_printf_common+0x26>
 801eabe:	3301      	adds	r3, #1
 801eac0:	6033      	str	r3, [r6, #0]
 801eac2:	6823      	ldr	r3, [r4, #0]
 801eac4:	0699      	lsls	r1, r3, #26
 801eac6:	bf42      	ittt	mi
 801eac8:	6833      	ldrmi	r3, [r6, #0]
 801eaca:	3302      	addmi	r3, #2
 801eacc:	6033      	strmi	r3, [r6, #0]
 801eace:	6825      	ldr	r5, [r4, #0]
 801ead0:	f015 0506 	ands.w	r5, r5, #6
 801ead4:	d106      	bne.n	801eae4 <_printf_common+0x48>
 801ead6:	f104 0a19 	add.w	sl, r4, #25
 801eada:	68e3      	ldr	r3, [r4, #12]
 801eadc:	6832      	ldr	r2, [r6, #0]
 801eade:	1a9b      	subs	r3, r3, r2
 801eae0:	42ab      	cmp	r3, r5
 801eae2:	dc26      	bgt.n	801eb32 <_printf_common+0x96>
 801eae4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801eae8:	6822      	ldr	r2, [r4, #0]
 801eaea:	3b00      	subs	r3, #0
 801eaec:	bf18      	it	ne
 801eaee:	2301      	movne	r3, #1
 801eaf0:	0692      	lsls	r2, r2, #26
 801eaf2:	d42b      	bmi.n	801eb4c <_printf_common+0xb0>
 801eaf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801eaf8:	4641      	mov	r1, r8
 801eafa:	4638      	mov	r0, r7
 801eafc:	47c8      	blx	r9
 801eafe:	3001      	adds	r0, #1
 801eb00:	d01e      	beq.n	801eb40 <_printf_common+0xa4>
 801eb02:	6823      	ldr	r3, [r4, #0]
 801eb04:	6922      	ldr	r2, [r4, #16]
 801eb06:	f003 0306 	and.w	r3, r3, #6
 801eb0a:	2b04      	cmp	r3, #4
 801eb0c:	bf02      	ittt	eq
 801eb0e:	68e5      	ldreq	r5, [r4, #12]
 801eb10:	6833      	ldreq	r3, [r6, #0]
 801eb12:	1aed      	subeq	r5, r5, r3
 801eb14:	68a3      	ldr	r3, [r4, #8]
 801eb16:	bf0c      	ite	eq
 801eb18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801eb1c:	2500      	movne	r5, #0
 801eb1e:	4293      	cmp	r3, r2
 801eb20:	bfc4      	itt	gt
 801eb22:	1a9b      	subgt	r3, r3, r2
 801eb24:	18ed      	addgt	r5, r5, r3
 801eb26:	2600      	movs	r6, #0
 801eb28:	341a      	adds	r4, #26
 801eb2a:	42b5      	cmp	r5, r6
 801eb2c:	d11a      	bne.n	801eb64 <_printf_common+0xc8>
 801eb2e:	2000      	movs	r0, #0
 801eb30:	e008      	b.n	801eb44 <_printf_common+0xa8>
 801eb32:	2301      	movs	r3, #1
 801eb34:	4652      	mov	r2, sl
 801eb36:	4641      	mov	r1, r8
 801eb38:	4638      	mov	r0, r7
 801eb3a:	47c8      	blx	r9
 801eb3c:	3001      	adds	r0, #1
 801eb3e:	d103      	bne.n	801eb48 <_printf_common+0xac>
 801eb40:	f04f 30ff 	mov.w	r0, #4294967295
 801eb44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb48:	3501      	adds	r5, #1
 801eb4a:	e7c6      	b.n	801eada <_printf_common+0x3e>
 801eb4c:	18e1      	adds	r1, r4, r3
 801eb4e:	1c5a      	adds	r2, r3, #1
 801eb50:	2030      	movs	r0, #48	@ 0x30
 801eb52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801eb56:	4422      	add	r2, r4
 801eb58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801eb5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801eb60:	3302      	adds	r3, #2
 801eb62:	e7c7      	b.n	801eaf4 <_printf_common+0x58>
 801eb64:	2301      	movs	r3, #1
 801eb66:	4622      	mov	r2, r4
 801eb68:	4641      	mov	r1, r8
 801eb6a:	4638      	mov	r0, r7
 801eb6c:	47c8      	blx	r9
 801eb6e:	3001      	adds	r0, #1
 801eb70:	d0e6      	beq.n	801eb40 <_printf_common+0xa4>
 801eb72:	3601      	adds	r6, #1
 801eb74:	e7d9      	b.n	801eb2a <_printf_common+0x8e>
	...

0801eb78 <_printf_i>:
 801eb78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801eb7c:	7e0f      	ldrb	r7, [r1, #24]
 801eb7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801eb80:	2f78      	cmp	r7, #120	@ 0x78
 801eb82:	4691      	mov	r9, r2
 801eb84:	4680      	mov	r8, r0
 801eb86:	460c      	mov	r4, r1
 801eb88:	469a      	mov	sl, r3
 801eb8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801eb8e:	d807      	bhi.n	801eba0 <_printf_i+0x28>
 801eb90:	2f62      	cmp	r7, #98	@ 0x62
 801eb92:	d80a      	bhi.n	801ebaa <_printf_i+0x32>
 801eb94:	2f00      	cmp	r7, #0
 801eb96:	f000 80d1 	beq.w	801ed3c <_printf_i+0x1c4>
 801eb9a:	2f58      	cmp	r7, #88	@ 0x58
 801eb9c:	f000 80b8 	beq.w	801ed10 <_printf_i+0x198>
 801eba0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801eba4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801eba8:	e03a      	b.n	801ec20 <_printf_i+0xa8>
 801ebaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ebae:	2b15      	cmp	r3, #21
 801ebb0:	d8f6      	bhi.n	801eba0 <_printf_i+0x28>
 801ebb2:	a101      	add	r1, pc, #4	@ (adr r1, 801ebb8 <_printf_i+0x40>)
 801ebb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ebb8:	0801ec11 	.word	0x0801ec11
 801ebbc:	0801ec25 	.word	0x0801ec25
 801ebc0:	0801eba1 	.word	0x0801eba1
 801ebc4:	0801eba1 	.word	0x0801eba1
 801ebc8:	0801eba1 	.word	0x0801eba1
 801ebcc:	0801eba1 	.word	0x0801eba1
 801ebd0:	0801ec25 	.word	0x0801ec25
 801ebd4:	0801eba1 	.word	0x0801eba1
 801ebd8:	0801eba1 	.word	0x0801eba1
 801ebdc:	0801eba1 	.word	0x0801eba1
 801ebe0:	0801eba1 	.word	0x0801eba1
 801ebe4:	0801ed23 	.word	0x0801ed23
 801ebe8:	0801ec4f 	.word	0x0801ec4f
 801ebec:	0801ecdd 	.word	0x0801ecdd
 801ebf0:	0801eba1 	.word	0x0801eba1
 801ebf4:	0801eba1 	.word	0x0801eba1
 801ebf8:	0801ed45 	.word	0x0801ed45
 801ebfc:	0801eba1 	.word	0x0801eba1
 801ec00:	0801ec4f 	.word	0x0801ec4f
 801ec04:	0801eba1 	.word	0x0801eba1
 801ec08:	0801eba1 	.word	0x0801eba1
 801ec0c:	0801ece5 	.word	0x0801ece5
 801ec10:	6833      	ldr	r3, [r6, #0]
 801ec12:	1d1a      	adds	r2, r3, #4
 801ec14:	681b      	ldr	r3, [r3, #0]
 801ec16:	6032      	str	r2, [r6, #0]
 801ec18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ec1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801ec20:	2301      	movs	r3, #1
 801ec22:	e09c      	b.n	801ed5e <_printf_i+0x1e6>
 801ec24:	6833      	ldr	r3, [r6, #0]
 801ec26:	6820      	ldr	r0, [r4, #0]
 801ec28:	1d19      	adds	r1, r3, #4
 801ec2a:	6031      	str	r1, [r6, #0]
 801ec2c:	0606      	lsls	r6, r0, #24
 801ec2e:	d501      	bpl.n	801ec34 <_printf_i+0xbc>
 801ec30:	681d      	ldr	r5, [r3, #0]
 801ec32:	e003      	b.n	801ec3c <_printf_i+0xc4>
 801ec34:	0645      	lsls	r5, r0, #25
 801ec36:	d5fb      	bpl.n	801ec30 <_printf_i+0xb8>
 801ec38:	f9b3 5000 	ldrsh.w	r5, [r3]
 801ec3c:	2d00      	cmp	r5, #0
 801ec3e:	da03      	bge.n	801ec48 <_printf_i+0xd0>
 801ec40:	232d      	movs	r3, #45	@ 0x2d
 801ec42:	426d      	negs	r5, r5
 801ec44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ec48:	4858      	ldr	r0, [pc, #352]	@ (801edac <_printf_i+0x234>)
 801ec4a:	230a      	movs	r3, #10
 801ec4c:	e011      	b.n	801ec72 <_printf_i+0xfa>
 801ec4e:	6821      	ldr	r1, [r4, #0]
 801ec50:	6833      	ldr	r3, [r6, #0]
 801ec52:	0608      	lsls	r0, r1, #24
 801ec54:	f853 5b04 	ldr.w	r5, [r3], #4
 801ec58:	d402      	bmi.n	801ec60 <_printf_i+0xe8>
 801ec5a:	0649      	lsls	r1, r1, #25
 801ec5c:	bf48      	it	mi
 801ec5e:	b2ad      	uxthmi	r5, r5
 801ec60:	2f6f      	cmp	r7, #111	@ 0x6f
 801ec62:	4852      	ldr	r0, [pc, #328]	@ (801edac <_printf_i+0x234>)
 801ec64:	6033      	str	r3, [r6, #0]
 801ec66:	bf14      	ite	ne
 801ec68:	230a      	movne	r3, #10
 801ec6a:	2308      	moveq	r3, #8
 801ec6c:	2100      	movs	r1, #0
 801ec6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ec72:	6866      	ldr	r6, [r4, #4]
 801ec74:	60a6      	str	r6, [r4, #8]
 801ec76:	2e00      	cmp	r6, #0
 801ec78:	db05      	blt.n	801ec86 <_printf_i+0x10e>
 801ec7a:	6821      	ldr	r1, [r4, #0]
 801ec7c:	432e      	orrs	r6, r5
 801ec7e:	f021 0104 	bic.w	r1, r1, #4
 801ec82:	6021      	str	r1, [r4, #0]
 801ec84:	d04b      	beq.n	801ed1e <_printf_i+0x1a6>
 801ec86:	4616      	mov	r6, r2
 801ec88:	fbb5 f1f3 	udiv	r1, r5, r3
 801ec8c:	fb03 5711 	mls	r7, r3, r1, r5
 801ec90:	5dc7      	ldrb	r7, [r0, r7]
 801ec92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ec96:	462f      	mov	r7, r5
 801ec98:	42bb      	cmp	r3, r7
 801ec9a:	460d      	mov	r5, r1
 801ec9c:	d9f4      	bls.n	801ec88 <_printf_i+0x110>
 801ec9e:	2b08      	cmp	r3, #8
 801eca0:	d10b      	bne.n	801ecba <_printf_i+0x142>
 801eca2:	6823      	ldr	r3, [r4, #0]
 801eca4:	07df      	lsls	r7, r3, #31
 801eca6:	d508      	bpl.n	801ecba <_printf_i+0x142>
 801eca8:	6923      	ldr	r3, [r4, #16]
 801ecaa:	6861      	ldr	r1, [r4, #4]
 801ecac:	4299      	cmp	r1, r3
 801ecae:	bfde      	ittt	le
 801ecb0:	2330      	movle	r3, #48	@ 0x30
 801ecb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ecb6:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ecba:	1b92      	subs	r2, r2, r6
 801ecbc:	6122      	str	r2, [r4, #16]
 801ecbe:	f8cd a000 	str.w	sl, [sp]
 801ecc2:	464b      	mov	r3, r9
 801ecc4:	aa03      	add	r2, sp, #12
 801ecc6:	4621      	mov	r1, r4
 801ecc8:	4640      	mov	r0, r8
 801ecca:	f7ff fee7 	bl	801ea9c <_printf_common>
 801ecce:	3001      	adds	r0, #1
 801ecd0:	d14a      	bne.n	801ed68 <_printf_i+0x1f0>
 801ecd2:	f04f 30ff 	mov.w	r0, #4294967295
 801ecd6:	b004      	add	sp, #16
 801ecd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ecdc:	6823      	ldr	r3, [r4, #0]
 801ecde:	f043 0320 	orr.w	r3, r3, #32
 801ece2:	6023      	str	r3, [r4, #0]
 801ece4:	4832      	ldr	r0, [pc, #200]	@ (801edb0 <_printf_i+0x238>)
 801ece6:	2778      	movs	r7, #120	@ 0x78
 801ece8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ecec:	6823      	ldr	r3, [r4, #0]
 801ecee:	6831      	ldr	r1, [r6, #0]
 801ecf0:	061f      	lsls	r7, r3, #24
 801ecf2:	f851 5b04 	ldr.w	r5, [r1], #4
 801ecf6:	d402      	bmi.n	801ecfe <_printf_i+0x186>
 801ecf8:	065f      	lsls	r7, r3, #25
 801ecfa:	bf48      	it	mi
 801ecfc:	b2ad      	uxthmi	r5, r5
 801ecfe:	6031      	str	r1, [r6, #0]
 801ed00:	07d9      	lsls	r1, r3, #31
 801ed02:	bf44      	itt	mi
 801ed04:	f043 0320 	orrmi.w	r3, r3, #32
 801ed08:	6023      	strmi	r3, [r4, #0]
 801ed0a:	b11d      	cbz	r5, 801ed14 <_printf_i+0x19c>
 801ed0c:	2310      	movs	r3, #16
 801ed0e:	e7ad      	b.n	801ec6c <_printf_i+0xf4>
 801ed10:	4826      	ldr	r0, [pc, #152]	@ (801edac <_printf_i+0x234>)
 801ed12:	e7e9      	b.n	801ece8 <_printf_i+0x170>
 801ed14:	6823      	ldr	r3, [r4, #0]
 801ed16:	f023 0320 	bic.w	r3, r3, #32
 801ed1a:	6023      	str	r3, [r4, #0]
 801ed1c:	e7f6      	b.n	801ed0c <_printf_i+0x194>
 801ed1e:	4616      	mov	r6, r2
 801ed20:	e7bd      	b.n	801ec9e <_printf_i+0x126>
 801ed22:	6833      	ldr	r3, [r6, #0]
 801ed24:	6825      	ldr	r5, [r4, #0]
 801ed26:	6961      	ldr	r1, [r4, #20]
 801ed28:	1d18      	adds	r0, r3, #4
 801ed2a:	6030      	str	r0, [r6, #0]
 801ed2c:	062e      	lsls	r6, r5, #24
 801ed2e:	681b      	ldr	r3, [r3, #0]
 801ed30:	d501      	bpl.n	801ed36 <_printf_i+0x1be>
 801ed32:	6019      	str	r1, [r3, #0]
 801ed34:	e002      	b.n	801ed3c <_printf_i+0x1c4>
 801ed36:	0668      	lsls	r0, r5, #25
 801ed38:	d5fb      	bpl.n	801ed32 <_printf_i+0x1ba>
 801ed3a:	8019      	strh	r1, [r3, #0]
 801ed3c:	2300      	movs	r3, #0
 801ed3e:	6123      	str	r3, [r4, #16]
 801ed40:	4616      	mov	r6, r2
 801ed42:	e7bc      	b.n	801ecbe <_printf_i+0x146>
 801ed44:	6833      	ldr	r3, [r6, #0]
 801ed46:	1d1a      	adds	r2, r3, #4
 801ed48:	6032      	str	r2, [r6, #0]
 801ed4a:	681e      	ldr	r6, [r3, #0]
 801ed4c:	6862      	ldr	r2, [r4, #4]
 801ed4e:	2100      	movs	r1, #0
 801ed50:	4630      	mov	r0, r6
 801ed52:	f7e1 fa8d 	bl	8000270 <memchr>
 801ed56:	b108      	cbz	r0, 801ed5c <_printf_i+0x1e4>
 801ed58:	1b80      	subs	r0, r0, r6
 801ed5a:	6060      	str	r0, [r4, #4]
 801ed5c:	6863      	ldr	r3, [r4, #4]
 801ed5e:	6123      	str	r3, [r4, #16]
 801ed60:	2300      	movs	r3, #0
 801ed62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ed66:	e7aa      	b.n	801ecbe <_printf_i+0x146>
 801ed68:	6923      	ldr	r3, [r4, #16]
 801ed6a:	4632      	mov	r2, r6
 801ed6c:	4649      	mov	r1, r9
 801ed6e:	4640      	mov	r0, r8
 801ed70:	47d0      	blx	sl
 801ed72:	3001      	adds	r0, #1
 801ed74:	d0ad      	beq.n	801ecd2 <_printf_i+0x15a>
 801ed76:	6823      	ldr	r3, [r4, #0]
 801ed78:	079b      	lsls	r3, r3, #30
 801ed7a:	d413      	bmi.n	801eda4 <_printf_i+0x22c>
 801ed7c:	68e0      	ldr	r0, [r4, #12]
 801ed7e:	9b03      	ldr	r3, [sp, #12]
 801ed80:	4298      	cmp	r0, r3
 801ed82:	bfb8      	it	lt
 801ed84:	4618      	movlt	r0, r3
 801ed86:	e7a6      	b.n	801ecd6 <_printf_i+0x15e>
 801ed88:	2301      	movs	r3, #1
 801ed8a:	4632      	mov	r2, r6
 801ed8c:	4649      	mov	r1, r9
 801ed8e:	4640      	mov	r0, r8
 801ed90:	47d0      	blx	sl
 801ed92:	3001      	adds	r0, #1
 801ed94:	d09d      	beq.n	801ecd2 <_printf_i+0x15a>
 801ed96:	3501      	adds	r5, #1
 801ed98:	68e3      	ldr	r3, [r4, #12]
 801ed9a:	9903      	ldr	r1, [sp, #12]
 801ed9c:	1a5b      	subs	r3, r3, r1
 801ed9e:	42ab      	cmp	r3, r5
 801eda0:	dcf2      	bgt.n	801ed88 <_printf_i+0x210>
 801eda2:	e7eb      	b.n	801ed7c <_printf_i+0x204>
 801eda4:	2500      	movs	r5, #0
 801eda6:	f104 0619 	add.w	r6, r4, #25
 801edaa:	e7f5      	b.n	801ed98 <_printf_i+0x220>
 801edac:	08068560 	.word	0x08068560
 801edb0:	08068571 	.word	0x08068571

0801edb4 <__sflush_r>:
 801edb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801edb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801edbc:	0716      	lsls	r6, r2, #28
 801edbe:	4605      	mov	r5, r0
 801edc0:	460c      	mov	r4, r1
 801edc2:	d454      	bmi.n	801ee6e <__sflush_r+0xba>
 801edc4:	684b      	ldr	r3, [r1, #4]
 801edc6:	2b00      	cmp	r3, #0
 801edc8:	dc02      	bgt.n	801edd0 <__sflush_r+0x1c>
 801edca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801edcc:	2b00      	cmp	r3, #0
 801edce:	dd48      	ble.n	801ee62 <__sflush_r+0xae>
 801edd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801edd2:	2e00      	cmp	r6, #0
 801edd4:	d045      	beq.n	801ee62 <__sflush_r+0xae>
 801edd6:	2300      	movs	r3, #0
 801edd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801eddc:	682f      	ldr	r7, [r5, #0]
 801edde:	6a21      	ldr	r1, [r4, #32]
 801ede0:	602b      	str	r3, [r5, #0]
 801ede2:	d030      	beq.n	801ee46 <__sflush_r+0x92>
 801ede4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ede6:	89a3      	ldrh	r3, [r4, #12]
 801ede8:	0759      	lsls	r1, r3, #29
 801edea:	d505      	bpl.n	801edf8 <__sflush_r+0x44>
 801edec:	6863      	ldr	r3, [r4, #4]
 801edee:	1ad2      	subs	r2, r2, r3
 801edf0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801edf2:	b10b      	cbz	r3, 801edf8 <__sflush_r+0x44>
 801edf4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801edf6:	1ad2      	subs	r2, r2, r3
 801edf8:	2300      	movs	r3, #0
 801edfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801edfc:	6a21      	ldr	r1, [r4, #32]
 801edfe:	4628      	mov	r0, r5
 801ee00:	47b0      	blx	r6
 801ee02:	1c43      	adds	r3, r0, #1
 801ee04:	89a3      	ldrh	r3, [r4, #12]
 801ee06:	d106      	bne.n	801ee16 <__sflush_r+0x62>
 801ee08:	6829      	ldr	r1, [r5, #0]
 801ee0a:	291d      	cmp	r1, #29
 801ee0c:	d82b      	bhi.n	801ee66 <__sflush_r+0xb2>
 801ee0e:	4a2a      	ldr	r2, [pc, #168]	@ (801eeb8 <__sflush_r+0x104>)
 801ee10:	40ca      	lsrs	r2, r1
 801ee12:	07d6      	lsls	r6, r2, #31
 801ee14:	d527      	bpl.n	801ee66 <__sflush_r+0xb2>
 801ee16:	2200      	movs	r2, #0
 801ee18:	6062      	str	r2, [r4, #4]
 801ee1a:	04d9      	lsls	r1, r3, #19
 801ee1c:	6922      	ldr	r2, [r4, #16]
 801ee1e:	6022      	str	r2, [r4, #0]
 801ee20:	d504      	bpl.n	801ee2c <__sflush_r+0x78>
 801ee22:	1c42      	adds	r2, r0, #1
 801ee24:	d101      	bne.n	801ee2a <__sflush_r+0x76>
 801ee26:	682b      	ldr	r3, [r5, #0]
 801ee28:	b903      	cbnz	r3, 801ee2c <__sflush_r+0x78>
 801ee2a:	6560      	str	r0, [r4, #84]	@ 0x54
 801ee2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ee2e:	602f      	str	r7, [r5, #0]
 801ee30:	b1b9      	cbz	r1, 801ee62 <__sflush_r+0xae>
 801ee32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ee36:	4299      	cmp	r1, r3
 801ee38:	d002      	beq.n	801ee40 <__sflush_r+0x8c>
 801ee3a:	4628      	mov	r0, r5
 801ee3c:	f7ff fb4a 	bl	801e4d4 <_free_r>
 801ee40:	2300      	movs	r3, #0
 801ee42:	6363      	str	r3, [r4, #52]	@ 0x34
 801ee44:	e00d      	b.n	801ee62 <__sflush_r+0xae>
 801ee46:	2301      	movs	r3, #1
 801ee48:	4628      	mov	r0, r5
 801ee4a:	47b0      	blx	r6
 801ee4c:	4602      	mov	r2, r0
 801ee4e:	1c50      	adds	r0, r2, #1
 801ee50:	d1c9      	bne.n	801ede6 <__sflush_r+0x32>
 801ee52:	682b      	ldr	r3, [r5, #0]
 801ee54:	2b00      	cmp	r3, #0
 801ee56:	d0c6      	beq.n	801ede6 <__sflush_r+0x32>
 801ee58:	2b1d      	cmp	r3, #29
 801ee5a:	d001      	beq.n	801ee60 <__sflush_r+0xac>
 801ee5c:	2b16      	cmp	r3, #22
 801ee5e:	d11e      	bne.n	801ee9e <__sflush_r+0xea>
 801ee60:	602f      	str	r7, [r5, #0]
 801ee62:	2000      	movs	r0, #0
 801ee64:	e022      	b.n	801eeac <__sflush_r+0xf8>
 801ee66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ee6a:	b21b      	sxth	r3, r3
 801ee6c:	e01b      	b.n	801eea6 <__sflush_r+0xf2>
 801ee6e:	690f      	ldr	r7, [r1, #16]
 801ee70:	2f00      	cmp	r7, #0
 801ee72:	d0f6      	beq.n	801ee62 <__sflush_r+0xae>
 801ee74:	0793      	lsls	r3, r2, #30
 801ee76:	680e      	ldr	r6, [r1, #0]
 801ee78:	bf08      	it	eq
 801ee7a:	694b      	ldreq	r3, [r1, #20]
 801ee7c:	600f      	str	r7, [r1, #0]
 801ee7e:	bf18      	it	ne
 801ee80:	2300      	movne	r3, #0
 801ee82:	eba6 0807 	sub.w	r8, r6, r7
 801ee86:	608b      	str	r3, [r1, #8]
 801ee88:	f1b8 0f00 	cmp.w	r8, #0
 801ee8c:	dde9      	ble.n	801ee62 <__sflush_r+0xae>
 801ee8e:	6a21      	ldr	r1, [r4, #32]
 801ee90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ee92:	4643      	mov	r3, r8
 801ee94:	463a      	mov	r2, r7
 801ee96:	4628      	mov	r0, r5
 801ee98:	47b0      	blx	r6
 801ee9a:	2800      	cmp	r0, #0
 801ee9c:	dc08      	bgt.n	801eeb0 <__sflush_r+0xfc>
 801ee9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801eea6:	81a3      	strh	r3, [r4, #12]
 801eea8:	f04f 30ff 	mov.w	r0, #4294967295
 801eeac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eeb0:	4407      	add	r7, r0
 801eeb2:	eba8 0800 	sub.w	r8, r8, r0
 801eeb6:	e7e7      	b.n	801ee88 <__sflush_r+0xd4>
 801eeb8:	20400001 	.word	0x20400001

0801eebc <_fflush_r>:
 801eebc:	b538      	push	{r3, r4, r5, lr}
 801eebe:	690b      	ldr	r3, [r1, #16]
 801eec0:	4605      	mov	r5, r0
 801eec2:	460c      	mov	r4, r1
 801eec4:	b913      	cbnz	r3, 801eecc <_fflush_r+0x10>
 801eec6:	2500      	movs	r5, #0
 801eec8:	4628      	mov	r0, r5
 801eeca:	bd38      	pop	{r3, r4, r5, pc}
 801eecc:	b118      	cbz	r0, 801eed6 <_fflush_r+0x1a>
 801eece:	6a03      	ldr	r3, [r0, #32]
 801eed0:	b90b      	cbnz	r3, 801eed6 <_fflush_r+0x1a>
 801eed2:	f7ff f905 	bl	801e0e0 <__sinit>
 801eed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eeda:	2b00      	cmp	r3, #0
 801eedc:	d0f3      	beq.n	801eec6 <_fflush_r+0xa>
 801eede:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801eee0:	07d0      	lsls	r0, r2, #31
 801eee2:	d404      	bmi.n	801eeee <_fflush_r+0x32>
 801eee4:	0599      	lsls	r1, r3, #22
 801eee6:	d402      	bmi.n	801eeee <_fflush_r+0x32>
 801eee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801eeea:	f7ff fac4 	bl	801e476 <__retarget_lock_acquire_recursive>
 801eeee:	4628      	mov	r0, r5
 801eef0:	4621      	mov	r1, r4
 801eef2:	f7ff ff5f 	bl	801edb4 <__sflush_r>
 801eef6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801eef8:	07da      	lsls	r2, r3, #31
 801eefa:	4605      	mov	r5, r0
 801eefc:	d4e4      	bmi.n	801eec8 <_fflush_r+0xc>
 801eefe:	89a3      	ldrh	r3, [r4, #12]
 801ef00:	059b      	lsls	r3, r3, #22
 801ef02:	d4e1      	bmi.n	801eec8 <_fflush_r+0xc>
 801ef04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ef06:	f7ff fab7 	bl	801e478 <__retarget_lock_release_recursive>
 801ef0a:	e7dd      	b.n	801eec8 <_fflush_r+0xc>

0801ef0c <fiprintf>:
 801ef0c:	b40e      	push	{r1, r2, r3}
 801ef0e:	b503      	push	{r0, r1, lr}
 801ef10:	4601      	mov	r1, r0
 801ef12:	ab03      	add	r3, sp, #12
 801ef14:	4805      	ldr	r0, [pc, #20]	@ (801ef2c <fiprintf+0x20>)
 801ef16:	f853 2b04 	ldr.w	r2, [r3], #4
 801ef1a:	6800      	ldr	r0, [r0, #0]
 801ef1c:	9301      	str	r3, [sp, #4]
 801ef1e:	f7ff fca5 	bl	801e86c <_vfiprintf_r>
 801ef22:	b002      	add	sp, #8
 801ef24:	f85d eb04 	ldr.w	lr, [sp], #4
 801ef28:	b003      	add	sp, #12
 801ef2a:	4770      	bx	lr
 801ef2c:	20000144 	.word	0x20000144

0801ef30 <__swbuf_r>:
 801ef30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef32:	460e      	mov	r6, r1
 801ef34:	4614      	mov	r4, r2
 801ef36:	4605      	mov	r5, r0
 801ef38:	b118      	cbz	r0, 801ef42 <__swbuf_r+0x12>
 801ef3a:	6a03      	ldr	r3, [r0, #32]
 801ef3c:	b90b      	cbnz	r3, 801ef42 <__swbuf_r+0x12>
 801ef3e:	f7ff f8cf 	bl	801e0e0 <__sinit>
 801ef42:	69a3      	ldr	r3, [r4, #24]
 801ef44:	60a3      	str	r3, [r4, #8]
 801ef46:	89a3      	ldrh	r3, [r4, #12]
 801ef48:	071a      	lsls	r2, r3, #28
 801ef4a:	d501      	bpl.n	801ef50 <__swbuf_r+0x20>
 801ef4c:	6923      	ldr	r3, [r4, #16]
 801ef4e:	b943      	cbnz	r3, 801ef62 <__swbuf_r+0x32>
 801ef50:	4621      	mov	r1, r4
 801ef52:	4628      	mov	r0, r5
 801ef54:	f000 f82a 	bl	801efac <__swsetup_r>
 801ef58:	b118      	cbz	r0, 801ef62 <__swbuf_r+0x32>
 801ef5a:	f04f 37ff 	mov.w	r7, #4294967295
 801ef5e:	4638      	mov	r0, r7
 801ef60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ef62:	6823      	ldr	r3, [r4, #0]
 801ef64:	6922      	ldr	r2, [r4, #16]
 801ef66:	1a98      	subs	r0, r3, r2
 801ef68:	6963      	ldr	r3, [r4, #20]
 801ef6a:	b2f6      	uxtb	r6, r6
 801ef6c:	4283      	cmp	r3, r0
 801ef6e:	4637      	mov	r7, r6
 801ef70:	dc05      	bgt.n	801ef7e <__swbuf_r+0x4e>
 801ef72:	4621      	mov	r1, r4
 801ef74:	4628      	mov	r0, r5
 801ef76:	f7ff ffa1 	bl	801eebc <_fflush_r>
 801ef7a:	2800      	cmp	r0, #0
 801ef7c:	d1ed      	bne.n	801ef5a <__swbuf_r+0x2a>
 801ef7e:	68a3      	ldr	r3, [r4, #8]
 801ef80:	3b01      	subs	r3, #1
 801ef82:	60a3      	str	r3, [r4, #8]
 801ef84:	6823      	ldr	r3, [r4, #0]
 801ef86:	1c5a      	adds	r2, r3, #1
 801ef88:	6022      	str	r2, [r4, #0]
 801ef8a:	701e      	strb	r6, [r3, #0]
 801ef8c:	6962      	ldr	r2, [r4, #20]
 801ef8e:	1c43      	adds	r3, r0, #1
 801ef90:	429a      	cmp	r2, r3
 801ef92:	d004      	beq.n	801ef9e <__swbuf_r+0x6e>
 801ef94:	89a3      	ldrh	r3, [r4, #12]
 801ef96:	07db      	lsls	r3, r3, #31
 801ef98:	d5e1      	bpl.n	801ef5e <__swbuf_r+0x2e>
 801ef9a:	2e0a      	cmp	r6, #10
 801ef9c:	d1df      	bne.n	801ef5e <__swbuf_r+0x2e>
 801ef9e:	4621      	mov	r1, r4
 801efa0:	4628      	mov	r0, r5
 801efa2:	f7ff ff8b 	bl	801eebc <_fflush_r>
 801efa6:	2800      	cmp	r0, #0
 801efa8:	d0d9      	beq.n	801ef5e <__swbuf_r+0x2e>
 801efaa:	e7d6      	b.n	801ef5a <__swbuf_r+0x2a>

0801efac <__swsetup_r>:
 801efac:	b538      	push	{r3, r4, r5, lr}
 801efae:	4b29      	ldr	r3, [pc, #164]	@ (801f054 <__swsetup_r+0xa8>)
 801efb0:	4605      	mov	r5, r0
 801efb2:	6818      	ldr	r0, [r3, #0]
 801efb4:	460c      	mov	r4, r1
 801efb6:	b118      	cbz	r0, 801efc0 <__swsetup_r+0x14>
 801efb8:	6a03      	ldr	r3, [r0, #32]
 801efba:	b90b      	cbnz	r3, 801efc0 <__swsetup_r+0x14>
 801efbc:	f7ff f890 	bl	801e0e0 <__sinit>
 801efc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801efc4:	0719      	lsls	r1, r3, #28
 801efc6:	d422      	bmi.n	801f00e <__swsetup_r+0x62>
 801efc8:	06da      	lsls	r2, r3, #27
 801efca:	d407      	bmi.n	801efdc <__swsetup_r+0x30>
 801efcc:	2209      	movs	r2, #9
 801efce:	602a      	str	r2, [r5, #0]
 801efd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801efd4:	81a3      	strh	r3, [r4, #12]
 801efd6:	f04f 30ff 	mov.w	r0, #4294967295
 801efda:	e033      	b.n	801f044 <__swsetup_r+0x98>
 801efdc:	0758      	lsls	r0, r3, #29
 801efde:	d512      	bpl.n	801f006 <__swsetup_r+0x5a>
 801efe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801efe2:	b141      	cbz	r1, 801eff6 <__swsetup_r+0x4a>
 801efe4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801efe8:	4299      	cmp	r1, r3
 801efea:	d002      	beq.n	801eff2 <__swsetup_r+0x46>
 801efec:	4628      	mov	r0, r5
 801efee:	f7ff fa71 	bl	801e4d4 <_free_r>
 801eff2:	2300      	movs	r3, #0
 801eff4:	6363      	str	r3, [r4, #52]	@ 0x34
 801eff6:	89a3      	ldrh	r3, [r4, #12]
 801eff8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801effc:	81a3      	strh	r3, [r4, #12]
 801effe:	2300      	movs	r3, #0
 801f000:	6063      	str	r3, [r4, #4]
 801f002:	6923      	ldr	r3, [r4, #16]
 801f004:	6023      	str	r3, [r4, #0]
 801f006:	89a3      	ldrh	r3, [r4, #12]
 801f008:	f043 0308 	orr.w	r3, r3, #8
 801f00c:	81a3      	strh	r3, [r4, #12]
 801f00e:	6923      	ldr	r3, [r4, #16]
 801f010:	b94b      	cbnz	r3, 801f026 <__swsetup_r+0x7a>
 801f012:	89a3      	ldrh	r3, [r4, #12]
 801f014:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801f018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f01c:	d003      	beq.n	801f026 <__swsetup_r+0x7a>
 801f01e:	4621      	mov	r1, r4
 801f020:	4628      	mov	r0, r5
 801f022:	f000 f874 	bl	801f10e <__smakebuf_r>
 801f026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f02a:	f013 0201 	ands.w	r2, r3, #1
 801f02e:	d00a      	beq.n	801f046 <__swsetup_r+0x9a>
 801f030:	2200      	movs	r2, #0
 801f032:	60a2      	str	r2, [r4, #8]
 801f034:	6962      	ldr	r2, [r4, #20]
 801f036:	4252      	negs	r2, r2
 801f038:	61a2      	str	r2, [r4, #24]
 801f03a:	6922      	ldr	r2, [r4, #16]
 801f03c:	b942      	cbnz	r2, 801f050 <__swsetup_r+0xa4>
 801f03e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801f042:	d1c5      	bne.n	801efd0 <__swsetup_r+0x24>
 801f044:	bd38      	pop	{r3, r4, r5, pc}
 801f046:	0799      	lsls	r1, r3, #30
 801f048:	bf58      	it	pl
 801f04a:	6962      	ldrpl	r2, [r4, #20]
 801f04c:	60a2      	str	r2, [r4, #8]
 801f04e:	e7f4      	b.n	801f03a <__swsetup_r+0x8e>
 801f050:	2000      	movs	r0, #0
 801f052:	e7f7      	b.n	801f044 <__swsetup_r+0x98>
 801f054:	20000144 	.word	0x20000144

0801f058 <abort>:
 801f058:	b508      	push	{r3, lr}
 801f05a:	2006      	movs	r0, #6
 801f05c:	f000 f8bc 	bl	801f1d8 <raise>
 801f060:	2001      	movs	r0, #1
 801f062:	f7e3 f859 	bl	8002118 <_exit>

0801f066 <_realloc_r>:
 801f066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f06a:	4607      	mov	r7, r0
 801f06c:	4614      	mov	r4, r2
 801f06e:	460d      	mov	r5, r1
 801f070:	b921      	cbnz	r1, 801f07c <_realloc_r+0x16>
 801f072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f076:	4611      	mov	r1, r2
 801f078:	f7fe bedc 	b.w	801de34 <_malloc_r>
 801f07c:	b92a      	cbnz	r2, 801f08a <_realloc_r+0x24>
 801f07e:	f7ff fa29 	bl	801e4d4 <_free_r>
 801f082:	4625      	mov	r5, r4
 801f084:	4628      	mov	r0, r5
 801f086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f08a:	f000 f8e3 	bl	801f254 <_malloc_usable_size_r>
 801f08e:	4284      	cmp	r4, r0
 801f090:	4606      	mov	r6, r0
 801f092:	d802      	bhi.n	801f09a <_realloc_r+0x34>
 801f094:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f098:	d8f4      	bhi.n	801f084 <_realloc_r+0x1e>
 801f09a:	4621      	mov	r1, r4
 801f09c:	4638      	mov	r0, r7
 801f09e:	f7fe fec9 	bl	801de34 <_malloc_r>
 801f0a2:	4680      	mov	r8, r0
 801f0a4:	b908      	cbnz	r0, 801f0aa <_realloc_r+0x44>
 801f0a6:	4645      	mov	r5, r8
 801f0a8:	e7ec      	b.n	801f084 <_realloc_r+0x1e>
 801f0aa:	42b4      	cmp	r4, r6
 801f0ac:	4622      	mov	r2, r4
 801f0ae:	4629      	mov	r1, r5
 801f0b0:	bf28      	it	cs
 801f0b2:	4632      	movcs	r2, r6
 801f0b4:	f7ff f9e1 	bl	801e47a <memcpy>
 801f0b8:	4629      	mov	r1, r5
 801f0ba:	4638      	mov	r0, r7
 801f0bc:	f7ff fa0a 	bl	801e4d4 <_free_r>
 801f0c0:	e7f1      	b.n	801f0a6 <_realloc_r+0x40>

0801f0c2 <__swhatbuf_r>:
 801f0c2:	b570      	push	{r4, r5, r6, lr}
 801f0c4:	460c      	mov	r4, r1
 801f0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f0ca:	2900      	cmp	r1, #0
 801f0cc:	b096      	sub	sp, #88	@ 0x58
 801f0ce:	4615      	mov	r5, r2
 801f0d0:	461e      	mov	r6, r3
 801f0d2:	da0d      	bge.n	801f0f0 <__swhatbuf_r+0x2e>
 801f0d4:	89a3      	ldrh	r3, [r4, #12]
 801f0d6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801f0da:	f04f 0100 	mov.w	r1, #0
 801f0de:	bf14      	ite	ne
 801f0e0:	2340      	movne	r3, #64	@ 0x40
 801f0e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801f0e6:	2000      	movs	r0, #0
 801f0e8:	6031      	str	r1, [r6, #0]
 801f0ea:	602b      	str	r3, [r5, #0]
 801f0ec:	b016      	add	sp, #88	@ 0x58
 801f0ee:	bd70      	pop	{r4, r5, r6, pc}
 801f0f0:	466a      	mov	r2, sp
 801f0f2:	f000 f879 	bl	801f1e8 <_fstat_r>
 801f0f6:	2800      	cmp	r0, #0
 801f0f8:	dbec      	blt.n	801f0d4 <__swhatbuf_r+0x12>
 801f0fa:	9901      	ldr	r1, [sp, #4]
 801f0fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801f100:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801f104:	4259      	negs	r1, r3
 801f106:	4159      	adcs	r1, r3
 801f108:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f10c:	e7eb      	b.n	801f0e6 <__swhatbuf_r+0x24>

0801f10e <__smakebuf_r>:
 801f10e:	898b      	ldrh	r3, [r1, #12]
 801f110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f112:	079d      	lsls	r5, r3, #30
 801f114:	4606      	mov	r6, r0
 801f116:	460c      	mov	r4, r1
 801f118:	d507      	bpl.n	801f12a <__smakebuf_r+0x1c>
 801f11a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801f11e:	6023      	str	r3, [r4, #0]
 801f120:	6123      	str	r3, [r4, #16]
 801f122:	2301      	movs	r3, #1
 801f124:	6163      	str	r3, [r4, #20]
 801f126:	b003      	add	sp, #12
 801f128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f12a:	ab01      	add	r3, sp, #4
 801f12c:	466a      	mov	r2, sp
 801f12e:	f7ff ffc8 	bl	801f0c2 <__swhatbuf_r>
 801f132:	9f00      	ldr	r7, [sp, #0]
 801f134:	4605      	mov	r5, r0
 801f136:	4639      	mov	r1, r7
 801f138:	4630      	mov	r0, r6
 801f13a:	f7fe fe7b 	bl	801de34 <_malloc_r>
 801f13e:	b948      	cbnz	r0, 801f154 <__smakebuf_r+0x46>
 801f140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f144:	059a      	lsls	r2, r3, #22
 801f146:	d4ee      	bmi.n	801f126 <__smakebuf_r+0x18>
 801f148:	f023 0303 	bic.w	r3, r3, #3
 801f14c:	f043 0302 	orr.w	r3, r3, #2
 801f150:	81a3      	strh	r3, [r4, #12]
 801f152:	e7e2      	b.n	801f11a <__smakebuf_r+0xc>
 801f154:	89a3      	ldrh	r3, [r4, #12]
 801f156:	6020      	str	r0, [r4, #0]
 801f158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f15c:	81a3      	strh	r3, [r4, #12]
 801f15e:	9b01      	ldr	r3, [sp, #4]
 801f160:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801f164:	b15b      	cbz	r3, 801f17e <__smakebuf_r+0x70>
 801f166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f16a:	4630      	mov	r0, r6
 801f16c:	f000 f84e 	bl	801f20c <_isatty_r>
 801f170:	b128      	cbz	r0, 801f17e <__smakebuf_r+0x70>
 801f172:	89a3      	ldrh	r3, [r4, #12]
 801f174:	f023 0303 	bic.w	r3, r3, #3
 801f178:	f043 0301 	orr.w	r3, r3, #1
 801f17c:	81a3      	strh	r3, [r4, #12]
 801f17e:	89a3      	ldrh	r3, [r4, #12]
 801f180:	431d      	orrs	r5, r3
 801f182:	81a5      	strh	r5, [r4, #12]
 801f184:	e7cf      	b.n	801f126 <__smakebuf_r+0x18>

0801f186 <_raise_r>:
 801f186:	291f      	cmp	r1, #31
 801f188:	b538      	push	{r3, r4, r5, lr}
 801f18a:	4605      	mov	r5, r0
 801f18c:	460c      	mov	r4, r1
 801f18e:	d904      	bls.n	801f19a <_raise_r+0x14>
 801f190:	2316      	movs	r3, #22
 801f192:	6003      	str	r3, [r0, #0]
 801f194:	f04f 30ff 	mov.w	r0, #4294967295
 801f198:	bd38      	pop	{r3, r4, r5, pc}
 801f19a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801f19c:	b112      	cbz	r2, 801f1a4 <_raise_r+0x1e>
 801f19e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f1a2:	b94b      	cbnz	r3, 801f1b8 <_raise_r+0x32>
 801f1a4:	4628      	mov	r0, r5
 801f1a6:	f000 f853 	bl	801f250 <_getpid_r>
 801f1aa:	4622      	mov	r2, r4
 801f1ac:	4601      	mov	r1, r0
 801f1ae:	4628      	mov	r0, r5
 801f1b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f1b4:	f000 b83a 	b.w	801f22c <_kill_r>
 801f1b8:	2b01      	cmp	r3, #1
 801f1ba:	d00a      	beq.n	801f1d2 <_raise_r+0x4c>
 801f1bc:	1c59      	adds	r1, r3, #1
 801f1be:	d103      	bne.n	801f1c8 <_raise_r+0x42>
 801f1c0:	2316      	movs	r3, #22
 801f1c2:	6003      	str	r3, [r0, #0]
 801f1c4:	2001      	movs	r0, #1
 801f1c6:	e7e7      	b.n	801f198 <_raise_r+0x12>
 801f1c8:	2100      	movs	r1, #0
 801f1ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801f1ce:	4620      	mov	r0, r4
 801f1d0:	4798      	blx	r3
 801f1d2:	2000      	movs	r0, #0
 801f1d4:	e7e0      	b.n	801f198 <_raise_r+0x12>
	...

0801f1d8 <raise>:
 801f1d8:	4b02      	ldr	r3, [pc, #8]	@ (801f1e4 <raise+0xc>)
 801f1da:	4601      	mov	r1, r0
 801f1dc:	6818      	ldr	r0, [r3, #0]
 801f1de:	f7ff bfd2 	b.w	801f186 <_raise_r>
 801f1e2:	bf00      	nop
 801f1e4:	20000144 	.word	0x20000144

0801f1e8 <_fstat_r>:
 801f1e8:	b538      	push	{r3, r4, r5, lr}
 801f1ea:	4d07      	ldr	r5, [pc, #28]	@ (801f208 <_fstat_r+0x20>)
 801f1ec:	2300      	movs	r3, #0
 801f1ee:	4604      	mov	r4, r0
 801f1f0:	4608      	mov	r0, r1
 801f1f2:	4611      	mov	r1, r2
 801f1f4:	602b      	str	r3, [r5, #0]
 801f1f6:	f7e2 ffdf 	bl	80021b8 <_fstat>
 801f1fa:	1c43      	adds	r3, r0, #1
 801f1fc:	d102      	bne.n	801f204 <_fstat_r+0x1c>
 801f1fe:	682b      	ldr	r3, [r5, #0]
 801f200:	b103      	cbz	r3, 801f204 <_fstat_r+0x1c>
 801f202:	6023      	str	r3, [r4, #0]
 801f204:	bd38      	pop	{r3, r4, r5, pc}
 801f206:	bf00      	nop
 801f208:	20010150 	.word	0x20010150

0801f20c <_isatty_r>:
 801f20c:	b538      	push	{r3, r4, r5, lr}
 801f20e:	4d06      	ldr	r5, [pc, #24]	@ (801f228 <_isatty_r+0x1c>)
 801f210:	2300      	movs	r3, #0
 801f212:	4604      	mov	r4, r0
 801f214:	4608      	mov	r0, r1
 801f216:	602b      	str	r3, [r5, #0]
 801f218:	f7e2 ffde 	bl	80021d8 <_isatty>
 801f21c:	1c43      	adds	r3, r0, #1
 801f21e:	d102      	bne.n	801f226 <_isatty_r+0x1a>
 801f220:	682b      	ldr	r3, [r5, #0]
 801f222:	b103      	cbz	r3, 801f226 <_isatty_r+0x1a>
 801f224:	6023      	str	r3, [r4, #0]
 801f226:	bd38      	pop	{r3, r4, r5, pc}
 801f228:	20010150 	.word	0x20010150

0801f22c <_kill_r>:
 801f22c:	b538      	push	{r3, r4, r5, lr}
 801f22e:	4d07      	ldr	r5, [pc, #28]	@ (801f24c <_kill_r+0x20>)
 801f230:	2300      	movs	r3, #0
 801f232:	4604      	mov	r4, r0
 801f234:	4608      	mov	r0, r1
 801f236:	4611      	mov	r1, r2
 801f238:	602b      	str	r3, [r5, #0]
 801f23a:	f7e2 ff5b 	bl	80020f4 <_kill>
 801f23e:	1c43      	adds	r3, r0, #1
 801f240:	d102      	bne.n	801f248 <_kill_r+0x1c>
 801f242:	682b      	ldr	r3, [r5, #0]
 801f244:	b103      	cbz	r3, 801f248 <_kill_r+0x1c>
 801f246:	6023      	str	r3, [r4, #0]
 801f248:	bd38      	pop	{r3, r4, r5, pc}
 801f24a:	bf00      	nop
 801f24c:	20010150 	.word	0x20010150

0801f250 <_getpid_r>:
 801f250:	f7e2 bf48 	b.w	80020e4 <_getpid>

0801f254 <_malloc_usable_size_r>:
 801f254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f258:	1f18      	subs	r0, r3, #4
 801f25a:	2b00      	cmp	r3, #0
 801f25c:	bfbc      	itt	lt
 801f25e:	580b      	ldrlt	r3, [r1, r0]
 801f260:	18c0      	addlt	r0, r0, r3
 801f262:	4770      	bx	lr

0801f264 <_init>:
 801f264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f266:	bf00      	nop
 801f268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f26a:	bc08      	pop	{r3}
 801f26c:	469e      	mov	lr, r3
 801f26e:	4770      	bx	lr

0801f270 <_fini>:
 801f270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f272:	bf00      	nop
 801f274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f276:	bc08      	pop	{r3}
 801f278:	469e      	mov	lr, r3
 801f27a:	4770      	bx	lr
